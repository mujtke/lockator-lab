/* Generated by Frama-C */

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef signed char s8;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned char u8;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned short u16;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef int s32;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned int u32;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef long long s64;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __le16;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __be16;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __le32;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __be32;

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u64 __le64;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __wsum;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 __kernel_dev_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_dev_t dev_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned short umode_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_pid_t pid_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef _Bool bool;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_uid32_t uid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_gid32_t gid_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_loff_t loff_t;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_size_t size_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_time_t time_t;

#line 92  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long ulong;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __s32 int32_t;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u8 uint8_t;

#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 uint32_t;

#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u64 uint64_t;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long sector_t;

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long blkcnt_t;

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 dma_addr_t;

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int gfp_t;

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int fmode_t;

#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int oom_flags_t;

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 phys_addr_t;

#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef phys_addr_t resource_size_t;

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};

#line 188 
struct hlist_node;

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
};

#line 14  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_minidump.c.aux"
struct kernel_symbol {
   unsigned long value ;
   char const *name ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
struct module;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_9 {
   unsigned int a ;
   unsigned int b ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_10 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base1 : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) type : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) s : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) dpl : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) p : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) limit : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) avl : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) g : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base2 : 8 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
union __anonunion_8 {
   struct __anonstruct_9 __anonCompField___anonunion_8_4 ;
   struct __anonstruct_10 __anonCompField___anonunion_8_5 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_8 __anonCompField_desc_struct_6 ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pteval_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_11 {
   pteval_t pte ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_11 pte_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_12 {
   pgdval_t pgd ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_12 pgd_t;

#line 361 
struct page;

#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;

#line 372 
struct file;

#line 385 
struct seq_file;

#line 423 
struct thread_struct;

#line 425 
struct mm_struct;

#line 426 
struct task_struct;

#line 427 
struct cpumask;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/spinlock_types.h"
struct qspinlock {
   atomic_t val ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
struct qrwlock {
   atomic_t cnts ;
   arch_spinlock_t lock ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/init.h"
typedef void (*ctor_fn_t)(void);

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
struct device;

#line 54 
struct net_device;

#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct file_operations;

#line 432 
struct completion;

#line 555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct timespec;

#line 103 
struct compat_timespec;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_futex_16 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_nanosleep_17 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};

#line 104 
struct pollfd;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_poll_18 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
union __anonunion_15 {
   struct __anonstruct_futex_16 futex ;
   struct __anonstruct_nanosleep_17 nanosleep ;
   struct __anonstruct_poll_18 poll ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_15 __anonCompField_restart_block_7 ;
};

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
union __anonunion_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_19 __anonCompField_math_emu_info_8 ;
};

#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[128U] ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/special_insns.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_29 {
   u64 rip ;
   u64 rdp ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_30 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_28 {
   struct __anonstruct_29 __anonCompField___anonunion_28_12 ;
   struct __anonstruct_30 __anonCompField___anonunion_28_13 ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_31 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_28 __anonCompField_fxregs_state_14 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_31 __anonCompField_fxregs_state_15 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 __reserved[464U] ;
};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned char fpstate_active ;
   unsigned char fpregs_active ;
   unsigned char counter ;
   union fpregs_state state ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct seq_operations;

#line 369 
struct perf_event;

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   struct fpu fpu ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
struct lockdep_map;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const *name ;
   int cpu ;
   unsigned long ip ;
};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))) class_idx : 13 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_context : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) trylock : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) read : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) check : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hardirqs_off : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(12))) references : 12 ;
   unsigned int pin_count ;
};

#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct __anonstruct_35 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
union __anonunion_34 {
   struct raw_spinlock rlock ;
   struct __anonstruct_35 __anonCompField___anonunion_34_17 ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_34 __anonCompField_spinlock_18 ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_36 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_36 rwlock_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jump_label.h"
struct jump_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct mutex;

#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/stat.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_45 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_45 seqlock_t;

#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highuid.h"
struct user_namespace;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kuid_t_46 {
   uid_t val ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_46 kuid_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kgid_t_47 {
   gid_t val ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_47 kgid_t;

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct vm_area_struct;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_48 {
   unsigned long bits[16U] ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_48 nodemask_t;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   void *magic ;
   struct lockdep_map dep_map ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};

#line 197 
struct rw_semaphore;

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   struct list_head wait_list ;
   raw_spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct task_struct *owner ;
   struct lockdep_map dep_map ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};

#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
typedef union ktime ktime_t;

#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct notifier_block;

#line 1121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(unsigned long ) ;
   unsigned long data ;
   u32 flags ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};

#line 238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct hrtimer;

#line 239 
enum hrtimer_restart;

#line 240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};

#line 837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/sysctl.h"
struct ctl_table;

#line 838 
struct nsproxy;

#line 839 
struct ctl_table_root;

#line 840 
struct ctl_table_header;

#line 841 
struct ctl_dir;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);

#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table {
   char const *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct __anonstruct_50 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
union __anonunion_49 {
   struct __anonstruct_50 __anonCompField___anonunion_49_19 ;
   struct callback_head rcu ;
};

#line 122 
struct ctl_table_set;

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_49 __anonCompField_ctl_table_header_20 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};

#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};

#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *, struct nsproxy *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};

#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct workqueue_struct;

#line 260 
struct work_struct;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/x86_init.h"
struct pci_dev;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_message {
   int event ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
typedef struct pm_message pm_message_t;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};

#line 320 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};

#line 327 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};

#line 335 
struct wakeup_source;

#line 336 
struct wake_irq;

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};

#line 553 
struct dev_pm_qos;

#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) can_wakeup : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) async_suspend : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_prepared : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_noirq_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_late_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_children : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) early_init : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) direct_complete : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_path : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) disable_depth : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) idle_notification : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) request_pending : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) deferred_resume : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) run_wake : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_auto : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_callbacks : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_safe : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) use_autosuspend : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) timer_autosuspends : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};

#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/topology.h"
struct pci_bus;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct ldt_struct;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_115 {
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   atomic_t perf_rdpmc_allowed ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_115 mm_context_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/xen/features.h"
struct bio_vec;

#line 1281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct llist_node;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmod.h"
struct cred;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/elf.h"
struct inode;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};

#line 66 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_148 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_149 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
union __anonunion_147 {
   struct __anonstruct_148 __anonCompField___anonunion_147_33 ;
   struct __anonstruct_149 __anonCompField___anonunion_147_34 ;
};

#line 73 
struct uprobe;

#line 73 
struct return_instance;

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_147 __anonCompField_uprobe_task_35 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct xol_area;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};

#line 133 
struct address_space;

#line 134 
struct mem_cgroup;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
typedef void compound_page_dtor(struct page *);

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_150 {
   struct address_space *mapping ;
   void *s_mem ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_152 {
   unsigned long index ;
   void *freelist ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_156 {
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) inuse : 16 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(15))) objects : 15 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) frozen : 1 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_155 {
   atomic_t _mapcount ;
   struct __anonstruct_156 __anonCompField___anonunion_155_38 ;
   int units ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_154 {
   union __anonunion_155 __anonCompField___anonstruct_154_39 ;
   atomic_t _count ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_153 {
   unsigned long counters ;
   struct __anonstruct_154 __anonCompField___anonunion_153_40 ;
   unsigned int active ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_151 {
   union __anonunion_152 __anonCompField___anonstruct_151_37 ;
   union __anonunion_153 __anonCompField___anonstruct_151_41 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_158 {
   struct page *next ;
   int pages ;
   int pobjects ;
};

#line 32 
struct slab;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_159 {
   compound_page_dtor *compound_dtor ;
   unsigned long compound_order ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_157 {
   struct list_head lru ;
   struct __anonstruct_158 __anonCompField___anonunion_157_43 ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   struct __anonstruct_159 __anonCompField___anonunion_157_44 ;
   pgtable_t pmd_huge_pte ;
};

#line 32 
struct kmem_cache;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_160 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_150 __anonCompField_page_36 ;
   struct __anonstruct_151 __anonCompField_page_42 ;
   union __anonunion_157 __anonCompField_page_45 ;
   union __anonunion_160 __anonCompField_page_46 ;
   struct mem_cgroup *mem_cgroup ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_shared_161 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};

#line 257 
struct anon_vma;

#line 257 
struct vm_operations_struct;

#line 257 
struct mempolicy;

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_161 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct const *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};

#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};

#line 357 
struct kioctx_table;

#line 358 
struct linux_binfmt;

#line 358 
struct mmu_notifier_mm;

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u32 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   atomic_long_t nr_pmds ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
   void *bd_addr ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;

#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
union __anonunion_166 {
   unsigned long bitmap[4U] ;
   struct callback_head callback_head ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
struct idr_layer {
   int prefix ;
   int layer ;
   struct idr_layer *ary[256U] ;
   int count ;
   union __anonunion_166 __anonCompField_idr_layer_47 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   int layers ;
   int cur ;
   spinlock_t lock ;
   int id_free_cnt ;
   struct idr_layer *id_free ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};

#line 185 
struct dentry;

#line 186 
struct iattr;

#line 187 
struct super_block;

#line 188 
struct file_system_type;

#line 189 
struct kernfs_open_node;

#line 190 
struct kernfs_iattrs;

#line 213 
struct kernfs_root;

#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};

#line 89 
struct kernfs_ops;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops const *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
union __anonunion_171 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const *name ;
   struct rb_node rb ;
   void const *ns ;
   unsigned int hash ;
   union __anonunion_171 __anonCompField_kernfs_node_48 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root *, int *, char *) ;
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char const *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char const *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct const *vm_ops ;
};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};

#line 477 
struct sock;

#line 478 
struct kobject;

#line 479 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};

#line 485  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const *(*netlink_ns)(struct sock *) ;
   void const *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct bin_attribute;

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct attribute {
   char const *name ;
   umode_t mode ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct attribute_group {
   char const *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char const *, size_t ) ;
};

#line 509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};

#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
enum kobject_action {
    KOBJ_ADD = 0,
    KOBJ_REMOVE = 1,
    KOBJ_CHANGE = 2,
    KOBJ_MOVE = 3,
    KOBJ_ONLINE = 4,
    KOBJ_OFFLINE = 5,
    KOBJ_MAX = 6
};

#line 52 
struct kset;

#line 52 
struct kobj_type;

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobject {
   char const *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_initialized : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_in_sysfs : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_add_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_remove_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) uevent_suppress : 1 ;
};

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops const *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations const *(*child_ns_type)(struct kobject *) ;
   void const *(*namespace)(struct kobject *) ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const filter)(struct kset *, struct kobject *) ;
   char const *(* const name)(struct kset *, struct kobject *) ;
   int (* const uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops const *uevent_ops ;
};

#line 223 
struct kernel_param;

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const *, struct kernel_param const *) ;
   int (*get)(char *, struct kernel_param const *) ;
   void (*free)(void *) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string;

#line 62 
struct kparam_array;

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
union __anonunion_172 {
   void *arg ;
   struct kparam_string const *str ;
   struct kparam_array const *arr ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kernel_param {
   char const *name ;
   struct module *mod ;
   struct kernel_param_ops const *ops ;
   u16 const perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_172 __anonCompField_kernel_param_49 ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops const *ops ;
   void *elem ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree_latch.h"
struct mod_arch_specific {
   
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_param_attrs;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char const *, size_t ) ;
   void (*setup)(struct module *, char const *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};

#line 74 
struct exception_table_entry;

#line 290 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};

#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};

#line 304 
struct module_sect_attrs;

#line 304 
struct module_notes_attrs;

#line 304 
struct tracepoint;

#line 304 
struct trace_event_call;

#line 304 
struct trace_enum_map;

#line 304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const *version ;
   char const *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol const *syms ;
   unsigned long const *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol const *gpl_syms ;
   unsigned long const *gpl_crcs ;
   struct kernel_symbol const *unused_syms ;
   unsigned long const *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol const *unused_gpl_syms ;
   unsigned long const *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol const *gpl_future_syms ;
   unsigned long const *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_tree_node mtn_core ;
   struct mod_tree_node mtn_init ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_enum_map **trace_enums ;
   unsigned int num_trace_enums ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp_alive ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const *data ;
};

#line 652 
struct klist_node;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};

#line 67 
struct path;

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations const *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};

#line 222 
struct pinctrl;

#line 223 
struct pinctrl_state;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dma_map_ops;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/device.h"
struct device_driver;

#line 16 
struct driver_private;

#line 17 
struct class;

#line 18 
struct subsys_private;

#line 19 
struct bus_type;

#line 20 
struct device_node;

#line 21 
struct fwnode_handle;

#line 22 
struct iommu_ops;

#line 23 
struct iommu_group;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct bus_type {
   char const *name ;
   char const *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group const **bus_groups ;
   struct attribute_group const **dev_groups ;
   struct attribute_group const **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct iommu_ops const *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};

#line 139 
struct device_type;

#line 197 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_driver {
   char const *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id const *of_match_table ;
   struct acpi_device_id const *acpi_match_table ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group const **groups ;
   struct dev_pm_ops const *pm ;
   struct driver_private *p ;
};

#line 353 
struct class_attribute;

#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class {
   char const *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group const **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct kobj_ns_type_operations const *ns_type ;
   void const *(*namespace)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct subsys_private *p ;
};

#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *, struct class_attribute *, char *) ;
   ssize_t (*store)(struct class *, struct class_attribute *, char const *, size_t ) ;
};

#line 514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_type {
   char const *name ;
   struct attribute_group const **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops const *pm ;
};

#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char const *, size_t ) ;
};

#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};

#line 684 
struct dma_coherent_mem;

#line 684 
struct cma;

#line 684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const *init_name ;
   struct device_type const *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group const **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline_disabled : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline : 1 ;
};

#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct wakeup_source {
   char const *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) active : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) autosleep_enabled : 1 ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};

#line 4  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sem_undo_list;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/shm.h"
struct user_struct;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_183 {
   unsigned long sig[1U] ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_183 sigset_t;

#line 25 
struct siginfo;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int );

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};

#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_185 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_186 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_187 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_188 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_190 {
   void *_lower ;
   void *_upper ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_189 {
   void *_addr ;
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_190 _addr_bnd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_191 {
   long _band ;
   int _fd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_192 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_184 {
   int _pad[28U] ;
   struct __anonstruct__kill_185 _kill ;
   struct __anonstruct__timer_186 _timer ;
   struct __anonstruct__rt_187 _rt ;
   struct __anonstruct__sigchld_188 _sigchld ;
   struct __anonstruct__sigfault_189 _sigfault ;
   struct __anonstruct__sigpoll_191 _sigpoll ;
   struct __anonstruct__sigsys_192 _sigsys ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_184 _sifields ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};

#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};

#line 443 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
};

#line 450 
struct pid_namespace;

#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp_filter;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct rt_mutex_waiter;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};

#line 50 
struct hrtimer_clock_base;

#line 51 
struct hrtimer_cpu_base;

#line 60 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
};

#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   seqcount_t seq ;
   struct hrtimer *running ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   bool migration_enabled ;
   bool nohz_active ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_hrtirq : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hres_active : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hang_detected : 1 ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   unsigned int nr_events ;
   unsigned int nr_retries ;
   unsigned int nr_hangs ;
   unsigned int max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array_ptr;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef int32_t key_serial_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef uint32_t key_perm_t;

#line 35 
struct key;

#line 36 
struct signal_struct;

#line 37 
struct key_type;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct keyring_index_key {
   struct key_type *type ;
   char const *description ;
   size_t desc_len ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_199 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};

#line 123 
struct key_user;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_200 {
   time_t expiry ;
   time_t revoked_at ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct __anonstruct_202 {
   struct key_type *type ;
   char *description ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_201 {
   struct keyring_index_key index_key ;
   struct __anonstruct_202 __anonCompField___anonunion_201_52 ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_type_data_203 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_payload_205 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_204 {
   union __anonunion_payload_205 payload ;
   struct assoc_array keys ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_199 __anonCompField_key_50 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_200 __anonCompField_key_51 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion_201 __anonCompField_key_53 ;
   union __anonunion_type_data_203 type_data ;
   union __anonunion_204 __anonCompField_key_54 ;
};

#line 358 
struct audit_context;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};

#line 369 
struct percpu_ref;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref *);

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) force_atomic : 1 ;
   struct callback_head rcu ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup;

#line 28 
struct cgroup_root;

#line 29 
struct cgroup_subsys;

#line 30 
struct cgroup_taskset;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   struct list_head sibling ;
   struct list_head children ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head cgrp_links ;
   struct cgroup *dfl_cgrp ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct css_set *mg_dst_cset ;
   struct list_head e_cset_node[12U] ;
   struct callback_head callback_head ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int id ;
   int populated_cnt ;
   struct kernfs_node *kn ;
   struct kernfs_node *procs_kn ;
   struct kernfs_node *populated_kn ;
   unsigned int subtree_control ;
   unsigned int child_subsys_mask ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[12U] ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
};

#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   struct lock_class_key lockdep_key ;
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_e_css_changed)(struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct cgroup_subsys_state *, struct cgroup_subsys_state *, struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   int id ;
   char const *name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct futex_pi_state;

#line 129 
struct robust_list_head;

#line 130 
struct bio_list;

#line 131 
struct fs_struct;

#line 132 
struct perf_event_context;

#line 133 
struct blk_plug;

#line 135 
struct nameidata;

#line 188 
struct cfs_rq;

#line 189 
struct task_group;

#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};

#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};

#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};

#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};

#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};

#line 563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
   int running ;
};

#line 620 
struct autogroup;

#line 621 
struct tty_struct;

#line 621 
struct taskstats;

#line 621 
struct tty_audit_buf;

#line 621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_child_subreaper : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};

#line 802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};

#line 845 
struct backing_dev_info;

#line 846 
struct reclaim_state;

#line 847  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};

#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   u64 blkio_start ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   u64 freepages_start ;
   u64 freepages_delay ;
   u32 freepages_count ;
};

#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};

#line 1138 
struct io_context;

#line 1172 
struct pipe_inode_info;

#line 1173 
struct uts_namespace;

#line 1174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};

#line 1181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_avg {
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
   unsigned long utilization_avg_contrib ;
   u32 runnable_avg_sum ;
   u32 avg_period ;
   u32 running_avg_sum ;
};

#line 1206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};

#line 1241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};

#line 1273 
struct rt_rq;

#line 1273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};

#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   int dl_yielded ;
   struct hrtimer dl_timer ;
};

#line 1355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) may_oom : 1 ;
};

#line 1779 
struct sched_class;

#line 1779 
struct files_struct;

#line 1779 
struct compat_robust_list_head;

#line 1779 
struct numa_group;

#line 1779 
struct ftrace_ret_stack;

#line 1779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_struct {
   long volatile state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class const *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   unsigned long rcu_tasks_nvcsw ;
   bool rcu_tasks_holdout ;
   struct list_head rcu_tasks_holdout_list ;
   int rcu_tasks_idle_cpu ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   u32 vmacache_seqnum ;
   struct vm_area_struct *vmacache[4U] ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_execve : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_iowait : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_reset_on_fork : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_contributes_to_load : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_migrated : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memcg_kmem_skip_account : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) brk_randomized : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred const *real_cred ;
   struct cred const *cred ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct thread_struct thread ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct hotplug_slot;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef int pci_power_t;

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

#line 138 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;

#line 249 
struct pcie_link_state;

#line 250 
struct pci_vpd;

#line 251 
struct pci_sriov;

#line 252 
struct pci_ats;

#line 253 
struct proc_dir_entry;

#line 253 
struct pci_driver;

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
union __anonunion_220 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   u8 dma_alias_devfn ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   u8 pm_cap ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) pme_support : 5 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_interrupt : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_poll : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d1_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d2_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d1d2 : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d3cold_allowed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) mmio_always_on : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_prepared : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_hotplug : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) transparent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) multifunction : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_busmaster : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_64bit_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) block_cfg_access : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_parity_status : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_reroute_variant : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msi_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msix_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ari_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_freset : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_saved : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_physfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_virtfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) reset_fn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_hotplug_bridge : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first_valid : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_intx_masking : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) io_window_1k : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_secondary_link : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct attribute_group const **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_220 __anonCompField_pci_dev_58 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
};

#line 442 
struct pci_ops;

#line 442 
struct msi_controller;

#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
};

#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_ops {
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};

#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_notify)(struct pci_dev *, bool ) ;
   void (*resume)(struct pci_dev *) ;
};

#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char const *name ;
   struct pci_device_id const *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id const *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*suspend_late)(struct pci_dev *, pm_message_t ) ;
   int (*resume_early)(struct pci_dev *) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers const *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   int nid ;
   struct mem_cgroup *memcg ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page_ext.h"
struct file_ra_state;

#line 65 
struct writeback_control;

#line 66 
struct bdi_writeback;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *cow_page ;
   struct page *page ;
   unsigned long max_pgoff ;
   pte_t *pte ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*fault)(struct vm_area_struct *, struct vm_fault *) ;
   void (*map_pages)(struct vm_area_struct *, struct vm_fault *) ;
   int (*page_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*pfn_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char const *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};

#line 1249 
struct kvec;

#line 2291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmapool.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pci_64.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   int (*mapping_error)(struct device *, dma_addr_t ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   int (*set_dma_mask)(struct device *, u64 ) ;
   int is_phys ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/prefetch.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
union __anonunion_221 {
   struct iovec const *iov ;
   struct kvec const *kvec ;
   struct bio_vec const *bvec ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct iov_iter {
   int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_221 __anonCompField_iov_iter_59 ;
   unsigned long nr_segs ;
};

#line 1182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};

#line 38 
struct kiocb;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_223 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_223 sync_serial_settings;

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_224 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_224 te1_settings;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_225 {
   unsigned short encoding ;
   unsigned short parity ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_225 raw_hdlc_proto;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_226 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_226 fr_proto;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_227 {
   unsigned int dlci ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_227 fr_proto_pvc;

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_228 {
   unsigned int dlci ;
   char master[16U] ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_228 fr_proto_pvc_info;

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_229 {
   unsigned int interval ;
   unsigned int timeout ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_229 cisco_proto;

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_230 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_230 ifs_ifsu ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_231 {
   char ifrn_name[16U] ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_232 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_231 ifr_ifrn ;
   union __anonunion_ifr_ifru_232 ifr_ifru ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_node;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct __anonstruct_237 {
   spinlock_t lock ;
   int count ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
union __anonunion_236 {
   struct __anonstruct_237 __anonCompField___anonunion_236_60 ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion_236 __anonCompField_lockref_61 ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct vfsmount;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct __anonstruct_239 {
   u32 hash ;
   u32 len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
union __anonunion_238 {
   struct __anonstruct_239 __anonCompField___anonunion_238_62 ;
   u64 hash_len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct qstr {
   union __anonunion_238 __anonCompField_qstr_63 ;
   unsigned char const *name ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
union __anonunion_d_u_240 {
   struct hlist_node d_alias ;
   struct callback_head d_rcu ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations const *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_240 d_u ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry const *, struct qstr *) ;
   int (*d_compare)(struct dentry const *, struct dentry const *, unsigned int , char const *, struct qstr const *) ;
   int (*d_delete)(struct dentry const *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct dentry *, bool ) ;
   struct inode *(*d_select_inode)(struct dentry *, unsigned int ) ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/path.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_memcg {
   struct list_lru_one *lru[0U] ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
};

#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct __anonstruct_244 {
   struct radix_tree_node *parent ;
   void *private_data ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
union __anonunion_243 {
   struct __anonstruct_244 __anonCompField___anonunion_243_64 ;
   struct callback_head callback_head ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_node {
   unsigned int path ;
   unsigned int count ;
   union __anonunion_243 __anonCompField_radix_tree_node_65 ;
   struct list_head private_list ;
   void *slots[64U] ;
   unsigned long tags[3U][1U] ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
};

#line 47 
struct block_device;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fs.h"
struct export_operations;

#line 62 
struct poll_table_struct;

#line 63 
struct kstatfs;

#line 64 
struct swap_info_struct;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dqblk_xfs.h"
struct dquot;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
struct __anonstruct_kprojid_t_248 {
   projid_t val ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_248 kprojid_t;

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
typedef long long qsize_t;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
union __anonunion_249 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kqid {
   union __anonunion_249 __anonCompField_kqid_67 ;
   enum quota_type type ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};

#line 206 
struct quota_format_type;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};

#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};

#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
};

#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};

#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};

#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};

#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};

#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};

#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops const *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};

#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops const *ops[3U] ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
};

#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *, loff_t ) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};

#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   atomic_t i_mmap_writable ;
   struct rb_root i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrshadows ;
   unsigned long writeback_index ;
   struct address_space_operations const *a_ops ;
   unsigned long flags ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};

#line 443 
struct request_queue;

#line 444 
struct hd_struct;

#line 444 
struct gendisk;

#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};

#line 560 
struct posix_acl;

#line 561 
struct inode_operations;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_252 {
   unsigned int const i_nlink ;
   unsigned int __i_nlink ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_253 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};

#line 561 
struct file_lock_context;

#line 561 
struct cdev;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_254 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations const *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_252 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_253 __anonCompField_inode_69 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   struct file_operations const *i_fop ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_254 __anonCompField_inode_70 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   void *i_private ;
};

#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};

#line 815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_f_u_255 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file {
   union __anonunion_f_u_255 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations const *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred const *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
};

#line 923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
typedef void *fl_owner_t;

#line 924 
struct file_lock;

#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};

#line 931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock *, struct file_lock *) ;
   unsigned long (*lm_owner_key)(struct file_lock *) ;
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};

#line 947 
struct net;

#line 952 
struct nlm_lockowner;

#line 953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};

#line 19 
struct fasync_struct;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_257 {
   struct list_head link ;
   int state ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_256 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_257 afs ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations const *fl_ops ;
   struct lock_manager_operations const *fl_lmops ;
   union __anonunion_fl_u_256 fl_u ;
};

#line 1005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};

#line 1221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};

#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};

#line 1287 
struct super_operations;

#line 1287 
struct xattr_handler;

#line 1287 
struct mtd_info;

#line 1287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations const *s_op ;
   struct dquot_operations const *dq_op ;
   struct quotactl_ops const *s_qcop ;
   struct export_operations const *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler const **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations const *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   int s_stack_depth ;
};

#line 1526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};

#line 1540 
struct dir_context;

#line 1565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char const *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};

#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char const *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   unsigned int (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*mremap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*aio_fsync)(struct kiocb *, int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
};

#line 1633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char const *(*follow_link)(struct dentry *, void **) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   void (*put_link)(struct inode *, void *) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char const *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *) ;
   int (*rename2)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct vfsmount *, struct dentry *, struct kstat *) ;
   int (*setxattr)(struct dentry *, char const *, void const *, size_t , int ) ;
   ssize_t (*getxattr)(struct dentry *, char const *, void *, size_t ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*removexattr)(struct dentry *, char const *) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t , int *) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
};

#line 1687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char const *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};

#line 1926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_system_type {
   char const *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type *, int , char const *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};

#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/random.h"
enum ldv_25478 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
typedef enum ldv_25478 socket_state;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops;

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops const *ops ;
};

#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int ) ;
   int (*getname)(struct socket *, struct sockaddr *, int *, int ) ;
   unsigned int (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
struct in6_addr;

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct sk_buff;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
typedef u64 netdev_features_t;

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
union __anonunion_in6_u_272 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
struct in6_addr {
   union __anonunion_in6_u_272 in6_u ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/in6.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buf_operations;

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations const *ops ;
   unsigned int flags ;
   unsigned long private ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int nrbufs ;
   unsigned int curbuf ;
   unsigned int buffers ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int waiting_writers ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int can_merge ;
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct napi_struct;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct nf_conntrack {
   atomic_t use ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
enum ldv_26324 {
    BRNF_PROTO_UNCHANGED = 0,
    BRNF_PROTO_8021Q = 1,
    BRNF_PROTO_PPPOE = 2
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_277 {
   struct net_device *physoutdev ;
   char neigh_header[8U] ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_278 {
   __be32 ipv4_daddr ;
   struct in6_addr ipv6_daddr ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   enum ldv_26324 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) orig_proto : 8 ;
   bool pkt_otherhost ;
   __u16 frag_max_size ;
   unsigned int mask ;
   struct net_device *physindev ;
   union __anonunion_277 __anonCompField_nf_bridge_info_74 ;
   union __anonunion_278 __anonCompField_nf_bridge_info_75 ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};

#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_281 {
   u32 stamp_us ;
   u32 stamp_jiffies ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_280 {
   u64 v64 ;
   struct __anonstruct_281 __anonCompField___anonunion_280_76 ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_mstamp {
   union __anonunion_280 __anonCompField_skb_mstamp_77 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_284 {
   ktime_t tstamp ;
   struct skb_mstamp skb_mstamp ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_283 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_284 __anonCompField___anonstruct_283_78 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_282 {
   struct __anonstruct_283 __anonCompField___anonunion_282_79 ;
   struct rb_node rbnode ;
};

#line 457 
struct sec_path;

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_286 {
   __u16 csum_start ;
   __u16 csum_offset ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_285 {
   __wsum csum ;
   struct __anonstruct_286 __anonCompField___anonunion_285_81 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_287 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_288 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_289 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_282 __anonCompField_sk_buff_80 ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
   struct sec_path *sp ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cloned : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nohdr : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) fclone : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) peeked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) head_frag : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) xmit_more : 1 ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pkt_type : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pfmemalloc : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_df : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) nfctinfo : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nf_trace : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ip_summed : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ooo_okay : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l4_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sw_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_fcs : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encapsulation : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encap_hdr_csum : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_complete_sw : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) csum_level : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_bad : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ndisc_nodetype : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ipvs_property : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) inner_protocol_type : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) remcsum_offload : 1 ;
   __u16 tc_index ;
   __u16 tc_verd ;
   union __anonunion_285 __anonCompField_sk_buff_82 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_287 __anonCompField_sk_buff_83 ;
   __u32 secmark ;
   union __anonunion_288 __anonCompField_sk_buff_84 ;
   union __anonunion_289 __anonCompField_sk_buff_85 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};

#line 718 
struct dst_entry;

#line 767 
struct rtable;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};

#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};

#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};

#line 438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};

#line 475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};

#line 503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};

#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};

#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};

#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};

#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};

#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};

#line 748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};

#line 759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};

#line 778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};

#line 828  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};

#line 999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};

#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device *, struct ethtool_cmd *) ;
   int (*set_settings)(struct net_device *, struct ethtool_cmd *) ;
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 const *, u8 const *, u8 const ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable const *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable const *, void const *) ;
};

#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct prot_inuse;

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct u64_stats_sync {
   
};

#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[115U] ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/packet.h"
struct netns_frags {
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};

#line 185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct fib_rules_ops;

#line 186 
struct fib_table;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};

#line 29 
struct inet_peer_base;

#line 29 
struct xt_table;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};

#line 113 
struct neighbour;

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry const *) ;
   unsigned int (*mtu)(struct dst_entry const *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry const *, struct sk_buff *, void const *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct ipv6_devconf;

#line 39 
struct rt6_info;

#line 39 
struct rt6_statistics;

#line 39 
struct fib6_table;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct netns_frags frags ;
};

#line 20 
struct sctp_mib;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct nf_logger;

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger const *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct ebt_table;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};

#line 72 
struct ip_conntrack_stat;

#line 72 
struct nf_ct_event_notifier;

#line 72 
struct nf_exp_event_notifier;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   seqcount_t generation ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};

#line 114 
struct nft_af_info;

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   struct nft_af_info *netdev ;
   unsigned int base_seq ;
   u8 gencursor ;
};

#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/xfrm.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;

#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};

#line 672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct flow_cache_percpu {
   struct hlist_head *hash_table ;
   int hash_count ;
   u32 hash_rnd ;
   int hash_rnd_recalc ;
   struct tasklet_struct flush_tasklet ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct flow_cache {
   u32 hash_shift ;
   struct flow_cache_percpu *percpu ;
   struct notifier_block hotcpu_notifier ;
   int low_watermark ;
   int high_watermark ;
   struct timer_list rnd_timer ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
   struct flow_cache flow_cache_global ;
   atomic_t flow_cache_genid ;
   struct list_head flow_cache_gc_list ;
   spinlock_t flow_cache_gc_lock ;
   struct work_struct flow_cache_gc_work ;
   struct work_struct flow_cache_flush_work ;
   struct mutex flow_flush_sem ;
};

#line 88 
struct mpls_route;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_mpls {
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct proc_ns_operations;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations const *ops ;
   unsigned int inum ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net_generic;

#line 12 
struct netns_ipvs;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   atomic64_t cookie_gen ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   spinlock_t nsid_lock ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_306 {
   struct net *net ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_306 possible_net_t;

#line 376 
enum fwnode_type {
    FWNODE_INVALID = 0,
    FWNODE_OF = 1,
    FWNODE_ACPI = 2,
    FWNODE_PDATA = 3
};

#line 383  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct fwnode_handle {
   enum fwnode_type type ;
   struct fwnode_handle *secondary ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
typedef u32 phandle;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
   struct bin_attribute attr ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct device_node {
   char const *name ;
   char const *type ;
   phandle phandle ;
   char const *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
enum ldv_29085 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_MII = 1,
    PHY_INTERFACE_MODE_GMII = 2,
    PHY_INTERFACE_MODE_SGMII = 3,
    PHY_INTERFACE_MODE_TBI = 4,
    PHY_INTERFACE_MODE_REVMII = 5,
    PHY_INTERFACE_MODE_RMII = 6,
    PHY_INTERFACE_MODE_RGMII = 7,
    PHY_INTERFACE_MODE_RGMII_ID = 8,
    PHY_INTERFACE_MODE_RGMII_RXID = 9,
    PHY_INTERFACE_MODE_RGMII_TXID = 10,
    PHY_INTERFACE_MODE_RTBI = 11,
    PHY_INTERFACE_MODE_SMII = 12,
    PHY_INTERFACE_MODE_XGMII = 13,
    PHY_INTERFACE_MODE_MOCA = 14,
    PHY_INTERFACE_MODE_QSGMII = 15,
    PHY_INTERFACE_MODE_MAX = 16
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
typedef enum ldv_29085 phy_interface_t;

#line 126 
enum ldv_29138 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};

#line 133 
struct phy_device;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct mii_bus {
   char const *name ;
   char id[17U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_29138 state ;
   struct device dev ;
   struct phy_device *phy_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int *irq ;
};

#line 214 
enum phy_state {
    PHY_DOWN = 0,
    PHY_STARTING = 1,
    PHY_READY = 2,
    PHY_PENDING = 3,
    PHY_UP = 4,
    PHY_AN = 5,
    PHY_RUNNING = 6,
    PHY_NOLINK = 7,
    PHY_FORCING = 8,
    PHY_CHANGELINK = 9,
    PHY_HALTED = 10,
    PHY_RESUMING = 11
};

#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};

#line 323 
struct phy_driver;

#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_device {
   struct phy_driver *drv ;
   struct mii_bus *bus ;
   struct device dev ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   bool is_c45 ;
   bool is_internal ;
   bool has_fixups ;
   bool suspended ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int addr ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   int link ;
   u32 interrupts ;
   u32 supported ;
   u32 advertising ;
   u32 lp_advertising ;
   int autoneg ;
   int link_timeout ;
   int irq ;
   void *priv ;
   struct work_struct phy_queue ;
   struct delayed_work state_queue ;
   atomic_t irq_disable ;
   struct mutex lock ;
   struct net_device *attached_dev ;
   void (*adjust_link)(struct net_device *) ;
};

#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_driver {
   u32 phy_id ;
   char *name ;
   unsigned int phy_id_mask ;
   u32 features ;
   u32 flags ;
   void const *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd_indirect)(struct phy_device *, int , int , int ) ;
   void (*write_mmd_indirect)(struct phy_device *, int , int , int , u32 ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   struct device_driver driver ;
};

#line 803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct fixed_phy_status {
   int link ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
enum dsa_tag_protocol {
    DSA_TAG_PROTO_NONE = 0,
    DSA_TAG_PROTO_DSA = 1,
    DSA_TAG_PROTO_TRAILER = 2,
    DSA_TAG_PROTO_EDSA = 3,
    DSA_TAG_PROTO_BRCM = 4
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
struct dsa_chip_data {
   struct device *host_dev ;
   int sw_addr ;
   int eeprom_len ;
   struct device_node *of_node ;
   char *port_names[12U] ;
   struct device_node *port_dn[12U] ;
   s8 *rtable ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   struct net_device *of_netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};

#line 84 
struct packet_type;

#line 85 
struct dsa_switch;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   int (*rcv)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   enum dsa_tag_protocol tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};

#line 123 
struct dsa_switch_driver;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   enum dsa_tag_protocol tag_protocol ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct device *master_dev ;
   char hwmon_name[24U] ;
   struct device *hwmon_dev ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   u32 phys_mii_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   enum dsa_tag_protocol tag_protocol ;
   int priv_size ;
   char *(*probe)(struct device *, int ) ;
   int (*setup)(struct dsa_switch *) ;
   int (*set_addr)(struct dsa_switch *, u8 *) ;
   u32 (*get_phy_flags)(struct dsa_switch *, int ) ;
   int (*phy_read)(struct dsa_switch *, int , int ) ;
   int (*phy_write)(struct dsa_switch *, int , int , u16 ) ;
   void (*poll_link)(struct dsa_switch *) ;
   void (*adjust_link)(struct dsa_switch *, int , struct phy_device *) ;
   void (*fixed_link_update)(struct dsa_switch *, int , struct fixed_phy_status *) ;
   void (*get_strings)(struct dsa_switch *, int , uint8_t *) ;
   void (*get_ethtool_stats)(struct dsa_switch *, int , uint64_t *) ;
   int (*get_sset_count)(struct dsa_switch *) ;
   void (*get_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*set_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*suspend)(struct dsa_switch *) ;
   int (*resume)(struct dsa_switch *) ;
   int (*port_enable)(struct dsa_switch *, int , struct phy_device *) ;
   void (*port_disable)(struct dsa_switch *, int , struct phy_device *) ;
   int (*set_eee)(struct dsa_switch *, int , struct phy_device *, struct ethtool_eee *) ;
   int (*get_eee)(struct dsa_switch *, int , struct ethtool_eee *) ;
   int (*get_temp)(struct dsa_switch *, int *) ;
   int (*get_temp_limit)(struct dsa_switch *, int *) ;
   int (*set_temp_limit)(struct dsa_switch *, int ) ;
   int (*get_temp_alarm)(struct dsa_switch *, bool *) ;
   int (*get_eeprom_len)(struct dsa_switch *) ;
   int (*get_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*get_regs_len)(struct dsa_switch *, int ) ;
   void (*get_regs)(struct dsa_switch *, int , struct ethtool_regs *, void *) ;
   int (*port_join_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_leave_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_stp_update)(struct dsa_switch *, int , u8 ) ;
   int (*fdb_add)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_del)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_getnext)(struct dsa_switch *, int , unsigned char *, bool *) ;
};

#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};

#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};

#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct xfrm_policy;

#line 98 
struct xfrm_state;

#line 114 
struct request_sock;

#line 1628 
struct mnt_namespace;

#line 1629 
struct ipc_namespace;

#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr const *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};

#line 643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_bonding.h"
struct netpoll_info;

#line 119 
struct wireless_dev;

#line 120 
struct wpan_dev;

#line 121 
struct mpls_dev;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};

#line 190 
struct neigh_parms;

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void const *, void const *, unsigned int ) ;
   int (*parse)(struct sk_buff const *, unsigned char *) ;
   int (*cache)(struct neighbour const *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device const *, unsigned char const *) ;
};

#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct *, int ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};

#line 340 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;

#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);

#line 537 
struct Qdisc;

#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
   unsigned long tx_maxrate ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};

#line 619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};

#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};

#line 683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};

#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};

#line 719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};

#line 730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};

#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};

#line 757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};

#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_busy_poll)(struct napi_struct *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, u8 ) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff const *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_add_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void (*ndo_del_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff *, struct net_device *, void *) ;
   int (*ndo_get_lock_subclass)(struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device const *) ;
};

#line 1243 
enum ldv_30848 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};

#line 1252 
enum ldv_30849 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_adj_list_316 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_all_adj_list_317 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257 
struct iw_handler_def;

#line 1257 
struct iw_public_data;

#line 1257 
struct switchdev_ops;

#line 1257 
struct vlan_info;

#line 1257 
struct tipc_bearer;

#line 1257 
struct dn_dev;

#line 1257 
struct inet6_dev;

#line 1257 
struct tcf_proto;

#line 1257 
struct cpu_rmap;

#line 1257 
struct pcpu_lstats;

#line 1257 
struct pcpu_sw_netstats;

#line 1257 
struct pcpu_dstats;

#line 1257 
struct pcpu_vstats;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
union __anonunion_318 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};

#line 1257 
struct garp_port;

#line 1257 
struct mrp_port;

#line 1257 
struct rtnl_link_ops;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   atomic_t carrier_changes ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_316 adj_list ;
   struct __anonstruct_all_adj_list_317 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   struct iw_handler_def const *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops const *netdev_ops ;
   struct ethtool_ops const *ethtool_ops ;
   struct switchdev_ops const *switchdev_ops ;
   struct header_ops const *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct tcf_proto *ingress_cl_list ;
   struct netdev_queue *ingress_queue ;
   struct list_head nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_30848 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) reg_state : 8 ;
   bool dismantle ;
   enum ldv_30849 __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) rtnl_link_state : 16 ;
   void (*destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_318 __anonCompField_net_device_95 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group const *sysfs_groups[4U] ;
   struct attribute_group const *sysfs_rx_queue_group ;
   struct rtnl_link_ops const *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   u16 gso_min_segs ;
   struct dcbnl_rtnl_ops const *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
};

#line 1978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct packet_type {
   __be16 type ;
   struct net_device *dev ;
   int (*func)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   bool (*id_match)(struct packet_type *, struct sock *) ;
   void *af_packet_priv ;
   struct list_head list ;
};

#line 2025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uaccess.h"
struct page_counter {
   atomic_long_t count ;
   unsigned long limit ;
   struct page_counter *parent ;
   unsigned long watermark ;
   unsigned long failcnt ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/cacheflush.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/filter.h"
struct bpf_insn {
   __u8 code ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) dst_reg : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4
};

#line 273 
struct bpf_prog_aux;

#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
union __anonunion_333 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   bool jited ;
   bool gpl_compatible ;
   u32 len ;
   enum bpf_prog_type type ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(struct sk_buff const *, struct bpf_insn const *) ;
   union __anonunion_333 __anonCompField_bpf_prog_100 ;
};

#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   unsigned long _key ;
};

#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   int maxtype ;
   struct nla_policy const *policy ;
   int (*validate)(struct nlattr **, struct nlattr **) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device const *) ;
   int (*fill_info)(struct sk_buff *, struct net_device const *) ;
   size_t (*get_xstats_size)(struct net_device const *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device const *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   int slave_maxtype ;
   struct nla_policy const *slave_policy ;
   int (*slave_validate)(struct nlattr **, struct nlattr **) ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **) ;
   size_t (*get_slave_size)(struct net_device const *, struct net_device const *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device const *, struct net_device const *) ;
   struct net *(*get_link_net)(struct net_device const *) ;
};

#line 171 
struct neigh_table;

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   void (*neigh_cleanup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};

#line 129 
struct neigh_ops;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops const *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_table {
   int family ;
   int entry_size ;
   int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void const *, struct net_device const *, __u32 *) ;
   bool (*key_eq)(struct neighbour const *, void const *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};

#line 519 
struct dn_route;

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
union __anonunion_344 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct dst_entry *from ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_344 __anonCompField_dst_entry_101 ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_socket_lock_t_345 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_345 socket_lock_t;

#line 124 
struct proto;

#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u32 __portpair;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u64 __addrpair;

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_347 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_346 {
   __addrpair skc_addrpair ;
   struct __anonstruct_347 __anonCompField___anonunion_346_102 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_348 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_350 {
   __be16 skc_dport ;
   __u16 skc_num ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_349 {
   __portpair skc_portpair ;
   struct __anonstruct_350 __anonCompField___anonunion_349_105 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_351 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_352 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock_common {
   union __anonunion_346 __anonCompField_sock_common_103 ;
   union __anonunion_348 __anonCompField_sock_common_104 ;
   union __anonunion_349 __anonCompField_sock_common_106 ;
   unsigned short skc_family ;
   unsigned char volatile skc_state ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) skc_reuse : 4 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_reuseport : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_ipv6only : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_351 __anonCompField_sock_common_107 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_352 __anonCompField_sock_common_108 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};

#line 219 
struct cg_proto;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_sk_backlog_353 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_353 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   u16 sk_incoming_cpu ;
   __u32 sk_txhash ;
   unsigned int sk_napi_id ;
   unsigned int sk_ll_usec ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) sk_shutdown : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_tx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_rx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) sk_userlocks : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) sk_protocol : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) sk_type : 16 ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   u32 sk_pacing_rate ;
   u32 sk_max_pacing_rate ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred const *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u32 sk_tskey ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
};

#line 914 
struct request_sock_ops;

#line 915 
struct timewait_sock_ops;

#line 916 
struct inet_hashinfo;

#line 917 
struct raw_hashinfo;

#line 932 
struct udp_table;

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_h_356 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   void (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   void (*clear_sk)(struct sock *, int ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock const *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_356 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup *, struct cgroup_subsys *) ;
   void (*destroy_cgroup)(struct mem_cgroup *) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup *) ;
};

#line 1054  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct cg_proto {
   struct page_counter memory_allocated ;
   struct percpu_counter sockets_allocated ;
   int memory_pressure ;
   long sysctl_mem[3U] ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock const *) ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   struct sock *rsk_listener ;
   u16 mss ;
   u8 num_retrans ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cookie_ts : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))) num_timeout : 7 ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops const *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};

#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};

#line 410  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
struct firmware {
   size_t size ;
   u8 const *data ;
   struct page **pages ;
   void *priv ;
};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
struct qlcnic_pci_info;

#line 139 
struct qlcnic_info;

#line 140 
struct qlcnic_cmd_args;

#line 141 
struct qlcnic_host_sds_ring;

#line 142 
struct qlcnic_host_tx_ring;

#line 143 
struct qlcnic_hardware_context;

#line 144 
struct qlcnic_adapter;

#line 145 
struct qlcnic_fw_dump;

#line 242  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlcnic_intrpt_config {
   u8 type ;
   u8 enabled ;
   u16 id ;
   u32 src ;
};

#line 265  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlc_83xx_fw_info {
   struct firmware const *fw ;
   char fw_file_name[20U] ;
};

#line 279  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlc_83xx_reset {
   struct qlc_83xx_reset_hdr *hdr ;
   int seq_index ;
   int seq_error ;
   int array_index ;
   u32 array[16U] ;
   u8 *buff ;
   u8 *stop_offset ;
   u8 *start_offset ;
   u8 *init_offset ;
   u8 seq_end ;
   u8 template_end ;
};

#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlc_83xx_idc {
   int (*state_entry)(struct qlcnic_adapter *) ;
   u64 sec_counter ;
   u64 delay ;
   unsigned long status ;
   int err_code ;
   int collect_dump ;
   u8 curr_state ;
   u8 prev_state ;
   u8 vnic_state ;
   u8 vnic_wait_limit ;
   u8 quiesce_req ;
   u8 delay_reset ;
   char **name ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
struct qlcnic_dcb;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
struct qlcnic_dcb_ops {
   int (*query_hw_capability)(struct qlcnic_dcb *, char *) ;
   int (*get_hw_capability)(struct qlcnic_dcb *) ;
   int (*query_cee_param)(struct qlcnic_dcb *, char *, u8 ) ;
   void (*init_dcbnl_ops)(struct qlcnic_dcb *) ;
   void (*aen_handler)(struct qlcnic_dcb *, void *) ;
   int (*get_cee_cfg)(struct qlcnic_dcb *) ;
   void (*get_info)(struct qlcnic_dcb *) ;
   int (*attach)(struct qlcnic_dcb *) ;
   void (*free)(struct qlcnic_dcb *) ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
struct qlcnic_dcb {
   struct qlcnic_dcb_mbx_params *param ;
   struct qlcnic_adapter *adapter ;
   struct delayed_work aen_work ;
   struct workqueue_struct *wq ;
   struct qlcnic_dcb_ops *ops ;
   struct qlcnic_dcb_cfg *cfg ;
   unsigned long state ;
};

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
struct cmd_desc_type0 {
   u8 tcp_hdr_offset ;
   u8 ip_hdr_offset ;
   __le16 flags_opcode ;
   __le32 nfrags__length ;
   __le64 addr_buffer2 ;
   __le16 encap_descr ;
   __le16 mss ;
   u8 port_ctxid ;
   u8 hdr_length ;
   u8 outer_hdr_length ;
   u8 rsvd1 ;
   __le64 addr_buffer3 ;
   __le64 addr_buffer1 ;
   __le16 buffer_length[4U] ;
   __le64 addr_buffer4 ;
   u8 eth_addr[6U] ;
   __le16 vlan_TCI ;
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct rcv_desc {
   __le16 reference_handle ;
   __le16 reserved ;
   __le32 buffer_length ;
   __le64 addr_buffer ;
};

#line 209  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct status_desc {
   __le64 status_desc_data[2U] ;
};

#line 262  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_fdt {
   u32 valid ;
   u16 ver ;
   u16 len ;
   u16 cksum ;
   u16 unused ;
   u8 model[16U] ;
   u8 mfg_id ;
   u16 id ;
   u8 flag ;
   u8 erase_cmd ;
   u8 alt_erase_cmd ;
   u8 write_enable_cmd ;
   u8 write_enable_bits ;
   u8 write_statusreg_cmd ;
   u8 unprotected_sec_cmd ;
   u8 read_manuf_cmd ;
   u32 block_size ;
   u32 alt_block_size ;
   u32 flash_size ;
   u32 write_enable_data ;
   u8 readid_addr_len ;
   u8 write_disable_bits ;
   u8 read_dev_id_len ;
   u8 chip_erase_cmd ;
   u16 read_timeo ;
   u8 protected_sec_cmd ;
   u8 resvd[65U] ;
};

#line 341  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_skb_frag {
   u64 dma ;
   u64 length ;
};

#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_cmd_buffer {
   struct sk_buff *skb ;
   struct qlcnic_skb_frag frag_array[18U] ;
   u32 frag_count ;
};

#line 367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_rx_buffer {
   u16 ref_handle ;
   struct sk_buff *skb ;
   struct list_head list ;
   u64 dma ;
};

#line 375  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_nic_intr_coalesce {
   u8 type ;
   u8 sts_ring_mask ;
   u16 rx_packets ;
   u16 rx_time_us ;
   u16 tx_packets ;
   u16 tx_time_us ;
   u16 flag ;
   u32 timer_out ;
};

#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_83xx_dump_template_hdr {
   u32 type ;
   u32 offset ;
   u32 size ;
   u32 cap_mask ;
   u32 num_entries ;
   u32 version ;
   u32 timestamp ;
   u32 checksum ;
   u32 drv_cap_mask ;
   u32 sys_info[3U] ;
   u32 saved_state[16U] ;
   u32 cap_sizes[8U] ;
   u32 ocm_wnd_reg[16U] ;
   u32 rsvd[0U] ;
};

#line 425  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_82xx_dump_template_hdr {
   u32 type ;
   u32 offset ;
   u32 size ;
   u32 cap_mask ;
   u32 num_entries ;
   u32 version ;
   u32 timestamp ;
   u32 checksum ;
   u32 drv_cap_mask ;
   u32 sys_info[3U] ;
   u32 saved_state[16U] ;
   u32 cap_sizes[8U] ;
   u32 rsvd[7U] ;
   u32 capabilities ;
   u32 rsvd1[0U] ;
};

#line 443  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_fw_dump {
   u8 clr ;
   bool enable ;
   u32 size ;
   u32 cap_mask ;
   void *data ;
   void *tmpl_hdr ;
   dma_addr_t phys_addr ;
   void *dma_buffer ;
   bool use_pex_dma ;
   u32 tmpl_hdr_size ;
   u32 version ;
   u32 num_entries ;
   u32 offset ;
};

#line 465 
struct qlcnic_hardware_ops;

#line 465 
struct qlcnic_mailbox;

#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_hardware_context {
   void *pci_base0 ;
   void *ocm_win_crb ;
   unsigned long pci_len0 ;
   rwlock_t crb_lock ;
   struct mutex mem_lock ;
   u8 revision_id ;
   u8 pci_func ;
   u8 linkup ;
   u8 loopback_state ;
   u8 beacon_state ;
   u8 has_link_events ;
   u8 fw_type ;
   u8 physical_port ;
   u8 reset_context ;
   u8 msix_supported ;
   u8 max_mac_filters ;
   u8 mc_enabled ;
   u8 max_mc_count ;
   u8 diag_test ;
   u8 num_msix ;
   u8 nic_mode ;
   int diag_cnt ;
   u16 max_uc_count ;
   u16 port_type ;
   u16 board_type ;
   u16 supported_type ;
   u16 link_speed ;
   u16 link_duplex ;
   u16 link_autoneg ;
   u16 module_type ;
   u16 op_mode ;
   u16 switch_mode ;
   u16 max_tx_ques ;
   u16 max_rx_ques ;
   u16 max_mtu ;
   u32 msg_enable ;
   u16 total_nic_func ;
   u16 max_pci_func ;
   u32 max_vnic_func ;
   u32 total_pci_func ;
   u32 capabilities ;
   u32 extra_capability[3U] ;
   u32 temp ;
   u32 int_vec_bit ;
   u32 fw_hal_version ;
   u32 port_config ;
   struct qlcnic_hardware_ops *hw_ops ;
   struct qlcnic_nic_intr_coalesce coal ;
   struct qlcnic_fw_dump fw_dump ;
   struct qlcnic_fdt fdt ;
   struct qlc_83xx_reset reset ;
   struct qlc_83xx_idc idc ;
   struct qlc_83xx_fw_info *fw_info ;
   struct qlcnic_intrpt_config *intr_tbl ;
   struct qlcnic_sriov *sriov ;
   u32 *reg_tbl ;
   u32 *ext_reg_tbl ;
   u32 mbox_aen[5U] ;
   u32 mbox_reg[4U] ;
   struct qlcnic_mailbox *mailbox ;
   u8 extend_lb_time ;
   u8 phys_port_id[6U] ;
   u8 lb_mode ;
   u16 vxlan_port ;
   struct device *hwmon_dev ;
   u32 post_mode ;
   bool run_post ;
};

#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_adapter_stats {
   u64 xmitcalled ;
   u64 xmitfinished ;
   u64 rxdropped ;
   u64 txdropped ;
   u64 csummed ;
   u64 rx_pkts ;
   u64 lro_pkts ;
   u64 rxbytes ;
   u64 txbytes ;
   u64 lrobytes ;
   u64 lso_frames ;
   u64 encap_lso_frames ;
   u64 encap_tx_csummed ;
   u64 encap_rx_csummed ;
   u64 xmit_on ;
   u64 xmit_off ;
   u64 skb_alloc_failure ;
   u64 null_rxbuf ;
   u64 rx_dma_map_error ;
   u64 tx_dma_map_error ;
   u64 spurious_intr ;
   u64 mac_filter_limit_overrun ;
};

#line 571  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_host_rds_ring {
   void *crb_rcv_producer ;
   struct rcv_desc *desc_head ;
   struct qlcnic_rx_buffer *rx_buf_arr ;
   u32 num_desc ;
   u32 producer ;
   u32 dma_size ;
   u32 skb_size ;
   u32 flags ;
   struct list_head free_list ;
   spinlock_t lock ;
   dma_addr_t phys_addr ;
};

#line 589  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_host_sds_ring {
   u32 consumer ;
   u32 num_desc ;
   void *crb_sts_consumer ;
   struct qlcnic_host_tx_ring *tx_ring ;
   struct status_desc *desc_head ;
   struct qlcnic_adapter *adapter ;
   struct napi_struct napi ;
   struct list_head free_list[3U] ;
   void *crb_intr_mask ;
   int irq ;
   dma_addr_t phys_addr ;
   char name[28U] ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_tx_queue_stats {
   u64 xmit_on ;
   u64 xmit_off ;
   u64 xmit_called ;
   u64 xmit_finished ;
   u64 tx_bytes ;
};

#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_host_tx_ring {
   int irq ;
   void *crb_intr_mask ;
   char name[28U] ;
   u16 ctx_id ;
   u32 state ;
   u32 producer ;
   u32 sw_consumer ;
   u32 num_desc ;
   struct qlcnic_tx_queue_stats tx_stats ;
   void *crb_cmd_producer ;
   struct cmd_desc_type0 *desc_head ;
   struct qlcnic_adapter *adapter ;
   struct napi_struct napi ;
   struct qlcnic_cmd_buffer *cmd_buf_arr ;
   __le32 *hw_consumer ;
   dma_addr_t phys_addr ;
   dma_addr_t hw_cons_phys_addr ;
   struct netdev_queue *txq ;
   spinlock_t tx_clean_lock ;
};

#line 642  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_recv_context {
   struct qlcnic_host_rds_ring *rds_rings ;
   struct qlcnic_host_sds_ring *sds_rings ;
   u32 state ;
   u16 context_id ;
   u16 virt_port ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_filter_hash {
   struct hlist_head *fhead ;
   u8 fnum ;
   u16 fmax ;
   u16 fbucket_size ;
};

#line 1090 
struct qlcnic_mbx_ops;

#line 1090  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_mailbox {
   struct workqueue_struct *work_q ;
   struct qlcnic_adapter *adapter ;
   struct qlcnic_mbx_ops *ops ;
   struct work_struct work ;
   struct completion completion ;
   struct list_head cmd_q ;
   unsigned long status ;
   spinlock_t queue_lock ;
   spinlock_t aen_lock ;
   atomic_t rsp_status ;
   u32 num_cmds ;
};

#line 1105 
struct qlcnic_npar_info;

#line 1105 
struct qlcnic_eswitch;

#line 1105 
struct qlcnic_nic_template;

#line 1105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_adapter {
   struct qlcnic_hardware_context *ahw ;
   struct qlcnic_recv_context *recv_ctx ;
   struct qlcnic_host_tx_ring *tx_ring ;
   struct net_device *netdev ;
   struct pci_dev *pdev ;
   unsigned long state ;
   u32 flags ;
   u16 num_txd ;
   u16 num_rxd ;
   u16 num_jumbo_rxd ;
   u16 max_rxd ;
   u16 max_jumbo_rxd ;
   u8 max_rds_rings ;
   u8 max_sds_rings ;
   u8 max_tx_rings ;
   u8 drv_tx_rings ;
   u8 drv_sds_rings ;
   u8 drv_tss_rings ;
   u8 drv_rss_rings ;
   u8 rx_csum ;
   u8 portnum ;
   u8 fw_wait_cnt ;
   u8 fw_fail_cnt ;
   u8 tx_timeo_cnt ;
   u8 need_fw_reset ;
   u8 reset_ctx_cnt ;
   u16 is_up ;
   u16 rx_pvid ;
   u16 tx_pvid ;
   u32 irq ;
   u32 heartbeat ;
   u8 dev_state ;
   u8 reset_ack_timeo ;
   u8 dev_init_timeo ;
   u8 mac_addr[6U] ;
   u64 dev_rst_time ;
   bool drv_mac_learn ;
   bool fdb_mac_learn ;
   bool rx_mac_learn ;
   unsigned long vlans[64U] ;
   u8 flash_mfg_id ;
   struct qlcnic_npar_info *npars ;
   struct qlcnic_eswitch *eswitch ;
   struct qlcnic_nic_template *nic_ops ;
   struct qlcnic_adapter_stats stats ;
   struct list_head mac_list ;
   void *tgt_mask_reg ;
   void *tgt_status_reg ;
   void *crb_int_state_reg ;
   void *isr_int_vec ;
   struct msix_entry *msix_entries ;
   struct workqueue_struct *qlcnic_wq ;
   struct delayed_work fw_work ;
   struct delayed_work idc_aen_work ;
   struct delayed_work mbx_poll_work ;
   struct qlcnic_dcb *dcb ;
   struct qlcnic_filter_hash fhash ;
   struct qlcnic_filter_hash rx_fhash ;
   struct list_head vf_mc_list ;
   spinlock_t mac_learn_lock ;
   spinlock_t rx_mac_learn_lock ;
   u32 file_prd_off ;
   u32 fw_version ;
   u32 offload_flags ;
   struct firmware const *fw ;
};

#line 1231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_info {
   u16 pci_func ;
   u16 op_mode ;
   u16 phys_port ;
   u16 switch_mode ;
   u32 capabilities ;
   u8 max_mac_filters ;
   u16 max_mtu ;
   u16 max_tx_ques ;
   u16 max_rx_ques ;
   u16 min_tx_bw ;
   u16 max_tx_bw ;
   u32 op_type ;
   u16 max_bw_reg_offset ;
   u16 max_linkspeed_reg_offset ;
   u32 capability1 ;
   u32 capability2 ;
   u32 capability3 ;
   u16 max_tx_mac_filters ;
   u16 max_rx_mcast_mac_filters ;
   u16 max_rx_ucast_mac_filters ;
   u16 max_rx_ip_addr ;
   u16 max_rx_lro_flow ;
   u16 max_rx_status_rings ;
   u16 max_rx_buf_rings ;
   u16 max_tx_vlan_keys ;
   u8 total_pf ;
   u8 total_rss_engines ;
   u16 max_vports ;
   u16 linkstate_reg_offset ;
   u16 bit_offsets ;
   u16 max_local_ipv6_addrs ;
   u16 max_remote_ipv6_addrs ;
};

#line 1281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_pci_info {
   u16 id ;
   u16 active ;
   u16 type ;
   u16 default_port ;
   u16 tx_min_bw ;
   u16 tx_max_bw ;
   u8 mac[6U] ;
   u16 func_count ;
};

#line 1293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_npar_info {
   bool eswitch_status ;
   u16 pvid ;
   u16 min_bw ;
   u16 max_bw ;
   u8 phy_port ;
   u8 type ;
   u8 active ;
   u8 enable_pm ;
   u8 dest_npar ;
   u8 discard_tagged ;
   u8 mac_override ;
   u8 mac_anti_spoof ;
   u8 promisc_mode ;
   u8 offload_flags ;
   u8 pci_func ;
   u8 mac[6U] ;
};

#line 1312  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_eswitch {
   u8 port ;
   u8 active_vports ;
   u8 active_vlans ;
   u8 active_ucast_filters ;
   u8 max_ucast_filters ;
   u8 max_active_vlans ;
   u32 flags ;
};

#line 1513  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct _cdrp_cmd {
   u32 num ;
   u32 *arg ;
};

#line 1525  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_cmd_args {
   struct completion completion ;
   struct list_head list ;
   struct _cdrp_cmd req ;
   struct _cdrp_cmd rsp ;
   atomic_t rsp_status ;
   int pay_size ;
   u32 rsp_opcode ;
   u32 total_cmds ;
   u32 op_type ;
   u32 type ;
   u32 cmd_op ;
   u32 *hdr ;
   u32 *pay ;
   u8 func_num ;
};

#line 1735  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_nic_template {
   int (*config_bridged_mode)(struct qlcnic_adapter *, u32 ) ;
   int (*config_led)(struct qlcnic_adapter *, u32 , u32 ) ;
   int (*start_firmware)(struct qlcnic_adapter *) ;
   int (*init_driver)(struct qlcnic_adapter *) ;
   void (*request_reset)(struct qlcnic_adapter *, u32 ) ;
   void (*cancel_idc_work)(struct qlcnic_adapter *) ;
   int (*napi_add)(struct qlcnic_adapter *, struct net_device *) ;
   void (*napi_del)(struct qlcnic_adapter *) ;
   void (*config_ipaddr)(struct qlcnic_adapter *, __be32 , int ) ;
   irqreturn_t (*clear_legacy_intr)(struct qlcnic_adapter *) ;
   int (*shutdown)(struct pci_dev *) ;
   int (*resume)(struct qlcnic_adapter *) ;
};

#line 1750  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_mbx_ops {
   int (*enqueue_cmd)(struct qlcnic_adapter *, struct qlcnic_cmd_args *, unsigned long *) ;
   void (*dequeue_cmd)(struct qlcnic_adapter *, struct qlcnic_cmd_args *) ;
   void (*decode_resp)(struct qlcnic_adapter *, struct qlcnic_cmd_args *) ;
   void (*encode_cmd)(struct qlcnic_adapter *, struct qlcnic_cmd_args *) ;
   void (*nofity_fw)(struct qlcnic_adapter *, u8 ) ;
};

#line 1765  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_hardware_ops {
   void (*read_crb)(struct qlcnic_adapter *, char *, loff_t , size_t ) ;
   void (*write_crb)(struct qlcnic_adapter *, char *, loff_t , size_t ) ;
   int (*read_reg)(struct qlcnic_adapter *, ulong , int *) ;
   int (*write_reg)(struct qlcnic_adapter *, ulong , u32 ) ;
   void (*get_ocm_win)(struct qlcnic_hardware_context *) ;
   int (*get_mac_address)(struct qlcnic_adapter *, u8 *, u8 ) ;
   int (*setup_intr)(struct qlcnic_adapter *) ;
   int (*alloc_mbx_args)(struct qlcnic_cmd_args *, struct qlcnic_adapter *, u32 ) ;
   int (*mbx_cmd)(struct qlcnic_adapter *, struct qlcnic_cmd_args *) ;
   void (*get_func_no)(struct qlcnic_adapter *) ;
   int (*api_lock)(struct qlcnic_adapter *) ;
   void (*api_unlock)(struct qlcnic_adapter *) ;
   void (*add_sysfs)(struct qlcnic_adapter *) ;
   void (*remove_sysfs)(struct qlcnic_adapter *) ;
   void (*process_lb_rcv_ring_diag)(struct qlcnic_host_sds_ring *) ;
   int (*create_rx_ctx)(struct qlcnic_adapter *) ;
   int (*create_tx_ctx)(struct qlcnic_adapter *, struct qlcnic_host_tx_ring *, int ) ;
   void (*del_rx_ctx)(struct qlcnic_adapter *) ;
   void (*del_tx_ctx)(struct qlcnic_adapter *, struct qlcnic_host_tx_ring *) ;
   int (*setup_link_event)(struct qlcnic_adapter *, int ) ;
   int (*get_nic_info)(struct qlcnic_adapter *, struct qlcnic_info *, u8 ) ;
   int (*get_pci_info)(struct qlcnic_adapter *, struct qlcnic_pci_info *) ;
   int (*set_nic_info)(struct qlcnic_adapter *, struct qlcnic_info *) ;
   int (*change_macvlan)(struct qlcnic_adapter *, u8 *, u16 , u8 ) ;
   void (*napi_enable)(struct qlcnic_adapter *) ;
   void (*napi_disable)(struct qlcnic_adapter *) ;
   int (*config_intr_coal)(struct qlcnic_adapter *, struct ethtool_coalesce *) ;
   int (*config_rss)(struct qlcnic_adapter *, int ) ;
   int (*config_hw_lro)(struct qlcnic_adapter *, int ) ;
   int (*config_loopback)(struct qlcnic_adapter *, u8 ) ;
   int (*clear_loopback)(struct qlcnic_adapter *, u8 ) ;
   int (*config_promisc_mode)(struct qlcnic_adapter *, u32 ) ;
   void (*change_l2_filter)(struct qlcnic_adapter *, u64 *, u16 ) ;
   int (*get_board_info)(struct qlcnic_adapter *) ;
   void (*set_mac_filter_count)(struct qlcnic_adapter *) ;
   void (*free_mac_list)(struct qlcnic_adapter *) ;
   int (*read_phys_port_id)(struct qlcnic_adapter *) ;
   pci_ers_result_t (*io_error_detected)(struct pci_dev *, pci_channel_state_t ) ;
   pci_ers_result_t (*io_slot_reset)(struct pci_dev *) ;
   void (*io_resume)(struct pci_dev *) ;
   void (*get_beacon_state)(struct qlcnic_adapter *) ;
   void (*enable_sds_intr)(struct qlcnic_adapter *, struct qlcnic_host_sds_ring *) ;
   void (*disable_sds_intr)(struct qlcnic_adapter *, struct qlcnic_host_sds_ring *) ;
   void (*enable_tx_intr)(struct qlcnic_adapter *, struct qlcnic_host_tx_ring *) ;
   void (*disable_tx_intr)(struct qlcnic_adapter *, struct qlcnic_host_tx_ring *) ;
   u32 (*get_saved_state)(void *, u32 ) ;
   void (*set_saved_state)(void *, u32 , u32 ) ;
   void (*cache_tmpl_hdr_values)(struct qlcnic_fw_dump *) ;
   u32 (*get_cap_size)(void *, int ) ;
   void (*set_sys_info)(void *, int , u32 ) ;
   void (*store_cap_mask)(void *, u32 ) ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   struct ipv6_stable_secret stable_secret ;
   void *sysctl ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};

#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};

#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __u8 rs_probes ;
   __u8 addr_gen_mode ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};

#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/ipv6.h"
union __anonunion_379 {
   __be32 a4 ;
   __be32 a6[4U] ;
   struct in6_addr in6 ;
};

#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_379 __anonCompField_inetpeer_addr_base_112 ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
union __anonunion_380 {
   struct list_head gc_list ;
   struct callback_head gc_rcu ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct __anonstruct_382 {
   atomic_t rid ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
union __anonunion_381 {
   struct __anonstruct_382 __anonCompField___anonunion_381_114 ;
   struct callback_head rcu ;
   struct inet_peer *gc_next ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[16U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   union __anonunion_380 __anonCompField_inet_peer_113 ;
   union __anonunion_381 __anonCompField_inet_peer_115 ;
   __u32 dtime ;
   atomic_t refcnt ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inet_peer_base {
   struct inet_peer *root ;
   seqlock_t lock ;
   int total ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/route.h"
struct uncached_list;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   __be32 rt_gateway ;
   u32 rt_pmtu ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct qlcnic_pex_dma_descriptor {
   u32 read_data_size ;
   u32 dma_desc_cmd ;
   u32 src_addr_low ;
   u32 src_addr_high ;
   u32 dma_bus_addr_low ;
   u32 dma_bus_addr_high ;
   u32 rsvd[6U] ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct qlcnic_common_entry_hdr {
   u32 type ;
   u32 offset ;
   u32 cap_size ;
   u8 mask ;
   u8 rsvd[2U] ;
   u8 flags ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __crb {
   u32 addr ;
   u8 stride ;
   u8 rsvd1[3U] ;
   u32 data_size ;
   u32 no_ops ;
   u32 rsvd2[4U] ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __ctrl {
   u32 addr ;
   u8 stride ;
   u8 index_a ;
   u16 timeout ;
   u32 data_size ;
   u32 no_ops ;
   u8 opcode ;
   u8 index_v ;
   u8 shl_val ;
   u8 shr_val ;
   u32 val1 ;
   u32 val2 ;
   u32 val3 ;
};

#line 103  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __cache {
   u32 addr ;
   u16 stride ;
   u16 init_tag_val ;
   u32 size ;
   u32 no_ops ;
   u32 ctrl_addr ;
   u32 ctrl_val ;
   u32 read_addr ;
   u8 read_addr_stride ;
   u8 read_addr_num ;
   u8 rsvd1[2U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __ocm {
   u8 rsvd[8U] ;
   u32 size ;
   u32 no_ops ;
   u8 rsvd1[8U] ;
   u32 read_addr ;
   u32 read_addr_stride ;
};

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __mem {
   u32 desc_card_addr ;
   u32 dma_desc_cmd ;
   u32 start_dma_cmd ;
   u32 rsvd[3U] ;
   u32 addr ;
   u32 size ;
};

#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __mux {
   u32 addr ;
   u8 rsvd[4U] ;
   u32 size ;
   u32 no_ops ;
   u32 val ;
   u32 val_stride ;
   u32 read_addr ;
   u8 rsvd2[4U] ;
};

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __queue {
   u32 sel_addr ;
   u16 stride ;
   u8 rsvd[2U] ;
   u32 size ;
   u32 no_ops ;
   u8 rsvd2[8U] ;
   u32 read_addr ;
   u8 read_addr_stride ;
   u8 read_addr_cnt ;
   u8 rsvd3[2U] ;
};

#line 176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __pollrd {
   u32 sel_addr ;
   u32 read_addr ;
   u32 sel_val ;
   u16 sel_val_stride ;
   u16 no_ops ;
   u32 poll_wait ;
   u32 poll_mask ;
   u32 data_size ;
   u8 rsvd[4U] ;
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __mux2 {
   u32 sel_addr1 ;
   u32 sel_addr2 ;
   u32 sel_val1 ;
   u32 sel_val2 ;
   u32 no_ops ;
   u32 sel_val_mask ;
   u32 read_addr ;
   u8 sel_val_stride ;
   u8 data_size ;
   u8 rsvd[2U] ;
};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct __pollrdmwr {
   u32 addr1 ;
   u32 addr2 ;
   u32 val1 ;
   u32 val2 ;
   u32 poll_wait ;
   u32 poll_mask ;
   u32 mod_mask ;
   u32 data_size ;
};

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
union __anonunion_region_384 {
   struct __crb crb ;
   struct __cache cache ;
   struct __ocm ocm ;
   struct __mem mem ;
   struct __mux mux ;
   struct __queue que ;
   struct __ctrl ctrl ;
   struct __pollrdmwr pollrdmwr ;
   struct __mux2 mux2 ;
   struct __pollrd pollrd ;
};

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct qlcnic_dump_entry {
   struct qlcnic_common_entry_hdr hdr ;
   union __anonunion_region_384 region ;
};

#line 244 
enum qlcnic_minidump_opcode {
    QLCNIC_DUMP_NOP = 0,
    QLCNIC_DUMP_READ_CRB = 1,
    QLCNIC_DUMP_READ_MUX = 2,
    QLCNIC_DUMP_QUEUE = 3,
    QLCNIC_DUMP_BRD_CONFIG = 4,
    QLCNIC_DUMP_READ_OCM = 6,
    QLCNIC_DUMP_PEG_REG = 7,
    QLCNIC_DUMP_L1_DTAG = 8,
    QLCNIC_DUMP_L1_ITAG = 9,
    QLCNIC_DUMP_L1_DATA = 11,
    QLCNIC_DUMP_L1_INST = 12,
    QLCNIC_DUMP_L2_DTAG = 21,
    QLCNIC_DUMP_L2_ITAG = 22,
    QLCNIC_DUMP_L2_DATA = 23,
    QLCNIC_DUMP_L2_INST = 24,
    QLCNIC_DUMP_POLL_RD = 35,
    QLCNIC_READ_MUX2 = 36,
    QLCNIC_READ_POLLRDMWR = 37,
    QLCNIC_DUMP_READ_ROM = 71,
    QLCNIC_DUMP_READ_MEM = 72,
    QLCNIC_DUMP_READ_CTRL = 98,
    QLCNIC_DUMP_TLHDR = 99,
    QLCNIC_DUMP_RDEND = 255
};

#line 378  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
struct qlcnic_dump_operations {
   enum qlcnic_minidump_opcode opcode ;
   u32 (*handler)(struct qlcnic_adapter *, struct qlcnic_dump_entry *, __le32 *) ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11734 {
    WORK_STRUCT_PENDING_BIT = 0,
    WORK_STRUCT_DELAYED_BIT = 1,
    WORK_STRUCT_PWQ_BIT = 2,
    WORK_STRUCT_LINKED_BIT = 3,
    WORK_STRUCT_STATIC_BIT = 4,
    WORK_STRUCT_COLOR_SHIFT = 5,
    WORK_STRUCT_COLOR_BITS = 4,
    WORK_STRUCT_PENDING = 1,
    WORK_STRUCT_DELAYED = 2,
    WORK_STRUCT_PWQ = 4,
    WORK_STRUCT_LINKED = 8,
    WORK_STRUCT_STATIC = 16,
    WORK_NR_COLORS = 15,
    WORK_NO_COLOR = 15,
    WORK_CPU_UNBOUND = 8192,
    WORK_STRUCT_FLAG_BITS = 9,
    WORK_OFFQ_FLAG_BASE = 5,
    __WORK_OFFQ_CANCELING = 5,
    WORK_OFFQ_CANCELING = 32,
    WORK_OFFQ_FLAG_BITS = 1,
    WORK_OFFQ_POOL_SHIFT = 6,
    WORK_OFFQ_LEFT = 58,
    WORK_OFFQ_POOL_BITS = 31,
    WORK_OFFQ_POOL_NONE = 2147483647,
    WORK_STRUCT_FLAG_MASK = 511,
    WORK_STRUCT_WQ_DATA_MASK = -512,
    WORK_STRUCT_NO_POOL = 137438953408,
    WORK_BUSY_PENDING = 1,
    WORK_BUSY_RUNNING = 2,
    WORKER_DESC_LEN = 24
};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct __host_producer_mbx {
   u32 reg_buf ;
   u32 jmb_buf ;
};

#line 160  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlcnic_rcv_mbx_out {
   u8 rcv_num ;
   u8 sts_num ;
   u16 ctx_id ;
   u8 state ;
   u8 num_pci_func ;
   u8 phy_port ;
   u8 vport_id ;
   u32 host_csmr[8U] ;
   struct __host_producer_mbx host_prod[8U] ;
};

#line 222  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlcnic_tx_mbx_out {
   u32 host_prod ;
   u16 ctx_id ;
   u8 state ;
   u8 rsvd ;
};

#line 254  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlcnic_macvlan_mbx {
   u8 mac_addr0 ;
   u8 mac_addr1 ;
   u8 mac_addr2 ;
   u8 mac_addr3 ;
   u8 mac_addr4 ;
   u8 mac_addr5 ;
   u16 vlan ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_bc_payload {
   u64 payload[126U] ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_bc_hdr {
   u8 version ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) msg_type : 4 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) rsvd1 : 3 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) op_type : 1 ;
   u8 num_cmds ;
   u8 num_frags ;
   u8 frag_num ;
   u8 cmd_op ;
   u16 seq_id ;
   u64 rsvd3 ;
};

#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_trans_list {
   spinlock_t lock ;
   struct list_head wait_list ;
   int count ;
};

#line 64 
enum qlcnic_trans_state {
    QLC_INIT = 0,
    QLC_WAIT_FOR_CHANNEL_FREE = 1,
    QLC_WAIT_FOR_RESP = 2,
    QLC_ABORT = 3,
    QLC_END = 4
};

#line 72 
struct qlcnic_vf_info;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_bc_trans {
   u8 func_id ;
   u8 active ;
   u8 curr_rsp_frag ;
   u8 curr_req_frag ;
   u16 cmd_id ;
   u16 req_pay_size ;
   u16 rsp_pay_size ;
   u32 trans_id ;
   enum qlcnic_trans_state trans_state ;
   struct list_head list ;
   struct qlcnic_bc_hdr *req_hdr ;
   struct qlcnic_bc_hdr *rsp_hdr ;
   struct qlcnic_bc_payload *req_pay ;
   struct qlcnic_bc_payload *rsp_pay ;
   struct completion resp_cmpl ;
   struct qlcnic_vf_info *vf ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_resources {
   u16 num_tx_mac_filters ;
   u16 num_rx_ucast_mac_filters ;
   u16 num_rx_mcast_mac_filters ;
   u16 num_txvlan_keys ;
   u16 num_rx_queues ;
   u16 num_tx_queues ;
   u16 num_rx_buf_rings ;
   u16 num_rx_status_rings ;
   u16 num_destip ;
   u32 num_lro_flows_supported ;
   u16 max_local_ipv6_addrs ;
   u16 max_remote_ipv6_addrs ;
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_vport {
   u16 handle ;
   u16 max_tx_bw ;
   u16 min_tx_bw ;
   u16 pvid ;
   u8 vlan_mode ;
   u8 qos ;
   bool spoofchk ;
   u8 mac[6U] ;
};

#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_vf_info {
   u8 pci_func ;
   u16 rx_ctx_id ;
   u16 tx_ctx_id ;
   u16 *sriov_vlans ;
   int num_vlan ;
   unsigned long state ;
   struct completion ch_free_cmpl ;
   struct work_struct trans_work ;
   struct work_struct flr_work ;
   struct mutex send_cmd_lock ;
   struct qlcnic_bc_trans *send_cmd ;
   struct qlcnic_bc_trans *flr_trans ;
   struct qlcnic_trans_list rcv_act ;
   struct qlcnic_trans_list rcv_pend ;
   struct qlcnic_adapter *adapter ;
   struct qlcnic_vport *vp ;
   spinlock_t vlan_list_lock ;
};

#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_back_channel {
   u16 trans_counter ;
   struct workqueue_struct *bc_trans_wq ;
   struct workqueue_struct *bc_async_wq ;
   struct workqueue_struct *bc_flr_wq ;
   struct list_head async_list ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_sriov {
   u16 vp_handle ;
   u8 num_vfs ;
   u8 any_vlan ;
   u8 vlan_mode ;
   u16 num_allowed_vlans ;
   u16 *allowed_vlans ;
   u16 vlan ;
   struct qlcnic_resources ff_max ;
   struct qlcnic_back_channel bc ;
   struct qlcnic_vf_info *vf_info ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
struct qlcnic_sriov_cmd_handler {
   int (*fn)(struct qlcnic_bc_trans *, struct qlcnic_cmd_args *) ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
struct qlcnic_sriov_fw_cmd_handler {
   u32 cmd ;
   int (*fn)(struct qlcnic_bc_trans *, struct qlcnic_cmd_args *) ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __sum16;

#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct _ddebug {
   char const *modname ;
   char const *function ;
   char const *filename ;
   char const *format ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))) lineno : 18 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) flags : 8 ;
};

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef struct skb_frag_struct skb_frag_t;

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_page_1027 {
   struct page *p ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct {
   struct __anonstruct_page_1027 page ;
   __u32 page_offset ;
   __u32 size ;
};

#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};

#line 319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_info {
   unsigned char nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   unsigned short gso_type ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   u32 tskey ;
   __be32 ip6_frag_id ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;

#line 2893 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};

#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};

#line 646  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct iphdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) ihl : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) priority : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_timewait_sock.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) res1 : 4 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) doff : 4 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) fin : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syn : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) rst : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) psh : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ack : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) urg : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ece : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};

#line 863  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct __anonstruct_1146 {
   u64 hdr ;
   u64 body[7U] ;
};

#line 863  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
union __anonunion_1145 {
   struct __anonstruct_1146 __anonCompField___anonunion_1145_115 ;
   u64 words[8U] ;
};

#line 863  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_fw_msg {
   union __anonunion_1145 __anonCompField_qlcnic_fw_msg_116 ;
};

#line 984  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_nic_req {
   __le64 qhdr ;
   __le64 req_hdr ;
   __le64 words[6U] ;
};

#line 990  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_mac_req {
   u8 op ;
   u8 tag ;
   u8 mac_addr[6U] ;
};

#line 996  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_vlan_req {
   __le16 vlan_id ;
   __le16 rsvd[3U] ;
};

#line 1006  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_filter {
   struct hlist_node fnode ;
   u8 faddr[6U] ;
   u16 vlan_id ;
   unsigned long ftime ;
};

#line 645  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
typedef int ldv_func_ret_type;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
typedef int pao_T__;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11890 {
    WORK_STRUCT_PENDING_BIT_0 = 0,
    WORK_STRUCT_DELAYED_BIT_0 = 1,
    WORK_STRUCT_PWQ_BIT_0 = 2,
    WORK_STRUCT_LINKED_BIT_0 = 3,
    WORK_STRUCT_STATIC_BIT_0 = 4,
    WORK_STRUCT_COLOR_SHIFT_0 = 5,
    WORK_STRUCT_COLOR_BITS_0 = 4,
    WORK_STRUCT_PENDING_0 = 1,
    WORK_STRUCT_DELAYED_0 = 2,
    WORK_STRUCT_PWQ_0 = 4,
    WORK_STRUCT_LINKED_0 = 8,
    WORK_STRUCT_STATIC_0 = 16,
    WORK_NR_COLORS_0 = 15,
    WORK_NO_COLOR_0 = 15,
    WORK_CPU_UNBOUND_0 = 8192,
    WORK_STRUCT_FLAG_BITS_0 = 9,
    WORK_OFFQ_FLAG_BASE_0 = 5,
    __WORK_OFFQ_CANCELING_0 = 5,
    WORK_OFFQ_CANCELING_0 = 32,
    WORK_OFFQ_FLAG_BITS_0 = 1,
    WORK_OFFQ_POOL_SHIFT_0 = 6,
    WORK_OFFQ_LEFT_0 = 58,
    WORK_OFFQ_POOL_BITS_0 = 31,
    WORK_OFFQ_POOL_NONE_0 = 2147483647,
    WORK_STRUCT_FLAG_MASK_0 = 511,
    WORK_STRUCT_WQ_DATA_MASK_0 = -512,
    WORK_STRUCT_NO_POOL_0 = 137438953408,
    WORK_BUSY_PENDING_0 = 1,
    WORK_BUSY_RUNNING_0 = 2,
    WORKER_DESC_LEN_0 = 24
};

#line 1341  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct acpi_device;

#line 1341  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_sysdata {
   int domain ;
   int node ;
   struct acpi_device *companion ;
   void *iommu ;
};

#line 2086  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_notifier_info {
   struct net_device *dev ;
};

#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};

#line 395  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
struct qlcnic_legacy_intr_set {
   u32 int_vec_bit ;
   u32 tgt_status_reg ;
   u32 tgt_mask_reg ;
   u32 pci_int_reg ;
};

#line 823  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
enum qlcnic_mac_type {
    QLCNIC_UNICAST_MAC = 0,
    QLCNIC_MULTICAST_MAC = 1,
    QLCNIC_BROADCAST_MAC = 2
};

#line 829  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_mac_vlan_list {
   struct list_head list ;
   uint8_t mac_addr[8U] ;
   u16 vlan_id ;
   enum qlcnic_mac_type mac_type ;
};

#line 1365  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_esw_func_cfg {
   u16 vlan_id ;
   u8 op_mode ;
   u8 op_type ;
   u8 pci_func ;
   u8 host_vlan_tag ;
   u8 promisc_mode ;
   u8 discard_tagged ;
   u8 mac_override ;
   u8 mac_anti_spoof ;
   u8 offload_flags ;
   u8 reserved[5U] ;
};

#line 1712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_board_info {
   unsigned short vendor ;
   unsigned short device ;
   unsigned short sub_vendor ;
   unsigned short sub_device ;
   char short_name[100U] ;
};

#line 196  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/route.h"
struct in_ifaddr;

#line 587  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/ip.h"
struct ipv4_devconf {
   void *sysctl ;
   int data[29U] ;
   unsigned long state[1U] ;
};

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/inetdevice.h"
struct ip_mc_list;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/inetdevice.h"
struct in_device {
   struct net_device *dev ;
   atomic_t refcnt ;
   int dead ;
   struct in_ifaddr *ifa_list ;
   struct ip_mc_list *mc_list ;
   struct ip_mc_list **mc_hash ;
   int mc_count ;
   spinlock_t mc_tomb_lock ;
   struct ip_mc_list *mc_tomb ;
   unsigned long mr_v1_seen ;
   unsigned long mr_v2_seen ;
   unsigned long mr_maxdelay ;
   unsigned char mr_qrv ;
   unsigned char mr_gq_running ;
   unsigned char mr_ifc_count ;
   struct timer_list mr_gq_timer ;
   struct timer_list mr_ifc_timer ;
   struct neigh_parms *arp_parms ;
   struct ipv4_devconf cnf ;
   struct callback_head callback_head ;
};

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/inetdevice.h"
struct in_ifaddr {
   struct hlist_node hash ;
   struct in_ifaddr *ifa_next ;
   struct in_device *ifa_dev ;
   struct callback_head callback_head ;
   __be32 ifa_local ;
   __be32 ifa_address ;
   __be32 ifa_mask ;
   __be32 ifa_broadcast ;
   unsigned char ifa_scope ;
   unsigned char ifa_prefixlen ;
   __u32 ifa_flags ;
   char ifa_label[16U] ;
   __u32 ifa_valid_lft ;
   __u32 ifa_preferred_lft ;
   unsigned long ifa_cstamp ;
   unsigned long ifa_tstamp ;
};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/inetdevice.h"
union __anonunion___u_1531 {
   struct in_device * const __val ;
   char __c[1U] ;
};

#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};

#line 714  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hdr.h"
struct crb_128M_2M_sub_block_map {
   unsigned int valid ;
   unsigned int start_128M ;
   unsigned int end_128M ;
   unsigned int start_2M ;
};

#line 944  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hdr.h"
struct crb_128M_2M_block_map {
   struct crb_128M_2M_sub_block_map sub_block[16U] ;
};

#line 1001  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_ipaddr {
   __be32 ipv4 ;
   __be32 ipv6[4U] ;
};

#line 587  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/ip.h"
struct qlcnic_ms_reg_ctrl {
   u32 ocm_window ;
   u32 control ;
   u32 hi ;
   u32 low ;
   u32 rd[4U] ;
   u32 wd[4U] ;
   u64 off ;
};

#line 1323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_pci_func_cfg {
   u16 func_type ;
   u16 min_bw ;
   u16 max_bw ;
   u16 port_num ;
   u8 pci_func ;
   u8 func_state ;
   u8 def_mac_addr[6U] ;
};

#line 1347  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_npar_func_cfg {
   u32 fw_capab ;
   u16 port_num ;
   u16 min_bw ;
   u16 max_bw ;
   u16 max_tx_queues ;
   u16 max_rx_queues ;
   u8 pci_func ;
   u8 op_mode ;
};

#line 1358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_pm_func_cfg {
   u8 pci_func ;
   u8 action ;
   u8 dest_npar ;
   u8 reserved[5U] ;
};

#line 1493  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct __qlcnic_esw_statistics {
   u16 context_id ;
   u16 version ;
   u16 size ;
   u16 unused ;
   u64 unicast_frames ;
   u64 multicast_frames ;
   u64 broadcast_frames ;
   u64 dropped_frames ;
   u64 errors ;
   u64 local_frames ;
   u64 numbytes ;
   u64 rsvd[3U] ;
};

#line 1508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_esw_statistics {
   struct __qlcnic_esw_statistics rx ;
   struct __qlcnic_esw_statistics tx ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hwmon.h"
struct sensor_device_attribute {
   struct device_attribute dev_attr ;
   int index ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11718 {
    WORK_STRUCT_PENDING_BIT_1 = 0,
    WORK_STRUCT_DELAYED_BIT_1 = 1,
    WORK_STRUCT_PWQ_BIT_1 = 2,
    WORK_STRUCT_LINKED_BIT_1 = 3,
    WORK_STRUCT_STATIC_BIT_1 = 4,
    WORK_STRUCT_COLOR_SHIFT_1 = 5,
    WORK_STRUCT_COLOR_BITS_1 = 4,
    WORK_STRUCT_PENDING_1 = 1,
    WORK_STRUCT_DELAYED_1 = 2,
    WORK_STRUCT_PWQ_1 = 4,
    WORK_STRUCT_LINKED_1 = 8,
    WORK_STRUCT_STATIC_1 = 16,
    WORK_NR_COLORS_1 = 15,
    WORK_NO_COLOR_1 = 15,
    WORK_CPU_UNBOUND_1 = 8192,
    WORK_STRUCT_FLAG_BITS_1 = 9,
    WORK_OFFQ_FLAG_BASE_1 = 5,
    __WORK_OFFQ_CANCELING_1 = 5,
    WORK_OFFQ_CANCELING_1 = 32,
    WORK_OFFQ_FLAG_BITS_1 = 1,
    WORK_OFFQ_POOL_SHIFT_1 = 6,
    WORK_OFFQ_LEFT_1 = 58,
    WORK_OFFQ_POOL_BITS_1 = 31,
    WORK_OFFQ_POOL_NONE_1 = 2147483647,
    WORK_STRUCT_FLAG_MASK_1 = 511,
    WORK_STRUCT_WQ_DATA_MASK_1 = -512,
    WORK_STRUCT_NO_POOL_1 = 137438953408,
    WORK_BUSY_PENDING_1 = 1,
    WORK_BUSY_RUNNING_1 = 2,
    WORKER_DESC_LEN_1 = 24
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_capability {
   bool tsa_capability ;
   bool ets_capability ;
   u8 max_num_tc ;
   u8 max_ets_tc ;
   u8 max_pfc_tc ;
   u8 dcb_capability ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_param {
   u32 hdr_prio_pfc_map[2U] ;
   u32 prio_pg_map[2U] ;
   u32 pg_bw_map[2U] ;
   u32 pg_tsa_map[2U] ;
   u32 app[8U] ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_mbx_params {
   struct qlcnic_dcb_param type[3U] ;
   u32 prio_tc_map ;
};

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_82xx_dcb_param_mbx_le {
   __le32 hdr_prio_pfc_map[2U] ;
   __le32 prio_pg_map[2U] ;
   __le32 pg_bw_map[2U] ;
   __le32 pg_tsa_map[2U] ;
   __le32 app[8U] ;
};

#line 105 
enum qlcnic_dcb_selector {
    QLC_SELECTOR_DEF = 0,
    QLC_SELECTOR_ETHER = 1,
    QLC_SELECTOR_TCP = 2,
    QLC_SELECTOR_UDP = 3
};

#line 112 
enum qlcnic_dcb_prio_type {
    QLC_PRIO_NONE = 0,
    QLC_PRIO_GROUP = 1,
    QLC_PRIO_LINK = 2
};

#line 118 
enum qlcnic_dcb_pfc_type {
    QLC_PFC_DISABLED = 0,
    QLC_PFC_FULL = 1,
    QLC_PFC_TX = 2,
    QLC_PFC_RX = 3
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_prio_cfg {
   bool valid ;
   enum qlcnic_dcb_pfc_type pfc_type ;
};

#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_pg_cfg {
   bool valid ;
   u8 total_bw_percent ;
   u8 prio_count ;
   u8 tsa_type ;
};

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_tc_cfg {
   bool valid ;
   struct qlcnic_dcb_prio_cfg prio_cfg[8U] ;
   enum qlcnic_dcb_prio_type prio_type ;
   u8 link_percent ;
   u8 bwg_percent ;
   u8 up_tc_map ;
   u8 pgid ;
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_app {
   bool valid ;
   enum qlcnic_dcb_selector selector ;
   u16 protocol ;
   u8 priority ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_cee {
   struct qlcnic_dcb_tc_cfg tc_cfg[8U] ;
   struct qlcnic_dcb_pg_cfg pg_cfg[8U] ;
   struct qlcnic_dcb_app app[8U] ;
   bool tc_param_valid ;
   bool pfc_mode_enable ;
};

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
struct qlcnic_dcb_cfg {
   struct qlcnic_dcb_cee type[3U] ;
   struct qlcnic_dcb_capability capability ;
   u32 version ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11786 {
    WORK_STRUCT_PENDING_BIT_2 = 0,
    WORK_STRUCT_DELAYED_BIT_2 = 1,
    WORK_STRUCT_PWQ_BIT_2 = 2,
    WORK_STRUCT_LINKED_BIT_2 = 3,
    WORK_STRUCT_STATIC_BIT_2 = 4,
    WORK_STRUCT_COLOR_SHIFT_2 = 5,
    WORK_STRUCT_COLOR_BITS_2 = 4,
    WORK_STRUCT_PENDING_2 = 1,
    WORK_STRUCT_DELAYED_2 = 2,
    WORK_STRUCT_PWQ_2 = 4,
    WORK_STRUCT_LINKED_2 = 8,
    WORK_STRUCT_STATIC_2 = 16,
    WORK_NR_COLORS_2 = 15,
    WORK_NO_COLOR_2 = 15,
    WORK_CPU_UNBOUND_2 = 8192,
    WORK_STRUCT_FLAG_BITS_2 = 9,
    WORK_OFFQ_FLAG_BASE_2 = 5,
    __WORK_OFFQ_CANCELING_2 = 5,
    WORK_OFFQ_CANCELING_2 = 32,
    WORK_OFFQ_FLAG_BITS_2 = 1,
    WORK_OFFQ_POOL_SHIFT_2 = 6,
    WORK_OFFQ_LEFT_2 = 58,
    WORK_OFFQ_POOL_BITS_2 = 31,
    WORK_OFFQ_POOL_NONE_2 = 2147483647,
    WORK_STRUCT_FLAG_MASK_2 = 511,
    WORK_STRUCT_WQ_DATA_MASK_2 = -512,
    WORK_STRUCT_NO_POOL_2 = 137438953408,
    WORK_BUSY_PENDING_2 = 1,
    WORK_BUSY_RUNNING_2 = 2,
    WORKER_DESC_LEN_2 = 24
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pinctrl/devinfo.h"
struct ratelimit_state {
   raw_spinlock_t lock ;
   int interval ;
   int burst ;
   int printed ;
   int missed ;
   unsigned long begin ;
};

#line 672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct qlcnic_mailbox_metadata {
   u32 cmd ;
   u32 in_args ;
   u32 out_args ;
};

#line 948  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hdr.h"
struct qlcnic_sds_mbx {
   u32 phy_addr_low ;
   u32 phy_addr_high ;
   u32 rsvd1[4U] ;
   u16 sds_ring_size ;
   u16 rsvd2 ;
   u16 rsvd3[2U] ;
   u16 intrpt_id ;
   u8 intrpt_val ;
   u8 rsvd4 ;
   u32 rsvd5 ;
};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlcnic_rds_mbx {
   u32 phy_addr_reg_low ;
   u32 phy_addr_reg_high ;
   u32 phy_addr_jmb_low ;
   u32 phy_addr_jmb_high ;
   u16 reg_ring_sz ;
   u16 reg_ring_len ;
   u16 jmb_ring_sz ;
   u16 jmb_ring_len ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlcnic_add_rings_mbx_out {
   u8 rcv_num ;
   u8 sts_num ;
   u16 ctx_id ;
   u32 host_csmr[8U] ;
   struct __host_producer_mbx host_prod[8U] ;
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
struct qlcnic_tx_mbx {
   u32 phys_addr_low ;
   u32 phys_addr_high ;
   u32 cnsmr_index_low ;
   u32 cnsmr_index_high ;
   u16 size ;
   u16 intr_id ;
   u8 src ;
   u8 rsvd[3U] ;
};

#line 1440  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_mac_statistics {
   u64 mac_tx_frames ;
   u64 mac_tx_bytes ;
   u64 mac_tx_mcast_pkts ;
   u64 mac_tx_bcast_pkts ;
   u64 mac_tx_pause_cnt ;
   u64 mac_tx_ctrl_pkt ;
   u64 mac_tx_lt_64b_pkts ;
   u64 mac_tx_lt_127b_pkts ;
   u64 mac_tx_lt_255b_pkts ;
   u64 mac_tx_lt_511b_pkts ;
   u64 mac_tx_lt_1023b_pkts ;
   u64 mac_tx_lt_1518b_pkts ;
   u64 mac_tx_gt_1518b_pkts ;
   u64 rsvd1[3U] ;
   u64 mac_rx_frames ;
   u64 mac_rx_bytes ;
   u64 mac_rx_mcast_pkts ;
   u64 mac_rx_bcast_pkts ;
   u64 mac_rx_pause_cnt ;
   u64 mac_rx_ctrl_pkt ;
   u64 mac_rx_lt_64b_pkts ;
   u64 mac_rx_lt_127b_pkts ;
   u64 mac_rx_lt_255b_pkts ;
   u64 mac_rx_lt_511b_pkts ;
   u64 mac_rx_lt_1023b_pkts ;
   u64 mac_rx_lt_1518b_pkts ;
   u64 mac_rx_gt_1518b_pkts ;
   u64 rsvd2[3U] ;
   u64 mac_rx_length_error ;
   u64 mac_rx_length_small ;
   u64 mac_rx_length_large ;
   u64 mac_rx_jabber ;
   u64 mac_rx_dropped ;
   u64 mac_rx_crc_error ;
   u64 mac_align_error ;
};

#line 2391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_stats {
   char stat_string[32U] ;
   int sizeof_stat ;
   int stat_offset ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
struct qlc_83xx_reset_hdr {
   u16 version ;
   u16 signature ;
   u16 size ;
   u16 entries ;
   u16 hdr_size ;
   u16 checksum ;
   u16 init_offset ;
   u16 start_offset ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
struct qlc_83xx_entry_hdr {
   u16 cmd ;
   u16 size ;
   u16 count ;
   u16 delay ;
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
struct qlc_83xx_poll {
   u32 mask ;
   u32 status ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
struct qlc_83xx_rmw {
   u32 mask ;
   u32 xor_value ;
   u32 or_value ;
   u8 shl ;
   u8 shr ;
   u8 index_a ;
   u8 rsvd ;
};

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
struct qlc_83xx_entry {
   u32 arg1 ;
   u32 arg2 ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
struct qlc_83xx_quad_entry {
   u32 dr_addr ;
   u32 dr_value ;
   u32 ar_addr ;
   u32 ar_value ;
};

#line 656  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_hostrq_sds_ring {
   __le64 host_phys_addr ;
   __le32 ring_size ;
   __le16 msi_index ;
   __le16 rsvd ;
};

#line 717  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_hostrq_rds_ring {
   __le64 host_phys_addr ;
   __le64 buff_size ;
   __le32 ring_size ;
   __le32 ring_kind ;
};

#line 724  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_hostrq_rx_ctx {
   __le64 host_rsp_dma_addr ;
   __le32 capabilities[4U] ;
   __le32 host_int_crb_mode ;
   __le32 host_rds_crb_mode ;
   __le32 rds_ring_offset ;
   __le32 sds_ring_offset ;
   __le16 num_rds_rings ;
   __le16 num_sds_rings ;
   __le16 valid_field_offset ;
   u8 txrx_sds_binding ;
   u8 msix_handler ;
   u8 reserved[128U] ;
   char data[0U] ;
};

#line 745  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_cardrsp_rds_ring {
   __le32 host_producer_crb ;
   __le32 rsvd1 ;
};

#line 750  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_cardrsp_sds_ring {
   __le32 host_consumer_crb ;
   __le32 interrupt_crb ;
};

#line 755  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_cardrsp_rx_ctx {
   __le32 rds_ring_offset ;
   __le32 sds_ring_offset ;
   __le32 host_ctx_state ;
   __le32 num_fn_per_port ;
   __le16 num_rds_rings ;
   __le16 num_sds_rings ;
   __le16 context_id ;
   u8 phys_port ;
   u8 virt_port ;
   u8 reserved[128U] ;
   char data[0U] ;
};

#line 774  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_hostrq_cds_ring {
   __le64 host_phys_addr ;
   __le32 ring_size ;
   __le32 rsvd ;
};

#line 794  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_hostrq_tx_ctx {
   __le64 host_rsp_dma_addr ;
   __le64 cmd_cons_dma_addr ;
   __le64 dummy_dma_addr ;
   __le32 capabilities[4U] ;
   __le32 host_int_crb_mode ;
   __le32 rsvd1 ;
   __le16 rsvd2 ;
   __le16 interrupt_ctl ;
   __le16 msi_index ;
   __le16 rsvd3 ;
   struct qlcnic_hostrq_cds_ring cds_ring ;
   u8 reserved[128U] ;
};

#line 809  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_cardrsp_cds_ring {
   __le32 host_producer_crb ;
   __le32 interrupt_crb ;
};

#line 814  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_cardrsp_tx_ctx {
   __le32 host_ctx_state ;
   __le16 context_id ;
   u8 phys_port ;
   u8 virt_port ;
   struct qlcnic_cardrsp_cds_ring cds_ring ;
   u8 reserved[128U] ;
};

#line 1192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_info_le {
   __le16 pci_func ;
   __le16 op_mode ;
   __le16 phys_port ;
   __le16 switch_mode ;
   __le32 capabilities ;
   u8 max_mac_filters ;
   u8 reserved1 ;
   __le16 max_mtu ;
   __le16 max_tx_ques ;
   __le16 max_rx_ques ;
   __le16 min_tx_bw ;
   __le16 max_tx_bw ;
   __le32 op_type ;
   __le16 max_bw_reg_offset ;
   __le16 max_linkspeed_reg_offset ;
   __le32 capability1 ;
   __le32 capability2 ;
   __le32 capability3 ;
   __le16 max_tx_mac_filters ;
   __le16 max_rx_mcast_mac_filters ;
   __le16 max_rx_ucast_mac_filters ;
   __le16 max_rx_ip_addr ;
   __le16 max_rx_lro_flow ;
   __le16 max_rx_status_rings ;
   __le16 max_rx_buf_rings ;
   __le16 max_tx_vlan_keys ;
   u8 total_pf ;
   u8 total_rss_engines ;
   __le16 max_vports ;
   __le16 linkstate_reg_offset ;
   __le16 bit_offsets ;
   __le16 max_local_ipv6_addrs ;
   __le16 max_remote_ipv6_addrs ;
   u8 reserved2[56U] ;
};

#line 1266  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_pci_info_le {
   __le16 id ;
   __le16 active ;
   __le16 type ;
   __le16 default_port ;
   __le16 tx_min_bw ;
   __le16 tx_max_bw ;
   __le16 reserved1[2U] ;
   u8 mac[6U] ;
   __le16 func_count ;
   u8 reserved2[104U] ;
};

#line 1379  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_mac_statistics_le {
   __le64 mac_tx_frames ;
   __le64 mac_tx_bytes ;
   __le64 mac_tx_mcast_pkts ;
   __le64 mac_tx_bcast_pkts ;
   __le64 mac_tx_pause_cnt ;
   __le64 mac_tx_ctrl_pkt ;
   __le64 mac_tx_lt_64b_pkts ;
   __le64 mac_tx_lt_127b_pkts ;
   __le64 mac_tx_lt_255b_pkts ;
   __le64 mac_tx_lt_511b_pkts ;
   __le64 mac_tx_lt_1023b_pkts ;
   __le64 mac_tx_lt_1518b_pkts ;
   __le64 mac_tx_gt_1518b_pkts ;
   __le64 rsvd1[3U] ;
   __le64 mac_rx_frames ;
   __le64 mac_rx_bytes ;
   __le64 mac_rx_mcast_pkts ;
   __le64 mac_rx_bcast_pkts ;
   __le64 mac_rx_pause_cnt ;
   __le64 mac_rx_ctrl_pkt ;
   __le64 mac_rx_lt_64b_pkts ;
   __le64 mac_rx_lt_127b_pkts ;
   __le64 mac_rx_lt_255b_pkts ;
   __le64 mac_rx_lt_511b_pkts ;
   __le64 mac_rx_lt_1023b_pkts ;
   __le64 mac_rx_lt_1518b_pkts ;
   __le64 mac_rx_gt_1518b_pkts ;
   __le64 rsvd2[3U] ;
   __le64 mac_rx_length_error ;
   __le64 mac_rx_length_small ;
   __le64 mac_rx_length_large ;
   __le64 mac_rx_jabber ;
   __le64 mac_rx_dropped ;
   __le64 mac_rx_crc_error ;
   __le64 mac_align_error ;
};

#line 1478  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_esw_stats_le {
   __le16 context_id ;
   __le16 version ;
   __le16 size ;
   __le16 unused ;
   __le64 unicast_frames ;
   __le64 multicast_frames ;
   __le64 broadcast_frames ;
   __le64 dropped_frames ;
   __le64 errors ;
   __le64 local_frames ;
   __le64 numbytes ;
   __le64 rsvd[3U] ;
};

#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct uni_table_desc {
   __le32 findex ;
   __le32 num_entries ;
   __le32 entry_size ;
   __le32 reserved[5U] ;
};

#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct uni_data_desc {
   __le32 findex ;
   __le32 size ;
   __le32 reserved[5U] ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_flt_header {
   u16 version ;
   u16 len ;
   u16 checksum ;
   u16 reserved ;
};

#line 252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct qlcnic_flt_entry {
   u8 region ;
   u8 reserved0 ;
   u8 attrib ;
   u8 reserved1 ;
   u32 size ;
   u32 start_addr ;
   u32 end_addr ;
};

#line 2391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
struct crb_addr_pair {
   u32 addr ;
   u32 data ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11802 {
    WORK_STRUCT_PENDING_BIT_3 = 0,
    WORK_STRUCT_DELAYED_BIT_3 = 1,
    WORK_STRUCT_PWQ_BIT_3 = 2,
    WORK_STRUCT_LINKED_BIT_3 = 3,
    WORK_STRUCT_STATIC_BIT_3 = 4,
    WORK_STRUCT_COLOR_SHIFT_3 = 5,
    WORK_STRUCT_COLOR_BITS_3 = 4,
    WORK_STRUCT_PENDING_3 = 1,
    WORK_STRUCT_DELAYED_3 = 2,
    WORK_STRUCT_PWQ_3 = 4,
    WORK_STRUCT_LINKED_3 = 8,
    WORK_STRUCT_STATIC_3 = 16,
    WORK_NR_COLORS_3 = 15,
    WORK_NO_COLOR_3 = 15,
    WORK_CPU_UNBOUND_3 = 8192,
    WORK_STRUCT_FLAG_BITS_3 = 9,
    WORK_OFFQ_FLAG_BASE_3 = 5,
    __WORK_OFFQ_CANCELING_3 = 5,
    WORK_OFFQ_CANCELING_3 = 32,
    WORK_OFFQ_FLAG_BITS_3 = 1,
    WORK_OFFQ_POOL_SHIFT_3 = 6,
    WORK_OFFQ_LEFT_3 = 58,
    WORK_OFFQ_POOL_BITS_3 = 31,
    WORK_OFFQ_POOL_NONE_3 = 2147483647,
    WORK_STRUCT_FLAG_MASK_3 = 511,
    WORK_STRUCT_WQ_DATA_MASK_3 = -512,
    WORK_STRUCT_NO_POOL_3 = 137438953408,
    WORK_BUSY_PENDING_3 = 1,
    WORK_BUSY_RUNNING_3 = 2,
    WORKER_DESC_LEN_3 = 24
};

#line 329  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
enum qlcnic_vlan_operations {
    QLC_VLAN_ADD = 0,
    QLC_VLAN_DELETE = 1
};

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
struct qlcnic_async_work_list {
   struct list_head list ;
   struct work_struct work ;
   void *ptr ;
   struct qlcnic_cmd_args *cmd ;
};

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
struct ldv_list_element {
   void *data ;
   struct ldv_list_element *next ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
typedef struct ldv_list_element *ldv_list_ptr;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef short s16;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_chan;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};

#line 151 
struct spi_message;

#line 152 
struct spi_transfer;

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_master *) ;
   int (*transfer_one_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_master *) ;
   int (*prepare_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_master *, struct spi_message *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_master *, struct spi_message *) ;
   int *cs_gpios ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
};

#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_transfer {
   void const *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cs_change : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) tx_nbits : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};

#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef unsigned long pthread_t;

#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};

#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct ldv_struct_devattr_instance_14 {
   struct device_attribute *arg1 ;
   struct device *arg0 ;
   int signal_pending ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_free_irq_6 {
   int arg0 ;
   int signal_pending ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_interrupt_scenario_16 {
   enum irqreturn (*arg2)(int , void *) ;
   enum irqreturn (*arg1)(int , void *) ;
   void *arg3 ;
   int arg0 ;
   int signal_pending ;
};

#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_pci_scenario_19 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};

#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_random_allocationless_scenario_15 {
   struct net_device *arg0 ;
   int signal_pending ;
};

#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/fvtp/.tmp_qlcnic_minidump.c"
void ldv_inline_asm(void);


#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
int __printk_ratelimit(char const *);


#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int snprintf(char *, size_t, char const * , ...);


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memcpy(void *, void const *, size_t);


#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_minidump.c.aux"
static void ldv_mutex_lock_75(struct mutex *ldv_func_arg1);


#line 43 
void ldv_mutex_model_lock(struct mutex *, char *);


#line 45 
void ldv_mutex_model_unlock(struct mutex *, char *);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size, gfp_t flags);


#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
static void ldv_mutex_unlock_76(struct mutex *ldv_func_arg1);


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void const volatile *addr)
{
  unsigned int ret;
  
#line 59 
  ldv_inline_asm();
  
#line 58 
  return ret;
}


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void volatile *addr)
{
  
#line 68 
  ldv_inline_asm();
  
#line 69 
  return;
}


#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
int kobject_uevent_env(struct kobject *, enum kobject_action, char **);


#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
void dev_err(struct device const *, char const * , ...);


#line 1089 
void _dev_info(struct device const *, char const * , ...);


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
void kfree(void const *);


#line 581 
static void *kzalloc(size_t size, gfp_t flags);


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, struct dma_attrs *);


#line 136 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, struct dma_attrs *);


#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
void usleep_range(unsigned long, unsigned long);


#line 3834  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void netdev_info(struct net_device const *, char const * , ...);


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
void *vzalloc(unsigned long);


#line 83 
void vfree(void const *);


#line 219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
u32 qlcnic_82xx_get_saved_state(void *t_hdr, u32 index);


#line 220 
void qlcnic_82xx_set_saved_state(void *t_hdr, u32 index, u32 value);


#line 221 
void qlcnic_82xx_cache_tmpl_hdr_values(struct qlcnic_fw_dump *fw_dump);


#line 222 
u32 qlcnic_82xx_get_cap_size(void *t_hdr, int index);


#line 223 
void qlcnic_82xx_set_sys_info(void *t_hdr, int idx, u32 value);


#line 224 
void qlcnic_82xx_store_cap_mask(void *tmpl_hdr, u32 mask);


#line 536  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
int qlcnic_83xx_get_fw_version(struct qlcnic_adapter *adapter);


#line 562 
int qlcnic_ind_wr(struct qlcnic_adapter *adapter, u32 addr, u32 data);


#line 563 
int qlcnic_ind_rd(struct qlcnic_adapter *adapter, u32 addr);


#line 578 
void qlcnic_free_mbx_args(struct qlcnic_cmd_args *cmd);


#line 602 
int qlcnic_83xx_lock_flash(struct qlcnic_adapter *adapter);


#line 603 
void qlcnic_83xx_unlock_flash(struct qlcnic_adapter *adapter);


#line 609 
int qlcnic_83xx_lockless_flash_read32(struct qlcnic_adapter *adapter, u32 flash_addr, u8 *p_data, int count);


#line 627 
void qlcnic_83xx_get_minidump_template(struct qlcnic_adapter *adapter);


#line 654 
u32 qlcnic_83xx_get_saved_state(void *t_hdr, u32 index);


#line 655 
void qlcnic_83xx_set_saved_state(void *t_hdr, u32 index, u32 value);


#line 656 
void qlcnic_83xx_cache_tmpl_hdr_values(struct qlcnic_fw_dump *fw_dump);


#line 657 
u32 qlcnic_83xx_get_cap_size(void *t_hdr, int index);


#line 658 
void qlcnic_83xx_set_sys_info(void *t_hdr, int idx, u32 value);


#line 659 
void qlcnic_83xx_store_cap_mask(void *tmpl_hdr, u32 mask);


#line 660 
int qlcnic_ms_mem_write128(struct qlcnic_adapter *adapter, u64 addr, u32 *data, u32 count);


#line 1543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
int qlcnic_fw_cmd_get_minidump_temp(struct qlcnic_adapter *adapter);


#line 1584 
int qlcnic_dump_fw(struct qlcnic_adapter *adapter);


#line 1585 
int qlcnic_enable_fw_dump_state(struct qlcnic_adapter *adapter);


#line 1586 
bool qlcnic_check_fw_dump_state(struct qlcnic_adapter *adapter);


#line 1878  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_alloc_mbx_args(struct qlcnic_cmd_args *mbx, struct qlcnic_adapter *adapter, u32 arg)
{
  int tmp;
  
#line 1881 
  tmp = (*(((adapter->ahw)->hw_ops)->alloc_mbx_args))(mbx,adapter,arg);
  
#line 1881 
  return tmp;
}


#line 1884  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  
#line 1887 
  if (((adapter->ahw)->hw_ops)->mbx_cmd != (int (*)(struct qlcnic_adapter *, struct qlcnic_cmd_args *))0) {
    int tmp;
    
#line 1888 
    tmp = (*(((adapter->ahw)->hw_ops)->mbx_cmd))(adapter,cmd);
    
#line 1888 
    __retres = tmp;
    
#line 1888 
    goto return_label;
  }
  else ;
  
#line 1890 
  __retres = -5;
  return_label: 
#line 1890 
                return __retres;
}


#line 2078  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static u32 qlcnic_get_saved_state(struct qlcnic_adapter *adapter, void *t_hdr, u32 index)
{
  u32 tmp;
  
#line 2081 
  tmp = (*(((adapter->ahw)->hw_ops)->get_saved_state))(t_hdr,index);
  
#line 2081 
  return tmp;
}


#line 2084  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_set_saved_state(struct qlcnic_adapter *adapter, void *t_hdr, u32 index, u32 value)
{
  
#line 2087 
  (*(((adapter->ahw)->hw_ops)->set_saved_state))(t_hdr,index,value);
  
#line 2088 
  return;
}


#line 2090  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_cache_tmpl_hdr_values(struct qlcnic_adapter *adapter, struct qlcnic_fw_dump *fw_dump)
{
  
#line 2093 
  (*(((adapter->ahw)->hw_ops)->cache_tmpl_hdr_values))(fw_dump);
  
#line 2094 
  return;
}


#line 2096  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static u32 qlcnic_get_cap_size(struct qlcnic_adapter *adapter, void *tmpl_hdr, int index)
{
  u32 tmp;
  
#line 2099 
  tmp = (*(((adapter->ahw)->hw_ops)->get_cap_size))(tmpl_hdr,index);
  
#line 2099 
  return tmp;
}


#line 2102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_set_sys_info(struct qlcnic_adapter *adapter, void *tmpl_hdr, int idx, u32 value)
{
  
#line 2105 
  (*(((adapter->ahw)->hw_ops)->set_sys_info))(tmpl_hdr,idx,value);
  
#line 2106 
  return;
}


#line 2299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_82xx_check(struct qlcnic_adapter *adapter)
{
  bool __retres;
  
#line 2301 
  unsigned short device = (adapter->pdev)->device;
  
#line 2302 
  __retres = (_Bool)((unsigned int)device == 32800U);
  
#line 2302 
  return __retres;
}


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 const qlcnic_ms_read_data[4U] = {1090519208U, 1090519212U, 1090519224U, 1090519228U};

#line 271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
u32 qlcnic_82xx_get_saved_state(void *t_hdr, u32 index)
{
  u32 __retres;
  
#line 273 
  struct qlcnic_82xx_dump_template_hdr *hdr = (struct qlcnic_82xx_dump_template_hdr *)t_hdr;
  
#line 275 
  __retres = hdr->saved_state[index];
  
#line 275 
  return __retres;
}


#line 278  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_82xx_set_saved_state(void *t_hdr, u32 index, u32 value)
{
  
#line 281 
  struct qlcnic_82xx_dump_template_hdr *hdr = (struct qlcnic_82xx_dump_template_hdr *)t_hdr;
  
#line 283 
  hdr->saved_state[index] = value;
  
#line 284 
  return;
}


#line 286  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_82xx_cache_tmpl_hdr_values(struct qlcnic_fw_dump *fw_dump)
{
  struct qlcnic_82xx_dump_template_hdr *hdr;
  
#line 290 
  hdr = (struct qlcnic_82xx_dump_template_hdr *)fw_dump->tmpl_hdr;
  
#line 291 
  fw_dump->tmpl_hdr_size = hdr->size;
  
#line 292 
  fw_dump->version = hdr->version;
  
#line 293 
  fw_dump->num_entries = hdr->num_entries;
  
#line 294 
  fw_dump->offset = hdr->offset;
  
#line 296 
  hdr->drv_cap_mask = hdr->cap_mask;
  
#line 297 
  fw_dump->cap_mask = hdr->cap_mask;
  
#line 299 
  fw_dump->use_pex_dma = (_Bool)(((int)hdr->capabilities & 1) != 0);
  
#line 300 
  return;
}


#line 302  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
u32 qlcnic_82xx_get_cap_size(void *t_hdr, int index)
{
  u32 __retres;
  
#line 304 
  struct qlcnic_82xx_dump_template_hdr *hdr = (struct qlcnic_82xx_dump_template_hdr *)t_hdr;
  
#line 306 
  __retres = hdr->cap_sizes[index];
  
#line 306 
  return __retres;
}


#line 309  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_82xx_set_sys_info(void *t_hdr, int idx, u32 value)
{
  
#line 311 
  struct qlcnic_82xx_dump_template_hdr *hdr = (struct qlcnic_82xx_dump_template_hdr *)t_hdr;
  
#line 313 
  hdr->sys_info[idx] = value;
  
#line 314 
  return;
}


#line 316  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_82xx_store_cap_mask(void *tmpl_hdr, u32 mask)
{
  
#line 318 
  struct qlcnic_82xx_dump_template_hdr *hdr = (struct qlcnic_82xx_dump_template_hdr *)tmpl_hdr;
  
#line 320 
  hdr->drv_cap_mask = mask;
  
#line 321 
  return;
}


#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
u32 qlcnic_83xx_get_saved_state(void *t_hdr, u32 index)
{
  u32 __retres;
  
#line 325 
  struct qlcnic_83xx_dump_template_hdr *hdr = (struct qlcnic_83xx_dump_template_hdr *)t_hdr;
  
#line 327 
  __retres = hdr->saved_state[index];
  
#line 327 
  return __retres;
}


#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_83xx_set_saved_state(void *t_hdr, u32 index, u32 value)
{
  
#line 333 
  struct qlcnic_83xx_dump_template_hdr *hdr = (struct qlcnic_83xx_dump_template_hdr *)t_hdr;
  
#line 335 
  hdr->saved_state[index] = value;
  
#line 336 
  return;
}


#line 340  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_83xx_cache_tmpl_hdr_values(struct qlcnic_fw_dump *fw_dump)
{
  struct qlcnic_83xx_dump_template_hdr *hdr;
  
#line 344 
  hdr = (struct qlcnic_83xx_dump_template_hdr *)fw_dump->tmpl_hdr;
  
#line 345 
  fw_dump->tmpl_hdr_size = hdr->size;
  
#line 346 
  fw_dump->version = hdr->version;
  
#line 347 
  fw_dump->num_entries = hdr->num_entries;
  
#line 348 
  fw_dump->offset = hdr->offset;
  
#line 350 
  hdr->drv_cap_mask = hdr->cap_mask;
  
#line 351 
  fw_dump->cap_mask = hdr->cap_mask;
  
#line 353 
  fw_dump->use_pex_dma = (_Bool)((fw_dump->version & 1048575U) > 131072U);
  
#line 354 
  return;
}


#line 357  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
u32 qlcnic_83xx_get_cap_size(void *t_hdr, int index)
{
  u32 __retres;
  
#line 359 
  struct qlcnic_83xx_dump_template_hdr *hdr = (struct qlcnic_83xx_dump_template_hdr *)t_hdr;
  
#line 361 
  __retres = hdr->cap_sizes[index];
  
#line 361 
  return __retres;
}


#line 364  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_83xx_set_sys_info(void *t_hdr, int idx, u32 value)
{
  
#line 366 
  struct qlcnic_83xx_dump_template_hdr *hdr = (struct qlcnic_83xx_dump_template_hdr *)t_hdr;
  
#line 368 
  hdr->sys_info[idx] = value;
  
#line 369 
  return;
}


#line 371  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_83xx_store_cap_mask(void *tmpl_hdr, u32 mask)
{
  struct qlcnic_83xx_dump_template_hdr *hdr;
  
#line 375 
  hdr = (struct qlcnic_83xx_dump_template_hdr *)tmpl_hdr;
  
#line 376 
  hdr->drv_cap_mask = mask;
  
#line 377 
  return;
}


#line 385  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_dump_crb(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  u32 __retres;
  int i;
  u32 addr;
  u32 data;
  int tmp;
  __le32 *tmp_0;
  __le32 *tmp_1;
  
#line 390 
  struct __crb *crb = & entry->region.crb;
  
#line 392 
  addr = crb->addr;
  
#line 394 
  i = 0;
  
#line 394 
  goto ldv_56004;
  ldv_56003: 
#line 395 
  ;
  
#line 395 
  tmp = qlcnic_ind_rd(adapter,addr);
  
#line 395 
  data = (unsigned int)tmp;
  
#line 396 
  tmp_0 = buffer;
  
#line 396 
  buffer += 1;
  
#line 396 
  *tmp_0 = addr;
  
#line 397 
  tmp_1 = buffer;
  
#line 397 
  buffer += 1;
  
#line 397 
  *tmp_1 = data;
  
#line 398 
  addr = (unsigned int)crb->stride + addr;
  
#line 394 
  i += 1;
  ldv_56004: 
#line 395 
  ;
  
#line 394 
  if (crb->no_ops > (unsigned int)i) 
#line 396 
                                     goto ldv_56003; else 
#line 399 
                                                          goto ldv_56005;
  ldv_56005: 
#line 400 
  ;
  
#line 400 
  __retres = crb->no_ops * 8U;
  
#line 400 
  return __retres;
}


#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_dump_ctrl(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  u32 __retres;
  int i;
  int k;
  u32 addr;
  u32 data;
  u32 temp;
  u8 no_ops;
  
#line 406 
  void *hdr = (adapter->ahw)->fw_dump.tmpl_hdr;
  
#line 407 
  struct __ctrl *ctr = & entry->region.ctrl;
  
#line 408 
  int timeout = 0;
  
#line 412 
  addr = ctr->addr;
  
#line 413 
  no_ops = (unsigned char)ctr->no_ops;
  
#line 415 
  i = 0;
  
#line 415 
  goto ldv_56038;
  ldv_56037: 
#line 416 
  ;
  
#line 416 
  k = 0;
  
#line 417 
  k = 0;
  
#line 417 
  goto ldv_56035;
  ldv_56034: 
#line 418 
  ;
  
#line 418 
  if ((((int)ctr->opcode >> k) & 1) == 0) 
#line 419 
                                          goto ldv_56020; else ;
  
#line 420 
  switch (1 << k) {
    int tmp;
    int tmp_0;
    int tmp_1;
    int tmp_2;
    int tmp_3;
    case 1: 
#line 421 
    ;
    
#line 422 
    qlcnic_ind_wr(adapter,addr,ctr->val1);
    
#line 423 
    goto ldv_56022;
    case 2: 
#line 424 
    ;
    
#line 425 
    tmp = qlcnic_ind_rd(adapter,addr);
    
#line 425 
    data = (unsigned int)tmp;
    
#line 426 
    qlcnic_ind_wr(adapter,addr,data);
    
#line 427 
    goto ldv_56022;
    case 4: 
#line 428 
    ;
    
#line 429 
    tmp_0 = qlcnic_ind_rd(adapter,addr);
    
#line 429 
    data = (unsigned int)tmp_0;
    
#line 430 
    qlcnic_ind_wr(adapter,addr,ctr->val2 & data);
    
#line 432 
    goto ldv_56022;
    case 8: 
#line 433 
    ;
    
#line 434 
    tmp_1 = qlcnic_ind_rd(adapter,addr);
    
#line 434 
    data = (unsigned int)tmp_1;
    
#line 435 
    qlcnic_ind_wr(adapter,addr,ctr->val3 | data);
    
#line 437 
    goto ldv_56022;
    case 16: 
#line 438 
    ;
    
#line 439 
    goto ldv_56029;
    ldv_56028: 
#line 440 
    ;
    
#line 440 
    tmp_2 = qlcnic_ind_rd(adapter,addr);
    
#line 440 
    data = (unsigned int)tmp_2;
    
#line 441 
    if ((ctr->val2 & data) == ctr->val1) 
#line 442 
                                         goto ldv_56027; else ;
    
#line 443 
    usleep_range(1000UL,2000UL);
    
#line 444 
    timeout += 1;
    ldv_56029: 
#line 445 
    ;
    
#line 439 
    if ((int)ctr->timeout >= timeout) 
#line 441 
                                      goto ldv_56028; else 
#line 444 
                                                           goto ldv_56027;
    ldv_56027: 
#line 445 
    ;
    
#line 446 
    if ((int)ctr->timeout < timeout) {
      
#line 447 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"Timed out, aborting poll CRB\n");
      
#line 449 
      __retres = 4294967274U;
      
#line 449 
      goto return_label;
    }
    else ;
    
#line 451 
    goto ldv_56022;
    case 32: 
#line 452 
    ;
    
#line 453 
    temp = (unsigned int)ctr->index_a;
    
#line 454 
    if (temp != 0U) 
#line 455 
                    addr = qlcnic_get_saved_state(adapter,hdr,temp); else ;
    
#line 458 
    tmp_3 = qlcnic_ind_rd(adapter,addr);
    
#line 458 
    data = (unsigned int)tmp_3;
    
#line 459 
    qlcnic_set_saved_state(adapter,hdr,(unsigned int)ctr->index_v,data);
    
#line 461 
    goto ldv_56022;
    case 64: 
#line 462 
    ;
    
#line 463 
    temp = (unsigned int)ctr->index_v;
    
#line 464 
    if (temp != 0U) 
#line 465 
                    data = qlcnic_get_saved_state(adapter,hdr,temp); else 
                                                                    
#line 469 
                                                                    data = ctr->val1;
    
#line 471 
    temp = (unsigned int)ctr->index_a;
    
#line 472 
    if (temp != 0U) 
#line 473 
                    addr = qlcnic_get_saved_state(adapter,hdr,temp); else ;
    
#line 476 
    qlcnic_ind_wr(adapter,addr,data);
    
#line 477 
    goto ldv_56022;
    case 128: 
#line 478 
    ;
    
#line 479 
    data = qlcnic_get_saved_state(adapter,hdr,(unsigned int)ctr->index_v);
    
#line 481 
    data <<= (int)ctr->shl_val;
    
#line 482 
    data >>= (int)ctr->shr_val;
    
#line 483 
    if (ctr->val2 != 0U) 
#line 484 
                         data = ctr->val2 & data; else ;
    
#line 485 
    data = ctr->val3 | data;
    
#line 486 
    data = ctr->val1 + data;
    
#line 487 
    qlcnic_set_saved_state(adapter,hdr,(unsigned int)ctr->index_v,data);
    
#line 489 
    goto ldv_56022;
    default: 
#line 490 
    ;
    
#line 491 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Unknown opcode\n");
    
#line 493 
    goto ldv_56022;
  }
  ldv_56022: 
#line 495 
  ;
  ldv_56020: 
#line 496 
  ;
  
#line 417 
  k += 1;
  ldv_56035: 
#line 418 
  ;
  
#line 417 
  if (k <= 7) 
#line 419 
              goto ldv_56034; else 
#line 422 
                                   goto ldv_56036;
  ldv_56036: 
#line 423 
  ;
  
#line 496 
  addr = (unsigned int)ctr->stride + addr;
  
#line 415 
  i += 1;
  ldv_56038: 
#line 416 
  ;
  
#line 415 
  if ((int)no_ops > i) 
#line 417 
                       goto ldv_56037; else 
#line 420 
                                            goto ldv_56039;
  ldv_56039: 
#line 421 
  ;
  
#line 498 
  __retres = 0U;
  return_label: 
#line 498 
                return __retres;
}


#line 501  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_dump_mux(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  u32 __retres;
  int loop;
  u32 val;
  int tmp;
  __le32 *tmp_0;
  __le32 *tmp_1;
  
#line 505 
  u32 data = 0U;
  
#line 506 
  struct __mux *mux = & entry->region.mux;
  
#line 508 
  val = mux->val;
  
#line 509 
  loop = 0;
  
#line 509 
  goto ldv_56050;
  ldv_56049: 
#line 510 
  ;
  
#line 510 
  qlcnic_ind_wr(adapter,mux->addr,val);
  
#line 511 
  tmp = qlcnic_ind_rd(adapter,mux->read_addr);
  
#line 511 
  data = (unsigned int)tmp;
  
#line 512 
  tmp_0 = buffer;
  
#line 512 
  buffer += 1;
  
#line 512 
  *tmp_0 = val;
  
#line 513 
  tmp_1 = buffer;
  
#line 513 
  buffer += 1;
  
#line 513 
  *tmp_1 = data;
  
#line 514 
  val = mux->val_stride + val;
  
#line 509 
  loop += 1;
  ldv_56050: 
#line 510 
  ;
  
#line 509 
  if (mux->no_ops > (unsigned int)loop) 
#line 511 
                                        goto ldv_56049; else 
#line 514 
                                                             goto ldv_56051;
  ldv_56051: 
#line 515 
  ;
  
#line 516 
  __retres = mux->no_ops * 8U;
  
#line 516 
  return __retres;
}


#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_dump_que(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  u32 __retres;
  int i;
  int loop;
  u32 cnt;
  u32 addr;
  u32 data;
  int tmp;
  __le32 *tmp_0;
  
#line 523 
  u32 que_id = 0U;
  
#line 524 
  struct __queue *que = & entry->region.que;
  
#line 526 
  addr = que->read_addr;
  
#line 527 
  cnt = (unsigned int)que->read_addr_cnt;
  
#line 529 
  loop = 0;
  
#line 529 
  goto ldv_56068;
  ldv_56067: 
#line 530 
  ;
  
#line 530 
  qlcnic_ind_wr(adapter,que->sel_addr,que_id);
  
#line 531 
  addr = que->read_addr;
  
#line 532 
  i = 0;
  
#line 532 
  goto ldv_56065;
  ldv_56064: 
#line 533 
  ;
  
#line 533 
  tmp = qlcnic_ind_rd(adapter,addr);
  
#line 533 
  data = (unsigned int)tmp;
  
#line 534 
  tmp_0 = buffer;
  
#line 534 
  buffer += 1;
  
#line 534 
  *tmp_0 = data;
  
#line 535 
  addr = (unsigned int)que->read_addr_stride + addr;
  
#line 532 
  i += 1;
  ldv_56065: 
#line 533 
  ;
  
#line 532 
  if ((unsigned int)i < cnt) 
#line 534 
                             goto ldv_56064; else 
#line 537 
                                                  goto ldv_56066;
  ldv_56066: 
#line 538 
  ;
  
#line 537 
  que_id = (unsigned int)que->stride + que_id;
  
#line 529 
  loop += 1;
  ldv_56068: 
#line 530 
  ;
  
#line 529 
  if (que->no_ops > (unsigned int)loop) 
#line 531 
                                        goto ldv_56067; else 
#line 534 
                                                             goto ldv_56069;
  ldv_56069: 
#line 535 
  ;
  
#line 539 
  __retres = (que->no_ops * cnt) * 4U;
  
#line 539 
  return __retres;
}


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_dump_ocm(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  u32 __retres;
  int i;
  u32 data;
  void *addr;
  __le32 *tmp;
  
#line 548 
  struct __ocm *ocm = & entry->region.ocm;
  
#line 550 
  addr = (adapter->ahw)->pci_base0 + ocm->read_addr;
  
#line 551 
  i = 0;
  
#line 551 
  goto ldv_56080;
  ldv_56079: 
#line 552 
  ;
  
#line 552 
  data = readl((void const volatile *)addr);
  
#line 553 
  tmp = buffer;
  
#line 553 
  buffer += 1;
  
#line 553 
  *tmp = data;
  
#line 554 
  addr += ocm->read_addr_stride;
  
#line 551 
  i += 1;
  ldv_56080: 
#line 552 
  ;
  
#line 551 
  if (ocm->no_ops > (unsigned int)i) 
#line 553 
                                     goto ldv_56079; else 
#line 556 
                                                          goto ldv_56081;
  ldv_56081: 
#line 557 
  ;
  
#line 556 
  __retres = ocm->no_ops * 4U;
  
#line 556 
  return __retres;
}


#line 559  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_read_rom(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  u32 __retres;
  int i;
  u32 fl_addr;
  u32 size;
  u32 val;
  u32 lck_val;
  u32 addr;
  int tmp;
  __le32 *tmp_0;
  
#line 562 
  int count = 0;
  
#line 564 
  struct __mem *rom = & entry->region.mem;
  
#line 566 
  fl_addr = rom->addr;
  
#line 567 
  size = rom->size / 4U;
  lock_try: 
#line 568 
  ;
  
#line 569 
  lck_val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 21U)));
  
#line 570 
  if (lck_val == 0U && count <= 999) {
    
#line 571 
    usleep_range(10000UL,11000UL);
    
#line 572 
    count += 1;
    
#line 573 
    goto lock_try;
  }
  else ;
  
#line 575 
  writel((unsigned int)(adapter->ahw)->pci_func,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 3U)));
  
#line 577 
  i = 0;
  
#line 577 
  goto ldv_56097;
  ldv_56096: 
#line 578 
  ;
  
#line 578 
  addr = fl_addr & 4294901760U;
  
#line 579 
  qlcnic_ind_wr(adapter,1108410416U,addr);
  
#line 580 
  addr = (unsigned int)((int)((unsigned short)fl_addr) + 1108672512);
  
#line 581 
  tmp = qlcnic_ind_rd(adapter,addr);
  
#line 581 
  val = (unsigned int)tmp;
  
#line 582 
  fl_addr += 4U;
  
#line 583 
  tmp_0 = buffer;
  
#line 583 
  buffer += 1;
  
#line 583 
  *tmp_0 = val;
  
#line 577 
  i += 1;
  ldv_56097: 
#line 578 
  ;
  
#line 577 
  if ((unsigned int)i < size) 
#line 579 
                              goto ldv_56096; else 
#line 582 
                                                   goto ldv_56098;
  ldv_56098: 
#line 583 
  ;
  
#line 585 
  readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 22U)));
  
#line 586 
  __retres = rom->size;
  
#line 586 
  return __retres;
}


#line 589  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_dump_l1_cache(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  u32 __retres;
  int i;
  u32 cnt;
  u32 val;
  u32 data;
  u32 addr;
  int tmp;
  __le32 *tmp_0;
  
#line 594 
  struct __cache *l1 = & entry->region.cache;
  
#line 596 
  val = (unsigned int)l1->init_tag_val;
  
#line 598 
  i = 0;
  
#line 598 
  goto ldv_56114;
  ldv_56113: 
#line 599 
  ;
  
#line 599 
  qlcnic_ind_wr(adapter,l1->addr,val);
  
#line 600 
  qlcnic_ind_wr(adapter,l1->ctrl_addr,(unsigned int)((unsigned short)l1->ctrl_val));
  
#line 601 
  addr = l1->read_addr;
  
#line 602 
  cnt = (unsigned int)l1->read_addr_num;
  
#line 603 
  goto ldv_56111;
  ldv_56110: 
#line 604 
  ;
  
#line 604 
  tmp = qlcnic_ind_rd(adapter,addr);
  
#line 604 
  data = (unsigned int)tmp;
  
#line 605 
  tmp_0 = buffer;
  
#line 605 
  buffer += 1;
  
#line 605 
  *tmp_0 = data;
  
#line 606 
  addr = (unsigned int)l1->read_addr_stride + addr;
  
#line 607 
  cnt -= 1U;
  ldv_56111: 
#line 608 
  ;
  
#line 603 
  if (cnt != 0U) 
#line 605 
                 goto ldv_56110; else 
#line 608 
                                      goto ldv_56112;
  ldv_56112: 
#line 609 
  ;
  
#line 609 
  val = (unsigned int)l1->stride + val;
  
#line 598 
  i += 1;
  ldv_56114: 
#line 599 
  ;
  
#line 598 
  if (l1->no_ops > (unsigned int)i) 
#line 600 
                                    goto ldv_56113; else 
#line 603 
                                                         goto ldv_56115;
  ldv_56115: 
#line 604 
  ;
  
#line 611 
  __retres = (l1->no_ops * (unsigned int)l1->read_addr_num) * 4U;
  
#line 611 
  return __retres;
}


#line 614  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_dump_l2_cache(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  u32 __retres;
  int i;
  u32 cnt;
  u32 val;
  u32 data;
  u32 addr;
  u8 poll_mask;
  u8 poll_to;
  int tmp;
  int tmp_0;
  __le32 *tmp_1;
  
#line 619 
  u8 time_out = (unsigned char)0U;
  
#line 620 
  struct __cache *l2 = & entry->region.cache;
  
#line 622 
  val = (unsigned int)l2->init_tag_val;
  
#line 623 
  poll_mask = (unsigned char)(l2->ctrl_val >> 16);
  
#line 624 
  poll_to = (unsigned char)((int)((unsigned short)(l2->ctrl_val >> 16)) >> 8);
  
#line 626 
  i = 0;
  
#line 626 
  goto ldv_56138;
  ldv_56137: 
#line 627 
  ;
  
#line 627 
  qlcnic_ind_wr(adapter,l2->addr,val);
  
#line 628 
  if ((unsigned int)((unsigned short)l2->ctrl_val) != 0U) 
#line 629 
                                                          qlcnic_ind_wr(adapter,l2->ctrl_addr,(unsigned int)((unsigned short)l2->ctrl_val)); else ;
  
#line 631 
  if ((unsigned int)poll_mask == 0U) 
#line 632 
                                     goto skip_poll; else ;
  ldv_56132: 
#line 633 
  ;
  
#line 634 
  tmp = qlcnic_ind_rd(adapter,l2->ctrl_addr);
  
#line 634 
  data = (unsigned int)tmp;
  
#line 635 
  if (((unsigned int)poll_mask & data) == 0U) 
#line 636 
                                              goto ldv_56131; else ;
  
#line 637 
  usleep_range(1000UL,2000UL);
  
#line 638 
  time_out = (u8)((int)time_out + 1);
  
#line 639 
  if ((int)time_out <= (int)poll_to) 
#line 641 
                                     goto ldv_56132; else 
#line 644 
                                                          goto ldv_56131;
  ldv_56131: 
#line 645 
  ;
  
#line 641 
  if ((int)time_out > (int)poll_to) {
    
#line 642 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Timeout exceeded in %s, aborting dump\n","qlcnic_dump_l2_cache");
    
#line 645 
    __retres = 4294967274U;
    
#line 645 
    goto return_label;
  }
  else ;
  skip_poll: 
#line 647 
  ;
  
#line 648 
  addr = l2->read_addr;
  
#line 649 
  cnt = (unsigned int)l2->read_addr_num;
  
#line 650 
  goto ldv_56135;
  ldv_56134: 
#line 651 
  ;
  
#line 651 
  tmp_0 = qlcnic_ind_rd(adapter,addr);
  
#line 651 
  data = (unsigned int)tmp_0;
  
#line 652 
  tmp_1 = buffer;
  
#line 652 
  buffer += 1;
  
#line 652 
  *tmp_1 = data;
  
#line 653 
  addr = (unsigned int)l2->read_addr_stride + addr;
  
#line 654 
  cnt -= 1U;
  ldv_56135: 
#line 655 
  ;
  
#line 650 
  if (cnt != 0U) 
#line 652 
                 goto ldv_56134; else 
#line 655 
                                      goto ldv_56136;
  ldv_56136: 
#line 656 
  ;
  
#line 656 
  val = (unsigned int)l2->stride + val;
  
#line 626 
  i += 1;
  ldv_56138: 
#line 627 
  ;
  
#line 626 
  if (l2->no_ops > (unsigned int)i) 
#line 628 
                                    goto ldv_56137; else 
#line 631 
                                                         goto ldv_56139;
  ldv_56139: 
#line 632 
  ;
  
#line 658 
  __retres = (l2->no_ops * (unsigned int)l2->read_addr_num) * 4U;
  return_label: 
#line 658 
                return __retres;
}


#line 661  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_read_memory_test_agent(struct qlcnic_adapter *adapter, struct __mem *mem, __le32 *buffer, int *ret)
{
  u32 __retres;
  u32 addr;
  u32 data;
  u32 test;
  int i;
  int reg_read;
  int tmp;
  int tmp_1;
  __le32 *tmp_2;
  
#line 668 
  reg_read = (int)mem->size;
  
#line 669 
  addr = mem->addr;
  
#line 671 
  if ((addr & 15U) != 0U || ((unsigned int)reg_read & 15U) != 0U) {
    
#line 672 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Unaligned memory addr:0x%x size:0x%x\n",addr,reg_read);
    
#line 675 
    *ret = -22;
    
#line 676 
    __retres = 0U;
    
#line 676 
    goto return_label;
  }
  else ;
  
#line 679 
  ldv_mutex_lock_75(& (adapter->ahw)->mem_lock);
  
#line 681 
  goto ldv_56160;
  ldv_56159: 
#line 682 
  ;
  
#line 682 
  qlcnic_ind_wr(adapter,1090519188U,addr);
  
#line 683 
  qlcnic_ind_wr(adapter,1090519192U,0U);
  
#line 684 
  qlcnic_ind_wr(adapter,1090519184U,3U);
  
#line 686 
  i = 0;
  
#line 686 
  goto ldv_56153;
  ldv_56152: 
#line 687 
  ;
  
#line 687 
  tmp = qlcnic_ind_rd(adapter,1090519184U);
  
#line 687 
  test = (unsigned int)tmp;
  
#line 688 
  if ((test & 8U) == 0U) 
#line 689 
                         goto ldv_56151; else ;
  
#line 686 
  i += 1;
  ldv_56153: 
#line 687 
  ;
  
#line 686 
  if (i <= 999) 
#line 688 
                goto ldv_56152; else 
#line 691 
                                     goto ldv_56151;
  ldv_56151: 
#line 692 
  ;
  
#line 691 
  if (i == 1000) {
    int tmp_0;
    
#line 692 
    tmp_0 = __printk_ratelimit("qlcnic_read_memory_test_agent");
    
#line 692 
    if (tmp_0 != 0) {
      
#line 693 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"failed to read through agent\n");
      
#line 695 
      *ret = -5;
      
#line 696 
      goto out;
    }
    else ;
  }
  else ;
  
#line 699 
  i = 0;
  
#line 699 
  goto ldv_56157;
  ldv_56156: 
#line 700 
  ;
  
#line 700 
  tmp_1 = qlcnic_ind_rd(adapter,qlcnic_ms_read_data[i]);
  
#line 700 
  data = (unsigned int)tmp_1;
  
#line 701 
  tmp_2 = buffer;
  
#line 701 
  buffer += 1;
  
#line 701 
  *tmp_2 = data;
  
#line 699 
  i += 1;
  ldv_56157: 
#line 700 
  ;
  
#line 699 
  if (i <= 3) 
#line 701 
              goto ldv_56156; else 
#line 704 
                                   goto ldv_56158;
  ldv_56158: 
#line 705 
  ;
  
#line 703 
  addr += 16U;
  
#line 704 
  reg_read += -16;
  
#line 705 
  ret += 16U;
  ldv_56160: 
#line 706 
  ;
  
#line 681 
  if (reg_read != 0) 
#line 683 
                     goto ldv_56159; else 
#line 686 
                                          goto ldv_56161;
  ldv_56161: 
#line 687 
  ;
  out: 
#line 707 
  ;
  
#line 708 
  ldv_mutex_unlock_76(& (adapter->ahw)->mem_lock);
  
#line 709 
  __retres = mem->size;
  return_label: 
#line 709 
                return __retres;
}


#line 720  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static int qlcnic_start_pex_dma(struct qlcnic_adapter *adapter, struct __mem *mem)
{
  int __retres;
  u32 dma_no;
  u32 dma_base_addr;
  u32 temp_addr;
  int i;
  int ret;
  int dma_sts;
  void *tmpl_hdr;
  
#line 723 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 728 
  tmpl_hdr = (adapter->ahw)->fw_dump.tmpl_hdr;
  
#line 729 
  dma_no = qlcnic_get_saved_state(adapter,tmpl_hdr,8U);
  
#line 731 
  dma_base_addr = (dma_no + 30514U) * 65536U;
  
#line 733 
  temp_addr = dma_base_addr;
  
#line 734 
  ret = qlcnic_ind_wr(adapter,temp_addr,mem->desc_card_addr);
  
#line 735 
  if (ret != 0) {
    
#line 736 
    __retres = ret;
    
#line 736 
    goto return_label;
  }
  else ;
  
#line 738 
  temp_addr = dma_base_addr + 4U;
  
#line 739 
  ret = qlcnic_ind_wr(adapter,temp_addr,0U);
  
#line 740 
  if (ret != 0) {
    
#line 741 
    __retres = ret;
    
#line 741 
    goto return_label;
  }
  else ;
  
#line 743 
  temp_addr = dma_base_addr + 8U;
  
#line 744 
  ret = qlcnic_ind_wr(adapter,temp_addr,mem->start_dma_cmd);
  
#line 745 
  if (ret != 0) {
    
#line 746 
    __retres = ret;
    
#line 746 
    goto return_label;
  }
  else ;
  
#line 749 
  temp_addr = dma_base_addr + 8U;
  
#line 750 
  i = 0;
  
#line 750 
  goto ldv_56176;
  ldv_56175: 
#line 751 
  ;
  
#line 751 
  dma_sts = qlcnic_ind_rd(adapter,temp_addr);
  
#line 753 
  if ((dma_sts & 2) != 0) 
#line 754 
                          usleep_range(250UL,500UL); else 
#line 756 
                                                          goto ldv_56174;
  
#line 750 
  i += 1;
  ldv_56176: 
#line 751 
  ;
  
#line 750 
  if (i <= 399) 
#line 752 
                goto ldv_56175; else 
#line 755 
                                     goto ldv_56174;
  ldv_56174: 
#line 756 
  ;
  
#line 759 
  if (i > 399) {
    
#line 760 
    _dev_info((struct device const *)dev,"PEX DMA operation timed out");
    
#line 761 
    ret = -5;
  }
  else ;
  
#line 764 
  __retres = ret;
  return_label: 
#line 764 
                return __retres;
}


#line 767  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_read_memory_pexdma(struct qlcnic_adapter *adapter, struct __mem *mem, __le32 *buffer, int *ret)
{
  u32 __retres;
  u32 temp;
  u32 dma_base_addr;
  struct qlcnic_pex_dma_descriptor *dma_descr;
  dma_addr_t dma_phys_addr;
  void *dma_buffer;
  void *tmpl_hdr;
  int tmp;
  
#line 771 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  
#line 772 
  u32 size = 0U;
  
#line 772 
  u32 read_size = 0U;
  
#line 774 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 779 
  tmpl_hdr = fw_dump->tmpl_hdr;
  
#line 782 
  temp = qlcnic_get_saved_state(adapter,tmpl_hdr,8U);
  
#line 784 
  dma_base_addr = (temp + 30514U) * 65536U;
  
#line 785 
  tmp = qlcnic_ind_rd(adapter,dma_base_addr + 8U);
  
#line 785 
  temp = (unsigned int)tmp;
  
#line 788 
  if (temp >= (u32)0) {
    
#line 789 
    _dev_info((struct device const *)dev,"%s: DMA engine is not available\n","qlcnic_read_memory_pexdma");
    
#line 790 
    *ret = -5;
    
#line 791 
    __retres = 0U;
    
#line 791 
    goto return_label;
  }
  else ;
  
#line 795 
  dma_descr = (struct qlcnic_pex_dma_descriptor *)kzalloc(48UL,208U);
  
#line 797 
  if (dma_descr == (struct qlcnic_pex_dma_descriptor *)0) {
    
#line 798 
    *ret = -12;
    
#line 799 
    __retres = 0U;
    
#line 799 
    goto return_label;
  }
  else ;
  
#line 807 
  dma_phys_addr = fw_dump->phys_addr;
  
#line 808 
  dma_buffer = fw_dump->dma_buffer;
  
#line 809 
  temp = 0U;
  
#line 810 
  temp = mem->dma_desc_cmd & 65295U;
  
#line 811 
  temp = ((unsigned int)((int)(adapter->ahw)->pci_func << 4) & 255U) | temp;
  
#line 812 
  dma_descr->dma_desc_cmd = temp << 16;
  
#line 813 
  dma_descr->dma_bus_addr_low = (unsigned int)dma_phys_addr;
  
#line 814 
  dma_descr->dma_bus_addr_high = (unsigned int)(dma_phys_addr >> 32);
  
#line 815 
  dma_descr->src_addr_high = 0U;
  
#line 818 
  goto ldv_56196;
  ldv_56195: 
#line 819 
  ;
  
#line 819 
  if (mem->size - read_size > 65535U) 
#line 820 
                                      size = 65536U; else 
#line 822 
                                                          size = mem->size - read_size;
  
#line 824 
  dma_descr->src_addr_low = mem->addr + read_size;
  
#line 825 
  dma_descr->read_data_size = size;
  
#line 828 
  temp = 3U;
  
#line 829 
  *ret = qlcnic_ms_mem_write128(adapter,(unsigned long long)mem->desc_card_addr,(u32 *)dma_descr,temp);
  
#line 831 
  if (*ret != 0) {
    
#line 832 
    _dev_info((struct device const *)dev,"Failed to write DMA descriptor to MS memory at address 0x%x\n",mem->desc_card_addr);
    
#line 834 
    goto free_dma_descr;
  }
  else ;
  
#line 837 
  *ret = qlcnic_start_pex_dma(adapter,mem);
  
#line 838 
  if (*ret != 0) {
    
#line 839 
    _dev_info((struct device const *)dev,"Failed to start PEX DMA operation\n");
    
#line 840 
    goto free_dma_descr;
  }
  else ;
  
#line 843 
  memcpy((void *)buffer,(void const *)dma_buffer,(unsigned long)size);
  
#line 844 
  buffer += size / 4U;
  
#line 845 
  read_size += size;
  ldv_56196: 
#line 846 
  ;
  
#line 818 
  if (mem->size > read_size) 
#line 820 
                             goto ldv_56195; else 
#line 823 
                                                  goto ldv_56197;
  ldv_56197: 
#line 824 
  ;
  free_dma_descr: 
#line 848 
  ;
  
#line 849 
  kfree((void const *)dma_descr);
  
#line 851 
  __retres = read_size;
  return_label: 
#line 851 
                return __retres;
}


#line 854  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_read_memory(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  u32 __retres;
  u32 data_size;
  
#line 857 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  
#line 858 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 859 
  struct __mem *mem = & entry->region.mem;
  
#line 861 
  int ret = 0;
  
#line 863 
  if ((int)fw_dump->use_pex_dma != 0) {
    
#line 864 
    data_size = qlcnic_read_memory_pexdma(adapter,mem,buffer,& ret);
    
#line 866 
    if (ret != 0) 
#line 867 
                  _dev_info((struct device const *)dev,"Failed to read memory dump using PEX DMA: mask[0x%x]\n",(int)entry->hdr.mask);
    else {
      
#line 871 
      __retres = data_size;
      
#line 871 
      goto return_label;
    }
  }
  else ;
  
#line 874 
  data_size = qlcnic_read_memory_test_agent(adapter,mem,buffer,& ret);
  
#line 875 
  if (ret != 0) {
    
#line 876 
    _dev_info((struct device const *)dev,"Failed to read memory dump using test agent method: mask[0x%x]\n",(int)entry->hdr.mask);
    
#line 879 
    __retres = 0U;
    
#line 879 
    goto return_label;
  }
  else {
    
#line 881 
    __retres = data_size;
    
#line 881 
    goto return_label;
  }
  return_label: 
#line 875 
                return __retres;
}


#line 885  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_dump_nop(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  u32 __retres;
  
#line 888 
  entry->hdr.flags = (unsigned char)((unsigned int)entry->hdr.flags | 128U);
  
#line 889 
  __retres = 0U;
  
#line 889 
  return __retres;
}


#line 892  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static int qlcnic_valid_dump_entry(struct device *dev, struct qlcnic_dump_entry *entry, u32 size)
{
  
#line 895 
  int ret = 1;
  
#line 896 
  if (entry->hdr.cap_size != size) {
    
#line 897 
    dev_err((struct device const *)dev,"Invalid entry, Type:%d\tMask:%d\tSize:%dCap_size:%d\n",entry->hdr.type,(int)entry->hdr.mask,size,entry->hdr.cap_size);
    
#line 901 
    ret = 0;
  }
  else ;
  
#line 903 
  return ret;
}


#line 906  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_read_pollrdmwr(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  u32 __retres;
  u32 data;
  u32 wait_count;
  u32 poll_wait_0;
  u32 temp;
  int tmp;
  int tmp_0;
  int tmp_1;
  __le32 *tmp_2;
  __le32 *tmp_3;
  
#line 910 
  struct __pollrdmwr *poll = & entry->region.pollrdmwr;
  
#line 913 
  poll_wait_0 = poll->poll_wait;
  
#line 915 
  qlcnic_ind_wr(adapter,poll->addr1,poll->val1);
  
#line 916 
  wait_count = 0U;
  
#line 918 
  goto ldv_56231;
  ldv_56230: 
#line 919 
  ;
  
#line 919 
  tmp = qlcnic_ind_rd(adapter,poll->addr1);
  
#line 919 
  data = (unsigned int)tmp;
  
#line 920 
  if ((poll->poll_mask & data) != 0U) 
#line 921 
                                      goto ldv_56229; else ;
  
#line 922 
  wait_count += 1U;
  ldv_56231: 
#line 923 
  ;
  
#line 918 
  if (wait_count < poll_wait_0) 
#line 920 
                                goto ldv_56230; else 
#line 923 
                                                     goto ldv_56229;
  ldv_56229: 
#line 924 
  ;
  
#line 925 
  if (wait_count == poll_wait_0) {
    
#line 926 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Timeout exceeded in %s, aborting dump\n","qlcnic_read_pollrdmwr");
    
#line 929 
    __retres = 0U;
    
#line 929 
    goto return_label;
  }
  else ;
  
#line 932 
  tmp_0 = qlcnic_ind_rd(adapter,poll->addr2);
  
#line 932 
  data = (unsigned int)tmp_0 & poll->mod_mask;
  
#line 933 
  qlcnic_ind_wr(adapter,poll->addr2,data);
  
#line 934 
  qlcnic_ind_wr(adapter,poll->addr1,poll->val2);
  
#line 935 
  wait_count = 0U;
  
#line 937 
  goto ldv_56235;
  ldv_56234: 
#line 938 
  ;
  
#line 938 
  tmp_1 = qlcnic_ind_rd(adapter,poll->addr1);
  
#line 938 
  temp = (unsigned int)tmp_1;
  
#line 939 
  if ((poll->poll_mask & temp) != 0U) 
#line 940 
                                      goto ldv_56233; else ;
  
#line 941 
  wait_count += 1U;
  ldv_56235: 
#line 942 
  ;
  
#line 937 
  if (wait_count < poll_wait_0) 
#line 939 
                                goto ldv_56234; else 
#line 942 
                                                     goto ldv_56233;
  ldv_56233: 
#line 943 
  ;
  
#line 944 
  tmp_2 = buffer;
  
#line 944 
  buffer += 1;
  
#line 944 
  *tmp_2 = poll->addr2;
  
#line 945 
  tmp_3 = buffer;
  
#line 945 
  buffer += 1;
  
#line 945 
  *tmp_3 = data;
  
#line 947 
  __retres = 8U;
  return_label: 
#line 947 
                return __retres;
}


#line 951  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_read_pollrd(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  u32 __retres;
  u32 data;
  u32 wait_count;
  u32 poll_wait_0;
  u32 sel_val;
  int i;
  int tmp;
  int tmp_0;
  __le32 *tmp_1;
  __le32 *tmp_2;
  
#line 954 
  struct __pollrd *pollrd = & entry->region.pollrd;
  
#line 958 
  poll_wait_0 = pollrd->poll_wait;
  
#line 959 
  sel_val = pollrd->sel_val;
  
#line 961 
  i = 0;
  
#line 961 
  goto ldv_56252;
  ldv_56251: 
#line 962 
  ;
  
#line 962 
  qlcnic_ind_wr(adapter,pollrd->sel_addr,sel_val);
  
#line 963 
  wait_count = 0U;
  
#line 964 
  goto ldv_56249;
  ldv_56248: 
#line 965 
  ;
  
#line 965 
  tmp = qlcnic_ind_rd(adapter,pollrd->sel_addr);
  
#line 965 
  data = (unsigned int)tmp;
  
#line 966 
  if ((pollrd->poll_mask & data) != 0U) 
#line 967 
                                        goto ldv_56247; else ;
  
#line 968 
  wait_count += 1U;
  ldv_56249: 
#line 969 
  ;
  
#line 964 
  if (wait_count < poll_wait_0) 
#line 966 
                                goto ldv_56248; else 
#line 969 
                                                     goto ldv_56247;
  ldv_56247: 
#line 970 
  ;
  
#line 971 
  if (wait_count == poll_wait_0) {
    
#line 972 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Timeout exceeded in %s, aborting dump\n","qlcnic_read_pollrd");
    
#line 975 
    __retres = 0U;
    
#line 975 
    goto return_label;
  }
  else ;
  
#line 978 
  tmp_0 = qlcnic_ind_rd(adapter,pollrd->read_addr);
  
#line 978 
  data = (unsigned int)tmp_0;
  
#line 979 
  tmp_1 = buffer;
  
#line 979 
  buffer += 1;
  
#line 979 
  *tmp_1 = sel_val;
  
#line 980 
  tmp_2 = buffer;
  
#line 980 
  buffer += 1;
  
#line 980 
  *tmp_2 = data;
  
#line 981 
  sel_val = (unsigned int)pollrd->sel_val_stride + sel_val;
  
#line 961 
  i += 1;
  ldv_56252: 
#line 962 
  ;
  
#line 961 
  if ((int)pollrd->no_ops > i) 
#line 963 
                               goto ldv_56251; else 
#line 966 
                                                    goto ldv_56253;
  ldv_56253: 
#line 967 
  ;
  
#line 983 
  __retres = (unsigned int)pollrd->no_ops * 8U;
  return_label: 
#line 983 
                return __retres;
}


#line 986  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_read_mux2(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  u32 __retres;
  u32 data;
  u32 t_sel_val;
  u32 sel_val1;
  u32 sel_val2;
  int i;
  int tmp;
  __le32 *tmp_0;
  __le32 *tmp_1;
  int tmp_2;
  __le32 *tmp_3;
  __le32 *tmp_4;
  
#line 989 
  struct __mux2 *mux2 = & entry->region.mux2;
  
#line 994 
  sel_val1 = mux2->sel_val1;
  
#line 995 
  sel_val2 = mux2->sel_val2;
  
#line 997 
  i = 0;
  
#line 997 
  goto ldv_56266;
  ldv_56265: 
#line 998 
  ;
  
#line 998 
  qlcnic_ind_wr(adapter,mux2->sel_addr1,sel_val1);
  
#line 999 
  t_sel_val = mux2->sel_val_mask & sel_val1;
  
#line 1000 
  qlcnic_ind_wr(adapter,mux2->sel_addr2,t_sel_val);
  
#line 1001 
  tmp = qlcnic_ind_rd(adapter,mux2->read_addr);
  
#line 1001 
  data = (unsigned int)tmp;
  
#line 1002 
  tmp_0 = buffer;
  
#line 1002 
  buffer += 1;
  
#line 1002 
  *tmp_0 = t_sel_val;
  
#line 1003 
  tmp_1 = buffer;
  
#line 1003 
  buffer += 1;
  
#line 1003 
  *tmp_1 = data;
  
#line 1004 
  qlcnic_ind_wr(adapter,mux2->sel_addr1,sel_val2);
  
#line 1005 
  t_sel_val = mux2->sel_val_mask & sel_val2;
  
#line 1006 
  qlcnic_ind_wr(adapter,mux2->sel_addr2,t_sel_val);
  
#line 1007 
  tmp_2 = qlcnic_ind_rd(adapter,mux2->read_addr);
  
#line 1007 
  data = (unsigned int)tmp_2;
  
#line 1008 
  tmp_3 = buffer;
  
#line 1008 
  buffer += 1;
  
#line 1008 
  *tmp_3 = t_sel_val;
  
#line 1009 
  tmp_4 = buffer;
  
#line 1009 
  buffer += 1;
  
#line 1009 
  *tmp_4 = data;
  
#line 1010 
  sel_val1 = (unsigned int)mux2->sel_val_stride + sel_val1;
  
#line 1011 
  sel_val2 = (unsigned int)mux2->sel_val_stride + sel_val2;
  
#line 997 
  i += 1;
  ldv_56266: 
#line 998 
  ;
  
#line 997 
  if (mux2->no_ops > (unsigned int)i) 
#line 999 
                                      goto ldv_56265; else 
#line 1002 
                                                           goto ldv_56267;
  ldv_56267: 
#line 1003 
  ;
  
#line 1014 
  __retres = mux2->no_ops * 16U;
  
#line 1014 
  return __retres;
}


#line 1017  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static u32 qlcnic_83xx_dump_rom(struct qlcnic_adapter *adapter, struct qlcnic_dump_entry *entry, __le32 *buffer)
{
  u32 __retres;
  u32 fl_addr;
  u32 size;
  int tmp;
  
#line 1021 
  struct __mem *rom = & entry->region.mem;
  
#line 1023 
  fl_addr = rom->addr;
  
#line 1024 
  size = rom->size / 4U;
  
#line 1026 
  tmp = qlcnic_83xx_lockless_flash_read32(adapter,fl_addr,(u8 *)buffer,(int)size);
  
#line 1026 
  if (tmp == 0) {
    
#line 1028 
    __retres = rom->size;
    
#line 1028 
    goto return_label;
  }
  else ;
  
#line 1030 
  __retres = 0U;
  return_label: 
#line 1030 
                return __retres;
}


#line 1033  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static struct qlcnic_dump_operations const qlcnic_fw_dump_ops[20U] = {{.opcode = QLCNIC_DUMP_NOP, .handler = & qlcnic_dump_nop}, {.opcode = QLCNIC_DUMP_READ_CRB, .handler = & qlcnic_dump_crb}, {.opcode = QLCNIC_DUMP_READ_MUX, .handler = & qlcnic_dump_mux}, {.opcode = QLCNIC_DUMP_QUEUE, .handler = & qlcnic_dump_que}, {.opcode = QLCNIC_DUMP_BRD_CONFIG, .handler = & qlcnic_read_rom}, {.opcode = QLCNIC_DUMP_READ_OCM, .handler = & qlcnic_dump_ocm}, {.opcode = QLCNIC_DUMP_PEG_REG, .handler = & qlcnic_dump_ctrl}, {.opcode = QLCNIC_DUMP_L1_DTAG, .handler = & qlcnic_dump_l1_cache}, {.opcode = QLCNIC_DUMP_L1_ITAG, .handler = & qlcnic_dump_l1_cache}, {.opcode = QLCNIC_DUMP_L1_DATA, .handler = & qlcnic_dump_l1_cache}, {.opcode = QLCNIC_DUMP_L1_INST, .handler = & qlcnic_dump_l1_cache}, {.opcode = QLCNIC_DUMP_L2_DTAG, .handler = & qlcnic_dump_l2_cache}, {.opcode = QLCNIC_DUMP_L2_ITAG, .handler = & qlcnic_dump_l2_cache}, {.opcode = QLCNIC_DUMP_L2_DATA, .handler = & qlcnic_dump_l2_cache}, {.opcode = QLCNIC_DUMP_L2_INST, .handler = & qlcnic_dump_l2_cache}, {.opcode = QLCNIC_DUMP_READ_ROM, .handler = & qlcnic_read_rom}, {.opcode = QLCNIC_DUMP_READ_MEM, .handler = & qlcnic_read_memory}, {.opcode = QLCNIC_DUMP_READ_CTRL, .handler = & qlcnic_dump_ctrl}, {.opcode = QLCNIC_DUMP_TLHDR, .handler = & qlcnic_dump_nop}, {.opcode = QLCNIC_DUMP_RDEND, .handler = & qlcnic_dump_nop}};

#line 1056  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static struct qlcnic_dump_operations const qlcnic_83xx_fw_dump_ops[23U] = {{.opcode = QLCNIC_DUMP_NOP, .handler = & qlcnic_dump_nop}, {.opcode = QLCNIC_DUMP_READ_CRB, .handler = & qlcnic_dump_crb}, {.opcode = QLCNIC_DUMP_READ_MUX, .handler = & qlcnic_dump_mux}, {.opcode = QLCNIC_DUMP_QUEUE, .handler = & qlcnic_dump_que}, {.opcode = QLCNIC_DUMP_BRD_CONFIG, .handler = & qlcnic_83xx_dump_rom}, {.opcode = QLCNIC_DUMP_READ_OCM, .handler = & qlcnic_dump_ocm}, {.opcode = QLCNIC_DUMP_PEG_REG, .handler = & qlcnic_dump_ctrl}, {.opcode = QLCNIC_DUMP_L1_DTAG, .handler = & qlcnic_dump_l1_cache}, {.opcode = QLCNIC_DUMP_L1_ITAG, .handler = & qlcnic_dump_l1_cache}, {.opcode = QLCNIC_DUMP_L1_DATA, .handler = & qlcnic_dump_l1_cache}, {.opcode = QLCNIC_DUMP_L1_INST, .handler = & qlcnic_dump_l1_cache}, {.opcode = QLCNIC_DUMP_L2_DTAG, .handler = & qlcnic_dump_l2_cache}, {.opcode = QLCNIC_DUMP_L2_ITAG, .handler = & qlcnic_dump_l2_cache}, {.opcode = QLCNIC_DUMP_L2_DATA, .handler = & qlcnic_dump_l2_cache}, {.opcode = QLCNIC_DUMP_L2_INST, .handler = & qlcnic_dump_l2_cache}, {.opcode = QLCNIC_DUMP_POLL_RD, .handler = & qlcnic_read_pollrd}, {.opcode = QLCNIC_READ_MUX2, .handler = & qlcnic_read_mux2}, {.opcode = QLCNIC_READ_POLLRDMWR, .handler = & qlcnic_read_pollrdmwr}, {.opcode = QLCNIC_DUMP_READ_ROM, .handler = & qlcnic_83xx_dump_rom}, {.opcode = QLCNIC_DUMP_READ_MEM, .handler = & qlcnic_read_memory}, {.opcode = QLCNIC_DUMP_READ_CTRL, .handler = & qlcnic_dump_ctrl}, {.opcode = QLCNIC_DUMP_TLHDR, .handler = & qlcnic_dump_nop}, {.opcode = QLCNIC_DUMP_RDEND, .handler = & qlcnic_dump_nop}};

#line 1082  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static uint32_t qlcnic_temp_checksum(uint32_t *temp_buffer, u32 temp_size)
{
  uint32_t __retres;
  uint32_t *tmp;
  int tmp_0;
  
#line 1084 
  uint64_t sum = 0ULL;
  
#line 1085 
  int count = (int)(temp_size / 4U);
  
#line 1086 
  goto ldv_56285;
  ldv_56284: 
#line 1087 
  ;
  
#line 1087 
  tmp = temp_buffer;
  
#line 1087 
  temp_buffer += 1;
  
#line 1087 
  sum = (unsigned long long)*tmp + sum;
  ldv_56285: 
#line 1088 
  ;
  
#line 1086 
  tmp_0 = count;
  
#line 1086 
  count -= 1;
  
#line 1086 
  ;
  
#line 1086 
  if (tmp_0 > 0) 
#line 1088 
                 goto ldv_56284; else 
#line 1091 
                                      goto ldv_56286;
  ldv_56286: 
#line 1092 
  ;
  
#line 1088 
  goto ldv_56288;
  ldv_56287: 
#line 1089 
  ;
  
#line 1089 
  sum = (sum & 4294967295ULL) + (sum >> 32);
  ldv_56288: 
#line 1090 
  ;
  
#line 1088 
  if (sum >> 32 != 0ULL) 
#line 1090 
                         goto ldv_56287; else 
#line 1093 
                                              goto ldv_56289;
  ldv_56289: 
#line 1094 
  ;
  
#line 1090 
  __retres = ~ ((unsigned int)sum);
  
#line 1090 
  return __retres;
}


#line 1093  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static int qlcnic_fw_flash_get_minidump_temp(struct qlcnic_adapter *adapter, u8 *buffer, u32 size)
{
  int __retres;
  bool tmp;
  int tmp_0;
  
#line 1096 
  int ret = 0;
  
#line 1098 
  tmp = qlcnic_82xx_check(adapter);
  
#line 1098 
  if ((int)tmp != 0) {
    
#line 1099 
    __retres = -5;
    
#line 1099 
    goto return_label;
  }
  else ;
  
#line 1101 
  tmp_0 = qlcnic_83xx_lock_flash(adapter);
  
#line 1101 
  if (tmp_0 != 0) {
    
#line 1102 
    __retres = -5;
    
#line 1102 
    goto return_label;
  }
  else ;
  
#line 1104 
  ret = qlcnic_83xx_lockless_flash_read32(adapter,5373952U,buffer,(int)(size / 4U));
  
#line 1108 
  qlcnic_83xx_unlock_flash(adapter);
  
#line 1110 
  __retres = ret;
  return_label: 
#line 1110 
                return __retres;
}


#line 1114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static int qlcnic_fw_flash_get_minidump_temp_size(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  struct qlcnic_83xx_dump_template_hdr tmp_hdr;
  bool tmp;
  int tmp_0;
  
#line 1118 
  u32 size = 52U;
  
#line 1119 
  int ret = 0;
  
#line 1121 
  tmp = qlcnic_82xx_check(adapter);
  
#line 1121 
  if ((int)tmp != 0) {
    
#line 1122 
    __retres = -5;
    
#line 1122 
    goto return_label;
  }
  else ;
  
#line 1124 
  tmp_0 = qlcnic_83xx_lock_flash(adapter);
  
#line 1124 
  if (tmp_0 != 0) {
    
#line 1125 
    __retres = -5;
    
#line 1125 
    goto return_label;
  }
  else ;
  
#line 1127 
  ret = qlcnic_83xx_lockless_flash_read32(adapter,5373952U,(u8 *)(& tmp_hdr),(int)size);
  
#line 1131 
  qlcnic_83xx_unlock_flash(adapter);
  
#line 1133 
  *(cmd->rsp.arg + 2U) = tmp_hdr.size;
  
#line 1134 
  *(cmd->rsp.arg + 3U) = tmp_hdr.version;
  
#line 1136 
  __retres = ret;
  return_label: 
#line 1136 
                return __retres;
}


#line 1139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static int qlcnic_fw_get_minidump_temp_size(struct qlcnic_adapter *adapter, u32 *version, u32 *temp_size, u8 *use_flash_temp)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  int tmp;
  
#line 1143 
  int err = 0;
  
#line 1146 
  tmp = qlcnic_alloc_mbx_args(& cmd,adapter,47U);
  
#line 1146 
  if (tmp != 0) {
    
#line 1147 
    __retres = -12;
    
#line 1147 
    goto return_label;
  }
  else ;
  
#line 1149 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1150 
  if (err != 0) {
    int tmp_0;
    
#line 1151 
    tmp_0 = qlcnic_fw_flash_get_minidump_temp_size(adapter,& cmd);
    
#line 1151 
    if (tmp_0 != 0) {
      
#line 1152 
      qlcnic_free_mbx_args(& cmd);
      
#line 1153 
      __retres = -5;
      
#line 1153 
      goto return_label;
    }
    else ;
    
#line 1155 
    *use_flash_temp = (unsigned char)1U;
  }
  else ;
  
#line 1158 
  *temp_size = *(cmd.rsp.arg + 2U);
  
#line 1159 
  *version = *(cmd.rsp.arg + 3U);
  
#line 1160 
  qlcnic_free_mbx_args(& cmd);
  
#line 1162 
  if (*temp_size == 0U) {
    
#line 1163 
    __retres = -5;
    
#line 1163 
    goto return_label;
  }
  else ;
  
#line 1165 
  __retres = 0;
  return_label: 
#line 1165 
                return __retres;
}


#line 1168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
static int __qlcnic_fw_cmd_get_minidump_temp(struct qlcnic_adapter *adapter, u32 *buffer, u32 temp_size)
{
  int __retres;
  int i;
  void *tmp_addr;
  __le32 *tmp_buf;
  struct qlcnic_cmd_args cmd;
  int tmp;
  
#line 1171 
  int err = 0;
  
#line 1175 
  dma_addr_t tmp_addr_t = 0ULL;
  
#line 1177 
  tmp_addr = dma_alloc_attrs(& (adapter->pdev)->dev,(unsigned long)temp_size,& tmp_addr_t,208U,(struct dma_attrs *)0);
  
#line 1179 
  if (tmp_addr == (void *)0) {
    
#line 1180 
    __retres = -12;
    
#line 1180 
    goto return_label;
  }
  else ;
  
#line 1182 
  tmp = qlcnic_alloc_mbx_args(& cmd,adapter,48U);
  
#line 1182 
  if (tmp != 0) {
    
#line 1183 
    err = -12;
    
#line 1184 
    goto free_mem;
  }
  else ;
  
#line 1187 
  *(cmd.req.arg + 1U) = (unsigned int)tmp_addr_t;
  
#line 1188 
  *(cmd.req.arg + 2U) = (unsigned int)(tmp_addr_t >> 32);
  
#line 1189 
  *(cmd.req.arg + 3U) = temp_size;
  
#line 1190 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1192 
  tmp_buf = (__le32 *)tmp_addr;
  
#line 1193 
  if (err == 0) {
    u32 *tmp_0;
    __le32 *tmp_1;
    
#line 1194 
    i = 0;
    
#line 1194 
    goto ldv_56324;
    ldv_56323: 
#line 1195 
    ;
    
#line 1195 
    tmp_0 = buffer;
    
#line 1195 
    buffer += 1;
    
#line 1195 
    tmp_1 = tmp_buf;
    
#line 1195 
    tmp_buf += 1;
    
#line 1195 
    *tmp_0 = *tmp_1;
    
#line 1194 
    i += 1;
    ldv_56324: 
#line 1195 
    ;
    
#line 1194 
    if ((unsigned long)i < (unsigned long)(temp_size / 4U)) 
#line 1196 
                                                            goto ldv_56323; else 
                                                                    
#line 1199 
                                                                    goto ldv_56325;
    ldv_56325: 
#line 1200 
    ;
  }
  else ;
  
#line 1198 
  qlcnic_free_mbx_args(& cmd);
  free_mem: 
#line 1200 
  ;
  
#line 1201 
  dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)temp_size,tmp_addr,tmp_addr_t,(struct dma_attrs *)0);
  
#line 1203 
  __retres = err;
  return_label: 
#line 1203 
                return __retres;
}


#line 1206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
int qlcnic_fw_cmd_get_minidump_temp(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_hardware_context *ahw;
  struct qlcnic_fw_dump *fw_dump;
  u32 version;
  u32 csum;
  u32 *tmp_buf;
  void *temp_buffer;
  int err;
  
#line 1211 
  u8 use_flash_temp = (unsigned char)0U;
  
#line 1212 
  u32 temp_size = 0U;
  
#line 1216 
  ahw = adapter->ahw;
  
#line 1217 
  fw_dump = & ahw->fw_dump;
  
#line 1218 
  err = qlcnic_fw_get_minidump_temp_size(adapter,& version,& temp_size,& use_flash_temp);
  
#line 1220 
  if (err != 0) {
    
#line 1221 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Can\'t get template size %d\n",err);
    
#line 1223 
    __retres = -5;
    
#line 1223 
    goto return_label;
  }
  else ;
  
#line 1226 
  fw_dump->tmpl_hdr = vzalloc((unsigned long)temp_size);
  
#line 1227 
  if (fw_dump->tmpl_hdr == (void *)0) {
    
#line 1228 
    __retres = -12;
    
#line 1228 
    goto return_label;
  }
  else ;
  
#line 1230 
  tmp_buf = (u32 *)fw_dump->tmpl_hdr;
  
#line 1231 
  if ((unsigned int)use_flash_temp != 0U) 
#line 1232 
                                          goto flash_temp; else ;
  
#line 1234 
  err = __qlcnic_fw_cmd_get_minidump_temp(adapter,tmp_buf,temp_size);
  
#line 1236 
  if (err != 0) {
    flash_temp: 
#line 1237 
    ;
    
#line 1238 
    err = qlcnic_fw_flash_get_minidump_temp(adapter,(u8 *)tmp_buf,temp_size);
    
#line 1241 
    if (err != 0) {
      
#line 1242 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to get minidump template header %d\n",err);
      
#line 1245 
      vfree((void const *)fw_dump->tmpl_hdr);
      
#line 1246 
      fw_dump->tmpl_hdr = (void *)0;
      
#line 1247 
      __retres = -5;
      
#line 1247 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1251 
  csum = qlcnic_temp_checksum(tmp_buf,temp_size);
  
#line 1253 
  if (csum != 0U) {
    
#line 1254 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Template header checksum validation failed\n");
    
#line 1256 
    vfree((void const *)fw_dump->tmpl_hdr);
    
#line 1257 
    fw_dump->tmpl_hdr = (void *)0;
    
#line 1258 
    __retres = -5;
    
#line 1258 
    goto return_label;
  }
  else ;
  
#line 1261 
  qlcnic_cache_tmpl_hdr_values(adapter,fw_dump);
  
#line 1263 
  if ((int)fw_dump->use_pex_dma != 0) {
    
#line 1264 
    fw_dump->dma_buffer = (void *)0;
    
#line 1265 
    temp_buffer = dma_alloc_attrs(& (adapter->pdev)->dev,65536UL,& fw_dump->phys_addr,208U,(struct dma_attrs *)0);
    
#line 1269 
    if (temp_buffer == (void *)0) 
#line 1270 
                                  fw_dump->use_pex_dma = (_Bool)0; else 
                                                                    
#line 1272 
                                                                    fw_dump->dma_buffer = temp_buffer;
  }
  else ;
  
#line 1276 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Default minidump capture mask 0x%x\n",fw_dump->cap_mask);
  
#line 1280 
  qlcnic_enable_fw_dump_state(adapter);
  
#line 1282 
  __retres = 0;
  return_label: 
#line 1282 
                return __retres;
}


#line 1285  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
int qlcnic_dump_fw(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_dump_operations const *fw_dump_ops;
  struct qlcnic_83xx_dump_template_hdr *hdr_83xx;
  u32 entry_offset;
  u32 dump;
  u32 no_entries;
  int i;
  int k;
  int ops_cnt;
  int ops_index;
  struct qlcnic_hardware_context *ahw;
  struct qlcnic_dump_entry *entry;
  void *tmpl_hdr;
  u32 ocm_window;
  __le32 *buffer;
  char mesg[64U];
  int tmp_0;
  bool tmp;
  bool tmp_2;
  int tmp_3;
  
#line 1287 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  
#line 1290 
  u32 buf_offset = 0U;
  
#line 1291 
  int dump_size = 0;
  
#line 1292 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1299 
  char *msg[2U] = {(char *)(& mesg), (char *)0};
  
#line 1301 
  ahw = adapter->ahw;
  
#line 1302 
  tmpl_hdr = fw_dump->tmpl_hdr;
  
#line 1305 
  if (tmpl_hdr == (void *)0) {
    
#line 1306 
    __retres = -5;
    
#line 1306 
    goto return_label;
  }
  else ;
  
#line 1308 
  tmp = qlcnic_check_fw_dump_state(adapter);
  
#line 1308 
  if (tmp) 
#line 1308 
           tmp_0 = 0; else 
#line 1308 
                           tmp_0 = 1;
  
#line 1308 
  if (tmp_0) {
    
#line 1309 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Dump not enabled\n");
    
#line 1310 
    __retres = -5;
    
#line 1310 
    goto return_label;
  }
  else ;
  
#line 1313 
  if ((unsigned int)fw_dump->clr != 0U) {
    
#line 1314 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Previous dump not cleared, not capturing dump\n");
    
#line 1316 
    __retres = -5;
    
#line 1316 
    goto return_label;
  }
  else ;
  
#line 1319 
  if (((adapter->ahw)->msg_enable & 1U) != 0U) 
#line 1319 
                                               netdev_info((struct net_device const *)adapter->netdev,"Take FW dump\n"); else ;
  
#line 1321 
  i = 2;
  
#line 1321 
  k = 1;
  
#line 1321 
  goto ldv_56363;
  ldv_56362: 
#line 1322 
  ;
  
#line 1322 
  if ((fw_dump->cap_mask & (unsigned int)i) != 0U) {
    u32 tmp_1;
    
#line 1323 
    tmp_1 = qlcnic_get_cap_size(adapter,tmpl_hdr,k);
    
#line 1323 
    dump_size = (int)(tmp_1 + (unsigned int)dump_size);
  }
  else ;
  
#line 1321 
  i <<= 1;
  
#line 1321 
  k += 1;
  ldv_56363: 
#line 1322 
  ;
  
#line 1321 
  if ((i & 255) != 0) 
#line 1323 
                      goto ldv_56362; else 
#line 1326 
                                           goto ldv_56364;
  ldv_56364: 
#line 1327 
  ;
  
#line 1325 
  if (dump_size == 0) {
    
#line 1326 
    __retres = -5;
    
#line 1326 
    goto return_label;
  }
  else ;
  
#line 1328 
  fw_dump->data = vzalloc((unsigned long)dump_size);
  
#line 1329 
  if (fw_dump->data == (void *)0) {
    
#line 1330 
    __retres = -12;
    
#line 1330 
    goto return_label;
  }
  else ;
  
#line 1332 
  buffer = (__le32 *)fw_dump->data;
  
#line 1333 
  fw_dump->size = (unsigned int)dump_size;
  
#line 1334 
  no_entries = fw_dump->num_entries;
  
#line 1335 
  entry_offset = fw_dump->offset;
  
#line 1336 
  qlcnic_set_sys_info(adapter,tmpl_hdr,0,328510U);
  
#line 1337 
  qlcnic_set_sys_info(adapter,tmpl_hdr,1,adapter->fw_version);
  
#line 1339 
  tmp_2 = qlcnic_82xx_check(adapter);
  
#line 1339 
  if ((int)tmp_2 != 0) {
    
#line 1340 
    ops_cnt = 20;
    
#line 1341 
    fw_dump_ops = (struct qlcnic_dump_operations const *)(& qlcnic_fw_dump_ops);
  }
  else {
    
#line 1343 
    hdr_83xx = (struct qlcnic_83xx_dump_template_hdr *)tmpl_hdr;
    
#line 1344 
    ops_cnt = 23;
    
#line 1345 
    fw_dump_ops = (struct qlcnic_dump_operations const *)(& qlcnic_83xx_fw_dump_ops);
    
#line 1346 
    ocm_window = hdr_83xx->ocm_wnd_reg[(int)ahw->pci_func];
    
#line 1347 
    hdr_83xx->saved_state[3] = ocm_window;
    
#line 1348 
    hdr_83xx->saved_state[0] = (unsigned int)ahw->pci_func;
  }
  
#line 1351 
  i = 0;
  
#line 1351 
  goto ldv_56376;
  ldv_56375: 
#line 1352 
  ;
  
#line 1352 
  entry = (struct qlcnic_dump_entry *)(tmpl_hdr + entry_offset);
  
#line 1353 
  if (((unsigned int)entry->hdr.mask & fw_dump->cap_mask) == 0U) {
    
#line 1354 
    entry->hdr.flags = (unsigned char)((unsigned int)entry->hdr.flags | 128U);
    
#line 1355 
    entry_offset = entry->hdr.offset + entry_offset;
    
#line 1356 
    goto ldv_56371;
  }
  else ;
  
#line 1360 
  ops_index = 0;
  
#line 1361 
  goto ldv_56374;
  ldv_56373: 
#line 1362 
  ;
  
#line 1362 
  if (entry->hdr.type == (unsigned int)(fw_dump_ops + ops_index)->opcode) 
    
#line 1363 
    goto ldv_56372; else ;
  
#line 1364 
  ops_index += 1;
  ldv_56374: 
#line 1365 
  ;
  
#line 1361 
  if (ops_index < ops_cnt) 
#line 1363 
                           goto ldv_56373; else 
#line 1366 
                                                goto ldv_56372;
  ldv_56372: 
#line 1367 
  ;
  
#line 1367 
  if (ops_index == ops_cnt) {
    
#line 1368 
    _dev_info((struct device const *)dev,"Skipping unknown entry opcode %d\n",entry->hdr.type);
    
#line 1370 
    entry->hdr.flags = (unsigned char)((unsigned int)entry->hdr.flags | 128U);
    
#line 1371 
    entry_offset = entry->hdr.offset + entry_offset;
    
#line 1372 
    goto ldv_56371;
  }
  else ;
  
#line 1376 
  dump = (*((fw_dump_ops + ops_index)->handler))(adapter,entry,buffer);
  
#line 1377 
  tmp_3 = qlcnic_valid_dump_entry(dev,entry,dump);
  
#line 1377 
  if (tmp_3 == 0) {
    
#line 1378 
    entry->hdr.flags = (unsigned char)((unsigned int)entry->hdr.flags | 128U);
    
#line 1379 
    entry_offset = entry->hdr.offset + entry_offset;
    
#line 1380 
    goto ldv_56371;
  }
  else ;
  
#line 1383 
  buf_offset = entry->hdr.cap_size + buf_offset;
  
#line 1384 
  entry_offset = entry->hdr.offset + entry_offset;
  
#line 1385 
  buffer = (__le32 *)(fw_dump->data + buf_offset);
  ldv_56371: 
#line 1386 
  ;
  
#line 1351 
  i += 1;
  ldv_56376: 
#line 1352 
  ;
  
#line 1351 
  if ((unsigned int)i < no_entries) 
#line 1353 
                                    goto ldv_56375; else 
#line 1356 
                                                         goto ldv_56377;
  ldv_56377: 
#line 1357 
  ;
  
#line 1388 
  fw_dump->clr = (unsigned char)1U;
  
#line 1389 
  snprintf((char *)(& mesg),64UL,"FW_DUMP=%s",(char *)(& (adapter->netdev)->name));
  
#line 1390 
  netdev_info((struct net_device const *)adapter->netdev,"Dump data %d bytes captured, template header size %d bytes\n",fw_dump->size,fw_dump->tmpl_hdr_size);
  
#line 1394 
  kobject_uevent_env(& dev->kobj,(enum kobject_action)KOBJ_CHANGE,(char **)(& msg));
  
#line 1396 
  __retres = 0;
  return_label: 
#line 1396 
                return __retres;
}


#line 1399  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_minidump.c"
void qlcnic_83xx_get_minidump_template(struct qlcnic_adapter *adapter)
{
  u32 prev_version;
  u32 current_version;
  int tmp;
  
#line 1402 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1403 
  struct qlcnic_fw_dump *fw_dump = & ahw->fw_dump;
  
#line 1404 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1406 
  prev_version = adapter->fw_version;
  
#line 1407 
  tmp = qlcnic_83xx_get_fw_version(adapter);
  
#line 1407 
  current_version = (unsigned int)tmp;
  
#line 1409 
  if (fw_dump->tmpl_hdr == (void *)0 || current_version > prev_version) {
    int tmp_0;
    
#line 1410 
    vfree((void const *)fw_dump->tmpl_hdr);
    
#line 1411 
    tmp_0 = qlcnic_fw_cmd_get_minidump_temp(adapter);
    
#line 1411 
    if (tmp_0 == 0) 
#line 1412 
                    _dev_info((struct device const *)(& pdev->dev),"Supports FW dump capability\n"); else ;
  }
  else ;
  
#line 1414 
  return;
}


#line 510  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_minidump.c.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 513 
  tmp = ldv_kzalloc(size,flags);
  
#line 513 
  return tmp;
}


#line 766  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_minidump.c.aux"
static void ldv_mutex_lock_75(struct mutex *ldv_func_arg1)
{
  
#line 770 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"mem_lock_of_qlcnic_hardware_context");
  
#line 771 
  return;
}


#line 774  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_minidump.c.aux"
static void ldv_mutex_unlock_76(struct mutex *ldv_func_arg1)
{
  
#line 778 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mem_lock_of_qlcnic_hardware_context");
  
#line 779 
  return;
}


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void set_bit(long nr, unsigned long volatile *addr)
{
  
#line 74 
  if (0 != 0) 
#line 76 
              ldv_inline_asm(); else 
#line 79 
                                     ldv_inline_asm();
  
#line 80 
  return;
}


#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(long nr, unsigned long volatile *addr)
{
  int __retres;
  
#line 206 
  ldv_inline_asm();
  
#line 207 
  ldv_inline_asm();
  
#line 206 
  __retres = 0;
  
#line 206 
  goto return_label;
  cc_label: 
#line 206 
  ;
  
#line 206 
  __retres = 1;
  return_label: 
#line 206 
                return __retres;
}


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(long nr, unsigned long const volatile *addr)
{
  int __retres;
  
#line 311 
  __retres = ((*(addr + (nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL;
  
#line 311 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list)
{
  
#line 27 
  list->next = list;
  
#line 28 
  list->prev = list;
  
#line 29 
  return;
}


#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memset(void *, int, size_t);


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
void lockdep_init_map(struct lockdep_map *, char const *, struct lock_class_key *, int);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock_bh(raw_spinlock_t *);


#line 42 
void _raw_spin_unlock_bh(raw_spinlock_t *);


#line 45 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);


#line 355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  
#line 357 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 358 
  return;
}


#line 383 
static void ldv_spin_lock_bh_75(spinlock_t *lock);


#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  
#line 406 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 407 
  return;
}


#line 436 
static void ldv_spin_unlock_bh_76(spinlock_t *lock);


#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 452 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 453 
  return;
}


#line 482 
static void ldv_spin_unlock_irqrestore_78(spinlock_t *lock, unsigned long flags);


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_pf.c.aux"
void __ldv_spin_lock(spinlock_t *);


#line 70 
static void ldv___ldv_spin_lock_77(spinlock_t *ldv_func_arg1);


#line 78 
void ldv_spin_model_lock(char *);


#line 79 
void ldv_spin_model_unlock(char *);


#line 181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void __init_work(struct work_struct *, int);


#line 361 
struct workqueue_struct *__alloc_workqueue_key(char const *, unsigned int, int, struct lock_class_key *, char const * , ...);


#line 421 
void destroy_workqueue(struct workqueue_struct *);


#line 444 
bool cancel_work_sync(struct work_struct *);


#line 490 
static bool ldv_queue_work_79(struct workqueue_struct *wq, struct work_struct *work);


#line 864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 866 
  __retres = dev->driver_data;
  
#line 866 
  return __retres;
}


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_0(size_t size, gfp_t flags);


#line 1471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  void *tmp;
  
#line 1473 
  tmp = dev_get_drvdata((struct device const *)(& pdev->dev));
  
#line 1473 
  return tmp;
}


#line 1672 
int pci_enable_sriov(struct pci_dev *, int);


#line 1673 
void pci_disable_sriov(struct pci_dev *);


#line 1675 
int pci_vfs_assigned(struct pci_dev *);


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device const *dev)
{
  void *__retres;
  
#line 1882 
  __retres = (void *)dev + 3008U;
  
#line 1882 
  return __retres;
}


#line 2769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 2771 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev->state));
  
#line 2771 
  __retres = (_Bool)(tmp != 0);
  
#line 2771 
  return __retres;
}


#line 3828 
void netdev_err(struct net_device const *, char const * , ...);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 96 
  __retres = (_Bool)((*((u32 const *)addr) | (unsigned int)*((u16 const *)(addr + 4U))) == 0U);
  
#line 96 
  return __retres;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 114 
  u32 a = *((u32 const *)addr);
  
#line 121 
  __retres = (_Bool)((a & 1U) != 0U);
  
#line 121 
  return __retres;
}


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_3;
  int tmp_0;
  bool tmp;
  
#line 190 
  tmp = is_multicast_ether_addr(addr);
  
#line 190 
  if (tmp) 
#line 190 
           tmp_0 = 0; else 
#line 190 
                           tmp_0 = 1;
  
#line 190 
  if (tmp_0) {
    int tmp_2;
    bool tmp_1;
    
#line 190 
    tmp_1 = is_zero_ether_addr(addr);
    
#line 190 
    if (tmp_1) 
#line 190 
               tmp_2 = 0; else 
#line 190 
                               tmp_2 = 1;
    
#line 190 
    if (tmp_2) 
#line 190 
               tmp_3 = 1; else 
#line 190 
                               tmp_3 = 0;
  }
  else 
#line 190 
       tmp_3 = 0;
  
#line 190 
  __retres = (_Bool)(tmp_3 != 0);
  
#line 190 
  return __retres;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 const *addr1, u8 const *addr2)
{
  bool __retres;
  
#line 313 
  u32 fold = (*((u32 const *)addr1) ^ *((u32 const *)addr2)) | (unsigned int)((int)*((u16 const *)(addr1 + 4U)) ^ (int)*((u16 const *)(addr2 + 4U)));
  
#line 316 
  __retres = (_Bool)(fold == 0U);
  
#line 316 
  return __retres;
}


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
void rtnl_lock(void);


#line 28 
void rtnl_unlock(void);


#line 1692  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
void __qlcnic_down(struct qlcnic_adapter *adapter, struct net_device *netdev);


#line 1696 
int __qlcnic_up(struct qlcnic_adapter *adapter, struct net_device *netdev);


#line 1704 
int qlcnic_83xx_configure_opmode(struct qlcnic_adapter *adapter);


#line 1955  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_get_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *info, u8 id)
{
  int tmp;
  
#line 1958 
  tmp = (*(((adapter->ahw)->hw_ops)->get_nic_info))(adapter,info,(unsigned char)((int)id));
  
#line 1958 
  return tmp;
}


#line 2305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_84xx_check(struct qlcnic_adapter *adapter)
{
  bool __retres;
  
#line 2307 
  unsigned short device = (adapter->pdev)->device;
  
#line 2310 
  __retres = (_Bool)(((unsigned int)device == 32832U || (unsigned int)device == 33856U) != 0);
  
#line 2310 
  return __retres;
}


#line 2327  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_sriov_pf_check(struct qlcnic_adapter *adapter)
{
  bool __retres;
  
#line 2329 
  __retres = (_Bool)((unsigned int)(adapter->ahw)->op_mode == 3U);
  
#line 2329 
  return __retres;
}


#line 2343  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_83xx_pf_check(struct qlcnic_adapter *adapter)
{
  bool __retres;
  
#line 2345 
  unsigned short device = (adapter->pdev)->device;
  
#line 2347 
  __retres = (_Bool)((unsigned int)device == 32816U);
  
#line 2347 
  return __retres;
}


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
int qlcnic_sriov_init(struct qlcnic_adapter *adapter, int num_vfs);


#line 188 
void __qlcnic_sriov_cleanup(struct qlcnic_adapter *adapter);


#line 192 
int qlcnic_sriov_func_to_index(struct qlcnic_adapter *adapter, u8 pci_func);


#line 194 
int qlcnic_sriov_cfg_bc_intr(struct qlcnic_adapter *adapter, u8 enable);


#line 196 
void qlcnic_sriov_cleanup_list(struct qlcnic_trans_list *t_list);


#line 197 
int __qlcnic_sriov_add_act_list(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, struct qlcnic_bc_trans *trans);


#line 199 
int qlcnic_sriov_get_vf_vport_info(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info, u16 vport_id);


#line 202 
void qlcnic_sriov_free_vlans(struct qlcnic_adapter *adapter);


#line 203 
void qlcnic_sriov_alloc_vlans(struct qlcnic_adapter *adapter);


#line 204 
bool qlcnic_sriov_check_any_vlan(struct qlcnic_vf_info *vf);


#line 205 
void qlcnic_sriov_del_vlan_id(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, u16 vlan_id);


#line 207 
void qlcnic_sriov_add_vlan_id(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, u16 vlan_id);


#line 210  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
__inline static bool qlcnic_sriov_enable_check(struct qlcnic_adapter *adapter)
{
  bool __retres;
  int tmp;
  
#line 212 
  tmp = constant_test_bit(10L,(unsigned long const volatile *)(& adapter->state));
  
#line 212 
  __retres = (_Bool)(tmp != 0);
  
#line 212 
  return __retres;
}


#line 216 
void qlcnic_sriov_pf_process_bc_cmd(struct qlcnic_adapter *adapter, struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd);


#line 219 
void qlcnic_sriov_pf_disable(struct qlcnic_adapter *adapter);


#line 220 
void qlcnic_sriov_pf_cleanup(struct qlcnic_adapter *adapter);


#line 221 
int qlcnic_pci_sriov_configure(struct pci_dev *dev, int num_vfs);


#line 222 
void qlcnic_pf_set_interface_id_create_rx_ctx(struct qlcnic_adapter *adapter, u32 *int_id);


#line 223 
void qlcnic_pf_set_interface_id_create_tx_ctx(struct qlcnic_adapter *adapter, u32 *int_id);


#line 224 
void qlcnic_pf_set_interface_id_del_rx_ctx(struct qlcnic_adapter *adapter, u32 *int_id);


#line 225 
void qlcnic_pf_set_interface_id_del_tx_ctx(struct qlcnic_adapter *adapter, u32 *int_id);


#line 226 
void qlcnic_pf_set_interface_id_promisc(struct qlcnic_adapter *adapter, u32 *int_id);


#line 227 
void qlcnic_pf_set_interface_id_ipaddr(struct qlcnic_adapter *adapter, u32 *int_id);


#line 228 
void qlcnic_pf_set_interface_id_macaddr(struct qlcnic_adapter *adapter, u32 *int_id);


#line 229 
void qlcnic_sriov_pf_handle_flr(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf);


#line 230 
bool qlcnic_sriov_soft_flr_check(struct qlcnic_adapter *adapter, struct qlcnic_bc_trans *trans, struct qlcnic_vf_info *vf);


#line 233 
void qlcnic_sriov_pf_reset(struct qlcnic_adapter *adapter);


#line 234 
int qlcnic_sriov_pf_reinit(struct qlcnic_adapter *adapter);


#line 235 
int qlcnic_sriov_set_vf_mac(struct net_device *netdev, int vf, u8 *mac);


#line 236 
int qlcnic_sriov_set_vf_tx_rate(struct net_device *netdev, int vf, int min_tx_rate, int max_tx_rate);


#line 237 
int qlcnic_sriov_get_vf_config(struct net_device *netdev, int vf, struct ifla_vf_info *ivi);


#line 239 
int qlcnic_sriov_set_vf_vlan(struct net_device *netdev, int vf, u16 vlan, u8 qos);


#line 240 
int qlcnic_sriov_set_vf_spoofchk(struct net_device *netdev, int vf, bool chk);


#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_get_vport_handle(struct qlcnic_adapter *adapter, u8 func);


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_set_vport_info(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info, u16 vport_id)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  int err;
  int tmp;
  
#line 39 
  tmp = qlcnic_alloc_mbx_args(& cmd,adapter,34U);
  
#line 39 
  if (tmp != 0) {
    
#line 40 
    __retres = -12;
    
#line 40 
    goto return_label;
  }
  else ;
  
#line 42 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)vport_id << 16) | 1);
  
#line 43 
  *(cmd.req.arg + 2U) = (unsigned int)npar_info->bit_offsets;
  
#line 44 
  *(cmd.req.arg + 2U) |= (unsigned int)((int)npar_info->min_tx_bw << 16);
  
#line 45 
  *(cmd.req.arg + 3U) = (unsigned int)((int)npar_info->max_tx_bw | ((int)npar_info->max_tx_ques << 16));
  
#line 46 
  *(cmd.req.arg + 4U) = (unsigned int)npar_info->max_tx_mac_filters;
  
#line 47 
  *(cmd.req.arg + 4U) |= (unsigned int)((int)npar_info->max_rx_mcast_mac_filters << 16);
  
#line 48 
  *(cmd.req.arg + 5U) = (unsigned int)((int)npar_info->max_rx_ucast_mac_filters | ((int)npar_info->max_rx_ip_addr << 16));
  
#line 50 
  *(cmd.req.arg + 6U) = (unsigned int)((int)npar_info->max_rx_lro_flow | ((int)npar_info->max_rx_status_rings << 16));
  
#line 52 
  *(cmd.req.arg + 7U) = (unsigned int)((int)npar_info->max_rx_buf_rings | ((int)npar_info->max_rx_ques << 16));
  
#line 54 
  *(cmd.req.arg + 8U) = (unsigned int)npar_info->max_tx_vlan_keys;
  
#line 55 
  *(cmd.req.arg + 8U) |= (unsigned int)((int)npar_info->max_local_ipv6_addrs << 16);
  
#line 56 
  *(cmd.req.arg + 9U) = (unsigned int)npar_info->max_remote_ipv6_addrs;
  
#line 58 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 59 
  if (err != 0) 
#line 60 
                dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to set vport info, err=%d\n",err); else ;
  
#line 63 
  qlcnic_free_mbx_args(& cmd);
  
#line 64 
  __retres = err;
  return_label: 
#line 64 
                return __retres;
}


#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cal_res_limit(struct qlcnic_adapter *adapter, struct qlcnic_info *info, u16 func)
{
  int __retres;
  int vpid;
  int id;
  struct qlcnic_vport *vp;
  u32 num_vfs;
  u32 max;
  u32 temp;
  bool tmp;
  
#line 70 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 71 
  struct qlcnic_resources *res = & sriov->ff_max;
  
#line 72 
  u16 num_macs = (unsigned short)((unsigned int)sriov->num_allowed_vlans + 1U);
  
#line 73 
  int ret = -5;
  
#line 77 
  vpid = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)((unsigned char)func)));
  
#line 78 
  if (vpid < 0) {
    
#line 79 
    __retres = -22;
    
#line 79 
    goto return_label;
  }
  else ;
  
#line 81 
  num_vfs = (unsigned int)sriov->num_vfs;
  
#line 82 
  max = num_vfs + 1U;
  
#line 83 
  info->bit_offsets = (unsigned short)65535U;
  
#line 84 
  info->max_tx_ques = (unsigned short)((unsigned int)res->num_tx_queues / max);
  
#line 86 
  tmp = qlcnic_83xx_pf_check(adapter);
  
#line 86 
  if ((int)tmp != 0) 
#line 87 
                     num_macs = (unsigned short)2U; else ;
  
#line 89 
  info->max_rx_mcast_mac_filters = res->num_rx_mcast_mac_filters;
  
#line 91 
  if ((int)((unsigned short)(adapter->ahw)->pci_func) == (int)func) {
    
#line 92 
    info->min_tx_bw = (unsigned short)0U;
    
#line 93 
    info->max_tx_bw = (unsigned short)100U;
    
#line 95 
    temp = (unsigned int)res->num_rx_ucast_mac_filters - (unsigned int)num_macs * num_vfs;
    
#line 96 
    info->max_rx_ucast_mac_filters = (unsigned short)temp;
    
#line 97 
    temp = (unsigned int)res->num_tx_mac_filters - (unsigned int)num_macs * num_vfs;
    
#line 98 
    info->max_tx_mac_filters = (unsigned short)temp;
    
#line 99 
    temp = ((unsigned int)num_macs * num_vfs) * 7U;
    
#line 100 
    temp = (unsigned int)res->num_rx_mcast_mac_filters - temp;
    
#line 101 
    info->max_rx_mcast_mac_filters = (unsigned short)temp;
    
#line 103 
    info->max_tx_ques = (unsigned short)((int)res->num_tx_queues - (int)((unsigned short)sriov->num_vfs));
  }
  else {
    
#line 105 
    id = qlcnic_sriov_func_to_index(adapter,(unsigned char)((int)((unsigned char)func)));
    
#line 106 
    if (id < 0) {
      
#line 107 
      __retres = id;
      
#line 107 
      goto return_label;
    }
    else ;
    
#line 108 
    vp = (sriov->vf_info + id)->vp;
    
#line 109 
    info->min_tx_bw = vp->min_tx_bw;
    
#line 110 
    info->max_tx_bw = vp->max_tx_bw;
    
#line 112 
    info->max_rx_ucast_mac_filters = num_macs;
    
#line 113 
    info->max_tx_mac_filters = num_macs;
    
#line 114 
    temp = (unsigned int)((int)num_macs * 7);
    
#line 115 
    info->max_rx_mcast_mac_filters = (unsigned short)temp;
    
#line 117 
    info->max_tx_ques = (unsigned short)1U;
  }
  
#line 120 
  info->max_rx_ip_addr = (unsigned short)((unsigned int)res->num_destip / max);
  
#line 121 
  info->max_rx_status_rings = (unsigned short)((unsigned int)res->num_rx_status_rings / max);
  
#line 122 
  info->max_rx_buf_rings = (unsigned short)((unsigned int)res->num_rx_buf_rings / max);
  
#line 123 
  info->max_rx_ques = (unsigned short)((unsigned int)res->num_rx_queues / max);
  
#line 124 
  info->max_rx_lro_flow = (unsigned short)(res->num_lro_flows_supported / max);
  
#line 125 
  info->max_tx_vlan_keys = res->num_txvlan_keys;
  
#line 126 
  info->max_local_ipv6_addrs = res->max_local_ipv6_addrs;
  
#line 127 
  info->max_remote_ipv6_addrs = res->max_remote_ipv6_addrs;
  
#line 129 
  ret = qlcnic_sriov_pf_set_vport_info(adapter,info,(unsigned short)((int)((unsigned short)vpid)));
  
#line 130 
  if (ret != 0) {
    
#line 131 
    __retres = ret;
    
#line 131 
    goto return_label;
  }
  else ;
  
#line 133 
  __retres = 0;
  return_label: 
#line 133 
                return __retres;
}


#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_pf_set_ff_max_res(struct qlcnic_adapter *adapter, struct qlcnic_info *info)
{
  
#line 139 
  struct qlcnic_resources *ff_max = & ((adapter->ahw)->sriov)->ff_max;
  
#line 141 
  ff_max->num_tx_mac_filters = info->max_tx_mac_filters;
  
#line 142 
  ff_max->num_rx_ucast_mac_filters = info->max_rx_ucast_mac_filters;
  
#line 143 
  ff_max->num_rx_mcast_mac_filters = info->max_rx_mcast_mac_filters;
  
#line 144 
  ff_max->num_txvlan_keys = info->max_tx_vlan_keys;
  
#line 145 
  ff_max->num_rx_queues = info->max_rx_ques;
  
#line 146 
  ff_max->num_tx_queues = info->max_tx_ques;
  
#line 147 
  ff_max->num_lro_flows_supported = (unsigned int)info->max_rx_lro_flow;
  
#line 148 
  ff_max->num_destip = info->max_rx_ip_addr;
  
#line 149 
  ff_max->num_rx_buf_rings = info->max_rx_buf_rings;
  
#line 150 
  ff_max->num_rx_status_rings = info->max_rx_status_rings;
  
#line 151 
  ff_max->max_remote_ipv6_addrs = info->max_remote_ipv6_addrs;
  
#line 152 
  ff_max->max_local_ipv6_addrs = info->max_local_ipv6_addrs;
  
#line 153 
  return;
}


#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_set_vf_max_vlan(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info)
{
  int temp;
  int total_fn;
  bool tmp;
  
#line 158 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 161 
  temp = (int)npar_info->max_rx_mcast_mac_filters;
  
#line 162 
  total_fn = (int)sriov->num_vfs + 1;
  
#line 164 
  temp /= total_fn * 7;
  
#line 165 
  sriov->num_allowed_vlans = (unsigned short)((unsigned int)((unsigned short)temp) + 65535U);
  
#line 167 
  tmp = qlcnic_83xx_pf_check(adapter);
  
#line 167 
  if ((int)tmp != 0) 
#line 168 
                     sriov->num_allowed_vlans = (unsigned short)1U; else ;
  
#line 170 
  netdev_info((struct net_device const *)adapter->netdev,"Max Guest VLANs supported per VF = %d\n",(int)sriov->num_allowed_vlans);
  
#line 172 
  return;
}


#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_get_pf_info(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info)
{
  int __retres;
  int err;
  struct qlcnic_cmd_args cmd;
  int tmp;
  
#line 180 
  tmp = qlcnic_alloc_mbx_args(& cmd,adapter,33U);
  
#line 180 
  if (tmp != 0) {
    
#line 181 
    __retres = -12;
    
#line 181 
    goto return_label;
  }
  else ;
  
#line 183 
  *(cmd.req.arg + 1U) = 2U;
  
#line 184 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 185 
  if (err != 0) {
    
#line 186 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to get PF info, err=%d\n",err);
    
#line 188 
    goto out;
  }
  else ;
  
#line 191 
  npar_info->total_pf = (unsigned char)*(cmd.rsp.arg + 2U);
  
#line 192 
  npar_info->total_rss_engines = (unsigned char)(*(cmd.rsp.arg + 2U) >> 8);
  
#line 193 
  npar_info->max_vports = (unsigned short)(*(cmd.rsp.arg + 2U) >> 16);
  
#line 194 
  npar_info->max_tx_ques = (unsigned short)*(cmd.rsp.arg + 3U);
  
#line 195 
  npar_info->max_tx_mac_filters = (unsigned short)(*(cmd.rsp.arg + 3U) >> 16);
  
#line 196 
  npar_info->max_rx_mcast_mac_filters = (unsigned short)*(cmd.rsp.arg + 4U);
  
#line 197 
  npar_info->max_rx_ucast_mac_filters = (unsigned short)(*(cmd.rsp.arg + 4U) >> 16);
  
#line 198 
  npar_info->max_rx_ip_addr = (unsigned short)*(cmd.rsp.arg + 5U);
  
#line 199 
  npar_info->max_rx_lro_flow = (unsigned short)(*(cmd.rsp.arg + 5U) >> 16);
  
#line 200 
  npar_info->max_rx_status_rings = (unsigned short)*(cmd.rsp.arg + 6U);
  
#line 201 
  npar_info->max_rx_buf_rings = (unsigned short)(*(cmd.rsp.arg + 6U) >> 16);
  
#line 202 
  npar_info->max_rx_ques = (unsigned short)*(cmd.rsp.arg + 7U);
  
#line 203 
  npar_info->max_tx_vlan_keys = (unsigned short)(*(cmd.rsp.arg + 7U) >> 16);
  
#line 204 
  npar_info->max_local_ipv6_addrs = (unsigned short)*(cmd.rsp.arg + 8U);
  
#line 205 
  npar_info->max_remote_ipv6_addrs = (unsigned short)(*(cmd.rsp.arg + 8U) >> 16);
  
#line 207 
  qlcnic_sriov_set_vf_max_vlan(adapter,npar_info);
  
#line 208 
  qlcnic_sriov_pf_set_ff_max_res(adapter,npar_info);
  
#line 209 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"\n\ttotal_pf: %d,\n",(int)npar_info->total_pf,(int)npar_info->total_rss_engines,(int)npar_info->max_vports,(int)npar_info->max_tx_ques,(int)npar_info->max_tx_mac_filters,(int)npar_info->max_rx_mcast_mac_filters,(int)npar_info->max_rx_ucast_mac_filters,(int)npar_info->max_rx_ip_addr,(int)npar_info->max_rx_lro_flow,(int)npar_info->max_rx_status_rings,(int)npar_info->max_rx_buf_rings,(int)npar_info->max_rx_ques,(int)npar_info->max_tx_vlan_keys,(int)npar_info->max_local_ipv6_addrs,(int)npar_info->max_remote_ipv6_addrs);
  out: 
#line 227 
  ;
  
#line 228 
  qlcnic_free_mbx_args(& cmd);
  
#line 229 
  __retres = err;
  return_label: 
#line 229 
                return __retres;
}


#line 232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_pf_reset_vport_handle(struct qlcnic_adapter *adapter, u8 func)
{
  struct qlcnic_vport *vp;
  int index;
  
#line 235 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 239 
  if ((int)(adapter->ahw)->pci_func == (int)func) 
#line 240 
                                                  sriov->vp_handle = (unsigned short)0U;
  else {
    
#line 242 
    index = qlcnic_sriov_func_to_index(adapter,(unsigned char)((int)func));
    
#line 243 
    if (index < 0) 
#line 244 
                   goto return_label; else ;
    
#line 245 
    vp = (sriov->vf_info + index)->vp;
    
#line 246 
    vp->handle = (unsigned short)0U;
  }
  return_label: 
#line 248 
                return;
}


#line 250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_pf_set_vport_handle(struct qlcnic_adapter *adapter, u16 vport_handle, u8 func)
{
  struct qlcnic_vport *vp;
  int index;
  
#line 253 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 257 
  if ((int)(adapter->ahw)->pci_func == (int)func) 
#line 258 
                                                  sriov->vp_handle = vport_handle;
  else {
    
#line 260 
    index = qlcnic_sriov_func_to_index(adapter,(unsigned char)((int)func));
    
#line 261 
    if (index < 0) 
#line 262 
                   goto return_label; else ;
    
#line 263 
    vp = (sriov->vf_info + index)->vp;
    
#line 264 
    vp->handle = vport_handle;
  }
  return_label: 
#line 266 
                return;
}


#line 268  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_get_vport_handle(struct qlcnic_adapter *adapter, u8 func)
{
  int __retres;
  struct qlcnic_vf_info *vf_info;
  int index;
  
#line 271 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 275 
  if ((int)(adapter->ahw)->pci_func == (int)func) {
    
#line 276 
    __retres = (int)sriov->vp_handle;
    
#line 276 
    goto return_label;
  }
  else {
    
#line 278 
    index = qlcnic_sriov_func_to_index(adapter,(unsigned char)((int)func));
    
#line 279 
    if (index >= 0) {
      
#line 280 
      vf_info = sriov->vf_info + index;
      
#line 281 
      __retres = (int)(vf_info->vp)->handle;
      
#line 281 
      goto return_label;
    }
    else ;
  }
  
#line 285 
  __retres = -22;
  return_label: 
#line 285 
                return __retres;
}


#line 288  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_config_vport(struct qlcnic_adapter *adapter, u8 flag, u16 func)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  int ret;
  int vpid;
  int tmp;
  
#line 295 
  tmp = qlcnic_alloc_mbx_args(& cmd,adapter,50U);
  
#line 295 
  if (tmp != 0) {
    
#line 296 
    __retres = -12;
    
#line 296 
    goto return_label;
  }
  else ;
  
#line 298 
  if ((unsigned int)flag != 0U) 
#line 299 
                                *(cmd.req.arg + 3U) = (unsigned int)((int)func << 8);
  else {
    
#line 301 
    vpid = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)((unsigned char)func)));
    
#line 302 
    if (vpid < 0) {
      
#line 303 
      ret = -22;
      
#line 304 
      goto out;
    }
    else ;
    
#line 306 
    *(cmd.req.arg + 3U) = (unsigned int)(((vpid << 8) & 16776960) | 1);
  }
  
#line 309 
  ret = qlcnic_issue_cmd(adapter,& cmd);
  
#line 310 
  if (ret != 0) {
    char *tmp_0;
    
#line 311 
    ;
    
#line 311 
    ;
    
#line 312 
    if ((unsigned int)flag != 0U) 
#line 312 
                                  tmp_0 = (char *)"enable"; else 
#line 312 
                                                                 tmp_0 = (char *)"disable";
    
#line 311 
    ;
    
#line 311 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed %s vport, err %d for func 0x%x\n",tmp_0,ret,(int)func);
    
#line 314 
    goto out;
  }
  else ;
  
#line 317 
  if ((unsigned int)flag != 0U) {
    
#line 318 
    vpid = (int)*(cmd.rsp.arg + 2U) & 65535;
    
#line 319 
    qlcnic_sriov_pf_set_vport_handle(adapter,(unsigned short)((int)((unsigned short)vpid)),(unsigned char)((int)((unsigned char)func)));
  }
  else 
#line 321 
       qlcnic_sriov_pf_reset_vport_handle(adapter,(unsigned char)((int)((unsigned char)func)));
  out: 
#line 324 
  ;
  
#line 325 
  qlcnic_free_mbx_args(& cmd);
  
#line 326 
  __retres = ret;
  return_label: 
#line 326 
                return __retres;
}


#line 329  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_vlan_filtering(struct qlcnic_adapter *adapter, u8 enable)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  int err;
  
#line 335 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,34U);
  
#line 336 
  if (err != 0) {
    
#line 337 
    __retres = err;
    
#line 337 
    goto return_label;
  }
  else ;
  
#line 339 
  *(cmd.req.arg + 1U) = 4U;
  
#line 340 
  if ((unsigned int)enable != 0U) {
    bool tmp;
    
#line 341 
    adapter->flags |= 8388608U;
    
#line 342 
    *(cmd.req.arg + 1U) |= 65536U;
    
#line 343 
    tmp = qlcnic_84xx_check(adapter);
    
#line 343 
    if ((int)tmp != 0) 
#line 344 
                       *(cmd.req.arg + 1U) |= 524288U; else ;
  }
  else 
#line 346 
       adapter->flags &= 4286578687U;
  
#line 349 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 350 
  if (err != 0) 
#line 351 
                dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to configure VLAN filtering, err=%d\n",err); else ;
  
#line 354 
  qlcnic_free_mbx_args(& cmd);
  
#line 355 
  __retres = err;
  return_label: 
#line 355 
                return __retres;
}


#line 359  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_flood(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  int err;
  
#line 364 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,34U);
  
#line 365 
  if (err != 0) {
    
#line 366 
    __retres = err;
    
#line 366 
    goto return_label;
  }
  else ;
  
#line 368 
  *(cmd.req.arg + 1U) = 65541U;
  
#line 370 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 371 
  if (err != 0) 
#line 372 
                dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to configure VF Flood bit on PF, err=%d\n",err); else ;
  
#line 376 
  qlcnic_free_mbx_args(& cmd);
  
#line 377 
  __retres = err;
  return_label: 
#line 377 
                return __retres;
}


#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_eswitch(struct qlcnic_adapter *adapter, u8 func, u8 enable)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  int tmp;
  
#line 384 
  int err = -5;
  
#line 386 
  tmp = qlcnic_alloc_mbx_args(& cmd,adapter,37U);
  
#line 386 
  if (tmp != 0) {
    
#line 387 
    __retres = -12;
    
#line 387 
    goto return_label;
  }
  else ;
  
#line 389 
  *(cmd.req.arg) |= 1610612736U;
  
#line 390 
  *(cmd.req.arg + 1U) = (unsigned int)((((int)func << 2) & 60) | 66);
  
#line 391 
  if ((unsigned int)enable != 0U) 
#line 392 
                                  *(cmd.req.arg + 1U) |= 1U; else ;
  
#line 394 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 396 
  if (err != 0) {
    
#line 397 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to enable sriov eswitch%d\n",err);
    
#line 399 
    err = -5;
  }
  else ;
  
#line 402 
  qlcnic_free_mbx_args(& cmd);
  
#line 403 
  __retres = err;
  return_label: 
#line 403 
                return __retres;
}


#line 406  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_pf_del_flr_queue(struct qlcnic_adapter *adapter)
{
  int i;
  
#line 408 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 409 
  struct qlcnic_back_channel *bc = & sriov->bc;
  
#line 412 
  i = 0;
  
#line 412 
  goto ldv_54120;
  ldv_54119: 
#line 413 
  ;
  
#line 413 
  cancel_work_sync(& (sriov->vf_info + i)->flr_work);
  
#line 412 
  i += 1;
  ldv_54120: 
#line 413 
  ;
  
#line 412 
  if ((int)sriov->num_vfs > i) 
#line 414 
                               goto ldv_54119; else 
#line 417 
                                                    goto ldv_54121;
  ldv_54121: 
#line 418 
  ;
  
#line 415 
  destroy_workqueue(bc->bc_flr_wq);
  
#line 416 
  return;
}


#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_create_flr_queue(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct workqueue_struct *wq;
  struct workqueue_struct *tmp_0;
  
#line 420 
  struct qlcnic_back_channel *bc = & ((adapter->ahw)->sriov)->bc;
  {
    struct lock_class_key __key;
    char const *__lock_name;
    
#line 423 
    __lock_name = "\"%s\"";
    
#line 423 
    tmp_0 = __alloc_workqueue_key("%s",131082U,1,& __key,__lock_name,(char *)"qlcnic-flr");
  }
  
#line 423 
  wq = tmp_0;
  
#line 424 
  if (wq == (struct workqueue_struct *)0) {
    
#line 425 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Cannot create FLR workqueue\n");
    
#line 426 
    __retres = -12;
    
#line 426 
    goto return_label;
  }
  else ;
  
#line 429 
  bc->bc_flr_wq = wq;
  
#line 430 
  __retres = 0;
  return_label: 
#line 430 
                return __retres;
}


#line 433  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_sriov_pf_cleanup(struct qlcnic_adapter *adapter)
{
  int tmp_0;
  bool tmp;
  
#line 435 
  u8 func = (adapter->ahw)->pci_func;
  
#line 437 
  tmp = qlcnic_sriov_enable_check(adapter);
  
#line 437 
  if (tmp) 
#line 437 
           tmp_0 = 0; else 
#line 437 
                           tmp_0 = 1;
  
#line 437 
  if (tmp_0) 
#line 438 
             goto return_label; else ;
  
#line 440 
  qlcnic_sriov_pf_del_flr_queue(adapter);
  
#line 441 
  qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)0);
  
#line 442 
  qlcnic_sriov_pf_config_vport(adapter,(unsigned char)0,(unsigned short)((int)func));
  
#line 443 
  qlcnic_sriov_pf_cfg_eswitch(adapter,(unsigned char)((int)func),(unsigned char)0);
  
#line 444 
  qlcnic_sriov_pf_cfg_vlan_filtering(adapter,(unsigned char)0);
  
#line 445 
  __qlcnic_sriov_cleanup(adapter);
  
#line 446 
  (adapter->ahw)->op_mode = (unsigned short)0U;
  
#line 447 
  set_bit(10L,(unsigned long volatile *)(& adapter->state));
  return_label: 
#line 448 
                return;
}


#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_sriov_pf_disable(struct qlcnic_adapter *adapter)
{
  int tmp_0;
  bool tmp;
  int tmp_2;
  bool tmp_1;
  
#line 452 
  tmp = qlcnic_sriov_pf_check(adapter);
  
#line 452 
  if (tmp) 
#line 452 
           tmp_0 = 0; else 
#line 452 
                           tmp_0 = 1;
  
#line 452 
  if (tmp_0) 
#line 453 
             goto return_label; else ;
  
#line 455 
  tmp_1 = qlcnic_sriov_enable_check(adapter);
  
#line 455 
  if (tmp_1) 
#line 455 
             tmp_2 = 0; else 
#line 455 
                             tmp_2 = 1;
  
#line 455 
  if (tmp_2) 
#line 456 
             goto return_label; else ;
  
#line 458 
  pci_disable_sriov(adapter->pdev);
  
#line 459 
  netdev_info((struct net_device const *)adapter->netdev,"SR-IOV is disabled successfully on port %d\n",(int)adapter->portnum);
  return_label: 
#line 462 
                return;
}


#line 464  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_pci_sriov_disable(struct qlcnic_adapter *adapter)
{
  int __retres;
  int tmp;
  bool tmp_0;
  int tmp_1;
  bool tmp_2;
  
#line 466 
  struct net_device *netdev = adapter->netdev;
  
#line 468 
  tmp = pci_vfs_assigned(adapter->pdev);
  
#line 468 
  if (tmp != 0) {
    
#line 469 
    netdev_err((struct net_device const *)adapter->netdev,"SR-IOV VFs belonging to port %d are assigned to VMs. SR-IOV can not be disabled on this port\n",(int)adapter->portnum);
    
#line 472 
    netdev_info((struct net_device const *)adapter->netdev,"Please detach SR-IOV VFs belonging to port %d from VMs, and then try to disable SR-IOV on this port\n",(int)adapter->portnum);
    
#line 475 
    __retres = -1;
    
#line 475 
    goto return_label;
  }
  else ;
  
#line 478 
  qlcnic_sriov_pf_disable(adapter);
  
#line 480 
  rtnl_lock();
  
#line 481 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 481 
  if ((int)tmp_0 != 0) 
#line 482 
                       __qlcnic_down(adapter,netdev); else ;
  
#line 484 
  qlcnic_sriov_free_vlans(adapter);
  
#line 486 
  qlcnic_sriov_pf_cleanup(adapter);
  
#line 491 
  tmp_1 = qlcnic_83xx_configure_opmode(adapter);
  
#line 491 
  if (tmp_1 != 0) {
    
#line 492 
    rtnl_unlock();
    
#line 493 
    __retres = -5;
    
#line 493 
    goto return_label;
  }
  else ;
  
#line 496 
  tmp_2 = netif_running((struct net_device const *)netdev);
  
#line 496 
  if ((int)tmp_2 != 0) 
#line 497 
                       __qlcnic_up(adapter,netdev); else ;
  
#line 499 
  rtnl_unlock();
  
#line 500 
  __retres = 0;
  return_label: 
#line 500 
                return __retres;
}


#line 503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_init(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_info nic_info;
  struct qlcnic_info pf_info;
  struct qlcnic_info vp_info;
  int err;
  int tmp_0;
  bool tmp;
  bool tmp_1;
  
#line 505 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 508 
  u8 func = ahw->pci_func;
  
#line 510 
  tmp = qlcnic_sriov_enable_check(adapter);
  
#line 510 
  if (tmp) 
#line 510 
           tmp_0 = 0; else 
#line 510 
                           tmp_0 = 1;
  
#line 510 
  if (tmp_0) {
    
#line 511 
    __retres = 0;
    
#line 511 
    goto return_label;
  }
  else ;
  
#line 513 
  err = qlcnic_sriov_pf_cfg_vlan_filtering(adapter,(unsigned char)1);
  
#line 514 
  if (err != 0) {
    
#line 515 
    __retres = err;
    
#line 515 
    goto return_label;
  }
  else ;
  
#line 517 
  tmp_1 = qlcnic_84xx_check(adapter);
  
#line 517 
  if ((int)tmp_1 != 0) {
    
#line 518 
    err = qlcnic_sriov_pf_cfg_flood(adapter);
    
#line 519 
    if (err != 0) 
#line 520 
                  goto disable_vlan_filtering; else ;
  }
  else ;
  
#line 523 
  err = qlcnic_sriov_pf_cfg_eswitch(adapter,(unsigned char)((int)func),(unsigned char)1);
  
#line 524 
  if (err != 0) 
#line 525 
                goto disable_vlan_filtering; else ;
  
#line 527 
  err = qlcnic_sriov_pf_config_vport(adapter,(unsigned char)1,(unsigned short)((int)func));
  
#line 528 
  if (err != 0) 
#line 529 
                goto disable_eswitch; else ;
  
#line 531 
  err = qlcnic_sriov_get_pf_info(adapter,& pf_info);
  
#line 532 
  if (err != 0) 
#line 533 
                goto delete_vport; else ;
  
#line 535 
  err = qlcnic_get_nic_info(adapter,& nic_info,(unsigned char)((int)func));
  
#line 536 
  if (err != 0) 
#line 537 
                goto delete_vport; else ;
  
#line 539 
  err = qlcnic_sriov_pf_cal_res_limit(adapter,& vp_info,(unsigned short)((int)func));
  
#line 540 
  if (err != 0) 
#line 541 
                goto delete_vport; else ;
  
#line 543 
  err = qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)1);
  
#line 544 
  if (err != 0) 
#line 545 
                goto delete_vport; else ;
  
#line 547 
  ahw->physical_port = (unsigned char)nic_info.phys_port;
  
#line 548 
  ahw->switch_mode = nic_info.switch_mode;
  
#line 549 
  ahw->max_mtu = nic_info.max_mtu;
  
#line 550 
  ahw->capabilities = nic_info.capabilities;
  
#line 551 
  ahw->nic_mode = (unsigned char)1U;
  
#line 552 
  __retres = err;
  
#line 552 
  goto return_label;
  delete_vport: 
#line 554 
  ;
  
#line 555 
  qlcnic_sriov_pf_config_vport(adapter,(unsigned char)0,(unsigned short)((int)func));
  disable_eswitch: 
#line 557 
  ;
  
#line 558 
  qlcnic_sriov_pf_cfg_eswitch(adapter,(unsigned char)((int)func),(unsigned char)0);
  disable_vlan_filtering: 
#line 560 
  ;
  
#line 561 
  qlcnic_sriov_pf_cfg_vlan_filtering(adapter,(unsigned char)0);
  
#line 563 
  __retres = err;
  return_label: 
#line 563 
                return __retres;
}


#line 566  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_enable(struct qlcnic_adapter *adapter, int num_vfs)
{
  int __retres;
  int err;
  int tmp_0;
  bool tmp;
  
#line 570 
  tmp = qlcnic_sriov_enable_check(adapter);
  
#line 570 
  if (tmp) 
#line 570 
           tmp_0 = 0; else 
#line 570 
                           tmp_0 = 1;
  
#line 570 
  if (tmp_0) {
    
#line 571 
    __retres = 0;
    
#line 571 
    goto return_label;
  }
  else ;
  
#line 573 
  err = pci_enable_sriov(adapter->pdev,num_vfs);
  
#line 574 
  if (err != 0) 
#line 575 
                qlcnic_sriov_pf_cleanup(adapter); else ;
  
#line 577 
  __retres = err;
  return_label: 
#line 577 
                return __retres;
}


#line 580  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int __qlcnic_pci_sriov_enable(struct qlcnic_adapter *adapter, int num_vfs)
{
  int __retres;
  
#line 583 
  int err = 0;
  
#line 585 
  set_bit(10L,(unsigned long volatile *)(& adapter->state));
  
#line 586 
  (adapter->ahw)->op_mode = (unsigned short)3U;
  
#line 588 
  err = qlcnic_sriov_init(adapter,num_vfs);
  
#line 589 
  if (err != 0) 
#line 590 
                goto clear_op_mode; else ;
  
#line 592 
  err = qlcnic_sriov_pf_create_flr_queue(adapter);
  
#line 593 
  if (err != 0) 
#line 594 
                goto sriov_cleanup; else ;
  
#line 596 
  err = qlcnic_sriov_pf_init(adapter);
  
#line 597 
  if (err != 0) 
#line 598 
                goto del_flr_queue; else ;
  
#line 600 
  qlcnic_sriov_alloc_vlans(adapter);
  
#line 602 
  __retres = err;
  
#line 602 
  goto return_label;
  del_flr_queue: 
#line 604 
  ;
  
#line 605 
  qlcnic_sriov_pf_del_flr_queue(adapter);
  sriov_cleanup: 
#line 607 
  ;
  
#line 608 
  __qlcnic_sriov_cleanup(adapter);
  clear_op_mode: 
#line 610 
  ;
  
#line 611 
  set_bit(10L,(unsigned long volatile *)(& adapter->state));
  
#line 612 
  (adapter->ahw)->op_mode = (unsigned short)0U;
  
#line 613 
  __retres = err;
  return_label: 
#line 613 
                return __retres;
}


#line 616  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_pci_sriov_enable(struct qlcnic_adapter *adapter, int num_vfs)
{
  int __retres;
  int err;
  bool tmp;
  bool tmp_0;
  bool tmp_1;
  int tmp_3;
  
#line 618 
  struct net_device *netdev = adapter->netdev;
  
#line 621 
  if ((adapter->flags & 4U) == 0U) {
    
#line 622 
    netdev_err((struct net_device const *)netdev,"SR-IOV cannot be enabled, when legacy interrupts are enabled\n");
    
#line 624 
    __retres = -5;
    
#line 624 
    goto return_label;
  }
  else ;
  
#line 627 
  rtnl_lock();
  
#line 628 
  tmp = netif_running((struct net_device const *)netdev);
  
#line 628 
  if ((int)tmp != 0) 
#line 629 
                     __qlcnic_down(adapter,netdev); else ;
  
#line 631 
  err = __qlcnic_pci_sriov_enable(adapter,num_vfs);
  
#line 632 
  if (err != 0) 
#line 633 
                goto error; else ;
  
#line 635 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 635 
  if ((int)tmp_0 != 0) 
#line 636 
                       __qlcnic_up(adapter,netdev); else ;
  
#line 638 
  rtnl_unlock();
  
#line 639 
  err = qlcnic_sriov_pf_enable(adapter,num_vfs);
  
#line 640 
  if (err == 0) {
    
#line 641 
    netdev_info((struct net_device const *)netdev,"SR-IOV is enabled successfully on port %d\n",(int)adapter->portnum);
    
#line 645 
    __retres = num_vfs;
    
#line 645 
    goto return_label;
  }
  else ;
  
#line 648 
  rtnl_lock();
  
#line 649 
  tmp_1 = netif_running((struct net_device const *)netdev);
  
#line 649 
  if ((int)tmp_1 != 0) 
#line 650 
                       __qlcnic_down(adapter,netdev); else ;
  error: 
#line 652 
  ;
  
#line 653 
  tmp_3 = qlcnic_83xx_configure_opmode(adapter);
  
#line 653 
  if (tmp_3 == 0) {
    bool tmp_2;
    
#line 654 
    tmp_2 = netif_running((struct net_device const *)netdev);
    
#line 654 
    if ((int)tmp_2 != 0) 
#line 655 
                         __qlcnic_up(adapter,netdev); else ;
  }
  else ;
  
#line 658 
  rtnl_unlock();
  
#line 659 
  netdev_info((struct net_device const *)netdev,"Failed to enable SR-IOV on port %d\n",(int)adapter->portnum);
  
#line 662 
  __retres = err;
  return_label: 
#line 662 
                return __retres;
}


#line 665  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_pci_sriov_configure(struct pci_dev *dev, int num_vfs)
{
  int __retres;
  int err;
  int tmp_0;
  
#line 667 
  struct qlcnic_adapter *adapter = pci_get_drvdata(dev);
  
#line 670 
  tmp_0 = test_and_set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 670 
  if (tmp_0 != 0) {
    
#line 671 
    __retres = -16;
    
#line 671 
    goto return_label;
  }
  else ;
  
#line 673 
  if (num_vfs == 0) 
#line 674 
                    err = qlcnic_pci_sriov_disable(adapter); else 
#line 676 
                                                                  err = qlcnic_pci_sriov_enable(adapter,num_vfs);
  
#line 678 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 679 
  __retres = err;
  return_label: 
#line 679 
                return __retres;
}


#line 682  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_set_vf_acl(struct qlcnic_adapter *adapter, u8 func)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  struct qlcnic_vport *vp;
  int err;
  int id;
  u8 *mac;
  
#line 689 
  id = qlcnic_sriov_func_to_index(adapter,(unsigned char)((int)func));
  
#line 690 
  if (id < 0) {
    
#line 691 
    __retres = id;
    
#line 691 
    goto return_label;
  }
  else ;
  
#line 693 
  vp = (((adapter->ahw)->sriov)->vf_info + id)->vp;
  
#line 694 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,34U);
  
#line 695 
  if (err != 0) {
    
#line 696 
    __retres = err;
    
#line 696 
    goto return_label;
  }
  else ;
  
#line 698 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)func << 16) | 3);
  
#line 699 
  if ((int)vp->spoofchk == 1) {
    
#line 700 
    mac = (u8 *)(& vp->mac);
    
#line 701 
    *(cmd.req.arg + 2U) |= 266U;
    
#line 702 
    *(cmd.req.arg + 4U) = (unsigned int)((((int)*(mac + 5U) | ((int)*(mac + 4U) << 8)) | ((int)*(mac + 3U) << 16)) | ((int)*(mac + 2U) << 24));
    
#line 704 
    *(cmd.req.arg + 5U) = (unsigned int)((int)*(mac + 1U) | ((int)*mac << 8));
  }
  else ;
  
#line 707 
  if ((unsigned int)vp->vlan_mode == 1U) {
    
#line 708 
    *(cmd.req.arg + 2U) |= 64U;
    
#line 709 
    *(cmd.req.arg + 3U) |= (unsigned int)((int)vp->pvid << 8);
  }
  else ;
  
#line 712 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 713 
  if (err != 0) 
#line 714 
                dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to set ACL, err=%d\n",err); else ;
  
#line 717 
  qlcnic_free_mbx_args(& cmd);
  
#line 718 
  __retres = err;
  return_label: 
#line 718 
                return __retres;
}


#line 721  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_set_vf_vport_info(struct qlcnic_adapter *adapter, u16 func)
{
  int __retres;
  struct qlcnic_info defvp_info;
  int err;
  
#line 727 
  err = qlcnic_sriov_pf_cal_res_limit(adapter,& defvp_info,(unsigned short)((int)func));
  
#line 728 
  if (err != 0) {
    
#line 729 
    __retres = -5;
    
#line 729 
    goto return_label;
  }
  else ;
  
#line 731 
  err = qlcnic_sriov_set_vf_acl(adapter,(unsigned char)((int)((unsigned char)func)));
  
#line 732 
  if (err != 0) {
    
#line 733 
    __retres = err;
    
#line 733 
    goto return_label;
  }
  else ;
  
#line 735 
  __retres = 0;
  return_label: 
#line 735 
                return __retres;
}


#line 738  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_channel_cfg_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  struct qlcnic_adapter *adapter;
  struct qlcnic_sriov *sriov;
  size_t size;
  int err;
  
#line 741 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 742 
  struct qlcnic_vport *vp = vf->vp;
  
#line 745 
  u16 func = (unsigned short)vf->pci_func;
  
#line 749 
  adapter = vf->adapter;
  
#line 750 
  sriov = (adapter->ahw)->sriov;
  
#line 752 
  if ((unsigned int)(trans->req_hdr)->cmd_op == 0U) {
    
#line 753 
    err = qlcnic_sriov_pf_config_vport(adapter,(unsigned char)1,(unsigned short)((int)func));
    
#line 754 
    if (err == 0) {
      
#line 755 
      err = qlcnic_sriov_set_vf_vport_info(adapter,(unsigned short)((int)func));
      
#line 756 
      if (err != 0) 
#line 757 
                    qlcnic_sriov_pf_config_vport(adapter,(unsigned char)0,(unsigned short)((int)func)); else ;
    }
    else ;
  }
  else {
    
#line 760 
    if ((unsigned int)vp->vlan_mode == 2U) {
      
#line 761 
      size = 2UL;
      
#line 762 
      size = (unsigned long)sriov->num_allowed_vlans * size;
      
#line 763 
      memset((void *)vf->sriov_vlans,0,size);
    }
    else ;
    
#line 766 
    err = qlcnic_sriov_pf_config_vport(adapter,(unsigned char)0,(unsigned short)((int)func));
  }
  
#line 769 
  if (err != 0) 
#line 770 
                goto err_out; else ;
  
#line 772 
  *(cmd->rsp.arg) |= 33554432U;
  
#line 774 
  if ((unsigned int)(trans->req_hdr)->cmd_op == 0U) 
#line 775 
                                                    set_bit(3L,(unsigned long volatile *)(& vf->state)); else 
                                                                    
#line 777 
                                                                    set_bit(3L,(unsigned long volatile *)(& vf->state));
  
#line 779 
  __retres = err;
  
#line 779 
  goto return_label;
  err_out: 
#line 781 
  ;
  
#line 782 
  *(cmd->rsp.arg) |= 67108864U;
  
#line 783 
  __retres = err;
  return_label: 
#line 783 
                return __retres;
}


#line 786  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_cfg_vf_def_mac(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf, u16 vlan, u8 op)
{
  int __retres;
  struct qlcnic_cmd_args *cmd;
  struct qlcnic_macvlan_mbx mv;
  struct qlcnic_vport *vp;
  u8 *addr;
  int err;
  u32 *buf;
  int vpid;
  
#line 798 
  vp = vf->vp;
  
#line 800 
  cmd = (struct qlcnic_cmd_args *)kzalloc_0(200UL,32U);
  
#line 801 
  if (cmd == (struct qlcnic_cmd_args *)0) {
    
#line 802 
    __retres = -12;
    
#line 802 
    goto return_label;
  }
  else ;
  
#line 804 
  err = qlcnic_alloc_mbx_args(cmd,adapter,69U);
  
#line 805 
  if (err != 0) 
#line 806 
                goto free_cmd; else ;
  
#line 808 
  cmd->type = 1U;
  
#line 809 
  vpid = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)vf->pci_func));
  
#line 810 
  if (vpid < 0) {
    
#line 811 
    err = -22;
    
#line 812 
    goto free_args;
  }
  else ;
  
#line 815 
  if ((unsigned int)vlan != 0U) 
    
#line 816 
    if ((unsigned int)op == 1U || (unsigned int)op == 3U) 
#line 816 
                                                          op = (unsigned char)3U; else 
                                                                    
#line 816 
                                                                    op = (unsigned char)4U;
  else ;
  
#line 819 
  *(cmd->req.arg + 1U) = (unsigned int)((int)op | 448);
  
#line 820 
  *(cmd->req.arg + 1U) = (*(cmd->req.arg + 1U) | (unsigned int)(vpid << 16)) | 2147483648U;
  
#line 822 
  addr = (u8 *)(& vp->mac);
  
#line 823 
  mv.vlan = vlan;
  
#line 824 
  mv.mac_addr0 = *addr;
  
#line 825 
  mv.mac_addr1 = *(addr + 1U);
  
#line 826 
  mv.mac_addr2 = *(addr + 2U);
  
#line 827 
  mv.mac_addr3 = *(addr + 3U);
  
#line 828 
  mv.mac_addr4 = *(addr + 4U);
  
#line 829 
  mv.mac_addr5 = *(addr + 5U);
  
#line 830 
  buf = cmd->req.arg + 2U;
  
#line 831 
  memcpy((void *)buf,(void const *)(& mv),8UL);
  
#line 833 
  err = qlcnic_issue_cmd(adapter,cmd);
  
#line 835 
  if (err == 0) {
    
#line 836 
    __retres = err;
    
#line 836 
    goto return_label;
  }
  else ;
  free_args: 
#line 838 
  ;
  
#line 839 
  qlcnic_free_mbx_args(cmd);
  free_cmd: 
#line 840 
  ;
  
#line 841 
  kfree((void const *)cmd);
  
#line 842 
  __retres = err;
  return_label: 
#line 842 
                return __retres;
}


#line 845  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_create_rx_ctx(struct qlcnic_cmd_args *cmd)
{
  int __retres;
  
#line 847 
  if (*(cmd->req.arg) >> 29 != 3U) {
    
#line 848 
    __retres = -22;
    
#line 848 
    goto return_label;
  }
  else ;
  
#line 850 
  __retres = 0;
  return_label: 
#line 850 
                return __retres;
}


#line 853  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_83xx_cfg_default_mac_vlan(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf, int opcode)
{
  struct qlcnic_sriov *sriov;
  u16 vlan;
  int i;
  
#line 861 
  sriov = (adapter->ahw)->sriov;
  
#line 863 
  ldv_spin_lock_bh_75(& vf->vlan_list_lock);
  
#line 864 
  if (vf->num_vlan != 0) {
    
#line 865 
    i = 0;
    
#line 865 
    goto ldv_54233;
    ldv_54232: 
#line 866 
    ;
    
#line 866 
    vlan = *(vf->sriov_vlans + i);
    
#line 867 
    if ((unsigned int)vlan != 0U) 
#line 868 
                                  qlcnic_sriov_cfg_vf_def_mac(adapter,vf,(unsigned short)((int)vlan),(unsigned char)((int)((unsigned char)opcode))); else ;
    
#line 865 
    i += 1;
    ldv_54233: 
#line 866 
    ;
    
#line 865 
    if ((int)sriov->num_allowed_vlans > i) 
#line 867 
                                           goto ldv_54232; else 
#line 870 
                                                                goto ldv_54234;
    ldv_54234: 
#line 871 
    ;
  }
  else ;
  
#line 872 
  ldv_spin_unlock_bh_76(& vf->vlan_list_lock);
  
#line 874 
  if ((unsigned int)(vf->vp)->vlan_mode != 1U) {
    bool tmp;
    
#line 875 
    tmp = qlcnic_83xx_pf_check(adapter);
    
#line 875 
    if ((int)tmp != 0) {
      bool tmp_0;
      
#line 875 
      tmp_0 = qlcnic_sriov_check_any_vlan(vf);
      
#line 875 
      if ((int)tmp_0 != 0) 
#line 877 
                           goto return_label; else ;
    }
    else ;
    
#line 878 
    qlcnic_sriov_cfg_vf_def_mac(adapter,vf,(unsigned short)0,(unsigned char)((int)((unsigned char)opcode)));
  }
  else ;
  return_label: 
#line 880 
                return;
}


#line 882  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_create_rx_ctx_cmd(struct qlcnic_bc_trans *tran, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  struct qlcnic_rcv_mbx_out *mbx_out;
  int err;
  
#line 885 
  struct qlcnic_vf_info *vf = tran->vf;
  
#line 886 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 890 
  err = qlcnic_sriov_validate_create_rx_ctx(cmd);
  
#line 891 
  if (err != 0) {
    
#line 892 
    *(cmd->rsp.arg) |= 201326592U;
    
#line 893 
    __retres = err;
    
#line 893 
    goto return_label;
  }
  else ;
  
#line 896 
  *(cmd->req.arg + 6U) = (unsigned int)(vf->vp)->handle;
  
#line 897 
  err = qlcnic_issue_cmd(adapter,cmd);
  
#line 899 
  if (err == 0) {
    
#line 900 
    mbx_out = (struct qlcnic_rcv_mbx_out *)(cmd->rsp.arg + 1U);
    
#line 901 
    vf->rx_ctx_id = mbx_out->ctx_id;
    
#line 902 
    qlcnic_83xx_cfg_default_mac_vlan(adapter,vf,1);
  }
  else 
#line 904 
       vf->rx_ctx_id = (unsigned short)0U;
  
#line 907 
  __retres = err;
  return_label: 
#line 907 
                return __retres;
}


#line 910  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_mac_address_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  u8 type;
  u8 *mac;
  
#line 913 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 916 
  type = (unsigned char)*(cmd->req.arg + 1U);
  
#line 917 
  switch ((int)type) {
    case 2: 
#line 918 
    ;
    case 5: 
#line 919 
    ;
    
#line 920 
    *(cmd->rsp.arg) = 67108864U;
    
#line 921 
    goto ldv_54252;
    case 1: 
#line 922 
    ;
    
#line 923 
    *(cmd->rsp.arg) = 33554432U;
    
#line 924 
    mac = (u8 *)(& (vf->vp)->mac);
    
#line 925 
    *(cmd->rsp.arg + 2U) = (unsigned int)((int)*(mac + 1U) | (((int)*mac << 8) & 65535));
    
#line 926 
    *(cmd->rsp.arg + 1U) = (unsigned int)(((int)*(mac + 5U) | (((int)*(mac + 4U) << 8) & 65535)) | (((int)*(mac + 3U) << 16) & 16711680)) | (unsigned int)((int)*(mac + 2U) << 24);
  }
  ldv_54252: 
#line 931 
  ;
  
#line 931 
  __retres = 0;
  
#line 931 
  return __retres;
}


#line 934  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_create_tx_ctx(struct qlcnic_cmd_args *cmd)
{
  int __retres;
  
#line 936 
  if (*(cmd->req.arg) >> 29 != 3U) {
    
#line 937 
    __retres = -22;
    
#line 937 
    goto return_label;
  }
  else ;
  
#line 939 
  __retres = 0;
  return_label: 
#line 939 
                return __retres;
}


#line 942  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_create_tx_ctx_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  struct qlcnic_tx_mbx_out *mbx_out;
  int err;
  
#line 945 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 946 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 950 
  err = qlcnic_sriov_validate_create_tx_ctx(cmd);
  
#line 951 
  if (err != 0) {
    
#line 952 
    *(cmd->rsp.arg) |= 201326592U;
    
#line 953 
    __retres = err;
    
#line 953 
    goto return_label;
  }
  else ;
  
#line 956 
  *(cmd->req.arg + 5U) |= (unsigned int)((int)(vf->vp)->handle << 16);
  
#line 957 
  err = qlcnic_issue_cmd(adapter,cmd);
  
#line 958 
  if (err == 0) {
    
#line 959 
    mbx_out = (struct qlcnic_tx_mbx_out *)(cmd->rsp.arg + 2U);
    
#line 960 
    vf->tx_ctx_id = mbx_out->ctx_id;
  }
  else 
#line 962 
       vf->tx_ctx_id = (unsigned short)0U;
  
#line 965 
  __retres = err;
  return_label: 
#line 965 
                return __retres;
}


#line 968  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_del_rx_ctx(struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  
#line 971 
  if (*(cmd->req.arg) >> 29 != 3U) {
    
#line 972 
    __retres = -22;
    
#line 972 
    goto return_label;
  }
  else ;
  
#line 974 
  if ((*(cmd->req.arg + 1U) & 65535U) != (unsigned int)vf->rx_ctx_id) {
    
#line 975 
    __retres = -22;
    
#line 975 
    goto return_label;
  }
  else ;
  
#line 977 
  __retres = 0;
  return_label: 
#line 977 
                return __retres;
}


#line 980  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_del_rx_ctx_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  int err;
  
#line 983 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 984 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 987 
  err = qlcnic_sriov_validate_del_rx_ctx(vf,cmd);
  
#line 988 
  if (err != 0) {
    
#line 989 
    *(cmd->rsp.arg) |= 201326592U;
    
#line 990 
    __retres = err;
    
#line 990 
    goto return_label;
  }
  else ;
  
#line 993 
  qlcnic_83xx_cfg_default_mac_vlan(adapter,vf,2);
  
#line 994 
  *(cmd->req.arg + 1U) |= (unsigned int)((int)(vf->vp)->handle << 16);
  
#line 995 
  err = qlcnic_issue_cmd(adapter,cmd);
  
#line 997 
  if (err == 0) 
#line 998 
                vf->rx_ctx_id = (unsigned short)0U; else ;
  
#line 1000 
  __retres = err;
  return_label: 
#line 1000 
                return __retres;
}


#line 1003  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_del_tx_ctx(struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  
#line 1006 
  if (*(cmd->req.arg) >> 29 != 3U) {
    
#line 1007 
    __retres = -22;
    
#line 1007 
    goto return_label;
  }
  else ;
  
#line 1009 
  if ((*(cmd->req.arg + 1U) & 65535U) != (unsigned int)vf->tx_ctx_id) {
    
#line 1010 
    __retres = -22;
    
#line 1010 
    goto return_label;
  }
  else ;
  
#line 1012 
  __retres = 0;
  return_label: 
#line 1012 
                return __retres;
}


#line 1015  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_del_tx_ctx_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  int err;
  
#line 1018 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 1019 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 1022 
  err = qlcnic_sriov_validate_del_tx_ctx(vf,cmd);
  
#line 1023 
  if (err != 0) {
    
#line 1024 
    *(cmd->rsp.arg) |= 201326592U;
    
#line 1025 
    __retres = err;
    
#line 1025 
    goto return_label;
  }
  else ;
  
#line 1028 
  *(cmd->req.arg + 1U) |= (unsigned int)((int)(vf->vp)->handle << 16);
  
#line 1029 
  err = qlcnic_issue_cmd(adapter,cmd);
  
#line 1031 
  if (err == 0) 
#line 1032 
                vf->tx_ctx_id = (unsigned short)0U; else ;
  
#line 1034 
  __retres = err;
  return_label: 
#line 1034 
                return __retres;
}


#line 1037  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_cfg_lro(struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  
#line 1040 
  if (*(cmd->req.arg + 1U) >> 16 != (unsigned int)vf->rx_ctx_id) {
    
#line 1041 
    __retres = -22;
    
#line 1041 
    goto return_label;
  }
  else ;
  
#line 1043 
  __retres = 0;
  return_label: 
#line 1043 
                return __retres;
}


#line 1046  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_lro_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  int err;
  
#line 1049 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 1050 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 1053 
  err = qlcnic_sriov_validate_cfg_lro(vf,cmd);
  
#line 1054 
  if (err != 0) {
    
#line 1055 
    *(cmd->rsp.arg) |= 201326592U;
    
#line 1056 
    __retres = err;
    
#line 1056 
    goto return_label;
  }
  else ;
  
#line 1059 
  err = qlcnic_issue_cmd(adapter,cmd);
  
#line 1060 
  __retres = err;
  return_label: 
#line 1060 
                return __retres;
}


#line 1063  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_ip_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  u8 op;
  
#line 1066 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 1067 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 1068 
  int err = -5;
  
#line 1071 
  op = (unsigned char)*(cmd->req.arg + 1U);
  
#line 1073 
  *(cmd->req.arg + 1U) |= (unsigned int)((int)(vf->vp)->handle << 16);
  
#line 1074 
  *(cmd->req.arg + 1U) |= 2147483648U;
  
#line 1076 
  err = qlcnic_issue_cmd(adapter,cmd);
  
#line 1077 
  return err;
}


#line 1080  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_cfg_intrpt(struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  
#line 1083 
  if (((*(cmd->req.arg + 1U) >> 8) & 255U) != (unsigned int)vf->pci_func) {
    
#line 1084 
    __retres = -22;
    
#line 1084 
    goto return_label;
  }
  else ;
  
#line 1086 
  if ((*(cmd->req.arg + 1U) & 65536U) == 0U) {
    
#line 1087 
    __retres = -22;
    
#line 1087 
    goto return_label;
  }
  else ;
  
#line 1089 
  if ((*(cmd->req.arg + 1U) & 255U) != 1U) {
    
#line 1090 
    __retres = -22;
    
#line 1090 
    goto return_label;
  }
  else ;
  
#line 1092 
  __retres = 0;
  return_label: 
#line 1092 
                return __retres;
}


#line 1095  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_intrpt_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  int err;
  
#line 1098 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 1099 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 1102 
  err = qlcnic_sriov_validate_cfg_intrpt(vf,cmd);
  
#line 1103 
  if (err != 0) 
#line 1104 
                *(cmd->rsp.arg) |= 201326592U; else 
#line 1106 
                                                    err = qlcnic_issue_cmd(adapter,cmd);
  
#line 1108 
  return err;
}


#line 1111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_mtu(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  
#line 1115 
  if (*(cmd->req.arg + 1U) != (unsigned int)vf->rx_ctx_id) {
    
#line 1116 
    __retres = -22;
    
#line 1116 
    goto return_label;
  }
  else ;
  
#line 1118 
  if (*(cmd->req.arg + 2U) > (unsigned int)(adapter->ahw)->max_mtu) {
    
#line 1119 
    __retres = -22;
    
#line 1119 
    goto return_label;
  }
  else ;
  
#line 1121 
  __retres = 0;
  return_label: 
#line 1121 
                return __retres;
}


#line 1124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_set_mtu_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  int err;
  
#line 1127 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 1128 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 1131 
  err = qlcnic_sriov_validate_mtu(adapter,vf,cmd);
  
#line 1132 
  if (err != 0) 
#line 1133 
                *(cmd->rsp.arg) |= 201326592U; else 
#line 1135 
                                                    err = qlcnic_issue_cmd(adapter,cmd);
  
#line 1137 
  return err;
}


#line 1140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_get_nic_info(struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  
#line 1143 
  if (*(cmd->req.arg + 1U) < (u32)0) {
    
#line 1144 
    if (((*(cmd->req.arg + 1U) >> 16) & 32767U) != (unsigned int)vf->pci_func) {
      
#line 1145 
      __retres = -22;
      
#line 1145 
      goto return_label;
    }
    else ;
  }
  else 
#line 1147 
       *(cmd->req.arg + 1U) |= (unsigned int)((int)(vf->vp)->handle << 16);
  
#line 1150 
  __retres = 0;
  return_label: 
#line 1150 
                return __retres;
}


#line 1153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_get_nic_info_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  int err;
  
#line 1156 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 1157 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 1160 
  err = qlcnic_sriov_validate_get_nic_info(vf,cmd);
  
#line 1161 
  if (err != 0) {
    
#line 1162 
    *(cmd->rsp.arg) |= 201326592U;
    
#line 1163 
    __retres = err;
    
#line 1163 
    goto return_label;
  }
  else ;
  
#line 1166 
  err = qlcnic_issue_cmd(adapter,cmd);
  
#line 1167 
  __retres = err;
  return_label: 
#line 1167 
                return __retres;
}


#line 1170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_cfg_rss(struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  
#line 1173 
  if (*(cmd->req.arg + 1U) != (unsigned int)vf->rx_ctx_id) {
    
#line 1174 
    __retres = -22;
    
#line 1174 
    goto return_label;
  }
  else ;
  
#line 1176 
  __retres = 0;
  return_label: 
#line 1176 
                return __retres;
}


#line 1179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_rss_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  int err;
  
#line 1182 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 1183 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 1186 
  err = qlcnic_sriov_validate_cfg_rss(vf,cmd);
  
#line 1187 
  if (err != 0) 
#line 1188 
                *(cmd->rsp.arg) |= 201326592U; else 
#line 1190 
                                                    err = qlcnic_issue_cmd(adapter,cmd);
  
#line 1192 
  return err;
}


#line 1195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_cfg_intrcoal(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  u16 ctx_id;
  u16 pkts;
  u16 time;
  u8 type;
  
#line 1199 
  struct qlcnic_nic_intr_coalesce *coal = & (adapter->ahw)->coal;
  
#line 1201 
  int err = -22;
  
#line 1204 
  type = (unsigned char)((unsigned int)((unsigned char)*(cmd->req.arg + 1U)) & 7U);
  
#line 1205 
  ctx_id = (unsigned short)(*(cmd->req.arg + 1U) >> 16);
  
#line 1206 
  pkts = (unsigned short)*(cmd->req.arg + 2U);
  
#line 1207 
  time = (unsigned short)(*(cmd->req.arg + 2U) >> 16);
  
#line 1209 
  switch ((int)type) {
    case 1: 
#line 1210 
    ;
    
#line 1211 
    if (((int)vf->rx_ctx_id != (int)ctx_id || (int)coal->rx_packets < (int)pkts) || (int)coal->rx_time_us > (int)time) 
      
#line 1213 
      goto err_label; else ;
    
#line 1214 
    goto ldv_54364;
    case 2: 
#line 1215 
    ;
    
#line 1216 
    if (((int)vf->tx_ctx_id != (int)ctx_id || (int)coal->tx_packets < (int)pkts) || (int)coal->tx_time_us > (int)time) 
      
#line 1218 
      goto err_label; else ;
    
#line 1219 
    goto ldv_54364;
    default: 
#line 1220 
    ;
    
#line 1221 
    netdev_err((struct net_device const *)adapter->netdev,"Invalid coalescing type 0x%x received\n",(int)type);
    
#line 1223 
    __retres = err;
    
#line 1223 
    goto return_label;
  }
  ldv_54364: 
#line 1226 
  ;
  
#line 1226 
  __retres = 0;
  
#line 1226 
  goto return_label;
  err_label: 
#line 1228 
  ;
  
#line 1229 
  netdev_err((struct net_device const *)adapter->netdev,"Expected: rx_ctx_id 0x%x rx_packets 0x%x rx_time_us 0x%x tx_ctx_id 0x%x tx_packets 0x%x tx_time_us 0x%x\n",(int)vf->rx_ctx_id,(int)coal->rx_packets,(int)coal->rx_time_us,(int)vf->tx_ctx_id,(int)coal->tx_packets,(int)coal->tx_time_us);
  
#line 1232 
  netdev_err((struct net_device const *)adapter->netdev,"Received: ctx_id 0x%x packets 0x%x time_us 0x%x type 0x%x\n",(int)ctx_id,(int)pkts,(int)time,(int)type);
  
#line 1235 
  __retres = err;
  return_label: 
#line 1235 
                return __retres;
}


#line 1238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_intrcoal_cmd(struct qlcnic_bc_trans *tran, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  int err;
  
#line 1241 
  struct qlcnic_vf_info *vf = tran->vf;
  
#line 1242 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 1245 
  err = qlcnic_sriov_validate_cfg_intrcoal(adapter,vf,cmd);
  
#line 1246 
  if (err != 0) {
    
#line 1247 
    *(cmd->rsp.arg) |= 201326592U;
    
#line 1248 
    __retres = err;
    
#line 1248 
    goto return_label;
  }
  else ;
  
#line 1251 
  err = qlcnic_issue_cmd(adapter,cmd);
  
#line 1252 
  __retres = err;
  return_label: 
#line 1252 
                return __retres;
}


#line 1255  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_cfg_macvlan(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  u8 op;
  u8 new_op;
  
#line 1259 
  struct qlcnic_vport *vp = vf->vp;
  
#line 1262 
  if ((*(cmd->req.arg + 1U) & 256U) == 0U) {
    
#line 1263 
    __retres = -22;
    
#line 1263 
    goto return_label;
  }
  else ;
  
#line 1265 
  *(cmd->req.arg + 1U) |= (unsigned int)((int)(vf->vp)->handle << 16);
  
#line 1266 
  *(cmd->req.arg + 1U) |= 2147483648U;
  
#line 1268 
  if ((unsigned int)vp->vlan_mode == 1U) {
    
#line 1269 
    op = (unsigned char)((unsigned int)((unsigned char)*(cmd->req.arg + 1U)) & 7U);
    
#line 1270 
    *(cmd->req.arg + 1U) &= 4294967288U;
    
#line 1271 
    if ((unsigned int)op == 1U || (unsigned int)op == 3U) 
#line 1271 
                                                          new_op = (unsigned char)3U; else 
                                                                    
#line 1271 
                                                                    new_op = (unsigned char)4U;
    
#line 1273 
    *(cmd->req.arg + 3U) |= (unsigned int)((int)vp->pvid << 16);
    
#line 1274 
    *(cmd->req.arg + 1U) |= (unsigned int)new_op;
  }
  else ;
  
#line 1277 
  __retres = 0;
  return_label: 
#line 1277 
                return __retres;
}


#line 1280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_macvlan_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  int err;
  
#line 1283 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 1284 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 1287 
  err = qlcnic_sriov_validate_cfg_macvlan(adapter,vf,cmd);
  
#line 1288 
  if (err != 0) {
    
#line 1289 
    *(cmd->rsp.arg) |= 201326592U;
    
#line 1290 
    __retres = err;
    
#line 1290 
    goto return_label;
  }
  else ;
  
#line 1293 
  err = qlcnic_issue_cmd(adapter,cmd);
  
#line 1294 
  __retres = err;
  return_label: 
#line 1294 
                return __retres;
}


#line 1297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_validate_linkevent(struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  
#line 1300 
  if (*(cmd->req.arg + 1U) >> 16 != (unsigned int)vf->rx_ctx_id) {
    
#line 1301 
    __retres = -22;
    
#line 1301 
    goto return_label;
  }
  else ;
  
#line 1303 
  __retres = 0;
  return_label: 
#line 1303 
                return __retres;
}


#line 1306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_linkevent_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  int err;
  
#line 1309 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 1310 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 1313 
  err = qlcnic_sriov_validate_linkevent(vf,cmd);
  
#line 1314 
  if (err != 0) {
    
#line 1315 
    *(cmd->rsp.arg) |= 201326592U;
    
#line 1316 
    __retres = err;
    
#line 1316 
    goto return_label;
  }
  else ;
  
#line 1319 
  err = qlcnic_issue_cmd(adapter,cmd);
  
#line 1320 
  __retres = err;
  return_label: 
#line 1320 
                return __retres;
}


#line 1323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_promisc_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  int err;
  
#line 1326 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 1327 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 1330 
  *(cmd->req.arg + 1U) |= (unsigned int)((int)(vf->vp)->handle << 16);
  
#line 1331 
  *(cmd->req.arg + 1U) |= 2147483648U;
  
#line 1332 
  err = qlcnic_issue_cmd(adapter,cmd);
  
#line 1333 
  return err;
}


#line 1336  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_get_acl_cmd(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  u8 cmd_op;
  struct qlcnic_adapter *adapter;
  struct qlcnic_sriov *sriov;
  bool tmp;
  
#line 1339 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 1340 
  struct qlcnic_vport *vp = vf->vp;
  
#line 1341 
  u8 mode = vp->vlan_mode;
  
#line 1345 
  adapter = vf->adapter;
  
#line 1346 
  sriov = (adapter->ahw)->sriov;
  
#line 1348 
  cmd_op = (trans->req_hdr)->cmd_op;
  
#line 1349 
  *(cmd->rsp.arg) |= 33554432U;
  
#line 1354 
  tmp = qlcnic_84xx_check(adapter);
  
#line 1354 
  if ((int)tmp != 0) {
    
#line 1354 
    if ((unsigned int)mode == 1U) {
      
#line 1355 
      __retres = 0;
      
#line 1355 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1357 
  switch ((int)mode) {
    case 2: 
#line 1358 
    ;
    
#line 1359 
    *(cmd->rsp.arg + 1U) = (unsigned int)((int)mode | 256);
    
#line 1360 
    *(cmd->rsp.arg + 2U) = (unsigned int)((int)sriov->num_allowed_vlans << 16);
    
#line 1361 
    goto ldv_54418;
    case 1: 
#line 1362 
    ;
    
#line 1363 
    *(cmd->rsp.arg + 1U) = (unsigned int)(((int)mode | 256) | ((int)vp->pvid << 16));
    
#line 1364 
    goto ldv_54418;
  }
  ldv_54418: 
#line 1367 
  ;
  
#line 1367 
  __retres = 0;
  return_label: 
#line 1367 
                return __retres;
}


#line 1370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_del_guest_vlan(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  u16 vlan;
  int tmp_0;
  bool tmp;
  bool tmp_1;
  
#line 1374 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 1377 
  tmp = qlcnic_sriov_check_any_vlan(vf);
  
#line 1377 
  if (tmp) 
#line 1377 
           tmp_0 = 0; else 
#line 1377 
                           tmp_0 = 1;
  
#line 1377 
  if (tmp_0) {
    
#line 1378 
    __retres = -22;
    
#line 1378 
    goto return_label;
  }
  else ;
  
#line 1380 
  vlan = (unsigned short)(*(cmd->req.arg + 1U) >> 16);
  
#line 1381 
  if ((unsigned int)vf->rx_ctx_id == 0U) {
    
#line 1382 
    qlcnic_sriov_del_vlan_id(sriov,vf,(unsigned short)((int)vlan));
    
#line 1383 
    __retres = 0;
    
#line 1383 
    goto return_label;
  }
  else ;
  
#line 1386 
  qlcnic_sriov_cfg_vf_def_mac(adapter,vf,(unsigned short)((int)vlan),(unsigned char)2);
  
#line 1387 
  qlcnic_sriov_del_vlan_id(sriov,vf,(unsigned short)((int)vlan));
  
#line 1389 
  tmp_1 = qlcnic_83xx_pf_check(adapter);
  
#line 1389 
  if ((int)tmp_1 != 0) 
#line 1390 
                       qlcnic_sriov_cfg_vf_def_mac(adapter,vf,(unsigned short)0,(unsigned char)1); else ;
  
#line 1392 
  __retres = 0;
  return_label: 
#line 1392 
                return __retres;
}


#line 1395  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_add_guest_vlan(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  u16 vlan;
  bool tmp;
  bool tmp_1;
  
#line 1399 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 1400 
  int err = -5;
  
#line 1403 
  tmp = qlcnic_83xx_pf_check(adapter);
  
#line 1403 
  if ((int)tmp != 0) {
    bool tmp_0;
    
#line 1403 
    tmp_0 = qlcnic_sriov_check_any_vlan(vf);
    
#line 1403 
    if ((int)tmp_0 != 0) {
      
#line 1404 
      __retres = err;
      
#line 1404 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1406 
  vlan = (unsigned short)(*(cmd->req.arg + 1U) >> 16);
  
#line 1408 
  if ((unsigned int)vf->rx_ctx_id == 0U) {
    
#line 1409 
    qlcnic_sriov_add_vlan_id(sriov,vf,(unsigned short)((int)vlan));
    
#line 1410 
    __retres = 0;
    
#line 1410 
    goto return_label;
  }
  else ;
  
#line 1413 
  tmp_1 = qlcnic_83xx_pf_check(adapter);
  
#line 1413 
  if ((int)tmp_1 != 0) {
    
#line 1414 
    err = qlcnic_sriov_cfg_vf_def_mac(adapter,vf,(unsigned short)0,(unsigned char)2);
    
#line 1416 
    if (err != 0) {
      
#line 1417 
      __retres = err;
      
#line 1417 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1420 
  err = qlcnic_sriov_cfg_vf_def_mac(adapter,vf,(unsigned short)((int)vlan),(unsigned char)1);
  
#line 1422 
  if (err != 0) {
    bool tmp_2;
    
#line 1423 
    tmp_2 = qlcnic_83xx_pf_check(adapter);
    
#line 1423 
    if ((int)tmp_2 != 0) 
#line 1424 
                         qlcnic_sriov_cfg_vf_def_mac(adapter,vf,(unsigned short)0,(unsigned char)1); else ;
    
#line 1426 
    __retres = err;
    
#line 1426 
    goto return_label;
  }
  else ;
  
#line 1429 
  qlcnic_sriov_add_vlan_id(sriov,vf,(unsigned short)((int)vlan));
  
#line 1430 
  __retres = err;
  return_label: 
#line 1430 
                return __retres;
}


#line 1433  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_pf_cfg_guest_vlan_cmd(struct qlcnic_bc_trans *tran, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  u8 op;
  int tmp;
  
#line 1436 
  struct qlcnic_vf_info *vf = tran->vf;
  
#line 1437 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 1438 
  struct qlcnic_vport *vp = vf->vp;
  
#line 1439 
  int err = -5;
  
#line 1442 
  if ((unsigned int)vp->vlan_mode != 2U) {
    
#line 1443 
    *(cmd->rsp.arg) |= 67108864U;
    
#line 1444 
    __retres = err;
    
#line 1444 
    goto return_label;
  }
  else ;
  
#line 1447 
  op = (unsigned char)((unsigned int)((unsigned char)*(cmd->req.arg + 1U)) & 15U);
  
#line 1449 
  if ((unsigned int)op != 0U) 
#line 1450 
                              err = qlcnic_sriov_pf_add_guest_vlan(adapter,vf,cmd); else 
                                                                    
#line 1452 
                                                                    err = qlcnic_sriov_pf_del_guest_vlan(adapter,vf,cmd);
  
#line 1454 
  if (err != 0) 
#line 1454 
                tmp = 67108864; else 
#line 1454 
                                     tmp = 33554432;
  
#line 1454 
  *(cmd->rsp.arg) |= (unsigned int)tmp;
  
#line 1455 
  __retres = err;
  return_label: 
#line 1455 
                return __retres;
}


#line 1458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int const qlcnic_pf_passthru_supp_cmds[5U] = {15, 103, 104, 96, 97};

#line 1466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static struct qlcnic_sriov_cmd_handler const qlcnic_pf_bc_cmd_hdlr[4U] = {{.fn = & qlcnic_sriov_pf_channel_cfg_cmd}, {.fn = & qlcnic_sriov_pf_channel_cfg_cmd}, {.fn = & qlcnic_sriov_pf_get_acl_cmd}, {.fn = & qlcnic_sriov_pf_cfg_guest_vlan_cmd}};

#line 1473  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static struct qlcnic_sriov_fw_cmd_handler const qlcnic_pf_fw_cmd_hdlr[15U] = {{.cmd = 7U, .fn = & qlcnic_sriov_pf_create_rx_ctx_cmd}, {.cmd = 9U, .fn = & qlcnic_sriov_pf_create_tx_ctx_cmd}, {.cmd = 31U, .fn = & qlcnic_sriov_pf_mac_address_cmd}, {.cmd = 8U, .fn = & qlcnic_sriov_pf_del_rx_ctx_cmd}, {.cmd = 10U, .fn = & qlcnic_sriov_pf_del_tx_ctx_cmd}, {.cmd = 74U, .fn = & qlcnic_sriov_pf_cfg_lro_cmd}, {.cmd = 1U, .fn = & qlcnic_sriov_pf_cfg_ip_cmd}, {.cmd = 2U, .fn = & qlcnic_sriov_pf_cfg_intrpt_cmd}, {.cmd = 18U, .fn = & qlcnic_sriov_pf_set_mtu_cmd}, {.cmd = 33U, .fn = & qlcnic_sriov_pf_get_nic_info_cmd}, {.cmd = 65U, .fn = & qlcnic_sriov_pf_cfg_rss_cmd}, {.cmd = 67U, .fn = & qlcnic_sriov_pf_cfg_intrcoal_cmd}, {.cmd = 69U, .fn = & qlcnic_sriov_pf_cfg_macvlan_cmd}, {.cmd = 72U, .fn = & qlcnic_sriov_pf_linkevent_cmd}, {.cmd = 73U, .fn = & qlcnic_sriov_pf_cfg_promisc_cmd}};

#line 1491  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_sriov_pf_process_bc_cmd(struct qlcnic_adapter *adapter, struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  u8 size;
  u8 cmd_op;
  
#line 1497 
  cmd_op = (trans->req_hdr)->cmd_op;
  
#line 1499 
  if ((unsigned int)*((unsigned char *)trans->req_hdr + 1UL) != 0U) {
    
#line 1500 
    size = (unsigned char)4U;
    
#line 1501 
    if ((int)cmd_op < (int)size) {
      
#line 1502 
      (*(qlcnic_pf_bc_cmd_hdlr[(int)cmd_op].fn))(trans,cmd);
      
#line 1503 
      goto return_label;
    }
    else ;
  }
  else {
    int i;
    
#line 1507 
    size = (unsigned char)15U;
    
#line 1508 
    i = 0;
    
#line 1508 
    goto ldv_54462;
    ldv_54461: 
#line 1509 
    ;
    
#line 1509 
    if ((unsigned int)cmd_op == qlcnic_pf_fw_cmd_hdlr[i].cmd) {
      
#line 1510 
      (*(qlcnic_pf_fw_cmd_hdlr[i].fn))(trans,cmd);
      
#line 1511 
      goto return_label;
    }
    else ;
    
#line 1508 
    i += 1;
    ldv_54462: 
#line 1509 
    ;
    
#line 1508 
    if ((int)size > i) 
#line 1510 
                       goto ldv_54461; else 
#line 1513 
                                            goto ldv_54463;
    ldv_54463: 
#line 1514 
    ;
    
#line 1515 
    size = (unsigned char)5U;
    
#line 1516 
    i = 0;
    
#line 1516 
    goto ldv_54468;
    ldv_54467: 
#line 1517 
    ;
    
#line 1517 
    if ((int)cmd_op == qlcnic_pf_passthru_supp_cmds[i]) {
      
#line 1518 
      qlcnic_issue_cmd(adapter,cmd);
      
#line 1519 
      goto return_label;
    }
    else ;
    
#line 1516 
    i += 1;
    ldv_54468: 
#line 1517 
    ;
    
#line 1516 
    if ((int)size > i) 
#line 1518 
                       goto ldv_54467; else 
#line 1521 
                                            goto ldv_54469;
    ldv_54469: 
#line 1522 
    ;
  }
  
#line 1524 
  *(cmd->rsp.arg) |= 301989888U;
  return_label: 
#line 1525 
                return;
}


#line 1527  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_create_rx_ctx(struct qlcnic_adapter *adapter, u32 *int_id)
{
  u16 vpid;
  int tmp;
  
#line 1532 
  tmp = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)(adapter->ahw)->pci_func));
  
#line 1532 
  vpid = (unsigned short)tmp;
  
#line 1534 
  *int_id |= (unsigned int)vpid;
  
#line 1535 
  return;
}


#line 1537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_del_rx_ctx(struct qlcnic_adapter *adapter, u32 *int_id)
{
  u16 vpid;
  int tmp;
  
#line 1542 
  tmp = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)(adapter->ahw)->pci_func));
  
#line 1542 
  vpid = (unsigned short)tmp;
  
#line 1544 
  *int_id |= (unsigned int)((int)vpid << 16);
  
#line 1545 
  return;
}


#line 1547  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_create_tx_ctx(struct qlcnic_adapter *adapter, u32 *int_id)
{
  int vpid;
  
#line 1552 
  vpid = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)(adapter->ahw)->pci_func));
  
#line 1554 
  *int_id |= (unsigned int)(vpid << 16);
  
#line 1555 
  return;
}


#line 1557  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_del_tx_ctx(struct qlcnic_adapter *adapter, u32 *int_id)
{
  u16 vpid;
  int tmp;
  
#line 1562 
  tmp = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)(adapter->ahw)->pci_func));
  
#line 1562 
  vpid = (unsigned short)tmp;
  
#line 1564 
  *int_id |= (unsigned int)((int)vpid << 16);
  
#line 1565 
  return;
}


#line 1567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_promisc(struct qlcnic_adapter *adapter, u32 *int_id)
{
  u16 vpid;
  int tmp;
  
#line 1572 
  tmp = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)(adapter->ahw)->pci_func));
  
#line 1572 
  vpid = (unsigned short)tmp;
  
#line 1574 
  *int_id = (*int_id | (unsigned int)((int)vpid << 16)) | 2147483648U;
  
#line 1575 
  return;
}


#line 1577  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_ipaddr(struct qlcnic_adapter *adapter, u32 *int_id)
{
  u16 vpid;
  int tmp;
  
#line 1582 
  tmp = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)(adapter->ahw)->pci_func));
  
#line 1582 
  vpid = (unsigned short)tmp;
  
#line 1584 
  *int_id = (*int_id | (unsigned int)((int)vpid << 16)) | 2147483648U;
  
#line 1585 
  return;
}


#line 1587  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_pf_set_interface_id_macaddr(struct qlcnic_adapter *adapter, u32 *int_id)
{
  u16 vpid;
  int tmp;
  
#line 1592 
  tmp = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)(adapter->ahw)->pci_func));
  
#line 1592 
  vpid = (unsigned short)tmp;
  
#line 1594 
  *int_id = (*int_id | (unsigned int)((int)vpid << 16)) | 2147483648U;
  
#line 1595 
  return;
}


#line 1597  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_del_rx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf)
{
  struct qlcnic_cmd_args cmd;
  int vpid;
  int tmp;
  
#line 1603 
  if ((unsigned int)vf->rx_ctx_id == 0U) 
#line 1604 
                                         goto return_label; else ;
  
#line 1606 
  tmp = qlcnic_alloc_mbx_args(& cmd,adapter,8U);
  
#line 1606 
  if (tmp != 0) 
#line 1607 
                goto return_label; else ;
  
#line 1609 
  vpid = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)vf->pci_func));
  
#line 1610 
  if (vpid >= 0) {
    int tmp_0;
    
#line 1611 
    *(cmd.req.arg + 1U) = (unsigned int)((int)vf->rx_ctx_id | (vpid << 16));
    
#line 1612 
    tmp_0 = qlcnic_issue_cmd(adapter,& cmd);
    
#line 1612 
    if (tmp_0 != 0) 
#line 1613 
                    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to delete Tx ctx in firmware for func 0x%x\n",(int)vf->pci_func); else 
                                                                    
#line 1617 
                                                                    vf->rx_ctx_id = (unsigned short)0U;
  }
  else ;
  
#line 1620 
  qlcnic_free_mbx_args(& cmd);
  return_label: 
#line 1621 
                return;
}


#line 1623  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_del_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_vf_info *vf)
{
  struct qlcnic_cmd_args cmd;
  int vpid;
  int tmp;
  
#line 1629 
  if ((unsigned int)vf->tx_ctx_id == 0U) 
#line 1630 
                                         goto return_label; else ;
  
#line 1632 
  tmp = qlcnic_alloc_mbx_args(& cmd,adapter,10U);
  
#line 1632 
  if (tmp != 0) 
#line 1633 
                goto return_label; else ;
  
#line 1635 
  vpid = qlcnic_sriov_pf_get_vport_handle(adapter,(unsigned char)((int)vf->pci_func));
  
#line 1636 
  if (vpid >= 0) {
    int tmp_0;
    
#line 1637 
    *(cmd.req.arg + 1U) |= (unsigned int)((int)vf->tx_ctx_id | (vpid << 16));
    
#line 1638 
    tmp_0 = qlcnic_issue_cmd(adapter,& cmd);
    
#line 1638 
    if (tmp_0 != 0) 
#line 1639 
                    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to delete Tx ctx in firmware for func 0x%x\n",(int)vf->pci_func); else 
                                                                    
#line 1643 
                                                                    vf->tx_ctx_id = (unsigned short)0U;
  }
  else ;
  
#line 1646 
  qlcnic_free_mbx_args(& cmd);
  return_label: 
#line 1647 
                return;
}


#line 1649  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static int qlcnic_sriov_add_act_list_irqsave(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, struct qlcnic_bc_trans *trans)
{
  int __retres;
  unsigned long flag;
  
#line 1653 
  struct qlcnic_trans_list *t_list = & vf->rcv_act;
  
#line 1656 
  ldv___ldv_spin_lock_77(& t_list->lock);
  
#line 1658 
  __qlcnic_sriov_add_act_list(sriov,vf,trans);
  
#line 1660 
  ldv_spin_unlock_irqrestore_78(& t_list->lock,flag);
  
#line 1661 
  __retres = 0;
  
#line 1661 
  return __retres;
}


#line 1664  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void __qlcnic_sriov_process_flr(struct qlcnic_vf_info *vf)
{
  int tmp;
  int tmp_0;
  
#line 1666 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 1668 
  qlcnic_sriov_cleanup_list(& vf->rcv_pend);
  
#line 1669 
  cancel_work_sync(& vf->trans_work);
  
#line 1670 
  qlcnic_sriov_cleanup_list(& vf->rcv_act);
  
#line 1672 
  tmp = constant_test_bit(5L,(unsigned long const volatile *)(& vf->state));
  
#line 1672 
  if (tmp != 0) {
    
#line 1673 
    qlcnic_sriov_del_tx_ctx(adapter,vf);
    
#line 1674 
    qlcnic_sriov_del_rx_ctx(adapter,vf);
  }
  else ;
  
#line 1677 
  qlcnic_sriov_pf_config_vport(adapter,(unsigned char)0,(unsigned short)((int)vf->pci_func));
  
#line 1679 
  set_bit(4L,(unsigned long volatile *)(& vf->state));
  
#line 1680 
  tmp_0 = constant_test_bit(5L,(unsigned long const volatile *)(& vf->state));
  
#line 1680 
  if (tmp_0 != 0) {
    
#line 1681 
    qlcnic_sriov_add_act_list_irqsave((adapter->ahw)->sriov,vf,vf->flr_trans);
    
#line 1683 
    set_bit(5L,(unsigned long volatile *)(& vf->state));
    
#line 1684 
    vf->flr_trans = (struct qlcnic_bc_trans *)0;
  }
  else ;
  
#line 1686 
  return;
}


#line 1688  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_pf_process_flr(struct work_struct *work)
{
  struct qlcnic_vf_info *vf;
  struct qlcnic_vf_info *tmp;
  {
    
#line 1692 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1692 
    tmp = (struct qlcnic_vf_info *)__mptr + 18446744073709551408U;
  }
  
#line 1692 
  vf = tmp;
  
#line 1693 
  __qlcnic_sriov_process_flr(vf);
  
#line 1694 
  return;
}


#line 1697  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_schedule_flr(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, void (*func)(struct work_struct *))
{
  int tmp;
  
#line 1701 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& (vf->adapter)->state));
  
#line 1701 
  if (tmp != 0) 
#line 1702 
                goto return_label; else ;
  {
    struct lock_class_key __key;
    
#line 1704 
    __init_work(& vf->flr_work,0);
    
#line 1704 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 1704 
    vf->flr_work.data = __constr_expr_37;
    
#line 1704 
    lockdep_init_map(& vf->flr_work.lockdep_map,"(&vf->flr_work)",& __key,0);
    
#line 1704 
    INIT_LIST_HEAD(& vf->flr_work.entry);
    
#line 1704 
    vf->flr_work.func = func;
  }
  
#line 1705 
  ldv_queue_work_79(sriov->bc.bc_flr_wq,& vf->flr_work);
  return_label: 
#line 1706 
                return;
}


#line 1708  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static void qlcnic_sriov_handle_soft_flr(struct qlcnic_adapter *adapter, struct qlcnic_bc_trans *trans, struct qlcnic_vf_info *vf)
{
  
#line 1712 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 1714 
  set_bit(4L,(unsigned long volatile *)(& vf->state));
  
#line 1715 
  set_bit(3L,(unsigned long volatile *)(& vf->state));
  
#line 1716 
  set_bit(5L,(unsigned long volatile *)(& vf->state));
  
#line 1717 
  vf->flr_trans = trans;
  
#line 1718 
  qlcnic_sriov_schedule_flr(sriov,vf,& qlcnic_sriov_pf_process_flr);
  
#line 1719 
  netdev_info((struct net_device const *)adapter->netdev,"Software FLR for PCI func %d\n",(int)vf->pci_func);
  
#line 1721 
  return;
}


#line 1723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
bool qlcnic_sriov_soft_flr_check(struct qlcnic_adapter *adapter, struct qlcnic_bc_trans *trans, struct qlcnic_vf_info *vf)
{
  bool __retres;
  
#line 1727 
  struct qlcnic_bc_hdr *hdr = trans->req_hdr;
  
#line 1729 
  if ((unsigned int)hdr->cmd_op == 0U && (unsigned int)*((unsigned char *)hdr + 1UL) != 0U) {
    int tmp;
    
#line 1730 
    tmp = constant_test_bit(3L,(unsigned long const volatile *)(& vf->state));
    
#line 1730 
    if (tmp != 0) {
      
#line 1732 
      qlcnic_sriov_handle_soft_flr(adapter,trans,vf);
      
#line 1733 
      __retres = (_Bool)1;
      
#line 1733 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1736 
  __retres = (_Bool)0;
  return_label: 
#line 1736 
                return __retres;
}


#line 1739  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_sriov_pf_handle_flr(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf)
{
  int tmp;
  int tmp_0;
  
#line 1742 
  struct net_device *dev = (vf->adapter)->netdev;
  
#line 1743 
  struct qlcnic_vport *vp = vf->vp;
  
#line 1745 
  tmp = test_and_set_bit(3L,(unsigned long volatile *)(& vf->state));
  
#line 1745 
  if (tmp == 0) {
    
#line 1746 
    set_bit(4L,(unsigned long volatile *)(& vf->state));
    
#line 1747 
    goto return_label;
  }
  else ;
  
#line 1750 
  tmp_0 = test_and_set_bit(4L,(unsigned long volatile *)(& vf->state));
  
#line 1750 
  if (tmp_0 != 0) {
    
#line 1751 
    netdev_info((struct net_device const *)dev,"FLR for PCI func %d in progress\n",(int)vf->pci_func);
    
#line 1753 
    goto return_label;
  }
  else ;
  
#line 1756 
  if ((unsigned int)vp->vlan_mode == 2U) 
#line 1757 
                                         memset((void *)vf->sriov_vlans,0,(unsigned long)sriov->num_allowed_vlans * 2UL); else ;
  
#line 1760 
  qlcnic_sriov_schedule_flr(sriov,vf,& qlcnic_sriov_pf_process_flr);
  
#line 1761 
  netdev_info((struct net_device const *)dev,"FLR received for PCI func %d\n",(int)vf->pci_func);
  return_label: 
#line 1762 
                return;
}


#line 1764  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
void qlcnic_sriov_pf_reset(struct qlcnic_adapter *adapter)
{
  struct qlcnic_vf_info *vf;
  int i;
  
#line 1766 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1767 
  struct qlcnic_sriov *sriov = ahw->sriov;
  
#line 1769 
  u16 num_vfs = (unsigned short)sriov->num_vfs;
  
#line 1772 
  i = 0;
  
#line 1772 
  goto ldv_54568;
  ldv_54567: 
#line 1773 
  ;
  
#line 1773 
  vf = sriov->vf_info + i;
  
#line 1774 
  vf->rx_ctx_id = (unsigned short)0U;
  
#line 1775 
  vf->tx_ctx_id = (unsigned short)0U;
  
#line 1776 
  cancel_work_sync(& vf->flr_work);
  
#line 1777 
  __qlcnic_sriov_process_flr(vf);
  
#line 1778 
  set_bit(3L,(unsigned long volatile *)(& vf->state));
  
#line 1772 
  i += 1;
  ldv_54568: 
#line 1773 
  ;
  
#line 1772 
  if ((int)num_vfs > i) 
#line 1774 
                        goto ldv_54567; else 
#line 1777 
                                             goto ldv_54569;
  ldv_54569: 
#line 1778 
  ;
  
#line 1781 
  qlcnic_sriov_pf_reset_vport_handle(adapter,(unsigned char)((int)ahw->pci_func));
  
#line 1782 
  writel((unsigned int)(((int)ahw->num_msix + -1) << 8),(void volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 8U)));
  
#line 1783 
  return;
}


#line 1785  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_pf_reinit(struct qlcnic_adapter *adapter)
{
  int __retres;
  int err;
  int tmp_0;
  bool tmp;
  
#line 1787 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1790 
  tmp = qlcnic_sriov_enable_check(adapter);
  
#line 1790 
  if (tmp) 
#line 1790 
           tmp_0 = 0; else 
#line 1790 
                           tmp_0 = 1;
  
#line 1790 
  if (tmp_0) {
    
#line 1791 
    __retres = 0;
    
#line 1791 
    goto return_label;
  }
  else ;
  
#line 1793 
  ahw->op_mode = (unsigned short)3U;
  
#line 1795 
  err = qlcnic_sriov_pf_init(adapter);
  
#line 1796 
  if (err != 0) {
    
#line 1797 
    __retres = err;
    
#line 1797 
    goto return_label;
  }
  else ;
  
#line 1799 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: op_mode %d\n","qlcnic_sriov_pf_reinit",(int)ahw->op_mode);
  
#line 1801 
  __retres = err;
  return_label: 
#line 1801 
                return __retres;
}


#line 1804  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_set_vf_mac(struct net_device *netdev, int vf, u8 *mac)
{
  int __retres;
  int i;
  int num_vfs;
  struct qlcnic_vf_info *vf_info;
  u8 *curr_mac;
  int tmp_1;
  bool tmp_0;
  int tmp_3;
  bool tmp_2;
  bool tmp_4;
  bool tmp_5;
  int tmp_6;
  
#line 1806 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1807 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 1812 
  tmp_0 = qlcnic_sriov_pf_check(adapter);
  
#line 1812 
  if (tmp_0) 
#line 1812 
             tmp_1 = 0; else 
#line 1812 
                             tmp_1 = 1;
  
#line 1812 
  if (tmp_1) {
    
#line 1813 
    __retres = -95;
    
#line 1813 
    goto return_label;
  }
  else ;
  
#line 1815 
  num_vfs = (int)sriov->num_vfs;
  
#line 1817 
  tmp_2 = is_valid_ether_addr((u8 const *)mac);
  
#line 1817 
  if (tmp_2) 
#line 1817 
             tmp_3 = 0; else 
#line 1817 
                             tmp_3 = 1;
  
#line 1817 
  if (tmp_3) {
    
#line 1818 
    __retres = -22;
    
#line 1818 
    goto return_label;
  }
  else 
    
#line 1817 
    if (vf >= num_vfs) {
      
#line 1818 
      __retres = -22;
      
#line 1818 
      goto return_label;
    }
    else ;
  
#line 1820 
  tmp_4 = ether_addr_equal((u8 const *)(& adapter->mac_addr),(u8 const *)mac);
  
#line 1820 
  if ((int)tmp_4 != 0) {
    
#line 1821 
    netdev_err((struct net_device const *)netdev,"MAC address is already in use by the PF\n");
    
#line 1822 
    __retres = -22;
    
#line 1822 
    goto return_label;
  }
  else ;
  
#line 1825 
  i = 0;
  
#line 1825 
  goto ldv_54588;
  ldv_54587: 
#line 1826 
  ;
  
#line 1826 
  vf_info = sriov->vf_info + i;
  
#line 1827 
  tmp_5 = ether_addr_equal((u8 const *)(& (vf_info->vp)->mac),(u8 const *)mac);
  
#line 1827 
  if ((int)tmp_5 != 0) {
    
#line 1828 
    netdev_err((struct net_device const *)netdev,"MAC address is already in use by VF %d\n",i);
    
#line 1831 
    __retres = -22;
    
#line 1831 
    goto return_label;
  }
  else ;
  
#line 1825 
  i += 1;
  ldv_54588: 
#line 1826 
  ;
  
#line 1825 
  if (i < num_vfs) 
#line 1827 
                   goto ldv_54587; else 
#line 1830 
                                        goto ldv_54589;
  ldv_54589: 
#line 1831 
  ;
  
#line 1835 
  vf_info = sriov->vf_info + vf;
  
#line 1836 
  curr_mac = (u8 *)(& (vf_info->vp)->mac);
  
#line 1838 
  tmp_6 = constant_test_bit(3L,(unsigned long const volatile *)(& vf_info->state));
  
#line 1838 
  if (tmp_6 != 0) {
    
#line 1839 
    netdev_err((struct net_device const *)netdev,"MAC address change failed for VF %d, as VF driver is loaded. Please unload VF driver and retry the operation\n",vf);
    
#line 1842 
    __retres = -95;
    
#line 1842 
    goto return_label;
  }
  else ;
  
#line 1845 
  memcpy((void *)curr_mac,(void const *)mac,(unsigned long)netdev->addr_len);
  
#line 1846 
  netdev_info((struct net_device const *)netdev,"MAC Address %pM  is configured for VF %d\n",mac,vf);
  
#line 1848 
  __retres = 0;
  return_label: 
#line 1848 
                return __retres;
}


#line 1851  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_set_vf_tx_rate(struct net_device *netdev, int vf, int min_tx_rate, int max_tx_rate)
{
  int __retres;
  struct qlcnic_vf_info *vf_info;
  struct qlcnic_info nic_info;
  struct qlcnic_vport *vp;
  u16 vpid;
  int tmp_1;
  bool tmp_0;
  int tmp_4;
  
#line 1854 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1855 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 1861 
  tmp_0 = qlcnic_sriov_pf_check(adapter);
  
#line 1861 
  if (tmp_0) 
#line 1861 
             tmp_1 = 0; else 
#line 1861 
                             tmp_1 = 1;
  
#line 1861 
  if (tmp_1) {
    
#line 1862 
    __retres = -95;
    
#line 1862 
    goto return_label;
  }
  else ;
  
#line 1864 
  if ((int)sriov->num_vfs <= vf) {
    
#line 1865 
    __retres = -22;
    
#line 1865 
    goto return_label;
  }
  else ;
  
#line 1867 
  vf_info = sriov->vf_info + vf;
  
#line 1868 
  vp = vf_info->vp;
  
#line 1869 
  vpid = vp->handle;
  
#line 1871 
  if (min_tx_rate == 0) 
#line 1872 
                        min_tx_rate = 100; else ;
  
#line 1874 
  if (max_tx_rate != 0 && (max_tx_rate > 9999 || max_tx_rate < min_tx_rate)) {
    
#line 1876 
    netdev_err((struct net_device const *)netdev,"Invalid max Tx rate, allowed range is [%d - %d]",min_tx_rate,9999);
    
#line 1879 
    __retres = -22;
    
#line 1879 
    goto return_label;
  }
  else ;
  
#line 1882 
  if (max_tx_rate == 0) 
#line 1883 
                        max_tx_rate = 10000; else ;
  
#line 1885 
  if (min_tx_rate != 0 && (min_tx_rate > max_tx_rate || min_tx_rate <= 99)) {
    
#line 1887 
    netdev_err((struct net_device const *)netdev,"Invalid min Tx rate, allowed range is [%d - %d]",100,max_tx_rate);
    
#line 1890 
    __retres = -22;
    
#line 1890 
    goto return_label;
  }
  else ;
  
#line 1893 
  tmp_4 = constant_test_bit(3L,(unsigned long const volatile *)(& vf_info->state));
  
#line 1893 
  if (tmp_4 != 0) {
    int tmp_2;
    int tmp_3;
    
#line 1894 
    tmp_2 = qlcnic_sriov_get_vf_vport_info(adapter,& nic_info,(unsigned short)((int)vpid));
    
#line 1894 
    if (tmp_2 != 0) {
      
#line 1895 
      __retres = -5;
      
#line 1895 
      goto return_label;
    }
    else ;
    
#line 1897 
    nic_info.max_tx_bw = (unsigned short)(max_tx_rate / 100);
    
#line 1898 
    nic_info.min_tx_bw = (unsigned short)(min_tx_rate / 100);
    
#line 1899 
    nic_info.bit_offsets = (unsigned short)1U;
    
#line 1901 
    tmp_3 = qlcnic_sriov_pf_set_vport_info(adapter,& nic_info,(unsigned short)((int)vpid));
    
#line 1901 
    if (tmp_3 != 0) {
      
#line 1902 
      __retres = -5;
      
#line 1902 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1905 
  vp->max_tx_bw = (unsigned short)(max_tx_rate / 100);
  
#line 1906 
  netdev_info((struct net_device const *)netdev,"Setting Max Tx rate %d (Mbps), %d %% of PF bandwidth, for VF %d\n",max_tx_rate,(int)vp->max_tx_bw,vf);
  
#line 1909 
  vp->min_tx_bw = (unsigned short)(min_tx_rate / 100);
  
#line 1910 
  netdev_info((struct net_device const *)netdev,"Setting Min Tx rate %d (Mbps), %d %% of PF bandwidth, for VF %d\n",min_tx_rate,(int)vp->min_tx_bw,vf);
  
#line 1913 
  __retres = 0;
  return_label: 
#line 1913 
                return __retres;
}


#line 1916  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_set_vf_vlan(struct net_device *netdev, int vf, u16 vlan, u8 qos)
{
  int __retres;
  struct qlcnic_vf_info *vf_info;
  struct qlcnic_vport *vp;
  int tmp_1;
  bool tmp_0;
  int tmp_2;
  
#line 1919 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1920 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 1924 
  tmp_0 = qlcnic_sriov_pf_check(adapter);
  
#line 1924 
  if (tmp_0) 
#line 1924 
             tmp_1 = 0; else 
#line 1924 
                             tmp_1 = 1;
  
#line 1924 
  if (tmp_1) {
    
#line 1925 
    __retres = -95;
    
#line 1925 
    goto return_label;
  }
  else ;
  
#line 1927 
  if ((int)sriov->num_vfs <= vf || (unsigned int)qos > 7U) {
    
#line 1928 
    __retres = -22;
    
#line 1928 
    goto return_label;
  }
  else ;
  
#line 1930 
  if ((unsigned int)vlan > 4095U) {
    
#line 1931 
    netdev_err((struct net_device const *)netdev,"Invalid VLAN ID, allowed range is [0 - %d]\n",4095);
    
#line 1934 
    __retres = -22;
    
#line 1934 
    goto return_label;
  }
  else ;
  
#line 1937 
  vf_info = sriov->vf_info + vf;
  
#line 1938 
  vp = vf_info->vp;
  
#line 1939 
  tmp_2 = constant_test_bit(3L,(unsigned long const volatile *)(& vf_info->state));
  
#line 1939 
  if (tmp_2 != 0) {
    
#line 1940 
    netdev_err((struct net_device const *)netdev,"VLAN change failed for VF %d, as VF driver is loaded. Please unload VF driver and retry the operation\n",vf);
    
#line 1943 
    __retres = -95;
    
#line 1943 
    goto return_label;
  }
  else ;
  
#line 1946 
  memset((void *)vf_info->sriov_vlans,0,(unsigned long)sriov->num_allowed_vlans * 2UL);
  
#line 1949 
  switch ((int)vlan) {
    case 4095: 
#line 1950 
    ;
    
#line 1951 
    vp->vlan_mode = (unsigned char)2U;
    
#line 1952 
    goto ldv_54613;
    case 0: 
#line 1953 
    ;
    
#line 1954 
    vp->vlan_mode = (unsigned char)0U;
    
#line 1955 
    vp->qos = (unsigned char)0U;
    
#line 1956 
    goto ldv_54613;
    default: 
#line 1957 
    ;
    
#line 1958 
    vp->vlan_mode = (unsigned char)1U;
    
#line 1959 
    qlcnic_sriov_add_vlan_id(sriov,vf_info,(unsigned short)((int)vlan));
    
#line 1960 
    vp->qos = qos;
    
#line 1961 
    vp->pvid = vlan;
  }
  ldv_54613: 
#line 1964 
  ;
  
#line 1964 
  netdev_info((struct net_device const *)netdev,"Setting VLAN %d, QoS %d, for VF %d\n",(int)vlan,(int)qos,vf);
  
#line 1966 
  __retres = 0;
  return_label: 
#line 1966 
                return __retres;
}


#line 1969  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
static __u32 qlcnic_sriov_get_vf_vlan(struct qlcnic_adapter *adapter, struct qlcnic_vport *vp, int vf)
{
  
#line 1972 
  __u32 vlan = 0U;
  
#line 1974 
  switch ((int)vp->vlan_mode) {
    case 1: 
#line 1975 
    ;
    
#line 1976 
    vlan = (unsigned int)vp->pvid;
    
#line 1977 
    goto ldv_54623;
    case 2: 
#line 1978 
    ;
    
#line 1979 
    vlan = 4095U;
    
#line 1980 
    goto ldv_54623;
    case 0: 
#line 1981 
    ;
    
#line 1982 
    vlan = 0U;
    
#line 1983 
    goto ldv_54623;
    default: 
#line 1984 
    ;
    
#line 1985 
    netdev_info((struct net_device const *)adapter->netdev,"Invalid VLAN mode = %d for VF %d\n",(int)vp->vlan_mode,vf);
  }
  ldv_54623: 
#line 1989 
  ;
  
#line 1989 
  return vlan;
}


#line 1992  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_get_vf_config(struct net_device *netdev, int vf, struct ifla_vf_info *ivi)
{
  int __retres;
  struct qlcnic_vport *vp;
  int tmp_1;
  bool tmp_0;
  
#line 1995 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1996 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 1999 
  tmp_0 = qlcnic_sriov_pf_check(adapter);
  
#line 1999 
  if (tmp_0) 
#line 1999 
             tmp_1 = 0; else 
#line 1999 
                             tmp_1 = 1;
  
#line 1999 
  if (tmp_1) {
    
#line 2000 
    __retres = -95;
    
#line 2000 
    goto return_label;
  }
  else ;
  
#line 2002 
  if ((int)sriov->num_vfs <= vf) {
    
#line 2003 
    __retres = -22;
    
#line 2003 
    goto return_label;
  }
  else ;
  
#line 2005 
  vp = (sriov->vf_info + vf)->vp;
  
#line 2006 
  memcpy((void *)(& ivi->mac),(void const *)(& vp->mac),6UL);
  
#line 2007 
  ivi->vlan = qlcnic_sriov_get_vf_vlan(adapter,vp,vf);
  
#line 2008 
  ivi->qos = (unsigned int)vp->qos;
  
#line 2009 
  ivi->spoofchk = (unsigned int)vp->spoofchk;
  
#line 2010 
  if ((unsigned int)vp->max_tx_bw == 100U) 
#line 2011 
                                           ivi->max_tx_rate = 0U; else 
                                                                    
#line 2013 
                                                                    ivi->max_tx_rate = (unsigned int)((int)vp->max_tx_bw * 100);
  
#line 2014 
  if ((unsigned int)vp->min_tx_bw == 1U) 
#line 2015 
                                         ivi->min_tx_rate = 0U; else 
                                                                  
#line 2017 
                                                                  ivi->min_tx_rate = (unsigned int)((int)vp->min_tx_bw * 100);
  
#line 2019 
  ivi->vf = (unsigned int)vf;
  
#line 2020 
  __retres = 0;
  return_label: 
#line 2020 
                return __retres;
}


#line 2023  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_pf.c"
int qlcnic_sriov_set_vf_spoofchk(struct net_device *netdev, int vf, bool chk)
{
  int __retres;
  struct qlcnic_vf_info *vf_info;
  struct qlcnic_vport *vp;
  int tmp_1;
  bool tmp_0;
  int tmp_2;
  
#line 2025 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2026 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 2030 
  tmp_0 = qlcnic_sriov_pf_check(adapter);
  
#line 2030 
  if (tmp_0) 
#line 2030 
             tmp_1 = 0; else 
#line 2030 
                             tmp_1 = 1;
  
#line 2030 
  if (tmp_1) {
    
#line 2031 
    __retres = -95;
    
#line 2031 
    goto return_label;
  }
  else ;
  
#line 2033 
  if ((int)sriov->num_vfs <= vf) {
    
#line 2034 
    __retres = -22;
    
#line 2034 
    goto return_label;
  }
  else ;
  
#line 2036 
  vf_info = sriov->vf_info + vf;
  
#line 2037 
  vp = vf_info->vp;
  
#line 2038 
  tmp_2 = constant_test_bit(3L,(unsigned long const volatile *)(& vf_info->state));
  
#line 2038 
  if (tmp_2 != 0) {
    
#line 2039 
    netdev_err((struct net_device const *)netdev,"Spoof check change failed for VF %d, as VF driver is loaded. Please unload VF driver and retry the operation\n",vf);
    
#line 2042 
    __retres = -95;
    
#line 2042 
    goto return_label;
  }
  else ;
  
#line 2045 
  vp->spoofchk = chk;
  
#line 2046 
  __retres = 0;
  return_label: 
#line 2046 
                return __retres;
}


#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_pf.c.aux"
_Bool ldv_emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);


#line 510  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_pf.c.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 513 
  tmp = ldv_kzalloc(size,flags);
  
#line 513 
  return tmp;
}


#line 766  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_pf.c.aux"
static void ldv_spin_lock_bh_75(spinlock_t *lock)
{
  
#line 770 
  ldv_spin_model_lock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  
#line 772 
  spin_lock_bh(lock);
  
#line 773 
  return;
}


#line 776  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_pf.c.aux"
static void ldv_spin_unlock_bh_76(spinlock_t *lock)
{
  
#line 780 
  ldv_spin_model_unlock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  
#line 782 
  spin_unlock_bh(lock);
  
#line 783 
  return;
}


#line 786  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_pf.c.aux"
static void ldv___ldv_spin_lock_77(spinlock_t *ldv_func_arg1)
{
  
#line 790 
  ldv_spin_model_lock((char *)"lock_of_qlcnic_trans_list");
  
#line 792 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 793 
  return;
}


#line 796  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_pf.c.aux"
static void ldv_spin_unlock_irqrestore_78(spinlock_t *lock, unsigned long flags)
{
  
#line 800 
  ldv_spin_model_unlock((char *)"lock_of_qlcnic_trans_list");
  
#line 802 
  spin_unlock_irqrestore(lock,flags);
  
#line 803 
  return;
}


#line 806  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_pf.c.aux"
static bool ldv_queue_work_79(struct workqueue_struct *wq, struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 810 
  tmp = ldv_emg_queue_work(wq,work);
  
#line 810 
  __retres = tmp != 0;
  
#line 810 
  return __retres;
}

unsigned short __builtin_bswap16(unsigned short);

unsigned int __builtin_bswap32(unsigned int);

void __builtin_unreachable(void);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val)
{
  __u16 tmp;
  
#line 49 
  tmp = __builtin_bswap16((unsigned short)((int)val));
  
#line 49 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u32 __fswab32(__u32 val)
{
  __u32 tmp;
  
#line 60 
  tmp = __builtin_bswap32(val);
  
#line 60 
  return tmp;
}


#line 431  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
void print_hex_dump(char const *, char const *, int, int, int, void const *, size_t, bool);


#line 409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int scnprintf(char *, size_t, char const * , ...);


#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
void __list_add(struct list_head *, struct list_head *, struct list_head *);


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  
#line 77 
  __list_add(new,head->prev,head);
  
#line 78 
  return;
}


#line 113 
void list_del(struct list_head *);


#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static int list_empty(struct list_head const *head)
{
  int __retres;
  
#line 189 
  __retres = (struct list_head const *)head->next == head;
  
#line 189 
  return __retres;
}


#line 274  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void __list_splice(struct list_head const *list, struct list_head *prev, struct list_head *next)
{
  
#line 278 
  struct list_head *first = list->next;
  
#line 279 
  struct list_head *last = list->prev;
  
#line 281 
  first->prev = prev;
  
#line 282 
  prev->next = first;
  
#line 284 
  last->next = next;
  
#line 285 
  next->prev = last;
  
#line 286 
  return;
}


#line 336  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void list_splice_tail_init(struct list_head *list, struct list_head *head)
{
  int tmp;
  
#line 339 
  tmp = list_empty((struct list_head const *)list);
  
#line 339 
  if (tmp == 0) {
    
#line 340 
    __list_splice((struct list_head const *)list,head->prev,head);
    
#line 341 
    INIT_LIST_HEAD(list);
  }
  else ;
  
#line 343 
  return;
}


#line 614  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void __hlist_del(struct hlist_node *n)
{
  
#line 616 
  struct hlist_node *next = n->next;
  
#line 617 
  struct hlist_node **pprev = n->pprev;
  
#line 618 
  *pprev = next;
  
#line 619 
  if (next != (struct hlist_node *)0) 
#line 620 
                                      next->pprev = pprev; else ;
  
#line 621 
  return;
}


#line 623  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void hlist_del(struct hlist_node *n)
{
  
#line 625 
  __hlist_del(n);
  
#line 626 
  n->next = (struct hlist_node *)(-2401263026317557504);
  
#line 627 
  n->pprev = (struct hlist_node **)(-2401263026316508672);
  
#line 628 
  return;
}


#line 638  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
{
  
#line 640 
  struct hlist_node *first = h->first;
  
#line 641 
  n->next = first;
  
#line 642 
  if (first != (struct hlist_node *)0) 
#line 643 
                                       first->pprev = & n->next; else ;
  
#line 644 
  h->first = n;
  
#line 645 
  n->pprev = & h->first;
  
#line 646 
  return;
}


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bug.h"
void warn_slowpath_null(char const *, int const);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_64.h"
unsigned long __phys_addr(unsigned long);


#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memmove(void *, void const *, size_t);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock(raw_spinlock_t *);


#line 39 
int _raw_spin_trylock(raw_spinlock_t *);


#line 41 
void _raw_spin_unlock(raw_spinlock_t *);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 358 
static void ldv_spin_lock_75(spinlock_t *lock);


#line 362 
static void ldv_spin_lock_77(spinlock_t *lock);


#line 366 
static void ldv_spin_lock_80(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_82(spinlock_t *lock);


#line 374 
static void ldv_spin_lock_88(spinlock_t *lock);


#line 378 
static void ldv_spin_lock_90(spinlock_t *lock);


#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static int spin_trylock(spinlock_t *lock)
{
  int tmp;
  
#line 406 
  tmp = _raw_spin_trylock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 406 
  return tmp;
}


#line 347 
static int ldv_spin_trylock_84(spinlock_t *lock);


#line 351 
static int ldv_spin_trylock_86(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 407 
static void ldv_spin_unlock_76(spinlock_t *lock);


#line 411 
static void ldv_spin_unlock_78(spinlock_t *lock);


#line 415 
static void ldv_spin_unlock_79(spinlock_t *lock);


#line 419 
static void ldv_spin_unlock_81(spinlock_t *lock);


#line 423 
static void ldv_spin_unlock_83(spinlock_t *lock);


#line 427 
static void ldv_spin_unlock_85(spinlock_t *lock);


#line 431 
static void ldv_spin_unlock_87(spinlock_t *lock);


#line 435 
static void ldv_spin_unlock_89(spinlock_t *lock);


#line 439 
static void ldv_spin_unlock_91(spinlock_t *lock);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_int(void);


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
extern unsigned long volatile jiffies;


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
void msleep(unsigned int);


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
__inline static char const *kobject_name(struct kobject const *kobj)
{
  char const *__retres;
  
#line 89 
  __retres = kobj->name;
  
#line 89 
  return __retres;
}


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static char const *dev_name(struct device const *dev)
{
  char const *__retres;
  char const *tmp;
  
#line 836 
  if (dev->init_name != (char const *)0) {
    
#line 837 
    __retres = dev->init_name;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  tmp = kobject_name(& dev->kobj);
  
#line 839 
  __retres = tmp;
  return_label: 
#line 839 
                return __retres;
}


#line 945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page const *page)
{
  void *__retres;
  
#line 947 
  __retres = (void *)((unsigned long)((unsigned long long)(((long)page + 24189255811072L) / 64L) << 12) + 18446612132314218496UL);
  
#line 947 
  return __retres;
}


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemcheck.h"
__inline static void kmemcheck_mark_initialized(void *address, unsigned int n)
{
  
#line 133 
  return;
}


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_1(size_t size, gfp_t flags);


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
__inline static __sum16 csum16_add(__sum16 csum, __be16 addend)
{
  __sum16 __retres;
  
#line 76 
  u16 res = csum;
  
#line 78 
  res = (unsigned short)((int)res + (int)addend);
  
#line 79 
  __retres = (unsigned short)(((int)res < (int)addend) + (int)res);
  
#line 79 
  return __retres;
}


#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
__inline static __sum16 csum16_sub(__sum16 csum, __be16 addend)
{
  __sum16 tmp;
  
#line 84 
  tmp = csum16_add((unsigned short)((int)csum),(unsigned short)(~ ((int)addend)));
  
#line 84 
  return tmp;
}


#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
__inline static void csum_replace2(__sum16 *sum, __be16 old, __be16 new)
{
  __sum16 tmp_0;
  __sum16 tmp;
  
#line 138 
  ;
  
#line 138 
  tmp = csum16_sub((unsigned short)(~ ((int)*sum)),(unsigned short)((int)old));
  
#line 138 
  tmp_0 = csum16_add((unsigned short)((int)tmp),(unsigned short)((int)new));
  
#line 138 
  *sum = (unsigned short)(~ ((int)tmp_0));
  
#line 139 
  return;
}


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  int __retres;
  
#line 76 
  __retres = (unsigned int)dma_direction <= 2U;
  
#line 76 
  return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-debug.h"
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t, bool);


#line 42 
void debug_dma_mapping_error(struct device *, dma_addr_t);


#line 44 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int, bool);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
extern struct dma_map_ops *dma_ops;


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  struct dma_map_ops *__retres;
  
#line 37 
  if ((long)(dev == (struct device *)0) != 0L || dev->archdata.dma_ops == (struct dma_map_ops *)0) {
    
#line 38 
    __retres = dma_ops;
    
#line 38 
    goto return_label;
  }
  else {
    
#line 40 
    __retres = dev->archdata.dma_ops;
    
#line 40 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  dma_addr_t addr;
  int tmp_0;
  unsigned long tmp_1;
  unsigned long tmp_2;
  
#line 15 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 18 
  kmemcheck_mark_initialized(ptr,(unsigned int)size);
  
#line 19 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 19 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 21 
    ldv_inline_asm();
    
#line 19 
    ;
  }
  else ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  tmp_1 = __phys_addr((unsigned long)ptr);
  
#line 20 
  ;
  
#line 20 
  addr = (*(ops->map_page))(dev,(struct page *)(-24189255811072) + (tmp_1 >> 12),(unsigned long)ptr & 4095UL,size,dir,attrs);
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  tmp_2 = __phys_addr((unsigned long)ptr);
  
#line 23 
  ;
  
#line 23 
  debug_dma_map_page(dev,(struct page *)(-24189255811072) + (tmp_2 >> 12),(unsigned long)ptr & 4095UL,size,(int)dir,addr,(_Bool)1);
  
#line 26 
  return addr;
}


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  int tmp_0;
  
#line 34 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 36 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 36 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 38 
    ldv_inline_asm();
    
#line 36 
    ;
  }
  else ;
  
#line 37 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 38 
    (*(ops->unmap_page))(dev,addr,size,dir,attrs); else ;
  
#line 39 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)1);
  
#line 40 
  return;
}


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_page(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t addr;
  void *tmp_0;
  int tmp_1;
  
#line 80 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 83 
  ;
  
#line 83 
  tmp_0 = lowmem_page_address((struct page const *)page);
  
#line 83 
  ;
  
#line 83 
  kmemcheck_mark_initialized(tmp_0 + offset,(unsigned int)size);
  
#line 84 
  tmp_1 = valid_dma_direction((int)dir);
  
#line 84 
  if ((long)(tmp_1 == 0) != 0L) {
    
#line 86 
    ldv_inline_asm();
    
#line 84 
    ;
  }
  else ;
  
#line 85 
  addr = (*(ops->map_page))(dev,page,offset,size,dir,(struct dma_attrs *)0);
  
#line 86 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr,(_Bool)0);
  
#line 88 
  return addr;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_page(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 94 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 96 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 96 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 98 
    ldv_inline_asm();
    
#line 96 
    ;
  }
  else ;
  
#line 97 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 98 
    (*(ops->unmap_page))(dev,addr,size,dir,(struct dma_attrs *)0); else ;
  
#line 99 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)0);
  
#line 100 
  return;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  int __retres;
  
#line 49 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 50 
  debug_dma_mapping_error(dev,dma_addr);
  
#line 51 
  if (ops->mapping_error != (int (*)(struct device *, dma_addr_t ))0) {
    int tmp_0;
    
#line 52 
    tmp_0 = (*(ops->mapping_error))(dev,dma_addr);
    
#line 52 
    __retres = tmp_0;
    
#line 52 
    goto return_label;
  }
  else ;
  
#line 54 
  __retres = dma_addr == 0ULL;
  return_label: 
#line 54 
                return __retres;
}


#line 230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t const *frag)
{
  unsigned int __retres;
  
#line 232 
  __retres = frag->size;
  
#line 232 
  return __retres;
}


#line 775 
void consume_skb(struct sk_buff *);


#line 976  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 978 
  __retres = skb->head + skb->end;
  
#line 978 
  return __retres;
}


#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1574 
  __retres = skb->len - skb->data_len;
  
#line 1574 
  return __retres;
}


#line 1688 
unsigned char *skb_put(struct sk_buff *, unsigned int);


#line 1706 
unsigned char *skb_pull(struct sk_buff *, unsigned int);


#line 1719 
unsigned char *__pskb_pull_tail(struct sk_buff *, int);


#line 1789  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  
#line 1791 
  skb->data += len;
  
#line 1792 
  skb->tail += (unsigned int)len;
  
#line 1793 
  return;
}


#line 1824  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_transport_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1827 
  __retres = skb->head + (int)skb->inner_transport_header;
  
#line 1827 
  return __retres;
}


#line 1842  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_network_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1844 
  __retres = skb->head + (int)skb->inner_network_header;
  
#line 1844 
  return __retres;
}


#line 1859  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_mac_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1861 
  __retres = skb->head + (int)skb->inner_mac_header;
  
#line 1861 
  return __retres;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1882 
  __retres = skb->head + (int)skb->transport_header;
  
#line 1882 
  return __retres;
}


#line 1897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1899 
  __retres = skb->head + (int)skb->network_header;
  
#line 1899 
  return __retres;
}


#line 1967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1969 
  tmp = skb_transport_header(skb);
  
#line 1969 
  ;
  
#line 1969 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1969 
  return __retres;
}


#line 1972  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static u32 skb_network_header_len(struct sk_buff const *skb)
{
  u32 __retres;
  
#line 1974 
  __retres = (unsigned int)((int)skb->transport_header - (int)skb->network_header);
  
#line 1974 
  return __retres;
}


#line 1982  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1984 
  tmp = skb_network_header(skb);
  
#line 1984 
  ;
  
#line 1984 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1984 
  return __retres;
}


#line 1987  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_inner_network_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1989 
  tmp = skb_inner_network_header(skb);
  
#line 1989 
  ;
  
#line 1989 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1989 
  return __retres;
}


#line 2140 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);


#line 2156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  struct sk_buff *tmp;
  
#line 2159 
  tmp = __netdev_alloc_skb(dev,length,32U);
  
#line 2159 
  return tmp;
}


#line 2272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t const *frag)
{
  struct page *__retres;
  
#line 2274 
  __retres = frag->page.p;
  
#line 2274 
  return __retres;
}


#line 2390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t const *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t tmp_0;
  struct page *tmp;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  tmp = skb_frag_page(frag);
  
#line 2395 
  ;
  
#line 2395 
  tmp_0 = dma_map_page(dev,tmp,(unsigned long)frag->page_offset + offset,size,dir);
  
#line 2395 
  return tmp_0;
}


#line 2789  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data(struct sk_buff const *skb, void *to, unsigned int const len)
{
  
#line 2793 
  memcpy(to,(void const *)skb->data,(unsigned long)len);
  
#line 2794 
  return;
}


#line 2796  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data_offset(struct sk_buff const *skb, int const offset, void *to, unsigned int const len)
{
  
#line 2800 
  memcpy(to,(void const *)(skb->data + offset),(unsigned long)len);
  
#line 2801 
  return;
}


#line 3295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff const *skb)
{
  u16 __retres;
  
#line 3297 
  __retres = skb->queue_mapping;
  
#line 3297 
  return __retres;
}


#line 3384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff const *skb)
{
  bool __retres;
  unsigned char *tmp;
  
#line 3386 
  tmp = skb_end_pointer(skb);
  
#line 3386 
  ;
  
#line 3386 
  __retres = (_Bool)((unsigned int)((struct skb_shared_info *)tmp)->gso_size != 0U);
  
#line 3386 
  return __retres;
}


#line 3426  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff const *skb)
{
  
#line 3428 
  return;
}


#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void napi_complete_done(struct napi_struct *, int);


#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_complete(struct napi_struct *n)
{
  
#line 460 
  napi_complete_done(n,0);
  
#line 461 
  return;
}


#line 496 
void napi_disable(struct napi_struct *);


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  int tmp;
  
#line 507 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 507 
  if ((long)(tmp == 0) != 0L) {
    
#line 509 
    ldv_inline_asm();
    
#line 507 
    ;
  }
  else ;
  
#line 509 
  ldv_inline_asm();
  
#line 509 
  set_bit(0L,(unsigned long volatile *)(& n->state));
  
#line 510 
  return;
}


#line 521  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_synchronize(struct napi_struct const *n)
{
  int tmp;
  
#line 523 
  goto ldv_41216;
  ldv_41215: 
#line 524 
  ;
  
#line 524 
  msleep(1U);
  ldv_41216: 
#line 525 
  ;
  
#line 523 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 523 
  if (tmp != 0) 
#line 525 
                goto ldv_41215; else 
#line 528 
                                     goto ldv_41217;
  ldv_41217: 
#line 529 
  ;
  
#line 530 
  return;
}


#line 1911 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);


#line 1920 
void netif_napi_del(struct napi_struct *);


#line 2515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  
#line 2517 
  set_bit(0L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2518 
  return;
}


#line 2541 
void netif_tx_wake_queue(struct netdev_queue *);


#line 2582 
void netif_tx_stop_all_queues(struct net_device *);


#line 2584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue const *dev_queue)
{
  bool __retres;
  int tmp;
  
#line 2586 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev_queue->state));
  
#line 2586 
  __retres = (_Bool)(tmp != 0);
  
#line 2586 
  return __retres;
}


#line 2900 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);


#line 2931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  
#line 2933 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  
#line 2934 
  return;
}


#line 2943 
int netif_receive_skb_sk(struct sock *, struct sk_buff *);


#line 2944  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static int netif_receive_skb(struct sk_buff *skb)
{
  int tmp;
  
#line 2946 
  tmp = netif_receive_skb_sk(skb->sk,skb);
  
#line 2946 
  return tmp;
}


#line 2948 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);


#line 3038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 3040 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& dev->state));
  
#line 3040 
  __retres = (_Bool)(tmp == 0);
  
#line 3040 
  return __retres;
}


#line 3047 
void netif_carrier_on(struct net_device *);


#line 3049 
void netif_carrier_off(struct net_device *);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__be16 eth_type_trans(struct sk_buff *, struct net_device *);


#line 409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  
#line 412 
  skb->vlan_proto = vlan_proto;
  
#line 413 
  skb->vlan_tci = (unsigned short)((unsigned int)vlan_tci | 4096U);
  
#line 414 
  return;
}


#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static int __vlan_get_tag(struct sk_buff const *skb, u16 *vlan_tci)
{
  int __retres;
  
#line 425 
  struct vlan_ethhdr *veth = (struct vlan_ethhdr *)skb->data;
  
#line 427 
  if ((unsigned int)veth->h_vlan_proto != 129U && (unsigned int)veth->h_vlan_proto != 43144U) {
    
#line 429 
    __retres = -22;
    
#line 429 
    goto return_label;
  }
  else ;
  
#line 431 
  if (0 != 0) 
#line 431 
              *vlan_tci = (unsigned short)(((int)veth->h_vlan_TCI << 8) | ((int)veth->h_vlan_TCI >> 8)); else 
                                                                    
#line 431 
                                                                    *vlan_tci = __fswab16((unsigned short)((int)veth->h_vlan_TCI));
  
#line 432 
  __retres = 0;
  return_label: 
#line 432 
                return __retres;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff const *skb)
{
  struct iphdr *tmp;
  
#line 25 
  tmp = (struct iphdr *)skb_network_header(skb);
  
#line 25 
  return tmp;
}


#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ip.h"
__inline static struct iphdr *inner_ip_hdr(struct sk_buff const *skb)
{
  struct iphdr *tmp;
  
#line 30 
  tmp = (struct iphdr *)skb_inner_network_header(skb);
  
#line 30 
  return tmp;
}


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff const *skb)
{
  struct tcphdr *tmp;
  
#line 29 
  tmp = (struct tcphdr *)skb_transport_header(skb);
  
#line 29 
  return tmp;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  struct tcphdr *tmp;
  
#line 34 
  tmp = tcp_hdr(skb);
  
#line 34 
  ;
  
#line 34 
  __retres = (unsigned int)((int)tmp->doff * 4);
  
#line 34 
  return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static struct tcphdr *inner_tcp_hdr(struct sk_buff const *skb)
{
  struct tcphdr *tmp;
  
#line 39 
  tmp = (struct tcphdr *)skb_inner_transport_header(skb);
  
#line 39 
  return tmp;
}


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static unsigned int inner_tcp_hdrlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  struct tcphdr *tmp;
  
#line 44 
  tmp = inner_tcp_hdr(skb);
  
#line 44 
  ;
  
#line 44 
  __retres = (unsigned int)((int)tmp->doff * 4);
  
#line 44 
  return __retres;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff const *skb)
{
  struct ipv6hdr *tmp;
  
#line 76 
  tmp = (struct ipv6hdr *)skb_network_header(skb);
  
#line 76 
  return tmp;
}


#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
__inline static struct ipv6hdr *inner_ipv6_hdr(struct sk_buff const *skb)
{
  struct ipv6hdr *tmp;
  
#line 81 
  tmp = (struct ipv6hdr *)skb_inner_network_header(skb);
  
#line 81 
  return tmp;
}


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  dma_addr_t tmp_0;
  struct device *tmp;
  
#line 40 
  ;
  
#line 40 
  ;
  
#line 40 
  ;
  
#line 40 
  if (hwdev != (struct pci_dev *)0) 
#line 40 
                                    tmp = & hwdev->dev; else 
#line 40 
                                                             tmp = (struct device *)0;
  
#line 40 
  tmp_0 = dma_map_single_attrs(tmp,ptr,size,(enum dma_data_direction)direction,(struct dma_attrs *)0);
  
#line 40 
  return tmp_0;
}


#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  struct device *tmp;
  
#line 47 
  ;
  
#line 47 
  ;
  
#line 47 
  ;
  
#line 47 
  if (hwdev != (struct pci_dev *)0) 
#line 47 
                                    tmp = & hwdev->dev; else 
#line 47 
                                                             tmp = (struct device *)0;
  
#line 47 
  dma_unmap_single_attrs(tmp,dma_addr,size,(enum dma_data_direction)direction,(struct dma_attrs *)0);
  
#line 48 
  return;
}


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_unmap_page(struct pci_dev *hwdev, dma_addr_t dma_address, size_t size, int direction)
{
  struct device *tmp;
  
#line 61 
  ;
  
#line 61 
  ;
  
#line 61 
  ;
  
#line 61 
  if (hwdev != (struct pci_dev *)0) 
#line 61 
                                    tmp = & hwdev->dev; else 
#line 61 
                                                             tmp = (struct device *)0;
  
#line 61 
  dma_unmap_page(tmp,dma_address,size,(enum dma_data_direction)direction);
  
#line 62 
  return;
}


#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
  int tmp;
  
#line 109 
  tmp = dma_mapping_error(& pdev->dev,dma_addr);
  
#line 109 
  return tmp;
}


#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
int qlcnic_82xx_napi_add(struct qlcnic_adapter *adapter, struct net_device *netdev);


#line 174 
void qlcnic_82xx_change_filter(struct qlcnic_adapter *adapter, u64 *uaddr, u16 vlan_id);


#line 183 
void qlcnic_82xx_process_rcv_ring_diag(struct qlcnic_host_sds_ring *sds_ring);


#line 211 
void qlcnic_82xx_napi_enable(struct qlcnic_adapter *adapter);


#line 212 
void qlcnic_82xx_napi_disable(struct qlcnic_adapter *adapter);


#line 213 
void qlcnic_82xx_napi_del(struct qlcnic_adapter *adapter);


#line 557  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
int qlcnic_83xx_napi_add(struct qlcnic_adapter *adapter, struct net_device *netdev);


#line 558 
void qlcnic_83xx_napi_del(struct qlcnic_adapter *adapter);


#line 559 
void qlcnic_83xx_napi_enable(struct qlcnic_adapter *adapter);


#line 560 
void qlcnic_83xx_napi_disable(struct qlcnic_adapter *adapter);


#line 572 
void qlcnic_83xx_process_rcv_ring_diag(struct qlcnic_host_sds_ring *sds_ring);


#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static void qlcnic_dcb_aen_handler(struct qlcnic_dcb *dcb, void *msg)
{
  
#line 107 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->aen_handler != (void (*)(struct qlcnic_dcb *, void *))0) 
    
#line 108 
    (*((dcb->ops)->aen_handler))(dcb,msg); else ;
  
#line 109 
  return;
}


#line 1619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
void qlcnic_post_rx_buffers(struct qlcnic_adapter *adapter, struct qlcnic_host_rds_ring *rds_ring, u8 ring_id);


#line 1636 
void qlcnic_update_cmd_producer(struct qlcnic_host_tx_ring *tx_ring);


#line 1639 
int qlcnic_check_loopback_buff(unsigned char *data, u8 *mac);


#line 1646 
netdev_tx_t qlcnic_xmit_frame(struct sk_buff *skb, struct net_device *netdev);


#line 1671 
int qlcnic_alloc_sds_rings(struct qlcnic_recv_context *recv_ctx, int count);


#line 1672 
void qlcnic_free_sds_rings(struct qlcnic_recv_context *recv_ctx);


#line 1673 
void qlcnic_advert_link_change(struct qlcnic_adapter *adapter, int linkup);


#line 1674 
void qlcnic_free_tx_rings(struct qlcnic_adapter *adapter);


#line 1675 
int qlcnic_alloc_tx_rings(struct qlcnic_adapter *adapter, struct net_device *netdev);


#line 1727  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static u32 qlcnic_tx_avail(struct qlcnic_host_tx_ring *tx_ring)
{
  u32 __retres;
  
#line 1729 
  if ((long)(tx_ring->producer < tx_ring->sw_consumer) != 0L) {
    
#line 1730 
    __retres = tx_ring->sw_consumer - tx_ring->producer;
    
#line 1730 
    goto return_label;
  }
  else {
    
#line 1732 
    __retres = (tx_ring->sw_consumer + tx_ring->num_desc) - tx_ring->producer;
    
#line 1732 
    goto return_label;
  }
  return_label: 
#line 1729 
                return __retres;
}


#line 1832  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_encap_tx_offload(struct qlcnic_adapter *adapter)
{
  bool __retres;
  
#line 1834 
  __retres = (_Bool)(((adapter->ahw)->extra_capability[0] & 2U) != 0U);
  
#line 1834 
  return __retres;
}


#line 1973  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_sre_macaddr_change(struct qlcnic_adapter *adapter, u8 *addr, u16 id, u8 cmd)
{
  int tmp;
  
#line 1976 
  tmp = (*(((adapter->ahw)->hw_ops)->change_macvlan))(adapter,addr,(unsigned short)((int)id),(unsigned char)((int)cmd));
  
#line 1976 
  return tmp;
}


#line 2045  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_change_filter(struct qlcnic_adapter *adapter, u64 *addr, u16 id)
{
  
#line 2048 
  (*(((adapter->ahw)->hw_ops)->change_l2_filter))(adapter,addr,(unsigned short)((int)id));
  
#line 2049 
  return;
}


#line 2145  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_check_multi_tx(struct qlcnic_adapter *adapter)
{
  bool __retres;
  int tmp;
  
#line 2147 
  tmp = constant_test_bit(9L,(unsigned long const volatile *)(& adapter->state));
  
#line 2147 
  __retres = (_Bool)(tmp != 0);
  
#line 2147 
  return __retres;
}


#line 2219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_enable_sds_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_sds_ring *sds_ring)
{
  
#line 2222 
  if (((adapter->ahw)->hw_ops)->enable_sds_intr != (void (*)(struct qlcnic_adapter *, struct qlcnic_host_sds_ring *))0) 
    
#line 2223 
    (*(((adapter->ahw)->hw_ops)->enable_sds_intr))(adapter,sds_ring); else ;
  
#line 2224 
  return;
}


#line 2227  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_disable_sds_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_sds_ring *sds_ring)
{
  
#line 2230 
  if (((adapter->ahw)->hw_ops)->disable_sds_intr != (void (*)(struct qlcnic_adapter *, struct qlcnic_host_sds_ring *))0) 
    
#line 2231 
    (*(((adapter->ahw)->hw_ops)->disable_sds_intr))(adapter,sds_ring); else ;
  
#line 2232 
  return;
}


#line 2234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_enable_tx_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  
#line 2237 
  if (((adapter->ahw)->hw_ops)->enable_tx_intr != (void (*)(struct qlcnic_adapter *, struct qlcnic_host_tx_ring *))0) 
    
#line 2238 
    (*(((adapter->ahw)->hw_ops)->enable_tx_intr))(adapter,tx_ring); else ;
  
#line 2239 
  return;
}


#line 2241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_disable_tx_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  
#line 2244 
  if (((adapter->ahw)->hw_ops)->disable_tx_intr != (void (*)(struct qlcnic_adapter *, struct qlcnic_host_tx_ring *))0) 
    
#line 2245 
    (*(((adapter->ahw)->hw_ops)->disable_tx_intr))(adapter,tx_ring); else ;
  
#line 2246 
  return;
}


#line 2313  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_83xx_check(struct qlcnic_adapter *adapter)
{
  bool status;
  
#line 2315 
  unsigned short device = (adapter->pdev)->device;
  
#line 2318 
  status = (_Bool)(((((unsigned int)device == 32816U || (unsigned int)device == 34864U) || ((unsigned int)device == 32832U || (unsigned int)device == 33856U)) || (unsigned int)device == 33840U) != 0);
  
#line 2324 
  return status;
}


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_process_rcv_ring(struct qlcnic_host_sds_ring *sds_ring, int max);


#line 134 
static struct sk_buff *qlcnic_process_rxbuf(struct qlcnic_adapter *adapter, struct qlcnic_host_rds_ring *ring, u16 index, u16 cksum);


#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
__inline static u8 qlcnic_mac_hash(u64 mac, u16 vlan)
{
  u8 __retres;
  
#line 140 
  __retres = (unsigned char)(((int)((unsigned char)mac) ^ (int)((unsigned char)(mac >> 40))) ^ (int)((unsigned char)vlan));
  
#line 140 
  return __retres;
}


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
__inline static u32 qlcnic_get_ref_handle(struct qlcnic_adapter *adapter, u16 handle, u8 ring_id)
{
  u32 __retres;
  bool tmp;
  
#line 146 
  tmp = qlcnic_83xx_check(adapter);
  
#line 146 
  if ((int)tmp != 0) {
    
#line 147 
    __retres = (unsigned int)((int)handle | ((int)ring_id << 15));
    
#line 147 
    goto return_label;
  }
  else {
    
#line 149 
    __retres = (unsigned int)handle;
    
#line 149 
    goto return_label;
  }
  return_label: 
#line 146 
                return __retres;
}


#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
__inline static int qlcnic_82xx_is_lb_pkt(u64 sts_data)
{
  int __retres;
  
#line 154 
  __retres = ((sts_data >> 4) & 15ULL) == 0ULL;
  
#line 154 
  return __retres;
}


#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_delete_rx_list_mac(struct qlcnic_adapter *adapter, struct qlcnic_filter *fil, void *addr, u16 vlan_id)
{
  int ret;
  u8 op;
  
#line 164 
  if ((unsigned int)vlan_id != 0U) 
#line 164 
                                   op = (unsigned char)3U; else 
#line 164 
                                                                op = (unsigned char)1U;
  
#line 165 
  ret = qlcnic_sre_macaddr_change(adapter,(u8 *)addr,(unsigned short)((int)vlan_id),(unsigned char)((int)op));
  
#line 166 
  if (ret != 0) 
#line 167 
                goto return_label; else ;
  
#line 169 
  if ((unsigned int)vlan_id != 0U) 
#line 169 
                                   op = (unsigned char)4U; else 
#line 169 
                                                                op = (unsigned char)2U;
  
#line 170 
  ret = qlcnic_sre_macaddr_change(adapter,(u8 *)addr,(unsigned short)((int)vlan_id),(unsigned char)((int)op));
  
#line 171 
  if (ret == 0) {
    
#line 172 
    hlist_del(& fil->fnode);
    
#line 173 
    adapter->rx_fhash.fnum = (u8)((int)adapter->rx_fhash.fnum - 1);
  }
  else ;
  return_label: 
#line 175 
                return;
}


#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static struct qlcnic_filter *qlcnic_find_mac_filter(struct hlist_head *head, void *addr, u16 vlan_id)
{
  struct qlcnic_filter *__retres;
  struct hlist_node *n;
  struct qlcnic_filter *tmp_1;
  bool tmp_2;
  struct qlcnic_filter *tmp_5;
  
#line 180 
  struct qlcnic_filter *tmp_fil = (struct qlcnic_filter *)0;
  {
    struct qlcnic_filter *tmp_0;
    
#line 183 
    struct hlist_node *____ptr = head->first;
    
#line 183 
    if (____ptr != (struct hlist_node *)0) {
      struct qlcnic_filter *tmp;
      {
        
#line 183 
        struct hlist_node const *__mptr = (struct hlist_node const *)____ptr;
        
#line 183 
        tmp = (struct qlcnic_filter *)__mptr;
      }
      
#line 183 
      tmp_0 = tmp;
    }
    else 
#line 183 
         tmp_0 = (struct qlcnic_filter *)0;
    
#line 183 
    tmp_1 = tmp_0;
  }
  
#line 183 
  tmp_fil = tmp_1;
  
#line 183 
  goto ldv_55897;
  ldv_55896: 
#line 184 
  ;
  
#line 184 
  tmp_2 = ether_addr_equal((u8 const *)(& tmp_fil->faddr),(u8 const *)addr);
  
#line 184 
  if ((int)tmp_2 != 0) {
    
#line 184 
    if ((int)tmp_fil->vlan_id == (int)vlan_id) {
      
#line 186 
      __retres = tmp_fil;
      
#line 186 
      goto return_label;
    }
    else ;
  }
  else ;
  {
    struct qlcnic_filter *tmp_4;
    
#line 183 
    struct hlist_node *____ptr_0 = n;
    
#line 183 
    if (____ptr_0 != (struct hlist_node *)0) {
      struct qlcnic_filter *tmp_3;
      {
        
#line 183 
        struct hlist_node const *__mptr_0 = (struct hlist_node const *)____ptr_0;
        
#line 183 
        tmp_3 = (struct qlcnic_filter *)__mptr_0;
      }
      
#line 183 
      tmp_4 = tmp_3;
    }
    else 
#line 183 
         tmp_4 = (struct qlcnic_filter *)0;
    
#line 183 
    tmp_5 = tmp_4;
  }
  
#line 183 
  tmp_fil = tmp_5;
  ldv_55897: 
#line 185 
  ;
  
#line 183 
  if (tmp_fil != (struct qlcnic_filter *)0) {
    
#line 183 
    n = tmp_fil->fnode.next;
    
#line 183 
    if (1 != 0) 
#line 185 
                goto ldv_55896; else 
#line 188 
                                     goto ldv_55898;
  }
  else 
#line 188 
       goto ldv_55898;
  ldv_55898: 
#line 189 
  ;
  
#line 189 
  __retres = (struct qlcnic_filter *)0;
  return_label: 
#line 189 
                return __retres;
}


#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_add_lb_filter(struct qlcnic_adapter *adapter, struct sk_buff *skb, int loopback_pkt, u16 vlan_id)
{
  struct qlcnic_filter *fil;
  struct qlcnic_filter *tmp_fil;
  struct hlist_head *head;
  unsigned long time;
  u8 hindex;
  u8 op;
  int ret;
  int tmp_0;
  bool tmp;
  u8 tmp_1;
  
#line 195 
  struct ethhdr *phdr = (struct ethhdr *)skb->data;
  
#line 199 
  u64 src_addr = 0ULL;
  
#line 203 
  tmp = qlcnic_sriov_pf_check(adapter);
  
#line 203 
  if (tmp) 
#line 203 
           tmp_0 = 0; else 
#line 203 
                           tmp_0 = 1;
  
#line 203 
  if (tmp_0) 
#line 204 
             vlan_id = (unsigned short)0U;
  else 
    
#line 203 
    if ((unsigned int)vlan_id == 65535U) 
#line 204 
                                         vlan_id = (unsigned short)0U; else ;
  
#line 206 
  memcpy((void *)(& src_addr),(void const *)(& phdr->h_source),6UL);
  
#line 207 
  tmp_1 = qlcnic_mac_hash(src_addr,(unsigned short)((int)vlan_id));
  
#line 207 
  hindex = (unsigned char)((unsigned int)tmp_1 & ((unsigned int)adapter->fhash.fbucket_size + 255U));
  
#line 210 
  if (loopback_pkt != 0) {
    
#line 211 
    if ((int)((unsigned short)adapter->rx_fhash.fnum) >= (int)adapter->rx_fhash.fmax) 
      
#line 212 
      goto return_label; else ;
    
#line 214 
    head = adapter->rx_fhash.fhead + (int)hindex;
    
#line 216 
    tmp_fil = qlcnic_find_mac_filter(head,(void *)(& src_addr),(unsigned short)((int)vlan_id));
    
#line 217 
    if (tmp_fil != (struct qlcnic_filter *)0) {
      int tmp_2;
      
#line 218 
      time = tmp_fil->ftime;
      {
        unsigned long __dummy;
        unsigned long volatile __dummy2;
        
#line 219 
        tmp_2 = 1;
      }
      
#line 219 
      if (tmp_2 != 0) {
        int tmp_3;
        {
          unsigned long __dummy_0;
          unsigned long __dummy2_0;
          
#line 219 
          tmp_3 = 1;
        }
        
#line 219 
        if (tmp_3 != 0) {
          
#line 219 
          if ((long)((time - jiffies) + 5000UL) < 0L) 
#line 220 
                                                      tmp_fil->ftime = jiffies; else ;
        }
        else ;
      }
      else ;
      
#line 221 
      goto return_label;
    }
    else ;
    
#line 224 
    fil = (struct qlcnic_filter *)kzalloc_1(32UL,32U);
    
#line 225 
    if (fil == (struct qlcnic_filter *)0) 
#line 226 
                                          goto return_label; else ;
    
#line 228 
    fil->ftime = jiffies;
    
#line 229 
    memcpy((void *)(& fil->faddr),(void const *)(& src_addr),6UL);
    
#line 230 
    fil->vlan_id = vlan_id;
    
#line 231 
    ldv_spin_lock_75(& adapter->rx_mac_learn_lock);
    
#line 232 
    hlist_add_head(& fil->fnode,head);
    
#line 233 
    adapter->rx_fhash.fnum = (u8)((int)adapter->rx_fhash.fnum + 1);
    
#line 234 
    ldv_spin_unlock_76(& adapter->rx_mac_learn_lock);
  }
  else {
    
#line 236 
    head = adapter->fhash.fhead + (int)hindex;
    
#line 238 
    ldv_spin_lock_77(& adapter->mac_learn_lock);
    
#line 240 
    tmp_fil = qlcnic_find_mac_filter(head,(void *)(& src_addr),(unsigned short)((int)vlan_id));
    
#line 241 
    if (tmp_fil != (struct qlcnic_filter *)0) {
      
#line 242 
      if ((unsigned int)vlan_id != 0U) 
#line 242 
                                       op = (unsigned char)4U; else 
#line 242 
                                                                    op = (unsigned char)2U;
      
#line 243 
      ret = qlcnic_sre_macaddr_change(adapter,(u8 *)(& src_addr),(unsigned short)((int)vlan_id),(unsigned char)((int)op));
      
#line 246 
      if (ret == 0) {
        
#line 247 
        hlist_del(& tmp_fil->fnode);
        
#line 248 
        adapter->fhash.fnum = (u8)((int)adapter->fhash.fnum - 1);
      }
      else ;
      
#line 251 
      ldv_spin_unlock_78(& adapter->mac_learn_lock);
      
#line 253 
      goto return_label;
    }
    else ;
    
#line 256 
    ldv_spin_unlock_79(& adapter->mac_learn_lock);
    
#line 258 
    head = adapter->rx_fhash.fhead + (int)hindex;
    
#line 260 
    ldv_spin_lock_80(& adapter->rx_mac_learn_lock);
    
#line 262 
    tmp_fil = qlcnic_find_mac_filter(head,(void *)(& src_addr),(unsigned short)((int)vlan_id));
    
#line 263 
    if (tmp_fil != (struct qlcnic_filter *)0) 
#line 264 
                                              qlcnic_delete_rx_list_mac(adapter,tmp_fil,(void *)(& src_addr),(unsigned short)((int)vlan_id)); else ;
    
#line 267 
    ldv_spin_unlock_81(& adapter->rx_mac_learn_lock);
  }
  return_label: 
#line 269 
                return;
}


#line 271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_82xx_change_filter(struct qlcnic_adapter *adapter, u64 *uaddr, u16 vlan_id)
{
  struct cmd_desc_type0 *hwdesc;
  struct qlcnic_nic_req *req;
  struct qlcnic_mac_req *mac_req;
  struct qlcnic_vlan_req *vlan_req;
  u32 producer;
  u64 word;
  
#line 278 
  struct qlcnic_host_tx_ring *tx_ring = adapter->tx_ring;
  
#line 282 
  producer = tx_ring->producer;
  
#line 283 
  hwdesc = tx_ring->desc_head + tx_ring->producer;
  
#line 285 
  req = (struct qlcnic_nic_req *)hwdesc;
  
#line 286 
  memset((void *)req,0,64UL);
  
#line 287 
  req->qhdr = 167772160ULL;
  
#line 289 
  word = ((unsigned long long)adapter->portnum << 16) | 1ULL;
  
#line 290 
  req->req_hdr = word;
  
#line 292 
  mac_req = (struct qlcnic_mac_req *)(& req->words[0]);
  
#line 293 
  if ((unsigned int)vlan_id != 0U) 
#line 293 
                                   mac_req->op = (unsigned char)3U; else 
                                                                    
#line 293 
                                                                    mac_req->op = (unsigned char)1U;
  
#line 294 
  memcpy((void *)(& mac_req->mac_addr),(void const *)uaddr,6UL);
  
#line 296 
  vlan_req = (struct qlcnic_vlan_req *)(& req->words[1]);
  
#line 297 
  vlan_req->vlan_id = vlan_id;
  
#line 299 
  tx_ring->producer = (producer + 1U) & (tx_ring->num_desc + 4294967295U);
  
#line 300 
  ldv_inline_asm();
  
#line 301 
  return;
}


#line 303  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_send_filter(struct qlcnic_adapter *adapter, struct cmd_desc_type0 *first_desc, struct sk_buff *skb)
{
  int tmp_0;
  struct qlcnic_filter *fil;
  struct qlcnic_filter *tmp_fil;
  struct hlist_head *head;
  struct hlist_node *n;
  u8 hindex;
  u8 hval;
  bool tmp_1;
  struct qlcnic_filter *tmp_5;
  bool tmp_6;
  struct qlcnic_filter *tmp_9;
  
#line 307 
  struct vlan_ethhdr *vh = (struct vlan_ethhdr *)skb->data;
  
#line 308 
  struct ethhdr *phdr = (struct ethhdr *)skb->data;
  
#line 309 
  if (0 != 0) 
#line 309 
              tmp_0 = (int)((unsigned short)(((int)skb->protocol << 8) | ((int)skb->protocol >> 8)));
  else {
    __u16 tmp;
    
#line 309 
    tmp = __fswab16((unsigned short)((int)skb->protocol));
    
#line 309 
    tmp_0 = (int)tmp;
  }
  
#line 309 
  u16 protocol = (unsigned short)tmp_0;
  
#line 313 
  u64 src_addr = 0ULL;
  
#line 314 
  u16 vlan_id = (unsigned short)0U;
  
#line 317 
  tmp_1 = ether_addr_equal((u8 const *)(& phdr->h_source),(u8 const *)(& adapter->mac_addr));
  
#line 317 
  if ((int)tmp_1 != 0) 
#line 318 
                       goto return_label; else ;
  
#line 320 
  if ((adapter->flags & 8388608U) != 0U) {
    
#line 321 
    if ((unsigned int)protocol == 33024U) {
      
#line 322 
      vh = (struct vlan_ethhdr *)skb->data;
      
#line 323 
      if (0 != 0) 
#line 323 
                  vlan_id = (unsigned short)(((int)vh->h_vlan_TCI << 8) | ((int)vh->h_vlan_TCI >> 8)); else 
                                                                    
#line 323 
                                                                    vlan_id = __fswab16((unsigned short)((int)vh->h_vlan_TCI));
    }
    else 
      
#line 324 
      if (((int)skb->vlan_tci & 4096) != 0) 
#line 325 
                                            vlan_id = (unsigned short)((unsigned int)skb->vlan_tci & 61439U); else ;
  }
  else ;
  
#line 329 
  memcpy((void *)(& src_addr),(void const *)(& phdr->h_source),6UL);
  
#line 330 
  hval = qlcnic_mac_hash(src_addr,(unsigned short)((int)vlan_id));
  
#line 331 
  hindex = (unsigned char)(((unsigned int)adapter->fhash.fbucket_size + 255U) & (unsigned int)hval);
  
#line 332 
  head = adapter->fhash.fhead + (int)hindex;
  {
    struct qlcnic_filter *tmp_4;
    
#line 334 
    struct hlist_node *____ptr = head->first;
    
#line 334 
    if (____ptr != (struct hlist_node *)0) {
      struct qlcnic_filter *tmp_3;
      {
        
#line 334 
        struct hlist_node const *__mptr = (struct hlist_node const *)____ptr;
        
#line 334 
        tmp_3 = (struct qlcnic_filter *)__mptr;
      }
      
#line 334 
      tmp_4 = tmp_3;
    }
    else 
#line 334 
         tmp_4 = (struct qlcnic_filter *)0;
    
#line 334 
    tmp_5 = tmp_4;
  }
  
#line 334 
  tmp_fil = tmp_5;
  
#line 334 
  goto ldv_55958;
  ldv_55957: 
#line 335 
  ;
  
#line 335 
  tmp_6 = ether_addr_equal((u8 const *)(& tmp_fil->faddr),(u8 const *)(& src_addr));
  
#line 335 
  if ((int)tmp_6 != 0) {
    
#line 335 
    if ((int)tmp_fil->vlan_id == (int)vlan_id) {
      
#line 337 
      if (tmp_fil->ftime + 5000UL < jiffies) 
#line 338 
                                             qlcnic_change_filter(adapter,& src_addr,(unsigned short)((int)vlan_id)); else ;
      
#line 340 
      tmp_fil->ftime = jiffies;
      
#line 341 
      goto return_label;
    }
    else ;
  }
  else ;
  {
    struct qlcnic_filter *tmp_8;
    
#line 334 
    struct hlist_node *____ptr_0 = n;
    
#line 334 
    if (____ptr_0 != (struct hlist_node *)0) {
      struct qlcnic_filter *tmp_7;
      {
        
#line 334 
        struct hlist_node const *__mptr_0 = (struct hlist_node const *)____ptr_0;
        
#line 334 
        tmp_7 = (struct qlcnic_filter *)__mptr_0;
      }
      
#line 334 
      tmp_8 = tmp_7;
    }
    else 
#line 334 
         tmp_8 = (struct qlcnic_filter *)0;
    
#line 334 
    tmp_9 = tmp_8;
  }
  
#line 334 
  tmp_fil = tmp_9;
  ldv_55958: 
#line 336 
  ;
  
#line 334 
  if (tmp_fil != (struct qlcnic_filter *)0) {
    
#line 334 
    n = tmp_fil->fnode.next;
    
#line 334 
    if (1 != 0) 
#line 336 
                goto ldv_55957; else 
#line 339 
                                     goto ldv_55959;
  }
  else 
#line 339 
       goto ldv_55959;
  ldv_55959: 
#line 340 
  ;
  
#line 345 
  if ((long)((int)((unsigned short)adapter->fhash.fnum) >= (int)adapter->fhash.fmax) != 0L) {
    
#line 346 
    adapter->stats.mac_filter_limit_overrun += 1ULL;
    
#line 347 
    goto return_label;
  }
  else ;
  
#line 350 
  fil = (struct qlcnic_filter *)kzalloc_1(32UL,32U);
  
#line 351 
  if (fil == (struct qlcnic_filter *)0) 
#line 352 
                                        goto return_label; else ;
  
#line 354 
  qlcnic_change_filter(adapter,& src_addr,(unsigned short)((int)vlan_id));
  
#line 355 
  fil->ftime = jiffies;
  
#line 356 
  fil->vlan_id = vlan_id;
  
#line 357 
  memcpy((void *)(& fil->faddr),(void const *)(& src_addr),6UL);
  
#line 358 
  ldv_spin_lock_82(& adapter->mac_learn_lock);
  
#line 359 
  hlist_add_head(& fil->fnode,head);
  
#line 360 
  adapter->fhash.fnum = (u8)((int)adapter->fhash.fnum + 1);
  
#line 361 
  ldv_spin_unlock_83(& adapter->mac_learn_lock);
  return_label: 
#line 362 
                return;
}


#line 371  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_tx_encap_pkt(struct qlcnic_adapter *adapter, struct cmd_desc_type0 *first_desc, struct sk_buff *skb, struct qlcnic_host_tx_ring *tx_ring)
{
  int __retres;
  int copied;
  int copy_len;
  int descr_size;
  struct cmd_desc_type0 *hwdesc;
  bool tmp_9;
  struct iphdr *tmp_10;
  u32 tmp_11;
  int tmp_12;
  unsigned char *tmp_13;
  int tmp_14;
  
#line 376 
  u8 opcode = (unsigned char)0U;
  
#line 376 
  u8 inner_hdr_len = (unsigned char)0U;
  
#line 376 
  u8 outer_hdr_len = (unsigned char)0U;
  
#line 376 
  u8 total_hdr_len = (unsigned char)0U;
  
#line 378 
  u32 producer = tx_ring->producer;
  
#line 380 
  u16 flags = (unsigned short)0U;
  
#line 380 
  u16 encap_descr = (unsigned short)0U;
  
#line 382 
  opcode = (unsigned char)1U;
  
#line 383 
  encap_descr = (unsigned short)1U;
  
#line 385 
  tmp_9 = skb_is_gso((struct sk_buff const *)skb);
  
#line 385 
  if ((int)tmp_9 != 0) {
    unsigned char *tmp;
    unsigned int tmp_0;
    unsigned char *tmp_1;
    int tmp_2;
    unsigned char *tmp_3;
    int tmp_5;
    
#line 386 
    tmp = skb_inner_transport_header((struct sk_buff const *)skb);
    
#line 386 
    tmp_0 = inner_tcp_hdrlen((struct sk_buff const *)skb);
    
#line 387 
    tmp_1 = skb_inner_mac_header((struct sk_buff const *)skb);
    
#line 386 
    inner_hdr_len = (unsigned char)((long)(tmp + tmp_0) - (long)tmp_1);
    
#line 391 
    tmp_2 = skb_transport_offset((struct sk_buff const *)skb);
    
#line 391 
    outer_hdr_len = (unsigned char)((unsigned int)((unsigned char)tmp_2) + 16U);
    
#line 393 
    first_desc->outer_hdr_length = outer_hdr_len;
    
#line 394 
    total_hdr_len = (unsigned char)((int)inner_hdr_len + (int)outer_hdr_len);
    
#line 395 
    encap_descr = (unsigned short)((unsigned int)encap_descr | 48U);
    
#line 397 
    tmp_3 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 397 
    first_desc->mss = ((struct skb_shared_info *)tmp_3)->gso_size;
    
#line 398 
    first_desc->hdr_length = inner_hdr_len;
    
#line 404 
    copied = 0;
    
#line 405 
    descr_size = 64;
    
#line 406 
    goto ldv_55981;
    ldv_55980: 
#line 407 
    ;
    {
      int tmp_4;
      
#line 407 
      int _min1 = descr_size;
      
#line 407 
      int _min2 = (int)total_hdr_len - copied;
      
#line 407 
      if (_min1 < _min2) 
#line 407 
                         tmp_4 = _min1; else 
#line 407 
                                             tmp_4 = _min2;
      
#line 407 
      tmp_5 = tmp_4;
    }
    
#line 407 
    copy_len = tmp_5;
    
#line 408 
    hwdesc = tx_ring->desc_head + producer;
    
#line 409 
    (tx_ring->cmd_buf_arr + producer)->skb = (struct sk_buff *)0;
    
#line 410 
    skb_copy_from_linear_data_offset((struct sk_buff const *)skb,copied,(void *)hwdesc,(unsigned int)copy_len);
    
#line 413 
    copied += copy_len;
    
#line 414 
    producer = (producer + 1U) & (tx_ring->num_desc + 4294967295U);
    ldv_55981: 
#line 415 
    ;
    
#line 406 
    if ((int)total_hdr_len > copied) 
#line 408 
                                     goto ldv_55980; else 
#line 411 
                                                          goto ldv_55982;
    ldv_55982: 
#line 412 
    ;
    
#line 417 
    tx_ring->producer = producer;
    
#line 418 
    ldv_inline_asm();
    
#line 423 
    adapter->stats.encap_lso_frames += 1ULL;
    
#line 425 
    opcode = (unsigned char)8U;
  }
  else 
    
#line 426 
    if ((unsigned int)*((unsigned char *)skb + 145UL) == 6U) {
      struct iphdr *tmp_8;
      
#line 427 
      tmp_8 = inner_ip_hdr((struct sk_buff const *)skb);
      
#line 427 
      ;
      
#line 427 
      if ((unsigned int)*((unsigned char *)tmp_8 + 0UL) == 96U) {
        struct ipv6hdr *tmp_6;
        
#line 428 
        tmp_6 = inner_ipv6_hdr((struct sk_buff const *)skb);
        
#line 428 
        ;
        
#line 428 
        if ((unsigned int)tmp_6->nexthdr == 17U) 
#line 429 
                                                 encap_descr = (unsigned short)((unsigned int)encap_descr | 8U); else ;
      }
      else {
        struct iphdr *tmp_7;
        
#line 431 
        tmp_7 = inner_ip_hdr((struct sk_buff const *)skb);
        
#line 431 
        ;
        
#line 431 
        if ((unsigned int)tmp_7->protocol == 17U) 
#line 432 
                                                  encap_descr = (unsigned short)((unsigned int)encap_descr | 8U); else ;
      }
      
#line 435 
      adapter->stats.encap_tx_csummed += 1ULL;
      
#line 436 
      opcode = (unsigned char)7U;
    }
    else ;
  
#line 440 
  tmp_10 = ip_hdr((struct sk_buff const *)skb);
  
#line 440 
  ;
  
#line 440 
  if ((unsigned int)*((unsigned char *)tmp_10 + 0UL) == 96U) 
#line 441 
                                                             encap_descr = (unsigned short)((unsigned int)encap_descr | 2U); else ;
  
#line 444 
  tmp_11 = skb_network_header_len((struct sk_buff const *)skb);
  
#line 444 
  encap_descr = (unsigned short)((int)((unsigned short)((tmp_11 >> 2) << 6)) | (int)encap_descr);
  
#line 447 
  tmp_12 = skb_network_offset((struct sk_buff const *)skb);
  
#line 447 
  encap_descr = (unsigned short)((tmp_12 << 10) | (int)encap_descr);
  
#line 448 
  first_desc->encap_descr = encap_descr;
  
#line 450 
  tmp_13 = skb_inner_transport_header((struct sk_buff const *)skb);
  
#line 450 
  first_desc->tcp_hdr_offset = (unsigned char)((long)tmp_13 - (long)skb->data);
  
#line 452 
  tmp_14 = skb_inner_network_offset((struct sk_buff const *)skb);
  
#line 452 
  first_desc->ip_hdr_offset = (unsigned char)tmp_14;
  
#line 454 
  first_desc->flags_opcode = (unsigned short)((int)first_desc->flags_opcode | (int)((unsigned short)(((int)flags & 127) | (((int)opcode << 7) & 8064))));
  
#line 456 
  __retres = 0;
  
#line 456 
  return __retres;
}


#line 459  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_tx_pkt(struct qlcnic_adapter *adapter, struct cmd_desc_type0 *first_desc, struct sk_buff *skb, struct qlcnic_host_tx_ring *tx_ring)
{
  int __retres;
  u8 l4proto;
  int copied;
  int offset;
  int copy_len;
  int size;
  struct cmd_desc_type0 *hwdesc;
  struct vlan_ethhdr *vh;
  int tmp_0;
  bool tmp_13;
  int tmp_14;
  int tmp_15;
  
#line 463 
  u8 opcode = (unsigned char)0U;
  
#line 463 
  u8 hdr_len = (unsigned char)0U;
  
#line 464 
  u16 flags = (unsigned short)0U;
  
#line 464 
  u16 vlan_tci = (unsigned short)0U;
  
#line 468 
  if (0 != 0) 
#line 468 
              tmp_0 = (int)((unsigned short)(((int)skb->protocol << 8) | ((int)skb->protocol >> 8)));
  else {
    __u16 tmp;
    
#line 468 
    tmp = __fswab16((unsigned short)((int)skb->protocol));
    
#line 468 
    tmp_0 = (int)tmp;
  }
  
#line 468 
  u16 protocol = (unsigned short)tmp_0;
  
#line 469 
  u32 producer = tx_ring->producer;
  
#line 471 
  if ((unsigned int)protocol == 33024U) {
    
#line 472 
    vh = (struct vlan_ethhdr *)skb->data;
    
#line 473 
    flags = (unsigned short)16U;
    
#line 474 
    if (0 != 0) 
#line 474 
                vlan_tci = (unsigned short)(((int)vh->h_vlan_TCI << 8) | ((int)vh->h_vlan_TCI >> 8)); else 
                                                                    
#line 474 
                                                                    vlan_tci = __fswab16((unsigned short)((int)vh->h_vlan_TCI));
    
#line 475 
    if (0 != 0) 
#line 475 
                protocol = (unsigned short)(((int)vh->h_vlan_encapsulated_proto << 8) | ((int)vh->h_vlan_encapsulated_proto >> 8)); else 
                                                                    
#line 475 
                                                                    protocol = __fswab16((unsigned short)((int)vh->h_vlan_encapsulated_proto));
  }
  else 
    
#line 476 
    if (((int)skb->vlan_tci & 4096) != 0) {
      
#line 477 
      flags = (unsigned short)64U;
      
#line 478 
      vlan_tci = (unsigned short)((unsigned int)skb->vlan_tci & 61439U);
    }
    else ;
  
#line 480 
  if ((long)((unsigned int)adapter->tx_pvid != 0U) != 0L) {
    
#line 481 
    if ((unsigned int)vlan_tci != 0U && (adapter->flags & 256U) == 0U) {
      
#line 482 
      __retres = -5;
      
#line 482 
      goto return_label;
    }
    else ;
    
#line 483 
    if ((unsigned int)vlan_tci != 0U && (adapter->flags & 256U) != 0U) 
      
#line 484 
      goto set_flags; else ;
    
#line 486 
    flags = (unsigned short)64U;
    
#line 487 
    vlan_tci = adapter->tx_pvid;
  }
  else ;
  set_flags: 
#line 489 
  ;
  
#line 490 
  first_desc->vlan_TCI = vlan_tci;
  
#line 491 
  first_desc->flags_opcode = (unsigned short)((int)first_desc->flags_opcode | (int)((unsigned short)(((int)flags & 127) | (((int)opcode << 7) & 8064))));
  
#line 493 
  if (((int)*(skb->data) & 1) != 0) {
    
#line 494 
    flags = (unsigned short)((unsigned int)flags | 1U);
    
#line 495 
    memcpy((void *)(& first_desc->eth_addr),(void const *)skb->data,6UL);
  }
  else ;
  
#line 497 
  opcode = (unsigned char)1U;
  
#line 498 
  tmp_13 = skb_is_gso((struct sk_buff const *)skb);
  
#line 498 
  if ((int)tmp_13 != 0) {
    int tmp_3;
    unsigned int tmp_4;
    unsigned char *tmp_5;
    int tmp_10;
    
#line 499 
    tmp_3 = skb_transport_offset((struct sk_buff const *)skb);
    
#line 499 
    tmp_4 = tcp_hdrlen((struct sk_buff const *)skb);
    
#line 499 
    hdr_len = (unsigned char)((int)((unsigned char)tmp_3) + (int)((unsigned char)tmp_4));
    
#line 500 
    tmp_5 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 500 
    first_desc->mss = ((struct skb_shared_info *)tmp_5)->gso_size;
    
#line 501 
    first_desc->hdr_length = hdr_len;
    
#line 502 
    if ((unsigned int)protocol == 34525U) 
#line 502 
                                          opcode = (unsigned char)6U; else 
                                                                    
#line 502 
                                                                    opcode = (unsigned char)5U;
    
#line 507 
    copied = 0;
    
#line 508 
    offset = 2;
    
#line 510 
    if (((int)flags & 64) != 0) {
      int tmp_7;
      
#line 511 
      first_desc->hdr_length = (unsigned char)((unsigned int)first_desc->hdr_length + 4U);
      
#line 512 
      first_desc->tcp_hdr_offset = (unsigned char)4U;
      
#line 513 
      first_desc->ip_hdr_offset = (unsigned char)4U;
      
#line 516 
      flags = (unsigned short)((unsigned int)flags | 16U);
      
#line 519 
      hwdesc = tx_ring->desc_head + producer;
      
#line 520 
      (tx_ring->cmd_buf_arr + producer)->skb = (struct sk_buff *)0;
      {
        int tmp_6;
        
#line 522 
        int _min1 = 64 - offset;
        
#line 522 
        int _min2 = (int)hdr_len + 4;
        
#line 522 
        if (_min1 < _min2) 
#line 522 
                           tmp_6 = _min1; else 
#line 522 
                                               tmp_6 = _min2;
        
#line 522 
        tmp_7 = tmp_6;
      }
      
#line 522 
      copy_len = tmp_7;
      
#line 525 
      vh = (struct vlan_ethhdr *)hwdesc + 2U;
      
#line 526 
      skb_copy_from_linear_data((struct sk_buff const *)skb,(void *)vh,12U);
      
#line 527 
      vh->h_vlan_proto = (unsigned short)129U;
      
#line 528 
      if (0 != 0) 
#line 528 
                  vh->h_vlan_TCI = (unsigned short)(((int)vlan_tci << 8) | ((int)vlan_tci >> 8)); else 
                                                                    
#line 528 
                                                                    vh->h_vlan_TCI = __fswab16((unsigned short)((int)vlan_tci));
      
#line 530 
      skb_copy_from_linear_data_offset((struct sk_buff const *)skb,12,(void *)vh + 16U,(unsigned int)(copy_len + -16));
      
#line 533 
      copied = copy_len + -4;
      
#line 534 
      offset = 0;
      
#line 535 
      producer = (producer + 1U) & (tx_ring->num_desc + 4294967295U);
    }
    else ;
    
#line 538 
    goto ldv_56010;
    ldv_56009: 
#line 539 
    ;
    
#line 539 
    size = 64 - offset;
    {
      int tmp_9;
      
#line 540 
      int _min1_0 = size;
      
#line 540 
      int _min2_0 = (int)hdr_len - copied;
      
#line 540 
      if (_min1_0 < _min2_0) 
#line 540 
                             tmp_9 = _min1_0; else 
#line 540 
                                                   tmp_9 = _min2_0;
      
#line 540 
      tmp_10 = tmp_9;
    }
    
#line 540 
    copy_len = tmp_10;
    
#line 541 
    hwdesc = tx_ring->desc_head + producer;
    
#line 542 
    (tx_ring->cmd_buf_arr + producer)->skb = (struct sk_buff *)0;
    
#line 543 
    skb_copy_from_linear_data_offset((struct sk_buff const *)skb,copied,(void *)hwdesc + offset,(unsigned int)copy_len);
    
#line 546 
    copied += copy_len;
    
#line 547 
    offset = 0;
    
#line 548 
    producer = (producer + 1U) & (tx_ring->num_desc + 4294967295U);
    ldv_56010: 
#line 549 
    ;
    
#line 538 
    if ((int)hdr_len > copied) 
#line 540 
                               goto ldv_56009; else 
#line 543 
                                                    goto ldv_56011;
    ldv_56011: 
#line 544 
    ;
    
#line 551 
    tx_ring->producer = producer;
    
#line 552 
    ldv_inline_asm();
    
#line 553 
    adapter->stats.lso_frames += 1ULL;
  }
  else 
    
#line 555 
    if ((unsigned int)*((unsigned char *)skb + 145UL) == 6U) {
      
#line 556 
      if ((unsigned int)protocol == 2048U) {
        struct iphdr *tmp_11;
        
#line 557 
        tmp_11 = ip_hdr((struct sk_buff const *)skb);
        
#line 557 
        l4proto = tmp_11->protocol;
        
#line 559 
        if ((unsigned int)l4proto == 6U) 
#line 560 
                                         opcode = (unsigned char)2U;
        else 
          
#line 561 
          if ((unsigned int)l4proto == 17U) 
#line 562 
                                            opcode = (unsigned char)3U; else ;
      }
      else 
        
#line 563 
        if ((unsigned int)protocol == 34525U) {
          struct ipv6hdr *tmp_12;
          
#line 564 
          tmp_12 = ipv6_hdr((struct sk_buff const *)skb);
          
#line 564 
          l4proto = tmp_12->nexthdr;
          
#line 566 
          if ((unsigned int)l4proto == 6U) 
#line 567 
                                           opcode = (unsigned char)11U;
          else 
            
#line 568 
            if ((unsigned int)l4proto == 17U) 
#line 569 
                                              opcode = (unsigned char)12U; else ;
        }
        else ;
    }
    else ;
  
#line 572 
  tmp_14 = skb_transport_offset((struct sk_buff const *)skb);
  
#line 572 
  first_desc->tcp_hdr_offset = (unsigned char)((int)first_desc->tcp_hdr_offset + (int)((unsigned char)tmp_14));
  
#line 573 
  tmp_15 = skb_network_offset((struct sk_buff const *)skb);
  
#line 573 
  first_desc->ip_hdr_offset = (unsigned char)((int)first_desc->ip_hdr_offset + (int)((unsigned char)tmp_15));
  
#line 574 
  first_desc->flags_opcode = (unsigned short)((int)first_desc->flags_opcode | (int)((unsigned short)(((int)flags & 127) | (((int)opcode << 7) & 8064))));
  
#line 576 
  __retres = 0;
  return_label: 
#line 576 
                return __retres;
}


#line 579  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_map_tx_skb(struct pci_dev *pdev, struct sk_buff *skb, struct qlcnic_cmd_buffer *pbuf)
{
  int __retres;
  struct qlcnic_skb_frag *nf;
  struct skb_frag_struct *frag;
  int i;
  int nr_frags;
  dma_addr_t map;
  unsigned char *tmp;
  unsigned int tmp_0;
  int tmp_1;
  unsigned int tmp_2;
  unsigned char *tmp_3;
  unsigned int tmp_4;
  int tmp_5;
  unsigned int tmp_6;
  unsigned int tmp_7;
  
#line 587 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 587 
  nr_frags = (int)((struct skb_shared_info *)tmp)->nr_frags;
  
#line 588 
  nf = & pbuf->frag_array[0];
  
#line 590 
  tmp_0 = skb_headlen((struct sk_buff const *)skb);
  
#line 590 
  ;
  
#line 590 
  ;
  
#line 590 
  map = pci_map_single(pdev,(void *)skb->data,(unsigned long)tmp_0,1);
  
#line 592 
  tmp_1 = pci_dma_mapping_error(pdev,map);
  
#line 592 
  if (tmp_1 != 0) 
#line 593 
                  goto out_err; else ;
  
#line 595 
  nf->dma = map;
  
#line 596 
  tmp_2 = skb_headlen((struct sk_buff const *)skb);
  
#line 596 
  nf->length = (unsigned long long)tmp_2;
  
#line 598 
  i = 0;
  
#line 598 
  goto ldv_56025;
  ldv_56024: 
#line 599 
  ;
  
#line 599 
  tmp_3 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 599 
  frag = & ((struct skb_shared_info *)tmp_3)->frags[i];
  
#line 600 
  nf = & pbuf->frag_array[i + 1];
  
#line 601 
  tmp_4 = skb_frag_size((skb_frag_t const *)frag);
  
#line 601 
  ;
  
#line 601 
  ;
  
#line 601 
  map = skb_frag_dma_map(& pdev->dev,(skb_frag_t const *)frag,0UL,(unsigned long)tmp_4,(enum dma_data_direction)DMA_TO_DEVICE);
  
#line 603 
  tmp_5 = dma_mapping_error(& pdev->dev,map);
  
#line 603 
  if (tmp_5 != 0) 
#line 604 
                  goto unwind; else ;
  
#line 606 
  nf->dma = map;
  
#line 607 
  tmp_6 = skb_frag_size((skb_frag_t const *)frag);
  
#line 607 
  nf->length = (unsigned long long)tmp_6;
  
#line 598 
  i += 1;
  ldv_56025: 
#line 599 
  ;
  
#line 598 
  if (i < nr_frags) 
#line 600 
                    goto ldv_56024; else 
#line 603 
                                         goto ldv_56026;
  ldv_56026: 
#line 604 
  ;
  
#line 610 
  __retres = 0;
  
#line 610 
  goto return_label;
  unwind: 
#line 612 
  ;
  
#line 613 
  goto ldv_56028;
  ldv_56027: 
#line 614 
  ;
  
#line 614 
  nf = & pbuf->frag_array[i + 1];
  
#line 615 
  pci_unmap_page(pdev,nf->dma,(unsigned long)nf->length,1);
  ldv_56028: 
#line 616 
  ;
  
#line 613 
  i -= 1;
  
#line 613 
  if (i >= 0) 
#line 615 
              goto ldv_56027; else 
#line 618 
                                   goto ldv_56029;
  ldv_56029: 
#line 619 
  ;
  
#line 618 
  nf = & pbuf->frag_array[0];
  
#line 619 
  tmp_7 = skb_headlen((struct sk_buff const *)skb);
  
#line 619 
  ;
  
#line 619 
  ;
  
#line 619 
  pci_unmap_single(pdev,nf->dma,(unsigned long)tmp_7,1);
  out_err: 
#line 621 
  ;
  
#line 622 
  __retres = -12;
  return_label: 
#line 622 
                return __retres;
}


#line 625  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_unmap_buffers(struct pci_dev *pdev, struct sk_buff *skb, struct qlcnic_cmd_buffer *pbuf)
{
  int i;
  unsigned char *tmp;
  unsigned int tmp_0;
  
#line 628 
  struct qlcnic_skb_frag *nf = & pbuf->frag_array[0];
  
#line 629 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 629 
  int nr_frags = (int)((struct skb_shared_info *)tmp)->nr_frags;
  
#line 631 
  i = 0;
  
#line 631 
  goto ldv_56039;
  ldv_56038: 
#line 632 
  ;
  
#line 632 
  nf = & pbuf->frag_array[i + 1];
  
#line 633 
  pci_unmap_page(pdev,nf->dma,(unsigned long)nf->length,1);
  
#line 631 
  i += 1;
  ldv_56039: 
#line 632 
  ;
  
#line 631 
  if (i < nr_frags) 
#line 633 
                    goto ldv_56038; else 
#line 636 
                                         goto ldv_56040;
  ldv_56040: 
#line 637 
  ;
  
#line 636 
  nf = & pbuf->frag_array[0];
  
#line 637 
  tmp_0 = skb_headlen((struct sk_buff const *)skb);
  
#line 637 
  ;
  
#line 637 
  ;
  
#line 637 
  pci_unmap_single(pdev,nf->dma,(unsigned long)tmp_0,1);
  
#line 638 
  pbuf->skb = (struct sk_buff *)0;
  
#line 639 
  return;
}


#line 641  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
__inline static void qlcnic_clear_cmddesc(u64 *desc)
{
  
#line 643 
  *desc = 0ULL;
  
#line 644 
  *(desc + 2U) = 0ULL;
  
#line 645 
  *(desc + 7U) = 0ULL;
  
#line 646 
  return;
}


#line 648  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
netdev_tx_t qlcnic_xmit_frame(struct sk_buff *skb, struct net_device *netdev)
{
  netdev_tx_t __retres;
  struct qlcnic_host_tx_ring *tx_ring;
  struct qlcnic_cmd_buffer *pbuf;
  struct qlcnic_skb_frag *buffrag;
  struct cmd_desc_type0 *hwdesc;
  struct cmd_desc_type0 *first_desc;
  struct pci_dev *pdev;
  struct ethhdr *phdr;
  int i;
  int k;
  int frag_count;
  u32 producer;
  u32 num_txd;
  u16 protocol;
  int tmp_0;
  u16 tmp_3;
  unsigned char *tmp_4;
  int tmp_10;
  bool tmp_9;
  u32 tmp_12;
  int tmp_13;
  
#line 650 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 657 
  int delta = 0;
  
#line 660 
  bool l4_is_udp = (_Bool)0;
  
#line 662 
  tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
  
#line 662 
  if (tmp_0 == 0) {
    
#line 663 
    netif_tx_stop_all_queues(netdev);
    
#line 664 
    __retres = NETDEV_TX_BUSY;
    
#line 664 
    goto return_label;
  }
  else ;
  
#line 667 
  if ((adapter->flags & 512U) != 0U) {
    int tmp_2;
    bool tmp_1;
    
#line 668 
    phdr = (struct ethhdr *)skb->data;
    
#line 669 
    tmp_1 = ether_addr_equal((u8 const *)(& phdr->h_source),(u8 const *)(& adapter->mac_addr));
    
#line 669 
    if (tmp_1) 
#line 669 
               tmp_2 = 0; else 
#line 669 
                               tmp_2 = 1;
    
#line 669 
    if (tmp_2) 
#line 670 
               goto drop_packet; else ;
  }
  else ;
  
#line 673 
  tmp_3 = skb_get_queue_mapping((struct sk_buff const *)skb);
  
#line 673 
  tx_ring = adapter->tx_ring + (int)tmp_3;
  
#line 674 
  num_txd = tx_ring->num_desc;
  
#line 676 
  tmp_4 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 676 
  frag_count = (int)((struct skb_shared_info *)tmp_4)->nr_frags + 1;
  
#line 681 
  tmp_9 = skb_is_gso((struct sk_buff const *)skb);
  
#line 681 
  if (tmp_9) 
#line 681 
             tmp_10 = 0; else 
#line 681 
                              tmp_10 = 1;
  
#line 681 
  if (tmp_10) {
    
#line 681 
    if (frag_count > 14) {
      unsigned int tmp_6;
      unsigned char *tmp_5;
      unsigned char *tmp_7;
      unsigned char *tmp_8;
      
#line 682 
      i = 0;
      
#line 682 
      goto ldv_56066;
      ldv_56065: 
#line 683 
      ;
      
#line 683 
      tmp_5 = skb_end_pointer((struct sk_buff const *)skb);
      
#line 683 
      tmp_6 = skb_frag_size((skb_frag_t const *)(& ((struct skb_shared_info *)tmp_5)->frags[i]));
      
#line 683 
      delta = (int)(tmp_6 + (unsigned int)delta);
      
#line 682 
      i += 1;
      ldv_56066: 
#line 683 
      ;
      
#line 682 
      if (frag_count + -14 > i) 
#line 684 
                                goto ldv_56065; else 
#line 687 
                                                     goto ldv_56067;
      ldv_56067: 
#line 688 
      ;
      
#line 685 
      tmp_7 = __pskb_pull_tail(skb,delta);
      
#line 685 
      if (tmp_7 == (unsigned char *)0U) 
#line 686 
                                        goto drop_packet; else ;
      
#line 688 
      tmp_8 = skb_end_pointer((struct sk_buff const *)skb);
      
#line 688 
      frag_count = (int)((struct skb_shared_info *)tmp_8)->nr_frags + 1;
    }
    else ;
  }
  else ;
  
#line 691 
  tmp_12 = qlcnic_tx_avail(tx_ring);
  
#line 691 
  if ((long)(tmp_12 <= 10U) != 0L) {
    u32 tmp_11;
    
#line 692 
    netif_tx_start_queue(tx_ring->txq);
    
#line 693 
    tmp_11 = qlcnic_tx_avail(tx_ring);
    
#line 693 
    if (tmp_11 > 10U) 
#line 694 
                      netif_tx_start_queue(tx_ring->txq);
    else {
      
#line 696 
      tx_ring->tx_stats.xmit_off += 1ULL;
      
#line 697 
      __retres = NETDEV_TX_BUSY;
      
#line 697 
      goto return_label;
    }
  }
  else ;
  
#line 701 
  producer = tx_ring->producer;
  
#line 702 
  pbuf = tx_ring->cmd_buf_arr + producer;
  
#line 703 
  pdev = adapter->pdev;
  
#line 704 
  first_desc = tx_ring->desc_head + producer;
  
#line 705 
  hwdesc = tx_ring->desc_head + producer;
  
#line 706 
  qlcnic_clear_cmddesc((u64 *)hwdesc);
  
#line 708 
  tmp_13 = qlcnic_map_tx_skb(pdev,skb,pbuf);
  
#line 708 
  if (tmp_13 != 0) {
    
#line 709 
    adapter->stats.tx_dma_map_error += 1ULL;
    
#line 710 
    goto drop_packet;
  }
  else ;
  
#line 713 
  pbuf->skb = skb;
  
#line 714 
  pbuf->frag_count = (unsigned int)frag_count;
  
#line 716 
  first_desc->nfrags__length = ((unsigned int)frag_count & 255U) | (skb->len << 8);
  
#line 717 
  first_desc->port_ctxid = (unsigned char)(((int)adapter->portnum & 15) | ((int)adapter->portnum << 4));
  
#line 719 
  i = 0;
  
#line 719 
  goto ldv_56074;
  ldv_56073: 
#line 720 
  ;
  
#line 720 
  k = i % 4;
  
#line 722 
  if (k == 0 && i > 0) {
    
#line 724 
    producer = (producer + 1U) & (num_txd + 4294967295U);
    
#line 725 
    hwdesc = tx_ring->desc_head + producer;
    
#line 726 
    qlcnic_clear_cmddesc((u64 *)hwdesc);
    
#line 727 
    (tx_ring->cmd_buf_arr + producer)->skb = (struct sk_buff *)0;
  }
  else ;
  
#line 730 
  buffrag = & pbuf->frag_array[i];
  
#line 731 
  hwdesc->buffer_length[k] = (unsigned short)buffrag->length;
  
#line 732 
  switch (k) {
    case 0: 
#line 733 
    ;
    
#line 734 
    hwdesc->addr_buffer1 = buffrag->dma;
    
#line 735 
    goto ldv_56069;
    case 1: 
#line 736 
    ;
    
#line 737 
    hwdesc->addr_buffer2 = buffrag->dma;
    
#line 738 
    goto ldv_56069;
    case 2: 
#line 739 
    ;
    
#line 740 
    hwdesc->addr_buffer3 = buffrag->dma;
    
#line 741 
    goto ldv_56069;
    case 3: 
#line 742 
    ;
    
#line 743 
    hwdesc->addr_buffer4 = buffrag->dma;
    
#line 744 
    goto ldv_56069;
  }
  ldv_56069: 
#line 746 
  ;
  
#line 719 
  i += 1;
  ldv_56074: 
#line 720 
  ;
  
#line 719 
  if (i < frag_count) 
#line 721 
                      goto ldv_56073; else 
#line 724 
                                           goto ldv_56075;
  ldv_56075: 
#line 725 
  ;
  
#line 748 
  tx_ring->producer = (producer + 1U) & (num_txd + 4294967295U);
  
#line 749 
  ldv_inline_asm();
  
#line 751 
  if (0 != 0) 
#line 751 
              protocol = (unsigned short)(((int)skb->protocol << 8) | ((int)skb->protocol >> 8)); else 
                                                                    
#line 751 
                                                                    protocol = __fswab16((unsigned short)((int)skb->protocol));
  
#line 752 
  if ((unsigned int)protocol == 2048U) {
    struct iphdr *tmp_15;
    
#line 753 
    tmp_15 = ip_hdr((struct sk_buff const *)skb);
    
#line 753 
    l4_is_udp = (_Bool)((unsigned int)tmp_15->protocol == 17U);
  }
  else 
    
#line 754 
    if ((unsigned int)protocol == 34525U) {
      struct ipv6hdr *tmp_16;
      
#line 755 
      tmp_16 = ipv6_hdr((struct sk_buff const *)skb);
      
#line 755 
      l4_is_udp = (_Bool)((unsigned int)tmp_16->nexthdr == 17U);
    }
    else ;
  
#line 758 
  if ((unsigned int)*((unsigned char *)skb + 146UL) == 0U || ! l4_is_udp) 
    
#line 758 
    goto _LOR;
  else {
    int tmp_20;
    bool tmp_19;
    
#line 759 
    tmp_19 = qlcnic_encap_tx_offload(adapter);
    
#line 759 
    if (tmp_19) 
#line 759 
                tmp_20 = 0; else 
#line 759 
                                 tmp_20 = 1;
    
#line 759 
    if (tmp_20) {
      _LOR: {
              int tmp_17;
              
#line 760 
              tmp_17 = qlcnic_tx_pkt(adapter,first_desc,skb,tx_ring);
              
#line 760 
              if ((long)(tmp_17 != 0) != 0L) 
#line 762 
                                             goto unwind_buff; else ;
            }
    }
    else {
      int tmp_18;
      
#line 764 
      tmp_18 = qlcnic_tx_encap_pkt(adapter,first_desc,skb,tx_ring);
      
#line 764 
      if ((long)(tmp_18 != 0) != 0L) 
#line 766 
                                     goto unwind_buff; else ;
    }
  }
  
#line 769 
  if ((int)adapter->drv_mac_learn != 0) 
#line 770 
                                        qlcnic_send_filter(adapter,first_desc,skb); else ;
  
#line 772 
  tx_ring->tx_stats.tx_bytes += (unsigned long long)skb->len;
  
#line 773 
  tx_ring->tx_stats.xmit_called += 1ULL;
  
#line 775 
  qlcnic_update_cmd_producer(tx_ring);
  
#line 777 
  __retres = NETDEV_TX_OK;
  
#line 777 
  goto return_label;
  unwind_buff: 
#line 779 
  ;
  
#line 780 
  qlcnic_unmap_buffers(pdev,skb,pbuf);
  drop_packet: 
#line 781 
  ;
  
#line 782 
  adapter->stats.txdropped += 1ULL;
  
#line 783 
  dev_kfree_skb_any(skb);
  
#line 784 
  __retres = NETDEV_TX_OK;
  return_label: 
#line 784 
                return __retres;
}


#line 787  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_advert_link_change(struct qlcnic_adapter *adapter, int linkup)
{
  
#line 789 
  struct net_device *netdev = adapter->netdev;
  
#line 791 
  if ((unsigned int)(adapter->ahw)->linkup != 0U && linkup == 0) {
    
#line 792 
    netdev_info((struct net_device const *)netdev,"NIC Link is down\n");
    
#line 793 
    (adapter->ahw)->linkup = (unsigned char)0U;
    
#line 794 
    netif_carrier_off(netdev);
  }
  else 
    
#line 795 
    if ((unsigned int)(adapter->ahw)->linkup == 0U && linkup != 0) {
      bool tmp;
      
#line 796 
      (adapter->ahw)->linkup = (unsigned char)1U;
      
#line 801 
      tmp = qlcnic_83xx_check(adapter);
      
#line 801 
      if ((int)tmp != 0) {
        
#line 801 
        if ((unsigned int)(adapter->ahw)->lb_mode != 0U) {
          
#line 802 
          netdev_info((struct net_device const *)netdev,"NIC Link is up for loopback test\n");
          
#line 803 
          goto return_label;
        }
        else ;
      }
      else ;
      
#line 806 
      netdev_info((struct net_device const *)netdev,"NIC Link is up\n");
      
#line 807 
      netif_carrier_on(netdev);
    }
    else ;
  return_label: 
#line 809 
                return;
}


#line 811  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_alloc_rx_skb(struct qlcnic_adapter *adapter, struct qlcnic_host_rds_ring *rds_ring, struct qlcnic_rx_buffer *buffer)
{
  int __retres;
  struct sk_buff *skb;
  dma_addr_t dma;
  int tmp;
  
#line 817 
  struct pci_dev *pdev = adapter->pdev;
  
#line 819 
  skb = netdev_alloc_skb(adapter->netdev,rds_ring->skb_size);
  
#line 820 
  if (skb == (struct sk_buff *)0) {
    
#line 821 
    adapter->stats.skb_alloc_failure += 1ULL;
    
#line 822 
    __retres = -12;
    
#line 822 
    goto return_label;
  }
  else ;
  
#line 825 
  skb_reserve(skb,0);
  
#line 826 
  dma = pci_map_single(pdev,(void *)skb->data,(unsigned long)rds_ring->dma_size,2);
  
#line 829 
  tmp = pci_dma_mapping_error(pdev,dma);
  
#line 829 
  if (tmp != 0) {
    
#line 830 
    adapter->stats.rx_dma_map_error += 1ULL;
    
#line 831 
    dev_kfree_skb_any(skb);
    
#line 832 
    __retres = -12;
    
#line 832 
    goto return_label;
  }
  else ;
  
#line 835 
  buffer->skb = skb;
  
#line 836 
  buffer->dma = dma;
  
#line 838 
  __retres = 0;
  return_label: 
#line 838 
                return __retres;
}


#line 841  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_post_rx_buffers_nodb(struct qlcnic_adapter *adapter, struct qlcnic_host_rds_ring *rds_ring, u8 ring_id)
{
  struct rcv_desc *pdesc;
  struct qlcnic_rx_buffer *buffer;
  uint32_t producer;
  uint32_t handle;
  struct list_head *head;
  int tmp;
  struct qlcnic_rx_buffer *tmp_0;
  int tmp_2;
  
#line 847 
  int count = 0;
  
#line 851 
  tmp = ldv_spin_trylock_84(& rds_ring->lock);
  
#line 851 
  if (tmp == 0) 
#line 852 
                goto return_label; else ;
  
#line 854 
  producer = rds_ring->producer;
  
#line 855 
  head = & rds_ring->free_list;
  
#line 856 
  goto ldv_56105;
  ldv_56104: 
#line 857 
  ;
  {
    
#line 857 
    struct list_head const *__mptr = (struct list_head const *)head->next;
    
#line 857 
    tmp_0 = (struct qlcnic_rx_buffer *)__mptr + 18446744073709551600U;
  }
  
#line 857 
  buffer = tmp_0;
  
#line 859 
  if (buffer->skb == (struct sk_buff *)0) {
    int tmp_1;
    
#line 860 
    tmp_1 = qlcnic_alloc_rx_skb(adapter,rds_ring,buffer);
    
#line 860 
    if (tmp_1 != 0) 
#line 861 
                    goto ldv_56103; else ;
  }
  else ;
  
#line 863 
  count += 1;
  
#line 864 
  list_del(& buffer->list);
  
#line 867 
  pdesc = rds_ring->desc_head + producer;
  
#line 868 
  handle = qlcnic_get_ref_handle(adapter,(unsigned short)((int)buffer->ref_handle),(unsigned char)((int)ring_id));
  
#line 870 
  pdesc->reference_handle = (unsigned short)handle;
  
#line 871 
  pdesc->buffer_length = rds_ring->dma_size;
  
#line 872 
  pdesc->addr_buffer = buffer->dma;
  
#line 873 
  producer = (producer + 1U) & (rds_ring->num_desc + 4294967295U);
  ldv_56105: 
#line 874 
  ;
  
#line 856 
  tmp_2 = list_empty((struct list_head const *)head);
  
#line 856 
  if (tmp_2 == 0) 
#line 858 
                  goto ldv_56104; else 
#line 861 
                                       goto ldv_56103;
  ldv_56103: 
#line 862 
  ;
  
#line 875 
  if (count != 0) {
    
#line 876 
    rds_ring->producer = producer;
    
#line 877 
    writel((producer + 4294967295U) & (rds_ring->num_desc + 4294967295U),(void volatile *)rds_ring->crb_rcv_producer);
  }
  else ;
  
#line 880 
  ldv_spin_unlock_85(& rds_ring->lock);
  return_label: 
#line 881 
                return;
}


#line 883  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_process_cmd_ring(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring, int budget)
{
  int __retres;
  u32 sw_consumer;
  u32 hw_consumer;
  int i;
  int done;
  struct qlcnic_cmd_buffer *buffer;
  struct qlcnic_skb_frag *frag;
  int tmp;
  
#line 888 
  int count = 0;
  
#line 890 
  struct pci_dev *pdev = adapter->pdev;
  
#line 891 
  struct net_device *netdev = adapter->netdev;
  
#line 894 
  tmp = ldv_spin_trylock_86(& tx_ring->tx_clean_lock);
  
#line 894 
  if (tmp == 0) {
    
#line 895 
    __retres = 1;
    
#line 895 
    goto return_label;
  }
  else ;
  
#line 897 
  sw_consumer = tx_ring->sw_consumer;
  
#line 898 
  hw_consumer = *(tx_ring->hw_consumer);
  
#line 900 
  goto ldv_56125;
  ldv_56124: 
#line 901 
  ;
  
#line 901 
  buffer = tx_ring->cmd_buf_arr + sw_consumer;
  
#line 902 
  if (buffer->skb != (struct sk_buff *)0) {
    
#line 903 
    frag = & buffer->frag_array[0];
    
#line 904 
    pci_unmap_single(pdev,frag->dma,(unsigned long)frag->length,1);
    
#line 906 
    frag->dma = 0ULL;
    
#line 907 
    i = 1;
    
#line 907 
    goto ldv_56121;
    ldv_56120: 
#line 908 
    ;
    
#line 908 
    frag += 1;
    
#line 909 
    pci_unmap_page(pdev,frag->dma,(unsigned long)frag->length,1);
    
#line 911 
    frag->dma = 0ULL;
    
#line 907 
    i += 1;
    ldv_56121: 
#line 908 
    ;
    
#line 907 
    if (buffer->frag_count > (unsigned int)i) 
#line 909 
                                              goto ldv_56120; else 
#line 912 
                                                                   goto ldv_56122;
    ldv_56122: 
#line 913 
    ;
    
#line 913 
    tx_ring->tx_stats.xmit_finished += 1ULL;
    
#line 914 
    dev_kfree_skb_any(buffer->skb);
    
#line 915 
    buffer->skb = (struct sk_buff *)0;
  }
  else ;
  
#line 918 
  sw_consumer = (sw_consumer + 1U) & (tx_ring->num_desc + 4294967295U);
  
#line 919 
  count += 1;
  
#line 919 
  ;
  
#line 919 
  if (count >= budget) 
#line 920 
                       goto ldv_56123; else ;
  ldv_56125: 
#line 921 
  ;
  
#line 900 
  if (sw_consumer != hw_consumer) 
#line 902 
                                  goto ldv_56124; else 
#line 905 
                                                       goto ldv_56123;
  ldv_56123: 
#line 906 
  ;
  
#line 923 
  tx_ring->sw_consumer = sw_consumer;
  
#line 925 
  if (count != 0) {
    bool tmp_3;
    
#line 925 
    tmp_3 = netif_running((struct net_device const *)netdev);
    
#line 925 
    if ((int)tmp_3 != 0) {
      bool tmp_1;
      
#line 927 
      ldv_inline_asm();
      
#line 927 
      tmp_1 = netif_tx_queue_stopped((struct netdev_queue const *)tx_ring->txq);
      
#line 927 
      if ((int)tmp_1 != 0) {
        bool tmp_2;
        
#line 927 
        tmp_2 = netif_carrier_ok((struct net_device const *)netdev);
        
#line 927 
        if ((int)tmp_2 != 0) {
          u32 tmp_0;
          
#line 929 
          tmp_0 = qlcnic_tx_avail(tx_ring);
          
#line 929 
          if (tmp_0 > 10U) {
            
#line 930 
            netif_tx_wake_queue(tx_ring->txq);
            
#line 931 
            tx_ring->tx_stats.xmit_on += 1ULL;
          }
          else ;
        }
        else ;
      }
      else ;
      
#line 934 
      adapter->tx_timeo_cnt = (unsigned char)0U;
    }
    else ;
  }
  else ;
  
#line 949 
  hw_consumer = *(tx_ring->hw_consumer);
  
#line 950 
  done = sw_consumer == hw_consumer;
  
#line 952 
  ldv_spin_unlock_87(& tx_ring->tx_clean_lock);
  
#line 954 
  __retres = done;
  return_label: 
#line 954 
                return __retres;
}


#line 957  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_poll(struct napi_struct *napi, int budget)
{
  int tx_complete;
  int work_done;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_adapter *adapter;
  struct qlcnic_host_tx_ring *tx_ring;
  struct qlcnic_host_sds_ring *tmp;
  {
    
#line 964 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 964 
    tmp = (struct qlcnic_host_sds_ring *)__mptr + 18446744073709551576U;
  }
  
#line 964 
  sds_ring = tmp;
  
#line 965 
  adapter = sds_ring->adapter;
  
#line 966 
  tx_ring = sds_ring->tx_ring;
  
#line 968 
  tx_complete = qlcnic_process_cmd_ring(adapter,tx_ring,budget);
  
#line 970 
  work_done = qlcnic_process_rcv_ring(sds_ring,budget);
  
#line 973 
  if (tx_complete == 0) 
#line 974 
                        work_done = budget; else ;
  
#line 976 
  if (work_done < budget) {
    int tmp_0;
    
#line 977 
    napi_complete(& sds_ring->napi);
    
#line 978 
    tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
    
#line 978 
    if (tmp_0 != 0) {
      
#line 979 
      qlcnic_enable_sds_intr(adapter,sds_ring);
      
#line 980 
      qlcnic_enable_tx_intr(adapter,tx_ring);
    }
    else ;
  }
  else ;
  
#line 984 
  return work_done;
}


#line 987  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_tx_poll(struct napi_struct *napi, int budget)
{
  struct qlcnic_host_tx_ring *tx_ring;
  struct qlcnic_adapter *adapter;
  int work_done;
  struct qlcnic_host_tx_ring *tmp;
  {
    
#line 993 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 993 
    tmp = (struct qlcnic_host_tx_ring *)__mptr + 18446744073709551488U;
  }
  
#line 993 
  tx_ring = tmp;
  
#line 994 
  adapter = tx_ring->adapter;
  
#line 996 
  work_done = qlcnic_process_cmd_ring(adapter,tx_ring,budget);
  
#line 997 
  if (work_done != 0) {
    int tmp_0;
    
#line 998 
    napi_complete(& tx_ring->napi);
    
#line 999 
    tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
    
#line 999 
    if (tmp_0 != 0) 
#line 1000 
                    qlcnic_enable_tx_intr(adapter,tx_ring); else ;
  }
  else 
#line 1003 
       work_done = budget;
  
#line 1006 
  return work_done;
}


#line 1009  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_rx_poll(struct napi_struct *napi, int budget)
{
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_adapter *adapter;
  int work_done;
  struct qlcnic_host_sds_ring *tmp;
  {
    
#line 1015 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 1015 
    tmp = (struct qlcnic_host_sds_ring *)__mptr + 18446744073709551576U;
  }
  
#line 1015 
  sds_ring = tmp;
  
#line 1016 
  adapter = sds_ring->adapter;
  
#line 1018 
  work_done = qlcnic_process_rcv_ring(sds_ring,budget);
  
#line 1020 
  if (work_done < budget) {
    int tmp_0;
    
#line 1021 
    napi_complete(& sds_ring->napi);
    
#line 1022 
    tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
    
#line 1022 
    if (tmp_0 != 0) 
#line 1023 
                    qlcnic_enable_sds_intr(adapter,sds_ring); else ;
  }
  else ;
  
#line 1026 
  return work_done;
}


#line 1029  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_handle_linkevent(struct qlcnic_adapter *adapter, struct qlcnic_fw_msg *msg)
{
  u32 cable_OUI;
  u16 cable_len;
  u16 link_speed;
  u8 link_status;
  u8 module;
  u8 duplex;
  u8 autoneg;
  
#line 1034 
  u8 lb_status = (unsigned char)0U;
  
#line 1035 
  struct net_device *netdev = adapter->netdev;
  
#line 1037 
  (adapter->ahw)->has_link_events = (unsigned char)1U;
  
#line 1039 
  cable_OUI = (unsigned int)msg->__anonCompField_qlcnic_fw_msg_116.__anonCompField___anonunion_1145_115.body[1];
  
#line 1040 
  cable_len = (unsigned short)(msg->__anonCompField_qlcnic_fw_msg_116.__anonCompField___anonunion_1145_115.body[1] >> 32);
  
#line 1041 
  link_speed = (unsigned short)(msg->__anonCompField_qlcnic_fw_msg_116.__anonCompField___anonunion_1145_115.body[1] >> 48);
  
#line 1043 
  link_status = (unsigned char)msg->__anonCompField_qlcnic_fw_msg_116.__anonCompField___anonunion_1145_115.body[2];
  
#line 1044 
  duplex = (unsigned char)(msg->__anonCompField_qlcnic_fw_msg_116.__anonCompField___anonunion_1145_115.body[2] >> 16);
  
#line 1045 
  autoneg = (unsigned char)(msg->__anonCompField_qlcnic_fw_msg_116.__anonCompField___anonunion_1145_115.body[2] >> 24);
  
#line 1046 
  lb_status = (unsigned char)((unsigned int)((unsigned char)(msg->__anonCompField_qlcnic_fw_msg_116.__anonCompField___anonunion_1145_115.body[2] >> 32)) & 3U);
  
#line 1048 
  module = (unsigned char)(msg->__anonCompField_qlcnic_fw_msg_116.__anonCompField___anonunion_1145_115.body[2] >> 8);
  
#line 1049 
  if ((unsigned int)module == 6U) 
#line 1050 
                                  _dev_info((struct device const *)(& netdev->dev),"unsupported cable: OUI 0x%x, length %d\n",cable_OUI,(int)cable_len);
  else 
    
#line 1053 
    if ((unsigned int)module == 7U) 
#line 1054 
                                    _dev_info((struct device const *)(& netdev->dev),"unsupported cable length %d\n",(int)cable_len); else ;
  
#line 1057 
  if ((unsigned int)link_status == 0U && (unsigned int)lb_status + 255U <= 1U) 
    
#line 1059 
    (adapter->ahw)->loopback_state = (unsigned char)((unsigned int)(adapter->ahw)->loopback_state | 1U); else ;
  
#line 1061 
  qlcnic_advert_link_change(adapter,(int)link_status);
  
#line 1063 
  if ((unsigned int)duplex == 1U) 
#line 1064 
                                  (adapter->ahw)->link_duplex = (unsigned short)1U; else 
                                                                    
#line 1066 
                                                                    (adapter->ahw)->link_duplex = (unsigned short)0U;
  
#line 1068 
  (adapter->ahw)->module_type = (unsigned short)module;
  
#line 1069 
  (adapter->ahw)->link_autoneg = (unsigned short)autoneg;
  
#line 1071 
  if ((unsigned int)link_status != 0U) 
#line 1072 
                                       (adapter->ahw)->link_speed = link_speed;
  else {
    
#line 1074 
    (adapter->ahw)->link_speed = (unsigned short)65535U;
    
#line 1075 
    (adapter->ahw)->link_duplex = (unsigned short)255U;
  }
  
#line 1077 
  return;
}


#line 1079  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_handle_fw_message(int desc_cnt, int index, struct qlcnic_host_sds_ring *sds_ring)
{
  struct qlcnic_fw_msg msg;
  struct status_desc *desc;
  struct qlcnic_adapter *adapter;
  struct device *dev;
  int opcode;
  int ret;
  int tmp;
  int tmp_0;
  
#line 1086 
  int i = 0;
  
#line 1088 
  goto ldv_56181;
  ldv_56180: 
#line 1089 
  ;
  
#line 1089 
  desc = sds_ring->desc_head + index;
  
#line 1090 
  tmp = i;
  
#line 1090 
  i += 1;
  
#line 1090 
  msg.__anonCompField_qlcnic_fw_msg_116.words[tmp] = desc->status_desc_data[0];
  
#line 1091 
  tmp_0 = i;
  
#line 1091 
  i += 1;
  
#line 1091 
  msg.__anonCompField_qlcnic_fw_msg_116.words[tmp_0] = desc->status_desc_data[1];
  
#line 1093 
  index = (int)((unsigned int)(index + 1) & (sds_ring->num_desc + 4294967295U));
  
#line 1094 
  desc_cnt -= 1;
  ldv_56181: 
#line 1095 
  ;
  
#line 1088 
  if (desc_cnt > 0 && i <= 7) 
#line 1090 
                              goto ldv_56180; else 
#line 1093 
                                                   goto ldv_56182;
  ldv_56182: 
#line 1094 
  ;
  
#line 1097 
  adapter = sds_ring->adapter;
  
#line 1098 
  dev = & (adapter->pdev)->dev;
  
#line 1099 
  opcode = (int)(msg.__anonCompField_qlcnic_fw_msg_116.__anonCompField___anonunion_1145_115.body[0] >> 32) & 255;
  
#line 1101 
  switch (opcode) {
    case 141: 
#line 1102 
    ;
    
#line 1103 
    qlcnic_handle_linkevent(adapter,& msg);
    
#line 1104 
    goto ldv_56184;
    case 143: 
#line 1105 
    ;
    
#line 1106 
    ret = (int)msg.__anonCompField_qlcnic_fw_msg_116.__anonCompField___anonunion_1145_115.body[1];
    
#line 1107 
    switch (ret) {
      case 0: 
#line 1108 
      ;
      
#line 1109 
      (adapter->ahw)->loopback_state = (unsigned char)((unsigned int)(adapter->ahw)->loopback_state | 2U);
      
#line 1110 
      goto ldv_56187;
      case 1: 
#line 1111 
      ;
      
#line 1112 
      _dev_info((struct device const *)dev,"loopback already in progress\n");
      
#line 1113 
      (adapter->ahw)->diag_cnt = -115;
      
#line 1114 
      goto ldv_56187;
      case 2: 
#line 1115 
      ;
      
#line 1116 
      _dev_info((struct device const *)dev,"loopback cable is not connected\n");
      
#line 1117 
      (adapter->ahw)->diag_cnt = -19;
      
#line 1118 
      goto ldv_56187;
      default: 
#line 1119 
      ;
      
#line 1120 
      _dev_info((struct device const *)dev,"loopback configure request failed, err %x\n",ret);
      
#line 1123 
      (adapter->ahw)->diag_cnt = -5;
      
#line 1124 
      goto ldv_56187;
    }
    ldv_56187: 
#line 1126 
    ;
    
#line 1126 
    goto ldv_56184;
    case 144: 
#line 1127 
    ;
    
#line 1128 
    qlcnic_dcb_aen_handler(adapter->dcb,(void *)(& msg));
    
#line 1129 
    goto ldv_56184;
    default: 
#line 1130 
    ;
    
#line 1131 
    goto ldv_56184;
  }
  ldv_56184: 
#line 1133 
  ;
  
#line 1134 
  return;
}


#line 1135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static struct sk_buff *qlcnic_process_rxbuf(struct qlcnic_adapter *adapter, struct qlcnic_host_rds_ring *ring, u16 index, u16 cksum)
{
  struct sk_buff *__retres;
  struct qlcnic_rx_buffer *buffer;
  struct sk_buff *skb;
  
#line 1142 
  buffer = ring->rx_buf_arr + (int)index;
  
#line 1143 
  if ((long)(buffer->skb == (struct sk_buff *)0) != 0L) {
    {
      
#line 1144 
      int __ret_warn_on = 1;
      
#line 1144 
      if ((long)(__ret_warn_on != 0) != 0L) 
#line 1144 
                                            warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c",1144); else ;
      
#line 1144 
      long tmp = (long)(__ret_warn_on != 0);
    }
    
#line 1145 
    __retres = (struct sk_buff *)0;
    
#line 1145 
    goto return_label;
  }
  else ;
  
#line 1148 
  pci_unmap_single(adapter->pdev,buffer->dma,(unsigned long)ring->dma_size,2);
  
#line 1151 
  skb = buffer->skb;
  
#line 1152 
  if ((long)(((adapter->netdev)->features & 17179869184ULL) != 0ULL) != 0L && (long)(((unsigned int)cksum == 2U || (unsigned int)cksum == 0U) != 0) != 0L) {
    
#line 1154 
    adapter->stats.csummed += 1ULL;
    
#line 1155 
    skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
  }
  else 
#line 1157 
       skb_checksum_none_assert((struct sk_buff const *)skb);
  
#line 1161 
  buffer->skb = (struct sk_buff *)0;
  
#line 1163 
  __retres = skb;
  return_label: 
#line 1163 
                return __retres;
}


#line 1166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
__inline static int qlcnic_check_rx_tagging(struct qlcnic_adapter *adapter, struct sk_buff *skb, u16 *vlan_tag)
{
  int __retres;
  struct ethhdr *eth_hdr_0;
  int tmp;
  
#line 1171 
  tmp = __vlan_get_tag((struct sk_buff const *)skb,vlan_tag);
  
#line 1171 
  if (tmp == 0) {
    
#line 1172 
    eth_hdr_0 = (struct ethhdr *)skb->data;
    
#line 1173 
    memmove((void *)(skb->data + 4U),(void const *)eth_hdr_0,12UL);
    
#line 1174 
    skb_pull(skb,4U);
  }
  else ;
  
#line 1176 
  if ((unsigned int)adapter->rx_pvid == 0U) {
    
#line 1177 
    __retres = 0;
    
#line 1177 
    goto return_label;
  }
  else ;
  
#line 1179 
  if ((int)*vlan_tag == (int)adapter->rx_pvid) {
    
#line 1181 
    *vlan_tag = (unsigned short)65535U;
    
#line 1182 
    __retres = 0;
    
#line 1182 
    goto return_label;
  }
  else ;
  
#line 1184 
  if ((adapter->flags & 256U) != 0U) {
    
#line 1185 
    __retres = 0;
    
#line 1185 
    goto return_label;
  }
  else ;
  
#line 1187 
  __retres = -22;
  return_label: 
#line 1187 
                return __retres;
}


#line 1191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static struct qlcnic_rx_buffer *qlcnic_process_rcv(struct qlcnic_adapter *adapter, struct qlcnic_host_sds_ring *sds_ring, int ring, u64 sts_data0)
{
  struct qlcnic_rx_buffer *__retres;
  struct qlcnic_rx_buffer *buffer;
  struct sk_buff *skb;
  struct qlcnic_host_rds_ring *rds_ring;
  int index;
  int length;
  int cksum;
  int pkt_offset;
  int is_lb_pkt;
  u16 t_vid;
  int tmp;
  
#line 1195 
  struct net_device *netdev = adapter->netdev;
  
#line 1196 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 1201 
  u16 vid = (unsigned short)65535U;
  
#line 1203 
  if ((long)((int)adapter->max_rds_rings <= ring) != 0L) {
    
#line 1204 
    __retres = (struct qlcnic_rx_buffer *)0;
    
#line 1204 
    goto return_label;
  }
  else ;
  
#line 1206 
  rds_ring = recv_ctx->rds_rings + ring;
  
#line 1208 
  index = (int)(sts_data0 >> 28) & 65535;
  
#line 1209 
  if ((long)(rds_ring->num_desc <= (unsigned int)index) != 0L) {
    
#line 1210 
    __retres = (struct qlcnic_rx_buffer *)0;
    
#line 1210 
    goto return_label;
  }
  else ;
  
#line 1212 
  buffer = rds_ring->rx_buf_arr + index;
  
#line 1213 
  length = (int)(sts_data0 >> 12) & 65535;
  
#line 1214 
  cksum = (int)(sts_data0 >> 4) & 15;
  
#line 1215 
  pkt_offset = (int)(sts_data0 >> 48) & 31;
  
#line 1217 
  skb = qlcnic_process_rxbuf(adapter,rds_ring,(unsigned short)((int)((unsigned short)index)),(unsigned short)((int)((unsigned short)cksum)));
  
#line 1218 
  if (skb == (struct sk_buff *)0) {
    
#line 1219 
    __retres = buffer;
    
#line 1219 
    goto return_label;
  }
  else ;
  
#line 1221 
  if ((int)adapter->rx_mac_learn != 0) {
    
#line 1222 
    t_vid = (unsigned short)0U;
    
#line 1223 
    is_lb_pkt = qlcnic_82xx_is_lb_pkt(sts_data0);
    
#line 1224 
    qlcnic_add_lb_filter(adapter,skb,is_lb_pkt,(unsigned short)((int)t_vid));
  }
  else ;
  
#line 1227 
  if (rds_ring->skb_size < (unsigned int)length) 
#line 1228 
                                                 skb_put(skb,rds_ring->skb_size); else 
                                                                    
#line 1230 
                                                                    skb_put(skb,(unsigned int)length);
  
#line 1232 
  if (pkt_offset != 0) 
#line 1233 
                       skb_pull(skb,(unsigned int)pkt_offset); else ;
  
#line 1235 
  tmp = qlcnic_check_rx_tagging(adapter,skb,& vid);
  
#line 1235 
  if ((long)(tmp != 0) != 0L) {
    
#line 1236 
    adapter->stats.rxdropped += 1ULL;
    
#line 1237 
    consume_skb(skb);
    
#line 1238 
    __retres = buffer;
    
#line 1238 
    goto return_label;
  }
  else ;
  
#line 1241 
  skb->protocol = eth_type_trans(skb,netdev);
  
#line 1243 
  if ((unsigned int)vid != 65535U) 
#line 1244 
                                   __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid)); else ;
  
#line 1246 
  napi_gro_receive(& sds_ring->napi,skb);
  
#line 1248 
  adapter->stats.rx_pkts += 1ULL;
  
#line 1249 
  adapter->stats.rxbytes += (unsigned long long)length;
  
#line 1251 
  __retres = buffer;
  return_label: 
#line 1251 
                return __retres;
}


#line 1259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static struct qlcnic_rx_buffer *qlcnic_process_lro(struct qlcnic_adapter *adapter, int ring, u64 sts_data0, u64 sts_data1)
{
  struct qlcnic_rx_buffer *__retres;
  struct qlcnic_rx_buffer *buffer;
  struct sk_buff *skb;
  struct qlcnic_host_rds_ring *rds_ring;
  struct iphdr *iph;
  struct ipv6hdr *ipv6h;
  struct tcphdr *th;
  bool push;
  bool timestamp;
  int index;
  int l2_hdr_offset;
  int l4_hdr_offset;
  int is_lb_pkt;
  u16 lro_length;
  u16 length;
  u16 data_offset;
  u16 t_vid;
  u32 seq_number;
  int tmp;
  int tmp_5;
  
#line 1262 
  struct net_device *netdev = adapter->netdev;
  
#line 1263 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 1272 
  u16 vid = (unsigned short)65535U;
  
#line 1275 
  if ((long)((int)adapter->max_rds_rings <= ring) != 0L) {
    
#line 1276 
    __retres = (struct qlcnic_rx_buffer *)0;
    
#line 1276 
    goto return_label;
  }
  else ;
  
#line 1278 
  rds_ring = recv_ctx->rds_rings + ring;
  
#line 1280 
  index = (int)sts_data0 & 32767;
  
#line 1281 
  if ((long)(rds_ring->num_desc <= (unsigned int)index) != 0L) {
    
#line 1282 
    __retres = (struct qlcnic_rx_buffer *)0;
    
#line 1282 
    goto return_label;
  }
  else ;
  
#line 1284 
  buffer = rds_ring->rx_buf_arr + index;
  
#line 1286 
  timestamp = (_Bool)(((sts_data0 >> 48) & 1ULL) != 0ULL);
  
#line 1287 
  lro_length = (unsigned short)(sts_data0 >> 16);
  
#line 1288 
  l2_hdr_offset = (int)(sts_data0 >> 32) & 255;
  
#line 1289 
  l4_hdr_offset = (int)(sts_data0 >> 40) & 255;
  
#line 1290 
  push = (_Bool)(((sts_data0 >> 52) & 1ULL) != 0ULL);
  
#line 1291 
  seq_number = (unsigned int)sts_data1;
  
#line 1293 
  skb = qlcnic_process_rxbuf(adapter,rds_ring,(unsigned short)((int)((unsigned short)index)),(unsigned short)2);
  
#line 1294 
  if (skb == (struct sk_buff *)0) {
    
#line 1295 
    __retres = buffer;
    
#line 1295 
    goto return_label;
  }
  else ;
  
#line 1297 
  if ((int)adapter->rx_mac_learn != 0) {
    
#line 1298 
    t_vid = (unsigned short)0U;
    
#line 1299 
    is_lb_pkt = qlcnic_82xx_is_lb_pkt(sts_data0);
    
#line 1300 
    qlcnic_add_lb_filter(adapter,skb,is_lb_pkt,(unsigned short)((int)t_vid));
  }
  else ;
  
#line 1303 
  if ((int)timestamp != 0) 
#line 1304 
                           data_offset = (unsigned short)((unsigned int)((unsigned short)l4_hdr_offset) + 32U); else 
                                                                    
#line 1306 
                                                                    data_offset = (unsigned short)((unsigned int)((unsigned short)l4_hdr_offset) + 20U);
  
#line 1308 
  skb_put(skb,(unsigned int)((int)lro_length + (int)data_offset));
  
#line 1309 
  skb_pull(skb,(unsigned int)l2_hdr_offset);
  
#line 1311 
  tmp = qlcnic_check_rx_tagging(adapter,skb,& vid);
  
#line 1311 
  if ((long)(tmp != 0) != 0L) {
    
#line 1312 
    adapter->stats.rxdropped += 1ULL;
    
#line 1313 
    consume_skb(skb);
    
#line 1314 
    __retres = buffer;
    
#line 1314 
    goto return_label;
  }
  else ;
  
#line 1317 
  skb->protocol = eth_type_trans(skb,netdev);
  
#line 1319 
  if (0 != 0) 
#line 1319 
              tmp_5 = (((int)skb->protocol << 8) | ((int)skb->protocol >> 8)) == -31011;
  else {
    __u16 tmp_4;
    
#line 1319 
    tmp_4 = __fswab16((unsigned short)((int)skb->protocol));
    
#line 1319 
    tmp_5 = (unsigned int)tmp_4 == 34525U;
  }
  
#line 1319 
  if (tmp_5) {
    
#line 1320 
    ipv6h = (struct ipv6hdr *)skb->data;
    
#line 1321 
    th = (struct tcphdr *)(skb->data + 40U);
    
#line 1322 
    length = (unsigned short)(((int)((unsigned short)th->doff) << 2U) + (int)lro_length);
    
#line 1323 
    if (0 != 0) 
#line 1323 
                ipv6h->payload_len = (unsigned short)(((int)length << 8) | ((int)length >> 8)); else 
                                                                    
#line 1323 
                                                                    ipv6h->payload_len = __fswab16((unsigned short)((int)length));
  }
  else {
    int tmp_2;
    
#line 1325 
    iph = (struct iphdr *)skb->data;
    
#line 1326 
    th = (struct tcphdr *)(skb->data + ((int)iph->ihl << 2));
    
#line 1327 
    length = (unsigned short)((((int)((unsigned short)iph->ihl) << 2U) + ((int)((unsigned short)th->doff) << 2U)) + (int)lro_length);
    
#line 1328 
    if (0 != 0) 
#line 1328 
                tmp_2 = (int)((unsigned short)(((int)length << 8) | ((int)length >> 8)));
    else {
      __u16 tmp_1;
      
#line 1328 
      tmp_1 = __fswab16((unsigned short)((int)length));
      
#line 1328 
      tmp_2 = (int)tmp_1;
    }
    
#line 1328 
    ;
    
#line 1328 
    ;
    
#line 1328 
    csum_replace2(& iph->check,(unsigned short)((int)iph->tot_len),(unsigned short)tmp_2);
    
#line 1329 
    if (0 != 0) 
#line 1329 
                iph->tot_len = (unsigned short)(((int)length << 8) | ((int)length >> 8)); else 
                                                                    
#line 1329 
                                                                    iph->tot_len = __fswab16((unsigned short)((int)length));
  }
  
#line 1332 
  th->psh = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))push;
  
#line 1333 
  if (0 != 0) 
#line 1333 
              th->seq = (((seq_number << 24) | ((seq_number << 8) & 16711680U)) | ((seq_number >> 8) & 65280U)) | (seq_number >> 24); else 
                                                                    
#line 1333 
                                                                    th->seq = __fswab32(seq_number);
  
#line 1334 
  length = (unsigned short)skb->len;
  
#line 1336 
  if ((adapter->flags & 32768U) != 0U) {
    unsigned char *tmp_7;
    
#line 1337 
    tmp_7 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 1337 
    ((struct skb_shared_info *)tmp_7)->gso_size = (unsigned short)(sts_data1 >> 32);
    
#line 1338 
    if ((unsigned int)skb->protocol == 56710U) {
      unsigned char *tmp_8;
      
#line 1339 
      tmp_8 = skb_end_pointer((struct sk_buff const *)skb);
      
#line 1339 
      ((struct skb_shared_info *)tmp_8)->gso_type = (unsigned short)16U;
    }
    else {
      unsigned char *tmp_9;
      
#line 1341 
      tmp_9 = skb_end_pointer((struct sk_buff const *)skb);
      
#line 1341 
      ((struct skb_shared_info *)tmp_9)->gso_type = (unsigned short)1U;
    }
  }
  else ;
  
#line 1344 
  if ((unsigned int)vid != 65535U) 
#line 1345 
                                   __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid)); else ;
  
#line 1346 
  netif_receive_skb(skb);
  
#line 1348 
  adapter->stats.lro_pkts += 1ULL;
  
#line 1349 
  adapter->stats.lrobytes += (unsigned long long)length;
  
#line 1351 
  __retres = buffer;
  return_label: 
#line 1351 
                return __retres;
}


#line 1354  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_process_rcv_ring(struct qlcnic_host_sds_ring *sds_ring, int max)
{
  struct qlcnic_host_rds_ring *rds_ring;
  struct list_head *cur;
  struct status_desc *desc;
  struct qlcnic_rx_buffer *rxbuf;
  int opcode;
  int desc_cnt;
  u64 sts_data0;
  u64 sts_data1;
  u8 ring;
  int tmp_0_0;
  
#line 1357 
  struct qlcnic_adapter *adapter = sds_ring->adapter;
  
#line 1361 
  int count = 0;
  
#line 1364 
  u32 consumer = sds_ring->consumer;
  
#line 1366 
  goto ldv_56284;
  ldv_56283: 
#line 1367 
  ;
  
#line 1367 
  desc = sds_ring->desc_head + consumer;
  
#line 1368 
  sts_data0 = desc->status_desc_data[0];
  
#line 1370 
  if ((sts_data0 & 72057594037927936ULL) == 0ULL) 
#line 1371 
                                                  goto ldv_56269; else ;
  
#line 1373 
  desc_cnt = (int)(sts_data0 >> 53) & 7;
  
#line 1374 
  opcode = (int)(sts_data0 >> 58);
  
#line 1375 
  switch (opcode) {
    case 4: 
#line 1376 
    ;
    case 63: 
#line 1377 
    ;
    case 3: 
#line 1378 
    ;
    
#line 1379 
    ring = (unsigned char)((unsigned int)((unsigned char)(sts_data0 >> 8)) & 15U);
    
#line 1380 
    rxbuf = qlcnic_process_rcv(adapter,sds_ring,(int)ring,sts_data0);
    
#line 1382 
    goto ldv_56273;
    case 18: 
#line 1383 
    ;
    
#line 1384 
    ring = (unsigned char)((unsigned int)((unsigned char)(sts_data0 >> 49)) & 7U);
    
#line 1385 
    sts_data1 = desc->status_desc_data[1];
    
#line 1386 
    rxbuf = qlcnic_process_lro(adapter,(int)ring,sts_data0,sts_data1);
    
#line 1388 
    goto ldv_56273;
    case 5: 
#line 1389 
    ;
    
#line 1390 
    qlcnic_handle_fw_message(desc_cnt,(int)consumer,sds_ring);
    default: 
#line 1391 
    ;
    
#line 1392 
    goto skip;
  }
  ldv_56273: 
#line 1394 
  ;
  {
    
#line 1394 
    int __ret_warn_on = desc_cnt > 1;
    
#line 1394 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 1394 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c",1394); else ;
    
#line 1394 
    long tmp = (long)(__ret_warn_on != 0);
  }
  
#line 1396 
  if ((long)(rxbuf != (struct qlcnic_rx_buffer *)0) != 0L) 
#line 1397 
                                                           list_add_tail(& rxbuf->list,& sds_ring->free_list[(int)ring]); else 
                                                                    
#line 1399 
                                                                    adapter->stats.null_rxbuf += 1ULL;
  skip: 
#line 1400 
  ;
  
#line 1401 
  goto ldv_56281;
  ldv_56280: 
#line 1402 
  ;
  
#line 1402 
  desc = sds_ring->desc_head + consumer;
  
#line 1403 
  desc->status_desc_data[0] = 144115188075855872ULL;
  
#line 1404 
  consumer = (consumer + 1U) & (sds_ring->num_desc + 4294967295U);
  
#line 1401 
  desc_cnt -= 1;
  ldv_56281: 
#line 1402 
  ;
  
#line 1401 
  if (desc_cnt > 0) 
#line 1403 
                    goto ldv_56280; else 
#line 1406 
                                         goto ldv_56282;
  ldv_56282: 
#line 1407 
  ;
  
#line 1406 
  count += 1;
  ldv_56284: 
#line 1407 
  ;
  
#line 1366 
  if (count < max) 
#line 1368 
                   goto ldv_56283; else 
#line 1371 
                                        goto ldv_56269;
  ldv_56269: 
#line 1372 
  ;
  
#line 1409 
  ring = (unsigned char)0U;
  
#line 1409 
  goto ldv_56291;
  ldv_56290: 
#line 1410 
  ;
  
#line 1410 
  rds_ring = (adapter->recv_ctx)->rds_rings + (int)ring;
  
#line 1411 
  tmp_0_0 = list_empty((struct list_head const *)(& sds_ring->free_list[(int)ring]));
  
#line 1411 
  if (tmp_0_0 == 0) {
    struct qlcnic_rx_buffer *tmp_0;
    
#line 1412 
    cur = sds_ring->free_list[(int)ring].next;
    
#line 1412 
    goto ldv_56288;
    ldv_56287: 
#line 1413 
    ;
    {
      
#line 1413 
      struct list_head const *__mptr = (struct list_head const *)cur;
      
#line 1413 
      tmp_0 = (struct qlcnic_rx_buffer *)__mptr + 18446744073709551600U;
    }
    
#line 1413 
    rxbuf = tmp_0;
    
#line 1415 
    qlcnic_alloc_rx_skb(adapter,rds_ring,rxbuf);
    
#line 1412 
    cur = cur->next;
    ldv_56288: 
#line 1413 
    ;
    
#line 1412 
    if (& sds_ring->free_list[(int)ring] != cur) 
#line 1414 
                                                 goto ldv_56287; else 
                                                                   
#line 1417 
                                                                   goto ldv_56289;
    ldv_56289: 
#line 1418 
    ;
    
#line 1417 
    ldv_spin_lock_88(& rds_ring->lock);
    
#line 1418 
    list_splice_tail_init(& sds_ring->free_list[(int)ring],& rds_ring->free_list);
    
#line 1420 
    ldv_spin_unlock_89(& rds_ring->lock);
  }
  else ;
  
#line 1423 
  qlcnic_post_rx_buffers_nodb(adapter,rds_ring,(unsigned char)((int)ring));
  
#line 1409 
  ring = (u8)((int)ring + 1);
  ldv_56291: 
#line 1410 
  ;
  
#line 1409 
  if ((int)adapter->max_rds_rings > (int)ring) 
#line 1411 
                                               goto ldv_56290; else 
#line 1414 
                                                                    goto ldv_56292;
  ldv_56292: 
#line 1415 
  ;
  
#line 1426 
  if (count != 0) {
    
#line 1427 
    sds_ring->consumer = consumer;
    
#line 1428 
    writel(consumer,(void volatile *)sds_ring->crb_sts_consumer);
  }
  else ;
  
#line 1431 
  return count;
}


#line 1434  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_post_rx_buffers(struct qlcnic_adapter *adapter, struct qlcnic_host_rds_ring *rds_ring, u8 ring_id)
{
  struct rcv_desc *pdesc;
  struct qlcnic_rx_buffer *buffer;
  u32 producer;
  u32 handle;
  struct list_head *head;
  struct qlcnic_rx_buffer *tmp;
  int tmp_1;
  
#line 1439 
  int count = 0;
  
#line 1443 
  producer = rds_ring->producer;
  
#line 1444 
  head = & rds_ring->free_list;
  
#line 1446 
  goto ldv_56308;
  ldv_56307: 
#line 1447 
  ;
  {
    
#line 1448 
    struct list_head const *__mptr = (struct list_head const *)head->next;
    
#line 1448 
    tmp = (struct qlcnic_rx_buffer *)__mptr + 18446744073709551600U;
  }
  
#line 1448 
  buffer = tmp;
  
#line 1450 
  if (buffer->skb == (struct sk_buff *)0) {
    int tmp_0;
    
#line 1451 
    tmp_0 = qlcnic_alloc_rx_skb(adapter,rds_ring,buffer);
    
#line 1451 
    if (tmp_0 != 0) 
#line 1452 
                    goto ldv_56306; else ;
  }
  else ;
  
#line 1455 
  count += 1;
  
#line 1456 
  list_del(& buffer->list);
  
#line 1459 
  pdesc = rds_ring->desc_head + producer;
  
#line 1460 
  pdesc->addr_buffer = buffer->dma;
  
#line 1461 
  handle = qlcnic_get_ref_handle(adapter,(unsigned short)((int)buffer->ref_handle),(unsigned char)((int)ring_id));
  
#line 1463 
  pdesc->reference_handle = (unsigned short)handle;
  
#line 1464 
  pdesc->buffer_length = rds_ring->dma_size;
  
#line 1465 
  producer = (producer + 1U) & (rds_ring->num_desc + 4294967295U);
  ldv_56308: 
#line 1466 
  ;
  
#line 1446 
  tmp_1 = list_empty((struct list_head const *)head);
  
#line 1446 
  if (tmp_1 == 0) 
#line 1448 
                  goto ldv_56307; else 
#line 1451 
                                       goto ldv_56306;
  ldv_56306: 
#line 1452 
  ;
  
#line 1468 
  if (count != 0) {
    
#line 1469 
    rds_ring->producer = producer;
    
#line 1470 
    writel((producer + 4294967295U) & (rds_ring->num_desc + 4294967295U),(void volatile *)rds_ring->crb_rcv_producer);
  }
  else ;
  
#line 1473 
  return;
}


#line 1475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void dump_skb(struct sk_buff *skb, struct qlcnic_adapter *adapter)
{
  
#line 1477 
  if (((adapter->ahw)->msg_enable & 1U) != 0U) {
    char prefix[30U];
    char const *tmp;
    
#line 1480 
    tmp = dev_name((struct device const *)(& (adapter->pdev)->dev));
    
#line 1480 
    scnprintf((char *)(& prefix),30UL,"%s: %s: ",tmp,"dump_skb");
    {
      
#line 1483 
      struct _ddebug descriptor = {.modname = "qlcnic", .function = "dump_skb", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c", .format = "hexdump", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1484U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1483 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1483 
                                                          print_hex_dump("\001",(char const *)(& prefix),0,16,1,(void const *)skb->data,(unsigned long)skb->len,(_Bool)1); else ;
    }
  }
  else ;
  
#line 1486 
  return;
}


#line 1488  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_process_rcv_diag(struct qlcnic_adapter *adapter, int ring, u64 sts_data0)
{
  struct sk_buff *skb;
  struct qlcnic_host_rds_ring *rds_ring;
  int index;
  int length;
  int cksum;
  int pkt_offset;
  int tmp;
  
#line 1491 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 1496 
  if ((long)((int)adapter->max_rds_rings <= ring) != 0L) 
#line 1497 
                                                         goto return_label; else ;
  
#line 1499 
  rds_ring = recv_ctx->rds_rings + ring;
  
#line 1501 
  index = (int)(sts_data0 >> 28) & 65535;
  
#line 1502 
  length = (int)(sts_data0 >> 12) & 65535;
  
#line 1503 
  if ((long)(rds_ring->num_desc <= (unsigned int)index) != 0L) 
#line 1504 
                                                               goto return_label; else ;
  
#line 1506 
  cksum = (int)(sts_data0 >> 4) & 15;
  
#line 1507 
  pkt_offset = (int)(sts_data0 >> 48) & 31;
  
#line 1509 
  skb = qlcnic_process_rxbuf(adapter,rds_ring,(unsigned short)((int)((unsigned short)index)),(unsigned short)((int)((unsigned short)cksum)));
  
#line 1510 
  if (skb == (struct sk_buff *)0) 
#line 1511 
                                  goto return_label; else ;
  
#line 1513 
  if (rds_ring->skb_size < (unsigned int)length) 
#line 1514 
                                                 skb_put(skb,rds_ring->skb_size); else 
                                                                    
#line 1516 
                                                                    skb_put(skb,(unsigned int)length);
  
#line 1518 
  if (pkt_offset != 0) 
#line 1519 
                       skb_pull(skb,(unsigned int)pkt_offset); else ;
  
#line 1521 
  tmp = qlcnic_check_loopback_buff(skb->data,(u8 *)(& adapter->mac_addr));
  
#line 1521 
  if (tmp == 0) 
#line 1522 
                (adapter->ahw)->diag_cnt += 1; else 
#line 1524 
                                                    dump_skb(skb,adapter);
  
#line 1526 
  dev_kfree_skb_any(skb);
  
#line 1527 
  adapter->stats.rx_pkts += 1ULL;
  
#line 1528 
  adapter->stats.rxbytes += (unsigned long long)length;
  return_label: 
#line 1530 
                return;
}


#line 1533  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_82xx_process_rcv_ring_diag(struct qlcnic_host_sds_ring *sds_ring)
{
  struct status_desc *desc;
  u64 sts_data0;
  int ring;
  int opcode;
  int desc_cnt;
  
#line 1535 
  struct qlcnic_adapter *adapter = sds_ring->adapter;
  
#line 1540 
  u32 consumer = sds_ring->consumer;
  
#line 1542 
  desc = sds_ring->desc_head + consumer;
  
#line 1543 
  sts_data0 = desc->status_desc_data[0];
  
#line 1545 
  if ((sts_data0 & 72057594037927936ULL) == 0ULL) 
#line 1546 
                                                  goto return_label; else ;
  
#line 1548 
  desc_cnt = (int)(sts_data0 >> 53) & 7;
  
#line 1549 
  opcode = (int)(sts_data0 >> 58);
  
#line 1550 
  switch (opcode) {
    case 5: 
#line 1551 
    ;
    
#line 1552 
    qlcnic_handle_fw_message(desc_cnt,(int)consumer,sds_ring);
    
#line 1553 
    goto ldv_56339;
    default: 
#line 1554 
    ;
    
#line 1555 
    ring = (int)(sts_data0 >> 8) & 15;
    
#line 1556 
    qlcnic_process_rcv_diag(adapter,ring,sts_data0);
    
#line 1557 
    goto ldv_56339;
  }
  ldv_56339: 
#line 1560 
  ;
  
#line 1560 
  goto ldv_56342;
  ldv_56341: 
#line 1561 
  ;
  
#line 1561 
  desc = sds_ring->desc_head + consumer;
  
#line 1562 
  desc->status_desc_data[0] = 144115188075855872ULL;
  
#line 1563 
  consumer = (consumer + 1U) & (sds_ring->num_desc + 4294967295U);
  
#line 1560 
  desc_cnt -= 1;
  ldv_56342: 
#line 1561 
  ;
  
#line 1560 
  if (desc_cnt > 0) 
#line 1562 
                    goto ldv_56341; else 
#line 1565 
                                         goto ldv_56343;
  ldv_56343: 
#line 1566 
  ;
  
#line 1566 
  sds_ring->consumer = consumer;
  
#line 1567 
  writel(consumer,(void volatile *)sds_ring->crb_sts_consumer);
  return_label: 
#line 1568 
                return;
}


#line 1570  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
int qlcnic_82xx_napi_add(struct qlcnic_adapter *adapter, struct net_device *netdev)
{
  int __retres;
  int ring;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_tx_ring *tx_ring;
  int tmp;
  bool tmp_0;
  int tmp_1;
  bool tmp_2;
  
#line 1575 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 1578 
  tmp = qlcnic_alloc_sds_rings(recv_ctx,(int)adapter->drv_sds_rings);
  
#line 1578 
  if (tmp != 0) {
    
#line 1579 
    __retres = -12;
    
#line 1579 
    goto return_label;
  }
  else ;
  
#line 1581 
  ring = 0;
  
#line 1581 
  goto ldv_56353;
  ldv_56352: 
#line 1582 
  ;
  
#line 1582 
  sds_ring = recv_ctx->sds_rings + ring;
  
#line 1583 
  tmp_0 = qlcnic_check_multi_tx(adapter);
  
#line 1583 
  if ((int)tmp_0 != 0) {
    
#line 1583 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
#line 1585 
                                                       netif_napi_add(netdev,& sds_ring->napi,& qlcnic_rx_poll,64); else 
                                                                    
#line 1583 
                                                                    goto _LAND;
  }
  else {
    _LAND: 
#line 1588 
    ;
    
#line 1588 
    if ((int)adapter->drv_sds_rings + -1 == ring) 
#line 1589 
                                                  netif_napi_add(netdev,& sds_ring->napi,& qlcnic_poll,64); else 
                                                                    
#line 1593 
                                                                    netif_napi_add(netdev,& sds_ring->napi,& qlcnic_rx_poll,64);
  }
  
#line 1581 
  ring += 1;
  ldv_56353: 
#line 1582 
  ;
  
#line 1581 
  if ((int)adapter->drv_sds_rings > ring) 
#line 1583 
                                          goto ldv_56352; else 
#line 1586 
                                                               goto ldv_56354;
  ldv_56354: 
#line 1587 
  ;
  
#line 1599 
  tmp_1 = qlcnic_alloc_tx_rings(adapter,netdev);
  
#line 1599 
  if (tmp_1 != 0) {
    
#line 1600 
    qlcnic_free_sds_rings(recv_ctx);
    
#line 1601 
    __retres = -12;
    
#line 1601 
    goto return_label;
  }
  else ;
  
#line 1604 
  tmp_2 = qlcnic_check_multi_tx(adapter);
  
#line 1604 
  if ((int)tmp_2 != 0) {
    
#line 1604 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) {
      
#line 1605 
      ring = 0;
      
#line 1605 
      goto ldv_56356;
      ldv_56355: 
#line 1606 
      ;
      
#line 1606 
      tx_ring = adapter->tx_ring + ring;
      
#line 1607 
      netif_napi_add(netdev,& tx_ring->napi,& qlcnic_tx_poll,64);
      
#line 1605 
      ring += 1;
      ldv_56356: 
#line 1606 
      ;
      
#line 1605 
      if ((int)adapter->drv_tx_rings > ring) 
#line 1607 
                                             goto ldv_56355; else 
#line 1610 
                                                                  goto ldv_56357;
      ldv_56357: 
#line 1611 
      ;
    }
    else ;
  }
  else ;
  
#line 1612 
  __retres = 0;
  return_label: 
#line 1612 
                return __retres;
}


#line 1615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_82xx_napi_del(struct qlcnic_adapter *adapter)
{
  int ring;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_tx_ring *tx_ring;
  bool tmp;
  
#line 1619 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 1622 
  ring = 0;
  
#line 1622 
  goto ldv_56366;
  ldv_56365: 
#line 1623 
  ;
  
#line 1623 
  sds_ring = recv_ctx->sds_rings + ring;
  
#line 1624 
  netif_napi_del(& sds_ring->napi);
  
#line 1622 
  ring += 1;
  ldv_56366: 
#line 1623 
  ;
  
#line 1622 
  if ((int)adapter->drv_sds_rings > ring) 
#line 1624 
                                          goto ldv_56365; else 
#line 1627 
                                                               goto ldv_56367;
  ldv_56367: 
#line 1628 
  ;
  
#line 1627 
  qlcnic_free_sds_rings(adapter->recv_ctx);
  
#line 1629 
  tmp = qlcnic_check_multi_tx(adapter);
  
#line 1629 
  if ((int)tmp != 0) {
    
#line 1629 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) {
      
#line 1630 
      ring = 0;
      
#line 1630 
      goto ldv_56369;
      ldv_56368: 
#line 1631 
      ;
      
#line 1631 
      tx_ring = adapter->tx_ring + ring;
      
#line 1632 
      netif_napi_del(& tx_ring->napi);
      
#line 1630 
      ring += 1;
      ldv_56369: 
#line 1631 
      ;
      
#line 1630 
      if ((int)adapter->drv_tx_rings > ring) 
#line 1632 
                                             goto ldv_56368; else 
#line 1635 
                                                                  goto ldv_56370;
      ldv_56370: 
#line 1636 
      ;
    }
    else ;
  }
  else ;
  
#line 1636 
  qlcnic_free_tx_rings(adapter);
  
#line 1637 
  return;
}


#line 1639  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_82xx_napi_enable(struct qlcnic_adapter *adapter)
{
  int ring;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_tx_ring *tx_ring;
  bool tmp;
  
#line 1644 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 1646 
  if ((unsigned int)adapter->is_up != 777U) 
#line 1647 
                                            goto return_label; else ;
  
#line 1649 
  ring = 0;
  
#line 1649 
  goto ldv_56379;
  ldv_56378: 
#line 1650 
  ;
  
#line 1650 
  sds_ring = recv_ctx->sds_rings + ring;
  
#line 1651 
  napi_enable(& sds_ring->napi);
  
#line 1652 
  qlcnic_enable_sds_intr(adapter,sds_ring);
  
#line 1649 
  ring += 1;
  ldv_56379: 
#line 1650 
  ;
  
#line 1649 
  if ((int)adapter->drv_sds_rings > ring) 
#line 1651 
                                          goto ldv_56378; else 
#line 1654 
                                                               goto ldv_56380;
  ldv_56380: 
#line 1655 
  ;
  
#line 1655 
  tmp = qlcnic_check_multi_tx(adapter);
  
#line 1655 
  if ((int)tmp != 0) {
    
#line 1655 
    if ((adapter->flags & 4U) != 0U) {
      
#line 1656 
      if ((unsigned int)(adapter->ahw)->diag_test == 0U) {
        
#line 1658 
        ring = 0;
        
#line 1658 
        goto ldv_56382;
        ldv_56381: 
#line 1659 
        ;
        
#line 1659 
        tx_ring = adapter->tx_ring + ring;
        
#line 1660 
        napi_enable(& tx_ring->napi);
        
#line 1661 
        qlcnic_enable_tx_intr(adapter,tx_ring);
        
#line 1658 
        ring += 1;
        ldv_56382: 
#line 1659 
        ;
        
#line 1658 
        if ((int)adapter->drv_tx_rings > ring) 
#line 1660 
                                               goto ldv_56381; else 
#line 1663 
                                                                    goto ldv_56383;
        ldv_56383: 
#line 1664 
        ;
      }
      else ;
    }
    else ;
  }
  else ;
  return_label: 
#line 1666 
                return;
}


#line 1666  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_82xx_napi_disable(struct qlcnic_adapter *adapter)
{
  int ring;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_tx_ring *tx_ring;
  
#line 1671 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 1673 
  if ((unsigned int)adapter->is_up != 777U) 
#line 1674 
                                            goto return_label; else ;
  
#line 1676 
  ring = 0;
  
#line 1676 
  goto ldv_56392;
  ldv_56391: 
#line 1677 
  ;
  
#line 1677 
  sds_ring = recv_ctx->sds_rings + ring;
  
#line 1678 
  qlcnic_disable_sds_intr(adapter,sds_ring);
  
#line 1679 
  napi_synchronize((struct napi_struct const *)(& sds_ring->napi));
  
#line 1680 
  napi_disable(& sds_ring->napi);
  
#line 1676 
  ring += 1;
  ldv_56392: 
#line 1677 
  ;
  
#line 1676 
  if ((int)adapter->drv_sds_rings > ring) 
#line 1678 
                                          goto ldv_56391; else 
#line 1681 
                                                               goto ldv_56393;
  ldv_56393: 
#line 1682 
  ;
  
#line 1683 
  if ((adapter->flags & 4U) != 0U && (unsigned int)(adapter->ahw)->diag_test == 0U) {
    bool tmp;
    
#line 1684 
    tmp = qlcnic_check_multi_tx(adapter);
    
#line 1684 
    if ((int)tmp != 0) {
      
#line 1686 
      ring = 0;
      
#line 1686 
      goto ldv_56395;
      ldv_56394: 
#line 1687 
      ;
      
#line 1687 
      tx_ring = adapter->tx_ring + ring;
      
#line 1688 
      qlcnic_disable_tx_intr(adapter,tx_ring);
      
#line 1689 
      napi_synchronize((struct napi_struct const *)(& tx_ring->napi));
      
#line 1690 
      napi_disable(& tx_ring->napi);
      
#line 1686 
      ring += 1;
      ldv_56395: 
#line 1687 
      ;
      
#line 1686 
      if ((int)adapter->drv_tx_rings > ring) 
#line 1688 
                                             goto ldv_56394; else 
#line 1691 
                                                                  goto ldv_56396;
      ldv_56396: 
#line 1692 
      ;
    }
    else ;
  }
  else ;
  return_label: 
#line 1694 
                return;
}


#line 1698  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
__inline static int qlcnic_83xx_is_lb_pkt(u64 sts_data, int lro_pkt)
{
  int __retres;
  
#line 1700 
  if (lro_pkt != 0) {
    
#line 1701 
    __retres = (int)(sts_data >> 46) & 1;
    
#line 1701 
    goto return_label;
  }
  else {
    
#line 1703 
    __retres = (int)(sts_data >> 36) & 1;
    
#line 1703 
    goto return_label;
  }
  return_label: 
#line 1700 
                return __retres;
}


#line 1708  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
__inline static u8 qlcnic_encap_length(u64 sts_data)
{
  u8 __retres;
  
#line 1710 
  __retres = (unsigned char)((unsigned int)((unsigned char)sts_data) & 127U);
  
#line 1710 
  return __retres;
}


#line 1714  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static struct qlcnic_rx_buffer *qlcnic_83xx_process_rcv(struct qlcnic_adapter *adapter, struct qlcnic_host_sds_ring *sds_ring, u8 ring, u64 *sts_data)
{
  struct qlcnic_rx_buffer *__retres;
  struct qlcnic_rx_buffer *buffer;
  struct sk_buff *skb;
  struct qlcnic_host_rds_ring *rds_ring;
  int index;
  int length;
  int cksum;
  int is_lb_pkt;
  int err;
  u8 tmp;
  
#line 1718 
  struct net_device *netdev = adapter->netdev;
  
#line 1719 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 1724 
  u16 vid = (unsigned short)65535U;
  
#line 1727 
  if ((long)((int)adapter->max_rds_rings <= (int)ring) != 0L) {
    
#line 1728 
    __retres = (struct qlcnic_rx_buffer *)0;
    
#line 1728 
    goto return_label;
  }
  else ;
  
#line 1730 
  rds_ring = recv_ctx->rds_rings + (int)ring;
  
#line 1732 
  index = (int)(*sts_data >> 48) & 32767;
  
#line 1733 
  if ((long)(rds_ring->num_desc <= (unsigned int)index) != 0L) {
    
#line 1734 
    __retres = (struct qlcnic_rx_buffer *)0;
    
#line 1734 
    goto return_label;
  }
  else ;
  
#line 1736 
  buffer = rds_ring->rx_buf_arr + index;
  
#line 1737 
  length = (int)(*sts_data >> 32) & 16383;
  
#line 1738 
  cksum = (int)(*(sts_data + 1U) >> 39) & 7;
  
#line 1739 
  skb = qlcnic_process_rxbuf(adapter,rds_ring,(unsigned short)((int)((unsigned short)index)),(unsigned short)((int)((unsigned short)cksum)));
  
#line 1740 
  if (skb == (struct sk_buff *)0) {
    
#line 1741 
    __retres = buffer;
    
#line 1741 
    goto return_label;
  }
  else ;
  
#line 1743 
  if (rds_ring->skb_size < (unsigned int)length) 
#line 1744 
                                                 skb_put(skb,rds_ring->skb_size); else 
                                                                    
#line 1746 
                                                                    skb_put(skb,(unsigned int)length);
  
#line 1748 
  err = qlcnic_check_rx_tagging(adapter,skb,& vid);
  
#line 1750 
  if ((int)adapter->rx_mac_learn != 0) {
    
#line 1751 
    is_lb_pkt = qlcnic_83xx_is_lb_pkt(*(sts_data + 1U),0);
    
#line 1752 
    qlcnic_add_lb_filter(adapter,skb,is_lb_pkt,(unsigned short)((int)vid));
  }
  else ;
  
#line 1755 
  if ((long)(err != 0) != 0L) {
    
#line 1756 
    adapter->stats.rxdropped += 1ULL;
    
#line 1757 
    consume_skb(skb);
    
#line 1758 
    __retres = buffer;
    
#line 1758 
    goto return_label;
  }
  else ;
  
#line 1761 
  skb->protocol = eth_type_trans(skb,netdev);
  
#line 1763 
  tmp = qlcnic_encap_length(*(sts_data + 1U));
  
#line 1763 
  if ((unsigned int)tmp != 0U) {
    
#line 1763 
    if ((unsigned int)*((unsigned char *)skb + 145UL) == 2U) {
      
#line 1765 
      skb->csum_level = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
      
#line 1766 
      adapter->stats.encap_rx_csummed += 1ULL;
    }
    else ;
  }
  else ;
  
#line 1769 
  if ((unsigned int)vid != 65535U) 
#line 1770 
                                   __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid)); else ;
  
#line 1772 
  napi_gro_receive(& sds_ring->napi,skb);
  
#line 1774 
  adapter->stats.rx_pkts += 1ULL;
  
#line 1775 
  adapter->stats.rxbytes += (unsigned long long)length;
  
#line 1777 
  __retres = buffer;
  return_label: 
#line 1777 
                return __retres;
}


#line 1781  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static struct qlcnic_rx_buffer *qlcnic_83xx_process_lro(struct qlcnic_adapter *adapter, u8 ring, u64 *sts_data)
{
  struct qlcnic_rx_buffer *__retres;
  struct qlcnic_rx_buffer *buffer;
  struct sk_buff *skb;
  struct qlcnic_host_rds_ring *rds_ring;
  struct iphdr *iph;
  struct ipv6hdr *ipv6h;
  struct tcphdr *th;
  bool push;
  int l2_hdr_offset;
  int l4_hdr_offset;
  int index;
  int is_lb_pkt;
  u16 lro_length;
  u16 length;
  u16 data_offset;
  u16 gso_size;
  int err;
  int tmp_4;
  
#line 1784 
  struct net_device *netdev = adapter->netdev;
  
#line 1785 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 1796 
  u16 vid = (unsigned short)65535U;
  
#line 1799 
  if ((long)((int)adapter->max_rds_rings <= (int)ring) != 0L) {
    
#line 1800 
    __retres = (struct qlcnic_rx_buffer *)0;
    
#line 1800 
    goto return_label;
  }
  else ;
  
#line 1802 
  rds_ring = recv_ctx->rds_rings + (int)ring;
  
#line 1804 
  index = (int)(*sts_data >> 48) & 32767;
  
#line 1805 
  if ((long)(rds_ring->num_desc <= (unsigned int)index) != 0L) {
    
#line 1806 
    __retres = (struct qlcnic_rx_buffer *)0;
    
#line 1806 
    goto return_label;
  }
  else ;
  
#line 1808 
  buffer = rds_ring->rx_buf_arr + index;
  
#line 1810 
  lro_length = (unsigned short)((unsigned int)((unsigned short)(*sts_data >> 32)) & 16383U);
  
#line 1811 
  l2_hdr_offset = (int)(*(sts_data + 1U) >> 16) & 255;
  
#line 1812 
  l4_hdr_offset = (int)(*(sts_data + 1U) >> 24) & 255;
  
#line 1813 
  push = (_Bool)(((*(sts_data + 1U) >> 41) & 1ULL) != 0ULL);
  
#line 1815 
  skb = qlcnic_process_rxbuf(adapter,rds_ring,(unsigned short)((int)((unsigned short)index)),(unsigned short)2);
  
#line 1816 
  if (skb == (struct sk_buff *)0) {
    
#line 1817 
    __retres = buffer;
    
#line 1817 
    goto return_label;
  }
  else ;
  
#line 1819 
  if ((*(sts_data + 1U) & 1099511627776ULL) != 0ULL) 
#line 1820 
                                                     data_offset = (unsigned short)((unsigned int)((unsigned short)l4_hdr_offset) + 32U); else 
                                                                    
#line 1822 
                                                                    data_offset = (unsigned short)((unsigned int)((unsigned short)l4_hdr_offset) + 20U);
  
#line 1824 
  skb_put(skb,(unsigned int)((int)lro_length + (int)data_offset));
  
#line 1825 
  skb_pull(skb,(unsigned int)l2_hdr_offset);
  
#line 1827 
  err = qlcnic_check_rx_tagging(adapter,skb,& vid);
  
#line 1829 
  if ((int)adapter->rx_mac_learn != 0) {
    
#line 1830 
    is_lb_pkt = qlcnic_83xx_is_lb_pkt(*(sts_data + 1U),1);
    
#line 1831 
    qlcnic_add_lb_filter(adapter,skb,is_lb_pkt,(unsigned short)((int)vid));
  }
  else ;
  
#line 1834 
  if ((long)(err != 0) != 0L) {
    
#line 1835 
    adapter->stats.rxdropped += 1ULL;
    
#line 1836 
    consume_skb(skb);
    
#line 1837 
    __retres = buffer;
    
#line 1837 
    goto return_label;
  }
  else ;
  
#line 1840 
  skb->protocol = eth_type_trans(skb,netdev);
  
#line 1841 
  if (0 != 0) 
#line 1841 
              tmp_4 = (((int)skb->protocol << 8) | ((int)skb->protocol >> 8)) == -31011;
  else {
    __u16 tmp_3;
    
#line 1841 
    tmp_3 = __fswab16((unsigned short)((int)skb->protocol));
    
#line 1841 
    tmp_4 = (unsigned int)tmp_3 == 34525U;
  }
  
#line 1841 
  if (tmp_4) {
    
#line 1842 
    ipv6h = (struct ipv6hdr *)skb->data;
    
#line 1843 
    th = (struct tcphdr *)(skb->data + 40U);
    
#line 1845 
    length = (unsigned short)(((int)((unsigned short)th->doff) << 2U) + (int)lro_length);
    
#line 1846 
    if (0 != 0) 
#line 1846 
                ipv6h->payload_len = (unsigned short)(((int)length << 8) | ((int)length >> 8)); else 
                                                                    
#line 1846 
                                                                    ipv6h->payload_len = __fswab16((unsigned short)((int)length));
  }
  else {
    int tmp_1;
    
#line 1848 
    iph = (struct iphdr *)skb->data;
    
#line 1849 
    th = (struct tcphdr *)(skb->data + ((int)iph->ihl << 2));
    
#line 1850 
    length = (unsigned short)((((int)((unsigned short)iph->ihl) << 2U) + ((int)((unsigned short)th->doff) << 2U)) + (int)lro_length);
    
#line 1851 
    if (0 != 0) 
#line 1851 
                tmp_1 = (int)((unsigned short)(((int)length << 8) | ((int)length >> 8)));
    else {
      __u16 tmp_0;
      
#line 1851 
      tmp_0 = __fswab16((unsigned short)((int)length));
      
#line 1851 
      tmp_1 = (int)tmp_0;
    }
    
#line 1851 
    ;
    
#line 1851 
    ;
    
#line 1851 
    csum_replace2(& iph->check,(unsigned short)((int)iph->tot_len),(unsigned short)tmp_1);
    
#line 1852 
    if (0 != 0) 
#line 1852 
                iph->tot_len = (unsigned short)(((int)length << 8) | ((int)length >> 8)); else 
                                                                    
#line 1852 
                                                                    iph->tot_len = __fswab16((unsigned short)((int)length));
  }
  
#line 1855 
  th->psh = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))push;
  
#line 1856 
  length = (unsigned short)skb->len;
  
#line 1858 
  if ((adapter->flags & 32768U) != 0U) {
    unsigned char *tmp_5;
    
#line 1859 
    gso_size = (unsigned short)*sts_data;
    
#line 1860 
    tmp_5 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 1860 
    ((struct skb_shared_info *)tmp_5)->gso_size = gso_size;
    
#line 1861 
    if ((unsigned int)skb->protocol == 56710U) {
      unsigned char *tmp_6;
      
#line 1862 
      tmp_6 = skb_end_pointer((struct sk_buff const *)skb);
      
#line 1862 
      ((struct skb_shared_info *)tmp_6)->gso_type = (unsigned short)16U;
    }
    else {
      unsigned char *tmp_7;
      
#line 1864 
      tmp_7 = skb_end_pointer((struct sk_buff const *)skb);
      
#line 1864 
      ((struct skb_shared_info *)tmp_7)->gso_type = (unsigned short)1U;
    }
  }
  else ;
  
#line 1867 
  if ((unsigned int)vid != 65535U) 
#line 1868 
                                   __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid)); else ;
  
#line 1870 
  netif_receive_skb(skb);
  
#line 1872 
  adapter->stats.lro_pkts += 1ULL;
  
#line 1873 
  adapter->stats.lrobytes += (unsigned long long)length;
  
#line 1874 
  __retres = buffer;
  return_label: 
#line 1874 
                return __retres;
}


#line 1877  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_83xx_process_rcv_ring(struct qlcnic_host_sds_ring *sds_ring, int max)
{
  struct qlcnic_host_rds_ring *rds_ring;
  struct list_head *cur;
  struct status_desc *desc;
  u8 ring;
  u64 sts_data[2U];
  int opcode;
  int tmp_0;
  
#line 1881 
  struct qlcnic_adapter *adapter = sds_ring->adapter;
  
#line 1884 
  struct qlcnic_rx_buffer *rxbuf = (struct qlcnic_rx_buffer *)0;
  
#line 1887 
  int count = 0;
  
#line 1888 
  u32 consumer = sds_ring->consumer;
  
#line 1890 
  goto ldv_56466;
  ldv_56465: 
#line 1891 
  ;
  
#line 1891 
  desc = sds_ring->desc_head + consumer;
  
#line 1892 
  sts_data[1] = desc->status_desc_data[1];
  
#line 1893 
  opcode = (int)(sts_data[1] >> 42) & 15;
  
#line 1894 
  if (opcode == 0) 
#line 1895 
                   goto ldv_56459; else ;
  
#line 1896 
  sts_data[0] = desc->status_desc_data[0];
  
#line 1897 
  ring = (unsigned char)(sts_data[0] >> 63);
  
#line 1899 
  switch (opcode) {
    case 1: 
#line 1900 
    ;
    
#line 1901 
    rxbuf = qlcnic_83xx_process_rcv(adapter,sds_ring,(unsigned char)((int)ring),(u64 *)(& sts_data));
    
#line 1903 
    goto ldv_56461;
    case 2: 
#line 1904 
    ;
    
#line 1905 
    rxbuf = qlcnic_83xx_process_lro(adapter,(unsigned char)((int)ring),(u64 *)(& sts_data));
    
#line 1907 
    goto ldv_56461;
    default: 
#line 1908 
    ;
    
#line 1909 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Unknown opcode: 0x%x\n",opcode);
    
#line 1911 
    goto skip;
  }
  ldv_56461: 
#line 1914 
  ;
  
#line 1914 
  if ((long)(rxbuf != (struct qlcnic_rx_buffer *)0) != 0L) 
#line 1915 
                                                           list_add_tail(& rxbuf->list,& sds_ring->free_list[(int)ring]); else 
                                                                    
#line 1917 
                                                                    adapter->stats.null_rxbuf += 1ULL;
  skip: 
#line 1918 
  ;
  
#line 1919 
  desc = sds_ring->desc_head + consumer;
  
#line 1921 
  desc->status_desc_data[1] = 0ULL;
  
#line 1922 
  consumer = (consumer + 1U) & (sds_ring->num_desc + 4294967295U);
  
#line 1923 
  count += 1;
  ldv_56466: 
#line 1924 
  ;
  
#line 1890 
  if (count < max) 
#line 1892 
                   goto ldv_56465; else 
#line 1895 
                                        goto ldv_56459;
  ldv_56459: 
#line 1896 
  ;
  
#line 1925 
  ring = (unsigned char)0U;
  
#line 1925 
  goto ldv_56473;
  ldv_56472: 
#line 1926 
  ;
  
#line 1926 
  rds_ring = (adapter->recv_ctx)->rds_rings + (int)ring;
  
#line 1927 
  tmp_0 = list_empty((struct list_head const *)(& sds_ring->free_list[(int)ring]));
  
#line 1927 
  if (tmp_0 == 0) {
    struct qlcnic_rx_buffer *tmp;
    
#line 1928 
    cur = sds_ring->free_list[(int)ring].next;
    
#line 1928 
    goto ldv_56470;
    ldv_56469: 
#line 1929 
    ;
    {
      
#line 1929 
      struct list_head const *__mptr = (struct list_head const *)cur;
      
#line 1929 
      tmp = (struct qlcnic_rx_buffer *)__mptr + 18446744073709551600U;
    }
    
#line 1929 
    rxbuf = tmp;
    
#line 1931 
    qlcnic_alloc_rx_skb(adapter,rds_ring,rxbuf);
    
#line 1928 
    cur = cur->next;
    ldv_56470: 
#line 1929 
    ;
    
#line 1928 
    if (& sds_ring->free_list[(int)ring] != cur) 
#line 1930 
                                                 goto ldv_56469; else 
                                                                   
#line 1933 
                                                                   goto ldv_56471;
    ldv_56471: 
#line 1934 
    ;
    
#line 1933 
    ldv_spin_lock_90(& rds_ring->lock);
    
#line 1934 
    list_splice_tail_init(& sds_ring->free_list[(int)ring],& rds_ring->free_list);
    
#line 1936 
    ldv_spin_unlock_91(& rds_ring->lock);
  }
  else ;
  
#line 1938 
  qlcnic_post_rx_buffers_nodb(adapter,rds_ring,(unsigned char)((int)ring));
  
#line 1925 
  ring = (u8)((int)ring + 1);
  ldv_56473: 
#line 1926 
  ;
  
#line 1925 
  if ((int)adapter->max_rds_rings > (int)ring) 
#line 1927 
                                               goto ldv_56472; else 
#line 1930 
                                                                    goto ldv_56474;
  ldv_56474: 
#line 1931 
  ;
  
#line 1940 
  if (count != 0) {
    
#line 1941 
    sds_ring->consumer = consumer;
    
#line 1942 
    writel(consumer,(void volatile *)sds_ring->crb_sts_consumer);
  }
  else ;
  
#line 1944 
  return count;
}


#line 1947  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_83xx_msix_sriov_vf_poll(struct napi_struct *napi, int budget)
{
  int tx_complete;
  int work_done;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_adapter *adapter;
  struct qlcnic_host_tx_ring *tx_ring;
  struct qlcnic_host_sds_ring *tmp;
  {
    
#line 1955 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 1955 
    tmp = (struct qlcnic_host_sds_ring *)__mptr + 18446744073709551576U;
  }
  
#line 1955 
  sds_ring = tmp;
  
#line 1956 
  adapter = sds_ring->adapter;
  
#line 1958 
  tx_ring = adapter->tx_ring;
  
#line 1960 
  tx_complete = qlcnic_process_cmd_ring(adapter,tx_ring,budget);
  
#line 1961 
  work_done = qlcnic_83xx_process_rcv_ring(sds_ring,budget);
  
#line 1964 
  if (tx_complete == 0) 
#line 1965 
                        work_done = budget; else ;
  
#line 1967 
  if (work_done < budget) {
    
#line 1968 
    napi_complete(& sds_ring->napi);
    
#line 1969 
    qlcnic_enable_sds_intr(adapter,sds_ring);
  }
  else ;
  
#line 1972 
  return work_done;
}


#line 1975  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_83xx_poll(struct napi_struct *napi, int budget)
{
  int tx_complete;
  int work_done;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_adapter *adapter;
  struct qlcnic_host_tx_ring *tx_ring;
  struct qlcnic_host_sds_ring *tmp;
  {
    
#line 1983 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 1983 
    tmp = (struct qlcnic_host_sds_ring *)__mptr + 18446744073709551576U;
  }
  
#line 1983 
  sds_ring = tmp;
  
#line 1984 
  adapter = sds_ring->adapter;
  
#line 1986 
  tx_ring = adapter->tx_ring;
  
#line 1988 
  tx_complete = qlcnic_process_cmd_ring(adapter,tx_ring,budget);
  
#line 1989 
  work_done = qlcnic_83xx_process_rcv_ring(sds_ring,budget);
  
#line 1992 
  if (tx_complete == 0) 
#line 1993 
                        work_done = budget; else ;
  
#line 1995 
  if (work_done < budget) {
    
#line 1996 
    napi_complete(& sds_ring->napi);
    
#line 1997 
    qlcnic_enable_sds_intr(adapter,sds_ring);
  }
  else ;
  
#line 2000 
  return work_done;
}


#line 2003  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_83xx_msix_tx_poll(struct napi_struct *napi, int budget)
{
  int work_done;
  struct qlcnic_host_tx_ring *tx_ring;
  struct qlcnic_adapter *adapter;
  struct qlcnic_host_tx_ring *tmp;
  
#line 2009 
  budget = 128;
  {
    
#line 2010 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 2010 
    tmp = (struct qlcnic_host_tx_ring *)__mptr + 18446744073709551488U;
  }
  
#line 2010 
  tx_ring = tmp;
  
#line 2011 
  adapter = tx_ring->adapter;
  
#line 2012 
  work_done = qlcnic_process_cmd_ring(adapter,tx_ring,budget);
  
#line 2013 
  if (work_done != 0) {
    int tmp_0;
    
#line 2014 
    napi_complete(& tx_ring->napi);
    
#line 2015 
    tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
    
#line 2015 
    if (tmp_0 != 0) 
#line 2016 
                    qlcnic_enable_tx_intr(adapter,tx_ring); else ;
  }
  else 
#line 2019 
       work_done = budget;
  
#line 2022 
  return work_done;
}


#line 2025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static int qlcnic_83xx_rx_poll(struct napi_struct *napi, int budget)
{
  int work_done;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_adapter *adapter;
  struct qlcnic_host_sds_ring *tmp;
  {
    
#line 2031 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 2031 
    tmp = (struct qlcnic_host_sds_ring *)__mptr + 18446744073709551576U;
  }
  
#line 2031 
  sds_ring = tmp;
  
#line 2032 
  adapter = sds_ring->adapter;
  
#line 2033 
  work_done = qlcnic_83xx_process_rcv_ring(sds_ring,budget);
  
#line 2034 
  if (work_done < budget) {
    int tmp_0;
    
#line 2035 
    napi_complete(& sds_ring->napi);
    
#line 2036 
    tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
    
#line 2036 
    if (tmp_0 != 0) 
#line 2037 
                    qlcnic_enable_sds_intr(adapter,sds_ring); else ;
  }
  else ;
  
#line 2040 
  return work_done;
}


#line 2043  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_83xx_napi_enable(struct qlcnic_adapter *adapter)
{
  int ring;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_tx_ring *tx_ring;
  
#line 2048 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 2050 
  if ((unsigned int)adapter->is_up != 777U) 
#line 2051 
                                            goto return_label; else ;
  
#line 2053 
  ring = 0;
  
#line 2053 
  goto ldv_56523;
  ldv_56522: 
#line 2054 
  ;
  
#line 2054 
  sds_ring = recv_ctx->sds_rings + ring;
  
#line 2055 
  napi_enable(& sds_ring->napi);
  
#line 2056 
  if ((adapter->flags & 4U) != 0U) 
#line 2057 
                                   qlcnic_enable_sds_intr(adapter,sds_ring); else ;
  
#line 2053 
  ring += 1;
  ldv_56523: 
#line 2054 
  ;
  
#line 2053 
  if ((int)adapter->drv_sds_rings > ring) 
#line 2055 
                                          goto ldv_56522; else 
#line 2058 
                                                               goto ldv_56524;
  ldv_56524: 
#line 2059 
  ;
  
#line 2060 
  if ((adapter->flags & 4U) != 0U && (adapter->flags & 65536U) == 0U) {
    
#line 2062 
    ring = 0;
    
#line 2062 
    goto ldv_56526;
    ldv_56525: 
#line 2063 
    ;
    
#line 2063 
    tx_ring = adapter->tx_ring + ring;
    
#line 2064 
    napi_enable(& tx_ring->napi);
    
#line 2065 
    qlcnic_enable_tx_intr(adapter,tx_ring);
    
#line 2062 
    ring += 1;
    ldv_56526: 
#line 2063 
    ;
    
#line 2062 
    if ((int)adapter->drv_tx_rings > ring) 
#line 2064 
                                           goto ldv_56525; else 
#line 2067 
                                                                goto ldv_56527;
    ldv_56527: 
#line 2068 
    ;
  }
  else ;
  return_label: 
#line 2070 
                return;
}


#line 2070  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_83xx_napi_disable(struct qlcnic_adapter *adapter)
{
  int ring;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_tx_ring *tx_ring;
  
#line 2074 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 2077 
  if ((unsigned int)adapter->is_up != 777U) 
#line 2078 
                                            goto return_label; else ;
  
#line 2080 
  ring = 0;
  
#line 2080 
  goto ldv_56536;
  ldv_56535: 
#line 2081 
  ;
  
#line 2081 
  sds_ring = recv_ctx->sds_rings + ring;
  
#line 2082 
  if ((adapter->flags & 4U) != 0U) 
#line 2083 
                                   qlcnic_disable_sds_intr(adapter,sds_ring); else ;
  
#line 2084 
  napi_synchronize((struct napi_struct const *)(& sds_ring->napi));
  
#line 2085 
  napi_disable(& sds_ring->napi);
  
#line 2080 
  ring += 1;
  ldv_56536: 
#line 2081 
  ;
  
#line 2080 
  if ((int)adapter->drv_sds_rings > ring) 
#line 2082 
                                          goto ldv_56535; else 
#line 2085 
                                                               goto ldv_56537;
  ldv_56537: 
#line 2086 
  ;
  
#line 2088 
  if ((adapter->flags & 4U) != 0U && (adapter->flags & 65536U) == 0U) {
    
#line 2090 
    ring = 0;
    
#line 2090 
    goto ldv_56539;
    ldv_56538: 
#line 2091 
    ;
    
#line 2091 
    tx_ring = adapter->tx_ring + ring;
    
#line 2092 
    qlcnic_disable_tx_intr(adapter,tx_ring);
    
#line 2093 
    napi_synchronize((struct napi_struct const *)(& tx_ring->napi));
    
#line 2094 
    napi_disable(& tx_ring->napi);
    
#line 2090 
    ring += 1;
    ldv_56539: 
#line 2091 
    ;
    
#line 2090 
    if ((int)adapter->drv_tx_rings > ring) 
#line 2092 
                                           goto ldv_56538; else 
#line 2095 
                                                                goto ldv_56540;
    ldv_56540: 
#line 2096 
    ;
  }
  else ;
  return_label: 
#line 2098 
                return;
}


#line 2099  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
int qlcnic_83xx_napi_add(struct qlcnic_adapter *adapter, struct net_device *netdev)
{
  int __retres;
  int ring;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_tx_ring *tx_ring;
  int tmp;
  int tmp_0;
  
#line 2105 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 2107 
  tmp = qlcnic_alloc_sds_rings(recv_ctx,(int)adapter->drv_sds_rings);
  
#line 2107 
  if (tmp != 0) {
    
#line 2108 
    __retres = -12;
    
#line 2108 
    goto return_label;
  }
  else ;
  
#line 2110 
  ring = 0;
  
#line 2110 
  goto ldv_56550;
  ldv_56549: 
#line 2111 
  ;
  
#line 2111 
  sds_ring = recv_ctx->sds_rings + ring;
  
#line 2112 
  if ((adapter->flags & 4U) != 0U) 
    
#line 2113 
    if ((adapter->flags & 65536U) == 0U) 
#line 2114 
                                         netif_napi_add(netdev,& sds_ring->napi,& qlcnic_83xx_rx_poll,64); else 
                                                                    
#line 2118 
                                                                    netif_napi_add(netdev,& sds_ring->napi,& qlcnic_83xx_msix_sriov_vf_poll,64);
  else 
#line 2123 
       netif_napi_add(netdev,& sds_ring->napi,& qlcnic_83xx_poll,64);
  
#line 2110 
  ring += 1;
  ldv_56550: 
#line 2111 
  ;
  
#line 2110 
  if ((int)adapter->drv_sds_rings > ring) 
#line 2112 
                                          goto ldv_56549; else 
#line 2115 
                                                               goto ldv_56551;
  ldv_56551: 
#line 2116 
  ;
  
#line 2129 
  tmp_0 = qlcnic_alloc_tx_rings(adapter,netdev);
  
#line 2129 
  if (tmp_0 != 0) {
    
#line 2130 
    qlcnic_free_sds_rings(recv_ctx);
    
#line 2131 
    __retres = -12;
    
#line 2131 
    goto return_label;
  }
  else ;
  
#line 2134 
  if ((adapter->flags & 4U) != 0U && (adapter->flags & 65536U) == 0U) {
    
#line 2136 
    ring = 0;
    
#line 2136 
    goto ldv_56553;
    ldv_56552: 
#line 2137 
    ;
    
#line 2137 
    tx_ring = adapter->tx_ring + ring;
    
#line 2138 
    netif_napi_add(netdev,& tx_ring->napi,& qlcnic_83xx_msix_tx_poll,64);
    
#line 2136 
    ring += 1;
    ldv_56553: 
#line 2137 
    ;
    
#line 2136 
    if ((int)adapter->drv_tx_rings > ring) 
#line 2138 
                                           goto ldv_56552; else 
#line 2141 
                                                                goto ldv_56554;
    ldv_56554: 
#line 2142 
    ;
  }
  else ;
  
#line 2144 
  __retres = 0;
  return_label: 
#line 2144 
                return __retres;
}


#line 2147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_83xx_napi_del(struct qlcnic_adapter *adapter)
{
  int ring;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_tx_ring *tx_ring;
  
#line 2151 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 2154 
  ring = 0;
  
#line 2154 
  goto ldv_56563;
  ldv_56562: 
#line 2155 
  ;
  
#line 2155 
  sds_ring = recv_ctx->sds_rings + ring;
  
#line 2156 
  netif_napi_del(& sds_ring->napi);
  
#line 2154 
  ring += 1;
  ldv_56563: 
#line 2155 
  ;
  
#line 2154 
  if ((int)adapter->drv_sds_rings > ring) 
#line 2156 
                                          goto ldv_56562; else 
#line 2159 
                                                               goto ldv_56564;
  ldv_56564: 
#line 2160 
  ;
  
#line 2159 
  qlcnic_free_sds_rings(adapter->recv_ctx);
  
#line 2161 
  if ((adapter->flags & 4U) != 0U && (adapter->flags & 65536U) == 0U) {
    
#line 2163 
    ring = 0;
    
#line 2163 
    goto ldv_56566;
    ldv_56565: 
#line 2164 
    ;
    
#line 2164 
    tx_ring = adapter->tx_ring + ring;
    
#line 2165 
    netif_napi_del(& tx_ring->napi);
    
#line 2163 
    ring += 1;
    ldv_56566: 
#line 2164 
    ;
    
#line 2163 
    if ((int)adapter->drv_tx_rings > ring) 
#line 2165 
                                           goto ldv_56565; else 
#line 2168 
                                                                goto ldv_56567;
    ldv_56567: 
#line 2169 
    ;
  }
  else ;
  
#line 2169 
  qlcnic_free_tx_rings(adapter);
  
#line 2170 
  return;
}


#line 2172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
static void qlcnic_83xx_process_rcv_diag(struct qlcnic_adapter *adapter, int ring, u64 *sts_data)
{
  struct sk_buff *skb;
  struct qlcnic_host_rds_ring *rds_ring;
  int index;
  int length;
  int tmp;
  
#line 2175 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 2180 
  if ((long)((int)adapter->max_rds_rings <= ring) != 0L) 
#line 2181 
                                                         goto return_label; else ;
  
#line 2183 
  rds_ring = recv_ctx->rds_rings + ring;
  
#line 2184 
  index = (int)(*sts_data >> 48) & 32767;
  
#line 2185 
  if ((long)(rds_ring->num_desc <= (unsigned int)index) != 0L) 
#line 2186 
                                                               goto return_label; else ;
  
#line 2188 
  length = (int)(*sts_data >> 32) & 16383;
  
#line 2190 
  skb = qlcnic_process_rxbuf(adapter,rds_ring,(unsigned short)((int)((unsigned short)index)),(unsigned short)2);
  
#line 2191 
  if (skb == (struct sk_buff *)0) 
#line 2192 
                                  goto return_label; else ;
  
#line 2194 
  if (rds_ring->skb_size < (unsigned int)length) 
#line 2195 
                                                 skb_put(skb,rds_ring->skb_size); else 
                                                                    
#line 2197 
                                                                    skb_put(skb,(unsigned int)length);
  
#line 2199 
  tmp = qlcnic_check_loopback_buff(skb->data,(u8 *)(& adapter->mac_addr));
  
#line 2199 
  if (tmp == 0) 
#line 2200 
                (adapter->ahw)->diag_cnt += 1; else 
#line 2202 
                                                    dump_skb(skb,adapter);
  
#line 2204 
  dev_kfree_skb_any(skb);
  return_label: 
#line 2205 
                return;
}


#line 2208  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_io.c"
void qlcnic_83xx_process_rcv_ring_diag(struct qlcnic_host_sds_ring *sds_ring)
{
  struct status_desc *desc;
  u64 sts_data[2U];
  int ring;
  int opcode;
  
#line 2210 
  struct qlcnic_adapter *adapter = sds_ring->adapter;
  
#line 2214 
  u32 consumer = sds_ring->consumer;
  
#line 2216 
  desc = sds_ring->desc_head + consumer;
  
#line 2217 
  sts_data[0] = desc->status_desc_data[0];
  
#line 2218 
  sts_data[1] = desc->status_desc_data[1];
  
#line 2219 
  opcode = (int)(sts_data[1] >> 42) & 15;
  
#line 2220 
  if (opcode == 0) 
#line 2221 
                   goto return_label; else ;
  
#line 2223 
  ring = 0;
  
#line 2224 
  qlcnic_83xx_process_rcv_diag(adapter,ring,(u64 *)(& sts_data));
  
#line 2225 
  desc = sds_ring->desc_head + consumer;
  
#line 2226 
  desc->status_desc_data[0] = 144115188075855872ULL;
  
#line 2227 
  consumer = (consumer + 1U) & (sds_ring->num_desc + 4294967295U);
  
#line 2228 
  sds_ring->consumer = consumer;
  
#line 2229 
  writel(consumer,(void volatile *)sds_ring->crb_sts_consumer);
  return_label: 
#line 2230 
                return;
}


#line 616  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 619 
  tmp = ldv_kzalloc(size,flags);
  
#line 619 
  return tmp;
}


#line 766  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static void ldv_spin_lock_75(spinlock_t *lock)
{
  
#line 770 
  ldv_spin_model_lock((char *)"rx_mac_learn_lock_of_qlcnic_adapter");
  
#line 772 
  spin_lock(lock);
  
#line 773 
  return;
}


#line 776  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static void ldv_spin_unlock_76(spinlock_t *lock)
{
  
#line 780 
  ldv_spin_model_unlock((char *)"rx_mac_learn_lock_of_qlcnic_adapter");
  
#line 782 
  spin_unlock(lock);
  
#line 783 
  return;
}


#line 786  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static void ldv_spin_lock_77(spinlock_t *lock)
{
  
#line 790 
  ldv_spin_model_lock((char *)"mac_learn_lock_of_qlcnic_adapter");
  
#line 792 
  spin_lock(lock);
  
#line 793 
  return;
}


#line 796  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static void ldv_spin_unlock_78(spinlock_t *lock)
{
  
#line 800 
  ldv_spin_model_unlock((char *)"mac_learn_lock_of_qlcnic_adapter");
  
#line 802 
  spin_unlock(lock);
  
#line 803 
  return;
}


#line 806  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static void ldv_spin_unlock_79(spinlock_t *lock)
{
  
#line 810 
  ldv_spin_model_unlock((char *)"mac_learn_lock_of_qlcnic_adapter");
  
#line 812 
  spin_unlock(lock);
  
#line 813 
  return;
}


#line 816  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static void ldv_spin_lock_80(spinlock_t *lock)
{
  
#line 820 
  ldv_spin_model_lock((char *)"rx_mac_learn_lock_of_qlcnic_adapter");
  
#line 822 
  spin_lock(lock);
  
#line 823 
  return;
}


#line 826  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static void ldv_spin_unlock_81(spinlock_t *lock)
{
  
#line 830 
  ldv_spin_model_unlock((char *)"rx_mac_learn_lock_of_qlcnic_adapter");
  
#line 832 
  spin_unlock(lock);
  
#line 833 
  return;
}


#line 836  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static void ldv_spin_lock_82(spinlock_t *lock)
{
  
#line 840 
  ldv_spin_model_lock((char *)"mac_learn_lock_of_qlcnic_adapter");
  
#line 842 
  spin_lock(lock);
  
#line 843 
  return;
}


#line 846  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static void ldv_spin_unlock_83(spinlock_t *lock)
{
  
#line 850 
  ldv_spin_model_unlock((char *)"mac_learn_lock_of_qlcnic_adapter");
  
#line 852 
  spin_unlock(lock);
  
#line 853 
  return;
}


#line 856  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static int ldv_spin_trylock_84(spinlock_t *lock)
{
  int __retres;
  
#line 860 
  ldv_func_ret_type ldv_func_res = spin_trylock(lock);
  
#line 862 
  int is_spin_held_by_another_thread = ldv_undef_int();
  
#line 864 
  if (is_spin_held_by_another_thread != 0) {
    
#line 867 
    __retres = 0;
    
#line 867 
    goto return_label;
  }
  else {
    
#line 870 
    ldv_spin_model_lock((char *)"lock_of_qlcnic_host_rds_ring");
    
#line 872 
    __retres = 1;
    
#line 872 
    goto return_label;
  }
  
#line 875 
  __retres = ldv_func_res;
  return_label: 
#line 875 
                return __retres;
}


#line 879  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static void ldv_spin_unlock_85(spinlock_t *lock)
{
  
#line 883 
  ldv_spin_model_unlock((char *)"lock_of_qlcnic_host_rds_ring");
  
#line 885 
  spin_unlock(lock);
  
#line 886 
  return;
}


#line 889  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static int ldv_spin_trylock_86(spinlock_t *lock)
{
  int __retres;
  
#line 893 
  ldv_func_ret_type ldv_func_res = spin_trylock(lock);
  
#line 895 
  int is_spin_held_by_another_thread = ldv_undef_int();
  
#line 897 
  if (is_spin_held_by_another_thread != 0) {
    
#line 900 
    __retres = 0;
    
#line 900 
    goto return_label;
  }
  else {
    
#line 903 
    ldv_spin_model_lock((char *)"tx_clean_lock_of_qlcnic_host_tx_ring");
    
#line 905 
    __retres = 1;
    
#line 905 
    goto return_label;
  }
  
#line 908 
  __retres = ldv_func_res;
  return_label: 
#line 908 
                return __retres;
}


#line 912  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static void ldv_spin_unlock_87(spinlock_t *lock)
{
  
#line 916 
  ldv_spin_model_unlock((char *)"tx_clean_lock_of_qlcnic_host_tx_ring");
  
#line 918 
  spin_unlock(lock);
  
#line 919 
  return;
}


#line 922  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static void ldv_spin_lock_88(spinlock_t *lock)
{
  
#line 926 
  ldv_spin_model_lock((char *)"lock_of_qlcnic_host_rds_ring");
  
#line 928 
  spin_lock(lock);
  
#line 929 
  return;
}


#line 932  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static void ldv_spin_unlock_89(spinlock_t *lock)
{
  
#line 936 
  ldv_spin_model_unlock((char *)"lock_of_qlcnic_host_rds_ring");
  
#line 938 
  spin_unlock(lock);
  
#line 939 
  return;
}


#line 942  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static void ldv_spin_lock_90(spinlock_t *lock)
{
  
#line 946 
  ldv_spin_model_lock((char *)"lock_of_qlcnic_host_rds_ring");
  
#line 948 
  spin_lock(lock);
  
#line 949 
  return;
}


#line 952  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_io.c.aux"
static void ldv_spin_unlock_91(spinlock_t *lock)
{
  
#line 956 
  ldv_spin_model_unlock((char *)"lock_of_qlcnic_host_rds_ring");
  
#line 958 
  spin_unlock(lock);
  
#line 959 
  return;
}

void *__builtin_memcpy(void *, void const *, unsigned long);


#line 201  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compiler.h"
__inline static void __read_once_size(void const volatile *p, void *res, int size)
{
  
#line 203 
  switch (size) {
    case 1: 
#line 204 
    ;
    
#line 204 
    *((__u8 *)res) = *((__u8 volatile *)p);
    
#line 204 
    goto ldv_1185;
    case 2: 
#line 205 
    ;
    
#line 205 
    *((__u16 *)res) = *((__u16 volatile *)p);
    
#line 205 
    goto ldv_1185;
    case 4: 
#line 206 
    ;
    
#line 206 
    *((__u32 *)res) = *((__u32 volatile *)p);
    
#line 206 
    goto ldv_1185;
    case 8: 
#line 207 
    ;
    
#line 207 
    *((__u64 *)res) = *((__u64 volatile *)p);
    
#line 207 
    goto ldv_1185;
    default: 
#line 208 
    ;
    
#line 209 
    ldv_inline_asm();
    
#line 210 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    
#line 211 
    ldv_inline_asm();
  }
  ldv_1185: 
#line 213 
  ;
  
#line 214 
  return;
}


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
void ldv_atomic_inc(atomic_t *v);


#line 9 
int ldv_atomic_dec_and_test(atomic_t *v);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
extern struct module __this_module;


#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int fls(int x)
{
  int __retres;
  int r;
  
#line 440 
  ldv_inline_asm();
  
#line 464 
  __retres = r + 1;
  
#line 464 
  return __retres;
}


#line 479  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  int __retres;
  
#line 481 
  int bitpos = -1;
  
#line 482 
  ldv_inline_asm();
  
#line 490 
  __retres = bitpos + 1;
  
#line 490 
  return __retres;
}


#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bitops/find.h"
unsigned long find_next_bit(unsigned long const *, unsigned long, unsigned long);


#line 42 
unsigned long find_first_bit(unsigned long const *, unsigned long);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w)
{
  
#line 47 
  unsigned long res = 0UL;
  
#line 48 
  ldv_inline_asm();
  
#line 58 
  return res;
}


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w)
{
  unsigned long tmp_0;
  
#line 80 
  if (0 != 0) 
#line 80 
              tmp_0 = (unsigned long)((((unsigned int)((((((((((unsigned long long)w & 1ULL) != 0ULL) + (((unsigned long long)w & 2ULL) != 0ULL)) + (((unsigned long long)w & 4ULL) != 0ULL)) + (((unsigned long long)w & 8ULL) != 0ULL)) + (((unsigned long long)w & 16ULL) != 0ULL)) + (((unsigned long long)w & 32ULL) != 0ULL)) + (((unsigned long long)w & 64ULL) != 0ULL)) + (((unsigned long long)w & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 8) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 8) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 16) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 16) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 24) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 24) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 128ULL) != 0ULL)))) + (((unsigned int)((((((((((unsigned long long)(w >> 32) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 32) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 40) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 40) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 48) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 48) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 56) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 56) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 128ULL) != 0ULL))))); else 
                                                                    
#line 80 
                                                                    tmp_0 = __arch_hweight64((unsigned long long)w);
  
#line 80 
  return tmp_0;
}


#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitops.h"
__inline static unsigned int fls_long(unsigned long l)
{
  unsigned int __retres;
  int tmp_0;
  
#line 178 
  tmp_0 = fls64((unsigned long long)l);
  
#line 178 
  __retres = (unsigned int)tmp_0;
  
#line 178 
  return __retres;
}


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/log2.h"
int ____ilog2_NaN(void);


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  int __retres;
  int tmp;
  
#line 34 
  tmp = fls((int)n);
  
#line 34 
  __retres = tmp + -1;
  
#line 34 
  return __retres;
}


#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/log2.h"
__inline static bool is_power_of_2(unsigned long n)
{
  bool __retres;
  
#line 54 
  __retres = (_Bool)((n != 0UL && ((n + 18446744073709551615UL) & n) == 0UL) != 0);
  
#line 54 
  return __retres;
}


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/log2.h"
__inline static unsigned long __rounddown_pow_of_two(unsigned long n)
{
  unsigned long __retres;
  unsigned int tmp;
  
#line 72 
  tmp = fls_long(n);
  
#line 72 
  __retres = 1UL << (tmp + 4294967295U);
  
#line 72 
  return __retres;
}


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
int printk(char const * , ...);


#line 402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int sprintf(char *, char const * , ...);


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
void __bad_percpu_size(void);


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-defs.h"
void __bad_size_call_parameter(void);


#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
char *strcpy(char *, char const *);


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
int __bitmap_weight(unsigned long const *, unsigned int);


#line 298  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const *src, unsigned int nbits)
{
  int __retres;
  int tmp_0;
  
#line 300 
  if (0 != 0 && nbits <= 64U) {
    unsigned long tmp;
    
#line 301 
    tmp = hweight_long(*src & (18446744073709551615UL >> (- nbits & 63U)));
    
#line 301 
    __retres = (int)tmp;
    
#line 301 
    goto return_label;
  }
  else ;
  
#line 302 
  tmp_0 = __bitmap_weight(src,nbits);
  
#line 302 
  __retres = tmp_0;
  return_label: 
#line 302 
                return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
extern int nr_cpu_ids;


#line 89 
extern struct cpumask const * const cpu_online_mask;


#line 474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask const *srcp)
{
  unsigned int __retres;
  int tmp;
  
#line 476 
  tmp = bitmap_weight((unsigned long const *)(& srcp->bits),(unsigned int)nr_cpu_ids);
  
#line 476 
  __retres = (unsigned int)tmp;
  
#line 476 
  return __retres;
}


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_inc(atomic_t *v);


#line 120 
static int atomic_dec_and_test(atomic_t *v);


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  int tmp;
  
#line 72 
  if (0 != 0 && (val == 1 || val == -1)) 
#line 72 
                                         tmp = val; else 
#line 72 
                                                         tmp = 0;
  
#line 72 
  int const pao_ID__ = tmp;
  
#line 72 
  switch (4UL) {
    case (unsigned long)1: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)2: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)4: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)8: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    default: 
#line 72 
    ;
    
#line 72 
    __bad_percpu_size();
  }
  ldv_6377: 
#line 72 
  ;
  
#line 74 
  return;
}


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  int tmp;
  
#line 77 
  if (0 != 0 && (- val == 1 || - val == -1)) 
#line 77 
                                             tmp = - val; else 
#line 77 
                                                               tmp = 0;
  
#line 77 
  int const pao_ID__ = tmp;
  
#line 77 
  switch (4UL) {
    case (unsigned long)1: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)2: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)4: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)8: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    default: 
#line 77 
    ;
    
#line 77 
    __bad_percpu_size();
  }
  ldv_6389: 
#line 77 
  ;
  
#line 79 
  return;
}


#line 7  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
void __local_bh_disable_ip(unsigned long, unsigned int);


#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  __here_0: 
#line 18 
  ;
  
#line 18 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  
#line 20 
  return;
}


#line 22 
void __local_bh_enable_ip(unsigned long, unsigned int);


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  __here_0: 
#line 31 
  ;
  
#line 31 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  
#line 33 
  return;
}


#line 333  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);


#line 337 
void lock_release(struct lockdep_map *, int, unsigned long);


#line 545 
void lockdep_rcu_suspicious(char const *, int const, char const *);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
void __raw_spin_lock_init(raw_spinlock_t *, char const *, struct lock_class_key *);


#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock.h"
void __rwlock_init(rwlock_t *, char const *, struct lock_class_key *);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  raw_spinlock_t *__retres;
  
#line 301 
  __retres = & lock->__anonCompField_spinlock_18.rlock;
  
#line 301 
  return __retres;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 346 
static void ldv_spin_lock_62(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 395 
static void ldv_spin_unlock_65(spinlock_t *lock);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);


#line 268  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  
#line 270 
  __preempt_count_add(1);
  
#line 271 
  ldv_inline_asm();
  
#line 272 
  return;
}


#line 273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  
#line 275 
  ldv_inline_asm();
  
#line 275 
  __preempt_count_sub(1);
  
#line 276 
  return;
}


#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcutree.h"
bool rcu_is_watching(void);


#line 447  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  __here_0: 
#line 449 
  ;
  
#line 449 
  ;
  
#line 449 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  
#line 451 
  return;
}


#line 452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  __here_0: 
#line 454 
  ;
  
#line 454 
  ;
  
#line 454 
  lock_release(map,1,(unsigned long)((void *)0));
  
#line 456 
  return;
}


#line 457 
extern struct lockdep_map rcu_lock_map;


#line 461 
int debug_lockdep_rcu_enabled(void);


#line 463 
int rcu_read_lock_held(void);


#line 843  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  
#line 845 
  __rcu_read_lock();
  
#line 847 
  rcu_lock_acquire(& rcu_lock_map);
  {
    bool __warned;
    int tmp;
    
#line 848 
    tmp = debug_lockdep_rcu_enabled();
    
#line 848 
    if (tmp != 0) {
      
#line 848 
      if (! __warned) {
        int tmp_1;
        bool tmp_0;
        
#line 848 
        tmp_0 = rcu_is_watching();
        
#line 848 
        if (tmp_0) 
#line 848 
                   tmp_1 = 0; else 
#line 848 
                                   tmp_1 = 1;
        
#line 848 
        if (tmp_1) {
          
#line 848 
          __warned = (_Bool)1;
          
#line 848 
          lockdep_rcu_suspicious("include/linux/rcupdate.h",849,"rcu_read_lock() used illegally while idle");
        }
        else ;
      }
      else ;
    }
    else ;
  }
  
#line 851 
  return;
}


#line 897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    bool __warned;
    int tmp;
    
#line 899 
    tmp = debug_lockdep_rcu_enabled();
    
#line 899 
    if (tmp != 0) {
      
#line 899 
      if (! __warned) {
        int tmp_1;
        bool tmp_0;
        
#line 899 
        tmp_0 = rcu_is_watching();
        
#line 899 
        if (tmp_0) 
#line 899 
                   tmp_1 = 0; else 
#line 899 
                                   tmp_1 = 1;
        
#line 899 
        if (tmp_1) {
          
#line 899 
          __warned = (_Bool)1;
          
#line 899 
          lockdep_rcu_suspicious("include/linux/rcupdate.h",900,"rcu_read_unlock() used illegally while idle");
        }
        else ;
      }
      else ;
    }
    else ;
  }
  
#line 902 
  __rcu_read_unlock();
  
#line 903 
  rcu_lock_release(& rcu_lock_map);
  
#line 904 
  return;
}


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
void init_timer_key(struct timer_list *, unsigned int, char const *, struct lock_class_key *);


#line 253 
unsigned long round_jiffies_relative(unsigned long);


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void delayed_work_timer_fn(unsigned long);


#line 448 
bool cancel_delayed_work_sync(struct delayed_work *);


#line 505 
static bool ldv_queue_delayed_work_85(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);


#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
void __mutex_init(struct mutex *, char const *, struct lock_class_key *);


#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
void iounmap(void volatile *);


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_75(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 145 
static int ldv_request_irq_76(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 157 
static void ldv_free_irq_77(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 161 
static void ldv_free_irq_78(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  
#line 871 
  dev->driver_data = data;
  
#line 872 
  return;
}


#line 1085 
void dev_warn(struct device const *, char const * , ...);


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kcalloc(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc_2(size_t size, gfp_t flags);


#line 814  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
void pci_dev_put(struct pci_dev *);


#line 849 
struct pci_dev *pci_get_domain_bus_and_slot(int, unsigned int, unsigned int);


#line 951 
int pci_enable_device(struct pci_dev *);


#line 968 
void pci_disable_device(struct pci_dev *);


#line 971 
void pci_set_master(struct pci_dev *);


#line 1026 
int pci_save_state(struct pci_dev *);


#line 1027 
void pci_restore_state(struct pci_dev *);


#line 1040 
int pci_set_power_state(struct pci_dev *, pci_power_t);


#line 1041 
pci_power_t pci_choose_state(struct pci_dev *, pm_message_t);


#line 1094 
int pci_request_regions(struct pci_dev *, char const *);


#line 1096 
void pci_release_regions(struct pci_dev *);


#line 1146 
static int ldv___pci_register_driver_86(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3);


#line 1158 
static void ldv_pci_unregister_driver_87(struct pci_driver *ldv_func_arg1);


#line 1212 
void pci_disable_msi(struct pci_dev *);


#line 1216 
void pci_disable_msix(struct pci_dev *);


#line 1219 
int pci_enable_msi_range(struct pci_dev *, int, int);


#line 1220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_enable_msi_exact(struct pci_dev *dev, int nvec)
{
  int __retres;
  
#line 1222 
  int rc = pci_enable_msi_range(dev,nvec,nvec);
  
#line 1223 
  if (rc < 0) {
    
#line 1224 
    __retres = rc;
    
#line 1224 
    goto return_label;
  }
  else ;
  
#line 1225 
  __retres = 0;
  return_label: 
#line 1225 
                return __retres;
}


#line 1227 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);


#line 1229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_enable_msix_exact(struct pci_dev *dev, struct msix_entry *entries, int nvec)
{
  int __retres;
  
#line 1232 
  int rc = pci_enable_msix_range(dev,entries,nvec,nvec);
  
#line 1233 
  if (rc < 0) {
    
#line 1234 
    __retres = rc;
    
#line 1234 
    goto return_label;
  }
  else ;
  
#line 1235 
  __retres = 0;
  return_label: 
#line 1235 
                return __retres;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pci.h"
__inline static int pci_domain_nr(struct pci_bus *bus)
{
  int __retres;
  
#line 34 
  struct pci_sysdata *sd = (struct pci_sysdata *)bus->sysdata;
  
#line 35 
  __retres = sd->domain;
  
#line 35 
  return __retres;
}


#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
int dma_supported(struct device *, u64);


#line 61 
int dma_set_mask(struct device *, u64);


#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_coherent_mask(struct device *dev, u64 mask)
{
  int __retres;
  int tmp;
  
#line 103 
  tmp = dma_supported(dev,mask);
  
#line 103 
  if (tmp == 0) {
    
#line 104 
    __retres = -5;
    
#line 104 
    goto return_label;
  }
  else ;
  
#line 105 
  dev->coherent_dma_mask = mask;
  
#line 106 
  __retres = 0;
  return_label: 
#line 106 
                return __retres;
}


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  int tmp;
  
#line 115 
  tmp = dma_set_mask(& dev->dev,mask);
  
#line 115 
  return tmp;
}


#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  int tmp;
  
#line 120 
  tmp = dma_set_coherent_mask(& dev->dev,mask);
  
#line 120 
  return tmp;
}


#line 1476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  
#line 1478 
  dev_set_drvdata(& pdev->dev,data);
  
#line 1479 
  return;
}


#line 1666 
void *pci_ioremap_bar(struct pci_dev *, int);


#line 1735  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  int __retres;
  unsigned int tmp;
  unsigned char *tmp_1;
  unsigned int tmp_0;
  
#line 1737 
  tmp = skb_headlen((struct sk_buff const *)skb);
  
#line 1737 
  ;
  
#line 1737 
  if ((long)(tmp >= len) != 0L) {
    
#line 1738 
    __retres = 1;
    
#line 1738 
    goto return_label;
  }
  else ;
  
#line 1739 
  if ((long)(skb->len < len) != 0L) {
    
#line 1740 
    __retres = 0;
    
#line 1740 
    goto return_label;
  }
  else ;
  
#line 1741 
  tmp_0 = skb_headlen((struct sk_buff const *)skb);
  
#line 1741 
  ;
  
#line 1741 
  ;
  
#line 1741 
  tmp_1 = __pskb_pull_tail(skb,(int)(len - tmp_0));
  
#line 1741 
  __retres = tmp_1 != (unsigned char *)0U;
  return_label: 
#line 1741 
                return __retres;
}


#line 391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void __napi_schedule(struct napi_struct *);


#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_disable_pending(struct napi_struct *n)
{
  bool __retres;
  int tmp;
  
#line 396 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& n->state));
  
#line 396 
  __retres = (_Bool)(tmp != 0);
  
#line 396 
  return __retres;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_schedule_prep(struct napi_struct *n)
{
  bool __retres;
  int tmp_2;
  int tmp_0;
  bool tmp;
  
#line 410 
  tmp = napi_disable_pending(n);
  
#line 410 
  if (tmp) 
#line 410 
           tmp_0 = 0; else 
#line 410 
                           tmp_0 = 1;
  
#line 410 
  if (tmp_0) {
    int tmp_1;
    
#line 410 
    tmp_1 = test_and_set_bit(0L,(unsigned long volatile *)(& n->state));
    
#line 410 
    if (tmp_1 == 0) 
#line 410 
                    tmp_2 = 1; else 
#line 410 
                                    tmp_2 = 0;
  }
  else 
#line 410 
       tmp_2 = 0;
  
#line 410 
  __retres = (_Bool)(tmp_2 != 0);
  
#line 410 
  return __retres;
}


#line 421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  bool tmp;
  
#line 423 
  tmp = napi_schedule_prep(n);
  
#line 423 
  if ((int)tmp != 0) 
#line 424 
                     __napi_schedule(n); else ;
  
#line 425 
  return;
}


#line 1822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device const *dev, unsigned int index)
{
  struct netdev_queue *__retres;
  
#line 1825 
  __retres = dev->_tx + index;
  
#line 1825 
  return __retres;
}


#line 2084 
int register_netdevice_notifier(struct notifier_block *);


#line 2085 
int unregister_netdevice_notifier(struct notifier_block *);


#line 2103  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static struct net_device *netdev_notifier_info_to_dev(struct netdev_notifier_info const *info)
{
  struct net_device *__retres;
  
#line 2105 
  __retres = info->dev;
  
#line 2105 
  return __retres;
}


#line 2205 
static void ldv_free_netdev_81(struct net_device *ldv_func_arg1);


#line 2209 
static void ldv_free_netdev_84(struct net_device *ldv_func_arg1);


#line 2531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  unsigned int i;
  
#line 2535 
  i = 0U;
  
#line 2535 
  goto ldv_44957;
  ldv_44956: 
#line 2536 
  ;
  {
    
#line 2536 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 2537 
    netif_tx_start_queue(txq);
  }
  
#line 2535 
  i += 1U;
  ldv_44957: 
#line 2536 
  ;
  
#line 2535 
  if (dev->num_tx_queues > i) 
#line 2537 
                              goto ldv_44956; else 
#line 2540 
                                                   goto ldv_44958;
  ldv_44958: 
#line 2541 
  ;
  
#line 2542 
  return;
}


#line 2867 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);


#line 2870 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);


#line 3117 
void netif_device_detach(struct net_device *);


#line 3119 
void netif_device_attach(struct net_device *);


#line 3170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  
#line 3172 
  ldv_spin_lock_62(& txq->_xmit_lock);
  
#line 3173 
  txq->xmit_lock_owner = cpu;
  
#line 3174 
  return;
}


#line 3190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  
#line 3192 
  txq->xmit_lock_owner = -1;
  
#line 3193 
  ldv_spin_unlock_65(& txq->_xmit_lock);
  
#line 3194 
  return;
}


#line 3282  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  unsigned int i;
  int cpu;
  int tmp_3;
  
#line 3287 
  local_bh_disable();
  {
    int pscr_ret__;
    {
      
#line 3288 
      void const *__vpp_verify = (void const *)0;
      
#line 3288 
      void const *tmp = __vpp_verify;
    }
    
#line 3288 
    switch (4UL) {
      int tmp_0;
      int tmp_0_0;
      int tmp_1;
      int tmp_2;
      case (unsigned long)1: 
#line 3288 
      ;
      {
        int pfo_ret__;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45531;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45531;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45531;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45531;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45531: 
#line 3288 
        ;
        
#line 3288 
        tmp_0 = pfo_ret__;
      }
      
#line 3288 
      pscr_ret__ = tmp_0;
      
#line 3288 
      goto ldv_45537;
      case (unsigned long)2: 
#line 3288 
      ;
      {
        int pfo_ret___0;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45541;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45541;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45541;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45541;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45541: 
#line 3288 
        ;
        
#line 3288 
        tmp_0_0 = pfo_ret___0;
      }
      
#line 3288 
      pscr_ret__ = tmp_0_0;
      
#line 3288 
      goto ldv_45537;
      case (unsigned long)4: 
#line 3288 
      ;
      {
        int pfo_ret___1;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45550;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45550;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45550;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45550;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45550: 
#line 3288 
        ;
        
#line 3288 
        tmp_1 = pfo_ret___1;
      }
      
#line 3288 
      pscr_ret__ = tmp_1;
      
#line 3288 
      goto ldv_45537;
      case (unsigned long)8: 
#line 3288 
      ;
      {
        int pfo_ret___2;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45559;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45559;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45559;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45559;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45559: 
#line 3288 
        ;
        
#line 3288 
        tmp_2 = pfo_ret___2;
      }
      
#line 3288 
      pscr_ret__ = tmp_2;
      
#line 3288 
      goto ldv_45537;
      default: 
#line 3288 
      ;
      
#line 3288 
      __bad_size_call_parameter();
      
#line 3288 
      goto ldv_45537;
    }
    ldv_45537: 
#line 3288 
    ;
    
#line 3288 
    tmp_3 = pscr_ret__;
  }
  
#line 3288 
  cpu = tmp_3;
  
#line 3289 
  i = 0U;
  
#line 3289 
  goto ldv_45569;
  ldv_45568: 
#line 3290 
  ;
  {
    
#line 3290 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 3292 
    __netif_tx_lock(txq,cpu);
    
#line 3293 
    netif_tx_start_queue(txq);
    
#line 3294 
    __netif_tx_unlock(txq);
  }
  
#line 3289 
  i += 1U;
  ldv_45569: 
#line 3290 
  ;
  
#line 3289 
  if (dev->num_tx_queues > i) 
#line 3291 
                              goto ldv_45568; else 
#line 3294 
                                                   goto ldv_45570;
  ldv_45570: 
#line 3295 
  ;
  
#line 3296 
  local_bh_enable();
  
#line 3297 
  return;
}


#line 3355 
static int ldv_register_netdev_79(struct net_device *ldv_func_arg1);


#line 3359 
static int ldv_register_netdev_82(struct net_device *ldv_func_arg1);


#line 3364 
static void ldv_unregister_netdev_83(struct net_device *ldv_func_arg1);


#line 3393 
int dev_uc_add_excl(struct net_device *, unsigned char const *);


#line 3394 
int dev_uc_del(struct net_device *, unsigned char const *);


#line 3424 
int dev_mc_add_excl(struct net_device *, unsigned char const *);


#line 3425 
int dev_mc_del(struct net_device *, unsigned char const *);


#line 3650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static netdev_features_t netdev_intersect_features(netdev_features_t f1, netdev_features_t f2)
{
  
#line 3653 
  if ((f1 & 8ULL) != 0ULL) 
#line 3654 
                           f1 |= 18ULL; else ;
  
#line 3655 
  if ((f2 & 8ULL) != 0ULL) 
#line 3656 
                           f2 |= 18ULL; else ;
  
#line 3657 
  f1 &= f2;
  
#line 3658 
  if ((f1 & 8ULL) != 0ULL) 
#line 3659 
                           f1 &= 18446744073709551597ULL; else ;
  
#line 3661 
  return f1;
}


#line 3683 
void netdev_update_features(struct net_device *);


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
int eth_validate_addr(struct net_device *);


#line 53 
static struct net_device *ldv_alloc_etherdev_mqs_80(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3);


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_unicast_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_0;
  bool tmp;
  
#line 172 
  tmp = is_multicast_ether_addr(addr);
  
#line 172 
  if ((int)tmp != 0) 
#line 172 
                     tmp_0 = 0; else 
#line 172 
                                     tmp_0 = 1;
  
#line 172 
  __retres = (_Bool)(tmp_0 != 0);
  
#line 172 
  return __retres;
}


#line 364  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool ether_addr_equal_unaligned(u8 const *addr1, u8 const *addr2)
{
  bool tmp;
  
#line 367 
  tmp = ether_addr_equal(addr1,addr2);
  
#line 367 
  return tmp;
}


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
int ndo_dflt_fdb_dump(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int);


#line 103 
int ndo_dflt_fdb_add(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16, u16);


#line 109 
int ndo_dflt_fdb_del(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16);


#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct net_device *__vlan_find_dev_deep_rcu(struct net_device *, __be16, u16);


#line 111 
struct net_device *vlan_dev_real_dev(struct net_device const *);


#line 481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  __be16 __retres;
  
#line 484 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  
#line 490 
  if ((unsigned int)type == 129U || (unsigned int)type == 43144U) {
    
#line 491 
    if (vlan_depth != 0U) {
      int tmp;
      {
        
#line 492 
        int __ret_warn_on = vlan_depth <= 3U;
        
#line 492 
        if ((long)(__ret_warn_on != 0) != 0L) 
#line 492 
                                              warn_slowpath_null("include/linux/if_vlan.h",492); else ;
        
#line 492 
        tmp = (long)(__ret_warn_on != 0);
      }
      
#line 492 
      if ((long)tmp != 0L) {
        
#line 493 
        __retres = (unsigned short)0U;
        
#line 493 
        goto return_label;
      }
      else ;
      
#line 494 
      vlan_depth += 4294967292U;
    }
    else 
#line 496 
         vlan_depth = 14U;
    ldv_51348: 
#line 497 
    ;
    {
      struct vlan_hdr *vh;
      int tmp_0;
      
#line 501 
      tmp_0 = pskb_may_pull(skb,vlan_depth + 4U);
      
#line 501 
      if ((long)(tmp_0 == 0) != 0L) {
        
#line 503 
        __retres = (unsigned short)0U;
        
#line 503 
        goto return_label;
      }
      else ;
      
#line 505 
      vh = (struct vlan_hdr *)(skb->data + vlan_depth);
      
#line 506 
      type = vh->h_vlan_encapsulated_proto;
      
#line 507 
      vlan_depth += 4U;
    }
    
#line 509 
    if ((unsigned int)type == 129U || (unsigned int)type == 43144U) 
#line 511 
                                                                    goto ldv_51348; else 
                                                                    
#line 514 
                                                                    goto ldv_51349;
    ldv_51349: 
#line 515 
    ;
  }
  else ;
  
#line 512 
  if (depth != (int *)0) 
#line 513 
                         *depth = (int)vlan_depth; else ;
  
#line 515 
  __retres = type;
  return_label: 
#line 515 
                return __retres;
}


#line 525  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  __be16 tmp;
  
#line 527 
  tmp = __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
  
#line 527 
  return tmp;
}


#line 588  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static bool skb_vlan_tagged_multi(struct sk_buff const *skb)
{
  bool __retres;
  
#line 590 
  __be16 protocol = skb->protocol;
  
#line 592 
  if (((int)skb->vlan_tci & 4096) == 0) {
    struct vlan_ethhdr *veh;
    
#line 595 
    if ((long)(((unsigned int)protocol != 129U && (unsigned int)protocol != 43144U) != 0) != 0L) {
      
#line 597 
      __retres = (_Bool)0;
      
#line 597 
      goto return_label;
    }
    else ;
    
#line 599 
    veh = (struct vlan_ethhdr *)skb->data;
    
#line 600 
    protocol = veh->h_vlan_encapsulated_proto;
  }
  else ;
  
#line 603 
  if ((unsigned int)protocol != 129U && (unsigned int)protocol != 43144U) {
    
#line 604 
    __retres = (_Bool)0;
    
#line 604 
    goto return_label;
  }
  else ;
  
#line 606 
  __retres = (_Bool)1;
  return_label: 
#line 606 
                return __retres;
}


#line 616  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static netdev_features_t vlan_features_check(struct sk_buff const *skb, netdev_features_t features)
{
  bool tmp;
  
#line 619 
  tmp = skb_vlan_tagged_multi(skb);
  
#line 619 
  if ((int)tmp != 0) 
#line 620 
                     features = netdev_intersect_features(features,549755814121ULL); else ;
  
#line 628 
  return features;
}


#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.h"
int qlcnic_82xx_hw_read_wx_2M(struct qlcnic_adapter *adapter, ulong off, int *err);


#line 168 
int qlcnic_82xx_hw_write_wx_2M(struct qlcnic_adapter *adapter, ulong off, u32 data);


#line 169 
int qlcnic_82xx_config_hw_lro(struct qlcnic_adapter *adapter, int enable);


#line 170 
int qlcnic_82xx_nic_set_promisc(struct qlcnic_adapter *adapter, u32 mode);


#line 173 
void qlcnic_82xx_get_beacon_state(struct qlcnic_adapter *adapter);


#line 176 
int qlcnic_82xx_config_intr_coalesce(struct qlcnic_adapter *adapter, struct ethtool_coalesce *ethcoal);


#line 178 
int qlcnic_82xx_set_rx_coalesce(struct qlcnic_adapter *adapter);


#line 179 
int qlcnic_82xx_config_rss(struct qlcnic_adapter *adapter, int enable);


#line 180 
void qlcnic_82xx_config_ipaddr(struct qlcnic_adapter *adapter, __be32 ip, int cmd);


#line 182 
int qlcnic_82xx_linkevent_request(struct qlcnic_adapter *adapter, int enable);


#line 184 
int qlcnic_82xx_clear_lb_mode(struct qlcnic_adapter *adapter, u8 mode);


#line 185 
int qlcnic_82xx_set_lb_mode(struct qlcnic_adapter *adapter, u8 mode);


#line 186 
void qlcnic_82xx_write_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size);


#line 187 
void qlcnic_82xx_read_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size);


#line 188 
int qlcnic_82xx_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd);


#line 190 
int qlcnic_82xx_mq_intrpt(struct qlcnic_adapter *adapter, int op_type);


#line 191 
int qlcnic_82xx_config_intrpt(struct qlcnic_adapter *adapter, u8 op_type);


#line 192 
int qlcnic_82xx_fw_cmd_create_rx_ctx(struct qlcnic_adapter *adapter);


#line 193 
int qlcnic_82xx_fw_cmd_create_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring, int ring);


#line 195 
void qlcnic_82xx_fw_cmd_del_rx_ctx(struct qlcnic_adapter *adapter);


#line 196 
void qlcnic_82xx_fw_cmd_del_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring);


#line 198 
int qlcnic_82xx_sre_macaddr_change(struct qlcnic_adapter *adapter, u8 *addr, u16 vlan_id, u8 op);


#line 199 
int qlcnic_82xx_get_mac_address(struct qlcnic_adapter *adapter, u8 *mac, u8 function);


#line 200 
int qlcnic_82xx_get_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info, u8 func_id);


#line 201 
int qlcnic_82xx_set_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *nic);


#line 202 
int qlcnic_82xx_get_pci_info(struct qlcnic_adapter *adapter, struct qlcnic_pci_info *pci_info);


#line 203 
int qlcnic_82xx_alloc_mbx_args(struct qlcnic_cmd_args *mbx, struct qlcnic_adapter *adapter, u32 type);


#line 206 
int qlcnic_82xx_get_board_info(struct qlcnic_adapter *adapter);


#line 207 
int qlcnic_82xx_config_led(struct qlcnic_adapter *adapter, u32 state, u32 rate);


#line 208 
void qlcnic_82xx_get_func_no(struct qlcnic_adapter *adapter);


#line 209 
int qlcnic_82xx_api_lock(struct qlcnic_adapter *adapter);


#line 210 
void qlcnic_82xx_api_unlock(struct qlcnic_adapter *adapter);


#line 214 
int qlcnic_82xx_shutdown(struct pci_dev *pdev);


#line 215 
int qlcnic_82xx_resume(struct qlcnic_adapter *adapter);


#line 216 
void qlcnic_clr_all_drv_state(struct qlcnic_adapter *adapter, u8 failed);


#line 217 
void qlcnic_fw_poll_work(struct work_struct *work);


#line 555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
void qlcnic_83xx_initialize_nic(struct qlcnic_adapter *adapter, int enable);


#line 583 
int qlcnic_83xx_set_rx_tx_intr_coal(struct qlcnic_adapter *adapter);


#line 588 
irqreturn_t qlcnic_83xx_intr(int irq, void *data);


#line 589 
irqreturn_t qlcnic_83xx_tmp_intr(int irq, void *data);


#line 590 
void qlcnic_83xx_check_vf(struct qlcnic_adapter *adapter, struct pci_device_id const *ent);


#line 593 
int qlcnic_83xx_setup_mbx_intr(struct qlcnic_adapter *adapter);


#line 594 
void qlcnic_83xx_free_mbx_intr(struct qlcnic_adapter *adapter);


#line 595 
void qlcnic_83xx_register_map(struct qlcnic_hardware_context *ahw);


#line 611 
int qlcnic_83xx_init(struct qlcnic_adapter *adapter, int pci_using_dac);


#line 615 
void qlcnic_83xx_idc_request_reset(struct qlcnic_adapter *adapter, u32 key);


#line 625 
int qlcnic_83xx_set_port_eswitch_status(struct qlcnic_adapter *adapter, int func, int *port_id);


#line 645 
void qlcnic_83xx_enable_mbx_poll(struct qlcnic_adapter *adapter);


#line 646 
void qlcnic_83xx_disable_mbx_poll(struct qlcnic_adapter *adapter);


#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
int qlcnic_register_dcb(struct qlcnic_adapter *adapter);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static void qlcnic_clear_dcb_ops(struct qlcnic_dcb *dcb)
{
  
#line 47 
  kfree((void const *)dcb);
  
#line 48 
  dcb = (struct qlcnic_dcb *)0;
  
#line 49 
  return;
}


#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static void qlcnic_dcb_free(struct qlcnic_dcb *dcb)
{
  
#line 61 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->free != (void (*)(struct qlcnic_dcb *))0) 
    
#line 62 
    (*((dcb->ops)->free))(dcb); else ;
  
#line 63 
  return;
}


#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static int qlcnic_dcb_attach(struct qlcnic_dcb *dcb)
{
  int __retres;
  
#line 67 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->attach != (int (*)(struct qlcnic_dcb *))0) {
    int tmp;
    
#line 68 
    tmp = (*((dcb->ops)->attach))(dcb);
    
#line 68 
    __retres = tmp;
    
#line 68 
    goto return_label;
  }
  else ;
  
#line 70 
  __retres = 0;
  return_label: 
#line 70 
                return __retres;
}


#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static void qlcnic_dcb_get_info(struct qlcnic_dcb *dcb)
{
  
#line 84 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->get_info != (void (*)(struct qlcnic_dcb *))0) 
    
#line 85 
    (*((dcb->ops)->get_info))(dcb); else ;
  
#line 86 
  return;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static void qlcnic_dcb_init_dcbnl_ops(struct qlcnic_dcb *dcb)
{
  
#line 113 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->init_dcbnl_ops != (void (*)(struct qlcnic_dcb *))0) 
    
#line 114 
    (*((dcb->ops)->init_dcbnl_ops))(dcb); else ;
  
#line 115 
  return;
}


#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static void qlcnic_dcb_enable(struct qlcnic_dcb *dcb)
{
  
#line 119 
  if (dcb != (struct qlcnic_dcb *)0) {
    int tmp;
    
#line 119 
    tmp = qlcnic_dcb_attach(dcb);
    
#line 119 
    if (tmp != 0) 
#line 120 
                  qlcnic_clear_dcb_ops(dcb); else ;
  }
  else ;
  
#line 121 
  return;
}


#line 335  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
char qlcnic_driver_name[7U];


#line 337 
int qlcnic_use_msi;


#line 338 
int qlcnic_use_msi_x;


#line 339 
int qlcnic_auto_fw_reset;


#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_load_fw_file;

#line 1582  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
void qlcnic_prune_lb_filters(struct qlcnic_adapter *adapter);


#line 1583 
void qlcnic_delete_lb_filters(struct qlcnic_adapter *adapter);


#line 1589 
void qlcnic_schedule_work(struct qlcnic_adapter *adapter, void (*func)(struct work_struct *), int delay);


#line 1590 
int qlcnic_load_firmware(struct qlcnic_adapter *adapter);


#line 1591 
int qlcnic_need_fw_reset(struct qlcnic_adapter *adapter);


#line 1592 
void qlcnic_request_firmware(struct qlcnic_adapter *adapter);


#line 1593 
void qlcnic_release_firmware(struct qlcnic_adapter *adapter);


#line 1594 
int qlcnic_pinit_from_rom(struct qlcnic_adapter *adapter);


#line 1595 
int qlcnic_setup_idc_param(struct qlcnic_adapter *adapter);


#line 1596 
int qlcnic_check_flash_fw_ver(struct qlcnic_adapter *adapter);


#line 1601 
int qlcnic_alloc_sw_resources(struct qlcnic_adapter *adapter);


#line 1602 
void qlcnic_free_sw_resources(struct qlcnic_adapter *adapter);


#line 1604 
void *qlcnic_get_ioaddr(struct qlcnic_hardware_context *ahw, u32 offset);


#line 1606 
int qlcnic_alloc_hw_resources(struct qlcnic_adapter *adapter);


#line 1607 
void qlcnic_free_hw_resources(struct qlcnic_adapter *adapter);


#line 1609 
int qlcnic_fw_create_ctx(struct qlcnic_adapter *dev);


#line 1610 
void qlcnic_fw_destroy_ctx(struct qlcnic_adapter *adapter);


#line 1612 
void qlcnic_reset_rx_buffers_list(struct qlcnic_adapter *adapter);


#line 1613 
void qlcnic_release_rx_buffers(struct qlcnic_adapter *adapter);


#line 1614 
void qlcnic_release_tx_buffers(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring);


#line 1617 
int qlcnic_check_fw_status(struct qlcnic_adapter *adapter);


#line 1621 
void qlcnic_set_multi(struct net_device *netdev);


#line 1625 
int qlcnic_nic_del_mac(struct qlcnic_adapter *adapter, u8 const *addr);


#line 1626 
void qlcnic_82xx_free_mac_list(struct qlcnic_adapter *adapter);


#line 1627 
int qlcnic_82xx_read_phys_port_id(struct qlcnic_adapter *adapter);


#line 1629 
int qlcnic_fw_cmd_set_mtu(struct qlcnic_adapter *adapter, int mtu);


#line 1630 
int qlcnic_fw_cmd_set_drv_version(struct qlcnic_adapter *adapter, u32 fw_cmd);


#line 1631 
int qlcnic_change_mtu(struct net_device *netdev, int mtu);


#line 1632 
netdev_features_t qlcnic_fix_features(struct net_device *netdev, netdev_features_t features);


#line 1634 
int qlcnic_set_features(struct net_device *netdev, netdev_features_t features);


#line 1635 
int qlcnic_config_bridged_mode(struct qlcnic_adapter *adapter, u32 enable);


#line 1643 
int qlcnic_reset_context(struct qlcnic_adapter *adapter);


#line 1644 
void qlcnic_diag_free_res(struct net_device *netdev, int drv_sds_rings);


#line 1645 
int qlcnic_diag_alloc_res(struct net_device *netdev, int test);


#line 1647 
void qlcnic_set_tx_ring_count(struct qlcnic_adapter *adapter, u8 tx_cnt);


#line 1648 
void qlcnic_set_sds_ring_count(struct qlcnic_adapter *adapter, u8 rx_cnt);


#line 1649 
int qlcnic_setup_rings(struct qlcnic_adapter *adapter);


#line 1650 
int qlcnic_validate_rings(struct qlcnic_adapter *adapter, __u32 ring_cnt, int queue_type);


#line 1651 
void qlcnic_alloc_lb_filters_mem(struct qlcnic_adapter *adapter);


#line 1652 
int qlcnic_enable_msix(struct qlcnic_adapter *adapter, u32 num_msix);


#line 1653 
void qlcnic_set_drv_version(struct qlcnic_adapter *adapter);


#line 1656 
int qlcnic_config_switch_port(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg);


#line 1659 
int qlcnic_get_eswitch_port_config(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg);


#line 1661 
int qlcnic_config_port_mirroring(struct qlcnic_adapter *adapter, u8 id, u8 enable_mirroring, u8 pci_func);


#line 1678 
void qlcnic_create_sysfs_entries(struct qlcnic_adapter *adapter);


#line 1679 
void qlcnic_remove_sysfs_entries(struct qlcnic_adapter *adapter);


#line 1680 
void qlcnic_82xx_add_sysfs(struct qlcnic_adapter *adapter);


#line 1681 
void qlcnic_82xx_remove_sysfs(struct qlcnic_adapter *adapter);


#line 1683 
int qlcnicvf_config_bridged_mode(struct qlcnic_adapter *adapter, u32 enable);


#line 1684 
int qlcnicvf_config_led(struct qlcnic_adapter *adapter, u32 state, u32 rate);


#line 1685 
void qlcnic_set_vlan_config(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg);


#line 1687 
void qlcnic_set_eswitch_port_features(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg);


#line 1689 
int qlcnic_setup_tss_rss_intr(struct qlcnic_adapter *adapter);


#line 1690 
void qlcnic_down(struct qlcnic_adapter *adapter, struct net_device *netdev);


#line 1691 
int qlcnic_up(struct qlcnic_adapter *adapter, struct net_device *netdev);


#line 1693 
void qlcnic_detach(struct qlcnic_adapter *adapter);


#line 1694 
void qlcnic_teardown_intr(struct qlcnic_adapter *adapter);


#line 1695 
int qlcnic_attach(struct qlcnic_adapter *adapter);


#line 1697 
void qlcnic_restore_indev_addr(struct net_device *netdev, unsigned long event);


#line 1699 
int qlcnic_check_temp(struct qlcnic_adapter *adapter);


#line 1700 
int qlcnic_init_pci_info(struct qlcnic_adapter *adapter);


#line 1701 
int qlcnic_set_default_offload_settings(struct qlcnic_adapter *adapter);


#line 1702 
int qlcnic_reset_npar_config(struct qlcnic_adapter *adapter);


#line 1703 
int qlcnic_set_eswitch_port_config(struct qlcnic_adapter *adapter);


#line 1705 
int qlcnic_read_mac_addr(struct qlcnic_adapter *adapter);


#line 1706 
int qlcnic_setup_netdev(struct qlcnic_adapter *adapter, struct net_device *netdev, int pci_using_dac);


#line 1707 
void qlcnic_set_netdev_features(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg);


#line 1761 
void qlcnic_83xx_detach_mailbox_work(struct qlcnic_adapter *adapter);


#line 1763 
void qlcnic_83xx_free_mailbox(struct qlcnic_mailbox *mbx);


#line 1764 
void qlcnic_update_stats(struct qlcnic_adapter *adapter);


#line 1830 
struct qlcnic_nic_template qlcnic_vf_ops;


#line 1838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_encap_rx_offload(struct qlcnic_adapter *adapter)
{
  bool __retres;
  
#line 1840 
  __retres = (_Bool)(((adapter->ahw)->extra_capability[0] & 1U) != 0U);
  
#line 1840 
  return __retres;
}


#line 1844  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
static int qlcnic_start_firmware(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 1846 
  tmp = (*((adapter->nic_ops)->start_firmware))(adapter);
  
#line 1846 
  return tmp;
}


#line 1867  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_get_mac_address(struct qlcnic_adapter *adapter, u8 *mac, u8 function)
{
  int tmp;
  
#line 1870 
  tmp = (*(((adapter->ahw)->hw_ops)->get_mac_address))(adapter,mac,(unsigned char)((int)function));
  
#line 1870 
  return tmp;
}


#line 1873  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_setup_intr(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 1875 
  tmp = (*(((adapter->ahw)->hw_ops)->setup_intr))(adapter);
  
#line 1875 
  return tmp;
}


#line 1893  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_get_func_no(struct qlcnic_adapter *adapter)
{
  
#line 1895 
  (*(((adapter->ahw)->hw_ops)->get_func_no))(adapter);
  
#line 1896 
  return;
}


#line 1898  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_api_lock(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 1900 
  tmp = (*(((adapter->ahw)->hw_ops)->api_lock))(adapter);
  
#line 1900 
  return tmp;
}


#line 1903  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_api_unlock(struct qlcnic_adapter *adapter)
{
  
#line 1905 
  (*(((adapter->ahw)->hw_ops)->api_unlock))(adapter);
  
#line 1906 
  return;
}


#line 1908  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_add_sysfs(struct qlcnic_adapter *adapter)
{
  
#line 1910 
  if (((adapter->ahw)->hw_ops)->add_sysfs != (void (*)(struct qlcnic_adapter *))0) 
    
#line 1911 
    (*(((adapter->ahw)->hw_ops)->add_sysfs))(adapter); else ;
  
#line 1912 
  return;
}


#line 1914  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_remove_sysfs(struct qlcnic_adapter *adapter)
{
  
#line 1916 
  if (((adapter->ahw)->hw_ops)->remove_sysfs != (void (*)(struct qlcnic_adapter *))0) 
    
#line 1917 
    (*(((adapter->ahw)->hw_ops)->remove_sysfs))(adapter); else ;
  
#line 1918 
  return;
}


#line 1949  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_linkevent_request(struct qlcnic_adapter *adapter, int enable)
{
  int tmp;
  
#line 1952 
  tmp = (*(((adapter->ahw)->hw_ops)->setup_link_event))(adapter,enable);
  
#line 1952 
  return tmp;
}


#line 1961  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_get_pci_info(struct qlcnic_adapter *adapter, struct qlcnic_pci_info *info)
{
  int tmp;
  
#line 1964 
  tmp = (*(((adapter->ahw)->hw_ops)->get_pci_info))(adapter,info);
  
#line 1964 
  return tmp;
}


#line 1967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_set_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *info)
{
  int tmp;
  
#line 1970 
  tmp = (*(((adapter->ahw)->hw_ops)->set_nic_info))(adapter,info);
  
#line 1970 
  return tmp;
}


#line 1979  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_napi_add(struct qlcnic_adapter *adapter, struct net_device *netdev)
{
  int tmp;
  
#line 1982 
  tmp = (*((adapter->nic_ops)->napi_add))(adapter,netdev);
  
#line 1982 
  return tmp;
}


#line 1985  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_napi_del(struct qlcnic_adapter *adapter)
{
  
#line 1987 
  (*((adapter->nic_ops)->napi_del))(adapter);
  
#line 1988 
  return;
}


#line 1990  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_napi_enable(struct qlcnic_adapter *adapter)
{
  
#line 1992 
  (*(((adapter->ahw)->hw_ops)->napi_enable))(adapter);
  
#line 1993 
  return;
}


#line 1995  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int __qlcnic_shutdown(struct pci_dev *pdev)
{
  int tmp_0;
  
#line 1997 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  
#line 1999 
  tmp_0 = (*((adapter->nic_ops)->shutdown))(pdev);
  
#line 1999 
  return tmp_0;
}


#line 2002  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int __qlcnic_resume(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 2004 
  tmp = (*((adapter->nic_ops)->resume))(adapter);
  
#line 2004 
  return tmp;
}


#line 2007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_napi_disable(struct qlcnic_adapter *adapter)
{
  
#line 2009 
  (*(((adapter->ahw)->hw_ops)->napi_disable))(adapter);
  
#line 2010 
  return;
}


#line 2018  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_config_rss(struct qlcnic_adapter *adapter, int enable)
{
  int tmp;
  
#line 2020 
  tmp = (*(((adapter->ahw)->hw_ops)->config_rss))(adapter,enable);
  
#line 2020 
  return tmp;
}


#line 2023  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_config_hw_lro(struct qlcnic_adapter *adapter, int enable)
{
  int tmp;
  
#line 2026 
  tmp = (*(((adapter->ahw)->hw_ops)->config_hw_lro))(adapter,enable);
  
#line 2026 
  return tmp;
}


#line 2039  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_nic_set_promisc(struct qlcnic_adapter *adapter, u32 mode)
{
  int tmp;
  
#line 2042 
  tmp = (*(((adapter->ahw)->hw_ops)->config_promisc_mode))(adapter,mode);
  
#line 2042 
  return tmp;
}


#line 2051  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_get_board_info(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 2053 
  tmp = (*(((adapter->ahw)->hw_ops)->get_board_info))(adapter);
  
#line 2053 
  return tmp;
}


#line 2056  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_free_mac_list(struct qlcnic_adapter *adapter)
{
  
#line 2058 
  (*(((adapter->ahw)->hw_ops)->free_mac_list))(adapter);
  
#line 2059 
  return;
}


#line 2061  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_set_mac_filter_count(struct qlcnic_adapter *adapter)
{
  
#line 2063 
  if (((adapter->ahw)->hw_ops)->set_mac_filter_count != (void (*)(struct qlcnic_adapter *))0) 
    
#line 2064 
    (*(((adapter->ahw)->hw_ops)->set_mac_filter_count))(adapter); else ;
  
#line 2065 
  return;
}


#line 2072  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_read_phys_port_id(struct qlcnic_adapter *adapter)
{
  
#line 2074 
  if (((adapter->ahw)->hw_ops)->read_phys_port_id != (int (*)(struct qlcnic_adapter *))0) 
    
#line 2075 
    (*(((adapter->ahw)->hw_ops)->read_phys_port_id))(adapter); else ;
  
#line 2076 
  return;
}


#line 2114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_dev_request_reset(struct qlcnic_adapter *adapter, u32 key)
{
  
#line 2117 
  if ((adapter->nic_ops)->request_reset != (void (*)(struct qlcnic_adapter *, u32 ))0) 
    
#line 2118 
    (*((adapter->nic_ops)->request_reset))(adapter,key); else ;
  
#line 2119 
  return;
}


#line 2121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_cancel_idc_work(struct qlcnic_adapter *adapter)
{
  
#line 2123 
  if ((adapter->nic_ops)->cancel_idc_work != (void (*)(struct qlcnic_adapter *))0) 
    
#line 2124 
    (*((adapter->nic_ops)->cancel_idc_work))(adapter); else ;
  
#line 2125 
  return;
}


#line 2128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static irqreturn_t qlcnic_clear_legacy_intr(struct qlcnic_adapter *adapter)
{
  irqreturn_t tmp;
  
#line 2130 
  tmp = (*((adapter->nic_ops)->clear_legacy_intr))(adapter);
  
#line 2130 
  return tmp;
}


#line 2139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_config_ipaddr(struct qlcnic_adapter *adapter, __be32 ip, int cmd)
{
  
#line 2142 
  (*((adapter->nic_ops)->config_ipaddr))(adapter,ip,cmd);
  
#line 2143 
  return;
}


#line 2151  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_82xx_enable_tx_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  bool tmp;
  
#line 2154 
  tmp = qlcnic_check_multi_tx(adapter);
  
#line 2154 
  if ((int)tmp != 0) {
    
#line 2154 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
#line 2156 
                                                       writel(0U,(void volatile *)tx_ring->crb_intr_mask); else ;
  }
  else ;
  
#line 2157 
  return;
}


#line 2160  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_82xx_disable_tx_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  bool tmp;
  
#line 2163 
  tmp = qlcnic_check_multi_tx(adapter);
  
#line 2163 
  if ((int)tmp != 0) {
    
#line 2163 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
#line 2165 
                                                       writel(1U,(void volatile *)tx_ring->crb_intr_mask); else ;
  }
  else ;
  
#line 2166 
  return;
}


#line 2198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_disable_multi_tx(struct qlcnic_adapter *adapter)
{
  
#line 2200 
  test_and_set_bit(9L,(unsigned long volatile *)(& adapter->state));
  
#line 2201 
  adapter->drv_tx_rings = (unsigned char)1U;
  
#line 2202 
  return;
}


#line 2208  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_82xx_disable_sds_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_sds_ring *sds_ring)
{
  bool tmp;
  
#line 2211 
  tmp = qlcnic_check_multi_tx(adapter);
  
#line 2211 
  if ((int)tmp != 0) 
    
#line 2211 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
      
#line 2212 
      if ((adapter->flags & 4U) != 0U) 
#line 2214 
                                       writel(1U,(void volatile *)sds_ring->crb_intr_mask); else 
                                                                    
#line 2216 
                                                                    writel(0U,(void volatile *)sds_ring->crb_intr_mask);
    else 
#line 2216 
         writel(0U,(void volatile *)sds_ring->crb_intr_mask);
  else 
#line 2216 
       writel(0U,(void volatile *)sds_ring->crb_intr_mask);
  
#line 2217 
  return;
}


#line 2252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_82xx_enable_sds_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_sds_ring *sds_ring)
{
  bool tmp;
  
#line 2255 
  tmp = qlcnic_check_multi_tx(adapter);
  
#line 2255 
  if ((int)tmp != 0) 
    
#line 2255 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
      
#line 2256 
      if ((adapter->flags & 4U) != 0U) 
#line 2258 
                                       writel(0U,(void volatile *)sds_ring->crb_intr_mask); else 
                                                                    
#line 2260 
                                                                    writel(1U,(void volatile *)sds_ring->crb_intr_mask);
    else 
#line 2260 
         writel(1U,(void volatile *)sds_ring->crb_intr_mask);
  else 
#line 2260 
       writel(1U,(void volatile *)sds_ring->crb_intr_mask);
  
#line 2262 
  if ((adapter->flags & 6U) == 0U) 
#line 2263 
                                   writel(64511U,(void volatile *)adapter->tgt_mask_reg); else ;
  
#line 2264 
  return;
}


#line 2281 
struct ethtool_ops const qlcnic_sriov_vf_ethtool_ops;


#line 2282 
struct ethtool_ops const qlcnic_ethtool_ops;


#line 2283 
struct ethtool_ops const qlcnic_ethtool_failed_ops;


#line 2332  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_sriov_vf_check(struct qlcnic_adapter *adapter)
{
  bool status;
  
#line 2334 
  unsigned short device = (adapter->pdev)->device;
  
#line 2337 
  status = (_Bool)(((unsigned int)device == 33840U || (unsigned int)device == 33856U) != 0);
  
#line 2340 
  return status;
}


#line 2357  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_sriov_check(struct qlcnic_adapter *adapter)
{
  bool status;
  int tmp_1;
  bool tmp;
  
#line 2362 
  tmp = qlcnic_sriov_pf_check(adapter);
  
#line 2362 
  if ((int)tmp != 0) 
#line 2362 
                     tmp_1 = 1;
  else {
    bool tmp_0;
    
#line 2362 
    tmp_0 = qlcnic_sriov_vf_check(adapter);
    
#line 2362 
    if ((int)tmp_0 != 0) 
#line 2362 
                         tmp_1 = 1; else 
#line 2362 
                                         tmp_1 = 0;
  }
  
#line 2361 
  status = (_Bool)(tmp_1 != 0);
  
#line 2364 
  return status;
}


#line 2367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static u32 qlcnic_get_vnic_func_count(struct qlcnic_adapter *adapter)
{
  u32 __retres;
  bool tmp;
  
#line 2369 
  tmp = qlcnic_84xx_check(adapter);
  
#line 2369 
  if ((int)tmp != 0) {
    
#line 2370 
    __retres = 16U;
    
#line 2370 
    goto return_label;
  }
  else {
    
#line 2372 
    __retres = 8U;
    
#line 2372 
    goto return_label;
  }
  return_label: 
#line 2369 
                return __retres;
}


#line 2389 
void qlcnic_register_hwmon_dev(struct qlcnic_adapter *adapter);


#line 2390 
void qlcnic_unregister_hwmon_dev(struct qlcnic_adapter *adapter);


#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
void qlcnic_sriov_cleanup(struct qlcnic_adapter *adapter);


#line 189 
void qlcnic_sriov_vf_register_map(struct qlcnic_hardware_context *ahw);


#line 195 
void qlcnic_sriov_cleanup_async_list(struct qlcnic_back_channel *bc);


#line 201 
int qlcnic_sriov_cfg_vf_guest_vlan(struct qlcnic_adapter *adapter, u16 vid, u8 enable);


#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/inetdevice.h"
int register_inetaddr_notifier(struct notifier_block *);


#line 154 
int unregister_inetaddr_notifier(struct notifier_block *);


#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/inetdevice.h"
__inline static struct in_device *__in_dev_get_rcu(struct net_device const *dev)
{
  struct in_device *tmp_3;
  {
    struct in_device *tmp_0;
    {
      struct in_device *tmp;
      {
        union __anonunion___u_1531 __u;
        
#line 205 
        __read_once_size((void const volatile *)(& dev->ip_ptr),(void *)(& __u.__c),8);
        
#line 205 
        tmp = __u.__val;
      }
      
#line 205 
      struct in_device * const _________p1 = tmp;
      
#line 205 
      tmp_0 = _________p1;
    }
    
#line 205 
    struct in_device *________p1 = tmp_0;
    {
      bool __warned;
      int tmp_1;
      
#line 205 
      tmp_1 = debug_lockdep_rcu_enabled();
      
#line 205 
      if (tmp_1 != 0) {
        
#line 205 
        if (! __warned) {
          int tmp_2;
          
#line 205 
          tmp_2 = rcu_read_lock_held();
          
#line 205 
          if (tmp_2 == 0) {
            
#line 205 
            __warned = (_Bool)1;
            
#line 205 
            lockdep_rcu_suspicious("include/linux/inetdevice.h",205,"suspicious rcu_dereference_check() usage");
          }
          else ;
        }
        else ;
      }
      else ;
    }
    
#line 205 
    tmp_3 = ________p1;
  }
  
#line 205 
  return tmp_3;
}


#line 208  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/inetdevice.h"
__inline static struct in_device *in_dev_get(struct net_device const *dev)
{
  struct in_device *in_dev;
  
#line 212 
  rcu_read_lock();
  
#line 213 
  in_dev = __in_dev_get_rcu(dev);
  
#line 214 
  if (in_dev != (struct in_device *)0) 
#line 215 
                                       atomic_inc(& in_dev->refcnt); else ;
  
#line 216 
  rcu_read_unlock();
  
#line 217 
  return in_dev;
}


#line 232 
void in_dev_finish_destroy(struct in_device *);


#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/inetdevice.h"
__inline static void in_dev_put(struct in_device *idev)
{
  int tmp;
  
#line 236 
  tmp = atomic_dec_and_test(& idev->refcnt);
  
#line 236 
  if (tmp != 0) 
#line 237 
                in_dev_finish_destroy(idev); else ;
  
#line 238 
  return;
}


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/aer.h"
int pci_enable_pcie_error_reporting(struct pci_dev *);


#line 43 
int pci_disable_pcie_error_reporting(struct pci_dev *);


#line 44 
int pci_cleanup_aer_uncorrect_error_status(struct pci_dev *);


#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/vxlan.h"
__inline static netdev_features_t vxlan_features_check(struct sk_buff *skb, netdev_features_t features)
{
  netdev_features_t __retres;
  __be16 tmp;
  
#line 156 
  u8 l4_hdr = (unsigned char)0U;
  
#line 158 
  if ((unsigned int)*((unsigned char *)skb + 146UL) == 0U) {
    
#line 159 
    __retres = features;
    
#line 159 
    goto return_label;
  }
  else ;
  
#line 161 
  tmp = vlan_get_protocol(skb);
  
#line 161 
  switch ((int)tmp) {
    struct iphdr *tmp_0;
    struct ipv6hdr *tmp_1;
    case 8: 
#line 162 
    ;
    
#line 163 
    tmp_0 = ip_hdr((struct sk_buff const *)skb);
    
#line 163 
    l4_hdr = tmp_0->protocol;
    
#line 164 
    goto ldv_56352;
    case 56710: 
#line 165 
    ;
    
#line 166 
    tmp_1 = ipv6_hdr((struct sk_buff const *)skb);
    
#line 166 
    l4_hdr = tmp_1->nexthdr;
    
#line 167 
    goto ldv_56352;
    default: 
#line 168 
    ;
    
#line 169 
    __retres = features;
    
#line 169 
    goto return_label;
  }
  ldv_56352: 
#line 172 
  ;
  
#line 172 
  if ((unsigned int)l4_hdr == 17U) 
    
#line 172 
    if ((unsigned int)*((unsigned char *)skb + 147UL) != 0U || (unsigned int)skb->__anonCompField_sk_buff_85.inner_protocol != 22629U) {
      
#line 177 
      __retres = features & 18446744073172746213ULL;
      
#line 177 
      goto return_label;
    }
    else {
      unsigned char *tmp_2;
      unsigned char *tmp_3;
      
#line 174 
      tmp_2 = skb_inner_mac_header((struct sk_buff const *)skb);
      
#line 175 
      tmp_3 = skb_transport_header((struct sk_buff const *)skb);
      
#line 174 
      if ((long)tmp_2 - (long)tmp_3 != 16L) {
        
#line 177 
        __retres = features & 18446744073172746213ULL;
        
#line 177 
        goto return_label;
      }
      else ;
    }
  else ;
  
#line 179 
  __retres = features;
  return_label: 
#line 179 
                return __retres;
}


#line 188 
void vxlan_get_rx_port(struct net_device *);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
char qlcnic_driver_name[7U] = {(char)'q', (char)'l', (char)'c', (char)'n', (char)'i', (char)'c', (char)'\000'};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static char const qlcnic_driver_string[62U] = {(char)'Q', (char)'L', (char)'o', (char)'g', (char)'i', (char)'c', (char)' ', (char)'1', (char)'/', (char)'1', (char)'0', (char)' ', (char)'G', (char)'b', (char)'E', (char)' ', (char)'\000'};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_mac_learn;

#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_use_msi = 1;

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_use_msi_x = 1;

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_auto_fw_reset = 1;

#line 58 
static int qlcnic_probe(struct pci_dev *pdev, struct pci_device_id const *ent);


#line 59 
static void qlcnic_remove(struct pci_dev *pdev);


#line 60 
static int qlcnic_open(struct net_device *netdev);


#line 61 
static int qlcnic_close(struct net_device *netdev);


#line 62 
static void qlcnic_tx_timeout(struct net_device *netdev);


#line 63 
static void qlcnic_attach_work(struct work_struct *work);


#line 64 
static void qlcnic_fwinit_work(struct work_struct *work);


#line 66 
static void qlcnic_poll_controller(struct net_device *netdev);


#line 69 
static void qlcnic_idc_debug_info(struct qlcnic_adapter *adapter, u8 encoding);


#line 70 
static int qlcnic_can_start_firmware(struct qlcnic_adapter *adapter);


#line 72 
static irqreturn_t qlcnic_tmp_intr(int irq, void *data);


#line 73 
static irqreturn_t qlcnic_intr(int irq, void *data);


#line 74 
static irqreturn_t qlcnic_msi_intr(int irq, void *data);


#line 75 
static irqreturn_t qlcnic_msix_intr(int irq, void *data);


#line 76 
static irqreturn_t qlcnic_msix_tx_intr(int irq, void *data);


#line 78 
static struct net_device_stats *qlcnic_get_stats(struct net_device *netdev);


#line 81 
static void qlcnic_free_lb_filters_mem(struct qlcnic_adapter *adapter);


#line 82 
static void qlcnic_dev_set_npar_ready(struct qlcnic_adapter *adapter);


#line 83 
static int qlcnicvf_start_firmware(struct qlcnic_adapter *adapter);


#line 84 
static int qlcnic_vlan_rx_add(struct net_device *netdev, __be16 proto, u16 vid);


#line 85 
static int qlcnic_vlan_rx_del(struct net_device *netdev, __be16 proto, u16 vid);


#line 87 
static int qlcnic_82xx_setup_intr(struct qlcnic_adapter *adapter);


#line 88 
static void qlcnic_82xx_dev_request_reset(struct qlcnic_adapter *adapter, u32 key);


#line 89 
static irqreturn_t qlcnic_82xx_clear_legacy_intr(struct qlcnic_adapter *adapter);


#line 90 
static pci_ers_result_t qlcnic_82xx_io_slot_reset(struct pci_dev *pdev);


#line 91 
static int qlcnic_82xx_start_firmware(struct qlcnic_adapter *adapter);


#line 92 
static void qlcnic_82xx_io_resume(struct pci_dev *pdev);


#line 93 
static void qlcnic_82xx_set_mac_filter_count(struct qlcnic_adapter *adapter);


#line 94 
static pci_ers_result_t qlcnic_82xx_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state);


#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static u32 qlcnic_vlan_tx_check(struct qlcnic_adapter *adapter)
{
  u32 __retres;
  
#line 98 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 100 
  if ((unsigned int)(adapter->pdev)->device == 32800U) {
    
#line 101 
    __retres = ahw->capabilities & 512U;
    
#line 101 
    goto return_label;
  }
  else {
    
#line 103 
    __retres = 1U;
    
#line 103 
    goto return_label;
  }
  return_label: 
#line 100 
                return __retres;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct pci_device_id const qlcnic_pci_tbl[7U] = {{.vendor = 4215U, .device = 32800U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U, .driver_data = 0UL}, {.vendor = 4215U, .device = 32816U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U, .driver_data = 0UL}, {.vendor = 4215U, .device = 34864U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U, .driver_data = 0UL}, {.vendor = 4215U, .device = 33840U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U, .driver_data = 0UL}, {.vendor = 4215U, .device = 32832U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U, .driver_data = 0UL}, {.vendor = 4215U, .device = 33856U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 131072U, .class_mask = 4294967295U, .driver_data = 0UL}, {.vendor = 0U, .device = 0U, .subvendor = 0U, .subdevice = 0U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}};

#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
struct pci_device_id const __mod_pci__qlcnic_pci_tbl_device_table[7U];

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_update_cmd_producer(struct qlcnic_host_tx_ring *tx_ring)
{
  
#line 126 
  writel(tx_ring->producer,(void volatile *)tx_ring->crb_cmd_producer);
  
#line 127 
  return;
}


#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static u32 const msi_tgt_status[8U] = {101777688U, 101777760U, 101777764U, 101777768U, 101778272U, 101778276U, 101778280U, 101778284U};

#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static u32 const qlcnic_reg_tbl[23U] = {1777832U, 1777836U, 1777840U, 1777920U, 1777960U, 1777976U, 1777984U, 1777988U, 1777992U, 1777996U, 1778036U, 1778000U, 1778004U, 1778008U, 1778076U, 1778172U, 1778256U, 1778492U, 1778612U, 1778028U, 1778032U, 1294352U, 1294356U};

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct qlcnic_board_info const qlcnic_boards[22U] = {{.vendor = (unsigned short)4215U, .device = (unsigned short)32832U, .sub_vendor = (unsigned short)0U, .sub_device = (unsigned short)0U, .short_name = {(char)'8', (char)'4', (char)'0', (char)'0', (char)' ', (char)'s', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' ', (char)'(', (char)'T', (char)'C', (char)'P', (char)'/', (char)'I', (char)'P', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)'i', (char)'n', (char)'g', (char)')', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)590U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' ', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)579U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'S', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' ', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)586U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' ', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)582U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' ', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)594U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' ', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)622U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' ', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)608U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' ', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)614U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'S', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' ', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)617U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' ', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)625U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)' ', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32816U, .sub_vendor = (unsigned short)0U, .sub_device = (unsigned short)0U, .short_name = {(char)'8', (char)'3', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'1', (char)'/', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'l', (char)'e', (char)'r', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)34864U, .sub_vendor = (unsigned short)0U, .sub_device = (unsigned short)0U, .short_name = {(char)'8', (char)'8', (char)'3', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'1', (char)'/', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'l', (char)'e', (char)'r', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)515U, .short_name = {(char)'8', (char)'2', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'S', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)519U, .short_name = {(char)'8', (char)'2', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)523U, .short_name = {(char)'3', (char)'2', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)' ', (char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)'l', (char)'i', (char)'g', (char)'e', (char)'n', (char)'t', (char)' ', (char)'E', (char)'t', (char)'h', (char)'e', (char)'r', (char)'n', (char)'e', (char)'t', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)524U, .short_name = {(char)'3', (char)'2', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'Q', (char)'u', (char)'a', (char)'d', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'G', (char)'b', (char)' ', (char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)'l', (char)'i', (char)'g', (char)'e', (char)'n', (char)'t', (char)' ', (char)'E', (char)'t', (char)'h', (char)'e', (char)'r', (char)'n', (char)'e', (char)'t', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)527U, .short_name = {(char)'3', (char)'2', (char)'0', (char)'0', (char)' ', (char)'S', (char)'e', (char)'r', (char)'i', (char)'e', (char)'s', (char)' ', (char)'S', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)' ', (char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)'l', (char)'i', (char)'g', (char)'e', (char)'n', (char)'t', (char)' ', (char)'E', (char)'t', (char)'h', (char)'e', (char)'r', (char)'n', (char)'e', (char)'t', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)4156U, .sub_device = (unsigned short)14131U, .short_name = {(char)'N', (char)'C', (char)'5', (char)'2', (char)'3', (char)'S', (char)'F', (char)'P', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)' ', (char)'2', (char)'-', (char)'p', (char)'o', (char)'r', (char)'t', (char)' ', (char)'S', (char)'e', (char)'r', (char)'v', (char)'e', (char)'r', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)4156U, .sub_device = (unsigned short)13126U, .short_name = {(char)'C', (char)'N', (char)'1', (char)'0', (char)'0', (char)'0', (char)'Q', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'C', (char)'o', (char)'n', (char)'v', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'A', (char)'d', (char)'a', (char)'p', (char)'t', (char)'e', (char)'r', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)4215U, .sub_device = (unsigned short)528U, .short_name = {(char)'Q', (char)'M', (char)'E', (char)'8', (char)'2', (char)'4', (char)'2', (char)'-', (char)'k', (char)' ', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'D', (char)'u', (char)'a', (char)'l', (char)' ', (char)'P', (char)'o', (char)'r', (char)'t', (char)' ', (char)'M', (char)'e', (char)'z', (char)'z', (char)'a', (char)'n', (char)'i', (char)'n', (char)'e', (char)' ', (char)'C', (char)'a', (char)'r', (char)'d', (char)'\000'}}, {.vendor = (unsigned short)4215U, .device = (unsigned short)32800U, .sub_vendor = (unsigned short)0U, .sub_device = (unsigned short)0U, .short_name = {(char)'c', (char)'L', (char)'O', (char)'M', (char)'8', (char)'2', (char)'1', (char)'4', (char)' ', (char)'1', (char)'/', (char)'1', (char)'0', (char)'G', (char)'b', (char)'E', (char)' ', (char)'C', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'l', (char)'e', (char)'r', (char)'\000'}}};

#line 284  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct qlcnic_legacy_intr_set const legacy_intr[8U] = {{.int_vec_bit = 128U, .tgt_status_reg = 101777688U, .tgt_mask_reg = 101777704U, .pci_int_reg = 0U}, {.int_vec_bit = 256U, .tgt_status_reg = 101777760U, .tgt_mask_reg = 101777776U, .pci_int_reg = 0U}, {.int_vec_bit = 512U, .tgt_status_reg = 101777764U, .tgt_mask_reg = 101777780U, .pci_int_reg = 0U}, {.int_vec_bit = 1024U, .tgt_status_reg = 101777768U, .tgt_mask_reg = 101777784U, .pci_int_reg = 0U}, {.int_vec_bit = 2048U, .tgt_status_reg = 101778272U, .tgt_mask_reg = 101778288U, .pci_int_reg = 0U}, {.int_vec_bit = 4096U, .tgt_status_reg = 101778276U, .tgt_mask_reg = 101778292U, .pci_int_reg = 0U}, {.int_vec_bit = 8192U, .tgt_status_reg = 101778280U, .tgt_mask_reg = 101778296U, .pci_int_reg = 0U}, {.int_vec_bit = 16384U, .tgt_status_reg = 101778284U, .tgt_mask_reg = 101778300U, .pci_int_reg = 0U}};

#line 286  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_alloc_sds_rings(struct qlcnic_recv_context *recv_ctx, int count)
{
  int __retres;
  
#line 288 
  int size = (int)((unsigned long)count * (unsigned long)4096U);
  
#line 290 
  recv_ctx->sds_rings = (struct qlcnic_host_sds_ring *)kzalloc_2((unsigned long)size,208U);
  
#line 292 
  __retres = recv_ctx->sds_rings == (struct qlcnic_host_sds_ring *)0;
  
#line 292 
  return __retres;
}


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_free_sds_rings(struct qlcnic_recv_context *recv_ctx)
{
  
#line 297 
  kfree((void const *)recv_ctx->sds_rings);
  
#line 298 
  recv_ctx->sds_rings = (struct qlcnic_host_sds_ring *)0;
  
#line 299 
  return;
}


#line 301  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_read_mac_addr(struct qlcnic_adapter *adapter)
{
  int __retres;
  u8 mac_addr[6U];
  int ret;
  int tmp_0;
  bool tmp;
  
#line 303 
  struct net_device *netdev = adapter->netdev;
  
#line 304 
  struct pci_dev *pdev = adapter->pdev;
  
#line 308 
  ret = qlcnic_get_mac_address(adapter,(u8 *)(& mac_addr),(unsigned char)((int)(adapter->ahw)->pci_func));
  
#line 310 
  if (ret != 0) {
    
#line 311 
    __retres = ret;
    
#line 311 
    goto return_label;
  }
  else ;
  
#line 313 
  memcpy((void *)netdev->dev_addr,(void const *)(& mac_addr),6UL);
  
#line 314 
  memcpy((void *)(& adapter->mac_addr),(void const *)netdev->dev_addr,(unsigned long)netdev->addr_len);
  
#line 318 
  tmp = is_valid_ether_addr((u8 const *)netdev->dev_addr);
  
#line 318 
  if (tmp) 
#line 318 
           tmp_0 = 0; else 
#line 318 
                           tmp_0 = 1;
  
#line 318 
  if (tmp_0) 
#line 319 
             dev_warn((struct device const *)(& pdev->dev),"Bad MAC address %pM.\n",netdev->dev_addr); else ;
  
#line 322 
  __retres = 0;
  return_label: 
#line 322 
                return __retres;
}


#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_delete_adapter_mac(struct qlcnic_adapter *adapter)
{
  struct qlcnic_mac_vlan_list *cur;
  struct list_head *head;
  struct qlcnic_mac_vlan_list *tmp;
  bool tmp_0;
  
#line 330 
  head = adapter->mac_list.next;
  
#line 330 
  goto ldv_56603;
  ldv_56602: 
#line 331 
  ;
  {
    
#line 331 
    struct list_head const *__mptr = (struct list_head const *)head;
    
#line 331 
    tmp = (struct qlcnic_mac_vlan_list *)__mptr;
  }
  
#line 331 
  cur = tmp;
  
#line 332 
  tmp_0 = ether_addr_equal_unaligned((u8 const *)(& adapter->mac_addr),(u8 const *)(& cur->mac_addr));
  
#line 332 
  if ((int)tmp_0 != 0) {
    
#line 333 
    qlcnic_sre_macaddr_change(adapter,(u8 *)(& cur->mac_addr),(unsigned short)0,(unsigned char)2);
    
#line 335 
    list_del(& cur->list);
    
#line 336 
    kfree((void const *)cur);
    
#line 337 
    goto return_label;
  }
  else ;
  
#line 330 
  head = head->next;
  ldv_56603: 
#line 331 
  ;
  
#line 330 
  if (& adapter->mac_list != head) 
#line 332 
                                   goto ldv_56602; else 
#line 335 
                                                        goto ldv_56604;
  ldv_56604: 
#line 336 
  ;
  return_label: 
#line 337 
                return;
}


#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_set_mac(struct net_device *netdev, void *p)
{
  int __retres;
  bool tmp_0;
  int tmp_2;
  bool tmp_1;
  bool tmp_3;
  int tmp_4;
  int tmp_5;
  
#line 344 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 345 
  struct sockaddr *addr = (struct sockaddr *)p;
  
#line 347 
  tmp_0 = qlcnic_sriov_vf_check(adapter);
  
#line 347 
  if ((int)tmp_0 != 0) {
    
#line 348 
    __retres = -22;
    
#line 348 
    goto return_label;
  }
  else ;
  
#line 350 
  if ((adapter->flags & 1024U) != 0U) {
    
#line 351 
    __retres = -95;
    
#line 351 
    goto return_label;
  }
  else ;
  
#line 353 
  tmp_1 = is_valid_ether_addr((u8 const *)(& addr->sa_data));
  
#line 353 
  if (tmp_1) 
#line 353 
             tmp_2 = 0; else 
#line 353 
                             tmp_2 = 1;
  
#line 353 
  if (tmp_2) {
    
#line 354 
    __retres = -22;
    
#line 354 
    goto return_label;
  }
  else ;
  
#line 356 
  tmp_3 = ether_addr_equal_unaligned((u8 const *)(& adapter->mac_addr),(u8 const *)(& addr->sa_data));
  
#line 356 
  if ((int)tmp_3 != 0) {
    
#line 357 
    __retres = 0;
    
#line 357 
    goto return_label;
  }
  else ;
  
#line 359 
  tmp_4 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
  
#line 359 
  if (tmp_4 != 0) {
    
#line 360 
    netif_device_detach(netdev);
    
#line 361 
    qlcnic_napi_disable(adapter);
  }
  else ;
  
#line 364 
  qlcnic_delete_adapter_mac(adapter);
  
#line 365 
  memcpy((void *)(& adapter->mac_addr),(void const *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  
#line 366 
  memcpy((void *)netdev->dev_addr,(void const *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  
#line 367 
  qlcnic_set_multi(adapter->netdev);
  
#line 369 
  tmp_5 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
  
#line 369 
  if (tmp_5 != 0) {
    
#line 370 
    netif_device_attach(netdev);
    
#line 371 
    qlcnic_napi_enable(adapter);
  }
  else ;
  
#line 373 
  __retres = 0;
  return_label: 
#line 373 
                return __retres;
}


#line 376  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_fdb_del(struct ndmsg *ndm, struct nlattr **tb, struct net_device *netdev, unsigned char const *addr, u16 vid)
{
  int __retres;
  
#line 380 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 381 
  int err = -95;
  
#line 383 
  if (! adapter->fdb_mac_learn) {
    int tmp_0;
    
#line 384 
    tmp_0 = ndo_dflt_fdb_del(ndm,tb,netdev,addr,(unsigned short)((int)vid));
    
#line 384 
    __retres = tmp_0;
    
#line 384 
    goto return_label;
  }
  else ;
  
#line 386 
  if ((adapter->flags & 64U) != 0U) 
#line 386 
                                    goto _LOR;
  else {
    bool tmp_3;
    
#line 386 
    tmp_3 = qlcnic_sriov_check(adapter);
    
#line 386 
    if ((int)tmp_3 != 0) {
      bool tmp_2;
      _LOR: 
#line 388 
      tmp_2 = is_unicast_ether_addr(addr);
      
#line 388 
      if ((int)tmp_2 != 0) {
        
#line 389 
        err = dev_uc_del(netdev,addr);
        
#line 390 
        if (err == 0) 
#line 391 
                      err = qlcnic_nic_del_mac(adapter,addr); else ;
      }
      else {
        bool tmp_1;
        
#line 392 
        tmp_1 = is_multicast_ether_addr(addr);
        
#line 392 
        if ((int)tmp_1 != 0) 
#line 393 
                             err = dev_mc_del(netdev,addr); else 
#line 395 
                                                                 err = -22;
      }
    }
    else ;
  }
  
#line 398 
  __retres = err;
  return_label: 
#line 398 
                return __retres;
}


#line 401  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_fdb_add(struct ndmsg *ndm, struct nlattr **tb, struct net_device *netdev, unsigned char const *addr, u16 vid, u16 flags)
{
  int __retres;
  bool tmp_3;
  bool tmp_5;
  
#line 405 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 406 
  int err = 0;
  
#line 408 
  if (! adapter->fdb_mac_learn) {
    int tmp_0;
    
#line 409 
    tmp_0 = ndo_dflt_fdb_add(ndm,tb,netdev,addr,(unsigned short)((int)vid),(unsigned short)((int)flags));
    
#line 409 
    __retres = tmp_0;
    
#line 409 
    goto return_label;
  }
  else ;
  
#line 411 
  if ((adapter->flags & 64U) == 0U) {
    int tmp_2;
    bool tmp_1;
    
#line 412 
    tmp_1 = qlcnic_sriov_check(adapter);
    
#line 412 
    if (tmp_1) 
#line 412 
               tmp_2 = 0; else 
#line 412 
                               tmp_2 = 1;
    
#line 412 
    if (tmp_2) {
      
#line 413 
      printk("\001","qlcnic_fdb_add");
      
#line 414 
      __retres = -95;
      
#line 414 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 417 
  tmp_3 = ether_addr_equal(addr,(u8 const *)(& adapter->mac_addr));
  
#line 417 
  if ((int)tmp_3 != 0) {
    
#line 418 
    __retres = err;
    
#line 418 
    goto return_label;
  }
  else ;
  
#line 420 
  tmp_5 = is_unicast_ether_addr(addr);
  
#line 420 
  if ((int)tmp_5 != 0) 
    
#line 421 
    if (netdev->uc.count < (int)(adapter->ahw)->max_uc_count) 
#line 422 
                                                              err = dev_uc_add_excl(netdev,addr); else 
                                                                    
#line 424 
                                                                    err = -12;
  else {
    bool tmp_4;
    
#line 425 
    tmp_4 = is_multicast_ether_addr(addr);
    
#line 425 
    if ((int)tmp_4 != 0) 
#line 426 
                         err = dev_mc_add_excl(netdev,addr); else 
#line 428 
                                                                  err = -22;
  }
  
#line 431 
  __retres = err;
  return_label: 
#line 431 
                return __retres;
}


#line 434  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_fdb_dump(struct sk_buff *skb, struct netlink_callback *ncb, struct net_device *netdev, struct net_device *filter_dev, int idx)
{
  int __retres;
  
#line 438 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 440 
  if (! adapter->fdb_mac_learn) {
    int tmp_0;
    
#line 441 
    tmp_0 = ndo_dflt_fdb_dump(skb,ncb,netdev,filter_dev,idx);
    
#line 441 
    __retres = tmp_0;
    
#line 441 
    goto return_label;
  }
  else ;
  
#line 443 
  if ((adapter->flags & 64U) != 0U) 
#line 445 
                                    idx = ndo_dflt_fdb_dump(skb,ncb,netdev,filter_dev,idx);
  else {
    bool tmp_1;
    
#line 443 
    tmp_1 = qlcnic_sriov_check(adapter);
    
#line 443 
    if ((int)tmp_1 != 0) 
#line 445 
                         idx = ndo_dflt_fdb_dump(skb,ncb,netdev,filter_dev,idx); else ;
  }
  
#line 447 
  __retres = idx;
  return_label: 
#line 447 
                return __retres;
}


#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_82xx_cancel_idc_work(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 452 
  goto ldv_56643;
  ldv_56642: 
#line 453 
  ;
  
#line 453 
  usleep_range(10000UL,11000UL);
  ldv_56643: 
#line 454 
  ;
  
#line 452 
  tmp = test_and_set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 452 
  if (tmp != 0) 
#line 454 
                goto ldv_56642; else 
#line 457 
                                     goto ldv_56644;
  ldv_56644: 
#line 458 
  ;
  
#line 455 
  if (adapter->fw_work.work.func == (void (*)(struct work_struct *))0) 
    
#line 456 
    goto return_label; else ;
  
#line 458 
  cancel_delayed_work_sync(& adapter->fw_work);
  return_label: 
#line 459 
                return;
}


#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_get_phys_port_id(struct net_device *netdev, struct netdev_phys_item_id *ppid)
{
  int __retres;
  
#line 464 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 465 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 467 
  if ((adapter->flags & 262144U) == 0U) {
    
#line 468 
    __retres = -95;
    
#line 468 
    goto return_label;
  }
  else ;
  
#line 470 
  ppid->id_len = (unsigned char)6U;
  
#line 471 
  memcpy((void *)(& ppid->id),(void const *)(& ahw->phys_port_id),(unsigned long)ppid->id_len);
  
#line 473 
  __retres = 0;
  return_label: 
#line 473 
                return __retres;
}


#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_add_vxlan_port(struct net_device *netdev, sa_family_t sa_family, __be16 port)
{
  int tmp_1;
  bool tmp_0;
  
#line 480 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 481 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 486 
  tmp_0 = qlcnic_encap_rx_offload(adapter);
  
#line 486 
  if (tmp_0) 
#line 486 
             tmp_1 = 0; else 
#line 486 
                             tmp_1 = 1;
  
#line 486 
  if (tmp_1) 
#line 487 
             goto return_label;
  else 
    
#line 486 
    if ((unsigned int)ahw->vxlan_port != 0U) 
#line 487 
                                             goto return_label; else ;
  
#line 489 
  if (0 != 0) 
#line 489 
              ahw->vxlan_port = (unsigned short)(((int)port << 8) | ((int)port >> 8)); else 
                                                                    
#line 489 
                                                                    ahw->vxlan_port = __fswab16((unsigned short)((int)port));
  
#line 490 
  adapter->flags |= 1048576U;
  return_label: 
#line 491 
                return;
}


#line 493  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_del_vxlan_port(struct net_device *netdev, sa_family_t sa_family, __be16 port)
{
  int tmp_1;
  bool tmp_0;
  
#line 496 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 497 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 499 
  tmp_0 = qlcnic_encap_rx_offload(adapter);
  
#line 499 
  if (tmp_0) 
#line 499 
             tmp_1 = 0; else 
#line 499 
                             tmp_1 = 1;
  
#line 499 
  if (tmp_1) 
#line 501 
             goto return_label;
  else 
    
#line 499 
    if ((unsigned int)ahw->vxlan_port == 0U) 
#line 501 
                                             goto return_label;
    else {
      int tmp_3;
      
#line 500 
      if (0 != 0) 
#line 500 
                  tmp_3 = (int)((unsigned short)(((int)port << 8) | ((int)port >> 8)));
      else {
        __u16 tmp_2;
        
#line 500 
        tmp_2 = __fswab16((unsigned short)((int)port));
        
#line 500 
        tmp_3 = (int)tmp_2;
      }
      
#line 500 
      ;
      
#line 500 
      if ((int)ahw->vxlan_port != tmp_3) 
#line 501 
                                         goto return_label; else ;
    }
  
#line 503 
  adapter->flags |= 2097152U;
  return_label: 
#line 504 
                return;
}


#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static netdev_features_t qlcnic_features_check(struct sk_buff *skb, struct net_device *dev, netdev_features_t features)
{
  netdev_features_t tmp;
  
#line 510 
  features = vlan_features_check((struct sk_buff const *)skb,features);
  
#line 511 
  tmp = vxlan_features_check(skb,features);
  
#line 511 
  return tmp;
}


#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct net_device_ops const qlcnic_netdev_ops = {.ndo_init = (int (*)(struct net_device *))0, .ndo_uninit = (void (*)(struct net_device *))0, .ndo_open = & qlcnic_open, .ndo_stop = & qlcnic_close, .ndo_start_xmit = & qlcnic_xmit_frame, .ndo_select_queue = (u16 (*)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)))0, .ndo_change_rx_flags = (void (*)(struct net_device *, int ))0, .ndo_set_rx_mode = & qlcnic_set_multi, .ndo_set_mac_address = & qlcnic_set_mac, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = (int (*)(struct net_device *, struct ifreq *, int ))0, .ndo_set_config = (int (*)(struct net_device *, struct ifmap *))0, .ndo_change_mtu = & qlcnic_change_mtu, .ndo_neigh_setup = (int (*)(struct net_device *, struct neigh_parms *))0, .ndo_tx_timeout = & qlcnic_tx_timeout, .ndo_get_stats64 = (struct rtnl_link_stats64 *(*)(struct net_device *, struct rtnl_link_stats64 *))0, .ndo_get_stats = & qlcnic_get_stats, .ndo_vlan_rx_add_vid = & qlcnic_vlan_rx_add, .ndo_vlan_rx_kill_vid = & qlcnic_vlan_rx_del, .ndo_poll_controller = & qlcnic_poll_controller, .ndo_netpoll_setup = (int (*)(struct net_device *, struct netpoll_info *))0, .ndo_netpoll_cleanup = (void (*)(struct net_device *))0, .ndo_busy_poll = (int (*)(struct napi_struct *))0, .ndo_set_vf_mac = & qlcnic_sriov_set_vf_mac, .ndo_set_vf_vlan = & qlcnic_sriov_set_vf_vlan, .ndo_set_vf_rate = & qlcnic_sriov_set_vf_tx_rate, .ndo_set_vf_spoofchk = & qlcnic_sriov_set_vf_spoofchk, .ndo_get_vf_config = & qlcnic_sriov_get_vf_config, .ndo_set_vf_link_state = (int (*)(struct net_device *, int , int ))0, .ndo_get_vf_stats = (int (*)(struct net_device *, int , struct ifla_vf_stats *))0, .ndo_set_vf_port = (int (*)(struct net_device *, int , struct nlattr **))0, .ndo_get_vf_port = (int (*)(struct net_device *, int , struct sk_buff *))0, .ndo_set_vf_rss_query_en = (int (*)(struct net_device *, int , bool ))0, .ndo_setup_tc = (int (*)(struct net_device *, u8 ))0, .ndo_fcoe_enable = (int (*)(struct net_device *))0, .ndo_fcoe_disable = (int (*)(struct net_device *))0, .ndo_fcoe_ddp_setup = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_ddp_done = (int (*)(struct net_device *, u16 ))0, .ndo_fcoe_ddp_target = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_get_hbainfo = (int (*)(struct net_device *, struct netdev_fcoe_hbainfo *))0, .ndo_fcoe_get_wwn = (int (*)(struct net_device *, u64 *, int ))0, .ndo_rx_flow_steer = (int (*)(struct net_device *, struct sk_buff const *, u16 , u32 ))0, .ndo_add_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_del_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_fix_features = & qlcnic_fix_features, .ndo_set_features = & qlcnic_set_features, .ndo_neigh_construct = (int (*)(struct neighbour *))0, .ndo_neigh_destroy = (void (*)(struct neighbour *))0, .ndo_fdb_add = & qlcnic_fdb_add, .ndo_fdb_del = & qlcnic_fdb_del, .ndo_fdb_dump = & qlcnic_fdb_dump, .ndo_bridge_setlink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_bridge_getlink = (int (*)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ))0, .ndo_bridge_dellink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_change_carrier = (int (*)(struct net_device *, bool ))0, .ndo_get_phys_port_id = & qlcnic_get_phys_port_id, .ndo_get_phys_port_name = (int (*)(struct net_device *, char *, size_t ))0, .ndo_add_vxlan_port = & qlcnic_add_vxlan_port, .ndo_del_vxlan_port = & qlcnic_del_vxlan_port, .ndo_dfwd_add_station = (void *(*)(struct net_device *, struct net_device *))0, .ndo_dfwd_del_station = (void (*)(struct net_device *, void *))0, .ndo_dfwd_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *, void *))0, .ndo_get_lock_subclass = (int (*)(struct net_device *))0, .ndo_features_check = & qlcnic_features_check, .ndo_set_tx_maxrate = (int (*)(struct net_device *, int , u32 ))0, .ndo_get_iflink = (int (*)(struct net_device const *))0};

#line 550  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct net_device_ops const qlcnic_netdev_failed_ops = {.ndo_init = (int (*)(struct net_device *))0, .ndo_uninit = (void (*)(struct net_device *))0, .ndo_open = & qlcnic_open, .ndo_stop = (int (*)(struct net_device *))0, .ndo_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *))0, .ndo_select_queue = (u16 (*)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)))0, .ndo_change_rx_flags = (void (*)(struct net_device *, int ))0, .ndo_set_rx_mode = (void (*)(struct net_device *))0, .ndo_set_mac_address = (int (*)(struct net_device *, void *))0, .ndo_validate_addr = (int (*)(struct net_device *))0, .ndo_do_ioctl = (int (*)(struct net_device *, struct ifreq *, int ))0, .ndo_set_config = (int (*)(struct net_device *, struct ifmap *))0, .ndo_change_mtu = (int (*)(struct net_device *, int ))0, .ndo_neigh_setup = (int (*)(struct net_device *, struct neigh_parms *))0, .ndo_tx_timeout = (void (*)(struct net_device *))0, .ndo_get_stats64 = (struct rtnl_link_stats64 *(*)(struct net_device *, struct rtnl_link_stats64 *))0, .ndo_get_stats = (struct net_device_stats *(*)(struct net_device *))0, .ndo_vlan_rx_add_vid = (int (*)(struct net_device *, __be16 , u16 ))0, .ndo_vlan_rx_kill_vid = (int (*)(struct net_device *, __be16 , u16 ))0, .ndo_poll_controller = (void (*)(struct net_device *))0, .ndo_netpoll_setup = (int (*)(struct net_device *, struct netpoll_info *))0, .ndo_netpoll_cleanup = (void (*)(struct net_device *))0, .ndo_busy_poll = (int (*)(struct napi_struct *))0, .ndo_set_vf_mac = (int (*)(struct net_device *, int , u8 *))0, .ndo_set_vf_vlan = (int (*)(struct net_device *, int , u16 , u8 ))0, .ndo_set_vf_rate = (int (*)(struct net_device *, int , int , int ))0, .ndo_set_vf_spoofchk = (int (*)(struct net_device *, int , bool ))0, .ndo_get_vf_config = (int (*)(struct net_device *, int , struct ifla_vf_info *))0, .ndo_set_vf_link_state = (int (*)(struct net_device *, int , int ))0, .ndo_get_vf_stats = (int (*)(struct net_device *, int , struct ifla_vf_stats *))0, .ndo_set_vf_port = (int (*)(struct net_device *, int , struct nlattr **))0, .ndo_get_vf_port = (int (*)(struct net_device *, int , struct sk_buff *))0, .ndo_set_vf_rss_query_en = (int (*)(struct net_device *, int , bool ))0, .ndo_setup_tc = (int (*)(struct net_device *, u8 ))0, .ndo_fcoe_enable = (int (*)(struct net_device *))0, .ndo_fcoe_disable = (int (*)(struct net_device *))0, .ndo_fcoe_ddp_setup = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_ddp_done = (int (*)(struct net_device *, u16 ))0, .ndo_fcoe_ddp_target = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_get_hbainfo = (int (*)(struct net_device *, struct netdev_fcoe_hbainfo *))0, .ndo_fcoe_get_wwn = (int (*)(struct net_device *, u64 *, int ))0, .ndo_rx_flow_steer = (int (*)(struct net_device *, struct sk_buff const *, u16 , u32 ))0, .ndo_add_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_del_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_fix_features = (netdev_features_t (*)(struct net_device *, netdev_features_t ))0, .ndo_set_features = (int (*)(struct net_device *, netdev_features_t ))0, .ndo_neigh_construct = (int (*)(struct neighbour *))0, .ndo_neigh_destroy = (void (*)(struct neighbour *))0, .ndo_fdb_add = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ))0, .ndo_fdb_del = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ))0, .ndo_fdb_dump = (int (*)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ))0, .ndo_bridge_setlink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_bridge_getlink = (int (*)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ))0, .ndo_bridge_dellink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_change_carrier = (int (*)(struct net_device *, bool ))0, .ndo_get_phys_port_id = (int (*)(struct net_device *, struct netdev_phys_item_id *))0, .ndo_get_phys_port_name = (int (*)(struct net_device *, char *, size_t ))0, .ndo_add_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_del_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_dfwd_add_station = (void *(*)(struct net_device *, struct net_device *))0, .ndo_dfwd_del_station = (void (*)(struct net_device *, void *))0, .ndo_dfwd_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *, void *))0, .ndo_get_lock_subclass = (int (*)(struct net_device *))0, .ndo_features_check = (netdev_features_t (*)(struct sk_buff *, struct net_device *, netdev_features_t ))0, .ndo_set_tx_maxrate = (int (*)(struct net_device *, int , u32 ))0, .ndo_get_iflink = (int (*)(struct net_device const *))0};

#line 554  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct qlcnic_nic_template qlcnic_ops = {.config_bridged_mode = & qlcnic_config_bridged_mode, .config_led = & qlcnic_82xx_config_led, .start_firmware = & qlcnic_82xx_start_firmware, .init_driver = (int (*)(struct qlcnic_adapter *))0, .request_reset = & qlcnic_82xx_dev_request_reset, .cancel_idc_work = & qlcnic_82xx_cancel_idc_work, .napi_add = & qlcnic_82xx_napi_add, .napi_del = & qlcnic_82xx_napi_del, .config_ipaddr = & qlcnic_82xx_config_ipaddr, .clear_legacy_intr = & qlcnic_82xx_clear_legacy_intr, .shutdown = & qlcnic_82xx_shutdown, .resume = & qlcnic_82xx_resume};

#line 568  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
struct qlcnic_nic_template qlcnic_vf_ops = {.config_bridged_mode = & qlcnicvf_config_bridged_mode, .config_led = & qlcnicvf_config_led, .start_firmware = & qlcnicvf_start_firmware, .init_driver = (int (*)(struct qlcnic_adapter *))0, .request_reset = (void (*)(struct qlcnic_adapter *, u32 ))0, .cancel_idc_work = (void (*)(struct qlcnic_adapter *))0, .napi_add = (int (*)(struct qlcnic_adapter *, struct net_device *))0, .napi_del = (void (*)(struct qlcnic_adapter *))0, .config_ipaddr = (void (*)(struct qlcnic_adapter *, __be32 , int ))0, .clear_legacy_intr = (irqreturn_t (*)(struct qlcnic_adapter *))0, .shutdown = (int (*)(struct pci_dev *))0, .resume = (int (*)(struct qlcnic_adapter *))0};

#line 574  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct qlcnic_hardware_ops qlcnic_hw_ops = {.read_crb = & qlcnic_82xx_read_crb, .write_crb = & qlcnic_82xx_write_crb, .read_reg = & qlcnic_82xx_hw_read_wx_2M, .write_reg = & qlcnic_82xx_hw_write_wx_2M, .get_ocm_win = (void (*)(struct qlcnic_hardware_context *))0, .get_mac_address = & qlcnic_82xx_get_mac_address, .setup_intr = & qlcnic_82xx_setup_intr, .alloc_mbx_args = & qlcnic_82xx_alloc_mbx_args, .mbx_cmd = & qlcnic_82xx_issue_cmd, .get_func_no = & qlcnic_82xx_get_func_no, .api_lock = & qlcnic_82xx_api_lock, .api_unlock = & qlcnic_82xx_api_unlock, .add_sysfs = & qlcnic_82xx_add_sysfs, .remove_sysfs = & qlcnic_82xx_remove_sysfs, .process_lb_rcv_ring_diag = & qlcnic_82xx_process_rcv_ring_diag, .create_rx_ctx = & qlcnic_82xx_fw_cmd_create_rx_ctx, .create_tx_ctx = & qlcnic_82xx_fw_cmd_create_tx_ctx, .del_rx_ctx = & qlcnic_82xx_fw_cmd_del_rx_ctx, .del_tx_ctx = & qlcnic_82xx_fw_cmd_del_tx_ctx, .setup_link_event = & qlcnic_82xx_linkevent_request, .get_nic_info = & qlcnic_82xx_get_nic_info, .get_pci_info = & qlcnic_82xx_get_pci_info, .set_nic_info = & qlcnic_82xx_set_nic_info, .change_macvlan = & qlcnic_82xx_sre_macaddr_change, .napi_enable = & qlcnic_82xx_napi_enable, .napi_disable = & qlcnic_82xx_napi_disable, .config_intr_coal = & qlcnic_82xx_config_intr_coalesce, .config_rss = & qlcnic_82xx_config_rss, .config_hw_lro = & qlcnic_82xx_config_hw_lro, .config_loopback = & qlcnic_82xx_set_lb_mode, .clear_loopback = & qlcnic_82xx_clear_lb_mode, .config_promisc_mode = & qlcnic_82xx_nic_set_promisc, .change_l2_filter = & qlcnic_82xx_change_filter, .get_board_info = & qlcnic_82xx_get_board_info, .set_mac_filter_count = & qlcnic_82xx_set_mac_filter_count, .free_mac_list = & qlcnic_82xx_free_mac_list, .read_phys_port_id = & qlcnic_82xx_read_phys_port_id, .io_error_detected = & qlcnic_82xx_io_error_detected, .io_slot_reset = & qlcnic_82xx_io_slot_reset, .io_resume = & qlcnic_82xx_io_resume, .get_beacon_state = & qlcnic_82xx_get_beacon_state, .enable_sds_intr = & qlcnic_82xx_enable_sds_intr, .disable_sds_intr = & qlcnic_82xx_disable_sds_intr, .enable_tx_intr = & qlcnic_82xx_enable_tx_intr, .disable_tx_intr = & qlcnic_82xx_disable_tx_intr, .get_saved_state = & qlcnic_82xx_get_saved_state, .set_saved_state = & qlcnic_82xx_set_saved_state, .cache_tmpl_hdr_values = & qlcnic_82xx_cache_tmpl_hdr_values, .get_cap_size = & qlcnic_82xx_get_cap_size, .set_sys_info = & qlcnic_82xx_set_sys_info, .store_cap_mask = & qlcnic_82xx_store_cap_mask};

#line 627  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_check_multi_tx_capability(struct qlcnic_adapter *adapter)
{
  int __retres;
  bool tmp;
  
#line 629 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 631 
  tmp = qlcnic_82xx_check(adapter);
  
#line 631 
  if ((int)tmp != 0) 
    
#line 631 
    if ((ahw->extra_capability[0] & 16U) != 0U) {
      
#line 633 
      test_and_set_bit(9L,(unsigned long volatile *)(& adapter->state));
      
#line 634 
      __retres = 0;
      
#line 634 
      goto return_label;
    }
    else {
      
#line 636 
      __retres = 1;
      
#line 636 
      goto return_label;
    }
  else {
    
#line 636 
    __retres = 1;
    
#line 636 
    goto return_label;
  }
  return_label: 
#line 631 
                return __retres;
}


#line 640  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_max_rings(struct qlcnic_adapter *adapter, u8 ring_cnt, int queue_type)
{
  int __retres;
  int num_rings;
  unsigned long tmp_2;
  int tmp_1;
  
#line 643 
  int max_rings = 8;
  
#line 645 
  if (queue_type == 2) 
#line 646 
                       max_rings = (int)adapter->max_sds_rings;
  else 
    
#line 647 
    if (queue_type == 1) 
#line 648 
                         max_rings = (int)adapter->max_tx_rings; else ;
  {
    unsigned int tmp;
    int tmp_0;
    
#line 650 
    tmp = cpumask_weight(cpu_online_mask);
    
#line 650 
    int __min1 = (int)tmp;
    
#line 650 
    int __min2 = max_rings;
    
#line 650 
    if (__min1 < __min2) 
#line 650 
                         tmp_0 = __min1; else 
#line 650 
                                              tmp_0 = __min2;
    
#line 650 
    tmp_1 = tmp_0;
  }
  
#line 650 
  tmp_2 = __rounddown_pow_of_two((unsigned long)tmp_1);
  
#line 650 
  num_rings = (int)tmp_2;
  
#line 653 
  if ((int)ring_cnt > num_rings) {
    
#line 654 
    __retres = num_rings;
    
#line 654 
    goto return_label;
  }
  else {
    
#line 656 
    __retres = (int)ring_cnt;
    
#line 656 
    goto return_label;
  }
  return_label: 
#line 653 
                return __retres;
}


#line 659  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_set_tx_ring_count(struct qlcnic_adapter *adapter, u8 tx_cnt)
{
  
#line 662 
  if ((unsigned int)adapter->max_tx_rings != 0U) {
    int tmp;
    
#line 663 
    tmp = qlcnic_max_rings(adapter,(unsigned char)((int)tx_cnt),1);
    
#line 663 
    adapter->drv_tx_rings = (unsigned char)tmp;
  }
  else 
#line 666 
       adapter->drv_tx_rings = tx_cnt;
  
#line 667 
  return;
}


#line 669  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_set_sds_ring_count(struct qlcnic_adapter *adapter, u8 rx_cnt)
{
  
#line 672 
  if ((unsigned int)adapter->max_sds_rings != 0U) {
    int tmp;
    
#line 673 
    tmp = qlcnic_max_rings(adapter,(unsigned char)((int)rx_cnt),2);
    
#line 673 
    adapter->drv_sds_rings = (unsigned char)tmp;
  }
  else 
#line 676 
       adapter->drv_sds_rings = rx_cnt;
  
#line 677 
  return;
}


#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_setup_tss_rss_intr(struct qlcnic_adapter *adapter)
{
  int __retres;
  int vector;
  bool tmp;
  
#line 681 
  struct pci_dev *pdev = adapter->pdev;
  
#line 682 
  int num_msix = 0;
  
#line 682 
  int err = 0;
  
#line 684 
  adapter->flags &= 4294443007U;
  
#line 686 
  if ((unsigned int)adapter->drv_tss_rings != 0U) 
#line 687 
                                                  num_msix = (int)adapter->drv_tss_rings + num_msix; else 
                                                                    
#line 689 
                                                                    num_msix = (int)adapter->drv_tx_rings + num_msix;
  
#line 691 
  if ((unsigned int)adapter->drv_rss_rings != 0U) 
#line 692 
                                                  num_msix = (int)adapter->drv_rss_rings + num_msix; else 
                                                                    
#line 694 
                                                                    num_msix = (int)adapter->drv_sds_rings + num_msix;
  
#line 696 
  tmp = qlcnic_83xx_check(adapter);
  
#line 696 
  if ((int)tmp != 0) 
#line 697 
                     num_msix += 1; else ;
  
#line 699 
  if (adapter->msix_entries == (struct msix_entry *)0) {
    
#line 700 
    adapter->msix_entries = (struct msix_entry *)kcalloc((unsigned long)num_msix,8UL,208U);
    
#line 703 
    if (adapter->msix_entries == (struct msix_entry *)0) {
      
#line 704 
      __retres = -12;
      
#line 704 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 707 
  vector = 0;
  
#line 707 
  goto ldv_56915;
  ldv_56914: 
#line 708 
  ;
  
#line 708 
  (adapter->msix_entries + vector)->entry = (unsigned short)vector;
  
#line 707 
  vector += 1;
  ldv_56915: 
#line 708 
  ;
  
#line 707 
  if (vector < num_msix) 
#line 709 
                         goto ldv_56914; else 
#line 712 
                                              goto ldv_56916;
  ldv_56916: 
#line 713 
  ;
  restore: 
#line 710 
  ;
  
#line 711 
  err = pci_enable_msix_exact(pdev,adapter->msix_entries,num_msix);
  
#line 712 
  if (err == -28) {
    bool tmp_1;
    
#line 713 
    if ((unsigned int)adapter->drv_tss_rings == 0U && (unsigned int)adapter->drv_rss_rings == 0U) {
      
#line 714 
      __retres = err;
      
#line 714 
      goto return_label;
    }
    else ;
    
#line 716 
    netdev_info((struct net_device const *)adapter->netdev,"Unable to allocate %d MSI-X vectors, Available vectors %d\n",num_msix,err);
    
#line 720 
    num_msix = (int)adapter->drv_tx_rings + (int)adapter->drv_sds_rings;
    
#line 723 
    adapter->drv_tss_rings = (unsigned char)0U;
    
#line 724 
    adapter->drv_rss_rings = (unsigned char)0U;
    
#line 726 
    tmp_1 = qlcnic_83xx_check(adapter);
    
#line 726 
    if ((int)tmp_1 != 0) 
#line 727 
                         num_msix += 1; else ;
    
#line 729 
    netdev_info((struct net_device const *)adapter->netdev,"Restoring %d Tx, %d SDS rings for total %d vectors.\n",(int)adapter->drv_tx_rings,(int)adapter->drv_sds_rings,num_msix);
    
#line 734 
    goto restore;
  }
  else 
    
#line 735 
    if (err < 0) {
      
#line 736 
      __retres = err;
      
#line 736 
      goto return_label;
    }
    else ;
  
#line 739 
  (adapter->ahw)->num_msix = (unsigned char)num_msix;
  
#line 740 
  if ((unsigned int)adapter->drv_tss_rings != 0U) 
#line 741 
                                                  adapter->drv_tx_rings = adapter->drv_tss_rings; else ;
  
#line 743 
  if ((unsigned int)adapter->drv_rss_rings != 0U) 
#line 744 
                                                  adapter->drv_sds_rings = adapter->drv_rss_rings; else ;
  
#line 746 
  __retres = 0;
  return_label: 
#line 746 
                return __retres;
}


#line 749  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_enable_msix(struct qlcnic_adapter *adapter, u32 num_msix)
{
  int __retres;
  int err;
  int vector;
  
#line 751 
  struct pci_dev *pdev = adapter->pdev;
  
#line 754 
  if (adapter->msix_entries == (struct msix_entry *)0) {
    
#line 755 
    adapter->msix_entries = (struct msix_entry *)kcalloc((unsigned long)num_msix,8UL,208U);
    
#line 758 
    if (adapter->msix_entries == (struct msix_entry *)0) {
      
#line 759 
      __retres = -12;
      
#line 759 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 762 
  adapter->flags &= 4294967289U;
  
#line 764 
  if ((unsigned int)(adapter->ahw)->msix_supported != 0U) {
    enable_msix: 
#line 765 
    ;
    
#line 766 
    vector = 0;
    
#line 766 
    goto ldv_56927;
    ldv_56926: 
#line 767 
    ;
    
#line 767 
    (adapter->msix_entries + vector)->entry = (unsigned short)vector;
    
#line 766 
    vector += 1;
    ldv_56927: 
#line 767 
    ;
    
#line 766 
    if ((unsigned int)vector < num_msix) 
#line 768 
                                         goto ldv_56926; else 
#line 771 
                                                              goto ldv_56928;
    ldv_56928: 
#line 772 
    ;
    
#line 769 
    err = pci_enable_msix_range(pdev,adapter->msix_entries,1,(int)num_msix);
    
#line 772 
    if ((unsigned int)err == num_msix) {
      
#line 773 
      adapter->flags |= 4U;
      
#line 774 
      (adapter->ahw)->num_msix = (unsigned char)num_msix;
      
#line 775 
      _dev_info((struct device const *)(& pdev->dev),"using msi-x interrupts\n");
      
#line 776 
      __retres = 0;
      
#line 776 
      goto return_label;
    }
    else 
      
#line 777 
      if (err > 0) {
        bool tmp_140;
        bool tmp_141;
        
#line 778 
        pci_disable_msix(pdev);
        
#line 780 
        _dev_info((struct device const *)(& pdev->dev),"Unable to allocate %d MSI-X vectors, Available vectors %d\n",num_msix,err);
        
#line 784 
        tmp_140 = qlcnic_82xx_check(adapter);
        
#line 784 
        if ((int)tmp_140 != 0) {
          
#line 785 
          if (0 != 0) {
            unsigned int tmp_68;
            
#line 785 
            if (0 != 0) {
              unsigned int tmp_66;
              
#line 785 
              if (err <= 0) {
                int tmp_0;
                
#line 785 
                tmp_0 = ____ilog2_NaN();
                
#line 785 
                tmp_66 = (unsigned int)(1UL << tmp_0);
              }
              else {
                unsigned int tmp_65;
                
#line 785 
                if (err >= 0) {
                  unsigned int tmp_64;
                  
#line 785 
                  if (((unsigned long long)err & 4611686018427387904ULL) == 0ULL) {
                    unsigned int tmp_63;
                    
#line 785 
                    if (((unsigned long long)err & 2305843009213693952ULL) == 0ULL) {
                      unsigned int tmp_62;
                      
#line 785 
                      if (((unsigned long long)err & 1152921504606846976ULL) == 0ULL) {
                        unsigned int tmp_61;
                        
#line 785 
                        if (((unsigned long long)err & 576460752303423488ULL) == 0ULL) {
                          unsigned int tmp_60;
                          
#line 785 
                          if (((unsigned long long)err & 288230376151711744ULL) == 0ULL) {
                            unsigned int tmp_59;
                            
#line 785 
                            if (((unsigned long long)err & 144115188075855872ULL) == 0ULL) {
                              unsigned int tmp_58;
                              
#line 785 
                              if (((unsigned long long)err & 72057594037927936ULL) == 0ULL) {
                                unsigned int tmp_57;
                                
#line 785 
                                if (((unsigned long long)err & 36028797018963968ULL) == 0ULL) {
                                  unsigned int tmp_56;
                                  
#line 785 
                                  if (((unsigned long long)err & 18014398509481984ULL) == 0ULL) {
                                    unsigned int tmp_55;
                                    
#line 785 
                                    if (((unsigned long long)err & 9007199254740992ULL) == 0ULL) {
                                      unsigned int tmp_54;
                                      
#line 785 
                                      if (((unsigned long long)err & 4503599627370496ULL) == 0ULL) {
                                        unsigned int tmp_53;
                                        
#line 785 
                                        if (((unsigned long long)err & 2251799813685248ULL) == 0ULL) {
                                          unsigned int tmp_52;
                                          
#line 785 
                                          if (((unsigned long long)err & 1125899906842624ULL) == 0ULL) {
                                            unsigned int tmp_51;
                                            
#line 785 
                                            if (((unsigned long long)err & 562949953421312ULL) == 0ULL) {
                                              unsigned int tmp_50;
                                              
#line 785 
                                              if (((unsigned long long)err & 281474976710656ULL) == 0ULL) {
                                                unsigned int tmp_49;
                                                
#line 785 
                                                if (((unsigned long long)err & 140737488355328ULL) == 0ULL) {
                                                  unsigned int tmp_48;
                                                  
#line 785 
                                                  if (((unsigned long long)err & 70368744177664ULL) == 0ULL) {
                                                    unsigned int tmp_47;
                                                    
#line 785 
                                                    if (((unsigned long long)err & 35184372088832ULL) == 0ULL) {
                                                      unsigned int tmp_46;
                                                      
#line 785 
                                                      if (((unsigned long long)err & 17592186044416ULL) == 0ULL) {
                                                        unsigned int tmp_45;
                                                        
#line 785 
                                                        if (((unsigned long long)err & 8796093022208ULL) == 0ULL) {
                                                          unsigned int tmp_44;
                                                          
#line 785 
                                                          if (((unsigned long long)err & 4398046511104ULL) == 0ULL) {
                                                            unsigned int tmp_43;
                                                            
#line 785 
                                                            if (((unsigned long long)err & 2199023255552ULL) == 0ULL) {
                                                              unsigned int tmp_42;
                                                              
#line 785 
                                                              if (((unsigned long long)err & 1099511627776ULL) == 0ULL) {
                                                                unsigned int tmp_41;
                                                                
#line 785 
                                                                if (((unsigned long long)err & 549755813888ULL) == 0ULL) {
                                                                  unsigned int tmp_40;
                                                                  
#line 785 
                                                                  if (
                                                                    ((unsigned long long)err & 274877906944ULL) == 0ULL) {
                                                                    unsigned int tmp_39;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 137438953472ULL) == 0ULL) {
                                                                    unsigned int tmp_38;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 68719476736ULL) == 0ULL) {
                                                                    unsigned int tmp_37;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 34359738368ULL) == 0ULL) {
                                                                    unsigned int tmp_36;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 17179869184ULL) == 0ULL) {
                                                                    unsigned int tmp_35;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 8589934592ULL) == 0ULL) {
                                                                    unsigned int tmp_34;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 4294967296ULL) == 0ULL) {
                                                                    unsigned int tmp_33;
                                                                    
#line 785 
                                                                    if (
                                                                    err >= 0) {
                                                                    unsigned int tmp_32;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 1073741824ULL) == 0ULL) {
                                                                    unsigned int tmp_31;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 536870912ULL) == 0ULL) {
                                                                    unsigned int tmp_30;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 268435456ULL) == 0ULL) {
                                                                    unsigned int tmp_29;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 134217728ULL) == 0ULL) {
                                                                    unsigned int tmp_28;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 67108864ULL) == 0ULL) {
                                                                    unsigned int tmp_27;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 33554432ULL) == 0ULL) {
                                                                    unsigned int tmp_26;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 16777216ULL) == 0ULL) {
                                                                    unsigned int tmp_25;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 8388608ULL) == 0ULL) {
                                                                    unsigned int tmp_24;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 4194304ULL) == 0ULL) {
                                                                    unsigned int tmp_23;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 2097152ULL) == 0ULL) {
                                                                    unsigned int tmp_22;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 1048576ULL) == 0ULL) {
                                                                    unsigned int tmp_21;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 524288ULL) == 0ULL) {
                                                                    unsigned int tmp_20;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 262144ULL) == 0ULL) {
                                                                    unsigned int tmp_19;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 131072ULL) == 0ULL) {
                                                                    unsigned int tmp_18;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 65536ULL) == 0ULL) {
                                                                    unsigned int tmp_17;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 32768ULL) == 0ULL) {
                                                                    unsigned int tmp_16;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 16384ULL) == 0ULL) {
                                                                    unsigned int tmp_15;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 8192ULL) == 0ULL) {
                                                                    unsigned int tmp_14;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 4096ULL) == 0ULL) {
                                                                    unsigned int tmp_13;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 2048ULL) == 0ULL) {
                                                                    unsigned int tmp_12;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 1024ULL) == 0ULL) {
                                                                    unsigned int tmp_11;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 512ULL) == 0ULL) {
                                                                    unsigned int tmp_10;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 256ULL) == 0ULL) {
                                                                    unsigned int tmp_9;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 128ULL) == 0ULL) {
                                                                    unsigned int tmp_8;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 64ULL) == 0ULL) {
                                                                    unsigned int tmp_7;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 32ULL) == 0ULL) {
                                                                    unsigned int tmp_6;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 16ULL) == 0ULL) {
                                                                    unsigned int tmp_5;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 8ULL) == 0ULL) {
                                                                    unsigned int tmp_4;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 4ULL) == 0ULL) {
                                                                    unsigned int tmp_3;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 2ULL) == 0ULL) {
                                                                    unsigned int tmp_2;
                                                                    
#line 785 
                                                                    if (
                                                                    ((unsigned long long)err & 1ULL) == 0ULL) {
                                                                    int tmp_1;
                                                                    
#line 785 
                                                                    tmp_1 = ____ilog2_NaN();
                                                                    
#line 785 
                                                                    tmp_2 = (unsigned int)(1UL << tmp_1);
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_2 = 1U;
                                                                    
#line 785 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_3 = 2U;
                                                                    
#line 785 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_4 = 4U;
                                                                    
#line 785 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_5 = 8U;
                                                                    
#line 785 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_6 = 16U;
                                                                    
#line 785 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_7 = 32U;
                                                                    
#line 785 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_8 = 64U;
                                                                    
#line 785 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_9 = 128U;
                                                                    
#line 785 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_10 = 256U;
                                                                    
#line 785 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_11 = 512U;
                                                                    
#line 785 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_12 = 1024U;
                                                                    
#line 785 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_13 = 2048U;
                                                                    
#line 785 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_14 = 4096U;
                                                                    
#line 785 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_15 = 8192U;
                                                                    
#line 785 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_16 = 16384U;
                                                                    
#line 785 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_17 = 32768U;
                                                                    
#line 785 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_18 = 65536U;
                                                                    
#line 785 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_19 = 131072U;
                                                                    
#line 785 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_20 = 262144U;
                                                                    
#line 785 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_21 = 524288U;
                                                                    
#line 785 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_22 = 1048576U;
                                                                    
#line 785 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_23 = 2097152U;
                                                                    
#line 785 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_24 = 4194304U;
                                                                    
#line 785 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_25 = 8388608U;
                                                                    
#line 785 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_26 = 16777216U;
                                                                    
#line 785 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_27 = 33554432U;
                                                                    
#line 785 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_28 = 67108864U;
                                                                    
#line 785 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_29 = 134217728U;
                                                                    
#line 785 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_30 = 268435456U;
                                                                    
#line 785 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_31 = 536870912U;
                                                                    
#line 785 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_32 = 1073741824U;
                                                                    
#line 785 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_33 = 2147483648U;
                                                                    
#line 785 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_34 = 0U;
                                                                    
#line 785 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_35 = 0U;
                                                                    
#line 785 
                                                                    tmp_36 = tmp_35;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_36 = 0U;
                                                                    
#line 785 
                                                                    tmp_37 = tmp_36;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_37 = 0U;
                                                                    
#line 785 
                                                                    tmp_38 = tmp_37;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_38 = 0U;
                                                                    
#line 785 
                                                                    tmp_39 = tmp_38;
                                                                    }
                                                                    else 
                                                                    
#line 785 
                                                                    tmp_39 = 0U;
                                                                    
#line 785 
                                                                    tmp_40 = tmp_39;
                                                                  }
                                                                  else 
                                                                    
#line 785 
                                                                    tmp_40 = 0U;
                                                                  
#line 785 
                                                                  tmp_41 = tmp_40;
                                                                }
                                                                else 
                                                                  
#line 785 
                                                                  tmp_41 = 0U;
                                                                
#line 785 
                                                                tmp_42 = tmp_41;
                                                              }
                                                              else 
#line 785 
                                                                   tmp_42 = 0U;
                                                              
#line 785 
                                                              tmp_43 = tmp_42;
                                                            }
                                                            else 
#line 785 
                                                                 tmp_43 = 0U;
                                                            
#line 785 
                                                            tmp_44 = tmp_43;
                                                          }
                                                          else 
#line 785 
                                                               tmp_44 = 0U;
                                                          
#line 785 
                                                          tmp_45 = tmp_44;
                                                        }
                                                        else 
#line 785 
                                                             tmp_45 = 0U;
                                                        
#line 785 
                                                        tmp_46 = tmp_45;
                                                      }
                                                      else 
#line 785 
                                                           tmp_46 = 0U;
                                                      
#line 785 
                                                      tmp_47 = tmp_46;
                                                    }
                                                    else 
#line 785 
                                                         tmp_47 = 0U;
                                                    
#line 785 
                                                    tmp_48 = tmp_47;
                                                  }
                                                  else 
#line 785 
                                                       tmp_48 = 0U;
                                                  
#line 785 
                                                  tmp_49 = tmp_48;
                                                }
                                                else 
#line 785 
                                                     tmp_49 = 0U;
                                                
#line 785 
                                                tmp_50 = tmp_49;
                                              }
                                              else 
#line 785 
                                                   tmp_50 = 0U;
                                              
#line 785 
                                              tmp_51 = tmp_50;
                                            }
                                            else 
#line 785 
                                                 tmp_51 = 0U;
                                            
#line 785 
                                            tmp_52 = tmp_51;
                                          }
                                          else 
#line 785 
                                               tmp_52 = 0U;
                                          
#line 785 
                                          tmp_53 = tmp_52;
                                        }
                                        else 
#line 785 
                                             tmp_53 = 0U;
                                        
#line 785 
                                        tmp_54 = tmp_53;
                                      }
                                      else 
#line 785 
                                           tmp_54 = 0U;
                                      
#line 785 
                                      tmp_55 = tmp_54;
                                    }
                                    else 
#line 785 
                                         tmp_55 = 0U;
                                    
#line 785 
                                    tmp_56 = tmp_55;
                                  }
                                  else 
#line 785 
                                       tmp_56 = 0U;
                                  
#line 785 
                                  tmp_57 = tmp_56;
                                }
                                else 
#line 785 
                                     tmp_57 = 0U;
                                
#line 785 
                                tmp_58 = tmp_57;
                              }
                              else 
#line 785 
                                   tmp_58 = 0U;
                              
#line 785 
                              tmp_59 = tmp_58;
                            }
                            else 
#line 785 
                                 tmp_59 = 0U;
                            
#line 785 
                            tmp_60 = tmp_59;
                          }
                          else 
#line 785 
                               tmp_60 = 0U;
                          
#line 785 
                          tmp_61 = tmp_60;
                        }
                        else 
#line 785 
                             tmp_61 = 0U;
                        
#line 785 
                        tmp_62 = tmp_61;
                      }
                      else 
#line 785 
                           tmp_62 = 0U;
                      
#line 785 
                      tmp_63 = tmp_62;
                    }
                    else 
#line 785 
                         tmp_63 = 0U;
                    
#line 785 
                    tmp_64 = tmp_63;
                  }
                  else 
#line 785 
                       tmp_64 = 0U;
                  
#line 785 
                  tmp_65 = tmp_64;
                }
                else 
#line 785 
                     tmp_65 = 0U;
                
#line 785 
                tmp_66 = tmp_65;
              }
              
#line 785 
              tmp_68 = tmp_66;
            }
            else {
              int tmp_67;
              
#line 785 
              tmp_67 = __ilog2_u32((unsigned int)err);
              
#line 785 
              tmp_68 = (unsigned int)(1UL << tmp_67);
            }
            
#line 785 
            num_msix = tmp_68;
          }
          else {
            unsigned long tmp_69;
            
#line 785 
            tmp_69 = __rounddown_pow_of_two((unsigned long)err);
            
#line 785 
            num_msix = (unsigned int)tmp_69;
          }
          
#line 786 
          if (err <= 1) {
            
#line 787 
            __retres = -28;
            
#line 787 
            goto return_label;
          }
          else ;
        }
        else {
          
#line 789 
          if (0 != 0) {
            unsigned int tmp_138;
            
#line 789 
            if (0 != 0) {
              unsigned int tmp_136;
              
#line 789 
              if (err + -1 <= 0) {
                int tmp_70;
                
#line 789 
                tmp_70 = ____ilog2_NaN();
                
#line 789 
                tmp_136 = (unsigned int)(1UL << tmp_70);
              }
              else {
                unsigned int tmp_135;
                
#line 789 
                if (err + -1 >= 0) {
                  unsigned int tmp_134;
                  
#line 789 
                  if (((unsigned long long)(err + -1) & 4611686018427387904ULL) == 0ULL) {
                    unsigned int tmp_133;
                    
#line 789 
                    if (((unsigned long long)(err + -1) & 2305843009213693952ULL) == 0ULL) {
                      unsigned int tmp_132;
                      
#line 789 
                      if (((unsigned long long)(err + -1) & 1152921504606846976ULL) == 0ULL) {
                        unsigned int tmp_131;
                        
#line 789 
                        if (((unsigned long long)(err + -1) & 576460752303423488ULL) == 0ULL) {
                          unsigned int tmp_130;
                          
#line 789 
                          if (((unsigned long long)(err + -1) & 288230376151711744ULL) == 0ULL) {
                            unsigned int tmp_129;
                            
#line 789 
                            if (((unsigned long long)(err + -1) & 144115188075855872ULL) == 0ULL) {
                              unsigned int tmp_128;
                              
#line 789 
                              if (((unsigned long long)(err + -1) & 72057594037927936ULL) == 0ULL) {
                                unsigned int tmp_127;
                                
#line 789 
                                if (((unsigned long long)(err + -1) & 36028797018963968ULL) == 0ULL) {
                                  unsigned int tmp_126;
                                  
#line 789 
                                  if (((unsigned long long)(err + -1) & 18014398509481984ULL) == 0ULL) {
                                    unsigned int tmp_125;
                                    
#line 789 
                                    if (((unsigned long long)(err + -1) & 9007199254740992ULL) == 0ULL) {
                                      unsigned int tmp_124;
                                      
#line 789 
                                      if (((unsigned long long)(err + -1) & 4503599627370496ULL) == 0ULL) {
                                        unsigned int tmp_123;
                                        
#line 789 
                                        if (((unsigned long long)(err + -1) & 2251799813685248ULL) == 0ULL) {
                                          unsigned int tmp_122;
                                          
#line 789 
                                          if (((unsigned long long)(err + -1) & 1125899906842624ULL) == 0ULL) {
                                            unsigned int tmp_121;
                                            
#line 789 
                                            if (((unsigned long long)(err + -1) & 562949953421312ULL) == 0ULL) {
                                              unsigned int tmp_120;
                                              
#line 789 
                                              if (((unsigned long long)(err + -1) & 281474976710656ULL) == 0ULL) {
                                                unsigned int tmp_119;
                                                
#line 789 
                                                if (((unsigned long long)(err + -1) & 140737488355328ULL) == 0ULL) {
                                                  unsigned int tmp_118;
                                                  
#line 789 
                                                  if (((unsigned long long)(err + -1) & 70368744177664ULL) == 0ULL) {
                                                    unsigned int tmp_117;
                                                    
#line 789 
                                                    if (((unsigned long long)(err + -1) & 35184372088832ULL) == 0ULL) {
                                                      unsigned int tmp_116;
                                                      
#line 789 
                                                      if (((unsigned long long)(err + -1) & 17592186044416ULL) == 0ULL) {
                                                        unsigned int tmp_115;
                                                        
#line 789 
                                                        if (((unsigned long long)(err + -1) & 8796093022208ULL) == 0ULL) {
                                                          unsigned int tmp_114;
                                                          
#line 789 
                                                          if (((unsigned long long)(err + -1) & 4398046511104ULL) == 0ULL) {
                                                            unsigned int tmp_113;
                                                            
#line 789 
                                                            if (((unsigned long long)(err + -1) & 2199023255552ULL) == 0ULL) {
                                                              unsigned int tmp_112;
                                                              
#line 789 
                                                              if (((unsigned long long)(err + -1) & 1099511627776ULL) == 0ULL) {
                                                                unsigned int tmp_111;
                                                                
#line 789 
                                                                if (((unsigned long long)(err + -1) & 549755813888ULL) == 0ULL) {
                                                                  unsigned int tmp_110;
                                                                  
#line 789 
                                                                  if (
                                                                    ((unsigned long long)(err + -1) & 274877906944ULL) == 0ULL) {
                                                                    unsigned int tmp_109;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 137438953472ULL) == 0ULL) {
                                                                    unsigned int tmp_108;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 68719476736ULL) == 0ULL) {
                                                                    unsigned int tmp_107;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 34359738368ULL) == 0ULL) {
                                                                    unsigned int tmp_106;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 17179869184ULL) == 0ULL) {
                                                                    unsigned int tmp_105;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 8589934592ULL) == 0ULL) {
                                                                    unsigned int tmp_104;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 4294967296ULL) == 0ULL) {
                                                                    unsigned int tmp_103;
                                                                    
#line 789 
                                                                    if (
                                                                    err + -1 >= 0) {
                                                                    unsigned int tmp_102;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 1073741824ULL) == 0ULL) {
                                                                    unsigned int tmp_101;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 536870912ULL) == 0ULL) {
                                                                    unsigned int tmp_100;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 268435456ULL) == 0ULL) {
                                                                    unsigned int tmp_99;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 134217728ULL) == 0ULL) {
                                                                    unsigned int tmp_98;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 67108864ULL) == 0ULL) {
                                                                    unsigned int tmp_97;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 33554432ULL) == 0ULL) {
                                                                    unsigned int tmp_96;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 16777216ULL) == 0ULL) {
                                                                    unsigned int tmp_95;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 8388608ULL) == 0ULL) {
                                                                    unsigned int tmp_94;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 4194304ULL) == 0ULL) {
                                                                    unsigned int tmp_93;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 2097152ULL) == 0ULL) {
                                                                    unsigned int tmp_92;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 1048576ULL) == 0ULL) {
                                                                    unsigned int tmp_91;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 524288ULL) == 0ULL) {
                                                                    unsigned int tmp_90;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 262144ULL) == 0ULL) {
                                                                    unsigned int tmp_89;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 131072ULL) == 0ULL) {
                                                                    unsigned int tmp_88;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 65536ULL) == 0ULL) {
                                                                    unsigned int tmp_87;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 32768ULL) == 0ULL) {
                                                                    unsigned int tmp_86;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 16384ULL) == 0ULL) {
                                                                    unsigned int tmp_85;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 8192ULL) == 0ULL) {
                                                                    unsigned int tmp_84;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 4096ULL) == 0ULL) {
                                                                    unsigned int tmp_83;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 2048ULL) == 0ULL) {
                                                                    unsigned int tmp_82;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 1024ULL) == 0ULL) {
                                                                    unsigned int tmp_81;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 512ULL) == 0ULL) {
                                                                    unsigned int tmp_80;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 256ULL) == 0ULL) {
                                                                    unsigned int tmp_79;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 128ULL) == 0ULL) {
                                                                    unsigned int tmp_78;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 64ULL) == 0ULL) {
                                                                    unsigned int tmp_77;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 32ULL) == 0ULL) {
                                                                    unsigned int tmp_76;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 16ULL) == 0ULL) {
                                                                    unsigned int tmp_75;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 8ULL) == 0ULL) {
                                                                    unsigned int tmp_74;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 4ULL) == 0ULL) {
                                                                    unsigned int tmp_73;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 2ULL) == 0ULL) {
                                                                    unsigned int tmp_72;
                                                                    
#line 789 
                                                                    if (
                                                                    ((unsigned long long)(err + -1) & 1ULL) == 0ULL) {
                                                                    int tmp_71;
                                                                    
#line 789 
                                                                    tmp_71 = ____ilog2_NaN();
                                                                    
#line 789 
                                                                    tmp_72 = (unsigned int)(1UL << tmp_71);
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_72 = 1U;
                                                                    
#line 789 
                                                                    tmp_73 = tmp_72;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_73 = 2U;
                                                                    
#line 789 
                                                                    tmp_74 = tmp_73;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_74 = 4U;
                                                                    
#line 789 
                                                                    tmp_75 = tmp_74;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_75 = 8U;
                                                                    
#line 789 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_76 = 16U;
                                                                    
#line 789 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_77 = 32U;
                                                                    
#line 789 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_78 = 64U;
                                                                    
#line 789 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_79 = 128U;
                                                                    
#line 789 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_80 = 256U;
                                                                    
#line 789 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_81 = 512U;
                                                                    
#line 789 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_82 = 1024U;
                                                                    
#line 789 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_83 = 2048U;
                                                                    
#line 789 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_84 = 4096U;
                                                                    
#line 789 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_85 = 8192U;
                                                                    
#line 789 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_86 = 16384U;
                                                                    
#line 789 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_87 = 32768U;
                                                                    
#line 789 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_88 = 65536U;
                                                                    
#line 789 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_89 = 131072U;
                                                                    
#line 789 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_90 = 262144U;
                                                                    
#line 789 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_91 = 524288U;
                                                                    
#line 789 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_92 = 1048576U;
                                                                    
#line 789 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_93 = 2097152U;
                                                                    
#line 789 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_94 = 4194304U;
                                                                    
#line 789 
                                                                    tmp_95 = tmp_94;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_95 = 8388608U;
                                                                    
#line 789 
                                                                    tmp_96 = tmp_95;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_96 = 16777216U;
                                                                    
#line 789 
                                                                    tmp_97 = tmp_96;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_97 = 33554432U;
                                                                    
#line 789 
                                                                    tmp_98 = tmp_97;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_98 = 67108864U;
                                                                    
#line 789 
                                                                    tmp_99 = tmp_98;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_99 = 134217728U;
                                                                    
#line 789 
                                                                    tmp_100 = tmp_99;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_100 = 268435456U;
                                                                    
#line 789 
                                                                    tmp_101 = tmp_100;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_101 = 536870912U;
                                                                    
#line 789 
                                                                    tmp_102 = tmp_101;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_102 = 1073741824U;
                                                                    
#line 789 
                                                                    tmp_103 = tmp_102;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_103 = 2147483648U;
                                                                    
#line 789 
                                                                    tmp_104 = tmp_103;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_104 = 0U;
                                                                    
#line 789 
                                                                    tmp_105 = tmp_104;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_105 = 0U;
                                                                    
#line 789 
                                                                    tmp_106 = tmp_105;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_106 = 0U;
                                                                    
#line 789 
                                                                    tmp_107 = tmp_106;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_107 = 0U;
                                                                    
#line 789 
                                                                    tmp_108 = tmp_107;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_108 = 0U;
                                                                    
#line 789 
                                                                    tmp_109 = tmp_108;
                                                                    }
                                                                    else 
                                                                    
#line 789 
                                                                    tmp_109 = 0U;
                                                                    
#line 789 
                                                                    tmp_110 = tmp_109;
                                                                  }
                                                                  else 
                                                                    
#line 789 
                                                                    tmp_110 = 0U;
                                                                  
#line 789 
                                                                  tmp_111 = tmp_110;
                                                                }
                                                                else 
                                                                  
#line 789 
                                                                  tmp_111 = 0U;
                                                                
#line 789 
                                                                tmp_112 = tmp_111;
                                                              }
                                                              else 
#line 789 
                                                                   tmp_112 = 0U;
                                                              
#line 789 
                                                              tmp_113 = tmp_112;
                                                            }
                                                            else 
#line 789 
                                                                 tmp_113 = 0U;
                                                            
#line 789 
                                                            tmp_114 = tmp_113;
                                                          }
                                                          else 
#line 789 
                                                               tmp_114 = 0U;
                                                          
#line 789 
                                                          tmp_115 = tmp_114;
                                                        }
                                                        else 
#line 789 
                                                             tmp_115 = 0U;
                                                        
#line 789 
                                                        tmp_116 = tmp_115;
                                                      }
                                                      else 
#line 789 
                                                           tmp_116 = 0U;
                                                      
#line 789 
                                                      tmp_117 = tmp_116;
                                                    }
                                                    else 
#line 789 
                                                         tmp_117 = 0U;
                                                    
#line 789 
                                                    tmp_118 = tmp_117;
                                                  }
                                                  else 
#line 789 
                                                       tmp_118 = 0U;
                                                  
#line 789 
                                                  tmp_119 = tmp_118;
                                                }
                                                else 
#line 789 
                                                     tmp_119 = 0U;
                                                
#line 789 
                                                tmp_120 = tmp_119;
                                              }
                                              else 
#line 789 
                                                   tmp_120 = 0U;
                                              
#line 789 
                                              tmp_121 = tmp_120;
                                            }
                                            else 
#line 789 
                                                 tmp_121 = 0U;
                                            
#line 789 
                                            tmp_122 = tmp_121;
                                          }
                                          else 
#line 789 
                                               tmp_122 = 0U;
                                          
#line 789 
                                          tmp_123 = tmp_122;
                                        }
                                        else 
#line 789 
                                             tmp_123 = 0U;
                                        
#line 789 
                                        tmp_124 = tmp_123;
                                      }
                                      else 
#line 789 
                                           tmp_124 = 0U;
                                      
#line 789 
                                      tmp_125 = tmp_124;
                                    }
                                    else 
#line 789 
                                         tmp_125 = 0U;
                                    
#line 789 
                                    tmp_126 = tmp_125;
                                  }
                                  else 
#line 789 
                                       tmp_126 = 0U;
                                  
#line 789 
                                  tmp_127 = tmp_126;
                                }
                                else 
#line 789 
                                     tmp_127 = 0U;
                                
#line 789 
                                tmp_128 = tmp_127;
                              }
                              else 
#line 789 
                                   tmp_128 = 0U;
                              
#line 789 
                              tmp_129 = tmp_128;
                            }
                            else 
#line 789 
                                 tmp_129 = 0U;
                            
#line 789 
                            tmp_130 = tmp_129;
                          }
                          else 
#line 789 
                               tmp_130 = 0U;
                          
#line 789 
                          tmp_131 = tmp_130;
                        }
                        else 
#line 789 
                             tmp_131 = 0U;
                        
#line 789 
                        tmp_132 = tmp_131;
                      }
                      else 
#line 789 
                           tmp_132 = 0U;
                      
#line 789 
                      tmp_133 = tmp_132;
                    }
                    else 
#line 789 
                         tmp_133 = 0U;
                    
#line 789 
                    tmp_134 = tmp_133;
                  }
                  else 
#line 789 
                       tmp_134 = 0U;
                  
#line 789 
                  tmp_135 = tmp_134;
                }
                else 
#line 789 
                     tmp_135 = 0U;
                
#line 789 
                tmp_136 = tmp_135;
              }
              
#line 789 
              tmp_138 = tmp_136;
            }
            else {
              int tmp_137;
              
#line 789 
              tmp_137 = __ilog2_u32((unsigned int)(err + -1));
              
#line 789 
              tmp_138 = (unsigned int)(1UL << tmp_137);
            }
            
#line 789 
            num_msix = tmp_138;
          }
          else {
            unsigned long tmp_139;
            
#line 789 
            tmp_139 = __rounddown_pow_of_two((unsigned long)(err + -1));
            
#line 789 
            num_msix = (unsigned int)tmp_139;
          }
          
#line 790 
          num_msix += 1U;
          
#line 791 
          if (err <= 2) {
            
#line 792 
            __retres = -28;
            
#line 792 
            goto return_label;
          }
          else ;
        }
        
#line 795 
        tmp_141 = qlcnic_82xx_check(adapter);
        
#line 795 
        if ((int)tmp_141 != 0) {
          int tmp_143;
          bool tmp_142;
          
#line 796 
          tmp_142 = qlcnic_check_multi_tx(adapter);
          
#line 796 
          if (tmp_142) 
#line 796 
                       tmp_143 = 0; else 
#line 796 
                                         tmp_143 = 1;
          
#line 796 
          if (tmp_143) {
            
#line 797 
            adapter->drv_sds_rings = (unsigned char)num_msix;
            
#line 798 
            adapter->drv_tx_rings = (unsigned char)1U;
          }
          else 
#line 795 
               goto _LAND;
        }
        else {
          _LAND: {
                   
#line 801 
                   adapter->drv_tx_rings = (unsigned char)(num_msix / 2U);
                   
#line 802 
                   adapter->drv_sds_rings = adapter->drv_tx_rings;
                 }
        }
        
#line 805 
        if (num_msix != 0U) {
          
#line 806 
          _dev_info((struct device const *)(& pdev->dev),"Trying to allocate %d MSI-X interrupt vectors\n",num_msix);
          
#line 809 
          goto enable_msix;
        }
        else ;
      }
      else {
        
#line 812 
        _dev_info((struct device const *)(& pdev->dev),"Unable to allocate %d MSI-X vectors, err=%d\n",num_msix,err);
        
#line 815 
        __retres = err;
        
#line 815 
        goto return_label;
      }
  }
  else ;
  
#line 819 
  __retres = -5;
  return_label: 
#line 819 
                return __retres;
}


#line 822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_82xx_calculate_msix_vector(struct qlcnic_adapter *adapter)
{
  int num_msix;
  bool tmp;
  
#line 826 
  num_msix = (int)adapter->drv_sds_rings;
  
#line 828 
  tmp = qlcnic_check_multi_tx(adapter);
  
#line 828 
  if ((int)tmp != 0) 
#line 829 
                     num_msix = (int)adapter->drv_tx_rings + num_msix; else 
                                                                    
#line 831 
                                                                    num_msix += 1;
  
#line 833 
  return num_msix;
}


#line 836  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_enable_msi_legacy(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 offset;
  u32 mask_reg;
  struct qlcnic_legacy_intr_set const *legacy_intrp;
  
#line 838 
  int err = 0;
  
#line 841 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 842 
  struct pci_dev *pdev = adapter->pdev;
  
#line 844 
  if (qlcnic_use_msi != 0) {
    int tmp;
    
#line 844 
    tmp = pci_enable_msi_exact(pdev,1);
    
#line 844 
    if (tmp == 0) {
      
#line 845 
      adapter->flags |= 2U;
      
#line 846 
      offset = msi_tgt_status[(int)(adapter->ahw)->pci_func];
      
#line 847 
      adapter->tgt_status_reg = qlcnic_get_ioaddr(adapter->ahw,offset);
      
#line 849 
      _dev_info((struct device const *)(& pdev->dev),"using msi interrupts\n");
      
#line 850 
      (adapter->msix_entries)->vector = pdev->irq;
      
#line 851 
      __retres = err;
      
#line 851 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 854 
  if (qlcnic_use_msi != 0 || qlcnic_use_msi_x != 0) {
    
#line 855 
    __retres = -95;
    
#line 855 
    goto return_label;
  }
  else ;
  
#line 857 
  legacy_intrp = & legacy_intr[(int)(adapter->ahw)->pci_func];
  
#line 858 
  (adapter->ahw)->int_vec_bit = legacy_intrp->int_vec_bit;
  
#line 859 
  offset = legacy_intrp->tgt_status_reg;
  
#line 860 
  adapter->tgt_status_reg = qlcnic_get_ioaddr(ahw,offset);
  
#line 861 
  mask_reg = legacy_intrp->tgt_mask_reg;
  
#line 862 
  adapter->tgt_mask_reg = qlcnic_get_ioaddr(ahw,mask_reg);
  
#line 863 
  adapter->isr_int_vec = qlcnic_get_ioaddr(ahw,101777664U);
  
#line 864 
  adapter->crb_int_state_reg = qlcnic_get_ioaddr(ahw,101785708U);
  
#line 865 
  _dev_info((struct device const *)(& pdev->dev),"using legacy interrupts\n");
  
#line 866 
  (adapter->msix_entries)->vector = pdev->irq;
  
#line 867 
  __retres = err;
  return_label: 
#line 867 
                return __retres;
}


#line 870  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_82xx_setup_intr(struct qlcnic_adapter *adapter)
{
  int __retres;
  int num_msix;
  
#line 872 
  int err = 0;
  
#line 874 
  if ((adapter->flags & 524288U) != 0U) {
    
#line 875 
    err = qlcnic_setup_tss_rss_intr(adapter);
    
#line 876 
    if (err < 0) {
      
#line 877 
      __retres = err;
      
#line 877 
      goto return_label;
    }
    else ;
    
#line 878 
    num_msix = (int)(adapter->ahw)->num_msix;
  }
  else {
    
#line 880 
    num_msix = qlcnic_82xx_calculate_msix_vector(adapter);
    
#line 882 
    err = qlcnic_enable_msix(adapter,(unsigned int)num_msix);
    
#line 883 
    if (err == -12) {
      
#line 884 
      __retres = err;
      
#line 884 
      goto return_label;
    }
    else ;
    
#line 886 
    if ((adapter->flags & 4U) == 0U) {
      
#line 887 
      qlcnic_disable_multi_tx(adapter);
      
#line 888 
      adapter->drv_sds_rings = (unsigned char)1U;
      
#line 890 
      err = qlcnic_enable_msi_legacy(adapter);
      
#line 891 
      if (err != 0) {
        
#line 892 
        __retres = err;
        
#line 892 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  
#line 896 
  __retres = 0;
  return_label: 
#line 896 
                return __retres;
}


#line 899  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_82xx_mq_intrpt(struct qlcnic_adapter *adapter, int op_type)
{
  int __retres;
  int err;
  int i;
  bool tmp_0;
  
#line 901 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 904 
  tmp_0 = qlcnic_check_multi_tx(adapter);
  
#line 904 
  if ((int)tmp_0 != 0) {
    
#line 904 
    if ((unsigned int)ahw->diag_test == 0U) {
      
#line 905 
      if ((adapter->flags & 4U) != 0U) {
        
#line 907 
        ahw->intr_tbl = (struct qlcnic_intrpt_config *)vzalloc((unsigned long)ahw->num_msix * 8UL);
        
#line 909 
        if (ahw->intr_tbl == (struct qlcnic_intrpt_config *)0) {
          
#line 910 
          __retres = -12;
          
#line 910 
          goto return_label;
        }
        else ;
        
#line 912 
        i = 0;
        
#line 912 
        goto ldv_56955;
        ldv_56954: 
#line 913 
        ;
        
#line 913 
        (ahw->intr_tbl + i)->type = (unsigned char)3U;
        
#line 914 
        (ahw->intr_tbl + i)->id = (unsigned short)i;
        
#line 915 
        (ahw->intr_tbl + i)->src = 0U;
        
#line 912 
        i += 1;
        ldv_56955: 
#line 913 
        ;
        
#line 912 
        if ((int)ahw->num_msix > i) 
#line 914 
                                    goto ldv_56954; else 
#line 917 
                                                         goto ldv_56956;
        ldv_56956: 
#line 918 
        ;
        
#line 918 
        err = qlcnic_82xx_config_intrpt(adapter,(unsigned char)1);
        
#line 919 
        if (err != 0) 
#line 920 
                      dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to configure Interrupt for %d vector\n",(int)ahw->num_msix); else ;
        
#line 923 
        __retres = err;
        
#line 923 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 926 
  __retres = 0;
  return_label: 
#line 926 
                return __retres;
}


#line 929  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_teardown_intr(struct qlcnic_adapter *adapter)
{
  
#line 931 
  if ((adapter->flags & 4U) != 0U) 
#line 932 
                                   pci_disable_msix(adapter->pdev); else ;
  
#line 933 
  if ((adapter->flags & 2U) != 0U) 
#line 934 
                                   pci_disable_msi(adapter->pdev); else ;
  
#line 936 
  kfree((void const *)adapter->msix_entries);
  
#line 937 
  adapter->msix_entries = (struct msix_entry *)0;
  
#line 939 
  if ((adapter->ahw)->intr_tbl != (struct qlcnic_intrpt_config *)0) {
    
#line 940 
    vfree((void const *)(adapter->ahw)->intr_tbl);
    
#line 941 
    (adapter->ahw)->intr_tbl = (struct qlcnic_intrpt_config *)0;
  }
  else ;
  
#line 943 
  return;
}


#line 945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_cleanup_pci_map(struct qlcnic_hardware_context *ahw)
{
  
#line 947 
  if (ahw->pci_base0 != (void *)0) 
#line 948 
                                   iounmap((void volatile *)ahw->pci_base0); else ;
  
#line 949 
  return;
}


#line 951  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_get_act_pci_func(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_pci_info *pci_info;
  int ret;
  
#line 953 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 957 
  if ((adapter->flags & 64U) == 0U) {
    
#line 958 
    switch ((int)ahw->port_type) {
      case 1: 
#line 959 
      ;
      
#line 960 
      ahw->total_nic_func = (unsigned short)4U;
      
#line 961 
      goto ldv_56970;
      case 2: 
#line 962 
      ;
      
#line 963 
      ahw->total_nic_func = (unsigned short)2U;
      
#line 964 
      goto ldv_56970;
    }
    ldv_56970: 
#line 966 
    ;
    
#line 966 
    __retres = 0;
    
#line 966 
    goto return_label;
  }
  else ;
  
#line 969 
  if ((unsigned int)ahw->op_mode == 0U) {
    
#line 970 
    __retres = 0;
    
#line 970 
    goto return_label;
  }
  else ;
  
#line 972 
  pci_info = (struct qlcnic_pci_info *)kcalloc((unsigned long)ahw->max_vnic_func,20UL,208U);
  
#line 973 
  if (pci_info == (struct qlcnic_pci_info *)0) {
    
#line 974 
    __retres = -12;
    
#line 974 
    goto return_label;
  }
  else ;
  
#line 976 
  ret = qlcnic_get_pci_info(adapter,pci_info);
  
#line 977 
  kfree((void const *)pci_info);
  
#line 978 
  __retres = ret;
  return_label: 
#line 978 
                return __retres;
}


#line 981  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static bool qlcnic_port_eswitch_cfg_capability(struct qlcnic_adapter *adapter)
{
  bool tmp_0;
  
#line 983 
  bool ret = (_Bool)0;
  
#line 985 
  tmp_0 = qlcnic_84xx_check(adapter);
  
#line 985 
  if ((int)tmp_0 != 0) 
#line 986 
                       ret = (_Bool)1;
  else {
    bool tmp;
    
#line 987 
    tmp = qlcnic_83xx_check(adapter);
    
#line 987 
    if ((int)tmp != 0) 
      
#line 988 
      if (((adapter->ahw)->extra_capability[0] & 512U) != 0U) 
#line 990 
                                                              ret = (_Bool)1; else 
                                                                    
#line 992 
                                                                    ret = (_Bool)0;
    else ;
  }
  
#line 995 
  return ret;
}


#line 998  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_init_pci_info(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_pci_info *pci_info;
  int i;
  u16 act_pci_func;
  u8 pfn;
  bool tmp_3;
  int tmp_5;
  bool tmp_4;
  
#line 1000 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1002 
  int id = 0;
  
#line 1002 
  int ret = 0;
  
#line 1002 
  int j = 0;
  
#line 1006 
  pci_info = (struct qlcnic_pci_info *)kcalloc((unsigned long)ahw->max_vnic_func,20UL,208U);
  
#line 1007 
  if (pci_info == (struct qlcnic_pci_info *)0) {
    
#line 1008 
    __retres = -12;
    
#line 1008 
    goto return_label;
  }
  else ;
  
#line 1010 
  ret = qlcnic_get_pci_info(adapter,pci_info);
  
#line 1011 
  if (ret != 0) 
#line 1012 
                goto err_pci_info; else ;
  
#line 1014 
  act_pci_func = ahw->total_nic_func;
  
#line 1016 
  adapter->npars = (struct qlcnic_npar_info *)kzalloc_2((unsigned long)act_pci_func * 26UL,208U);
  
#line 1018 
  if (adapter->npars == (struct qlcnic_npar_info *)0) {
    
#line 1019 
    ret = -12;
    
#line 1020 
    goto err_pci_info;
  }
  else ;
  
#line 1023 
  adapter->eswitch = (struct qlcnic_eswitch *)kzalloc_2(24UL,208U);
  
#line 1025 
  if (adapter->eswitch == (struct qlcnic_eswitch *)0) {
    
#line 1026 
    ret = -12;
    
#line 1027 
    goto err_npars;
  }
  else ;
  
#line 1030 
  i = 0;
  
#line 1030 
  goto ldv_56993;
  ldv_56992: 
#line 1031 
  ;
  
#line 1031 
  pfn = (unsigned char)(pci_info + i)->id;
  
#line 1033 
  if ((unsigned int)pfn >= ahw->max_vnic_func) {
    
#line 1034 
    ret = -22;
    
#line 1035 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Invalid function 0x%x, max 0x%x\n","qlcnic_init_pci_info",(int)pfn,ahw->max_vnic_func);
    
#line 1037 
    goto err_eswitch;
  }
  else ;
  
#line 1040 
  if ((unsigned int)(pci_info + i)->active == 0U || (unsigned int)(pci_info + i)->type != 1U) 
    
#line 1042 
    goto ldv_56991; else ;
  
#line 1044 
  tmp_3 = qlcnic_port_eswitch_cfg_capability(adapter);
  
#line 1044 
  if ((int)tmp_3 != 0) {
    int tmp_2;
    
#line 1045 
    tmp_2 = qlcnic_83xx_set_port_eswitch_status(adapter,(int)pfn,& id);
    
#line 1045 
    if (tmp_2 == 0) 
#line 1047 
                    (adapter->npars + j)->eswitch_status = (_Bool)1; else 
                                                                    
#line 1049 
                                                                    goto ldv_56991;
  }
  else 
#line 1051 
       (adapter->npars + j)->eswitch_status = (_Bool)1;
  
#line 1054 
  (adapter->npars + j)->pci_func = pfn;
  
#line 1055 
  (adapter->npars + j)->active = (unsigned char)(pci_info + i)->active;
  
#line 1056 
  (adapter->npars + j)->type = (unsigned char)(pci_info + i)->type;
  
#line 1057 
  (adapter->npars + j)->phy_port = (unsigned char)(pci_info + i)->default_port;
  
#line 1058 
  (adapter->npars + j)->min_bw = (pci_info + i)->tx_min_bw;
  
#line 1059 
  (adapter->npars + j)->max_bw = (pci_info + i)->tx_max_bw;
  
#line 1061 
  memcpy((void *)(& (adapter->npars + j)->mac),(void const *)(& (pci_info + i)->mac),6UL);
  
#line 1062 
  j += 1;
  ldv_56991: 
#line 1063 
  ;
  
#line 1030 
  i += 1;
  ldv_56993: 
#line 1031 
  ;
  
#line 1030 
  if (ahw->max_vnic_func > (unsigned int)i) 
#line 1032 
                                            goto ldv_56992; else 
#line 1035 
                                                                 goto ldv_56994;
  ldv_56994: 
#line 1036 
  ;
  
#line 1068 
  tmp_4 = qlcnic_port_eswitch_cfg_capability(adapter);
  
#line 1068 
  if (tmp_4) 
#line 1068 
             tmp_5 = 0; else 
#line 1068 
                             tmp_5 = 1;
  
#line 1068 
  if (tmp_5) {
    
#line 1069 
    i = 0;
    
#line 1069 
    goto ldv_56996;
    ldv_56995: 
#line 1070 
    ;
    
#line 1070 
    (adapter->eswitch + i)->flags |= 2U;
    
#line 1069 
    i += 1;
    ldv_56996: 
#line 1070 
    ;
    
#line 1069 
    if (i <= 1) 
#line 1071 
                goto ldv_56995; else 
#line 1074 
                                     goto ldv_56997;
    ldv_56997: 
#line 1075 
    ;
  }
  else ;
  
#line 1073 
  kfree((void const *)pci_info);
  
#line 1074 
  __retres = 0;
  
#line 1074 
  goto return_label;
  err_eswitch: 
#line 1076 
  ;
  
#line 1077 
  kfree((void const *)adapter->eswitch);
  
#line 1078 
  adapter->eswitch = (struct qlcnic_eswitch *)0;
  err_npars: 
#line 1079 
  ;
  
#line 1080 
  kfree((void const *)adapter->npars);
  
#line 1081 
  adapter->npars = (struct qlcnic_npar_info *)0;
  err_pci_info: 
#line 1082 
  ;
  
#line 1083 
  kfree((void const *)pci_info);
  
#line 1085 
  __retres = ret;
  return_label: 
#line 1085 
                return __retres;
}


#line 1089  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_set_function_modes(struct qlcnic_adapter *adapter)
{
  u8 id;
  int ret;
  
#line 1093 
  u32 data = 0U;
  
#line 1094 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1096 
  ret = qlcnic_api_lock(adapter);
  
#line 1097 
  if (ret != 0) 
#line 1098 
                goto err_lock; else ;
  
#line 1100 
  id = ahw->pci_func;
  
#line 1101 
  data = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 20U)));
  
#line 1102 
  data = (unsigned int)(~ (15 << (int)id * 4)) & data;
  
#line 1104 
  writel(data,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 20U)));
  
#line 1105 
  qlcnic_api_unlock(adapter);
  err_lock: 
#line 1106 
  ;
  
#line 1107 
  return ret;
}


#line 1110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_check_vf(struct qlcnic_adapter *adapter, struct pci_device_id const *ent)
{
  u32 op_mode;
  u32 priv_level;
  
#line 1116 
  (adapter->ahw)->fw_hal_version = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 19U)));
  
#line 1120 
  qlcnic_get_func_no(adapter);
  
#line 1123 
  op_mode = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 20U)));
  
#line 1124 
  if (op_mode == 286331153U) 
#line 1125 
                             priv_level = 0U; else 
#line 1127 
                                                   priv_level = (op_mode >> (int)(adapter->ahw)->pci_func * 4) & 15U;
  
#line 1129 
  if (priv_level == 2U) {
    
#line 1130 
    (adapter->ahw)->op_mode = (unsigned short)2U;
    
#line 1131 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"HAL Version: %d Non Privileged function\n",(adapter->ahw)->fw_hal_version);
    
#line 1134 
    adapter->nic_ops = & qlcnic_vf_ops;
  }
  else 
#line 1136 
       adapter->nic_ops = & qlcnic_ops;
  
#line 1137 
  return;
}


#line 1141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_get_bar_length(u32 dev_id, ulong *bar)
{
  
#line 1143 
  switch (dev_id) {
    case (u32)32800: 
#line 1144 
    ;
    
#line 1145 
    *bar = 2097152UL;
    
#line 1146 
    goto ldv_57017;
    case (u32)32816: 
#line 1147 
    ;
    case (u32)34864: 
#line 1148 
    ;
    case (u32)32832: 
#line 1149 
    ;
    case (u32)33840: 
#line 1150 
    ;
    case (u32)33856: 
#line 1151 
    ;
    
#line 1152 
    *bar = 16384UL;
    
#line 1153 
    goto ldv_57017;
    default: 
#line 1154 
    ;
    
#line 1155 
    *bar = 0UL;
  }
  ldv_57017: 
#line 1157 
  ;
  
#line 1158 
  return;
}


#line 1159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_setup_pci_map(struct pci_dev *pdev, struct qlcnic_hardware_context *ahw)
{
  int __retres;
  u32 offset;
  unsigned long mem_len;
  unsigned long bar0_len;
  resource_size_t tmp;
  
#line 1163 
  void *mem_ptr0 = (void *)0;
  
#line 1164 
  unsigned long pci_len0 = 0UL;
  
#line 1167 
  if (pdev->resource[0].start != 0ULL || pdev->resource[0].end != pdev->resource[0].start) 
    
#line 1167 
    tmp = (pdev->resource[0].end - pdev->resource[0].start) + 1ULL; else 
                                                                    
#line 1167 
                                                                    tmp = 0ULL;
  
#line 1167 
  mem_len = (unsigned long)tmp;
  
#line 1169 
  qlcnic_get_bar_length((unsigned int)pdev->device,& bar0_len);
  
#line 1170 
  if (mem_len >= bar0_len) {
    
#line 1172 
    mem_ptr0 = pci_ioremap_bar(pdev,0);
    
#line 1173 
    if (mem_ptr0 == (void *)0) {
      
#line 1174 
      dev_err((struct device const *)(& pdev->dev),"failed to map PCI bar 0\n");
      
#line 1175 
      __retres = -5;
      
#line 1175 
      goto return_label;
    }
    else ;
    
#line 1177 
    pci_len0 = mem_len;
  }
  else {
    
#line 1179 
    __retres = -5;
    
#line 1179 
    goto return_label;
  }
  
#line 1182 
  _dev_info((struct device const *)(& pdev->dev),"%dKB memory map\n",(int)(mem_len >> 10));
  
#line 1184 
  ahw->pci_base0 = mem_ptr0;
  
#line 1185 
  ahw->pci_len0 = pci_len0;
  
#line 1186 
  offset = (unsigned int)(((int)ahw->pci_func + 16896) * 4) + 101711872U;
  
#line 1187 
  qlcnic_get_ioaddr(ahw,offset);
  
#line 1189 
  __retres = 0;
  return_label: 
#line 1189 
                return __retres;
}


#line 1192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static bool qlcnic_validate_subsystem_id(struct qlcnic_adapter *adapter, int index)
{
  unsigned short subsystem_vendor;
  
#line 1195 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1197 
  bool ret = (_Bool)1;
  
#line 1199 
  subsystem_vendor = pdev->subsystem_vendor;
  
#line 1201 
  if ((unsigned int)pdev->device == 32800U || (unsigned int)pdev->device == 32816U) 
    
#line 1203 
    if ((int)qlcnic_boards[index].sub_vendor == (int)subsystem_vendor && (int)qlcnic_boards[index].sub_device == (int)pdev->subsystem_device) 
      
#line 1205 
      ret = (_Bool)1; else 
#line 1207 
                           ret = (_Bool)0;
  else ;
  
#line 1210 
  return ret;
}


#line 1213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_get_board_name(struct qlcnic_adapter *adapter, char *name)
{
  int i;
  
#line 1215 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1216 
  int found = 0;
  
#line 1218 
  i = 0;
  
#line 1218 
  goto ldv_57052;
  ldv_57051: 
#line 1219 
  ;
  
#line 1219 
  if ((int)qlcnic_boards[i].vendor == (int)pdev->vendor && (int)qlcnic_boards[i].device == (int)pdev->device) {
    bool tmp;
    
#line 1220 
    tmp = qlcnic_validate_subsystem_id(adapter,i);
    
#line 1220 
    if ((int)tmp != 0) {
      
#line 1222 
      found = 1;
      
#line 1223 
      goto ldv_57050;
    }
    else ;
  }
  else ;
  
#line 1218 
  i += 1;
  ldv_57052: 
#line 1219 
  ;
  
#line 1218 
  if ((unsigned int)i <= 21U) 
#line 1220 
                              goto ldv_57051; else 
#line 1223 
                                                   goto ldv_57050;
  ldv_57050: 
#line 1224 
  ;
  
#line 1227 
  if (found == 0) 
#line 1228 
                  sprintf(name,"%pM Gigabit Ethernet",(u8 *)(& adapter->mac_addr)); else 
                                                                    
#line 1230 
                                                                    sprintf(name,"%pM: %s",(u8 *)(& adapter->mac_addr),(char const *)(& qlcnic_boards[i].short_name));
  
#line 1232 
  return;
}


#line 1235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_check_options(struct qlcnic_adapter *adapter)
{
  int err;
  u32 fw_major;
  u32 fw_minor;
  u32 fw_build;
  u32 prev_fw_version;
  
#line 1239 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1240 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1241 
  struct qlcnic_fw_dump *fw_dump = & ahw->fw_dump;
  
#line 1243 
  prev_fw_version = adapter->fw_version;
  
#line 1245 
  fw_major = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 11U)));
  
#line 1246 
  fw_minor = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 12U)));
  
#line 1247 
  fw_build = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 13U)));
  
#line 1249 
  adapter->fw_version = ((fw_major << 24) + (fw_minor << 16)) + fw_build;
  
#line 1251 
  err = qlcnic_get_board_info(adapter);
  
#line 1252 
  if (err != 0) {
    
#line 1253 
    dev_err((struct device const *)(& pdev->dev),"Error getting board config info.\n");
    
#line 1254 
    goto return_label;
  }
  else ;
  
#line 1256 
  if ((unsigned int)ahw->op_mode != 2U) {
    
#line 1257 
    if (fw_dump->tmpl_hdr == (void *)0 || adapter->fw_version > prev_fw_version) {
      int tmp;
      
#line 1259 
      vfree((void const *)fw_dump->tmpl_hdr);
      
#line 1260 
      tmp = qlcnic_fw_cmd_get_minidump_temp(adapter);
      
#line 1260 
      if (tmp == 0) 
#line 1261 
                    _dev_info((struct device const *)(& pdev->dev),"Supports FW dump capability\n"); else ;
    }
    else ;
  }
  else ;
  
#line 1266 
  _dev_info((struct device const *)(& pdev->dev),"Driver v%s, firmware v%d.%d.%d\n",(char *)"5.3.62",fw_major,fw_minor,fw_build);
  
#line 1269 
  if ((unsigned int)(adapter->ahw)->port_type == 2U) {
    
#line 1270 
    if ((adapter->flags & 64U) != 0U) {
      
#line 1271 
      adapter->num_rxd = (unsigned short)1024U;
      
#line 1272 
      adapter->max_rxd = (unsigned short)2048U;
    }
    else {
      
#line 1274 
      adapter->num_rxd = (unsigned short)4096U;
      
#line 1275 
      adapter->max_rxd = (unsigned short)8192U;
    }
    
#line 1278 
    adapter->num_jumbo_rxd = (unsigned short)1024U;
    
#line 1279 
    adapter->max_jumbo_rxd = (unsigned short)1024U;
  }
  else 
    
#line 1281 
    if ((unsigned int)(adapter->ahw)->port_type == 1U) {
      
#line 1282 
      adapter->num_rxd = (unsigned short)2048U;
      
#line 1283 
      adapter->num_jumbo_rxd = (unsigned short)512U;
      
#line 1284 
      adapter->max_jumbo_rxd = (unsigned short)512U;
      
#line 1285 
      adapter->max_rxd = (unsigned short)4096U;
    }
    else ;
  
#line 1288 
  (adapter->ahw)->msix_supported = (unsigned char)(qlcnic_use_msi_x != 0);
  
#line 1290 
  adapter->num_txd = (unsigned short)1024U;
  
#line 1292 
  adapter->max_rds_rings = (unsigned char)2U;
  return_label: 
#line 1293 
                return;
}


#line 1296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_initialize_nic(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_info nic_info;
  
#line 1299 
  int err = 0;
  
#line 1301 
  memset((void *)(& nic_info),0,72UL);
  
#line 1302 
  err = qlcnic_get_nic_info(adapter,& nic_info,(unsigned char)((int)(adapter->ahw)->pci_func));
  
#line 1303 
  if (err != 0) {
    
#line 1304 
    __retres = err;
    
#line 1304 
    goto return_label;
  }
  else ;
  
#line 1306 
  (adapter->ahw)->physical_port = (unsigned char)nic_info.phys_port;
  
#line 1307 
  (adapter->ahw)->switch_mode = nic_info.switch_mode;
  
#line 1308 
  (adapter->ahw)->max_tx_ques = nic_info.max_tx_ques;
  
#line 1309 
  (adapter->ahw)->max_rx_ques = nic_info.max_rx_ques;
  
#line 1310 
  (adapter->ahw)->capabilities = nic_info.capabilities;
  
#line 1312 
  if ((adapter->ahw)->capabilities < (u32)0) {
    u32 temp;
    int tmp;
    
#line 1314 
    tmp = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323372UL,& err);
    
#line 1314 
    temp = (unsigned int)tmp;
    
#line 1315 
    if (err == -5) {
      
#line 1316 
      __retres = err;
      
#line 1316 
      goto return_label;
    }
    else ;
    
#line 1317 
    (adapter->ahw)->extra_capability[0] = temp;
  }
  else 
#line 1319 
       (adapter->ahw)->extra_capability[0] = 0U;
  
#line 1322 
  (adapter->ahw)->max_mac_filters = nic_info.max_mac_filters;
  
#line 1323 
  (adapter->ahw)->max_mtu = nic_info.max_mtu;
  
#line 1325 
  if (((adapter->ahw)->capabilities & 64U) != 0U) {
    
#line 1326 
    adapter->flags |= 64U;
    
#line 1327 
    (adapter->ahw)->nic_mode = (unsigned char)255U;
    
#line 1328 
    adapter->max_tx_rings = (unsigned char)4U;
    
#line 1329 
    adapter->max_sds_rings = (unsigned char)4U;
    
#line 1331 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"vNIC mode enabled.\n");
  }
  else {
    
#line 1333 
    (adapter->ahw)->nic_mode = (unsigned char)0U;
    
#line 1334 
    adapter->max_tx_rings = (unsigned char)8U;
    
#line 1335 
    adapter->max_sds_rings = (unsigned char)8U;
    
#line 1336 
    adapter->flags &= 4294967231U;
  }
  
#line 1339 
  __retres = err;
  return_label: 
#line 1339 
                return __retres;
}


#line 1342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_set_vlan_config(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg)
{
  
#line 1345 
  if ((unsigned int)esw_cfg->discard_tagged != 0U) 
#line 1346 
                                                   adapter->flags &= 4294967039U; else 
                                                                    
#line 1348 
                                                                    adapter->flags |= 256U;
  
#line 1350 
  if ((unsigned int)esw_cfg->vlan_id != 0U) {
    
#line 1351 
    adapter->rx_pvid = esw_cfg->vlan_id;
    
#line 1352 
    adapter->tx_pvid = esw_cfg->vlan_id;
  }
  else {
    
#line 1354 
    adapter->rx_pvid = (unsigned short)0U;
    
#line 1355 
    adapter->tx_pvid = (unsigned short)0U;
  }
  
#line 1357 
  return;
}


#line 1360  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_vlan_rx_add(struct net_device *netdev, __be16 proto, u16 vid)
{
  int __retres;
  int err;
  bool tmp_0;
  
#line 1362 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1365 
  tmp_0 = qlcnic_sriov_vf_check(adapter);
  
#line 1365 
  if ((int)tmp_0 != 0) {
    
#line 1366 
    err = qlcnic_sriov_cfg_vf_guest_vlan(adapter,(unsigned short)((int)vid),(unsigned char)1);
    
#line 1367 
    if (err != 0) {
      
#line 1368 
      netdev_err((struct net_device const *)netdev,"Cannot add VLAN filter for VLAN id %d, err=%d",(int)vid,err);
      
#line 1371 
      __retres = err;
      
#line 1371 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1375 
  set_bit((long)vid,(unsigned long volatile *)(& adapter->vlans));
  
#line 1376 
  __retres = 0;
  return_label: 
#line 1376 
                return __retres;
}


#line 1380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_vlan_rx_del(struct net_device *netdev, __be16 proto, u16 vid)
{
  int __retres;
  int err;
  bool tmp_0;
  
#line 1382 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1385 
  tmp_0 = qlcnic_sriov_vf_check(adapter);
  
#line 1385 
  if ((int)tmp_0 != 0) {
    
#line 1386 
    err = qlcnic_sriov_cfg_vf_guest_vlan(adapter,(unsigned short)((int)vid),(unsigned char)0);
    
#line 1387 
    if (err != 0) {
      
#line 1388 
      netdev_err((struct net_device const *)netdev,"Cannot delete VLAN filter for VLAN id %d, err=%d",(int)vid,err);
      
#line 1391 
      __retres = err;
      
#line 1391 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1395 
  qlcnic_restore_indev_addr(netdev,2UL);
  
#line 1396 
  set_bit((long)vid,(unsigned long volatile *)(& adapter->vlans));
  
#line 1397 
  __retres = 0;
  return_label: 
#line 1397 
                return __retres;
}


#line 1400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_set_eswitch_port_features(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg)
{
  
#line 1403 
  adapter->flags &= 4294963711U;
  
#line 1406 
  if ((unsigned int)esw_cfg->mac_anti_spoof != 0U) 
#line 1407 
                                                   adapter->flags |= 512U; else ;
  
#line 1409 
  if ((unsigned int)esw_cfg->mac_override == 0U) 
#line 1410 
                                                 adapter->flags |= 1024U; else ;
  
#line 1412 
  if ((unsigned int)esw_cfg->promisc_mode == 0U) 
#line 1413 
                                                 adapter->flags |= 2048U; else ;
  
#line 1414 
  return;
}


#line 1416  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_set_eswitch_port_config(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_esw_func_cfg esw_cfg;
  int tmp;
  
#line 1420 
  if ((adapter->flags & 64U) == 0U) {
    
#line 1421 
    __retres = 0;
    
#line 1421 
    goto return_label;
  }
  else ;
  
#line 1423 
  esw_cfg.pci_func = (adapter->ahw)->pci_func;
  
#line 1424 
  tmp = qlcnic_get_eswitch_port_config(adapter,& esw_cfg);
  
#line 1424 
  if (tmp != 0) {
    
#line 1425 
    __retres = -5;
    
#line 1425 
    goto return_label;
  }
  else ;
  
#line 1426 
  qlcnic_set_vlan_config(adapter,& esw_cfg);
  
#line 1427 
  qlcnic_set_eswitch_port_features(adapter,& esw_cfg);
  
#line 1428 
  qlcnic_set_netdev_features(adapter,& esw_cfg);
  
#line 1430 
  __retres = 0;
  return_label: 
#line 1430 
                return __retres;
}


#line 1433  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_set_netdev_features(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg)
{
  bool tmp;
  
#line 1436 
  struct net_device *netdev = adapter->netdev;
  
#line 1438 
  tmp = qlcnic_83xx_check(adapter);
  
#line 1438 
  if ((int)tmp != 0) 
#line 1439 
                     goto return_label; else ;
  
#line 1441 
  adapter->offload_flags = (unsigned int)esw_cfg->offload_flags;
  
#line 1442 
  adapter->flags |= 131072U;
  
#line 1443 
  netdev_update_features(netdev);
  
#line 1444 
  adapter->flags &= 4294836223U;
  return_label: 
#line 1445 
                return;
}


#line 1448  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_check_eswitch_mode(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 op_mode;
  u32 priv_level;
  
#line 1451 
  int err = 0;
  
#line 1453 
  err = qlcnic_initialize_nic(adapter);
  
#line 1454 
  if (err != 0) {
    
#line 1455 
    __retres = err;
    
#line 1455 
    goto return_label;
  }
  else ;
  
#line 1457 
  if ((adapter->flags & 128U) != 0U) {
    
#line 1458 
    __retres = 0;
    
#line 1458 
    goto return_label;
  }
  else ;
  
#line 1460 
  op_mode = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 20U)));
  
#line 1461 
  priv_level = (op_mode >> (int)(adapter->ahw)->pci_func * 4) & 15U;
  
#line 1463 
  if (op_mode == 286331153U) 
#line 1464 
                             priv_level = 0U; else 
#line 1466 
                                                   priv_level = (op_mode >> (int)(adapter->ahw)->pci_func * 4) & 15U;
  
#line 1468 
  if ((adapter->flags & 64U) != 0U) {
    
#line 1469 
    if (priv_level == 0U) {
      
#line 1470 
      (adapter->ahw)->op_mode = (unsigned short)0U;
      
#line 1471 
      err = qlcnic_init_pci_info(adapter);
      
#line 1472 
      if (err != 0) {
        
#line 1473 
        __retres = err;
        
#line 1473 
        goto return_label;
      }
      else ;
      
#line 1475 
      qlcnic_set_function_modes(adapter);
      
#line 1476 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"HAL Version: %d, Management function\n",(adapter->ahw)->fw_hal_version);
    }
    else 
      
#line 1479 
      if (priv_level == 1U) {
        
#line 1480 
        (adapter->ahw)->op_mode = (unsigned short)1U;
        
#line 1481 
        _dev_info((struct device const *)(& (adapter->pdev)->dev),"HAL Version: %d, Privileged function\n",(adapter->ahw)->fw_hal_version);
      }
      else ;
  }
  else 
#line 1486 
       (adapter->ahw)->nic_mode = (unsigned char)0U;
  
#line 1489 
  adapter->flags |= 128U;
  
#line 1491 
  __retres = err;
  return_label: 
#line 1491 
                return __retres;
}


#line 1494  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_set_default_offload_settings(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_esw_func_cfg esw_cfg;
  struct qlcnic_npar_info *npar;
  u8 i;
  bool tmp;
  int tmp_0;
  
#line 1500 
  if ((unsigned int)adapter->need_fw_reset != 0U) {
    
#line 1501 
    __retres = 0;
    
#line 1501 
    goto return_label;
  }
  else ;
  
#line 1503 
  i = (unsigned char)0U;
  
#line 1503 
  goto ldv_57115;
  ldv_57114: 
#line 1504 
  ;
  
#line 1504 
  if (! (adapter->npars + (int)i)->eswitch_status) 
#line 1505 
                                                   goto ldv_57113; else ;
  
#line 1507 
  memset((void *)(& esw_cfg),0,16UL);
  
#line 1508 
  esw_cfg.pci_func = (adapter->npars + (int)i)->pci_func;
  
#line 1509 
  esw_cfg.mac_override = (unsigned char)1U;
  
#line 1510 
  esw_cfg.promisc_mode = (unsigned char)1U;
  
#line 1511 
  tmp = qlcnic_82xx_check(adapter);
  
#line 1511 
  if ((int)tmp != 0) {
    
#line 1512 
    esw_cfg.offload_flags = (unsigned char)1U;
    
#line 1513 
    if (((adapter->ahw)->capabilities & 2U) != 0U) 
#line 1514 
                                                   esw_cfg.offload_flags = (unsigned char)((unsigned int)esw_cfg.offload_flags | 6U); else ;
  }
  else ;
  
#line 1516 
  tmp_0 = qlcnic_config_switch_port(adapter,& esw_cfg);
  
#line 1516 
  if (tmp_0 != 0) {
    
#line 1517 
    __retres = -5;
    
#line 1517 
    goto return_label;
  }
  else ;
  
#line 1518 
  npar = adapter->npars + (int)i;
  
#line 1519 
  npar->pvid = esw_cfg.vlan_id;
  
#line 1520 
  npar->mac_override = esw_cfg.mac_override;
  
#line 1521 
  npar->mac_anti_spoof = esw_cfg.mac_anti_spoof;
  
#line 1522 
  npar->discard_tagged = esw_cfg.discard_tagged;
  
#line 1523 
  npar->promisc_mode = esw_cfg.promisc_mode;
  
#line 1524 
  npar->offload_flags = esw_cfg.offload_flags;
  ldv_57113: 
#line 1525 
  ;
  
#line 1503 
  i = (u8)((int)i + 1);
  ldv_57115: 
#line 1504 
  ;
  
#line 1503 
  if ((int)((unsigned short)i) < (int)(adapter->ahw)->total_nic_func) 
    
#line 1505 
    goto ldv_57114; else 
#line 1508 
                         goto ldv_57116;
  ldv_57116: 
#line 1509 
  ;
  
#line 1527 
  __retres = 0;
  return_label: 
#line 1527 
                return __retres;
}


#line 1532  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_reset_eswitch_config(struct qlcnic_adapter *adapter, struct qlcnic_npar_info *npar, int pci_func)
{
  int __retres;
  struct qlcnic_esw_func_cfg esw_cfg;
  int tmp;
  int tmp_0;
  
#line 1536 
  esw_cfg.op_mode = (unsigned char)0U;
  
#line 1537 
  esw_cfg.pci_func = (unsigned char)pci_func;
  
#line 1538 
  esw_cfg.vlan_id = npar->pvid;
  
#line 1539 
  esw_cfg.mac_override = npar->mac_override;
  
#line 1540 
  esw_cfg.discard_tagged = npar->discard_tagged;
  
#line 1541 
  esw_cfg.mac_anti_spoof = npar->mac_anti_spoof;
  
#line 1542 
  esw_cfg.offload_flags = npar->offload_flags;
  
#line 1543 
  esw_cfg.promisc_mode = npar->promisc_mode;
  
#line 1544 
  tmp = qlcnic_config_switch_port(adapter,& esw_cfg);
  
#line 1544 
  if (tmp != 0) {
    
#line 1545 
    __retres = -5;
    
#line 1545 
    goto return_label;
  }
  else ;
  
#line 1547 
  esw_cfg.op_mode = (unsigned char)1U;
  
#line 1548 
  tmp_0 = qlcnic_config_switch_port(adapter,& esw_cfg);
  
#line 1548 
  if (tmp_0 != 0) {
    
#line 1549 
    __retres = -5;
    
#line 1549 
    goto return_label;
  }
  else ;
  
#line 1551 
  __retres = 0;
  return_label: 
#line 1551 
                return __retres;
}


#line 1554  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_reset_npar_config(struct qlcnic_adapter *adapter)
{
  int __retres;
  int i;
  int err;
  struct qlcnic_npar_info *npar;
  struct qlcnic_info nic_info;
  u8 pci_func;
  bool tmp;
  
#line 1561 
  tmp = qlcnic_82xx_check(adapter);
  
#line 1561 
  if ((int)tmp != 0) {
    
#line 1562 
    if ((unsigned int)adapter->need_fw_reset == 0U) {
      
#line 1563 
      __retres = 0;
      
#line 1563 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1566 
  i = 0;
  
#line 1566 
  goto ldv_57133;
  ldv_57132: 
#line 1567 
  ;
  
#line 1567 
  npar = adapter->npars + i;
  
#line 1568 
  pci_func = npar->pci_func;
  
#line 1569 
  if (! (adapter->npars + i)->eswitch_status) 
#line 1570 
                                              goto ldv_57131; else ;
  
#line 1572 
  memset((void *)(& nic_info),0,72UL);
  
#line 1573 
  err = qlcnic_get_nic_info(adapter,& nic_info,(unsigned char)((int)pci_func));
  
#line 1574 
  if (err != 0) {
    
#line 1575 
    __retres = err;
    
#line 1575 
    goto return_label;
  }
  else ;
  
#line 1576 
  nic_info.min_tx_bw = npar->min_bw;
  
#line 1577 
  nic_info.max_tx_bw = npar->max_bw;
  
#line 1578 
  err = qlcnic_set_nic_info(adapter,& nic_info);
  
#line 1579 
  if (err != 0) {
    
#line 1580 
    __retres = err;
    
#line 1580 
    goto return_label;
  }
  else ;
  
#line 1582 
  if ((unsigned int)npar->enable_pm != 0U) {
    
#line 1583 
    err = qlcnic_config_port_mirroring(adapter,(unsigned char)((int)npar->dest_npar),(unsigned char)1,(unsigned char)((int)pci_func));
    
#line 1586 
    if (err != 0) {
      
#line 1587 
      __retres = err;
      
#line 1587 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1589 
  err = qlcnic_reset_eswitch_config(adapter,npar,(int)pci_func);
  
#line 1590 
  if (err != 0) {
    
#line 1591 
    __retres = err;
    
#line 1591 
    goto return_label;
  }
  else ;
  ldv_57131: 
#line 1592 
  ;
  
#line 1566 
  i += 1;
  ldv_57133: 
#line 1567 
  ;
  
#line 1566 
  if ((int)(adapter->ahw)->total_nic_func > i) 
#line 1568 
                                               goto ldv_57132; else 
#line 1571 
                                                                    goto ldv_57134;
  ldv_57134: 
#line 1572 
  ;
  
#line 1593 
  __retres = 0;
  return_label: 
#line 1593 
                return __retres;
}


#line 1596  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_check_npar_opertional(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 npar_state;
  
#line 1598 
  u8 npar_opt_timeo = (unsigned char)30U;
  
#line 1601 
  if ((unsigned int)(adapter->ahw)->op_mode == 0U) {
    
#line 1602 
    __retres = 0;
    
#line 1602 
    goto return_label;
  }
  else ;
  
#line 1604 
  npar_state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 14U)));
  
#line 1606 
  goto ldv_57141;
  ldv_57140: 
#line 1607 
  ;
  
#line 1607 
  msleep(1000U);
  
#line 1608 
  npar_state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 14U)));
  ldv_57141: 
#line 1609 
  ;
  
#line 1606 
  if (npar_state != 1U) {
    
#line 1606 
    npar_opt_timeo = (u8)((int)npar_opt_timeo - 1);
    
#line 1606 
    if ((unsigned int)npar_opt_timeo != 0U) 
#line 1608 
                                            goto ldv_57140; else 
#line 1611 
                                                                 goto ldv_57142;
  }
  else 
#line 1611 
       goto ldv_57142;
  ldv_57142: 
#line 1612 
  ;
  
#line 1611 
  if ((unsigned int)npar_opt_timeo == 0U) {
    
#line 1612 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Waiting for NPAR state to operational timeout\n");
    
#line 1614 
    __retres = -5;
    
#line 1614 
    goto return_label;
  }
  else ;
  
#line 1616 
  __retres = 0;
  return_label: 
#line 1616 
                return __retres;
}


#line 1620  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_set_mgmt_operations(struct qlcnic_adapter *adapter)
{
  int __retres;
  int err;
  
#line 1624 
  if ((adapter->flags & 64U) == 0U || (unsigned int)(adapter->ahw)->op_mode != 0U) {
    
#line 1626 
    __retres = 0;
    
#line 1626 
    goto return_label;
  }
  else ;
  
#line 1628 
  err = qlcnic_set_default_offload_settings(adapter);
  
#line 1629 
  if (err != 0) {
    
#line 1630 
    __retres = err;
    
#line 1630 
    goto return_label;
  }
  else ;
  
#line 1632 
  err = qlcnic_reset_npar_config(adapter);
  
#line 1633 
  if (err != 0) {
    
#line 1634 
    __retres = err;
    
#line 1634 
    goto return_label;
  }
  else ;
  
#line 1636 
  qlcnic_dev_set_npar_ready(adapter);
  
#line 1638 
  __retres = err;
  return_label: 
#line 1638 
                return __retres;
}


#line 1641  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_82xx_start_firmware(struct qlcnic_adapter *adapter)
{
  int __retres;
  int err;
  
#line 1645 
  err = qlcnic_can_start_firmware(adapter);
  
#line 1646 
  if (err < 0) {
    
#line 1647 
    __retres = err;
    
#line 1647 
    goto return_label;
  }
  else 
    
#line 1648 
    if (err == 0) 
#line 1649 
                  goto check_fw_status; else ;
  
#line 1651 
  if (qlcnic_load_fw_file != 0) 
#line 1652 
                                qlcnic_request_firmware(adapter);
  else {
    
#line 1654 
    err = qlcnic_check_flash_fw_ver(adapter);
    
#line 1655 
    if (err != 0) 
#line 1656 
                  goto err_out; else ;
    
#line 1658 
    (adapter->ahw)->fw_type = (unsigned char)1U;
  }
  
#line 1661 
  err = qlcnic_need_fw_reset(adapter);
  
#line 1662 
  if (err == 0) 
#line 1663 
                goto check_fw_status; else ;
  
#line 1665 
  err = qlcnic_pinit_from_rom(adapter);
  
#line 1666 
  if (err != 0) 
#line 1667 
                goto err_out; else ;
  
#line 1669 
  err = qlcnic_load_firmware(adapter);
  
#line 1670 
  if (err != 0) 
#line 1671 
                goto err_out; else ;
  
#line 1673 
  qlcnic_release_firmware(adapter);
  
#line 1674 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,136324256UL,328510U);
  check_fw_status: 
#line 1676 
  ;
  
#line 1677 
  err = qlcnic_check_fw_status(adapter);
  
#line 1678 
  if (err != 0) 
#line 1679 
                goto err_out; else ;
  
#line 1681 
  writel(3U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 6U)));
  
#line 1682 
  qlcnic_idc_debug_info(adapter,(unsigned char)1);
  
#line 1683 
  err = qlcnic_check_eswitch_mode(adapter);
  
#line 1684 
  if (err != 0) {
    
#line 1685 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Memory allocation failed for eswitch\n");
    
#line 1687 
    goto err_out;
  }
  else ;
  
#line 1689 
  err = qlcnic_set_mgmt_operations(adapter);
  
#line 1690 
  if (err != 0) 
#line 1691 
                goto err_out; else ;
  
#line 1693 
  qlcnic_check_options(adapter);
  
#line 1694 
  adapter->need_fw_reset = (unsigned char)0U;
  
#line 1696 
  qlcnic_release_firmware(adapter);
  
#line 1697 
  __retres = 0;
  
#line 1697 
  goto return_label;
  err_out: 
#line 1699 
  ;
  
#line 1700 
  writel(6U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 6U)));
  
#line 1701 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"Device state set to failed\n");
  
#line 1703 
  qlcnic_release_firmware(adapter);
  
#line 1704 
  __retres = err;
  return_label: 
#line 1704 
                return __retres;
}


#line 1708  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_request_irq(struct qlcnic_adapter *adapter)
{
  int __retres;
  irqreturn_t (*handler)(int , void *);
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_tx_ring *tx_ring;
  int err;
  int ring;
  int num_sds_rings;
  
#line 1715 
  unsigned long flags = 0UL;
  
#line 1716 
  struct net_device *netdev = adapter->netdev;
  
#line 1717 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 1719 
  if ((unsigned int)(adapter->ahw)->diag_test == 1U) {
    bool tmp;
    
#line 1720 
    tmp = qlcnic_82xx_check(adapter);
    
#line 1720 
    if ((int)tmp != 0) 
#line 1721 
                       handler = & qlcnic_tmp_intr; else 
#line 1723 
                                                         handler = & qlcnic_83xx_tmp_intr;
    
#line 1724 
    if ((adapter->flags & 6U) == 0U) 
#line 1725 
                                     flags |= 128UL; else ;
  }
  else 
    
#line 1728 
    if ((adapter->flags & 4U) != 0U) 
#line 1729 
                                     handler = & qlcnic_msix_intr;
    else 
      
#line 1730 
      if ((adapter->flags & 2U) != 0U) 
#line 1731 
                                       handler = & qlcnic_msi_intr;
      else {
        bool tmp_0;
        
#line 1733 
        flags |= 128UL;
        
#line 1734 
        tmp_0 = qlcnic_82xx_check(adapter);
        
#line 1734 
        if ((int)tmp_0 != 0) 
#line 1735 
                             handler = & qlcnic_intr; else 
#line 1737 
                                                           handler = & qlcnic_83xx_intr;
      }
  
#line 1740 
  adapter->irq = (unsigned int)netdev->irq;
  
#line 1742 
  if ((unsigned int)(adapter->ahw)->diag_test != 2U) {
    bool tmp_4;
    bool tmp_6;
    
#line 1743 
    tmp_4 = qlcnic_82xx_check(adapter);
    
#line 1743 
    if ((int)tmp_4 != 0) 
#line 1743 
                         goto _LOR;
    else {
      bool tmp_5;
      
#line 1743 
      tmp_5 = qlcnic_83xx_check(adapter);
      
#line 1743 
      if ((int)tmp_5 != 0) {
        
#line 1744 
        if ((adapter->flags & 4U) != 0U) {
          _LOR: {
                  bool tmp_1;
                  
#line 1746 
                  num_sds_rings = (int)adapter->drv_sds_rings;
                  
#line 1747 
                  ring = 0;
                  
#line 1747 
                  goto ldv_57166;
                  ldv_57165: 
#line 1748 
                  ;
                  
#line 1748 
                  sds_ring = recv_ctx->sds_rings + ring;
                  
#line 1749 
                  tmp_1 = qlcnic_82xx_check(adapter);
                  
#line 1749 
                  if ((int)tmp_1 != 0) {
                    int tmp_3;
                    bool tmp_2;
                    
#line 1750 
                    tmp_2 = qlcnic_check_multi_tx(adapter);
                    
#line 1750 
                    if (tmp_2) 
#line 1750 
                               tmp_3 = 0; else 
#line 1750 
                                               tmp_3 = 1;
                    
#line 1750 
                    if (tmp_3) 
                      
#line 1750 
                      if (num_sds_rings + -1 == ring) 
                        
#line 1752 
                        if ((adapter->flags & 4U) == 0U) 
#line 1754 
                                                         snprintf((char *)(& sds_ring->name),28UL,"qlcnic"); else 
                                                                    
#line 1758 
                                                                    snprintf((char *)(& sds_ring->name),28UL,"%s-tx-0-rx-%d",(char *)(& netdev->name),ring);
                      else 
#line 1763 
                           snprintf((char *)(& sds_ring->name),28UL,"%s-rx-%d",(char *)(& netdev->name),ring);
                    else 
#line 1763 
                         snprintf((char *)(& sds_ring->name),28UL,"%s-rx-%d",(char *)(& netdev->name),ring);
                  }
                  else 
#line 1763 
                       snprintf((char *)(& sds_ring->name),28UL,"%s-rx-%d",(char *)(& netdev->name),ring);
                  
#line 1768 
                  err = ldv_request_irq_75((unsigned int)sds_ring->irq,handler,flags,(char const *)(& sds_ring->name),(void *)sds_ring);
                  
#line 1770 
                  if (err != 0) {
                    
#line 1771 
                    __retres = err;
                    
#line 1771 
                    goto return_label;
                  }
                  else ;
                  
#line 1747 
                  ring += 1;
                  ldv_57166: 
#line 1748 
                  ;
                  
#line 1747 
                  if (ring < num_sds_rings) 
#line 1749 
                                            goto ldv_57165; else 
#line 1752 
                                                                 goto ldv_57167;
                  ldv_57167: 
#line 1753 
                  ;
                }
        }
        else ;
      }
      else ;
    }
    
#line 1774 
    tmp_6 = qlcnic_82xx_check(adapter);
    
#line 1774 
    if ((int)tmp_6 != 0) {
      bool tmp_7;
      
#line 1774 
      tmp_7 = qlcnic_check_multi_tx(adapter);
      
#line 1774 
      if ((int)tmp_7 != 0) 
#line 1774 
                           goto _LOR_0; else 
#line 1774 
                                             goto _LAND;
    }
    else {
      bool tmp_8;
      _LAND: 
#line 1775 
      tmp_8 = qlcnic_83xx_check(adapter);
      
#line 1775 
      if ((int)tmp_8 != 0) {
        
#line 1776 
        if ((adapter->flags & 4U) != 0U) {
          
#line 1777 
          if ((adapter->flags & 65536U) == 0U) {
            _LOR_0: {
                      
#line 1779 
                      handler = & qlcnic_msix_tx_intr;
                      
#line 1780 
                      ring = 0;
                      
#line 1780 
                      goto ldv_57169;
                      ldv_57168: 
#line 1781 
                      ;
                      
#line 1782 
                      tx_ring = adapter->tx_ring + ring;
                      
#line 1783 
                      snprintf((char *)(& tx_ring->name),28UL,"%s-tx-%d",(char *)(& netdev->name),ring);
                      
#line 1785 
                      err = ldv_request_irq_76((unsigned int)tx_ring->irq,handler,flags,(char const *)(& tx_ring->name),(void *)tx_ring);
                      
#line 1787 
                      if (err != 0) {
                        
#line 1788 
                        __retres = err;
                        
#line 1788 
                        goto return_label;
                      }
                      else ;
                      
#line 1781 
                      ring += 1;
                      ldv_57169: 
#line 1782 
                      ;
                      
#line 1780 
                      if ((int)adapter->drv_tx_rings > ring) 
#line 1782 
                                                             goto ldv_57168; else 
                                                                    
#line 1785 
                                                                    goto ldv_57170;
                      ldv_57170: 
#line 1786 
                      ;
                    }
          }
          else ;
        }
        else ;
      }
      else ;
    }
  }
  else ;
  
#line 1792 
  __retres = 0;
  return_label: 
#line 1792 
                return __retres;
}


#line 1796  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_free_irq(struct qlcnic_adapter *adapter)
{
  int ring;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_tx_ring *tx_ring;
  
#line 1802 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 1804 
  if ((unsigned int)(adapter->ahw)->diag_test != 2U) {
    bool tmp;
    bool tmp_1;
    
#line 1805 
    tmp = qlcnic_82xx_check(adapter);
    
#line 1805 
    if ((int)tmp != 0) 
#line 1805 
                       goto _LOR;
    else {
      bool tmp_0;
      
#line 1805 
      tmp_0 = qlcnic_83xx_check(adapter);
      
#line 1805 
      if ((int)tmp_0 != 0) {
        
#line 1806 
        if ((adapter->flags & 4U) != 0U) {
          _LOR: {
                  
#line 1808 
                  ring = 0;
                  
#line 1808 
                  goto ldv_57179;
                  ldv_57178: 
#line 1809 
                  ;
                  
#line 1809 
                  sds_ring = recv_ctx->sds_rings + ring;
                  
#line 1810 
                  ldv_free_irq_77((unsigned int)sds_ring->irq,(void *)sds_ring);
                  
#line 1808 
                  ring += 1;
                  ldv_57179: 
#line 1809 
                  ;
                  
#line 1808 
                  if ((int)adapter->drv_sds_rings > ring) 
#line 1810 
                                                          goto ldv_57178; else 
                                                                    
#line 1813 
                                                                    goto ldv_57180;
                  ldv_57180: 
#line 1814 
                  ;
                }
        }
        else ;
      }
      else ;
    }
    
#line 1813 
    tmp_1 = qlcnic_83xx_check(adapter);
    
#line 1813 
    if ((int)tmp_1 != 0) {
      
#line 1813 
      if ((adapter->flags & 65536U) == 0U) 
#line 1813 
                                           goto _LOR_0; else 
#line 1813 
                                                             goto _LAND;
    }
    else {
      bool tmp_2;
      _LAND: 
#line 1814 
      tmp_2 = qlcnic_82xx_check(adapter);
      
#line 1814 
      if ((int)tmp_2 != 0) {
        bool tmp_3;
        
#line 1815 
        tmp_3 = qlcnic_check_multi_tx(adapter);
        
#line 1815 
        if ((int)tmp_3 != 0) {
          _LOR_0: {
                    
#line 1817 
                    ring = 0;
                    
#line 1817 
                    goto ldv_57182;
                    ldv_57181: 
#line 1818 
                    ;
                    
#line 1819 
                    tx_ring = adapter->tx_ring + ring;
                    
#line 1820 
                    if (tx_ring->irq != 0) 
#line 1821 
                                           ldv_free_irq_78((unsigned int)tx_ring->irq,(void *)tx_ring); else ;
                    
#line 1818 
                    ring += 1;
                    ldv_57182: 
#line 1819 
                    ;
                    
#line 1817 
                    if ((int)adapter->drv_tx_rings > ring) 
#line 1819 
                                                           goto ldv_57181; else 
                                                                    
#line 1822 
                                                                    goto ldv_57183;
                    ldv_57183: 
#line 1823 
                    ;
                  }
        }
        else ;
      }
      else ;
    }
  }
  else ;
  
#line 1826 
  return;
}


#line 1827  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_get_lro_mss_capability(struct qlcnic_adapter *adapter)
{
  bool tmp;
  
#line 1829 
  u32 capab = 0U;
  
#line 1831 
  tmp = qlcnic_82xx_check(adapter);
  
#line 1831 
  if ((int)tmp != 0) {
    
#line 1832 
    if (((adapter->ahw)->extra_capability[0] & 4U) != 0U) 
#line 1834 
                                                          adapter->flags |= 32768U; else ;
  }
  else {
    
#line 1836 
    capab = (adapter->ahw)->capabilities;
    
#line 1837 
    if ((capab & 131072U) != 0U) 
#line 1838 
                                 adapter->flags |= 32768U; else ;
  }
  
#line 1840 
  return;
}


#line 1842  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_config_def_intr_coalesce(struct qlcnic_adapter *adapter)
{
  int err;
  bool tmp;
  
#line 1844 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1848 
  ahw->coal.flag = (unsigned short)4U;
  
#line 1850 
  tmp = qlcnic_83xx_check(adapter);
  
#line 1850 
  if ((int)tmp != 0) {
    
#line 1851 
    ahw->coal.type = (unsigned char)3U;
    
#line 1852 
    ahw->coal.tx_time_us = (unsigned short)64U;
    
#line 1853 
    ahw->coal.tx_packets = (unsigned short)64U;
    
#line 1854 
    ahw->coal.rx_time_us = (unsigned short)3U;
    
#line 1855 
    ahw->coal.rx_packets = (unsigned short)256U;
    
#line 1857 
    err = qlcnic_83xx_set_rx_tx_intr_coal(adapter);
  }
  else {
    
#line 1859 
    ahw->coal.type = (unsigned char)1U;
    
#line 1860 
    ahw->coal.rx_time_us = (unsigned short)3U;
    
#line 1861 
    ahw->coal.rx_packets = (unsigned short)256U;
    
#line 1863 
    err = qlcnic_82xx_set_rx_coalesce(adapter);
  }
  
#line 1866 
  return err;
}


#line 1869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int __qlcnic_up(struct qlcnic_adapter *adapter, struct net_device *netdev)
{
  int __retres;
  int ring;
  struct qlcnic_host_rds_ring *rds_ring;
  int tmp;
  int tmp_0;
  int tmp_1;
  
#line 1874 
  if ((unsigned int)adapter->is_up != 777U) {
    
#line 1875 
    __retres = -5;
    
#line 1875 
    goto return_label;
  }
  else ;
  
#line 1877 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
  
#line 1877 
  if (tmp != 0) {
    
#line 1878 
    __retres = 0;
    
#line 1878 
    goto return_label;
  }
  else ;
  
#line 1880 
  tmp_0 = qlcnic_set_eswitch_port_config(adapter);
  
#line 1880 
  if (tmp_0 != 0) {
    
#line 1881 
    __retres = -5;
    
#line 1881 
    goto return_label;
  }
  else ;
  
#line 1883 
  qlcnic_get_lro_mss_capability(adapter);
  
#line 1885 
  tmp_1 = qlcnic_fw_create_ctx(adapter);
  
#line 1885 
  if (tmp_1 != 0) {
    
#line 1886 
    __retres = -5;
    
#line 1886 
    goto return_label;
  }
  else ;
  
#line 1888 
  ring = 0;
  
#line 1888 
  goto ldv_57200;
  ldv_57199: 
#line 1889 
  ;
  
#line 1889 
  rds_ring = (adapter->recv_ctx)->rds_rings + ring;
  
#line 1890 
  qlcnic_post_rx_buffers(adapter,rds_ring,(unsigned char)((int)((unsigned char)ring)));
  
#line 1888 
  ring += 1;
  ldv_57200: 
#line 1889 
  ;
  
#line 1888 
  if ((int)adapter->max_rds_rings > ring) 
#line 1890 
                                          goto ldv_57199; else 
#line 1893 
                                                               goto ldv_57201;
  ldv_57201: 
#line 1894 
  ;
  
#line 1893 
  qlcnic_set_multi(netdev);
  
#line 1894 
  qlcnic_fw_cmd_set_mtu(adapter,(int)netdev->mtu);
  
#line 1896 
  (adapter->ahw)->linkup = (unsigned char)0U;
  
#line 1898 
  if ((unsigned int)adapter->drv_sds_rings > 1U) 
#line 1899 
                                                 qlcnic_config_rss(adapter,1); else ;
  
#line 1901 
  qlcnic_config_def_intr_coalesce(adapter);
  
#line 1903 
  if ((netdev->features & 32768ULL) != 0ULL) 
#line 1904 
                                             qlcnic_config_hw_lro(adapter,1); else ;
  
#line 1906 
  set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 1907 
  qlcnic_napi_enable(adapter);
  
#line 1909 
  qlcnic_linkevent_request(adapter,1);
  
#line 1911 
  (adapter->ahw)->reset_context = (unsigned char)0U;
  
#line 1912 
  netif_tx_start_all_queues(netdev);
  
#line 1913 
  __retres = 0;
  return_label: 
#line 1913 
                return __retres;
}


#line 1916  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_up(struct qlcnic_adapter *adapter, struct net_device *netdev)
{
  bool tmp;
  
#line 1918 
  int err = 0;
  
#line 1920 
  rtnl_lock();
  
#line 1921 
  tmp = netif_running((struct net_device const *)netdev);
  
#line 1921 
  if ((int)tmp != 0) 
#line 1922 
                     err = __qlcnic_up(adapter,netdev); else ;
  
#line 1923 
  rtnl_unlock();
  
#line 1925 
  return err;
}


#line 1928  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void __qlcnic_down(struct qlcnic_adapter *adapter, struct net_device *netdev)
{
  int ring;
  int tmp;
  bool tmp_0;
  
#line 1932 
  if ((unsigned int)adapter->is_up != 777U) 
#line 1933 
                                            goto return_label; else ;
  
#line 1935 
  tmp = test_and_set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 1935 
  if (tmp == 0) 
#line 1936 
                goto return_label; else ;
  
#line 1937 
  ldv_inline_asm();
  
#line 1939 
  netif_carrier_off(netdev);
  
#line 1940 
  (adapter->ahw)->linkup = (unsigned char)0U;
  
#line 1941 
  netif_tx_disable(netdev);
  
#line 1943 
  qlcnic_free_mac_list(adapter);
  
#line 1945 
  if ((unsigned int)adapter->fhash.fnum != 0U) 
#line 1946 
                                               qlcnic_delete_lb_filters(adapter); else ;
  
#line 1948 
  qlcnic_nic_set_promisc(adapter,0U);
  
#line 1949 
  tmp_0 = qlcnic_sriov_vf_check(adapter);
  
#line 1949 
  if ((int)tmp_0 != 0) 
#line 1950 
                       qlcnic_sriov_cleanup_async_list(& ((adapter->ahw)->sriov)->bc); else ;
  
#line 1952 
  qlcnic_napi_disable(adapter);
  
#line 1954 
  qlcnic_fw_destroy_ctx(adapter);
  
#line 1955 
  adapter->flags &= 4294934527U;
  
#line 1957 
  qlcnic_reset_rx_buffers_list(adapter);
  
#line 1959 
  ring = 0;
  
#line 1959 
  goto ldv_57213;
  ldv_57212: 
#line 1960 
  ;
  
#line 1960 
  qlcnic_release_tx_buffers(adapter,adapter->tx_ring + ring);
  
#line 1959 
  ring += 1;
  ldv_57213: 
#line 1960 
  ;
  
#line 1959 
  if ((int)adapter->drv_tx_rings > ring) 
#line 1961 
                                         goto ldv_57212; else 
#line 1964 
                                                              goto ldv_57214;
  ldv_57214: 
#line 1965 
  ;
  return_label: 
#line 1966 
                return;
}


#line 1965  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_down(struct qlcnic_adapter *adapter, struct net_device *netdev)
{
  bool tmp;
  
#line 1967 
  rtnl_lock();
  
#line 1968 
  tmp = netif_running((struct net_device const *)netdev);
  
#line 1968 
  if ((int)tmp != 0) 
#line 1969 
                     __qlcnic_down(adapter,netdev); else ;
  
#line 1970 
  rtnl_unlock();
  
#line 1971 
  return;
}


#line 1975  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_attach(struct qlcnic_adapter *adapter)
{
  int __retres;
  int err;
  bool tmp;
  
#line 1977 
  struct net_device *netdev = adapter->netdev;
  
#line 1978 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1981 
  if ((unsigned int)adapter->is_up == 777U) {
    
#line 1982 
    __retres = 0;
    
#line 1982 
    goto return_label;
  }
  else ;
  
#line 1984 
  err = qlcnic_napi_add(adapter,netdev);
  
#line 1985 
  if (err != 0) {
    
#line 1986 
    __retres = err;
    
#line 1986 
    goto return_label;
  }
  else ;
  
#line 1988 
  err = qlcnic_alloc_sw_resources(adapter);
  
#line 1989 
  if (err != 0) {
    
#line 1990 
    dev_err((struct device const *)(& pdev->dev),"Error in setting sw resources\n");
    
#line 1991 
    goto err_out_napi_del;
  }
  else ;
  
#line 1994 
  err = qlcnic_alloc_hw_resources(adapter);
  
#line 1995 
  if (err != 0) {
    
#line 1996 
    dev_err((struct device const *)(& pdev->dev),"Error in setting hw resources\n");
    
#line 1997 
    goto err_out_free_sw;
  }
  else ;
  
#line 2000 
  err = qlcnic_request_irq(adapter);
  
#line 2001 
  if (err != 0) {
    
#line 2002 
    dev_err((struct device const *)(& pdev->dev),"failed to setup interrupt\n");
    
#line 2003 
    goto err_out_free_hw;
  }
  else ;
  
#line 2006 
  qlcnic_create_sysfs_entries(adapter);
  
#line 2009 
  tmp = qlcnic_encap_rx_offload(adapter);
  
#line 2009 
  if ((int)tmp != 0) 
#line 2010 
                     vxlan_get_rx_port(netdev); else ;
  
#line 2013 
  adapter->is_up = (unsigned short)777U;
  
#line 2014 
  __retres = 0;
  
#line 2014 
  goto return_label;
  err_out_free_hw: 
#line 2016 
  ;
  
#line 2017 
  qlcnic_free_hw_resources(adapter);
  err_out_free_sw: 
#line 2018 
  ;
  
#line 2019 
  qlcnic_free_sw_resources(adapter);
  err_out_napi_del: 
#line 2020 
  ;
  
#line 2021 
  qlcnic_napi_del(adapter);
  
#line 2022 
  __retres = err;
  return_label: 
#line 2022 
                return __retres;
}


#line 2025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_detach(struct qlcnic_adapter *adapter)
{
  
#line 2027 
  if ((unsigned int)adapter->is_up != 777U) 
#line 2028 
                                            goto return_label; else ;
  
#line 2030 
  qlcnic_remove_sysfs_entries(adapter);
  
#line 2032 
  qlcnic_free_hw_resources(adapter);
  
#line 2033 
  qlcnic_release_rx_buffers(adapter);
  
#line 2034 
  qlcnic_free_irq(adapter);
  
#line 2035 
  qlcnic_napi_del(adapter);
  
#line 2036 
  qlcnic_free_sw_resources(adapter);
  
#line 2038 
  adapter->is_up = (unsigned short)0U;
  return_label: 
#line 2039 
                return;
}


#line 2041  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_diag_free_res(struct net_device *netdev, int drv_sds_rings)
{
  struct qlcnic_host_sds_ring *sds_ring;
  int ring;
  int tmp_0;
  bool tmp_1;
  
#line 2043 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2045 
  int drv_tx_rings = (int)adapter->drv_tx_rings;
  
#line 2048 
  set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 2049 
  if ((unsigned int)(adapter->ahw)->diag_test == 1U) {
    
#line 2050 
    ring = 0;
    
#line 2050 
    goto ldv_57240;
    ldv_57239: 
#line 2051 
    ;
    
#line 2051 
    sds_ring = (adapter->recv_ctx)->sds_rings + ring;
    
#line 2052 
    qlcnic_disable_sds_intr(adapter,sds_ring);
    
#line 2050 
    ring += 1;
    ldv_57240: 
#line 2051 
    ;
    
#line 2050 
    if ((int)adapter->drv_sds_rings > ring) 
#line 2052 
                                            goto ldv_57239; else 
#line 2055 
                                                                 goto ldv_57241;
    ldv_57241: 
#line 2056 
    ;
  }
  else ;
  
#line 2056 
  qlcnic_fw_destroy_ctx(adapter);
  
#line 2058 
  qlcnic_detach(adapter);
  
#line 2060 
  (adapter->ahw)->diag_test = (unsigned char)0U;
  
#line 2061 
  adapter->drv_sds_rings = (unsigned char)drv_sds_rings;
  
#line 2062 
  adapter->drv_tx_rings = (unsigned char)drv_tx_rings;
  
#line 2064 
  tmp_0 = qlcnic_attach(adapter);
  
#line 2064 
  if (tmp_0 != 0) 
#line 2065 
                  goto out; else ;
  
#line 2067 
  tmp_1 = netif_running((struct net_device const *)netdev);
  
#line 2067 
  if ((int)tmp_1 != 0) 
#line 2068 
                       __qlcnic_up(adapter,netdev); else ;
  out: 
#line 2069 
  ;
  
#line 2070 
  netif_device_attach(netdev);
  
#line 2071 
  return;
}


#line 2073  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_alloc_adapter_resources(struct qlcnic_adapter *adapter)
{
  bool tmp_0;
  
#line 2075 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 2076 
  int err = 0;
  
#line 2078 
  adapter->recv_ctx = (struct qlcnic_recv_context *)kzalloc_2(24UL,208U);
  
#line 2080 
  if (adapter->recv_ctx == (struct qlcnic_recv_context *)0) {
    
#line 2081 
    err = -12;
    
#line 2082 
    goto err_out;
  }
  else ;
  
#line 2085 
  tmp_0 = qlcnic_83xx_check(adapter);
  
#line 2085 
  if ((int)tmp_0 != 0) {
    
#line 2086 
    ahw->coal.type = (unsigned char)3U;
    
#line 2087 
    ahw->coal.tx_time_us = (unsigned short)64U;
    
#line 2088 
    ahw->coal.tx_packets = (unsigned short)64U;
    
#line 2089 
    ahw->coal.rx_time_us = (unsigned short)3U;
    
#line 2090 
    ahw->coal.rx_packets = (unsigned short)256U;
  }
  else {
    
#line 2092 
    ahw->coal.type = (unsigned char)1U;
    
#line 2093 
    ahw->coal.rx_time_us = (unsigned short)3U;
    
#line 2094 
    ahw->coal.rx_packets = (unsigned short)256U;
  }
  
#line 2098 
  memset((void *)(& adapter->stats),0,176UL);
  err_out: 
#line 2099 
  ;
  
#line 2100 
  return err;
}


#line 2103  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_free_adapter_resources(struct qlcnic_adapter *adapter)
{
  
#line 2105 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  
#line 2107 
  kfree((void const *)adapter->recv_ctx);
  
#line 2108 
  adapter->recv_ctx = (struct qlcnic_recv_context *)0;
  
#line 2110 
  if (fw_dump->tmpl_hdr != (void *)0) {
    
#line 2111 
    vfree((void const *)fw_dump->tmpl_hdr);
    
#line 2112 
    fw_dump->tmpl_hdr = (void *)0;
  }
  else ;
  
#line 2115 
  if (fw_dump->dma_buffer != (void *)0) {
    
#line 2116 
    dma_free_attrs(& (adapter->pdev)->dev,65536UL,fw_dump->dma_buffer,fw_dump->phys_addr,(struct dma_attrs *)0);
    
#line 2118 
    fw_dump->dma_buffer = (void *)0;
  }
  else ;
  
#line 2121 
  kfree((void const *)(adapter->ahw)->reset.buff);
  
#line 2122 
  (adapter->ahw)->fw_dump.tmpl_hdr = (void *)0;
  
#line 2123 
  return;
}


#line 2125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_diag_alloc_res(struct net_device *netdev, int test)
{
  int __retres;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_rds_ring *rds_ring;
  int ring;
  int ret;
  bool tmp_0;
  
#line 2127 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2133 
  netif_device_detach(netdev);
  
#line 2135 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 2135 
  if ((int)tmp_0 != 0) 
#line 2136 
                       __qlcnic_down(adapter,netdev); else ;
  
#line 2138 
  qlcnic_detach(adapter);
  
#line 2140 
  adapter->drv_sds_rings = (unsigned char)1U;
  
#line 2141 
  (adapter->ahw)->diag_test = (unsigned char)test;
  
#line 2142 
  (adapter->ahw)->linkup = (unsigned char)0U;
  
#line 2144 
  ret = qlcnic_attach(adapter);
  
#line 2145 
  if (ret != 0) {
    
#line 2146 
    netif_device_attach(netdev);
    
#line 2147 
    __retres = ret;
    
#line 2147 
    goto return_label;
  }
  else ;
  
#line 2150 
  ret = qlcnic_fw_create_ctx(adapter);
  
#line 2151 
  if (ret != 0) {
    
#line 2152 
    qlcnic_detach(adapter);
    
#line 2153 
    netif_device_attach(netdev);
    
#line 2154 
    __retres = ret;
    
#line 2154 
    goto return_label;
  }
  else ;
  
#line 2157 
  ring = 0;
  
#line 2157 
  goto ldv_57263;
  ldv_57262: 
#line 2158 
  ;
  
#line 2158 
  rds_ring = (adapter->recv_ctx)->rds_rings + ring;
  
#line 2159 
  qlcnic_post_rx_buffers(adapter,rds_ring,(unsigned char)((int)((unsigned char)ring)));
  
#line 2157 
  ring += 1;
  ldv_57263: 
#line 2158 
  ;
  
#line 2157 
  if ((int)adapter->max_rds_rings > ring) 
#line 2159 
                                          goto ldv_57262; else 
#line 2162 
                                                               goto ldv_57264;
  ldv_57264: 
#line 2163 
  ;
  
#line 2162 
  if ((unsigned int)(adapter->ahw)->diag_test == 1U) {
    
#line 2163 
    ring = 0;
    
#line 2163 
    goto ldv_57266;
    ldv_57265: 
#line 2164 
    ;
    
#line 2164 
    sds_ring = (adapter->recv_ctx)->sds_rings + ring;
    
#line 2165 
    qlcnic_enable_sds_intr(adapter,sds_ring);
    
#line 2163 
    ring += 1;
    ldv_57266: 
#line 2164 
    ;
    
#line 2163 
    if ((int)adapter->drv_sds_rings > ring) 
#line 2165 
                                            goto ldv_57265; else 
#line 2168 
                                                                 goto ldv_57267;
    ldv_57267: 
#line 2169 
    ;
  }
  else ;
  
#line 2169 
  if ((unsigned int)(adapter->ahw)->diag_test == 2U) {
    
#line 2170 
    (adapter->ahw)->loopback_state = (unsigned char)0U;
    
#line 2171 
    qlcnic_linkevent_request(adapter,1);
  }
  else ;
  
#line 2174 
  set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 2176 
  __retres = 0;
  return_label: 
#line 2176 
                return __retres;
}


#line 2181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_reset_hw_context(struct qlcnic_adapter *adapter)
{
  int __retres;
  int tmp;
  
#line 2183 
  struct net_device *netdev = adapter->netdev;
  
#line 2185 
  tmp = test_and_set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 2185 
  if (tmp != 0) {
    
#line 2186 
    __retres = -16;
    
#line 2186 
    goto return_label;
  }
  else ;
  
#line 2188 
  netif_device_detach(netdev);
  
#line 2190 
  qlcnic_down(adapter,netdev);
  
#line 2192 
  qlcnic_up(adapter,netdev);
  
#line 2194 
  netif_device_attach(netdev);
  
#line 2196 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 2197 
  netdev_info((struct net_device const *)adapter->netdev,"%s: soft reset complete\n","qlcnic_reset_hw_context");
  
#line 2198 
  __retres = 0;
  return_label: 
#line 2198 
                return __retres;
}


#line 2202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_reset_context(struct qlcnic_adapter *adapter)
{
  int __retres;
  int tmp;
  
#line 2204 
  int err = 0;
  
#line 2205 
  struct net_device *netdev = adapter->netdev;
  
#line 2207 
  tmp = test_and_set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 2207 
  if (tmp != 0) {
    
#line 2208 
    __retres = -16;
    
#line 2208 
    goto return_label;
  }
  else ;
  
#line 2210 
  if ((unsigned int)adapter->is_up == 777U) {
    bool tmp_0;
    bool tmp_1;
    
#line 2212 
    netif_device_detach(netdev);
    
#line 2214 
    tmp_0 = netif_running((struct net_device const *)netdev);
    
#line 2214 
    if ((int)tmp_0 != 0) 
#line 2215 
                         __qlcnic_down(adapter,netdev); else ;
    
#line 2217 
    qlcnic_detach(adapter);
    
#line 2219 
    tmp_1 = netif_running((struct net_device const *)netdev);
    
#line 2219 
    if ((int)tmp_1 != 0) {
      
#line 2220 
      err = qlcnic_attach(adapter);
      
#line 2221 
      if (err == 0) {
        
#line 2222 
        __qlcnic_up(adapter,netdev);
        
#line 2223 
        qlcnic_restore_indev_addr(netdev,1UL);
      }
      else ;
    }
    else ;
    
#line 2227 
    netif_device_attach(netdev);
  }
  else ;
  
#line 2230 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 2231 
  __retres = err;
  return_label: 
#line 2231 
                return __retres;
}


#line 2234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_82xx_set_mac_filter_count(struct qlcnic_adapter *adapter)
{
  u16 count;
  
#line 2236 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 2237 
  u16 act_pci_fn = ahw->total_nic_func;
  
#line 2240 
  ahw->max_mc_count = (unsigned char)38U;
  
#line 2241 
  if ((unsigned int)act_pci_fn <= 2U) 
#line 2242 
                                      count = (unsigned short)(474 / (int)act_pci_fn); else 
                                                                    
#line 2245 
                                                                    count = (unsigned short)(26 / (int)act_pci_fn);
  
#line 2247 
  ahw->max_uc_count = count;
  
#line 2248 
  return;
}


#line 2250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_set_real_num_queues(struct qlcnic_adapter *adapter, u8 tx_queues, u8 rx_queues)
{
  int __retres;
  
#line 2253 
  struct net_device *netdev = adapter->netdev;
  
#line 2254 
  int err = 0;
  
#line 2256 
  if ((unsigned int)tx_queues != 0U) {
    
#line 2257 
    err = netif_set_real_num_tx_queues(netdev,(unsigned int)tx_queues);
    
#line 2258 
    if (err != 0) {
      
#line 2259 
      netdev_err((struct net_device const *)netdev,"failed to set %d Tx queues\n",(int)tx_queues);
      
#line 2261 
      __retres = err;
      
#line 2261 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2265 
  if ((unsigned int)rx_queues != 0U) {
    
#line 2266 
    err = netif_set_real_num_rx_queues(netdev,(unsigned int)rx_queues);
    
#line 2267 
    if (err != 0) 
#line 2268 
                  netdev_err((struct net_device const *)netdev,"failed to set %d Rx queues\n",(int)rx_queues); else ;
  }
  else ;
  
#line 2272 
  __retres = err;
  return_label: 
#line 2272 
                return __retres;
}


#line 2276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_setup_netdev(struct qlcnic_adapter *adapter, struct net_device *netdev, int pci_using_dac)
{
  int __retres;
  int err;
  bool tmp;
  u32 tmp_0;
  bool tmp_1;
  bool tmp_2;
  bool tmp_3;
  
#line 2280 
  struct pci_dev *pdev = adapter->pdev;
  
#line 2282 
  adapter->rx_csum = (unsigned char)1U;
  
#line 2283 
  (adapter->ahw)->mc_enabled = (unsigned char)0U;
  
#line 2284 
  qlcnic_set_mac_filter_count(adapter);
  
#line 2286 
  netdev->netdev_ops = & qlcnic_netdev_ops;
  
#line 2287 
  netdev->watchdog_timeo = 1250;
  
#line 2289 
  qlcnic_change_mtu(netdev,(int)netdev->mtu);
  
#line 2291 
  tmp = qlcnic_sriov_vf_check(adapter);
  
#line 2291 
  if ((int)tmp != 0) 
#line 2291 
                     netdev->ethtool_ops = & qlcnic_sriov_vf_ethtool_ops; else 
                                                                    
#line 2291 
                                                                    netdev->ethtool_ops = & qlcnic_ethtool_ops;
  
#line 2294 
  netdev->features |= 17179885843ULL;
  
#line 2297 
  netdev->vlan_features |= 19ULL;
  
#line 2300 
  if (((adapter->ahw)->capabilities & 2U) != 0U) {
    
#line 2301 
    netdev->features |= 1114112ULL;
    
#line 2302 
    netdev->vlan_features |= 1114112ULL;
  }
  else ;
  
#line 2305 
  if (pci_using_dac != 0) {
    
#line 2306 
    netdev->features |= 32ULL;
    
#line 2307 
    netdev->vlan_features |= 32ULL;
  }
  else ;
  
#line 2310 
  tmp_0 = qlcnic_vlan_tx_check(adapter);
  
#line 2310 
  if (tmp_0 != 0U) 
#line 2311 
                   netdev->features |= 128ULL; else ;
  
#line 2313 
  tmp_1 = qlcnic_sriov_vf_check(adapter);
  
#line 2313 
  if ((int)tmp_1 != 0) 
#line 2314 
                       netdev->features |= 512ULL; else ;
  
#line 2316 
  if (((adapter->ahw)->capabilities & 1024U) != 0U) 
#line 2317 
                                                    netdev->features |= 32768ULL; else ;
  
#line 2319 
  tmp_2 = qlcnic_encap_tx_offload(adapter);
  
#line 2319 
  if ((int)tmp_2 != 0) {
    
#line 2320 
    netdev->features |= 67108864ULL;
    
#line 2323 
    netdev->hw_enc_features = 68222978ULL;
  }
  else ;
  
#line 2329 
  tmp_3 = qlcnic_encap_rx_offload(adapter);
  
#line 2329 
  if ((int)tmp_3 != 0) 
#line 2330 
                       netdev->hw_enc_features |= 17179869184ULL; else ;
  
#line 2332 
  netdev->hw_features = netdev->features;
  
#line 2333 
  netdev->priv_flags |= 131072U;
  
#line 2334 
  netdev->irq = (int)(adapter->msix_entries)->vector;
  
#line 2336 
  err = qlcnic_set_real_num_queues(adapter,(unsigned char)((int)adapter->drv_tx_rings),(unsigned char)((int)adapter->drv_sds_rings));
  
#line 2338 
  if (err != 0) {
    
#line 2339 
    __retres = err;
    
#line 2339 
    goto return_label;
  }
  else ;
  
#line 2341 
  qlcnic_dcb_init_dcbnl_ops(adapter->dcb);
  
#line 2343 
  err = ldv_register_netdev_79(netdev);
  
#line 2344 
  if (err != 0) {
    
#line 2345 
    dev_err((struct device const *)(& pdev->dev),"failed to register net device\n");
    
#line 2346 
    __retres = err;
    
#line 2346 
    goto return_label;
  }
  else ;
  
#line 2349 
  __retres = 0;
  return_label: 
#line 2349 
                return __retres;
}


#line 2352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_set_dma_mask(struct pci_dev *pdev, int *pci_using_dac)
{
  int __retres;
  int tmp_1;
  
#line 2354 
  tmp_1 = pci_set_dma_mask(pdev,18446744073709551615ULL);
  
#line 2354 
  if (tmp_1 == 0) {
    int tmp_2;
    
#line 2354 
    tmp_2 = pci_set_consistent_dma_mask(pdev,18446744073709551615ULL);
    
#line 2354 
    if (tmp_2 == 0) 
#line 2356 
                    *pci_using_dac = 1; else 
#line 2354 
                                             goto _LAND_0;
  }
  else {
    int tmp;
    _LAND_0: 
#line 2357 
    tmp = pci_set_dma_mask(pdev,4294967295ULL);
    
#line 2357 
    if (tmp == 0) {
      int tmp_0;
      
#line 2357 
      tmp_0 = pci_set_consistent_dma_mask(pdev,4294967295ULL);
      
#line 2357 
      if (tmp_0 == 0) 
#line 2359 
                      *pci_using_dac = 0; else 
#line 2357 
                                               goto _LAND;
    }
    else {
      _LAND: {
               
#line 2361 
               dev_err((struct device const *)(& pdev->dev),"Unable to set DMA mask, aborting\n");
               
#line 2362 
               __retres = -5;
               
#line 2362 
               goto return_label;
             }
    }
  }
  
#line 2365 
  __retres = 0;
  return_label: 
#line 2365 
                return __retres;
}


#line 2368  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_free_tx_rings(struct qlcnic_adapter *adapter)
{
  int ring;
  struct qlcnic_host_tx_ring *tx_ring;
  
#line 2373 
  ring = 0;
  
#line 2373 
  goto ldv_57308;
  ldv_57307: 
#line 2374 
  ;
  
#line 2374 
  tx_ring = adapter->tx_ring + ring;
  
#line 2375 
  if (tx_ring != (struct qlcnic_host_tx_ring *)0) {
    
#line 2376 
    vfree((void const *)tx_ring->cmd_buf_arr);
    
#line 2377 
    tx_ring->cmd_buf_arr = (struct qlcnic_cmd_buffer *)0;
  }
  else ;
  
#line 2373 
  ring += 1;
  ldv_57308: 
#line 2374 
  ;
  
#line 2373 
  if ((int)adapter->drv_tx_rings > ring) 
#line 2375 
                                         goto ldv_57307; else 
#line 2378 
                                                              goto ldv_57309;
  ldv_57309: 
#line 2379 
  ;
  
#line 2380 
  kfree((void const *)adapter->tx_ring);
  
#line 2381 
  return;
}


#line 2383  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_alloc_tx_rings(struct qlcnic_adapter *adapter, struct net_device *netdev)
{
  int __retres;
  int ring;
  int vector;
  int index;
  struct qlcnic_host_tx_ring *tx_ring;
  struct qlcnic_cmd_buffer *cmd_buf_arr;
  bool tmp_1;
  
#line 2390 
  tx_ring = (struct qlcnic_host_tx_ring *)kcalloc((unsigned long)adapter->drv_tx_rings,4096UL,208U);
  
#line 2392 
  if (tx_ring == (struct qlcnic_host_tx_ring *)0) {
    
#line 2393 
    __retres = -12;
    
#line 2393 
    goto return_label;
  }
  else ;
  
#line 2395 
  adapter->tx_ring = tx_ring;
  
#line 2397 
  ring = 0;
  
#line 2397 
  goto ldv_57321;
  ldv_57320: 
#line 2398 
  ;
  
#line 2398 
  tx_ring = adapter->tx_ring + ring;
  
#line 2399 
  tx_ring->num_desc = (unsigned int)adapter->num_txd;
  
#line 2400 
  tx_ring->txq = netdev_get_tx_queue((struct net_device const *)netdev,(unsigned int)ring);
  
#line 2401 
  cmd_buf_arr = (struct qlcnic_cmd_buffer *)vzalloc((unsigned long)tx_ring->num_desc * 304UL);
  
#line 2402 
  if (cmd_buf_arr == (struct qlcnic_cmd_buffer *)0) {
    
#line 2403 
    qlcnic_free_tx_rings(adapter);
    
#line 2404 
    __retres = -12;
    
#line 2404 
    goto return_label;
  }
  else ;
  
#line 2406 
  memset((void *)cmd_buf_arr,0,(unsigned long)tx_ring->num_desc * 304UL);
  
#line 2407 
  tx_ring->cmd_buf_arr = cmd_buf_arr;
  
#line 2408 
  spinlock_check(& tx_ring->tx_clean_lock);
  {
    struct lock_class_key __key;
    
#line 2408 
    __raw_spin_lock_init(& tx_ring->tx_clean_lock.__anonCompField_spinlock_18.rlock,"&(&tx_ring->tx_clean_lock)->rlock",& __key);
  }
  
#line 2397 
  ring += 1;
  ldv_57321: 
#line 2398 
  ;
  
#line 2397 
  if ((int)adapter->drv_tx_rings > ring) 
#line 2399 
                                         goto ldv_57320; else 
#line 2402 
                                                              goto ldv_57322;
  ldv_57322: 
#line 2403 
  ;
  
#line 2411 
  tmp_1 = qlcnic_83xx_check(adapter);
  
#line 2411 
  if ((int)tmp_1 != 0) 
#line 2411 
                       goto _LOR;
  else {
    bool tmp_2;
    
#line 2411 
    tmp_2 = qlcnic_82xx_check(adapter);
    
#line 2411 
    if ((int)tmp_2 != 0) {
      bool tmp_3;
      
#line 2412 
      tmp_3 = qlcnic_check_multi_tx(adapter);
      
#line 2412 
      if ((int)tmp_3 != 0) {
        _LOR: {
                
#line 2413 
                ring = 0;
                
#line 2413 
                goto ldv_57324;
                ldv_57323: 
#line 2414 
                ;
                
#line 2414 
                tx_ring = adapter->tx_ring + ring;
                
#line 2415 
                tx_ring->adapter = adapter;
                
#line 2416 
                if ((adapter->flags & 4U) != 0U) {
                  
#line 2417 
                  index = (int)adapter->drv_sds_rings + ring;
                  
#line 2418 
                  vector = (int)(adapter->msix_entries + index)->vector;
                  
#line 2419 
                  tx_ring->irq = vector;
                }
                else ;
                
#line 2413 
                ring += 1;
                ldv_57324: 
#line 2414 
                ;
                
#line 2413 
                if ((int)adapter->drv_tx_rings > ring) 
#line 2415 
                                                       goto ldv_57323; else 
                                                                    
#line 2418 
                                                                    goto ldv_57325;
                ldv_57325: 
#line 2419 
                ;
              }
      }
      else ;
    }
    else ;
  }
  
#line 2424 
  __retres = 0;
  return_label: 
#line 2424 
                return __retres;
}


#line 2427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_set_drv_version(struct qlcnic_adapter *adapter)
{
  bool tmp_0;
  
#line 2429 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 2430 
  u32 fw_cmd = 0U;
  
#line 2432 
  tmp_0 = qlcnic_82xx_check(adapter);
  
#line 2432 
  if ((int)tmp_0 != 0) 
#line 2433 
                       fw_cmd = 56U;
  else {
    bool tmp;
    
#line 2434 
    tmp = qlcnic_83xx_check(adapter);
    
#line 2434 
    if ((int)tmp != 0) 
#line 2435 
                       fw_cmd = 111U; else ;
  }
  
#line 2437 
  if ((ahw->extra_capability[0] & 32U) != 0U) 
#line 2438 
                                              qlcnic_fw_cmd_set_drv_version(adapter,fw_cmd); else ;
  
#line 2439 
  return;
}


#line 2442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_reset_api_lock(struct qlcnic_adapter *adapter)
{
  
#line 2444 
  qlcnic_api_lock(adapter);
  
#line 2445 
  qlcnic_api_unlock(adapter);
  
#line 2446 
  return;
}


#line 2450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_probe(struct pci_dev *pdev, struct pci_device_id const *ent)
{
  int __retres;
  struct qlcnic_hardware_context *ahw;
  int err;
  char board_name[119U];
  struct workqueue_struct *tmp_2;
  bool tmp_6;
  int tmp_7;
  bool tmp_10;
  bool tmp_11;
  bool tmp_12;
  bool tmp_13;
  bool tmp_14;
  
#line 2452 
  struct net_device *netdev = (struct net_device *)0;
  
#line 2453 
  struct qlcnic_adapter *adapter = (struct qlcnic_adapter *)0;
  
#line 2455 
  int pci_using_dac = -1;
  
#line 2458 
  err = pci_enable_device(pdev);
  
#line 2459 
  if (err != 0) {
    
#line 2460 
    __retres = err;
    
#line 2460 
    goto return_label;
  }
  else ;
  
#line 2462 
  if ((pdev->resource[0].flags & 512UL) == 0UL) {
    
#line 2463 
    err = -19;
    
#line 2464 
    goto err_out_disable_pdev;
  }
  else ;
  
#line 2467 
  err = qlcnic_set_dma_mask(pdev,& pci_using_dac);
  
#line 2468 
  if (err != 0) 
#line 2469 
                goto err_out_disable_pdev; else ;
  
#line 2471 
  err = pci_request_regions(pdev,(char const *)(& qlcnic_driver_name));
  
#line 2472 
  if (err != 0) 
#line 2473 
                goto err_out_disable_pdev; else ;
  
#line 2475 
  pci_set_master(pdev);
  
#line 2476 
  pci_enable_pcie_error_reporting(pdev);
  
#line 2478 
  ahw = (struct qlcnic_hardware_context *)kzalloc_2(880UL,208U);
  
#line 2479 
  if (ahw == (struct qlcnic_hardware_context *)0) {
    
#line 2480 
    err = -12;
    
#line 2481 
    goto err_out_free_res;
  }
  else ;
  
#line 2484 
  switch (ent->device) {
    case (__u32)32800: 
#line 2485 
    ;
    
#line 2486 
    ahw->hw_ops = & qlcnic_hw_ops;
    
#line 2487 
    ahw->reg_tbl = (u32 *)(& qlcnic_reg_tbl);
    
#line 2488 
    goto ldv_57347;
    case (__u32)32816: 
#line 2489 
    ;
    case (__u32)34864: 
#line 2490 
    ;
    case (__u32)32832: 
#line 2491 
    ;
    
#line 2492 
    qlcnic_83xx_register_map(ahw);
    
#line 2493 
    goto ldv_57347;
    case (__u32)33840: 
#line 2494 
    ;
    case (__u32)33856: 
#line 2495 
    ;
    
#line 2496 
    qlcnic_sriov_vf_register_map(ahw);
    
#line 2497 
    goto ldv_57347;
    default: 
#line 2498 
    ;
    
#line 2499 
    goto err_out_free_hw_res;
  }
  ldv_57347: 
#line 2502 
  ;
  
#line 2502 
  err = qlcnic_setup_pci_map(pdev,ahw);
  
#line 2503 
  if (err != 0) 
#line 2504 
                goto err_out_free_hw_res; else ;
  
#line 2506 
  netdev = ldv_alloc_etherdev_mqs_80(1800,8U,8U);
  
#line 2508 
  if (netdev == (struct net_device *)0) {
    
#line 2509 
    err = -12;
    
#line 2510 
    goto err_out_iounmap;
  }
  else ;
  
#line 2513 
  netdev->dev.parent = & pdev->dev;
  
#line 2515 
  adapter = (struct qlcnic_adapter *)netdev_priv((struct net_device const *)netdev);
  
#line 2516 
  adapter->netdev = netdev;
  
#line 2517 
  adapter->pdev = pdev;
  
#line 2518 
  adapter->ahw = ahw;
  {
    struct lock_class_key __key;
    char const *__lock_name;
    
#line 2520 
    __lock_name = "\"%s\"";
    
#line 2520 
    tmp_2 = __alloc_workqueue_key("%s",131082U,1,& __key,__lock_name,(char *)"qlcnic");
  }
  
#line 2520 
  adapter->qlcnic_wq = tmp_2;
  
#line 2521 
  if (adapter->qlcnic_wq == (struct workqueue_struct *)0) {
    
#line 2522 
    err = -12;
    
#line 2523 
    dev_err((struct device const *)(& pdev->dev),"Failed to create workqueue\n");
    
#line 2524 
    goto err_out_free_netdev;
  }
  else ;
  
#line 2527 
  err = qlcnic_alloc_adapter_resources(adapter);
  
#line 2528 
  if (err != 0) 
#line 2529 
                goto err_out_free_wq; else ;
  
#line 2531 
  adapter->dev_rst_time = (unsigned long long)jiffies;
  
#line 2532 
  ahw->revision_id = pdev->revision;
  
#line 2533 
  ahw->max_vnic_func = qlcnic_get_vnic_func_count(adapter);
  
#line 2534 
  if (qlcnic_mac_learn == 2) 
#line 2535 
                             adapter->fdb_mac_learn = (_Bool)1;
  else 
    
#line 2536 
    if (qlcnic_mac_learn == 1) 
#line 2537 
                               adapter->drv_mac_learn = (_Bool)1; else ;
  {
    struct lock_class_key __key_0;
    
#line 2539 
    __rwlock_init(& (adapter->ahw)->crb_lock,"&adapter->ahw->crb_lock",& __key_0);
  }
  {
    struct lock_class_key __key_1;
    
#line 2540 
    __mutex_init(& (adapter->ahw)->mem_lock,"&adapter->ahw->mem_lock",& __key_1);
  }
  
#line 2542 
  INIT_LIST_HEAD(& adapter->mac_list);
  
#line 2544 
  qlcnic_register_dcb(adapter);
  
#line 2546 
  tmp_6 = qlcnic_82xx_check(adapter);
  
#line 2546 
  if ((int)tmp_6 != 0) {
    
#line 2547 
    qlcnic_check_vf(adapter,ent);
    
#line 2548 
    adapter->portnum = (adapter->ahw)->pci_func;
    
#line 2549 
    qlcnic_reset_api_lock(adapter);
    
#line 2550 
    err = qlcnic_start_firmware(adapter);
    
#line 2551 
    if (err != 0) {
      
#line 2552 
      dev_err((struct device const *)(& pdev->dev),"Loading fw failed.Please Reboot\n");
      
#line 2554 
      goto err_out_maintenance_mode;
    }
    else ;
    
#line 2558 
    if ((unsigned int)(adapter->ahw)->msix_supported != 0U) {
      int tmp_3;
      
#line 2559 
      tmp_3 = qlcnic_check_multi_tx_capability(adapter);
      
#line 2559 
      if (tmp_3 == 1) 
#line 2560 
                      qlcnic_set_tx_ring_count(adapter,(unsigned char)1); else 
                                                                    
#line 2563 
                                                                    qlcnic_set_tx_ring_count(adapter,(unsigned char)4);
      
#line 2565 
      qlcnic_set_sds_ring_count(adapter,(unsigned char)4);
    }
    else {
      
#line 2568 
      qlcnic_set_tx_ring_count(adapter,(unsigned char)1);
      
#line 2569 
      qlcnic_set_sds_ring_count(adapter,(unsigned char)1);
    }
    
#line 2572 
    err = qlcnic_setup_idc_param(adapter);
    
#line 2573 
    if (err != 0) 
#line 2574 
                  goto err_out_free_hw; else ;
    
#line 2576 
    adapter->flags |= 4096U;
  }
  else {
    bool tmp_5;
    
#line 2578 
    tmp_5 = qlcnic_83xx_check(adapter);
    
#line 2578 
    if ((int)tmp_5 != 0) {
      bool tmp_4;
      
#line 2579 
      qlcnic_83xx_check_vf(adapter,ent);
      
#line 2580 
      adapter->portnum = (adapter->ahw)->pci_func;
      
#line 2581 
      err = qlcnic_83xx_init(adapter,pci_using_dac);
      
#line 2582 
      if (err != 0) 
        
#line 2583 
        switch (err) {
          case -131: 
#line 2584 
          ;
          
#line 2585 
          dev_err((struct device const *)(& pdev->dev),"Adapter initialization failed due to a faulty hardware\n");
          
#line 2586 
          dev_err((struct device const *)(& pdev->dev),"Please replace the adapter with new one and return the faulty adapter for repair\n");
          
#line 2587 
          goto err_out_free_hw;
          case -12: 
#line 2588 
          ;
          
#line 2589 
          dev_err((struct device const *)(& pdev->dev),"Adapter initialization failed. Please reboot\n");
          
#line 2590 
          goto err_out_free_hw;
          case -95: 
#line 2591 
          ;
          
#line 2592 
          dev_err((struct device const *)(& pdev->dev),"Adapter initialization failed\n");
          
#line 2593 
          goto err_out_free_hw;
          default: 
#line 2594 
          ;
          
#line 2595 
          dev_err((struct device const *)(& pdev->dev),"Adapter initialization failed. Driver will load in maintenance mode to recover the adapter using the application\n");
          
#line 2596 
          goto err_out_maintenance_mode;
        }
      else ;
      
#line 2600 
      tmp_4 = qlcnic_sriov_vf_check(adapter);
      
#line 2600 
      if ((int)tmp_4 != 0) {
        
#line 2601 
        __retres = 0;
        
#line 2601 
        goto return_label;
      }
      else ;
    }
    else {
      
#line 2603 
      dev_err((struct device const *)(& pdev->dev),"%s: failed. Please Reboot\n","qlcnic_probe");
      
#line 2605 
      err = -19;
      
#line 2606 
      goto err_out_free_hw;
    }
  }
  
#line 2609 
  tmp_7 = qlcnic_read_mac_addr(adapter);
  
#line 2609 
  if (tmp_7 != 0) 
#line 2610 
                  dev_warn((struct device const *)(& pdev->dev),"failed to read mac addr\n"); else ;
  
#line 2612 
  qlcnic_read_phys_port_id(adapter);
  
#line 2614 
  if ((unsigned int)adapter->portnum == 0U) {
    char *tmp_9;
    
#line 2615 
    qlcnic_get_board_name(adapter,(char *)(& board_name));
    
#line 2617 
    ;
    {
      char *tmp_8;
      
#line 2617 
      struct module *__mod = & __this_module;
      
#line 2617 
      if (__mod != (struct module *)0) 
#line 2617 
                                       tmp_8 = (char *)(& __mod->name); else 
                                                                    
#line 2617 
                                                                    tmp_8 = (char *)"kernel";
      
#line 2617 
      tmp_9 = tmp_8;
    }
    
#line 2617 
    printk("\001",tmp_9,(char *)(& board_name),(int)(adapter->ahw)->revision_id);
  }
  else ;
  
#line 2622 
  tmp_10 = qlcnic_83xx_check(adapter);
  
#line 2622 
  if ((int)tmp_10 != 0) {
    
#line 2622 
    if (qlcnic_use_msi_x == 0) {
      
#line 2622 
      if (qlcnic_use_msi != 0) 
#line 2624 
                               dev_warn((struct device const *)(& pdev->dev),"Device does not support MSI interrupts\n"); else ;
    }
    else ;
  }
  else ;
  
#line 2627 
  tmp_11 = qlcnic_82xx_check(adapter);
  
#line 2627 
  if ((int)tmp_11 != 0) {
    
#line 2628 
    qlcnic_dcb_enable(adapter->dcb);
    
#line 2629 
    qlcnic_dcb_get_info(adapter->dcb);
    
#line 2630 
    err = qlcnic_setup_intr(adapter);
    
#line 2632 
    if (err != 0) {
      
#line 2633 
      dev_err((struct device const *)(& pdev->dev),"Failed to setup interrupt\n");
      
#line 2634 
      goto err_out_disable_msi;
    }
    else ;
  }
  else ;
  
#line 2638 
  err = qlcnic_get_act_pci_func(adapter);
  
#line 2639 
  if (err != 0) 
#line 2640 
                goto err_out_disable_mbx_intr; else ;
  
#line 2642 
  if ((unsigned int)adapter->portnum == 0U) 
#line 2643 
                                            qlcnic_set_drv_version(adapter); else ;
  
#line 2645 
  err = qlcnic_setup_netdev(adapter,netdev,pci_using_dac);
  
#line 2646 
  if (err != 0) 
#line 2647 
                goto err_out_disable_mbx_intr; else ;
  
#line 2649 
  pci_set_drvdata(pdev,(void *)adapter);
  
#line 2651 
  tmp_12 = qlcnic_82xx_check(adapter);
  
#line 2651 
  if ((int)tmp_12 != 0) 
#line 2652 
                        qlcnic_schedule_work(adapter,& qlcnic_fw_poll_work,250); else ;
  
#line 2655 
  switch ((int)(adapter->ahw)->port_type) {
    case 1: 
#line 2656 
    ;
    
#line 2657 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: GbE port initialized\n",(char *)(& (adapter->netdev)->name));
    
#line 2659 
    goto ldv_57375;
    case 2: 
#line 2660 
    ;
    
#line 2661 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: XGbE port initialized\n",(char *)(& (adapter->netdev)->name));
    
#line 2663 
    goto ldv_57375;
  }
  ldv_57375: 
#line 2666 
  ;
  
#line 2666 
  if ((int)adapter->drv_mac_learn != 0) 
#line 2667 
                                        qlcnic_alloc_lb_filters_mem(adapter); else ;
  
#line 2669 
  qlcnic_add_sysfs(adapter);
  
#line 2670 
  qlcnic_register_hwmon_dev(adapter);
  
#line 2671 
  __retres = 0;
  
#line 2671 
  goto return_label;
  err_out_disable_mbx_intr: 
#line 2673 
  ;
  
#line 2674 
  tmp_13 = qlcnic_83xx_check(adapter);
  
#line 2674 
  if ((int)tmp_13 != 0) 
#line 2675 
                        qlcnic_83xx_free_mbx_intr(adapter); else ;
  err_out_disable_msi: 
#line 2677 
  ;
  
#line 2678 
  qlcnic_teardown_intr(adapter);
  
#line 2679 
  qlcnic_cancel_idc_work(adapter);
  
#line 2680 
  qlcnic_clr_all_drv_state(adapter,(unsigned char)0);
  err_out_free_hw: 
#line 2682 
  ;
  
#line 2683 
  qlcnic_free_adapter_resources(adapter);
  err_out_free_wq: 
#line 2685 
  ;
  
#line 2686 
  destroy_workqueue(adapter->qlcnic_wq);
  err_out_free_netdev: 
#line 2688 
  ;
  
#line 2689 
  ldv_free_netdev_81(netdev);
  err_out_iounmap: 
#line 2691 
  ;
  
#line 2692 
  qlcnic_cleanup_pci_map(ahw);
  err_out_free_hw_res: 
#line 2694 
  ;
  
#line 2695 
  kfree((void const *)ahw);
  err_out_free_res: 
#line 2697 
  ;
  
#line 2698 
  pci_release_regions(pdev);
  err_out_disable_pdev: 
#line 2700 
  ;
  
#line 2701 
  pci_disable_device(pdev);
  
#line 2702 
  __retres = err;
  
#line 2702 
  goto return_label;
  err_out_maintenance_mode: 
#line 2704 
  ;
  
#line 2705 
  set_bit(16L,(unsigned long volatile *)(& adapter->state));
  
#line 2706 
  netdev->netdev_ops = & qlcnic_netdev_failed_ops;
  
#line 2707 
  netdev->ethtool_ops = & qlcnic_ethtool_failed_ops;
  
#line 2708 
  ahw->port_type = (unsigned short)2U;
  
#line 2710 
  tmp_14 = qlcnic_83xx_check(adapter);
  
#line 2710 
  if ((int)tmp_14 != 0) 
#line 2711 
                        adapter->tgt_status_reg = (void *)0; else 
#line 2713 
                                                                  ahw->board_type = (unsigned short)38U;
  
#line 2715 
  err = ldv_register_netdev_82(netdev);
  
#line 2717 
  if (err != 0) {
    
#line 2718 
    dev_err((struct device const *)(& pdev->dev),"Failed to register net device\n");
    
#line 2719 
    qlcnic_clr_all_drv_state(adapter,(unsigned char)0);
    
#line 2720 
    goto err_out_free_hw;
  }
  else ;
  
#line 2723 
  pci_set_drvdata(pdev,(void *)adapter);
  
#line 2724 
  qlcnic_add_sysfs(adapter);
  
#line 2726 
  __retres = 0;
  return_label: 
#line 2726 
                return __retres;
}


#line 2729  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_remove(struct pci_dev *pdev)
{
  struct qlcnic_adapter *adapter;
  struct net_device *netdev;
  struct qlcnic_hardware_context *ahw;
  bool tmp_0;
  bool tmp_1;
  
#line 2735 
  adapter = (struct qlcnic_adapter *)pci_get_drvdata(pdev);
  
#line 2736 
  if (adapter == (struct qlcnic_adapter *)0) 
#line 2737 
                                             goto return_label; else ;
  
#line 2739 
  netdev = adapter->netdev;
  
#line 2741 
  qlcnic_cancel_idc_work(adapter);
  
#line 2742 
  qlcnic_sriov_pf_disable(adapter);
  
#line 2743 
  ahw = adapter->ahw;
  
#line 2745 
  ldv_unregister_netdev_83(netdev);
  
#line 2746 
  qlcnic_sriov_cleanup(adapter);
  
#line 2748 
  tmp_0 = qlcnic_83xx_check(adapter);
  
#line 2748 
  if ((int)tmp_0 != 0) {
    
#line 2749 
    qlcnic_83xx_initialize_nic(adapter,0);
    
#line 2750 
    cancel_delayed_work_sync(& adapter->idc_aen_work);
    
#line 2751 
    qlcnic_83xx_free_mbx_intr(adapter);
    
#line 2752 
    qlcnic_83xx_detach_mailbox_work(adapter);
    
#line 2753 
    qlcnic_83xx_free_mailbox(ahw->mailbox);
    
#line 2754 
    kfree((void const *)ahw->fw_info);
  }
  else ;
  
#line 2757 
  qlcnic_dcb_free(adapter->dcb);
  
#line 2758 
  qlcnic_detach(adapter);
  
#line 2759 
  kfree((void const *)adapter->npars);
  
#line 2760 
  kfree((void const *)adapter->eswitch);
  
#line 2762 
  tmp_1 = qlcnic_82xx_check(adapter);
  
#line 2762 
  if ((int)tmp_1 != 0) 
#line 2763 
                       qlcnic_clr_all_drv_state(adapter,(unsigned char)0); else ;
  
#line 2765 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 2767 
  qlcnic_free_lb_filters_mem(adapter);
  
#line 2769 
  qlcnic_teardown_intr(adapter);
  
#line 2771 
  qlcnic_remove_sysfs(adapter);
  
#line 2773 
  qlcnic_unregister_hwmon_dev(adapter);
  
#line 2775 
  qlcnic_cleanup_pci_map(adapter->ahw);
  
#line 2777 
  qlcnic_release_firmware(adapter);
  
#line 2779 
  pci_disable_pcie_error_reporting(pdev);
  
#line 2780 
  pci_release_regions(pdev);
  
#line 2781 
  pci_disable_device(pdev);
  
#line 2783 
  if (adapter->qlcnic_wq != (struct workqueue_struct *)0) {
    
#line 2784 
    destroy_workqueue(adapter->qlcnic_wq);
    
#line 2785 
    adapter->qlcnic_wq = (struct workqueue_struct *)0;
  }
  else ;
  
#line 2788 
  qlcnic_free_adapter_resources(adapter);
  
#line 2789 
  kfree((void const *)ahw);
  
#line 2790 
  ldv_free_netdev_84(netdev);
  return_label: 
#line 2791 
                return;
}


#line 2793  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_shutdown(struct pci_dev *pdev)
{
  int tmp;
  
#line 2795 
  tmp = __qlcnic_shutdown(pdev);
  
#line 2795 
  if (tmp != 0) 
#line 2796 
                goto return_label; else ;
  
#line 2798 
  pci_disable_device(pdev);
  return_label: 
#line 2799 
                return;
}


#line 2802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_suspend(struct pci_dev *pdev, pm_message_t state)
{
  int __retres;
  int retval;
  pci_power_t tmp;
  
#line 2806 
  retval = __qlcnic_shutdown(pdev);
  
#line 2807 
  if (retval != 0) {
    
#line 2808 
    __retres = retval;
    
#line 2808 
    goto return_label;
  }
  else ;
  
#line 2810 
  tmp = pci_choose_state(pdev,state);
  
#line 2810 
  ;
  
#line 2810 
  pci_set_power_state(pdev,tmp);
  
#line 2811 
  __retres = 0;
  return_label: 
#line 2811 
                return __retres;
}


#line 2814  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_resume(struct pci_dev *pdev)
{
  int __retres;
  int err;
  int tmp_0;
  
#line 2816 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  
#line 2819 
  err = pci_enable_device(pdev);
  
#line 2820 
  if (err != 0) {
    
#line 2821 
    __retres = err;
    
#line 2821 
    goto return_label;
  }
  else ;
  
#line 2823 
  pci_set_power_state(pdev,0);
  
#line 2824 
  pci_set_master(pdev);
  
#line 2825 
  pci_restore_state(pdev);
  
#line 2827 
  tmp_0 = __qlcnic_resume(adapter);
  
#line 2827 
  __retres = tmp_0;
  return_label: 
#line 2827 
                return __retres;
}


#line 2831  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_open(struct net_device *netdev)
{
  int __retres;
  int err;
  int tmp_0;
  
#line 2833 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2836 
  tmp_0 = constant_test_bit(16L,(unsigned long const volatile *)(& adapter->state));
  
#line 2836 
  if (tmp_0 != 0) {
    
#line 2837 
    netdev_err((struct net_device const *)netdev,"%s: Device is in non-operational state\n","qlcnic_open");
    
#line 2840 
    __retres = -5;
    
#line 2840 
    goto return_label;
  }
  else ;
  
#line 2843 
  netif_carrier_off(netdev);
  
#line 2845 
  err = qlcnic_attach(adapter);
  
#line 2846 
  if (err != 0) {
    
#line 2847 
    __retres = err;
    
#line 2847 
    goto return_label;
  }
  else ;
  
#line 2849 
  err = __qlcnic_up(adapter,netdev);
  
#line 2850 
  if (err != 0) 
#line 2851 
                qlcnic_detach(adapter); else ;
  
#line 2853 
  __retres = err;
  return_label: 
#line 2853 
                return __retres;
}


#line 2859  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_close(struct net_device *netdev)
{
  int __retres;
  
#line 2861 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2863 
  __qlcnic_down(adapter,netdev);
  
#line 2865 
  __retres = 0;
  
#line 2865 
  return __retres;
}


#line 2870  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_alloc_lb_filters_mem(struct qlcnic_adapter *adapter)
{
  void *head;
  int i;
  bool tmp_0;
  
#line 2874 
  struct net_device *netdev = adapter->netdev;
  
#line 2875 
  u32 filter_size = 0U;
  
#line 2876 
  u16 act_pci_func = (unsigned short)0U;
  
#line 2878 
  if ((unsigned int)adapter->fhash.fmax != 0U && adapter->fhash.fhead != (struct hlist_head *)0) 
    
#line 2879 
    goto return_label; else ;
  
#line 2881 
  act_pci_func = (adapter->ahw)->total_nic_func;
  
#line 2882 
  spinlock_check(& adapter->mac_learn_lock);
  {
    struct lock_class_key __key;
    
#line 2882 
    __raw_spin_lock_init(& adapter->mac_learn_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->mac_learn_lock)->rlock",& __key);
  }
  
#line 2883 
  spinlock_check(& adapter->rx_mac_learn_lock);
  {
    struct lock_class_key __key_0;
    
#line 2883 
    __raw_spin_lock_init(& adapter->rx_mac_learn_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->rx_mac_learn_lock)->rlock",& __key_0);
  }
  
#line 2885 
  tmp_0 = qlcnic_sriov_vf_check(adapter);
  
#line 2885 
  if ((int)tmp_0 != 0) {
    
#line 2886 
    filter_size = 1U;
    
#line 2887 
    adapter->fhash.fbucket_size = (unsigned short)1U;
  }
  else {
    bool tmp;
    
#line 2888 
    tmp = qlcnic_82xx_check(adapter);
    
#line 2888 
    if ((int)tmp != 0) {
      
#line 2889 
      filter_size = 64U;
      
#line 2890 
      adapter->fhash.fbucket_size = (unsigned short)32U;
    }
    else {
      
#line 2892 
      filter_size = 2048U;
      
#line 2893 
      adapter->fhash.fbucket_size = (unsigned short)256U;
    }
  }
  
#line 2896 
  head = kcalloc((unsigned long)adapter->fhash.fbucket_size,8UL,32U);
  
#line 2899 
  if (head == (void *)0) 
#line 2900 
                         goto return_label; else ;
  
#line 2902 
  adapter->fhash.fmax = (unsigned short)(filter_size / (unsigned int)act_pci_func);
  
#line 2903 
  adapter->fhash.fhead = (struct hlist_head *)head;
  
#line 2905 
  netdev_info((struct net_device const *)netdev,"active nic func = %d, mac filter size=%d\n",(int)act_pci_func,(int)adapter->fhash.fmax);
  
#line 2908 
  i = 0;
  
#line 2908 
  goto ldv_57417;
  ldv_57416: 
#line 2909 
  ;
  
#line 2909 
  (adapter->fhash.fhead + i)->first = (struct hlist_node *)0;
  
#line 2908 
  i += 1;
  ldv_57417: 
#line 2909 
  ;
  
#line 2908 
  if ((int)adapter->fhash.fbucket_size > i) 
#line 2910 
                                            goto ldv_57416; else 
#line 2913 
                                                                 goto ldv_57418;
  ldv_57418: 
#line 2914 
  ;
  
#line 2911 
  adapter->rx_fhash.fbucket_size = adapter->fhash.fbucket_size;
  
#line 2913 
  head = kcalloc((unsigned long)adapter->rx_fhash.fbucket_size,8UL,32U);
  
#line 2916 
  if (head == (void *)0) 
#line 2917 
                         goto return_label; else ;
  
#line 2919 
  adapter->rx_fhash.fmax = (unsigned short)(filter_size / (unsigned int)act_pci_func);
  
#line 2920 
  adapter->rx_fhash.fhead = (struct hlist_head *)head;
  
#line 2922 
  i = 0;
  
#line 2922 
  goto ldv_57420;
  ldv_57419: 
#line 2923 
  ;
  
#line 2923 
  (adapter->rx_fhash.fhead + i)->first = (struct hlist_node *)0;
  
#line 2922 
  i += 1;
  ldv_57420: 
#line 2923 
  ;
  
#line 2922 
  if ((int)adapter->rx_fhash.fbucket_size > i) 
#line 2924 
                                               goto ldv_57419; else 
#line 2927 
                                                                    goto ldv_57421;
  ldv_57421: 
#line 2928 
  ;
  return_label: 
#line 2929 
                return;
}


#line 2926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_free_lb_filters_mem(struct qlcnic_adapter *adapter)
{
  
#line 2928 
  if ((unsigned int)adapter->fhash.fmax != 0U) 
#line 2929 
                                               kfree((void const *)adapter->fhash.fhead); else ;
  
#line 2931 
  adapter->fhash.fhead = (struct hlist_head *)0;
  
#line 2932 
  adapter->fhash.fmax = (unsigned short)0U;
  
#line 2934 
  if ((unsigned int)adapter->rx_fhash.fmax != 0U) 
#line 2935 
                                                  kfree((void const *)adapter->rx_fhash.fhead); else ;
  
#line 2937 
  adapter->rx_fhash.fmax = (unsigned short)0U;
  
#line 2938 
  adapter->rx_fhash.fhead = (struct hlist_head *)0;
  
#line 2939 
  return;
}


#line 2941  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_check_temp(struct qlcnic_adapter *adapter)
{
  u32 temp_state;
  u32 temp_val;
  bool tmp;
  bool tmp_0;
  
#line 2943 
  struct net_device *netdev = adapter->netdev;
  
#line 2944 
  u32 temp = 0U;
  
#line 2945 
  int rv = 0;
  
#line 2947 
  tmp = qlcnic_83xx_check(adapter);
  
#line 2947 
  if ((int)tmp != 0) 
#line 2948 
                     temp = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 42U))); else ;
  
#line 2950 
  tmp_0 = qlcnic_82xx_check(adapter);
  
#line 2950 
  if ((int)tmp_0 != 0) 
#line 2951 
                       temp = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 18U))); else ;
  
#line 2953 
  temp_state = temp & 65535U;
  
#line 2954 
  temp_val = temp >> 16;
  
#line 2956 
  if (temp_state == 3U) {
    
#line 2957 
    dev_err((struct device const *)(& netdev->dev),"Device temperature %d degrees C exceeds",temp_val);
    
#line 2961 
    rv = 1;
  }
  else 
    
#line 2962 
    if (temp_state == 2U) {
      
#line 2963 
      if ((adapter->ahw)->temp == 1U) 
#line 2964 
                                      dev_err((struct device const *)(& netdev->dev),"Device temperature %d degrees C ",temp_val); else ;
    }
    else 
      
#line 2971 
      if ((adapter->ahw)->temp == 2U) 
#line 2972 
                                      _dev_info((struct device const *)(& netdev->dev),"Device temperature is now %d degrees C",temp_val); else ;
  
#line 2977 
  (adapter->ahw)->temp = temp_state;
  
#line 2978 
  return rv;
}


#line 2981  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
__inline static void dump_tx_ring_desc(struct qlcnic_host_tx_ring *tx_ring)
{
  int i;
  struct cmd_desc_type0 *tx_desc_info;
  
#line 2986 
  i = 0;
  
#line 2986 
  goto ldv_57439;
  ldv_57438: 
#line 2987 
  ;
  
#line 2987 
  tx_desc_info = tx_ring->desc_head + i;
  
#line 2988 
  printk("\001",i);
  
#line 2989 
  print_hex_dump("\001","TX: ",2,16,1,(void const *)(tx_ring->desc_head + i),64UL,(_Bool)1);
  
#line 2986 
  i += 1;
  ldv_57439: 
#line 2987 
  ;
  
#line 2986 
  if (tx_ring->num_desc > (unsigned int)i) 
#line 2988 
                                           goto ldv_57438; else 
#line 2991 
                                                                goto ldv_57440;
  ldv_57440: 
#line 2992 
  ;
  
#line 2993 
  return;
}


#line 2995  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_dump_rings(struct qlcnic_adapter *adapter)
{
  struct qlcnic_host_rds_ring *rds_ring;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_tx_ring *tx_ring;
  int ring;
  unsigned int tmp_1;
  unsigned int tmp_2;
  unsigned int tmp_3;
  unsigned int tmp_5;
  u32 tmp_6;
  
#line 2997 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 2998 
  struct net_device *netdev = adapter->netdev;
  
#line 3004 
  if (netdev == (struct net_device *)0) 
#line 3005 
                                        goto return_label;
  else {
    int tmp_0;
    bool tmp;
    
#line 3004 
    tmp = netif_running((struct net_device const *)netdev);
    
#line 3004 
    if (tmp) 
#line 3004 
             tmp_0 = 0; else 
#line 3004 
                             tmp_0 = 1;
    
#line 3004 
    if (tmp_0) 
#line 3005 
               goto return_label; else ;
  }
  
#line 3007 
  ring = 0;
  
#line 3007 
  goto ldv_57452;
  ldv_57451: 
#line 3008 
  ;
  
#line 3008 
  rds_ring = recv_ctx->rds_rings + ring;
  
#line 3009 
  if (rds_ring == (struct qlcnic_host_rds_ring *)0) 
#line 3010 
                                                    goto ldv_57450; else ;
  
#line 3011 
  ;
  
#line 3011 
  ;
  
#line 3012 
  tmp_1 = readl((void const volatile *)rds_ring->crb_rcv_producer);
  
#line 3011 
  ;
  
#line 3011 
  ;
  
#line 3011 
  netdev_info((struct net_device const *)netdev,"rds_ring=%d crb_rcv_producer=%d producer=%u num_desc=%u\n",ring,tmp_1,rds_ring->producer,rds_ring->num_desc);
  ldv_57450: 
#line 3015 
  ;
  
#line 3007 
  ring += 1;
  ldv_57452: 
#line 3008 
  ;
  
#line 3007 
  if ((int)adapter->max_rds_rings > ring) 
#line 3009 
                                          goto ldv_57451; else 
#line 3012 
                                                               goto ldv_57453;
  ldv_57453: 
#line 3013 
  ;
  
#line 3017 
  ring = 0;
  
#line 3017 
  goto ldv_57456;
  ldv_57455: 
#line 3018 
  ;
  
#line 3018 
  sds_ring = recv_ctx->sds_rings + ring;
  
#line 3019 
  if (sds_ring == (struct qlcnic_host_sds_ring *)0) 
#line 3020 
                                                    goto ldv_57454; else ;
  
#line 3021 
  ;
  
#line 3024 
  tmp_2 = readl((void const volatile *)sds_ring->crb_intr_mask);
  
#line 3021 
  ;
  
#line 3022 
  tmp_3 = readl((void const volatile *)sds_ring->crb_sts_consumer);
  
#line 3021 
  ;
  
#line 3021 
  ;
  
#line 3021 
  netdev_info((struct net_device const *)netdev,"sds_ring=%d crb_sts_consumer=%d consumer=%u crb_intr_mask=%d num_desc=%u\n",ring,tmp_3,sds_ring->consumer,tmp_2,sds_ring->num_desc);
  ldv_57454: 
#line 3026 
  ;
  
#line 3017 
  ring += 1;
  ldv_57456: 
#line 3018 
  ;
  
#line 3017 
  if ((int)adapter->drv_sds_rings > ring) 
#line 3019 
                                          goto ldv_57455; else 
#line 3022 
                                                               goto ldv_57457;
  ldv_57457: 
#line 3023 
  ;
  
#line 3028 
  ring = 0;
  
#line 3028 
  goto ldv_57460;
  ldv_57459: 
#line 3029 
  ;
  
#line 3029 
  tx_ring = adapter->tx_ring + ring;
  
#line 3030 
  if (tx_ring == (struct qlcnic_host_tx_ring *)0) 
#line 3031 
                                                  goto ldv_57458; else ;
  
#line 3032 
  netdev_info((struct net_device const *)netdev,"Tx ring=%d Context Id=0x%x\n",ring,(int)tx_ring->ctx_id);
  
#line 3034 
  netdev_info((struct net_device const *)netdev,"xmit_finished=%llu, xmit_called=%llu, xmit_on=%llu, xmit_off=%llu\n",tx_ring->tx_stats.xmit_finished,tx_ring->tx_stats.xmit_called,tx_ring->tx_stats.xmit_on,tx_ring->tx_stats.xmit_off);
  
#line 3041 
  if (tx_ring->crb_intr_mask != (void *)0) {
    unsigned int tmp_4;
    
#line 3042 
    tmp_4 = readl((void const volatile *)tx_ring->crb_intr_mask);
    
#line 3042 
    ;
    
#line 3042 
    netdev_info((struct net_device const *)netdev,"crb_intr_mask=%d\n",tmp_4);
  }
  else ;
  
#line 3045 
  ;
  
#line 3045 
  ;
  
#line 3045 
  ;
  
#line 3046 
  tmp_5 = readl((void const volatile *)tx_ring->crb_cmd_producer);
  
#line 3045 
  ;
  
#line 3045 
  netdev_info((struct net_device const *)netdev,"hw_producer=%d, sw_producer=%d sw_consumer=%d, hw_consumer=%d\n",tmp_5,tx_ring->producer,tx_ring->sw_consumer,*(tx_ring->hw_consumer));
  
#line 3052 
  tmp_6 = qlcnic_tx_avail(tx_ring);
  
#line 3051 
  ;
  
#line 3051 
  ;
  
#line 3051 
  netdev_info((struct net_device const *)netdev,"Total desc=%d, Available desc=%d\n",tx_ring->num_desc,tmp_6);
  
#line 3054 
  if (((adapter->ahw)->msg_enable & 128U) != 0U) 
#line 3055 
                                                 dump_tx_ring_desc(tx_ring); else ;
  ldv_57458: 
#line 3056 
  ;
  
#line 3028 
  ring += 1;
  ldv_57460: 
#line 3029 
  ;
  
#line 3028 
  if ((int)adapter->drv_tx_rings > ring) 
#line 3030 
                                         goto ldv_57459; else 
#line 3033 
                                                              goto ldv_57461;
  ldv_57461: 
#line 3034 
  ;
  return_label: 
#line 3035 
                return;
}


#line 3060  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_tx_timeout(struct net_device *netdev)
{
  int tmp_0;
  
#line 3062 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3064 
  tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 3064 
  if (tmp_0 != 0) 
#line 3065 
                  goto return_label; else ;
  
#line 3067 
  qlcnic_dump_rings(adapter);
  
#line 3069 
  adapter->tx_timeo_cnt = (u8)((int)adapter->tx_timeo_cnt + 1);
  
#line 3069 
  if ((unsigned int)adapter->tx_timeo_cnt > 1U) 
#line 3069 
                                                goto _LOR;
  else 
    
#line 3069 
    if (((adapter->ahw)->msg_enable & 128U) != 0U) {
      _LOR: {
              bool tmp_2;
              
#line 3071 
              netdev_err((struct net_device const *)netdev,"Tx timeout, reset the adapter.\n");
              
#line 3072 
              tmp_2 = qlcnic_82xx_check(adapter);
              
#line 3072 
              if ((int)tmp_2 != 0) 
#line 3073 
                                   adapter->need_fw_reset = (unsigned char)1U;
              else {
                bool tmp_1;
                
#line 3074 
                tmp_1 = qlcnic_83xx_check(adapter);
                
#line 3074 
                if ((int)tmp_1 != 0) 
#line 3075 
                                     qlcnic_83xx_idc_request_reset(adapter,3735944941U); else ;
              }
            }
    }
    else {
      
#line 3078 
      netdev_err((struct net_device const *)netdev,"Tx timeout, reset adapter context.\n");
      
#line 3079 
      (adapter->ahw)->reset_context = (unsigned char)1U;
    }
  return_label: 
#line 3081 
                return;
}


#line 3083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct net_device_stats *qlcnic_get_stats(struct net_device *netdev)
{
  int tmp_0;
  
#line 3085 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3086 
  struct net_device_stats *stats = & netdev->stats;
  
#line 3088 
  tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
  
#line 3088 
  if (tmp_0 != 0) 
#line 3089 
                  qlcnic_update_stats(adapter); else ;
  
#line 3091 
  stats->rx_packets = (unsigned long)(adapter->stats.rx_pkts + adapter->stats.lro_pkts);
  
#line 3092 
  stats->tx_packets = (unsigned long)adapter->stats.xmitfinished;
  
#line 3093 
  stats->rx_bytes = (unsigned long)(adapter->stats.rxbytes + adapter->stats.lrobytes);
  
#line 3094 
  stats->tx_bytes = (unsigned long)adapter->stats.txbytes;
  
#line 3095 
  stats->rx_dropped = (unsigned long)adapter->stats.rxdropped;
  
#line 3096 
  stats->tx_dropped = (unsigned long)adapter->stats.txdropped;
  
#line 3098 
  return stats;
}


#line 3101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static irqreturn_t qlcnic_82xx_clear_legacy_intr(struct qlcnic_adapter *adapter)
{
  irqreturn_t __retres;
  u32 status;
  
#line 3105 
  status = readl((void const volatile *)adapter->isr_int_vec);
  
#line 3107 
  if (((adapter->ahw)->int_vec_bit & status) == 0U) {
    
#line 3108 
    __retres = IRQ_NONE;
    
#line 3108 
    goto return_label;
  }
  else ;
  
#line 3111 
  status = readl((void const volatile *)adapter->crb_int_state_reg);
  
#line 3112 
  if ((status & 768U) != 512U) {
    
#line 3113 
    __retres = IRQ_NONE;
    
#line 3113 
    goto return_label;
  }
  else ;
  
#line 3115 
  writel(4294967295U,(void volatile *)adapter->tgt_status_reg);
  
#line 3117 
  readl((void const volatile *)adapter->isr_int_vec);
  
#line 3118 
  readl((void const volatile *)adapter->isr_int_vec);
  
#line 3120 
  __retres = IRQ_HANDLED;
  return_label: 
#line 3120 
                return __retres;
}


#line 3123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static irqreturn_t qlcnic_tmp_intr(int irq, void *data)
{
  irqreturn_t __retres;
  irqreturn_t tmp;
  
#line 3125 
  struct qlcnic_host_sds_ring *sds_ring = (struct qlcnic_host_sds_ring *)data;
  
#line 3126 
  struct qlcnic_adapter *adapter = sds_ring->adapter;
  
#line 3128 
  if ((adapter->flags & 4U) != 0U) 
#line 3129 
                                   goto done;
  else 
    
#line 3130 
    if ((adapter->flags & 2U) != 0U) {
      
#line 3131 
      writel(4294967295U,(void volatile *)adapter->tgt_status_reg);
      
#line 3132 
      goto done;
    }
    else ;
  
#line 3135 
  tmp = qlcnic_clear_legacy_intr(adapter);
  
#line 3135 
  if (tmp == (unsigned int)IRQ_NONE) {
    
#line 3136 
    __retres = IRQ_NONE;
    
#line 3136 
    goto return_label;
  }
  else ;
  done: 
#line 3138 
  ;
  
#line 3139 
  (adapter->ahw)->diag_cnt += 1;
  
#line 3140 
  qlcnic_enable_sds_intr(adapter,sds_ring);
  
#line 3141 
  __retres = IRQ_HANDLED;
  return_label: 
#line 3141 
                return __retres;
}


#line 3144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static irqreturn_t qlcnic_intr(int irq, void *data)
{
  irqreturn_t __retres;
  irqreturn_t tmp;
  
#line 3146 
  struct qlcnic_host_sds_ring *sds_ring = (struct qlcnic_host_sds_ring *)data;
  
#line 3147 
  struct qlcnic_adapter *adapter = sds_ring->adapter;
  
#line 3149 
  tmp = qlcnic_clear_legacy_intr(adapter);
  
#line 3149 
  if (tmp == (unsigned int)IRQ_NONE) {
    
#line 3150 
    __retres = IRQ_NONE;
    
#line 3150 
    goto return_label;
  }
  else ;
  
#line 3152 
  napi_schedule(& sds_ring->napi);
  
#line 3154 
  __retres = IRQ_HANDLED;
  return_label: 
#line 3154 
                return __retres;
}


#line 3157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static irqreturn_t qlcnic_msi_intr(int irq, void *data)
{
  irqreturn_t __retres;
  
#line 3159 
  struct qlcnic_host_sds_ring *sds_ring = (struct qlcnic_host_sds_ring *)data;
  
#line 3160 
  struct qlcnic_adapter *adapter = sds_ring->adapter;
  
#line 3163 
  writel(4294967295U,(void volatile *)adapter->tgt_status_reg);
  
#line 3165 
  napi_schedule(& sds_ring->napi);
  
#line 3166 
  __retres = IRQ_HANDLED;
  
#line 3166 
  return __retres;
}


#line 3169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static irqreturn_t qlcnic_msix_intr(int irq, void *data)
{
  irqreturn_t __retres;
  
#line 3171 
  struct qlcnic_host_sds_ring *sds_ring = (struct qlcnic_host_sds_ring *)data;
  
#line 3173 
  napi_schedule(& sds_ring->napi);
  
#line 3174 
  __retres = IRQ_HANDLED;
  
#line 3174 
  return __retres;
}


#line 3177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static irqreturn_t qlcnic_msix_tx_intr(int irq, void *data)
{
  irqreturn_t __retres;
  
#line 3179 
  struct qlcnic_host_tx_ring *tx_ring = (struct qlcnic_host_tx_ring *)data;
  
#line 3181 
  napi_schedule(& tx_ring->napi);
  
#line 3182 
  __retres = IRQ_HANDLED;
  
#line 3182 
  return __retres;
}


#line 3186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_poll_controller(struct net_device *netdev)
{
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_recv_context *recv_ctx;
  struct qlcnic_host_tx_ring *tx_ring;
  int ring;
  int tmp_0;
  
#line 3188 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3194 
  tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
  
#line 3194 
  if (tmp_0 == 0) 
#line 3195 
                  goto return_label; else ;
  
#line 3197 
  recv_ctx = adapter->recv_ctx;
  
#line 3199 
  ring = 0;
  
#line 3199 
  goto ldv_57513;
  ldv_57512: 
#line 3200 
  ;
  
#line 3200 
  sds_ring = recv_ctx->sds_rings + ring;
  
#line 3201 
  qlcnic_disable_sds_intr(adapter,sds_ring);
  
#line 3202 
  napi_schedule(& sds_ring->napi);
  
#line 3199 
  ring += 1;
  ldv_57513: 
#line 3200 
  ;
  
#line 3199 
  if ((int)adapter->drv_sds_rings > ring) 
#line 3201 
                                          goto ldv_57512; else 
#line 3204 
                                                               goto ldv_57514;
  ldv_57514: 
#line 3205 
  ;
  
#line 3205 
  if ((adapter->flags & 4U) != 0U) {
    bool tmp_1;
    
#line 3209 
    tmp_1 = qlcnic_83xx_check(adapter);
    
#line 3209 
    if ((int)tmp_1 != 0) {
      
#line 3209 
      if ((adapter->flags & 65536U) != 0U) 
#line 3213 
                                           goto return_label; else 
#line 3209 
                                                                   goto _LAND;
    }
    else {
      bool tmp_2;
      _LAND: 
#line 3210 
      tmp_2 = qlcnic_82xx_check(adapter);
      
#line 3210 
      if ((int)tmp_2 != 0) {
        int tmp_4;
        bool tmp_3;
        
#line 3212 
        tmp_3 = qlcnic_check_multi_tx(adapter);
        
#line 3212 
        if (tmp_3) 
#line 3212 
                   tmp_4 = 0; else 
#line 3212 
                                   tmp_4 = 1;
        
#line 3212 
        if (tmp_4) 
#line 3213 
                   goto return_label; else ;
      }
      else ;
    }
    
#line 3215 
    ring = 0;
    
#line 3215 
    goto ldv_57516;
    ldv_57515: 
#line 3216 
    ;
    
#line 3216 
    tx_ring = adapter->tx_ring + ring;
    
#line 3217 
    qlcnic_disable_tx_intr(adapter,tx_ring);
    
#line 3218 
    napi_schedule(& tx_ring->napi);
    
#line 3215 
    ring += 1;
    ldv_57516: 
#line 3216 
    ;
    
#line 3215 
    if ((int)adapter->drv_tx_rings > ring) 
#line 3217 
                                           goto ldv_57515; else 
#line 3220 
                                                                goto ldv_57517;
    ldv_57517: 
#line 3221 
    ;
  }
  else ;
  return_label: 
#line 3223 
                return;
}


#line 3225  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_idc_debug_info(struct qlcnic_adapter *adapter, u8 encoding)
{
  u32 val;
  
#line 3229 
  val = (unsigned int)adapter->portnum & 15U;
  
#line 3230 
  val = (unsigned int)((int)encoding << 7) | val;
  
#line 3231 
  val = (unsigned int)(((unsigned long long)jiffies - adapter->dev_rst_time) << 8) | val;
  
#line 3233 
  writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 8U)));
  
#line 3234 
  adapter->dev_rst_time = (unsigned long long)jiffies;
  
#line 3235 
  return;
}


#line 3238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_set_drv_state(struct qlcnic_adapter *adapter, u8 state)
{
  int __retres;
  u32 val;
  int tmp_0;
  {
    
#line 3242 
    int __ret_warn_on = (unsigned int)state + 252U > 1U;
    
#line 3242 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 3242 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c",3243); else ;
    
#line 3242 
    long tmp = (long)(__ret_warn_on != 0);
  }
  
#line 3245 
  tmp_0 = qlcnic_api_lock(adapter);
  
#line 3245 
  if (tmp_0 != 0) {
    
#line 3246 
    __retres = -5;
    
#line 3246 
    goto return_label;
  }
  else ;
  
#line 3248 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 7U)));
  
#line 3250 
  if ((unsigned int)state == 4U) 
#line 3251 
                                 val = (unsigned int)(1 << (int)adapter->portnum * 4) | val;
  else 
    
#line 3252 
    if ((unsigned int)state == 5U) 
#line 3253 
                                   val = (unsigned int)(2 << (int)adapter->portnum * 4) | val; else ;
  
#line 3255 
  writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 7U)));
  
#line 3257 
  qlcnic_api_unlock(adapter);
  
#line 3259 
  __retres = 0;
  return_label: 
#line 3259 
                return __retres;
}


#line 3263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_clr_drv_state(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 val;
  int tmp;
  
#line 3267 
  tmp = qlcnic_api_lock(adapter);
  
#line 3267 
  if (tmp != 0) {
    
#line 3268 
    __retres = -16;
    
#line 3268 
    goto return_label;
  }
  else ;
  
#line 3270 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 7U)));
  
#line 3271 
  val = (unsigned int)(~ (3 << (int)adapter->portnum * 4)) & val;
  
#line 3272 
  writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 7U)));
  
#line 3274 
  qlcnic_api_unlock(adapter);
  
#line 3276 
  __retres = 0;
  return_label: 
#line 3276 
                return __retres;
}


#line 3279  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_clr_all_drv_state(struct qlcnic_adapter *adapter, u8 failed)
{
  u32 val;
  int tmp;
  
#line 3283 
  tmp = qlcnic_api_lock(adapter);
  
#line 3283 
  if (tmp != 0) 
#line 3284 
                goto err; else ;
  
#line 3286 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 5U)));
  
#line 3287 
  val = (unsigned int)(~ (1 << (int)adapter->portnum * 4)) & val;
  
#line 3288 
  writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 5U)));
  
#line 3290 
  if ((unsigned int)failed != 0U) {
    
#line 3291 
    writel(6U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 6U)));
    
#line 3293 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Device state set to Failed. Please Reboot\n");
  }
  else 
    
#line 3295 
    if ((val & 286331153U) == 0U) 
#line 3296 
                                  writel(1U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 6U))); else ;
  
#line 3299 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 7U)));
  
#line 3300 
  val = (unsigned int)(~ (3 << (int)adapter->portnum * 4)) & val;
  
#line 3301 
  writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 7U)));
  
#line 3303 
  qlcnic_api_unlock(adapter);
  err: 
#line 3304 
  ;
  
#line 3305 
  adapter->fw_fail_cnt = (unsigned char)0U;
  
#line 3306 
  adapter->flags &= 4294950911U;
  
#line 3307 
  set_bit(4L,(unsigned long volatile *)(& adapter->state));
  
#line 3308 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 3309 
  return;
}


#line 3313  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_check_drv_state(struct qlcnic_adapter *adapter)
{
  int __retres;
  int act;
  int state;
  int active_mask;
  unsigned int tmp;
  unsigned int tmp_0;
  
#line 3316 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 3318 
  tmp = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 7U)));
  
#line 3318 
  state = (int)tmp;
  
#line 3319 
  tmp_0 = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 5U)));
  
#line 3319 
  act = (int)tmp_0;
  
#line 3321 
  if ((adapter->flags & 8192U) != 0U) {
    
#line 3322 
    active_mask = ~ (1 << (int)ahw->pci_func * 4);
    
#line 3323 
    act &= active_mask;
  }
  else ;
  
#line 3326 
  if (((state ^ act) & 286331153) == 0 || (((state >> 1) ^ act) & 286331153) == 0) {
    
#line 3328 
    __retres = 0;
    
#line 3328 
    goto return_label;
  }
  else {
    
#line 3330 
    __retres = 1;
    
#line 3330 
    goto return_label;
  }
  return_label: 
#line 3326 
                return __retres;
}


#line 3333  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_check_idc_ver(struct qlcnic_adapter *adapter)
{
  int __retres;
  
#line 3335 
  u32 val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 10U)));
  
#line 3337 
  if (val != 1U) 
#line 3338 
                 dev_warn((struct device const *)(& (adapter->pdev)->dev),"IDC Version mismatch, driver\'s",1,val); else ;
  
#line 3342 
  __retres = 0;
  
#line 3342 
  return __retres;
}


#line 3346  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_can_start_firmware(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 val;
  u32 prev_state;
  u8 ret;
  int tmp;
  int tmp_0;
  int tmp_3;
  int tmp_4;
  
#line 3349 
  u8 dev_init_timeo = adapter->dev_init_timeo;
  
#line 3350 
  u8 portnum = adapter->portnum;
  
#line 3353 
  tmp = test_and_set_bit(4L,(unsigned long volatile *)(& adapter->state));
  
#line 3353 
  if (tmp != 0) {
    
#line 3354 
    __retres = 1;
    
#line 3354 
    goto return_label;
  }
  else ;
  
#line 3356 
  tmp_0 = qlcnic_api_lock(adapter);
  
#line 3356 
  if (tmp_0 != 0) {
    
#line 3357 
    __retres = -1;
    
#line 3357 
    goto return_label;
  }
  else ;
  
#line 3359 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 5U)));
  
#line 3360 
  if (((unsigned int)(1 << (int)portnum * 4) & val) == 0U) {
    
#line 3361 
    val = (unsigned int)(1 << (int)portnum * 4) | val;
    
#line 3362 
    writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 5U)));
  }
  else ;
  
#line 3365 
  prev_state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 6U)));
  
#line 3366 
  if (((adapter->ahw)->msg_enable & 8192U) != 0U) {
    char const *tmp_1;
    
#line 3366 
    ;
    
#line 3366 
    tmp_1 = dev_name((struct device const *)(& (adapter->pdev)->dev));
    
#line 3366 
    printk("\001",tmp_1,"qlcnic_can_start_firmware",prev_state);
  }
  else ;
  
#line 3368 
  switch (prev_state) {
    int tmp_2;
    case (u32)1: 
#line 3369 
    ;
    
#line 3370 
    writel(2U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 6U)));
    
#line 3372 
    writel(1U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 10U)));
    
#line 3374 
    qlcnic_idc_debug_info(adapter,(unsigned char)0);
    
#line 3375 
    qlcnic_api_unlock(adapter);
    
#line 3376 
    __retres = 1;
    
#line 3376 
    goto return_label;
    case (u32)3: 
#line 3378 
    ;
    
#line 3379 
    tmp_2 = qlcnic_check_idc_ver(adapter);
    
#line 3379 
    ret = (unsigned char)tmp_2;
    
#line 3380 
    qlcnic_api_unlock(adapter);
    
#line 3381 
    __retres = (int)ret;
    
#line 3381 
    goto return_label;
    case (u32)4: 
#line 3383 
    ;
    
#line 3384 
    val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 7U)));
    
#line 3385 
    val = (unsigned int)(1 << (int)portnum * 4) | val;
    
#line 3386 
    writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 7U)));
    
#line 3387 
    goto ldv_57563;
    case (u32)5: 
#line 3389 
    ;
    
#line 3390 
    val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 7U)));
    
#line 3391 
    val = (unsigned int)(2 << (int)portnum * 4) | val;
    
#line 3392 
    writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 7U)));
    
#line 3393 
    goto ldv_57563;
    case (u32)6: 
#line 3395 
    ;
    
#line 3396 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Device in failed state.\n");
    
#line 3397 
    qlcnic_api_unlock(adapter);
    
#line 3398 
    __retres = -1;
    
#line 3398 
    goto return_label;
    case (u32)2: 
#line 3400 
    ;
    case (u32)7: 
#line 3401 
    ;
    
#line 3402 
    goto ldv_57563;
  }
  ldv_57563: 
#line 3405 
  ;
  
#line 3405 
  qlcnic_api_unlock(adapter);
  ldv_57569: 
#line 3406 
  ;
  
#line 3408 
  msleep(1000U);
  
#line 3409 
  prev_state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 6U)));
  
#line 3411 
  if (prev_state == 7U) 
#line 3412 
                        goto ldv_57568; else ;
  ldv_57568: 
#line 3414 
  ;
  
#line 3413 
  if (prev_state != 3U) {
    
#line 3413 
    dev_init_timeo = (u8)((int)dev_init_timeo - 1);
    
#line 3413 
    if ((unsigned int)dev_init_timeo != 0U) 
#line 3415 
                                            goto ldv_57569; else 
#line 3418 
                                                                 goto ldv_57570;
  }
  else 
#line 3418 
       goto ldv_57570;
  ldv_57570: 
#line 3419 
  ;
  
#line 3415 
  if ((unsigned int)dev_init_timeo == 0U) {
    
#line 3416 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Waiting for device to initialize timeout\n");
    
#line 3418 
    __retres = -1;
    
#line 3418 
    goto return_label;
  }
  else ;
  
#line 3421 
  tmp_3 = qlcnic_api_lock(adapter);
  
#line 3421 
  if (tmp_3 != 0) {
    
#line 3422 
    __retres = -1;
    
#line 3422 
    goto return_label;
  }
  else ;
  
#line 3424 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 7U)));
  
#line 3425 
  val = (unsigned int)(~ (3 << (int)portnum * 4)) & val;
  
#line 3426 
  writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 7U)));
  
#line 3428 
  tmp_4 = qlcnic_check_idc_ver(adapter);
  
#line 3428 
  ret = (unsigned char)tmp_4;
  
#line 3429 
  qlcnic_api_unlock(adapter);
  
#line 3431 
  __retres = (int)ret;
  return_label: 
#line 3431 
                return __retres;
}


#line 3435  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_fwinit_work(struct work_struct *work)
{
  struct qlcnic_adapter *tmp;
  u32 val;
  int tmp_0;
  u8 tmp_1;
  int tmp_6;
  {
    
#line 3437 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 3437 
    tmp = (struct qlcnic_adapter *)__mptr + 18446744073709550712U;
  }
  
#line 3437 
  struct qlcnic_adapter *adapter = tmp;
  
#line 3439 
  u32 dev_state = 15U;
  
#line 3442 
  tmp_0 = qlcnic_api_lock(adapter);
  
#line 3442 
  if (tmp_0 != 0) 
#line 3443 
                  goto err_ret; else ;
  
#line 3445 
  dev_state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 6U)));
  
#line 3446 
  if (dev_state == 7U || dev_state == 5U) {
    
#line 3448 
    qlcnic_api_unlock(adapter);
    
#line 3449 
    qlcnic_schedule_work(adapter,& qlcnic_fwinit_work,500);
    
#line 3451 
    goto return_label;
  }
  else ;
  
#line 3454 
  if ((unsigned int)(adapter->ahw)->op_mode == 2U) {
    
#line 3455 
    qlcnic_api_unlock(adapter);
    
#line 3456 
    goto wait_npar;
  }
  else ;
  
#line 3459 
  if (dev_state + 4294967294U <= 1U) {
    
#line 3461 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Detected state change from ");
    
#line 3463 
    goto skip_ack_check;
  }
  else ;
  
#line 3466 
  tmp_1 = adapter->fw_wait_cnt;
  
#line 3466 
  adapter->fw_wait_cnt = (u8)((int)adapter->fw_wait_cnt + 1);
  
#line 3466 
  ;
  
#line 3466 
  if ((int)tmp_1 > (int)adapter->reset_ack_timeo) {
    
#line 3467 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Reset:Failed to get ack %d sec\n",(int)adapter->reset_ack_timeo);
    
#line 3469 
    goto skip_ack_check;
  }
  else ;
  
#line 3472 
  tmp_6 = qlcnic_check_drv_state(adapter);
  
#line 3472 
  if (tmp_6 == 0) {
    bool tmp_4;
    int tmp_5;
    skip_ack_check: 
#line 3473 
    ;
    
#line 3474 
    dev_state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 6U)));
    
#line 3476 
    if (dev_state == 4U) {
      
#line 3477 
      writel(2U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 6U)));
      
#line 3479 
      set_bit(4L,(unsigned long volatile *)(& adapter->state));
      
#line 3480 
      if (((adapter->ahw)->msg_enable & 1U) != 0U) {
        char const *tmp_2;
        
#line 3480 
        tmp_2 = dev_name((struct device const *)(& (adapter->pdev)->dev));
        
#line 3480 
        printk("\001",tmp_2,"qlcnic_fwinit_work");
      }
      else ;
      
#line 3481 
      qlcnic_idc_debug_info(adapter,(unsigned char)0);
      
#line 3482 
      val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 7U)));
      
#line 3484 
      val = (unsigned int)(1 << (int)adapter->portnum * 4) | val;
      
#line 3485 
      writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 7U)));
    }
    else ;
    
#line 3489 
    qlcnic_api_unlock(adapter);
    
#line 3491 
    rtnl_lock();
    
#line 3492 
    tmp_4 = qlcnic_check_fw_dump_state(adapter);
    
#line 3492 
    if ((int)tmp_4 != 0) {
      
#line 3492 
      if ((adapter->flags & 8192U) != 0U) {
        
#line 3494 
        if (((adapter->ahw)->msg_enable & 1U) != 0U) {
          char const *tmp_3;
          
#line 3494 
          tmp_3 = dev_name((struct device const *)(& (adapter->pdev)->dev));
          
#line 3494 
          printk("\001",tmp_3,"qlcnic_fwinit_work");
        }
        else ;
        
#line 3495 
        qlcnic_dump_fw(adapter);
        
#line 3496 
        adapter->flags |= 16384U;
      }
      else ;
    }
    else ;
    
#line 3498 
    rtnl_unlock();
    
#line 3500 
    adapter->flags &= 4294959103U;
    
#line 3501 
    tmp_5 = (*((adapter->nic_ops)->start_firmware))(adapter);
    
#line 3501 
    if (tmp_5 == 0) {
      
#line 3502 
      qlcnic_schedule_work(adapter,& qlcnic_attach_work,0);
      
#line 3503 
      adapter->fw_wait_cnt = (unsigned char)0U;
      
#line 3504 
      goto return_label;
    }
    else ;
    
#line 3506 
    goto err_ret;
  }
  else ;
  
#line 3509 
  qlcnic_api_unlock(adapter);
  wait_npar: 
#line 3511 
  ;
  
#line 3512 
  dev_state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 6U)));
  
#line 3513 
  if (((adapter->ahw)->msg_enable & 8192U) != 0U) {
    char const *tmp_7;
    
#line 3513 
    ;
    
#line 3513 
    tmp_7 = dev_name((struct device const *)(& (adapter->pdev)->dev));
    
#line 3513 
    printk("\001",tmp_7,"qlcnic_fwinit_work",dev_state);
  }
  else ;
  
#line 3515 
  switch (dev_state) {
    int tmp_8;
    case (u32)3: 
#line 3516 
    ;
    
#line 3517 
    tmp_8 = qlcnic_start_firmware(adapter);
    
#line 3517 
    if (tmp_8 == 0) {
      
#line 3518 
      qlcnic_schedule_work(adapter,& qlcnic_attach_work,0);
      
#line 3519 
      adapter->fw_wait_cnt = (unsigned char)0U;
      
#line 3520 
      goto return_label;
    }
    else ;
    case (u32)6: 
#line 3522 
    ;
    
#line 3523 
    goto ldv_57585;
    default: 
#line 3524 
    ;
    
#line 3525 
    qlcnic_schedule_work(adapter,& qlcnic_fwinit_work,250);
    
#line 3527 
    goto return_label;
  }
  ldv_57585: 
#line 3530 
  ;
  err_ret: 
#line 3530 
  ;
  
#line 3531 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"Fwinit work failed state=%u ",dev_state,(int)adapter->fw_wait_cnt);
  
#line 3533 
  netif_device_attach(adapter->netdev);
  
#line 3534 
  qlcnic_clr_all_drv_state(adapter,(unsigned char)0);
  return_label: 
#line 3535 
                return;
}


#line 3538  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_detach_work(struct work_struct *work)
{
  struct qlcnic_adapter *tmp;
  u32 status;
  {
    
#line 3540 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 3540 
    tmp = (struct qlcnic_adapter *)__mptr + 18446744073709550712U;
  }
  
#line 3540 
  struct qlcnic_adapter *adapter = tmp;
  
#line 3542 
  struct net_device *netdev = adapter->netdev;
  
#line 3545 
  netif_device_detach(netdev);
  
#line 3548 
  if ((unsigned int)adapter->dev_state == 5U) {
    bool tmp_0;
    
#line 3549 
    tmp_0 = netif_running((struct net_device const *)netdev);
    
#line 3549 
    if ((int)tmp_0 != 0) 
#line 3550 
                         __qlcnic_down(adapter,netdev); else ;
  }
  else 
#line 3552 
       qlcnic_down(adapter,netdev);
  
#line 3554 
  status = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl)));
  
#line 3556 
  if (status < (u32)0) {
    
#line 3557 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Detaching the device: peg halt status1=0x%x\n",status);
    
#line 3561 
    if (((status >> 8) & 2097151U) == 22U) {
      
#line 3562 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"On board active cooling fan failed. ");
      
#line 3565 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"Replace the adapter.\n");
    }
    else ;
    
#line 3569 
    goto err_ret;
  }
  else ;
  
#line 3572 
  if ((adapter->ahw)->temp == 3U) {
    
#line 3573 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Detaching the device: temp=%d\n",(adapter->ahw)->temp);
    
#line 3575 
    goto err_ret;
  }
  else ;
  
#line 3579 
  if ((adapter->flags & 8192U) == 0U) {
    int tmp_1;
    
#line 3580 
    tmp_1 = qlcnic_set_drv_state(adapter,(unsigned char)((int)adapter->dev_state));
    
#line 3580 
    if (tmp_1 != 0) {
      
#line 3581 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to set driver state,");
      
#line 3584 
      goto err_ret;
    }
    else ;
  }
  else ;
  
#line 3588 
  adapter->fw_wait_cnt = (unsigned char)0U;
  
#line 3590 
  qlcnic_schedule_work(adapter,& qlcnic_fwinit_work,250);
  
#line 3592 
  goto return_label;
  err_ret: 
#line 3594 
  ;
  
#line 3595 
  netif_device_attach(netdev);
  
#line 3596 
  qlcnic_clr_all_drv_state(adapter,(unsigned char)1);
  return_label: 
#line 3597 
                return;
}


#line 3601  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_set_npar_non_operational(struct qlcnic_adapter *adapter)
{
  u32 state;
  int tmp;
  
#line 3605 
  state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 14U)));
  
#line 3606 
  if (state == 0U) 
#line 3607 
                   goto return_label; else ;
  
#line 3609 
  tmp = qlcnic_api_lock(adapter);
  
#line 3609 
  if (tmp != 0) 
#line 3610 
                goto return_label; else ;
  
#line 3611 
  writel(0U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 14U)));
  
#line 3613 
  qlcnic_api_unlock(adapter);
  return_label: 
#line 3614 
                return;
}


#line 3616  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_82xx_dev_request_reset(struct qlcnic_adapter *adapter, u32 key)
{
  u32 state;
  int tmp;
  int tmp_0;
  
#line 3619 
  u32 xg_val = 0U;
  
#line 3619 
  u32 gb_val = 0U;
  
#line 3621 
  xg_val |= 1U;
  
#line 3622 
  xg_val |= 8U;
  
#line 3623 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,106954904UL,xg_val);
  
#line 3624 
  gb_val |= 1U;
  
#line 3625 
  gb_val |= 4U;
  
#line 3626 
  gb_val |= 16U;
  
#line 3627 
  gb_val |= 64U;
  
#line 3628 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,106955532UL,gb_val);
  
#line 3629 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Pause control frames disabled");
  
#line 3631 
  adapter->need_fw_reset = (unsigned char)1U;
  
#line 3633 
  tmp = qlcnic_api_lock(adapter);
  
#line 3633 
  if (tmp != 0) 
#line 3634 
                goto return_label; else ;
  
#line 3636 
  state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 6U)));
  
#line 3638 
  tmp_0 = constant_test_bit(16L,(unsigned long const volatile *)(& adapter->state));
  
#line 3638 
  if (tmp_0 != 0) {
    
#line 3639 
    netdev_err((struct net_device const *)adapter->netdev,"%s: Device is in non-operational state\n","qlcnic_82xx_dev_request_reset");
    
#line 3641 
    qlcnic_api_unlock(adapter);
    
#line 3643 
    goto return_label;
  }
  else ;
  
#line 3646 
  if (state == 3U) {
    
#line 3647 
    writel(4U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 6U)));
    
#line 3649 
    adapter->flags |= 8192U;
    
#line 3650 
    if (((adapter->ahw)->msg_enable & 1U) != 0U) {
      char const *tmp_1;
      
#line 3650 
      tmp_1 = dev_name((struct device const *)(& (adapter->pdev)->dev));
      
#line 3650 
      printk("\001",tmp_1,"qlcnic_82xx_dev_request_reset");
    }
    else ;
    
#line 3651 
    qlcnic_idc_debug_info(adapter,(unsigned char)0);
  }
  else ;
  
#line 3654 
  writel(0U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 14U)));
  
#line 3656 
  qlcnic_api_unlock(adapter);
  return_label: 
#line 3657 
                return;
}


#line 3661  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_dev_set_npar_ready(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 3663 
  tmp = qlcnic_api_lock(adapter);
  
#line 3663 
  if (tmp != 0) 
#line 3664 
                goto return_label; else ;
  
#line 3666 
  writel(1U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 14U)));
  
#line 3668 
  if (((adapter->ahw)->msg_enable & 1U) != 0U) {
    char const *tmp_0;
    
#line 3668 
    tmp_0 = dev_name((struct device const *)(& (adapter->pdev)->dev));
    
#line 3668 
    printk("\001",tmp_0,"qlcnic_dev_set_npar_ready");
  }
  else ;
  
#line 3670 
  qlcnic_api_unlock(adapter);
  return_label: 
#line 3671 
                return;
}


#line 3673  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_schedule_work(struct qlcnic_adapter *adapter, void (*func)(struct work_struct *), int delay)
{
  int tmp;
  unsigned long tmp_0;
  
#line 3676 
  tmp = constant_test_bit(5L,(unsigned long const volatile *)(& adapter->state));
  
#line 3676 
  if (tmp != 0) 
#line 3677 
                goto return_label; else ;
  {
    struct lock_class_key __key;
    
#line 3679 
    __init_work(& adapter->fw_work.work,0);
    
#line 3679 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL_0};
    
#line 3679 
    adapter->fw_work.work.data = __constr_expr_37;
    
#line 3679 
    lockdep_init_map(& adapter->fw_work.work.lockdep_map,"(&(&adapter->fw_work)->work)",& __key,0);
    
#line 3679 
    INIT_LIST_HEAD(& adapter->fw_work.work.entry);
    
#line 3679 
    adapter->fw_work.work.func = func;
  }
  {
    struct lock_class_key __key_0;
    
#line 3679 
    init_timer_key(& adapter->fw_work.timer,2097152U,"(&(&adapter->fw_work)->timer)",& __key_0);
  }
  
#line 3679 
  adapter->fw_work.timer.function = & delayed_work_timer_fn;
  
#line 3679 
  adapter->fw_work.timer.data = (unsigned long)(& adapter->fw_work);
  
#line 3680 
  tmp_0 = round_jiffies_relative((unsigned long)delay);
  
#line 3680 
  ;
  
#line 3680 
  ;
  
#line 3680 
  ldv_queue_delayed_work_85(adapter->qlcnic_wq,& adapter->fw_work,tmp_0);
  return_label: 
#line 3682 
                return;
}


#line 3685  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_attach_work(struct work_struct *work)
{
  struct qlcnic_adapter *tmp;
  u32 npar_state;
  bool tmp_3;
  int tmp_4;
  {
    
#line 3687 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 3687 
    tmp = (struct qlcnic_adapter *)__mptr + 18446744073709550712U;
  }
  
#line 3687 
  struct qlcnic_adapter *adapter = tmp;
  
#line 3689 
  struct net_device *netdev = adapter->netdev;
  
#line 3692 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U) {
    u8 tmp_0;
    
#line 3693 
    npar_state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 14U)));
    
#line 3695 
    tmp_0 = adapter->fw_wait_cnt;
    
#line 3695 
    adapter->fw_wait_cnt = (u8)((int)adapter->fw_wait_cnt + 1);
    
#line 3695 
    ;
    
#line 3695 
    if ((unsigned int)tmp_0 > 30U) 
#line 3696 
                                   qlcnic_clr_all_drv_state(adapter,(unsigned char)0);
    else 
      
#line 3697 
      if (npar_state != 1U) 
#line 3698 
                            qlcnic_schedule_work(adapter,& qlcnic_attach_work,250); else 
                                                                    
#line 3701 
                                                                    goto attach;
    
#line 3702 
    if (((adapter->ahw)->msg_enable & 1U) != 0U) {
      char const *tmp_1;
      
#line 3702 
      tmp_1 = dev_name((struct device const *)(& (adapter->pdev)->dev));
      
#line 3702 
      printk("\001",tmp_1,"qlcnic_attach_work");
    }
    else ;
    
#line 3703 
    goto return_label;
  }
  else ;
  attach: 
#line 3705 
  ;
  
#line 3706 
  qlcnic_dcb_get_info(adapter->dcb);
  
#line 3708 
  tmp_3 = netif_running((struct net_device const *)netdev);
  
#line 3708 
  if ((int)tmp_3 != 0) {
    int tmp_2;
    
#line 3709 
    tmp_2 = qlcnic_up(adapter,netdev);
    
#line 3709 
    if (tmp_2 != 0) 
#line 3710 
                    goto done; else ;
    
#line 3712 
    qlcnic_restore_indev_addr(netdev,1UL);
  }
  else ;
  done: 
#line 3715 
  ;
  
#line 3716 
  netif_device_attach(netdev);
  
#line 3717 
  adapter->fw_fail_cnt = (unsigned char)0U;
  
#line 3718 
  adapter->flags &= 4294950911U;
  
#line 3719 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 3720 
  if ((unsigned int)adapter->portnum == 0U) 
#line 3721 
                                            qlcnic_set_drv_version(adapter); else ;
  
#line 3723 
  tmp_4 = qlcnic_clr_drv_state(adapter);
  
#line 3723 
  if (tmp_4 == 0) 
#line 3724 
                  qlcnic_schedule_work(adapter,& qlcnic_fw_poll_work,250); else ;
  return_label: 
#line 3725 
                return;
}


#line 3729  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_check_health(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 heartbeat;
  u32 peg_status;
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  unsigned int tmp_5;
  
#line 3731 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 3732 
  struct qlcnic_fw_dump *fw_dump = & ahw->fw_dump;
  
#line 3733 
  u32 state = 0U;
  
#line 3735 
  int err = 0;
  
#line 3737 
  tmp = qlcnic_check_temp(adapter);
  
#line 3737 
  if (tmp != 0) 
#line 3738 
                goto detach; else ;
  
#line 3740 
  if ((unsigned int)adapter->need_fw_reset != 0U) 
#line 3741 
                                                  qlcnic_dev_request_reset(adapter,0U); else ;
  
#line 3743 
  state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 6U)));
  
#line 3744 
  if (state == 4U) {
    
#line 3745 
    qlcnic_set_npar_non_operational(adapter);
    
#line 3746 
    adapter->need_fw_reset = (unsigned char)1U;
  }
  else 
    
#line 3747 
    if (state == 5U) 
#line 3748 
                     goto detach; else ;
  
#line 3750 
  heartbeat = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 2U)));
  
#line 3751 
  if (adapter->heartbeat != heartbeat) {
    
#line 3752 
    adapter->heartbeat = heartbeat;
    
#line 3753 
    adapter->fw_fail_cnt = (unsigned char)0U;
    
#line 3754 
    if ((unsigned int)adapter->need_fw_reset != 0U) 
#line 3755 
                                                    goto detach; else ;
    
#line 3757 
    if ((unsigned int)ahw->reset_context != 0U && qlcnic_auto_fw_reset != 0) 
      
#line 3758 
      qlcnic_reset_hw_context(adapter); else ;
    
#line 3760 
    __retres = 0;
    
#line 3760 
    goto return_label;
  }
  else ;
  
#line 3763 
  adapter->fw_fail_cnt = (u8)((int)adapter->fw_fail_cnt + 1);
  
#line 3763 
  if ((unsigned int)adapter->fw_fail_cnt <= 1U) {
    
#line 3764 
    __retres = 0;
    
#line 3764 
    goto return_label;
  }
  else ;
  
#line 3766 
  adapter->flags |= 16384U;
  
#line 3768 
  qlcnic_dev_request_reset(adapter,0U);
  
#line 3770 
  if (qlcnic_auto_fw_reset != 0) 
#line 3771 
                                 set_bit(0L,(unsigned long volatile *)(& adapter->state)); else ;
  
#line 3773 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"firmware hang detected\n");
  
#line 3774 
  peg_status = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl)));
  
#line 3785 
  tmp_0 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,116391996UL,& err);
  
#line 3784 
  tmp_1 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,121634876UL,& err);
  
#line 3783 
  tmp_2 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,120586300UL,& err);
  
#line 3782 
  tmp_3 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,119537724UL,& err);
  
#line 3781 
  tmp_4 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,118489148UL,& err);
  
#line 3775 
  tmp_5 = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 1U)));
  
#line 3775 
  ;
  
#line 3775 
  ;
  
#line 3775 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"Dumping hw/fw registers\n",peg_status,tmp_5,tmp_4,tmp_3,tmp_2,tmp_1,tmp_0);
  
#line 3787 
  if (((peg_status >> 8) & 2097151U) == 103U) 
#line 3788 
                                              dev_err((struct device const *)(& (adapter->pdev)->dev),"Firmware aborted with error code 0x00006700. "); else ;
  detach: 
#line 3791 
  ;
  
#line 3792 
  if (state == 5U) 
#line 3792 
                   adapter->dev_state = (unsigned char)5U; else 
#line 3792 
                                                                adapter->dev_state = (unsigned char)4U;
  
#line 3795 
  if (qlcnic_auto_fw_reset != 0) {
    int tmp_7;
    
#line 3795 
    tmp_7 = test_and_set_bit(2L,(unsigned long volatile *)(& adapter->state));
    
#line 3795 
    if (tmp_7 == 0) {
      
#line 3798 
      qlcnic_schedule_work(adapter,& qlcnic_detach_work,0);
      
#line 3799 
      if (((adapter->ahw)->msg_enable & 1U) != 0U) {
        char const *tmp_6;
        
#line 3799 
        tmp_6 = dev_name((struct device const *)(& (adapter->pdev)->dev));
        
#line 3799 
        printk("\001",tmp_6,"qlcnic_check_health");
      }
      else ;
    }
    else 
#line 3795 
         goto _LAND;
  }
  else 
    _LAND: 
#line 3800 
           if ((qlcnic_auto_fw_reset == 0 && (int)fw_dump->enable != 0) && (adapter->flags & 8192U) != 0U) 
             
#line 3802 
             qlcnic_dump_fw(adapter); else ;
  
#line 3805 
  __retres = 1;
  return_label: 
#line 3805 
                return __retres;
}


#line 3808  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_fw_poll_work(struct work_struct *work)
{
  struct qlcnic_adapter *tmp;
  int tmp_0;
  int tmp_1;
  {
    
#line 3810 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 3810 
    tmp = (struct qlcnic_adapter *)__mptr + 18446744073709550712U;
  }
  
#line 3810 
  struct qlcnic_adapter *adapter = tmp;
  
#line 3813 
  tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 3813 
  if (tmp_0 != 0) 
#line 3814 
                  goto reschedule; else ;
  
#line 3817 
  tmp_1 = qlcnic_check_health(adapter);
  
#line 3817 
  if (tmp_1 != 0) 
#line 3818 
                  goto return_label; else ;
  
#line 3820 
  if ((unsigned int)adapter->fhash.fnum != 0U) 
#line 3821 
                                               qlcnic_prune_lb_filters(adapter); else ;
  reschedule: 
#line 3823 
  ;
  
#line 3824 
  qlcnic_schedule_work(adapter,& qlcnic_fw_poll_work,250);
  return_label: 
#line 3825 
                return;
}


#line 3827  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_is_first_func(struct pci_dev *pdev)
{
  int __retres;
  struct pci_dev *oth_pdev;
  int tmp;
  int tmp_0;
  
#line 3830 
  int val = (int)pdev->devfn;
  
#line 3832 
  goto ldv_57654;
  ldv_57655: 
#line 3833 
  ;
  
#line 3833 
  ;
  
#line 3833 
  ;
  
#line 3833 
  tmp = pci_domain_nr(pdev->bus);
  
#line 3833 
  oth_pdev = pci_get_domain_bus_and_slot(tmp,(unsigned int)(pdev->bus)->number,(pdev->devfn & 248U) | ((unsigned int)val & 7U));
  
#line 3836 
  if (oth_pdev == (struct pci_dev *)0) 
#line 3837 
                                       goto ldv_57654; else ;
  
#line 3839 
  if (oth_pdev->current_state != 4) {
    
#line 3840 
    pci_dev_put(oth_pdev);
    
#line 3841 
    __retres = 0;
    
#line 3841 
    goto return_label;
  }
  else ;
  
#line 3843 
  pci_dev_put(oth_pdev);
  ldv_57654: 
#line 3844 
  ;
  
#line 3832 
  tmp_0 = val;
  
#line 3832 
  val -= 1;
  
#line 3832 
  ;
  
#line 3832 
  if (tmp_0 > 0) 
#line 3834 
                 goto ldv_57655; else 
#line 3837 
                                      goto ldv_57656;
  ldv_57656: 
#line 3838 
  ;
  
#line 3845 
  __retres = 1;
  return_label: 
#line 3845 
                return __retres;
}


#line 3848  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_attach_func(struct pci_dev *pdev)
{
  int __retres;
  int err;
  int first_func;
  int tmp_0;
  bool tmp_2;
  
#line 3851 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  
#line 3852 
  struct net_device *netdev = adapter->netdev;
  
#line 3854 
  pdev->error_state = 1U;
  
#line 3856 
  err = pci_enable_device(pdev);
  
#line 3857 
  if (err != 0) {
    
#line 3858 
    __retres = err;
    
#line 3858 
    goto return_label;
  }
  else ;
  
#line 3860 
  pci_set_master(pdev);
  
#line 3861 
  pci_restore_state(pdev);
  
#line 3863 
  first_func = qlcnic_is_first_func(pdev);
  
#line 3865 
  tmp_0 = qlcnic_api_lock(adapter);
  
#line 3865 
  if (tmp_0 != 0) {
    
#line 3866 
    __retres = -22;
    
#line 3866 
    goto return_label;
  }
  else ;
  
#line 3868 
  if ((unsigned int)(adapter->ahw)->op_mode != 2U && first_func != 0) {
    
#line 3869 
    adapter->need_fw_reset = (unsigned char)1U;
    
#line 3870 
    set_bit(4L,(unsigned long volatile *)(& adapter->state));
    
#line 3871 
    writel(2U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 6U)));
    
#line 3873 
    if (((adapter->ahw)->msg_enable & 1U) != 0U) {
      char const *tmp_1;
      
#line 3873 
      tmp_1 = dev_name((struct device const *)(& (adapter->pdev)->dev));
      
#line 3873 
      printk("\001",tmp_1,"qlcnic_attach_func");
    }
    else ;
  }
  else ;
  
#line 3875 
  qlcnic_api_unlock(adapter);
  
#line 3877 
  err = qlcnic_start_firmware(adapter);
  
#line 3878 
  if (err != 0) {
    
#line 3879 
    __retres = err;
    
#line 3879 
    goto return_label;
  }
  else ;
  
#line 3881 
  qlcnic_clr_drv_state(adapter);
  
#line 3882 
  kfree((void const *)adapter->msix_entries);
  
#line 3883 
  adapter->msix_entries = (struct msix_entry *)0;
  
#line 3884 
  err = qlcnic_setup_intr(adapter);
  
#line 3886 
  if (err != 0) {
    
#line 3887 
    kfree((void const *)adapter->msix_entries);
    
#line 3888 
    netdev_err((struct net_device const *)netdev,"failed to setup interrupt\n");
    
#line 3889 
    __retres = err;
    
#line 3889 
    goto return_label;
  }
  else ;
  
#line 3892 
  tmp_2 = netif_running((struct net_device const *)netdev);
  
#line 3892 
  if ((int)tmp_2 != 0) {
    
#line 3893 
    err = qlcnic_attach(adapter);
    
#line 3894 
    if (err != 0) {
      
#line 3895 
      qlcnic_clr_all_drv_state(adapter,(unsigned char)1);
      
#line 3896 
      set_bit(5L,(unsigned long volatile *)(& adapter->state));
      
#line 3897 
      netif_device_attach(netdev);
      
#line 3898 
      __retres = err;
      
#line 3898 
      goto return_label;
    }
    else ;
    
#line 3901 
    err = qlcnic_up(adapter,netdev);
    
#line 3902 
    if (err != 0) 
#line 3903 
                  goto done; else ;
    
#line 3905 
    qlcnic_restore_indev_addr(netdev,1UL);
  }
  else ;
  done: 
#line 3907 
  ;
  
#line 3908 
  netif_device_attach(netdev);
  
#line 3909 
  __retres = err;
  return_label: 
#line 3909 
                return __retres;
}


#line 3912  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static pci_ers_result_t qlcnic_82xx_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  pci_ers_result_t __retres;
  bool tmp_0;
  
#line 3915 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  
#line 3916 
  struct net_device *netdev = adapter->netdev;
  
#line 3918 
  if (state == 3U) {
    
#line 3919 
    __retres = 4U;
    
#line 3919 
    goto return_label;
  }
  else ;
  
#line 3921 
  if (state == 1U) {
    
#line 3922 
    __retres = 5U;
    
#line 3922 
    goto return_label;
  }
  else ;
  
#line 3924 
  set_bit(5L,(unsigned long volatile *)(& adapter->state));
  
#line 3925 
  netif_device_detach(netdev);
  
#line 3927 
  cancel_delayed_work_sync(& adapter->fw_work);
  
#line 3929 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 3929 
  if ((int)tmp_0 != 0) 
#line 3930 
                       qlcnic_down(adapter,netdev); else ;
  
#line 3932 
  qlcnic_detach(adapter);
  
#line 3933 
  qlcnic_teardown_intr(adapter);
  
#line 3935 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 3937 
  pci_save_state(pdev);
  
#line 3938 
  pci_disable_device(pdev);
  
#line 3940 
  __retres = 3U;
  return_label: 
#line 3940 
                return __retres;
}


#line 3943  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static pci_ers_result_t qlcnic_82xx_io_slot_reset(struct pci_dev *pdev)
{
  pci_ers_result_t __retres;
  int tmp_0;
  int tmp;
  
#line 3945 
  tmp = qlcnic_attach_func(pdev);
  
#line 3945 
  if (tmp != 0) 
#line 3945 
                tmp_0 = 4; else 
#line 3945 
                                tmp_0 = 5;
  
#line 3945 
  __retres = (unsigned int)tmp_0;
  
#line 3945 
  return __retres;
}


#line 3949  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_82xx_io_resume(struct pci_dev *pdev)
{
  u32 state;
  
#line 3952 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  
#line 3954 
  pci_cleanup_aer_uncorrect_error_status(pdev);
  
#line 3955 
  state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 6U)));
  
#line 3956 
  if (state == 3U) {
    int tmp_0;
    
#line 3956 
    tmp_0 = test_and_set_bit(5L,(unsigned long volatile *)(& adapter->state));
    
#line 3956 
    if (tmp_0 != 0) 
#line 3958 
                    qlcnic_schedule_work(adapter,& qlcnic_fw_poll_work,250); else ;
  }
  else ;
  
#line 3959 
  return;
}


#line 3962  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static pci_ers_result_t qlcnic_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  pci_ers_result_t __retres;
  
#line 3965 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  
#line 3966 
  struct qlcnic_hardware_ops *hw_ops = (adapter->ahw)->hw_ops;
  
#line 3968 
  if (hw_ops->io_error_detected != (pci_ers_result_t (*)(struct pci_dev *, pci_channel_state_t ))0) {
    pci_ers_result_t tmp_0;
    
#line 3969 
    tmp_0 = (*(hw_ops->io_error_detected))(pdev,state);
    
#line 3969 
    __retres = tmp_0;
    
#line 3969 
    goto return_label;
  }
  else {
    
#line 3971 
    dev_err((struct device const *)(& pdev->dev),"AER error_detected handler not registered.\n");
    
#line 3972 
    __retres = 4U;
    
#line 3972 
    goto return_label;
  }
  return_label: 
#line 3968 
                return __retres;
}


#line 3976  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static pci_ers_result_t qlcnic_io_slot_reset(struct pci_dev *pdev)
{
  pci_ers_result_t __retres;
  
#line 3978 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  
#line 3979 
  struct qlcnic_hardware_ops *hw_ops = (adapter->ahw)->hw_ops;
  
#line 3981 
  if (hw_ops->io_slot_reset != (pci_ers_result_t (*)(struct pci_dev *))0) {
    pci_ers_result_t tmp_0;
    
#line 3982 
    tmp_0 = (*(hw_ops->io_slot_reset))(pdev);
    
#line 3982 
    __retres = tmp_0;
    
#line 3982 
    goto return_label;
  }
  else {
    
#line 3984 
    dev_err((struct device const *)(& pdev->dev),"AER slot_reset handler not registered.\n");
    
#line 3985 
    __retres = 4U;
    
#line 3985 
    goto return_label;
  }
  return_label: 
#line 3981 
                return __retres;
}


#line 3989  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_io_resume(struct pci_dev *pdev)
{
  
#line 3991 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  
#line 3992 
  struct qlcnic_hardware_ops *hw_ops = (adapter->ahw)->hw_ops;
  
#line 3994 
  if (hw_ops->io_resume != (void (*)(struct pci_dev *))0) 
#line 3995 
                                                          (*(hw_ops->io_resume))(pdev); else 
                                                                    
#line 3997 
                                                                    dev_err((struct device const *)(& pdev->dev),"AER resume handler not registered.\n");
  
#line 3998 
  return;
}


#line 4002  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnicvf_start_firmware(struct qlcnic_adapter *adapter)
{
  int __retres;
  int err;
  
#line 4006 
  err = qlcnic_can_start_firmware(adapter);
  
#line 4007 
  if (err != 0) {
    
#line 4008 
    __retres = err;
    
#line 4008 
    goto return_label;
  }
  else ;
  
#line 4010 
  err = qlcnic_check_npar_opertional(adapter);
  
#line 4011 
  if (err != 0) {
    
#line 4012 
    __retres = err;
    
#line 4012 
    goto return_label;
  }
  else ;
  
#line 4014 
  err = qlcnic_initialize_nic(adapter);
  
#line 4015 
  if (err != 0) {
    
#line 4016 
    __retres = err;
    
#line 4016 
    goto return_label;
  }
  else ;
  
#line 4018 
  qlcnic_check_options(adapter);
  
#line 4020 
  err = qlcnic_set_eswitch_port_config(adapter);
  
#line 4021 
  if (err != 0) {
    
#line 4022 
    __retres = err;
    
#line 4022 
    goto return_label;
  }
  else ;
  
#line 4024 
  adapter->need_fw_reset = (unsigned char)0U;
  
#line 4026 
  __retres = err;
  return_label: 
#line 4026 
                return __retres;
}


#line 4029  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_validate_rings(struct qlcnic_adapter *adapter, __u32 ring_cnt, int queue_type)
{
  int __retres;
  char buf[8U];
  int cur_rings;
  int tmp_0;
  bool tmp;
  bool tmp_1;
  unsigned int tmp_5;
  
#line 4032 
  struct net_device *netdev = adapter->netdev;
  
#line 4033 
  u8 max_hw_rings = (unsigned char)0U;
  
#line 4037 
  if (queue_type == 2) {
    
#line 4038 
    max_hw_rings = adapter->max_sds_rings;
    
#line 4039 
    cur_rings = (int)adapter->drv_sds_rings;
    
#line 4040 
    strcpy((char *)(& buf),"SDS");
  }
  else 
    
#line 4041 
    if (queue_type == 1) {
      
#line 4042 
      max_hw_rings = adapter->max_tx_rings;
      
#line 4043 
      cur_rings = (int)adapter->drv_tx_rings;
      
#line 4044 
      strcpy((char *)(& buf),"Tx");
    }
    else ;
  
#line 4047 
  tmp = is_power_of_2((unsigned long)ring_cnt);
  
#line 4047 
  if (tmp) 
#line 4047 
           tmp_0 = 0; else 
#line 4047 
                           tmp_0 = 1;
  
#line 4047 
  if (tmp_0) {
    
#line 4048 
    netdev_err((struct net_device const *)netdev,"%s rings value should be a power of 2\n",(char *)(& buf));
    
#line 4050 
    __retres = -22;
    
#line 4050 
    goto return_label;
  }
  else ;
  
#line 4053 
  tmp_1 = qlcnic_82xx_check(adapter);
  
#line 4053 
  if ((int)tmp_1 != 0) {
    
#line 4053 
    if (queue_type == 1) {
      int tmp_3;
      bool tmp_2;
      
#line 4054 
      tmp_2 = qlcnic_check_multi_tx(adapter);
      
#line 4054 
      if (tmp_2) 
#line 4054 
                 tmp_3 = 0; else 
#line 4054 
                                 tmp_3 = 1;
      
#line 4054 
      if (tmp_3) {
        
#line 4055 
        netdev_err((struct net_device const *)netdev,"No Multi Tx queue support\n");
        
#line 4056 
        __retres = -22;
        
#line 4056 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 4059 
  tmp_5 = cpumask_weight(cpu_online_mask);
  
#line 4059 
  ;
  
#line 4059 
  if (tmp_5 < ring_cnt) {
    unsigned int tmp_4;
    
#line 4062 
    tmp_4 = cpumask_weight(cpu_online_mask);
    
#line 4060 
    ;
    
#line 4060 
    netdev_err((struct net_device const *)netdev,"%s value[%u] should not be higher than, number of online CPUs\n",(char *)(& buf),tmp_4);
    
#line 4063 
    __retres = -22;
    
#line 4063 
    goto return_label;
  }
  else ;
  
#line 4066 
  __retres = 0;
  return_label: 
#line 4066 
                return __retres;
}


#line 4069  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
int qlcnic_setup_rings(struct qlcnic_adapter *adapter)
{
  int __retres;
  u8 tx_rings;
  u8 rx_rings;
  int err;
  int tmp;
  bool tmp_0;
  bool tmp_1;
  bool tmp_2;
  bool tmp_3;
  
#line 4071 
  struct net_device *netdev = adapter->netdev;
  
#line 4075 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 4075 
  if (tmp != 0) {
    
#line 4076 
    __retres = -16;
    
#line 4076 
    goto return_label;
  }
  else ;
  
#line 4078 
  tx_rings = adapter->drv_tss_rings;
  
#line 4079 
  rx_rings = adapter->drv_rss_rings;
  
#line 4081 
  netif_device_detach(netdev);
  
#line 4083 
  err = qlcnic_set_real_num_queues(adapter,(unsigned char)((int)tx_rings),(unsigned char)((int)rx_rings));
  
#line 4084 
  if (err != 0) 
#line 4085 
                goto done; else ;
  
#line 4087 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 4087 
  if ((int)tmp_0 != 0) 
#line 4088 
                       __qlcnic_down(adapter,netdev); else ;
  
#line 4090 
  qlcnic_detach(adapter);
  
#line 4092 
  tmp_1 = qlcnic_83xx_check(adapter);
  
#line 4092 
  if ((int)tmp_1 != 0) {
    
#line 4093 
    qlcnic_83xx_free_mbx_intr(adapter);
    
#line 4094 
    qlcnic_83xx_enable_mbx_poll(adapter);
  }
  else ;
  
#line 4097 
  qlcnic_teardown_intr(adapter);
  
#line 4099 
  err = qlcnic_setup_intr(adapter);
  
#line 4100 
  if (err != 0) {
    
#line 4101 
    kfree((void const *)adapter->msix_entries);
    
#line 4102 
    netdev_err((struct net_device const *)netdev,"failed to setup interrupt\n");
    
#line 4103 
    __retres = err;
    
#line 4103 
    goto return_label;
  }
  else ;
  
#line 4109 
  if ((int)adapter->drv_tx_rings != (int)tx_rings || (int)adapter->drv_sds_rings != (int)rx_rings) {
    
#line 4111 
    err = qlcnic_set_real_num_queues(adapter,(unsigned char)((int)adapter->drv_tx_rings),(unsigned char)((int)adapter->drv_sds_rings));
    
#line 4114 
    if (err != 0) 
#line 4115 
                  goto done; else ;
  }
  else ;
  
#line 4118 
  tmp_2 = qlcnic_83xx_check(adapter);
  
#line 4118 
  if ((int)tmp_2 != 0) {
    
#line 4119 
    qlcnic_83xx_initialize_nic(adapter,1);
    
#line 4120 
    err = qlcnic_83xx_setup_mbx_intr(adapter);
    
#line 4121 
    qlcnic_83xx_disable_mbx_poll(adapter);
    
#line 4122 
    if (err != 0) {
      
#line 4123 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"failed to setup mbx interrupt\n");
      
#line 4125 
      goto done;
    }
    else ;
  }
  else ;
  
#line 4129 
  tmp_3 = netif_running((struct net_device const *)netdev);
  
#line 4129 
  if ((int)tmp_3 != 0) {
    
#line 4130 
    err = qlcnic_attach(adapter);
    
#line 4131 
    if (err != 0) 
#line 4132 
                  goto done; else ;
    
#line 4133 
    err = __qlcnic_up(adapter,netdev);
    
#line 4134 
    if (err != 0) 
#line 4135 
                  goto done; else ;
    
#line 4136 
    qlcnic_restore_indev_addr(netdev,1UL);
  }
  else ;
  done: 
#line 4138 
  ;
  
#line 4139 
  netif_device_attach(netdev);
  
#line 4140 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 4141 
  __retres = err;
  return_label: 
#line 4141 
                return __retres;
}


#line 4149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_config_indev_addr(struct qlcnic_adapter *adapter, struct net_device *dev, unsigned long event)
{
  struct in_device *indev;
  
#line 4154 
  indev = in_dev_get((struct net_device const *)dev);
  
#line 4155 
  if (indev == (struct in_device *)0) 
#line 4156 
                                      goto return_label; else ;
  {
    struct in_ifaddr *ifa;
    
#line 4158 
    ifa = indev->ifa_list;
    
#line 4158 
    goto ldv_57729;
    ldv_57728: 
#line 4159 
    ;
    
#line 4159 
    switch (event) {
      case (unsigned long)1: 
#line 4160 
      ;
      
#line 4161 
      qlcnic_config_ipaddr(adapter,ifa->ifa_address,2);
      
#line 4163 
      goto ldv_57725;
      case (unsigned long)2: 
#line 4164 
      ;
      
#line 4165 
      qlcnic_config_ipaddr(adapter,ifa->ifa_address,3);
      
#line 4167 
      goto ldv_57725;
      default: 
#line 4168 
      ;
      
#line 4169 
      goto ldv_57725;
    }
    ldv_57725: 
#line 4171 
    ;
    
#line 4158 
    ifa = ifa->ifa_next;
    ldv_57729: 
#line 4159 
    ;
    
#line 4158 
    if (ifa != (struct in_ifaddr *)0) 
#line 4160 
                                      goto ldv_57728; else 
#line 4163 
                                                           goto ldv_57730;
    ldv_57730: 
#line 4164 
    ;
  }
  
#line 4173 
  in_dev_put(indev);
  return_label: 
#line 4174 
                return;
}


#line 4176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
void qlcnic_restore_indev_addr(struct net_device *netdev, unsigned long event)
{
  struct net_device *dev;
  u16 vid;
  unsigned long tmp_0;
  unsigned long tmp_1;
  
#line 4178 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 4182 
  qlcnic_config_indev_addr(adapter,netdev,event);
  
#line 4184 
  rcu_read_lock();
  
#line 4185 
  tmp_0 = find_first_bit((unsigned long const *)(& adapter->vlans),4096UL);
  
#line 4185 
  vid = (unsigned short)tmp_0;
  
#line 4185 
  goto ldv_57740;
  ldv_57739: 
#line 4186 
  ;
  
#line 4186 
  dev = __vlan_find_dev_deep_rcu(netdev,(unsigned short)129,(unsigned short)((int)vid));
  
#line 4187 
  if (dev == (struct net_device *)0) 
#line 4188 
                                     goto ldv_57738; else ;
  
#line 4189 
  qlcnic_config_indev_addr(adapter,dev,event);
  ldv_57738: 
#line 4190 
  ;
  
#line 4185 
  tmp_1 = find_next_bit((unsigned long const *)(& adapter->vlans),4096UL,(unsigned long)((int)vid + 1));
  
#line 4185 
  vid = (unsigned short)tmp_1;
  ldv_57740: 
#line 4186 
  ;
  
#line 4185 
  if ((unsigned int)vid <= 4095U) 
#line 4187 
                                  goto ldv_57739; else 
#line 4190 
                                                       goto ldv_57741;
  ldv_57741: 
#line 4191 
  ;
  
#line 4191 
  rcu_read_unlock();
  
#line 4192 
  return;
}


#line 4194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_netdev_event(struct notifier_block *this, unsigned long event, void *ptr)
{
  int __retres;
  struct qlcnic_adapter *adapter;
  int tmp_1;
  
#line 4198 
  struct net_device *dev = netdev_notifier_info_to_dev((struct netdev_notifier_info const *)ptr);
  recheck: 
#line 4200 
  ;
  
#line 4201 
  if (dev == (struct net_device *)0) 
#line 4202 
                                     goto done; else ;
  
#line 4204 
  if ((dev->priv_flags & 1U) != 0U) {
    
#line 4205 
    dev = vlan_dev_real_dev((struct net_device const *)dev);
    
#line 4206 
    goto recheck;
  }
  else ;
  
#line 4209 
  if (dev->netdev_ops != & qlcnic_netdev_ops) 
#line 4210 
                                              goto done; else ;
  
#line 4212 
  adapter = (struct qlcnic_adapter *)netdev_priv((struct net_device const *)dev);
  
#line 4214 
  if (adapter == (struct qlcnic_adapter *)0) 
#line 4215 
                                             goto done; else ;
  
#line 4217 
  tmp_1 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
  
#line 4217 
  if (tmp_1 == 0) 
#line 4218 
                  goto done; else ;
  
#line 4220 
  qlcnic_config_indev_addr(adapter,dev,event);
  done: 
#line 4221 
  ;
  
#line 4222 
  __retres = 0;
  
#line 4222 
  return __retres;
}


#line 4226  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_inetaddr_event(struct notifier_block *this, unsigned long event, void *ptr)
{
  int __retres;
  struct qlcnic_adapter *adapter;
  struct net_device *dev;
  int tmp_0;
  
#line 4232 
  struct in_ifaddr *ifa = (struct in_ifaddr *)ptr;
  
#line 4234 
  if (ifa->ifa_dev != (struct in_device *)0) 
#line 4234 
                                             dev = (ifa->ifa_dev)->dev; else 
                                                                    
#line 4234 
                                                                    dev = (struct net_device *)0;
  recheck: 
#line 4236 
  ;
  
#line 4237 
  if (dev == (struct net_device *)0) 
#line 4238 
                                     goto done; else ;
  
#line 4240 
  if ((dev->priv_flags & 1U) != 0U) {
    
#line 4241 
    dev = vlan_dev_real_dev((struct net_device const *)dev);
    
#line 4242 
    goto recheck;
  }
  else ;
  
#line 4245 
  if (dev->netdev_ops != & qlcnic_netdev_ops) 
#line 4246 
                                              goto done; else ;
  
#line 4248 
  adapter = (struct qlcnic_adapter *)netdev_priv((struct net_device const *)dev);
  
#line 4250 
  if (adapter == (struct qlcnic_adapter *)0) 
#line 4251 
                                             goto done; else ;
  
#line 4253 
  tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
  
#line 4253 
  if (tmp_0 == 0) 
#line 4254 
                  goto done; else ;
  
#line 4256 
  switch (event) {
    case (unsigned long)1: 
#line 4257 
    ;
    
#line 4258 
    qlcnic_config_ipaddr(adapter,ifa->ifa_address,2);
    
#line 4260 
    goto ldv_57762;
    case (unsigned long)2: 
#line 4261 
    ;
    
#line 4262 
    qlcnic_config_ipaddr(adapter,ifa->ifa_address,3);
    
#line 4264 
    goto ldv_57762;
    default: 
#line 4265 
    ;
    
#line 4266 
    goto ldv_57762;
  }
  ldv_57762: 
#line 4269 
  ;
  done: 
#line 4269 
  ;
  
#line 4270 
  __retres = 0;
  
#line 4270 
  return __retres;
}


#line 4273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct notifier_block qlcnic_netdev_cb = {.notifier_call = & qlcnic_netdev_event, .next = (struct notifier_block *)0, .priority = 0};

#line 4277  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct notifier_block qlcnic_inetaddr_cb = {.notifier_call = & qlcnic_inetaddr_event, .next = (struct notifier_block *)0, .priority = 0};

#line 4284  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct pci_error_handlers const qlcnic_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& qlcnic_io_error_detected), .mmio_enabled = (pci_ers_result_t (*)(struct pci_dev *))0, .link_reset = (pci_ers_result_t (*)(struct pci_dev *))0, .slot_reset = & qlcnic_io_slot_reset, .reset_notify = (void (*)(struct pci_dev *, bool ))0, .resume = & qlcnic_io_resume};

#line 4290  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static struct pci_driver qlcnic_driver = {.node = {.next = (struct list_head *)0, .prev = (struct list_head *)0}, .name = (char const *)(& qlcnic_driver_name), .id_table = (struct pci_device_id const *)(& qlcnic_pci_tbl), .probe = & qlcnic_probe, .remove = & qlcnic_remove, .suspend = & qlcnic_suspend, .suspend_late = (int (*)(struct pci_dev *, pm_message_t ))0, .resume_early = (int (*)(struct pci_dev *))0, .resume = & qlcnic_resume, .shutdown = & qlcnic_shutdown, .sriov_configure = & qlcnic_pci_sriov_configure, .err_handler = & qlcnic_err_handler, .driver = {.name = (char const *)0, .bus = (struct bus_type *)0, .owner = (struct module *)0, .mod_name = (char const *)0, .suppress_bind_attrs = (_Bool)0, .probe_type = 0, .of_match_table = (struct of_device_id const *)0, .acpi_match_table = (struct acpi_device_id const *)0, .probe = (int (*)(struct device *))0, .remove = (int (*)(struct device *))0, .shutdown = (void (*)(struct device *))0, .suspend = (int (*)(struct device *, pm_message_t ))0, .resume = (int (*)(struct device *))0, .groups = (struct attribute_group const **)0, .pm = (struct dev_pm_ops const *)0, .p = (struct driver_private *)0}, .dynids = {.lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 0U, .owner_cpu = 0U, .owner = (void *)0, .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char const *)0, .cpu = 0, .ip = 0UL}}}}, .list = {.next = (struct list_head *)0, .prev = (struct list_head *)0}}};

#line 4307  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static int qlcnic_init_module(void)
{
  int ret;
  
#line 4311 
  printk("\001",(char const *)(& qlcnic_driver_string));
  
#line 4314 
  register_netdevice_notifier(& qlcnic_netdev_cb);
  
#line 4315 
  register_inetaddr_notifier(& qlcnic_inetaddr_cb);
  
#line 4318 
  ret = ldv___pci_register_driver_86(& qlcnic_driver,& __this_module,"qlcnic");
  
#line 4319 
  if (ret != 0) {
    
#line 4321 
    unregister_inetaddr_notifier(& qlcnic_inetaddr_cb);
    
#line 4322 
    unregister_netdevice_notifier(& qlcnic_netdev_cb);
  }
  else ;
  
#line 4326 
  return ret;
}


#line 4331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_main.c"
static void qlcnic_exit_module(void)
{
  
#line 4333 
  ldv_pci_unregister_driver_87(& qlcnic_driver);
  
#line 4336 
  unregister_inetaddr_notifier(& qlcnic_inetaddr_cb);
  
#line 4337 
  unregister_netdevice_notifier(& qlcnic_netdev_cb);
  
#line 4338 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
struct pci_driver *ldv_emg_alias_qlcnic_driver_2 = & qlcnic_driver;

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
int (*ldv_emg_alias_eth_validate_addr_23)(struct net_device *) = & eth_validate_addr;

#line 62 
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);


#line 63 
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0);


#line 65 
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);


#line 66 
void ldv_emg_unregister_netdev(struct net_device *arg0);


#line 67 
void ldv_emg_free_irq(unsigned int arg0, void *arg1);


#line 68 
_Bool ldv_emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2);


#line 69 
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);


#line 70 
void ldv_emg_free_netdev(struct net_device *arg0);


#line 71 
int ldv_emg_register_netdev(struct net_device *arg0);


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
void ldv_emg_wrapper_qlcnic_tx_timeout_10(struct net_device *arg0)
{
  
#line 76 
  qlcnic_tx_timeout(arg0);
  
#line 77 
  return;
}


#line 80  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
int ldv_emg_wrapper_qlcnic_resume_6(struct pci_dev *arg0)
{
  int tmp;
  
#line 81 
  tmp = qlcnic_resume(arg0);
  
#line 81 
  return tmp;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
int ldv_emg_wrapper_qlcnic_fdb_del_12(struct ndmsg *arg0, struct nlattr **arg1, struct net_device *arg2, unsigned char *arg3, unsigned short arg4)
{
  int tmp;
  
#line 86 
  tmp = qlcnic_fdb_del(arg0,arg1,arg2,(unsigned char const *)arg3,(unsigned short)((int)arg4));
  
#line 86 
  return tmp;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
int ldv_emg_wrapper_qlcnic_get_phys_port_id_38(struct net_device *arg0, struct netdev_phys_item_id *arg1)
{
  int tmp;
  
#line 91 
  tmp = qlcnic_get_phys_port_id(arg0,arg1);
  
#line 91 
  return tmp;
}


#line 95  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
void ldv_emg_wrapper_qlcnic_shutdown_2(struct pci_dev *arg0)
{
  
#line 96 
  qlcnic_shutdown(arg0);
  
#line 97 
  return;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
void ldv_emg_wrapper_qlcnic_poll_controller_43(struct net_device *arg0)
{
  
#line 101 
  qlcnic_poll_controller(arg0);
  
#line 102 
  return;
}


#line 105  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
int ldv_emg_wrapper_qlcnic_close_2(struct net_device *arg0)
{
  int tmp;
  
#line 106 
  tmp = qlcnic_close(arg0);
  
#line 106 
  return tmp;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
int ldv_emg_wrapper_qlcnic_fdb_add_13(struct ndmsg *arg0, struct nlattr **arg1, struct net_device *arg2, unsigned char *arg3, unsigned short arg4, unsigned short arg5)
{
  int tmp;
  
#line 111 
  tmp = qlcnic_fdb_add(arg0,arg1,arg2,(unsigned char const *)arg3,(unsigned short)((int)arg4),(unsigned short)((int)arg5));
  
#line 111 
  return tmp;
}


#line 115  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
int ldv_emg_wrapper_qlcnic_set_mac_9(struct net_device *arg0, void *arg1)
{
  int tmp;
  
#line 116 
  tmp = qlcnic_set_mac(arg0,arg1);
  
#line 116 
  return tmp;
}


#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
unsigned long long ldv_emg_wrapper_qlcnic_features_check_35(struct sk_buff *arg0, struct net_device *arg1, unsigned long long arg2)
{
  unsigned long long tmp;
  
#line 121 
  tmp = qlcnic_features_check(arg0,arg1,arg2);
  
#line 121 
  return tmp;
}


#line 125  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
struct net_device_stats *ldv_emg_wrapper_qlcnic_get_stats_16(struct net_device *arg0)
{
  struct net_device_stats *tmp;
  
#line 126 
  tmp = qlcnic_get_stats(arg0);
  
#line 126 
  return tmp;
}


#line 130  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
void ldv_emg_wrapper_qlcnic_del_vxlan_port_17(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  
#line 131 
  qlcnic_del_vxlan_port(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 132 
  return;
}


#line 135  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
void ldv_emg_qlcnic_exit_module(void)
{
  
#line 136 
  qlcnic_exit_module();
  
#line 137 
  return;
}


#line 139  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
int ldv_emg_wrapper_qlcnic_vlan_rx_add_33(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  int tmp;
  
#line 140 
  tmp = qlcnic_vlan_rx_add(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 140 
  return tmp;
}


#line 144  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
int ldv_emg_wrapper_qlcnic_open_2(struct net_device *arg0)
{
  int tmp;
  
#line 145 
  tmp = qlcnic_open(arg0);
  
#line 145 
  return tmp;
}


#line 149  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
int ldv_emg_wrapper_qlcnic_probe_3(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  int tmp;
  
#line 150 
  tmp = qlcnic_probe(arg0,(struct pci_device_id const *)arg1);
  
#line 150 
  return tmp;
}


#line 154  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
void ldv_emg_wrapper_qlcnic_add_vxlan_port_27(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  
#line 155 
  qlcnic_add_vxlan_port(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 156 
  return;
}


#line 159  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
int ldv_emg_wrapper_qlcnic_fdb_dump_31(struct sk_buff *arg0, struct netlink_callback *arg1, struct net_device *arg2, struct net_device *arg3, int arg4)
{
  int tmp;
  
#line 160 
  tmp = qlcnic_fdb_dump(arg0,arg1,arg2,arg3,arg4);
  
#line 160 
  return tmp;
}


#line 164  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
int ldv_emg_qlcnic_init_module(void)
{
  int tmp;
  
#line 165 
  tmp = qlcnic_init_module();
  
#line 165 
  return tmp;
}


#line 168  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
int ldv_emg_wrapper_qlcnic_vlan_rx_del_42(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  int tmp;
  
#line 169 
  tmp = qlcnic_vlan_rx_del(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 169 
  return tmp;
}


#line 173  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
int ldv_emg_wrapper_qlcnic_suspend_4(struct pci_dev *arg0, struct pm_message arg1)
{
  int tmp;
  
#line 174 
  tmp = qlcnic_suspend(arg0,arg1);
  
#line 174 
  return tmp;
}


#line 178  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
void ldv_emg_wrapper_qlcnic_remove_5(struct pci_dev *arg0)
{
  
#line 179 
  qlcnic_remove(arg0);
  
#line 180 
  return;
}


#line 237  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static void atomic_inc(atomic_t *v)
{
  
#line 240 
  ldv_atomic_inc(v);
  
#line 241 
  return;
}


#line 251  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static int atomic_dec_and_test(atomic_t *v)
{
  int tmp;
  
#line 254 
  tmp = ldv_atomic_dec_and_test(v);
  
#line 254 
  return tmp;
}


#line 617  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 620 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 620 
  return tmp;
}


#line 624  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static void *kzalloc_2(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 627 
  tmp = ldv_kzalloc(size,flags);
  
#line 627 
  return tmp;
}


#line 737  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static void ldv_spin_lock_62(spinlock_t *lock)
{
  
#line 741 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  
#line 743 
  spin_lock_0(lock);
  
#line 744 
  return;
}


#line 780  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static void ldv_spin_unlock_65(spinlock_t *lock)
{
  
#line 784 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  
#line 786 
  spin_unlock_0(lock);
  
#line 787 
  return;
}


#line 880  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static int ldv_request_irq_75(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 884 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 884 
  return tmp;
}


#line 888  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static int ldv_request_irq_76(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 892 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 892 
  return tmp;
}


#line 896  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static void ldv_free_irq_77(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 900 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 901 
  return;
}


#line 904  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static void ldv_free_irq_78(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 908 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 909 
  return;
}


#line 912  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static int ldv_register_netdev_79(struct net_device *ldv_func_arg1)
{
  int tmp;
  
#line 916 
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  
#line 916 
  return tmp;
}


#line 920  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static struct net_device *ldv_alloc_etherdev_mqs_80(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3)
{
  struct net_device *tmp;
  
#line 924 
  tmp = ldv_emg_alloc_etherdev_mqs(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
  
#line 924 
  return tmp;
}


#line 928  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static void ldv_free_netdev_81(struct net_device *ldv_func_arg1)
{
  
#line 932 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 933 
  return;
}


#line 936  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static int ldv_register_netdev_82(struct net_device *ldv_func_arg1)
{
  int tmp;
  
#line 940 
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  
#line 940 
  return tmp;
}


#line 944  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static void ldv_unregister_netdev_83(struct net_device *ldv_func_arg1)
{
  
#line 948 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 949 
  return;
}


#line 952  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static void ldv_free_netdev_84(struct net_device *ldv_func_arg1)
{
  
#line 956 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 957 
  return;
}


#line 960  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static bool ldv_queue_delayed_work_85(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 964 
  tmp = ldv_emg_queue_delayed_work(wq,dwork,delay);
  
#line 964 
  __retres = tmp != 0;
  
#line 964 
  return __retres;
}


#line 968  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static int ldv___pci_register_driver_86(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3)
{
  int tmp;
  
#line 972 
  tmp = ldv_emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,(char *)ldv_func_arg3);
  
#line 972 
  return tmp;
}


#line 976  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_main.c.aux"
static void ldv_pci_unregister_driver_87(struct pci_driver *ldv_func_arg1)
{
  
#line 980 
  ldv_emg_pci_unregister_driver(ldv_func_arg1);
  
#line 981 
  return;
}


#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
void dump_stack(void);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_api_smp.h"
unsigned long _raw_write_lock_irqsave(rwlock_t *);


#line 40 
void _raw_write_unlock_irqrestore(rwlock_t *, unsigned long);


#line 355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  
#line 357 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 358 
  return;
}


#line 375 
static void ldv_spin_lock_bh_63(spinlock_t *lock);


#line 383 
static void ldv_spin_lock_bh_75_0(spinlock_t *lock);


#line 387 
static void ldv_spin_lock_bh_77(spinlock_t *lock);


#line 391 
static void ldv_spin_lock_bh_79(spinlock_t *lock);


#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  
#line 406 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 407 
  return;
}


#line 424 
static void ldv_spin_unlock_bh_66(spinlock_t *lock);


#line 436 
static void ldv_spin_unlock_bh_76_0(spinlock_t *lock);


#line 440 
static void ldv_spin_unlock_bh_78(spinlock_t *lock);


#line 444 
static void ldv_spin_unlock_bh_80(spinlock_t *lock);


#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_mutex_lock_81(struct mutex *ldv_func_arg1);


#line 41 
static void ldv_mutex_lock_83(struct mutex *ldv_func_arg1);


#line 45 
static void ldv_mutex_lock_85(struct mutex *ldv_func_arg1);


#line 49 
static void ldv_mutex_lock_87(struct mutex *ldv_func_arg1);


#line 53 
static void ldv_mutex_lock_89(struct mutex *ldv_func_arg1);


#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
static void ldv_mutex_unlock_82(struct mutex *ldv_func_arg1);


#line 197 
static void ldv_mutex_unlock_84(struct mutex *ldv_func_arg1);


#line 201 
static void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1);


#line 205 
static void ldv_mutex_unlock_88(struct mutex *ldv_func_arg1);


#line 209 
static void ldv_mutex_unlock_90(struct mutex *ldv_func_arg1);


#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned long readq(void const volatile *addr)
{
  unsigned long ret;
  
#line 91 
  ldv_inline_asm();
  
#line 90 
  return ret;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writeq(unsigned long val, void volatile *addr)
{
  
#line 93 
  ldv_inline_asm();
  
#line 94 
  return;
}


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_3(size_t size, gfp_t flags);


#line 863  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pci_bus_read_config_dword(struct pci_bus *, unsigned int, int, u32 *);


#line 891  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_read_config_dword(struct pci_dev const *dev, int where, u32 *val)
{
  int tmp;
  
#line 894 
  tmp = pci_bus_read_config_dword(dev->bus,dev->devfn,where,val);
  
#line 894 
  return tmp;
}


#line 1044 
int __pci_enable_wake(struct pci_dev *, pci_power_t, bool, bool);


#line 1053  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_enable_wake(struct pci_dev *dev, pci_power_t state, bool enable)
{
  int tmp;
  
#line 1056 
  tmp = __pci_enable_wake(dev,state,(_Bool)0,(_Bool)((bool)((int)enable) != 0));
  
#line 1056 
  return tmp;
}


#line 3176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_lock_bh(struct netdev_queue *txq)
{
  int tmp_3;
  
#line 3178 
  ldv_spin_lock_bh_63(& txq->_xmit_lock);
  {
    int pscr_ret__;
    {
      
#line 3179 
      void const *__vpp_verify = (void const *)0;
      
#line 3179 
      void const *tmp = __vpp_verify;
    }
    
#line 3179 
    switch (4UL) {
      int tmp_0;
      int tmp_0_0;
      int tmp_1;
      int tmp_2;
      case (unsigned long)1: 
#line 3179 
      ;
      {
        int pfo_ret__;
        
#line 3179 
        switch (4UL) {
          case (unsigned long)1: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_45199;
          case (unsigned long)2: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_45199;
          case (unsigned long)4: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_45199;
          case (unsigned long)8: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_45199;
          default: 
#line 3179 
          ;
          
#line 3179 
          __bad_percpu_size();
        }
        ldv_45199: 
#line 3179 
        ;
        
#line 3179 
        tmp_0 = pfo_ret__;
      }
      
#line 3179 
      pscr_ret__ = tmp_0;
      
#line 3179 
      goto ldv_45205;
      case (unsigned long)2: 
#line 3179 
      ;
      {
        int pfo_ret___0;
        
#line 3179 
        switch (4UL) {
          case (unsigned long)1: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_45209;
          case (unsigned long)2: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_45209;
          case (unsigned long)4: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_45209;
          case (unsigned long)8: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_45209;
          default: 
#line 3179 
          ;
          
#line 3179 
          __bad_percpu_size();
        }
        ldv_45209: 
#line 3179 
        ;
        
#line 3179 
        tmp_0_0 = pfo_ret___0;
      }
      
#line 3179 
      pscr_ret__ = tmp_0_0;
      
#line 3179 
      goto ldv_45205;
      case (unsigned long)4: 
#line 3179 
      ;
      {
        int pfo_ret___1;
        
#line 3179 
        switch (4UL) {
          case (unsigned long)1: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_45218;
          case (unsigned long)2: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_45218;
          case (unsigned long)4: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_45218;
          case (unsigned long)8: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_45218;
          default: 
#line 3179 
          ;
          
#line 3179 
          __bad_percpu_size();
        }
        ldv_45218: 
#line 3179 
        ;
        
#line 3179 
        tmp_1 = pfo_ret___1;
      }
      
#line 3179 
      pscr_ret__ = tmp_1;
      
#line 3179 
      goto ldv_45205;
      case (unsigned long)8: 
#line 3179 
      ;
      {
        int pfo_ret___2;
        
#line 3179 
        switch (4UL) {
          case (unsigned long)1: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_45227;
          case (unsigned long)2: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_45227;
          case (unsigned long)4: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_45227;
          case (unsigned long)8: 
#line 3179 
          ;
          
#line 3180 
          ldv_inline_asm();
          
#line 3179 
          goto ldv_45227;
          default: 
#line 3179 
          ;
          
#line 3179 
          __bad_percpu_size();
        }
        ldv_45227: 
#line 3179 
        ;
        
#line 3179 
        tmp_2 = pfo_ret___2;
      }
      
#line 3179 
      pscr_ret__ = tmp_2;
      
#line 3179 
      goto ldv_45205;
      default: 
#line 3179 
      ;
      
#line 3179 
      __bad_size_call_parameter();
      
#line 3179 
      goto ldv_45205;
    }
    ldv_45205: 
#line 3179 
    ;
    
#line 3179 
    tmp_3 = pscr_ret__;
  }
  
#line 3179 
  txq->xmit_lock_owner = tmp_3;
  
#line 3181 
  return;
}


#line 3196  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_unlock_bh(struct netdev_queue *txq)
{
  
#line 3198 
  txq->xmit_lock_owner = -1;
  
#line 3199 
  ldv_spin_unlock_bh_66(& txq->_xmit_lock);
  
#line 3200 
  return;
}


#line 548  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
int qlcnic_83xx_wrt_reg_indirect(struct qlcnic_adapter *adapter, ulong addr, u32 data);


#line 1545  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
int qlcnic_pci_mem_write_2M(struct qlcnic_adapter *adapter, u64 off, u64 data);


#line 1546 
int qlcnic_pci_mem_read_2M(struct qlcnic_adapter *adapter, u64 off, u64 *data);


#line 1557 
int qlcnic_pcie_sem_lock(struct qlcnic_adapter *adapter, int sem, u32 id_reg);


#line 1558 
void qlcnic_pcie_sem_unlock(struct qlcnic_adapter *adapter, int sem);


#line 1598 
int qlcnic_rom_fast_read(struct qlcnic_adapter *adapter, u32 addr, u32 *valp);


#line 1622 
void qlcnic_flush_mcast_mac(struct qlcnic_adapter *adapter);


#line 1623 
int qlcnic_nic_add_mac(struct qlcnic_adapter *adapter, u8 const *addr, u16 vlan, enum qlcnic_mac_type mac_type);


#line 1709 
void qlcnic_sriov_vf_set_multi(struct net_device *netdev);


#line 1844  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_start_firmware_0(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 1846 
  tmp = (*((adapter->nic_ops)->start_firmware))(adapter);
  
#line 1846 
  return tmp;
}


#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static struct crb_128M_2M_block_map crb_128M_2M_map[64U] = {{.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 1U, .start_128M = 1048576U, .end_128M = 1056768U, .start_2M = 1179648U}, {.valid = 1U, .start_128M = 1114112U, .end_128M = 1179648U, .start_2M = 1245184U}, {.valid = 1U, .start_128M = 1179648U, .end_128M = 1187840U, .start_2M = 1196032U}, {.valid = 1U, .start_128M = 1245184U, .end_128M = 1253376U, .start_2M = 1204224U}, {.valid = 1U, .start_128M = 1310720U, .end_128M = 1318912U, .start_2M = 1212416U}, {.valid = 1U, .start_128M = 1376256U, .end_128M = 1384448U, .start_2M = 1220608U}, {.valid = 1U, .start_128M = 1441792U, .end_128M = 1507328U, .start_2M = 1114112U}, {.valid = 1U, .start_128M = 1507328U, .end_128M = 1515520U, .start_2M = 1236992U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 1U, .start_128M = 1966080U, .end_128M = 1968128U, .start_2M = 1187840U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 1U, .start_128M = 2097152U, .end_128M = 2162688U, .start_2M = 1572864U}}}, {.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 1U, .start_128M = 4194304U, .end_128M = 4198400U, .start_2M = 1478656U}}}, {.sub_block = {{.valid = 1U, .start_128M = 5242880U, .end_128M = 5308416U, .start_2M = 1310720U}}}, {.sub_block = {{.valid = 1U, .start_128M = 6291456U, .end_128M = 6356992U, .start_2M = 1835008U}}}, {.sub_block = {{.valid = 1U, .start_128M = 7340032U, .end_128M = 7356416U, .start_2M = 1802240U}}}, {.sub_block = {{.valid = 1U, .start_128M = 8388608U, .end_128M = 8396800U, .start_2M = 1507328U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 1U, .start_128M = 9371648U, .end_128M = 9379840U, .start_2M = 1515520U}}}, {.sub_block = {{.valid = 1U, .start_128M = 9437184U, .end_128M = 9445376U, .start_2M = 1523712U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 1U, .start_128M = 10420224U, .end_128M = 10428416U, .start_2M = 1531904U}}}, {.sub_block = {{.valid = 0U, .start_128M = 10485760U, .end_128M = 10493952U, .start_2M = 1540096U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 1U, .start_128M = 11468800U, .end_128M = 11476992U, .start_2M = 1548288U}}}, {.sub_block = {{.valid = 0U, .start_128M = 11534336U, .end_128M = 11542528U, .start_2M = 1556480U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 1U, .start_128M = 12517376U, .end_128M = 12525568U, .start_2M = 1564672U}}}, {.sub_block = {{.valid = 1U, .start_128M = 12582912U, .end_128M = 12599296U, .start_2M = 1916928U}}}, {.sub_block = {{.valid = 1U, .start_128M = 13631488U, .end_128M = 13647872U, .start_2M = 1720320U}}}, {.sub_block = {{.valid = 1U, .start_128M = 14680064U, .end_128M = 14696448U, .start_2M = 1703936U}}}, {.sub_block = {{.valid = 1U, .start_128M = 15728640U, .end_128M = 15732736U, .start_2M = 1458176U}}}, {.sub_block = {{.valid = 0U, .start_128M = 16777216U, .end_128M = 16793600U, .start_2M = 1736704U}}}, {.sub_block = {{.valid = 1U, .start_128M = 17825792U, .end_128M = 17829888U, .start_2M = 1441792U}}}, {.sub_block = {{.valid = 1U, .start_128M = 18874368U, .end_128M = 18878464U, .start_2M = 1445888U}}}, {.sub_block = {{.valid = 1U, .start_128M = 19922944U, .end_128M = 19927040U, .start_2M = 1449984U}}}, {.sub_block = {{.valid = 1U, .start_128M = 20971520U, .end_128M = 20975616U, .start_2M = 1454080U}}}, {.sub_block = {{.valid = 1U, .start_128M = 22020096U, .end_128M = 22024192U, .start_2M = 1462272U}}}, {.sub_block = {{.valid = 1U, .start_128M = 23068672U, .end_128M = 23072768U, .start_2M = 1466368U}}}, {.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 1U, .start_128M = 30408704U, .end_128M = 30474240U, .start_2M = 1638400U}}}, {.sub_block = {{.valid = 1U, .start_128M = 31457280U, .end_128M = 31461376U, .start_2M = 1482752U}}}, {.sub_block = {{.valid = 1U, .start_128M = 32505856U, .end_128M = 32571392U, .start_2M = 1376256U}}}, {.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 1U, .start_128M = 34603008U, .end_128M = 34611200U, .start_2M = 1179648U}, {.valid = 1U, .start_128M = 34668544U, .end_128M = 34734080U, .start_2M = 1245184U}, {.valid = 1U, .start_128M = 34734080U, .end_128M = 34742272U, .start_2M = 1196032U}, {.valid = 1U, .start_128M = 34799616U, .end_128M = 34807808U, .start_2M = 1204224U}, {.valid = 1U, .start_128M = 34865152U, .end_128M = 34873344U, .start_2M = 1212416U}, {.valid = 1U, .start_128M = 34930688U, .end_128M = 34938880U, .start_2M = 1220608U}, {.valid = 1U, .start_128M = 34996224U, .end_128M = 35061760U, .start_2M = 1114112U}, {.valid = 1U, .start_128M = 35061760U, .end_128M = 35069952U, .start_2M = 1236992U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}, {.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 1U, .start_128M = 35651584U, .end_128M = 35667968U, .start_2M = 1769472U}}}, {.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 1U, .start_128M = 41943040U, .end_128M = 41959424U, .start_2M = 1720320U}}}, {.sub_block = {{.valid = 1U, .start_128M = 42991616U, .end_128M = 42995712U, .start_2M = 1486848U}}}, {.sub_block = {{.valid = 1U, .start_128M = 44040192U, .end_128M = 44041216U, .start_2M = 1754112U}}}, {.sub_block = {{.valid = 1U, .start_128M = 45088768U, .end_128M = 45089792U, .start_2M = 1755136U}}}, {.sub_block = {{.valid = 1U, .start_128M = 46137344U, .end_128M = 46138368U, .start_2M = 1756160U}}}, {.sub_block = {{.valid = 1U, .start_128M = 47185920U, .end_128M = 47186944U, .start_2M = 1757184U}}}, {.sub_block = {{.valid = 1U, .start_128M = 48234496U, .end_128M = 48235520U, .start_2M = 1758208U}}}, {.sub_block = {{.valid = 1U, .start_128M = 49283072U, .end_128M = 49284096U, .start_2M = 1759232U}}}, {.sub_block = {{.valid = 1U, .start_128M = 50331648U, .end_128M = 50332672U, .start_2M = 1760256U}}}, {.sub_block = {{.valid = 0U, .start_128M = 51380224U, .end_128M = 51396608U, .start_2M = 1736704U}}}, {.sub_block = {{.valid = 1U, .start_128M = 52428800U, .end_128M = 52445184U, .start_2M = 1916928U}}}, {.sub_block = {{.valid = 1U, .start_128M = 53477376U, .end_128M = 53493760U, .start_2M = 1703936U}}}, {.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 1U, .start_128M = 55574528U, .end_128M = 55575552U, .start_2M = 1753088U}}}, {.sub_block = {{.valid = 1U, .start_128M = 56623104U, .end_128M = 56624128U, .start_2M = 1761280U}}}, {.sub_block = {{.valid = 1U, .start_128M = 57671680U, .end_128M = 57672704U, .start_2M = 1762304U}}}, {.sub_block = {{.valid = 1U, .start_128M = 58720256U, .end_128M = 58736640U, .start_2M = 1900544U}}}, {.sub_block = {{.valid = 1U, .start_128M = 59768832U, .end_128M = 59785216U, .start_2M = 1785856U}}}, {.sub_block = {{.valid = 1U, .start_128M = 60817408U, .end_128M = 60833792U, .start_2M = 1933312U}}}, {.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 0U, .start_128M = 0U, .end_128M = 0U, .start_2M = 0U}}}, {.sub_block = {{.valid = 1U, .start_128M = 63963136U, .end_128M = 63979520U, .start_2M = 1933312U}}}, {.sub_block = {{.valid = 1U, .start_128M = 65011712U, .end_128M = 65015808U, .start_2M = 1470464U}}}, {.sub_block = {{.valid = 1U, .start_128M = 66060288U, .end_128M = 66064384U, .start_2M = 1474560U}}}};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static unsigned int const crb_hub_agt[64U] = {0U, 1907U, 661U, 677U, 0U, 208U, 433U, 230U, 224U, 225U, 226U, 227U, 1056U, 1047U, 1057U, 843U, 1029U, 832U, 833U, 834U, 835U, 837U, 836U, 960U, 961U, 962U, 963U, 0U, 964U, 1040U, 0U, 209U, 0U, 1907U, 1046U, 0U, 0U, 0U, 0U, 0U, 1047U, 0U, 137U, 1802U, 1803U, 1804U, 141U, 142U, 1807U, 1029U, 1056U, 1057U, 0U, 136U, 145U, 1810U, 1030U, 0U, 1816U, 409U, 425U, 0U, 838U, 0U};

#line 290  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static void qlcnic_read_window_reg(u32 addr, void *bar0, u32 *data)
{
  u32 dest;
  void *val;
  
#line 295 
  dest = addr & 4294901760U;
  
#line 296 
  val = bar0 + 1245280U;
  
#line 297 
  writel(dest,(void volatile *)val);
  
#line 298 
  readl((void const volatile *)val);
  
#line 299 
  val = bar0 + ((unsigned int)((unsigned short)addr) + 1966080U);
  
#line 300 
  *data = readl((void const volatile *)val);
  
#line 301 
  return;
}


#line 303  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static void qlcnic_write_window_reg(u32 addr, void *bar0, u32 data)
{
  u32 dest;
  void *val;
  
#line 308 
  dest = addr & 4294901760U;
  
#line 309 
  val = bar0 + 1245280U;
  
#line 310 
  writel(dest,(void volatile *)val);
  
#line 311 
  readl((void const volatile *)val);
  
#line 312 
  val = bar0 + ((unsigned int)((unsigned short)addr) + 1966080U);
  
#line 313 
  writel(data,(void volatile *)val);
  
#line 314 
  readl((void const volatile *)val);
  
#line 315 
  return;
}


#line 318  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_pcie_sem_lock(struct qlcnic_adapter *adapter, int sem, u32 id_reg)
{
  int __retres;
  
#line 320 
  int timeout = 0;
  
#line 320 
  int err = 0;
  
#line 320 
  int done = 0;
  
#line 322 
  goto ldv_55872;
  ldv_55871: 
#line 323 
  ;
  
#line 323 
  done = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)((sem + 14336) * 8) + 101711872UL,& err);
  
#line 325 
  if (done == 1) 
#line 326 
                 goto ldv_55870; else ;
  
#line 327 
  timeout += 1;
  
#line 327 
  if (timeout > 9999) {
    
#line 328 
    if (id_reg != 0U) {
      
#line 329 
      done = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)id_reg,& err);
      
#line 330 
      if (done != -1) 
#line 331 
                      dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to acquire sem=%d lock held by=%d\n",sem,done); else 
                                                                    
#line 335 
                                                                    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to acquire sem=%d lock",sem);
    }
    else 
#line 339 
         dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to acquire sem=%d lock",sem);
    
#line 342 
    __retres = -5;
    
#line 342 
    goto return_label;
  }
  else ;
  
#line 344 
  usleep_range(1000UL,1500UL);
  ldv_55872: 
#line 345 
  ;
  
#line 322 
  if (done == 0) 
#line 324 
                 goto ldv_55871; else 
#line 327 
                                      goto ldv_55870;
  ldv_55870: 
#line 328 
  ;
  
#line 347 
  if (id_reg != 0U) 
#line 348 
                    (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)id_reg,(unsigned int)adapter->portnum); else ;
  
#line 350 
  __retres = 0;
  return_label: 
#line 350 
                return __retres;
}


#line 354  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_pcie_sem_unlock(struct qlcnic_adapter *adapter, int sem)
{
  
#line 356 
  int err = 0;
  
#line 358 
  (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)(sem * 8 + 114692) + 101711872UL,& err);
  
#line 359 
  return;
}


#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_ind_rd(struct qlcnic_adapter *adapter, u32 addr)
{
  int __retres;
  u32 data;
  bool tmp_0;
  
#line 363 
  int err = 0;
  
#line 366 
  tmp_0 = qlcnic_82xx_check(adapter);
  
#line 366 
  if ((int)tmp_0 != 0) 
#line 367 
                       qlcnic_read_window_reg(addr,(adapter->ahw)->pci_base0,& data);
  else {
    int tmp;
    
#line 369 
    tmp = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)addr,& err);
    
#line 369 
    data = (unsigned int)tmp;
    
#line 370 
    if (err == -5) {
      
#line 371 
      __retres = err;
      
#line 371 
      goto return_label;
    }
    else ;
  }
  
#line 373 
  __retres = (int)data;
  return_label: 
#line 373 
                return __retres;
}


#line 376  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_ind_wr(struct qlcnic_adapter *adapter, u32 addr, u32 data)
{
  bool tmp;
  
#line 378 
  int ret = 0;
  
#line 380 
  tmp = qlcnic_82xx_check(adapter);
  
#line 380 
  if ((int)tmp != 0) 
#line 381 
                     qlcnic_write_window_reg(addr,(adapter->ahw)->pci_base0,data); else 
                                                                    
#line 383 
                                                                    ret = qlcnic_83xx_wrt_reg_indirect(adapter,(unsigned long)addr,data);
  
#line 385 
  return ret;
}


#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static int qlcnic_send_cmd_descs(struct qlcnic_adapter *adapter, struct cmd_desc_type0 *cmd_desc_arr, int nr_desc)
{
  int __retres;
  u32 i;
  u32 producer;
  struct qlcnic_cmd_buffer *pbuf;
  struct cmd_desc_type0 *cmd_desc;
  struct qlcnic_host_tx_ring *tx_ring;
  int tmp;
  u32 tmp_2;
  
#line 397 
  i = 0U;
  
#line 399 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& adapter->state));
  
#line 399 
  if (tmp == 0) {
    
#line 400 
    __retres = -5;
    
#line 400 
    goto return_label;
  }
  else ;
  
#line 402 
  tx_ring = adapter->tx_ring;
  
#line 403 
  __netif_tx_lock_bh(tx_ring->txq);
  
#line 405 
  producer = tx_ring->producer;
  
#line 407 
  tmp_2 = qlcnic_tx_avail(tx_ring);
  
#line 407 
  ;
  
#line 407 
  if (tmp_2 <= (unsigned int)nr_desc) {
    u32 tmp_1;
    
#line 408 
    netif_tx_start_queue(tx_ring->txq);
    
#line 409 
    ldv_inline_asm();
    
#line 410 
    tmp_1 = qlcnic_tx_avail(tx_ring);
    
#line 410 
    ;
    
#line 410 
    if (tmp_1 > (unsigned int)nr_desc) {
      u32 tmp_0;
      
#line 411 
      tmp_0 = qlcnic_tx_avail(tx_ring);
      
#line 411 
      if (tmp_0 > 10U) 
#line 412 
                       netif_tx_wake_queue(tx_ring->txq); else ;
    }
    else {
      
#line 414 
      adapter->stats.xmit_off += 1ULL;
      
#line 415 
      __netif_tx_unlock_bh(tx_ring->txq);
      
#line 416 
      __retres = -16;
      
#line 416 
      goto return_label;
    }
  }
  else ;
  ldv_55900: 
#line 419 
  ;
  
#line 421 
  cmd_desc = cmd_desc_arr + i;
  
#line 423 
  pbuf = tx_ring->cmd_buf_arr + producer;
  
#line 424 
  pbuf->skb = (struct sk_buff *)0;
  
#line 425 
  pbuf->frag_count = 0U;
  
#line 427 
  memcpy((void *)(tx_ring->desc_head + producer),(void const *)cmd_desc,64UL);
  
#line 430 
  producer = (producer + 1U) & (tx_ring->num_desc + 4294967295U);
  
#line 431 
  i += 1U;
  
#line 433 
  if (i != (unsigned int)nr_desc) 
#line 435 
                                  goto ldv_55900; else 
#line 438 
                                                       goto ldv_55901;
  ldv_55901: 
#line 439 
  ;
  
#line 435 
  tx_ring->producer = producer;
  
#line 437 
  qlcnic_update_cmd_producer(tx_ring);
  
#line 439 
  __netif_tx_unlock_bh(tx_ring->txq);
  
#line 441 
  __retres = 0;
  return_label: 
#line 441 
                return __retres;
}


#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_sre_macaddr_change(struct qlcnic_adapter *adapter, u8 *addr, u16 vlan_id, u8 op)
{
  struct qlcnic_nic_req req;
  struct qlcnic_mac_req *mac_req;
  struct qlcnic_vlan_req *vlan_req;
  u64 word;
  int tmp;
  
#line 452 
  memset((void *)(& req),0,64UL);
  
#line 453 
  req.qhdr = 167772160ULL;
  
#line 455 
  word = ((unsigned long long)adapter->portnum << 16) | 1ULL;
  
#line 456 
  req.req_hdr = word;
  
#line 458 
  mac_req = (struct qlcnic_mac_req *)(& req.words[0]);
  
#line 459 
  mac_req->op = op;
  
#line 460 
  memcpy((void *)(& mac_req->mac_addr),(void const *)addr,6UL);
  
#line 462 
  vlan_req = (struct qlcnic_vlan_req *)(& req.words[1]);
  
#line 463 
  vlan_req->vlan_id = vlan_id;
  
#line 465 
  tmp = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  
#line 465 
  return tmp;
}


#line 468  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_nic_del_mac(struct qlcnic_adapter *adapter, u8 const *addr)
{
  int __retres;
  struct qlcnic_mac_vlan_list *cur;
  struct list_head *head;
  struct qlcnic_mac_vlan_list *tmp;
  bool tmp_0;
  
#line 472 
  int err = -22;
  
#line 475 
  head = adapter->mac_list.next;
  
#line 475 
  goto ldv_55922;
  ldv_55921: 
#line 476 
  ;
  {
    
#line 476 
    struct list_head const *__mptr = (struct list_head const *)head;
    
#line 476 
    tmp = (struct qlcnic_mac_vlan_list *)__mptr;
  }
  
#line 476 
  cur = tmp;
  
#line 477 
  tmp_0 = ether_addr_equal(addr,(u8 const *)(& cur->mac_addr));
  
#line 477 
  if ((int)tmp_0 != 0) {
    
#line 478 
    err = qlcnic_sre_macaddr_change(adapter,(u8 *)(& cur->mac_addr),(unsigned short)0,(unsigned char)2);
    
#line 480 
    if (err != 0) {
      
#line 481 
      __retres = err;
      
#line 481 
      goto return_label;
    }
    else ;
    
#line 482 
    list_del(& cur->list);
    
#line 483 
    kfree((void const *)cur);
    
#line 484 
    __retres = err;
    
#line 484 
    goto return_label;
  }
  else ;
  
#line 475 
  head = head->next;
  ldv_55922: 
#line 476 
  ;
  
#line 475 
  if (& adapter->mac_list != head) 
#line 477 
                                   goto ldv_55921; else 
#line 480 
                                                        goto ldv_55923;
  ldv_55923: 
#line 481 
  ;
  
#line 487 
  __retres = err;
  return_label: 
#line 487 
                return __retres;
}


#line 490  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_nic_add_mac(struct qlcnic_adapter *adapter, u8 const *addr, u16 vlan, enum qlcnic_mac_type mac_type)
{
  int __retres;
  struct qlcnic_mac_vlan_list *cur;
  struct list_head *head;
  struct qlcnic_mac_vlan_list *tmp;
  bool tmp_0;
  int tmp_2;
  
#line 497 
  head = adapter->mac_list.next;
  
#line 497 
  goto ldv_55935;
  ldv_55934: 
#line 498 
  ;
  {
    
#line 498 
    struct list_head const *__mptr = (struct list_head const *)head;
    
#line 498 
    tmp = (struct qlcnic_mac_vlan_list *)__mptr;
  }
  
#line 498 
  cur = tmp;
  
#line 499 
  tmp_0 = ether_addr_equal(addr,(u8 const *)(& cur->mac_addr));
  
#line 499 
  if ((int)tmp_0 != 0) {
    
#line 499 
    if ((int)cur->vlan_id == (int)vlan) {
      
#line 501 
      __retres = 0;
      
#line 501 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 497 
  head = head->next;
  ldv_55935: 
#line 498 
  ;
  
#line 497 
  if (& adapter->mac_list != head) 
#line 499 
                                   goto ldv_55934; else 
#line 502 
                                                        goto ldv_55936;
  ldv_55936: 
#line 503 
  ;
  
#line 504 
  cur = (struct qlcnic_mac_vlan_list *)kzalloc_3(32UL,32U);
  
#line 505 
  if (cur == (struct qlcnic_mac_vlan_list *)0) {
    
#line 506 
    __retres = -12;
    
#line 506 
    goto return_label;
  }
  else ;
  
#line 508 
  memcpy((void *)(& cur->mac_addr),(void const *)addr,6UL);
  
#line 510 
  tmp_2 = qlcnic_sre_macaddr_change(adapter,(u8 *)(& cur->mac_addr),(unsigned short)((int)vlan),(unsigned char)1);
  
#line 510 
  if (tmp_2 != 0) {
    
#line 512 
    kfree((void const *)cur);
    
#line 513 
    __retres = -5;
    
#line 513 
    goto return_label;
  }
  else ;
  
#line 516 
  cur->vlan_id = vlan;
  
#line 517 
  cur->mac_type = mac_type;
  
#line 519 
  list_add_tail(& cur->list,& adapter->mac_list);
  
#line 520 
  __retres = 0;
  return_label: 
#line 520 
                return __retres;
}


#line 523  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_flush_mcast_mac(struct qlcnic_adapter *adapter)
{
  struct qlcnic_mac_vlan_list *cur;
  struct list_head *head;
  struct list_head *tmp;
  struct qlcnic_mac_vlan_list *tmp_0;
  
#line 528 
  head = adapter->mac_list.next;
  
#line 528 
  tmp = head->next;
  
#line 528 
  goto ldv_55947;
  ldv_55946: 
#line 529 
  ;
  {
    
#line 529 
    struct list_head const *__mptr = (struct list_head const *)head;
    
#line 529 
    tmp_0 = (struct qlcnic_mac_vlan_list *)__mptr;
  }
  
#line 529 
  cur = tmp_0;
  
#line 530 
  if (cur->mac_type != (unsigned int)QLCNIC_MULTICAST_MAC) 
#line 531 
                                                           goto ldv_55945; else ;
  
#line 533 
  qlcnic_sre_macaddr_change(adapter,(u8 *)(& cur->mac_addr),(unsigned short)((int)cur->vlan_id),(unsigned char)2);
  
#line 535 
  list_del(& cur->list);
  
#line 536 
  kfree((void const *)cur);
  ldv_55945: 
#line 537 
  ;
  
#line 528 
  head = tmp;
  
#line 528 
  tmp = head->next;
  ldv_55947: 
#line 529 
  ;
  
#line 528 
  if (& adapter->mac_list != head) 
#line 530 
                                   goto ldv_55946; else 
#line 533 
                                                        goto ldv_55948;
  ldv_55948: 
#line 534 
  ;
  
#line 535 
  return;
}


#line 540  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static void __qlcnic_set_multi(struct net_device *netdev, u16 vlan)
{
  struct netdev_hw_addr *ha;
  int tmp_0;
  
#line 542 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 543 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 545 
  u8 const bcast_addr[6U] = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  
#line 548 
  u32 mode = 0U;
  
#line 550 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& adapter->state));
  
#line 550 
  if (tmp_0 == 0) 
#line 551 
                  goto return_label; else ;
  
#line 553 
  qlcnic_nic_add_mac(adapter,(u8 const *)(& adapter->mac_addr),(unsigned short)((int)vlan),(enum qlcnic_mac_type)QLCNIC_UNICAST_MAC);
  
#line 555 
  qlcnic_nic_add_mac(adapter,(u8 const *)(& bcast_addr),(unsigned short)((int)vlan),(enum qlcnic_mac_type)QLCNIC_BROADCAST_MAC);
  
#line 557 
  if ((netdev->flags & 256U) != 0U) {
    
#line 558 
    if ((adapter->flags & 2048U) == 0U) 
#line 559 
                                        mode = 1U; else ;
  }
  else 
    
#line 560 
    if ((netdev->flags & 512U) != 0U || netdev->mc.count > (int)ahw->max_mc_count) 
      
#line 562 
      mode = 2U;
    else 
      
#line 563 
      if (netdev->mc.count != 0) {
        struct netdev_hw_addr *tmp_1;
        struct netdev_hw_addr *tmp_2;
        
#line 564 
        qlcnic_flush_mcast_mac(adapter);
        {
          
#line 565 
          struct list_head const *__mptr = (struct list_head const *)netdev->mc.list.next;
          
#line 565 
          tmp_1 = (struct netdev_hw_addr *)__mptr;
        }
        
#line 565 
        ha = tmp_1;
        
#line 565 
        goto ldv_55963;
        ldv_55962: 
#line 566 
        ;
        
#line 566 
        qlcnic_nic_add_mac(adapter,(u8 const *)(& ha->addr),(unsigned short)((int)vlan),(enum qlcnic_mac_type)QLCNIC_MULTICAST_MAC);
        {
          
#line 565 
          struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
          
#line 565 
          tmp_2 = (struct netdev_hw_addr *)__mptr_0;
        }
        
#line 565 
        ha = tmp_2;
        ldv_55963: 
#line 567 
        ;
        
#line 565 
        if (& ha->list != & netdev->mc.list) 
#line 567 
                                             goto ldv_55962; else 
#line 570 
                                                                  goto ldv_55964;
        ldv_55964: 
#line 571 
        ;
      }
      else ;
  
#line 573 
  if (netdev->uc.count > (int)ahw->max_uc_count) 
#line 574 
                                                 mode = 1U;
  else 
    
#line 575 
    if (netdev->uc.count != 0) {
      struct netdev_hw_addr *tmp_3;
      struct netdev_hw_addr *tmp_4;
      {
        
#line 576 
        struct list_head const *__mptr_1 = (struct list_head const *)netdev->uc.list.next;
        
#line 576 
        tmp_3 = (struct netdev_hw_addr *)__mptr_1;
      }
      
#line 576 
      ha = tmp_3;
      
#line 576 
      goto ldv_55970;
      ldv_55969: 
#line 577 
      ;
      
#line 577 
      qlcnic_nic_add_mac(adapter,(u8 const *)(& ha->addr),(unsigned short)((int)vlan),(enum qlcnic_mac_type)QLCNIC_UNICAST_MAC);
      {
        
#line 576 
        struct list_head const *__mptr_2 = (struct list_head const *)ha->list.next;
        
#line 576 
        tmp_4 = (struct netdev_hw_addr *)__mptr_2;
      }
      
#line 576 
      ha = tmp_4;
      ldv_55970: 
#line 578 
      ;
      
#line 576 
      if (& ha->list != & netdev->uc.list) 
#line 578 
                                           goto ldv_55969; else 
#line 581 
                                                                goto ldv_55971;
      ldv_55971: 
#line 582 
      ;
    }
    else ;
  
#line 581 
  if (mode == 1U && ! adapter->fdb_mac_learn) {
    
#line 583 
    qlcnic_alloc_lb_filters_mem(adapter);
    
#line 584 
    adapter->drv_mac_learn = (_Bool)1;
    
#line 585 
    if ((adapter->flags & 64U) != 0U) 
#line 586 
                                      adapter->rx_mac_learn = (_Bool)1; else ;
  }
  else {
    
#line 588 
    adapter->drv_mac_learn = (_Bool)0;
    
#line 589 
    adapter->rx_mac_learn = (_Bool)0;
  }
  
#line 592 
  qlcnic_nic_set_promisc(adapter,mode);
  return_label: 
#line 593 
                return;
}


#line 595  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_set_multi(struct net_device *netdev)
{
  int tmp_0;
  bool tmp_1;
  
#line 597 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 599 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& adapter->state));
  
#line 599 
  if (tmp_0 == 0) 
#line 600 
                  goto return_label; else ;
  
#line 602 
  tmp_1 = qlcnic_sriov_vf_check(adapter);
  
#line 602 
  if ((int)tmp_1 != 0) 
#line 603 
                       qlcnic_sriov_vf_set_multi(netdev); else 
#line 605 
                                                               __qlcnic_set_multi(netdev,(unsigned short)0);
  return_label: 
#line 606 
                return;
}


#line 608  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_nic_set_promisc(struct qlcnic_adapter *adapter, u32 mode)
{
  struct qlcnic_nic_req req;
  u64 word;
  int tmp;
  
#line 613 
  memset((void *)(& req),0,64UL);
  
#line 615 
  req.qhdr = 159383552ULL;
  
#line 617 
  word = ((unsigned long long)adapter->portnum << 16) | 12ULL;
  
#line 619 
  req.req_hdr = word;
  
#line 621 
  req.words[0] = (unsigned long long)mode;
  
#line 623 
  tmp = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  
#line 623 
  return tmp;
}


#line 627  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_free_mac_list(struct qlcnic_adapter *adapter)
{
  struct qlcnic_mac_vlan_list *cur;
  struct qlcnic_mac_vlan_list *tmp;
  int tmp_0;
  
#line 629 
  struct list_head *head = & adapter->mac_list;
  
#line 632 
  goto ldv_55990;
  ldv_55989: 
#line 633 
  ;
  {
    
#line 633 
    struct list_head const *__mptr = (struct list_head const *)head->next;
    
#line 633 
    tmp = (struct qlcnic_mac_vlan_list *)__mptr;
  }
  
#line 633 
  cur = tmp;
  
#line 634 
  qlcnic_sre_macaddr_change(adapter,(u8 *)(& cur->mac_addr),(unsigned short)0,(unsigned char)2);
  
#line 636 
  list_del(& cur->list);
  
#line 637 
  kfree((void const *)cur);
  ldv_55990: 
#line 638 
  ;
  
#line 632 
  tmp_0 = list_empty((struct list_head const *)head);
  
#line 632 
  if (tmp_0 == 0) 
#line 634 
                  goto ldv_55989; else 
#line 637 
                                       goto ldv_55991;
  ldv_55991: 
#line 638 
  ;
  
#line 639 
  return;
}


#line 641  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_prune_lb_filters(struct qlcnic_adapter *adapter)
{
  struct qlcnic_filter *tmp_fil;
  struct hlist_node *n;
  struct hlist_head *head;
  int i;
  unsigned long expires;
  u8 cmd;
  struct qlcnic_filter *tmp_1;
  int tmp_2;
  struct qlcnic_filter *tmp_6;
  struct qlcnic_filter *tmp_9;
  int tmp_10;
  struct qlcnic_filter *tmp_14;
  
#line 650 
  i = 0;
  
#line 650 
  goto ldv_56020;
  ldv_56019: 
#line 651 
  ;
  
#line 651 
  head = adapter->fhash.fhead + i;
  {
    struct qlcnic_filter *tmp_0;
    
#line 652 
    struct hlist_node *____ptr = head->first;
    
#line 652 
    if (____ptr != (struct hlist_node *)0) {
      struct qlcnic_filter *tmp;
      {
        
#line 652 
        struct hlist_node const *__mptr = (struct hlist_node const *)____ptr;
        
#line 652 
        tmp = (struct qlcnic_filter *)__mptr;
      }
      
#line 652 
      tmp_0 = tmp;
    }
    else 
#line 652 
         tmp_0 = (struct qlcnic_filter *)0;
    
#line 652 
    tmp_1 = tmp_0;
  }
  
#line 652 
  tmp_fil = tmp_1;
  
#line 652 
  goto ldv_56017;
  ldv_56016: 
#line 653 
  ;
  
#line 653 
  if ((unsigned int)tmp_fil->vlan_id != 0U) 
#line 653 
                                            cmd = (unsigned char)4U; else 
                                                                    
#line 653 
                                                                    cmd = (unsigned char)2U;
  
#line 655 
  expires = tmp_fil->ftime + 20000UL;
  {
    unsigned long __dummy;
    unsigned long volatile __dummy2;
    
#line 656 
    tmp_2 = 1;
  }
  
#line 656 
  if (tmp_2 != 0) {
    int tmp_3;
    {
      unsigned long __dummy_0;
      unsigned long __dummy2_0;
      
#line 656 
      tmp_3 = 1;
    }
    
#line 656 
    if (tmp_3 != 0) {
      
#line 656 
      if ((long)(expires - jiffies) < 0L) {
        
#line 657 
        qlcnic_sre_macaddr_change(adapter,(u8 *)(& tmp_fil->faddr),(unsigned short)((int)tmp_fil->vlan_id),(unsigned char)((int)cmd));
        
#line 661 
        ldv_spin_lock_bh_75_0(& adapter->mac_learn_lock);
        
#line 662 
        adapter->fhash.fnum = (u8)((int)adapter->fhash.fnum - 1);
        
#line 663 
        hlist_del(& tmp_fil->fnode);
        
#line 664 
        ldv_spin_unlock_bh_76_0(& adapter->mac_learn_lock);
        
#line 665 
        kfree((void const *)tmp_fil);
      }
      else ;
    }
    else ;
  }
  else ;
  {
    struct qlcnic_filter *tmp_5;
    
#line 652 
    struct hlist_node *____ptr_0 = n;
    
#line 652 
    if (____ptr_0 != (struct hlist_node *)0) {
      struct qlcnic_filter *tmp_4;
      {
        
#line 652 
        struct hlist_node const *__mptr_0 = (struct hlist_node const *)____ptr_0;
        
#line 652 
        tmp_4 = (struct qlcnic_filter *)__mptr_0;
      }
      
#line 652 
      tmp_5 = tmp_4;
    }
    else 
#line 652 
         tmp_5 = (struct qlcnic_filter *)0;
    
#line 652 
    tmp_6 = tmp_5;
  }
  
#line 652 
  tmp_fil = tmp_6;
  ldv_56017: 
#line 654 
  ;
  
#line 652 
  if (tmp_fil != (struct qlcnic_filter *)0) {
    
#line 652 
    n = tmp_fil->fnode.next;
    
#line 652 
    if (1 != 0) 
#line 654 
                goto ldv_56016; else 
#line 657 
                                     goto ldv_56018;
  }
  else 
#line 657 
       goto ldv_56018;
  ldv_56018: 
#line 658 
  ;
  
#line 650 
  i += 1;
  ldv_56020: 
#line 651 
  ;
  
#line 650 
  if ((int)adapter->fhash.fbucket_size > i) 
#line 652 
                                            goto ldv_56019; else 
#line 655 
                                                                 goto ldv_56021;
  ldv_56021: 
#line 656 
  ;
  
#line 669 
  i = 0;
  
#line 669 
  goto ldv_56041;
  ldv_56040: 
#line 670 
  ;
  
#line 670 
  head = adapter->rx_fhash.fhead + i;
  {
    struct qlcnic_filter *tmp_8;
    
#line 672 
    struct hlist_node *____ptr_1 = head->first;
    
#line 672 
    if (____ptr_1 != (struct hlist_node *)0) {
      struct qlcnic_filter *tmp_7;
      {
        
#line 672 
        struct hlist_node const *__mptr_1 = (struct hlist_node const *)____ptr_1;
        
#line 672 
        tmp_7 = (struct qlcnic_filter *)__mptr_1;
      }
      
#line 672 
      tmp_8 = tmp_7;
    }
    else 
#line 672 
         tmp_8 = (struct qlcnic_filter *)0;
    
#line 672 
    tmp_9 = tmp_8;
  }
  
#line 672 
  tmp_fil = tmp_9;
  
#line 672 
  goto ldv_56038;
  ldv_56037: 
#line 673 
  ;
  
#line 674 
  expires = tmp_fil->ftime + 20000UL;
  {
    unsigned long __dummy_1;
    unsigned long volatile __dummy2_1;
    
#line 675 
    tmp_10 = 1;
  }
  
#line 675 
  if (tmp_10 != 0) {
    int tmp_11;
    {
      unsigned long __dummy_2;
      unsigned long __dummy2_2;
      
#line 675 
      tmp_11 = 1;
    }
    
#line 675 
    if (tmp_11 != 0) {
      
#line 675 
      if ((long)(expires - jiffies) < 0L) {
        
#line 676 
        ldv_spin_lock_bh_77(& adapter->rx_mac_learn_lock);
        
#line 677 
        adapter->rx_fhash.fnum = (u8)((int)adapter->rx_fhash.fnum - 1);
        
#line 678 
        hlist_del(& tmp_fil->fnode);
        
#line 679 
        ldv_spin_unlock_bh_78(& adapter->rx_mac_learn_lock);
        
#line 680 
        kfree((void const *)tmp_fil);
      }
      else ;
    }
    else ;
  }
  else ;
  {
    struct qlcnic_filter *tmp_13;
    
#line 672 
    struct hlist_node *____ptr_2 = n;
    
#line 672 
    if (____ptr_2 != (struct hlist_node *)0) {
      struct qlcnic_filter *tmp_12;
      {
        
#line 672 
        struct hlist_node const *__mptr_2 = (struct hlist_node const *)____ptr_2;
        
#line 672 
        tmp_12 = (struct qlcnic_filter *)__mptr_2;
      }
      
#line 672 
      tmp_13 = tmp_12;
    }
    else 
#line 672 
         tmp_13 = (struct qlcnic_filter *)0;
    
#line 672 
    tmp_14 = tmp_13;
  }
  
#line 672 
  tmp_fil = tmp_14;
  ldv_56038: 
#line 674 
  ;
  
#line 672 
  if (tmp_fil != (struct qlcnic_filter *)0) {
    
#line 672 
    n = tmp_fil->fnode.next;
    
#line 672 
    if (1 != 0) 
#line 674 
                goto ldv_56037; else 
#line 677 
                                     goto ldv_56039;
  }
  else 
#line 677 
       goto ldv_56039;
  ldv_56039: 
#line 678 
  ;
  
#line 669 
  i += 1;
  ldv_56041: 
#line 670 
  ;
  
#line 669 
  if ((int)adapter->rx_fhash.fbucket_size > i) 
#line 671 
                                               goto ldv_56040; else 
#line 674 
                                                                    goto ldv_56042;
  ldv_56042: 
#line 675 
  ;
  
#line 676 
  return;
}


#line 686  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_delete_lb_filters(struct qlcnic_adapter *adapter)
{
  struct qlcnic_filter *tmp_fil;
  struct hlist_node *n;
  struct hlist_head *head;
  int i;
  u8 cmd;
  struct qlcnic_filter *tmp_1;
  struct qlcnic_filter *tmp_4;
  
#line 694 
  i = 0;
  
#line 694 
  goto ldv_56064;
  ldv_56063: 
#line 695 
  ;
  
#line 695 
  head = adapter->fhash.fhead + i;
  {
    struct qlcnic_filter *tmp_0;
    
#line 696 
    struct hlist_node *____ptr = head->first;
    
#line 696 
    if (____ptr != (struct hlist_node *)0) {
      struct qlcnic_filter *tmp;
      {
        
#line 696 
        struct hlist_node const *__mptr = (struct hlist_node const *)____ptr;
        
#line 696 
        tmp = (struct qlcnic_filter *)__mptr;
      }
      
#line 696 
      tmp_0 = tmp;
    }
    else 
#line 696 
         tmp_0 = (struct qlcnic_filter *)0;
    
#line 696 
    tmp_1 = tmp_0;
  }
  
#line 696 
  tmp_fil = tmp_1;
  
#line 696 
  goto ldv_56061;
  ldv_56060: 
#line 697 
  ;
  
#line 697 
  if ((unsigned int)tmp_fil->vlan_id != 0U) 
#line 697 
                                            cmd = (unsigned char)4U; else 
                                                                    
#line 697 
                                                                    cmd = (unsigned char)2U;
  
#line 699 
  qlcnic_sre_macaddr_change(adapter,(u8 *)(& tmp_fil->faddr),(unsigned short)((int)tmp_fil->vlan_id),(unsigned char)((int)cmd));
  
#line 703 
  ldv_spin_lock_bh_79(& adapter->mac_learn_lock);
  
#line 704 
  adapter->fhash.fnum = (u8)((int)adapter->fhash.fnum - 1);
  
#line 705 
  hlist_del(& tmp_fil->fnode);
  
#line 706 
  ldv_spin_unlock_bh_80(& adapter->mac_learn_lock);
  
#line 707 
  kfree((void const *)tmp_fil);
  {
    struct qlcnic_filter *tmp_3;
    
#line 696 
    struct hlist_node *____ptr_0 = n;
    
#line 696 
    if (____ptr_0 != (struct hlist_node *)0) {
      struct qlcnic_filter *tmp_2;
      {
        
#line 696 
        struct hlist_node const *__mptr_0 = (struct hlist_node const *)____ptr_0;
        
#line 696 
        tmp_2 = (struct qlcnic_filter *)__mptr_0;
      }
      
#line 696 
      tmp_3 = tmp_2;
    }
    else 
#line 696 
         tmp_3 = (struct qlcnic_filter *)0;
    
#line 696 
    tmp_4 = tmp_3;
  }
  
#line 696 
  tmp_fil = tmp_4;
  ldv_56061: 
#line 698 
  ;
  
#line 696 
  if (tmp_fil != (struct qlcnic_filter *)0) {
    
#line 696 
    n = tmp_fil->fnode.next;
    
#line 696 
    if (1 != 0) 
#line 698 
                goto ldv_56060; else 
#line 701 
                                     goto ldv_56062;
  }
  else 
#line 701 
       goto ldv_56062;
  ldv_56062: 
#line 702 
  ;
  
#line 694 
  i += 1;
  ldv_56064: 
#line 695 
  ;
  
#line 694 
  if ((int)adapter->fhash.fbucket_size > i) 
#line 696 
                                            goto ldv_56063; else 
#line 699 
                                                                 goto ldv_56065;
  ldv_56065: 
#line 700 
  ;
  
#line 701 
  return;
}


#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static int qlcnic_set_fw_loopback(struct qlcnic_adapter *adapter, u8 flag)
{
  struct qlcnic_nic_req req;
  int rv;
  
#line 717 
  memset((void *)(& req),0,64UL);
  
#line 719 
  req.qhdr = 159383552ULL;
  
#line 720 
  req.req_hdr = ((unsigned long long)adapter->portnum << 16) | 4294967315ULL;
  
#line 723 
  req.words[0] = (unsigned long long)flag;
  
#line 725 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  
#line 726 
  if (rv != 0) {
    char *tmp;
    
#line 727 
    if ((unsigned int)flag != 0U) 
#line 727 
                                  tmp = (char *)"Set"; else 
#line 727 
                                                            tmp = (char *)"Reset";
    
#line 727 
    ;
    
#line 727 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%sting loopback mode failed\n",tmp);
  }
  else ;
  
#line 729 
  return rv;
}


#line 732  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_set_lb_mode(struct qlcnic_adapter *adapter, u8 mode)
{
  int __retres;
  int tmp;
  int tmp_0;
  
#line 734 
  tmp = qlcnic_set_fw_loopback(adapter,(unsigned char)((int)mode));
  
#line 734 
  if (tmp != 0) {
    
#line 735 
    __retres = -5;
    
#line 735 
    goto return_label;
  }
  else ;
  
#line 737 
  tmp_0 = qlcnic_nic_set_promisc(adapter,1U);
  
#line 737 
  if (tmp_0 != 0) {
    
#line 739 
    qlcnic_set_fw_loopback(adapter,(unsigned char)0);
    
#line 740 
    __retres = -5;
    
#line 740 
    goto return_label;
  }
  else ;
  
#line 743 
  msleep(1000U);
  
#line 744 
  __retres = 0;
  return_label: 
#line 744 
                return __retres;
}


#line 747  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_clear_lb_mode(struct qlcnic_adapter *adapter, u8 mode)
{
  int __retres;
  
#line 749 
  struct net_device *netdev = adapter->netdev;
  
#line 751 
  mode = (unsigned char)0U;
  
#line 752 
  qlcnic_set_fw_loopback(adapter,(unsigned char)0);
  
#line 754 
  if ((netdev->flags & 256U) != 0U) 
#line 755 
                                    mode = (unsigned char)1U;
  else 
    
#line 756 
    if ((netdev->flags & 512U) != 0U) 
#line 757 
                                      mode = (unsigned char)2U; else ;
  
#line 759 
  qlcnic_nic_set_promisc(adapter,(unsigned int)mode);
  
#line 760 
  msleep(1000U);
  
#line 761 
  __retres = 0;
  
#line 761 
  return __retres;
}


#line 764  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_read_phys_port_id(struct qlcnic_adapter *adapter)
{
  int __retres;
  u8 mac[6U];
  int ret;
  
#line 769 
  ret = qlcnic_get_mac_address(adapter,(u8 *)(& mac),(unsigned char)((int)(adapter->ahw)->physical_port));
  
#line 771 
  if (ret != 0) {
    
#line 772 
    __retres = ret;
    
#line 772 
    goto return_label;
  }
  else ;
  
#line 774 
  memcpy((void *)(& (adapter->ahw)->phys_port_id),(void const *)(& mac),6UL);
  
#line 775 
  adapter->flags |= 262144U;
  
#line 777 
  __retres = 0;
  return_label: 
#line 777 
                return __retres;
}


#line 780  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_set_rx_coalesce(struct qlcnic_adapter *adapter)
{
  struct qlcnic_nic_req req;
  int rv;
  
#line 785 
  memset((void *)(& req),0,64UL);
  
#line 787 
  req.qhdr = 159383552ULL;
  
#line 789 
  req.req_hdr = ((unsigned long long)adapter->portnum << 16) | 3ULL;
  
#line 792 
  req.words[0] = (unsigned long long)(adapter->ahw)->coal.flag << 32;
  
#line 793 
  req.words[2] = (unsigned long long)(adapter->ahw)->coal.rx_packets | ((unsigned long long)(adapter->ahw)->coal.rx_time_us << 16);
  
#line 795 
  req.words[5] = ((unsigned long long)(adapter->ahw)->coal.timer_out | ((unsigned long long)(adapter->ahw)->coal.type << 32)) | ((unsigned long long)(adapter->ahw)->coal.sts_ring_mask << 40);
  
#line 798 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  
#line 799 
  if (rv != 0) 
#line 800 
               dev_err((struct device const *)(& (adapter->netdev)->dev),"Could not send interrupt coalescing parameters\n"); else ;
  
#line 803 
  return rv;
}


#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_config_intr_coalesce(struct qlcnic_adapter *adapter, struct ethtool_coalesce *ethcoal)
{
  int rv;
  
#line 810 
  struct qlcnic_nic_intr_coalesce *coal = & (adapter->ahw)->coal;
  
#line 813 
  coal->flag = (unsigned short)4U;
  
#line 814 
  coal->rx_time_us = (unsigned short)ethcoal->rx_coalesce_usecs;
  
#line 815 
  coal->rx_packets = (unsigned short)ethcoal->rx_max_coalesced_frames;
  
#line 817 
  rv = qlcnic_82xx_set_rx_coalesce(adapter);
  
#line 819 
  if (rv != 0) 
#line 820 
               netdev_err((struct net_device const *)adapter->netdev,"Failed to set Rx coalescing parameters\n"); else ;
  
#line 823 
  return rv;
}


#line 829  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_config_hw_lro(struct qlcnic_adapter *adapter, int enable)
{
  int __retres;
  struct qlcnic_nic_req req;
  u64 word;
  int rv;
  int tmp;
  
#line 835 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& adapter->state));
  
#line 835 
  if (tmp == 0) {
    
#line 836 
    __retres = 0;
    
#line 836 
    goto return_label;
  }
  else ;
  
#line 838 
  memset((void *)(& req),0,64UL);
  
#line 840 
  req.qhdr = 159383552ULL;
  
#line 842 
  word = ((unsigned long long)adapter->portnum << 16) | 24ULL;
  
#line 843 
  req.req_hdr = word;
  
#line 845 
  word = 0ULL;
  
#line 846 
  if (enable != 0) {
    
#line 847 
    word = 1ULL;
    
#line 848 
    if (((adapter->ahw)->extra_capability[0] & 8U) != 0U) 
#line 850 
                                                          word |= 514ULL; else ;
  }
  else ;
  
#line 853 
  req.words[0] = word;
  
#line 855 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  
#line 856 
  if (rv != 0) 
#line 857 
               dev_err((struct device const *)(& (adapter->netdev)->dev),"Could not send configure hw lro request\n"); else ;
  
#line 860 
  __retres = rv;
  return_label: 
#line 860 
                return __retres;
}


#line 863  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_config_bridged_mode(struct qlcnic_adapter *adapter, u32 enable)
{
  int __retres;
  struct qlcnic_nic_req req;
  u64 word;
  int rv;
  
#line 869 
  if ((u32)((adapter->flags & 16U) != 0U) == enable) {
    
#line 870 
    __retres = 0;
    
#line 870 
    goto return_label;
  }
  else ;
  
#line 872 
  memset((void *)(& req),0,64UL);
  
#line 874 
  req.qhdr = 159383552ULL;
  
#line 876 
  word = ((unsigned long long)adapter->portnum << 16) | 23ULL;
  
#line 878 
  req.req_hdr = word;
  
#line 880 
  req.words[0] = (unsigned long long)enable;
  
#line 882 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  
#line 883 
  if (rv != 0) 
#line 884 
               dev_err((struct device const *)(& (adapter->netdev)->dev),"Could not send configure bridge mode request\n"); else ;
  
#line 887 
  adapter->flags ^= 16U;
  
#line 889 
  __retres = rv;
  return_label: 
#line 889 
                return __retres;
}


#line 898  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_config_rss(struct qlcnic_adapter *adapter, int enable)
{
  struct qlcnic_nic_req req;
  u64 word;
  int i;
  int rv;
  
#line 904 
  u64 const key[5U] = {13739358738236749627ULL, 9237148971100220835ULL, 12572696337890028491ULL, 4873897208919303485ULL, 2691761430505084634ULL};
  
#line 910 
  memset((void *)(& req),0,64UL);
  
#line 911 
  req.qhdr = 159383552ULL;
  
#line 913 
  word = ((unsigned long long)adapter->portnum << 16) | 1ULL;
  
#line 914 
  req.req_hdr = word;
  
#line 929 
  word = (((unsigned long long)enable << 8) & 256ULL) | 9225342361691751664ULL;
  
#line 936 
  req.words[0] = word;
  
#line 937 
  i = 0;
  
#line 937 
  goto ldv_56121;
  ldv_56120: 
#line 938 
  ;
  
#line 938 
  req.words[i + 1] = key[i];
  
#line 937 
  i += 1;
  ldv_56121: 
#line 938 
  ;
  
#line 937 
  if (i <= 4) 
#line 939 
              goto ldv_56120; else 
#line 942 
                                   goto ldv_56122;
  ldv_56122: 
#line 943 
  ;
  
#line 940 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  
#line 941 
  if (rv != 0) 
#line 942 
               dev_err((struct device const *)(& (adapter->netdev)->dev),"could not configure RSS\n"); else ;
  
#line 944 
  return rv;
}


#line 947  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_config_ipaddr(struct qlcnic_adapter *adapter, __be32 ip, int cmd)
{
  struct qlcnic_nic_req req;
  struct qlcnic_ipaddr *ipa;
  u64 word;
  int rv;
  
#line 955 
  memset((void *)(& req),0,64UL);
  
#line 956 
  req.qhdr = 159383552ULL;
  
#line 958 
  word = ((unsigned long long)adapter->portnum << 16) | 18ULL;
  
#line 959 
  req.req_hdr = word;
  
#line 961 
  req.words[0] = (unsigned long long)cmd;
  
#line 962 
  ipa = (struct qlcnic_ipaddr *)(& req.words[1]);
  
#line 963 
  ipa->ipv4 = ip;
  
#line 965 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  
#line 966 
  if (rv != 0) {
    char *tmp;
    
#line 967 
    ;
    
#line 968 
    if (cmd == 2) 
#line 968 
                  tmp = (char *)"Add"; else 
#line 968 
                                            tmp = (char *)"Remove";
    
#line 967 
    ;
    
#line 967 
    dev_err((struct device const *)(& (adapter->netdev)->dev),"could not notify %s IP 0x%x request\n",tmp,ip);
  }
  else ;
  
#line 970 
  return;
}


#line 972  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_linkevent_request(struct qlcnic_adapter *adapter, int enable)
{
  struct qlcnic_nic_req req;
  u64 word;
  int rv;
  
#line 977 
  memset((void *)(& req),0,64UL);
  
#line 978 
  req.qhdr = 159383552ULL;
  
#line 980 
  word = ((unsigned long long)adapter->portnum << 16) | 21ULL;
  
#line 981 
  req.req_hdr = word;
  
#line 982 
  req.words[0] = (unsigned long long)((enable << 8) | enable);
  
#line 983 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  
#line 984 
  if (rv != 0) 
#line 985 
               dev_err((struct device const *)(& (adapter->netdev)->dev),"could not configure link notification\n"); else ;
  
#line 988 
  return rv;
}


#line 991  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static int qlcnic_send_lro_cleanup(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_nic_req req;
  u64 word;
  int rv;
  int tmp;
  
#line 997 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& adapter->state));
  
#line 997 
  if (tmp == 0) {
    
#line 998 
    __retres = 0;
    
#line 998 
    goto return_label;
  }
  else ;
  
#line 1000 
  memset((void *)(& req),0,64UL);
  
#line 1001 
  req.qhdr = 159383552ULL;
  
#line 1003 
  word = ((unsigned long long)adapter->portnum << 16) | 288230376151711751ULL;
  
#line 1007 
  req.req_hdr = word;
  
#line 1009 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  
#line 1010 
  if (rv != 0) 
#line 1011 
               dev_err((struct device const *)(& (adapter->netdev)->dev),"could not cleanup lro flows\n"); else ;
  
#line 1014 
  __retres = rv;
  return_label: 
#line 1014 
                return __retres;
}


#line 1022  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_change_mtu(struct net_device *netdev, int mtu)
{
  int __retres;
  
#line 1024 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1025 
  int rc = 0;
  
#line 1027 
  if ((unsigned int)mtu + 4294967228U > 9532U) {
    
#line 1028 
    dev_err((struct device const *)(& (adapter->netdev)->dev),"%d bytes < mtu < %d bytes",9600,68);
    
#line 1030 
    __retres = -22;
    
#line 1030 
    goto return_label;
  }
  else ;
  
#line 1033 
  rc = qlcnic_fw_cmd_set_mtu(adapter,mtu);
  
#line 1035 
  if (rc == 0) 
#line 1036 
               netdev->mtu = (unsigned int)mtu; else ;
  
#line 1038 
  __retres = rc;
  return_label: 
#line 1038 
                return __retres;
}


#line 1041  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static netdev_features_t qlcnic_process_flags(struct qlcnic_adapter *adapter, netdev_features_t features)
{
  
#line 1044 
  u32 offload_flags = adapter->offload_flags;
  
#line 1046 
  if ((offload_flags & 1U) != 0U) {
    
#line 1047 
    features |= 17179869202ULL;
    
#line 1049 
    adapter->rx_csum = (unsigned char)1U;
    
#line 1050 
    if (((adapter->ahw)->capabilities & 2U) != 0U) {
      
#line 1051 
      if ((offload_flags & 2U) == 0U) 
#line 1052 
                                      features &= 18446744073709486079ULL; else 
                                                                    
#line 1054 
                                                                    features |= 65536ULL;
      
#line 1056 
      if ((offload_flags & 4U) == 0U) 
#line 1057 
                                      features &= 18446744073708503039ULL; else 
                                                                    
#line 1059 
                                                                    features |= 1048576ULL;
    }
    else ;
  }
  else {
    
#line 1062 
    features &= 18446744056529682413ULL;
    
#line 1066 
    if (((adapter->ahw)->capabilities & 2U) != 0U) 
#line 1067 
                                                   features &= 18446744073708437503ULL; else ;
    
#line 1068 
    adapter->rx_csum = (unsigned char)0U;
  }
  
#line 1071 
  return features;
}


#line 1074  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
netdev_features_t qlcnic_fix_features(struct net_device *netdev, netdev_features_t features)
{
  netdev_features_t changed;
  bool tmp_0;
  
#line 1077 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1080 
  tmp_0 = qlcnic_82xx_check(adapter);
  
#line 1080 
  if ((int)tmp_0 != 0) {
    
#line 1080 
    if ((adapter->flags & 64U) != 0U) 
      
#line 1082 
      if ((adapter->flags & 131072U) != 0U) 
#line 1083 
                                            features = qlcnic_process_flags(adapter,features);
      else {
        
#line 1085 
        changed = netdev->features ^ features;
        
#line 1086 
        features = (changed & 17180983314ULL) ^ features;
      }
    else ;
  }
  else ;
  
#line 1094 
  if ((features & 17179869184ULL) == 0ULL) 
#line 1095 
                                           features &= 18446744073709518847ULL; else ;
  
#line 1097 
  return features;
}


#line 1101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_set_features(struct net_device *netdev, netdev_features_t features)
{
  int __retres;
  int tmp_0;
  
#line 1103 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1104 
  netdev_features_t changed = netdev->features ^ features;
  
#line 1105 
  int hw_lro = (int)(features >> 15) & 1;
  
#line 1107 
  if ((changed & 32768ULL) == 0ULL) {
    
#line 1108 
    __retres = 0;
    
#line 1108 
    goto return_label;
  }
  else ;
  
#line 1110 
  netdev->features ^= 32768ULL;
  
#line 1112 
  tmp_0 = qlcnic_config_hw_lro(adapter,hw_lro);
  
#line 1112 
  if (tmp_0 != 0) {
    
#line 1113 
    __retres = -5;
    
#line 1113 
    goto return_label;
  }
  else ;
  
#line 1115 
  if (hw_lro == 0) {
    bool tmp_2;
    
#line 1115 
    tmp_2 = qlcnic_82xx_check(adapter);
    
#line 1115 
    if ((int)tmp_2 != 0) {
      int tmp_1;
      
#line 1116 
      tmp_1 = qlcnic_send_lro_cleanup(adapter);
      
#line 1116 
      if (tmp_1 != 0) {
        
#line 1117 
        __retres = -5;
        
#line 1117 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 1120 
  __retres = 0;
  return_label: 
#line 1120 
                return __retres;
}


#line 1132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static int qlcnic_pci_get_crb_addr_2M(struct qlcnic_hardware_context *ahw, ulong off, void **addr)
{
  int __retres;
  struct crb_128M_2M_sub_block_map const *m;
  
#line 1137 
  if (off + 18446744073608888320UL > 67108863UL) {
    
#line 1138 
    __retres = -22;
    
#line 1138 
    goto return_label;
  }
  else ;
  
#line 1140 
  off += 18446744073608888320UL;
  
#line 1145 
  m = (struct crb_128M_2M_sub_block_map const *)(& crb_128M_2M_map[(off >> 20) & 63UL].sub_block[(off >> 16) & 15UL]);
  
#line 1147 
  if ((m->valid != 0U && (unsigned long)m->start_128M <= off) && (unsigned long)m->end_128M > off) {
    
#line 1148 
    *addr = ahw->pci_base0 + ((ulong)m->start_2M + (off - (unsigned long)m->start_128M));
    
#line 1150 
    __retres = 0;
    
#line 1150 
    goto return_label;
  }
  else ;
  
#line 1156 
  *addr = ahw->pci_base0 + ((off & (unsigned long)65535U) + (unsigned long)1966080U);
  
#line 1157 
  __retres = 1;
  return_label: 
#line 1157 
                return __retres;
}


#line 1166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static int qlcnic_pci_set_crbwindow_2M(struct qlcnic_adapter *adapter, ulong off)
{
  int __retres;
  u32 window;
  unsigned int tmp_0;
  
#line 1169 
  void *addr = (adapter->ahw)->pci_base0 + 1245280U;
  
#line 1171 
  off += 18446744073608888320UL;
  
#line 1173 
  window = (crb_hub_agt[(off >> 20) & 63UL] << 20) | ((unsigned int)off & 983040U);
  
#line 1174 
  if (window == 0U) {
    
#line 1175 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Invalid offset 0x%lx\n",off);
    
#line 1176 
    __retres = -5;
    
#line 1176 
    goto return_label;
  }
  else ;
  
#line 1179 
  writel(window,(void volatile *)addr);
  
#line 1180 
  tmp_0 = readl((void const volatile *)addr);
  
#line 1180 
  ;
  
#line 1180 
  if (tmp_0 != window) {
    int tmp;
    
#line 1181 
    tmp = __printk_ratelimit("qlcnic_pci_set_crbwindow_2M");
    
#line 1181 
    if (tmp != 0) 
#line 1182 
                  dev_warn((struct device const *)(& (adapter->pdev)->dev),"failed to set CRB window to %d off 0x%lx\n",window,off); else ;
    
#line 1185 
    __retres = -5;
    
#line 1185 
    goto return_label;
  }
  else ;
  
#line 1187 
  __retres = 0;
  return_label: 
#line 1187 
                return __retres;
}


#line 1190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_hw_write_wx_2M(struct qlcnic_adapter *adapter, ulong off, u32 data)
{
  int __retres;
  unsigned long flags;
  int rv;
  
#line 1195 
  void *addr = (void *)0;
  
#line 1197 
  rv = qlcnic_pci_get_crb_addr_2M(adapter->ahw,off,& addr);
  
#line 1199 
  if (rv == 0) {
    
#line 1200 
    writel(data,(void volatile *)addr);
    
#line 1201 
    __retres = 0;
    
#line 1201 
    goto return_label;
  }
  else ;
  
#line 1204 
  if (rv > 0) {
    {
      unsigned long __dummy;
      unsigned long __dummy2;
      
    }
    
#line 1206 
    flags = _raw_write_lock_irqsave(& (adapter->ahw)->crb_lock);
    
#line 1207 
    qlcnic_pcie_sem_lock(adapter,7,136323364U);
    
#line 1208 
    rv = qlcnic_pci_set_crbwindow_2M(adapter,off);
    
#line 1209 
    if (rv == 0) 
#line 1210 
                 writel(data,(void volatile *)addr); else ;
    
#line 1211 
    qlcnic_pcie_sem_unlock(adapter,7);
    {
      unsigned long __dummy_0;
      unsigned long __dummy2_0;
      
    }
    
#line 1212 
    _raw_write_unlock_irqrestore(& (adapter->ahw)->crb_lock,flags);
    
#line 1213 
    __retres = rv;
    
#line 1213 
    goto return_label;
  }
  else ;
  
#line 1216 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: invalid offset: 0x%016lx\n","qlcnic_82xx_hw_write_wx_2M",off);
  
#line 1218 
  dump_stack();
  
#line 1219 
  __retres = -5;
  return_label: 
#line 1219 
                return __retres;
}


#line 1222  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_hw_read_wx_2M(struct qlcnic_adapter *adapter, ulong off, int *err)
{
  int __retres;
  unsigned long flags;
  int rv;
  
#line 1227 
  u32 data = 4294967295U;
  
#line 1228 
  void *addr = (void *)0;
  
#line 1230 
  rv = qlcnic_pci_get_crb_addr_2M(adapter->ahw,off,& addr);
  
#line 1232 
  if (rv == 0) {
    unsigned int tmp;
    
#line 1233 
    tmp = readl((void const volatile *)addr);
    
#line 1233 
    __retres = (int)tmp;
    
#line 1233 
    goto return_label;
  }
  else ;
  
#line 1235 
  if (rv > 0) {
    int tmp_0;
    {
      unsigned long __dummy;
      unsigned long __dummy2;
      
    }
    
#line 1237 
    flags = _raw_write_lock_irqsave(& (adapter->ahw)->crb_lock);
    
#line 1238 
    qlcnic_pcie_sem_lock(adapter,7,136323364U);
    
#line 1239 
    tmp_0 = qlcnic_pci_set_crbwindow_2M(adapter,off);
    
#line 1239 
    if (tmp_0 == 0) 
#line 1240 
                    data = readl((void const volatile *)addr); else ;
    
#line 1241 
    qlcnic_pcie_sem_unlock(adapter,7);
    {
      unsigned long __dummy_0;
      unsigned long __dummy2_0;
      
    }
    
#line 1242 
    _raw_write_unlock_irqrestore(& (adapter->ahw)->crb_lock,flags);
    
#line 1243 
    __retres = (int)data;
    
#line 1243 
    goto return_label;
  }
  else ;
  
#line 1246 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: invalid offset: 0x%016lx\n","qlcnic_82xx_hw_read_wx_2M",off);
  
#line 1248 
  dump_stack();
  
#line 1249 
  __retres = -1;
  return_label: 
#line 1249 
                return __retres;
}


#line 1252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void *qlcnic_get_ioaddr(struct qlcnic_hardware_context *ahw, u32 offset)
{
  
#line 1255 
  void *addr = (void *)0;
  {
    int tmp;
    
#line 1257 
    tmp = qlcnic_pci_get_crb_addr_2M(ahw,(unsigned long)offset,& addr);
    
#line 1257 
    int __ret_warn_on = tmp != 0;
    
#line 1257 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 1257 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c",1257); else ;
    
#line 1257 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  
#line 1259 
  return addr;
}


#line 1262  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static int qlcnic_pci_mem_access_direct(struct qlcnic_adapter *adapter, u32 window, u64 off, u64 *data, int op)
{
  int __retres;
  void *addr;
  u32 start;
  
#line 1268 
  ldv_mutex_lock_81(& (adapter->ahw)->mem_lock);
  
#line 1270 
  writel(window,(void volatile *)(adapter->ahw)->ocm_win_crb);
  
#line 1272 
  readl((void const volatile *)(adapter->ahw)->ocm_win_crb);
  
#line 1273 
  start = (unsigned int)off + 786432U;
  
#line 1275 
  addr = (adapter->ahw)->pci_base0 + start;
  
#line 1277 
  if (op == 0) 
#line 1278 
               *data = (u64)readq((void const volatile *)addr); else 
                                                                  
#line 1280 
                                                                  writeq((unsigned long)*data,(void volatile *)addr);
  
#line 1283 
  writel(0U,(void volatile *)(adapter->ahw)->ocm_win_crb);
  
#line 1284 
  readl((void const volatile *)(adapter->ahw)->ocm_win_crb);
  
#line 1286 
  ldv_mutex_unlock_82(& (adapter->ahw)->mem_lock);
  
#line 1287 
  __retres = 0;
  
#line 1287 
  return __retres;
}


#line 1291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static void qlcnic_pci_camqm_read_2M(struct qlcnic_adapter *adapter, u64 off, u64 *data)
{
  
#line 1293 
  void *addr = (adapter->ahw)->pci_base0 + (off + (u64)18446744073635100672U);
  
#line 1296 
  ldv_mutex_lock_83(& (adapter->ahw)->mem_lock);
  
#line 1297 
  *data = (u64)readq((void const volatile *)addr);
  
#line 1298 
  ldv_mutex_unlock_84(& (adapter->ahw)->mem_lock);
  
#line 1299 
  return;
}


#line 1302  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static void qlcnic_pci_camqm_write_2M(struct qlcnic_adapter *adapter, u64 off, u64 data)
{
  
#line 1304 
  void *addr = (adapter->ahw)->pci_base0 + (off + (u64)18446744073635100672U);
  
#line 1307 
  ldv_mutex_lock_85(& (adapter->ahw)->mem_lock);
  
#line 1308 
  writeq((unsigned long)data,(void volatile *)addr);
  
#line 1309 
  ldv_mutex_unlock_86(& (adapter->ahw)->mem_lock);
  
#line 1310 
  return;
}


#line 1315  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static void qlcnic_set_ms_controls(struct qlcnic_adapter *adapter, u64 off, struct qlcnic_ms_reg_ctrl *ms)
{
  
#line 1318 
  ms->control = 1090519184U;
  
#line 1319 
  ms->low = 1090519188U;
  
#line 1320 
  ms->hi = 1090519192U;
  
#line 1321 
  if ((off & 15ULL) != 0ULL) {
    
#line 1322 
    ms->wd[0] = 1090519200U;
    
#line 1323 
    ms->rd[0] = 1090519208U;
    
#line 1324 
    ms->wd[1] = 1090519204U;
    
#line 1325 
    ms->rd[1] = 1090519212U;
    
#line 1326 
    ms->wd[2] = 1090519216U;
    
#line 1327 
    ms->wd[3] = 1090519220U;
    
#line 1328 
    ms->rd[2] = 1090519224U;
    
#line 1329 
    ms->rd[3] = 1090519228U;
  }
  else {
    
#line 1331 
    ms->wd[0] = 1090519216U;
    
#line 1332 
    ms->rd[0] = 1090519224U;
    
#line 1333 
    ms->wd[1] = 1090519220U;
    
#line 1334 
    ms->rd[1] = 1090519228U;
    
#line 1335 
    ms->wd[2] = 1090519200U;
    
#line 1336 
    ms->wd[3] = 1090519204U;
    
#line 1337 
    ms->rd[2] = 1090519208U;
    
#line 1338 
    ms->rd[3] = 1090519212U;
  }
  
#line 1341 
  ms->ocm_window = (unsigned int)off & 268173312U;
  
#line 1342 
  ms->off = off & 262143ULL;
  
#line 1343 
  return;
}


#line 1345  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_pci_mem_write_2M(struct qlcnic_adapter *adapter, u64 off, u64 data)
{
  int __retres;
  int j;
  u32 temp;
  u32 off8;
  struct qlcnic_ms_reg_ctrl ms;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  
#line 1347 
  int ret = 0;
  
#line 1352 
  if ((off & 7ULL) != 0ULL) {
    
#line 1353 
    __retres = -5;
    
#line 1353 
    goto return_label;
  }
  else ;
  
#line 1355 
  memset((void *)(& ms),0,56UL);
  
#line 1356 
  if (off + 18446744060824649728ULL > 134217726ULL && off > 268435454ULL) {
    
#line 1360 
    __retres = -5;
    
#line 1360 
    goto return_label;
  }
  else ;
  
#line 1362 
  qlcnic_set_ms_controls(adapter,off,& ms);
  
#line 1364 
  if (off + 18446744065119617024ULL <= 1048574ULL) {
    int tmp;
    
#line 1365 
    tmp = qlcnic_pci_mem_access_direct(adapter,ms.ocm_window,ms.off,& data,1);
    
#line 1365 
    __retres = tmp;
    
#line 1365 
    goto return_label;
  }
  else ;
  
#line 1368 
  off8 = (unsigned int)off & 4294967280U;
  
#line 1370 
  ldv_mutex_lock_87(& (adapter->ahw)->mem_lock);
  
#line 1372 
  qlcnic_ind_wr(adapter,ms.low,off8);
  
#line 1373 
  qlcnic_ind_wr(adapter,ms.hi,0U);
  
#line 1375 
  qlcnic_ind_wr(adapter,ms.control,2U);
  
#line 1376 
  qlcnic_ind_wr(adapter,ms.control,3U);
  
#line 1378 
  j = 0;
  
#line 1378 
  goto ldv_56258;
  ldv_56257: 
#line 1379 
  ;
  
#line 1379 
  tmp_0 = qlcnic_ind_rd(adapter,ms.control);
  
#line 1379 
  temp = (unsigned int)tmp_0;
  
#line 1380 
  if ((temp & 8U) == 0U) 
#line 1381 
                         goto ldv_56256; else ;
  
#line 1378 
  j += 1;
  ldv_56258: 
#line 1379 
  ;
  
#line 1378 
  if (j <= 999) 
#line 1380 
                goto ldv_56257; else 
#line 1383 
                                     goto ldv_56256;
  ldv_56256: 
#line 1384 
  ;
  
#line 1384 
  if (j > 999) {
    
#line 1385 
    ret = -5;
    
#line 1386 
    goto done;
  }
  else ;
  
#line 1390 
  tmp_1 = qlcnic_ind_rd(adapter,ms.rd[0]);
  
#line 1390 
  ;
  
#line 1390 
  ;
  
#line 1390 
  qlcnic_ind_wr(adapter,ms.wd[0],(unsigned int)tmp_1);
  
#line 1391 
  tmp_2 = qlcnic_ind_rd(adapter,ms.rd[1]);
  
#line 1391 
  ;
  
#line 1391 
  ;
  
#line 1391 
  qlcnic_ind_wr(adapter,ms.wd[1],(unsigned int)tmp_2);
  
#line 1393 
  qlcnic_ind_wr(adapter,ms.wd[2],(unsigned int)data);
  
#line 1394 
  qlcnic_ind_wr(adapter,ms.wd[3],(unsigned int)(data >> 32));
  
#line 1396 
  qlcnic_ind_wr(adapter,ms.control,6U);
  
#line 1397 
  qlcnic_ind_wr(adapter,ms.control,7U);
  
#line 1399 
  j = 0;
  
#line 1399 
  goto ldv_56262;
  ldv_56261: 
#line 1400 
  ;
  
#line 1400 
  tmp_3 = qlcnic_ind_rd(adapter,ms.control);
  
#line 1400 
  temp = (unsigned int)tmp_3;
  
#line 1401 
  if ((temp & 8U) == 0U) 
#line 1402 
                         goto ldv_56260; else ;
  
#line 1399 
  j += 1;
  ldv_56262: 
#line 1400 
  ;
  
#line 1399 
  if (j <= 999) 
#line 1401 
                goto ldv_56261; else 
#line 1404 
                                     goto ldv_56260;
  ldv_56260: 
#line 1405 
  ;
  
#line 1405 
  if (j > 999) {
    int tmp_4;
    
#line 1406 
    tmp_4 = __printk_ratelimit("qlcnic_pci_mem_write_2M");
    
#line 1406 
    if (tmp_4 != 0) 
#line 1407 
                    dev_err((struct device const *)(& (adapter->pdev)->dev),"failed to write through agent\n"); else ;
    
#line 1409 
    ret = -5;
  }
  else 
#line 1411 
       ret = 0;
  done: 
#line 1413 
  ;
  
#line 1414 
  ldv_mutex_unlock_88(& (adapter->ahw)->mem_lock);
  
#line 1416 
  __retres = ret;
  return_label: 
#line 1416 
                return __retres;
}


#line 1419  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_pci_mem_read_2M(struct qlcnic_adapter *adapter, u64 off, u64 *data)
{
  int __retres;
  int j;
  int ret;
  u32 temp;
  u32 off8;
  u64 val;
  struct qlcnic_ms_reg_ctrl ms;
  int tmp_0;
  
#line 1427 
  if ((off & 7ULL) != 0ULL) {
    
#line 1428 
    __retres = -5;
    
#line 1428 
    goto return_label;
  }
  else ;
  
#line 1429 
  if (off + 18446744060824649728ULL > 134217726ULL && off > 268435454ULL) {
    
#line 1433 
    __retres = -5;
    
#line 1433 
    goto return_label;
  }
  else ;
  
#line 1435 
  memset((void *)(& ms),0,56UL);
  
#line 1436 
  qlcnic_set_ms_controls(adapter,off,& ms);
  
#line 1438 
  if (off + 18446744065119617024ULL <= 1048574ULL) {
    int tmp;
    
#line 1439 
    tmp = qlcnic_pci_mem_access_direct(adapter,ms.ocm_window,ms.off,data,0);
    
#line 1439 
    __retres = tmp;
    
#line 1439 
    goto return_label;
  }
  else ;
  
#line 1442 
  ldv_mutex_lock_89(& (adapter->ahw)->mem_lock);
  
#line 1444 
  off8 = (unsigned int)off & 4294967280U;
  
#line 1446 
  qlcnic_ind_wr(adapter,ms.low,off8);
  
#line 1447 
  qlcnic_ind_wr(adapter,ms.hi,0U);
  
#line 1449 
  qlcnic_ind_wr(adapter,ms.control,2U);
  
#line 1450 
  qlcnic_ind_wr(adapter,ms.control,3U);
  
#line 1452 
  j = 0;
  
#line 1452 
  goto ldv_56277;
  ldv_56276: 
#line 1453 
  ;
  
#line 1453 
  tmp_0 = qlcnic_ind_rd(adapter,ms.control);
  
#line 1453 
  temp = (unsigned int)tmp_0;
  
#line 1454 
  if ((temp & 8U) == 0U) 
#line 1455 
                         goto ldv_56275; else ;
  
#line 1452 
  j += 1;
  ldv_56277: 
#line 1453 
  ;
  
#line 1452 
  if (j <= 999) 
#line 1454 
                goto ldv_56276; else 
#line 1457 
                                     goto ldv_56275;
  ldv_56275: 
#line 1458 
  ;
  
#line 1458 
  if (j > 999) {
    int tmp_1;
    
#line 1459 
    tmp_1 = __printk_ratelimit("qlcnic_pci_mem_read_2M");
    
#line 1459 
    if (tmp_1 != 0) 
#line 1460 
                    dev_err((struct device const *)(& (adapter->pdev)->dev),"failed to read through agent\n"); else ;
    
#line 1462 
    ret = -5;
  }
  else {
    int tmp_2;
    int tmp_3;
    
#line 1465 
    tmp_2 = qlcnic_ind_rd(adapter,ms.rd[3]);
    
#line 1465 
    temp = (unsigned int)tmp_2;
    
#line 1466 
    val = (unsigned long long)temp << 32;
    
#line 1467 
    tmp_3 = qlcnic_ind_rd(adapter,ms.rd[2]);
    
#line 1467 
    val = (unsigned long long)tmp_3 | val;
    
#line 1468 
    *data = val;
    
#line 1469 
    ret = 0;
  }
  
#line 1472 
  ldv_mutex_unlock_90(& (adapter->ahw)->mem_lock);
  
#line 1474 
  __retres = ret;
  return_label: 
#line 1474 
                return __retres;
}


#line 1477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_get_board_info(struct qlcnic_adapter *adapter)
{
  int __retres;
  int offset;
  int board_type;
  int magic;
  int tmp;
  int tmp_0;
  
#line 1479 
  int err = 0;
  
#line 1480 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1482 
  offset = 16680;
  
#line 1483 
  tmp = qlcnic_rom_fast_read(adapter,(unsigned int)offset,(u32 *)(& magic));
  
#line 1483 
  if (tmp != 0) {
    
#line 1484 
    __retres = -5;
    
#line 1484 
    goto return_label;
  }
  else ;
  
#line 1486 
  if (magic != 305419896) {
    
#line 1487 
    dev_err((struct device const *)(& pdev->dev),"invalid board config, magic=%08x\n",magic);
    
#line 1489 
    __retres = -5;
    
#line 1489 
    goto return_label;
  }
  else ;
  
#line 1492 
  offset = 16392;
  
#line 1493 
  tmp_0 = qlcnic_rom_fast_read(adapter,(unsigned int)offset,(u32 *)(& board_type));
  
#line 1493 
  if (tmp_0 != 0) {
    
#line 1494 
    __retres = -5;
    
#line 1494 
    goto return_label;
  }
  else ;
  
#line 1496 
  (adapter->ahw)->board_type = (unsigned short)board_type;
  
#line 1498 
  if (board_type == 41) {
    int tmp_1;
    
#line 1499 
    tmp_1 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,154140684UL,& err);
    
#line 1499 
    u32 gpio = (unsigned int)tmp_1;
    
#line 1500 
    if (err == -5) {
      
#line 1501 
      __retres = err;
      
#line 1501 
      goto return_label;
    }
    else ;
    
#line 1502 
    if ((gpio & 32768U) == 0U) 
#line 1503 
                               board_type = 128; else ;
  }
  else ;
  
#line 1506 
  switch (board_type) {
    case 34: 
#line 1507 
    ;
    case 40: 
#line 1508 
    ;
    case 49: 
#line 1509 
    ;
    case 35: 
#line 1510 
    ;
    case 37: 
#line 1511 
    ;
    case 38: 
#line 1512 
    ;
    case 42: 
#line 1513 
    ;
    case 43: 
#line 1514 
    ;
    case 50: 
#line 1515 
    ;
    case 39: 
#line 1516 
    ;
    
#line 1517 
    (adapter->ahw)->port_type = (unsigned short)2U;
    
#line 1518 
    goto ldv_56298;
    case 33: 
#line 1519 
    ;
    case 36: 
#line 1520 
    ;
    case 41: 
#line 1521 
    ;
    
#line 1522 
    (adapter->ahw)->port_type = (unsigned short)1U;
    
#line 1523 
    goto ldv_56298;
    case 128: 
#line 1524 
    ;
    
#line 1525 
    if ((unsigned int)adapter->portnum <= 1U) 
#line 1525 
                                              (adapter->ahw)->port_type = (unsigned short)2U; else 
                                                                    
#line 1525 
                                                                    (adapter->ahw)->port_type = (unsigned short)1U;
    
#line 1527 
    goto ldv_56298;
    default: 
#line 1528 
    ;
    
#line 1529 
    dev_err((struct device const *)(& pdev->dev),"unknown board type %x\n",board_type);
    
#line 1530 
    (adapter->ahw)->port_type = (unsigned short)2U;
    
#line 1531 
    goto ldv_56298;
  }
  ldv_56298: 
#line 1534 
  ;
  
#line 1534 
  __retres = 0;
  return_label: 
#line 1534 
                return __retres;
}


#line 1538  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
static int qlcnic_wol_supported(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 wol_cfg;
  int tmp;
  
#line 1541 
  int err = 0;
  
#line 1543 
  tmp = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323460UL,& err);
  
#line 1543 
  wol_cfg = (unsigned int)tmp;
  
#line 1544 
  if ((((unsigned long)wol_cfg >> (int)adapter->portnum) & 1UL) != 0UL) {
    int tmp_0;
    
#line 1545 
    tmp_0 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323464UL,& err);
    
#line 1545 
    wol_cfg = (unsigned int)tmp_0;
    
#line 1546 
    if (err == -5) {
      
#line 1547 
      __retres = err;
      
#line 1547 
      goto return_label;
    }
    else ;
    
#line 1548 
    if (((unsigned int)(1 << (int)adapter->portnum) & wol_cfg) != 0U) {
      
#line 1549 
      __retres = 1;
      
#line 1549 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1552 
  __retres = 0;
  return_label: 
#line 1552 
                return __retres;
}


#line 1555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_config_led(struct qlcnic_adapter *adapter, u32 state, u32 rate)
{
  struct qlcnic_nic_req req;
  int rv;
  u64 word;
  
#line 1561 
  memset((void *)(& req),0,64UL);
  
#line 1562 
  req.qhdr = 159383552ULL;
  
#line 1564 
  word = ((unsigned long long)adapter->portnum << 16) | 4ULL;
  
#line 1565 
  req.req_hdr = word;
  
#line 1567 
  req.words[0] = ((unsigned long long)rate << 32) | (unsigned long long)adapter->portnum;
  
#line 1568 
  req.words[1] = (unsigned long long)state;
  
#line 1570 
  rv = qlcnic_send_cmd_descs(adapter,(struct cmd_desc_type0 *)(& req),1);
  
#line 1571 
  if (rv != 0) 
#line 1572 
               dev_err((struct device const *)(& (adapter->pdev)->dev),"LED configuration failed.\n"); else ;
  
#line 1574 
  return rv;
}


#line 1577  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_get_beacon_state(struct qlcnic_adapter *adapter)
{
  struct qlcnic_cmd_args cmd;
  u8 beacon_state;
  
#line 1579 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1582 
  int err = 0;
  
#line 1584 
  if ((ahw->extra_capability[0] & 128U) != 0U) {
    
#line 1585 
    err = qlcnic_alloc_mbx_args(& cmd,adapter,60U);
    
#line 1587 
    if (err == 0) {
      
#line 1588 
      err = qlcnic_issue_cmd(adapter,& cmd);
      
#line 1589 
      if (err != 0) 
#line 1590 
                    netdev_err((struct net_device const *)adapter->netdev,"Failed to get current beacon state, err=%d\n",err);
      else {
        
#line 1594 
        beacon_state = (unsigned char)*(cmd.rsp.arg + 1U);
        
#line 1595 
        if ((unsigned int)beacon_state == 13U) 
#line 1596 
                                               ahw->beacon_state = (unsigned char)0U;
        else 
          
#line 1597 
          if ((unsigned int)beacon_state == 12U) 
#line 1598 
                                                 ahw->beacon_state = (unsigned char)2U; else ;
      }
    }
    else ;
    
#line 1601 
    qlcnic_free_mbx_args(& cmd);
  }
  else ;
  
#line 1604 
  return;
}


#line 1607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_get_func_no(struct qlcnic_adapter *adapter)
{
  void *msix_base_addr;
  u32 func;
  u32 msix_base;
  
#line 1613 
  pci_read_config_dword((struct pci_dev const *)adapter->pdev,68,& func);
  
#line 1614 
  msix_base_addr = (adapter->ahw)->pci_base0 + 1253648U;
  
#line 1615 
  msix_base = readl((void const volatile *)msix_base_addr);
  
#line 1616 
  func = (func - msix_base) / 4096U;
  
#line 1617 
  (adapter->ahw)->pci_func = (unsigned char)func;
  
#line 1618 
  return;
}


#line 1620  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_read_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size)
{
  u32 data;
  u64 qmdata;
  
#line 1623 
  int err = 0;
  
#line 1627 
  if ((unsigned long long)offset + (unsigned long long)18446744073634054144U <= (unsigned long long)2047U) {
    
#line 1628 
    qlcnic_pci_camqm_read_2M(adapter,(unsigned long long)offset,& qmdata);
    
#line 1629 
    memcpy((void *)buf,(void const *)(& qmdata),size);
  }
  else {
    int tmp;
    
#line 1631 
    tmp = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)offset,& err);
    
#line 1631 
    data = (unsigned int)tmp;
    
#line 1632 
    memcpy((void *)buf,(void const *)(& data),size);
  }
  
#line 1634 
  return;
}


#line 1636  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_write_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size)
{
  u32 data;
  u64 qmdata;
  
#line 1642 
  if ((unsigned long long)offset + (unsigned long long)18446744073634054144U <= (unsigned long long)2047U) {
    
#line 1643 
    memcpy((void *)(& qmdata),(void const *)buf,size);
    
#line 1644 
    qlcnic_pci_camqm_write_2M(adapter,(unsigned long long)offset,qmdata);
  }
  else {
    
#line 1646 
    memcpy((void *)(& data),(void const *)buf,size);
    
#line 1647 
    (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)offset,data);
  }
  
#line 1649 
  return;
}


#line 1651  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_api_lock(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 1653 
  tmp = qlcnic_pcie_sem_lock(adapter,5,0U);
  
#line 1653 
  return tmp;
}


#line 1656  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
void qlcnic_82xx_api_unlock(struct qlcnic_adapter *adapter)
{
  
#line 1658 
  qlcnic_pcie_sem_unlock(adapter,5);
  
#line 1659 
  return;
}


#line 1661  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_shutdown(struct pci_dev *pdev)
{
  int __retres;
  int retval;
  bool tmp_0;
  int tmp_1;
  
#line 1663 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  
#line 1664 
  struct net_device *netdev = adapter->netdev;
  
#line 1667 
  netif_device_detach(netdev);
  
#line 1669 
  qlcnic_cancel_idc_work(adapter);
  
#line 1671 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 1671 
  if ((int)tmp_0 != 0) 
#line 1672 
                       qlcnic_down(adapter,netdev); else ;
  
#line 1674 
  qlcnic_clr_all_drv_state(adapter,(unsigned char)0);
  
#line 1676 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 1678 
  retval = pci_save_state(pdev);
  
#line 1679 
  if (retval != 0) {
    
#line 1680 
    __retres = retval;
    
#line 1680 
    goto return_label;
  }
  else ;
  
#line 1682 
  tmp_1 = qlcnic_wol_supported(adapter);
  
#line 1682 
  if (tmp_1 != 0) {
    
#line 1683 
    pci_enable_wake(pdev,4,(_Bool)1);
    
#line 1684 
    pci_enable_wake(pdev,3,(_Bool)1);
  }
  else ;
  
#line 1687 
  __retres = 0;
  return_label: 
#line 1687 
                return __retres;
}


#line 1690  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_hw.c"
int qlcnic_82xx_resume(struct qlcnic_adapter *adapter)
{
  int __retres;
  int err;
  bool tmp;
  
#line 1692 
  struct net_device *netdev = adapter->netdev;
  
#line 1695 
  err = qlcnic_start_firmware_0(adapter);
  
#line 1696 
  if (err != 0) {
    
#line 1697 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"failed to start firmware\n");
    
#line 1698 
    __retres = err;
    
#line 1698 
    goto return_label;
  }
  else ;
  
#line 1701 
  tmp = netif_running((struct net_device const *)netdev);
  
#line 1701 
  if ((int)tmp != 0) {
    
#line 1702 
    err = qlcnic_up(adapter,netdev);
    
#line 1703 
    if (err == 0) 
#line 1704 
                  qlcnic_restore_indev_addr(netdev,1UL); else ;
  }
  else ;
  
#line 1707 
  netif_device_attach(netdev);
  
#line 1708 
  qlcnic_schedule_work(adapter,& qlcnic_fw_poll_work,250);
  
#line 1709 
  __retres = err;
  return_label: 
#line 1709 
                return __retres;
}


#line 510  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void *kzalloc_3(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 513 
  tmp = ldv_kzalloc(size,flags);
  
#line 513 
  return tmp;
}


#line 633  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_spin_lock_bh_63(spinlock_t *lock)
{
  
#line 637 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  
#line 639 
  spin_lock_bh_0(lock);
  
#line 640 
  return;
}


#line 676  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_spin_unlock_bh_66(spinlock_t *lock)
{
  
#line 680 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  
#line 682 
  spin_unlock_bh_0(lock);
  
#line 683 
  return;
}


#line 766  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_spin_lock_bh_75_0(spinlock_t *lock)
{
  
#line 770 
  ldv_spin_model_lock((char *)"mac_learn_lock_of_qlcnic_adapter");
  
#line 772 
  spin_lock_bh_0(lock);
  
#line 773 
  return;
}


#line 776  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_spin_unlock_bh_76_0(spinlock_t *lock)
{
  
#line 780 
  ldv_spin_model_unlock((char *)"mac_learn_lock_of_qlcnic_adapter");
  
#line 782 
  spin_unlock_bh_0(lock);
  
#line 783 
  return;
}


#line 786  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_spin_lock_bh_77(spinlock_t *lock)
{
  
#line 790 
  ldv_spin_model_lock((char *)"rx_mac_learn_lock_of_qlcnic_adapter");
  
#line 792 
  spin_lock_bh_0(lock);
  
#line 793 
  return;
}


#line 796  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_spin_unlock_bh_78(spinlock_t *lock)
{
  
#line 800 
  ldv_spin_model_unlock((char *)"rx_mac_learn_lock_of_qlcnic_adapter");
  
#line 802 
  spin_unlock_bh_0(lock);
  
#line 803 
  return;
}


#line 806  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_spin_lock_bh_79(spinlock_t *lock)
{
  
#line 810 
  ldv_spin_model_lock((char *)"mac_learn_lock_of_qlcnic_adapter");
  
#line 812 
  spin_lock_bh_0(lock);
  
#line 813 
  return;
}


#line 816  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_spin_unlock_bh_80(spinlock_t *lock)
{
  
#line 820 
  ldv_spin_model_unlock((char *)"mac_learn_lock_of_qlcnic_adapter");
  
#line 822 
  spin_unlock_bh_0(lock);
  
#line 823 
  return;
}


#line 826  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_mutex_lock_81(struct mutex *ldv_func_arg1)
{
  
#line 830 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"mem_lock_of_qlcnic_hardware_context");
  
#line 831 
  return;
}


#line 834  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_mutex_unlock_82(struct mutex *ldv_func_arg1)
{
  
#line 838 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mem_lock_of_qlcnic_hardware_context");
  
#line 839 
  return;
}


#line 842  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_mutex_lock_83(struct mutex *ldv_func_arg1)
{
  
#line 846 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"mem_lock_of_qlcnic_hardware_context");
  
#line 847 
  return;
}


#line 850  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_mutex_unlock_84(struct mutex *ldv_func_arg1)
{
  
#line 854 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mem_lock_of_qlcnic_hardware_context");
  
#line 855 
  return;
}


#line 858  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_mutex_lock_85(struct mutex *ldv_func_arg1)
{
  
#line 862 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"mem_lock_of_qlcnic_hardware_context");
  
#line 863 
  return;
}


#line 866  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_mutex_unlock_86(struct mutex *ldv_func_arg1)
{
  
#line 870 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mem_lock_of_qlcnic_hardware_context");
  
#line 871 
  return;
}


#line 874  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_mutex_lock_87(struct mutex *ldv_func_arg1)
{
  
#line 878 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"mem_lock_of_qlcnic_hardware_context");
  
#line 879 
  return;
}


#line 882  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_mutex_unlock_88(struct mutex *ldv_func_arg1)
{
  
#line 886 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mem_lock_of_qlcnic_hardware_context");
  
#line 887 
  return;
}


#line 890  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_mutex_lock_89(struct mutex *ldv_func_arg1)
{
  
#line 894 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"mem_lock_of_qlcnic_hardware_context");
  
#line 895 
  return;
}


#line 898  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_hw.c.aux"
static void ldv_mutex_unlock_90(struct mutex *ldv_func_arg1)
{
  
#line 902 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mem_lock_of_qlcnic_hardware_context");
  
#line 903 
  return;
}


#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
int qlcnic_83xx_get_port_info(struct qlcnic_adapter *adapter);


#line 612 
int qlcnic_83xx_idc_ready_state_entry(struct qlcnic_adapter *adapter);


#line 616 
int qlcnic_83xx_lock_driver(struct qlcnic_adapter *adapter);


#line 617 
void qlcnic_83xx_unlock_driver(struct qlcnic_adapter *adapter);


#line 619 
int qlcnic_83xx_idc_vnic_pf_entry(struct qlcnic_adapter *adapter);


#line 620 
int qlcnic_83xx_disable_vnic_mode(struct qlcnic_adapter *adapter, int lock);


#line 621 
int qlcnic_83xx_config_vnic_opmode(struct qlcnic_adapter *adapter);


#line 649 
int qlcnic_83xx_set_vnic_opmode(struct qlcnic_adapter *adapter);


#line 650 
int qlcnic_83xx_check_vnic_state(struct qlcnic_adapter *adapter);


#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
static int qlcnic_83xx_enable_vnic_mode(struct qlcnic_adapter *adapter, int lock)
{
  int __retres;
  
#line 13 
  if (lock != 0) {
    int tmp;
    
#line 14 
    tmp = qlcnic_83xx_lock_driver(adapter);
    
#line 14 
    if (tmp != 0) {
      
#line 15 
      __retres = -16;
      
#line 15 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 17 
  writel(1U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 38U)));
  
#line 18 
  if (lock != 0) 
#line 19 
                 qlcnic_83xx_unlock_driver(adapter); else ;
  
#line 21 
  __retres = 0;
  return_label: 
#line 21 
                return __retres;
}


#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
int qlcnic_83xx_disable_vnic_mode(struct qlcnic_adapter *adapter, int lock)
{
  int __retres;
  
#line 26 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 28 
  if (lock != 0) {
    int tmp;
    
#line 29 
    tmp = qlcnic_83xx_lock_driver(adapter);
    
#line 29 
    if (tmp != 0) {
      
#line 30 
      __retres = -16;
      
#line 30 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 33 
  writel(0U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 38U)));
  
#line 34 
  ahw->idc.vnic_state = (unsigned char)0U;
  
#line 36 
  if (lock != 0) 
#line 37 
                 qlcnic_83xx_unlock_driver(adapter); else ;
  
#line 39 
  __retres = 0;
  return_label: 
#line 39 
                return __retres;
}


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
int qlcnic_83xx_set_vnic_opmode(struct qlcnic_adapter *adapter)
{
  int __retres;
  u8 id;
  int tmp;
  
#line 45 
  int ret = -16;
  
#line 46 
  u32 data = 0U;
  
#line 47 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 49 
  tmp = qlcnic_83xx_lock_driver(adapter);
  
#line 49 
  if (tmp != 0) {
    
#line 50 
    __retres = ret;
    
#line 50 
    goto return_label;
  }
  else ;
  
#line 52 
  id = ahw->pci_func;
  
#line 53 
  data = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 37U)));
  
#line 54 
  data = (unsigned int)(~ (3 << (int)id * 2)) & data;
  
#line 57 
  writel(data,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 37U)));
  
#line 59 
  qlcnic_83xx_unlock_driver(adapter);
  
#line 61 
  __retres = 0;
  return_label: 
#line 61 
                return __retres;
}


#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
static void qlcnic_83xx_config_vnic_buff_descriptors(struct qlcnic_adapter *adapter)
{
  
#line 67 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 69 
  if ((unsigned int)ahw->port_type == 2U) {
    
#line 70 
    adapter->num_rxd = (unsigned short)1024U;
    
#line 71 
    adapter->max_rxd = (unsigned short)2048U;
    
#line 72 
    adapter->num_jumbo_rxd = (unsigned short)1024U;
    
#line 73 
    adapter->max_jumbo_rxd = (unsigned short)1024U;
  }
  else 
    
#line 75 
    if ((unsigned int)ahw->port_type == 1U) {
      
#line 76 
      adapter->num_rxd = (unsigned short)2048U;
      
#line 77 
      adapter->num_jumbo_rxd = (unsigned short)512U;
      
#line 78 
      adapter->max_jumbo_rxd = (unsigned short)512U;
      
#line 79 
      adapter->max_rxd = (unsigned short)4096U;
    }
    else ;
  
#line 81 
  adapter->num_txd = (unsigned short)1024U;
  
#line 82 
  adapter->max_rds_rings = (unsigned char)2U;
  
#line 83 
  return;
}


#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
static int qlcnic_83xx_init_mgmt_vnic(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_npar_info *npar;
  int i;
  int tmp_3;
  
#line 97 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 98 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 100 
  int err = -5;
  
#line 102 
  qlcnic_83xx_get_minidump_template(adapter);
  
#line 104 
  if ((adapter->flags & 128U) == 0U) {
    int tmp;
    int tmp_0;
    int tmp_1;
    
#line 105 
    tmp = qlcnic_init_pci_info(adapter);
    
#line 105 
    if (tmp != 0) {
      
#line 106 
      __retres = err;
      
#line 106 
      goto return_label;
    }
    else ;
    
#line 108 
    npar = adapter->npars;
    
#line 110 
    i = 0;
    
#line 110 
    goto ldv_53769;
    ldv_53768: 
#line 111 
    ;
    
#line 111 
    _dev_info((struct device const *)dev,"id:%d active:%d type:%d port:%d min_bw:%d max_bw:%d mac_addr:%pM\n",(int)npar->pci_func,(int)npar->active,(int)npar->type,(int)npar->phy_port,(int)npar->min_bw,(int)npar->max_bw,(u8 *)(& npar->mac));
    
#line 110 
    i += 1;
    
#line 110 
    npar += 1;
    ldv_53769: 
#line 111 
    ;
    
#line 110 
    if ((int)ahw->total_nic_func > i) 
#line 112 
                                      goto ldv_53768; else 
#line 115 
                                                           goto ldv_53770;
    ldv_53770: 
#line 116 
    ;
    
#line 117 
    _dev_info((struct device const *)dev,"Max functions = %d, active functions = %d\n",(int)ahw->max_pci_func,(int)ahw->total_nic_func);
    
#line 120 
    tmp_0 = qlcnic_83xx_set_vnic_opmode(adapter);
    
#line 120 
    if (tmp_0 != 0) {
      
#line 121 
      __retres = err;
      
#line 121 
      goto return_label;
    }
    else ;
    
#line 123 
    tmp_1 = qlcnic_set_default_offload_settings(adapter);
    
#line 123 
    if (tmp_1 != 0) {
      
#line 124 
      __retres = err;
      
#line 124 
      goto return_label;
    }
    else ;
  }
  else {
    int tmp_2;
    
#line 126 
    tmp_2 = qlcnic_reset_npar_config(adapter);
    
#line 126 
    if (tmp_2 != 0) {
      
#line 127 
      __retres = err;
      
#line 127 
      goto return_label;
    }
    else ;
  }
  
#line 130 
  tmp_3 = qlcnic_83xx_get_port_info(adapter);
  
#line 130 
  if (tmp_3 != 0) {
    
#line 131 
    __retres = err;
    
#line 131 
    goto return_label;
  }
  else ;
  
#line 133 
  qlcnic_83xx_config_vnic_buff_descriptors(adapter);
  
#line 134 
  ahw->msix_supported = (unsigned char)(qlcnic_use_msi_x != 0);
  
#line 135 
  adapter->flags |= 128U;
  
#line 136 
  qlcnic_83xx_enable_vnic_mode(adapter,1);
  
#line 138 
  _dev_info((struct device const *)dev,"HAL Version: %d, Management function\n",ahw->fw_hal_version);
  
#line 141 
  __retres = 0;
  return_label: 
#line 141 
                return __retres;
}


#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
static int qlcnic_83xx_init_privileged_vnic(struct qlcnic_adapter *adapter)
{
  int __retres;
  int tmp;
  
#line 146 
  int err = -5;
  
#line 148 
  qlcnic_83xx_get_minidump_template(adapter);
  
#line 149 
  tmp = qlcnic_83xx_get_port_info(adapter);
  
#line 149 
  if (tmp != 0) {
    
#line 150 
    __retres = err;
    
#line 150 
    goto return_label;
  }
  else ;
  
#line 152 
  qlcnic_83xx_config_vnic_buff_descriptors(adapter);
  
#line 153 
  (adapter->ahw)->msix_supported = (unsigned char)(qlcnic_use_msi_x != 0);
  
#line 154 
  adapter->flags |= 128U;
  
#line 156 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"HAL Version: %d, Privileged function\n",(adapter->ahw)->fw_hal_version);
  
#line 159 
  __retres = 0;
  return_label: 
#line 159 
                return __retres;
}


#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
static int qlcnic_83xx_init_non_privileged_vnic(struct qlcnic_adapter *adapter)
{
  int __retres;
  int tmp;
  int tmp_0;
  
#line 164 
  int err = -5;
  
#line 166 
  qlcnic_83xx_get_fw_version(adapter);
  
#line 167 
  tmp = qlcnic_set_eswitch_port_config(adapter);
  
#line 167 
  if (tmp != 0) {
    
#line 168 
    __retres = err;
    
#line 168 
    goto return_label;
  }
  else ;
  
#line 170 
  tmp_0 = qlcnic_83xx_get_port_info(adapter);
  
#line 170 
  if (tmp_0 != 0) {
    
#line 171 
    __retres = err;
    
#line 171 
    goto return_label;
  }
  else ;
  
#line 173 
  qlcnic_83xx_config_vnic_buff_descriptors(adapter);
  
#line 174 
  (adapter->ahw)->msix_supported = (unsigned char)(qlcnic_use_msi_x != 0);
  
#line 175 
  adapter->flags |= 128U;
  
#line 177 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"HAL Version: %d, Virtual function\n",(adapter->ahw)->fw_hal_version);
  
#line 180 
  __retres = 0;
  return_label: 
#line 180 
                return __retres;
}


#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
int qlcnic_83xx_config_vnic_opmode(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 op_mode;
  u32 priv_level;
  
#line 195 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 196 
  struct qlcnic_nic_template *nic_ops = adapter->nic_ops;
  
#line 198 
  qlcnic_get_func_no(adapter);
  
#line 199 
  op_mode = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 37U)));
  
#line 201 
  if (op_mode == 1431655765U) 
#line 202 
                              priv_level = 0U; else 
#line 204 
                                                    priv_level = (op_mode >> (int)ahw->pci_func * 2) & 3U;
  
#line 206 
  switch (priv_level) {
    case (u32)2: 
#line 207 
    ;
    
#line 208 
    ahw->op_mode = (unsigned short)2U;
    
#line 209 
    ahw->idc.state_entry = & qlcnic_83xx_idc_ready_state_entry;
    
#line 210 
    nic_ops->init_driver = & qlcnic_83xx_init_non_privileged_vnic;
    
#line 211 
    goto ldv_53787;
    case (u32)1: 
#line 212 
    ;
    
#line 213 
    ahw->op_mode = (unsigned short)1U;
    
#line 214 
    ahw->idc.state_entry = & qlcnic_83xx_idc_vnic_pf_entry;
    
#line 215 
    nic_ops->init_driver = & qlcnic_83xx_init_privileged_vnic;
    
#line 216 
    goto ldv_53787;
    case (u32)0: 
#line 217 
    ;
    
#line 218 
    ahw->op_mode = (unsigned short)0U;
    
#line 219 
    ahw->idc.state_entry = & qlcnic_83xx_idc_ready_state_entry;
    
#line 220 
    nic_ops->init_driver = & qlcnic_83xx_init_mgmt_vnic;
    
#line 221 
    goto ldv_53787;
    default: 
#line 222 
    ;
    
#line 223 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Invalid Virtual NIC opmode\n");
    
#line 224 
    __retres = -5;
    
#line 224 
    goto return_label;
  }
  ldv_53787: 
#line 227 
  ;
  
#line 227 
  if ((ahw->capabilities & 8388608U) != 0U) {
    
#line 228 
    adapter->flags |= 64U;
    
#line 229 
    if ((int)adapter->drv_mac_learn != 0) 
#line 230 
                                          adapter->rx_mac_learn = (_Bool)1; else ;
  }
  else {
    
#line 232 
    adapter->flags &= 4294967231U;
    
#line 233 
    adapter->rx_mac_learn = (_Bool)0;
  }
  
#line 236 
  ahw->idc.vnic_state = (unsigned char)0U;
  
#line 237 
  ahw->idc.vnic_wait_limit = (unsigned char)30U;
  
#line 239 
  __retres = 0;
  return_label: 
#line 239 
                return __retres;
}


#line 242  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
int qlcnic_83xx_check_vnic_state(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 state;
  
#line 244 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 245 
  struct qlc_83xx_idc *idc = & ahw->idc;
  
#line 248 
  state = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 38U)));
  
#line 249 
  goto ldv_53798;
  ldv_53797: 
#line 250 
  ;
  
#line 250 
  msleep(1000U);
  
#line 251 
  state = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 38U)));
  ldv_53798: 
#line 252 
  ;
  
#line 249 
  if (state != 1U) {
    u8 tmp;
    
#line 249 
    tmp = idc->vnic_wait_limit;
    
#line 249 
    idc->vnic_wait_limit = (u8)((int)idc->vnic_wait_limit - 1);
    
#line 249 
    ;
    
#line 249 
    if ((unsigned int)tmp != 0U) 
#line 251 
                                 goto ldv_53797; else 
#line 254 
                                                      goto ldv_53799;
  }
  else 
#line 254 
       goto ldv_53799;
  ldv_53799: 
#line 255 
  ;
  
#line 254 
  if ((unsigned int)idc->vnic_wait_limit == 0U) {
    
#line 255 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"vNIC mode not operational, state check timed out.\n");
    
#line 257 
    __retres = -5;
    
#line 257 
    goto return_label;
  }
  else ;
  
#line 260 
  __retres = 0;
  return_label: 
#line 260 
                return __retres;
}


#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_vnic.c"
int qlcnic_83xx_set_port_eswitch_status(struct qlcnic_adapter *adapter, int func, int *port_id)
{
  int __retres;
  struct qlcnic_info nic_info;
  
#line 267 
  int err = 0;
  
#line 269 
  memset((void *)(& nic_info),0,72UL);
  
#line 271 
  err = qlcnic_get_nic_info(adapter,& nic_info,(unsigned char)((int)((unsigned char)func)));
  
#line 272 
  if (err != 0) {
    
#line 273 
    __retres = err;
    
#line 273 
    goto return_label;
  }
  else ;
  
#line 275 
  if ((nic_info.capabilities & 8388608U) != 0U) 
#line 276 
                                                *port_id = (int)nic_info.phys_port; else 
                                                                    
#line 278 
                                                                    err = -5;
  
#line 280 
  if (err == 0) 
#line 281 
                (adapter->eswitch + *port_id)->flags |= 2U; else ;
  
#line 283 
  __retres = err;
  return_label: 
#line 283 
                return __retres;
}


#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
void __dynamic_dev_dbg(struct _ddebug *, struct device const *, char const * , ...);


#line 271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int kstrtoull(char const *, unsigned int, unsigned long long *);


#line 290  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
__inline static int kstrtoul(char const *s, unsigned int base, unsigned long *res)
{
  int tmp;
  
#line 298 
  tmp = kstrtoull(s,base,(unsigned long long *)res);
  
#line 298 
  return tmp;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
static long PTR_ERR(void const *ptr);


#line 41 
static bool IS_ERR(void const *ptr);


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err(void const *ptr);


#line 30 
long ldv_ptr_err(void const *ptr);


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags);


#line 230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
int sysfs_create_bin_file(struct kobject *, struct bin_attribute const *);


#line 232 
void sysfs_remove_bin_file(struct kobject *, struct bin_attribute const *);


#line 595  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
static int ldv_device_create_file_75(struct device *ldv_func_arg1, struct device_attribute const *ldv_func_arg2);


#line 599 
static int ldv_device_create_file_77(struct device *ldv_func_arg1, struct device_attribute const *ldv_func_arg2);


#line 603 
static int ldv_device_create_file_78(struct device *ldv_func_arg1, struct device_attribute const *ldv_func_arg2);


#line 609 
static void ldv_device_remove_file_76(struct device *ldv_func_arg1, struct device_attribute const *ldv_func_arg2);


#line 613 
static void ldv_device_remove_file_79(struct device *ldv_func_arg1, struct device_attribute const *ldv_func_arg2);


#line 617 
static void ldv_device_remove_file_80(struct device *ldv_func_arg1, struct device_attribute const *ldv_func_arg2);


#line 621 
int device_create_bin_file(struct device *, struct bin_attribute const *);


#line 623 
void device_remove_bin_file(struct device *, struct bin_attribute const *);


#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
void qlcnic_83xx_add_sysfs(struct qlcnic_adapter *adapter);


#line 544 
void qlcnic_83xx_remove_sysfs(struct qlcnic_adapter *adapter);


#line 561 
int qlcnic_83xx_config_led(struct qlcnic_adapter *adapter, u32 state, u32 beacon);


#line 599 
int qlcnic_83xx_erase_flash_sector(struct qlcnic_adapter *adapter, u32 sector_start_addr);


#line 600 
int qlcnic_83xx_flash_bulk_write(struct qlcnic_adapter *adapter, u32 addr, u32 *p_data, int count);


#line 601 
int qlcnic_83xx_flash_write32(struct qlcnic_adapter *adapter, u32 addr, u32 *p_data);


#line 643 
int qlcnic_83xx_enable_flash_write(struct qlcnic_adapter *adapter);


#line 644 
int qlcnic_83xx_disable_flash_write(struct qlcnic_adapter *adapter);


#line 1662  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
int qlcnic_get_port_stats(struct qlcnic_adapter *adapter, u8 const func, u8 const rx_tx, struct __qlcnic_esw_statistics *esw_stats);


#line 1664 
int qlcnic_get_eswitch_stats(struct qlcnic_adapter *adapter, u8 const eswitch, u8 const rx_tx, struct __qlcnic_esw_statistics *esw_stats);


#line 1666 
int qlcnic_clear_esw_stats(struct qlcnic_adapter *adapter, u8 const func_esw, u8 const port, u8 const rx_tx);


#line 1710 
int qlcnic_is_valid_nic_func(struct qlcnic_adapter *adapter, u8 pci_func);


#line 1849  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_read_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size)
{
  
#line 1852 
  (*(((adapter->ahw)->hw_ops)->read_crb))(adapter,buf,offset,size);
  
#line 1853 
  return;
}


#line 1855  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_write_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size)
{
  
#line 1858 
  (*(((adapter->ahw)->hw_ops)->write_crb))(adapter,buf,offset,size);
  
#line 1859 
  return;
}


#line 2067  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_get_beacon_state(struct qlcnic_adapter *adapter)
{
  
#line 2069 
  (*(((adapter->ahw)->hw_ops)->get_beacon_state))(adapter);
  
#line 2070 
  return;
}


#line 2133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_config_led(struct qlcnic_adapter *adapter, u32 state, u32 rate)
{
  int tmp;
  
#line 2136 
  tmp = (*((adapter->nic_ops)->config_led))(adapter,state,rate);
  
#line 2136 
  return tmp;
}


#line 2375  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_swap32_buffer(u32 *buffer, int count)
{
  
#line 2377 
  return;
}


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hwmon.h"
struct device *hwmon_device_register_with_groups(struct device *, char const *, void *, struct attribute_group const **);


#line 30 
void hwmon_device_unregister(struct device *);


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
int qlcnicvf_config_bridged_mode(struct qlcnic_adapter *adapter, u32 enable)
{
  int __retres;
  
#line 29 
  __retres = -95;
  
#line 29 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
int qlcnicvf_config_led(struct qlcnic_adapter *adapter, u32 state, u32 rate)
{
  int __retres;
  
#line 34 
  __retres = -95;
  
#line 34 
  return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_store_bridged_mode(struct device *dev, struct device_attribute *attr, char const *buf, size_t len)
{
  ssize_t __retres;
  unsigned long new;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  
#line 41 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 43 
  int ret = -22;
  
#line 45 
  if (((adapter->ahw)->capabilities & 256U) == 0U) 
#line 46 
                                                   goto err_out; else ;
  
#line 48 
  tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
  
#line 48 
  if (tmp_0 == 0) 
#line 49 
                  goto err_out; else ;
  
#line 51 
  tmp_1 = kstrtoul(buf,2U,& new);
  
#line 51 
  if (tmp_1 != 0) 
#line 52 
                  goto err_out; else ;
  
#line 54 
  tmp_2 = qlcnic_config_bridged_mode(adapter,(unsigned int)(new != 0UL));
  
#line 54 
  if (tmp_2 == 0) 
#line 55 
                  ret = (int)len; else ;
  err_out: 
#line 57 
  ;
  
#line 58 
  __retres = (long)ret;
  
#line 58 
  return __retres;
}


#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_show_bridged_mode(struct device *dev, struct device_attribute *attr, char *buf)
{
  ssize_t __retres;
  int tmp_0;
  
#line 65 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 66 
  int bridged_mode = 0;
  
#line 68 
  if (((adapter->ahw)->capabilities & 256U) != 0U) 
#line 69 
                                                   bridged_mode = (adapter->flags & 16U) != 0U; else ;
  
#line 71 
  tmp_0 = sprintf(buf,"%d\n",bridged_mode);
  
#line 71 
  __retres = (long)tmp_0;
  
#line 71 
  return __retres;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_store_diag_mode(struct device *dev, struct device_attribute *attr, char const *buf, size_t len)
{
  ssize_t __retres;
  unsigned long new;
  int tmp_0;
  
#line 78 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 81 
  tmp_0 = kstrtoul(buf,2U,& new);
  
#line 81 
  if (tmp_0 != 0) {
    
#line 82 
    __retres = -22L;
    
#line 82 
    goto return_label;
  }
  else ;
  
#line 84 
  if ((new != 0UL) ^ ((adapter->flags & 32U) != 0U)) 
#line 85 
                                                     adapter->flags ^= 32U; else ;
  
#line 87 
  __retres = (long)len;
  return_label: 
#line 87 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_show_diag_mode(struct device *dev, struct device_attribute *attr, char *buf)
{
  ssize_t __retres;
  int tmp_0;
  
#line 93 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 94 
  tmp_0 = sprintf(buf,"%d\n",(adapter->flags & 32U) != 0U);
  
#line 94 
  __retres = (long)tmp_0;
  
#line 94 
  return __retres;
}


#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int qlcnic_validate_beacon(struct qlcnic_adapter *adapter, u16 beacon, u8 *state, u8 *rate)
{
  int __retres;
  
#line 100 
  *rate = (unsigned char)beacon;
  
#line 101 
  *state = (unsigned char)((int)beacon >> 8);
  
#line 103 
  if (((adapter->ahw)->msg_enable & 1U) != 0U) {
    char const *tmp;
    
#line 103 
    ;
    
#line 103 
    ;
    
#line 103 
    tmp = dev_name((struct device const *)(& (adapter->pdev)->dev));
    
#line 103 
    printk("\001",tmp,"qlcnic_validate_beacon",(int)*rate,(int)*state);
  }
  else ;
  
#line 105 
  if ((unsigned int)*state == 0U) {
    
#line 106 
    *rate = (unsigned char)15U;
    
#line 107 
    __retres = 0;
    
#line 107 
    goto return_label;
  }
  else 
    
#line 108 
    if ((unsigned int)*state > 2U) {
      
#line 109 
      __retres = -22;
      
#line 109 
      goto return_label;
    }
    else ;
  
#line 112 
  if ((unsigned int)*rate + 255U > 14U) {
    
#line 113 
    __retres = -22;
    
#line 113 
    goto return_label;
  }
  else ;
  
#line 115 
  __retres = 0;
  return_label: 
#line 115 
                return __retres;
}


#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int qlcnic_83xx_store_beacon(struct qlcnic_adapter *adapter, char const *buf, size_t len)
{
  int __retres;
  unsigned long h_beacon;
  int err;
  int tmp;
  int tmp_0;
  
#line 121 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 125 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 125 
  if (tmp != 0) {
    
#line 126 
    __retres = -5;
    
#line 126 
    goto return_label;
  }
  else ;
  
#line 128 
  tmp_0 = kstrtoul(buf,2U,& h_beacon);
  
#line 128 
  if (tmp_0 != 0) {
    
#line 129 
    __retres = -22;
    
#line 129 
    goto return_label;
  }
  else ;
  
#line 131 
  qlcnic_get_beacon_state(adapter);
  
#line 133 
  if ((unsigned long)ahw->beacon_state == h_beacon) {
    
#line 134 
    __retres = (int)len;
    
#line 134 
    goto return_label;
  }
  else ;
  
#line 136 
  rtnl_lock();
  
#line 137 
  if ((unsigned int)ahw->beacon_state == 0U) {
    int tmp_1;
    
#line 138 
    tmp_1 = test_and_set_bit(7L,(unsigned long volatile *)(& adapter->state));
    
#line 138 
    if (tmp_1 != 0) {
      
#line 139 
      rtnl_unlock();
      
#line 140 
      __retres = -16;
      
#line 140 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 144 
  if (h_beacon != 0UL) 
#line 145 
                       err = qlcnic_83xx_config_led(adapter,1U,(unsigned int)h_beacon); else 
                                                                    
#line 147 
                                                                    err = qlcnic_83xx_config_led(adapter,0U,(unsigned int)(h_beacon == 0UL));
  
#line 148 
  if (err == 0) 
#line 149 
                ahw->beacon_state = (unsigned char)h_beacon; else ;
  
#line 151 
  if ((unsigned int)ahw->beacon_state == 0U) 
#line 152 
                                             set_bit(7L,(unsigned long volatile *)(& adapter->state)); else ;
  
#line 154 
  rtnl_unlock();
  
#line 155 
  __retres = (int)len;
  return_label: 
#line 155 
                return __retres;
}


#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int qlcnic_82xx_store_beacon(struct qlcnic_adapter *adapter, char const *buf, size_t len)
{
  int __retres;
  int err;
  u16 beacon;
  u8 b_state;
  u8 b_rate;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  
#line 161 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 162 
  int drv_sds_rings = (int)adapter->drv_sds_rings;
  
#line 166 
  if (len != 2UL) {
    
#line 167 
    __retres = -22;
    
#line 167 
    goto return_label;
  }
  else ;
  
#line 169 
  memcpy((void *)(& beacon),(void const *)buf,2UL);
  
#line 170 
  err = qlcnic_validate_beacon(adapter,(unsigned short)((int)beacon),& b_state,& b_rate);
  
#line 171 
  if (err != 0) {
    
#line 172 
    __retres = err;
    
#line 172 
    goto return_label;
  }
  else ;
  
#line 174 
  qlcnic_get_beacon_state(adapter);
  
#line 176 
  if ((int)ahw->beacon_state == (int)b_state) {
    
#line 177 
    __retres = (int)len;
    
#line 177 
    goto return_label;
  }
  else ;
  
#line 179 
  rtnl_lock();
  
#line 180 
  if ((unsigned int)ahw->beacon_state == 0U) {
    int tmp;
    
#line 181 
    tmp = test_and_set_bit(7L,(unsigned long volatile *)(& adapter->state));
    
#line 181 
    if (tmp != 0) {
      
#line 182 
      rtnl_unlock();
      
#line 183 
      __retres = -16;
      
#line 183 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 187 
  tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 187 
  if (tmp_0 != 0) {
    
#line 188 
    err = -5;
    
#line 189 
    goto out;
  }
  else ;
  
#line 192 
  tmp_1 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
  
#line 192 
  if (tmp_1 == 0) {
    
#line 193 
    err = qlcnic_diag_alloc_res(adapter->netdev,3);
    
#line 194 
    if (err != 0) 
#line 195 
                  goto out; else ;
    
#line 196 
    set_bit(6L,(unsigned long volatile *)(& adapter->state));
  }
  else ;
  
#line 199 
  err = qlcnic_config_led(adapter,(unsigned int)b_state,(unsigned int)b_rate);
  
#line 200 
  if (err == 0) {
    
#line 201 
    err = (int)len;
    
#line 202 
    ahw->beacon_state = b_state;
  }
  else ;
  
#line 205 
  tmp_2 = test_and_set_bit(6L,(unsigned long volatile *)(& adapter->state));
  
#line 205 
  if (tmp_2 != 0) 
#line 206 
                  qlcnic_diag_free_res(adapter->netdev,drv_sds_rings); else ;
  out: 
#line 208 
  ;
  
#line 209 
  if ((unsigned int)ahw->beacon_state == 0U) 
#line 210 
                                             set_bit(7L,(unsigned long volatile *)(& adapter->state)); else ;
  
#line 211 
  rtnl_unlock();
  
#line 213 
  __retres = err;
  return_label: 
#line 213 
                return __retres;
}


#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_store_beacon(struct device *dev, struct device_attribute *attr, char const *buf, size_t len)
{
  ssize_t __retres;
  bool tmp_1;
  
#line 220 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 221 
  int err = 0;
  
#line 223 
  if ((unsigned int)(adapter->ahw)->op_mode == 2U) {
    
#line 224 
    dev_warn((struct device const *)dev,"LED test not supported in non privileged mode\n");
    
#line 226 
    __retres = -95L;
    
#line 226 
    goto return_label;
  }
  else ;
  
#line 229 
  tmp_1 = qlcnic_82xx_check(adapter);
  
#line 229 
  if ((int)tmp_1 != 0) 
#line 230 
                       err = qlcnic_82xx_store_beacon(adapter,buf,len);
  else {
    bool tmp_0;
    
#line 231 
    tmp_0 = qlcnic_83xx_check(adapter);
    
#line 231 
    if ((int)tmp_0 != 0) 
#line 232 
                         err = qlcnic_83xx_store_beacon(adapter,buf,len);
    else {
      
#line 234 
      __retres = -5L;
      
#line 234 
      goto return_label;
    }
  }
  
#line 236 
  __retres = (long)err;
  return_label: 
#line 236 
                return __retres;
}


#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_show_beacon(struct device *dev, struct device_attribute *attr, char *buf)
{
  ssize_t __retres;
  int tmp_0;
  
#line 242 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 244 
  tmp_0 = sprintf(buf,"%d\n",(int)(adapter->ahw)->beacon_state);
  
#line 244 
  __retres = (long)tmp_0;
  
#line 244 
  return __retres;
}


#line 247  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int qlcnic_sysfs_validate_crb(struct qlcnic_adapter *adapter, loff_t offset, size_t size)
{
  int __retres;
  
#line 250 
  size_t crb_size = 4UL;
  
#line 252 
  if ((adapter->flags & 32U) == 0U) {
    
#line 253 
    __retres = -5;
    
#line 253 
    goto return_label;
  }
  else ;
  
#line 255 
  if ((unsigned long long)offset <= 100663295ULL) 
    
#line 256 
    if ((unsigned long long)offset + (unsigned long long)18446744073634054144U <= (unsigned long long)2047U) 
      
#line 258 
      crb_size = 8UL;
    else {
      
#line 260 
      __retres = -22;
      
#line 260 
      goto return_label;
    }
  else ;
  
#line 263 
  if (size != crb_size || ((unsigned long long)(crb_size + 18446744073709551615UL) & (unsigned long long)offset) != 0ULL) {
    
#line 264 
    __retres = -22;
    
#line 264 
    goto return_label;
  }
  else ;
  
#line 266 
  __retres = 0;
  return_label: 
#line 266 
                return __retres;
}


#line 269  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_read_crb(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  struct device *tmp;
  int ret;
  {
    
#line 273 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 273 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 273 
  struct device *dev = tmp;
  
#line 274 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 277 
  ret = qlcnic_sysfs_validate_crb(adapter,offset,size);
  
#line 278 
  if (ret != 0) {
    
#line 279 
    __retres = (long)ret;
    
#line 279 
    goto return_label;
  }
  else ;
  
#line 280 
  qlcnic_read_crb(adapter,buf,offset,size);
  
#line 281 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  
#line 283 
  __retres = (long)size;
  return_label: 
#line 283 
                return __retres;
}


#line 286  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_write_crb(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  struct device *tmp;
  int ret;
  {
    
#line 290 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 290 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 290 
  struct device *dev = tmp;
  
#line 291 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 294 
  ret = qlcnic_sysfs_validate_crb(adapter,offset,size);
  
#line 295 
  if (ret != 0) {
    
#line 296 
    __retres = (long)ret;
    
#line 296 
    goto return_label;
  }
  else ;
  
#line 298 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  
#line 299 
  qlcnic_write_crb(adapter,buf,offset,size);
  
#line 300 
  __retres = (long)size;
  return_label: 
#line 300 
                return __retres;
}


#line 303  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int qlcnic_sysfs_validate_mem(struct qlcnic_adapter *adapter, loff_t offset, size_t size)
{
  int __retres;
  
#line 306 
  if ((adapter->flags & 32U) == 0U) {
    
#line 307 
    __retres = -5;
    
#line 307 
    goto return_label;
  }
  else ;
  
#line 309 
  if (size != 8UL || (offset & 7LL) != 0LL) {
    
#line 310 
    __retres = -5;
    
#line 310 
    goto return_label;
  }
  else ;
  
#line 312 
  __retres = 0;
  return_label: 
#line 312 
                return __retres;
}


#line 315  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_read_mem(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  struct device *tmp;
  u64 data;
  int ret;
  int tmp_1;
  {
    
#line 319 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 319 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 319 
  struct device *dev = tmp;
  
#line 320 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 324 
  ret = qlcnic_sysfs_validate_mem(adapter,offset,size);
  
#line 325 
  if (ret != 0) {
    
#line 326 
    __retres = (long)ret;
    
#line 326 
    goto return_label;
  }
  else ;
  
#line 328 
  tmp_1 = qlcnic_pci_mem_read_2M(adapter,(unsigned long long)offset,& data);
  
#line 328 
  if (tmp_1 != 0) {
    
#line 329 
    __retres = -5L;
    
#line 329 
    goto return_label;
  }
  else ;
  
#line 331 
  memcpy((void *)buf,(void const *)(& data),size);
  
#line 332 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  
#line 334 
  __retres = (long)size;
  return_label: 
#line 334 
                return __retres;
}


#line 337  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_write_mem(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  struct device *tmp;
  u64 data;
  int ret;
  int tmp_1;
  {
    
#line 341 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 341 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 341 
  struct device *dev = tmp;
  
#line 342 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 346 
  ret = qlcnic_sysfs_validate_mem(adapter,offset,size);
  
#line 347 
  if (ret != 0) {
    
#line 348 
    __retres = (long)ret;
    
#line 348 
    goto return_label;
  }
  else ;
  
#line 350 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  
#line 351 
  memcpy((void *)(& data),(void const *)buf,size);
  
#line 353 
  tmp_1 = qlcnic_pci_mem_write_2M(adapter,(unsigned long long)offset,data);
  
#line 353 
  if (tmp_1 != 0) {
    
#line 354 
    __retres = -5L;
    
#line 354 
    goto return_label;
  }
  else ;
  
#line 356 
  __retres = (long)size;
  return_label: 
#line 356 
                return __retres;
}


#line 359  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
int qlcnic_is_valid_nic_func(struct qlcnic_adapter *adapter, u8 pci_func)
{
  int __retres;
  int i;
  
#line 363 
  i = 0;
  
#line 363 
  goto ldv_56157;
  ldv_56156: 
#line 364 
  ;
  
#line 364 
  if ((int)(adapter->npars + i)->pci_func == (int)pci_func) {
    
#line 365 
    __retres = i;
    
#line 365 
    goto return_label;
  }
  else ;
  
#line 363 
  i += 1;
  ldv_56157: 
#line 364 
  ;
  
#line 363 
  if ((int)(adapter->ahw)->total_nic_func > i) 
#line 365 
                                               goto ldv_56156; else 
#line 368 
                                                                    goto ldv_56158;
  ldv_56158: 
#line 369 
  ;
  
#line 368 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Invalid nic function\n","qlcnic_is_valid_nic_func");
  
#line 369 
  __retres = -22;
  return_label: 
#line 369 
                return __retres;
}


#line 372  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int validate_pm_config(struct qlcnic_adapter *adapter, struct qlcnic_pm_func_cfg *pm_cfg, int count)
{
  int __retres;
  u8 src_pci_func;
  u8 s_esw_id;
  u8 d_esw_id;
  u8 dest_pci_func;
  int i;
  int src_index;
  int dest_index;
  
#line 379 
  i = 0;
  
#line 379 
  goto ldv_56173;
  ldv_56172: 
#line 380 
  ;
  
#line 380 
  src_pci_func = (pm_cfg + i)->pci_func;
  
#line 381 
  dest_pci_func = (pm_cfg + i)->dest_npar;
  
#line 382 
  src_index = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)src_pci_func));
  
#line 383 
  if (src_index < 0) {
    
#line 384 
    __retres = -22;
    
#line 384 
    goto return_label;
  }
  else ;
  
#line 386 
  dest_index = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)dest_pci_func));
  
#line 387 
  if (dest_index < 0) {
    
#line 388 
    __retres = -22;
    
#line 388 
    goto return_label;
  }
  else ;
  
#line 390 
  s_esw_id = (adapter->npars + src_index)->phy_port;
  
#line 391 
  d_esw_id = (adapter->npars + dest_index)->phy_port;
  
#line 393 
  if ((int)s_esw_id != (int)d_esw_id) {
    
#line 394 
    __retres = -22;
    
#line 394 
    goto return_label;
  }
  else ;
  
#line 379 
  i += 1;
  ldv_56173: 
#line 380 
  ;
  
#line 379 
  if (i < count) 
#line 381 
                 goto ldv_56172; else 
#line 384 
                                      goto ldv_56174;
  ldv_56174: 
#line 385 
  ;
  
#line 397 
  __retres = 0;
  return_label: 
#line 397 
                return __retres;
}


#line 400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_write_pm_config(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  struct device *tmp;
  struct qlcnic_pm_func_cfg *pm_cfg;
  u32 id;
  u32 action;
  u32 pci_func;
  int count;
  int rem;
  int i;
  int ret;
  int index;
  {
    
#line 406 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 406 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 406 
  struct device *dev = tmp;
  
#line 407 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 412 
  count = (int)(size / 8UL);
  
#line 413 
  rem = (int)size & 7;
  
#line 414 
  if (rem != 0) {
    
#line 415 
    __retres = -22L;
    
#line 415 
    goto return_label;
  }
  else ;
  
#line 417 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  
#line 418 
  pm_cfg = (struct qlcnic_pm_func_cfg *)buf;
  
#line 419 
  ret = validate_pm_config(adapter,pm_cfg,count);
  
#line 421 
  if (ret != 0) {
    
#line 422 
    __retres = (long)ret;
    
#line 422 
    goto return_label;
  }
  else ;
  
#line 423 
  i = 0;
  
#line 423 
  goto ldv_56197;
  ldv_56196: 
#line 424 
  ;
  
#line 424 
  pci_func = (unsigned int)(pm_cfg + i)->pci_func;
  
#line 425 
  action = (unsigned int)((unsigned int)(pm_cfg + i)->action != 0U);
  
#line 426 
  index = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)((unsigned char)pci_func)));
  
#line 427 
  if (index < 0) {
    
#line 428 
    __retres = -22L;
    
#line 428 
    goto return_label;
  }
  else ;
  
#line 430 
  id = (unsigned int)(adapter->npars + index)->phy_port;
  
#line 431 
  ret = qlcnic_config_port_mirroring(adapter,(unsigned char)((int)((unsigned char)id)),(unsigned char)((int)((unsigned char)action)),(unsigned char)((int)((unsigned char)pci_func)));
  
#line 433 
  if (ret != 0) {
    
#line 434 
    __retres = (long)ret;
    
#line 434 
    goto return_label;
  }
  else ;
  
#line 423 
  i += 1;
  ldv_56197: 
#line 424 
  ;
  
#line 423 
  if (i < count) 
#line 425 
                 goto ldv_56196; else 
#line 428 
                                      goto ldv_56198;
  ldv_56198: 
#line 429 
  ;
  
#line 437 
  i = 0;
  
#line 437 
  goto ldv_56200;
  ldv_56199: 
#line 438 
  ;
  
#line 438 
  pci_func = (unsigned int)(pm_cfg + i)->pci_func;
  
#line 439 
  index = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)((unsigned char)pci_func)));
  
#line 440 
  if (index < 0) {
    
#line 441 
    __retres = -22L;
    
#line 441 
    goto return_label;
  }
  else ;
  
#line 442 
  id = (unsigned int)(adapter->npars + index)->phy_port;
  
#line 443 
  (adapter->npars + index)->enable_pm = (unsigned char)((unsigned int)(pm_cfg + i)->action != 0U);
  
#line 444 
  (adapter->npars + index)->dest_npar = (unsigned char)id;
  
#line 437 
  i += 1;
  ldv_56200: 
#line 438 
  ;
  
#line 437 
  if (i < count) 
#line 439 
                 goto ldv_56199; else 
#line 442 
                                      goto ldv_56201;
  ldv_56201: 
#line 443 
  ;
  
#line 447 
  __retres = (long)size;
  return_label: 
#line 447 
                return __retres;
}


#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_read_pm_config(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  struct device *tmp;
  struct qlcnic_pm_func_cfg *pm_cfg;
  u8 pci_func;
  u32 count;
  int i;
  {
    
#line 456 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 456 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 456 
  struct device *dev = tmp;
  
#line 457 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 463 
  memset((void *)buf,0,size);
  
#line 464 
  pm_cfg = (struct qlcnic_pm_func_cfg *)buf;
  
#line 465 
  count = (unsigned int)(size / 8UL);
  
#line 466 
  i = 0;
  
#line 466 
  goto ldv_56222;
  ldv_56221: 
#line 467 
  ;
  
#line 467 
  pci_func = (adapter->npars + i)->pci_func;
  
#line 468 
  if ((unsigned int)pci_func >= count) {
    {
      
#line 469 
      struct _ddebug descriptor = {.modname = "qlcnic", .function = "qlcnic_sysfs_read_pm_config", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c", .format = "%s: Total nic functions[%d], App sent function count[%d]\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))470U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 469 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 469 
                                                          __dynamic_dev_dbg(& descriptor,(struct device const *)dev,"%s: Total nic functions[%d], App sent function count[%d]\n","qlcnic_sysfs_read_pm_config",(int)(adapter->ahw)->total_nic_func,count); else ;
    }
    
#line 471 
    goto ldv_56220;
  }
  else ;
  
#line 473 
  if (! (adapter->npars + i)->eswitch_status) 
#line 474 
                                              goto ldv_56220; else ;
  
#line 476 
  (pm_cfg + (int)pci_func)->action = (adapter->npars + i)->enable_pm;
  
#line 477 
  (pm_cfg + (int)pci_func)->dest_npar = (unsigned char)0U;
  
#line 478 
  (pm_cfg + (int)pci_func)->pci_func = (unsigned char)i;
  ldv_56220: 
#line 479 
  ;
  
#line 466 
  i += 1;
  ldv_56222: 
#line 467 
  ;
  
#line 466 
  if ((int)(adapter->ahw)->total_nic_func > i) 
#line 468 
                                               goto ldv_56221; else 
#line 471 
                                                                    goto ldv_56223;
  ldv_56223: 
#line 472 
  ;
  
#line 480 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  
#line 481 
  __retres = (long)size;
  
#line 481 
  return __retres;
}


#line 484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int validate_esw_config(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg, int count)
{
  int __retres;
  int i;
  int ret;
  u32 op_mode;
  u8 pci_func;
  bool tmp;
  
#line 487 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 492 
  tmp = qlcnic_82xx_check(adapter);
  
#line 492 
  if ((int)tmp != 0) 
#line 493 
                     op_mode = readl((void const volatile *)(ahw->pci_base0 + 20U)); else 
                                                                    
#line 495 
                                                                    op_mode = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 37U)));
  
#line 497 
  i = 0;
  
#line 497 
  goto ldv_56240;
  ldv_56239: 
#line 498 
  ;
  
#line 498 
  pci_func = (esw_cfg + i)->pci_func;
  
#line 499 
  if ((unsigned int)pci_func >= ahw->max_vnic_func) {
    
#line 500 
    __retres = -22;
    
#line 500 
    goto return_label;
  }
  else ;
  
#line 502 
  if ((unsigned int)(adapter->ahw)->op_mode == 0U) {
    int tmp_0;
    
#line 503 
    tmp_0 = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)pci_func));
    
#line 503 
    if (tmp_0 < 0) {
      
#line 504 
      __retres = -22;
      
#line 504 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 506 
  switch ((int)(esw_cfg + i)->op_mode) {
    bool tmp_1;
    case 0: 
#line 507 
    ;
    
#line 508 
    tmp_1 = qlcnic_82xx_check(adapter);
    
#line 508 
    if ((int)tmp_1 != 0) 
#line 509 
                         ret = (int)(op_mode >> (int)pci_func * 4) & 15;
    else {
      
#line 511 
      ret = (int)(op_mode >> (int)pci_func * 2) & 3;
      
#line 513 
      (esw_cfg + i)->offload_flags = (unsigned char)0U;
    }
    
#line 516 
    if (ret != 2) {
      
#line 517 
      if ((unsigned int)(esw_cfg + i)->mac_anti_spoof != 0U) {
        
#line 518 
        __retres = -22;
        
#line 518 
        goto return_label;
      }
      else ;
      
#line 519 
      if ((unsigned int)(esw_cfg + i)->mac_override != 1U) {
        
#line 520 
        __retres = -22;
        
#line 520 
        goto return_label;
      }
      else ;
      
#line 521 
      if ((unsigned int)(esw_cfg + i)->promisc_mode != 1U) {
        
#line 522 
        __retres = -22;
        
#line 522 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 524 
    goto ldv_56235;
    case 1: 
#line 525 
    ;
    
#line 526 
    if ((unsigned int)(esw_cfg + i)->vlan_id + 65534U > 4092U) {
      
#line 527 
      __retres = -22;
      
#line 527 
      goto return_label;
    }
    else ;
    
#line 528 
    if ((unsigned int)(esw_cfg + i)->op_type == 0U) {
      
#line 529 
      __retres = -22;
      
#line 529 
      goto return_label;
    }
    else ;
    
#line 530 
    goto ldv_56235;
    case 2: 
#line 531 
    ;
    
#line 532 
    if ((unsigned int)(esw_cfg + i)->op_type == 0U) {
      
#line 533 
      __retres = -22;
      
#line 533 
      goto return_label;
    }
    else ;
    
#line 534 
    goto ldv_56235;
    default: 
#line 535 
    ;
    
#line 536 
    __retres = -22;
    
#line 536 
    goto return_label;
  }
  ldv_56235: 
#line 538 
  ;
  
#line 497 
  i += 1;
  ldv_56240: 
#line 498 
  ;
  
#line 497 
  if (i < count) 
#line 499 
                 goto ldv_56239; else 
#line 502 
                                      goto ldv_56241;
  ldv_56241: 
#line 503 
  ;
  
#line 540 
  __retres = 0;
  return_label: 
#line 540 
                return __retres;
}


#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_write_esw_config(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  struct device *tmp;
  struct qlcnic_esw_func_cfg *esw_cfg;
  struct qlcnic_npar_info *npar;
  int count;
  int rem;
  int i;
  int ret;
  int index;
  u8 pci_func;
  {
    
#line 549 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 549 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 549 
  struct device *dev = tmp;
  
#line 550 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 555 
  u8 op_mode = (unsigned char)0U;
  
#line 557 
  count = (int)(size / 16UL);
  
#line 558 
  rem = (int)size & 15;
  
#line 559 
  if (rem != 0) {
    
#line 560 
    __retres = -22L;
    
#line 560 
    goto return_label;
  }
  else ;
  
#line 562 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  
#line 563 
  esw_cfg = (struct qlcnic_esw_func_cfg *)buf;
  
#line 564 
  ret = validate_esw_config(adapter,esw_cfg,count);
  
#line 565 
  if (ret != 0) {
    
#line 566 
    __retres = (long)ret;
    
#line 566 
    goto return_label;
  }
  else ;
  
#line 568 
  i = 0;
  
#line 568 
  goto ldv_56269;
  ldv_56268: 
#line 569 
  ;
  
#line 569 
  if ((unsigned int)(adapter->ahw)->op_mode == 0U) {
    int tmp_1;
    
#line 570 
    tmp_1 = qlcnic_config_switch_port(adapter,esw_cfg + i);
    
#line 570 
    if (tmp_1 != 0) {
      
#line 571 
      __retres = -22L;
      
#line 571 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 573 
  if ((int)(adapter->ahw)->pci_func != (int)(esw_cfg + i)->pci_func) 
    
#line 574 
    goto ldv_56263; else ;
  
#line 576 
  op_mode = (esw_cfg + i)->op_mode;
  
#line 577 
  qlcnic_get_eswitch_port_config(adapter,esw_cfg + i);
  
#line 578 
  (esw_cfg + i)->op_mode = op_mode;
  
#line 579 
  (esw_cfg + i)->pci_func = (adapter->ahw)->pci_func;
  
#line 581 
  switch ((int)(esw_cfg + i)->op_mode) {
    case 0: 
#line 582 
    ;
    
#line 583 
    qlcnic_set_eswitch_port_features(adapter,esw_cfg + i);
    
#line 584 
    rtnl_lock();
    
#line 585 
    qlcnic_set_netdev_features(adapter,esw_cfg + i);
    
#line 586 
    rtnl_unlock();
    
#line 587 
    goto ldv_56265;
    case 1: 
#line 588 
    ;
    
#line 589 
    qlcnic_set_vlan_config(adapter,esw_cfg + i);
    
#line 590 
    goto ldv_56265;
    case 2: 
#line 591 
    ;
    
#line 592 
    (esw_cfg + i)->vlan_id = (unsigned short)0U;
    
#line 593 
    qlcnic_set_vlan_config(adapter,esw_cfg + i);
    
#line 594 
    goto ldv_56265;
  }
  ldv_56265: 
#line 596 
  ;
  ldv_56263: 
#line 597 
  ;
  
#line 568 
  i += 1;
  ldv_56269: 
#line 569 
  ;
  
#line 568 
  if (i < count) 
#line 570 
                 goto ldv_56268; else 
#line 573 
                                      goto ldv_56270;
  ldv_56270: 
#line 574 
  ;
  
#line 598 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U) 
#line 599 
                                                   goto out; else ;
  
#line 601 
  i = 0;
  
#line 601 
  goto ldv_56277;
  ldv_56276: 
#line 602 
  ;
  
#line 602 
  pci_func = (esw_cfg + i)->pci_func;
  
#line 603 
  index = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)pci_func));
  
#line 604 
  if (index < 0) {
    
#line 605 
    __retres = -22L;
    
#line 605 
    goto return_label;
  }
  else ;
  
#line 606 
  npar = adapter->npars + index;
  
#line 607 
  switch ((int)(esw_cfg + i)->op_mode) {
    case 0: 
#line 608 
    ;
    
#line 609 
    npar->promisc_mode = (esw_cfg + i)->promisc_mode;
    
#line 610 
    npar->mac_override = (esw_cfg + i)->mac_override;
    
#line 611 
    npar->offload_flags = (esw_cfg + i)->offload_flags;
    
#line 612 
    npar->mac_anti_spoof = (esw_cfg + i)->mac_anti_spoof;
    
#line 613 
    npar->discard_tagged = (esw_cfg + i)->discard_tagged;
    
#line 614 
    goto ldv_56273;
    case 1: 
#line 615 
    ;
    
#line 616 
    npar->pvid = (esw_cfg + i)->vlan_id;
    
#line 617 
    goto ldv_56273;
    case 2: 
#line 618 
    ;
    
#line 619 
    npar->pvid = (unsigned short)0U;
    
#line 620 
    goto ldv_56273;
  }
  ldv_56273: 
#line 622 
  ;
  
#line 601 
  i += 1;
  ldv_56277: 
#line 602 
  ;
  
#line 601 
  if (i < count) 
#line 603 
                 goto ldv_56276; else 
#line 606 
                                      goto ldv_56278;
  ldv_56278: 
#line 607 
  ;
  out: 
#line 623 
  ;
  
#line 624 
  __retres = (long)size;
  return_label: 
#line 624 
                return __retres;
}


#line 627  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_read_esw_config(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  struct device *tmp;
  struct qlcnic_esw_func_cfg *esw_cfg;
  u8 pci_func;
  u32 count;
  int i;
  int tmp_1;
  {
    
#line 633 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 633 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 633 
  struct device *dev = tmp;
  
#line 634 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 640 
  memset((void *)buf,0,size);
  
#line 641 
  esw_cfg = (struct qlcnic_esw_func_cfg *)buf;
  
#line 642 
  count = (unsigned int)(size / 16UL);
  
#line 643 
  i = 0;
  
#line 643 
  goto ldv_56299;
  ldv_56298: 
#line 644 
  ;
  
#line 644 
  pci_func = (adapter->npars + i)->pci_func;
  
#line 645 
  if ((unsigned int)pci_func >= count) {
    {
      
#line 646 
      struct _ddebug descriptor = {.modname = "qlcnic", .function = "qlcnic_sysfs_read_esw_config", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c", .format = "%s: Total nic functions[%d], App sent function count[%d]\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))647U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 646 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 646 
                                                          __dynamic_dev_dbg(& descriptor,(struct device const *)dev,"%s: Total nic functions[%d], App sent function count[%d]\n","qlcnic_sysfs_read_esw_config",(int)(adapter->ahw)->total_nic_func,count); else ;
    }
    
#line 648 
    goto ldv_56297;
  }
  else ;
  
#line 650 
  if (! (adapter->npars + i)->eswitch_status) 
#line 651 
                                              goto ldv_56297; else ;
  
#line 653 
  (esw_cfg + (int)pci_func)->pci_func = pci_func;
  
#line 654 
  tmp_1 = qlcnic_get_eswitch_port_config(adapter,esw_cfg + (int)pci_func);
  
#line 654 
  if (tmp_1 != 0) {
    
#line 655 
    __retres = -22L;
    
#line 655 
    goto return_label;
  }
  else ;
  ldv_56297: 
#line 656 
  ;
  
#line 643 
  i += 1;
  ldv_56299: 
#line 644 
  ;
  
#line 643 
  if ((int)(adapter->ahw)->total_nic_func > i) 
#line 645 
                                               goto ldv_56298; else 
#line 648 
                                                                    goto ldv_56300;
  ldv_56300: 
#line 649 
  ;
  
#line 657 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  
#line 658 
  __retres = (long)size;
  return_label: 
#line 658 
                return __retres;
}


#line 661  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int validate_npar_config(struct qlcnic_adapter *adapter, struct qlcnic_npar_func_cfg *np_cfg, int count)
{
  int __retres;
  u8 pci_func;
  u8 i;
  int tmp;
  
#line 667 
  i = (unsigned char)0U;
  
#line 667 
  goto ldv_56309;
  ldv_56308: 
#line 668 
  ;
  
#line 668 
  pci_func = (np_cfg + (int)i)->pci_func;
  
#line 669 
  tmp = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)pci_func));
  
#line 669 
  if (tmp < 0) {
    
#line 670 
    __retres = -22;
    
#line 670 
    goto return_label;
  }
  else ;
  
#line 672 
  if ((unsigned int)(np_cfg + (int)i)->min_bw > 100U || (unsigned int)(np_cfg + (int)i)->max_bw > 100U) {
    
#line 674 
    __retres = -22;
    
#line 674 
    goto return_label;
  }
  else ;
  
#line 667 
  i = (u8)((int)i + 1);
  ldv_56309: 
#line 668 
  ;
  
#line 667 
  if ((int)i < count) 
#line 669 
                      goto ldv_56308; else 
#line 672 
                                           goto ldv_56310;
  ldv_56310: 
#line 673 
  ;
  
#line 676 
  __retres = 0;
  return_label: 
#line 676 
                return __retres;
}


#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_write_npar_config(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  struct device *tmp;
  struct qlcnic_info nic_info;
  struct qlcnic_npar_func_cfg *np_cfg;
  int i;
  int count;
  int rem;
  int ret;
  int index;
  u8 pci_func;
  {
    
#line 685 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 685 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 685 
  struct device *dev = tmp;
  
#line 686 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 692 
  count = (int)(size / 16UL);
  
#line 693 
  rem = (int)size & 15;
  
#line 694 
  if (rem != 0) {
    
#line 695 
    __retres = -22L;
    
#line 695 
    goto return_label;
  }
  else ;
  
#line 697 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  
#line 698 
  np_cfg = (struct qlcnic_npar_func_cfg *)buf;
  
#line 699 
  ret = validate_npar_config(adapter,np_cfg,count);
  
#line 700 
  if (ret != 0) {
    
#line 701 
    __retres = (long)ret;
    
#line 701 
    goto return_label;
  }
  else ;
  
#line 703 
  i = 0;
  
#line 703 
  goto ldv_56332;
  ldv_56331: 
#line 704 
  ;
  
#line 704 
  pci_func = (np_cfg + i)->pci_func;
  
#line 706 
  memset((void *)(& nic_info),0,72UL);
  
#line 707 
  ret = qlcnic_get_nic_info(adapter,& nic_info,(unsigned char)((int)pci_func));
  
#line 708 
  if (ret != 0) {
    
#line 709 
    __retres = (long)ret;
    
#line 709 
    goto return_label;
  }
  else ;
  
#line 710 
  nic_info.pci_func = (unsigned short)pci_func;
  
#line 711 
  nic_info.min_tx_bw = (np_cfg + i)->min_bw;
  
#line 712 
  nic_info.max_tx_bw = (np_cfg + i)->max_bw;
  
#line 713 
  ret = qlcnic_set_nic_info(adapter,& nic_info);
  
#line 714 
  if (ret != 0) {
    
#line 715 
    __retres = (long)ret;
    
#line 715 
    goto return_label;
  }
  else ;
  
#line 716 
  index = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)pci_func));
  
#line 717 
  if (index < 0) {
    
#line 718 
    __retres = -22L;
    
#line 718 
    goto return_label;
  }
  else ;
  
#line 719 
  (adapter->npars + index)->min_bw = nic_info.min_tx_bw;
  
#line 720 
  (adapter->npars + index)->max_bw = nic_info.max_tx_bw;
  
#line 703 
  i += 1;
  ldv_56332: 
#line 704 
  ;
  
#line 703 
  if (i < count) 
#line 705 
                 goto ldv_56331; else 
#line 708 
                                      goto ldv_56333;
  ldv_56333: 
#line 709 
  ;
  
#line 723 
  __retres = (long)size;
  return_label: 
#line 723 
                return __retres;
}


#line 726  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_read_npar_config(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  struct device *tmp;
  struct qlcnic_npar_func_cfg *np_cfg;
  struct qlcnic_info nic_info;
  u8 pci_func;
  int i;
  int ret;
  u32 count;
  int tmp_1;
  {
    
#line 732 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 732 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 732 
  struct device *dev = tmp;
  
#line 733 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 740 
  memset((void *)(& nic_info),0,72UL);
  
#line 741 
  memset((void *)buf,0,size);
  
#line 742 
  np_cfg = (struct qlcnic_npar_func_cfg *)buf;
  
#line 744 
  count = (unsigned int)(size / 16UL);
  
#line 745 
  i = 0;
  
#line 745 
  goto ldv_56356;
  ldv_56355: 
#line 746 
  ;
  
#line 746 
  if ((unsigned int)(adapter->npars + i)->pci_func >= count) {
    {
      
#line 747 
      struct _ddebug descriptor = {.modname = "qlcnic", .function = "qlcnic_sysfs_read_npar_config", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c", .format = "%s: Total nic functions[%d], App sent function count[%d]\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))748U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 747 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 747 
                                                          __dynamic_dev_dbg(& descriptor,(struct device const *)dev,"%s: Total nic functions[%d], App sent function count[%d]\n","qlcnic_sysfs_read_npar_config",(int)(adapter->ahw)->total_nic_func,count); else ;
    }
    
#line 749 
    goto ldv_56354;
  }
  else ;
  
#line 751 
  if (! (adapter->npars + i)->eswitch_status) 
#line 752 
                                              goto ldv_56354; else ;
  
#line 753 
  pci_func = (adapter->npars + i)->pci_func;
  
#line 754 
  tmp_1 = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)pci_func));
  
#line 754 
  if (tmp_1 < 0) 
#line 755 
                 goto ldv_56354; else ;
  
#line 756 
  ret = qlcnic_get_nic_info(adapter,& nic_info,(unsigned char)((int)pci_func));
  
#line 757 
  if (ret != 0) {
    
#line 758 
    __retres = (long)ret;
    
#line 758 
    goto return_label;
  }
  else ;
  
#line 760 
  (np_cfg + (int)pci_func)->pci_func = pci_func;
  
#line 761 
  (np_cfg + (int)pci_func)->op_mode = (unsigned char)nic_info.op_mode;
  
#line 762 
  (np_cfg + (int)pci_func)->port_num = nic_info.phys_port;
  
#line 763 
  (np_cfg + (int)pci_func)->fw_capab = nic_info.capabilities;
  
#line 764 
  (np_cfg + (int)pci_func)->min_bw = nic_info.min_tx_bw;
  
#line 765 
  (np_cfg + (int)pci_func)->max_bw = nic_info.max_tx_bw;
  
#line 766 
  (np_cfg + (int)pci_func)->max_tx_queues = nic_info.max_tx_ques;
  
#line 767 
  (np_cfg + (int)pci_func)->max_rx_queues = nic_info.max_rx_ques;
  ldv_56354: 
#line 768 
  ;
  
#line 745 
  i += 1;
  ldv_56356: 
#line 746 
  ;
  
#line 745 
  if ((int)(adapter->ahw)->total_nic_func > i) 
#line 747 
                                               goto ldv_56355; else 
#line 750 
                                                                    goto ldv_56357;
  ldv_56357: 
#line 751 
  ;
  
#line 769 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  
#line 770 
  __retres = (long)size;
  return_label: 
#line 770 
                return __retres;
}


#line 773  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_get_port_stats(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  struct device *tmp;
  struct qlcnic_esw_statistics port_stats;
  int ret;
  bool tmp_1;
  {
    
#line 779 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 779 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 779 
  struct device *dev = tmp;
  
#line 780 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 784 
  tmp_1 = qlcnic_83xx_check(adapter);
  
#line 784 
  if ((int)tmp_1 != 0) {
    
#line 785 
    __retres = -95L;
    
#line 785 
    goto return_label;
  }
  else ;
  
#line 787 
  if (size != 176UL) {
    
#line 788 
    __retres = -22L;
    
#line 788 
    goto return_label;
  }
  else ;
  
#line 790 
  if ((long long)(adapter->ahw)->max_vnic_func <= offset) {
    
#line 791 
    __retres = -22L;
    
#line 791 
    goto return_label;
  }
  else ;
  
#line 793 
  memset((void *)(& port_stats),0,size);
  
#line 794 
  ret = qlcnic_get_port_stats(adapter,(unsigned char)((int)((unsigned char)offset)),(unsigned char)0,& port_stats.rx);
  
#line 796 
  if (ret != 0) {
    
#line 797 
    __retres = (long)ret;
    
#line 797 
    goto return_label;
  }
  else ;
  
#line 799 
  ret = qlcnic_get_port_stats(adapter,(unsigned char)((int)((unsigned char)offset)),(unsigned char)1,& port_stats.tx);
  
#line 801 
  if (ret != 0) {
    
#line 802 
    __retres = (long)ret;
    
#line 802 
    goto return_label;
  }
  else ;
  
#line 804 
  memcpy((void *)buf,(void const *)(& port_stats),size);
  
#line 805 
  __retres = (long)size;
  return_label: 
#line 805 
                return __retres;
}


#line 808  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_get_esw_stats(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  struct device *tmp;
  struct qlcnic_esw_statistics esw_stats;
  int ret;
  bool tmp_1;
  {
    
#line 814 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 814 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 814 
  struct device *dev = tmp;
  
#line 815 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 819 
  tmp_1 = qlcnic_83xx_check(adapter);
  
#line 819 
  if ((int)tmp_1 != 0) {
    
#line 820 
    __retres = -95L;
    
#line 820 
    goto return_label;
  }
  else ;
  
#line 822 
  if (size != 176UL) {
    
#line 823 
    __retres = -22L;
    
#line 823 
    goto return_label;
  }
  else ;
  
#line 825 
  if (offset > 1LL) {
    
#line 826 
    __retres = -22L;
    
#line 826 
    goto return_label;
  }
  else ;
  
#line 828 
  memset((void *)(& esw_stats),0,size);
  
#line 829 
  ret = qlcnic_get_eswitch_stats(adapter,(unsigned char)((int)((unsigned char)offset)),(unsigned char)0,& esw_stats.rx);
  
#line 831 
  if (ret != 0) {
    
#line 832 
    __retres = (long)ret;
    
#line 832 
    goto return_label;
  }
  else ;
  
#line 834 
  ret = qlcnic_get_eswitch_stats(adapter,(unsigned char)((int)((unsigned char)offset)),(unsigned char)1,& esw_stats.tx);
  
#line 836 
  if (ret != 0) {
    
#line 837 
    __retres = (long)ret;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  memcpy((void *)buf,(void const *)(& esw_stats),size);
  
#line 840 
  __retres = (long)size;
  return_label: 
#line 840 
                return __retres;
}


#line 843  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_clear_esw_stats(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  struct device *tmp;
  int ret;
  bool tmp_1;
  {
    
#line 849 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 849 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 849 
  struct device *dev = tmp;
  
#line 850 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 853 
  tmp_1 = qlcnic_83xx_check(adapter);
  
#line 853 
  if ((int)tmp_1 != 0) {
    
#line 854 
    __retres = -95L;
    
#line 854 
    goto return_label;
  }
  else ;
  
#line 856 
  if (offset > 1LL) {
    
#line 857 
    __retres = -22L;
    
#line 857 
    goto return_label;
  }
  else ;
  
#line 859 
  ret = qlcnic_clear_esw_stats(adapter,(unsigned char)2,(unsigned char)((int)((unsigned char)offset)),(unsigned char)0);
  
#line 861 
  if (ret != 0) {
    
#line 862 
    __retres = (long)ret;
    
#line 862 
    goto return_label;
  }
  else ;
  
#line 864 
  ret = qlcnic_clear_esw_stats(adapter,(unsigned char)2,(unsigned char)((int)((unsigned char)offset)),(unsigned char)1);
  
#line 866 
  if (ret != 0) {
    
#line 867 
    __retres = (long)ret;
    
#line 867 
    goto return_label;
  }
  else ;
  
#line 869 
  __retres = (long)size;
  return_label: 
#line 869 
                return __retres;
}


#line 872  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_clear_port_stats(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  struct device *tmp;
  int ret;
  bool tmp_1;
  {
    
#line 879 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 879 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 879 
  struct device *dev = tmp;
  
#line 880 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 883 
  tmp_1 = qlcnic_83xx_check(adapter);
  
#line 883 
  if ((int)tmp_1 != 0) {
    
#line 884 
    __retres = -95L;
    
#line 884 
    goto return_label;
  }
  else ;
  
#line 886 
  if ((long long)(adapter->ahw)->max_vnic_func <= offset) {
    
#line 887 
    __retres = -22L;
    
#line 887 
    goto return_label;
  }
  else ;
  
#line 889 
  ret = qlcnic_clear_esw_stats(adapter,(unsigned char)1,(unsigned char)((int)((unsigned char)offset)),(unsigned char)0);
  
#line 891 
  if (ret != 0) {
    
#line 892 
    __retres = (long)ret;
    
#line 892 
    goto return_label;
  }
  else ;
  
#line 894 
  ret = qlcnic_clear_esw_stats(adapter,(unsigned char)1,(unsigned char)((int)((unsigned char)offset)),(unsigned char)1);
  
#line 896 
  if (ret != 0) {
    
#line 897 
    __retres = (long)ret;
    
#line 897 
    goto return_label;
  }
  else ;
  
#line 899 
  __retres = (long)size;
  return_label: 
#line 899 
                return __retres;
}


#line 902  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_sysfs_read_pci_config(struct file *file, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  struct device *tmp;
  struct qlcnic_pci_func_cfg *pci_cfg;
  struct qlcnic_pci_info *pci_info;
  int i;
  int ret;
  u32 count;
  {
    
#line 908 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 908 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 908 
  struct device *dev = tmp;
  
#line 909 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 915 
  pci_info = (struct qlcnic_pci_info *)kcalloc_0(size,20UL,208U);
  
#line 916 
  if (pci_info == (struct qlcnic_pci_info *)0) {
    
#line 917 
    __retres = -12L;
    
#line 917 
    goto return_label;
  }
  else ;
  
#line 919 
  ret = qlcnic_get_pci_info(adapter,pci_info);
  
#line 920 
  if (ret != 0) {
    
#line 921 
    kfree((void const *)pci_info);
    
#line 922 
    __retres = (long)ret;
    
#line 922 
    goto return_label;
  }
  else ;
  
#line 925 
  pci_cfg = (struct qlcnic_pci_func_cfg *)buf;
  
#line 926 
  count = (unsigned int)(size / 16UL);
  
#line 927 
  qlcnic_swap32_buffer((u32 *)pci_info,(int)(size / 4UL));
  
#line 928 
  i = 0;
  
#line 928 
  goto ldv_56430;
  ldv_56429: 
#line 929 
  ;
  
#line 929 
  (pci_cfg + i)->pci_func = (unsigned char)(pci_info + i)->id;
  
#line 930 
  (pci_cfg + i)->func_type = (pci_info + i)->type;
  
#line 931 
  (pci_cfg + i)->func_state = (unsigned char)0U;
  
#line 932 
  (pci_cfg + i)->port_num = (pci_info + i)->default_port;
  
#line 933 
  (pci_cfg + i)->min_bw = (pci_info + i)->tx_min_bw;
  
#line 934 
  (pci_cfg + i)->max_bw = (pci_info + i)->tx_max_bw;
  
#line 935 
  memcpy((void *)(& (pci_cfg + i)->def_mac_addr),(void const *)(& (pci_info + i)->mac),6UL);
  
#line 928 
  i += 1;
  ldv_56430: 
#line 929 
  ;
  
#line 928 
  if ((unsigned int)i < count) 
#line 930 
                               goto ldv_56429; else 
#line 933 
                                                    goto ldv_56431;
  ldv_56431: 
#line 934 
  ;
  
#line 938 
  kfree((void const *)pci_info);
  
#line 939 
  __retres = (long)size;
  return_label: 
#line 939 
                return __retres;
}


#line 942  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_83xx_sysfs_flash_read_handler(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  unsigned char *p_read_buf;
  int ret;
  int count;
  struct device *tmp;
  int tmp_2;
  {
    
#line 950 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 950 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 950 
  struct device *dev = tmp;
  
#line 951 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 953 
  if (size == 0UL) {
    
#line 954 
    __retres = -22L;
    
#line 954 
    goto return_label;
  }
  else ;
  
#line 956 
  count = (int)(size / 4UL);
  
#line 958 
  if ((size & 3UL) != 0UL) 
#line 959 
                           count += 1; else ;
  
#line 961 
  p_read_buf = (unsigned char *)kcalloc_0(size,1UL,208U);
  
#line 962 
  if (p_read_buf == (unsigned char *)0U) {
    
#line 963 
    __retres = -12L;
    
#line 963 
    goto return_label;
  }
  else ;
  
#line 964 
  tmp_2 = qlcnic_83xx_lock_flash(adapter);
  
#line 964 
  if (tmp_2 != 0) {
    
#line 965 
    kfree((void const *)p_read_buf);
    
#line 966 
    __retres = -5L;
    
#line 966 
    goto return_label;
  }
  else ;
  
#line 969 
  ret = qlcnic_83xx_lockless_flash_read32(adapter,(unsigned int)offset,p_read_buf,count);
  
#line 972 
  if (ret != 0) {
    
#line 973 
    qlcnic_83xx_unlock_flash(adapter);
    
#line 974 
    kfree((void const *)p_read_buf);
    
#line 975 
    __retres = (long)ret;
    
#line 975 
    goto return_label;
  }
  else ;
  
#line 978 
  qlcnic_83xx_unlock_flash(adapter);
  
#line 979 
  qlcnic_swap32_buffer((u32 *)p_read_buf,count);
  
#line 980 
  memcpy((void *)buf,(void const *)p_read_buf,size);
  
#line 981 
  kfree((void const *)p_read_buf);
  
#line 983 
  __retres = (long)size;
  return_label: 
#line 983 
                return __retres;
}


#line 986  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int qlcnic_83xx_sysfs_flash_bulk_write(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size)
{
  int __retres;
  int i;
  int ret;
  int count;
  unsigned char *p_cache;
  unsigned char *p_src;
  int tmp_0;
  
#line 993 
  p_cache = (unsigned char *)kcalloc_0(size,1UL,208U);
  
#line 994 
  if (p_cache == (unsigned char *)0U) {
    
#line 995 
    __retres = -12;
    
#line 995 
    goto return_label;
  }
  else ;
  
#line 997 
  count = (int)(size / 4UL);
  
#line 998 
  qlcnic_swap32_buffer((u32 *)buf,count);
  
#line 999 
  memcpy((void *)p_cache,(void const *)buf,size);
  
#line 1000 
  p_src = p_cache;
  
#line 1002 
  tmp_0 = qlcnic_83xx_lock_flash(adapter);
  
#line 1002 
  if (tmp_0 != 0) {
    
#line 1003 
    kfree((void const *)p_cache);
    
#line 1004 
    __retres = -5;
    
#line 1004 
    goto return_label;
  }
  else ;
  
#line 1007 
  if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) {
    
#line 1008 
    ret = qlcnic_83xx_enable_flash_write(adapter);
    
#line 1009 
    if (ret != 0) {
      
#line 1010 
      kfree((void const *)p_cache);
      
#line 1011 
      qlcnic_83xx_unlock_flash(adapter);
      
#line 1012 
      __retres = -5;
      
#line 1012 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1016 
  i = 0;
  
#line 1016 
  goto ldv_56459;
  ldv_56458: 
#line 1017 
  ;
  
#line 1017 
  ret = qlcnic_83xx_flash_bulk_write(adapter,(unsigned int)offset,(u32 *)p_src,64);
  
#line 1021 
  if (ret != 0) {
    
#line 1022 
    if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) {
      
#line 1023 
      ret = qlcnic_83xx_disable_flash_write(adapter);
      
#line 1024 
      if (ret != 0) {
        
#line 1025 
        kfree((void const *)p_cache);
        
#line 1026 
        qlcnic_83xx_unlock_flash(adapter);
        
#line 1027 
        __retres = -5;
        
#line 1027 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 1031 
    kfree((void const *)p_cache);
    
#line 1032 
    qlcnic_83xx_unlock_flash(adapter);
    
#line 1033 
    __retres = -5;
    
#line 1033 
    goto return_label;
  }
  else ;
  
#line 1036 
  p_src += 256U;
  
#line 1037 
  offset = (long long)((unsigned long long)offset + 256ULL);
  
#line 1016 
  i += 1;
  ldv_56459: 
#line 1017 
  ;
  
#line 1016 
  if (count / 64 > i) 
#line 1018 
                      goto ldv_56458; else 
#line 1021 
                                           goto ldv_56460;
  ldv_56460: 
#line 1022 
  ;
  
#line 1040 
  if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) {
    
#line 1041 
    ret = qlcnic_83xx_disable_flash_write(adapter);
    
#line 1042 
    if (ret != 0) {
      
#line 1043 
      kfree((void const *)p_cache);
      
#line 1044 
      qlcnic_83xx_unlock_flash(adapter);
      
#line 1045 
      __retres = -5;
      
#line 1045 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1049 
  kfree((void const *)p_cache);
  
#line 1050 
  qlcnic_83xx_unlock_flash(adapter);
  
#line 1052 
  __retres = 0;
  return_label: 
#line 1052 
                return __retres;
}


#line 1055  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static int qlcnic_83xx_sysfs_flash_write(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size)
{
  int __retres;
  int i;
  int ret;
  int count;
  unsigned char *p_cache;
  unsigned char *p_src;
  int tmp_0;
  
#line 1061 
  p_cache = (unsigned char *)kcalloc_0(size,1UL,208U);
  
#line 1062 
  if (p_cache == (unsigned char *)0U) {
    
#line 1063 
    __retres = -12;
    
#line 1063 
    goto return_label;
  }
  else ;
  
#line 1065 
  qlcnic_swap32_buffer((u32 *)buf,(int)(size / 4UL));
  
#line 1066 
  memcpy((void *)p_cache,(void const *)buf,size);
  
#line 1067 
  p_src = p_cache;
  
#line 1068 
  count = (int)(size / 4UL);
  
#line 1070 
  tmp_0 = qlcnic_83xx_lock_flash(adapter);
  
#line 1070 
  if (tmp_0 != 0) {
    
#line 1071 
    kfree((void const *)p_cache);
    
#line 1072 
    __retres = -5;
    
#line 1072 
    goto return_label;
  }
  else ;
  
#line 1075 
  if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) {
    
#line 1076 
    ret = qlcnic_83xx_enable_flash_write(adapter);
    
#line 1077 
    if (ret != 0) {
      
#line 1078 
      kfree((void const *)p_cache);
      
#line 1079 
      qlcnic_83xx_unlock_flash(adapter);
      
#line 1080 
      __retres = -5;
      
#line 1080 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1084 
  i = 0;
  
#line 1084 
  goto ldv_56473;
  ldv_56472: 
#line 1085 
  ;
  
#line 1085 
  ret = qlcnic_83xx_flash_write32(adapter,(unsigned int)offset,(u32 *)p_src);
  
#line 1086 
  if (ret != 0) {
    
#line 1087 
    if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) {
      
#line 1088 
      ret = qlcnic_83xx_disable_flash_write(adapter);
      
#line 1089 
      if (ret != 0) {
        
#line 1090 
        kfree((void const *)p_cache);
        
#line 1091 
        qlcnic_83xx_unlock_flash(adapter);
        
#line 1092 
        __retres = -5;
        
#line 1092 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 1095 
    kfree((void const *)p_cache);
    
#line 1096 
    qlcnic_83xx_unlock_flash(adapter);
    
#line 1097 
    __retres = -5;
    
#line 1097 
    goto return_label;
  }
  else ;
  
#line 1100 
  p_src += 4U;
  
#line 1101 
  offset = (long long)((unsigned long long)offset + 4ULL);
  
#line 1084 
  i += 1;
  ldv_56473: 
#line 1085 
  ;
  
#line 1084 
  if (i < count) 
#line 1086 
                 goto ldv_56472; else 
#line 1089 
                                      goto ldv_56474;
  ldv_56474: 
#line 1090 
  ;
  
#line 1104 
  if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) {
    
#line 1105 
    ret = qlcnic_83xx_disable_flash_write(adapter);
    
#line 1106 
    if (ret != 0) {
      
#line 1107 
      kfree((void const *)p_cache);
      
#line 1108 
      qlcnic_83xx_unlock_flash(adapter);
      
#line 1109 
      __retres = -5;
      
#line 1109 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1113 
  kfree((void const *)p_cache);
  
#line 1114 
  qlcnic_83xx_unlock_flash(adapter);
  
#line 1116 
  __retres = 0;
  return_label: 
#line 1116 
                return __retres;
}


#line 1119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_83xx_sysfs_flash_write_handler(struct file *filp, struct kobject *kobj, struct bin_attribute *attr, char *buf, loff_t offset, size_t size)
{
  ssize_t __retres;
  int ret;
  int flash_mode;
  unsigned long data;
  struct device *tmp;
  {
    
#line 1128 
    struct kobject const *__mptr = (struct kobject const *)kobj;
    
#line 1128 
    tmp = (struct device *)__mptr + 18446744073709551600U;
  }
  
#line 1128 
  struct device *dev = tmp;
  
#line 1129 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 1131 
  ret = kstrtoul((char const *)buf,16U,& data);
  
#line 1133 
  switch (data) {
    case (unsigned long)(-559038737): 
#line 1134 
    ;
    
#line 1135 
    flash_mode = 1;
    
#line 1136 
    ret = qlcnic_83xx_erase_flash_sector(adapter,(unsigned int)offset);
    
#line 1137 
    if (ret != 0) {
      
#line 1138 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"%s failed at %d\n","qlcnic_83xx_sysfs_flash_write_handler",1139);
      
#line 1140 
      __retres = -5L;
      
#line 1140 
      goto return_label;
    }
    else ;
    
#line 1142 
    goto ldv_56492;
    case (unsigned long)(-891507254): 
#line 1144 
    ;
    
#line 1145 
    flash_mode = 3;
    
#line 1146 
    goto ldv_56492;
    case (unsigned long)(-624055078): 
#line 1148 
    ;
    
#line 1149 
    flash_mode = 2;
    
#line 1150 
    goto ldv_56492;
    default: 
#line 1151 
    ;
    
#line 1152 
    if (flash_mode == 3) {
      
#line 1153 
      ret = qlcnic_83xx_sysfs_flash_bulk_write(adapter,buf,offset,size);
      
#line 1155 
      if (ret != 0) {
        
#line 1156 
        dev_err((struct device const *)(& (adapter->pdev)->dev),"%s failed at %d\n","qlcnic_83xx_sysfs_flash_write_handler",1158);
        
#line 1159 
        __retres = -5L;
        
#line 1159 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 1163 
    if (flash_mode == 2) {
      
#line 1164 
      ret = qlcnic_83xx_sysfs_flash_write(adapter,buf,offset,size);
      
#line 1166 
      if (ret != 0) {
        
#line 1167 
        dev_err((struct device const *)(& (adapter->pdev)->dev),"%s failed at %d\n","qlcnic_83xx_sysfs_flash_write_handler",1169);
        
#line 1170 
        __retres = -5L;
        
#line 1170 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  ldv_56492: 
#line 1175 
  ;
  
#line 1175 
  __retres = (long)size;
  return_label: 
#line 1175 
                return __retres;
}


#line 1178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct device_attribute dev_attr_bridged_mode = {.attr = {.name = "bridged_mode", .mode = (unsigned short)420U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .show = & qlcnic_show_bridged_mode, .store = & qlcnic_store_bridged_mode};

#line 1184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct device_attribute dev_attr_diag_mode = {.attr = {.name = "diag_mode", .mode = (unsigned short)420U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .show = & qlcnic_show_diag_mode, .store = & qlcnic_store_diag_mode};

#line 1190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct device_attribute dev_attr_beacon = {.attr = {.name = "beacon", .mode = (unsigned short)420U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .show = & qlcnic_show_beacon, .store = & qlcnic_store_beacon};

#line 1196  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_crb = {.attr = {.name = "crb", .mode = (unsigned short)420U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .size = 0UL, .private = (void *)0, .read = & qlcnic_sysfs_read_crb, .write = & qlcnic_sysfs_write_crb, .mmap = (int (*)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *))0};

#line 1203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_mem = {.attr = {.name = "mem", .mode = (unsigned short)420U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .size = 0UL, .private = (void *)0, .read = & qlcnic_sysfs_read_mem, .write = & qlcnic_sysfs_write_mem, .mmap = (int (*)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *))0};

#line 1210  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_npar_config = {.attr = {.name = "npar_config", .mode = (unsigned short)420U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .size = 0UL, .private = (void *)0, .read = & qlcnic_sysfs_read_npar_config, .write = & qlcnic_sysfs_write_npar_config, .mmap = (int (*)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *))0};

#line 1217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_pci_config = {.attr = {.name = "pci_config", .mode = (unsigned short)420U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .size = 0UL, .private = (void *)0, .read = & qlcnic_sysfs_read_pci_config, .write = (ssize_t (*)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ))0, .mmap = (int (*)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *))0};

#line 1224  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_port_stats = {.attr = {.name = "port_stats", .mode = (unsigned short)420U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .size = 0UL, .private = (void *)0, .read = & qlcnic_sysfs_get_port_stats, .write = & qlcnic_sysfs_clear_port_stats, .mmap = (int (*)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *))0};

#line 1231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_esw_stats = {.attr = {.name = "esw_stats", .mode = (unsigned short)420U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .size = 0UL, .private = (void *)0, .read = & qlcnic_sysfs_get_esw_stats, .write = & qlcnic_sysfs_clear_esw_stats, .mmap = (int (*)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *))0};

#line 1238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_esw_config = {.attr = {.name = "esw_config", .mode = (unsigned short)420U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .size = 0UL, .private = (void *)0, .read = & qlcnic_sysfs_read_esw_config, .write = & qlcnic_sysfs_write_esw_config, .mmap = (int (*)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *))0};

#line 1245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_pm_config = {.attr = {.name = "pm_config", .mode = (unsigned short)420U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .size = 0UL, .private = (void *)0, .read = & qlcnic_sysfs_read_pm_config, .write = & qlcnic_sysfs_write_pm_config, .mmap = (int (*)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *))0};

#line 1252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct bin_attribute bin_attr_flash = {.attr = {.name = "flash", .mode = (unsigned short)420U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .size = 0UL, .private = (void *)0, .read = & qlcnic_83xx_sysfs_flash_read_handler, .write = & qlcnic_83xx_sysfs_flash_write_handler, .mmap = (int (*)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *))0};

#line 1261  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static ssize_t qlcnic_hwmon_show_temp(struct device *dev, struct device_attribute *dev_attr, char *buf)
{
  ssize_t __retres;
  bool tmp_1;
  int tmp_2;
  
#line 1265 
  struct qlcnic_adapter *adapter = dev_get_drvdata((struct device const *)dev);
  
#line 1266 
  unsigned int temperature = 0U;
  
#line 1266 
  unsigned int value = 0U;
  
#line 1268 
  tmp_1 = qlcnic_83xx_check(adapter);
  
#line 1268 
  if ((int)tmp_1 != 0) 
#line 1269 
                       value = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 42U)));
  else {
    bool tmp_0;
    
#line 1270 
    tmp_0 = qlcnic_82xx_check(adapter);
    
#line 1270 
    if ((int)tmp_0 != 0) 
#line 1271 
                         value = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 18U))); else ;
  }
  
#line 1273 
  temperature = value >> 16;
  
#line 1275 
  temperature *= 1000U;
  
#line 1276 
  tmp_2 = sprintf(buf,"%u\n",temperature);
  
#line 1276 
  __retres = (long)tmp_2;
  
#line 1276 
  return __retres;
}


#line 1280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct sensor_device_attribute sensor_dev_attr_temp1_input = {.dev_attr = {.attr = {.name = "temp1_input", .mode = (unsigned short)292U, .ignore_lockdep = (_Bool)0, .key = (struct lock_class_key *)0, .skey = {.subkeys = {{.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}, {.__one_byte = (char)0}}}}, .show = & qlcnic_hwmon_show_temp, .store = (ssize_t (*)(struct device *, struct device_attribute *, char const *, size_t ))0}, .index = 1};

#line 1283  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct attribute *qlcnic_hwmon_attrs[2U] = {& sensor_dev_attr_temp1_input.dev_attr.attr, (struct attribute *)0};

#line 1288  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct attribute_group const qlcnic_hwmon_group = {.name = (char const *)0, .is_visible = (umode_t (*)(struct kobject *, struct attribute *, int ))0, .attrs = (struct attribute **)(& qlcnic_hwmon_attrs), .bin_attrs = (struct bin_attribute **)0};

#line 1288  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static struct attribute_group const *qlcnic_hwmon_groups[2U] = {& qlcnic_hwmon_group, (struct attribute_group const *)0};

#line 1290  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_register_hwmon_dev(struct qlcnic_adapter *adapter)
{
  struct device *hwmon_dev;
  bool tmp;
  bool tmp_1;
  
#line 1292 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1296 
  tmp = qlcnic_sriov_vf_check(adapter);
  
#line 1296 
  if ((int)tmp != 0) {
    
#line 1297 
    (adapter->ahw)->hwmon_dev = (struct device *)0;
    
#line 1298 
    goto return_label;
  }
  else ;
  
#line 1300 
  hwmon_dev = hwmon_device_register_with_groups(dev,(char const *)(& qlcnic_driver_name),(void *)adapter,(struct attribute_group const **)(& qlcnic_hwmon_groups));
  
#line 1303 
  tmp_1 = IS_ERR((void const *)hwmon_dev);
  
#line 1303 
  if ((int)tmp_1 != 0) {
    long tmp_0;
    
#line 1304 
    tmp_0 = PTR_ERR((void const *)hwmon_dev);
    
#line 1304 
    ;
    
#line 1304 
    dev_err((struct device const *)dev,"Cannot register with hwmon, err=%ld\n",tmp_0);
    
#line 1306 
    hwmon_dev = (struct device *)0;
  }
  else ;
  
#line 1308 
  (adapter->ahw)->hwmon_dev = hwmon_dev;
  return_label: 
#line 1309 
                return;
}


#line 1311  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_unregister_hwmon_dev(struct qlcnic_adapter *adapter)
{
  
#line 1313 
  struct device *hwmon_dev = (adapter->ahw)->hwmon_dev;
  
#line 1314 
  if (hwmon_dev != (struct device *)0) {
    
#line 1315 
    hwmon_device_unregister(hwmon_dev);
    
#line 1316 
    (adapter->ahw)->hwmon_dev = (struct device *)0;
  }
  else ;
  
#line 1318 
  return;
}


#line 1321  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_create_sysfs_entries(struct qlcnic_adapter *adapter)
{
  
#line 1323 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1325 
  if (((adapter->ahw)->capabilities & 256U) != 0U) {
    int tmp;
    
#line 1326 
    tmp = ldv_device_create_file_75(dev,(struct device_attribute const *)(& dev_attr_bridged_mode));
    
#line 1326 
    if (tmp != 0) 
#line 1327 
                  dev_warn((struct device const *)dev,"failed to create bridged_mode sysfs entry\n"); else ;
  }
  else ;
  
#line 1329 
  return;
}


#line 1331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_remove_sysfs_entries(struct qlcnic_adapter *adapter)
{
  
#line 1333 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1335 
  if (((adapter->ahw)->capabilities & 256U) != 0U) 
#line 1336 
                                                   ldv_device_remove_file_76(dev,(struct device_attribute const *)(& dev_attr_bridged_mode)); else ;
  
#line 1337 
  return;
}


#line 1339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static void qlcnic_create_diag_entries(struct qlcnic_adapter *adapter)
{
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_5;
  int tmp_6;
  int tmp_7;
  int tmp_8;
  int tmp_9;
  
#line 1341 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1343 
  tmp = device_create_bin_file(dev,(struct bin_attribute const *)(& bin_attr_port_stats));
  
#line 1343 
  if (tmp != 0) 
#line 1344 
                _dev_info((struct device const *)dev,"failed to create port stats sysfs entry"); else ;
  
#line 1346 
  if ((unsigned int)(adapter->ahw)->op_mode == 2U) 
#line 1347 
                                                   goto return_label; else ;
  
#line 1348 
  tmp_0 = ldv_device_create_file_77(dev,(struct device_attribute const *)(& dev_attr_diag_mode));
  
#line 1348 
  if (tmp_0 != 0) 
#line 1349 
                  _dev_info((struct device const *)dev,"failed to create diag_mode sysfs entry\n"); else ;
  
#line 1350 
  tmp_1 = device_create_bin_file(dev,(struct bin_attribute const *)(& bin_attr_crb));
  
#line 1350 
  if (tmp_1 != 0) 
#line 1351 
                  _dev_info((struct device const *)dev,"failed to create crb sysfs entry\n"); else ;
  
#line 1352 
  tmp_2 = device_create_bin_file(dev,(struct bin_attribute const *)(& bin_attr_mem));
  
#line 1352 
  if (tmp_2 != 0) 
#line 1353 
                  _dev_info((struct device const *)dev,"failed to create mem sysfs entry\n"); else ;
  
#line 1355 
  tmp_3 = constant_test_bit(16L,(unsigned long const volatile *)(& adapter->state));
  
#line 1355 
  if (tmp_3 != 0) 
#line 1356 
                  goto return_label; else ;
  
#line 1358 
  tmp_4 = device_create_bin_file(dev,(struct bin_attribute const *)(& bin_attr_pci_config));
  
#line 1358 
  if (tmp_4 != 0) 
#line 1359 
                  _dev_info((struct device const *)dev,"failed to create pci config sysfs entry"); else ;
  
#line 1361 
  tmp_5 = ldv_device_create_file_78(dev,(struct device_attribute const *)(& dev_attr_beacon));
  
#line 1361 
  if (tmp_5 != 0) 
#line 1362 
                  _dev_info((struct device const *)dev,"failed to create beacon sysfs entry"); else ;
  
#line 1364 
  if ((adapter->flags & 64U) == 0U) 
#line 1365 
                                    goto return_label; else ;
  
#line 1366 
  tmp_6 = device_create_bin_file(dev,(struct bin_attribute const *)(& bin_attr_esw_config));
  
#line 1366 
  if (tmp_6 != 0) 
#line 1367 
                  _dev_info((struct device const *)dev,"failed to create esw config sysfs entry"); else ;
  
#line 1368 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U) 
#line 1369 
                                                   goto return_label; else ;
  
#line 1370 
  tmp_7 = device_create_bin_file(dev,(struct bin_attribute const *)(& bin_attr_npar_config));
  
#line 1370 
  if (tmp_7 != 0) 
#line 1371 
                  _dev_info((struct device const *)dev,"failed to create npar config sysfs entry"); else ;
  
#line 1372 
  tmp_8 = device_create_bin_file(dev,(struct bin_attribute const *)(& bin_attr_pm_config));
  
#line 1372 
  if (tmp_8 != 0) 
#line 1373 
                  _dev_info((struct device const *)dev,"failed to create pm config sysfs entry"); else ;
  
#line 1374 
  tmp_9 = device_create_bin_file(dev,(struct bin_attribute const *)(& bin_attr_esw_stats));
  
#line 1374 
  if (tmp_9 != 0) 
#line 1375 
                  _dev_info((struct device const *)dev,"failed to create eswitch stats sysfs entry"); else ;
  return_label: 
#line 1376 
                return;
}


#line 1378  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
static void qlcnic_remove_diag_entries(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 1380 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1382 
  device_remove_bin_file(dev,(struct bin_attribute const *)(& bin_attr_port_stats));
  
#line 1384 
  if ((unsigned int)(adapter->ahw)->op_mode == 2U) 
#line 1385 
                                                   goto return_label; else ;
  
#line 1386 
  ldv_device_remove_file_79(dev,(struct device_attribute const *)(& dev_attr_diag_mode));
  
#line 1387 
  device_remove_bin_file(dev,(struct bin_attribute const *)(& bin_attr_crb));
  
#line 1388 
  device_remove_bin_file(dev,(struct bin_attribute const *)(& bin_attr_mem));
  
#line 1390 
  tmp = constant_test_bit(16L,(unsigned long const volatile *)(& adapter->state));
  
#line 1390 
  if (tmp != 0) 
#line 1391 
                goto return_label; else ;
  
#line 1393 
  device_remove_bin_file(dev,(struct bin_attribute const *)(& bin_attr_pci_config));
  
#line 1394 
  ldv_device_remove_file_80(dev,(struct device_attribute const *)(& dev_attr_beacon));
  
#line 1395 
  if ((adapter->flags & 64U) == 0U) 
#line 1396 
                                    goto return_label; else ;
  
#line 1397 
  device_remove_bin_file(dev,(struct bin_attribute const *)(& bin_attr_esw_config));
  
#line 1398 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U) 
#line 1399 
                                                   goto return_label; else ;
  
#line 1400 
  device_remove_bin_file(dev,(struct bin_attribute const *)(& bin_attr_npar_config));
  
#line 1401 
  device_remove_bin_file(dev,(struct bin_attribute const *)(& bin_attr_pm_config));
  
#line 1402 
  device_remove_bin_file(dev,(struct bin_attribute const *)(& bin_attr_esw_stats));
  return_label: 
#line 1403 
                return;
}


#line 1405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_82xx_add_sysfs(struct qlcnic_adapter *adapter)
{
  
#line 1407 
  qlcnic_create_diag_entries(adapter);
  
#line 1408 
  return;
}


#line 1410  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_82xx_remove_sysfs(struct qlcnic_adapter *adapter)
{
  
#line 1412 
  qlcnic_remove_diag_entries(adapter);
  
#line 1413 
  return;
}


#line 1415  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_83xx_add_sysfs(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 1417 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1419 
  qlcnic_create_diag_entries(adapter);
  
#line 1421 
  tmp = sysfs_create_bin_file(& dev->kobj,(struct bin_attribute const *)(& bin_attr_flash));
  
#line 1421 
  if (tmp != 0) 
#line 1422 
                _dev_info((struct device const *)dev,"failed to create flash sysfs entry\n"); else ;
  
#line 1423 
  return;
}


#line 1425  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sysfs.c"
void qlcnic_83xx_remove_sysfs(struct qlcnic_adapter *adapter)
{
  
#line 1427 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1429 
  qlcnic_remove_diag_entries(adapter);
  
#line 1430 
  sysfs_remove_bin_file(& dev->kobj,(struct bin_attribute const *)(& bin_attr_flash));
  
#line 1431 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
struct device_attribute *ldv_emg_alias_dev_attr_diag_mode_3 = & dev_attr_diag_mode;

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
struct device_attribute *ldv_emg_alias_dev_attr_bridged_mode_3 = & dev_attr_bridged_mode;

#line 58  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
struct device_attribute *ldv_emg_alias_dev_attr_beacon_3 = & dev_attr_beacon;

#line 61 
int ldv_emg_device_create_file(struct device *arg0, struct device_attribute *arg1);


#line 62 
void ldv_emg_device_remove_file(struct device *arg0, struct device_attribute *arg1);


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
long ldv_emg_wrapper_qlcnic_show_diag_mode_2(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  long tmp;
  
#line 77 
  tmp = qlcnic_show_diag_mode(arg0,arg1,arg2);
  
#line 77 
  return tmp;
}


#line 81  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
long ldv_emg_wrapper_qlcnic_store_beacon_4(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  long tmp;
  
#line 82 
  tmp = qlcnic_store_beacon(arg0,arg1,(char const *)arg2,arg3);
  
#line 82 
  return tmp;
}


#line 86  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
long ldv_emg_wrapper_qlcnic_show_bridged_mode_2(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  long tmp;
  
#line 87 
  tmp = qlcnic_show_bridged_mode(arg0,arg1,arg2);
  
#line 87 
  return tmp;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
long ldv_emg_wrapper_qlcnic_store_bridged_mode_4(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  long tmp;
  
#line 92 
  tmp = qlcnic_store_bridged_mode(arg0,arg1,(char const *)arg2,arg3);
  
#line 92 
  return tmp;
}


#line 96  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
long ldv_emg_wrapper_qlcnic_store_diag_mode_4(struct device *arg0, struct device_attribute *arg1, char *arg2, unsigned long arg3)
{
  long tmp;
  
#line 97 
  tmp = qlcnic_store_diag_mode(arg0,arg1,(char const *)arg2,arg3);
  
#line 97 
  return tmp;
}


#line 101  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
long ldv_emg_wrapper_qlcnic_hwmon_show_temp_2(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  long tmp;
  
#line 102 
  tmp = qlcnic_hwmon_show_temp(arg0,arg1,arg2);
  
#line 102 
  return tmp;
}


#line 106  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
long ldv_emg_wrapper_qlcnic_show_beacon_2(struct device *arg0, struct device_attribute *arg1, char *arg2)
{
  long tmp;
  
#line 107 
  tmp = qlcnic_show_beacon(arg0,arg1,arg2);
  
#line 107 
  return tmp;
}


#line 119  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
static long PTR_ERR(void const *ptr)
{
  long tmp;
  
#line 122 
  tmp = ldv_ptr_err(ptr);
  
#line 122 
  return tmp;
}


#line 126  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
static bool IS_ERR(void const *ptr)
{
  bool __retres;
  long ret;
  
#line 130 
  ret = ldv_is_err(ptr);
  
#line 131 
  __retres = (_Bool)(ret != 0L);
  
#line 131 
  return __retres;
}


#line 474  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 477 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 477 
  return tmp;
}


#line 808  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
static int ldv_device_create_file_75(struct device *ldv_func_arg1, struct device_attribute const *ldv_func_arg2)
{
  int tmp;
  
#line 812 
  tmp = ldv_emg_device_create_file(ldv_func_arg1,(struct device_attribute *)ldv_func_arg2);
  
#line 812 
  return tmp;
}


#line 816  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
static void ldv_device_remove_file_76(struct device *ldv_func_arg1, struct device_attribute const *ldv_func_arg2)
{
  
#line 820 
  ldv_emg_device_remove_file(ldv_func_arg1,(struct device_attribute *)ldv_func_arg2);
  
#line 821 
  return;
}


#line 824  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
static int ldv_device_create_file_77(struct device *ldv_func_arg1, struct device_attribute const *ldv_func_arg2)
{
  int tmp;
  
#line 828 
  tmp = ldv_emg_device_create_file(ldv_func_arg1,(struct device_attribute *)ldv_func_arg2);
  
#line 828 
  return tmp;
}


#line 832  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
static int ldv_device_create_file_78(struct device *ldv_func_arg1, struct device_attribute const *ldv_func_arg2)
{
  int tmp;
  
#line 836 
  tmp = ldv_emg_device_create_file(ldv_func_arg1,(struct device_attribute *)ldv_func_arg2);
  
#line 836 
  return tmp;
}


#line 840  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
static void ldv_device_remove_file_79(struct device *ldv_func_arg1, struct device_attribute const *ldv_func_arg2)
{
  
#line 844 
  ldv_emg_device_remove_file(ldv_func_arg1,(struct device_attribute *)ldv_func_arg2);
  
#line 845 
  return;
}


#line 848  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sysfs.c.aux"
static void ldv_device_remove_file_80(struct device *ldv_func_arg1, struct device_attribute const *ldv_func_arg2)
{
  
#line 852 
  ldv_emg_device_remove_file(ldv_func_arg1,(struct device_attribute *)ldv_func_arg2);
  
#line 853 
  return;
}


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
static bool ldv_queue_delayed_work_75(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);


#line 509 
static bool ldv_queue_delayed_work_76(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_4(size_t size, gfp_t flags);


#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
int dcb_setapp(struct net_device *, struct dcb_app *);


#line 32 
u8 dcb_getapp(struct net_device *, struct dcb_app *);


#line 39 
int dcbnl_cee_notify(struct net_device *, int, int, u32, u32);


#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static int qlcnic_dcb_get_hw_capability(struct qlcnic_dcb *dcb)
{
  int __retres;
  
#line 53 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->get_hw_capability != (int (*)(struct qlcnic_dcb *))0) {
    int tmp;
    
#line 54 
    tmp = (*((dcb->ops)->get_hw_capability))(dcb);
    
#line 54 
    __retres = tmp;
    
#line 54 
    goto return_label;
  }
  else ;
  
#line 56 
  __retres = 0;
  return_label: 
#line 56 
                return __retres;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static int qlcnic_dcb_query_hw_capability(struct qlcnic_dcb *dcb, char *buf)
{
  int __retres;
  
#line 76 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->query_hw_capability != (int (*)(struct qlcnic_dcb *, char *))0) {
    int tmp;
    
#line 77 
    tmp = (*((dcb->ops)->query_hw_capability))(dcb,buf);
    
#line 77 
    __retres = tmp;
    
#line 77 
    goto return_label;
  }
  else ;
  
#line 79 
  __retres = 0;
  return_label: 
#line 79 
                return __retres;
}


#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static int qlcnic_dcb_query_cee_param(struct qlcnic_dcb *dcb, char *buf, u8 type)
{
  int __retres;
  
#line 91 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->query_cee_param != (int (*)(struct qlcnic_dcb *, char *, u8 ))0) {
    int tmp;
    
#line 92 
    tmp = (*((dcb->ops)->query_cee_param))(dcb,buf,(unsigned char)((int)type));
    
#line 92 
    __retres = tmp;
    
#line 92 
    goto return_label;
  }
  else ;
  
#line 94 
  __retres = 0;
  return_label: 
#line 94 
                return __retres;
}


#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.h"
__inline static int qlcnic_dcb_get_cee_cfg(struct qlcnic_dcb *dcb)
{
  int __retres;
  
#line 99 
  if (dcb != (struct qlcnic_dcb *)0 && (dcb->ops)->get_cee_cfg != (int (*)(struct qlcnic_dcb *))0) {
    int tmp;
    
#line 100 
    tmp = (*((dcb->ops)->get_cee_cfg))(dcb);
    
#line 100 
    __retres = tmp;
    
#line 100 
    goto return_label;
  }
  else ;
  
#line 102 
  __retres = 0;
  return_label: 
#line 102 
                return __retres;
}


#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static struct dcbnl_rtnl_ops const qlcnic_dcbnl_ops;


#line 56 
static void qlcnic_dcb_aen_work(struct work_struct *work);


#line 57 
static void qlcnic_dcb_data_cee_param_map(struct qlcnic_adapter *adapter);


#line 59 
static void __qlcnic_init_dcbnl_ops(struct qlcnic_dcb *dcb);


#line 60 
static void __qlcnic_dcb_free(struct qlcnic_dcb *dcb);


#line 61 
static int __qlcnic_dcb_attach(struct qlcnic_dcb *dcb);


#line 62 
static int __qlcnic_dcb_query_hw_capability(struct qlcnic_dcb *dcb, char *buf);


#line 63 
static void __qlcnic_dcb_get_info(struct qlcnic_dcb *dcb);


#line 65 
static int qlcnic_82xx_dcb_get_hw_capability(struct qlcnic_dcb *dcb);


#line 66 
static int qlcnic_82xx_dcb_query_cee_param(struct qlcnic_dcb *dcb, char *buf, u8 type);


#line 67 
static int qlcnic_82xx_dcb_get_cee_cfg(struct qlcnic_dcb *dcb);


#line 68 
static void qlcnic_82xx_dcb_aen_handler(struct qlcnic_dcb *dcb, void *data);


#line 70 
static int qlcnic_83xx_dcb_get_hw_capability(struct qlcnic_dcb *dcb);


#line 71 
static int qlcnic_83xx_dcb_query_cee_param(struct qlcnic_dcb *dcb, char *buf, u8 idx);


#line 72 
static int qlcnic_83xx_dcb_get_cee_cfg(struct qlcnic_dcb *dcb);


#line 73 
static void qlcnic_83xx_dcb_aen_handler(struct qlcnic_dcb *dcb, void *data);


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static struct qlcnic_dcb_ops qlcnic_83xx_dcb_ops = {.query_hw_capability = & __qlcnic_dcb_query_hw_capability, .get_hw_capability = & qlcnic_83xx_dcb_get_hw_capability, .query_cee_param = & qlcnic_83xx_dcb_query_cee_param, .init_dcbnl_ops = & __qlcnic_init_dcbnl_ops, .aen_handler = & qlcnic_83xx_dcb_aen_handler, .get_cee_cfg = & qlcnic_83xx_dcb_get_cee_cfg, .get_info = & __qlcnic_dcb_get_info, .attach = & __qlcnic_dcb_attach, .free = & __qlcnic_dcb_free};

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static struct qlcnic_dcb_ops qlcnic_82xx_dcb_ops = {.query_hw_capability = & __qlcnic_dcb_query_hw_capability, .get_hw_capability = & qlcnic_82xx_dcb_get_hw_capability, .query_cee_param = & qlcnic_82xx_dcb_query_cee_param, .init_dcbnl_ops = & __qlcnic_init_dcbnl_ops, .aen_handler = & qlcnic_82xx_dcb_aen_handler, .get_cee_cfg = & qlcnic_82xx_dcb_get_cee_cfg, .get_info = & __qlcnic_dcb_get_info, .attach = & __qlcnic_dcb_attach, .free = & __qlcnic_dcb_free};

#line 196  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static u8 qlcnic_dcb_get_num_app(struct qlcnic_adapter *adapter, u32 val)
{
  u8 __retres;
  bool tmp;
  
#line 198 
  tmp = qlcnic_82xx_check(adapter);
  
#line 198 
  if ((int)tmp != 0) {
    
#line 199 
    __retres = (unsigned char)((unsigned int)((unsigned char)(val >> 12)) & 15U);
    
#line 199 
    goto return_label;
  }
  else {
    
#line 201 
    __retres = (unsigned char)((unsigned int)((unsigned char)(val >> 2)) & 15U);
    
#line 201 
    goto return_label;
  }
  return_label: 
#line 198 
                return __retres;
}


#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
__inline static u8 qlcnic_dcb_pfc_hdr_valid(struct qlcnic_adapter *adapter, u32 val)
{
  u8 __retres;
  bool tmp;
  
#line 207 
  tmp = qlcnic_82xx_check(adapter);
  
#line 207 
  if ((int)tmp != 0) {
    
#line 208 
    __retres = (unsigned char)((unsigned int)((unsigned char)(val >> 5)) & 1U);
    
#line 208 
    goto return_label;
  }
  else {
    
#line 210 
    __retres = (unsigned char)((unsigned int)((unsigned char)(val >> 1)) & 1U);
    
#line 210 
    goto return_label;
  }
  return_label: 
#line 207 
                return __retres;
}


#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
__inline static u8 qlcnic_dcb_tsa_hdr_valid(struct qlcnic_adapter *adapter, u32 val)
{
  u8 __retres;
  bool tmp;
  
#line 216 
  tmp = qlcnic_82xx_check(adapter);
  
#line 216 
  if ((int)tmp != 0) {
    
#line 217 
    __retres = (unsigned char)((unsigned int)((unsigned char)(val >> 4)) & 1U);
    
#line 217 
    goto return_label;
  }
  else {
    
#line 219 
    __retres = (unsigned char)((unsigned int)((unsigned char)val) & 1U);
    
#line 219 
    goto return_label;
  }
  return_label: 
#line 216 
                return __retres;
}


#line 222  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
__inline static u8 qlcnic_dcb_get_prio_map_app(struct qlcnic_adapter *adapter, u32 val)
{
  u8 __retres;
  bool tmp;
  
#line 225 
  tmp = qlcnic_82xx_check(adapter);
  
#line 225 
  if ((int)tmp != 0) {
    
#line 226 
    __retres = (unsigned char)(1 << val);
    
#line 226 
    goto return_label;
  }
  else {
    
#line 228 
    __retres = (unsigned char)(val >> 24);
    
#line 228 
    goto return_label;
  }
  return_label: 
#line 225 
                return __retres;
}


#line 231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_dcb_prio_count(u8 up_tc_map)
{
  int j;
  
#line 235 
  j = 0;
  
#line 235 
  goto ldv_53889;
  ldv_53888: 
#line 236 
  ;
  
#line 236 
  if ((((int)up_tc_map >> j) & 1) != 0) 
#line 237 
                                        goto ldv_53887; else ;
  
#line 235 
  j += 1;
  ldv_53889: 
#line 236 
  ;
  
#line 235 
  if (j <= 7) 
#line 237 
              goto ldv_53888; else 
#line 240 
                                   goto ldv_53887;
  ldv_53887: 
#line 241 
  ;
  
#line 239 
  return j;
}


#line 242  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void __qlcnic_init_dcbnl_ops(struct qlcnic_dcb *dcb)
{
  int tmp;
  
#line 244 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dcb->state));
  
#line 244 
  if (tmp != 0) 
#line 245 
                ((dcb->adapter)->netdev)->dcbnl_ops = & qlcnic_dcbnl_ops; else ;
  
#line 246 
  return;
}


#line 248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_set_dcb_ops(struct qlcnic_adapter *adapter)
{
  bool tmp_0;
  
#line 250 
  tmp_0 = qlcnic_82xx_check(adapter);
  
#line 250 
  if ((int)tmp_0 != 0) 
#line 251 
                       (adapter->dcb)->ops = & qlcnic_82xx_dcb_ops;
  else {
    bool tmp;
    
#line 252 
    tmp = qlcnic_83xx_check(adapter);
    
#line 252 
    if ((int)tmp != 0) 
#line 253 
                       (adapter->dcb)->ops = & qlcnic_83xx_dcb_ops; else ;
  }
  
#line 254 
  return;
}


#line 256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
int qlcnic_register_dcb(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_dcb *dcb;
  bool tmp;
  
#line 260 
  tmp = qlcnic_sriov_vf_check(adapter);
  
#line 260 
  if ((int)tmp != 0) {
    
#line 261 
    __retres = 0;
    
#line 261 
    goto return_label;
  }
  else ;
  
#line 263 
  dcb = (struct qlcnic_dcb *)kzalloc_4(272UL,32U);
  
#line 264 
  if (dcb == (struct qlcnic_dcb *)0) {
    
#line 265 
    __retres = -12;
    
#line 265 
    goto return_label;
  }
  else ;
  
#line 267 
  adapter->dcb = dcb;
  
#line 268 
  dcb->adapter = adapter;
  
#line 269 
  qlcnic_set_dcb_ops(adapter);
  
#line 270 
  dcb->state = 0UL;
  
#line 272 
  __retres = 0;
  return_label: 
#line 272 
                return __retres;
}


#line 275  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void __qlcnic_dcb_free(struct qlcnic_dcb *dcb)
{
  struct qlcnic_adapter *adapter;
  int tmp;
  
#line 279 
  if (dcb == (struct qlcnic_dcb *)0) 
#line 280 
                                     goto return_label; else ;
  
#line 282 
  adapter = dcb->adapter;
  
#line 284 
  goto ldv_53905;
  ldv_53904: 
#line 285 
  ;
  
#line 285 
  usleep_range(10000UL,11000UL);
  ldv_53905: 
#line 286 
  ;
  
#line 284 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& dcb->state));
  
#line 284 
  if (tmp != 0) 
#line 286 
                goto ldv_53904; else 
#line 289 
                                     goto ldv_53906;
  ldv_53906: 
#line 290 
  ;
  
#line 287 
  cancel_delayed_work_sync(& dcb->aen_work);
  
#line 289 
  if (dcb->wq != (struct workqueue_struct *)0) {
    
#line 290 
    destroy_workqueue(dcb->wq);
    
#line 291 
    dcb->wq = (struct workqueue_struct *)0;
  }
  else ;
  
#line 294 
  kfree((void const *)dcb->cfg);
  
#line 295 
  dcb->cfg = (struct qlcnic_dcb_cfg *)0;
  
#line 296 
  kfree((void const *)dcb->param);
  
#line 297 
  dcb->param = (struct qlcnic_dcb_mbx_params *)0;
  
#line 298 
  kfree((void const *)dcb);
  
#line 299 
  adapter->dcb = (struct qlcnic_dcb *)0;
  return_label: 
#line 300 
                return;
}


#line 302  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void __qlcnic_dcb_get_info(struct qlcnic_dcb *dcb)
{
  
#line 304 
  qlcnic_dcb_get_hw_capability(dcb);
  
#line 305 
  qlcnic_dcb_get_cee_cfg(dcb);
  
#line 306 
  return;
}


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int __qlcnic_dcb_attach(struct qlcnic_dcb *dcb)
{
  int __retres;
  struct workqueue_struct *tmp_0;
  
#line 310 
  int err = 0;
  {
    struct lock_class_key __key;
    
#line 312 
    __init_work(& dcb->aen_work.work,0);
    
#line 312 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL_1};
    
#line 312 
    dcb->aen_work.work.data = __constr_expr_37;
    
#line 312 
    lockdep_init_map(& dcb->aen_work.work.lockdep_map,"(&(&dcb->aen_work)->work)",& __key,0);
    
#line 312 
    INIT_LIST_HEAD(& dcb->aen_work.work.entry);
    
#line 312 
    dcb->aen_work.work.func = & qlcnic_dcb_aen_work;
  }
  {
    struct lock_class_key __key_0;
    
#line 312 
    init_timer_key(& dcb->aen_work.timer,2097152U,"(&(&dcb->aen_work)->timer)",& __key_0);
  }
  
#line 312 
  dcb->aen_work.timer.function = & delayed_work_timer_fn;
  
#line 312 
  dcb->aen_work.timer.data = (unsigned long)(& dcb->aen_work);
  {
    struct lock_class_key __key_1;
    char const *__lock_name;
    
#line 314 
    __lock_name = "\"%s\"";
    
#line 314 
    tmp_0 = __alloc_workqueue_key("%s",131082U,1,& __key_1,__lock_name,(char *)"qlcnic-dcb");
  }
  
#line 314 
  dcb->wq = tmp_0;
  
#line 315 
  if (dcb->wq == (struct workqueue_struct *)0) {
    
#line 316 
    dev_err((struct device const *)(& ((dcb->adapter)->pdev)->dev),"DCB workqueue allocation failed. DCB will be disabled\n");
    
#line 318 
    __retres = -1;
    
#line 318 
    goto return_label;
  }
  else ;
  
#line 321 
  dcb->cfg = (struct qlcnic_dcb_cfg *)kzalloc_4(2232UL,32U);
  
#line 322 
  if (dcb->cfg == (struct qlcnic_dcb_cfg *)0) {
    
#line 323 
    err = -12;
    
#line 324 
    goto out_free_wq;
  }
  else ;
  
#line 327 
  dcb->param = (struct qlcnic_dcb_mbx_params *)kzalloc_4(196UL,32U);
  
#line 328 
  if (dcb->param == (struct qlcnic_dcb_mbx_params *)0) {
    
#line 329 
    err = -12;
    
#line 330 
    goto out_free_cfg;
  }
  else ;
  
#line 333 
  __retres = 0;
  
#line 333 
  goto return_label;
  out_free_cfg: 
#line 334 
  ;
  
#line 335 
  kfree((void const *)dcb->cfg);
  
#line 336 
  dcb->cfg = (struct qlcnic_dcb_cfg *)0;
  out_free_wq: 
#line 338 
  ;
  
#line 339 
  destroy_workqueue(dcb->wq);
  
#line 340 
  dcb->wq = (struct workqueue_struct *)0;
  
#line 342 
  __retres = err;
  return_label: 
#line 342 
                return __retres;
}


#line 345  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int __qlcnic_dcb_query_hw_capability(struct qlcnic_dcb *dcb, char *buf)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  u32 mbx_out;
  int err;
  
#line 347 
  struct qlcnic_adapter *adapter = dcb->adapter;
  
#line 352 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,52U);
  
#line 353 
  if (err != 0) {
    
#line 354 
    __retres = err;
    
#line 354 
    goto return_label;
  }
  else ;
  
#line 356 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 357 
  if (err != 0) 
#line 358 
                dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to query DCBX capability, err %d\n",err);
  else {
    
#line 361 
    mbx_out = *(cmd.rsp.arg + 1U);
    
#line 362 
    if (buf != (char *)0) 
#line 363 
                          memcpy((void *)buf,(void const *)(& mbx_out),4UL); else ;
  }
  
#line 366 
  qlcnic_free_mbx_args(& cmd);
  
#line 368 
  __retres = err;
  return_label: 
#line 368 
                return __retres;
}


#line 371  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int __qlcnic_dcb_get_capability(struct qlcnic_dcb *dcb, u32 *val)
{
  int __retres;
  u32 mbx_out;
  int err;
  
#line 373 
  struct qlcnic_dcb_capability *cap = & (dcb->cfg)->capability;
  
#line 377 
  memset((void *)cap,0,6UL);
  
#line 379 
  err = qlcnic_dcb_query_hw_capability(dcb,(char *)val);
  
#line 380 
  if (err != 0) {
    
#line 381 
    __retres = err;
    
#line 381 
    goto return_label;
  }
  else ;
  
#line 383 
  mbx_out = *val;
  
#line 384 
  if ((mbx_out & 1U) != 0U) 
#line 385 
                            cap->tsa_capability = (_Bool)1; else ;
  
#line 387 
  if ((mbx_out & 2U) != 0U) 
#line 388 
                            cap->ets_capability = (_Bool)1; else ;
  
#line 390 
  cap->max_num_tc = (unsigned char)((unsigned int)((unsigned char)(mbx_out >> 20)) & 15U);
  
#line 391 
  cap->max_ets_tc = (unsigned char)((unsigned int)((unsigned char)(mbx_out >> 24)) & 15U);
  
#line 392 
  cap->max_pfc_tc = (unsigned char)(mbx_out >> 28);
  
#line 394 
  if (((unsigned int)cap->max_num_tc > 8U || (int)cap->max_ets_tc > (int)cap->max_num_tc) || (int)cap->max_pfc_tc > (int)cap->max_num_tc) {
    
#line 397 
    dev_err((struct device const *)(& ((dcb->adapter)->pdev)->dev),"Invalid DCB configuration\n");
    
#line 398 
    __retres = -22;
    
#line 398 
    goto return_label;
  }
  else ;
  
#line 401 
  __retres = err;
  return_label: 
#line 401 
                return __retres;
}


#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_82xx_dcb_get_hw_capability(struct qlcnic_dcb *dcb)
{
  int __retres;
  struct qlcnic_dcb_capability *cap;
  u32 mbx_out;
  int err;
  
#line 406 
  struct qlcnic_dcb_cfg *cfg = dcb->cfg;
  
#line 411 
  err = __qlcnic_dcb_get_capability(dcb,& mbx_out);
  
#line 412 
  if (err != 0) {
    
#line 413 
    __retres = err;
    
#line 413 
    goto return_label;
  }
  else ;
  
#line 415 
  cap = & cfg->capability;
  
#line 416 
  cap->dcb_capability = (unsigned char)6U;
  
#line 418 
  if (((unsigned int)cap->dcb_capability != 0U && (int)cap->tsa_capability != 0) && (int)cap->ets_capability != 0) 
    
#line 419 
    set_bit(0L,(unsigned long volatile *)(& dcb->state)); else ;
  
#line 421 
  __retres = err;
  return_label: 
#line 421 
                return __retres;
}


#line 424  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_82xx_dcb_query_cee_param(struct qlcnic_dcb *dcb, char *buf, u8 type)
{
  int __retres;
  struct qlcnic_82xx_dcb_param_mbx_le *prsp_le;
  dma_addr_t cardrsp_phys_addr;
  struct qlcnic_dcb_param rsp;
  struct qlcnic_cmd_args cmd;
  u64 phys_addr;
  void *addr;
  int err;
  int i;
  
#line 427 
  u16 size = (unsigned short)64U;
  
#line 428 
  struct qlcnic_adapter *adapter = dcb->adapter;
  
#line 430 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 438 
  switch ((int)type) {
    case 3: 
#line 439 
    ;
    case 1: 
#line 440 
    ;
    case 2: 
#line 441 
    ;
    
#line 442 
    goto ldv_53963;
    default: 
#line 443 
    ;
    
#line 444 
    dev_err((struct device const *)dev,"Invalid parameter type %d\n",(int)type);
    
#line 445 
    __retres = -22;
    
#line 445 
    goto return_label;
  }
  ldv_53963: 
#line 448 
  ;
  
#line 448 
  addr = dma_alloc_attrs(dev,(unsigned long)size,& cardrsp_phys_addr,208U,(struct dma_attrs *)0);
  
#line 449 
  if (addr == (void *)0) {
    
#line 450 
    __retres = -12;
    
#line 450 
    goto return_label;
  }
  else ;
  
#line 452 
  prsp_le = (struct qlcnic_82xx_dcb_param_mbx_le *)addr;
  
#line 454 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,53U);
  
#line 455 
  if (err != 0) 
#line 456 
                goto out_free_rsp; else ;
  
#line 458 
  phys_addr = cardrsp_phys_addr;
  
#line 459 
  *(cmd.req.arg + 1U) = (unsigned int)((int)size | ((int)type << 16));
  
#line 460 
  *(cmd.req.arg + 2U) = (unsigned int)(phys_addr >> 32);
  
#line 461 
  *(cmd.req.arg + 3U) = (unsigned int)phys_addr;
  
#line 463 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 464 
  if (err != 0) {
    
#line 465 
    dev_err((struct device const *)dev,"Failed to query DCBX parameter, err %d\n",err);
    
#line 466 
    goto out;
  }
  else ;
  
#line 469 
  memset((void *)(& rsp),0,64UL);
  
#line 470 
  rsp.hdr_prio_pfc_map[0] = prsp_le->hdr_prio_pfc_map[0];
  
#line 471 
  rsp.hdr_prio_pfc_map[1] = prsp_le->hdr_prio_pfc_map[1];
  
#line 472 
  rsp.prio_pg_map[0] = prsp_le->prio_pg_map[0];
  
#line 473 
  rsp.prio_pg_map[1] = prsp_le->prio_pg_map[1];
  
#line 474 
  rsp.pg_bw_map[0] = prsp_le->pg_bw_map[0];
  
#line 475 
  rsp.pg_bw_map[1] = prsp_le->pg_bw_map[1];
  
#line 476 
  rsp.pg_tsa_map[0] = prsp_le->pg_tsa_map[0];
  
#line 477 
  rsp.pg_tsa_map[1] = prsp_le->pg_tsa_map[1];
  
#line 479 
  i = 0;
  
#line 479 
  goto ldv_53968;
  ldv_53967: 
#line 480 
  ;
  
#line 480 
  rsp.app[i] = prsp_le->app[i];
  
#line 479 
  i += 1;
  ldv_53968: 
#line 480 
  ;
  
#line 479 
  if (i <= 7) 
#line 481 
              goto ldv_53967; else 
#line 484 
                                   goto ldv_53969;
  ldv_53969: 
#line 485 
  ;
  
#line 482 
  if (buf != (char *)0) 
#line 483 
                        memcpy((void *)buf,(void const *)(& rsp),(unsigned long)size); else ;
  out: 
#line 484 
  ;
  
#line 485 
  qlcnic_free_mbx_args(& cmd);
  out_free_rsp: 
#line 487 
  ;
  
#line 488 
  dma_free_attrs(dev,(unsigned long)size,addr,cardrsp_phys_addr,(struct dma_attrs *)0);
  
#line 490 
  __retres = err;
  return_label: 
#line 490 
                return __retres;
}


#line 493  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_82xx_dcb_get_cee_cfg(struct qlcnic_dcb *dcb)
{
  int __retres;
  struct qlcnic_dcb_mbx_params *mbx;
  int err;
  
#line 498 
  mbx = dcb->param;
  
#line 499 
  if (mbx == (struct qlcnic_dcb_mbx_params *)0) {
    
#line 500 
    __retres = 0;
    
#line 500 
    goto return_label;
  }
  else ;
  
#line 502 
  err = qlcnic_dcb_query_cee_param(dcb,(char *)(& mbx->type[0]),(unsigned char)3);
  
#line 504 
  if (err != 0) {
    
#line 505 
    __retres = err;
    
#line 505 
    goto return_label;
  }
  else ;
  
#line 507 
  err = qlcnic_dcb_query_cee_param(dcb,(char *)(& mbx->type[1]),(unsigned char)1);
  
#line 509 
  if (err != 0) {
    
#line 510 
    __retres = err;
    
#line 510 
    goto return_label;
  }
  else ;
  
#line 512 
  err = qlcnic_dcb_query_cee_param(dcb,(char *)(& mbx->type[2]),(unsigned char)2);
  
#line 514 
  if (err != 0) {
    
#line 515 
    __retres = err;
    
#line 515 
    goto return_label;
  }
  else ;
  
#line 517 
  mbx->prio_tc_map = 1985229328U;
  
#line 519 
  qlcnic_dcb_data_cee_param_map(dcb->adapter);
  
#line 521 
  __retres = err;
  return_label: 
#line 521 
                return __retres;
}


#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_aen_work(struct work_struct *work)
{
  struct qlcnic_dcb *dcb;
  struct qlcnic_dcb *tmp;
  {
    
#line 528 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 528 
    tmp = (struct qlcnic_dcb *)__mptr + 18446744073709551600U;
  }
  
#line 528 
  dcb = tmp;
  
#line 530 
  qlcnic_dcb_get_cee_cfg(dcb);
  
#line 531 
  set_bit(1L,(unsigned long volatile *)(& dcb->state));
  
#line 532 
  return;
}


#line 534  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_82xx_dcb_aen_handler(struct qlcnic_dcb *dcb, void *data)
{
  int tmp;
  
#line 536 
  tmp = test_and_set_bit(1L,(unsigned long volatile *)(& dcb->state));
  
#line 536 
  if (tmp != 0) 
#line 537 
                goto return_label; else ;
  
#line 539 
  ldv_queue_delayed_work_75(dcb->wq,& dcb->aen_work,0UL);
  return_label: 
#line 540 
                return;
}


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_83xx_dcb_get_hw_capability(struct qlcnic_dcb *dcb)
{
  int __retres;
  u32 mbx_out;
  int err;
  
#line 544 
  struct qlcnic_dcb_capability *cap = & (dcb->cfg)->capability;
  
#line 548 
  err = __qlcnic_dcb_get_capability(dcb,& mbx_out);
  
#line 549 
  if (err != 0) {
    
#line 550 
    __retres = err;
    
#line 550 
    goto return_label;
  }
  else ;
  
#line 552 
  if ((mbx_out & 4U) != 0U) 
#line 553 
                            cap->dcb_capability = (unsigned char)4U; else ;
  
#line 554 
  if ((mbx_out & 8U) != 0U) 
#line 555 
                            cap->dcb_capability = (unsigned char)((unsigned int)cap->dcb_capability | 8U); else ;
  
#line 556 
  if ((unsigned int)cap->dcb_capability != 0U) 
#line 557 
                                               cap->dcb_capability = (unsigned char)((unsigned int)cap->dcb_capability | 2U); else ;
  
#line 559 
  if (((unsigned int)cap->dcb_capability != 0U && (int)cap->tsa_capability != 0) && (int)cap->ets_capability != 0) 
    
#line 560 
    set_bit(0L,(unsigned long volatile *)(& dcb->state)); else ;
  
#line 562 
  __retres = err;
  return_label: 
#line 562 
                return __retres;
}


#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_83xx_dcb_query_cee_param(struct qlcnic_dcb *dcb, char *buf, u8 idx)
{
  int __retres;
  struct qlcnic_dcb_mbx_params mbx_out;
  int err;
  int i;
  int j;
  int k;
  int max_app;
  int size;
  struct qlcnic_dcb_param *each;
  struct qlcnic_cmd_args cmd;
  u32 val;
  char *p;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_5;
  int tmp_6;
  int tmp_7;
  u8 tmp_8;
  
#line 568 
  struct qlcnic_adapter *adapter = dcb->adapter;
  
#line 576 
  size = 0;
  
#line 577 
  memset((void *)(& mbx_out),0,196UL);
  
#line 578 
  memset((void *)buf,0,196UL);
  
#line 580 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,53U);
  
#line 581 
  if (err != 0) {
    
#line 582 
    __retres = err;
    
#line 582 
    goto return_label;
  }
  else ;
  
#line 584 
  *(cmd.req.arg) |= 1073741824U;
  
#line 585 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 586 
  if (err != 0) {
    
#line 587 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to query DCBX param, err %d\n",err);
    
#line 589 
    goto out;
  }
  else ;
  
#line 592 
  mbx_out.prio_tc_map = *(cmd.rsp.arg + 1U);
  
#line 593 
  p = (char *)memcpy((void *)buf,(void const *)(& mbx_out),4UL);
  
#line 594 
  k = 2;
  
#line 595 
  p += 4U;
  
#line 597 
  j = 0;
  
#line 597 
  goto ldv_54013;
  ldv_54012: 
#line 598 
  ;
  
#line 598 
  each = & mbx_out.type[j];
  
#line 600 
  tmp_0 = k;
  
#line 600 
  k += 1;
  
#line 600 
  each->hdr_prio_pfc_map[0] = *(cmd.rsp.arg + tmp_0);
  
#line 601 
  tmp_1 = k;
  
#line 601 
  k += 1;
  
#line 601 
  each->hdr_prio_pfc_map[1] = *(cmd.rsp.arg + tmp_1);
  
#line 602 
  tmp_2 = k;
  
#line 602 
  k += 1;
  
#line 602 
  each->prio_pg_map[0] = *(cmd.rsp.arg + tmp_2);
  
#line 603 
  tmp_3 = k;
  
#line 603 
  k += 1;
  
#line 603 
  each->prio_pg_map[1] = *(cmd.rsp.arg + tmp_3);
  
#line 604 
  tmp_4 = k;
  
#line 604 
  k += 1;
  
#line 604 
  each->pg_bw_map[0] = *(cmd.rsp.arg + tmp_4);
  
#line 605 
  tmp_5 = k;
  
#line 605 
  k += 1;
  
#line 605 
  each->pg_bw_map[1] = *(cmd.rsp.arg + tmp_5);
  
#line 606 
  tmp_6 = k;
  
#line 606 
  k += 1;
  
#line 606 
  each->pg_tsa_map[0] = *(cmd.rsp.arg + tmp_6);
  
#line 607 
  tmp_7 = k;
  
#line 607 
  k += 1;
  
#line 607 
  each->pg_tsa_map[1] = *(cmd.rsp.arg + tmp_7);
  
#line 608 
  val = each->hdr_prio_pfc_map[0];
  
#line 610 
  tmp_8 = qlcnic_dcb_get_num_app(adapter,val);
  
#line 610 
  max_app = (int)tmp_8;
  
#line 611 
  i = 0;
  
#line 611 
  goto ldv_54010;
  ldv_54009: 
#line 612 
  ;
  
#line 612 
  each->app[i] = *(cmd.rsp.arg + (i + k));
  
#line 611 
  i += 1;
  ldv_54010: 
#line 612 
  ;
  
#line 611 
  if (i < max_app) 
#line 613 
                   goto ldv_54009; else 
#line 616 
                                        goto ldv_54011;
  ldv_54011: 
#line 617 
  ;
  
#line 614 
  size = 64;
  
#line 615 
  memcpy((void *)p,(void const *)(& each->hdr_prio_pfc_map[0]),(unsigned long)size);
  
#line 616 
  p += size;
  
#line 617 
  if (j == 0) 
#line 618 
              k = 18; else 
#line 620 
                           k = 34;
  
#line 597 
  j += 1;
  ldv_54013: 
#line 598 
  ;
  
#line 597 
  if (j <= 2) 
#line 599 
              goto ldv_54012; else 
#line 602 
                                   goto ldv_54014;
  ldv_54014: 
#line 603 
  ;
  out: 
#line 622 
  ;
  
#line 623 
  qlcnic_free_mbx_args(& cmd);
  
#line 625 
  __retres = err;
  return_label: 
#line 625 
                return __retres;
}


#line 628  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_83xx_dcb_get_cee_cfg(struct qlcnic_dcb *dcb)
{
  int __retres;
  int err;
  
#line 632 
  err = qlcnic_dcb_query_cee_param(dcb,(char *)dcb->param,(unsigned char)0);
  
#line 633 
  if (err != 0) {
    
#line 634 
    __retres = err;
    
#line 634 
    goto return_label;
  }
  else ;
  
#line 636 
  qlcnic_dcb_data_cee_param_map(dcb->adapter);
  
#line 638 
  __retres = err;
  return_label: 
#line 638 
                return __retres;
}


#line 641  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_83xx_dcb_aen_handler(struct qlcnic_dcb *dcb, void *data)
{
  int tmp;
  
#line 643 
  u32 *val = (u32 *)data;
  
#line 645 
  tmp = test_and_set_bit(1L,(unsigned long volatile *)(& dcb->state));
  
#line 645 
  if (tmp != 0) 
#line 646 
                goto return_label; else ;
  
#line 648 
  if ((*val & 256U) != 0U) 
#line 649 
                           set_bit(0L,(unsigned long volatile *)(& dcb->state)); else 
                                                                    
#line 651 
                                                                    set_bit(0L,(unsigned long volatile *)(& dcb->state));
  
#line 653 
  ldv_queue_delayed_work_76(dcb->wq,& dcb->aen_work,0UL);
  return_label: 
#line 654 
                return;
}


#line 656  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_fill_cee_tc_params(struct qlcnic_dcb_mbx_params *mbx, struct qlcnic_dcb_param *each, struct qlcnic_dcb_cee *type)
{
  struct qlcnic_dcb_tc_cfg *tc_cfg;
  u8 i;
  u8 tc;
  u8 pgid;
  
#line 663 
  i = (unsigned char)0U;
  
#line 663 
  goto ldv_54034;
  ldv_54033: 
#line 664 
  ;
  
#line 664 
  tc = (unsigned char)((unsigned int)((unsigned char)(mbx->prio_tc_map >> (int)i * 3)) & 7U);
  
#line 665 
  tc_cfg = & type->tc_cfg[(int)tc];
  
#line 666 
  tc_cfg->valid = (_Bool)1;
  
#line 667 
  tc_cfg->up_tc_map = (unsigned char)((int)tc_cfg->up_tc_map | (1 << (int)i));
  
#line 669 
  if ((((each->hdr_prio_pfc_map[1] >> 24) >> (int)i) & 1U) != 0U && (int)type->pfc_mode_enable != 0) {
    
#line 671 
    tc_cfg->prio_cfg[(int)i].valid = (_Bool)1;
    
#line 672 
    tc_cfg->prio_cfg[(int)i].pfc_type = QLC_PFC_FULL;
  }
  else ;
  
#line 675 
  if ((unsigned int)i <= 3U) 
#line 676 
                             pgid = (unsigned char)(each->prio_pg_map[0] >> (int)i * 8); else 
                                                                    
#line 678 
                                                                    pgid = (unsigned char)(each->prio_pg_map[1] >> (int)i * 8);
  
#line 680 
  tc_cfg->pgid = pgid;
  
#line 682 
  tc_cfg->prio_type = QLC_PRIO_LINK;
  
#line 683 
  type->pg_cfg[(int)tc_cfg->pgid].prio_count = (u8)((int)type->pg_cfg[(int)tc_cfg->pgid].prio_count + 1);
  
#line 663 
  i = (u8)((int)i + 1);
  ldv_54034: 
#line 664 
  ;
  
#line 663 
  if ((unsigned int)i <= 7U) 
#line 665 
                             goto ldv_54033; else 
#line 668 
                                                  goto ldv_54035;
  ldv_54035: 
#line 669 
  ;
  
#line 670 
  return;
}


#line 687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_fill_cee_pg_params(struct qlcnic_dcb_param *each, struct qlcnic_dcb_cee *type)
{
  struct qlcnic_dcb_pg_cfg *pg_cfg;
  u8 i;
  u8 tsa;
  u8 bw_per;
  
#line 693 
  i = (unsigned char)0U;
  
#line 693 
  goto ldv_54045;
  ldv_54044: 
#line 694 
  ;
  
#line 694 
  pg_cfg = & type->pg_cfg[(int)i];
  
#line 695 
  pg_cfg->valid = (_Bool)1;
  
#line 697 
  if ((unsigned int)i <= 3U) {
    
#line 698 
    bw_per = (unsigned char)(each->pg_bw_map[0] >> (int)i * 8);
    
#line 699 
    tsa = (unsigned char)(each->pg_tsa_map[0] >> (int)i * 8);
  }
  else {
    
#line 701 
    bw_per = (unsigned char)(each->pg_bw_map[1] >> (int)i * 8);
    
#line 702 
    tsa = (unsigned char)(each->pg_tsa_map[1] >> (int)i * 8);
  }
  
#line 705 
  pg_cfg->total_bw_percent = bw_per;
  
#line 706 
  pg_cfg->tsa_type = tsa;
  
#line 693 
  i = (u8)((int)i + 1);
  ldv_54045: 
#line 694 
  ;
  
#line 693 
  if ((unsigned int)i <= 7U) 
#line 695 
                             goto ldv_54044; else 
#line 698 
                                                  goto ldv_54046;
  ldv_54046: 
#line 699 
  ;
  
#line 700 
  return;
}


#line 711  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_fill_cee_app_params(struct qlcnic_adapter *adapter, u8 idx, struct qlcnic_dcb_param *each, struct qlcnic_dcb_cee *type)
{
  struct qlcnic_dcb_app *app;
  u8 i;
  u8 num_app;
  u8 map;
  u8 cnt;
  struct dcb_app new_app;
  int tmp;
  
#line 719 
  num_app = qlcnic_dcb_get_num_app(adapter,each->hdr_prio_pfc_map[0]);
  
#line 720 
  i = (unsigned char)0U;
  
#line 720 
  goto ldv_54060;
  ldv_54059: 
#line 721 
  ;
  
#line 721 
  app = & type->app[(int)i];
  
#line 722 
  app->valid = (_Bool)1;
  
#line 725 
  app->selector = (enum qlcnic_dcb_selector)((each->app[(int)i] & 255U) + 4294967295U);
  
#line 726 
  new_app.selector = (unsigned char)app->selector;
  
#line 727 
  app->protocol = (unsigned short)(each->app[(int)i] >> 8);
  
#line 728 
  new_app.protocol = app->protocol;
  
#line 729 
  map = qlcnic_dcb_get_prio_map_app(adapter,each->app[(int)i]);
  
#line 730 
  tmp = qlcnic_dcb_prio_count((unsigned char)((int)map));
  
#line 730 
  cnt = (unsigned char)tmp;
  
#line 732 
  if ((unsigned int)cnt > 7U) 
#line 733 
                              cnt = (unsigned char)0U; else ;
  
#line 735 
  app->priority = cnt;
  
#line 736 
  new_app.priority = cnt;
  
#line 738 
  if ((unsigned int)idx == 1U && (adapter->netdev)->dcbnl_ops != (struct dcbnl_rtnl_ops const *)0) 
    
#line 739 
    dcb_setapp(adapter->netdev,& new_app); else ;
  
#line 720 
  i = (u8)((int)i + 1);
  ldv_54060: 
#line 721 
  ;
  
#line 720 
  if ((int)i < (int)num_app) 
#line 722 
                             goto ldv_54059; else 
#line 725 
                                                  goto ldv_54061;
  ldv_54061: 
#line 726 
  ;
  
#line 727 
  return;
}


#line 743  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_map_cee_params(struct qlcnic_adapter *adapter, u8 idx)
{
  u8 tmp;
  u8 tmp_0;
  
#line 745 
  struct qlcnic_dcb_mbx_params *mbx = (adapter->dcb)->param;
  
#line 746 
  struct qlcnic_dcb_param *each = & mbx->type[(int)idx];
  
#line 747 
  struct qlcnic_dcb_cfg *cfg = (adapter->dcb)->cfg;
  
#line 748 
  struct qlcnic_dcb_cee *type = & cfg->type[(int)idx];
  
#line 750 
  type->tc_param_valid = (_Bool)0;
  
#line 751 
  type->pfc_mode_enable = (_Bool)0;
  
#line 752 
  memset((void *)(& type->tc_cfg),0,608UL);
  
#line 754 
  memset((void *)(& type->pg_cfg),0,32UL);
  
#line 757 
  tmp = qlcnic_dcb_pfc_hdr_valid(adapter,each->hdr_prio_pfc_map[0]);
  
#line 757 
  if ((unsigned int)tmp != 0U) {
    
#line 757 
    if ((unsigned int)cfg->capability.max_pfc_tc != 0U) 
#line 759 
                                                        type->pfc_mode_enable = (_Bool)1; else ;
  }
  else ;
  
#line 761 
  tmp_0 = qlcnic_dcb_tsa_hdr_valid(adapter,each->hdr_prio_pfc_map[0]);
  
#line 761 
  if ((unsigned int)tmp_0 != 0U) {
    
#line 761 
    if ((unsigned int)cfg->capability.max_ets_tc != 0U) 
#line 763 
                                                        type->tc_param_valid = (_Bool)1; else ;
  }
  else ;
  
#line 765 
  qlcnic_dcb_fill_cee_tc_params(mbx,each,type);
  
#line 766 
  qlcnic_dcb_fill_cee_pg_params(each,type);
  
#line 767 
  qlcnic_dcb_fill_cee_app_params(adapter,(unsigned char)((int)idx),each,type);
  
#line 768 
  return;
}


#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_data_cee_param_map(struct qlcnic_adapter *adapter)
{
  int i;
  
#line 774 
  i = 0;
  
#line 774 
  goto ldv_54075;
  ldv_54074: 
#line 775 
  ;
  
#line 775 
  qlcnic_dcb_map_cee_params(adapter,(unsigned char)((int)((unsigned char)i)));
  
#line 774 
  i += 1;
  ldv_54075: 
#line 775 
  ;
  
#line 774 
  if (i <= 2) 
#line 776 
              goto ldv_54074; else 
#line 779 
                                   goto ldv_54076;
  ldv_54076: 
#line 780 
  ;
  
#line 777 
  dcbnl_cee_notify(adapter->netdev,78,26,0U,0U);
  
#line 778 
  return;
}


#line 780  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static u8 qlcnic_dcb_get_state(struct net_device *netdev)
{
  u8 __retres;
  int tmp_0;
  
#line 782 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 784 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& (adapter->dcb)->state));
  
#line 784 
  __retres = (unsigned char)tmp_0;
  
#line 784 
  return __retres;
}


#line 787  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_get_perm_hw_addr(struct net_device *netdev, u8 *addr)
{
  
#line 789 
  memcpy((void *)addr,(void const *)(& netdev->perm_addr),(unsigned long)netdev->addr_len);
  
#line 790 
  return;
}


#line 793  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_get_pg_tc_cfg_tx(struct net_device *netdev, int tc, u8 *prio, u8 *pgid, u8 *bw_per, u8 *up_tc_map)
{
  struct qlcnic_dcb_tc_cfg *tc_cfg;
  struct qlcnic_dcb_tc_cfg *temp;
  struct qlcnic_dcb_cee *type;
  u8 i;
  u8 cnt;
  u8 pg;
  u8 tmp_2;
  u8 tmp_1;
  u8 tmp_0;
  int tmp_3;
  
#line 796 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 801 
  type = & ((adapter->dcb)->cfg)->type[1];
  
#line 802 
  tmp_2 = (unsigned char)0U;
  
#line 802 
  *up_tc_map = tmp_2;
  
#line 802 
  tmp_1 = tmp_2;
  
#line 802 
  *bw_per = tmp_1;
  
#line 802 
  tmp_0 = tmp_1;
  
#line 802 
  *pgid = tmp_0;
  
#line 802 
  *prio = tmp_0;
  
#line 804 
  tmp_3 = constant_test_bit(0L,(unsigned long const volatile *)(& (adapter->dcb)->state));
  
#line 804 
  if (tmp_3 == 0) 
#line 806 
                  goto return_label;
  else 
    
#line 805 
    if (! type->tc_param_valid) 
#line 806 
                                goto return_label; else ;
  
#line 808 
  if ((unsigned int)tc > 7U) 
#line 809 
                             goto return_label; else ;
  
#line 811 
  tc_cfg = & type->tc_cfg[tc];
  
#line 812 
  if (! tc_cfg->valid) 
#line 813 
                       goto return_label; else ;
  
#line 815 
  *pgid = tc_cfg->pgid;
  
#line 816 
  *prio = (unsigned char)tc_cfg->prio_type;
  
#line 817 
  *up_tc_map = tc_cfg->up_tc_map;
  
#line 818 
  pg = *pgid;
  
#line 820 
  i = (unsigned char)0U;
  
#line 820 
  cnt = (unsigned char)0U;
  
#line 820 
  goto ldv_54101;
  ldv_54100: 
#line 821 
  ;
  
#line 821 
  temp = & type->tc_cfg[(int)i];
  
#line 822 
  if ((int)temp->valid != 0 && (int)temp->pgid == (int)pg) 
#line 823 
                                                           cnt = (u8)((int)cnt + 1); else ;
  
#line 820 
  i = (u8)((int)i + 1);
  ldv_54101: 
#line 821 
  ;
  
#line 820 
  if ((unsigned int)i <= 7U) 
#line 822 
                             goto ldv_54100; else 
#line 825 
                                                  goto ldv_54102;
  ldv_54102: 
#line 826 
  ;
  
#line 826 
  tc_cfg->bwg_percent = (unsigned char)(100 / (int)cnt);
  
#line 827 
  *bw_per = tc_cfg->bwg_percent;
  return_label: 
#line 828 
                return;
}


#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_get_pg_bwg_cfg_tx(struct net_device *netdev, int pgid, u8 *bw_pct)
{
  struct qlcnic_dcb_pg_cfg *pgcfg;
  struct qlcnic_dcb_cee *type;
  int tmp_0;
  
#line 833 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 837 
  *bw_pct = (unsigned char)0U;
  
#line 838 
  type = & ((adapter->dcb)->cfg)->type[1];
  
#line 840 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& (adapter->dcb)->state));
  
#line 840 
  if (tmp_0 == 0) 
#line 842 
                  goto return_label;
  else 
    
#line 841 
    if (! type->tc_param_valid) 
#line 842 
                                goto return_label; else ;
  
#line 844 
  if ((unsigned int)pgid > 7U) 
#line 845 
                               goto return_label; else ;
  
#line 847 
  pgcfg = & type->pg_cfg[pgid];
  
#line 848 
  if (! pgcfg->valid) 
#line 849 
                      goto return_label; else ;
  
#line 851 
  *bw_pct = pgcfg->total_bw_percent;
  return_label: 
#line 852 
                return;
}


#line 854  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static void qlcnic_dcb_get_pfc_cfg(struct net_device *netdev, int prio, u8 *setting)
{
  struct qlcnic_dcb_tc_cfg *tc_cfg;
  struct qlcnic_dcb_cee *type;
  u8 i;
  int tmp_0;
  
#line 857 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 859 
  u8 val = (unsigned char)(1 << prio);
  
#line 863 
  *setting = (unsigned char)0U;
  
#line 864 
  type = & ((adapter->dcb)->cfg)->type[1];
  
#line 866 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& (adapter->dcb)->state));
  
#line 866 
  if (tmp_0 == 0) 
#line 868 
                  goto return_label;
  else 
    
#line 867 
    if (! type->pfc_mode_enable) 
#line 868 
                                 goto return_label; else ;
  
#line 870 
  i = (unsigned char)0U;
  
#line 870 
  goto ldv_54123;
  ldv_54122: 
#line 871 
  ;
  
#line 871 
  tc_cfg = & type->tc_cfg[(int)i];
  
#line 872 
  if (! tc_cfg->valid) 
#line 873 
                       goto ldv_54121; else ;
  
#line 875 
  if ((unsigned int)((int)tc_cfg->up_tc_map & (int)val) != 0U && (int)tc_cfg->prio_cfg[prio].valid != 0) 
    
#line 876 
    *setting = (unsigned char)tc_cfg->prio_cfg[prio].pfc_type; else ;
  ldv_54121: 
#line 877 
  ;
  
#line 870 
  i = (u8)((int)i + 1);
  ldv_54123: 
#line 871 
  ;
  
#line 870 
  if ((unsigned int)i <= 7U) 
#line 872 
                             goto ldv_54122; else 
#line 875 
                                                  goto ldv_54124;
  ldv_54124: 
#line 876 
  ;
  return_label: 
#line 877 
                return;
}


#line 880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static u8 qlcnic_dcb_get_capability(struct net_device *netdev, int capid, u8 *cap)
{
  u8 __retres;
  int tmp_0;
  
#line 883 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 885 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& (adapter->dcb)->state));
  
#line 885 
  if (tmp_0 == 0) {
    
#line 886 
    __retres = (unsigned char)0U;
    
#line 886 
    goto return_label;
  }
  else ;
  
#line 888 
  switch (capid) {
    case 2: 
#line 889 
    ;
    case 4: 
#line 890 
    ;
    case 3: 
#line 891 
    ;
    case 7: 
#line 892 
    ;
    
#line 893 
    *cap = (unsigned char)1U;
    
#line 894 
    goto ldv_54135;
    case 5: 
#line 895 
    ;
    case 6: 
#line 896 
    ;
    
#line 897 
    *cap = (unsigned char)128U;
    
#line 898 
    goto ldv_54135;
    case 9: 
#line 899 
    ;
    
#line 900 
    *cap = ((adapter->dcb)->cfg)->capability.dcb_capability;
    
#line 901 
    goto ldv_54135;
    default: 
#line 902 
    ;
    
#line 903 
    *cap = (unsigned char)0U;
  }
  ldv_54135: 
#line 906 
  ;
  
#line 906 
  __retres = (unsigned char)0U;
  return_label: 
#line 906 
                return __retres;
}


#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_dcb_get_num_tcs(struct net_device *netdev, int attr, u8 *num)
{
  int __retres;
  int tmp_0;
  
#line 911 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 912 
  struct qlcnic_dcb_cfg *cfg = (adapter->dcb)->cfg;
  
#line 914 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& (adapter->dcb)->state));
  
#line 914 
  if (tmp_0 == 0) {
    
#line 915 
    __retres = -22;
    
#line 915 
    goto return_label;
  }
  else ;
  
#line 917 
  switch (attr) {
    case 2: 
#line 918 
    ;
    
#line 919 
    *num = cfg->capability.max_ets_tc;
    
#line 920 
    __retres = 0;
    
#line 920 
    goto return_label;
    case 3: 
#line 921 
    ;
    
#line 922 
    *num = cfg->capability.max_pfc_tc;
    
#line 923 
    __retres = 0;
    
#line 923 
    goto return_label;
    default: 
#line 924 
    ;
    
#line 925 
    __retres = -22;
    
#line 925 
    goto return_label;
  }
  return_label: 
#line 917 
                return __retres;
}


#line 929  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_dcb_get_app(struct net_device *netdev, u8 idtype, u16 id)
{
  int __retres;
  int tmp_0;
  u8 tmp_1;
  
#line 931 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 932 
  struct dcb_app app = {.selector = idtype, .priority = (unsigned char)0, .protocol = id};
  
#line 937 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& (adapter->dcb)->state));
  
#line 937 
  if (tmp_0 == 0) {
    
#line 938 
    __retres = -22;
    
#line 938 
    goto return_label;
  }
  else ;
  
#line 940 
  tmp_1 = dcb_getapp(netdev,& app);
  
#line 940 
  __retres = (int)tmp_1;
  return_label: 
#line 940 
                return __retres;
}


#line 943  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static u8 qlcnic_dcb_get_pfc_state(struct net_device *netdev)
{
  u8 __retres;
  int tmp_0;
  
#line 945 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 946 
  struct qlcnic_dcb *dcb = adapter->dcb;
  
#line 948 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& dcb->state));
  
#line 948 
  if (tmp_0 == 0) {
    
#line 949 
    __retres = (unsigned char)0U;
    
#line 949 
    goto return_label;
  }
  else ;
  
#line 951 
  __retres = (unsigned char)(dcb->cfg)->type[1].pfc_mode_enable;
  return_label: 
#line 951 
                return __retres;
}


#line 954  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static u8 qlcnic_dcb_get_dcbx(struct net_device *netdev)
{
  u8 __retres;
  int tmp_0;
  
#line 956 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 957 
  struct qlcnic_dcb_cfg *cfg = (adapter->dcb)->cfg;
  
#line 959 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& (adapter->dcb)->state));
  
#line 959 
  if (tmp_0 == 0) {
    
#line 960 
    __retres = (unsigned char)0U;
    
#line 960 
    goto return_label;
  }
  else ;
  
#line 962 
  __retres = cfg->capability.dcb_capability;
  return_label: 
#line 962 
                return __retres;
}


#line 965  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static u8 qlcnic_dcb_get_feat_cfg(struct net_device *netdev, int fid, u8 *flag)
{
  u8 __retres;
  struct qlcnic_dcb_cee *type;
  int tmp_0;
  
#line 967 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 970 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& (adapter->dcb)->state));
  
#line 970 
  if (tmp_0 == 0) {
    
#line 971 
    __retres = (unsigned char)1U;
    
#line 971 
    goto return_label;
  }
  else ;
  
#line 973 
  type = & ((adapter->dcb)->cfg)->type[1];
  
#line 974 
  *flag = (unsigned char)0U;
  
#line 976 
  switch (fid) {
    case 2: 
#line 977 
    ;
    
#line 978 
    if ((int)type->tc_param_valid != 0) 
#line 979 
                                        *flag = (unsigned char)((unsigned int)*flag | 2U); else 
                                                                    
#line 981 
                                                                    *flag = (unsigned char)((unsigned int)*flag | 1U);
    
#line 982 
    goto ldv_54175;
    case 3: 
#line 983 
    ;
    
#line 984 
    if ((int)type->pfc_mode_enable != 0) {
      
#line 985 
      if (type->tc_cfg[0].prio_cfg[0].pfc_type != (unsigned int)QLC_PFC_DISABLED) 
        
#line 986 
        *flag = (unsigned char)((unsigned int)*flag | 2U); else ;
    }
    else 
#line 988 
         *flag = (unsigned char)((unsigned int)*flag | 1U);
    
#line 990 
    goto ldv_54175;
    case 4: 
#line 991 
    ;
    
#line 992 
    *flag = (unsigned char)((unsigned int)*flag | 2U);
    
#line 993 
    goto ldv_54175;
    default: 
#line 994 
    ;
    
#line 995 
    netdev_err((struct net_device const *)netdev,"Invalid Feature ID %d\n",fid);
    
#line 996 
    __retres = (unsigned char)1U;
    
#line 996 
    goto return_label;
  }
  ldv_54175: 
#line 999 
  ;
  
#line 999 
  __retres = (unsigned char)0U;
  return_label: 
#line 999 
                return __retres;
}


#line 1003  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
__inline static void qlcnic_dcb_get_pg_tc_cfg_rx(struct net_device *netdev, int prio, u8 *prio_type, u8 *pgid, u8 *bw_pct, u8 *up_map)
{
  u8 tmp_1;
  u8 tmp_0;
  u8 tmp;
  
#line 1006 
  tmp_1 = (unsigned char)0U;
  
#line 1006 
  *up_map = tmp_1;
  
#line 1006 
  tmp_0 = tmp_1;
  
#line 1006 
  *bw_pct = tmp_0;
  
#line 1006 
  tmp = tmp_0;
  
#line 1006 
  *pgid = tmp;
  
#line 1006 
  *prio_type = tmp;
  
#line 1007 
  return;
}


#line 1010  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
__inline static void qlcnic_dcb_get_pg_bwg_cfg_rx(struct net_device *netdev, int pgid, u8 *bw_pct)
{
  
#line 1012 
  *bw_pct = (unsigned char)0U;
  
#line 1013 
  return;
}


#line 1015  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_dcb_peer_app_info(struct net_device *netdev, struct dcb_peer_app_info *info, u16 *app_count)
{
  int __retres;
  struct qlcnic_dcb_cee *peer;
  int i;
  int tmp_0;
  
#line 1019 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1023 
  memset((void *)info,0,2UL);
  
#line 1024 
  *app_count = (unsigned short)0U;
  
#line 1026 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& (adapter->dcb)->state));
  
#line 1026 
  if (tmp_0 == 0) {
    
#line 1027 
    __retres = 0;
    
#line 1027 
    goto return_label;
  }
  else ;
  
#line 1029 
  peer = & ((adapter->dcb)->cfg)->type[2];
  
#line 1031 
  i = 0;
  
#line 1031 
  goto ldv_54201;
  ldv_54200: 
#line 1032 
  ;
  
#line 1032 
  if ((int)peer->app[i].valid != 0) 
#line 1033 
                                    *app_count = (u16)((int)*app_count + 1); else ;
  
#line 1031 
  i += 1;
  ldv_54201: 
#line 1032 
  ;
  
#line 1031 
  if (i <= 7) 
#line 1033 
              goto ldv_54200; else 
#line 1036 
                                   goto ldv_54202;
  ldv_54202: 
#line 1037 
  ;
  
#line 1036 
  __retres = 0;
  return_label: 
#line 1036 
                return __retres;
}


#line 1039  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_dcb_peer_app_table(struct net_device *netdev, struct dcb_app *table)
{
  int __retres;
  struct qlcnic_dcb_cee *peer;
  struct qlcnic_dcb_app *app;
  int i;
  int j;
  int tmp_0;
  int tmp_1;
  
#line 1042 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1047 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& (adapter->dcb)->state));
  
#line 1047 
  if (tmp_0 == 0) {
    
#line 1048 
    __retres = 0;
    
#line 1048 
    goto return_label;
  }
  else ;
  
#line 1050 
  peer = & ((adapter->dcb)->cfg)->type[2];
  
#line 1052 
  i = 0;
  
#line 1052 
  j = 0;
  
#line 1052 
  goto ldv_54214;
  ldv_54213: 
#line 1053 
  ;
  
#line 1053 
  app = & peer->app[i];
  
#line 1054 
  if (! app->valid) 
#line 1055 
                    goto ldv_54212; else ;
  
#line 1057 
  (table + j)->selector = (unsigned char)app->selector;
  
#line 1058 
  (table + j)->priority = app->priority;
  
#line 1059 
  tmp_1 = j;
  
#line 1059 
  j += 1;
  
#line 1059 
  (table + tmp_1)->protocol = app->protocol;
  ldv_54212: 
#line 1060 
  ;
  
#line 1052 
  i += 1;
  ldv_54214: 
#line 1053 
  ;
  
#line 1052 
  if (i <= 7) 
#line 1054 
              goto ldv_54213; else 
#line 1057 
                                   goto ldv_54215;
  ldv_54215: 
#line 1058 
  ;
  
#line 1062 
  __retres = 0;
  return_label: 
#line 1062 
                return __retres;
}


#line 1065  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_dcb_cee_peer_get_pg(struct net_device *netdev, struct cee_pg *pg)
{
  int __retres;
  struct qlcnic_dcb_cee *peer;
  u8 i;
  u8 j;
  u8 k;
  u8 map;
  int tmp_0;
  
#line 1068 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1072 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& (adapter->dcb)->state));
  
#line 1072 
  if (tmp_0 == 0) {
    
#line 1073 
    __retres = 0;
    
#line 1073 
    goto return_label;
  }
  else ;
  
#line 1075 
  peer = & ((adapter->dcb)->cfg)->type[2];
  
#line 1077 
  i = (unsigned char)0U;
  
#line 1077 
  j = (unsigned char)0U;
  
#line 1077 
  goto ldv_54231;
  ldv_54230: 
#line 1078 
  ;
  
#line 1078 
  if (! peer->pg_cfg[(int)i].valid) 
#line 1079 
                                    goto ldv_54226; else ;
  
#line 1081 
  pg->pg_bw[(int)j] = peer->pg_cfg[(int)i].total_bw_percent;
  
#line 1083 
  k = (unsigned char)0U;
  
#line 1083 
  goto ldv_54229;
  ldv_54228: 
#line 1084 
  ;
  
#line 1084 
  if ((int)peer->tc_cfg[(int)i].valid != 0 && (int)peer->tc_cfg[(int)i].pgid == (int)i) {
    u8 tmp_1;
    
#line 1086 
    map = peer->tc_cfg[(int)i].up_tc_map;
    
#line 1087 
    tmp_1 = j;
    
#line 1087 
    j = (u8)((int)j + 1);
    
#line 1087 
    pg->prio_pg[(int)tmp_1] = map;
    
#line 1088 
    goto ldv_54227;
  }
  else ;
  
#line 1083 
  k = (u8)((int)k + 1);
  ldv_54229: 
#line 1084 
  ;
  
#line 1083 
  if ((unsigned int)k <= 7U) 
#line 1085 
                             goto ldv_54228; else 
#line 1088 
                                                  goto ldv_54227;
  ldv_54227: 
#line 1089 
  ;
  ldv_54226: 
#line 1090 
  ;
  
#line 1077 
  i = (u8)((int)i + 1);
  ldv_54231: 
#line 1078 
  ;
  
#line 1077 
  if ((unsigned int)i <= 7U) 
#line 1079 
                             goto ldv_54230; else 
#line 1082 
                                                  goto ldv_54232;
  ldv_54232: 
#line 1083 
  ;
  
#line 1093 
  __retres = 0;
  return_label: 
#line 1093 
                return __retres;
}


#line 1096  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static int qlcnic_dcb_cee_peer_get_pfc(struct net_device *netdev, struct cee_pfc *pfc)
{
  int __retres;
  struct qlcnic_dcb_tc_cfg *tc;
  struct qlcnic_dcb_cee *peer;
  u8 i;
  u8 setting;
  u8 prio;
  int tmp_0;
  int tmp_1;
  
#line 1099 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1100 
  struct qlcnic_dcb_cfg *cfg = (adapter->dcb)->cfg;
  
#line 1105 
  pfc->pfc_en = (unsigned char)0U;
  
#line 1107 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& (adapter->dcb)->state));
  
#line 1107 
  if (tmp_0 == 0) {
    
#line 1108 
    __retres = 0;
    
#line 1108 
    goto return_label;
  }
  else ;
  
#line 1110 
  peer = & cfg->type[2];
  
#line 1112 
  i = (unsigned char)0U;
  
#line 1112 
  goto ldv_54245;
  ldv_54244: 
#line 1113 
  ;
  
#line 1113 
  tc = & peer->tc_cfg[(int)i];
  
#line 1114 
  tmp_1 = qlcnic_dcb_prio_count((unsigned char)((int)tc->up_tc_map));
  
#line 1114 
  prio = (unsigned char)tmp_1;
  
#line 1116 
  setting = (unsigned char)0U;
  
#line 1117 
  qlcnic_dcb_get_pfc_cfg(netdev,(int)prio,& setting);
  
#line 1118 
  if ((unsigned int)setting != 0U) 
#line 1119 
                                   pfc->pfc_en = (unsigned char)((int)pfc->pfc_en | (1 << (int)i)); else ;
  
#line 1112 
  i = (u8)((int)i + 1);
  ldv_54245: 
#line 1113 
  ;
  
#line 1112 
  if ((unsigned int)i <= 7U) 
#line 1114 
                             goto ldv_54244; else 
#line 1117 
                                                  goto ldv_54246;
  ldv_54246: 
#line 1118 
  ;
  
#line 1122 
  pfc->tcs_supported = cfg->capability.max_pfc_tc;
  
#line 1124 
  __retres = 0;
  return_label: 
#line 1124 
                return __retres;
}


#line 1127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_dcb.c"
static struct dcbnl_rtnl_ops const qlcnic_dcbnl_ops = {.ieee_getets = (int (*)(struct net_device *, struct ieee_ets *))0, .ieee_setets = (int (*)(struct net_device *, struct ieee_ets *))0, .ieee_getmaxrate = (int (*)(struct net_device *, struct ieee_maxrate *))0, .ieee_setmaxrate = (int (*)(struct net_device *, struct ieee_maxrate *))0, .ieee_getqcn = (int (*)(struct net_device *, struct ieee_qcn *))0, .ieee_setqcn = (int (*)(struct net_device *, struct ieee_qcn *))0, .ieee_getqcnstats = (int (*)(struct net_device *, struct ieee_qcn_stats *))0, .ieee_getpfc = (int (*)(struct net_device *, struct ieee_pfc *))0, .ieee_setpfc = (int (*)(struct net_device *, struct ieee_pfc *))0, .ieee_getapp = (int (*)(struct net_device *, struct dcb_app *))0, .ieee_setapp = (int (*)(struct net_device *, struct dcb_app *))0, .ieee_delapp = (int (*)(struct net_device *, struct dcb_app *))0, .ieee_peer_getets = (int (*)(struct net_device *, struct ieee_ets *))0, .ieee_peer_getpfc = (int (*)(struct net_device *, struct ieee_pfc *))0, .getstate = & qlcnic_dcb_get_state, .setstate = (u8 (*)(struct net_device *, u8 ))0, .getpermhwaddr = & qlcnic_dcb_get_perm_hw_addr, .setpgtccfgtx = (void (*)(struct net_device *, int , u8 , u8 , u8 , u8 ))0, .setpgbwgcfgtx = (void (*)(struct net_device *, int , u8 ))0, .setpgtccfgrx = (void (*)(struct net_device *, int , u8 , u8 , u8 , u8 ))0, .setpgbwgcfgrx = (void (*)(struct net_device *, int , u8 ))0, .getpgtccfgtx = & qlcnic_dcb_get_pg_tc_cfg_tx, .getpgbwgcfgtx = & qlcnic_dcb_get_pg_bwg_cfg_tx, .getpgtccfgrx = & qlcnic_dcb_get_pg_tc_cfg_rx, .getpgbwgcfgrx = & qlcnic_dcb_get_pg_bwg_cfg_rx, .setpfccfg = (void (*)(struct net_device *, int , u8 ))0, .getpfccfg = & qlcnic_dcb_get_pfc_cfg, .setall = (u8 (*)(struct net_device *))0, .getcap = & qlcnic_dcb_get_capability, .getnumtcs = & qlcnic_dcb_get_num_tcs, .setnumtcs = (int (*)(struct net_device *, int , u8 ))0, .getpfcstate = & qlcnic_dcb_get_pfc_state, .setpfcstate = (void (*)(struct net_device *, u8 ))0, .getbcncfg = (void (*)(struct net_device *, int , u32 *))0, .setbcncfg = (void (*)(struct net_device *, int , u32 ))0, .getbcnrp = (void (*)(struct net_device *, int , u8 *))0, .setbcnrp = (void (*)(struct net_device *, int , u8 ))0, .setapp = (int (*)(struct net_device *, u8 , u16 , u8 ))0, .getapp = & qlcnic_dcb_get_app, .getfeatcfg = & qlcnic_dcb_get_feat_cfg, .setfeatcfg = (u8 (*)(struct net_device *, int , u8 ))0, .getdcbx = & qlcnic_dcb_get_dcbx, .setdcbx = (u8 (*)(struct net_device *, u8 ))0, .peer_getappinfo = & qlcnic_dcb_peer_app_info, .peer_getapptable = & qlcnic_dcb_peer_app_table, .cee_peer_getpg = & qlcnic_dcb_cee_peer_get_pg, .cee_peer_getpfc = & qlcnic_dcb_cee_peer_get_pfc};

#line 510  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_dcb.c.aux"
static void *kzalloc_4(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 513 
  tmp = ldv_kzalloc(size,flags);
  
#line 513 
  return tmp;
}


#line 766  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_dcb.c.aux"
static bool ldv_queue_delayed_work_75(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 770 
  tmp = ldv_emg_queue_delayed_work(wq,dwork,delay);
  
#line 770 
  __retres = tmp != 0;
  
#line 770 
  return __retres;
}


#line 774  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_dcb.c.aux"
static bool ldv_queue_delayed_work_76(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 778 
  tmp = ldv_emg_queue_delayed_work(wq,dwork,delay);
  
#line 778 
  __retres = tmp != 0;
  
#line 778 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const *v)
{
  int __retres;
  int const volatile *tmp;
  {
    
#line 27 
    int const __var = 0;
    
#line 27 
    tmp = (int const volatile *)(& v->counter);
  }
  
#line 27 
  __retres = *tmp;
  
#line 27 
  return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  
#line 39 
  v->counter = i;
  
#line 40 
  return;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_1(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 358 
static void ldv_spin_lock_91(spinlock_t *lock);


#line 362 
static void ldv_spin_lock_93(spinlock_t *lock);


#line 366 
static void ldv_spin_lock_95(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_98(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_1(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 407 
static void ldv_spin_unlock_92(spinlock_t *lock);


#line 411 
static void ldv_spin_unlock_94(spinlock_t *lock);


#line 415 
static void ldv_spin_unlock_97(spinlock_t *lock);


#line 419 
static void ldv_spin_unlock_99(spinlock_t *lock);


#line 423 
static void ldv_spin_unlock_100(spinlock_t *lock);


#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 468 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 469 
  return;
}


#line 498 
static void ldv_spin_unlock_irqrestore_76(spinlock_t *lock, unsigned long flags);


#line 502 
static void ldv_spin_unlock_irqrestore_82(spinlock_t *lock, unsigned long flags);


#line 506 
static void ldv_spin_unlock_irqrestore_86(spinlock_t *lock, unsigned long flags);


#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_mutex_lock_87_0(struct mutex *ldv_func_arg1);


#line 74 
static void ldv___ldv_spin_lock_75(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_81(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_85(spinlock_t *ldv_func_arg1);


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
void __init_waitqueue_head(wait_queue_head_t *, char const *, struct lock_class_key *);


#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
static void ldv_mutex_unlock_88_0(struct mutex *ldv_func_arg1);


#line 197 
static void ldv_mutex_unlock_89(struct mutex *ldv_func_arg1);


#line 201 
static void ldv_mutex_unlock_90_0(struct mutex *ldv_func_arg1);


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/completion.h"
__inline static void init_completion(struct completion *x)
{
  
#line 75 
  x->done = 0U;
  {
    struct lock_class_key __key;
    
#line 76 
    __init_waitqueue_head(& x->wait,"&x->wait",& __key);
  }
  
#line 78 
  return;
}


#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/completion.h"
__inline static void reinit_completion(struct completion *x)
{
  
#line 88 
  x->done = 0U;
  
#line 89 
  return;
}


#line 95 
unsigned long wait_for_completion_timeout(struct completion *, unsigned long);


#line 106 
void complete(struct completion *);


#line 436  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void flush_workqueue(struct workqueue_struct *);


#line 490 
static bool ldv_queue_work_96(struct workqueue_struct *wq, struct work_struct *work);


#line 505 
static bool ldv_queue_delayed_work_80(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);


#line 509 
static bool ldv_queue_delayed_work_83(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);


#line 513 
static bool ldv_queue_delayed_work_84(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay);


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
int ___ratelimit(struct ratelimit_state *, char const *);


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kcalloc_1(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc_5(size_t size, gfp_t flags);


#line 837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pci_find_ext_capability(struct pci_dev *, int);


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/delay.h"
void __const_udelay(unsigned long);


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static void ethtool_cmd_speed_set(struct ethtool_cmd *ep, __u32 speed)
{
  
#line 117 
  ep->speed = (unsigned short)speed;
  
#line 118 
  ep->speed_hi = (unsigned short)(speed >> 16);
  
#line 119 
  return;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static __u32 ethtool_cmd_speed(struct ethtool_cmd const *ep)
{
  __u32 __retres;
  
#line 123 
  __retres = (unsigned int)(((int)ep->speed_hi << 16) | (int)ep->speed);
  
#line 123 
  return __retres;
}


#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hardirq.h"
void synchronize_irq(unsigned int);


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_78(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 145 
static int ldv_request_irq_79(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 157 
static void ldv_free_irq_77_0(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 3830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void netdev_warn(struct net_device const *, char const * , ...);


#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.h"
int qlcnic_83xx_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd);


#line 538 
int qlcnic_83xx_setup_intr(struct qlcnic_adapter *adapter);


#line 539 
void qlcnic_83xx_get_func_no(struct qlcnic_adapter *adapter);


#line 540 
int qlcnic_83xx_cam_lock(struct qlcnic_adapter *adapter);


#line 541 
void qlcnic_83xx_cam_unlock(struct qlcnic_adapter *adapter);


#line 545 
void qlcnic_83xx_write_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size);


#line 546 
void qlcnic_83xx_read_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size);


#line 547 
int qlcnic_83xx_rd_reg_indirect(struct qlcnic_adapter *adapter, ulong addr, int *err);


#line 549 
int qlcnic_83xx_nic_set_promisc(struct qlcnic_adapter *adapter, u32 mode);


#line 550 
int qlcnic_83xx_config_hw_lro(struct qlcnic_adapter *adapter, int mode);


#line 551 
int qlcnic_83xx_config_rss(struct qlcnic_adapter *adapter, int enable);


#line 552 
void qlcnic_83xx_change_l2_filter(struct qlcnic_adapter *adapter, u64 *addr, u16 vlan_id);


#line 553 
int qlcnic_83xx_get_pci_info(struct qlcnic_adapter *adapter, struct qlcnic_pci_info *pci_info);


#line 554 
int qlcnic_83xx_set_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *nic);


#line 564 
int qlcnic_83xx_create_rx_ctx(struct qlcnic_adapter *adapter);


#line 565 
int qlcnic_83xx_create_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx, int ring);


#line 567 
void qlcnic_83xx_del_rx_ctx(struct qlcnic_adapter *adapter);


#line 568 
void qlcnic_83xx_del_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring);


#line 570 
int qlcnic_83xx_get_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info, u8 func_id);


#line 571 
int qlcnic_83xx_setup_link_event(struct qlcnic_adapter *adapter, int enable);


#line 573 
int qlcnic_83xx_config_intrpt(struct qlcnic_adapter *adapter, bool op_type);


#line 574 
int qlcnic_83xx_sre_macaddr_change(struct qlcnic_adapter *adapter, u8 *addr, u16 vlan_id, u8 op);


#line 575 
int qlcnic_83xx_get_mac_address(struct qlcnic_adapter *adapter, u8 *mac, u8 function);


#line 576 
int qlcnic_83xx_alloc_mbx_args(struct qlcnic_cmd_args *mbx, struct qlcnic_adapter *adapter, u32 type);


#line 581 
int qlcnic_83xx_config_intr_coal(struct qlcnic_adapter *adapter, struct ethtool_coalesce *ethcoal);


#line 585 
void qlcnic_83xx_enable_mbx_interrupt(struct qlcnic_adapter *adapter);


#line 586 
void qlcnic_83xx_disable_mbx_intr(struct qlcnic_adapter *adapter);


#line 587 
irqreturn_t qlcnic_83xx_clear_legacy_intr(struct qlcnic_adapter *adapter);


#line 596 
void qlcnic_83xx_idc_aen_work(struct work_struct *work);


#line 597 
void qlcnic_83xx_config_ipaddr(struct qlcnic_adapter *adapter, __be32 ip, int mode);


#line 606 
int qlcnic_83xx_read_flash_mfg_id(struct qlcnic_adapter *adapter);


#line 607 
int qlcnic_83xx_read_flash_descriptor_table(struct qlcnic_adapter *adapter);


#line 608 
int qlcnic_83xx_flash_read32(struct qlcnic_adapter *adapter, u32 flash_addr, u8 *p_data, int count);


#line 613 
void qlcnic_83xx_idc_poll_dev_state(struct work_struct *work);


#line 614 
void qlcnic_83xx_idc_exit(struct qlcnic_adapter *adapter);


#line 628 
void qlcnic_83xx_get_stats(struct qlcnic_adapter *adapter, u64 *data);


#line 629 
int qlcnic_83xx_get_settings(struct qlcnic_adapter *adapter, struct ethtool_cmd *ecmd);


#line 630 
int qlcnic_83xx_set_settings(struct qlcnic_adapter *adapter, struct ethtool_cmd *ecmd);


#line 631 
void qlcnic_83xx_get_pauseparam(struct qlcnic_adapter *adapter, struct ethtool_pauseparam *pause);


#line 633 
int qlcnic_83xx_set_pauseparam(struct qlcnic_adapter *adapter, struct ethtool_pauseparam *pause);


#line 635 
int qlcnic_83xx_test_link(struct qlcnic_adapter *adapter);


#line 636 
int qlcnic_83xx_reg_test(struct qlcnic_adapter *adapter);


#line 637 
int qlcnic_83xx_get_regs_len(struct qlcnic_adapter *adapter);


#line 638 
int qlcnic_83xx_get_registers(struct qlcnic_adapter *adapter, u32 *regs_buff);


#line 639 
int qlcnic_83xx_loopback_test(struct net_device *netdev, u8 mode);


#line 640 
int qlcnic_83xx_interrupt_test(struct net_device *netdev);


#line 641 
int qlcnic_83xx_set_led(struct net_device *netdev, enum ethtool_phys_id_state state);


#line 642 
int qlcnic_83xx_flash_test(struct qlcnic_adapter *adapter);


#line 647 
int qlcnic_83xx_idc_init(struct qlcnic_adapter *adapter);


#line 648 
int qlcnic_83xx_idc_reattach_driver(struct qlcnic_adapter *adapter);


#line 651 
void qlcnic_83xx_aer_stop_poll_work(struct qlcnic_adapter *adapter);


#line 652 
int qlcnic_83xx_aer_reset(struct qlcnic_adapter *adapter);


#line 653 
void qlcnic_83xx_aer_start_poll_work(struct qlcnic_adapter *adapter);


#line 1640  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
int qlcnic_do_lb_test(struct qlcnic_adapter *adapter, u8 mode);


#line 1676 
void qlcnic_dump_mbx(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd);


#line 1711 
int qlcnic_get_pci_func_type(struct qlcnic_adapter *adapter, u16 type, u16 *nic, u16 *fcoe, u16 *iscsi);


#line 1760 
int qlcnic_83xx_init_mailbox_work(struct qlcnic_adapter *adapter);


#line 1762 
void qlcnic_83xx_reinit_mbx_work(struct qlcnic_mailbox *mbx);


#line 2169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_83xx_enable_tx_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  
#line 2172 
  writel(0U,(void volatile *)tx_ring->crb_intr_mask);
  
#line 2173 
  return;
}


#line 2176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_83xx_disable_tx_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  
#line 2179 
  writel(1U,(void volatile *)tx_ring->crb_intr_mask);
  
#line 2180 
  return;
}


#line 2184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_83xx_enable_sds_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_sds_ring *sds_ring)
{
  
#line 2187 
  writel(0U,(void volatile *)sds_ring->crb_intr_mask);
  
#line 2188 
  return;
}


#line 2192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_83xx_disable_sds_intr(struct qlcnic_adapter *adapter, struct qlcnic_host_sds_ring *sds_ring)
{
  
#line 2195 
  writel(1U,(void volatile *)sds_ring->crb_intr_mask);
  
#line 2196 
  return;
}


#line 2266  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_get_diag_lock(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 2268 
  tmp = test_and_set_bit(13L,(unsigned long volatile *)(& adapter->state));
  
#line 2268 
  return tmp;
}


#line 2271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_release_diag_lock(struct qlcnic_adapter *adapter)
{
  
#line 2273 
  set_bit(13L,(unsigned long volatile *)(& adapter->state));
  
#line 2274 
  return;
}


#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
u32 const qlcnic_83xx_reg_tbl[23U];


#line 16 
u32 const qlcnic_83xx_ext_reg_tbl[43U];


#line 191 
void qlcnic_sriov_vf_set_ops(struct qlcnic_adapter *adapter);


#line 193 
void qlcnic_sriov_handle_bc_event(struct qlcnic_adapter *adapter, u32 event);


#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void __qlcnic_83xx_process_aen(struct qlcnic_adapter *adapter);


#line 17 
static int qlcnic_83xx_clear_lb_mode(struct qlcnic_adapter *adapter, u8 mode);


#line 18 
static void qlcnic_83xx_configure_mac(struct qlcnic_adapter *adapter, u8 *mac, u8 type, struct qlcnic_cmd_args *cmd);


#line 20 
static int qlcnic_83xx_get_port_config(struct qlcnic_adapter *adapter);


#line 21 
static irqreturn_t qlcnic_83xx_handle_aen(int irq, void *data);


#line 22 
static pci_ers_result_t qlcnic_83xx_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state);


#line 24 
static int qlcnic_83xx_set_port_config(struct qlcnic_adapter *adapter);


#line 25 
static pci_ers_result_t qlcnic_83xx_io_slot_reset(struct pci_dev *pdev);


#line 26 
static void qlcnic_83xx_io_resume(struct pci_dev *pdev);


#line 27 
static int qlcnic_83xx_set_lb_mode(struct qlcnic_adapter *adapter, u8 mode);


#line 28 
static void qlcnic_83xx_set_mac_filter_count(struct qlcnic_adapter *adapter);


#line 29 
static int qlcnic_83xx_resume(struct qlcnic_adapter *adapter);


#line 30 
static int qlcnic_83xx_shutdown(struct pci_dev *pdev);


#line 31 
static void qlcnic_83xx_get_beacon_state(struct qlcnic_adapter *adapter);


#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static struct qlcnic_mailbox_metadata const qlcnic_83xx_mbx_tbl[53U] = {{.cmd = 1U, .in_args = 6U, .out_args = 1U}, {.cmd = 2U, .in_args = 18U, .out_args = 34U}, {.cmd = 7U, .in_args = 136U, .out_args = 27U}, {.cmd = 8U, .in_args = 2U, .out_args = 1U}, {.cmd = 9U, .in_args = 54U, .out_args = 18U}, {.cmd = 10U, .in_args = 2U, .out_args = 1U}, {.cmd = 13U, .in_args = 2U, .out_args = 1U}, {.cmd = 17U, .in_args = 22U, .out_args = 12U}, {.cmd = 18U, .in_args = 3U, .out_args = 1U}, {.cmd = 19U, .in_args = 4U, .out_args = 2U}, {.cmd = 20U, .in_args = 5U, .out_args = 1U}, {.cmd = 21U, .in_args = 4U, .out_args = 1U}, {.cmd = 22U, .in_args = 4U, .out_args = 2U}, {.cmd = 23U, .in_args = 4U, .out_args = 1U}, {.cmd = 24U, .in_args = 4U, .out_args = 2U}, {.cmd = 25U, .in_args = 4U, .out_args = 2U}, {.cmd = 31U, .in_args = 4U, .out_args = 3U}, {.cmd = 32U, .in_args = 1U, .out_args = 129U}, {.cmd = 33U, .in_args = 2U, .out_args = 19U}, {.cmd = 34U, .in_args = 32U, .out_args = 1U}, {.cmd = 36U, .in_args = 4U, .out_args = 3U}, {.cmd = 37U, .in_args = 4U, .out_args = 1U}, {.cmd = 38U, .in_args = 4U, .out_args = 3U}, {.cmd = 39U, .in_args = 4U, .out_args = 1U}, {.cmd = 40U, .in_args = 4U, .out_args = 1U}, {.cmd = 41U, .in_args = 4U, .out_args = 3U}, {.cmd = 42U, .in_args = 5U, .out_args = 1U}, {.cmd = 46U, .in_args = 4U, .out_args = 1U}, {.cmd = 47U, .in_args = 1U, .out_args = 4U}, {.cmd = 48U, .in_args = 5U, .out_args = 5U}, {.cmd = 72U, .in_args = 2U, .out_args = 1U}, {.cmd = 69U, .in_args = 4U, .out_args = 3U}, {.cmd = 67U, .in_args = 6U, .out_args = 1U}, {.cmd = 65U, .in_args = 14U, .out_args = 1U}, {.cmd = 68U, .in_args = 2U, .out_args = 1U}, {.cmd = 73U, .in_args = 2U, .out_args = 1U}, {.cmd = 74U, .in_args = 2U, .out_args = 1U}, {.cmd = 15U, .in_args = 2U, .out_args = 80U}, {.cmd = 102U, .in_args = 2U, .out_args = 1U}, {.cmd = 103U, .in_args = 2U, .out_args = 2U}, {.cmd = 104U, .in_args = 2U, .out_args = 4U}, {.cmd = 99U, .in_args = 5U, .out_args = 1U}, {.cmd = 96U, .in_args = 3U, .out_args = 1U}, {.cmd = 97U, .in_args = 2U, .out_args = 1U}, {.cmd = 105U, .in_args = 5U, .out_args = 1U}, {.cmd = 106U, .in_args = 1U, .out_args = 5U}, {.cmd = 111U, .in_args = 4U, .out_args = 1U}, {.cmd = 11U, .in_args = 130U, .out_args = 26U}, {.cmd = 50U, .in_args = 4U, .out_args = 4U}, {.cmd = 49U, .in_args = 2U, .out_args = 1U}, {.cmd = 52U, .in_args = 1U, .out_args = 2U}, {.cmd = 53U, .in_args = 1U, .out_args = 50U}, {.cmd = 78U, .in_args = 2U, .out_args = 1U}};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
u32 const qlcnic_83xx_ext_reg_tbl[43U] = {14540U, 14576U, 14588U, 12344U, 12348U, 13660U, 13664U, 13668U, 4096U, 4608U, 4612U, 14208U, 14212U, 14216U, 14220U, 14224U, 14228U, 14232U, 14236U, 14240U, 14244U, 14248U, 14252U, 14256U, 14260U, 14264U, 14268U, 14272U, 14276U, 14280U, 14284U, 14288U, 14292U, 14296U, 14300U, 14304U, 14308U, 14320U, 14324U, 14440U, 14444U, 13572U, 13476U};

#line 169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
u32 const qlcnic_83xx_reg_tbl[23U] = {13480U, 13484U, 13488U, 13568U, 13608U, 13624U, 13632U, 13636U, 13640U, 13644U, 13604U, 13648U, 13652U, 13656U, 13724U, 13820U, 13904U, 14140U, 14260U, 13676U, 13680U, 14416U, 14420U};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static struct qlcnic_hardware_ops qlcnic_83xx_hw_ops = {.read_crb = & qlcnic_83xx_read_crb, .write_crb = & qlcnic_83xx_write_crb, .read_reg = & qlcnic_83xx_rd_reg_indirect, .write_reg = & qlcnic_83xx_wrt_reg_indirect, .get_ocm_win = (void (*)(struct qlcnic_hardware_context *))0, .get_mac_address = & qlcnic_83xx_get_mac_address, .setup_intr = & qlcnic_83xx_setup_intr, .alloc_mbx_args = & qlcnic_83xx_alloc_mbx_args, .mbx_cmd = & qlcnic_83xx_issue_cmd, .get_func_no = & qlcnic_83xx_get_func_no, .api_lock = & qlcnic_83xx_cam_lock, .api_unlock = & qlcnic_83xx_cam_unlock, .add_sysfs = & qlcnic_83xx_add_sysfs, .remove_sysfs = & qlcnic_83xx_remove_sysfs, .process_lb_rcv_ring_diag = & qlcnic_83xx_process_rcv_ring_diag, .create_rx_ctx = & qlcnic_83xx_create_rx_ctx, .create_tx_ctx = & qlcnic_83xx_create_tx_ctx, .del_rx_ctx = & qlcnic_83xx_del_rx_ctx, .del_tx_ctx = & qlcnic_83xx_del_tx_ctx, .setup_link_event = & qlcnic_83xx_setup_link_event, .get_nic_info = & qlcnic_83xx_get_nic_info, .get_pci_info = & qlcnic_83xx_get_pci_info, .set_nic_info = & qlcnic_83xx_set_nic_info, .change_macvlan = & qlcnic_83xx_sre_macaddr_change, .napi_enable = & qlcnic_83xx_napi_enable, .napi_disable = & qlcnic_83xx_napi_disable, .config_intr_coal = & qlcnic_83xx_config_intr_coal, .config_rss = & qlcnic_83xx_config_rss, .config_hw_lro = & qlcnic_83xx_config_hw_lro, .config_loopback = (int (*)(struct qlcnic_adapter *, u8 ))0, .clear_loopback = (int (*)(struct qlcnic_adapter *, u8 ))0, .config_promisc_mode = & qlcnic_83xx_nic_set_promisc, .change_l2_filter = & qlcnic_83xx_change_l2_filter, .get_board_info = & qlcnic_83xx_get_port_info, .set_mac_filter_count = & qlcnic_83xx_set_mac_filter_count, .free_mac_list = & qlcnic_82xx_free_mac_list, .read_phys_port_id = (int (*)(struct qlcnic_adapter *))0, .io_error_detected = & qlcnic_83xx_io_error_detected, .io_slot_reset = & qlcnic_83xx_io_slot_reset, .io_resume = & qlcnic_83xx_io_resume, .get_beacon_state = & qlcnic_83xx_get_beacon_state, .enable_sds_intr = & qlcnic_83xx_enable_sds_intr, .disable_sds_intr = & qlcnic_83xx_disable_sds_intr, .enable_tx_intr = & qlcnic_83xx_enable_tx_intr, .disable_tx_intr = & qlcnic_83xx_disable_tx_intr, .get_saved_state = & qlcnic_83xx_get_saved_state, .set_saved_state = & qlcnic_83xx_set_saved_state, .cache_tmpl_hdr_values = & qlcnic_83xx_cache_tmpl_hdr_values, .get_cap_size = & qlcnic_83xx_get_cap_size, .set_sys_info = & qlcnic_83xx_set_sys_info, .store_cap_mask = & qlcnic_83xx_store_cap_mask};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static struct qlcnic_nic_template qlcnic_83xx_ops = {.config_bridged_mode = & qlcnic_config_bridged_mode, .config_led = & qlcnic_config_led, .start_firmware = (int (*)(struct qlcnic_adapter *))0, .init_driver = (int (*)(struct qlcnic_adapter *))0, .request_reset = & qlcnic_83xx_idc_request_reset, .cancel_idc_work = & qlcnic_83xx_idc_exit, .napi_add = & qlcnic_83xx_napi_add, .napi_del = & qlcnic_83xx_napi_del, .config_ipaddr = & qlcnic_83xx_config_ipaddr, .clear_legacy_intr = & qlcnic_83xx_clear_legacy_intr, .shutdown = & qlcnic_83xx_shutdown, .resume = & qlcnic_83xx_resume};

#line 258  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_register_map(struct qlcnic_hardware_context *ahw)
{
  
#line 260 
  ahw->hw_ops = & qlcnic_83xx_hw_ops;
  
#line 261 
  ahw->reg_tbl = (u32 *)(& qlcnic_83xx_reg_tbl);
  
#line 262 
  ahw->ext_reg_tbl = (u32 *)(& qlcnic_83xx_ext_reg_tbl);
  
#line 263 
  return;
}


#line 265  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_fw_version(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 fw_major;
  u32 fw_minor;
  u32 fw_build;
  
#line 268 
  struct pci_dev *pdev = adapter->pdev;
  
#line 270 
  fw_major = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 11U)));
  
#line 271 
  fw_minor = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 12U)));
  
#line 272 
  fw_build = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 13U)));
  
#line 273 
  adapter->fw_version = ((fw_major << 24) + (fw_minor << 16)) + fw_build;
  
#line 275 
  _dev_info((struct device const *)(& pdev->dev),"Driver v%s, firmware version %d.%d.%d\n",(char *)"5.3.62",fw_major,fw_minor,fw_build);
  
#line 278 
  __retres = (int)adapter->fw_version;
  
#line 278 
  return __retres;
}


#line 281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int __qlcnic_set_win_base(struct qlcnic_adapter *adapter, u32 addr)
{
  int __retres;
  void *base;
  u32 val;
  
#line 286 
  base = (adapter->ahw)->pci_base0 + ((int)(adapter->ahw)->pci_func + 3584) * 4;
  
#line 288 
  writel(addr,(void volatile *)base);
  
#line 289 
  val = readl((void const volatile *)base);
  
#line 290 
  if (val != addr) {
    
#line 291 
    __retres = -5;
    
#line 291 
    goto return_label;
  }
  else ;
  
#line 293 
  __retres = 0;
  return_label: 
#line 293 
                return __retres;
}


#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_rd_reg_indirect(struct qlcnic_adapter *adapter, ulong addr, int *err)
{
  int __retres;
  
#line 299 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 301 
  *err = __qlcnic_set_win_base(adapter,(unsigned int)addr);
  
#line 302 
  if (*err == 0) {
    unsigned int tmp;
    
#line 303 
    tmp = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 1U)));
    
#line 303 
    __retres = (int)tmp;
    
#line 303 
    goto return_label;
  }
  else {
    
#line 305 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s failed, addr = 0x%lx\n","qlcnic_83xx_rd_reg_indirect",addr);
    
#line 307 
    __retres = -5;
    
#line 307 
    goto return_label;
  }
  return_label: 
#line 302 
                return __retres;
}


#line 311  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_wrt_reg_indirect(struct qlcnic_adapter *adapter, ulong addr, u32 data)
{
  int __retres;
  int err;
  
#line 315 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 317 
  err = __qlcnic_set_win_base(adapter,(unsigned int)addr);
  
#line 318 
  if (err == 0) {
    
#line 319 
    writel(data,(void volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 1U)));
    
#line 320 
    __retres = 0;
    
#line 320 
    goto return_label;
  }
  else {
    
#line 322 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s failed, addr = 0x%x data = 0x%x\n","qlcnic_83xx_wrt_reg_indirect",(int)addr,data);
    
#line 325 
    __retres = err;
    
#line 325 
    goto return_label;
  }
  return_label: 
#line 318 
                return __retres;
}


#line 329  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_enable_legacy(struct qlcnic_adapter *adapter)
{
  
#line 331 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 334 
  adapter->tgt_status_reg = ahw->pci_base0 + 14528U;
  
#line 335 
  adapter->tgt_mask_reg = ahw->pci_base0 + 14536U;
  
#line 336 
  adapter->isr_int_vec = ahw->pci_base0 + 14532U;
  
#line 337 
  (adapter->msix_entries)->vector = (adapter->pdev)->irq;
  
#line 338 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"using legacy interrupt\n");
  
#line 339 
  return;
}


#line 341  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_calculate_msix_vector(struct qlcnic_adapter *adapter)
{
  int num_msix;
  
#line 345 
  num_msix = (int)adapter->drv_sds_rings;
  
#line 348 
  num_msix += 1;
  
#line 350 
  if ((adapter->flags & 65536U) == 0U) 
#line 351 
                                       num_msix = (int)adapter->drv_tx_rings + num_msix; else ;
  
#line 353 
  return num_msix;
}


#line 356  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_setup_intr(struct qlcnic_adapter *adapter)
{
  int __retres;
  int err;
  int i;
  int num_msix;
  
#line 358 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 361 
  if ((adapter->flags & 524288U) != 0U) {
    
#line 362 
    err = qlcnic_setup_tss_rss_intr(adapter);
    
#line 363 
    if (err < 0) {
      
#line 364 
      __retres = err;
      
#line 364 
      goto return_label;
    }
    else ;
    
#line 365 
    num_msix = (int)ahw->num_msix;
  }
  else {
    
#line 367 
    num_msix = qlcnic_83xx_calculate_msix_vector(adapter);
    
#line 369 
    err = qlcnic_enable_msix(adapter,(unsigned int)num_msix);
    
#line 370 
    if (err == -12) {
      
#line 371 
      __retres = err;
      
#line 371 
      goto return_label;
    }
    else ;
    
#line 373 
    if ((adapter->flags & 4U) != 0U) 
#line 374 
                                     num_msix = (int)ahw->num_msix;
    else {
      bool tmp;
      
#line 376 
      tmp = qlcnic_sriov_vf_check(adapter);
      
#line 376 
      if ((int)tmp != 0) {
        
#line 377 
        __retres = -22;
        
#line 377 
        goto return_label;
      }
      else ;
      
#line 378 
      num_msix = 1;
      
#line 379 
      adapter->drv_sds_rings = (unsigned char)1U;
      
#line 380 
      adapter->drv_tx_rings = (unsigned char)1U;
    }
  }
  
#line 385 
  ahw->intr_tbl = (struct qlcnic_intrpt_config *)vzalloc((unsigned long)num_msix * 8UL);
  
#line 387 
  if (ahw->intr_tbl == (struct qlcnic_intrpt_config *)0) {
    
#line 388 
    __retres = -12;
    
#line 388 
    goto return_label;
  }
  else ;
  
#line 390 
  if ((adapter->flags & 4U) == 0U) {
    
#line 391 
    if ((unsigned int)(adapter->ahw)->pci_func > 7U) {
      
#line 392 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"PCI function number 8 and higher are not supported with legacy interrupt, func 0x%x\n",(int)ahw->pci_func);
      
#line 394 
      __retres = -95;
      
#line 394 
      goto return_label;
    }
    else ;
    
#line 397 
    qlcnic_83xx_enable_legacy(adapter);
  }
  else ;
  
#line 400 
  i = 0;
  
#line 400 
  goto ldv_54657;
  ldv_54656: 
#line 401 
  ;
  
#line 401 
  if ((adapter->flags & 4U) != 0U) 
#line 402 
                                   (ahw->intr_tbl + i)->type = (unsigned char)3U; else 
                                                                    
#line 404 
                                                                    (ahw->intr_tbl + i)->type = (unsigned char)1U;
  
#line 405 
  (ahw->intr_tbl + i)->id = (unsigned short)i;
  
#line 406 
  (ahw->intr_tbl + i)->src = 0U;
  
#line 400 
  i += 1;
  ldv_54657: 
#line 401 
  ;
  
#line 400 
  if (i < num_msix) 
#line 402 
                    goto ldv_54656; else 
#line 405 
                                         goto ldv_54658;
  ldv_54658: 
#line 406 
  ;
  
#line 409 
  __retres = 0;
  return_label: 
#line 409 
                return __retres;
}


#line 412  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static void qlcnic_83xx_clear_legacy_intr_mask(struct qlcnic_adapter *adapter)
{
  
#line 414 
  writel(0U,(void volatile *)adapter->tgt_mask_reg);
  
#line 415 
  return;
}


#line 417  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static void qlcnic_83xx_set_legacy_intr_mask(struct qlcnic_adapter *adapter)
{
  
#line 419 
  if (adapter->tgt_mask_reg != (void *)0) 
#line 420 
                                          writel(1U,(void volatile *)adapter->tgt_mask_reg); else ;
  
#line 421 
  return;
}


#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static void qlcnic_83xx_enable_legacy_msix_mbx_intr(struct qlcnic_adapter *adapter)
{
  u32 mask;
  
#line 433 
  mask = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 9U)));
  
#line 434 
  writel(0U,(void volatile *)((adapter->ahw)->pci_base0 + mask));
  
#line 435 
  return;
}


#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_disable_mbx_intr(struct qlcnic_adapter *adapter)
{
  u32 mask;
  
#line 441 
  mask = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 9U)));
  
#line 442 
  writel(1U,(void volatile *)((adapter->ahw)->pci_base0 + mask));
  
#line 443 
  writel(0U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 8U)));
  
#line 444 
  return;
}


#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static void qlcnic_83xx_get_mbx_data(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  int i;
  
#line 451 
  if (cmd->op_type == 1U) 
#line 452 
                          goto return_label; else ;
  
#line 454 
  i = 0;
  
#line 454 
  goto ldv_54679;
  ldv_54678: 
#line 455 
  ;
  
#line 455 
  *(cmd->rsp.arg + i) = readl((void const volatile *)((adapter->ahw)->pci_base0 + ((unsigned int)(i * 4) + 2048U)));
  
#line 454 
  i += 1;
  ldv_54679: 
#line 455 
  ;
  
#line 454 
  if (cmd->rsp.num > (unsigned int)i) 
#line 456 
                                      goto ldv_54678; else 
#line 459 
                                                           goto ldv_54680;
  ldv_54680: 
#line 460 
  ;
  return_label: 
#line 461 
                return;
}


#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
irqreturn_t qlcnic_83xx_clear_legacy_intr(struct qlcnic_adapter *adapter)
{
  irqreturn_t __retres;
  u32 intr_val;
  
#line 461 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 462 
  int retries = 0;
  
#line 464 
  intr_val = readl((void const volatile *)adapter->tgt_status_reg);
  
#line 466 
  if (intr_val >= (u32)0) {
    
#line 467 
    __retres = IRQ_NONE;
    
#line 467 
    goto return_label;
  }
  else ;
  
#line 469 
  if ((intr_val & 255U) != (unsigned int)(adapter->ahw)->pci_func) {
    
#line 470 
    adapter->stats.spurious_intr += 1ULL;
    
#line 471 
    __retres = IRQ_NONE;
    
#line 471 
    goto return_label;
  }
  else ;
  
#line 473 
  ldv_inline_asm();
  
#line 477 
  writel(0U,(void volatile *)adapter->isr_int_vec);
  
#line 478 
  intr_val = readl((void const volatile *)adapter->isr_int_vec);
  ldv_54688: 
#line 479 
  ;
  
#line 480 
  intr_val = readl((void const volatile *)adapter->tgt_status_reg);
  
#line 481 
  if ((intr_val & 255U) != (unsigned int)ahw->pci_func) 
#line 482 
                                                        goto ldv_54687; else ;
  
#line 483 
  retries += 1;
  
#line 485 
  if ((intr_val & 1073741824U) != 0U && retries <= 99) 
#line 487 
                                                       goto ldv_54688; else 
                                                                    
#line 490 
                                                                    goto ldv_54687;
  ldv_54687: 
#line 491 
  ;
  
#line 487 
  __retres = IRQ_HANDLED;
  return_label: 
#line 487 
                return __retres;
}


#line 490  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static void qlcnic_83xx_notify_mbx_response(struct qlcnic_mailbox *mbx)
{
  
#line 492 
  atomic_set(& mbx->rsp_status,1);
  
#line 493 
  complete(& mbx->completion);
  
#line 494 
  return;
}


#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_poll_process_aen(struct qlcnic_adapter *adapter)
{
  u32 resp;
  u32 event;
  unsigned long flags;
  
#line 498 
  u32 rsp_status = 1U;
  
#line 499 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  
#line 502 
  ldv___ldv_spin_lock_75(& mbx->aen_lock);
  
#line 503 
  resp = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 4U)));
  
#line 504 
  if ((resp & 1U) == 0U) 
#line 505 
                         goto out; else ;
  
#line 507 
  event = readl((void const volatile *)((adapter->ahw)->pci_base0 + 2048U));
  
#line 508 
  if ((event & 32768U) != 0U) 
#line 509 
                              __qlcnic_83xx_process_aen(adapter);
  else {
    int tmp;
    
#line 511 
    tmp = atomic_read((atomic_t const *)(& mbx->rsp_status));
    
#line 511 
    ;
    
#line 511 
    if ((unsigned int)tmp != rsp_status) 
#line 512 
                                         qlcnic_83xx_notify_mbx_response(mbx); else ;
  }
  out: 
#line 514 
  ;
  
#line 515 
  qlcnic_83xx_enable_legacy_msix_mbx_intr(adapter);
  
#line 516 
  ldv_spin_unlock_irqrestore_76(& mbx->aen_lock,flags);
  
#line 517 
  return;
}


#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
irqreturn_t qlcnic_83xx_intr(int irq, void *data)
{
  irqreturn_t __retres;
  struct qlcnic_host_sds_ring *sds_ring;
  irqreturn_t tmp;
  int tmp_0;
  
#line 521 
  struct qlcnic_adapter *adapter = (struct qlcnic_adapter *)data;
  
#line 523 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 525 
  tmp = qlcnic_83xx_clear_legacy_intr(adapter);
  
#line 525 
  if (tmp == (unsigned int)IRQ_NONE) {
    
#line 526 
    __retres = IRQ_NONE;
    
#line 526 
    goto return_label;
  }
  else ;
  
#line 528 
  qlcnic_83xx_poll_process_aen(adapter);
  
#line 530 
  if ((unsigned int)ahw->diag_test != 0U) {
    
#line 531 
    if ((unsigned int)ahw->diag_test == 1U) 
#line 532 
                                            ahw->diag_cnt += 1; else ;
    
#line 533 
    qlcnic_83xx_enable_legacy_msix_mbx_intr(adapter);
    
#line 534 
    __retres = IRQ_HANDLED;
    
#line 534 
    goto return_label;
  }
  else ;
  
#line 537 
  tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
  
#line 537 
  if (tmp_0 == 0) 
#line 538 
                  qlcnic_83xx_enable_legacy_msix_mbx_intr(adapter);
  else {
    
#line 540 
    sds_ring = (adapter->recv_ctx)->sds_rings;
    
#line 541 
    napi_schedule(& sds_ring->napi);
  }
  
#line 544 
  __retres = IRQ_HANDLED;
  return_label: 
#line 544 
                return __retres;
}


#line 547  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
irqreturn_t qlcnic_83xx_tmp_intr(int irq, void *data)
{
  irqreturn_t __retres;
  irqreturn_t tmp;
  
#line 549 
  struct qlcnic_host_sds_ring *sds_ring = (struct qlcnic_host_sds_ring *)data;
  
#line 550 
  struct qlcnic_adapter *adapter = sds_ring->adapter;
  
#line 552 
  if ((adapter->flags & 4U) != 0U) 
#line 553 
                                   goto done; else ;
  
#line 555 
  tmp = (*((adapter->nic_ops)->clear_legacy_intr))(adapter);
  
#line 555 
  if (tmp == (unsigned int)IRQ_NONE) {
    
#line 556 
    __retres = IRQ_NONE;
    
#line 556 
    goto return_label;
  }
  else ;
  done: 
#line 558 
  ;
  
#line 559 
  (adapter->ahw)->diag_cnt += 1;
  
#line 560 
  qlcnic_enable_sds_intr(adapter,sds_ring);
  
#line 562 
  __retres = IRQ_HANDLED;
  return_label: 
#line 562 
                return __retres;
}


#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_free_mbx_intr(struct qlcnic_adapter *adapter)
{
  u32 num_msix;
  
#line 569 
  if ((adapter->flags & 4U) == 0U) 
#line 570 
                                   qlcnic_83xx_set_legacy_intr_mask(adapter); else ;
  
#line 572 
  qlcnic_83xx_disable_mbx_intr(adapter);
  
#line 574 
  if ((adapter->flags & 4U) != 0U) 
#line 575 
                                   num_msix = (unsigned int)((int)(adapter->ahw)->num_msix + -1); else 
                                                                    
#line 577 
                                                                    num_msix = 0U;
  
#line 579 
  msleep(20U);
  
#line 581 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    
#line 582 
    synchronize_irq((adapter->msix_entries + num_msix)->vector);
    
#line 583 
    ldv_free_irq_77_0((adapter->msix_entries + num_msix)->vector,(void *)adapter);
  }
  else ;
  
#line 585 
  return;
}


#line 587  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_setup_mbx_intr(struct qlcnic_adapter *adapter)
{
  int __retres;
  irqreturn_t (*handler)(int , void *);
  u32 val;
  
#line 591 
  int err = 0;
  
#line 592 
  unsigned long flags = 0UL;
  
#line 594 
  if ((adapter->flags & 2U) == 0U && (adapter->flags & 4U) == 0U) 
#line 596 
                                                                  flags |= 128UL; else ;
  
#line 598 
  if ((adapter->flags & 4U) != 0U) {
    
#line 599 
    handler = & qlcnic_83xx_handle_aen;
    
#line 600 
    val = (adapter->msix_entries + ((unsigned long)(adapter->ahw)->num_msix + 18446744073709551615U))->vector;
    
#line 601 
    err = ldv_request_irq_78(val,handler,flags,"qlcnic-MB",(void *)adapter);
    
#line 602 
    if (err != 0) {
      
#line 603 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"failed to register MBX interrupt\n");
      
#line 605 
      __retres = err;
      
#line 605 
      goto return_label;
    }
    else ;
  }
  else {
    
#line 608 
    handler = & qlcnic_83xx_intr;
    
#line 609 
    val = (adapter->msix_entries)->vector;
    
#line 610 
    err = ldv_request_irq_79(val,handler,flags,"qlcnic",(void *)adapter);
    
#line 611 
    if (err != 0) {
      
#line 612 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"failed to register INTx interrupt\n");
      
#line 614 
      __retres = err;
      
#line 614 
      goto return_label;
    }
    else ;
    
#line 616 
    qlcnic_83xx_clear_legacy_intr_mask(adapter);
  }
  
#line 620 
  qlcnic_83xx_enable_mbx_interrupt(adapter);
  
#line 622 
  __retres = err;
  return_label: 
#line 622 
                return __retres;
}


#line 625  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_get_func_no(struct qlcnic_adapter *adapter)
{
  
#line 627 
  u32 val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 2U)));
  
#line 628 
  (adapter->ahw)->pci_func = (unsigned char)(val >> 24);
  
#line 629 
  return;
}


#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_cam_lock(struct qlcnic_adapter *adapter)
{
  int __retres;
  void *addr;
  u32 val;
  
#line 634 
  u32 limit = 0U;
  
#line 636 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 638 
  addr = ahw->pci_base0 + ((int)ahw->pci_func + 1800) * 8;
  ldv_54737: 
#line 639 
  ;
  
#line 640 
  val = readl((void const volatile *)addr);
  
#line 641 
  if (val != 0U) {
    
#line 643 
    writel((unsigned int)ahw->pci_func,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 3U)));
    
#line 645 
    __retres = 0;
    
#line 645 
    goto return_label;
  }
  else ;
  
#line 647 
  usleep_range(1000UL,2000UL);
  
#line 648 
  limit += 1U;
  
#line 648 
  if (limit <= 10000U) 
#line 650 
                       goto ldv_54737; else 
#line 653 
                                            goto ldv_54738;
  ldv_54738: 
#line 654 
  ;
  
#line 650 
  __retres = -5;
  return_label: 
#line 650 
                return __retres;
}


#line 653  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_cam_unlock(struct qlcnic_adapter *adapter)
{
  void *addr;
  u32 val;
  
#line 657 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 659 
  addr = ahw->pci_base0 + ((int)ahw->pci_func * 8 + 14404);
  
#line 660 
  val = readl((void const volatile *)addr);
  
#line 661 
  return;
}


#line 663  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_read_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size)
{
  u32 data;
  int tmp;
  int tmp_0;
  
#line 666 
  int ret = 0;
  
#line 669 
  tmp = qlcnic_api_lock(adapter);
  
#line 669 
  if (tmp != 0) {
    
#line 670 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: failed to acquire lock. addr offset 0x%x\n","qlcnic_83xx_read_crb",(unsigned int)offset);
    
#line 673 
    goto return_label;
  }
  else ;
  
#line 676 
  tmp_0 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)((unsigned int)offset),& ret);
  
#line 676 
  data = (unsigned int)tmp_0;
  
#line 677 
  qlcnic_api_unlock(adapter);
  
#line 679 
  if (ret == -5) {
    
#line 680 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: failed. addr offset 0x%x\n","qlcnic_83xx_read_crb",(unsigned int)offset);
    
#line 683 
    goto return_label;
  }
  else ;
  
#line 685 
  memcpy((void *)buf,(void const *)(& data),size);
  return_label: 
#line 686 
                return;
}


#line 688  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_write_crb(struct qlcnic_adapter *adapter, char *buf, loff_t offset, size_t size)
{
  u32 data;
  
#line 693 
  memcpy((void *)(& data),(void const *)buf,size);
  
#line 694 
  qlcnic_83xx_wrt_reg_indirect(adapter,(unsigned long)((unsigned int)offset),data);
  
#line 695 
  return;
}


#line 697  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_port_info(struct qlcnic_adapter *adapter)
{
  int status;
  
#line 699 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 702 
  status = qlcnic_83xx_get_port_config(adapter);
  
#line 703 
  if (status != 0) 
#line 704 
                   dev_err((struct device const *)(& (adapter->pdev)->dev),"Get Port Info failed\n");
  else {
    
#line 708 
    if ((ahw->port_config & 2048U) != 0U) 
#line 709 
                                          ahw->port_type = (unsigned short)2U;
    else 
      
#line 710 
      if (((ahw->port_config & 256U) != 0U || (ahw->port_config & 512U) != 0U) || (ahw->port_config & 1024U) != 0U) 
        
#line 713 
        ahw->port_type = (unsigned short)1U; else 
#line 715 
                                                  ahw->port_type = (unsigned short)2U;
    
#line 718 
    if ((ahw->port_config & 32768U) != 0U) 
#line 719 
                                           ahw->link_autoneg = (unsigned short)1U; else ;
  }
  
#line 722 
  return status;
}


#line 725  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_set_mac_filter_count(struct qlcnic_adapter *adapter)
{
  u16 count;
  
#line 727 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 728 
  u16 act_pci_fn = ahw->total_nic_func;
  
#line 731 
  ahw->max_mc_count = (unsigned char)38U;
  
#line 732 
  if ((unsigned int)act_pci_fn <= 2U) 
#line 733 
                                      count = (unsigned short)(4058 / (int)act_pci_fn); else 
                                                                    
#line 736 
                                                                    count = (unsigned short)(2010 / (int)act_pci_fn);
  
#line 738 
  ahw->max_uc_count = count;
  
#line 739 
  return;
}


#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_enable_mbx_interrupt(struct qlcnic_adapter *adapter)
{
  u32 val;
  
#line 745 
  if ((adapter->flags & 4U) != 0U) 
#line 746 
                                   val = (unsigned int)((((int)(adapter->ahw)->num_msix + -1) << 8) | 4); else 
                                                                    
#line 748 
                                                                    val = 4U;
  
#line 750 
  writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 8U)));
  
#line 751 
  qlcnic_83xx_enable_legacy_msix_mbx_intr(adapter);
  
#line 752 
  return;
}


#line 754  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_check_vf(struct qlcnic_adapter *adapter, struct pci_device_id const *ent)
{
  u32 op_mode;
  u32 priv_level;
  bool tmp;
  
#line 758 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 760 
  ahw->fw_hal_version = 2U;
  
#line 761 
  qlcnic_get_func_no(adapter);
  
#line 763 
  tmp = qlcnic_sriov_vf_check(adapter);
  
#line 763 
  if ((int)tmp != 0) {
    
#line 764 
    qlcnic_sriov_vf_set_ops(adapter);
    
#line 765 
    goto return_label;
  }
  else ;
  
#line 769 
  op_mode = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 37U)));
  
#line 770 
  if (op_mode == 1431655765U) 
#line 771 
                              priv_level = 0U; else 
#line 773 
                                                    priv_level = (op_mode >> (int)ahw->pci_func * 2) & 3U;
  
#line 776 
  if (priv_level == 2U) {
    
#line 777 
    ahw->op_mode = (unsigned short)2U;
    
#line 778 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"HAL Version: %d Non Privileged function\n",ahw->fw_hal_version);
    
#line 781 
    adapter->nic_ops = & qlcnic_vf_ops;
  }
  else {
    int tmp_0;
    
#line 783 
    tmp_0 = pci_find_ext_capability(adapter->pdev,16);
    
#line 783 
    if (tmp_0 != 0) 
#line 785 
                    set_bit(11L,(unsigned long volatile *)(& adapter->state)); else ;
    
#line 786 
    adapter->nic_ops = & qlcnic_83xx_ops;
  }
  return_label: 
#line 788 
                return;
}


#line 790 
static void qlcnic_83xx_handle_link_aen(struct qlcnic_adapter *adapter, u32 *data);


#line 792 
static void qlcnic_83xx_handle_idc_comp_aen(struct qlcnic_adapter *adapter, u32 *data);


#line 795  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_dump_mbx(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  int i;
  
#line 800 
  if (cmd->op_type == 1U) 
#line 801 
                          goto return_label; else ;
  
#line 803 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Host MBX regs(%d)\n",cmd->req.num);
  
#line 805 
  i = 0;
  
#line 805 
  goto ldv_54795;
  ldv_54794: 
#line 806 
  ;
  
#line 806 
  if (i != 0 && ((unsigned int)i & 7U) == 0U) 
#line 807 
                                              printk("\001"); else ;
  
#line 808 
  printk("\001",*(cmd->req.arg + i));
  
#line 805 
  i += 1;
  ldv_54795: 
#line 806 
  ;
  
#line 805 
  if (cmd->req.num > (unsigned int)i) 
#line 807 
                                      goto ldv_54794; else 
#line 810 
                                                           goto ldv_54796;
  ldv_54796: 
#line 811 
  ;
  
#line 810 
  printk("\001");
  
#line 811 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"FW MBX regs(%d)\n",cmd->rsp.num);
  
#line 813 
  i = 0;
  
#line 813 
  goto ldv_54798;
  ldv_54797: 
#line 814 
  ;
  
#line 814 
  if (i != 0 && ((unsigned int)i & 7U) == 0U) 
#line 815 
                                              printk("\001"); else ;
  
#line 816 
  printk("\001",*(cmd->rsp.arg + i));
  
#line 813 
  i += 1;
  ldv_54798: 
#line 814 
  ;
  
#line 813 
  if (cmd->rsp.num > (unsigned int)i) 
#line 815 
                                      goto ldv_54797; else 
#line 818 
                                                           goto ldv_54799;
  ldv_54799: 
#line 819 
  ;
  
#line 818 
  printk("\001");
  return_label: 
#line 819 
                return;
}


#line 821  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_poll_for_mbx_completion(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  unsigned long max_loops;
  int tmp;
  
#line 824 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 825 
  int opcode = (int)((unsigned short)*(cmd->req.arg));
  
#line 828 
  max_loops = (unsigned long)(cmd->total_cmds * 5000000U);
  
#line 830 
  goto ldv_54808;
  ldv_54807: 
#line 831 
  ;
  
#line 831 
  tmp = atomic_read((atomic_t const *)(& cmd->rsp_status));
  
#line 831 
  if (tmp == 1) 
#line 833 
                goto return_label; else ;
  
#line 835 
  __const_udelay(4295UL);
  
#line 830 
  max_loops -= 1UL;
  ldv_54808: 
#line 831 
  ;
  
#line 830 
  if (max_loops != 0UL) 
#line 832 
                        goto ldv_54807; else 
#line 835 
                                             goto ldv_54809;
  ldv_54809: 
#line 836 
  ;
  
#line 838 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Mailbox command timed out, cmd_op=0x%x, cmd_type=0x%x, pci_func=0x%x, op_mode=0x%x\n","qlcnic_83xx_poll_for_mbx_completion",opcode,cmd->type,(int)ahw->pci_func,(int)ahw->op_mode);
  
#line 841 
  flush_workqueue((ahw->mailbox)->work_q);
  return_label: 
#line 842 
                return;
}


#line 845  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  int cmd_type;
  int err;
  int opcode;
  unsigned long timeout;
  
#line 848 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  
#line 849 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 853 
  if (mbx == (struct qlcnic_mailbox *)0) {
    
#line 854 
    __retres = -5;
    
#line 854 
    goto return_label;
  }
  else ;
  
#line 856 
  opcode = (int)((unsigned short)*(cmd->req.arg));
  
#line 857 
  cmd_type = (int)cmd->type;
  
#line 858 
  err = (*((mbx->ops)->enqueue_cmd))(adapter,cmd,& timeout);
  
#line 859 
  if (err != 0) {
    
#line 860 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Mailbox not available, cmd_op=0x%x, cmd_context=0x%x, pci_func=0x%x, op_mode=0x%x\n","qlcnic_83xx_issue_cmd",opcode,cmd->type,(int)ahw->pci_func,(int)ahw->op_mode);
    
#line 864 
    __retres = err;
    
#line 864 
    goto return_label;
  }
  else ;
  
#line 867 
  switch (cmd_type) {
    unsigned long tmp;
    case 0: 
#line 868 
    ;
    
#line 869 
    tmp = wait_for_completion_timeout(& cmd->completion,timeout);
    
#line 869 
    if (tmp == 0UL) {
      
#line 870 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Mailbox command timed out, cmd_op=0x%x, cmd_type=0x%x, pci_func=0x%x, op_mode=0x%x\n","qlcnic_83xx_issue_cmd",opcode,cmd_type,(int)ahw->pci_func,(int)ahw->op_mode);
      
#line 874 
      flush_workqueue(mbx->work_q);
    }
    else ;
    
#line 876 
    goto ldv_54823;
    case 1: 
#line 877 
    ;
    
#line 878 
    __retres = 0;
    
#line 878 
    goto return_label;
    case 2: 
#line 879 
    ;
    
#line 880 
    qlcnic_83xx_poll_for_mbx_completion(adapter,cmd);
    
#line 881 
    goto ldv_54823;
    default: 
#line 882 
    ;
    
#line 883 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Invalid mailbox command, cmd_op=0x%x, cmd_type=0x%x, pci_func=0x%x, op_mode=0x%x\n","qlcnic_83xx_issue_cmd",opcode,cmd_type,(int)ahw->pci_func,(int)ahw->op_mode);
    
#line 887 
    qlcnic_83xx_detach_mailbox_work(adapter);
  }
  ldv_54823: 
#line 890 
  ;
  
#line 890 
  __retres = (int)cmd->rsp_opcode;
  return_label: 
#line 890 
                return __retres;
}


#line 893  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_alloc_mbx_args(struct qlcnic_cmd_args *mbx, struct qlcnic_adapter *adapter, u32 type)
{
  int __retres;
  int i;
  int size;
  u32 temp;
  struct qlcnic_mailbox_metadata const *mbx_tbl;
  
#line 900 
  memset((void *)mbx,0,200UL);
  
#line 901 
  mbx_tbl = (struct qlcnic_mailbox_metadata const *)(& qlcnic_83xx_mbx_tbl);
  
#line 902 
  size = 53;
  
#line 903 
  i = 0;
  
#line 903 
  goto ldv_54840;
  ldv_54839: 
#line 904 
  ;
  
#line 904 
  if ((mbx_tbl + i)->cmd == type) {
    
#line 905 
    mbx->op_type = 0U;
    
#line 906 
    mbx->req.num = (mbx_tbl + i)->in_args;
    
#line 907 
    mbx->rsp.num = (mbx_tbl + i)->out_args;
    
#line 908 
    mbx->req.arg = (u32 *)kcalloc_1((unsigned long)mbx->req.num,4UL,32U);
    
#line 910 
    if (mbx->req.arg == (u32 *)0U) {
      
#line 911 
      __retres = -12;
      
#line 911 
      goto return_label;
    }
    else ;
    
#line 912 
    mbx->rsp.arg = (u32 *)kcalloc_1((unsigned long)mbx->rsp.num,4UL,32U);
    
#line 914 
    if (mbx->rsp.arg == (u32 *)0U) {
      
#line 915 
      kfree((void const *)mbx->req.arg);
      
#line 916 
      mbx->req.arg = (u32 *)0U;
      
#line 917 
      __retres = -12;
      
#line 917 
      goto return_label;
    }
    else ;
    
#line 919 
    memset((void *)mbx->req.arg,0,(unsigned long)mbx->req.num * 4UL);
    
#line 920 
    memset((void *)mbx->rsp.arg,0,(unsigned long)mbx->rsp.num * 4UL);
    
#line 921 
    temp = (adapter->ahw)->fw_hal_version << 29;
    
#line 922 
    *(mbx->req.arg) = ((mbx->req.num << 16) | type) | temp;
    
#line 923 
    mbx->cmd_op = type;
    
#line 924 
    __retres = 0;
    
#line 924 
    goto return_label;
  }
  else ;
  
#line 903 
  i += 1;
  ldv_54840: 
#line 904 
  ;
  
#line 903 
  if (i < size) 
#line 905 
                goto ldv_54839; else 
#line 908 
                                     goto ldv_54841;
  ldv_54841: 
#line 909 
  ;
  
#line 928 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Invalid mailbox command opcode 0x%x\n","qlcnic_83xx_alloc_mbx_args",type);
  
#line 930 
  __retres = -22;
  return_label: 
#line 930 
                return __retres;
}


#line 933  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_idc_aen_work(struct work_struct *work)
{
  struct qlcnic_adapter *adapter;
  struct qlcnic_cmd_args cmd;
  int i;
  struct qlcnic_adapter *tmp;
  
#line 937 
  int err = 0;
  {
    
#line 939 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 939 
    tmp = (struct qlcnic_adapter *)__mptr + 18446744073709550488U;
  }
  
#line 939 
  adapter = tmp;
  
#line 940 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,99U);
  
#line 941 
  if (err != 0) 
#line 942 
                goto return_label; else ;
  
#line 944 
  i = 1;
  
#line 944 
  goto ldv_54853;
  ldv_54852: 
#line 945 
  ;
  
#line 945 
  *(cmd.req.arg + i) = (adapter->ahw)->mbox_aen[i];
  
#line 944 
  i += 1;
  ldv_54853: 
#line 945 
  ;
  
#line 944 
  if (i <= 4) 
#line 946 
              goto ldv_54852; else 
#line 949 
                                   goto ldv_54854;
  ldv_54854: 
#line 950 
  ;
  
#line 947 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 948 
  if (err != 0) 
#line 949 
                _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: Mailbox IDC ACK failed.\n","qlcnic_83xx_idc_aen_work"); else ;
  
#line 951 
  qlcnic_free_mbx_args(& cmd);
  return_label: 
#line 952 
                return;
}


#line 954  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_handle_idc_comp_aen(struct qlcnic_adapter *adapter, u32 *data)
{
  {
    
#line 957 
    struct _ddebug descriptor = {.modname = "qlcnic", .function = "qlcnic_83xx_handle_idc_comp_aen", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c", .format = "Completion AEN:0x%x.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))958U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 957 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 957 
                                                        __dynamic_dev_dbg(& descriptor,(struct device const *)(& (adapter->pdev)->dev),"Completion AEN:0x%x.\n",(int)((unsigned short)*data)); else ;
  }
  
#line 959 
  set_bit(3L,(unsigned long volatile *)(& (adapter->ahw)->idc.status));
  
#line 960 
  return;
}


#line 963  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void __qlcnic_83xx_process_aen(struct qlcnic_adapter *adapter)
{
  u32 event[5U];
  int i;
  
#line 965 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 969 
  i = 0;
  
#line 969 
  goto ldv_54869;
  ldv_54868: 
#line 970 
  ;
  
#line 970 
  event[i] = readl((void const volatile *)(ahw->pci_base0 + ((unsigned int)(i * 4) + 2048U)));
  
#line 969 
  i += 1;
  ldv_54869: 
#line 970 
  ;
  
#line 969 
  if (i <= 4) 
#line 971 
              goto ldv_54868; else 
#line 974 
                                   goto ldv_54870;
  ldv_54870: 
#line 975 
  ;
  
#line 972 
  switch ((int)((unsigned short)event[0])) {
    case 32769: 
#line 974 
    ;
    
#line 975 
    qlcnic_83xx_handle_link_aen(adapter,(u32 *)(& event));
    
#line 976 
    goto ldv_54872;
    case 33024: 
#line 977 
    ;
    
#line 978 
    qlcnic_83xx_handle_idc_comp_aen(adapter,(u32 *)(& event));
    
#line 979 
    goto ldv_54872;
    case 33025: 
#line 980 
    ;
    
#line 981 
    i = 0;
    
#line 981 
    goto ldv_54876;
    ldv_54875: 
#line 982 
    ;
    
#line 982 
    (adapter->ahw)->mbox_aen[i] = (unsigned int)((unsigned short)event[i]);
    
#line 981 
    i += 1;
    ldv_54876: 
#line 982 
    ;
    
#line 981 
    if (i <= 4) 
#line 983 
                goto ldv_54875; else 
#line 986 
                                     goto ldv_54877;
    ldv_54877: 
#line 987 
    ;
    
#line 983 
    ldv_queue_delayed_work_80(adapter->qlcnic_wq,& adapter->idc_aen_work,0UL);
    
#line 985 
    goto ldv_54872;
    case 33026: 
#line 986 
    ;
    
#line 987 
    ahw->extend_lb_time = (unsigned char)((unsigned int)((unsigned char)(event[1] >> 8)) & 15U);
    
#line 988 
    goto ldv_54872;
    case 32770: 
#line 989 
    ;
    
#line 990 
    qlcnic_sriov_handle_bc_event(adapter,event[1]);
    
#line 991 
    goto ldv_54872;
    case 33072: 
#line 992 
    ;
    
#line 993 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"SFP+ Insert AEN:0x%x.\n",(int)((unsigned short)event[0]));
    
#line 995 
    goto ldv_54872;
    case 33073: 
#line 996 
    ;
    
#line 997 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"SFP Removed AEN:0x%x.\n",(int)((unsigned short)event[0]));
    
#line 999 
    goto ldv_54872;
    case 33040: 
#line 1000 
    ;
    
#line 1001 
    qlcnic_dcb_aen_handler(adapter->dcb,(void *)(& event[1]));
    
#line 1002 
    goto ldv_54872;
    default: 
#line 1003 
    ;
    {
      
#line 1004 
      struct _ddebug descriptor = {.modname = "qlcnic", .function = "__qlcnic_83xx_process_aen", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c", .format = "Unsupported AEN:0x%x.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1005U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1004 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1004 
                                                          __dynamic_dev_dbg(& descriptor,(struct device const *)(& (adapter->pdev)->dev),"Unsupported AEN:0x%x.\n",(int)((unsigned short)event[0])); else ;
    }
    
#line 1006 
    goto ldv_54872;
  }
  ldv_54872: 
#line 1009 
  ;
  
#line 1009 
  writel(0U,(void volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 4U)));
  
#line 1010 
  return;
}


#line 1012  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_process_aen(struct qlcnic_adapter *adapter)
{
  u32 resp;
  u32 event;
  unsigned long flags;
  
#line 1014 
  u32 rsp_status = 1U;
  
#line 1015 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1016 
  struct qlcnic_mailbox *mbx = ahw->mailbox;
  
#line 1019 
  ldv___ldv_spin_lock_81(& mbx->aen_lock);
  
#line 1020 
  resp = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 4U)));
  
#line 1021 
  if ((resp & 1U) != 0U) {
    
#line 1022 
    event = readl((void const volatile *)(ahw->pci_base0 + 2048U));
    
#line 1023 
    if ((event & 32768U) != 0U) 
#line 1024 
                                __qlcnic_83xx_process_aen(adapter);
    else {
      int tmp;
      
#line 1026 
      tmp = atomic_read((atomic_t const *)(& mbx->rsp_status));
      
#line 1026 
      ;
      
#line 1026 
      if ((unsigned int)tmp != rsp_status) 
#line 1027 
                                           qlcnic_83xx_notify_mbx_response(mbx); else ;
    }
  }
  else ;
  
#line 1030 
  ldv_spin_unlock_irqrestore_82(& mbx->aen_lock,flags);
  
#line 1031 
  return;
}


#line 1033  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_mbx_poll_work(struct work_struct *work)
{
  struct qlcnic_adapter *adapter;
  struct qlcnic_adapter *tmp;
  int tmp_0;
  {
    
#line 1037 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1037 
    tmp = (struct qlcnic_adapter *)__mptr + 18446744073709550264U;
  }
  
#line 1037 
  adapter = tmp;
  
#line 1039 
  tmp_0 = constant_test_bit(12L,(unsigned long const volatile *)(& adapter->state));
  
#line 1039 
  if (tmp_0 == 0) 
#line 1040 
                  goto return_label; else ;
  
#line 1042 
  qlcnic_83xx_process_aen(adapter);
  
#line 1043 
  ldv_queue_delayed_work_83(adapter->qlcnic_wq,& adapter->mbx_poll_work,25UL);
  return_label: 
#line 1044 
                return;
}


#line 1047  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_enable_mbx_poll(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 1049 
  tmp = test_and_set_bit(12L,(unsigned long volatile *)(& adapter->state));
  
#line 1049 
  if (tmp != 0) 
#line 1050 
                goto return_label; else ;
  {
    struct lock_class_key __key;
    
#line 1052 
    __init_work(& adapter->mbx_poll_work.work,0);
    
#line 1052 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL_2};
    
#line 1052 
    adapter->mbx_poll_work.work.data = __constr_expr_37;
    
#line 1052 
    lockdep_init_map(& adapter->mbx_poll_work.work.lockdep_map,"(&(&adapter->mbx_poll_work)->work)",& __key,0);
    
#line 1052 
    INIT_LIST_HEAD(& adapter->mbx_poll_work.work.entry);
    
#line 1052 
    adapter->mbx_poll_work.work.func = & qlcnic_83xx_mbx_poll_work;
  }
  {
    struct lock_class_key __key_0;
    
#line 1052 
    init_timer_key(& adapter->mbx_poll_work.timer,2097152U,"(&(&adapter->mbx_poll_work)->timer)",& __key_0);
  }
  
#line 1052 
  adapter->mbx_poll_work.timer.function = & delayed_work_timer_fn;
  
#line 1052 
  adapter->mbx_poll_work.timer.data = (unsigned long)(& adapter->mbx_poll_work);
  
#line 1053 
  ldv_queue_delayed_work_84(adapter->qlcnic_wq,& adapter->mbx_poll_work,0UL);
  return_label: 
#line 1054 
                return;
}


#line 1056  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_disable_mbx_poll(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 1058 
  tmp = test_and_set_bit(12L,(unsigned long volatile *)(& adapter->state));
  
#line 1058 
  if (tmp == 0) 
#line 1059 
                goto return_label; else ;
  
#line 1060 
  cancel_delayed_work_sync(& adapter->mbx_poll_work);
  return_label: 
#line 1061 
                return;
}


#line 1063  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_add_rings(struct qlcnic_adapter *adapter)
{
  int index;
  int i;
  int err;
  int sds_mbx_size;
  u32 *buf;
  u32 intrpt_id;
  u32 intr_mask;
  u16 context_id;
  u8 num_sds;
  struct qlcnic_cmd_args cmd;
  struct qlcnic_host_sds_ring *sds;
  struct qlcnic_sds_mbx sds_mbx;
  struct qlcnic_add_rings_mbx_out *mbx_out;
  
#line 1073 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 1074 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1076 
  sds_mbx_size = 40;
  
#line 1077 
  context_id = recv_ctx->context_id;
  
#line 1078 
  num_sds = (unsigned char)((unsigned int)adapter->drv_sds_rings + 248U);
  
#line 1079 
  (*((ahw->hw_ops)->alloc_mbx_args))(& cmd,adapter,11U);
  
#line 1081 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)num_sds << 8) | ((int)context_id << 16));
  
#line 1084 
  index = 2;
  
#line 1085 
  i = 8;
  
#line 1085 
  goto ldv_54929;
  ldv_54928: 
#line 1086 
  ;
  
#line 1086 
  memset((void *)(& sds_mbx),0,(unsigned long)sds_mbx_size);
  
#line 1087 
  sds = recv_ctx->sds_rings + i;
  
#line 1088 
  sds->consumer = 0U;
  
#line 1089 
  memset((void *)sds->desc_head,0,(unsigned long)sds->num_desc * 16UL);
  
#line 1090 
  sds_mbx.phy_addr_low = (unsigned int)sds->phys_addr;
  
#line 1091 
  sds_mbx.phy_addr_high = (unsigned int)(sds->phys_addr >> 32);
  
#line 1092 
  sds_mbx.sds_ring_size = (unsigned short)sds->num_desc;
  
#line 1094 
  if ((adapter->flags & 4U) != 0U) 
#line 1095 
                                   intrpt_id = (unsigned int)(ahw->intr_tbl + i)->id; else 
                                                                    
#line 1097 
                                                                    intrpt_id = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 10U)));
  
#line 1099 
  if ((unsigned int)(adapter->ahw)->diag_test != 2U) 
#line 1100 
                                                     sds_mbx.intrpt_id = (unsigned short)intrpt_id; else 
                                                                    
#line 1102 
                                                                    sds_mbx.intrpt_id = (unsigned short)65535U;
  
#line 1103 
  sds_mbx.intrpt_val = (unsigned char)0U;
  
#line 1104 
  buf = cmd.req.arg + index;
  
#line 1105 
  memcpy((void *)buf,(void const *)(& sds_mbx),(unsigned long)sds_mbx_size);
  
#line 1106 
  index = (int)((unsigned long)sds_mbx_size / 4UL + (unsigned long)index);
  
#line 1085 
  i += 1;
  ldv_54929: 
#line 1086 
  ;
  
#line 1085 
  if ((int)adapter->drv_sds_rings > i) 
#line 1087 
                                       goto ldv_54928; else 
#line 1090 
                                                            goto ldv_54930;
  ldv_54930: 
#line 1091 
  ;
  
#line 1110 
  err = (*((ahw->hw_ops)->mbx_cmd))(adapter,& cmd);
  
#line 1111 
  if (err != 0) {
    
#line 1112 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to add rings %d\n",err);
    
#line 1114 
    goto out;
  }
  else ;
  
#line 1117 
  mbx_out = (struct qlcnic_add_rings_mbx_out *)(cmd.rsp.arg + 1U);
  
#line 1118 
  index = 0;
  
#line 1120 
  i = 8;
  
#line 1120 
  goto ldv_54933;
  ldv_54932: 
#line 1121 
  ;
  
#line 1121 
  sds = recv_ctx->sds_rings + i;
  
#line 1122 
  sds->crb_sts_consumer = ahw->pci_base0 + mbx_out->host_csmr[index];
  
#line 1124 
  if ((adapter->flags & 4U) != 0U) 
#line 1125 
                                   intr_mask = (ahw->intr_tbl + i)->src; else 
                                                                    
#line 1127 
                                                                    intr_mask = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 9U)));
  
#line 1129 
  sds->crb_intr_mask = ahw->pci_base0 + intr_mask;
  
#line 1130 
  index += 1;
  
#line 1120 
  i += 1;
  ldv_54933: 
#line 1121 
  ;
  
#line 1120 
  if ((int)adapter->drv_sds_rings > i) 
#line 1122 
                                       goto ldv_54932; else 
#line 1125 
                                                            goto ldv_54934;
  ldv_54934: 
#line 1126 
  ;
  out: 
#line 1132 
  ;
  
#line 1133 
  qlcnic_free_mbx_args(& cmd);
  
#line 1134 
  return err;
}


#line 1137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_del_rx_ctx(struct qlcnic_adapter *adapter)
{
  int err;
  struct qlcnic_cmd_args cmd;
  int tmp;
  bool tmp_0;
  bool tmp_2;
  
#line 1140 
  u32 temp = 0U;
  
#line 1142 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 1144 
  tmp = qlcnic_alloc_mbx_args(& cmd,adapter,8U);
  
#line 1144 
  if (tmp != 0) 
#line 1145 
                goto return_label; else ;
  
#line 1147 
  tmp_0 = qlcnic_sriov_pf_check(adapter);
  
#line 1147 
  if ((int)tmp_0 != 0) 
#line 1148 
                       *(cmd.req.arg) |= 1610612736U;
  else {
    bool tmp_1;
    
#line 1147 
    tmp_1 = qlcnic_sriov_vf_check(adapter);
    
#line 1147 
    if ((int)tmp_1 != 0) 
#line 1148 
                         *(cmd.req.arg) |= 1610612736U; else ;
  }
  
#line 1150 
  tmp_2 = qlcnic_sriov_pf_check(adapter);
  
#line 1150 
  if ((int)tmp_2 != 0) 
#line 1151 
                       qlcnic_pf_set_interface_id_del_rx_ctx(adapter,& temp); else ;
  
#line 1153 
  *(cmd.req.arg + 1U) = (unsigned int)recv_ctx->context_id | temp;
  
#line 1154 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1155 
  if (err != 0) 
#line 1156 
                dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to destroy rx ctx in firmware\n"); else ;
  
#line 1159 
  recv_ctx->state = 0U;
  
#line 1160 
  qlcnic_free_mbx_args(& cmd);
  return_label: 
#line 1161 
                return;
}


#line 1163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_create_rx_ctx(struct qlcnic_adapter *adapter)
{
  int __retres;
  int i;
  int err;
  int index;
  int sds_mbx_size;
  int rds_mbx_size;
  u8 num_sds;
  u8 num_rds;
  u32 *buf;
  u32 intrpt_id;
  u32 intr_mask;
  struct qlcnic_host_sds_ring *sds;
  struct qlcnic_host_rds_ring *rds;
  struct qlcnic_sds_mbx sds_mbx;
  struct qlcnic_rds_mbx rds_mbx;
  struct qlcnic_cmd_args cmd;
  struct qlcnic_rcv_mbx_out *mbx_out;
  bool tmp;
  bool tmp_1;
  
#line 1167 
  u32 cap = 0U;
  
#line 1174 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 1175 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1176 
  num_rds = adapter->max_rds_rings;
  
#line 1178 
  if ((unsigned int)adapter->drv_sds_rings <= 8U) 
#line 1179 
                                                  num_sds = adapter->drv_sds_rings; else 
                                                                    
#line 1181 
                                                                    num_sds = (unsigned char)8U;
  
#line 1183 
  sds_mbx_size = 40;
  
#line 1184 
  rds_mbx_size = 24;
  
#line 1185 
  cap = 1U;
  
#line 1187 
  if ((adapter->flags & 32768U) != 0U) 
#line 1188 
                                       cap |= 131072U; else ;
  
#line 1191 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,7U);
  
#line 1193 
  if (err != 0) {
    
#line 1194 
    __retres = err;
    
#line 1194 
    goto return_label;
  }
  else ;
  
#line 1196 
  tmp = qlcnic_sriov_pf_check(adapter);
  
#line 1196 
  if ((int)tmp != 0) 
#line 1197 
                     *(cmd.req.arg) |= 1610612736U;
  else {
    bool tmp_0;
    
#line 1196 
    tmp_0 = qlcnic_sriov_vf_check(adapter);
    
#line 1196 
    if ((int)tmp_0 != 0) 
#line 1197 
                         *(cmd.req.arg) |= 1610612736U; else ;
  }
  
#line 1199 
  *(cmd.req.arg + 1U) = cap;
  
#line 1200 
  *(cmd.req.arg + 5U) = (unsigned int)((((int)num_rds << 5) | 1) | ((int)num_sds << 8));
  
#line 1203 
  tmp_1 = qlcnic_sriov_pf_check(adapter);
  
#line 1203 
  if ((int)tmp_1 != 0) 
#line 1204 
                       qlcnic_pf_set_interface_id_create_rx_ctx(adapter,cmd.req.arg + 6U); else ;
  
#line 1207 
  index = 8;
  
#line 1208 
  i = 0;
  
#line 1208 
  goto ldv_54965;
  ldv_54964: 
#line 1209 
  ;
  
#line 1209 
  memset((void *)(& sds_mbx),0,(unsigned long)sds_mbx_size);
  
#line 1210 
  sds = recv_ctx->sds_rings + i;
  
#line 1211 
  sds->consumer = 0U;
  
#line 1212 
  memset((void *)sds->desc_head,0,(unsigned long)sds->num_desc * 16UL);
  
#line 1213 
  sds_mbx.phy_addr_low = (unsigned int)sds->phys_addr;
  
#line 1214 
  sds_mbx.phy_addr_high = (unsigned int)(sds->phys_addr >> 32);
  
#line 1215 
  sds_mbx.sds_ring_size = (unsigned short)sds->num_desc;
  
#line 1216 
  if ((adapter->flags & 4U) != 0U) 
#line 1217 
                                   intrpt_id = (unsigned int)(ahw->intr_tbl + i)->id; else 
                                                                    
#line 1219 
                                                                    intrpt_id = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 10U)));
  
#line 1220 
  if ((unsigned int)(adapter->ahw)->diag_test != 2U) 
#line 1221 
                                                     sds_mbx.intrpt_id = (unsigned short)intrpt_id; else 
                                                                    
#line 1223 
                                                                    sds_mbx.intrpt_id = (unsigned short)65535U;
  
#line 1224 
  sds_mbx.intrpt_val = (unsigned char)0U;
  
#line 1225 
  buf = cmd.req.arg + index;
  
#line 1226 
  memcpy((void *)buf,(void const *)(& sds_mbx),(unsigned long)sds_mbx_size);
  
#line 1227 
  index = (int)((unsigned long)sds_mbx_size / 4UL + (unsigned long)index);
  
#line 1208 
  i += 1;
  ldv_54965: 
#line 1209 
  ;
  
#line 1208 
  if ((int)num_sds > i) 
#line 1210 
                        goto ldv_54964; else 
#line 1213 
                                             goto ldv_54966;
  ldv_54966: 
#line 1214 
  ;
  
#line 1230 
  index = 88;
  
#line 1231 
  rds = recv_ctx->rds_rings;
  
#line 1232 
  rds->producer = 0U;
  
#line 1233 
  memset((void *)(& rds_mbx),0,(unsigned long)rds_mbx_size);
  
#line 1234 
  rds_mbx.phy_addr_reg_low = (unsigned int)rds->phys_addr;
  
#line 1235 
  rds_mbx.phy_addr_reg_high = (unsigned int)(rds->phys_addr >> 32);
  
#line 1236 
  rds_mbx.reg_ring_sz = (unsigned short)rds->dma_size;
  
#line 1237 
  rds_mbx.reg_ring_len = (unsigned short)rds->num_desc;
  
#line 1239 
  rds = recv_ctx->rds_rings + 1U;
  
#line 1240 
  rds->producer = 0U;
  
#line 1241 
  rds_mbx.phy_addr_jmb_low = (unsigned int)rds->phys_addr;
  
#line 1242 
  rds_mbx.phy_addr_jmb_high = (unsigned int)(rds->phys_addr >> 32);
  
#line 1243 
  rds_mbx.jmb_ring_sz = (unsigned short)rds->dma_size;
  
#line 1244 
  rds_mbx.jmb_ring_len = (unsigned short)rds->num_desc;
  
#line 1245 
  buf = cmd.req.arg + index;
  
#line 1246 
  memcpy((void *)buf,(void const *)(& rds_mbx),(unsigned long)rds_mbx_size);
  
#line 1249 
  err = (*((ahw->hw_ops)->mbx_cmd))(adapter,& cmd);
  
#line 1250 
  if (err != 0) {
    
#line 1251 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to create Rx ctx in firmware%d\n",err);
    
#line 1253 
    goto out;
  }
  else ;
  
#line 1255 
  mbx_out = (struct qlcnic_rcv_mbx_out *)(cmd.rsp.arg + 1U);
  
#line 1256 
  recv_ctx->context_id = mbx_out->ctx_id;
  
#line 1257 
  recv_ctx->state = (unsigned int)mbx_out->state;
  
#line 1258 
  recv_ctx->virt_port = (unsigned short)mbx_out->vport_id;
  
#line 1259 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Rx Context[%d] Created, state:0x%x\n",(int)recv_ctx->context_id,recv_ctx->state);
  
#line 1263 
  rds = recv_ctx->rds_rings;
  
#line 1264 
  rds->crb_rcv_producer = ahw->pci_base0 + mbx_out->host_prod[0].reg_buf;
  
#line 1267 
  rds = recv_ctx->rds_rings + 1U;
  
#line 1268 
  rds->crb_rcv_producer = ahw->pci_base0 + mbx_out->host_prod[0].jmb_buf;
  
#line 1271 
  i = 0;
  
#line 1271 
  goto ldv_54969;
  ldv_54968: 
#line 1272 
  ;
  
#line 1272 
  sds = recv_ctx->sds_rings + i;
  
#line 1273 
  sds->crb_sts_consumer = ahw->pci_base0 + mbx_out->host_csmr[i];
  
#line 1275 
  if ((adapter->flags & 4U) != 0U) 
#line 1276 
                                   intr_mask = (ahw->intr_tbl + i)->src; else 
                                                                    
#line 1278 
                                                                    intr_mask = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 9U)));
  
#line 1279 
  sds->crb_intr_mask = ahw->pci_base0 + intr_mask;
  
#line 1271 
  i += 1;
  ldv_54969: 
#line 1272 
  ;
  
#line 1271 
  if ((int)num_sds > i) 
#line 1273 
                        goto ldv_54968; else 
#line 1276 
                                             goto ldv_54970;
  ldv_54970: 
#line 1277 
  ;
  
#line 1282 
  if ((unsigned int)adapter->drv_sds_rings > 8U) 
#line 1283 
                                                 err = qlcnic_83xx_add_rings(adapter); else ;
  out: 
#line 1284 
  ;
  
#line 1285 
  qlcnic_free_mbx_args(& cmd);
  
#line 1286 
  __retres = err;
  return_label: 
#line 1286 
                return __retres;
}


#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_del_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  struct qlcnic_cmd_args cmd;
  int tmp;
  bool tmp_0;
  bool tmp_2;
  int tmp_3;
  
#line 1293 
  u32 temp = 0U;
  
#line 1295 
  tmp = qlcnic_alloc_mbx_args(& cmd,adapter,10U);
  
#line 1295 
  if (tmp != 0) 
#line 1296 
                goto return_label; else ;
  
#line 1298 
  tmp_0 = qlcnic_sriov_pf_check(adapter);
  
#line 1298 
  if ((int)tmp_0 != 0) 
#line 1299 
                       *(cmd.req.arg) |= 1610612736U;
  else {
    bool tmp_1;
    
#line 1298 
    tmp_1 = qlcnic_sriov_vf_check(adapter);
    
#line 1298 
    if ((int)tmp_1 != 0) 
#line 1299 
                         *(cmd.req.arg) |= 1610612736U; else ;
  }
  
#line 1301 
  tmp_2 = qlcnic_sriov_pf_check(adapter);
  
#line 1301 
  if ((int)tmp_2 != 0) 
#line 1302 
                       qlcnic_pf_set_interface_id_del_tx_ctx(adapter,& temp); else ;
  
#line 1304 
  *(cmd.req.arg + 1U) = (unsigned int)tx_ring->ctx_id | temp;
  
#line 1305 
  tmp_3 = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1305 
  if (tmp_3 != 0) 
#line 1306 
                  dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to destroy tx ctx in firmware\n"); else ;
  
#line 1308 
  qlcnic_free_mbx_args(& cmd);
  return_label: 
#line 1309 
                return;
}


#line 1311  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_create_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx, int ring)
{
  int __retres;
  int err;
  u16 msix_id;
  u32 *buf;
  u32 intr_mask;
  struct qlcnic_cmd_args cmd;
  struct qlcnic_tx_mbx mbx;
  struct qlcnic_tx_mbx_out *mbx_out;
  u32 msix_vector;
  bool tmp_0;
  bool tmp_2;
  
#line 1316 
  u32 temp = 0U;
  
#line 1320 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1324 
  tx->producer = 0U;
  
#line 1325 
  tx->sw_consumer = 0U;
  
#line 1326 
  *(tx->hw_consumer) = 0U;
  
#line 1328 
  memset((void *)(& mbx),0,24UL);
  
#line 1331 
  mbx.phys_addr_low = (unsigned int)tx->phys_addr;
  
#line 1332 
  mbx.phys_addr_high = (unsigned int)(tx->phys_addr >> 32);
  
#line 1333 
  mbx.cnsmr_index_low = (unsigned int)tx->hw_cons_phys_addr;
  
#line 1334 
  mbx.cnsmr_index_high = (unsigned int)(tx->hw_cons_phys_addr >> 32);
  
#line 1335 
  mbx.size = (unsigned short)tx->num_desc;
  
#line 1336 
  if ((adapter->flags & 4U) != 0U) {
    
#line 1337 
    if ((adapter->flags & 65536U) == 0U) 
#line 1338 
                                         msix_vector = (unsigned int)((int)adapter->drv_sds_rings + ring); else 
                                                                    
#line 1340 
                                                                    msix_vector = (unsigned int)((int)adapter->drv_sds_rings + -1);
    
#line 1341 
    msix_id = (ahw->intr_tbl + msix_vector)->id;
  }
  else {
    unsigned int tmp;
    
#line 1343 
    tmp = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 10U)));
    
#line 1343 
    msix_id = (unsigned short)tmp;
  }
  
#line 1346 
  if ((unsigned int)(adapter->ahw)->diag_test != 2U) 
#line 1347 
                                                     mbx.intr_id = msix_id; else 
                                                                    
#line 1349 
                                                                    mbx.intr_id = (unsigned short)65535U;
  
#line 1350 
  mbx.src = (unsigned char)0U;
  
#line 1352 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,9U);
  
#line 1353 
  if (err != 0) {
    
#line 1354 
    __retres = err;
    
#line 1354 
    goto return_label;
  }
  else ;
  
#line 1356 
  tmp_0 = qlcnic_sriov_pf_check(adapter);
  
#line 1356 
  if ((int)tmp_0 != 0) 
#line 1357 
                       *(cmd.req.arg) |= 1610612736U;
  else {
    bool tmp_1;
    
#line 1356 
    tmp_1 = qlcnic_sriov_vf_check(adapter);
    
#line 1356 
    if ((int)tmp_1 != 0) 
#line 1357 
                         *(cmd.req.arg) |= 1610612736U; else ;
  }
  
#line 1359 
  tmp_2 = qlcnic_sriov_pf_check(adapter);
  
#line 1359 
  if ((int)tmp_2 != 0) 
#line 1360 
                       qlcnic_pf_set_interface_id_create_tx_ctx(adapter,& temp); else ;
  
#line 1362 
  *(cmd.req.arg + 1U) = 1U;
  
#line 1363 
  *(cmd.req.arg + 5U) = temp | 1U;
  
#line 1365 
  buf = cmd.req.arg + 6U;
  
#line 1366 
  memcpy((void *)buf,(void const *)(& mbx),24UL);
  
#line 1368 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1369 
  if (err != 0) {
    
#line 1370 
    netdev_err((struct net_device const *)adapter->netdev,"Failed to create Tx ctx in firmware 0x%x\n",err);
    
#line 1372 
    goto out;
  }
  else ;
  
#line 1374 
  mbx_out = (struct qlcnic_tx_mbx_out *)(cmd.rsp.arg + 2U);
  
#line 1375 
  tx->crb_cmd_producer = ahw->pci_base0 + mbx_out->host_prod;
  
#line 1376 
  tx->ctx_id = mbx_out->ctx_id;
  
#line 1377 
  if ((adapter->flags & 4U) != 0U && (adapter->flags & 65536U) == 0U) {
    
#line 1379 
    intr_mask = (ahw->intr_tbl + ((int)adapter->drv_sds_rings + ring))->src;
    
#line 1380 
    tx->crb_intr_mask = ahw->pci_base0 + intr_mask;
  }
  else ;
  
#line 1382 
  netdev_info((struct net_device const *)adapter->netdev,"Tx Context[0x%x] Created, state:0x%x\n",(int)tx->ctx_id,(int)mbx_out->state);
  out: 
#line 1385 
  ;
  
#line 1386 
  qlcnic_free_mbx_args(& cmd);
  
#line 1387 
  __retres = err;
  return_label: 
#line 1387 
                return __retres;
}


#line 1390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_diag_alloc_res(struct net_device *netdev, int test, u8 num_sds_ring)
{
  int __retres;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_rds_ring *rds_ring;
  u8 ring;
  int ret;
  bool tmp_0;
  
#line 1393 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1396 
  u16 adapter_state = adapter->is_up;
  
#line 1400 
  netif_device_detach(netdev);
  
#line 1402 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 1402 
  if ((int)tmp_0 != 0) 
#line 1403 
                       __qlcnic_down(adapter,netdev); else ;
  
#line 1405 
  qlcnic_detach(adapter);
  
#line 1407 
  adapter->drv_sds_rings = (unsigned char)1U;
  
#line 1408 
  (adapter->ahw)->diag_test = (unsigned char)test;
  
#line 1409 
  (adapter->ahw)->linkup = (unsigned char)0U;
  
#line 1411 
  ret = qlcnic_attach(adapter);
  
#line 1412 
  if (ret != 0) {
    
#line 1413 
    netif_device_attach(netdev);
    
#line 1414 
    __retres = ret;
    
#line 1414 
    goto return_label;
  }
  else ;
  
#line 1417 
  ret = qlcnic_fw_create_ctx(adapter);
  
#line 1418 
  if (ret != 0) {
    
#line 1419 
    qlcnic_detach(adapter);
    
#line 1420 
    if ((unsigned int)adapter_state == 777U) {
      
#line 1421 
      adapter->drv_sds_rings = num_sds_ring;
      
#line 1422 
      qlcnic_attach(adapter);
    }
    else ;
    
#line 1424 
    netif_device_attach(netdev);
    
#line 1425 
    __retres = ret;
    
#line 1425 
    goto return_label;
  }
  else ;
  
#line 1428 
  ring = (unsigned char)0U;
  
#line 1428 
  goto ldv_55005;
  ldv_55004: 
#line 1429 
  ;
  
#line 1429 
  rds_ring = (adapter->recv_ctx)->rds_rings + (int)ring;
  
#line 1430 
  qlcnic_post_rx_buffers(adapter,rds_ring,(unsigned char)((int)ring));
  
#line 1428 
  ring = (u8)((int)ring + 1);
  ldv_55005: 
#line 1429 
  ;
  
#line 1428 
  if ((int)adapter->max_rds_rings > (int)ring) 
#line 1430 
                                               goto ldv_55004; else 
#line 1433 
                                                                    goto ldv_55006;
  ldv_55006: 
#line 1434 
  ;
  
#line 1433 
  if ((unsigned int)(adapter->ahw)->diag_test == 1U) {
    
#line 1434 
    ring = (unsigned char)0U;
    
#line 1434 
    goto ldv_55008;
    ldv_55007: 
#line 1435 
    ;
    
#line 1435 
    sds_ring = (adapter->recv_ctx)->sds_rings + (int)ring;
    
#line 1436 
    qlcnic_enable_sds_intr(adapter,sds_ring);
    
#line 1434 
    ring = (u8)((int)ring + 1);
    ldv_55008: 
#line 1435 
    ;
    
#line 1434 
    if ((int)adapter->drv_sds_rings > (int)ring) 
#line 1436 
                                                 goto ldv_55007; else 
                                                                   
#line 1439 
                                                                   goto ldv_55009;
    ldv_55009: 
#line 1440 
    ;
  }
  else ;
  
#line 1440 
  if ((unsigned int)(adapter->ahw)->diag_test == 2U) {
    
#line 1441 
    (adapter->ahw)->loopback_state = (unsigned char)0U;
    
#line 1442 
    (*(((adapter->ahw)->hw_ops)->setup_link_event))(adapter,1);
  }
  else ;
  
#line 1445 
  set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 1446 
  __retres = 0;
  return_label: 
#line 1446 
                return __retres;
}


#line 1449  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_diag_free_res(struct net_device *netdev, u8 drv_sds_rings)
{
  struct qlcnic_host_sds_ring *sds_ring;
  int ring;
  int tmp_0;
  bool tmp_1;
  
#line 1452 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1456 
  set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 1457 
  if ((unsigned int)(adapter->ahw)->diag_test == 1U) {
    
#line 1458 
    ring = 0;
    
#line 1458 
    goto ldv_55018;
    ldv_55017: 
#line 1459 
    ;
    
#line 1459 
    sds_ring = (adapter->recv_ctx)->sds_rings + ring;
    
#line 1460 
    if ((adapter->flags & 4U) != 0U) 
#line 1461 
                                     qlcnic_disable_sds_intr(adapter,sds_ring); else ;
    
#line 1458 
    ring += 1;
    ldv_55018: 
#line 1459 
    ;
    
#line 1458 
    if ((int)adapter->drv_sds_rings > ring) 
#line 1460 
                                            goto ldv_55017; else 
#line 1463 
                                                                 goto ldv_55019;
    ldv_55019: 
#line 1464 
    ;
  }
  else ;
  
#line 1465 
  qlcnic_fw_destroy_ctx(adapter);
  
#line 1466 
  qlcnic_detach(adapter);
  
#line 1468 
  (adapter->ahw)->diag_test = (unsigned char)0U;
  
#line 1469 
  adapter->drv_sds_rings = drv_sds_rings;
  
#line 1471 
  tmp_0 = qlcnic_attach(adapter);
  
#line 1471 
  if (tmp_0 != 0) 
#line 1472 
                  goto out; else ;
  
#line 1474 
  tmp_1 = netif_running((struct net_device const *)netdev);
  
#line 1474 
  if ((int)tmp_1 != 0) 
#line 1475 
                       __qlcnic_up(adapter,netdev); else ;
  out: 
#line 1477 
  ;
  
#line 1478 
  netif_device_attach(netdev);
  
#line 1479 
  return;
}


#line 1481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_get_beacon_state(struct qlcnic_adapter *adapter)
{
  struct qlcnic_cmd_args cmd;
  u8 beacon_state;
  
#line 1483 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1486 
  int err = 0;
  
#line 1488 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,106U);
  
#line 1489 
  if (err == 0) {
    
#line 1490 
    err = qlcnic_issue_cmd(adapter,& cmd);
    
#line 1491 
    if (err == 0) {
      
#line 1492 
      beacon_state = (unsigned char)*(cmd.rsp.arg + 4U);
      
#line 1493 
      if ((unsigned int)beacon_state == 13U) 
#line 1494 
                                             ahw->beacon_state = (unsigned char)0U;
      else 
        
#line 1495 
        if ((unsigned int)beacon_state == 14U) 
#line 1496 
                                               ahw->beacon_state = (unsigned char)1U; else ;
    }
    else ;
  }
  else 
#line 1499 
       netdev_err((struct net_device const *)adapter->netdev,"Get beacon state failed, err=%d\n",err);
  
#line 1503 
  qlcnic_free_mbx_args(& cmd);
  
#line 1505 
  return;
}


#line 1508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_config_led(struct qlcnic_adapter *adapter, u32 state, u32 beacon)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  u32 mbx_in;
  int i;
  
#line 1513 
  int status = 0;
  
#line 1515 
  if (state != 0U) {
    
#line 1517 
    status = qlcnic_alloc_mbx_args(& cmd,adapter,106U);
    
#line 1519 
    if (status != 0) {
      
#line 1520 
      __retres = status;
      
#line 1520 
      goto return_label;
    }
    else ;
    
#line 1522 
    status = qlcnic_issue_cmd(adapter,& cmd);
    
#line 1523 
    if (status != 0) {
      
#line 1524 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"Get led config failed.\n");
      
#line 1526 
      goto mbx_err;
    }
    else {
      
#line 1528 
      i = 0;
      
#line 1528 
      goto ldv_55039;
      ldv_55038: 
#line 1529 
      ;
      
#line 1529 
      (adapter->ahw)->mbox_reg[i] = *(cmd.rsp.arg + ((unsigned int)i + 1U));
      
#line 1528 
      i += 1;
      ldv_55039: 
#line 1529 
      ;
      
#line 1528 
      if (i <= 3) 
#line 1530 
                  goto ldv_55038; else 
#line 1533 
                                       goto ldv_55040;
      ldv_55040: 
#line 1534 
      ;
    }
    
#line 1531 
    qlcnic_free_mbx_args(& cmd);
    
#line 1533 
    mbx_in = 83821823U;
    
#line 1535 
    status = qlcnic_alloc_mbx_args(& cmd,adapter,105U);
    
#line 1537 
    if (status != 0) {
      
#line 1538 
      __retres = status;
      
#line 1538 
      goto return_label;
    }
    else ;
    
#line 1540 
    *(cmd.req.arg + 1U) = mbx_in;
    
#line 1541 
    *(cmd.req.arg + 2U) = mbx_in;
    
#line 1542 
    *(cmd.req.arg + 3U) = mbx_in;
    
#line 1543 
    if (beacon != 0U) 
#line 1544 
                      *(cmd.req.arg + 4U) = 14U; else ;
    
#line 1545 
    status = qlcnic_issue_cmd(adapter,& cmd);
    
#line 1546 
    if (status != 0) 
#line 1547 
                     dev_err((struct device const *)(& (adapter->pdev)->dev),"Set led config failed.\n"); else ;
    mbx_err: 
#line 1550 
    ;
    
#line 1551 
    qlcnic_free_mbx_args(& cmd);
    
#line 1552 
    __retres = status;
    
#line 1552 
    goto return_label;
  }
  else {
    
#line 1556 
    status = qlcnic_alloc_mbx_args(& cmd,adapter,105U);
    
#line 1558 
    if (status != 0) {
      
#line 1559 
      __retres = status;
      
#line 1559 
      goto return_label;
    }
    else ;
    
#line 1561 
    *(cmd.req.arg + 1U) = (adapter->ahw)->mbox_reg[0];
    
#line 1562 
    *(cmd.req.arg + 2U) = (adapter->ahw)->mbox_reg[1];
    
#line 1563 
    *(cmd.req.arg + 3U) = (adapter->ahw)->mbox_reg[2];
    
#line 1564 
    if (beacon != 0U) 
#line 1565 
                      *(cmd.req.arg + 4U) = (adapter->ahw)->mbox_reg[3]; else ;
    
#line 1566 
    status = qlcnic_issue_cmd(adapter,& cmd);
    
#line 1567 
    if (status != 0) 
#line 1568 
                     dev_err((struct device const *)(& (adapter->pdev)->dev),"Restoring led config failed.\n"); else ;
    
#line 1570 
    qlcnic_free_mbx_args(& cmd);
    
#line 1571 
    __retres = status;
    
#line 1571 
    goto return_label;
  }
  return_label: 
#line 1515 
                return __retres;
}


#line 1575  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_set_led(struct net_device *netdev, enum ethtool_phys_id_state state)
{
  int __retres;
  
#line 1578 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1579 
  int err = -5;
  
#line 1579 
  int active = 1;
  
#line 1581 
  if ((unsigned int)(adapter->ahw)->op_mode == 2U) {
    
#line 1582 
    netdev_warn((struct net_device const *)netdev,"LED test is not supported in non-privileged mode\n");
    
#line 1584 
    __retres = -95;
    
#line 1584 
    goto return_label;
  }
  else ;
  
#line 1587 
  switch ((unsigned int)state) {
    int tmp_0;
    int tmp_1;
    int tmp_2;
    case (unsigned int)1: 
#line 1588 
    ;
    
#line 1589 
    tmp_0 = test_and_set_bit(7L,(unsigned long volatile *)(& adapter->state));
    
#line 1589 
    if (tmp_0 != 0) {
      
#line 1590 
      __retres = -16;
      
#line 1590 
      goto return_label;
    }
    else ;
    
#line 1592 
    tmp_1 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
    
#line 1592 
    if (tmp_1 != 0) 
#line 1593 
                    goto ldv_55049; else ;
    
#line 1595 
    err = qlcnic_83xx_config_led(adapter,(unsigned int)active,0U);
    
#line 1596 
    if (err != 0) 
#line 1597 
                  netdev_err((struct net_device const *)netdev,"Failed to set LED blink state\n"); else ;
    
#line 1598 
    goto ldv_55049;
    case (unsigned int)0: 
#line 1599 
    ;
    
#line 1600 
    active = 0;
    
#line 1602 
    tmp_2 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
    
#line 1602 
    if (tmp_2 != 0) 
#line 1603 
                    goto ldv_55049; else ;
    
#line 1605 
    err = qlcnic_83xx_config_led(adapter,(unsigned int)active,0U);
    
#line 1606 
    if (err != 0) 
#line 1607 
                  netdev_err((struct net_device const *)netdev,"Failed to reset LED blink state\n"); else ;
    
#line 1608 
    goto ldv_55049;
    default: 
#line 1610 
    ;
    
#line 1611 
    __retres = -22;
    
#line 1611 
    goto return_label;
  }
  ldv_55049: 
#line 1614 
  ;
  
#line 1614 
  if (active == 0 || err != 0) 
#line 1615 
                               set_bit(7L,(unsigned long volatile *)(& adapter->state)); else ;
  
#line 1617 
  __retres = err;
  return_label: 
#line 1617 
                return __retres;
}


#line 1620  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_initialize_nic(struct qlcnic_adapter *adapter, int enable)
{
  struct qlcnic_cmd_args cmd;
  int status;
  bool tmp;
  
#line 1625 
  tmp = qlcnic_sriov_vf_check(adapter);
  
#line 1625 
  if ((int)tmp != 0) 
#line 1626 
                     goto return_label; else ;
  
#line 1628 
  if (enable != 0) 
#line 1629 
                   status = qlcnic_alloc_mbx_args(& cmd,adapter,96U); else 
                                                                    
#line 1632 
                                                                    status = qlcnic_alloc_mbx_args(& cmd,adapter,97U);
  
#line 1635 
  if (status != 0) 
#line 1636 
                   goto return_label; else ;
  
#line 1638 
  *(cmd.req.arg + 1U) = 2147483649U;
  
#line 1640 
  if (adapter->dcb != (struct qlcnic_dcb *)0) 
#line 1641 
                                              *(cmd.req.arg + 1U) |= 2U; else ;
  
#line 1643 
  status = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1644 
  if (status != 0) {
    char *tmp_0;
    
#line 1646 
    if (enable != 0) 
#line 1646 
                     tmp_0 = (char *)"register"; else 
#line 1646 
                                                      tmp_0 = (char *)"unregister";
    
#line 1645 
    ;
    
#line 1645 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to %s in NIC IDC function event.\n",tmp_0);
  }
  else ;
  
#line 1649 
  qlcnic_free_mbx_args(& cmd);
  return_label: 
#line 1650 
                return;
}


#line 1652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_set_port_config(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  int err;
  
#line 1657 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,102U);
  
#line 1658 
  if (err != 0) {
    
#line 1659 
    __retres = err;
    
#line 1659 
    goto return_label;
  }
  else ;
  
#line 1661 
  *(cmd.req.arg + 1U) = (adapter->ahw)->port_config;
  
#line 1662 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1663 
  if (err != 0) 
#line 1664 
                _dev_info((struct device const *)(& (adapter->pdev)->dev),"Set Port Config failed.\n"); else ;
  
#line 1665 
  qlcnic_free_mbx_args(& cmd);
  
#line 1666 
  __retres = err;
  return_label: 
#line 1666 
                return __retres;
}


#line 1669  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_get_port_config(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  int err;
  
#line 1674 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,103U);
  
#line 1675 
  if (err != 0) {
    
#line 1676 
    __retres = err;
    
#line 1676 
    goto return_label;
  }
  else ;
  
#line 1678 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1679 
  if (err != 0) 
#line 1680 
                _dev_info((struct device const *)(& (adapter->pdev)->dev),"Get Port config failed\n"); else 
                                                                    
#line 1682 
                                                                    (adapter->ahw)->port_config = *(cmd.rsp.arg + 1U);
  
#line 1683 
  qlcnic_free_mbx_args(& cmd);
  
#line 1684 
  __retres = err;
  return_label: 
#line 1684 
                return __retres;
}


#line 1687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_setup_link_event(struct qlcnic_adapter *adapter, int enable)
{
  int __retres;
  int err;
  u32 temp;
  struct qlcnic_cmd_args cmd;
  int tmp;
  
#line 1693 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,72U);
  
#line 1694 
  if (err != 0) {
    
#line 1695 
    __retres = err;
    
#line 1695 
    goto return_label;
  }
  else ;
  
#line 1697 
  temp = (unsigned int)((int)(adapter->recv_ctx)->context_id << 16);
  
#line 1698 
  if (enable != 0) 
#line 1698 
                   tmp = 257; else 
#line 1698 
                                   tmp = 256;
  
#line 1698 
  *(cmd.req.arg + 1U) = (unsigned int)tmp | temp;
  
#line 1699 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1700 
  if (err != 0) 
#line 1701 
                _dev_info((struct device const *)(& (adapter->pdev)->dev),"Setup linkevent mailbox failed\n"); else ;
  
#line 1703 
  qlcnic_free_mbx_args(& cmd);
  
#line 1704 
  __retres = err;
  return_label: 
#line 1704 
                return __retres;
}


#line 1707  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_set_interface_id_promisc(struct qlcnic_adapter *adapter, u32 *interface_id)
{
  bool tmp_1;
  
#line 1710 
  tmp_1 = qlcnic_sriov_pf_check(adapter);
  
#line 1710 
  if ((int)tmp_1 != 0) {
    
#line 1711 
    qlcnic_alloc_lb_filters_mem(adapter);
    
#line 1712 
    qlcnic_pf_set_interface_id_promisc(adapter,interface_id);
    
#line 1713 
    adapter->rx_mac_learn = (_Bool)1;
  }
  else {
    int tmp_0;
    bool tmp;
    
#line 1715 
    tmp = qlcnic_sriov_vf_check(adapter);
    
#line 1715 
    if (tmp) 
#line 1715 
             tmp_0 = 0; else 
#line 1715 
                             tmp_0 = 1;
    
#line 1715 
    if (tmp_0) 
#line 1716 
               *interface_id = (unsigned int)((int)(adapter->recv_ctx)->context_id << 16); else ;
  }
  
#line 1717 
  return;
}


#line 1720  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_nic_set_promisc(struct qlcnic_adapter *adapter, u32 mode)
{
  int __retres;
  int err;
  bool tmp_0;
  
#line 1722 
  struct qlcnic_cmd_args *cmd = (struct qlcnic_cmd_args *)0;
  
#line 1723 
  u32 temp = 0U;
  
#line 1726 
  if ((adapter->recv_ctx)->state == 0U) {
    
#line 1727 
    __retres = -5;
    
#line 1727 
    goto return_label;
  }
  else ;
  
#line 1729 
  cmd = (struct qlcnic_cmd_args *)kzalloc_5(200UL,32U);
  
#line 1730 
  if (cmd == (struct qlcnic_cmd_args *)0) {
    
#line 1731 
    __retres = -12;
    
#line 1731 
    goto return_label;
  }
  else ;
  
#line 1733 
  err = qlcnic_alloc_mbx_args(cmd,adapter,73U);
  
#line 1735 
  if (err != 0) 
#line 1736 
                goto out; else ;
  
#line 1738 
  cmd->type = 1U;
  
#line 1739 
  qlcnic_83xx_set_interface_id_promisc(adapter,& temp);
  
#line 1741 
  tmp_0 = qlcnic_84xx_check(adapter);
  
#line 1741 
  if ((int)tmp_0 != 0) {
    bool tmp_1;
    
#line 1741 
    tmp_1 = qlcnic_sriov_pf_check(adapter);
    
#line 1741 
    if ((int)tmp_1 != 0) 
#line 1742 
                         mode = 1U; else ;
  }
  else ;
  
#line 1744 
  *(cmd->req.arg + 1U) = mode | temp;
  
#line 1745 
  err = qlcnic_issue_cmd(adapter,cmd);
  
#line 1746 
  if (err == 0) {
    
#line 1747 
    __retres = err;
    
#line 1747 
    goto return_label;
  }
  else ;
  
#line 1749 
  qlcnic_free_mbx_args(cmd);
  out: 
#line 1751 
  ;
  
#line 1752 
  kfree((void const *)cmd);
  
#line 1753 
  __retres = err;
  return_label: 
#line 1753 
                return __retres;
}


#line 1756  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_loopback_test(struct net_device *netdev, u8 mode)
{
  int __retres;
  int tmp_0;
  int tmp_1;
  char *tmp_2;
  int tmp_3;
  int tmp_4;
  
#line 1758 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1759 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1760 
  u8 drv_sds_rings = adapter->drv_sds_rings;
  
#line 1761 
  u8 drv_tx_rings = adapter->drv_tx_rings;
  
#line 1762 
  int ret = 0;
  
#line 1762 
  int loop = 0;
  
#line 1764 
  if ((unsigned int)ahw->op_mode == 2U) {
    
#line 1765 
    netdev_warn((struct net_device const *)netdev,"Loopback test not supported in non privileged mode\n");
    
#line 1767 
    __retres = -524;
    
#line 1767 
    goto return_label;
  }
  else ;
  
#line 1770 
  tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 1770 
  if (tmp_0 != 0) {
    
#line 1771 
    netdev_info((struct net_device const *)netdev,"Device is resetting\n");
    
#line 1772 
    __retres = -16;
    
#line 1772 
    goto return_label;
  }
  else ;
  
#line 1775 
  tmp_1 = qlcnic_get_diag_lock(adapter);
  
#line 1775 
  if (tmp_1 != 0) {
    
#line 1776 
    netdev_info((struct net_device const *)netdev,"Device is in diagnostics mode\n");
    
#line 1777 
    __retres = -16;
    
#line 1777 
    goto return_label;
  }
  else ;
  
#line 1780 
  if ((unsigned int)mode == 1U) 
#line 1780 
                                tmp_2 = (char *)"internal"; else 
#line 1780 
                                                                 tmp_2 = (char *)"external";
  
#line 1780 
  ;
  
#line 1780 
  netdev_info((struct net_device const *)netdev,"%s loopback test in progress\n",tmp_2);
  
#line 1783 
  ret = qlcnic_83xx_diag_alloc_res(netdev,2,(unsigned char)((int)drv_sds_rings));
  
#line 1785 
  if (ret != 0) 
#line 1786 
                goto fail_diag_alloc; else ;
  
#line 1788 
  ret = qlcnic_83xx_set_lb_mode(adapter,(unsigned char)((int)mode));
  
#line 1789 
  if (ret != 0) 
#line 1790 
                goto free_diag_res; else ;
  ldv_55099: 
#line 1791 
  ;
  
#line 1794 
  msleep(20U);
  
#line 1796 
  tmp_3 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 1796 
  if (tmp_3 != 0) {
    
#line 1797 
    netdev_info((struct net_device const *)netdev,"Device is resetting, free LB test resources\n");
    
#line 1799 
    ret = -16;
    
#line 1800 
    goto free_diag_res;
  }
  else ;
  
#line 1802 
  tmp_4 = loop;
  
#line 1802 
  loop += 1;
  
#line 1802 
  ;
  
#line 1802 
  if (tmp_4 > 250) {
    
#line 1803 
    netdev_info((struct net_device const *)netdev,"Firmware didn\'t sent link up event to loopback request\n");
    
#line 1805 
    ret = -110;
    
#line 1806 
    qlcnic_83xx_clear_lb_mode(adapter,(unsigned char)((int)mode));
    
#line 1807 
    goto free_diag_res;
  }
  else ;
  
#line 1809 
  if ((((unsigned int)(adapter->ahw)->linkup != 0U && (unsigned int)ahw->has_link_events != 0U) != 0) != 1) 
    
#line 1811 
    goto ldv_55099; else 
#line 1814 
                         goto ldv_55100;
  ldv_55100: 
#line 1815 
  ;
  
#line 1811 
  ret = qlcnic_do_lb_test(adapter,(unsigned char)((int)mode));
  
#line 1813 
  qlcnic_83xx_clear_lb_mode(adapter,(unsigned char)((int)mode));
  free_diag_res: 
#line 1815 
  ;
  
#line 1816 
  qlcnic_83xx_diag_free_res(netdev,(unsigned char)((int)drv_sds_rings));
  fail_diag_alloc: 
#line 1818 
  ;
  
#line 1819 
  adapter->drv_sds_rings = drv_sds_rings;
  
#line 1820 
  adapter->drv_tx_rings = drv_tx_rings;
  
#line 1821 
  qlcnic_release_diag_lock(adapter);
  
#line 1822 
  __retres = ret;
  return_label: 
#line 1822 
                return __retres;
}


#line 1825  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_extend_lb_idc_cmpltn_wait(struct qlcnic_adapter *adapter, u32 *max_wait_count)
{
  int temp;
  
#line 1828 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1831 
  netdev_info((struct net_device const *)adapter->netdev,"Received loopback IDC time extend event for 0x%x seconds\n",(int)ahw->extend_lb_time);
  
#line 1833 
  temp = (int)ahw->extend_lb_time * 1000;
  
#line 1834 
  *max_wait_count += (unsigned int)(temp / 20);
  
#line 1835 
  ahw->extend_lb_time = (unsigned char)0U;
  
#line 1836 
  return;
}


#line 1838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_set_lb_mode(struct qlcnic_adapter *adapter, u8 mode)
{
  int __retres;
  u32 config;
  u32 max_wait_count;
  int tmp;
  int tmp_0;
  int tmp_1;
  
#line 1840 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1841 
  struct net_device *netdev = adapter->netdev;
  
#line 1843 
  int status = 0;
  
#line 1843 
  int loop = 0;
  
#line 1845 
  ahw->extend_lb_time = (unsigned char)0U;
  
#line 1846 
  max_wait_count = 250U;
  
#line 1847 
  status = qlcnic_83xx_get_port_config(adapter);
  
#line 1848 
  if (status != 0) {
    
#line 1849 
    __retres = status;
    
#line 1849 
    goto return_label;
  }
  else ;
  
#line 1851 
  config = ahw->port_config;
  
#line 1854 
  if ((config & 4U) != 0U || (config & 8U) != 0U) {
    
#line 1856 
    netdev_err((struct net_device const *)netdev,"Port already in Loopback mode.\n");
    
#line 1858 
    __retres = -115;
    
#line 1858 
    goto return_label;
  }
  else ;
  
#line 1861 
  set_bit(3L,(unsigned long volatile *)(& ahw->idc.status));
  
#line 1863 
  if ((unsigned int)mode == 1U) 
#line 1864 
                                ahw->port_config |= 4U; else ;
  
#line 1865 
  if ((unsigned int)mode == 2U) 
#line 1866 
                                ahw->port_config |= 8U; else ;
  
#line 1868 
  status = qlcnic_83xx_set_port_config(adapter);
  
#line 1869 
  if (status != 0) {
    
#line 1870 
    netdev_err((struct net_device const *)netdev,"Failed to Set Loopback Mode = 0x%x.\n",ahw->port_config);
    
#line 1873 
    ahw->port_config = config;
    
#line 1874 
    set_bit(3L,(unsigned long volatile *)(& ahw->idc.status));
    
#line 1875 
    __retres = status;
    
#line 1875 
    goto return_label;
  }
  else ;
  ldv_55118: 
#line 1877 
  ;
  
#line 1880 
  msleep(20U);
  
#line 1882 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 1882 
  if (tmp != 0) {
    
#line 1883 
    netdev_info((struct net_device const *)netdev,"Device is resetting, free LB test resources\n");
    
#line 1885 
    set_bit(3L,(unsigned long volatile *)(& ahw->idc.status));
    
#line 1886 
    __retres = -16;
    
#line 1886 
    goto return_label;
  }
  else ;
  
#line 1889 
  if ((unsigned int)ahw->extend_lb_time != 0U) 
#line 1890 
                                               qlcnic_extend_lb_idc_cmpltn_wait(adapter,& max_wait_count); else ;
  
#line 1893 
  tmp_0 = loop;
  
#line 1893 
  loop += 1;
  
#line 1893 
  ;
  
#line 1893 
  if ((unsigned int)tmp_0 > max_wait_count) {
    
#line 1894 
    netdev_err((struct net_device const *)netdev,"%s: Did not receive loopback IDC completion AEN\n","qlcnic_83xx_set_lb_mode");
    
#line 1896 
    set_bit(3L,(unsigned long volatile *)(& ahw->idc.status));
    
#line 1897 
    qlcnic_83xx_clear_lb_mode(adapter,(unsigned char)((int)mode));
    
#line 1898 
    __retres = -110;
    
#line 1898 
    goto return_label;
  }
  else ;
  
#line 1900 
  tmp_1 = constant_test_bit(3L,(unsigned long const volatile *)(& ahw->idc.status));
  
#line 1900 
  if (tmp_1 != 0) 
#line 1902 
                  goto ldv_55118; else 
#line 1905 
                                       goto ldv_55119;
  ldv_55119: 
#line 1906 
  ;
  
#line 1902 
  qlcnic_sre_macaddr_change(adapter,(u8 *)(& adapter->mac_addr),(unsigned short)0,(unsigned char)1);
  
#line 1904 
  __retres = status;
  return_label: 
#line 1904 
                return __retres;
}


#line 1907  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_clear_lb_mode(struct qlcnic_adapter *adapter, u8 mode)
{
  int __retres;
  u32 max_wait_count;
  int tmp;
  int tmp_0;
  int tmp_1;
  
#line 1909 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1910 
  u32 config = ahw->port_config;
  
#line 1911 
  struct net_device *netdev = adapter->netdev;
  
#line 1912 
  int status = 0;
  
#line 1912 
  int loop = 0;
  
#line 1914 
  ahw->extend_lb_time = (unsigned char)0U;
  
#line 1915 
  max_wait_count = 250U;
  
#line 1916 
  set_bit(3L,(unsigned long volatile *)(& ahw->idc.status));
  
#line 1917 
  if ((unsigned int)mode == 1U) 
#line 1918 
                                ahw->port_config &= 4294967291U; else ;
  
#line 1919 
  if ((unsigned int)mode == 2U) 
#line 1920 
                                ahw->port_config &= 4294967287U; else ;
  
#line 1922 
  status = qlcnic_83xx_set_port_config(adapter);
  
#line 1923 
  if (status != 0) {
    
#line 1924 
    netdev_err((struct net_device const *)netdev,"Failed to Clear Loopback Mode = 0x%x.\n",ahw->port_config);
    
#line 1927 
    ahw->port_config = config;
    
#line 1928 
    set_bit(3L,(unsigned long volatile *)(& ahw->idc.status));
    
#line 1929 
    __retres = status;
    
#line 1929 
    goto return_label;
  }
  else ;
  ldv_55131: 
#line 1931 
  ;
  
#line 1934 
  msleep(20U);
  
#line 1936 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 1936 
  if (tmp != 0) {
    
#line 1937 
    netdev_info((struct net_device const *)netdev,"Device is resetting, free LB test resources\n");
    
#line 1939 
    set_bit(3L,(unsigned long volatile *)(& ahw->idc.status));
    
#line 1940 
    __retres = -16;
    
#line 1940 
    goto return_label;
  }
  else ;
  
#line 1943 
  if ((unsigned int)ahw->extend_lb_time != 0U) 
#line 1944 
                                               qlcnic_extend_lb_idc_cmpltn_wait(adapter,& max_wait_count); else ;
  
#line 1947 
  tmp_0 = loop;
  
#line 1947 
  loop += 1;
  
#line 1947 
  ;
  
#line 1947 
  if ((unsigned int)tmp_0 > max_wait_count) {
    
#line 1948 
    netdev_err((struct net_device const *)netdev,"%s: Did not receive loopback IDC completion AEN\n","qlcnic_83xx_clear_lb_mode");
    
#line 1950 
    set_bit(3L,(unsigned long volatile *)(& ahw->idc.status));
    
#line 1951 
    __retres = -110;
    
#line 1951 
    goto return_label;
  }
  else ;
  
#line 1953 
  tmp_1 = constant_test_bit(3L,(unsigned long const volatile *)(& ahw->idc.status));
  
#line 1953 
  if (tmp_1 != 0) 
#line 1955 
                  goto ldv_55131; else 
#line 1958 
                                       goto ldv_55132;
  ldv_55132: 
#line 1959 
  ;
  
#line 1955 
  qlcnic_sre_macaddr_change(adapter,(u8 *)(& adapter->mac_addr),(unsigned short)0,(unsigned char)2);
  
#line 1957 
  __retres = status;
  return_label: 
#line 1957 
                return __retres;
}


#line 1960  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_set_interface_id_ipaddr(struct qlcnic_adapter *adapter, u32 *interface_id)
{
  bool tmp_1;
  
#line 1963 
  tmp_1 = qlcnic_sriov_pf_check(adapter);
  
#line 1963 
  if ((int)tmp_1 != 0) 
#line 1964 
                       qlcnic_pf_set_interface_id_ipaddr(adapter,interface_id);
  else {
    int tmp_0;
    bool tmp;
    
#line 1966 
    tmp = qlcnic_sriov_vf_check(adapter);
    
#line 1966 
    if (tmp) 
#line 1966 
             tmp_0 = 0; else 
#line 1966 
                             tmp_0 = 1;
    
#line 1966 
    if (tmp_0) 
#line 1967 
               *interface_id = (unsigned int)((int)(adapter->recv_ctx)->context_id << 16); else ;
  }
  
#line 1968 
  return;
}


#line 1971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_config_ipaddr(struct qlcnic_adapter *adapter, __be32 ip, int mode)
{
  int err;
  u32 temp_ip;
  struct qlcnic_cmd_args cmd;
  
#line 1975 
  u32 temp = 0U;
  
#line 1978 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,1U);
  
#line 1980 
  if (err != 0) 
#line 1981 
                goto return_label; else ;
  
#line 1983 
  qlcnic_83xx_set_interface_id_ipaddr(adapter,& temp);
  
#line 1985 
  if (mode == 2) 
#line 1986 
                 *(cmd.req.arg + 1U) = temp | 1U; else 
#line 1988 
                                                       *(cmd.req.arg + 1U) = temp | 2U;
  
#line 1998 
  if (0 != 0) {
    unsigned int tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    
#line 1998 
    if (0 != 0) 
#line 1998 
                tmp_2 = ((((ip << 24) | ((ip << 8) & 16711680U)) | ((ip >> 8) & 65280U)) | (ip >> 24)) << 24;
    else {
      __u32 tmp_1;
      
#line 1998 
      tmp_1 = __fswab32(ip);
      
#line 1998 
      tmp_2 = tmp_1 << 24;
    }
    
#line 1998 
    if (0 != 0) 
#line 1998 
                tmp_4 = (((((ip << 24) | ((ip << 8) & 16711680U)) | ((ip >> 8) & 65280U)) | (ip >> 24)) << 8) & 16711680U;
    else {
      __u32 tmp_3;
      
#line 1998 
      tmp_3 = __fswab32(ip);
      
#line 1998 
      tmp_4 = (tmp_3 << 8) & 16711680U;
    }
    
#line 1998 
    if (0 != 0) 
#line 1998 
                tmp_6 = (((((ip << 24) | ((ip << 8) & 16711680U)) | ((ip >> 8) & 65280U)) | (ip >> 24)) >> 8) & 65280U;
    else {
      __u32 tmp_5;
      
#line 1998 
      tmp_5 = __fswab32(ip);
      
#line 1998 
      tmp_6 = (tmp_5 >> 8) & 65280U;
    }
    
#line 1998 
    if (0 != 0) 
#line 1998 
                tmp_8 = ((((ip << 24) | ((ip << 8) & 16711680U)) | ((ip >> 8) & 65280U)) | (ip >> 24)) >> 24;
    else {
      __u32 tmp_7;
      
#line 1998 
      tmp_7 = __fswab32(ip);
      
#line 1998 
      tmp_8 = tmp_7 >> 24;
    }
    
#line 1998 
    temp_ip = ((tmp_2 | tmp_4) | tmp_6) | tmp_8;
  }
  else {
    __u32 tmp_11;
    unsigned int tmp_10;
    
#line 1998 
    if (0 != 0) 
#line 1998 
                tmp_10 = (((ip << 24) | ((ip << 8) & 16711680U)) | ((ip >> 8) & 65280U)) | (ip >> 24); else 
                                                                    
#line 1998 
                                                                    tmp_10 = __fswab32(ip);
    
#line 1998 
    tmp_11 = __fswab32(tmp_10);
    
#line 1998 
    temp_ip = tmp_11;
  }
  
#line 1999 
  memcpy((void *)(cmd.req.arg + 2U),(void const *)(& temp_ip),4UL);
  
#line 2000 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 2001 
  if (err != 0) {
    char *tmp_12;
    
#line 2002 
    ;
    
#line 2003 
    if (mode == 2) 
#line 2003 
                   tmp_12 = (char *)"Add"; else 
#line 2003 
                                                tmp_12 = (char *)"Remove";
    
#line 2002 
    ;
    
#line 2002 
    dev_err((struct device const *)(& (adapter->netdev)->dev),"could not notify %s IP 0x%x request\n",tmp_12,ip);
  }
  else ;
  
#line 2006 
  qlcnic_free_mbx_args(& cmd);
  return_label: 
#line 2007 
                return;
}


#line 2009  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_config_hw_lro(struct qlcnic_adapter *adapter, int mode)
{
  int __retres;
  int err;
  u32 temp;
  u32 arg1;
  struct qlcnic_cmd_args cmd;
  int lro_bit_mask;
  
#line 2016 
  if (mode != 0) 
#line 2016 
                 lro_bit_mask = 15; else 
#line 2016 
                                         lro_bit_mask = 0;
  
#line 2018 
  if ((adapter->recv_ctx)->state == 0U) {
    
#line 2019 
    __retres = 0;
    
#line 2019 
    goto return_label;
  }
  else ;
  
#line 2021 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,74U);
  
#line 2022 
  if (err != 0) {
    
#line 2023 
    __retres = err;
    
#line 2023 
    goto return_label;
  }
  else ;
  
#line 2025 
  temp = (unsigned int)((int)(adapter->recv_ctx)->context_id << 16);
  
#line 2026 
  arg1 = (unsigned int)lro_bit_mask | temp;
  
#line 2027 
  *(cmd.req.arg + 1U) = arg1;
  
#line 2029 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 2030 
  if (err != 0) 
#line 2031 
                _dev_info((struct device const *)(& (adapter->pdev)->dev),"LRO config failed\n"); else ;
  
#line 2032 
  qlcnic_free_mbx_args(& cmd);
  
#line 2034 
  __retres = err;
  return_label: 
#line 2034 
                return __retres;
}


#line 2037  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_config_rss(struct qlcnic_adapter *adapter, int enable)
{
  int __retres;
  int err;
  u32 word;
  struct qlcnic_cmd_args cmd;
  
#line 2042 
  u64 const key[5U] = {13739358738236749627ULL, 9237148971100220835ULL, 12572696337890028491ULL, 4873897208919303485ULL, 2691761430505084634ULL};
  
#line 2046 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,65U);
  
#line 2047 
  if (err != 0) {
    
#line 2048 
    __retres = err;
    
#line 2048 
    goto return_label;
  }
  else ;
  
#line 2058 
  word = (((unsigned int)enable << 8) & 256U) | 458992U;
  
#line 2062 
  *(cmd.req.arg + 1U) = (unsigned int)(adapter->recv_ctx)->context_id;
  
#line 2063 
  *(cmd.req.arg + 2U) = word;
  
#line 2064 
  memcpy((void *)(cmd.req.arg + 4U),(void const *)(& key),40UL);
  
#line 2066 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 2068 
  if (err != 0) 
#line 2069 
                _dev_info((struct device const *)(& (adapter->pdev)->dev),"RSS config failed\n"); else ;
  
#line 2070 
  qlcnic_free_mbx_args(& cmd);
  
#line 2072 
  __retres = err;
  return_label: 
#line 2072 
                return __retres;
}


#line 2076  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_set_interface_id_macaddr(struct qlcnic_adapter *adapter, u32 *interface_id)
{
  bool tmp_1;
  
#line 2079 
  tmp_1 = qlcnic_sriov_pf_check(adapter);
  
#line 2079 
  if ((int)tmp_1 != 0) 
#line 2080 
                       qlcnic_pf_set_interface_id_macaddr(adapter,interface_id);
  else {
    int tmp_0;
    bool tmp;
    
#line 2082 
    tmp = qlcnic_sriov_vf_check(adapter);
    
#line 2082 
    if (tmp) 
#line 2082 
             tmp_0 = 0; else 
#line 2082 
                             tmp_0 = 1;
    
#line 2082 
    if (tmp_0) 
#line 2083 
               *interface_id = (unsigned int)((int)(adapter->recv_ctx)->context_id << 16); else ;
  }
  
#line 2084 
  return;
}


#line 2087  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_sre_macaddr_change(struct qlcnic_adapter *adapter, u8 *addr, u16 vlan_id, u8 op)
{
  int __retres;
  struct qlcnic_macvlan_mbx mv;
  u32 *buf;
  int err;
  
#line 2090 
  struct qlcnic_cmd_args *cmd = (struct qlcnic_cmd_args *)0;
  
#line 2092 
  u32 temp = 0U;
  
#line 2095 
  if ((adapter->recv_ctx)->state == 0U) {
    
#line 2096 
    __retres = -5;
    
#line 2096 
    goto return_label;
  }
  else ;
  
#line 2098 
  cmd = (struct qlcnic_cmd_args *)kzalloc_5(200UL,32U);
  
#line 2099 
  if (cmd == (struct qlcnic_cmd_args *)0) {
    
#line 2100 
    __retres = -12;
    
#line 2100 
    goto return_label;
  }
  else ;
  
#line 2102 
  err = qlcnic_alloc_mbx_args(cmd,adapter,69U);
  
#line 2103 
  if (err != 0) 
#line 2104 
                goto out; else ;
  
#line 2106 
  cmd->type = 1U;
  
#line 2108 
  if ((unsigned int)vlan_id != 0U) 
    
#line 2109 
    if ((unsigned int)op == 1U || (unsigned int)op == 3U) 
#line 2109 
                                                          op = (unsigned char)3U; else 
                                                                    
#line 2109 
                                                                    op = (unsigned char)4U;
  else ;
  
#line 2112 
  *(cmd->req.arg + 1U) = (unsigned int)((int)op | 256);
  
#line 2113 
  qlcnic_83xx_set_interface_id_macaddr(adapter,& temp);
  
#line 2114 
  *(cmd->req.arg + 1U) |= temp;
  
#line 2115 
  mv.vlan = vlan_id;
  
#line 2116 
  mv.mac_addr0 = *addr;
  
#line 2117 
  mv.mac_addr1 = *(addr + 1U);
  
#line 2118 
  mv.mac_addr2 = *(addr + 2U);
  
#line 2119 
  mv.mac_addr3 = *(addr + 3U);
  
#line 2120 
  mv.mac_addr4 = *(addr + 4U);
  
#line 2121 
  mv.mac_addr5 = *(addr + 5U);
  
#line 2122 
  buf = cmd->req.arg + 2U;
  
#line 2123 
  memcpy((void *)buf,(void const *)(& mv),8UL);
  
#line 2124 
  err = qlcnic_issue_cmd(adapter,cmd);
  
#line 2125 
  if (err == 0) {
    
#line 2126 
    __retres = err;
    
#line 2126 
    goto return_label;
  }
  else ;
  
#line 2128 
  qlcnic_free_mbx_args(cmd);
  out: 
#line 2129 
  ;
  
#line 2130 
  kfree((void const *)cmd);
  
#line 2131 
  __retres = err;
  return_label: 
#line 2131 
                return __retres;
}


#line 2134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_change_l2_filter(struct qlcnic_adapter *adapter, u64 *addr, u16 vlan_id)
{
  u8 mac[6U];
  
#line 2138 
  memcpy((void *)(& mac),(void const *)addr,6UL);
  
#line 2139 
  qlcnic_83xx_sre_macaddr_change(adapter,(u8 *)(& mac),(unsigned short)((int)vlan_id),(unsigned char)1);
  
#line 2140 
  return;
}


#line 2142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_configure_mac(struct qlcnic_adapter *adapter, u8 *mac, u8 type, struct qlcnic_cmd_args *cmd)
{
  
#line 2145 
  switch ((int)type) {
    case 2: 
#line 2146 
    ;
    case 5: 
#line 2147 
    ;
    
#line 2148 
    memcpy((void *)(cmd->req.arg + 2U),(void const *)mac,4UL);
    
#line 2149 
    memcpy((void *)(cmd->req.arg + 3U),(void const *)(mac + 4U),2UL);
    
#line 2150 
    goto ldv_55193;
  }
  ldv_55193: 
#line 2152 
  ;
  
#line 2152 
  *(cmd->req.arg + 1U) = (unsigned int)type;
  
#line 2153 
  return;
}


#line 2155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_mac_address(struct qlcnic_adapter *adapter, u8 *mac, u8 function)
{
  int __retres;
  int err;
  int i;
  struct qlcnic_cmd_args cmd;
  u32 mac_low;
  u32 mac_high;
  
#line 2162 
  function = (unsigned char)0U;
  
#line 2163 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,31U);
  
#line 2164 
  if (err != 0) {
    
#line 2165 
    __retres = err;
    
#line 2165 
    goto return_label;
  }
  else ;
  
#line 2167 
  qlcnic_83xx_configure_mac(adapter,mac,(unsigned char)1,& cmd);
  
#line 2168 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 2170 
  if (err == 0) {
    
#line 2171 
    mac_low = *(cmd.rsp.arg + 1U);
    
#line 2172 
    mac_high = *(cmd.rsp.arg + 2U);
    
#line 2174 
    i = 0;
    
#line 2174 
    goto ldv_55205;
    ldv_55204: 
#line 2175 
    ;
    
#line 2175 
    *(mac + i) = (unsigned char)(mac_high >> (1 - i) * 8);
    
#line 2174 
    i += 1;
    ldv_55205: 
#line 2175 
    ;
    
#line 2174 
    if (i <= 1) 
#line 2176 
                goto ldv_55204; else 
#line 2179 
                                     goto ldv_55206;
    ldv_55206: 
#line 2180 
    ;
    
#line 2176 
    i = 2;
    
#line 2176 
    goto ldv_55208;
    ldv_55207: 
#line 2177 
    ;
    
#line 2177 
    *(mac + i) = (unsigned char)(mac_low >> (5 - i) * 8);
    
#line 2176 
    i += 1;
    ldv_55208: 
#line 2177 
    ;
    
#line 2176 
    if (i <= 5) 
#line 2178 
                goto ldv_55207; else 
#line 2181 
                                     goto ldv_55209;
    ldv_55209: 
#line 2182 
    ;
  }
  else {
    
#line 2179 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to get mac address%d\n",err);
    
#line 2181 
    err = -5;
  }
  
#line 2183 
  qlcnic_free_mbx_args(& cmd);
  
#line 2184 
  __retres = err;
  return_label: 
#line 2184 
                return __retres;
}


#line 2187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_set_rx_intr_coal(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  u16 temp;
  int err;
  
#line 2189 
  struct qlcnic_nic_intr_coalesce *coal = & (adapter->ahw)->coal;
  
#line 2194 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,67U);
  
#line 2195 
  if (err != 0) {
    
#line 2196 
    __retres = err;
    
#line 2196 
    goto return_label;
  }
  else ;
  
#line 2198 
  temp = (adapter->recv_ctx)->context_id;
  
#line 2199 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)temp << 16) | 1);
  
#line 2200 
  temp = coal->rx_time_us;
  
#line 2201 
  *(cmd.req.arg + 2U) = (unsigned int)((int)coal->rx_packets | ((int)temp << 16));
  
#line 2202 
  *(cmd.req.arg + 3U) = (unsigned int)coal->flag;
  
#line 2204 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 2205 
  if (err != 0) 
#line 2206 
                netdev_err((struct net_device const *)adapter->netdev,"failed to set interrupt coalescing parameters\n"); else ;
  
#line 2209 
  qlcnic_free_mbx_args(& cmd);
  
#line 2211 
  __retres = err;
  return_label: 
#line 2211 
                return __retres;
}


#line 2214  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_set_tx_intr_coal(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  u16 temp;
  int err;
  
#line 2216 
  struct qlcnic_nic_intr_coalesce *coal = & (adapter->ahw)->coal;
  
#line 2221 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,67U);
  
#line 2222 
  if (err != 0) {
    
#line 2223 
    __retres = err;
    
#line 2223 
    goto return_label;
  }
  else ;
  
#line 2225 
  temp = (adapter->tx_ring)->ctx_id;
  
#line 2226 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)temp << 16) | 2);
  
#line 2227 
  temp = coal->tx_time_us;
  
#line 2228 
  *(cmd.req.arg + 2U) = (unsigned int)((int)coal->tx_packets | ((int)temp << 16));
  
#line 2229 
  *(cmd.req.arg + 3U) = (unsigned int)coal->flag;
  
#line 2231 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 2232 
  if (err != 0) 
#line 2233 
                netdev_err((struct net_device const *)adapter->netdev,"failed to set interrupt coalescing  parameters\n"); else ;
  
#line 2236 
  qlcnic_free_mbx_args(& cmd);
  
#line 2238 
  __retres = err;
  return_label: 
#line 2238 
                return __retres;
}


#line 2241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_set_rx_tx_intr_coal(struct qlcnic_adapter *adapter)
{
  
#line 2243 
  int err = 0;
  
#line 2245 
  err = qlcnic_83xx_set_rx_intr_coal(adapter);
  
#line 2246 
  if (err != 0) 
#line 2247 
                netdev_err((struct net_device const *)adapter->netdev,"failed to set Rx coalescing parameters\n"); else ;
  
#line 2250 
  err = qlcnic_83xx_set_tx_intr_coal(adapter);
  
#line 2251 
  if (err != 0) 
#line 2252 
                netdev_err((struct net_device const *)adapter->netdev,"failed to set Tx coalescing parameters\n"); else ;
  
#line 2255 
  return err;
}


#line 2258  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_config_intr_coal(struct qlcnic_adapter *adapter, struct ethtool_coalesce *ethcoal)
{
  int __retres;
  u32 rx_coalesce_usecs;
  u32 rx_max_frames;
  u32 tx_coalesce_usecs;
  u32 tx_max_frames;
  int err;
  
#line 2261 
  struct qlcnic_nic_intr_coalesce *coal = & (adapter->ahw)->coal;
  
#line 2266 
  if ((adapter->recv_ctx)->state == 0U) {
    
#line 2267 
    __retres = -5;
    
#line 2267 
    goto return_label;
  }
  else ;
  
#line 2269 
  tx_coalesce_usecs = ethcoal->tx_coalesce_usecs;
  
#line 2270 
  tx_max_frames = ethcoal->tx_max_coalesced_frames;
  
#line 2271 
  rx_coalesce_usecs = ethcoal->rx_coalesce_usecs;
  
#line 2272 
  rx_max_frames = ethcoal->rx_max_coalesced_frames;
  
#line 2273 
  coal->flag = (unsigned short)4U;
  
#line 2275 
  if ((unsigned int)coal->rx_time_us == rx_coalesce_usecs && (unsigned int)coal->rx_packets == rx_max_frames) {
    
#line 2277 
    coal->type = (unsigned char)2U;
    
#line 2278 
    coal->tx_time_us = (unsigned short)tx_coalesce_usecs;
    
#line 2279 
    coal->tx_packets = (unsigned short)tx_max_frames;
  }
  else 
    
#line 2280 
    if ((unsigned int)coal->tx_time_us == tx_coalesce_usecs && (unsigned int)coal->tx_packets == tx_max_frames) {
      
#line 2282 
      coal->type = (unsigned char)1U;
      
#line 2283 
      coal->rx_time_us = (unsigned short)rx_coalesce_usecs;
      
#line 2284 
      coal->rx_packets = (unsigned short)rx_max_frames;
    }
    else {
      
#line 2286 
      coal->type = (unsigned char)3U;
      
#line 2287 
      coal->rx_time_us = (unsigned short)rx_coalesce_usecs;
      
#line 2288 
      coal->rx_packets = (unsigned short)rx_max_frames;
      
#line 2289 
      coal->tx_time_us = (unsigned short)tx_coalesce_usecs;
      
#line 2290 
      coal->tx_packets = (unsigned short)tx_max_frames;
    }
  
#line 2293 
  switch ((int)coal->type) {
    case 1: 
#line 2294 
    ;
    
#line 2295 
    err = qlcnic_83xx_set_rx_intr_coal(adapter);
    
#line 2296 
    goto ldv_55239;
    case 2: 
#line 2297 
    ;
    
#line 2298 
    err = qlcnic_83xx_set_tx_intr_coal(adapter);
    
#line 2299 
    goto ldv_55239;
    case 3: 
#line 2300 
    ;
    
#line 2301 
    err = qlcnic_83xx_set_rx_tx_intr_coal(adapter);
    
#line 2302 
    goto ldv_55239;
    default: 
#line 2303 
    ;
    
#line 2304 
    err = -22;
    
#line 2305 
    netdev_err((struct net_device const *)adapter->netdev,"Invalid Interrupt coalescing type\n");
    
#line 2307 
    goto ldv_55239;
  }
  ldv_55239: 
#line 2310 
  ;
  
#line 2310 
  __retres = err;
  return_label: 
#line 2310 
                return __retres;
}


#line 2313  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_handle_link_aen(struct qlcnic_adapter *adapter, u32 *data)
{
  u8 link_status;
  u8 duplex;
  
#line 2316 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 2319 
  link_status = (unsigned char)((unsigned int)((unsigned char)*(data + 3U)) & 1U);
  
#line 2320 
  if ((unsigned int)link_status != 0U) {
    
#line 2321 
    ahw->link_speed = (unsigned short)(*(data + 2U) >> 16);
    
#line 2322 
    duplex = (unsigned char)(*(data + 3U) >> 16);
    
#line 2323 
    if ((unsigned int)duplex != 0U) 
#line 2324 
                                    ahw->link_duplex = (unsigned short)1U; else 
                                                                    
#line 2326 
                                                                    ahw->link_duplex = (unsigned short)0U;
  }
  else {
    
#line 2328 
    ahw->link_speed = (unsigned short)65535U;
    
#line 2329 
    ahw->link_duplex = (unsigned short)255U;
  }
  
#line 2332 
  ahw->link_autoneg = (unsigned short)((unsigned char)((int)((unsigned short)(*(data + 3U) >> 16)) >> 8));
  
#line 2333 
  ahw->module_type = (unsigned short)((unsigned char)((int)((unsigned short)*(data + 3U)) >> 8));
  
#line 2334 
  ahw->has_link_events = (unsigned char)1U;
  
#line 2335 
  ahw->lb_mode = (unsigned char)((unsigned int)((unsigned char)*(data + 4U)) & 3U);
  
#line 2336 
  qlcnic_advert_link_change(adapter,(int)link_status);
  
#line 2337 
  return;
}


#line 2339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static irqreturn_t qlcnic_83xx_handle_aen(int irq, void *data)
{
  irqreturn_t __retres;
  struct qlcnic_mailbox *mbx;
  u32 mask;
  u32 resp;
  u32 event;
  unsigned long flags;
  
#line 2341 
  struct qlcnic_adapter *adapter = (struct qlcnic_adapter *)data;
  
#line 2346 
  mbx = (adapter->ahw)->mailbox;
  
#line 2347 
  ldv___ldv_spin_lock_85(& mbx->aen_lock);
  
#line 2348 
  resp = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 4U)));
  
#line 2349 
  if ((resp & 1U) == 0U) 
#line 2350 
                         goto out; else ;
  
#line 2352 
  event = readl((void const volatile *)((adapter->ahw)->pci_base0 + 2048U));
  
#line 2353 
  if ((event & 32768U) != 0U) 
#line 2354 
                              __qlcnic_83xx_process_aen(adapter); else 
                                                                    
#line 2356 
                                                                    qlcnic_83xx_notify_mbx_response(mbx);
  out: 
#line 2358 
  ;
  
#line 2359 
  mask = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 9U)));
  
#line 2360 
  writel(0U,(void volatile *)((adapter->ahw)->pci_base0 + mask));
  
#line 2361 
  ldv_spin_unlock_irqrestore_86(& mbx->aen_lock,flags);
  
#line 2362 
  __retres = IRQ_HANDLED;
  
#line 2362 
  return __retres;
}


#line 2365  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_set_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *nic)
{
  int __retres;
  int i;
  struct qlcnic_cmd_args cmd;
  
#line 2368 
  int err = -5;
  
#line 2371 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U) {
    
#line 2372 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Error, invoked by non management func\n","qlcnic_83xx_set_nic_info");
    
#line 2375 
    __retres = err;
    
#line 2375 
    goto return_label;
  }
  else ;
  
#line 2378 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,34U);
  
#line 2379 
  if (err != 0) {
    
#line 2380 
    __retres = err;
    
#line 2380 
    goto return_label;
  }
  else ;
  
#line 2382 
  *(cmd.req.arg + 1U) = (unsigned int)((int)nic->pci_func << 16);
  
#line 2383 
  *(cmd.req.arg + 2U) = 65536U;
  
#line 2384 
  *(cmd.req.arg + 3U) = (unsigned int)((int)nic->phys_port | ((int)nic->switch_mode << 16));
  
#line 2385 
  *(cmd.req.arg + 4U) = nic->capabilities;
  
#line 2386 
  *(cmd.req.arg + 5U) = (unsigned int)((int)nic->max_mac_filters | ((int)nic->max_mtu << 16));
  
#line 2387 
  *(cmd.req.arg + 6U) = (unsigned int)((int)nic->max_tx_ques | ((int)nic->max_rx_ques << 16));
  
#line 2388 
  *(cmd.req.arg + 7U) = (unsigned int)((int)nic->min_tx_bw | ((int)nic->max_tx_bw << 16));
  
#line 2389 
  i = 8;
  
#line 2389 
  goto ldv_55270;
  ldv_55269: 
#line 2390 
  ;
  
#line 2390 
  *(cmd.req.arg + i) = 0U;
  
#line 2389 
  i += 1;
  ldv_55270: 
#line 2390 
  ;
  
#line 2389 
  if (i <= 31) 
#line 2391 
               goto ldv_55269; else 
#line 2394 
                                    goto ldv_55271;
  ldv_55271: 
#line 2395 
  ;
  
#line 2392 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 2394 
  if (err != 0) {
    
#line 2395 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to set nic info%d\n",err);
    
#line 2397 
    err = -5;
  }
  else ;
  
#line 2400 
  qlcnic_free_mbx_args(& cmd);
  
#line 2402 
  __retres = err;
  return_label: 
#line 2402 
                return __retres;
}


#line 2405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info, u8 func_id)
{
  int __retres;
  int err;
  u32 temp;
  struct qlcnic_cmd_args cmd;
  
#line 2410 
  u8 op = (unsigned char)0U;
  
#line 2412 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 2414 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,33U);
  
#line 2415 
  if (err != 0) {
    
#line 2416 
    __retres = err;
    
#line 2416 
    goto return_label;
  }
  else ;
  
#line 2418 
  if ((int)ahw->pci_func != (int)func_id) {
    
#line 2419 
    temp = (unsigned int)((int)func_id << 16);
    
#line 2420 
    *(cmd.req.arg + 1U) = ((unsigned int)op | temp) | 2147483648U;
  }
  else 
#line 2422 
       *(cmd.req.arg + 1U) = (unsigned int)((int)ahw->pci_func << 16);
  
#line 2424 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 2425 
  if (err != 0) {
    
#line 2426 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Failed to get nic info %d\n",err);
    
#line 2428 
    goto out;
  }
  else ;
  
#line 2431 
  npar_info->op_type = *(cmd.rsp.arg + 1U);
  
#line 2432 
  npar_info->pci_func = (unsigned short)*(cmd.rsp.arg + 2U);
  
#line 2433 
  npar_info->op_mode = (unsigned short)(*(cmd.rsp.arg + 2U) >> 16);
  
#line 2434 
  npar_info->phys_port = (unsigned short)*(cmd.rsp.arg + 3U);
  
#line 2435 
  npar_info->switch_mode = (unsigned short)(*(cmd.rsp.arg + 3U) >> 16);
  
#line 2436 
  npar_info->capabilities = *(cmd.rsp.arg + 4U);
  
#line 2437 
  npar_info->max_mac_filters = (unsigned char)*(cmd.rsp.arg + 5U);
  
#line 2438 
  npar_info->max_mtu = (unsigned short)(*(cmd.rsp.arg + 5U) >> 16);
  
#line 2439 
  npar_info->max_tx_ques = (unsigned short)*(cmd.rsp.arg + 6U);
  
#line 2440 
  npar_info->max_rx_ques = (unsigned short)(*(cmd.rsp.arg + 6U) >> 16);
  
#line 2441 
  npar_info->min_tx_bw = (unsigned short)*(cmd.rsp.arg + 7U);
  
#line 2442 
  npar_info->max_tx_bw = (unsigned short)(*(cmd.rsp.arg + 7U) >> 16);
  
#line 2443 
  if ((*(cmd.rsp.arg + 8U) & 1U) != 0U) 
#line 2444 
                                        npar_info->max_bw_reg_offset = (unsigned short)((unsigned int)((unsigned short)(*(cmd.rsp.arg + 8U) >> 1)) & 16383U); else ;
  
#line 2445 
  if ((*(cmd.rsp.arg + 8U) & 65536U) != 0U) {
    
#line 2446 
    temp = (*(cmd.rsp.arg + 8U) >> 17) & 16383U;
    
#line 2447 
    npar_info->max_linkspeed_reg_offset = (unsigned short)temp;
  }
  else ;
  
#line 2450 
  memcpy((void *)(& ahw->extra_capability),(void const *)(cmd.rsp.arg + 16U),12UL);
  out: 
#line 2453 
  ;
  
#line 2454 
  qlcnic_free_mbx_args(& cmd);
  
#line 2455 
  __retres = err;
  return_label: 
#line 2455 
                return __retres;
}


#line 2458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_get_pci_func_type(struct qlcnic_adapter *adapter, u16 type, u16 *nic, u16 *fcoe, u16 *iscsi)
{
  
#line 2461 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 2462 
  int err = 0;
  
#line 2464 
  switch ((int)type) {
    case 1: 
#line 2465 
    ;
    
#line 2466 
    *nic = (u16)((int)*nic + 1);
    
#line 2467 
    goto ldv_55293;
    case 2: 
#line 2468 
    ;
    
#line 2469 
    *fcoe = (u16)((int)*fcoe + 1);
    
#line 2470 
    goto ldv_55293;
    case 3: 
#line 2471 
    ;
    
#line 2472 
    *iscsi = (u16)((int)*iscsi + 1);
    
#line 2473 
    goto ldv_55293;
    default: 
#line 2474 
    ;
    
#line 2475 
    dev_err((struct device const *)dev,"%s: Unknown PCI type[%x]\n","qlcnic_get_pci_func_type",(int)type);
    
#line 2477 
    err = -5;
  }
  ldv_55293: 
#line 2480 
  ;
  
#line 2480 
  return err;
}


#line 2483  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_pci_info(struct qlcnic_adapter *adapter, struct qlcnic_pci_info *pci_info)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  int i;
  u32 temp;
  
#line 2486 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 2487 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 2488 
  u16 nic = (unsigned short)0U;
  
#line 2488 
  u16 fcoe = (unsigned short)0U;
  
#line 2488 
  u16 iscsi = (unsigned short)0U;
  
#line 2490 
  int err = 0;
  
#line 2490 
  int j = 0;
  
#line 2493 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,32U);
  
#line 2494 
  if (err != 0) {
    
#line 2495 
    __retres = err;
    
#line 2495 
    goto return_label;
  }
  else ;
  
#line 2497 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 2499 
  ahw->total_nic_func = (unsigned short)0U;
  
#line 2500 
  if (err == 0) {
    
#line 2501 
    ahw->max_pci_func = (unsigned short)((unsigned int)((unsigned short)*(cmd.rsp.arg + 1U)) & 255U);
    
#line 2502 
    i = 2;
    
#line 2502 
    j = 0;
    
#line 2502 
    goto ldv_55314;
    ldv_55313: 
#line 2503 
    ;
    
#line 2503 
    pci_info->id = (unsigned short)*(cmd.rsp.arg + i);
    
#line 2504 
    pci_info->active = (unsigned short)(*(cmd.rsp.arg + i) >> 16);
    
#line 2505 
    i += 1;
    
#line 2506 
    if ((unsigned int)pci_info->active == 0U) {
      
#line 2507 
      i += 7;
      
#line 2508 
      goto ldv_55312;
    }
    else ;
    
#line 2510 
    pci_info->type = (unsigned short)*(cmd.rsp.arg + i);
    
#line 2511 
    err = qlcnic_get_pci_func_type(adapter,(unsigned short)((int)pci_info->type),& nic,& fcoe,& iscsi);
    
#line 2513 
    temp = *(cmd.rsp.arg + i) >> 16;
    
#line 2514 
    pci_info->default_port = (unsigned short)temp;
    
#line 2515 
    i += 1;
    
#line 2516 
    pci_info->tx_min_bw = (unsigned short)*(cmd.rsp.arg + i);
    
#line 2517 
    temp = *(cmd.rsp.arg + i) >> 16;
    
#line 2518 
    pci_info->tx_max_bw = (unsigned short)temp;
    
#line 2519 
    i += 2;
    
#line 2520 
    memcpy((void *)(& pci_info->mac),(void const *)(cmd.rsp.arg + i),4UL);
    
#line 2521 
    i += 1;
    
#line 2522 
    memcpy((void *)(& pci_info->mac) + 4U,(void const *)(cmd.rsp.arg + i),2UL);
    
#line 2523 
    i += 3;
    ldv_55312: 
#line 2524 
    ;
    
#line 2502 
    j += 1;
    
#line 2502 
    pci_info += 1;
    ldv_55314: 
#line 2503 
    ;
    
#line 2502 
    if (ahw->max_vnic_func > (unsigned int)j) 
#line 2504 
                                              goto ldv_55313; else 
#line 2507 
                                                                   goto ldv_55315;
    ldv_55315: 
#line 2508 
    ;
  }
  else {
    
#line 2526 
    dev_err((struct device const *)dev,"Failed to get PCI Info, error = %d\n",err);
    
#line 2527 
    err = -5;
  }
  
#line 2530 
  ahw->total_nic_func = nic;
  
#line 2531 
  ahw->total_pci_func = (unsigned int)(((int)nic + (int)fcoe) + (int)iscsi);
  
#line 2532 
  if ((unsigned int)ahw->total_nic_func == 0U || ahw->total_pci_func == 0U) {
    
#line 2533 
    dev_err((struct device const *)dev,"%s: Invalid function count: total nic func[%x], total pci func[%x]\n","qlcnic_83xx_get_pci_info",(int)ahw->total_nic_func,ahw->total_pci_func);
    
#line 2535 
    err = -5;
  }
  else ;
  
#line 2537 
  qlcnic_free_mbx_args(& cmd);
  
#line 2539 
  __retres = err;
  return_label: 
#line 2539 
                return __retres;
}


#line 2542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_config_intrpt(struct qlcnic_adapter *adapter, bool op_type)
{
  int __retres;
  int i;
  int index;
  int err;
  u8 max_ints;
  u32 val;
  u32 temp;
  u32 type;
  struct qlcnic_cmd_args cmd;
  bool tmp;
  int tmp_0;
  int tmp_1;
  
#line 2549 
  max_ints = (unsigned char)((unsigned int)(adapter->ahw)->num_msix + 255U);
  
#line 2550 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,2U);
  
#line 2551 
  if (err != 0) {
    
#line 2552 
    __retres = err;
    
#line 2552 
    goto return_label;
  }
  else ;
  
#line 2554 
  *(cmd.req.arg + 1U) = (unsigned int)max_ints;
  
#line 2556 
  tmp = qlcnic_sriov_vf_check(adapter);
  
#line 2556 
  if ((int)tmp != 0) 
#line 2557 
                     *(cmd.req.arg + 1U) = (*(cmd.req.arg + 1U) | (unsigned int)((int)(adapter->ahw)->pci_func << 8)) | 65536U; else ;
  
#line 2559 
  i = 0;
  
#line 2559 
  index = 2;
  
#line 2559 
  goto ldv_55330;
  ldv_55329: 
#line 2560 
  ;
  
#line 2560 
  if ((int)op_type != 0) 
#line 2560 
                         tmp_0 = 1; else 
#line 2560 
                                         tmp_0 = 2;
  
#line 2560 
  type = (unsigned int)tmp_0;
  
#line 2561 
  val = (unsigned int)((int)((adapter->ahw)->intr_tbl + i)->type << 4) | type;
  
#line 2562 
  if ((unsigned int)((adapter->ahw)->intr_tbl + i)->type == 3U) 
#line 2563 
                                                                val = (unsigned int)((int)((adapter->ahw)->intr_tbl + i)->id << 16) | val; else ;
  
#line 2564 
  tmp_1 = index;
  
#line 2564 
  index += 1;
  
#line 2564 
  *(cmd.req.arg + tmp_1) = val;
  
#line 2559 
  i += 1;
  ldv_55330: 
#line 2560 
  ;
  
#line 2559 
  if ((int)max_ints > i) 
#line 2561 
                         goto ldv_55329; else 
#line 2564 
                                              goto ldv_55331;
  ldv_55331: 
#line 2565 
  ;
  
#line 2566 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 2567 
  if (err != 0) {
    
#line 2568 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to configure interrupts 0x%x\n",err);
    
#line 2570 
    goto out;
  }
  else ;
  
#line 2573 
  max_ints = (unsigned char)*(cmd.rsp.arg + 1U);
  
#line 2574 
  i = 0;
  
#line 2574 
  index = 2;
  
#line 2574 
  goto ldv_55335;
  ldv_55334: 
#line 2575 
  ;
  
#line 2575 
  val = *(cmd.rsp.arg + index);
  
#line 2576 
  if ((unsigned int)((unsigned char)val) != 0U) {
    
#line 2577 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Can\'t configure interrupt %d\n",(int)((adapter->ahw)->intr_tbl + i)->id);
    
#line 2580 
    goto ldv_55333;
  }
  else ;
  
#line 2582 
  if ((int)op_type != 0) {
    
#line 2583 
    ((adapter->ahw)->intr_tbl + i)->id = (unsigned short)(val >> 16);
    
#line 2584 
    ((adapter->ahw)->intr_tbl + i)->enabled = (unsigned char)1U;
    
#line 2585 
    temp = *(cmd.rsp.arg + ((unsigned int)index + 1U));
    
#line 2586 
    ((adapter->ahw)->intr_tbl + i)->src = temp;
  }
  else {
    
#line 2588 
    ((adapter->ahw)->intr_tbl + i)->id = (unsigned short)i;
    
#line 2589 
    ((adapter->ahw)->intr_tbl + i)->enabled = (unsigned char)0U;
    
#line 2590 
    ((adapter->ahw)->intr_tbl + i)->src = 0U;
  }
  ldv_55333: 
#line 2592 
  ;
  
#line 2574 
  i += 1;
  
#line 2574 
  index += 2;
  ldv_55335: 
#line 2575 
  ;
  
#line 2574 
  if ((int)max_ints > i) 
#line 2576 
                         goto ldv_55334; else 
#line 2579 
                                              goto ldv_55336;
  ldv_55336: 
#line 2580 
  ;
  out: 
#line 2593 
  ;
  
#line 2594 
  qlcnic_free_mbx_args(& cmd);
  
#line 2595 
  __retres = err;
  return_label: 
#line 2595 
                return __retres;
}


#line 2598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_lock_flash(struct qlcnic_adapter *adapter)
{
  int __retres;
  int id;
  
#line 2600 
  int timeout = 0;
  
#line 2601 
  u32 status = 0U;
  
#line 2603 
  goto ldv_55346;
  ldv_55345: 
#line 2604 
  ;
  
#line 2604 
  status = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 21U)));
  
#line 2605 
  if (status != 0U) 
#line 2606 
                    goto ldv_55343; else ;
  
#line 2608 
  timeout += 1;
  
#line 2608 
  if (timeout > 9999) {
    unsigned int tmp;
    
#line 2609 
    tmp = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 3U)));
    
#line 2609 
    id = (int)tmp;
    
#line 2611 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: failed, lock held by %d\n","qlcnic_83xx_lock_flash",id);
    
#line 2613 
    __retres = -5;
    
#line 2613 
    goto return_label;
  }
  else ;
  
#line 2615 
  usleep_range(1000UL,2000UL);
  ldv_55346: 
#line 2616 
  ;
  
#line 2603 
  if (status == 0U) 
#line 2605 
                    goto ldv_55345; else 
#line 2608 
                                         goto ldv_55343;
  ldv_55343: 
#line 2609 
  ;
  
#line 2618 
  writel((unsigned int)adapter->portnum,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 3U)));
  
#line 2619 
  __retres = 0;
  return_label: 
#line 2619 
                return __retres;
}


#line 2622  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_unlock_flash(struct qlcnic_adapter *adapter)
{
  
#line 2624 
  readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 22U)));
  
#line 2625 
  writel(255U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 3U)));
  
#line 2626 
  return;
}


#line 2628  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_lockless_flash_read32(struct qlcnic_adapter *adapter, u32 flash_addr, u8 *p_data, int count)
{
  int __retres;
  u32 word;
  u32 range;
  u32 flash_offset;
  u32 ret;
  ulong indirect_add;
  ulong direct_window;
  int i;
  
#line 2632 
  u32 addr = flash_addr;
  
#line 2634 
  int err = 0;
  
#line 2636 
  flash_offset = addr & 65535U;
  
#line 2637 
  if ((addr & 3U) != 0U) {
    
#line 2638 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Illegal addr = 0x%x\n",addr);
    
#line 2639 
    __retres = -5;
    
#line 2639 
    goto return_label;
  }
  else ;
  
#line 2642 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410416UL,addr & 4294901760U);
  
#line 2645 
  range = (unsigned int)((unsigned long)count) * 4U + flash_offset;
  
#line 2647 
  if (range > 65535U) {
    int tmp;
    
#line 2650 
    i = 0;
    
#line 2650 
    goto ldv_55366;
    ldv_55365: 
#line 2651 
    ;
    
#line 2651 
    indirect_add = (unsigned long)((addr & 65535U) | 1108672512U);
    
#line 2652 
    tmp = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,indirect_add,& err);
    
#line 2652 
    ret = (unsigned int)tmp;
    
#line 2653 
    if (err == -5) {
      
#line 2654 
      __retres = err;
      
#line 2654 
      goto return_label;
    }
    else ;
    
#line 2656 
    word = ret;
    
#line 2657 
    *((u32 *)p_data) = word;
    
#line 2658 
    p_data += 4U;
    
#line 2659 
    addr += 4U;
    
#line 2660 
    flash_offset += 4U;
    
#line 2662 
    if (flash_offset > 65535U) {
      
#line 2663 
      direct_window = 1108410416UL;
      
#line 2665 
      qlcnic_83xx_wrt_reg_indirect(adapter,direct_window,addr);
      
#line 2668 
      flash_offset = 0U;
    }
    else ;
    
#line 2650 
    i += 1;
    ldv_55366: 
#line 2651 
    ;
    
#line 2650 
    if (i < count) 
#line 2652 
                   goto ldv_55365; else 
#line 2655 
                                        goto ldv_55367;
    ldv_55367: 
#line 2656 
    ;
  }
  else {
    int tmp_0;
    
#line 2673 
    i = 0;
    
#line 2673 
    goto ldv_55369;
    ldv_55368: 
#line 2674 
    ;
    
#line 2674 
    indirect_add = (unsigned long)((addr & 65535U) | 1108672512U);
    
#line 2675 
    tmp_0 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,indirect_add,& err);
    
#line 2675 
    ret = (unsigned int)tmp_0;
    
#line 2676 
    if (err == -5) {
      
#line 2677 
      __retres = err;
      
#line 2677 
      goto return_label;
    }
    else ;
    
#line 2679 
    word = ret;
    
#line 2680 
    *((u32 *)p_data) = word;
    
#line 2681 
    p_data += 4U;
    
#line 2682 
    addr += 4U;
    
#line 2673 
    i += 1;
    ldv_55369: 
#line 2674 
    ;
    
#line 2673 
    if (i < count) 
#line 2675 
                   goto ldv_55368; else 
#line 2678 
                                        goto ldv_55370;
    ldv_55370: 
#line 2679 
    ;
  }
  
#line 2686 
  __retres = 0;
  return_label: 
#line 2686 
                return __retres;
}


#line 2689  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_poll_flash_status_reg(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 status;
  int tmp;
  
#line 2692 
  int retries = 5000;
  
#line 2693 
  int err = 0;
  ldv_55378: 
#line 2694 
  ;
  
#line 2696 
  tmp = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,1108344836UL,& err);
  
#line 2696 
  status = (unsigned int)tmp;
  
#line 2697 
  if (err == -5) {
    
#line 2698 
    __retres = err;
    
#line 2698 
    goto return_label;
  }
  else ;
  
#line 2700 
  if ((status & 6U) == 6U) 
#line 2702 
                           goto ldv_55377; else ;
  
#line 2704 
  usleep_range(1000UL,1100UL);
  
#line 2705 
  retries -= 1;
  
#line 2705 
  if (retries != 0) 
#line 2707 
                    goto ldv_55378; else 
#line 2710 
                                         goto ldv_55377;
  ldv_55377: 
#line 2711 
  ;
  
#line 2707 
  if (retries == 0) {
    
#line 2708 
    __retres = -5;
    
#line 2708 
    goto return_label;
  }
  else ;
  
#line 2710 
  __retres = 0;
  return_label: 
#line 2710 
                return __retres;
}


#line 2713  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_enable_flash_write(struct qlcnic_adapter *adapter)
{
  int __retres;
  int ret;
  u32 cmd;
  
#line 2717 
  cmd = (unsigned int)(adapter->ahw)->fdt.write_statusreg_cmd;
  
#line 2718 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,cmd | 16580864U);
  
#line 2720 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410380UL,(unsigned int)(adapter->ahw)->fdt.write_enable_bits);
  
#line 2722 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,5U);
  
#line 2724 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  
#line 2725 
  if (ret != 0) {
    
#line 2726 
    __retres = -5;
    
#line 2726 
    goto return_label;
  }
  else ;
  
#line 2728 
  __retres = 0;
  return_label: 
#line 2728 
                return __retres;
}


#line 2731  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_disable_flash_write(struct qlcnic_adapter *adapter)
{
  int __retres;
  int ret;
  
#line 2735 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,(unsigned int)((int)(adapter->ahw)->fdt.write_statusreg_cmd | 16580864));
  
#line 2738 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410380UL,(unsigned int)(adapter->ahw)->fdt.write_disable_bits);
  
#line 2740 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,5U);
  
#line 2742 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  
#line 2743 
  if (ret != 0) {
    
#line 2744 
    __retres = -5;
    
#line 2744 
    goto return_label;
  }
  else ;
  
#line 2746 
  __retres = 0;
  return_label: 
#line 2746 
                return __retres;
}


#line 2749  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_read_flash_mfg_id(struct qlcnic_adapter *adapter)
{
  int __retres;
  int ret;
  u32 mfg_id;
  int tmp;
  int tmp_0;
  
#line 2751 
  int err = 0;
  
#line 2754 
  tmp = qlcnic_83xx_lock_flash(adapter);
  
#line 2754 
  if (tmp != 0) {
    
#line 2755 
    __retres = -5;
    
#line 2755 
    goto return_label;
  }
  else ;
  
#line 2757 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,16580767U);
  
#line 2759 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,63U);
  
#line 2761 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  
#line 2762 
  if (ret != 0) {
    
#line 2763 
    qlcnic_83xx_unlock_flash(adapter);
    
#line 2764 
    __retres = -5;
    
#line 2764 
    goto return_label;
  }
  else ;
  
#line 2767 
  tmp_0 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,1108410392UL,& err);
  
#line 2767 
  mfg_id = (unsigned int)tmp_0;
  
#line 2768 
  if (err == -5) {
    
#line 2769 
    qlcnic_83xx_unlock_flash(adapter);
    
#line 2770 
    __retres = err;
    
#line 2770 
    goto return_label;
  }
  else ;
  
#line 2773 
  adapter->flash_mfg_id = (unsigned char)mfg_id;
  
#line 2774 
  qlcnic_83xx_unlock_flash(adapter);
  
#line 2776 
  __retres = 0;
  return_label: 
#line 2776 
                return __retres;
}


#line 2779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_read_flash_descriptor_table(struct qlcnic_adapter *adapter)
{
  int __retres;
  int count;
  int fdt_size;
  int tmp;
  
#line 2781 
  int ret = 0;
  
#line 2783 
  fdt_size = 128;
  
#line 2784 
  count = (int)((unsigned long)fdt_size / 4UL);
  
#line 2786 
  tmp = qlcnic_83xx_lock_flash(adapter);
  
#line 2786 
  if (tmp != 0) {
    
#line 2787 
    __retres = -5;
    
#line 2787 
    goto return_label;
  }
  else ;
  
#line 2789 
  memset((void *)(& (adapter->ahw)->fdt),0,(unsigned long)fdt_size);
  
#line 2790 
  ret = qlcnic_83xx_lockless_flash_read32(adapter,4128768U,(u8 *)(& (adapter->ahw)->fdt),count);
  
#line 2793 
  qlcnic_swap32_buffer((u32 *)(& (adapter->ahw)->fdt),count);
  
#line 2794 
  qlcnic_83xx_unlock_flash(adapter);
  
#line 2795 
  __retres = ret;
  return_label: 
#line 2795 
                return __retres;
}


#line 2798  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_erase_flash_sector(struct qlcnic_adapter *adapter, u32 sector_start_addr)
{
  int __retres;
  u32 reversed_addr;
  u32 addr1;
  u32 addr2;
  u32 cmd;
  int tmp;
  
#line 2802 
  int ret = -5;
  
#line 2804 
  tmp = qlcnic_83xx_lock_flash(adapter);
  
#line 2804 
  if (tmp != 0) {
    
#line 2805 
    __retres = -5;
    
#line 2805 
    goto return_label;
  }
  else ;
  
#line 2807 
  if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) {
    
#line 2808 
    ret = qlcnic_83xx_enable_flash_write(adapter);
    
#line 2809 
    if (ret != 0) {
      
#line 2810 
      qlcnic_83xx_unlock_flash(adapter);
      
#line 2811 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"%s failed at %d\n","qlcnic_83xx_erase_flash_sector",2813);
      
#line 2814 
      __retres = ret;
      
#line 2814 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2818 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  
#line 2819 
  if (ret != 0) {
    
#line 2820 
    qlcnic_83xx_unlock_flash(adapter);
    
#line 2821 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: failed at %d\n","qlcnic_83xx_erase_flash_sector",2822);
    
#line 2823 
    __retres = -5;
    
#line 2823 
    goto return_label;
  }
  else ;
  
#line 2826 
  addr1 = (sector_start_addr << 16) & 16711680U;
  
#line 2827 
  addr2 = (sector_start_addr >> 16) & 255U;
  
#line 2828 
  reversed_addr = (addr1 | addr2) | (sector_start_addr & 65280U);
  
#line 2830 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410380UL,reversed_addr);
  
#line 2832 
  cmd = (unsigned int)((int)(adapter->ahw)->fdt.erase_cmd | 16581376);
  
#line 2833 
  if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) 
    
#line 2834 
    qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,cmd); else 
#line 2836 
                                                                 qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,16581592U);
  
#line 2838 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,61U);
  
#line 2841 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  
#line 2842 
  if (ret != 0) {
    
#line 2843 
    qlcnic_83xx_unlock_flash(adapter);
    
#line 2844 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: failed at %d\n","qlcnic_83xx_erase_flash_sector",2845);
    
#line 2846 
    __retres = -5;
    
#line 2846 
    goto return_label;
  }
  else ;
  
#line 2849 
  if ((int)(adapter->ahw)->fdt.mfg_id == (int)adapter->flash_mfg_id) {
    
#line 2850 
    ret = qlcnic_83xx_disable_flash_write(adapter);
    
#line 2851 
    if (ret != 0) {
      
#line 2852 
      qlcnic_83xx_unlock_flash(adapter);
      
#line 2853 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: failed at %d\n","qlcnic_83xx_erase_flash_sector",2854);
      
#line 2855 
      __retres = ret;
      
#line 2855 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2859 
  qlcnic_83xx_unlock_flash(adapter);
  
#line 2861 
  __retres = 0;
  return_label: 
#line 2861 
                return __retres;
}


#line 2864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_flash_write32(struct qlcnic_adapter *adapter, u32 addr, u32 *p_data)
{
  int __retres;
  
#line 2867 
  int ret = -5;
  
#line 2868 
  u32 addr1 = (addr >> 2) | 8388608U;
  
#line 2870 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,addr1);
  
#line 2871 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410380UL,*p_data);
  
#line 2872 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,61U);
  
#line 2874 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  
#line 2875 
  if (ret != 0) {
    
#line 2876 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: failed at %d\n","qlcnic_83xx_flash_write32",2877);
    
#line 2878 
    __retres = -5;
    
#line 2878 
    goto return_label;
  }
  else ;
  
#line 2881 
  __retres = 0;
  return_label: 
#line 2881 
                return __retres;
}


#line 2884  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_flash_bulk_write(struct qlcnic_adapter *adapter, u32 addr, u32 *p_data, int count)
{
  int __retres;
  u32 temp;
  int tmp;
  u32 *tmp_0;
  u32 *tmp_1;
  u32 *tmp_2;
  
#line 2888 
  int ret = -5;
  
#line 2888 
  int err = 0;
  
#line 2890 
  if ((unsigned int)count + 4294967294U > 62U) {
    
#line 2892 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Invalid word count\n","qlcnic_83xx_flash_bulk_write");
    
#line 2894 
    __retres = -5;
    
#line 2894 
    goto return_label;
  }
  else ;
  
#line 2897 
  tmp = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,671670292UL,& err);
  
#line 2897 
  temp = (unsigned int)tmp;
  
#line 2898 
  if (err == -5) {
    
#line 2899 
    __retres = err;
    
#line 2899 
    goto return_label;
  }
  else ;
  
#line 2901 
  qlcnic_83xx_wrt_reg_indirect(adapter,671670292UL,temp | 4U);
  
#line 2903 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,8388608U);
  
#line 2907 
  tmp_0 = p_data;
  
#line 2907 
  p_data += 1;
  
#line 2907 
  ;
  
#line 2907 
  ;
  
#line 2907 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410380UL,*tmp_0);
  
#line 2908 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,67U);
  
#line 2910 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  
#line 2911 
  if (ret != 0) {
    
#line 2912 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: failed at %d\n","qlcnic_83xx_flash_bulk_write",2913);
    
#line 2914 
    __retres = -5;
    
#line 2914 
    goto return_label;
  }
  else ;
  
#line 2917 
  count -= 1;
  
#line 2918 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,8388609U);
  
#line 2921 
  goto ldv_55429;
  ldv_55428: 
#line 2922 
  ;
  
#line 2923 
  tmp_1 = p_data;
  
#line 2923 
  p_data += 1;
  
#line 2922 
  ;
  
#line 2922 
  ;
  
#line 2922 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410380UL,*tmp_1);
  
#line 2924 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,127U);
  
#line 2926 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  
#line 2927 
  if (ret != 0) {
    
#line 2928 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: failed at %d\n","qlcnic_83xx_flash_bulk_write",2929);
    
#line 2930 
    __retres = -5;
    
#line 2930 
    goto return_label;
  }
  else ;
  
#line 2932 
  count -= 1;
  ldv_55429: 
#line 2933 
  ;
  
#line 2921 
  if (count != 1) 
#line 2923 
                  goto ldv_55428; else 
#line 2926 
                                       goto ldv_55430;
  ldv_55430: 
#line 2927 
  ;
  
#line 2935 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,(addr >> 2) | 8388608U);
  
#line 2939 
  tmp_2 = p_data;
  
#line 2939 
  p_data += 1;
  
#line 2939 
  ;
  
#line 2939 
  ;
  
#line 2939 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410380UL,*tmp_2);
  
#line 2940 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,125U);
  
#line 2942 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  
#line 2943 
  if (ret != 0) {
    
#line 2944 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: failed at %d\n","qlcnic_83xx_flash_bulk_write",2945);
    
#line 2946 
    __retres = -5;
    
#line 2946 
    goto return_label;
  }
  else ;
  
#line 2949 
  ret = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,671670288UL,& err);
  
#line 2950 
  if (err == -5) {
    
#line 2951 
    __retres = err;
    
#line 2951 
    goto return_label;
  }
  else ;
  
#line 2953 
  if ((ret & 4) != 0) {
    int tmp_3;
    
#line 2954 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: failed at %d\n","qlcnic_83xx_flash_bulk_write",2955);
    
#line 2957 
    tmp_3 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,671670292UL,& err);
    
#line 2957 
    temp = (unsigned int)tmp_3;
    
#line 2958 
    if (err == -5) {
      
#line 2959 
      __retres = err;
      
#line 2959 
      goto return_label;
    }
    else ;
    
#line 2961 
    qlcnic_83xx_wrt_reg_indirect(adapter,671670292UL,temp | 4U);
  }
  else ;
  
#line 2966 
  __retres = 0;
  return_label: 
#line 2966 
                return __retres;
}


#line 2969  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_recover_driver_lock(struct qlcnic_adapter *adapter)
{
  u32 val;
  u32 id;
  
#line 2973 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 18U)));
  
#line 2976 
  if ((val & 3U) == 0U) {
    
#line 2977 
    val &= 4294967232U;
    
#line 2978 
    val = ((unsigned int)((int)adapter->portnum << 2) | val) | 1U;
    
#line 2980 
    writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 18U)));
    
#line 2981 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: lock recovery initiated\n","qlcnic_83xx_recover_driver_lock");
    
#line 2983 
    msleep(200U);
    
#line 2984 
    val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 18U)));
    
#line 2985 
    id = (val >> 2) & 15U;
    
#line 2986 
    if ((unsigned int)adapter->portnum == id) {
      
#line 2987 
      val &= 4294967292U;
      
#line 2988 
      val |= 2U;
      
#line 2989 
      writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 18U)));
      
#line 2991 
      readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 40U)));
      
#line 2993 
      val &= 4294967232U;
      
#line 2994 
      writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 18U)));
      
#line 2995 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: lock recovery completed\n","qlcnic_83xx_recover_driver_lock");
    }
    else 
#line 2998 
         _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: func %d to resume lock recovery process\n","qlcnic_83xx_recover_driver_lock",id);
  }
  else 
#line 3003 
       _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: lock recovery initiated by other functions\n","qlcnic_83xx_recover_driver_lock");
  
#line 3004 
  return;
}


#line 3009  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_lock_driver(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 lock_alive_counter;
  u32 val;
  u32 id;
  
#line 3011 
  u32 i = 0U;
  
#line 3011 
  u32 status = 0U;
  
#line 3011 
  u32 temp = 0U;
  
#line 3012 
  int max_attempt = 0;
  
#line 3014 
  goto ldv_55450;
  ldv_55449: 
#line 3015 
  ;
  
#line 3015 
  status = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 39U)));
  
#line 3016 
  if (status != 0U) 
#line 3017 
                    goto ldv_55447; else ;
  
#line 3019 
  msleep(20U);
  
#line 3020 
  i += 1U;
  
#line 3022 
  if (i == 1U) 
#line 3023 
               temp = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 41U))); else ;
  
#line 3025 
  if (i == 100U) {
    
#line 3026 
    val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 41U)));
    
#line 3027 
    if (val == temp) {
      
#line 3028 
      id = val & 255U;
      
#line 3029 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: lock to be recovered from %d\n","qlcnic_83xx_lock_driver",id);
      
#line 3032 
      qlcnic_83xx_recover_driver_lock(adapter);
      
#line 3033 
      i = 0U;
      
#line 3034 
      max_attempt += 1;
    }
    else {
      
#line 3036 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: failed to get lock\n","qlcnic_83xx_lock_driver");
      
#line 3038 
      __retres = -5;
      
#line 3038 
      goto return_label;
    }
  }
  else ;
  
#line 3043 
  if (max_attempt == 3) {
    
#line 3044 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: failed to get lock\n","qlcnic_83xx_lock_driver");
    
#line 3046 
    __retres = -5;
    
#line 3046 
    goto return_label;
  }
  else ;
  ldv_55450: 
#line 3048 
  ;
  
#line 3014 
  if (status == 0U) 
#line 3016 
                    goto ldv_55449; else 
#line 3019 
                                         goto ldv_55447;
  ldv_55447: 
#line 3020 
  ;
  
#line 3050 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 41U)));
  
#line 3051 
  lock_alive_counter = val >> 8;
  
#line 3052 
  lock_alive_counter += 1U;
  
#line 3053 
  val = (lock_alive_counter << 8) | (unsigned int)adapter->portnum;
  
#line 3054 
  writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 41U)));
  
#line 3056 
  __retres = 0;
  return_label: 
#line 3056 
                return __retres;
}


#line 3059  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_unlock_driver(struct qlcnic_adapter *adapter)
{
  u32 val;
  u32 lock_alive_counter;
  u32 id;
  
#line 3063 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 41U)));
  
#line 3064 
  id = val & 255U;
  
#line 3065 
  lock_alive_counter = val >> 8;
  
#line 3067 
  if ((unsigned int)adapter->portnum != id) 
#line 3068 
                                            dev_err((struct device const *)(& (adapter->pdev)->dev),"%s:Warning func %d is unlocking lock owned by %d\n","qlcnic_83xx_unlock_driver",(int)adapter->portnum,id); else ;
  
#line 3072 
  val = (lock_alive_counter << 8) | 255U;
  
#line 3073 
  writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 41U)));
  
#line 3074 
  readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 40U)));
  
#line 3075 
  return;
}


#line 3077  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_ms_mem_write128(struct qlcnic_adapter *adapter, u64 addr, u32 *data, u32 count)
{
  int __retres;
  int i;
  int j;
  u32 temp;
  u32 *tmp;
  u32 *tmp_0;
  u32 *tmp_1;
  u32 *tmp_2;
  int tmp_3;
  
#line 3080 
  int ret = 0;
  
#line 3084 
  if ((addr & 15ULL) != 0ULL) {
    
#line 3085 
    __retres = -5;
    
#line 3085 
    goto return_label;
  }
  else ;
  
#line 3087 
  ldv_mutex_lock_87_0(& (adapter->ahw)->mem_lock);
  
#line 3088 
  qlcnic_ind_wr(adapter,1090519192U,0U);
  
#line 3090 
  i = 0;
  
#line 3090 
  goto ldv_55475;
  ldv_55474: 
#line 3091 
  ;
  
#line 3091 
  if (addr + 18446744060824649728ULL > 134217726ULL && addr > 268435454ULL) {
    
#line 3095 
    ldv_mutex_unlock_88_0(& (adapter->ahw)->mem_lock);
    
#line 3096 
    __retres = -5;
    
#line 3096 
    goto return_label;
  }
  else ;
  
#line 3099 
  qlcnic_ind_wr(adapter,1090519188U,(unsigned int)addr);
  
#line 3100 
  tmp = data;
  
#line 3100 
  data += 1;
  
#line 3100 
  ;
  
#line 3100 
  ;
  
#line 3100 
  qlcnic_ind_wr(adapter,1090519200U,*tmp);
  
#line 3101 
  tmp_0 = data;
  
#line 3101 
  data += 1;
  
#line 3101 
  ;
  
#line 3101 
  ;
  
#line 3101 
  qlcnic_ind_wr(adapter,1090519204U,*tmp_0);
  
#line 3102 
  tmp_1 = data;
  
#line 3102 
  data += 1;
  
#line 3102 
  ;
  
#line 3102 
  ;
  
#line 3102 
  qlcnic_ind_wr(adapter,1090519216U,*tmp_1);
  
#line 3103 
  tmp_2 = data;
  
#line 3103 
  data += 1;
  
#line 3103 
  ;
  
#line 3103 
  ;
  
#line 3103 
  qlcnic_ind_wr(adapter,1090519220U,*tmp_2);
  
#line 3104 
  qlcnic_ind_wr(adapter,1090519184U,6U);
  
#line 3105 
  qlcnic_ind_wr(adapter,1090519184U,7U);
  
#line 3107 
  j = 0;
  
#line 3107 
  goto ldv_55470;
  ldv_55469: 
#line 3108 
  ;
  
#line 3108 
  tmp_3 = qlcnic_ind_rd(adapter,1090519184U);
  
#line 3108 
  temp = (unsigned int)tmp_3;
  
#line 3110 
  if ((temp & 8U) == 0U) 
#line 3111 
                         goto ldv_55468; else ;
  
#line 3107 
  j += 1;
  ldv_55470: 
#line 3108 
  ;
  
#line 3107 
  if (j <= 999) 
#line 3109 
                goto ldv_55469; else 
#line 3112 
                                     goto ldv_55468;
  ldv_55468: 
#line 3113 
  ;
  
#line 3115 
  if (j > 999) {
    {
      
#line 3116 
      struct ratelimit_state _rs = {.lock = {.raw_lock = {.val = {.counter = 0}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "_rs.lock", .cpu = 0, .ip = 0UL}}, .interval = 1250, .burst = 10, .printed = 0, .missed = 0, .begin = 0UL};
      {
        int tmp_4;
        
#line 3116 
        tmp_4 = ___ratelimit(& _rs,"qlcnic_ms_mem_write128");
        
#line 3116 
        if (tmp_4 != 0) 
#line 3116 
                        printk("\001"); else ;
      }
    }
    
#line 3118 
    ldv_mutex_unlock_89(& (adapter->ahw)->mem_lock);
    
#line 3119 
    __retres = -5;
    
#line 3119 
    goto return_label;
  }
  else ;
  
#line 3090 
  i += 1;
  
#line 3090 
  addr += 16ULL;
  ldv_55475: 
#line 3091 
  ;
  
#line 3090 
  if ((unsigned int)i < count) 
#line 3092 
                               goto ldv_55474; else 
#line 3095 
                                                    goto ldv_55476;
  ldv_55476: 
#line 3096 
  ;
  
#line 3123 
  ldv_mutex_unlock_90_0(& (adapter->ahw)->mem_lock);
  
#line 3125 
  __retres = ret;
  return_label: 
#line 3125 
                return __retres;
}


#line 3128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_flash_read32(struct qlcnic_adapter *adapter, u32 flash_addr, u8 *p_data, int count)
{
  int __retres;
  u32 word;
  u32 ret;
  ulong indirect_addr;
  int i;
  int tmp;
  int tmp_0;
  int tmp_1;
  
#line 3131 
  u32 addr = flash_addr;
  
#line 3133 
  int err = 0;
  
#line 3135 
  tmp = qlcnic_83xx_lock_flash(adapter);
  
#line 3135 
  if (tmp != 0) {
    
#line 3136 
    __retres = -5;
    
#line 3136 
    goto return_label;
  }
  else ;
  
#line 3138 
  if ((addr & 3U) != 0U) {
    
#line 3139 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Illegal addr = 0x%x\n",addr);
    
#line 3140 
    qlcnic_83xx_unlock_flash(adapter);
    
#line 3141 
    __retres = -5;
    
#line 3141 
    goto return_label;
  }
  else ;
  
#line 3144 
  i = 0;
  
#line 3144 
  goto ldv_55490;
  ldv_55489: 
#line 3145 
  ;
  
#line 3145 
  tmp_0 = qlcnic_83xx_wrt_reg_indirect(adapter,1108410416UL,addr);
  
#line 3145 
  if (tmp_0 != 0) {
    
#line 3148 
    qlcnic_83xx_unlock_flash(adapter);
    
#line 3149 
    __retres = -5;
    
#line 3149 
    goto return_label;
  }
  else ;
  
#line 3152 
  indirect_addr = (unsigned long)((addr & 65535U) | 1108672512U);
  
#line 3153 
  tmp_1 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,indirect_addr,& err);
  
#line 3153 
  ret = (unsigned int)tmp_1;
  
#line 3154 
  if (err == -5) {
    
#line 3155 
    __retres = err;
    
#line 3155 
    goto return_label;
  }
  else ;
  
#line 3157 
  word = ret;
  
#line 3158 
  *((u32 *)p_data) = word;
  
#line 3159 
  p_data += 4U;
  
#line 3160 
  addr += 4U;
  
#line 3144 
  i += 1;
  ldv_55490: 
#line 3145 
  ;
  
#line 3144 
  if (i < count) 
#line 3146 
                 goto ldv_55489; else 
#line 3149 
                                      goto ldv_55491;
  ldv_55491: 
#line 3150 
  ;
  
#line 3163 
  qlcnic_83xx_unlock_flash(adapter);
  
#line 3165 
  __retres = 0;
  return_label: 
#line 3165 
                return __retres;
}


#line 3168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_test_link(struct qlcnic_adapter *adapter)
{
  int __retres;
  u8 pci_func;
  int err;
  u32 state;
  struct qlcnic_cmd_args cmd;
  bool tmp;
  int tmp_0;
  
#line 3172 
  u32 config = 0U;
  
#line 3174 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 3176 
  tmp = qlcnic_sriov_vf_check(adapter);
  
#line 3176 
  if ((int)tmp != 0) 
#line 3177 
                     pci_func = adapter->portnum; else 
#line 3179 
                                                       pci_func = ahw->pci_func;
  
#line 3181 
  if ((unsigned int)pci_func > 7U) 
#line 3181 
                                   tmp_0 = 13980; else 
#line 3181 
                                                       tmp_0 = 13976;
  
#line 3181 
  ;
  
#line 3181 
  state = readl((void const volatile *)(ahw->pci_base0 + tmp_0));
  
#line 3182 
  if (((unsigned int)(1 << (int)pci_func * 4) & state) == 0U) {
    
#line 3183 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"link state down\n");
    
#line 3184 
    __retres = (int)config;
    
#line 3184 
    goto return_label;
  }
  else ;
  
#line 3187 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,104U);
  
#line 3188 
  if (err != 0) {
    
#line 3189 
    __retres = err;
    
#line 3189 
    goto return_label;
  }
  else ;
  
#line 3191 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 3192 
  if (err != 0) {
    
#line 3193 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Get Link Status Command failed: 0x%x\n",err);
    
#line 3195 
    goto out;
  }
  else {
    
#line 3197 
    config = *(cmd.rsp.arg + 1U);
    
#line 3198 
    switch ((config >> 3) & 7U) {
      case (unsigned int)1: 
#line 3199 
      ;
      
#line 3200 
      ahw->link_speed = (unsigned short)10U;
      
#line 3201 
      goto ldv_55503;
      case (unsigned int)2: 
#line 3202 
      ;
      
#line 3203 
      ahw->link_speed = (unsigned short)100U;
      
#line 3204 
      goto ldv_55503;
      case (unsigned int)3: 
#line 3205 
      ;
      
#line 3206 
      ahw->link_speed = (unsigned short)1000U;
      
#line 3207 
      goto ldv_55503;
      case (unsigned int)4: 
#line 3208 
      ;
      
#line 3209 
      ahw->link_speed = (unsigned short)10000U;
      
#line 3210 
      goto ldv_55503;
      default: 
#line 3211 
      ;
      
#line 3212 
      ahw->link_speed = (unsigned short)0U;
      
#line 3213 
      goto ldv_55503;
    }
    ldv_55503: 
#line 3215 
    ;
    
#line 3215 
    config = *(cmd.rsp.arg + 3U);
    
#line 3216 
    switch ((config >> 4) & 31U) {
      case (unsigned int)1: 
#line 3217 
      ;
      case (unsigned int)2: 
#line 3218 
      ;
      case (unsigned int)3: 
#line 3219 
      ;
      
#line 3220 
      ahw->supported_type = (unsigned short)3U;
      
#line 3221 
      ahw->port_type = (unsigned short)2U;
      
#line 3222 
      goto ldv_55511;
      case (unsigned int)7: 
#line 3223 
      ;
      case (unsigned int)8: 
#line 3224 
      ;
      case (unsigned int)9: 
#line 3225 
      ;
      
#line 3226 
      ahw->supported_type = (unsigned short)3U;
      
#line 3227 
      ahw->port_type = (unsigned short)1U;
      
#line 3228 
      goto ldv_55511;
      case (unsigned int)10: 
#line 3229 
      ;
      
#line 3230 
      ahw->supported_type = (unsigned short)0U;
      
#line 3231 
      ahw->port_type = (unsigned short)1U;
      
#line 3232 
      goto ldv_55511;
      case (unsigned int)4: 
#line 3233 
      ;
      case (unsigned int)5: 
#line 3234 
      ;
      case (unsigned int)6: 
#line 3235 
      ;
      case (unsigned int)11: 
#line 3236 
      ;
      
#line 3237 
      ahw->supported_type = (unsigned short)5U;
      
#line 3238 
      ahw->port_type = (unsigned short)2U;
      
#line 3239 
      goto ldv_55511;
      default: 
#line 3240 
      ;
      
#line 3241 
      ahw->supported_type = (unsigned short)255U;
      
#line 3242 
      ahw->port_type = (unsigned short)2U;
    }
    ldv_55511: 
#line 3244 
    ;
    
#line 3244 
    if ((config & 1U) != 0U) 
#line 3245 
                             err = 1; else ;
  }
  out: 
#line 3247 
  ;
  
#line 3248 
  qlcnic_free_mbx_args(& cmd);
  
#line 3249 
  __retres = (int)config;
  return_label: 
#line 3249 
                return __retres;
}


#line 3252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_settings(struct qlcnic_adapter *adapter, struct ethtool_cmd *ecmd)
{
  int tmp_0;
  bool tmp_1;
  
#line 3255 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 3256 
  u32 config = 0U;
  
#line 3257 
  int status = 0;
  
#line 3259 
  tmp_0 = constant_test_bit(16L,(unsigned long const volatile *)(& adapter->state));
  
#line 3259 
  if (tmp_0 == 0) {
    int tmp;
    
#line 3261 
    status = qlcnic_83xx_get_port_info(adapter);
    
#line 3263 
    tmp = qlcnic_83xx_test_link(adapter);
    
#line 3263 
    config = (unsigned int)tmp;
    
#line 3264 
    ahw->module_type = (unsigned short)((unsigned int)((unsigned short)(config >> 4)) & 31U);
  }
  else ;
  
#line 3268 
  ahw->board_type = (unsigned short)131U;
  
#line 3270 
  tmp_1 = netif_running((struct net_device const *)adapter->netdev);
  
#line 3270 
  if ((int)tmp_1 != 0) {
    
#line 3270 
    if ((unsigned int)ahw->has_link_events != 0U) {
      
#line 3271 
      ethtool_cmd_speed_set(ecmd,(unsigned int)ahw->link_speed);
      
#line 3272 
      ecmd->duplex = (unsigned char)ahw->link_duplex;
      
#line 3273 
      ecmd->autoneg = (unsigned char)ahw->link_autoneg;
    }
    else 
#line 3270 
         goto _LAND;
  }
  else {
    _LAND: {
             
#line 3275 
             ethtool_cmd_speed_set(ecmd,4294967295U);
             
#line 3276 
             ecmd->duplex = (unsigned char)255U;
             
#line 3277 
             ecmd->autoneg = (unsigned char)0U;
           }
  }
  
#line 3280 
  ecmd->supported = 4202U;
  
#line 3286 
  if ((unsigned int)ecmd->autoneg == 1U) {
    
#line 3287 
    if ((ahw->port_config & 256U) != 0U) 
#line 3288 
                                         ecmd->advertising |= 2U; else ;
    
#line 3289 
    if ((ahw->port_config & 512U) != 0U) 
#line 3290 
                                         ecmd->advertising |= 8U; else ;
    
#line 3291 
    if ((ahw->port_config & 1024U) != 0U) 
#line 3292 
                                          ecmd->advertising |= 32U; else ;
    
#line 3293 
    if ((ahw->port_config & 2048U) != 0U) 
#line 3294 
                                          ecmd->advertising |= 4096U; else ;
    
#line 3295 
    if ((ahw->port_config & 32768U) != 0U) 
#line 3296 
                                           ecmd->advertising |= 64U; else ;
  }
  else {
    
#line 3298 
    switch ((int)ahw->link_speed) {
      case 10: 
#line 3299 
      ;
      
#line 3300 
      ecmd->advertising = 2U;
      
#line 3301 
      goto ldv_55529;
      case 100: 
#line 3302 
      ;
      
#line 3303 
      ecmd->advertising = 8U;
      
#line 3304 
      goto ldv_55529;
      case 1000: 
#line 3305 
      ;
      
#line 3306 
      ecmd->advertising = 32U;
      
#line 3307 
      goto ldv_55529;
      case 10000: 
#line 3308 
      ;
      
#line 3309 
      ecmd->advertising = 4096U;
      
#line 3310 
      goto ldv_55529;
      default: 
#line 3311 
      ;
      
#line 3312 
      goto ldv_55529;
    }
    ldv_55529: 
#line 3315 
    ;
  }
  
#line 3317 
  switch ((int)ahw->supported_type) {
    case 3: 
#line 3318 
    ;
    
#line 3319 
    ecmd->supported |= 1024U;
    
#line 3320 
    ecmd->advertising |= 1024U;
    
#line 3321 
    ecmd->port = (unsigned char)3U;
    
#line 3322 
    ecmd->transceiver = (unsigned char)1U;
    
#line 3323 
    goto ldv_55535;
    case 0: 
#line 3324 
    ;
    
#line 3325 
    ecmd->supported |= 128U;
    
#line 3326 
    ecmd->advertising |= 128U;
    
#line 3327 
    ecmd->port = (unsigned char)0U;
    
#line 3328 
    ecmd->transceiver = (unsigned char)0U;
    
#line 3329 
    goto ldv_55535;
    case 5: 
#line 3330 
    ;
    
#line 3331 
    ecmd->supported |= 1024U;
    
#line 3332 
    ecmd->advertising |= 1024U;
    
#line 3333 
    ecmd->port = (unsigned char)5U;
    
#line 3334 
    ecmd->transceiver = (unsigned char)1U;
    
#line 3335 
    goto ldv_55535;
    default: 
#line 3336 
    ;
    
#line 3337 
    ecmd->supported |= 1024U;
    
#line 3338 
    ecmd->advertising |= 1024U;
    
#line 3339 
    ecmd->port = (unsigned char)255U;
    
#line 3340 
    ecmd->transceiver = (unsigned char)1U;
    
#line 3341 
    goto ldv_55535;
  }
  ldv_55535: 
#line 3343 
  ;
  
#line 3343 
  ecmd->phy_address = ahw->physical_port;
  
#line 3344 
  return status;
}


#line 3347  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_set_settings(struct qlcnic_adapter *adapter, struct ethtool_cmd *ecmd)
{
  int __retres;
  
#line 3350 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 3351 
  u32 config = (adapter->ahw)->port_config;
  
#line 3352 
  int status = 0;
  
#line 3355 
  if ((unsigned int)ecmd->duplex == 0U) {
    
#line 3356 
    netdev_info((struct net_device const *)adapter->netdev,"Half duplex mode not supported\n");
    
#line 3358 
    __retres = -22;
    
#line 3358 
    goto return_label;
  }
  else ;
  
#line 3361 
  if ((unsigned int)ecmd->autoneg != 0U) {
    
#line 3362 
    ahw->port_config |= 32768U;
    
#line 3363 
    ahw->port_config |= 3584U;
  }
  else {
    __u32 tmp;
    
#line 3367 
    ahw->port_config &= 4294934527U;
    
#line 3368 
    tmp = ethtool_cmd_speed((struct ethtool_cmd const *)ecmd);
    
#line 3368 
    switch (tmp) {
      case (__u32)10: 
#line 3369 
      ;
      
#line 3370 
      ahw->port_config &= 4294963711U;
      
#line 3373 
      ahw->port_config |= 256U;
      
#line 3374 
      goto ldv_55547;
      case (__u32)100: 
#line 3375 
      ;
      
#line 3376 
      ahw->port_config &= 4294963967U;
      
#line 3379 
      ahw->port_config |= 512U;
      
#line 3380 
      goto ldv_55547;
      case (__u32)1000: 
#line 3381 
      ;
      
#line 3382 
      ahw->port_config &= 4294964479U;
      
#line 3385 
      ahw->port_config |= 1024U;
      
#line 3386 
      goto ldv_55547;
      case (__u32)10000: 
#line 3387 
      ;
      
#line 3388 
      ahw->port_config &= 4294965503U;
      
#line 3391 
      ahw->port_config |= 2048U;
      
#line 3392 
      goto ldv_55547;
      default: 
#line 3393 
      ;
      
#line 3394 
      __retres = -22;
      
#line 3394 
      goto return_label;
    }
    ldv_55547: 
#line 3396 
    ;
  }
  
#line 3397 
  status = qlcnic_83xx_set_port_config(adapter);
  
#line 3398 
  if (status != 0) {
    
#line 3399 
    netdev_info((struct net_device const *)adapter->netdev,"Failed to Set Link Speed and autoneg.\n");
    
#line 3401 
    ahw->port_config = config;
  }
  else ;
  
#line 3404 
  __retres = status;
  return_label: 
#line 3404 
                return __retres;
}


#line 3407  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static u64 *qlcnic_83xx_copy_stats(struct qlcnic_cmd_args *cmd, u64 *data, int index)
{
  u32 low;
  u32 hi;
  u64 val;
  u64 *tmp;
  
#line 3413 
  low = *(cmd->rsp.arg + index);
  
#line 3414 
  hi = *(cmd->rsp.arg + ((unsigned int)index + 1U));
  
#line 3415 
  val = (unsigned long long)low | ((unsigned long long)hi << 32);
  
#line 3416 
  tmp = data;
  
#line 3416 
  data += 1;
  
#line 3416 
  *tmp = val;
  
#line 3417 
  return data;
}


#line 3420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static u64 *qlcnic_83xx_fill_stats(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd, u64 *data, int type, int *ret)
{
  u64 *__retres;
  int err;
  int k;
  int total_regs;
  
#line 3426 
  *ret = 0;
  
#line 3427 
  err = qlcnic_issue_cmd(adapter,cmd);
  
#line 3428 
  if (err != 0) {
    
#line 3429 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Error in get statistics mailbox command\n");
    
#line 3431 
    *ret = -5;
    
#line 3432 
    __retres = data;
    
#line 3432 
    goto return_label;
  }
  else ;
  
#line 3434 
  total_regs = (int)cmd->rsp.num;
  
#line 3435 
  switch (type) {
    case 1: 
#line 3436 
    ;
    
#line 3438 
    k = 2;
    
#line 3438 
    goto ldv_55572;
    ldv_55571: 
#line 3439 
    ;
    
#line 3439 
    data = qlcnic_83xx_copy_stats(cmd,data,k);
    
#line 3438 
    k += 2;
    ldv_55572: 
#line 3439 
    ;
    
#line 3438 
    if (k <= 27) 
#line 3440 
                 goto ldv_55571; else 
#line 3443 
                                      goto ldv_55573;
    ldv_55573: 
#line 3444 
    ;
    
#line 3442 
    k += 6;
    
#line 3442 
    goto ldv_55575;
    ldv_55574: 
#line 3443 
    ;
    
#line 3443 
    data = qlcnic_83xx_copy_stats(cmd,data,k);
    
#line 3442 
    k += 2;
    ldv_55575: 
#line 3443 
    ;
    
#line 3442 
    if (k <= 59) 
#line 3444 
                 goto ldv_55574; else 
#line 3447 
                                      goto ldv_55576;
    ldv_55576: 
#line 3448 
    ;
    
#line 3446 
    k += 6;
    
#line 3446 
    goto ldv_55578;
    ldv_55577: 
#line 3447 
    ;
    
#line 3447 
    data = qlcnic_83xx_copy_stats(cmd,data,k);
    
#line 3446 
    k += 2;
    ldv_55578: 
#line 3447 
    ;
    
#line 3446 
    if (k <= 79) 
#line 3448 
                 goto ldv_55577; else 
#line 3451 
                                      goto ldv_55579;
    ldv_55579: 
#line 3452 
    ;
    
#line 3449 
    goto ldv_55581;
    ldv_55580: 
#line 3450 
    ;
    
#line 3450 
    data = qlcnic_83xx_copy_stats(cmd,data,k);
    
#line 3449 
    k += 2;
    ldv_55581: 
#line 3450 
    ;
    
#line 3449 
    if (k < total_regs) 
#line 3451 
                        goto ldv_55580; else 
#line 3454 
                                             goto ldv_55582;
    ldv_55582: 
#line 3455 
    ;
    
#line 3451 
    goto ldv_55583;
    case 2: 
#line 3452 
    ;
    
#line 3453 
    k = 2;
    
#line 3453 
    goto ldv_55586;
    ldv_55585: 
#line 3454 
    ;
    
#line 3454 
    data = qlcnic_83xx_copy_stats(cmd,data,k);
    
#line 3453 
    k += 2;
    ldv_55586: 
#line 3454 
    ;
    
#line 3453 
    if (k <= 7) 
#line 3455 
                goto ldv_55585; else 
#line 3458 
                                     goto ldv_55587;
    ldv_55587: 
#line 3459 
    ;
    
#line 3456 
    k += 2;
    
#line 3456 
    goto ldv_55589;
    ldv_55588: 
#line 3457 
    ;
    
#line 3457 
    data = qlcnic_83xx_copy_stats(cmd,data,k);
    
#line 3456 
    k += 2;
    ldv_55589: 
#line 3457 
    ;
    
#line 3456 
    if (k <= 23) 
#line 3458 
                 goto ldv_55588; else 
#line 3461 
                                      goto ldv_55590;
    ldv_55590: 
#line 3462 
    ;
    
#line 3459 
    k += 2;
    
#line 3459 
    goto ldv_55592;
    ldv_55591: 
#line 3460 
    ;
    
#line 3460 
    data = qlcnic_83xx_copy_stats(cmd,data,k);
    
#line 3459 
    k += 2;
    ldv_55592: 
#line 3460 
    ;
    
#line 3459 
    if (k < total_regs) 
#line 3461 
                        goto ldv_55591; else 
#line 3464 
                                             goto ldv_55593;
    ldv_55593: 
#line 3465 
    ;
    
#line 3461 
    goto ldv_55583;
    case 3: 
#line 3462 
    ;
    
#line 3463 
    k = 2;
    
#line 3463 
    goto ldv_55596;
    ldv_55595: 
#line 3464 
    ;
    
#line 3464 
    data = qlcnic_83xx_copy_stats(cmd,data,k);
    
#line 3463 
    k += 2;
    ldv_55596: 
#line 3464 
    ;
    
#line 3463 
    if (k <= 9) 
#line 3465 
                goto ldv_55595; else 
#line 3468 
                                     goto ldv_55597;
    ldv_55597: 
#line 3469 
    ;
    
#line 3466 
    k += 2;
    
#line 3466 
    goto ldv_55599;
    ldv_55598: 
#line 3467 
    ;
    
#line 3467 
    data = qlcnic_83xx_copy_stats(cmd,data,k);
    
#line 3466 
    k += 2;
    ldv_55599: 
#line 3467 
    ;
    
#line 3466 
    if (k < total_regs) 
#line 3468 
                        goto ldv_55598; else 
#line 3471 
                                             goto ldv_55600;
    ldv_55600: 
#line 3472 
    ;
    
#line 3468 
    goto ldv_55583;
    default: 
#line 3469 
    ;
    
#line 3470 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"Unknown get statistics mode\n");
    
#line 3471 
    *ret = -5;
  }
  ldv_55583: 
#line 3473 
  ;
  
#line 3473 
  __retres = data;
  return_label: 
#line 3473 
                return __retres;
}


#line 3476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_get_stats(struct qlcnic_adapter *adapter, u64 *data)
{
  struct qlcnic_cmd_args cmd;
  
#line 3479 
  struct net_device *netdev = adapter->netdev;
  
#line 3480 
  int ret = 0;
  
#line 3482 
  ret = qlcnic_alloc_mbx_args(& cmd,adapter,15U);
  
#line 3483 
  if (ret != 0) 
#line 3484 
                goto return_label; else ;
  
#line 3486 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)(adapter->tx_ring)->ctx_id << 16) | 2);
  
#line 3487 
  cmd.rsp.num = 14U;
  
#line 3488 
  data = qlcnic_83xx_fill_stats(adapter,& cmd,data,3,& ret);
  
#line 3490 
  if (ret != 0) {
    
#line 3491 
    netdev_err((struct net_device const *)netdev,"Error getting Tx stats\n");
    
#line 3492 
    goto out;
  }
  else ;
  
#line 3495 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)adapter->portnum << 16) | 4);
  
#line 3496 
  cmd.rsp.num = 94U;
  
#line 3497 
  memset((void *)cmd.rsp.arg,0,(unsigned long)cmd.rsp.num * 4UL);
  
#line 3498 
  data = qlcnic_83xx_fill_stats(adapter,& cmd,data,1,& ret);
  
#line 3500 
  if (ret != 0) {
    
#line 3501 
    netdev_err((struct net_device const *)netdev,"Error getting MAC stats\n");
    
#line 3502 
    goto out;
  }
  else ;
  
#line 3505 
  *(cmd.req.arg + 1U) = (unsigned int)((int)(adapter->recv_ctx)->context_id << 16);
  
#line 3506 
  cmd.rsp.num = 40U;
  
#line 3507 
  memset((void *)cmd.rsp.arg,0,(unsigned long)cmd.rsp.num * 4UL);
  
#line 3508 
  data = qlcnic_83xx_fill_stats(adapter,& cmd,data,2,& ret);
  
#line 3510 
  if (ret != 0) 
#line 3511 
                netdev_err((struct net_device const *)netdev,"Error getting Rx stats\n"); else ;
  out: 
#line 3512 
  ;
  
#line 3513 
  qlcnic_free_mbx_args(& cmd);
  return_label: 
#line 3514 
                return;
}


#line 3516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_reg_test(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 major;
  u32 minor;
  u32 sub;
  
#line 3520 
  major = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 11U)));
  
#line 3521 
  minor = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 12U)));
  
#line 3522 
  sub = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 13U)));
  
#line 3524 
  if (adapter->fw_version != ((major << 24) + (minor << 16)) + sub) {
    
#line 3525 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: Reg test failed\n","qlcnic_83xx_reg_test");
    
#line 3527 
    __retres = 1;
    
#line 3527 
    goto return_label;
  }
  else ;
  
#line 3529 
  __retres = 0;
  return_label: 
#line 3529 
                return __retres;
}


#line 3532  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_regs_len(struct qlcnic_adapter *adapter)
{
  int __retres;
  
#line 3534 
  __retres = 264;
  
#line 3534 
  return __retres;
}


#line 3540  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_get_registers(struct qlcnic_adapter *adapter, u32 *regs_buff)
{
  int i;
  int tmp;
  
#line 3542 
  int j = 0;
  
#line 3544 
  i = 3;
  
#line 3544 
  goto ldv_55636;
  ldv_55635: 
#line 3545 
  ;
  
#line 3546 
  *(regs_buff + i) = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + j)));
  
#line 3545 
  i += 1;
  
#line 3545 
  j += 1;
  ldv_55636: 
#line 3546 
  ;
  
#line 3544 
  if ((unsigned int)j <= 22U) 
#line 3547 
                              goto ldv_55635; else 
#line 3550 
                                                   goto ldv_55637;
  ldv_55637: 
#line 3551 
  ;
  
#line 3548 
  j = 0;
  
#line 3548 
  goto ldv_55642;
  ldv_55641: 
#line 3549 
  ;
  
#line 3549 
  tmp = i;
  
#line 3549 
  i += 1;
  
#line 3549 
  *(regs_buff + tmp) = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + j)));
  
#line 3548 
  j += 1;
  ldv_55642: 
#line 3549 
  ;
  
#line 3548 
  if ((unsigned int)j <= 42U) 
#line 3550 
                              goto ldv_55641; else 
#line 3553 
                                                   goto ldv_55643;
  ldv_55643: 
#line 3554 
  ;
  
#line 3550 
  return i;
}


#line 3553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_interrupt_test(struct net_device *netdev)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  u8 val;
  u32 data;
  u16 intrpt_id;
  u16 id;
  int ret;
  int tmp_0;
  int tmp_1;
  
#line 3555 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3556 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 3558 
  u8 drv_sds_rings = adapter->drv_sds_rings;
  
#line 3559 
  u8 drv_tx_rings = adapter->drv_tx_rings;
  
#line 3564 
  tmp_0 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
  
#line 3564 
  if (tmp_0 != 0) {
    
#line 3565 
    netdev_info((struct net_device const *)netdev,"Device is resetting\n");
    
#line 3566 
    __retres = -16;
    
#line 3566 
    goto return_label;
  }
  else ;
  
#line 3569 
  tmp_1 = qlcnic_get_diag_lock(adapter);
  
#line 3569 
  if (tmp_1 != 0) {
    
#line 3570 
    netdev_info((struct net_device const *)netdev,"Device in diagnostics mode\n");
    
#line 3571 
    __retres = -16;
    
#line 3571 
    goto return_label;
  }
  else ;
  
#line 3574 
  ret = qlcnic_83xx_diag_alloc_res(netdev,1,(unsigned char)((int)drv_sds_rings));
  
#line 3576 
  if (ret != 0) 
#line 3577 
                goto fail_diag_irq; else ;
  
#line 3579 
  ahw->diag_cnt = 0;
  
#line 3580 
  ret = qlcnic_alloc_mbx_args(& cmd,adapter,17U);
  
#line 3581 
  if (ret != 0) 
#line 3582 
                goto fail_diag_irq; else ;
  
#line 3584 
  if ((adapter->flags & 4U) != 0U) 
#line 3585 
                                   intrpt_id = (ahw->intr_tbl)->id;
  else {
    unsigned int tmp_2;
    
#line 3587 
    tmp_2 = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 10U)));
    
#line 3587 
    intrpt_id = (unsigned short)tmp_2;
  }
  
#line 3589 
  *(cmd.req.arg + 1U) = 1U;
  
#line 3590 
  *(cmd.req.arg + 2U) = (unsigned int)intrpt_id;
  
#line 3591 
  *(cmd.req.arg + 3U) = 1U;
  
#line 3593 
  ret = qlcnic_issue_cmd(adapter,& cmd);
  
#line 3594 
  data = *(cmd.rsp.arg + 2U);
  
#line 3595 
  id = (unsigned short)data;
  
#line 3596 
  val = (unsigned char)(data >> 16);
  
#line 3597 
  if ((int)id != (int)intrpt_id) 
#line 3598 
                                 _dev_info((struct device const *)(& (adapter->pdev)->dev),"Interrupt generated: 0x%x, requested:0x%x\n",(int)id,(int)intrpt_id); else ;
  
#line 3601 
  if ((unsigned int)val != 0U) 
#line 3602 
                               dev_err((struct device const *)(& (adapter->pdev)->dev),"Interrupt test error: 0x%x\n",(int)val); else ;
  
#line 3604 
  if (ret != 0) 
#line 3605 
                goto done; else ;
  
#line 3607 
  msleep(20U);
  
#line 3608 
  ret = ahw->diag_cnt == 0;
  done: 
#line 3610 
  ;
  
#line 3611 
  qlcnic_free_mbx_args(& cmd);
  
#line 3612 
  qlcnic_83xx_diag_free_res(netdev,(unsigned char)((int)drv_sds_rings));
  fail_diag_irq: 
#line 3614 
  ;
  
#line 3615 
  adapter->drv_sds_rings = drv_sds_rings;
  
#line 3616 
  adapter->drv_tx_rings = drv_tx_rings;
  
#line 3617 
  qlcnic_release_diag_lock(adapter);
  
#line 3618 
  __retres = ret;
  return_label: 
#line 3618 
                return __retres;
}


#line 3621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_get_pauseparam(struct qlcnic_adapter *adapter, struct ethtool_pauseparam *pause)
{
  u32 config;
  
#line 3624 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 3625 
  int status = 0;
  
#line 3628 
  status = qlcnic_83xx_get_port_config(adapter);
  
#line 3629 
  if (status != 0) {
    
#line 3630 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Get Pause Config failed\n","qlcnic_83xx_get_pauseparam");
    
#line 3632 
    goto return_label;
  }
  else ;
  
#line 3634 
  config = ahw->port_config;
  
#line 3635 
  if ((config & 32U) != 0U) {
    
#line 3636 
    switch ((int)((unsigned short)(config >> 16))) {
      case 16: 
#line 3637 
      ;
      
#line 3638 
      pause->tx_pause = 1U;
      
#line 3639 
      goto ldv_55668;
      case 32: 
#line 3640 
      ;
      
#line 3641 
      pause->rx_pause = 1U;
      
#line 3642 
      goto ldv_55668;
      case 48: 
#line 3643 
      ;
      default: 
#line 3644 
      ;
      
#line 3648 
      pause->tx_pause = 1U;
      
#line 3649 
      pause->rx_pause = 1U;
    }
    ldv_55668: 
#line 3651 
    ;
  }
  else ;
  
#line 3653 
  if ((config & 32768U) != 0U) 
#line 3654 
                               pause->autoneg = 1U; else ;
  return_label: 
#line 3655 
                return;
}


#line 3657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_set_pauseparam(struct qlcnic_adapter *adapter, struct ethtool_pauseparam *pause)
{
  int __retres;
  u32 config;
  
#line 3660 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 3661 
  int status = 0;
  
#line 3664 
  status = qlcnic_83xx_get_port_config(adapter);
  
#line 3665 
  if (status != 0) {
    
#line 3666 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Get Pause Config failed.\n","qlcnic_83xx_set_pauseparam");
    
#line 3668 
    __retres = status;
    
#line 3668 
    goto return_label;
  }
  else ;
  
#line 3670 
  config = ahw->port_config;
  
#line 3672 
  if ((unsigned int)ahw->port_type == 1U) {
    
#line 3673 
    if (pause->autoneg != 0U) 
#line 3674 
                              ahw->port_config |= 32768U; else ;
    
#line 3675 
    if (pause->autoneg == 0U) 
#line 3676 
                              ahw->port_config &= 4294934527U; else ;
  }
  else 
    
#line 3677 
    if ((unsigned int)ahw->port_type == 2U && pause->autoneg != 0U) {
      
#line 3678 
      __retres = -95;
      
#line 3678 
      goto return_label;
    }
    else ;
  
#line 3681 
  if ((config & 32U) == 0U) 
#line 3682 
                            ahw->port_config |= 32U; else ;
  
#line 3684 
  if (pause->rx_pause != 0U && pause->tx_pause != 0U) 
#line 3685 
                                                      ahw->port_config |= 3145728U;
  else 
    
#line 3686 
    if (pause->rx_pause != 0U && pause->tx_pause == 0U) {
      
#line 3687 
      ahw->port_config &= 4293918719U;
      
#line 3688 
      ahw->port_config |= 2097152U;
    }
    else 
      
#line 3689 
      if (pause->tx_pause != 0U && pause->rx_pause == 0U) {
        
#line 3690 
        ahw->port_config &= 4292870143U;
        
#line 3691 
        ahw->port_config |= 1048576U;
      }
      else 
        
#line 3692 
        if (pause->rx_pause == 0U && pause->tx_pause == 0U) 
#line 3693 
                                                            ahw->port_config &= 4291821535U; else ;
  
#line 3696 
  status = qlcnic_83xx_set_port_config(adapter);
  
#line 3697 
  if (status != 0) {
    
#line 3698 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Set Pause Config failed.\n","qlcnic_83xx_set_pauseparam");
    
#line 3700 
    ahw->port_config = config;
  }
  else ;
  
#line 3702 
  __retres = status;
  return_label: 
#line 3702 
                return __retres;
}


#line 3705  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_read_flash_status_reg(struct qlcnic_adapter *adapter)
{
  int __retres;
  int ret;
  u32 temp;
  int tmp;
  
#line 3707 
  int err = 0;
  
#line 3710 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410376UL,16580613U);
  
#line 3712 
  qlcnic_83xx_wrt_reg_indirect(adapter,1108410372UL,63U);
  
#line 3714 
  ret = qlcnic_83xx_poll_flash_status_reg(adapter);
  
#line 3715 
  if (ret != 0) {
    
#line 3716 
    __retres = -5;
    
#line 3716 
    goto return_label;
  }
  else ;
  
#line 3718 
  tmp = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,1108410392UL,& err);
  
#line 3718 
  temp = (unsigned int)tmp;
  
#line 3719 
  if (err == -5) {
    
#line 3720 
    __retres = err;
    
#line 3720 
    goto return_label;
  }
  else ;
  
#line 3722 
  __retres = (int)temp & 255;
  return_label: 
#line 3722 
                return __retres;
}


#line 3725  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_flash_test(struct qlcnic_adapter *adapter)
{
  int __retres;
  int status;
  
#line 3729 
  status = qlcnic_83xx_read_flash_status_reg(adapter);
  
#line 3730 
  if (status == -5) {
    
#line 3731 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: EEPROM test failed.\n","qlcnic_83xx_flash_test");
    
#line 3733 
    __retres = 1;
    
#line 3733 
    goto return_label;
  }
  else ;
  
#line 3735 
  __retres = 0;
  return_label: 
#line 3735 
                return __retres;
}


#line 3738  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_shutdown(struct pci_dev *pdev)
{
  int __retres;
  int retval;
  bool tmp_0;
  
#line 3740 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  
#line 3741 
  struct net_device *netdev = adapter->netdev;
  
#line 3744 
  netif_device_detach(netdev);
  
#line 3745 
  qlcnic_cancel_idc_work(adapter);
  
#line 3747 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 3747 
  if ((int)tmp_0 != 0) 
#line 3748 
                       qlcnic_down(adapter,netdev); else ;
  
#line 3750 
  qlcnic_83xx_disable_mbx_intr(adapter);
  
#line 3751 
  cancel_delayed_work_sync(& adapter->idc_aen_work);
  
#line 3753 
  retval = pci_save_state(pdev);
  
#line 3754 
  if (retval != 0) {
    
#line 3755 
    __retres = retval;
    
#line 3755 
    goto return_label;
  }
  else ;
  
#line 3757 
  __retres = 0;
  return_label: 
#line 3757 
                return __retres;
}


#line 3760  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_resume(struct qlcnic_adapter *adapter)
{
  int __retres;
  
#line 3762 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 3763 
  struct qlc_83xx_idc *idc = & ahw->idc;
  
#line 3764 
  int err = 0;
  
#line 3766 
  err = qlcnic_83xx_idc_init(adapter);
  
#line 3767 
  if (err != 0) {
    
#line 3768 
    __retres = err;
    
#line 3768 
    goto return_label;
  }
  else ;
  
#line 3770 
  if ((unsigned int)ahw->nic_mode == 255U) 
    
#line 3771 
    if ((unsigned int)ahw->op_mode == 0U) 
#line 3772 
                                          qlcnic_83xx_set_vnic_opmode(adapter);
    else {
      
#line 3774 
      err = qlcnic_83xx_check_vnic_state(adapter);
      
#line 3775 
      if (err != 0) {
        
#line 3776 
        __retres = err;
        
#line 3776 
        goto return_label;
      }
      else ;
    }
  else ;
  
#line 3780 
  err = qlcnic_83xx_idc_reattach_driver(adapter);
  
#line 3781 
  if (err != 0) {
    
#line 3782 
    __retres = err;
    
#line 3782 
    goto return_label;
  }
  else ;
  
#line 3784 
  qlcnic_schedule_work(adapter,& qlcnic_83xx_idc_poll_dev_state,(int)idc->delay);
  
#line 3786 
  __retres = err;
  return_label: 
#line 3786 
                return __retres;
}


#line 3789  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_reinit_mbx_work(struct qlcnic_mailbox *mbx)
{
  
#line 3791 
  reinit_completion(& mbx->completion);
  
#line 3792 
  set_bit(2L,(unsigned long volatile *)(& mbx->status));
  
#line 3793 
  return;
}


#line 3795  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_free_mailbox(struct qlcnic_mailbox *mbx)
{
  
#line 3797 
  if (mbx == (struct qlcnic_mailbox *)0) 
#line 3798 
                                         goto return_label; else ;
  
#line 3800 
  destroy_workqueue(mbx->work_q);
  
#line 3801 
  kfree((void const *)mbx);
  return_label: 
#line 3802 
                return;
}


#line 3805  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static void qlcnic_83xx_notify_cmd_completion(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  
#line 3808 
  atomic_set(& cmd->rsp_status,1);
  
#line 3810 
  if (cmd->type == 1U) {
    
#line 3811 
    qlcnic_free_mbx_args(cmd);
    
#line 3812 
    kfree((void const *)cmd);
    
#line 3813 
    goto return_label;
  }
  else ;
  
#line 3815 
  complete(& cmd->completion);
  return_label: 
#line 3816 
                return;
}


#line 3818  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_flush_mbx_queue(struct qlcnic_adapter *adapter)
{
  struct qlcnic_cmd_args *tmp;
  int tmp_0;
  
#line 3820 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  
#line 3821 
  struct list_head *head = & mbx->cmd_q;
  
#line 3822 
  struct qlcnic_cmd_args *cmd = (struct qlcnic_cmd_args *)0;
  
#line 3824 
  ldv_spin_lock_91(& mbx->queue_lock);
  
#line 3826 
  goto ldv_55723;
  ldv_55722: 
#line 3827 
  ;
  {
    
#line 3827 
    struct list_head const *__mptr = (struct list_head const *)head->next;
    
#line 3827 
    tmp = (struct qlcnic_cmd_args *)__mptr + 18446744073709551520U;
  }
  
#line 3827 
  cmd = tmp;
  
#line 3828 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: Mailbox command 0x%x\n","qlcnic_83xx_flush_mbx_queue",cmd->cmd_op);
  
#line 3830 
  list_del(& cmd->list);
  
#line 3831 
  mbx->num_cmds -= 1U;
  
#line 3832 
  qlcnic_83xx_notify_cmd_completion(adapter,cmd);
  ldv_55723: 
#line 3833 
  ;
  
#line 3826 
  tmp_0 = list_empty((struct list_head const *)head);
  
#line 3826 
  if (tmp_0 == 0) 
#line 3828 
                  goto ldv_55722; else 
#line 3831 
                                       goto ldv_55724;
  ldv_55724: 
#line 3832 
  ;
  
#line 3835 
  ldv_spin_unlock_92(& mbx->queue_lock);
  
#line 3836 
  return;
}


#line 3838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_check_mbx_status(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 host_mbx_ctrl;
  int tmp;
  
#line 3840 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 3841 
  struct qlcnic_mailbox *mbx = ahw->mailbox;
  
#line 3844 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& mbx->status));
  
#line 3844 
  if (tmp == 0) {
    
#line 3845 
    __retres = -16;
    
#line 3845 
    goto return_label;
  }
  else ;
  
#line 3847 
  host_mbx_ctrl = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 3U)));
  
#line 3848 
  if (host_mbx_ctrl != 0U) {
    
#line 3849 
    set_bit(2L,(unsigned long volatile *)(& mbx->status));
    
#line 3850 
    ahw->idc.collect_dump = 1;
    
#line 3851 
    __retres = -5;
    
#line 3851 
    goto return_label;
  }
  else ;
  
#line 3854 
  __retres = 0;
  return_label: 
#line 3854 
                return __retres;
}


#line 3857  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static void qlcnic_83xx_signal_mbx_cmd(struct qlcnic_adapter *adapter, u8 issue_cmd)
{
  
#line 3860 
  if ((unsigned int)issue_cmd != 0U) 
#line 3861 
                                     writel(1U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 3U))); else 
                                                                    
#line 3863 
                                                                    writel(0U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 4U)));
  
#line 3864 
  return;
}


#line 3866  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_dequeue_mbx_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  
#line 3869 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  
#line 3871 
  ldv_spin_lock_93(& mbx->queue_lock);
  
#line 3873 
  list_del(& cmd->list);
  
#line 3874 
  mbx->num_cmds -= 1U;
  
#line 3876 
  ldv_spin_unlock_94(& mbx->queue_lock);
  
#line 3878 
  qlcnic_83xx_notify_cmd_completion(adapter,cmd);
  
#line 3879 
  return;
}


#line 3881  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_encode_mbx_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  u32 mbx_cmd;
  u32 fw_hal_version;
  u32 hdr_size;
  u32 total_size;
  u32 tmp;
  int i;
  int j;
  
#line 3885 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 3888 
  if (cmd->op_type != 1U) {
    
#line 3889 
    mbx_cmd = *(cmd->req.arg);
    
#line 3890 
    writel(mbx_cmd,(void volatile *)ahw->pci_base0);
    
#line 3891 
    i = 1;
    
#line 3891 
    goto ldv_55753;
    ldv_55752: 
#line 3892 
    ;
    
#line 3892 
    writel(*(cmd->req.arg + i),(void volatile *)(ahw->pci_base0 + i * 4));
    
#line 3891 
    i += 1;
    ldv_55753: 
#line 3892 
    ;
    
#line 3891 
    if (cmd->req.num > (unsigned int)i) 
#line 3893 
                                        goto ldv_55752; else 
#line 3896 
                                                             goto ldv_55754;
    ldv_55754: 
#line 3897 
    ;
  }
  else {
    bool tmp_0;
    u32 *tmp_1;
    u32 *tmp_2;
    
#line 3894 
    fw_hal_version = ahw->fw_hal_version;
    
#line 3895 
    hdr_size = 4U;
    
#line 3896 
    total_size = (unsigned int)cmd->pay_size + hdr_size;
    
#line 3897 
    tmp = (total_size << 16) | 49U;
    
#line 3898 
    mbx_cmd = (fw_hal_version << 29) | tmp;
    
#line 3899 
    writel(mbx_cmd,(void volatile *)ahw->pci_base0);
    
#line 3902 
    mbx_cmd = 17U;
    
#line 3904 
    tmp_0 = qlcnic_sriov_pf_check(adapter);
    
#line 3904 
    if ((int)tmp_0 != 0) 
#line 3905 
                         mbx_cmd = (unsigned int)((int)cmd->func_num << 5) | mbx_cmd; else ;
    
#line 3907 
    writel(mbx_cmd,(void volatile *)(ahw->pci_base0 + 4U));
    
#line 3909 
    i = 2;
    
#line 3909 
    j = 0;
    
#line 3909 
    goto ldv_55756;
    ldv_55755: 
#line 3910 
    ;
    
#line 3910 
    ;
    
#line 3910 
    tmp_1 = cmd->hdr;
    
#line 3910 
    cmd->hdr += 1;
    
#line 3910 
    ;
    
#line 3910 
    writel(*tmp_1,(void volatile *)(ahw->pci_base0 + i * 4));
    
#line 3909 
    i += 1;
    
#line 3909 
    j += 1;
    ldv_55756: 
#line 3910 
    ;
    
#line 3909 
    if ((unsigned int)j < hdr_size) 
#line 3911 
                                    goto ldv_55755; else 
#line 3914 
                                                         goto ldv_55757;
    ldv_55757: 
#line 3915 
    ;
    
#line 3911 
    j = 0;
    
#line 3911 
    goto ldv_55759;
    ldv_55758: 
#line 3912 
    ;
    
#line 3912 
    ;
    
#line 3912 
    tmp_2 = cmd->pay;
    
#line 3912 
    cmd->pay += 1;
    
#line 3912 
    ;
    
#line 3912 
    writel(*tmp_2,(void volatile *)(ahw->pci_base0 + i * 4));
    
#line 3911 
    j += 1;
    
#line 3911 
    i += 1;
    ldv_55759: 
#line 3912 
    ;
    
#line 3911 
    if (cmd->pay_size > j) 
#line 3913 
                           goto ldv_55758; else 
#line 3916 
                                                goto ldv_55760;
    ldv_55760: 
#line 3917 
    ;
  }
  
#line 3919 
  return;
}


#line 3916  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
void qlcnic_83xx_detach_mailbox_work(struct qlcnic_adapter *adapter)
{
  
#line 3918 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  
#line 3920 
  if (mbx == (struct qlcnic_mailbox *)0) 
#line 3921 
                                         goto return_label; else ;
  
#line 3923 
  set_bit(2L,(unsigned long volatile *)(& mbx->status));
  
#line 3924 
  complete(& mbx->completion);
  
#line 3925 
  cancel_work_sync(& mbx->work);
  
#line 3926 
  flush_workqueue(mbx->work_q);
  
#line 3927 
  qlcnic_83xx_flush_mbx_queue(adapter);
  return_label: 
#line 3928 
                return;
}


#line 3930  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_enqueue_mbx_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd, unsigned long *timeout)
{
  int __retres;
  int tmp;
  
#line 3934 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  
#line 3936 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& mbx->status));
  
#line 3936 
  if (tmp != 0) {
    
#line 3937 
    atomic_set(& cmd->rsp_status,0);
    
#line 3938 
    init_completion(& cmd->completion);
    
#line 3939 
    cmd->rsp_opcode = 3U;
    
#line 3941 
    ldv_spin_lock_95(& mbx->queue_lock);
    
#line 3943 
    list_add_tail(& cmd->list,& mbx->cmd_q);
    
#line 3944 
    mbx->num_cmds += 1U;
    
#line 3945 
    cmd->total_cmds = mbx->num_cmds;
    
#line 3946 
    *timeout = (unsigned long)(cmd->total_cmds * 1250U);
    
#line 3947 
    ldv_queue_work_96(mbx->work_q,& mbx->work);
    
#line 3949 
    ldv_spin_unlock_97(& mbx->queue_lock);
    
#line 3951 
    __retres = 0;
    
#line 3951 
    goto return_label;
  }
  else ;
  
#line 3954 
  __retres = -16;
  return_label: 
#line 3954 
                return __retres;
}


#line 3957  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static int qlcnic_83xx_check_mac_rcode(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  u8 mac_cmd_rcode;
  u32 fw_data;
  
#line 3963 
  if (cmd->cmd_op == 69U) {
    
#line 3964 
    fw_data = readl((void const volatile *)((adapter->ahw)->pci_base0 + 2056U));
    
#line 3965 
    mac_cmd_rcode = (unsigned char)fw_data;
    
#line 3966 
    if (((unsigned int)mac_cmd_rcode == 5U || (unsigned int)mac_cmd_rcode == 12U) || (unsigned int)mac_cmd_rcode == 13U) {
      
#line 3969 
      cmd->rsp_opcode = 0U;
      
#line 3970 
      __retres = 0;
      
#line 3970 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 3974 
  __retres = -22;
  return_label: 
#line 3974 
                return __retres;
}


#line 3977  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_decode_mbx_rsp(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  u8 mbx_err_code;
  u32 fw_data;
  
#line 3980 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 3981 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 3985 
  fw_data = readl((void const volatile *)(ahw->pci_base0 + 2048U));
  
#line 3986 
  mbx_err_code = (unsigned char)(fw_data >> 25);
  
#line 3987 
  qlcnic_83xx_get_mbx_data(adapter,cmd);
  
#line 3989 
  switch ((int)mbx_err_code) {
    int tmp;
    case 1: 
#line 3990 
    ;
    case 26: 
#line 3991 
    ;
    
#line 3992 
    cmd->rsp_opcode = 0U;
    
#line 3993 
    goto ldv_55787;
    default: 
#line 3994 
    ;
    
#line 3995 
    tmp = qlcnic_83xx_check_mac_rcode(adapter,cmd);
    
#line 3995 
    if (tmp == 0) 
#line 3996 
                  goto ldv_55787; else ;
    
#line 3998 
    dev_err((struct device const *)dev,"%s: Mailbox command failed, opcode=0x%x, cmd_type=0x%x, func=0x%x, op_mode=0x%x, error=0x%x\n","qlcnic_83xx_decode_mbx_rsp",cmd->cmd_op,cmd->type,(int)ahw->pci_func,(int)ahw->op_mode,(int)mbx_err_code);
    
#line 4001 
    cmd->rsp_opcode = 2U;
    
#line 4002 
    qlcnic_dump_mbx(adapter,cmd);
  }
  ldv_55787: 
#line 4005 
  ;
  
#line 4005 
  return;
}


#line 4008  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
__inline static void qlcnic_dump_mailbox_registers(struct qlcnic_adapter *adapter)
{
  u32 offset;
  unsigned int tmp;
  unsigned int tmp_0;
  unsigned int tmp_1;
  unsigned int tmp_2;
  
#line 4010 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 4013 
  offset = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 9U)));
  
#line 4014 
  tmp = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 4U)));
  
#line 4014 
  tmp_0 = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 3U)));
  
#line 4014 
  tmp_1 = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 8U)));
  
#line 4014 
  tmp_2 = readl((void const volatile *)(ahw->pci_base0 + offset));
  
#line 4014 
  ;
  
#line 4014 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Mbx interrupt mask=0x%x, Mbx interrupt enable=0x%x, Host mbx control=0x%x, Fw mbx control=0x%x",tmp_2,tmp_1,tmp_0,tmp);
  
#line 4015 
  return;
}


#line 4021  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_mailbox_worker(struct work_struct *work)
{
  struct qlcnic_mailbox *tmp;
  struct qlcnic_hardware_context *ahw;
  int tmp_0;
  int tmp_1;
  struct qlcnic_cmd_args *tmp_2;
  unsigned long tmp_3;
  {
    
#line 4023 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 4023 
    tmp = (struct qlcnic_mailbox *)__mptr + 18446744073709551592U;
  }
  
#line 4023 
  struct qlcnic_mailbox *mbx = tmp;
  
#line 4025 
  struct qlcnic_adapter *adapter = mbx->adapter;
  
#line 4026 
  struct qlcnic_mbx_ops *mbx_ops = mbx->ops;
  
#line 4027 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 4028 
  atomic_t *rsp_status = & mbx->rsp_status;
  
#line 4029 
  struct list_head *head = & mbx->cmd_q;
  
#line 4031 
  struct qlcnic_cmd_args *cmd = (struct qlcnic_cmd_args *)0;
  
#line 4033 
  ahw = adapter->ahw;
  ldv_55811: 
#line 4034 
  ;
  
#line 4036 
  tmp_0 = qlcnic_83xx_check_mbx_status(adapter);
  
#line 4036 
  if (tmp_0 != 0) {
    
#line 4037 
    qlcnic_83xx_flush_mbx_queue(adapter);
    
#line 4038 
    goto return_label;
  }
  else ;
  
#line 4041 
  atomic_set(rsp_status,0);
  
#line 4043 
  ldv_spin_lock_98(& mbx->queue_lock);
  
#line 4045 
  tmp_1 = list_empty((struct list_head const *)head);
  
#line 4045 
  if (tmp_1 != 0) {
    
#line 4046 
    ldv_spin_unlock_99(& mbx->queue_lock);
    
#line 4047 
    goto return_label;
  }
  else ;
  {
    
#line 4049 
    struct list_head const *__mptr_0 = (struct list_head const *)head->next;
    
#line 4049 
    tmp_2 = (struct qlcnic_cmd_args *)__mptr_0 + 18446744073709551520U;
  }
  
#line 4049 
  cmd = tmp_2;
  
#line 4051 
  ldv_spin_unlock_100(& mbx->queue_lock);
  
#line 4053 
  (*(mbx_ops->encode_cmd))(adapter,cmd);
  
#line 4054 
  (*(mbx_ops->nofity_fw))(adapter,(unsigned char)1);
  
#line 4056 
  tmp_3 = wait_for_completion_timeout(& mbx->completion,1250UL);
  
#line 4056 
  if (tmp_3 != 0UL) {
    
#line 4058 
    (*(mbx_ops->decode_resp))(adapter,cmd);
    
#line 4059 
    (*(mbx_ops->nofity_fw))(adapter,(unsigned char)0);
  }
  else {
    
#line 4061 
    dev_err((struct device const *)dev,"%s: Mailbox command timeout, opcode=0x%x, cmd_type=0x%x, func=0x%x, op_mode=0x%x\n","qlcnic_83xx_mailbox_worker",cmd->cmd_op,cmd->type,(int)ahw->pci_func,(int)ahw->op_mode);
    
#line 4064 
    set_bit(2L,(unsigned long volatile *)(& mbx->status));
    
#line 4065 
    qlcnic_dump_mailbox_registers(adapter);
    
#line 4066 
    qlcnic_83xx_get_mbx_data(adapter,cmd);
    
#line 4067 
    qlcnic_dump_mbx(adapter,cmd);
    
#line 4068 
    qlcnic_83xx_idc_request_reset(adapter,3735944941U);
    
#line 4070 
    cmd->rsp_opcode = 17U;
  }
  
#line 4072 
  (*(mbx_ops->dequeue_cmd))(adapter,cmd);
  
#line 4036 
  goto ldv_55811;
  return_label: 
#line 4036 
                return;
}


#line 4076  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static struct qlcnic_mbx_ops qlcnic_83xx_mbx_ops = {.enqueue_cmd = & qlcnic_83xx_enqueue_mbx_cmd, .dequeue_cmd = & qlcnic_83xx_dequeue_mbx_cmd, .decode_resp = & qlcnic_83xx_decode_mbx_rsp, .encode_cmd = & qlcnic_83xx_encode_mbx_cmd, .nofity_fw = & qlcnic_83xx_signal_mbx_cmd};

#line 4084  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
int qlcnic_83xx_init_mailbox_work(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_mailbox *mbx;
  struct workqueue_struct *tmp_1;
  
#line 4086 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 4089 
  ahw->mailbox = (struct qlcnic_mailbox *)kzalloc_5(376UL,208U);
  
#line 4090 
  if (ahw->mailbox == (struct qlcnic_mailbox *)0) {
    
#line 4091 
    __retres = -12;
    
#line 4091 
    goto return_label;
  }
  else ;
  
#line 4093 
  mbx = ahw->mailbox;
  
#line 4094 
  mbx->ops = & qlcnic_83xx_mbx_ops;
  
#line 4095 
  mbx->adapter = adapter;
  
#line 4097 
  spinlock_check(& mbx->queue_lock);
  {
    struct lock_class_key __key;
    
#line 4097 
    __raw_spin_lock_init(& mbx->queue_lock.__anonCompField_spinlock_18.rlock,"&(&mbx->queue_lock)->rlock",& __key);
  }
  
#line 4098 
  spinlock_check(& mbx->aen_lock);
  {
    struct lock_class_key __key_0;
    
#line 4098 
    __raw_spin_lock_init(& mbx->aen_lock.__anonCompField_spinlock_18.rlock,"&(&mbx->aen_lock)->rlock",& __key_0);
  }
  
#line 4099 
  INIT_LIST_HEAD(& mbx->cmd_q);
  
#line 4100 
  init_completion(& mbx->completion);
  {
    struct lock_class_key __key_1;
    char const *__lock_name;
    
#line 4102 
    __lock_name = "\"%s\"";
    
#line 4102 
    tmp_1 = __alloc_workqueue_key("%s",131082U,1,& __key_1,__lock_name,(char *)"qlcnic_mailbox");
  }
  
#line 4102 
  mbx->work_q = tmp_1;
  
#line 4103 
  if (mbx->work_q == (struct workqueue_struct *)0) {
    
#line 4104 
    kfree((void const *)mbx);
    
#line 4105 
    __retres = -12;
    
#line 4105 
    goto return_label;
  }
  else ;
  {
    struct lock_class_key __key_2;
    
#line 4108 
    __init_work(& mbx->work,0);
    
#line 4108 
    atomic_long_t __constr_expr_38 = {.counter = WORK_STRUCT_NO_POOL_2};
    
#line 4108 
    mbx->work.data = __constr_expr_38;
    
#line 4108 
    lockdep_init_map(& mbx->work.lockdep_map,"(&mbx->work)",& __key_2,0);
    
#line 4108 
    INIT_LIST_HEAD(& mbx->work.entry);
    
#line 4108 
    mbx->work.func = & qlcnic_83xx_mailbox_worker;
  }
  
#line 4109 
  set_bit(2L,(unsigned long volatile *)(& mbx->status));
  
#line 4110 
  __retres = 0;
  return_label: 
#line 4110 
                return __retres;
}


#line 4113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static pci_ers_result_t qlcnic_83xx_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  pci_ers_result_t __retres;
  
#line 4116 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  
#line 4118 
  if (state == 3U) {
    
#line 4119 
    __retres = 4U;
    
#line 4119 
    goto return_label;
  }
  else ;
  
#line 4121 
  if (state == 1U) {
    
#line 4122 
    __retres = 5U;
    
#line 4122 
    goto return_label;
  }
  else ;
  
#line 4124 
  set_bit(5L,(unsigned long volatile *)(& adapter->state));
  
#line 4125 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 4127 
  qlcnic_83xx_aer_stop_poll_work(adapter);
  
#line 4129 
  pci_save_state(pdev);
  
#line 4130 
  pci_disable_device(pdev);
  
#line 4132 
  __retres = 3U;
  return_label: 
#line 4132 
                return __retres;
}


#line 4135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static pci_ers_result_t qlcnic_83xx_io_slot_reset(struct pci_dev *pdev)
{
  pci_ers_result_t __retres;
  
#line 4137 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  
#line 4138 
  int err = 0;
  
#line 4140 
  pdev->error_state = 1U;
  
#line 4141 
  err = pci_enable_device(pdev);
  
#line 4142 
  if (err != 0) 
#line 4143 
                goto disconnect; else ;
  
#line 4145 
  pci_set_power_state(pdev,0);
  
#line 4146 
  pci_set_master(pdev);
  
#line 4147 
  pci_restore_state(pdev);
  
#line 4149 
  err = qlcnic_83xx_aer_reset(adapter);
  
#line 4150 
  if (err == 0) {
    
#line 4151 
    __retres = 5U;
    
#line 4151 
    goto return_label;
  }
  else ;
  disconnect: 
#line 4152 
  ;
  
#line 4153 
  set_bit(5L,(unsigned long volatile *)(& adapter->state));
  
#line 4154 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 4155 
  __retres = 4U;
  return_label: 
#line 4155 
                return __retres;
}


#line 4158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_hw.c"
static void qlcnic_83xx_io_resume(struct pci_dev *pdev)
{
  int tmp_0;
  
#line 4160 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  
#line 4162 
  pci_cleanup_aer_uncorrect_error_status(pdev);
  
#line 4163 
  tmp_0 = test_and_set_bit(5L,(unsigned long volatile *)(& adapter->state));
  
#line 4163 
  if (tmp_0 != 0) 
#line 4164 
                  qlcnic_83xx_aer_start_poll_work(adapter); else ;
  
#line 4165 
  return;
}


#line 503  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void *kcalloc_1(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 506 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 506 
  return tmp;
}


#line 510  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void *kzalloc_5(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 513 
  tmp = ldv_kzalloc(size,flags);
  
#line 513 
  return tmp;
}


#line 766  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv___ldv_spin_lock_75(spinlock_t *ldv_func_arg1)
{
  
#line 770 
  ldv_spin_model_lock((char *)"aen_lock_of_qlcnic_mailbox");
  
#line 772 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 773 
  return;
}


#line 776  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_spin_unlock_irqrestore_76(spinlock_t *lock, unsigned long flags)
{
  
#line 780 
  ldv_spin_model_unlock((char *)"aen_lock_of_qlcnic_mailbox");
  
#line 782 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 783 
  return;
}


#line 786  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_free_irq_77_0(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 790 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 791 
  return;
}


#line 794  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static int ldv_request_irq_78(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 798 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 798 
  return tmp;
}


#line 802  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static int ldv_request_irq_79(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 806 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 806 
  return tmp;
}


#line 810  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static bool ldv_queue_delayed_work_80(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 814 
  tmp = ldv_emg_queue_delayed_work(wq,dwork,delay);
  
#line 814 
  __retres = tmp != 0;
  
#line 814 
  return __retres;
}


#line 818  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv___ldv_spin_lock_81(spinlock_t *ldv_func_arg1)
{
  
#line 822 
  ldv_spin_model_lock((char *)"aen_lock_of_qlcnic_mailbox");
  
#line 824 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 825 
  return;
}


#line 828  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_spin_unlock_irqrestore_82(spinlock_t *lock, unsigned long flags)
{
  
#line 832 
  ldv_spin_model_unlock((char *)"aen_lock_of_qlcnic_mailbox");
  
#line 834 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 835 
  return;
}


#line 838  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static bool ldv_queue_delayed_work_83(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 842 
  tmp = ldv_emg_queue_delayed_work(wq,dwork,delay);
  
#line 842 
  __retres = tmp != 0;
  
#line 842 
  return __retres;
}


#line 846  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static bool ldv_queue_delayed_work_84(struct workqueue_struct *wq, struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 850 
  tmp = ldv_emg_queue_delayed_work(wq,dwork,delay);
  
#line 850 
  __retres = tmp != 0;
  
#line 850 
  return __retres;
}


#line 854  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv___ldv_spin_lock_85(spinlock_t *ldv_func_arg1)
{
  
#line 858 
  ldv_spin_model_lock((char *)"aen_lock_of_qlcnic_mailbox");
  
#line 860 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 861 
  return;
}


#line 864  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_spin_unlock_irqrestore_86(spinlock_t *lock, unsigned long flags)
{
  
#line 868 
  ldv_spin_model_unlock((char *)"aen_lock_of_qlcnic_mailbox");
  
#line 870 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 871 
  return;
}


#line 874  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_mutex_lock_87_0(struct mutex *ldv_func_arg1)
{
  
#line 878 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"mem_lock_of_qlcnic_hardware_context");
  
#line 879 
  return;
}


#line 882  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_mutex_unlock_88_0(struct mutex *ldv_func_arg1)
{
  
#line 886 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mem_lock_of_qlcnic_hardware_context");
  
#line 887 
  return;
}


#line 890  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_mutex_unlock_89(struct mutex *ldv_func_arg1)
{
  
#line 894 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mem_lock_of_qlcnic_hardware_context");
  
#line 895 
  return;
}


#line 898  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_mutex_unlock_90_0(struct mutex *ldv_func_arg1)
{
  
#line 902 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"mem_lock_of_qlcnic_hardware_context");
  
#line 903 
  return;
}


#line 906  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_spin_lock_91(spinlock_t *lock)
{
  
#line 910 
  ldv_spin_model_lock((char *)"queue_lock_of_qlcnic_mailbox");
  
#line 912 
  spin_lock_1(lock);
  
#line 913 
  return;
}


#line 916  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_spin_unlock_92(spinlock_t *lock)
{
  
#line 920 
  ldv_spin_model_unlock((char *)"queue_lock_of_qlcnic_mailbox");
  
#line 922 
  spin_unlock_1(lock);
  
#line 923 
  return;
}


#line 926  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_spin_lock_93(spinlock_t *lock)
{
  
#line 930 
  ldv_spin_model_lock((char *)"queue_lock_of_qlcnic_mailbox");
  
#line 932 
  spin_lock_1(lock);
  
#line 933 
  return;
}


#line 936  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_spin_unlock_94(spinlock_t *lock)
{
  
#line 940 
  ldv_spin_model_unlock((char *)"queue_lock_of_qlcnic_mailbox");
  
#line 942 
  spin_unlock_1(lock);
  
#line 943 
  return;
}


#line 946  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_spin_lock_95(spinlock_t *lock)
{
  
#line 950 
  ldv_spin_model_lock((char *)"queue_lock_of_qlcnic_mailbox");
  
#line 952 
  spin_lock_1(lock);
  
#line 953 
  return;
}


#line 956  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static bool ldv_queue_work_96(struct workqueue_struct *wq, struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 960 
  tmp = ldv_emg_queue_work(wq,work);
  
#line 960 
  __retres = tmp != 0;
  
#line 960 
  return __retres;
}


#line 964  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_spin_unlock_97(spinlock_t *lock)
{
  
#line 968 
  ldv_spin_model_unlock((char *)"queue_lock_of_qlcnic_mailbox");
  
#line 970 
  spin_unlock_1(lock);
  
#line 971 
  return;
}


#line 974  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_spin_lock_98(spinlock_t *lock)
{
  
#line 978 
  ldv_spin_model_lock((char *)"queue_lock_of_qlcnic_mailbox");
  
#line 980 
  spin_lock_1(lock);
  
#line 981 
  return;
}


#line 984  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_spin_unlock_99(spinlock_t *lock)
{
  
#line 988 
  ldv_spin_model_unlock((char *)"queue_lock_of_qlcnic_mailbox");
  
#line 990 
  spin_unlock_1(lock);
  
#line 991 
  return;
}


#line 994  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_hw.c.aux"
static void ldv_spin_unlock_100(spinlock_t *lock)
{
  
#line 998 
  ldv_spin_model_unlock((char *)"queue_lock_of_qlcnic_mailbox");
  
#line 1000 
  spin_unlock_1(lock);
  
#line 1001 
  return;
}


#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/log2.h"
__inline static unsigned long __roundup_pow_of_two(unsigned long n)
{
  unsigned long __retres;
  unsigned int tmp;
  
#line 63 
  tmp = fls_long(n + 18446744073709551615UL);
  
#line 63 
  __retres = 1UL << tmp;
  
#line 63 
  return __retres;
}


#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
int memcmp(void const *, void const *, size_t);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
size_t strlcpy(char *, char const *, size_t);


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static char const *pci_name(struct pci_dev const *pdev)
{
  char const *tmp;
  
#line 1486 
  tmp = dev_name(& pdev->dev);
  
#line 1486 
  return tmp;
}


#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
u32 ethtool_op_get_link(struct net_device *);


#line 1544  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
int qlcnic_fw_cmd_set_port(struct qlcnic_adapter *adapter, u32 config);


#line 1599 
int qlcnic_rom_fast_read_words(struct qlcnic_adapter *adapter, int addr, u8 *bytes, size_t size);


#line 1667 
int qlcnic_get_mac_stats(struct qlcnic_adapter *adapter, struct qlcnic_mac_statistics *mac_stats);


#line 1921  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_process_rcv_ring_diag(struct qlcnic_host_sds_ring *sds_ring)
{
  
#line 1923 
  (*((((sds_ring->adapter)->ahw)->hw_ops)->process_lb_rcv_ring_diag))(sds_ring);
  
#line 1924 
  return;
}


#line 2012  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_config_intr_coalesce(struct qlcnic_adapter *adapter, struct ethtool_coalesce *ethcoal)
{
  int tmp;
  
#line 2015 
  tmp = (*(((adapter->ahw)->hw_ops)->config_intr_coal))(adapter,ethcoal);
  
#line 2015 
  return tmp;
}


#line 2029  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_set_lb_mode(struct qlcnic_adapter *adapter, u8 mode)
{
  int tmp;
  
#line 2031 
  tmp = (*(((adapter->ahw)->hw_ops)->config_loopback))(adapter,(unsigned char)((int)mode));
  
#line 2031 
  return tmp;
}


#line 2034  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_clear_lb_mode(struct qlcnic_adapter *adapter, u8 mode)
{
  int tmp;
  
#line 2036 
  tmp = (*(((adapter->ahw)->hw_ops)->clear_loopback))(adapter,(unsigned char)((int)mode));
  
#line 2036 
  return tmp;
}


#line 2108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_store_cap_mask(struct qlcnic_adapter *adapter, void *tmpl_hdr, u32 mask)
{
  
#line 2111 
  (*(((adapter->ahw)->hw_ops)->store_cap_mask))(tmpl_hdr,mask);
  
#line 2112 
  return;
}


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static u32 const qlcnic_fw_dump_level[7U] = {3U, 7U, 15U, 31U, 63U, 127U, 255U};

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static struct qlcnic_stats const qlcnic_gstrings_stats[22U] = {{.stat_string = {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'o', (char)'n', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 776}, {.stat_string = {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'o', (char)'f', (char)'f', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 784}, {.stat_string = {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'c', (char)'a', (char)'l', (char)'l', (char)'e', (char)'d', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 664}, {.stat_string = {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'f', (char)'i', (char)'n', (char)'i', (char)'s', (char)'h', (char)'e', (char)'d', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 672}, {.stat_string = {(char)'t', (char)'x', (char)' ', (char)'d', (char)'m', (char)'a', (char)' ', (char)'m', (char)'a', (char)'p', (char)' ', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 816}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 728}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 688}, {.stat_string = {(char)'r', (char)'x', (char)' ', (char)'d', (char)'m', (char)'a', (char)' ', (char)'m', (char)'a', (char)'p', (char)' ', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 808}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 704}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 720}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 680}, {.stat_string = {(char)'n', (char)'u', (char)'l', (char)'l', (char)' ', (char)'r', (char)'x', (char)'b', (char)'u', (char)'f', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 800}, {.stat_string = {(char)'c', (char)'s', (char)'u', (char)'m', (char)'m', (char)'e', (char)'d', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 696}, {.stat_string = {(char)'l', (char)'r', (char)'o', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 712}, {.stat_string = {(char)'l', (char)'r', (char)'o', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 736}, {.stat_string = {(char)'l', (char)'s', (char)'o', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 744}, {.stat_string = {(char)'e', (char)'n', (char)'c', (char)'a', (char)'p', (char)'_', (char)'l', (char)'s', (char)'o', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 752}, {.stat_string = {(char)'e', (char)'n', (char)'c', (char)'a', (char)'p', (char)'_', (char)'t', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'m', (char)'e', (char)'d', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 760}, {.stat_string = {(char)'e', (char)'n', (char)'c', (char)'a', (char)'p', (char)'_', (char)'r', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'m', (char)'e', (char)'d', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 768}, {.stat_string = {(char)'s', (char)'k', (char)'b', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'u', (char)'r', (char)'e', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 792}, {.stat_string = {(char)'m', (char)'a', (char)'c', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'_', (char)'l', (char)'i', (char)'m', (char)'i', (char)'t', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'r', (char)'u', (char)'n', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 832}, {.stat_string = {(char)'s', (char)'p', (char)'u', (char)'r', (char)'i', (char)'o', (char)'u', (char)'s', (char)' ', (char)'i', (char)'n', (char)'t', (char)'r', (char)'\000'}, .sizeof_stat = 8, .stat_offset = 824}};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static char const qlcnic_device_gstrings_stats[14U][32U] = {{(char)'t', (char)'x', (char)' ', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'t', (char)'x', (char)' ', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'t', (char)'x', (char)' ', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'t', (char)'x', (char)' ', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'t', (char)'x', (char)' ', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, {(char)'t', (char)'x', (char)' ', (char)'l', (char)'o', (char)'c', (char)'a', (char)'l', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'t', (char)'x', (char)' ', (char)'n', (char)'u', (char)'m', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)' ', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)' ', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)' ', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)' ', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)' ', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)' ', (char)'l', (char)'o', (char)'c', (char)'a', (char)'l', (char)' ', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'r', (char)'x', (char)' ', (char)'n', (char)'u', (char)'m', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static char const qlcnic_83xx_tx_stats_strings[5U][32U] = {{(char)'c', (char)'t', (char)'x', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'t', (char)'x', (char)'_', (char)'n', (char)'u', (char)'m', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'e', (char)'r', (char)'s', (char)'\000'}};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static char const qlcnic_83xx_mac_stats_strings[40U][32U] = {{(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'c', (char)'n', (char)'t', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'6', (char)'4', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'1', (char)'2', (char)'7', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'2', (char)'5', (char)'5', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'5', (char)'1', (char)'1', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'t', (char)'x', (char)'_', (char)'g', (char)'t', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'_', (char)'c', (char)'n', (char)'t', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'c', (char)'t', (char)'r', (char)'l', (char)'_', (char)'p', (char)'k', (char)'t', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'6', (char)'4', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'1', (char)'2', (char)'7', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'2', (char)'5', (char)'5', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'5', (char)'1', (char)'1', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'t', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'g', (char)'t', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)'b', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'s', (char)'m', (char)'a', (char)'l', (char)'l', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'l', (char)'a', (char)'r', (char)'g', (char)'e', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'j', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'\000'}, {(char)'m', (char)'a', (char)'c', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'\000'}, {(char)'e', (char)'s', (char)'w', (char)'i', (char)'t', (char)'c', (char)'h', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'e', (char)'s', (char)'w', (char)'i', (char)'t', (char)'c', (char)'h', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'e', (char)'s', (char)'w', (char)'i', (char)'t', (char)'c', (char)'h', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'e', (char)'s', (char)'w', (char)'i', (char)'t', (char)'c', (char)'h', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'e', (char)'s', (char)'w', (char)'i', (char)'t', (char)'c', (char)'h', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'e', (char)'s', (char)'w', (char)'i', (char)'t', (char)'c', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'_', (char)'f', (char)'r', (char)'e', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'\000'}, {(char)'e', (char)'s', (char)'w', (char)'i', (char)'t', (char)'c', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'_', (char)'f', (char)'r', (char)'e', (char)'e', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}};

#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static char const qlcnic_tx_queue_stats_strings[5U][32U] = {{(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'o', (char)'n', (char)'\000'}, {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'o', (char)'f', (char)'f', (char)'\000'}, {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'c', (char)'a', (char)'l', (char)'l', (char)'e', (char)'d', (char)'\000'}, {(char)'x', (char)'m', (char)'i', (char)'t', (char)'_', (char)'f', (char)'i', (char)'n', (char)'i', (char)'s', (char)'h', (char)'e', (char)'d', (char)'\000'}, {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}};

#line 145  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static char const qlcnic_83xx_rx_stats_strings[17U][32U] = {{(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'l', (char)'r', (char)'o', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'c', (char)'n', (char)'t', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'i', (char)'p', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'w', (char)'o', (char)'_', (char)'c', (char)'t', (char)'x', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'w', (char)'o', (char)'_', (char)'s', (char)'d', (char)'s', (char)'_', (char)'o', (char)'n', (char)'_', (char)'c', (char)'a', (char)'r', (char)'d', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'w', (char)'o', (char)'_', (char)'s', (char)'d', (char)'s', (char)'_', (char)'o', (char)'n', (char)'_', (char)'h', (char)'o', (char)'s', (char)'t', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'o', (char)'s', (char)'i', (char)'z', (char)'e', (char)'d', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'w', (char)'o', (char)'_', (char)'r', (char)'d', (char)'s', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'e', (char)'x', (char)'p', (char)'e', (char)'c', (char)'t', (char)'e', (char)'d', (char)'_', (char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'i', (char)'n', (char)'v', (char)'a', (char)'l', (char)'i', (char)'d', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'a', (char)'d', (char)'d', (char)'r', (char)'e', (char)'s', (char)'s', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'r', (char)'d', (char)'s', (char)'_', (char)'r', (char)'i', (char)'n', (char)'g', (char)'_', (char)'p', (char)'r', (char)'i', (char)'m', (char)'_', (char)'a', (char)'t', (char)'t', (char)'e', (char)'m', (char)'p', (char)'t', (char)'e', (char)'d', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'r', (char)'x', (char)'_', (char)'r', (char)'d', (char)'s', (char)'_', (char)'r', (char)'i', (char)'n', (char)'g', (char)'_', (char)'p', (char)'r', (char)'i', (char)'m', (char)'_', (char)'s', (char)'u', (char)'c', (char)'c', (char)'e', (char)'s', (char)'s', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'n', (char)'u', (char)'m', (char)'_', (char)'l', (char)'r', (char)'o', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'s', (char)'_', (char)'a', (char)'d', (char)'d', (char)'e', (char)'d', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'n', (char)'u', (char)'m', (char)'_', (char)'l', (char)'r', (char)'o', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'s', (char)'_', (char)'r', (char)'e', (char)'m', (char)'o', (char)'v', (char)'e', (char)'d', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'n', (char)'u', (char)'m', (char)'_', (char)'l', (char)'r', (char)'o', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'s', (char)'_', (char)'a', (char)'c', (char)'t', (char)'i', (char)'v', (char)'e', (char)'\000'}, {(char)'c', (char)'t', (char)'x', (char)'_', (char)'p', (char)'k', (char)'t', (char)'s', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'u', (char)'n', (char)'k', (char)'n', (char)'o', (char)'w', (char)'n', (char)'\000'}};

#line 165  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static char const qlcnic_gstrings_test[6U][32U] = {{(char)'R', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)'_', (char)'T', (char)'e', (char)'s', (char)'t', (char)'_', (char)'o', (char)'n', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)'\000'}, {(char)'L', (char)'i', (char)'n', (char)'k', (char)'_', (char)'T', (char)'e', (char)'s', (char)'t', (char)'_', (char)'o', (char)'n', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)'\000'}, {(char)'I', (char)'n', (char)'t', (char)'e', (char)'r', (char)'r', (char)'u', (char)'p', (char)'t', (char)'_', (char)'T', (char)'e', (char)'s', (char)'t', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)'\000'}, {(char)'I', (char)'n', (char)'t', (char)'e', (char)'r', (char)'n', (char)'a', (char)'l', (char)'_', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)'\000'}, {(char)'E', (char)'x', (char)'t', (char)'e', (char)'r', (char)'n', (char)'a', (char)'l', (char)'_', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)'\000'}, {(char)'E', (char)'E', (char)'P', (char)'R', (char)'O', (char)'M', (char)'_', (char)'T', (char)'e', (char)'s', (char)'t', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)'\000'}};

#line 176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
__inline static int qlcnic_82xx_statistics(struct qlcnic_adapter *adapter)
{
  int __retres;
  
#line 179 
  __retres = (int)((unsigned int)adapter->drv_tx_rings * 5U + 62U);
  
#line 179 
  return __retres;
}


#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
__inline static int qlcnic_83xx_statistics(struct qlcnic_adapter *adapter)
{
  int __retres;
  
#line 188 
  __retres = (int)((unsigned int)adapter->drv_tx_rings * 5U + 84U);
  
#line 188 
  return __retres;
}


#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_dev_statistics_len(struct qlcnic_adapter *adapter)
{
  bool tmp_0;
  
#line 194 
  int len = -1;
  
#line 196 
  tmp_0 = qlcnic_82xx_check(adapter);
  
#line 196 
  if ((int)tmp_0 != 0) {
    
#line 197 
    len = qlcnic_82xx_statistics(adapter);
    
#line 198 
    if ((adapter->flags & 64U) != 0U) 
#line 199 
                                      len = (int)((unsigned int)len + 14U); else ;
  }
  else {
    bool tmp;
    
#line 200 
    tmp = qlcnic_83xx_check(adapter);
    
#line 200 
    if ((int)tmp != 0) 
#line 201 
                       len = qlcnic_83xx_statistics(adapter); else ;
  }
  
#line 204 
  return len;
}


#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static u32 const diag_registers[13U] = {16U, 17U, 4U, 5U, 6U, 7U, 8U, 9U, 10U, 2U, 0U, 1U, 4294967295U};

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static u32 const ext_diag_registers[7U] = {136323736U, 101785708U, 118489148U, 119537724U, 120586300U, 116391996U, 4294967295U};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
__inline static int qlcnic_get_ring_regs_len(struct qlcnic_adapter *adapter)
{
  int __retres;
  
#line 243 
  int ring_regs_cnt = (((int)adapter->drv_tx_rings * 5 + (int)adapter->max_rds_rings * 2) + (int)adapter->drv_sds_rings * 3) + 5;
  
#line 246 
  __retres = (int)((unsigned long)ring_regs_cnt * (unsigned long)4U);
  
#line 246 
  return __retres;
}


#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_get_regs_len(struct net_device *dev)
{
  int __retres;
  u32 len;
  bool tmp_1;
  int tmp_2;
  
#line 251 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 254 
  tmp_1 = qlcnic_83xx_check(adapter);
  
#line 254 
  if ((int)tmp_1 != 0) {
    int tmp_0;
    
#line 255 
    tmp_0 = qlcnic_83xx_get_regs_len(adapter);
    
#line 255 
    len = (unsigned int)tmp_0;
  }
  else 
#line 257 
       len = 80U;
  
#line 259 
  len += 16U;
  
#line 260 
  tmp_2 = qlcnic_get_ring_regs_len(adapter);
  
#line 260 
  len = (unsigned int)tmp_2 + len;
  
#line 261 
  __retres = (int)len;
  
#line 261 
  return __retres;
}


#line 264  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_get_eeprom_len(struct net_device *dev)
{
  int __retres;
  
#line 266 
  __retres = 4194304;
  
#line 266 
  return __retres;
}


#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *drvinfo)
{
  u32 fw_major;
  u32 fw_minor;
  u32 fw_build;
  char const *tmp_0;
  
#line 272 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 274 
  fw_major = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 11U)));
  
#line 275 
  fw_minor = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 12U)));
  
#line 276 
  fw_build = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 13U)));
  
#line 277 
  snprintf((char *)(& drvinfo->fw_version),32UL,"%d.%d.%d",fw_major,fw_minor,fw_build);
  
#line 280 
  tmp_0 = pci_name((struct pci_dev const *)adapter->pdev);
  
#line 280 
  ;
  
#line 280 
  strlcpy((char *)(& drvinfo->bus_info),tmp_0,32UL);
  
#line 282 
  strlcpy((char *)(& drvinfo->driver),(char const *)(& qlcnic_driver_name),32UL);
  
#line 283 
  strlcpy((char *)(& drvinfo->version),"5.3.62",32UL);
  
#line 284 
  return;
}


#line 287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_82xx_get_settings(struct qlcnic_adapter *adapter, struct ethtool_cmd *ecmd)
{
  int __retres;
  u32 speed;
  u32 reg;
  
#line 290 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 292 
  int check_sfp_module = 0;
  
#line 292 
  int err = 0;
  
#line 293 
  u16 pcifn = (unsigned short)ahw->pci_func;
  
#line 296 
  if ((unsigned int)(adapter->ahw)->port_type == 1U) {
    
#line 297 
    ecmd->supported = 63U;
    
#line 304 
    ecmd->advertising = 60U;
    
#line 309 
    ethtool_cmd_speed_set(ecmd,(unsigned int)(adapter->ahw)->link_speed);
    
#line 310 
    ecmd->duplex = (unsigned char)(adapter->ahw)->link_duplex;
    
#line 311 
    ecmd->autoneg = (unsigned char)(adapter->ahw)->link_autoneg;
  }
  else 
    
#line 313 
    if ((unsigned int)(adapter->ahw)->port_type == 2U) {
      int tmp;
      bool tmp_1;
      
#line 314 
      u32 val = 0U;
      
#line 315 
      tmp = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323108UL,& err);
      
#line 315 
      val = (unsigned int)tmp;
      
#line 317 
      if (val == 3U) {
        
#line 318 
        ecmd->supported = 32U;
        
#line 319 
        ecmd->advertising = 32U;
      }
      else {
        
#line 321 
        ecmd->supported = 4096U;
        
#line 322 
        ecmd->advertising = 4096U;
      }
      
#line 325 
      tmp_1 = netif_running((struct net_device const *)adapter->netdev);
      
#line 325 
      if ((int)tmp_1 != 0) {
        
#line 325 
        if ((unsigned int)ahw->has_link_events != 0U) {
          
#line 326 
          if ((unsigned int)ahw->linkup != 0U) {
            int tmp_0;
            
#line 327 
            tmp_0 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)((int)((unsigned int)pcifn / 4U) * 4) + 136323816UL,& err);
            
#line 327 
            reg = (unsigned int)tmp_0;
            
#line 329 
            speed = (reg >> ((int)pcifn & 3) * 8) & 255U;
            
#line 330 
            ahw->link_speed = (unsigned short)((unsigned int)((unsigned short)speed) * 100U);
          }
          else ;
          
#line 333 
          ethtool_cmd_speed_set(ecmd,(unsigned int)ahw->link_speed);
          
#line 334 
          ecmd->autoneg = (unsigned char)ahw->link_autoneg;
          
#line 335 
          ecmd->duplex = (unsigned char)ahw->link_duplex;
          
#line 336 
          goto skip;
        }
        else ;
      }
      else ;
      
#line 339 
      ethtool_cmd_speed_set(ecmd,4294967295U);
      
#line 340 
      ecmd->duplex = (unsigned char)255U;
      
#line 341 
      ecmd->autoneg = (unsigned char)0U;
    }
    else {
      
#line 343 
      __retres = -5;
      
#line 343 
      goto return_label;
    }
  skip: 
#line 345 
  ;
  
#line 346 
  ecmd->phy_address = (adapter->ahw)->physical_port;
  
#line 347 
  ecmd->transceiver = (unsigned char)1U;
  
#line 349 
  switch ((int)(adapter->ahw)->board_type) {
    int tmp_3;
    bool tmp_2;
    case 33: 
#line 350 
    ;
    case 36: 
#line 351 
    ;
    case 41: 
#line 352 
    ;
    
#line 354 
    ecmd->supported |= 64U;
    
#line 355 
    ecmd->advertising |= 64U;
    case 49: 
#line 356 
    ;
    case 35: 
#line 357 
    ;
    case 39: 
#line 358 
    ;
    
#line 359 
    ecmd->supported |= 128U;
    
#line 360 
    ecmd->advertising |= 128U;
    
#line 361 
    ecmd->port = (unsigned char)0U;
    
#line 362 
    ecmd->autoneg = (unsigned char)(adapter->ahw)->link_autoneg;
    
#line 363 
    goto ldv_53829;
    case 37: 
#line 364 
    ;
    case 40: 
#line 365 
    ;
    case 34: 
#line 366 
    ;
    
#line 367 
    ecmd->supported |= 512U;
    
#line 368 
    ecmd->advertising |= 512U;
    
#line 369 
    ecmd->port = (unsigned char)2U;
    
#line 370 
    ecmd->autoneg = (unsigned char)0U;
    
#line 371 
    goto ldv_53829;
    case 38: 
#line 372 
    ;
    case 42: 
#line 373 
    ;
    case 43: 
#line 374 
    ;
    
#line 375 
    ecmd->advertising |= 128U;
    
#line 376 
    ecmd->supported |= 128U;
    
#line 377 
    tmp_2 = netif_running((struct net_device const *)adapter->netdev);
    
#line 377 
    if ((int)tmp_2 != 0) 
      
#line 377 
      if ((unsigned int)ahw->has_link_events != 0U) 
#line 377 
                                                    tmp_3 = 1; else 
#line 377 
                                                                    tmp_3 = 0;
    else 
#line 377 
         tmp_3 = 0;
    
#line 377 
    check_sfp_module = tmp_3;
    case 50: 
#line 379 
    ;
    
#line 380 
    ecmd->supported |= 1024U;
    
#line 381 
    ecmd->advertising |= 1024U;
    
#line 382 
    ecmd->port = (unsigned char)3U;
    
#line 383 
    ecmd->autoneg = (unsigned char)0U;
    
#line 384 
    goto ldv_53829;
    case 128: 
#line 385 
    ;
    
#line 386 
    if ((unsigned int)(adapter->ahw)->port_type == 2U) {
      int tmp_5;
      bool tmp_4;
      
#line 387 
      ecmd->autoneg = (unsigned char)0U;
      
#line 388 
      ecmd->supported |= 1152U;
      
#line 389 
      ecmd->advertising |= 1152U;
      
#line 391 
      ecmd->port = (unsigned char)3U;
      
#line 392 
      tmp_4 = netif_running((struct net_device const *)adapter->netdev);
      
#line 392 
      if ((int)tmp_4 != 0) 
        
#line 392 
        if ((unsigned int)ahw->has_link_events != 0U) 
#line 392 
                                                      tmp_5 = 1; else 
                                                                   
#line 392 
                                                                   tmp_5 = 0;
      else 
#line 392 
           tmp_5 = 0;
      
#line 392 
      check_sfp_module = tmp_5;
    }
    else {
      
#line 395 
      ecmd->autoneg = (unsigned char)1U;
      
#line 396 
      ecmd->supported |= 192U;
      
#line 397 
      ecmd->advertising |= 192U;
      
#line 399 
      ecmd->port = (unsigned char)0U;
    }
    
#line 401 
    goto ldv_53829;
    default: 
#line 402 
    ;
    
#line 403 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Unsupported board model %d\n",(int)(adapter->ahw)->board_type);
    
#line 405 
    __retres = -5;
    
#line 405 
    goto return_label;
  }
  ldv_53829: 
#line 408 
  ;
  
#line 408 
  if (check_sfp_module != 0) {
    
#line 409 
    switch ((int)(adapter->ahw)->module_type) {
      case 2: 
#line 410 
      ;
      case 3: 
#line 411 
      ;
      case 4: 
#line 412 
      ;
      case 5: 
#line 413 
      ;
      
#line 414 
      ecmd->port = (unsigned char)3U;
      
#line 415 
      goto ldv_53843;
      case 6: 
#line 416 
      ;
      case 7: 
#line 417 
      ;
      case 8: 
#line 418 
      ;
      
#line 419 
      ecmd->port = (unsigned char)0U;
      
#line 420 
      goto ldv_53843;
      default: 
#line 421 
      ;
      
#line 422 
      ecmd->port = (unsigned char)255U;
    }
    ldv_53843: 
#line 424 
    ;
  }
  else ;
  
#line 426 
  __retres = 0;
  return_label: 
#line 426 
                return __retres;
}


#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_get_settings(struct net_device *dev, struct ethtool_cmd *ecmd)
{
  int __retres;
  bool tmp_3;
  
#line 432 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 434 
  tmp_3 = qlcnic_82xx_check(adapter);
  
#line 434 
  if ((int)tmp_3 != 0) {
    int tmp_0;
    
#line 435 
    tmp_0 = qlcnic_82xx_get_settings(adapter,ecmd);
    
#line 435 
    __retres = tmp_0;
    
#line 435 
    goto return_label;
  }
  else {
    bool tmp_2;
    
#line 436 
    tmp_2 = qlcnic_83xx_check(adapter);
    
#line 436 
    if ((int)tmp_2 != 0) {
      int tmp_1;
      
#line 437 
      tmp_1 = qlcnic_83xx_get_settings(adapter,ecmd);
      
#line 437 
      __retres = tmp_1;
      
#line 437 
      goto return_label;
    }
    else ;
  }
  
#line 439 
  __retres = -5;
  return_label: 
#line 439 
                return __retres;
}


#line 443  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_port_config(struct qlcnic_adapter *adapter, struct ethtool_cmd *ecmd)
{
  int __retres;
  __u32 tmp;
  int tmp_0;
  
#line 446 
  u32 ret = 0U;
  
#line 446 
  u32 config = 0U;
  
#line 448 
  if ((unsigned int)ecmd->duplex != 0U) 
#line 449 
                                        config |= 1U; else ;
  
#line 451 
  if ((unsigned int)ecmd->autoneg != 0U) 
#line 452 
                                         config |= 2U; else ;
  
#line 454 
  tmp = ethtool_cmd_speed((struct ethtool_cmd const *)ecmd);
  
#line 454 
  switch (tmp) {
    case (__u32)10: 
#line 455 
    ;
    
#line 456 
    config = config;
    
#line 457 
    goto ldv_53860;
    case (__u32)100: 
#line 458 
    ;
    
#line 459 
    config |= 256U;
    
#line 460 
    goto ldv_53860;
    case (__u32)1000: 
#line 461 
    ;
    
#line 462 
    config |= 2560U;
    
#line 463 
    goto ldv_53860;
    default: 
#line 464 
    ;
    
#line 465 
    __retres = -5;
    
#line 465 
    goto return_label;
  }
  ldv_53860: 
#line 468 
  ;
  
#line 468 
  tmp_0 = qlcnic_fw_cmd_set_port(adapter,config);
  
#line 468 
  ret = (unsigned int)tmp_0;
  
#line 470 
  if (ret == 9U) {
    
#line 471 
    __retres = -95;
    
#line 471 
    goto return_label;
  }
  else 
    
#line 472 
    if (ret != 0U) {
      
#line 473 
      __retres = -5;
      
#line 473 
      goto return_label;
    }
    else ;
  
#line 474 
  __retres = (int)ret;
  return_label: 
#line 474 
                return __retres;
}


#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_settings(struct net_device *dev, struct ethtool_cmd *ecmd)
{
  int __retres;
  bool tmp_2;
  __u32 tmp_3;
  int tmp_5;
  bool tmp_4;
  int tmp_6;
  
#line 479 
  u32 ret = 0U;
  
#line 480 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 482 
  if ((unsigned int)(adapter->ahw)->port_type != 1U) {
    
#line 483 
    __retres = -95;
    
#line 483 
    goto return_label;
  }
  else ;
  
#line 485 
  tmp_2 = qlcnic_83xx_check(adapter);
  
#line 485 
  if ((int)tmp_2 != 0) {
    int tmp_0;
    
#line 486 
    tmp_0 = qlcnic_83xx_set_settings(adapter,ecmd);
    
#line 486 
    ret = (unsigned int)tmp_0;
  }
  else {
    int tmp_1;
    
#line 488 
    tmp_1 = qlcnic_set_port_config(adapter,ecmd);
    
#line 488 
    ret = (unsigned int)tmp_1;
  }
  
#line 490 
  if (ret == 0U) {
    
#line 491 
    __retres = (int)ret;
    
#line 491 
    goto return_label;
  }
  else ;
  
#line 493 
  tmp_3 = ethtool_cmd_speed((struct ethtool_cmd const *)ecmd);
  
#line 493 
  (adapter->ahw)->link_speed = (unsigned short)tmp_3;
  
#line 494 
  (adapter->ahw)->link_duplex = (unsigned short)ecmd->duplex;
  
#line 495 
  (adapter->ahw)->link_autoneg = (unsigned short)ecmd->autoneg;
  
#line 497 
  tmp_4 = netif_running((struct net_device const *)dev);
  
#line 497 
  if (tmp_4) 
#line 497 
             tmp_5 = 0; else 
#line 497 
                             tmp_5 = 1;
  
#line 497 
  if (tmp_5) {
    
#line 498 
    __retres = 0;
    
#line 498 
    goto return_label;
  }
  else ;
  
#line 500 
  (*((dev->netdev_ops)->ndo_stop))(dev);
  
#line 501 
  tmp_6 = (*((dev->netdev_ops)->ndo_open))(dev);
  
#line 501 
  __retres = tmp_6;
  return_label: 
#line 501 
                return __retres;
}


#line 504  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_82xx_get_registers(struct qlcnic_adapter *adapter, u32 *regs_buff)
{
  int i;
  int tmp;
  int tmp_1;
  int tmp_0;
  
#line 507 
  int j = 0;
  
#line 507 
  int err = 0;
  
#line 509 
  i = 3;
  
#line 509 
  goto ldv_53878;
  ldv_53877: 
#line 510 
  ;
  
#line 510 
  *(regs_buff + i) = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + diag_registers[j])));
  
#line 509 
  j += 1;
  
#line 509 
  i += 1;
  ldv_53878: 
#line 510 
  ;
  
#line 509 
  if (diag_registers[j] != 4294967295U) 
#line 511 
                                        goto ldv_53877; else 
#line 514 
                                                             goto ldv_53879;
  ldv_53879: 
#line 515 
  ;
  
#line 511 
  j = 0;
  
#line 512 
  goto ldv_53881;
  ldv_53880: 
#line 513 
  ;
  
#line 513 
  tmp = i;
  
#line 513 
  i += 1;
  
#line 513 
  tmp_0 = j;
  
#line 513 
  j += 1;
  
#line 513 
  ;
  
#line 513 
  ;
  
#line 513 
  tmp_1 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)ext_diag_registers[tmp_0],& err);
  
#line 513 
  *(regs_buff + tmp) = (unsigned int)tmp_1;
  ldv_53881: 
#line 514 
  ;
  
#line 512 
  if (ext_diag_registers[j] != 4294967295U) 
#line 514 
                                            goto ldv_53880; else 
#line 517 
                                                                 goto ldv_53882;
  ldv_53882: 
#line 518 
  ;
  
#line 515 
  return i;
}


#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_get_regs(struct net_device *dev, struct ethtool_regs *regs, void *p)
{
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_rds_ring *rds_rings;
  struct qlcnic_host_tx_ring *tx_ring;
  int ring;
  int tmp_0;
  bool tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_5;
  int tmp_6;
  int tmp_7;
  int tmp_8;
  int tmp_11;
  int tmp_12;
  int tmp_13;
  int tmp_14;
  int tmp_15;
  int tmp_16;
  int tmp_17;
  
#line 521 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 522 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 526 
  u32 *regs_buff = (u32 *)p;
  
#line 527 
  int i = 0;
  
#line 529 
  tmp_0 = qlcnic_get_regs_len(dev);
  
#line 529 
  ;
  
#line 529 
  memset(p,0,(unsigned long)tmp_0);
  
#line 531 
  regs->version = (unsigned int)((((int)(adapter->ahw)->revision_id << 16) | 67108864) | (int)(adapter->pdev)->device);
  
#line 534 
  *regs_buff = 3405643778U;
  
#line 535 
  *(regs_buff + 1U) = 3U;
  
#line 537 
  if (((adapter->ahw)->capabilities & 8388608U) != 0U) 
#line 538 
                                                       *(regs_buff + 2U) = (adapter->ahw)->max_vnic_func; else ;
  
#line 540 
  tmp_1 = qlcnic_82xx_check(adapter);
  
#line 540 
  if ((int)tmp_1 != 0) 
#line 541 
                       i = qlcnic_82xx_get_registers(adapter,regs_buff); else 
                                                                    
#line 543 
                                                                    i = qlcnic_83xx_get_registers(adapter,regs_buff);
  
#line 545 
  tmp_2 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
  
#line 545 
  if (tmp_2 == 0) 
#line 546 
                  goto return_label; else ;
  
#line 549 
  tmp_3 = i;
  
#line 549 
  i += 1;
  
#line 549 
  *(regs_buff + tmp_3) = 4293905835U;
  
#line 551 
  tmp_4 = i;
  
#line 551 
  i += 1;
  
#line 551 
  *(regs_buff + tmp_4) = (unsigned int)adapter->drv_tx_rings;
  
#line 552 
  ring = 0;
  
#line 552 
  goto ldv_53897;
  ldv_53896: 
#line 553 
  ;
  
#line 553 
  tx_ring = adapter->tx_ring + ring;
  
#line 554 
  tmp_5 = i;
  
#line 554 
  i += 1;
  
#line 554 
  *(regs_buff + tmp_5) = *(tx_ring->hw_consumer);
  
#line 555 
  tmp_6 = i;
  
#line 555 
  i += 1;
  
#line 555 
  *(regs_buff + tmp_6) = tx_ring->sw_consumer;
  
#line 556 
  tmp_7 = i;
  
#line 556 
  i += 1;
  
#line 556 
  *(regs_buff + tmp_7) = readl((void const volatile *)tx_ring->crb_cmd_producer);
  
#line 557 
  tmp_8 = i;
  
#line 557 
  i += 1;
  
#line 557 
  *(regs_buff + tmp_8) = tx_ring->producer;
  
#line 558 
  if (tx_ring->crb_intr_mask != (void *)0) {
    int tmp_9;
    
#line 559 
    tmp_9 = i;
    
#line 559 
    i += 1;
    
#line 559 
    *(regs_buff + tmp_9) = readl((void const volatile *)tx_ring->crb_intr_mask);
  }
  else {
    int tmp_10;
    
#line 561 
    tmp_10 = i;
    
#line 561 
    i += 1;
    
#line 561 
    *(regs_buff + tmp_10) = 2018915346U;
  }
  
#line 552 
  ring += 1;
  ldv_53897: 
#line 553 
  ;
  
#line 552 
  if ((int)adapter->drv_tx_rings > ring) 
#line 554 
                                         goto ldv_53896; else 
#line 557 
                                                              goto ldv_53898;
  ldv_53898: 
#line 558 
  ;
  
#line 564 
  tmp_11 = i;
  
#line 564 
  i += 1;
  
#line 564 
  *(regs_buff + tmp_11) = (unsigned int)adapter->max_rds_rings;
  
#line 565 
  ring = 0;
  
#line 565 
  goto ldv_53900;
  ldv_53899: 
#line 566 
  ;
  
#line 566 
  rds_rings = recv_ctx->rds_rings + ring;
  
#line 567 
  tmp_12 = i;
  
#line 567 
  i += 1;
  
#line 567 
  *(regs_buff + tmp_12) = readl((void const volatile *)rds_rings->crb_rcv_producer);
  
#line 568 
  tmp_13 = i;
  
#line 568 
  i += 1;
  
#line 568 
  *(regs_buff + tmp_13) = rds_rings->producer;
  
#line 565 
  ring += 1;
  ldv_53900: 
#line 566 
  ;
  
#line 565 
  if ((int)adapter->max_rds_rings > ring) 
#line 567 
                                          goto ldv_53899; else 
#line 570 
                                                               goto ldv_53901;
  ldv_53901: 
#line 571 
  ;
  
#line 571 
  tmp_14 = i;
  
#line 571 
  i += 1;
  
#line 571 
  *(regs_buff + tmp_14) = (unsigned int)adapter->drv_sds_rings;
  
#line 572 
  ring = 0;
  
#line 572 
  goto ldv_53903;
  ldv_53902: 
#line 573 
  ;
  
#line 573 
  sds_ring = recv_ctx->sds_rings + ring;
  
#line 574 
  tmp_15 = i;
  
#line 574 
  i += 1;
  
#line 574 
  *(regs_buff + tmp_15) = readl((void const volatile *)sds_ring->crb_sts_consumer);
  
#line 575 
  tmp_16 = i;
  
#line 575 
  i += 1;
  
#line 575 
  *(regs_buff + tmp_16) = sds_ring->consumer;
  
#line 576 
  tmp_17 = i;
  
#line 576 
  i += 1;
  
#line 576 
  *(regs_buff + tmp_17) = readl((void const volatile *)sds_ring->crb_intr_mask);
  
#line 572 
  ring += 1;
  ldv_53903: 
#line 573 
  ;
  
#line 572 
  if ((int)adapter->drv_sds_rings > ring) 
#line 574 
                                          goto ldv_53902; else 
#line 577 
                                                               goto ldv_53904;
  ldv_53904: 
#line 578 
  ;
  return_label: 
#line 579 
                return;
}


#line 580  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static u32 qlcnic_test_link(struct net_device *dev)
{
  u32 __retres;
  u32 val;
  bool tmp_1;
  int tmp_2;
  
#line 582 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 583 
  int err = 0;
  
#line 586 
  tmp_1 = qlcnic_83xx_check(adapter);
  
#line 586 
  if ((int)tmp_1 != 0) {
    int tmp_0;
    
#line 587 
    tmp_0 = qlcnic_83xx_test_link(adapter);
    
#line 587 
    val = (unsigned int)tmp_0;
    
#line 588 
    __retres = (unsigned int)((val & 1U) == 0U);
    
#line 588 
    goto return_label;
  }
  else ;
  
#line 590 
  tmp_2 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323736UL,& err);
  
#line 590 
  val = (unsigned int)tmp_2;
  
#line 591 
  if (err == -5) {
    
#line 592 
    __retres = (unsigned int)err;
    
#line 592 
    goto return_label;
  }
  else ;
  
#line 593 
  val = (val >> (int)(adapter->ahw)->pci_func * 4) & 15U;
  
#line 594 
  __retres = (unsigned int)(val != 1U);
  return_label: 
#line 594 
                return __retres;
}


#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_get_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  int __retres;
  int offset;
  bool tmp_0;
  bool tmp_1;
  
#line 601 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 603 
  int ret = -1;
  
#line 605 
  tmp_0 = qlcnic_83xx_check(adapter);
  
#line 605 
  if ((int)tmp_0 != 0) {
    
#line 606 
    __retres = 0;
    
#line 606 
    goto return_label;
  }
  else ;
  
#line 607 
  if (eeprom->len == 0U) {
    
#line 608 
    __retres = -22;
    
#line 608 
    goto return_label;
  }
  else ;
  
#line 610 
  eeprom->magic = (unsigned int)((int)(adapter->pdev)->vendor | ((int)(adapter->pdev)->device << 16));
  
#line 612 
  offset = (int)eeprom->offset;
  
#line 614 
  tmp_1 = qlcnic_82xx_check(adapter);
  
#line 614 
  if ((int)tmp_1 != 0) 
#line 615 
                       ret = qlcnic_rom_fast_read_words(adapter,offset,bytes,(unsigned long)eeprom->len); else ;
  
#line 617 
  if (ret < 0) {
    
#line 618 
    __retres = ret;
    
#line 618 
    goto return_label;
  }
  else ;
  
#line 620 
  __retres = 0;
  return_label: 
#line 620 
                return __retres;
}


#line 624  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_get_ringparam(struct net_device *dev, struct ethtool_ringparam *ring)
{
  
#line 627 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 629 
  ring->rx_pending = (unsigned int)adapter->num_rxd;
  
#line 630 
  ring->rx_jumbo_pending = (unsigned int)adapter->num_jumbo_rxd;
  
#line 631 
  ring->tx_pending = (unsigned int)adapter->num_txd;
  
#line 633 
  ring->rx_max_pending = (unsigned int)adapter->max_rxd;
  
#line 634 
  ring->rx_jumbo_max_pending = (unsigned int)adapter->max_jumbo_rxd;
  
#line 635 
  ring->tx_max_pending = 1024U;
  
#line 636 
  return;
}


#line 639  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static u32 qlcnic_validate_ringparam(u32 val, u32 min, u32 max, char *r_name)
{
  u32 num_desc;
  u32 tmp_0;
  u32 tmp_2;
  {
    u32 tmp;
    
#line 642 
    u32 _max1 = val;
    
#line 642 
    u32 _max2 = min;
    
#line 642 
    if (_max1 > _max2) 
#line 642 
                       tmp = _max1; else 
#line 642 
                                         tmp = _max2;
    
#line 642 
    tmp_0 = tmp;
  }
  
#line 642 
  num_desc = tmp_0;
  {
    u32 tmp_1;
    
#line 643 
    u32 _min1 = num_desc;
    
#line 643 
    u32 _min2 = max;
    
#line 643 
    if (_min1 < _min2) 
#line 643 
                       tmp_1 = _min1; else 
#line 643 
                                           tmp_1 = _min2;
    
#line 643 
    tmp_2 = tmp_1;
  }
  
#line 643 
  num_desc = tmp_2;
  
#line 644 
  if (0 != 0) {
    unsigned int tmp_71;
    
#line 644 
    if (num_desc != 1U) {
      unsigned int tmp_70;
      
#line 644 
      if (0 != 0) {
        unsigned int tmp_68;
        
#line 644 
        if (num_desc == 1U) {
          int tmp_3;
          
#line 644 
          tmp_3 = ____ilog2_NaN();
          
#line 644 
          tmp_68 = (unsigned int)(1UL << (tmp_3 + 1));
        }
        else {
          unsigned int tmp_67;
          
#line 644 
          if (((unsigned long long)(num_desc + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
            unsigned int tmp_66;
            
#line 644 
            if (((unsigned long long)(num_desc + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
              unsigned int tmp_65;
              
#line 644 
              if (((unsigned long long)(num_desc + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                unsigned int tmp_64;
                
#line 644 
                if (((unsigned long long)(num_desc + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                  unsigned int tmp_63;
                  
#line 644 
                  if (((unsigned long long)(num_desc + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                    unsigned int tmp_62;
                    
#line 644 
                    if (((unsigned long long)(num_desc + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                      unsigned int tmp_61;
                      
#line 644 
                      if (((unsigned long long)(num_desc + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                        unsigned int tmp_60;
                        
#line 644 
                        if (((unsigned long long)(num_desc + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                          unsigned int tmp_59;
                          
#line 644 
                          if (((unsigned long long)(num_desc + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                            unsigned int tmp_58;
                            
#line 644 
                            if (((unsigned long long)(num_desc + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                              unsigned int tmp_57;
                              
#line 644 
                              if (((unsigned long long)(num_desc + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                unsigned int tmp_56;
                                
#line 644 
                                if (((unsigned long long)(num_desc + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                  unsigned int tmp_55;
                                  
#line 644 
                                  if (((unsigned long long)(num_desc + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                    unsigned int tmp_54;
                                    
#line 644 
                                    if (((unsigned long long)(num_desc + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                      unsigned int tmp_53;
                                      
#line 644 
                                      if (((unsigned long long)(num_desc + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                        unsigned int tmp_52;
                                        
#line 644 
                                        if (((unsigned long long)(num_desc + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                          unsigned int tmp_51;
                                          
#line 644 
                                          if (((unsigned long long)(num_desc + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                            unsigned int tmp_50;
                                            
#line 644 
                                            if (((unsigned long long)(num_desc + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                              unsigned int tmp_49;
                                              
#line 644 
                                              if (((unsigned long long)(num_desc + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                unsigned int tmp_48;
                                                
#line 644 
                                                if (((unsigned long long)(num_desc + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                  unsigned int tmp_47;
                                                  
#line 644 
                                                  if (((unsigned long long)(num_desc + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                    unsigned int tmp_46;
                                                    
#line 644 
                                                    if (((unsigned long long)(num_desc + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                      unsigned int tmp_45;
                                                      
#line 644 
                                                      if (((unsigned long long)(num_desc + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                        unsigned int tmp_44;
                                                        
#line 644 
                                                        if (((unsigned long long)(num_desc + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                          unsigned int tmp_43;
                                                          
#line 644 
                                                          if (((unsigned long long)(num_desc + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                            unsigned int tmp_42;
                                                            
#line 644 
                                                            if (((unsigned long long)(num_desc + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                              unsigned int tmp_41;
                                                              
#line 644 
                                                              if (((unsigned long long)(num_desc + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                unsigned int tmp_40;
                                                                
#line 644 
                                                                if (((unsigned long long)(num_desc + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                  unsigned int tmp_39;
                                                                  
#line 644 
                                                                  if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    unsigned int tmp_38;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    unsigned int tmp_37;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    unsigned int tmp_36;
                                                                    
#line 644 
                                                                    if (
                                                                    num_desc + 4294967295U >= (u32)0) {
                                                                    unsigned int tmp_35;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    unsigned int tmp_34;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    unsigned int tmp_33;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    unsigned int tmp_32;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    unsigned int tmp_31;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    unsigned int tmp_30;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    unsigned int tmp_29;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    unsigned int tmp_28;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    unsigned int tmp_27;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    unsigned int tmp_26;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    unsigned int tmp_25;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    unsigned int tmp_24;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    unsigned int tmp_23;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    unsigned int tmp_22;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    unsigned int tmp_21;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    unsigned int tmp_20;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    unsigned int tmp_19;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    unsigned int tmp_18;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    unsigned int tmp_17;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    unsigned int tmp_16;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    unsigned int tmp_15;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    unsigned int tmp_14;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 512ULL) == 0ULL) {
                                                                    unsigned int tmp_13;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 256ULL) == 0ULL) {
                                                                    unsigned int tmp_12;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 128ULL) == 0ULL) {
                                                                    unsigned int tmp_11;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 64ULL) == 0ULL) {
                                                                    unsigned int tmp_10;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 32ULL) == 0ULL) {
                                                                    unsigned int tmp_9;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 16ULL) == 0ULL) {
                                                                    unsigned int tmp_8;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 8ULL) == 0ULL) {
                                                                    unsigned int tmp_7;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 4ULL) == 0ULL) {
                                                                    unsigned int tmp_6;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 2ULL) == 0ULL) {
                                                                    unsigned int tmp_5;
                                                                    
#line 644 
                                                                    if (
                                                                    ((unsigned long long)(num_desc + 4294967295U) & 1ULL) == 0ULL) {
                                                                    int tmp_4;
                                                                    
#line 644 
                                                                    tmp_4 = ____ilog2_NaN();
                                                                    
#line 644 
                                                                    tmp_5 = (unsigned int)(1UL << (tmp_4 + 1));
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_5 = 2U;
                                                                    
#line 644 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_6 = 4U;
                                                                    
#line 644 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_7 = 8U;
                                                                    
#line 644 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_8 = 16U;
                                                                    
#line 644 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_9 = 32U;
                                                                    
#line 644 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_10 = 64U;
                                                                    
#line 644 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_11 = 128U;
                                                                    
#line 644 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_12 = 256U;
                                                                    
#line 644 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_13 = 512U;
                                                                    
#line 644 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_14 = 1024U;
                                                                    
#line 644 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_15 = 2048U;
                                                                    
#line 644 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_16 = 4096U;
                                                                    
#line 644 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_17 = 8192U;
                                                                    
#line 644 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_18 = 16384U;
                                                                    
#line 644 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_19 = 32768U;
                                                                    
#line 644 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_20 = 65536U;
                                                                    
#line 644 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_21 = 131072U;
                                                                    
#line 644 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_22 = 262144U;
                                                                    
#line 644 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_23 = 524288U;
                                                                    
#line 644 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_24 = 1048576U;
                                                                    
#line 644 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_25 = 2097152U;
                                                                    
#line 644 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_26 = 4194304U;
                                                                    
#line 644 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_27 = 8388608U;
                                                                    
#line 644 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_28 = 16777216U;
                                                                    
#line 644 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_29 = 33554432U;
                                                                    
#line 644 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_30 = 67108864U;
                                                                    
#line 644 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_31 = 134217728U;
                                                                    
#line 644 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_32 = 268435456U;
                                                                    
#line 644 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_33 = 536870912U;
                                                                    
#line 644 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_34 = 1073741824U;
                                                                    
#line 644 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_35 = 2147483648U;
                                                                    
#line 644 
                                                                    tmp_36 = tmp_35;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_36 = 0U;
                                                                    
#line 644 
                                                                    tmp_37 = tmp_36;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_37 = 0U;
                                                                    
#line 644 
                                                                    tmp_38 = tmp_37;
                                                                    }
                                                                    else 
                                                                    
#line 644 
                                                                    tmp_38 = 0U;
                                                                    
#line 644 
                                                                    tmp_39 = tmp_38;
                                                                  }
                                                                  else 
                                                                    
#line 644 
                                                                    tmp_39 = 0U;
                                                                  
#line 644 
                                                                  tmp_40 = tmp_39;
                                                                }
                                                                else 
                                                                  
#line 644 
                                                                  tmp_40 = 0U;
                                                                
#line 644 
                                                                tmp_41 = tmp_40;
                                                              }
                                                              else 
#line 644 
                                                                   tmp_41 = 0U;
                                                              
#line 644 
                                                              tmp_42 = tmp_41;
                                                            }
                                                            else 
#line 644 
                                                                 tmp_42 = 0U;
                                                            
#line 644 
                                                            tmp_43 = tmp_42;
                                                          }
                                                          else 
#line 644 
                                                               tmp_43 = 0U;
                                                          
#line 644 
                                                          tmp_44 = tmp_43;
                                                        }
                                                        else 
#line 644 
                                                             tmp_44 = 0U;
                                                        
#line 644 
                                                        tmp_45 = tmp_44;
                                                      }
                                                      else 
#line 644 
                                                           tmp_45 = 0U;
                                                      
#line 644 
                                                      tmp_46 = tmp_45;
                                                    }
                                                    else 
#line 644 
                                                         tmp_46 = 0U;
                                                    
#line 644 
                                                    tmp_47 = tmp_46;
                                                  }
                                                  else 
#line 644 
                                                       tmp_47 = 0U;
                                                  
#line 644 
                                                  tmp_48 = tmp_47;
                                                }
                                                else 
#line 644 
                                                     tmp_48 = 0U;
                                                
#line 644 
                                                tmp_49 = tmp_48;
                                              }
                                              else 
#line 644 
                                                   tmp_49 = 0U;
                                              
#line 644 
                                              tmp_50 = tmp_49;
                                            }
                                            else 
#line 644 
                                                 tmp_50 = 0U;
                                            
#line 644 
                                            tmp_51 = tmp_50;
                                          }
                                          else 
#line 644 
                                               tmp_51 = 0U;
                                          
#line 644 
                                          tmp_52 = tmp_51;
                                        }
                                        else 
#line 644 
                                             tmp_52 = 0U;
                                        
#line 644 
                                        tmp_53 = tmp_52;
                                      }
                                      else 
#line 644 
                                           tmp_53 = 0U;
                                      
#line 644 
                                      tmp_54 = tmp_53;
                                    }
                                    else 
#line 644 
                                         tmp_54 = 0U;
                                    
#line 644 
                                    tmp_55 = tmp_54;
                                  }
                                  else 
#line 644 
                                       tmp_55 = 0U;
                                  
#line 644 
                                  tmp_56 = tmp_55;
                                }
                                else 
#line 644 
                                     tmp_56 = 0U;
                                
#line 644 
                                tmp_57 = tmp_56;
                              }
                              else 
#line 644 
                                   tmp_57 = 0U;
                              
#line 644 
                              tmp_58 = tmp_57;
                            }
                            else 
#line 644 
                                 tmp_58 = 0U;
                            
#line 644 
                            tmp_59 = tmp_58;
                          }
                          else 
#line 644 
                               tmp_59 = 0U;
                          
#line 644 
                          tmp_60 = tmp_59;
                        }
                        else 
#line 644 
                             tmp_60 = 0U;
                        
#line 644 
                        tmp_61 = tmp_60;
                      }
                      else 
#line 644 
                           tmp_61 = 0U;
                      
#line 644 
                      tmp_62 = tmp_61;
                    }
                    else 
#line 644 
                         tmp_62 = 0U;
                    
#line 644 
                    tmp_63 = tmp_62;
                  }
                  else 
#line 644 
                       tmp_63 = 0U;
                  
#line 644 
                  tmp_64 = tmp_63;
                }
                else 
#line 644 
                     tmp_64 = 0U;
                
#line 644 
                tmp_65 = tmp_64;
              }
              else 
#line 644 
                   tmp_65 = 0U;
              
#line 644 
              tmp_66 = tmp_65;
            }
            else 
#line 644 
                 tmp_66 = 0U;
            
#line 644 
            tmp_67 = tmp_66;
          }
          else 
#line 644 
               tmp_67 = 0U;
          
#line 644 
          tmp_68 = tmp_67;
        }
        
#line 644 
        tmp_70 = tmp_68;
      }
      else {
        int tmp_69;
        
#line 644 
        tmp_69 = __ilog2_u32(num_desc + 4294967295U);
        
#line 644 
        tmp_70 = (unsigned int)(1UL << (tmp_69 + 1));
      }
      
#line 644 
      tmp_71 = tmp_70;
    }
    else 
#line 644 
         tmp_71 = 1U;
    
#line 644 
    num_desc = tmp_71;
  }
  else {
    unsigned long tmp_72;
    
#line 644 
    tmp_72 = __roundup_pow_of_two((unsigned long)num_desc);
    
#line 644 
    num_desc = (unsigned int)tmp_72;
  }
  
#line 646 
  if (val != num_desc) 
#line 647 
                       printk("\001",(char *)(& qlcnic_driver_name),r_name,num_desc,val); else ;
  
#line 651 
  return num_desc;
}


#line 655  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_ringparam(struct net_device *dev, struct ethtool_ringparam *ring)
{
  int __retres;
  u16 num_rxd;
  u16 num_jumbo_rxd;
  u16 num_txd;
  u32 tmp_0;
  u32 tmp_1;
  u32 tmp_2;
  int tmp_3;
  
#line 658 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 661 
  if (ring->rx_mini_pending != 0U) {
    
#line 662 
    __retres = -95;
    
#line 662 
    goto return_label;
  }
  else ;
  
#line 664 
  tmp_0 = qlcnic_validate_ringparam(ring->rx_pending,64U,(unsigned int)adapter->max_rxd,(char *)"rx");
  
#line 664 
  num_rxd = (unsigned short)tmp_0;
  
#line 667 
  tmp_1 = qlcnic_validate_ringparam(ring->rx_jumbo_pending,32U,(unsigned int)adapter->max_jumbo_rxd,(char *)"rx jumbo");
  
#line 667 
  num_jumbo_rxd = (unsigned short)tmp_1;
  
#line 671 
  tmp_2 = qlcnic_validate_ringparam(ring->tx_pending,64U,1024U,(char *)"tx");
  
#line 671 
  num_txd = (unsigned short)tmp_2;
  
#line 674 
  if (((int)adapter->num_rxd == (int)num_rxd && (int)adapter->num_txd == (int)num_txd) && (int)adapter->num_jumbo_rxd == (int)num_jumbo_rxd) {
    
#line 676 
    __retres = 0;
    
#line 676 
    goto return_label;
  }
  else ;
  
#line 678 
  adapter->num_rxd = num_rxd;
  
#line 679 
  adapter->num_jumbo_rxd = num_jumbo_rxd;
  
#line 680 
  adapter->num_txd = num_txd;
  
#line 682 
  tmp_3 = qlcnic_reset_context(adapter);
  
#line 682 
  __retres = tmp_3;
  return_label: 
#line 682 
                return __retres;
}


#line 685  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_validate_ring_count(struct qlcnic_adapter *adapter, u8 rx_ring, u8 tx_ring)
{
  int __retres;
  
#line 688 
  if ((unsigned int)rx_ring == 0U || (unsigned int)tx_ring == 0U) {
    
#line 689 
    __retres = -22;
    
#line 689 
    goto return_label;
  }
  else ;
  
#line 691 
  if ((unsigned int)rx_ring != 0U) {
    
#line 692 
    if ((int)adapter->max_sds_rings < (int)rx_ring) {
      
#line 693 
      netdev_err((struct net_device const *)adapter->netdev,"Invalid ring count, SDS ring count %d should not be greater than max %d driver sds rings.\n",(int)rx_ring,(int)adapter->max_sds_rings);
      
#line 696 
      __retres = -22;
      
#line 696 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 700 
  if ((unsigned int)tx_ring != 0U) {
    
#line 701 
    if ((int)adapter->max_tx_rings < (int)tx_ring) {
      
#line 702 
      netdev_err((struct net_device const *)adapter->netdev,"Invalid ring count, Tx ring count %d should not be greater than max %d driver Tx rings.\n",(int)tx_ring,(int)adapter->max_tx_rings);
      
#line 705 
      __retres = -22;
      
#line 705 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 709 
  __retres = 0;
  return_label: 
#line 709 
                return __retres;
}


#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_get_channels(struct net_device *dev, struct ethtool_channels *channel)
{
  
#line 715 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 717 
  channel->max_rx = (unsigned int)adapter->max_sds_rings;
  
#line 718 
  channel->max_tx = (unsigned int)adapter->max_tx_rings;
  
#line 719 
  channel->rx_count = (unsigned int)adapter->drv_sds_rings;
  
#line 720 
  channel->tx_count = (unsigned int)adapter->drv_tx_rings;
  
#line 721 
  return;
}


#line 723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_channels(struct net_device *dev, struct ethtool_channels *channel)
{
  int __retres;
  int err;
  
#line 726 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 729 
  if ((adapter->flags & 4U) == 0U) {
    
#line 730 
    netdev_err((struct net_device const *)dev,"No RSS/TSS support in non MSI-X mode\n");
    
#line 731 
    __retres = -22;
    
#line 731 
    goto return_label;
  }
  else ;
  
#line 734 
  if (channel->other_count != 0U || channel->combined_count != 0U) {
    
#line 735 
    __retres = -22;
    
#line 735 
    goto return_label;
  }
  else ;
  
#line 737 
  err = qlcnic_validate_ring_count(adapter,(unsigned char)((int)((unsigned char)channel->rx_count)),(unsigned char)((int)((unsigned char)channel->tx_count)));
  
#line 739 
  if (err != 0) {
    
#line 740 
    __retres = err;
    
#line 740 
    goto return_label;
  }
  else ;
  
#line 742 
  if ((unsigned int)adapter->drv_sds_rings != channel->rx_count) {
    
#line 743 
    err = qlcnic_validate_rings(adapter,channel->rx_count,2);
    
#line 745 
    if (err != 0) {
      
#line 746 
      netdev_err((struct net_device const *)dev,"Unable to configure %u SDS rings\n",channel->rx_count);
      
#line 748 
      __retres = err;
      
#line 748 
      goto return_label;
    }
    else ;
    
#line 750 
    adapter->drv_rss_rings = (unsigned char)channel->rx_count;
  }
  else ;
  
#line 753 
  if ((unsigned int)adapter->drv_tx_rings != channel->tx_count) {
    
#line 754 
    err = qlcnic_validate_rings(adapter,channel->tx_count,1);
    
#line 756 
    if (err != 0) {
      
#line 757 
      netdev_err((struct net_device const *)dev,"Unable to configure %u Tx rings\n",channel->tx_count);
      
#line 759 
      __retres = err;
      
#line 759 
      goto return_label;
    }
    else ;
    
#line 761 
    adapter->drv_tss_rings = (unsigned char)channel->tx_count;
  }
  else ;
  
#line 764 
  adapter->flags |= 524288U;
  
#line 766 
  err = qlcnic_setup_rings(adapter);
  
#line 767 
  netdev_info((struct net_device const *)dev,"Allocated %d SDS rings and %d Tx rings\n",(int)adapter->drv_sds_rings,(int)adapter->drv_tx_rings);
  
#line 770 
  __retres = err;
  return_label: 
#line 770 
                return __retres;
}


#line 774  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  __u32 val;
  bool tmp_0;
  
#line 777 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 778 
  int port = (int)(adapter->ahw)->physical_port;
  
#line 779 
  int err = 0;
  
#line 782 
  tmp_0 = qlcnic_83xx_check(adapter);
  
#line 782 
  if ((int)tmp_0 != 0) {
    
#line 783 
    qlcnic_83xx_get_pauseparam(adapter,pause);
    
#line 784 
    goto return_label;
  }
  else ;
  
#line 786 
  if ((unsigned int)(adapter->ahw)->port_type == 1U) {
    int tmp_1;
    int tmp_2;
    
#line 787 
    if ((unsigned int)port > 4U) 
#line 788 
                                 goto return_label; else ;
    
#line 790 
    tmp_1 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)(port * 65536) + 107151360UL,& err);
    
#line 790 
    val = (unsigned int)tmp_1;
    
#line 791 
    if (err == -5) 
#line 792 
                   goto return_label; else ;
    
#line 793 
    pause->rx_pause = (val >> 5) & 1U;
    
#line 794 
    tmp_2 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,106955532UL,& err);
    
#line 794 
    val = (unsigned int)tmp_2;
    
#line 795 
    if (err == -5) 
#line 796 
                   goto return_label; else ;
    
#line 797 
    switch (port) {
      case 0: 
#line 798 
      ;
      
#line 799 
      pause->tx_pause = (unsigned int)((val & 1U) == 0U);
      
#line 800 
      goto ldv_53970;
      case 1: 
#line 801 
      ;
      
#line 802 
      pause->tx_pause = (unsigned int)((val & 4U) == 0U);
      
#line 803 
      goto ldv_53970;
      case 2: 
#line 804 
      ;
      
#line 805 
      pause->tx_pause = (unsigned int)((val & 16U) == 0U);
      
#line 806 
      goto ldv_53970;
      case 3: 
#line 807 
      ;
      default: 
#line 808 
      ;
      
#line 809 
      pause->tx_pause = (unsigned int)((val & 64U) == 0U);
      
#line 810 
      goto ldv_53970;
    }
    ldv_53970: 
#line 812 
    ;
  }
  else 
    
#line 812 
    if ((unsigned int)(adapter->ahw)->port_type == 2U) {
      int tmp_3;
      
#line 813 
      if ((unsigned int)port > 2U) 
#line 814 
                                   goto return_label; else ;
      
#line 815 
      pause->rx_pause = 1U;
      
#line 816 
      tmp_3 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,106954904UL,& err);
      
#line 816 
      val = (unsigned int)tmp_3;
      
#line 817 
      if (err == -5) 
#line 818 
                     goto return_label; else ;
      
#line 819 
      if (port == 0) 
#line 820 
                     pause->tx_pause = (unsigned int)((val & 1U) == 0U); else 
                                                                    
#line 822 
                                                                    pause->tx_pause = (unsigned int)((val & 8U) == 0U);
    }
    else 
#line 824 
         dev_err((struct device const *)(& netdev->dev),"Unknown board type: %x\n",(int)(adapter->ahw)->port_type);
  return_label: 
#line 826 
                return;
}


#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  int __retres;
  __u32 val;
  bool tmp_1;
  
#line 833 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 834 
  int port = (int)(adapter->ahw)->physical_port;
  
#line 835 
  int err = 0;
  
#line 838 
  tmp_1 = qlcnic_83xx_check(adapter);
  
#line 838 
  if ((int)tmp_1 != 0) {
    int tmp_0;
    
#line 839 
    tmp_0 = qlcnic_83xx_set_pauseparam(adapter,pause);
    
#line 839 
    __retres = tmp_0;
    
#line 839 
    goto return_label;
  }
  else ;
  
#line 842 
  if ((unsigned int)(adapter->ahw)->port_type == 1U) {
    int tmp_2;
    int tmp_3;
    
#line 843 
    if ((unsigned int)port > 4U) {
      
#line 844 
      __retres = -5;
      
#line 844 
      goto return_label;
    }
    else ;
    
#line 846 
    tmp_2 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)(port * 65536) + 107151360UL,& err);
    
#line 846 
    val = (unsigned int)tmp_2;
    
#line 847 
    if (err == -5) {
      
#line 848 
      __retres = err;
      
#line 848 
      goto return_label;
    }
    else ;
    
#line 850 
    if (pause->rx_pause != 0U) 
#line 851 
                               val |= 32U; else 
#line 853 
                                                val &= 4294967263U;
    
#line 855 
    (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)(port * 65536) + 107151360UL,val);
    
#line 857 
    (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)(port * 65536) + 107151360UL,val);
    
#line 859 
    tmp_3 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,106955532UL,& err);
    
#line 859 
    val = (unsigned int)tmp_3;
    
#line 860 
    if (err == -5) {
      
#line 861 
      __retres = err;
      
#line 861 
      goto return_label;
    }
    else ;
    
#line 862 
    switch (port) {
      case 0: 
#line 863 
      ;
      
#line 864 
      if (pause->tx_pause != 0U) 
#line 865 
                                 val &= 4294967294U; else 
#line 867 
                                                          val |= 1U;
      
#line 868 
      goto ldv_53984;
      case 1: 
#line 869 
      ;
      
#line 870 
      if (pause->tx_pause != 0U) 
#line 871 
                                 val &= 4294967291U; else 
#line 873 
                                                          val |= 4U;
      
#line 874 
      goto ldv_53984;
      case 2: 
#line 875 
      ;
      
#line 876 
      if (pause->tx_pause != 0U) 
#line 877 
                                 val &= 4294967279U; else 
#line 879 
                                                          val |= 16U;
      
#line 880 
      goto ldv_53984;
      case 3: 
#line 881 
      ;
      default: 
#line 882 
      ;
      
#line 883 
      if (pause->tx_pause != 0U) 
#line 884 
                                 val &= 4294967231U; else 
#line 886 
                                                          val |= 64U;
      
#line 887 
      goto ldv_53984;
    }
    ldv_53984: 
#line 889 
    ;
    
#line 889 
    (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,106955532UL,val);
  }
  else 
    
#line 890 
    if ((unsigned int)(adapter->ahw)->port_type == 2U) {
      int tmp_4;
      
#line 891 
      if (pause->rx_pause == 0U || pause->autoneg != 0U) {
        
#line 892 
        __retres = -95;
        
#line 892 
        goto return_label;
      }
      else ;
      
#line 894 
      if ((unsigned int)port > 2U) {
        
#line 895 
        __retres = -5;
        
#line 895 
        goto return_label;
      }
      else ;
      
#line 897 
      tmp_4 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,106954904UL,& err);
      
#line 897 
      val = (unsigned int)tmp_4;
      
#line 898 
      if (err == -5) {
        
#line 899 
        __retres = err;
        
#line 899 
        goto return_label;
      }
      else ;
      
#line 900 
      if (port == 0) 
        
#line 901 
        if (pause->tx_pause != 0U) 
#line 902 
                                   val &= 4294967294U; else 
#line 904 
                                                            val |= 1U;
      else 
        
#line 906 
        if (pause->tx_pause != 0U) 
#line 907 
                                   val &= 4294967287U; else 
#line 909 
                                                            val |= 8U;
      
#line 911 
      (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,106954904UL,val);
    }
    else 
#line 913 
         dev_err((struct device const *)(& netdev->dev),"Unknown board type: %x\n",(int)(adapter->ahw)->port_type);
  
#line 916 
  __retres = 0;
  return_label: 
#line 916 
                return __retres;
}


#line 919  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_reg_test(struct net_device *dev)
{
  int __retres;
  u32 data_read;
  bool tmp_1;
  int tmp_2;
  
#line 921 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 923 
  int err = 0;
  
#line 925 
  tmp_1 = qlcnic_83xx_check(adapter);
  
#line 925 
  if ((int)tmp_1 != 0) {
    int tmp_0;
    
#line 926 
    tmp_0 = qlcnic_83xx_reg_test(adapter);
    
#line 926 
    __retres = tmp_0;
    
#line 926 
    goto return_label;
  }
  else ;
  
#line 928 
  tmp_2 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,101711872UL,& err);
  
#line 928 
  data_read = (unsigned int)tmp_2;
  
#line 929 
  if (err == -5) {
    
#line 930 
    __retres = err;
    
#line 930 
    goto return_label;
  }
  else ;
  
#line 931 
  if ((data_read & 65535U) != (unsigned int)(adapter->pdev)->vendor) {
    
#line 932 
    __retres = 1;
    
#line 932 
    goto return_label;
  }
  else ;
  
#line 934 
  __retres = 0;
  return_label: 
#line 934 
                return __retres;
}


#line 937  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_eeprom_test(struct net_device *dev)
{
  int __retres;
  bool tmp_0;
  int tmp_1;
  
#line 939 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 941 
  tmp_0 = qlcnic_82xx_check(adapter);
  
#line 941 
  if ((int)tmp_0 != 0) {
    
#line 942 
    __retres = 0;
    
#line 942 
    goto return_label;
  }
  else ;
  
#line 944 
  tmp_1 = qlcnic_83xx_flash_test(adapter);
  
#line 944 
  __retres = tmp_1;
  return_label: 
#line 944 
                return __retres;
}


#line 947  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_get_sset_count(struct net_device *dev, int sset)
{
  int __retres;
  
#line 950 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 951 
  switch (sset) {
    int tmp_0;
    case 0: 
#line 952 
    ;
    
#line 953 
    __retres = 6;
    
#line 953 
    goto return_label;
    case 1: 
#line 954 
    ;
    
#line 955 
    tmp_0 = qlcnic_dev_statistics_len(adapter);
    
#line 955 
    __retres = tmp_0;
    
#line 955 
    goto return_label;
    default: 
#line 956 
    ;
    
#line 957 
    __retres = -95;
    
#line 957 
    goto return_label;
  }
  return_label: 
#line 951 
                return __retres;
}


#line 961  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_irq_test(struct net_device *netdev)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  int ret;
  bool tmp_1;
  int tmp_2;
  
#line 963 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 964 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 966 
  int drv_sds_rings = (int)adapter->drv_sds_rings;
  
#line 967 
  int drv_tx_rings = (int)adapter->drv_tx_rings;
  
#line 969 
  tmp_1 = qlcnic_83xx_check(adapter);
  
#line 969 
  if ((int)tmp_1 != 0) {
    int tmp_0;
    
#line 970 
    tmp_0 = qlcnic_83xx_interrupt_test(netdev);
    
#line 970 
    __retres = tmp_0;
    
#line 970 
    goto return_label;
  }
  else ;
  
#line 972 
  tmp_2 = test_and_set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 972 
  if (tmp_2 != 0) {
    
#line 973 
    __retres = -5;
    
#line 973 
    goto return_label;
  }
  else ;
  
#line 975 
  ret = qlcnic_diag_alloc_res(netdev,1);
  
#line 976 
  if (ret != 0) 
#line 977 
                goto clear_diag_irq; else ;
  
#line 979 
  ahw->diag_cnt = 0;
  
#line 980 
  ret = qlcnic_alloc_mbx_args(& cmd,adapter,17U);
  
#line 981 
  if (ret != 0) 
#line 982 
                goto free_diag_res; else ;
  
#line 984 
  *(cmd.req.arg + 1U) = (unsigned int)ahw->pci_func;
  
#line 985 
  ret = qlcnic_issue_cmd(adapter,& cmd);
  
#line 986 
  if (ret != 0) 
#line 987 
                goto done; else ;
  
#line 989 
  usleep_range(1000UL,12000UL);
  
#line 990 
  ret = ahw->diag_cnt == 0;
  done: 
#line 992 
  ;
  
#line 993 
  qlcnic_free_mbx_args(& cmd);
  free_diag_res: 
#line 995 
  ;
  
#line 996 
  qlcnic_diag_free_res(netdev,drv_sds_rings);
  clear_diag_irq: 
#line 998 
  ;
  
#line 999 
  adapter->drv_sds_rings = (unsigned char)drv_sds_rings;
  
#line 1000 
  adapter->drv_tx_rings = (unsigned char)drv_tx_rings;
  
#line 1001 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 1003 
  __retres = ret;
  return_label: 
#line 1003 
                return __retres;
}


#line 1012  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_create_loopback_buff(unsigned char *data, u8 *mac)
{
  
#line 1014 
  unsigned char random_data[4U] = {(unsigned char)168U, (unsigned char)6U, (unsigned char)69U, (unsigned char)0U};
  
#line 1016 
  memset((void *)data,78,64UL);
  
#line 1018 
  memcpy((void *)data,(void const *)mac,6UL);
  
#line 1019 
  memcpy((void *)(data + 6U),(void const *)mac,6UL);
  
#line 1021 
  memcpy((void *)(data + 12U),(void const *)(& random_data),4UL);
  
#line 1022 
  return;
}


#line 1024  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
int qlcnic_check_loopback_buff(unsigned char *data, u8 *mac)
{
  unsigned char buff[64U];
  int tmp;
  
#line 1027 
  qlcnic_create_loopback_buff((unsigned char *)(& buff),mac);
  
#line 1028 
  tmp = memcmp((void const *)data,(void const *)(& buff),64UL);
  
#line 1028 
  return tmp;
}


#line 1031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
int qlcnic_do_lb_test(struct qlcnic_adapter *adapter, u8 mode)
{
  int __retres;
  struct sk_buff *skb;
  int i;
  int loop;
  int tmp;
  
#line 1033 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 1034 
  struct qlcnic_host_sds_ring *sds_ring = recv_ctx->sds_rings;
  
#line 1036 
  int cnt = 0;
  
#line 1038 
  i = 0;
  
#line 1038 
  goto ldv_54045;
  ldv_54044: 
#line 1039 
  ;
  
#line 1039 
  skb = netdev_alloc_skb(adapter->netdev,64U);
  
#line 1040 
  qlcnic_create_loopback_buff(skb->data,(u8 *)(& adapter->mac_addr));
  
#line 1041 
  skb_put(skb,64U);
  
#line 1042 
  (adapter->ahw)->diag_cnt = 0;
  
#line 1043 
  qlcnic_xmit_frame(skb,adapter->netdev);
  
#line 1044 
  loop = 0;
  ldv_54043: 
#line 1045 
  ;
  
#line 1047 
  msleep(1U);
  
#line 1048 
  qlcnic_process_rcv_ring_diag(sds_ring);
  
#line 1049 
  tmp = loop;
  
#line 1049 
  loop += 1;
  
#line 1049 
  ;
  
#line 1049 
  if (tmp > 20) 
#line 1050 
                goto ldv_54042; else ;
  
#line 1051 
  if ((adapter->ahw)->diag_cnt == 0) 
#line 1053 
                                     goto ldv_54043; else 
#line 1056 
                                                          goto ldv_54042;
  ldv_54042: 
#line 1057 
  ;
  
#line 1053 
  dev_kfree_skb_any(skb);
  
#line 1055 
  if ((adapter->ahw)->diag_cnt == 0) 
#line 1056 
                                     dev_warn((struct device const *)(& (adapter->pdev)->dev),"LB Test: packet #%d was not received\n",i + 1); else 
                                                                    
#line 1060 
                                                                    cnt += 1;
  
#line 1038 
  i += 1;
  ldv_54045: 
#line 1039 
  ;
  
#line 1038 
  if (i <= 15) 
#line 1040 
               goto ldv_54044; else 
#line 1043 
                                    goto ldv_54046;
  ldv_54046: 
#line 1044 
  ;
  
#line 1062 
  if (cnt != i) {
    
#line 1063 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"LB Test: failed, TX[%d], RX[%d]\n",i,cnt);
    
#line 1065 
    if ((unsigned int)mode != 1U) 
#line 1066 
                                  dev_warn((struct device const *)(& (adapter->pdev)->dev),"WARNING: Please check loopback cable\n"); else ;
    
#line 1068 
    __retres = -1;
    
#line 1068 
    goto return_label;
  }
  else ;
  
#line 1070 
  __retres = 0;
  return_label: 
#line 1070 
                return __retres;
}


#line 1073  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_loopback_test(struct net_device *netdev, u8 mode)
{
  int __retres;
  struct qlcnic_host_sds_ring *sds_ring;
  int ret;
  bool tmp_1;
  char *tmp_2;
  int tmp_3;
  int tmp_4;
  
#line 1075 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1076 
  int drv_tx_rings = (int)adapter->drv_tx_rings;
  
#line 1077 
  int drv_sds_rings = (int)adapter->drv_sds_rings;
  
#line 1079 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1080 
  int loop = 0;
  
#line 1083 
  tmp_1 = qlcnic_83xx_check(adapter);
  
#line 1083 
  if ((int)tmp_1 != 0) {
    int tmp_0;
    
#line 1084 
    tmp_0 = qlcnic_83xx_loopback_test(netdev,(unsigned char)((int)mode));
    
#line 1084 
    __retres = tmp_0;
    
#line 1084 
    goto return_label;
  }
  else ;
  
#line 1086 
  if ((ahw->capabilities & 134217728U) == 0U) {
    
#line 1087 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Firmware do not support loopback test\n");
    
#line 1089 
    __retres = -95;
    
#line 1089 
    goto return_label;
  }
  else ;
  
#line 1092 
  if ((unsigned int)mode == 1U) 
#line 1092 
                                tmp_2 = (char *)"internal"; else 
#line 1092 
                                                                 tmp_2 = (char *)"external";
  
#line 1092 
  ;
  
#line 1092 
  dev_warn((struct device const *)(& (adapter->pdev)->dev),"%s loopback test in progress\n",tmp_2);
  
#line 1094 
  if ((unsigned int)ahw->op_mode == 2U) {
    
#line 1095 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"Loopback test not supported in nonprivileged mode\n");
    
#line 1097 
    __retres = 0;
    
#line 1097 
    goto return_label;
  }
  else ;
  
#line 1100 
  tmp_3 = test_and_set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 1100 
  if (tmp_3 != 0) {
    
#line 1101 
    __retres = -16;
    
#line 1101 
    goto return_label;
  }
  else ;
  
#line 1103 
  ret = qlcnic_diag_alloc_res(netdev,2);
  
#line 1104 
  if (ret != 0) 
#line 1105 
                goto clear_it; else ;
  
#line 1107 
  sds_ring = (adapter->recv_ctx)->sds_rings;
  
#line 1108 
  ret = qlcnic_set_lb_mode(adapter,(unsigned char)((int)mode));
  
#line 1109 
  if (ret != 0) 
#line 1110 
                goto free_res; else ;
  
#line 1112 
  ahw->diag_cnt = 0;
  ldv_54060: 
#line 1113 
  ;
  
#line 1114 
  msleep(500U);
  
#line 1115 
  qlcnic_process_rcv_ring_diag(sds_ring);
  
#line 1116 
  tmp_4 = loop;
  
#line 1116 
  loop += 1;
  
#line 1116 
  ;
  
#line 1116 
  if (tmp_4 > 10) {
    
#line 1117 
    netdev_info((struct net_device const *)netdev,"Firmware didn\'t sent link up event to loopback request\n");
    
#line 1119 
    ret = -110;
    
#line 1120 
    goto free_res;
  }
  else 
    
#line 1121 
    if ((adapter->ahw)->diag_cnt != 0) {
      
#line 1122 
      ret = (adapter->ahw)->diag_cnt;
      
#line 1123 
      goto free_res;
    }
    else ;
  
#line 1125 
  if ((unsigned int)ahw->loopback_state != 3U) 
#line 1127 
                                               goto ldv_54060; else 
#line 1130 
                                                                    goto ldv_54061;
  ldv_54061: 
#line 1131 
  ;
  
#line 1127 
  ret = qlcnic_do_lb_test(adapter,(unsigned char)((int)mode));
  
#line 1129 
  qlcnic_clear_lb_mode(adapter,(unsigned char)((int)mode));
  free_res: 
#line 1131 
  ;
  
#line 1132 
  qlcnic_diag_free_res(netdev,drv_sds_rings);
  clear_it: 
#line 1134 
  ;
  
#line 1135 
  adapter->drv_sds_rings = (unsigned char)drv_sds_rings;
  
#line 1136 
  adapter->drv_tx_rings = (unsigned char)drv_tx_rings;
  
#line 1137 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 1138 
  __retres = ret;
  return_label: 
#line 1138 
                return __retres;
}


#line 1142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_diag_test(struct net_device *dev, struct ethtool_test *eth_test, u64 *data)
{
  int tmp;
  u32 tmp_0;
  
#line 1145 
  memset((void *)data,0,48UL);
  
#line 1147 
  tmp = qlcnic_reg_test(dev);
  
#line 1147 
  *data = (unsigned long long)tmp;
  
#line 1148 
  if (*data != 0ULL) 
#line 1149 
                     eth_test->flags |= 2U; else ;
  
#line 1151 
  tmp_0 = qlcnic_test_link(dev);
  
#line 1151 
  *(data + 1U) = (unsigned long long)tmp_0;
  
#line 1152 
  if (*(data + 1U) != 0ULL) 
#line 1153 
                            eth_test->flags |= 2U; else ;
  
#line 1155 
  if ((eth_test->flags & 1U) != 0U) {
    int tmp_1;
    int tmp_2;
    int tmp_4;
    
#line 1156 
    tmp_1 = qlcnic_irq_test(dev);
    
#line 1156 
    *(data + 2U) = (unsigned long long)tmp_1;
    
#line 1157 
    if (*(data + 2U) != 0ULL) 
#line 1158 
                              eth_test->flags |= 2U; else ;
    
#line 1160 
    tmp_2 = qlcnic_loopback_test(dev,(unsigned char)1);
    
#line 1160 
    *(data + 3U) = (unsigned long long)tmp_2;
    
#line 1161 
    if (*(data + 3U) != 0ULL) 
#line 1162 
                              eth_test->flags |= 2U; else ;
    
#line 1164 
    if ((eth_test->flags & 4U) != 0U) {
      int tmp_3;
      
#line 1165 
      tmp_3 = qlcnic_loopback_test(dev,(unsigned char)2);
      
#line 1165 
      *(data + 4U) = (unsigned long long)tmp_3;
      
#line 1166 
      if (*(data + 4U) != 0ULL) 
#line 1167 
                                eth_test->flags |= 2U; else ;
      
#line 1168 
      eth_test->flags |= 8U;
    }
    else ;
    
#line 1171 
    tmp_4 = qlcnic_eeprom_test(dev);
    
#line 1171 
    *(data + 5U) = (unsigned long long)tmp_4;
    
#line 1172 
    if (*(data + 5U) != 0ULL) 
#line 1173 
                              eth_test->flags |= 2U; else ;
  }
  else ;
  
#line 1175 
  return;
}


#line 1178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_get_strings(struct net_device *dev, u32 stringset, u8 *data)
{
  int index;
  int i;
  int num_stats;
  
#line 1180 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 1183 
  switch (stringset) {
    bool tmp_0;
    case (u32)0: 
#line 1184 
    ;
    
#line 1185 
    memcpy((void *)data,(void const *)(& qlcnic_gstrings_test),192UL);
    
#line 1187 
    goto ldv_54083;
    case (u32)1: 
#line 1188 
    ;
    
#line 1189 
    num_stats = 5;
    
#line 1190 
    i = 0;
    
#line 1190 
    goto ldv_54092;
    ldv_54091: 
#line 1191 
    ;
    
#line 1191 
    index = 0;
    
#line 1191 
    goto ldv_54089;
    ldv_54088: 
#line 1192 
    ;
    
#line 1192 
    sprintf((char *)data,"tx_queue_%d %s",i,(char const *)(& qlcnic_tx_queue_stats_strings[index]));
    
#line 1194 
    data += 32U;
    
#line 1191 
    index += 1;
    ldv_54089: 
#line 1192 
    ;
    
#line 1191 
    if (index < num_stats) 
#line 1193 
                           goto ldv_54088; else 
#line 1196 
                                                goto ldv_54090;
    ldv_54090: 
#line 1197 
    ;
    
#line 1190 
    i += 1;
    ldv_54092: 
#line 1191 
    ;
    
#line 1190 
    if ((int)adapter->drv_tx_rings > i) 
#line 1192 
                                        goto ldv_54091; else 
#line 1195 
                                                             goto ldv_54093;
    ldv_54093: 
#line 1196 
    ;
    
#line 1198 
    index = 0;
    
#line 1198 
    goto ldv_54098;
    ldv_54097: 
#line 1199 
    ;
    
#line 1199 
    memcpy((void *)(data + index * 32),(void const *)(& qlcnic_gstrings_stats[index].stat_string),32UL);
    
#line 1198 
    index += 1;
    ldv_54098: 
#line 1199 
    ;
    
#line 1198 
    if ((unsigned int)index <= 21U) 
#line 1200 
                                    goto ldv_54097; else 
#line 1203 
                                                         goto ldv_54099;
    ldv_54099: 
#line 1204 
    ;
    
#line 1204 
    tmp_0 = qlcnic_83xx_check(adapter);
    
#line 1204 
    if ((int)tmp_0 != 0) {
      
#line 1205 
      num_stats = 5;
      
#line 1206 
      i = 0;
      
#line 1206 
      goto ldv_54104;
      ldv_54103: 
#line 1207 
      ;
      
#line 1207 
      memcpy((void *)(data + index * 32),(void const *)(& qlcnic_83xx_tx_stats_strings[i]),32UL);
      
#line 1206 
      i += 1;
      
#line 1206 
      index += 1;
      ldv_54104: 
#line 1207 
      ;
      
#line 1206 
      if (i < num_stats) 
#line 1208 
                         goto ldv_54103; else 
#line 1211 
                                              goto ldv_54105;
      ldv_54105: 
#line 1212 
      ;
      
#line 1210 
      num_stats = 40;
      
#line 1211 
      i = 0;
      
#line 1211 
      goto ldv_54110;
      ldv_54109: 
#line 1212 
      ;
      
#line 1212 
      memcpy((void *)(data + index * 32),(void const *)(& qlcnic_83xx_mac_stats_strings[i]),32UL);
      
#line 1211 
      i += 1;
      
#line 1211 
      index += 1;
      ldv_54110: 
#line 1212 
      ;
      
#line 1211 
      if (i < num_stats) 
#line 1213 
                         goto ldv_54109; else 
#line 1216 
                                              goto ldv_54111;
      ldv_54111: 
#line 1217 
      ;
      
#line 1215 
      num_stats = 17;
      
#line 1216 
      i = 0;
      
#line 1216 
      goto ldv_54116;
      ldv_54115: 
#line 1217 
      ;
      
#line 1217 
      memcpy((void *)(data + index * 32),(void const *)(& qlcnic_83xx_rx_stats_strings[i]),32UL);
      
#line 1216 
      i += 1;
      
#line 1216 
      index += 1;
      ldv_54116: 
#line 1217 
      ;
      
#line 1216 
      if (i < num_stats) 
#line 1218 
                         goto ldv_54115; else 
#line 1221 
                                              goto ldv_54117;
      ldv_54117: 
#line 1222 
      ;
      
#line 1220 
      goto return_label;
    }
    else {
      
#line 1222 
      num_stats = 40;
      
#line 1223 
      i = 0;
      
#line 1223 
      goto ldv_54122;
      ldv_54121: 
#line 1224 
      ;
      
#line 1224 
      memcpy((void *)(data + index * 32),(void const *)(& qlcnic_83xx_mac_stats_strings[i]),32UL);
      
#line 1223 
      i += 1;
      
#line 1223 
      index += 1;
      ldv_54122: 
#line 1224 
      ;
      
#line 1223 
      if (i < num_stats) 
#line 1225 
                         goto ldv_54121; else 
#line 1228 
                                              goto ldv_54123;
      ldv_54123: 
#line 1229 
      ;
    }
    
#line 1228 
    if ((adapter->flags & 64U) == 0U) 
#line 1229 
                                      goto return_label; else ;
    
#line 1230 
    num_stats = 14;
    
#line 1231 
    i = 0;
    
#line 1231 
    goto ldv_54128;
    ldv_54127: 
#line 1232 
    ;
    
#line 1232 
    memcpy((void *)(data + index * 32),(void const *)(& qlcnic_device_gstrings_stats[i]),32UL);
    
#line 1231 
    index += 1;
    
#line 1231 
    i += 1;
    ldv_54128: 
#line 1232 
    ;
    
#line 1231 
    if (i < num_stats) 
#line 1233 
                       goto ldv_54127; else 
#line 1236 
                                            goto ldv_54129;
    ldv_54129: 
#line 1237 
    ;
  }
  ldv_54083: 
#line 1237 
  ;
  return_label: 
#line 1238 
                return;
}


#line 1239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static u64 *qlcnic_fill_stats(u64 *data, void *stats, int type)
{
  
#line 1241 
  if (type == 1) {
    u64 *tmp;
    u64 *tmp_0;
    u64 *tmp_1;
    u64 *tmp_2;
    u64 *tmp_3;
    u64 *tmp_4;
    u64 *tmp_5;
    u64 *tmp_6;
    u64 *tmp_7;
    u64 *tmp_8;
    u64 *tmp_9;
    u64 *tmp_10;
    u64 *tmp_11;
    u64 *tmp_12;
    u64 *tmp_13;
    u64 *tmp_14;
    u64 *tmp_15;
    u64 *tmp_16;
    u64 *tmp_17;
    u64 *tmp_18;
    u64 *tmp_19;
    u64 *tmp_20;
    u64 *tmp_21;
    u64 *tmp_22;
    u64 *tmp_23;
    u64 *tmp_24;
    u64 *tmp_25;
    u64 *tmp_26;
    u64 *tmp_27;
    u64 *tmp_28;
    u64 *tmp_29;
    u64 *tmp_30;
    u64 *tmp_31;
    
#line 1242 
    struct qlcnic_mac_statistics *mac_stats = (struct qlcnic_mac_statistics *)stats;
    
#line 1244 
    tmp = data;
    
#line 1244 
    data += 1;
    
#line 1244 
    if (mac_stats->mac_tx_frames != 18446744073709551615ULL) 
#line 1244 
                                                             *tmp = mac_stats->mac_tx_frames; else 
                                                                    
#line 1244 
                                                                    *tmp = 0ULL;
    
#line 1245 
    tmp_0 = data;
    
#line 1245 
    data += 1;
    
#line 1245 
    if (mac_stats->mac_tx_bytes != 18446744073709551615ULL) 
#line 1245 
                                                            *tmp_0 = mac_stats->mac_tx_bytes; else 
                                                                    
#line 1245 
                                                                    *tmp_0 = 0ULL;
    
#line 1246 
    tmp_1 = data;
    
#line 1246 
    data += 1;
    
#line 1246 
    if (mac_stats->mac_tx_mcast_pkts != 18446744073709551615ULL) 
#line 1246 
                                                                 *tmp_1 = mac_stats->mac_tx_mcast_pkts; else 
                                                                    
#line 1246 
                                                                    *tmp_1 = 0ULL;
    
#line 1247 
    tmp_2 = data;
    
#line 1247 
    data += 1;
    
#line 1247 
    if (mac_stats->mac_tx_bcast_pkts != 18446744073709551615ULL) 
#line 1247 
                                                                 *tmp_2 = mac_stats->mac_tx_bcast_pkts; else 
                                                                    
#line 1247 
                                                                    *tmp_2 = 0ULL;
    
#line 1248 
    tmp_3 = data;
    
#line 1248 
    data += 1;
    
#line 1248 
    if (mac_stats->mac_tx_pause_cnt != 18446744073709551615ULL) 
#line 1248 
                                                                *tmp_3 = mac_stats->mac_tx_pause_cnt; else 
                                                                    
#line 1248 
                                                                    *tmp_3 = 0ULL;
    
#line 1249 
    tmp_4 = data;
    
#line 1249 
    data += 1;
    
#line 1249 
    if (mac_stats->mac_tx_ctrl_pkt != 18446744073709551615ULL) 
#line 1249 
                                                               *tmp_4 = mac_stats->mac_tx_ctrl_pkt; else 
                                                                    
#line 1249 
                                                                    *tmp_4 = 0ULL;
    
#line 1250 
    tmp_5 = data;
    
#line 1250 
    data += 1;
    
#line 1250 
    if (mac_stats->mac_tx_lt_64b_pkts != 18446744073709551615ULL) 
#line 1250 
                                                                  *tmp_5 = mac_stats->mac_tx_lt_64b_pkts; else 
                                                                    
#line 1250 
                                                                    *tmp_5 = 0ULL;
    
#line 1251 
    tmp_6 = data;
    
#line 1251 
    data += 1;
    
#line 1251 
    if (mac_stats->mac_tx_lt_127b_pkts != 18446744073709551615ULL) 
#line 1251 
                                                                   *tmp_6 = mac_stats->mac_tx_lt_127b_pkts; else 
                                                                    
#line 1251 
                                                                    *tmp_6 = 0ULL;
    
#line 1252 
    tmp_7 = data;
    
#line 1252 
    data += 1;
    
#line 1252 
    if (mac_stats->mac_tx_lt_255b_pkts != 18446744073709551615ULL) 
#line 1252 
                                                                   *tmp_7 = mac_stats->mac_tx_lt_255b_pkts; else 
                                                                    
#line 1252 
                                                                    *tmp_7 = 0ULL;
    
#line 1253 
    tmp_8 = data;
    
#line 1253 
    data += 1;
    
#line 1253 
    if (mac_stats->mac_tx_lt_511b_pkts != 18446744073709551615ULL) 
#line 1253 
                                                                   *tmp_8 = mac_stats->mac_tx_lt_511b_pkts; else 
                                                                    
#line 1253 
                                                                    *tmp_8 = 0ULL;
    
#line 1254 
    tmp_9 = data;
    
#line 1254 
    data += 1;
    
#line 1254 
    if (mac_stats->mac_tx_lt_1023b_pkts != 18446744073709551615ULL) 
#line 1254 
                                                                    *tmp_9 = mac_stats->mac_tx_lt_1023b_pkts; else 
                                                                    
#line 1254 
                                                                    *tmp_9 = 0ULL;
    
#line 1255 
    tmp_10 = data;
    
#line 1255 
    data += 1;
    
#line 1255 
    if (mac_stats->mac_tx_lt_1518b_pkts != 18446744073709551615ULL) 
#line 1255 
                                                                    *tmp_10 = mac_stats->mac_tx_lt_1518b_pkts; else 
                                                                    
#line 1255 
                                                                    *tmp_10 = 0ULL;
    
#line 1256 
    tmp_11 = data;
    
#line 1256 
    data += 1;
    
#line 1256 
    if (mac_stats->mac_tx_gt_1518b_pkts != 18446744073709551615ULL) 
#line 1256 
                                                                    *tmp_11 = mac_stats->mac_tx_gt_1518b_pkts; else 
                                                                    
#line 1256 
                                                                    *tmp_11 = 0ULL;
    
#line 1257 
    tmp_12 = data;
    
#line 1257 
    data += 1;
    
#line 1257 
    if (mac_stats->mac_rx_frames != 18446744073709551615ULL) 
#line 1257 
                                                             *tmp_12 = mac_stats->mac_rx_frames; else 
                                                                    
#line 1257 
                                                                    *tmp_12 = 0ULL;
    
#line 1258 
    tmp_13 = data;
    
#line 1258 
    data += 1;
    
#line 1258 
    if (mac_stats->mac_rx_bytes != 18446744073709551615ULL) 
#line 1258 
                                                            *tmp_13 = mac_stats->mac_rx_bytes; else 
                                                                    
#line 1258 
                                                                    *tmp_13 = 0ULL;
    
#line 1259 
    tmp_14 = data;
    
#line 1259 
    data += 1;
    
#line 1259 
    if (mac_stats->mac_rx_mcast_pkts != 18446744073709551615ULL) 
#line 1259 
                                                                 *tmp_14 = mac_stats->mac_rx_mcast_pkts; else 
                                                                    
#line 1259 
                                                                    *tmp_14 = 0ULL;
    
#line 1260 
    tmp_15 = data;
    
#line 1260 
    data += 1;
    
#line 1260 
    if (mac_stats->mac_rx_bcast_pkts != 18446744073709551615ULL) 
#line 1260 
                                                                 *tmp_15 = mac_stats->mac_rx_bcast_pkts; else 
                                                                    
#line 1260 
                                                                    *tmp_15 = 0ULL;
    
#line 1261 
    tmp_16 = data;
    
#line 1261 
    data += 1;
    
#line 1261 
    if (mac_stats->mac_rx_pause_cnt != 18446744073709551615ULL) 
#line 1261 
                                                                *tmp_16 = mac_stats->mac_rx_pause_cnt; else 
                                                                    
#line 1261 
                                                                    *tmp_16 = 0ULL;
    
#line 1262 
    tmp_17 = data;
    
#line 1262 
    data += 1;
    
#line 1262 
    if (mac_stats->mac_rx_ctrl_pkt != 18446744073709551615ULL) 
#line 1262 
                                                               *tmp_17 = mac_stats->mac_rx_ctrl_pkt; else 
                                                                    
#line 1262 
                                                                    *tmp_17 = 0ULL;
    
#line 1263 
    tmp_18 = data;
    
#line 1263 
    data += 1;
    
#line 1263 
    if (mac_stats->mac_rx_lt_64b_pkts != 18446744073709551615ULL) 
#line 1263 
                                                                  *tmp_18 = mac_stats->mac_rx_lt_64b_pkts; else 
                                                                    
#line 1263 
                                                                    *tmp_18 = 0ULL;
    
#line 1264 
    tmp_19 = data;
    
#line 1264 
    data += 1;
    
#line 1264 
    if (mac_stats->mac_rx_lt_127b_pkts != 18446744073709551615ULL) 
#line 1264 
                                                                   *tmp_19 = mac_stats->mac_rx_lt_127b_pkts; else 
                                                                    
#line 1264 
                                                                    *tmp_19 = 0ULL;
    
#line 1265 
    tmp_20 = data;
    
#line 1265 
    data += 1;
    
#line 1265 
    if (mac_stats->mac_rx_lt_255b_pkts != 18446744073709551615ULL) 
#line 1265 
                                                                   *tmp_20 = mac_stats->mac_rx_lt_255b_pkts; else 
                                                                    
#line 1265 
                                                                    *tmp_20 = 0ULL;
    
#line 1266 
    tmp_21 = data;
    
#line 1266 
    data += 1;
    
#line 1266 
    if (mac_stats->mac_rx_lt_511b_pkts != 18446744073709551615ULL) 
#line 1266 
                                                                   *tmp_21 = mac_stats->mac_rx_lt_511b_pkts; else 
                                                                    
#line 1266 
                                                                    *tmp_21 = 0ULL;
    
#line 1267 
    tmp_22 = data;
    
#line 1267 
    data += 1;
    
#line 1267 
    if (mac_stats->mac_rx_lt_1023b_pkts != 18446744073709551615ULL) 
#line 1267 
                                                                    *tmp_22 = mac_stats->mac_rx_lt_1023b_pkts; else 
                                                                    
#line 1267 
                                                                    *tmp_22 = 0ULL;
    
#line 1268 
    tmp_23 = data;
    
#line 1268 
    data += 1;
    
#line 1268 
    if (mac_stats->mac_rx_lt_1518b_pkts != 18446744073709551615ULL) 
#line 1268 
                                                                    *tmp_23 = mac_stats->mac_rx_lt_1518b_pkts; else 
                                                                    
#line 1268 
                                                                    *tmp_23 = 0ULL;
    
#line 1269 
    tmp_24 = data;
    
#line 1269 
    data += 1;
    
#line 1269 
    if (mac_stats->mac_rx_gt_1518b_pkts != 18446744073709551615ULL) 
#line 1269 
                                                                    *tmp_24 = mac_stats->mac_rx_gt_1518b_pkts; else 
                                                                    
#line 1269 
                                                                    *tmp_24 = 0ULL;
    
#line 1270 
    tmp_25 = data;
    
#line 1270 
    data += 1;
    
#line 1270 
    if (mac_stats->mac_rx_length_error != 18446744073709551615ULL) 
#line 1270 
                                                                   *tmp_25 = mac_stats->mac_rx_length_error; else 
                                                                    
#line 1270 
                                                                    *tmp_25 = 0ULL;
    
#line 1271 
    tmp_26 = data;
    
#line 1271 
    data += 1;
    
#line 1271 
    if (mac_stats->mac_rx_length_small != 18446744073709551615ULL) 
#line 1271 
                                                                   *tmp_26 = mac_stats->mac_rx_length_small; else 
                                                                    
#line 1271 
                                                                    *tmp_26 = 0ULL;
    
#line 1272 
    tmp_27 = data;
    
#line 1272 
    data += 1;
    
#line 1272 
    if (mac_stats->mac_rx_length_large != 18446744073709551615ULL) 
#line 1272 
                                                                   *tmp_27 = mac_stats->mac_rx_length_large; else 
                                                                    
#line 1272 
                                                                    *tmp_27 = 0ULL;
    
#line 1273 
    tmp_28 = data;
    
#line 1273 
    data += 1;
    
#line 1273 
    if (mac_stats->mac_rx_jabber != 18446744073709551615ULL) 
#line 1273 
                                                             *tmp_28 = mac_stats->mac_rx_jabber; else 
                                                                    
#line 1273 
                                                                    *tmp_28 = 0ULL;
    
#line 1274 
    tmp_29 = data;
    
#line 1274 
    data += 1;
    
#line 1274 
    if (mac_stats->mac_rx_dropped != 18446744073709551615ULL) 
#line 1274 
                                                              *tmp_29 = mac_stats->mac_rx_dropped; else 
                                                                    
#line 1274 
                                                                    *tmp_29 = 0ULL;
    
#line 1275 
    tmp_30 = data;
    
#line 1275 
    data += 1;
    
#line 1275 
    if (mac_stats->mac_rx_crc_error != 18446744073709551615ULL) 
#line 1275 
                                                                *tmp_30 = mac_stats->mac_rx_crc_error; else 
                                                                    
#line 1275 
                                                                    *tmp_30 = 0ULL;
    
#line 1276 
    tmp_31 = data;
    
#line 1276 
    data += 1;
    
#line 1276 
    if (mac_stats->mac_align_error != 18446744073709551615ULL) 
#line 1276 
                                                               *tmp_31 = mac_stats->mac_align_error; else 
                                                                    
#line 1276 
                                                                    *tmp_31 = 0ULL;
  }
  else 
    
#line 1277 
    if (type == 2) {
      u64 *tmp_32;
      u64 *tmp_33;
      u64 *tmp_34;
      u64 *tmp_35;
      u64 *tmp_36;
      u64 *tmp_37;
      u64 *tmp_38;
      
#line 1278 
      struct __qlcnic_esw_statistics *esw_stats = (struct __qlcnic_esw_statistics *)stats;
      
#line 1280 
      tmp_32 = data;
      
#line 1280 
      data += 1;
      
#line 1280 
      if (esw_stats->unicast_frames != 18446744073709551615ULL) 
#line 1280 
                                                                *tmp_32 = esw_stats->unicast_frames; else 
                                                                    
#line 1280 
                                                                    *tmp_32 = 0ULL;
      
#line 1281 
      tmp_33 = data;
      
#line 1281 
      data += 1;
      
#line 1281 
      if (esw_stats->multicast_frames != 18446744073709551615ULL) 
#line 1281 
                                                                  *tmp_33 = esw_stats->multicast_frames; else 
                                                                    
#line 1281 
                                                                    *tmp_33 = 0ULL;
      
#line 1282 
      tmp_34 = data;
      
#line 1282 
      data += 1;
      
#line 1282 
      if (esw_stats->broadcast_frames != 18446744073709551615ULL) 
#line 1282 
                                                                  *tmp_34 = esw_stats->broadcast_frames; else 
                                                                    
#line 1282 
                                                                    *tmp_34 = 0ULL;
      
#line 1283 
      tmp_35 = data;
      
#line 1283 
      data += 1;
      
#line 1283 
      if (esw_stats->dropped_frames != 18446744073709551615ULL) 
#line 1283 
                                                                *tmp_35 = esw_stats->dropped_frames; else 
                                                                    
#line 1283 
                                                                    *tmp_35 = 0ULL;
      
#line 1284 
      tmp_36 = data;
      
#line 1284 
      data += 1;
      
#line 1284 
      if (esw_stats->errors != 18446744073709551615ULL) 
#line 1284 
                                                        *tmp_36 = esw_stats->errors; else 
                                                                    
#line 1284 
                                                                    *tmp_36 = 0ULL;
      
#line 1285 
      tmp_37 = data;
      
#line 1285 
      data += 1;
      
#line 1285 
      if (esw_stats->local_frames != 18446744073709551615ULL) 
#line 1285 
                                                              *tmp_37 = esw_stats->local_frames; else 
                                                                    
#line 1285 
                                                                    *tmp_37 = 0ULL;
      
#line 1286 
      tmp_38 = data;
      
#line 1286 
      data += 1;
      
#line 1286 
      if (esw_stats->numbytes != 18446744073709551615ULL) 
#line 1286 
                                                          *tmp_38 = esw_stats->numbytes; else 
                                                                    
#line 1286 
                                                                    *tmp_38 = 0ULL;
    }
    else ;
  
#line 1288 
  return data;
}


#line 1291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
void qlcnic_update_stats(struct qlcnic_adapter *adapter)
{
  struct qlcnic_tx_queue_stats tx_stats;
  struct qlcnic_host_tx_ring *tx_ring;
  int ring;
  
#line 1297 
  memset((void *)(& tx_stats),0,40UL);
  
#line 1298 
  ring = 0;
  
#line 1298 
  goto ldv_54144;
  ldv_54143: 
#line 1299 
  ;
  
#line 1299 
  tx_ring = adapter->tx_ring + ring;
  
#line 1300 
  tx_stats.xmit_on += tx_ring->tx_stats.xmit_on;
  
#line 1301 
  tx_stats.xmit_off += tx_ring->tx_stats.xmit_off;
  
#line 1302 
  tx_stats.xmit_called += tx_ring->tx_stats.xmit_called;
  
#line 1303 
  tx_stats.xmit_finished += tx_ring->tx_stats.xmit_finished;
  
#line 1304 
  tx_stats.tx_bytes += tx_ring->tx_stats.tx_bytes;
  
#line 1298 
  ring += 1;
  ldv_54144: 
#line 1299 
  ;
  
#line 1298 
  if ((int)adapter->drv_tx_rings > ring) 
#line 1300 
                                         goto ldv_54143; else 
#line 1303 
                                                              goto ldv_54145;
  ldv_54145: 
#line 1304 
  ;
  
#line 1307 
  adapter->stats.xmit_on = tx_stats.xmit_on;
  
#line 1308 
  adapter->stats.xmit_off = tx_stats.xmit_off;
  
#line 1309 
  adapter->stats.xmitcalled = tx_stats.xmit_called;
  
#line 1310 
  adapter->stats.xmitfinished = tx_stats.xmit_finished;
  
#line 1311 
  adapter->stats.txbytes = tx_stats.tx_bytes;
  
#line 1312 
  return;
}


#line 1314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static u64 *qlcnic_fill_tx_queue_stats(u64 *data, void *stats)
{
  struct qlcnic_host_tx_ring *tx_ring;
  u64 *tmp;
  u64 *tmp_0;
  u64 *tmp_1;
  u64 *tmp_2;
  u64 *tmp_3;
  
#line 1318 
  tx_ring = (struct qlcnic_host_tx_ring *)stats;
  
#line 1320 
  tmp = data;
  
#line 1320 
  data += 1;
  
#line 1320 
  if (tx_ring->tx_stats.xmit_on != 18446744073709551615ULL) 
#line 1320 
                                                            *tmp = tx_ring->tx_stats.xmit_on; else 
                                                                    
#line 1320 
                                                                    *tmp = 0ULL;
  
#line 1321 
  tmp_0 = data;
  
#line 1321 
  data += 1;
  
#line 1321 
  if (tx_ring->tx_stats.xmit_off != 18446744073709551615ULL) 
#line 1321 
                                                             *tmp_0 = tx_ring->tx_stats.xmit_off; else 
                                                                    
#line 1321 
                                                                    *tmp_0 = 0ULL;
  
#line 1322 
  tmp_1 = data;
  
#line 1322 
  data += 1;
  
#line 1322 
  if (tx_ring->tx_stats.xmit_called != 18446744073709551615ULL) 
#line 1322 
                                                                *tmp_1 = tx_ring->tx_stats.xmit_called; else 
                                                                    
#line 1322 
                                                                    *tmp_1 = 0ULL;
  
#line 1323 
  tmp_2 = data;
  
#line 1323 
  data += 1;
  
#line 1323 
  if (tx_ring->tx_stats.xmit_finished != 18446744073709551615ULL) 
#line 1323 
                                                                  *tmp_2 = tx_ring->tx_stats.xmit_finished; else 
                                                                    
#line 1323 
                                                                    *tmp_2 = 0ULL;
  
#line 1324 
  tmp_3 = data;
  
#line 1324 
  data += 1;
  
#line 1324 
  if (tx_ring->tx_stats.tx_bytes != 18446744073709551615ULL) 
#line 1324 
                                                             *tmp_3 = tx_ring->tx_stats.tx_bytes; else 
                                                                    
#line 1324 
                                                                    *tmp_3 = 0ULL;
  
#line 1326 
  return data;
}


#line 1329  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *data)
{
  struct qlcnic_host_tx_ring *tx_ring;
  struct qlcnic_esw_statistics port_stats;
  struct qlcnic_mac_statistics mac_stats;
  int index;
  int ret;
  int length;
  int size;
  int ring;
  char *p;
  u64 *tmp_0;
  bool tmp_1;
  
#line 1332 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 1339 
  memset((void *)data,0,(unsigned long)stats->n_stats * 8UL);
  
#line 1341 
  ring = 0;
  
#line 1341 
  index = 0;
  
#line 1341 
  goto ldv_54170;
  ldv_54169: 
#line 1342 
  ;
  
#line 1342 
  if ((unsigned int)adapter->is_up == 777U) {
    
#line 1343 
    tx_ring = adapter->tx_ring + ring;
    
#line 1344 
    data = qlcnic_fill_tx_queue_stats(data,(void *)tx_ring);
    
#line 1345 
    qlcnic_update_stats(adapter);
  }
  else 
#line 1347 
       data += 5U;
  
#line 1341 
  ring += 1;
  ldv_54170: 
#line 1342 
  ;
  
#line 1341 
  if ((int)adapter->drv_tx_rings > ring) 
#line 1343 
                                         goto ldv_54169; else 
#line 1346 
                                                              goto ldv_54171;
  ldv_54171: 
#line 1347 
  ;
  
#line 1351 
  length = 22;
  
#line 1352 
  index = 0;
  
#line 1352 
  goto ldv_54176;
  ldv_54175: 
#line 1353 
  ;
  
#line 1353 
  p = (char *)adapter + qlcnic_gstrings_stats[index].stat_offset;
  
#line 1354 
  size = qlcnic_gstrings_stats[index].sizeof_stat;
  
#line 1355 
  tmp_0 = data;
  
#line 1355 
  data += 1;
  
#line 1355 
  if (size == 8) 
#line 1355 
                 *tmp_0 = *((u64 *)p); else 
#line 1355 
                                            *tmp_0 = (unsigned long long)*((u32 *)p);
  
#line 1352 
  index += 1;
  ldv_54176: 
#line 1353 
  ;
  
#line 1352 
  if (index < length) 
#line 1354 
                      goto ldv_54175; else 
#line 1357 
                                           goto ldv_54177;
  ldv_54177: 
#line 1358 
  ;
  
#line 1358 
  tmp_1 = qlcnic_83xx_check(adapter);
  
#line 1358 
  if ((int)tmp_1 != 0) {
    
#line 1359 
    if ((unsigned int)(adapter->ahw)->linkup != 0U) 
#line 1360 
                                                    qlcnic_83xx_get_stats(adapter,data); else ;
    
#line 1361 
    goto return_label;
  }
  else {
    
#line 1364 
    memset((void *)(& mac_stats),0,312UL);
    
#line 1365 
    qlcnic_get_mac_stats(adapter,& mac_stats);
    
#line 1366 
    data = qlcnic_fill_stats(data,(void *)(& mac_stats),1);
  }
  
#line 1369 
  if ((adapter->flags & 64U) == 0U) 
#line 1370 
                                    goto return_label; else ;
  
#line 1372 
  memset((void *)(& port_stats),0,176UL);
  
#line 1373 
  ret = qlcnic_get_port_stats(adapter,(unsigned char)((int)(adapter->ahw)->pci_func),(unsigned char)0,& port_stats.rx);
  
#line 1375 
  if (ret != 0) 
#line 1376 
                goto return_label; else ;
  
#line 1378 
  data = qlcnic_fill_stats(data,(void *)(& port_stats.rx),2);
  
#line 1379 
  ret = qlcnic_get_port_stats(adapter,(unsigned char)((int)(adapter->ahw)->pci_func),(unsigned char)1,& port_stats.tx);
  
#line 1381 
  if (ret != 0) 
#line 1382 
                goto return_label; else ;
  
#line 1384 
  qlcnic_fill_stats(data,(void *)(& port_stats.tx),2);
  return_label: 
#line 1385 
                return;
}


#line 1387  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_led(struct net_device *dev, enum ethtool_phys_id_state state)
{
  int __retres;
  bool tmp_1;
  int tmp_11;
  
#line 1390 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 1391 
  int drv_sds_rings = (int)adapter->drv_sds_rings;
  
#line 1392 
  int err = -5;
  
#line 1392 
  int active = 1;
  
#line 1394 
  tmp_1 = qlcnic_83xx_check(adapter);
  
#line 1394 
  if ((int)tmp_1 != 0) {
    int tmp_0;
    
#line 1395 
    tmp_0 = qlcnic_83xx_set_led(dev,state);
    
#line 1395 
    __retres = tmp_0;
    
#line 1395 
    goto return_label;
  }
  else ;
  
#line 1397 
  if ((unsigned int)(adapter->ahw)->op_mode == 2U) {
    
#line 1398 
    netdev_warn((struct net_device const *)dev,"LED test not supported for non ");
    
#line 1400 
    __retres = -95;
    
#line 1400 
    goto return_label;
  }
  else ;
  
#line 1403 
  switch ((unsigned int)state) {
    int tmp_2;
    int tmp_3;
    int tmp_5;
    int tmp_6;
    int tmp_7;
    int tmp_9;
    int tmp_10;
    case (unsigned int)1: 
#line 1404 
    ;
    
#line 1405 
    tmp_2 = test_and_set_bit(7L,(unsigned long volatile *)(& adapter->state));
    
#line 1405 
    if (tmp_2 != 0) {
      
#line 1406 
      __retres = -16;
      
#line 1406 
      goto return_label;
    }
    else ;
    
#line 1408 
    tmp_3 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
    
#line 1408 
    if (tmp_3 != 0) 
#line 1409 
                    goto ldv_54187; else ;
    
#line 1411 
    tmp_5 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
    
#line 1411 
    if (tmp_5 == 0) {
      int tmp_4;
      
#line 1412 
      tmp_4 = qlcnic_diag_alloc_res(dev,3);
      
#line 1412 
      if (tmp_4 != 0) 
#line 1413 
                      goto ldv_54187; else ;
      
#line 1414 
      set_bit(6L,(unsigned long volatile *)(& adapter->state));
    }
    else ;
    
#line 1417 
    tmp_6 = (*((adapter->nic_ops)->config_led))(adapter,1U,15U);
    
#line 1417 
    if (tmp_6 == 0) {
      
#line 1418 
      err = 0;
      
#line 1419 
      goto ldv_54187;
    }
    else ;
    
#line 1422 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to set LED blink state.\n");
    
#line 1424 
    goto ldv_54187;
    case (unsigned int)0: 
#line 1426 
    ;
    
#line 1427 
    active = 0;
    
#line 1429 
    tmp_7 = constant_test_bit(2L,(unsigned long const volatile *)(& adapter->state));
    
#line 1429 
    if (tmp_7 != 0) 
#line 1430 
                    goto ldv_54187; else ;
    
#line 1432 
    tmp_9 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
    
#line 1432 
    if (tmp_9 == 0) {
      int tmp_8;
      
#line 1433 
      tmp_8 = qlcnic_diag_alloc_res(dev,3);
      
#line 1433 
      if (tmp_8 != 0) 
#line 1434 
                      goto ldv_54187; else ;
      
#line 1435 
      set_bit(6L,(unsigned long volatile *)(& adapter->state));
    }
    else ;
    
#line 1438 
    tmp_10 = (*((adapter->nic_ops)->config_led))(adapter,0U,15U);
    
#line 1438 
    if (tmp_10 != 0) 
#line 1439 
                     dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to reset LED blink state.\n"); else ;
    
#line 1442 
    goto ldv_54187;
    default: 
#line 1444 
    ;
    
#line 1445 
    __retres = -22;
    
#line 1445 
    goto return_label;
  }
  ldv_54187: 
#line 1448 
  ;
  
#line 1448 
  tmp_11 = test_and_set_bit(6L,(unsigned long volatile *)(& adapter->state));
  
#line 1448 
  if (tmp_11 != 0) 
#line 1449 
                   qlcnic_diag_free_res(dev,drv_sds_rings); else ;
  
#line 1451 
  if (active == 0 || err != 0) 
#line 1452 
                               set_bit(7L,(unsigned long volatile *)(& adapter->state)); else ;
  
#line 1454 
  __retres = err;
  return_label: 
#line 1454 
                return __retres;
}


#line 1458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_get_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  u32 wol_cfg;
  bool tmp_0;
  int tmp_1;
  int tmp_2;
  
#line 1460 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 1462 
  int err = 0;
  
#line 1464 
  tmp_0 = qlcnic_83xx_check(adapter);
  
#line 1464 
  if ((int)tmp_0 != 0) 
#line 1465 
                       goto return_label; else ;
  
#line 1466 
  wol->supported = 0U;
  
#line 1467 
  wol->wolopts = 0U;
  
#line 1469 
  tmp_1 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323460UL,& err);
  
#line 1469 
  wol_cfg = (unsigned int)tmp_1;
  
#line 1470 
  if (err == -5) 
#line 1471 
                 goto return_label; else ;
  
#line 1472 
  if ((((unsigned long)wol_cfg >> (int)adapter->portnum) & 1UL) != 0UL) 
    
#line 1473 
    wol->supported |= 32U; else ;
  
#line 1475 
  tmp_2 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323464UL,& err);
  
#line 1475 
  wol_cfg = (unsigned int)tmp_2;
  
#line 1476 
  if ((((unsigned long)wol_cfg >> (int)adapter->portnum) & 1UL) != 0UL) 
    
#line 1477 
    wol->wolopts |= 32U; else ;
  return_label: 
#line 1478 
                return;
}


#line 1481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_wol(struct net_device *dev, struct ethtool_wolinfo *wol)
{
  int __retres;
  u32 wol_cfg;
  bool tmp_0;
  int tmp_1;
  int tmp_2;
  
#line 1483 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)dev);
  
#line 1485 
  int err = 0;
  
#line 1487 
  tmp_0 = qlcnic_83xx_check(adapter);
  
#line 1487 
  if ((int)tmp_0 != 0) {
    
#line 1488 
    __retres = -95;
    
#line 1488 
    goto return_label;
  }
  else ;
  
#line 1489 
  if ((wol->wolopts & 4294967263U) != 0U) {
    
#line 1490 
    __retres = -22;
    
#line 1490 
    goto return_label;
  }
  else ;
  
#line 1492 
  tmp_1 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323460UL,& err);
  
#line 1492 
  wol_cfg = (unsigned int)tmp_1;
  
#line 1493 
  if (err == -5) {
    
#line 1494 
    __retres = err;
    
#line 1494 
    goto return_label;
  }
  else ;
  
#line 1495 
  if (((unsigned int)(1 << (int)adapter->portnum) & wol_cfg) == 0U) {
    
#line 1496 
    __retres = -95;
    
#line 1496 
    goto return_label;
  }
  else ;
  
#line 1498 
  tmp_2 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323464UL,& err);
  
#line 1498 
  wol_cfg = (unsigned int)tmp_2;
  
#line 1499 
  if (err == -5) {
    
#line 1500 
    __retres = err;
    
#line 1500 
    goto return_label;
  }
  else ;
  
#line 1501 
  if ((wol->wolopts & 32U) != 0U) 
#line 1502 
                                  wol_cfg = (unsigned int)(1UL << (int)adapter->portnum) | wol_cfg; else 
                                                                    
#line 1504 
                                                                    wol_cfg = ~ ((unsigned int)(1UL << (int)adapter->portnum)) & wol_cfg;
  
#line 1506 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,136323464UL,wol_cfg);
  
#line 1508 
  __retres = 0;
  return_label: 
#line 1508 
                return __retres;
}


#line 1516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_intr_coalesce(struct net_device *netdev, struct ethtool_coalesce *ethcoal)
{
  int __retres;
  int err;
  int tmp_0;
  
#line 1519 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1522 
  tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
  
#line 1522 
  if (tmp_0 == 0) {
    
#line 1523 
    __retres = -22;
    
#line 1523 
    goto return_label;
  }
  else ;
  
#line 1529 
  if ((((((((((((((((((((ethcoal->rx_coalesce_usecs > 65535U || ethcoal->rx_max_coalesced_frames > 65535U) || ethcoal->tx_coalesce_usecs > 65535U) || ethcoal->tx_max_coalesced_frames > 65535U) || ethcoal->rx_coalesce_usecs_irq != 0U) || ethcoal->rx_max_coalesced_frames_irq != 0U) || ethcoal->tx_coalesce_usecs_irq != 0U) || ethcoal->tx_max_coalesced_frames_irq != 0U) || ethcoal->stats_block_coalesce_usecs != 0U) || ethcoal->use_adaptive_rx_coalesce != 0U) || ethcoal->use_adaptive_tx_coalesce != 0U) || ethcoal->pkt_rate_low != 0U) || ethcoal->rx_coalesce_usecs_low != 0U) || ethcoal->rx_max_coalesced_frames_low != 0U) || ethcoal->tx_coalesce_usecs_low != 0U) || ethcoal->tx_max_coalesced_frames_low != 0U) || ethcoal->pkt_rate_high != 0U) || ethcoal->rx_coalesce_usecs_high != 0U) || ethcoal->rx_max_coalesced_frames_high != 0U) || ethcoal->tx_coalesce_usecs_high != 0U) || ethcoal->tx_max_coalesced_frames_high != 0U) {
    
#line 1550 
    __retres = -22;
    
#line 1550 
    goto return_label;
  }
  else ;
  
#line 1552 
  err = qlcnic_config_intr_coalesce(adapter,ethcoal);
  
#line 1554 
  __retres = err;
  return_label: 
#line 1554 
                return __retres;
}


#line 1557  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_get_intr_coalesce(struct net_device *netdev, struct ethtool_coalesce *ethcoal)
{
  int __retres;
  
#line 1560 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1562 
  if ((unsigned int)adapter->is_up != 777U) {
    
#line 1563 
    __retres = -22;
    
#line 1563 
    goto return_label;
  }
  else ;
  
#line 1565 
  ethcoal->rx_coalesce_usecs = (unsigned int)(adapter->ahw)->coal.rx_time_us;
  
#line 1566 
  ethcoal->rx_max_coalesced_frames = (unsigned int)(adapter->ahw)->coal.rx_packets;
  
#line 1567 
  ethcoal->tx_coalesce_usecs = (unsigned int)(adapter->ahw)->coal.tx_time_us;
  
#line 1568 
  ethcoal->tx_max_coalesced_frames = (unsigned int)(adapter->ahw)->coal.tx_packets;
  
#line 1570 
  __retres = 0;
  return_label: 
#line 1570 
                return __retres;
}


#line 1573  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static u32 qlcnic_get_msglevel(struct net_device *netdev)
{
  u32 __retres;
  
#line 1575 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1577 
  __retres = (adapter->ahw)->msg_enable;
  
#line 1577 
  return __retres;
}


#line 1580  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static void qlcnic_set_msglevel(struct net_device *netdev, u32 msglvl)
{
  
#line 1582 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1584 
  (adapter->ahw)->msg_enable = msglvl;
  
#line 1585 
  return;
}


#line 1587  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
int qlcnic_enable_fw_dump_state(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 val;
  bool tmp_0;
  
#line 1589 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  
#line 1592 
  tmp_0 = qlcnic_84xx_check(adapter);
  
#line 1592 
  if ((int)tmp_0 != 0) {
    int tmp;
    
#line 1593 
    tmp = qlcnic_83xx_lock_driver(adapter);
    
#line 1593 
    if (tmp != 0) {
      
#line 1594 
      __retres = -16;
      
#line 1594 
      goto return_label;
    }
    else ;
    
#line 1596 
    val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
    
#line 1597 
    val &= 4294967291U;
    
#line 1598 
    writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
    
#line 1600 
    qlcnic_83xx_unlock_driver(adapter);
  }
  else 
#line 1602 
       fw_dump->enable = (_Bool)1;
  
#line 1605 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"FW dump enabled\n");
  
#line 1607 
  __retres = 0;
  return_label: 
#line 1607 
                return __retres;
}


#line 1610  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_disable_fw_dump_state(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 val;
  bool tmp_0;
  
#line 1612 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  
#line 1615 
  tmp_0 = qlcnic_84xx_check(adapter);
  
#line 1615 
  if ((int)tmp_0 != 0) {
    int tmp;
    
#line 1616 
    tmp = qlcnic_83xx_lock_driver(adapter);
    
#line 1616 
    if (tmp != 0) {
      
#line 1617 
      __retres = -16;
      
#line 1617 
      goto return_label;
    }
    else ;
    
#line 1619 
    val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
    
#line 1620 
    val |= 4U;
    
#line 1621 
    writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
    
#line 1623 
    qlcnic_83xx_unlock_driver(adapter);
  }
  else 
#line 1625 
       fw_dump->enable = (_Bool)0;
  
#line 1628 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"FW dump disabled\n");
  
#line 1630 
  __retres = 0;
  return_label: 
#line 1630 
                return __retres;
}


#line 1633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
bool qlcnic_check_fw_dump_state(struct qlcnic_adapter *adapter)
{
  bool state;
  u32 val;
  bool tmp;
  
#line 1635 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  
#line 1639 
  tmp = qlcnic_84xx_check(adapter);
  
#line 1639 
  if ((int)tmp != 0) {
    
#line 1640 
    val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
    
#line 1641 
    state = (_Bool)((val & 4U) == 0U);
  }
  else 
#line 1643 
       state = fw_dump->enable;
  
#line 1646 
  return state;
}


#line 1650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_get_dump_flag(struct net_device *netdev, struct ethtool_dump *dump)
{
  int __retres;
  int tmp_1;
  bool tmp_0;
  
#line 1652 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1653 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  
#line 1655 
  if (fw_dump->tmpl_hdr == (void *)0) {
    
#line 1656 
    netdev_err((struct net_device const *)adapter->netdev,"FW Dump not supported\n");
    
#line 1657 
    __retres = -524;
    
#line 1657 
    goto return_label;
  }
  else ;
  
#line 1660 
  if ((unsigned int)fw_dump->clr != 0U) 
#line 1661 
                                        dump->len = fw_dump->tmpl_hdr_size + fw_dump->size; else 
                                                                    
#line 1663 
                                                                    dump->len = 0U;
  
#line 1665 
  tmp_0 = qlcnic_check_fw_dump_state(adapter);
  
#line 1665 
  if (tmp_0) 
#line 1665 
             tmp_1 = 0; else 
#line 1665 
                             tmp_1 = 1;
  
#line 1665 
  if (tmp_1) 
#line 1666 
             dump->flag = 0U; else 
#line 1668 
                                   dump->flag = fw_dump->cap_mask;
  
#line 1670 
  dump->version = adapter->fw_version;
  
#line 1671 
  __retres = 0;
  return_label: 
#line 1671 
                return __retres;
}


#line 1675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_get_dump_data(struct net_device *netdev, struct ethtool_dump *dump, void *buffer)
{
  int __retres;
  int i;
  int copy_sz;
  u32 *hdr_ptr;
  __le32 *data;
  __le32 *tmp_0;
  u32 *tmp_1;
  
#line 1681 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1682 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  
#line 1684 
  if (fw_dump->tmpl_hdr == (void *)0) {
    
#line 1685 
    netdev_err((struct net_device const *)netdev,"FW Dump not supported\n");
    
#line 1686 
    __retres = -524;
    
#line 1686 
    goto return_label;
  }
  else ;
  
#line 1689 
  if ((unsigned int)fw_dump->clr == 0U) {
    
#line 1690 
    netdev_info((struct net_device const *)netdev,"Dump not available\n");
    
#line 1691 
    __retres = -22;
    
#line 1691 
    goto return_label;
  }
  else ;
  
#line 1695 
  copy_sz = (int)fw_dump->tmpl_hdr_size;
  
#line 1696 
  hdr_ptr = (u32 *)fw_dump->tmpl_hdr;
  
#line 1697 
  data = (__le32 *)buffer;
  
#line 1698 
  i = 0;
  
#line 1698 
  goto ldv_54258;
  ldv_54257: 
#line 1699 
  ;
  
#line 1699 
  tmp_0 = data;
  
#line 1699 
  data += 1;
  
#line 1699 
  tmp_1 = hdr_ptr;
  
#line 1699 
  hdr_ptr += 1;
  
#line 1699 
  *tmp_0 = *tmp_1;
  
#line 1698 
  i += 1;
  ldv_54258: 
#line 1699 
  ;
  
#line 1698 
  if ((unsigned long)i < (unsigned long)copy_sz / 4UL) 
#line 1700 
                                                       goto ldv_54257; else 
                                                                    
#line 1703 
                                                                    goto ldv_54259;
  ldv_54259: 
#line 1704 
  ;
  
#line 1702 
  memcpy(buffer + copy_sz,(void const *)fw_dump->data,(unsigned long)fw_dump->size);
  
#line 1703 
  dump->len = fw_dump->size + (unsigned int)copy_sz;
  
#line 1704 
  dump->flag = fw_dump->cap_mask;
  
#line 1707 
  vfree((void const *)fw_dump->data);
  
#line 1708 
  fw_dump->data = (void *)0;
  
#line 1709 
  fw_dump->clr = (unsigned char)0U;
  
#line 1710 
  netdev_info((struct net_device const *)netdev,"extracted the FW dump Successfully\n");
  
#line 1711 
  __retres = 0;
  return_label: 
#line 1711 
                return __retres;
}


#line 1714  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_dump_mask(struct qlcnic_adapter *adapter, u32 mask)
{
  int __retres;
  int tmp_0;
  bool tmp;
  
#line 1716 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  
#line 1717 
  struct net_device *netdev = adapter->netdev;
  
#line 1719 
  tmp = qlcnic_check_fw_dump_state(adapter);
  
#line 1719 
  if (tmp) 
#line 1719 
           tmp_0 = 0; else 
#line 1719 
                           tmp_0 = 1;
  
#line 1719 
  if (tmp_0) {
    
#line 1720 
    netdev_info((struct net_device const *)netdev,"Can not change driver mask to 0x%x. FW dump not enabled\n",mask);
    
#line 1723 
    __retres = -95;
    
#line 1723 
    goto return_label;
  }
  else ;
  
#line 1726 
  fw_dump->cap_mask = mask;
  
#line 1729 
  qlcnic_store_cap_mask(adapter,fw_dump->tmpl_hdr,mask);
  
#line 1731 
  netdev_info((struct net_device const *)netdev,"Driver mask changed to: 0x%x\n",mask);
  
#line 1732 
  __retres = 0;
  return_label: 
#line 1732 
                return __retres;
}


#line 1736  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
static int qlcnic_set_dump(struct net_device *netdev, struct ethtool_dump *val)
{
  int i;
  
#line 1738 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1739 
  struct qlcnic_fw_dump *fw_dump = & (adapter->ahw)->fw_dump;
  
#line 1740 
  bool valid_mask = (_Bool)0;
  
#line 1741 
  int ret = 0;
  
#line 1743 
  switch (val->flag) {
    int tmp_1;
    bool tmp_0;
    int tmp_2;
    case (__u32)(-559022355): 
#line 1744 
    ;
    
#line 1745 
    if (fw_dump->tmpl_hdr == (void *)0) {
      
#line 1746 
      netdev_err((struct net_device const *)netdev,"FW dump not supported\n");
      
#line 1747 
      ret = -95;
      
#line 1748 
      goto ldv_54276;
    }
    else ;
    
#line 1751 
    tmp_0 = qlcnic_check_fw_dump_state(adapter);
    
#line 1751 
    if (tmp_0) 
#line 1751 
               tmp_1 = 0; else 
#line 1751 
                               tmp_1 = 1;
    
#line 1751 
    if (tmp_1) {
      
#line 1752 
      netdev_info((struct net_device const *)netdev,"FW dump not enabled\n");
      
#line 1753 
      ret = -95;
      
#line 1754 
      goto ldv_54276;
    }
    else ;
    
#line 1757 
    if ((unsigned int)fw_dump->clr != 0U) {
      
#line 1758 
      netdev_info((struct net_device const *)netdev,"Previous dump not cleared, not forcing dump\n");
      
#line 1760 
      goto ldv_54276;
    }
    else ;
    
#line 1763 
    netdev_info((struct net_device const *)netdev,"Forcing a FW dump\n");
    
#line 1764 
    qlcnic_dev_request_reset(adapter,val->flag);
    
#line 1765 
    goto ldv_54276;
    case (__u32)195952365: 
#line 1766 
    ;
    
#line 1767 
    if (fw_dump->tmpl_hdr == (void *)0) {
      
#line 1768 
      netdev_err((struct net_device const *)netdev,"FW dump not supported\n");
      
#line 1769 
      ret = -95;
      
#line 1770 
      goto ldv_54276;
    }
    else ;
    
#line 1773 
    ret = qlcnic_disable_fw_dump_state(adapter);
    
#line 1774 
    goto ldv_54276;
    case (__u32)182320877: 
#line 1776 
    ;
    
#line 1777 
    if (fw_dump->tmpl_hdr == (void *)0) {
      
#line 1778 
      netdev_err((struct net_device const *)netdev,"FW dump not supported\n");
      
#line 1779 
      ret = -95;
      
#line 1780 
      goto ldv_54276;
    }
    else ;
    
#line 1783 
    ret = qlcnic_enable_fw_dump_state(adapter);
    
#line 1784 
    goto ldv_54276;
    case (__u32)(-559030611): 
#line 1786 
    ;
    
#line 1787 
    netdev_info((struct net_device const *)netdev,"Forcing a FW reset\n");
    
#line 1788 
    qlcnic_dev_request_reset(adapter,val->flag);
    
#line 1789 
    adapter->flags &= 4294959103U;
    
#line 1790 
    goto ldv_54276;
    case (__u32)(-1378877424): 
#line 1792 
    ;
    case (__u32)(-1378877408): 
#line 1793 
    ;
    
#line 1794 
    tmp_2 = constant_test_bit(16L,(unsigned long const volatile *)(& adapter->state));
    
#line 1794 
    if (tmp_2 != 0) 
#line 1795 
                    netdev_info((struct net_device const *)netdev,"Device is in non-operational state\n"); else ;
    
#line 1796 
    goto ldv_54276;
    default: 
#line 1798 
    ;
    
#line 1799 
    if (fw_dump->tmpl_hdr == (void *)0) {
      
#line 1800 
      netdev_err((struct net_device const *)netdev,"FW dump not supported\n");
      
#line 1801 
      ret = -95;
      
#line 1802 
      goto ldv_54276;
    }
    else ;
    
#line 1805 
    i = 0;
    
#line 1805 
    goto ldv_54288;
    ldv_54287: 
#line 1806 
    ;
    
#line 1806 
    if (val->flag == qlcnic_fw_dump_level[i]) {
      
#line 1807 
      valid_mask = (_Bool)1;
      
#line 1808 
      goto ldv_54286;
    }
    else ;
    
#line 1805 
    i += 1;
    ldv_54288: 
#line 1806 
    ;
    
#line 1805 
    if ((unsigned int)i <= 6U) 
#line 1807 
                               goto ldv_54287; else 
#line 1810 
                                                    goto ldv_54286;
    ldv_54286: 
#line 1811 
    ;
    
#line 1812 
    if ((int)valid_mask != 0) 
#line 1813 
                              ret = qlcnic_set_dump_mask(adapter,val->flag);
    else {
      
#line 1815 
      netdev_info((struct net_device const *)netdev,"Invalid dump level: 0x%x\n",val->flag);
      
#line 1817 
      ret = -22;
    }
  }
  ldv_54276: 
#line 1820 
  ;
  
#line 1820 
  return ret;
}


#line 1823  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
struct ethtool_ops const qlcnic_ethtool_ops = {.get_settings = & qlcnic_get_settings, .set_settings = & qlcnic_set_settings, .get_drvinfo = & qlcnic_get_drvinfo, .get_regs_len = & qlcnic_get_regs_len, .get_regs = & qlcnic_get_regs, .get_wol = & qlcnic_get_wol, .set_wol = & qlcnic_set_wol, .get_msglevel = & qlcnic_get_msglevel, .set_msglevel = & qlcnic_set_msglevel, .nway_reset = (int (*)(struct net_device *))0, .get_link = & ethtool_op_get_link, .get_eeprom_len = & qlcnic_get_eeprom_len, .get_eeprom = & qlcnic_get_eeprom, .set_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_coalesce = & qlcnic_get_intr_coalesce, .set_coalesce = & qlcnic_set_intr_coalesce, .get_ringparam = & qlcnic_get_ringparam, .set_ringparam = & qlcnic_set_ringparam, .get_pauseparam = & qlcnic_get_pauseparam, .set_pauseparam = & qlcnic_set_pauseparam, .self_test = & qlcnic_diag_test, .get_strings = & qlcnic_get_strings, .set_phys_id = & qlcnic_set_led, .get_ethtool_stats = & qlcnic_get_ethtool_stats, .begin = (int (*)(struct net_device *))0, .complete = (void (*)(struct net_device *))0, .get_priv_flags = (u32 (*)(struct net_device *))0, .set_priv_flags = (int (*)(struct net_device *, u32 ))0, .get_sset_count = & qlcnic_get_sset_count, .get_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *, u32 *))0, .set_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *))0, .flash_device = (int (*)(struct net_device *, struct ethtool_flash *))0, .reset = (int (*)(struct net_device *, u32 *))0, .get_rxfh_key_size = (u32 (*)(struct net_device *))0, .get_rxfh_indir_size = (u32 (*)(struct net_device *))0, .get_rxfh = (int (*)(struct net_device *, u32 *, u8 *, u8 *))0, .set_rxfh = (int (*)(struct net_device *, u32 const *, u8 const *, u8 const ))0, .get_channels = & qlcnic_get_channels, .set_channels = & qlcnic_set_channels, .get_dump_flag = & qlcnic_get_dump_flag, .get_dump_data = & qlcnic_get_dump_data, .set_dump = & qlcnic_set_dump, .get_ts_info = (int (*)(struct net_device *, struct ethtool_ts_info *))0, .get_module_info = (int (*)(struct net_device *, struct ethtool_modinfo *))0, .get_module_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .set_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .get_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void *))0, .set_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void const *))0};

#line 1854  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
struct ethtool_ops const qlcnic_sriov_vf_ethtool_ops = {.get_settings = & qlcnic_get_settings, .set_settings = (int (*)(struct net_device *, struct ethtool_cmd *))0, .get_drvinfo = & qlcnic_get_drvinfo, .get_regs_len = & qlcnic_get_regs_len, .get_regs = & qlcnic_get_regs, .get_wol = & qlcnic_get_wol, .set_wol = (int (*)(struct net_device *, struct ethtool_wolinfo *))0, .get_msglevel = & qlcnic_get_msglevel, .set_msglevel = & qlcnic_set_msglevel, .nway_reset = (int (*)(struct net_device *))0, .get_link = & ethtool_op_get_link, .get_eeprom_len = & qlcnic_get_eeprom_len, .get_eeprom = & qlcnic_get_eeprom, .set_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_coalesce = & qlcnic_get_intr_coalesce, .set_coalesce = & qlcnic_set_intr_coalesce, .get_ringparam = & qlcnic_get_ringparam, .set_ringparam = & qlcnic_set_ringparam, .get_pauseparam = & qlcnic_get_pauseparam, .set_pauseparam = (int (*)(struct net_device *, struct ethtool_pauseparam *))0, .self_test = (void (*)(struct net_device *, struct ethtool_test *, u64 *))0, .get_strings = & qlcnic_get_strings, .set_phys_id = (int (*)(struct net_device *, enum ethtool_phys_id_state ))0, .get_ethtool_stats = & qlcnic_get_ethtool_stats, .begin = (int (*)(struct net_device *))0, .complete = (void (*)(struct net_device *))0, .get_priv_flags = (u32 (*)(struct net_device *))0, .set_priv_flags = (int (*)(struct net_device *, u32 ))0, .get_sset_count = & qlcnic_get_sset_count, .get_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *, u32 *))0, .set_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *))0, .flash_device = (int (*)(struct net_device *, struct ethtool_flash *))0, .reset = (int (*)(struct net_device *, u32 *))0, .get_rxfh_key_size = (u32 (*)(struct net_device *))0, .get_rxfh_indir_size = (u32 (*)(struct net_device *))0, .get_rxfh = (int (*)(struct net_device *, u32 *, u8 *, u8 *))0, .set_rxfh = (int (*)(struct net_device *, u32 const *, u8 const *, u8 const ))0, .get_channels = & qlcnic_get_channels, .set_channels = (int (*)(struct net_device *, struct ethtool_channels *))0, .get_dump_flag = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_dump_data = (int (*)(struct net_device *, struct ethtool_dump *, void *))0, .set_dump = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_ts_info = (int (*)(struct net_device *, struct ethtool_ts_info *))0, .get_module_info = (int (*)(struct net_device *, struct ethtool_modinfo *))0, .get_module_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .set_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .get_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void *))0, .set_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void const *))0};

#line 1876  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ethtool.c"
struct ethtool_ops const qlcnic_ethtool_failed_ops = {.get_settings = & qlcnic_get_settings, .set_settings = (int (*)(struct net_device *, struct ethtool_cmd *))0, .get_drvinfo = & qlcnic_get_drvinfo, .get_regs_len = (int (*)(struct net_device *))0, .get_regs = (void (*)(struct net_device *, struct ethtool_regs *, void *))0, .get_wol = (void (*)(struct net_device *, struct ethtool_wolinfo *))0, .set_wol = (int (*)(struct net_device *, struct ethtool_wolinfo *))0, .get_msglevel = & qlcnic_get_msglevel, .set_msglevel = & qlcnic_set_msglevel, .nway_reset = (int (*)(struct net_device *))0, .get_link = (u32 (*)(struct net_device *))0, .get_eeprom_len = (int (*)(struct net_device *))0, .get_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .set_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_coalesce = (int (*)(struct net_device *, struct ethtool_coalesce *))0, .set_coalesce = (int (*)(struct net_device *, struct ethtool_coalesce *))0, .get_ringparam = (void (*)(struct net_device *, struct ethtool_ringparam *))0, .set_ringparam = (int (*)(struct net_device *, struct ethtool_ringparam *))0, .get_pauseparam = (void (*)(struct net_device *, struct ethtool_pauseparam *))0, .set_pauseparam = (int (*)(struct net_device *, struct ethtool_pauseparam *))0, .self_test = (void (*)(struct net_device *, struct ethtool_test *, u64 *))0, .get_strings = (void (*)(struct net_device *, u32 , u8 *))0, .set_phys_id = (int (*)(struct net_device *, enum ethtool_phys_id_state ))0, .get_ethtool_stats = (void (*)(struct net_device *, struct ethtool_stats *, u64 *))0, .begin = (int (*)(struct net_device *))0, .complete = (void (*)(struct net_device *))0, .get_priv_flags = (u32 (*)(struct net_device *))0, .set_priv_flags = (int (*)(struct net_device *, u32 ))0, .get_sset_count = (int (*)(struct net_device *, int ))0, .get_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *, u32 *))0, .set_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *))0, .flash_device = (int (*)(struct net_device *, struct ethtool_flash *))0, .reset = (int (*)(struct net_device *, u32 *))0, .get_rxfh_key_size = (u32 (*)(struct net_device *))0, .get_rxfh_indir_size = (u32 (*)(struct net_device *))0, .get_rxfh = (int (*)(struct net_device *, u32 *, u8 *, u8 *))0, .set_rxfh = (int (*)(struct net_device *, u32 const *, u8 const *, u8 const ))0, .get_channels = (void (*)(struct net_device *, struct ethtool_channels *))0, .set_channels = (int (*)(struct net_device *, struct ethtool_channels *))0, .get_dump_flag = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_dump_data = (int (*)(struct net_device *, struct ethtool_dump *, void *))0, .set_dump = & qlcnic_set_dump, .get_ts_info = (int (*)(struct net_device *, struct ethtool_ts_info *))0, .get_module_info = (int (*)(struct net_device *, struct ethtool_modinfo *))0, .get_module_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .set_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .get_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void *))0, .set_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void const *))0};

#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
unsigned int (*ldv_emg_alias_ethtool_op_get_link_19)(struct net_device *) = & ethtool_op_get_link;

#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
void ldv_emg_wrapper_qlcnic_get_channels_24(struct net_device *arg0, struct ethtool_channels *arg1)
{
  
#line 75 
  qlcnic_get_channels(arg0,arg1);
  
#line 76 
  return;
}


#line 79  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
void ldv_emg_wrapper_qlcnic_get_drvinfo_6(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  
#line 80 
  qlcnic_get_drvinfo(arg0,arg1);
  
#line 81 
  return;
}


#line 84  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
unsigned int ldv_emg_wrapper_qlcnic_get_msglevel_8(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 85 
  tmp = qlcnic_get_msglevel(arg0);
  
#line 85 
  return tmp;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
int ldv_emg_wrapper_qlcnic_set_wol_14(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  int tmp;
  
#line 90 
  tmp = qlcnic_set_wol(arg0,arg1);
  
#line 90 
  return tmp;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
void ldv_emg_wrapper_qlcnic_diag_test_11(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  
#line 95 
  qlcnic_diag_test(arg0,arg1,arg2);
  
#line 96 
  return;
}


#line 99  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
void ldv_emg_wrapper_qlcnic_get_pauseparam_18(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  
#line 100 
  qlcnic_get_pauseparam(arg0,arg1);
  
#line 101 
  return;
}


#line 104  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
int ldv_emg_wrapper_qlcnic_get_intr_coalesce_34(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 105 
  tmp = qlcnic_get_intr_coalesce(arg0,arg1);
  
#line 105 
  return tmp;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
int ldv_emg_wrapper_qlcnic_get_eeprom_len_26(struct net_device *arg0)
{
  int tmp;
  
#line 110 
  tmp = qlcnic_get_eeprom_len(arg0);
  
#line 110 
  return tmp;
}


#line 114  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
int ldv_emg_wrapper_qlcnic_get_dump_data_15(struct net_device *arg0, struct ethtool_dump *arg1, void *arg2)
{
  int tmp;
  
#line 115 
  tmp = qlcnic_get_dump_data(arg0,arg1,arg2);
  
#line 115 
  return tmp;
}


#line 119  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
void ldv_emg_wrapper_qlcnic_get_ethtool_stats_5(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  
#line 120 
  qlcnic_get_ethtool_stats(arg0,arg1,arg2);
  
#line 121 
  return;
}


#line 124  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
int ldv_emg_wrapper_qlcnic_get_dump_flag_37(struct net_device *arg0, struct ethtool_dump *arg1)
{
  int tmp;
  
#line 125 
  tmp = qlcnic_get_dump_flag(arg0,arg1);
  
#line 125 
  return tmp;
}


#line 129  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
int ldv_emg_wrapper_qlcnic_get_settings_28(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 130 
  tmp = qlcnic_get_settings(arg0,arg1);
  
#line 130 
  return tmp;
}


#line 134  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
void ldv_emg_wrapper_qlcnic_get_wol_32(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  
#line 135 
  qlcnic_get_wol(arg0,arg1);
  
#line 136 
  return;
}


#line 139  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
void ldv_emg_wrapper_qlcnic_set_msglevel_39(struct net_device *arg0, unsigned int arg1)
{
  
#line 140 
  qlcnic_set_msglevel(arg0,arg1);
  
#line 141 
  return;
}


#line 144  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
void ldv_emg_wrapper_qlcnic_get_strings_20(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  
#line 145 
  qlcnic_get_strings(arg0,arg1,arg2);
  
#line 146 
  return;
}


#line 149  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
int ldv_emg_wrapper_qlcnic_set_dump_4(struct net_device *arg0, struct ethtool_dump *arg1)
{
  int tmp;
  
#line 150 
  tmp = qlcnic_set_dump(arg0,arg1);
  
#line 150 
  return tmp;
}


#line 154  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
int ldv_emg_wrapper_qlcnic_set_led_3(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  int tmp;
  
#line 155 
  tmp = qlcnic_set_led(arg0,arg1);
  
#line 155 
  return tmp;
}


#line 159  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
void ldv_emg_wrapper_qlcnic_get_regs_36(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  
#line 160 
  qlcnic_get_regs(arg0,arg1,arg2);
  
#line 161 
  return;
}


#line 164  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
int ldv_emg_wrapper_qlcnic_set_settings_2(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 165 
  tmp = qlcnic_set_settings(arg0,arg1);
  
#line 165 
  return tmp;
}


#line 169  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
int ldv_emg_wrapper_qlcnic_get_eeprom_30(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  int tmp;
  
#line 170 
  tmp = qlcnic_get_eeprom(arg0,arg1,arg2);
  
#line 170 
  return tmp;
}


#line 174  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
void ldv_emg_wrapper_qlcnic_get_ringparam_22(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  
#line 175 
  qlcnic_get_ringparam(arg0,arg1);
  
#line 176 
  return;
}


#line 179  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
int ldv_emg_wrapper_qlcnic_get_regs_len_40(struct net_device *arg0)
{
  int tmp;
  
#line 180 
  tmp = qlcnic_get_regs_len(arg0);
  
#line 180 
  return tmp;
}


#line 184  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
int ldv_emg_wrapper_qlcnic_set_intr_coalesce_41(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 185 
  tmp = qlcnic_set_intr_coalesce(arg0,arg1);
  
#line 185 
  return tmp;
}


#line 189  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
int ldv_emg_wrapper_qlcnic_set_pauseparam_29(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  int tmp;
  
#line 190 
  tmp = qlcnic_set_pauseparam(arg0,arg1);
  
#line 190 
  return tmp;
}


#line 194  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
int ldv_emg_wrapper_qlcnic_set_channels_25(struct net_device *arg0, struct ethtool_channels *arg1)
{
  int tmp;
  
#line 195 
  tmp = qlcnic_set_channels(arg0,arg1);
  
#line 195 
  return tmp;
}


#line 199  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
int ldv_emg_wrapper_qlcnic_get_sset_count_21(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 200 
  tmp = qlcnic_get_sset_count(arg0,arg1);
  
#line 200 
  return tmp;
}


#line 204  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ethtool.c.aux"
int ldv_emg_wrapper_qlcnic_set_ringparam_7(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  int tmp;
  
#line 205 
  tmp = qlcnic_set_ringparam(arg0,arg1);
  
#line 205 
  return tmp;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
char *strncpy(char *, char const *, __kernel_size_t);


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_6(size_t size, gfp_t flags);


#line 5  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/delay.h"
void __bad_udelay(void);


#line 8 
void __udelay(unsigned long);


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/firmware.h"
int request_firmware(struct firmware const **, char const *, struct device *);


#line 51 
void release_firmware(struct firmware const *);


#line 2276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_check_diag_status(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 2278 
  tmp = constant_test_bit(13L,(unsigned long const volatile *)(& adapter->state));
  
#line 2278 
  return tmp;
}


#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov.h"
int qlcnic_sriov_vf_init(struct qlcnic_adapter *adapter, int pci_using_dac);


#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_init_default_driver(struct qlcnic_adapter *adapter);


#line 40 
static int qlcnic_83xx_check_heartbeat(struct qlcnic_adapter *p_dev);


#line 41 
static int qlcnic_83xx_restart_hw(struct qlcnic_adapter *adapter);


#line 42 
static int qlcnic_83xx_check_hw_status(struct qlcnic_adapter *p_dev);


#line 43 
static int qlcnic_83xx_get_reset_instruction_template(struct qlcnic_adapter *p_dev);


#line 44 
static void qlcnic_83xx_stop_hw(struct qlcnic_adapter *p_dev);


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static char const * const qlc_83xx_idc_states[8U] = {"Unknown", "Cold", "Init", "Ready", "Need Reset", "Need Quiesce", "Failed", "Quiesce"};

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_check_driver_presence_reg(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 val;
  
#line 137 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 13U)));
  
#line 138 
  if ((val & 65535U) != 0U) {
    
#line 139 
    __retres = 1;
    
#line 139 
    goto return_label;
  }
  else {
    
#line 141 
    __retres = 0;
    
#line 141 
    goto return_label;
  }
  return_label: 
#line 138 
                return __retres;
}


#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_idc_log_state_history(struct qlcnic_adapter *adapter)
{
  u32 cur;
  u32 prev;
  
#line 147 
  cur = (unsigned int)(adapter->ahw)->idc.curr_state;
  
#line 148 
  prev = (unsigned int)(adapter->ahw)->idc.prev_state;
  
#line 150 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"current state  = %s,  prev state = %s\n",*((adapter->ahw)->idc.name + cur),*((adapter->ahw)->idc.name + prev));
  
#line 151 
  return;
}


#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_update_audit_reg(struct qlcnic_adapter *adapter, u8 mode, int lock)
{
  int __retres;
  u32 val;
  int seconds;
  
#line 162 
  if (lock != 0) {
    int tmp;
    
#line 163 
    tmp = qlcnic_83xx_lock_driver(adapter);
    
#line 163 
    if (tmp != 0) {
      
#line 164 
      __retres = -16;
      
#line 164 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 167 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 16U)));
  
#line 168 
  val = ((unsigned int)adapter->portnum & 15U) | val;
  
#line 169 
  val = (unsigned int)((int)mode << 7) | val;
  
#line 170 
  if ((unsigned int)mode != 0U) 
#line 171 
                                seconds = (int)((u64)(jiffies / 250UL) - (adapter->ahw)->idc.sec_counter); else 
                                                                    
#line 173 
                                                                    seconds = (int)(jiffies / 250UL);
  
#line 175 
  val = (unsigned int)(seconds << 8) | val;
  
#line 176 
  writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 16U)));
  
#line 177 
  (adapter->ahw)->idc.sec_counter = (unsigned long long)(jiffies / 250UL);
  
#line 179 
  if (lock != 0) 
#line 180 
                 qlcnic_83xx_unlock_driver(adapter); else ;
  
#line 182 
  __retres = 0;
  return_label: 
#line 182 
                return __retres;
}


#line 185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_idc_update_minor_version(struct qlcnic_adapter *adapter)
{
  u32 val;
  
#line 189 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 17U)));
  
#line 190 
  val = (unsigned int)(~ (3 << (int)adapter->portnum * 2)) & val;
  
#line 191 
  val = val;
  
#line 192 
  writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 17U)));
  
#line 193 
  return;
}


#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_update_major_version(struct qlcnic_adapter *adapter, int lock)
{
  int __retres;
  u32 val;
  
#line 200 
  if (lock != 0) {
    int tmp;
    
#line 201 
    tmp = qlcnic_83xx_lock_driver(adapter);
    
#line 201 
    if (tmp != 0) {
      
#line 202 
      __retres = -16;
      
#line 202 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 205 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 11U)));
  
#line 206 
  val &= 4294967040U;
  
#line 207 
  val |= 1U;
  
#line 208 
  writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 11U)));
  
#line 210 
  if (lock != 0) 
#line 211 
                 qlcnic_83xx_unlock_driver(adapter); else ;
  
#line 213 
  __retres = 0;
  return_label: 
#line 213 
                return __retres;
}


#line 217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_update_drv_presence_reg(struct qlcnic_adapter *adapter, int status, int lock)
{
  int __retres;
  u32 val;
  
#line 222 
  if (lock != 0) {
    int tmp;
    
#line 223 
    tmp = qlcnic_83xx_lock_driver(adapter);
    
#line 223 
    if (tmp != 0) {
      
#line 224 
      __retres = -16;
      
#line 224 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 227 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 13U)));
  
#line 229 
  if (status != 0) 
#line 230 
                   val = (unsigned int)(1 << (int)adapter->portnum) | val; else 
                                                                    
#line 232 
                                                                    val = (unsigned int)(~ (1 << (int)adapter->portnum)) & val;
  
#line 234 
  writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 13U)));
  
#line 235 
  qlcnic_83xx_idc_update_minor_version(adapter);
  
#line 237 
  if (lock != 0) 
#line 238 
                 qlcnic_83xx_unlock_driver(adapter); else ;
  
#line 240 
  __retres = 0;
  return_label: 
#line 240 
                return __retres;
}


#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_check_major_version(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 val;
  u8 version;
  
#line 248 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 11U)));
  
#line 249 
  version = (unsigned char)val;
  
#line 251 
  if ((unsigned int)version != 1U) {
    
#line 252 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s:mismatch. version 0x%x, expected version 0x%x\n","qlcnic_83xx_idc_check_major_version",(int)version,1);
    
#line 255 
    __retres = -5;
    
#line 255 
    goto return_label;
  }
  else ;
  
#line 258 
  __retres = 0;
  return_label: 
#line 258 
                return __retres;
}


#line 261  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_clear_registers(struct qlcnic_adapter *adapter, int lock)
{
  int __retres;
  u32 val;
  
#line 266 
  if (lock != 0) {
    int tmp;
    
#line 267 
    tmp = qlcnic_83xx_lock_driver(adapter);
    
#line 267 
    if (tmp != 0) {
      
#line 268 
      __retres = -16;
      
#line 268 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 271 
  writel(0U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 14U)));
  
#line 273 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
  
#line 274 
  val &= 4294967293U;
  
#line 275 
  writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
  
#line 277 
  if (lock != 0) 
#line 278 
                 qlcnic_83xx_unlock_driver(adapter); else ;
  
#line 280 
  __retres = 0;
  return_label: 
#line 280 
                return __retres;
}


#line 283  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_update_drv_ack_reg(struct qlcnic_adapter *adapter, int flag, int lock)
{
  int __retres;
  u32 val;
  
#line 288 
  if (lock != 0) {
    int tmp;
    
#line 289 
    tmp = qlcnic_83xx_lock_driver(adapter);
    
#line 289 
    if (tmp != 0) {
      
#line 290 
      __retres = -16;
      
#line 290 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 293 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 14U)));
  
#line 294 
  if (flag != 0) 
#line 295 
                 val = (unsigned int)(1 << (int)adapter->portnum) | val; else 
                                                                    
#line 297 
                                                                    val = (unsigned int)(~ (1 << (int)adapter->portnum)) & val;
  
#line 298 
  writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 14U)));
  
#line 300 
  if (lock != 0) 
#line 301 
                 qlcnic_83xx_unlock_driver(adapter); else ;
  
#line 303 
  __retres = 0;
  return_label: 
#line 303 
                return __retres;
}


#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_check_timeout(struct qlcnic_adapter *adapter, int time_limit)
{
  int __retres;
  u64 seconds;
  
#line 311 
  seconds = (unsigned long long)(jiffies / 250UL) - (adapter->ahw)->idc.sec_counter;
  
#line 312 
  if ((unsigned long long)time_limit >= seconds) {
    
#line 313 
    __retres = 0;
    
#line 313 
    goto return_label;
  }
  else {
    
#line 315 
    __retres = -16;
    
#line 315 
    goto return_label;
  }
  return_label: 
#line 312 
                return __retres;
}


#line 327  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_check_reset_ack_reg(struct qlcnic_adapter *adapter)
{
  int __retres;
  int timeout;
  u32 ack;
  u32 presence;
  u32 val;
  
#line 332 
  timeout = 10;
  
#line 333 
  ack = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 14U)));
  
#line 334 
  presence = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 13U)));
  
#line 335 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: ack = 0x%x, presence = 0x%x\n","qlcnic_83xx_idc_check_reset_ack_reg",ack,presence);
  
#line 337 
  if ((ack & presence) != presence) {
    int tmp_0;
    
#line 338 
    tmp_0 = qlcnic_83xx_idc_check_timeout(adapter,timeout);
    
#line 338 
    if (tmp_0 != 0) {
      int tmp;
      
#line 340 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: ACK wait exceeds time limit\n","qlcnic_83xx_idc_check_reset_ack_reg");
      
#line 342 
      val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 13U)));
      
#line 343 
      val = ~ (ack ^ presence) & val;
      
#line 344 
      tmp = qlcnic_83xx_lock_driver(adapter);
      
#line 344 
      if (tmp != 0) {
        
#line 345 
        __retres = -16;
        
#line 345 
        goto return_label;
      }
      else ;
      
#line 346 
      writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 13U)));
      
#line 347 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: updated drv presence reg = 0x%x\n","qlcnic_83xx_idc_check_reset_ack_reg",val);
      
#line 350 
      qlcnic_83xx_unlock_driver(adapter);
      
#line 351 
      __retres = 0;
      
#line 351 
      goto return_label;
    }
    else {
      
#line 354 
      __retres = 1;
      
#line 354 
      goto return_label;
    }
  }
  else {
    
#line 357 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: Reset ACK received from all functions\n","qlcnic_83xx_idc_check_reset_ack_reg");
    
#line 360 
    __retres = 0;
    
#line 360 
    goto return_label;
  }
  return_label: 
#line 337 
                return __retres;
}


#line 374  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_tx_soft_reset(struct qlcnic_adapter *adapter)
{
  int __retres;
  int tmp;
  
#line 376 
  struct net_device *netdev = adapter->netdev;
  
#line 378 
  tmp = test_and_set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 378 
  if (tmp != 0) {
    
#line 379 
    __retres = -16;
    
#line 379 
    goto return_label;
  }
  else ;
  
#line 381 
  netif_device_detach(netdev);
  
#line 382 
  qlcnic_down(adapter,netdev);
  
#line 383 
  qlcnic_up(adapter,netdev);
  
#line 384 
  netif_device_attach(netdev);
  
#line 385 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 386 
  netdev_info((struct net_device const *)adapter->netdev,"%s: soft reset complete.\n","qlcnic_83xx_idc_tx_soft_reset");
  
#line 388 
  __retres = 0;
  return_label: 
#line 388 
                return __retres;
}


#line 399  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_idc_detach_driver(struct qlcnic_adapter *adapter)
{
  int i;
  bool tmp;
  
#line 402 
  struct net_device *netdev = adapter->netdev;
  
#line 404 
  netif_device_detach(netdev);
  
#line 405 
  qlcnic_83xx_detach_mailbox_work(adapter);
  
#line 408 
  qlcnic_83xx_disable_mbx_intr(adapter);
  
#line 409 
  qlcnic_down(adapter,netdev);
  
#line 410 
  i = 0;
  
#line 410 
  goto ldv_54098;
  ldv_54097: 
#line 411 
  ;
  
#line 411 
  ((adapter->ahw)->intr_tbl + i)->id = (unsigned short)i;
  
#line 412 
  ((adapter->ahw)->intr_tbl + i)->enabled = (unsigned char)0U;
  
#line 413 
  ((adapter->ahw)->intr_tbl + i)->src = 0U;
  
#line 410 
  i += 1;
  ldv_54098: 
#line 411 
  ;
  
#line 410 
  if ((int)(adapter->ahw)->num_msix > i) 
#line 412 
                                         goto ldv_54097; else 
#line 415 
                                                              goto ldv_54099;
  ldv_54099: 
#line 416 
  ;
  
#line 416 
  tmp = qlcnic_sriov_pf_check(adapter);
  
#line 416 
  if ((int)tmp != 0) 
#line 417 
                     qlcnic_sriov_pf_reset(adapter); else ;
  
#line 418 
  return;
}


#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_idc_attach_driver(struct qlcnic_adapter *adapter)
{
  bool tmp_0;
  
#line 431 
  struct net_device *netdev = adapter->netdev;
  
#line 433 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 433 
  if ((int)tmp_0 != 0) {
    int tmp;
    
#line 434 
    tmp = qlcnic_up(adapter,netdev);
    
#line 434 
    if (tmp != 0) 
#line 435 
                  goto done; else ;
    
#line 436 
    qlcnic_restore_indev_addr(netdev,1UL);
  }
  else ;
  done: 
#line 438 
  ;
  
#line 439 
  netif_device_attach(netdev);
  
#line 440 
  return;
}


#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_enter_failed_state(struct qlcnic_adapter *adapter, int lock)
{
  int __retres;
  
#line 445 
  if (lock != 0) {
    int tmp;
    
#line 446 
    tmp = qlcnic_83xx_lock_driver(adapter);
    
#line 446 
    if (tmp != 0) {
      
#line 447 
      __retres = -16;
      
#line 447 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 450 
  qlcnic_83xx_idc_clear_registers(adapter,0);
  
#line 451 
  writel(6U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 12U)));
  
#line 452 
  if (lock != 0) 
#line 453 
                 qlcnic_83xx_unlock_driver(adapter); else ;
  
#line 455 
  qlcnic_83xx_idc_log_state_history(adapter);
  
#line 456 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Device will enter failed state\n");
  
#line 458 
  __retres = 0;
  return_label: 
#line 458 
                return __retres;
}


#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_enter_init_state(struct qlcnic_adapter *adapter, int lock)
{
  int __retres;
  
#line 464 
  if (lock != 0) {
    int tmp;
    
#line 465 
    tmp = qlcnic_83xx_lock_driver(adapter);
    
#line 465 
    if (tmp != 0) {
      
#line 466 
      __retres = -16;
      
#line 466 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 469 
  writel(2U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 12U)));
  
#line 471 
  if (lock != 0) 
#line 472 
                 qlcnic_83xx_unlock_driver(adapter); else ;
  
#line 474 
  __retres = 0;
  return_label: 
#line 474 
                return __retres;
}


#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_enter_need_quiesce(struct qlcnic_adapter *adapter, int lock)
{
  int __retres;
  
#line 480 
  if (lock != 0) {
    int tmp;
    
#line 481 
    tmp = qlcnic_83xx_lock_driver(adapter);
    
#line 481 
    if (tmp != 0) {
      
#line 482 
      __retres = -16;
      
#line 482 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 485 
  writel(5U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 12U)));
  
#line 488 
  if (lock != 0) 
#line 489 
                 qlcnic_83xx_unlock_driver(adapter); else ;
  
#line 491 
  __retres = 0;
  return_label: 
#line 491 
                return __retres;
}


#line 495  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_enter_need_reset_state(struct qlcnic_adapter *adapter, int lock)
{
  int __retres;
  
#line 497 
  if (lock != 0) {
    int tmp;
    
#line 498 
    tmp = qlcnic_83xx_lock_driver(adapter);
    
#line 498 
    if (tmp != 0) {
      
#line 499 
      __retres = -16;
      
#line 499 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 502 
  writel(4U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 12U)));
  
#line 505 
  if (lock != 0) 
#line 506 
                 qlcnic_83xx_unlock_driver(adapter); else ;
  
#line 508 
  __retres = 0;
  return_label: 
#line 508 
                return __retres;
}


#line 511  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_enter_ready_state(struct qlcnic_adapter *adapter, int lock)
{
  int __retres;
  
#line 514 
  if (lock != 0) {
    int tmp;
    
#line 515 
    tmp = qlcnic_83xx_lock_driver(adapter);
    
#line 515 
    if (tmp != 0) {
      
#line 516 
      __retres = -16;
      
#line 516 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 519 
  writel(3U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 12U)));
  
#line 520 
  if (lock != 0) 
#line 521 
                 qlcnic_83xx_unlock_driver(adapter); else ;
  
#line 523 
  __retres = 0;
  return_label: 
#line 523 
                return __retres;
}


#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_find_reset_owner_id(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 reg;
  u32 reg1;
  u32 reg2;
  u32 i;
  u32 j;
  u32 owner;
  u32 class;
  u32 tmp;
  
#line 541 
  reg1 = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 35U)));
  
#line 542 
  reg2 = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 36U)));
  
#line 543 
  owner = 1U;
  
#line 544 
  i = 0U;
  
#line 545 
  j = 0U;
  
#line 546 
  reg = reg1;
  ldv_54136: 
#line 547 
  ;
  
#line 549 
  class = (((unsigned int)(15 << j * 4U) & reg) >> j * 4U) & 3U;
  
#line 550 
  if (class == owner) 
#line 551 
                      goto ldv_54135; else ;
  
#line 552 
  if (i == 7U) {
    
#line 553 
    reg = reg2;
    
#line 554 
    j = 0U;
  }
  else 
#line 556 
       j += 1U;
  
#line 559 
  if (i == 15U) {
    
#line 560 
    if (owner == 1U) 
#line 561 
                     owner = 3U;
    else 
      
#line 562 
      if (owner == 3U) 
#line 563 
                       owner = 2U;
      else 
        
#line 564 
        if (owner == 2U) {
          
#line 565 
          __retres = -5;
          
#line 565 
          goto return_label;
        }
        else ;
    
#line 566 
    reg = reg1;
    
#line 567 
    j = 0U;
    
#line 568 
    i = 0U;
  }
  else ;
  
#line 570 
  tmp = i;
  
#line 570 
  i += 1U;
  
#line 570 
  ;
  
#line 570 
  if (tmp <= 15U) 
#line 572 
                  goto ldv_54136; else 
#line 575 
                                       goto ldv_54135;
  ldv_54135: 
#line 576 
  ;
  
#line 572 
  __retres = (int)i;
  return_label: 
#line 572 
                return __retres;
}


#line 575  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_restart_hw(struct qlcnic_adapter *adapter, int lock)
{
  
#line 577 
  int ret = 0;
  
#line 579 
  ret = qlcnic_83xx_restart_hw(adapter);
  
#line 581 
  if (ret != 0) 
#line 582 
                qlcnic_83xx_idc_enter_failed_state(adapter,lock);
  else {
    
#line 584 
    qlcnic_83xx_idc_clear_registers(adapter,lock);
    
#line 585 
    ret = qlcnic_83xx_idc_enter_ready_state(adapter,lock);
  }
  
#line 588 
  return ret;
}


#line 591  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_check_fan_failure(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 status;
  
#line 595 
  status = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl)));
  
#line 597 
  if (status < (u32)0) {
    
#line 598 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"peg halt status1=0x%x\n",status);
    
#line 600 
    if (((status >> 8) & 2097151U) == 22U) {
      
#line 601 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"On board active cooling fan failed. ");
      
#line 604 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"Replace the adapter.\n");
      
#line 606 
      __retres = -5;
      
#line 606 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 610 
  __retres = 0;
  return_label: 
#line 610 
                return __retres;
}


#line 613  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_idc_reattach_driver(struct qlcnic_adapter *adapter)
{
  int __retres;
  int err;
  int tmp;
  int tmp_0;
  
#line 617 
  qlcnic_83xx_reinit_mbx_work((adapter->ahw)->mailbox);
  
#line 618 
  qlcnic_83xx_enable_mbx_interrupt(adapter);
  
#line 620 
  qlcnic_83xx_initialize_nic(adapter,1);
  
#line 622 
  err = qlcnic_sriov_pf_reinit(adapter);
  
#line 623 
  if (err != 0) {
    
#line 624 
    __retres = err;
    
#line 624 
    goto return_label;
  }
  else ;
  
#line 626 
  qlcnic_83xx_enable_mbx_interrupt(adapter);
  
#line 628 
  tmp = qlcnic_83xx_configure_opmode(adapter);
  
#line 628 
  if (tmp != 0) {
    
#line 629 
    qlcnic_83xx_idc_enter_failed_state(adapter,1);
    
#line 630 
    __retres = -5;
    
#line 630 
    goto return_label;
  }
  else ;
  
#line 633 
  tmp_0 = (*((adapter->nic_ops)->init_driver))(adapter);
  
#line 633 
  if (tmp_0 != 0) {
    
#line 634 
    qlcnic_83xx_idc_enter_failed_state(adapter,1);
    
#line 635 
    __retres = -5;
    
#line 635 
    goto return_label;
  }
  else ;
  
#line 638 
  if ((unsigned int)adapter->portnum == 0U) 
#line 639 
                                            qlcnic_set_drv_version(adapter); else ;
  
#line 641 
  qlcnic_dcb_get_info(adapter->dcb);
  
#line 642 
  qlcnic_83xx_idc_attach_driver(adapter);
  
#line 644 
  __retres = 0;
  return_label: 
#line 644 
                return __retres;
}


#line 647  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_idc_update_idc_params(struct qlcnic_adapter *adapter)
{
  
#line 649 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 651 
  qlcnic_83xx_idc_update_drv_presence_reg(adapter,1,1);
  
#line 652 
  qlcnic_83xx_idc_update_audit_reg(adapter,(unsigned char)0,1);
  
#line 653 
  set_bit(1L,(unsigned long volatile *)(& (adapter->ahw)->idc.status));
  
#line 655 
  ahw->idc.quiesce_req = (unsigned char)0U;
  
#line 656 
  ahw->idc.delay = 250ULL;
  
#line 657 
  ahw->idc.err_code = 0;
  
#line 658 
  ahw->idc.collect_dump = 0;
  
#line 659 
  ahw->reset_context = (unsigned char)0U;
  
#line 660 
  adapter->tx_timeo_cnt = (unsigned char)0U;
  
#line 661 
  ahw->idc.delay_reset = (unsigned char)0U;
  
#line 663 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 664 
  return;
}


#line 677  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_idc_ready_state_entry(struct qlcnic_adapter *adapter)
{
  int __retres;
  
#line 679 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 681 
  if ((unsigned int)ahw->idc.prev_state != 3U) {
    
#line 682 
    qlcnic_83xx_idc_update_idc_params(adapter);
    
#line 684 
    if ((unsigned int)ahw->idc.prev_state == 4U || (unsigned int)ahw->idc.prev_state == 2U) {
      int tmp;
      
#line 686 
      tmp = qlcnic_83xx_idc_reattach_driver(adapter);
      
#line 686 
      if (tmp != 0) {
        
#line 687 
        __retres = -5;
        
#line 687 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 691 
  __retres = 0;
  return_label: 
#line 691 
                return __retres;
}


#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_idc_vnic_pf_entry(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 state;
  
#line 709 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 712 
  state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 38U)));
  
#line 713 
  if (state != 1U) {
    u8 tmp;
    
#line 714 
    tmp = ahw->idc.vnic_wait_limit;
    
#line 714 
    ahw->idc.vnic_wait_limit = (u8)((int)ahw->idc.vnic_wait_limit - 1);
    
#line 714 
    ;
    
#line 714 
    if ((unsigned int)tmp == 0U) {
      
#line 715 
      qlcnic_83xx_idc_enter_failed_state(adapter,1);
      
#line 716 
      __retres = -5;
      
#line 716 
      goto return_label;
    }
    else ;
    
#line 718 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"vNIC mode disabled\n");
    
#line 719 
    __retres = -5;
    
#line 719 
    goto return_label;
  }
  else 
    
#line 723 
    if ((unsigned int)ahw->idc.vnic_state != 1U) {
      
#line 724 
      qlcnic_83xx_idc_update_idc_params(adapter);
      
#line 728 
      if ((unsigned int)ahw->idc.prev_state != 0U) {
        int tmp_0;
        
#line 729 
        tmp_0 = qlcnic_83xx_idc_reattach_driver(adapter);
        
#line 729 
        if (tmp_0 != 0) {
          
#line 730 
          __retres = -5;
          
#line 730 
          goto return_label;
        }
        else ;
      }
      else ;
      
#line 732 
      (adapter->ahw)->idc.vnic_state = (unsigned char)1U;
      
#line 733 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"vNIC mode enabled\n");
    }
    else ;
  
#line 737 
  __retres = 0;
  return_label: 
#line 737 
                return __retres;
}


#line 740  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_unknown_state(struct qlcnic_adapter *adapter)
{
  int __retres;
  
#line 742 
  (adapter->ahw)->idc.err_code = -5;
  
#line 743 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Device in unknown state\n","qlcnic_83xx_idc_unknown_state");
  
#line 745 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 746 
  __retres = 0;
  
#line 746 
  return __retres;
}


#line 761  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_cold_state_handler(struct qlcnic_adapter *adapter)
{
  int __retres;
  
#line 763 
  qlcnic_83xx_idc_update_drv_presence_reg(adapter,1,0);
  
#line 764 
  qlcnic_83xx_idc_update_audit_reg(adapter,(unsigned char)1,0);
  
#line 766 
  if (qlcnic_load_fw_file != 0) 
#line 767 
                                qlcnic_83xx_idc_restart_hw(adapter,0);
  else {
    int tmp;
    
#line 769 
    tmp = qlcnic_83xx_check_hw_status(adapter);
    
#line 769 
    if (tmp != 0) {
      
#line 770 
      qlcnic_83xx_idc_enter_failed_state(adapter,0);
      
#line 771 
      __retres = -5;
      
#line 771 
      goto return_label;
    }
    else 
#line 773 
         qlcnic_83xx_idc_enter_ready_state(adapter,0);
  }
  
#line 776 
  __retres = 0;
  return_label: 
#line 776 
                return __retres;
}


#line 791  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_init_state(struct qlcnic_adapter *adapter)
{
  int timeout;
  u32 owner;
  
#line 793 
  int ret = 0;
  
#line 796 
  timeout = 30;
  
#line 797 
  if ((unsigned int)(adapter->ahw)->idc.prev_state == 4U) {
    int tmp;
    
#line 798 
    tmp = qlcnic_83xx_idc_find_reset_owner_id(adapter);
    
#line 798 
    owner = (unsigned int)tmp;
    
#line 799 
    if ((unsigned int)(adapter->ahw)->pci_func == owner) 
#line 800 
                                                         ret = qlcnic_83xx_idc_restart_hw(adapter,1); else ;
  }
  else 
#line 802 
       ret = qlcnic_83xx_idc_check_timeout(adapter,timeout);
  
#line 805 
  return ret;
}


#line 819  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_ready_state(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 val;
  int tmp;
  int tmp_0;
  
#line 821 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 822 
  struct qlcnic_mailbox *mbx = ahw->mailbox;
  
#line 823 
  int ret = 0;
  
#line 827 
  tmp = (*(ahw->idc.state_entry))(adapter);
  
#line 827 
  if (tmp != 0) {
    
#line 828 
    __retres = -5;
    
#line 828 
    goto return_label;
  }
  else ;
  
#line 830 
  tmp_0 = qlcnic_check_temp(adapter);
  
#line 830 
  if (tmp_0 != 0) {
    
#line 831 
    if (ahw->temp == 3U) {
      
#line 832 
      qlcnic_83xx_idc_check_fan_failure(adapter);
      
#line 833 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"Error: device temperature %d above limits\n",(adapter->ahw)->temp);
      
#line 836 
      set_bit(2L,(unsigned long volatile *)(& mbx->status));
      
#line 837 
      set_bit(2L,(unsigned long volatile *)(& adapter->state));
      
#line 838 
      qlcnic_83xx_idc_detach_driver(adapter);
      
#line 839 
      qlcnic_83xx_idc_enter_failed_state(adapter,1);
      
#line 840 
      __retres = -5;
      
#line 840 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 844 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
  
#line 845 
  ret = qlcnic_83xx_check_heartbeat(adapter);
  
#line 846 
  if (ret != 0) {
    
#line 847 
    adapter->flags |= 16384U;
    
#line 848 
    if ((val & 1U) == 0U) {
      
#line 849 
      set_bit(2L,(unsigned long volatile *)(& mbx->status));
      
#line 850 
      set_bit(2L,(unsigned long volatile *)(& adapter->state));
      
#line 851 
      qlcnic_83xx_idc_enter_need_reset_state(adapter,1);
    }
    else {
      
#line 853 
      netdev_info((struct net_device const *)adapter->netdev,"%s: Auto firmware recovery is disabled\n","qlcnic_83xx_idc_ready_state");
      
#line 855 
      qlcnic_83xx_idc_enter_failed_state(adapter,1);
    }
    
#line 857 
    __retres = -5;
    
#line 857 
    goto return_label;
  }
  else ;
  
#line 860 
  if ((val & 2U) != 0U || ahw->idc.collect_dump != 0) {
    
#line 861 
    set_bit(2L,(unsigned long volatile *)(& mbx->status));
    
#line 864 
    qlcnic_83xx_idc_enter_need_reset_state(adapter,1);
    
#line 865 
    __retres = ret;
    
#line 865 
    goto return_label;
  }
  else ;
  
#line 869 
  if ((unsigned int)ahw->reset_context != 0U && (val & 1U) == 0U) {
    
#line 871 
    (adapter->ahw)->reset_context = (unsigned char)0U;
    
#line 872 
    qlcnic_83xx_idc_tx_soft_reset(adapter);
    
#line 873 
    __retres = ret;
    
#line 873 
    goto return_label;
  }
  else ;
  
#line 877 
  if ((unsigned int)(adapter->ahw)->idc.quiesce_req != 0U) {
    
#line 878 
    qlcnic_83xx_idc_enter_need_quiesce(adapter,1);
    
#line 879 
    qlcnic_83xx_idc_update_audit_reg(adapter,(unsigned char)0,1);
    
#line 880 
    __retres = ret;
    
#line 880 
    goto return_label;
  }
  else ;
  
#line 883 
  __retres = ret;
  return_label: 
#line 883 
                return __retres;
}


#line 898  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_need_reset_state(struct qlcnic_adapter *adapter)
{
  int __retres;
  int tmp_0;
  
#line 900 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  
#line 901 
  int ret = 0;
  
#line 903 
  if ((unsigned int)(adapter->ahw)->idc.prev_state != 4U) {
    int tmp;
    
#line 904 
    qlcnic_83xx_idc_update_audit_reg(adapter,(unsigned char)0,1);
    
#line 905 
    set_bit(2L,(unsigned long volatile *)(& adapter->state));
    
#line 906 
    set_bit(2L,(unsigned long volatile *)(& mbx->status));
    
#line 907 
    if ((unsigned int)(adapter->ahw)->nic_mode == 255U) 
#line 908 
                                                        qlcnic_83xx_disable_vnic_mode(adapter,1); else ;
    
#line 910 
    tmp = qlcnic_check_diag_status(adapter);
    
#line 910 
    if (tmp != 0) {
      
#line 911 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: Wait for diag completion\n","qlcnic_83xx_idc_need_reset_state");
      
#line 913 
      (adapter->ahw)->idc.delay_reset = (unsigned char)1U;
      
#line 914 
      __retres = 0;
      
#line 914 
      goto return_label;
    }
    else {
      
#line 916 
      qlcnic_83xx_idc_update_drv_ack_reg(adapter,1,1);
      
#line 917 
      qlcnic_83xx_idc_detach_driver(adapter);
    }
  }
  else ;
  
#line 921 
  tmp_0 = qlcnic_check_diag_status(adapter);
  
#line 921 
  if (tmp_0 != 0) {
    
#line 922 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: Wait for diag completion\n","qlcnic_83xx_idc_need_reset_state");
    
#line 924 
    __retres = -1;
    
#line 924 
    goto return_label;
  }
  else {
    
#line 926 
    if ((unsigned int)(adapter->ahw)->idc.delay_reset != 0U) {
      
#line 927 
      qlcnic_83xx_idc_update_drv_ack_reg(adapter,1,1);
      
#line 928 
      qlcnic_83xx_idc_detach_driver(adapter);
      
#line 929 
      (adapter->ahw)->idc.delay_reset = (unsigned char)0U;
    }
    else ;
    
#line 933 
    ret = qlcnic_83xx_idc_check_reset_ack_reg(adapter);
    
#line 934 
    if (ret != 0) {
      
#line 935 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: Waiting for reset ACK\n","qlcnic_83xx_idc_need_reset_state");
      
#line 937 
      __retres = -1;
      
#line 937 
      goto return_label;
    }
    else ;
  }
  
#line 942 
  qlcnic_83xx_idc_enter_init_state(adapter,1);
  
#line 944 
  __retres = ret;
  return_label: 
#line 944 
                return __retres;
}


#line 947  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_need_quiesce_state(struct qlcnic_adapter *adapter)
{
  int __retres;
  
#line 949 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: TBD\n","qlcnic_83xx_idc_need_quiesce_state");
  
#line 950 
  __retres = 0;
  
#line 950 
  return __retres;
}


#line 953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_idc_failed_state(struct qlcnic_adapter *adapter)
{
  u32 val;
  u32 owner;
  
#line 955 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 958 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
  
#line 959 
  if ((val & 1U) != 0U) {
    int tmp;
    
#line 960 
    tmp = qlcnic_83xx_idc_find_reset_owner_id(adapter);
    
#line 960 
    owner = (unsigned int)tmp;
    
#line 961 
    if ((unsigned int)ahw->pci_func == owner) {
      
#line 962 
      qlcnic_83xx_stop_hw(adapter);
      
#line 963 
      qlcnic_dump_fw(adapter);
    }
    else ;
  }
  else ;
  
#line 967 
  netdev_warn((struct net_device const *)adapter->netdev,"%s: Reboot will be required to recover the adapter!!\n","qlcnic_83xx_idc_failed_state");
  
#line 969 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 970 
  ahw->idc.err_code = -5;
  
#line 972 
  return;
}


#line 975  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_quiesce_state(struct qlcnic_adapter *adapter)
{
  int __retres;
  
#line 977 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: TBD\n","qlcnic_83xx_idc_quiesce_state");
  
#line 978 
  __retres = 0;
  
#line 978 
  return __retres;
}


#line 981  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_check_state_validity(struct qlcnic_adapter *adapter, u32 state)
{
  int __retres;
  u32 cur;
  u32 prev;
  u32 next;
  
#line 986 
  cur = (unsigned int)(adapter->ahw)->idc.curr_state;
  
#line 987 
  prev = (unsigned int)(adapter->ahw)->idc.prev_state;
  
#line 988 
  next = state;
  
#line 990 
  if (next + 4294967295U > 6U) {
    
#line 992 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: curr %d, prev %d, next state %d is  invalid\n","qlcnic_83xx_idc_check_state_validity",cur,prev,state);
    
#line 995 
    __retres = 1;
    
#line 995 
    goto return_label;
  }
  else ;
  
#line 998 
  if (cur == 0U && prev == 0U) {
    
#line 1000 
    if (next != 1U && next != 3U) {
      
#line 1002 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: failed, cur %d prev %d next %d\n","qlcnic_83xx_idc_check_state_validity",cur,prev,next);
      
#line 1005 
      __retres = 1;
      
#line 1005 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1009 
  if (next == 2U) {
    
#line 1010 
    if (prev + 4294967295U > 1U && prev != 4U) {
      
#line 1013 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: failed, cur %d prev %d next %d\n","qlcnic_83xx_idc_check_state_validity",cur,prev,next);
      
#line 1016 
      __retres = 1;
      
#line 1016 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1020 
  __retres = 0;
  return_label: 
#line 1020 
                return __retres;
}


#line 1032  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_set_vxlan_port(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  
#line 1034 
  u16 port = (adapter->ahw)->vxlan_port;
  
#line 1036 
  int ret = 0;
  
#line 1038 
  memset((void *)(& cmd),0,200UL);
  
#line 1040 
  ret = qlcnic_alloc_mbx_args(& cmd,adapter,96U);
  
#line 1042 
  if (ret != 0) {
    
#line 1043 
    __retres = ret;
    
#line 1043 
    goto return_label;
  }
  else ;
  
#line 1045 
  *(cmd.req.arg + 1U) = 536870912U;
  
#line 1046 
  *(cmd.req.arg + 2U) = (unsigned int)(((int)port << 16) | 10);
  
#line 1050 
  ret = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1051 
  if (ret != 0) 
#line 1052 
                netdev_err((struct net_device const *)adapter->netdev,"Failed to set VXLAN port %d in adapter\n",(int)port); else ;
  
#line 1056 
  qlcnic_free_mbx_args(& cmd);
  
#line 1058 
  __retres = ret;
  return_label: 
#line 1058 
                return __retres;
}


#line 1061  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_set_vxlan_parsing(struct qlcnic_adapter *adapter, bool state)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  
#line 1064 
  u16 vxlan_port = (adapter->ahw)->vxlan_port;
  
#line 1066 
  int ret = 0;
  
#line 1068 
  memset((void *)(& cmd),0,200UL);
  
#line 1070 
  ret = qlcnic_alloc_mbx_args(& cmd,adapter,78U);
  
#line 1072 
  if (ret != 0) {
    
#line 1073 
    __retres = ret;
    
#line 1073 
    goto return_label;
  }
  else ;
  
#line 1075 
  *(cmd.req.arg + 1U) = (unsigned int)((int)state != 0);
  
#line 1078 
  ret = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1079 
  if (ret != 0) {
    char *tmp;
    
#line 1080 
    ;
    
#line 1081 
    if ((int)state != 0) 
#line 1081 
                         tmp = (char *)"enable"; else 
#line 1081 
                                                      tmp = (char *)"disable";
    
#line 1080 
    ;
    
#line 1080 
    netdev_err((struct net_device const *)adapter->netdev,"Failed to %s VXLAN parsing for port %d\n",tmp,(int)vxlan_port);
  }
  else {
    char *tmp_0;
    
#line 1084 
    ;
    
#line 1085 
    if ((int)state != 0) 
#line 1085 
                         tmp_0 = (char *)"Enabled"; else 
#line 1085 
                                                         tmp_0 = (char *)"Disabled";
    
#line 1084 
    ;
    
#line 1084 
    netdev_info((struct net_device const *)adapter->netdev,"%s VXLAN parsing for port %d\n",tmp_0,(int)vxlan_port);
  }
  
#line 1088 
  qlcnic_free_mbx_args(& cmd);
  
#line 1090 
  __retres = ret;
  return_label: 
#line 1090 
                return __retres;
}


#line 1094  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_periodic_tasks(struct qlcnic_adapter *adapter)
{
  
#line 1096 
  if ((unsigned int)adapter->fhash.fnum != 0U) 
#line 1097 
                                               qlcnic_prune_lb_filters(adapter); else ;
  
#line 1100 
  if ((adapter->flags & 1048576U) != 0U) {
    int tmp;
    int tmp_0;
    
#line 1101 
    tmp = qlcnic_set_vxlan_port(adapter);
    
#line 1101 
    if (tmp != 0) 
#line 1102 
                  goto return_label; else ;
    
#line 1104 
    tmp_0 = qlcnic_set_vxlan_parsing(adapter,(_Bool)1);
    
#line 1104 
    if (tmp_0 != 0) 
#line 1105 
                    goto return_label; else ;
    
#line 1107 
    adapter->flags &= 4293918719U;
  }
  else 
    
#line 1108 
    if ((adapter->flags & 2097152U) != 0U) {
      int tmp_1;
      
#line 1109 
      tmp_1 = qlcnic_set_vxlan_parsing(adapter,(_Bool)0);
      
#line 1109 
      if (tmp_1 != 0) 
#line 1110 
                      goto return_label; else ;
      
#line 1112 
      (adapter->ahw)->vxlan_port = (unsigned short)0U;
      
#line 1113 
      adapter->flags &= 4292870143U;
    }
    else ;
  return_label: 
#line 1115 
                return;
}


#line 1129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
void qlcnic_83xx_idc_poll_dev_state(struct work_struct *work)
{
  struct qlcnic_adapter *adapter;
  u32 state;
  struct qlcnic_adapter *tmp;
  int tmp_0;
  int tmp_1;
  {
    
#line 1134 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1134 
    tmp = (struct qlcnic_adapter *)__mptr + 18446744073709550712U;
  }
  
#line 1134 
  adapter = tmp;
  
#line 1135 
  state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 12U)));
  
#line 1137 
  tmp_0 = qlcnic_83xx_idc_check_state_validity(adapter,state);
  
#line 1137 
  if (tmp_0 != 0) {
    
#line 1138 
    qlcnic_83xx_idc_log_state_history(adapter);
    
#line 1139 
    (adapter->ahw)->idc.curr_state = (unsigned char)0U;
  }
  else 
#line 1141 
       (adapter->ahw)->idc.curr_state = (unsigned char)state;
  
#line 1144 
  switch ((int)(adapter->ahw)->idc.curr_state) {
    case 3: 
#line 1145 
    ;
    
#line 1146 
    qlcnic_83xx_idc_ready_state(adapter);
    
#line 1147 
    goto ldv_54237;
    case 4: 
#line 1148 
    ;
    
#line 1149 
    qlcnic_83xx_idc_need_reset_state(adapter);
    
#line 1150 
    goto ldv_54237;
    case 5: 
#line 1151 
    ;
    
#line 1152 
    qlcnic_83xx_idc_need_quiesce_state(adapter);
    
#line 1153 
    goto ldv_54237;
    case 6: 
#line 1154 
    ;
    
#line 1155 
    qlcnic_83xx_idc_failed_state(adapter);
    
#line 1156 
    goto return_label;
    case 2: 
#line 1157 
    ;
    
#line 1158 
    qlcnic_83xx_idc_init_state(adapter);
    
#line 1159 
    goto ldv_54237;
    case 7: 
#line 1160 
    ;
    
#line 1161 
    qlcnic_83xx_idc_quiesce_state(adapter);
    
#line 1162 
    goto ldv_54237;
    default: 
#line 1163 
    ;
    
#line 1164 
    qlcnic_83xx_idc_unknown_state(adapter);
    
#line 1165 
    goto return_label;
  }
  ldv_54237: 
#line 1167 
  ;
  
#line 1167 
  (adapter->ahw)->idc.prev_state = (adapter->ahw)->idc.curr_state;
  
#line 1168 
  qlcnic_83xx_periodic_tasks(adapter);
  
#line 1171 
  tmp_1 = constant_test_bit(1L,(unsigned long const volatile *)(& (adapter->ahw)->idc.status));
  
#line 1171 
  if (tmp_1 != 0) 
#line 1172 
                  qlcnic_schedule_work(adapter,& qlcnic_83xx_idc_poll_dev_state,(int)(adapter->ahw)->idc.delay); else ;
  return_label: 
#line 1174 
                return;
}


#line 1176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_setup_idc_parameters(struct qlcnic_adapter *adapter)
{
  u32 idc_params;
  u32 val;
  int tmp;
  
#line 1180 
  tmp = qlcnic_83xx_flash_read32(adapter,4096032U,(u8 *)(& idc_params),1);
  
#line 1180 
  if (tmp != 0) {
    
#line 1182 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s:failed to get IDC params from flash\n","qlcnic_83xx_setup_idc_parameters");
    
#line 1184 
    adapter->dev_init_timeo = (unsigned char)30U;
    
#line 1185 
    adapter->reset_ack_timeo = (unsigned char)10U;
  }
  else {
    
#line 1187 
    adapter->dev_init_timeo = (unsigned char)idc_params;
    
#line 1188 
    adapter->reset_ack_timeo = (unsigned char)(idc_params >> 16);
  }
  
#line 1191 
  (adapter->ahw)->idc.curr_state = (unsigned char)0U;
  
#line 1192 
  (adapter->ahw)->idc.prev_state = (unsigned char)0U;
  
#line 1193 
  (adapter->ahw)->idc.delay = 250ULL;
  
#line 1194 
  (adapter->ahw)->idc.err_code = 0;
  
#line 1195 
  (adapter->ahw)->idc.collect_dump = 0;
  
#line 1196 
  (adapter->ahw)->idc.name = (char **)(& qlc_83xx_idc_states);
  
#line 1198 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 1199 
  set_bit(1L,(unsigned long volatile *)(& (adapter->ahw)->idc.status));
  
#line 1202 
  if (qlcnic_auto_fw_reset == 0) {
    
#line 1204 
    val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
    
#line 1205 
    val |= 1U;
    
#line 1206 
    writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
  }
  else ;
  
#line 1208 
  return;
}


#line 1211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_idc_first_to_load_function_handler(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 state;
  u32 val;
  int tmp;
  int tmp_0;
  int tmp_1;
  
#line 1215 
  tmp = qlcnic_83xx_lock_driver(adapter);
  
#line 1215 
  if (tmp != 0) {
    
#line 1216 
    __retres = -5;
    
#line 1216 
    goto return_label;
  }
  else ;
  
#line 1219 
  writel(0U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 18U)));
  
#line 1220 
  tmp_0 = qlcnic_83xx_idc_update_major_version(adapter,0);
  
#line 1220 
  if (tmp_0 != 0) {
    
#line 1221 
    qlcnic_83xx_unlock_driver(adapter);
    
#line 1222 
    __retres = -5;
    
#line 1222 
    goto return_label;
  }
  else ;
  
#line 1225 
  state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 12U)));
  
#line 1226 
  tmp_1 = qlcnic_83xx_idc_check_state_validity(adapter,state);
  
#line 1226 
  if (tmp_1 != 0) {
    
#line 1227 
    qlcnic_83xx_unlock_driver(adapter);
    
#line 1228 
    __retres = -5;
    
#line 1228 
    goto return_label;
  }
  else ;
  
#line 1231 
  if (state != 1U && qlcnic_load_fw_file != 0) {
    
#line 1232 
    writel(1U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 12U)));
    
#line 1234 
    state = 1U;
  }
  else ;
  
#line 1237 
  (adapter->ahw)->idc.curr_state = (unsigned char)state;
  
#line 1239 
  if (state == 1U) 
#line 1240 
                   qlcnic_83xx_idc_cold_state_handler(adapter); else ;
  
#line 1243 
  if (qlcnic_auto_fw_reset != 0) {
    
#line 1244 
    val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
    
#line 1245 
    val &= 4294967294U;
    
#line 1246 
    writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
  }
  else ;
  
#line 1249 
  qlcnic_83xx_unlock_driver(adapter);
  
#line 1251 
  __retres = 0;
  return_label: 
#line 1251 
                return __retres;
}


#line 1254  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_idc_init(struct qlcnic_adapter *adapter)
{
  int __retres;
  int tmp;
  int tmp_2;
  
#line 1256 
  int ret = -5;
  
#line 1258 
  qlcnic_83xx_setup_idc_parameters(adapter);
  
#line 1260 
  tmp = qlcnic_83xx_get_reset_instruction_template(adapter);
  
#line 1260 
  if (tmp != 0) {
    
#line 1261 
    __retres = ret;
    
#line 1261 
    goto return_label;
  }
  else ;
  
#line 1263 
  tmp_2 = qlcnic_83xx_idc_check_driver_presence_reg(adapter);
  
#line 1263 
  if (tmp_2 == 0) {
    int tmp_0;
    
#line 1264 
    tmp_0 = qlcnic_83xx_idc_first_to_load_function_handler(adapter);
    
#line 1264 
    if (tmp_0 != 0) {
      
#line 1265 
      __retres = -5;
      
#line 1265 
      goto return_label;
    }
    else ;
  }
  else {
    int tmp_1;
    
#line 1267 
    tmp_1 = qlcnic_83xx_idc_check_major_version(adapter);
    
#line 1267 
    if (tmp_1 != 0) {
      
#line 1268 
      __retres = -5;
      
#line 1268 
      goto return_label;
    }
    else ;
  }
  
#line 1271 
  qlcnic_83xx_idc_update_audit_reg(adapter,(unsigned char)0,1);
  
#line 1273 
  __retres = 0;
  return_label: 
#line 1273 
                return __retres;
}


#line 1276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
void qlcnic_83xx_idc_exit(struct qlcnic_adapter *adapter)
{
  int id;
  u32 val;
  int tmp;
  unsigned int tmp_0;
  
#line 1281 
  goto ldv_54265;
  ldv_54264: 
#line 1282 
  ;
  
#line 1282 
  usleep_range(10000UL,11000UL);
  ldv_54265: 
#line 1283 
  ;
  
#line 1281 
  tmp = test_and_set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 1281 
  if (tmp != 0) 
#line 1283 
                goto ldv_54264; else 
#line 1286 
                                     goto ldv_54266;
  ldv_54266: 
#line 1287 
  ;
  
#line 1284 
  tmp_0 = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 41U)));
  
#line 1284 
  id = (int)tmp_0;
  
#line 1285 
  id &= 255;
  
#line 1287 
  if ((int)adapter->portnum == id) {
    unsigned int tmp_1;
    
#line 1288 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: wait for lock recovery.. %d\n","qlcnic_83xx_idc_exit",id);
    
#line 1290 
    msleep(20U);
    
#line 1291 
    tmp_1 = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 41U)));
    
#line 1291 
    id = (int)tmp_1;
    
#line 1292 
    id &= 255;
  }
  else ;
  
#line 1296 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 13U)));
  
#line 1297 
  val = (unsigned int)(~ (1 << (int)adapter->portnum)) & val;
  
#line 1298 
  writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 13U)));
  
#line 1299 
  set_bit(1L,(unsigned long volatile *)(& (adapter->ahw)->idc.status));
  
#line 1300 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 1302 
  cancel_delayed_work_sync(& adapter->fw_work);
  
#line 1303 
  return;
}


#line 1305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
void qlcnic_83xx_idc_request_reset(struct qlcnic_adapter *adapter, u32 key)
{
  u32 val;
  bool tmp;
  int tmp_0;
  
#line 1309 
  tmp = qlcnic_sriov_vf_check(adapter);
  
#line 1309 
  if ((int)tmp != 0) 
#line 1310 
                     goto return_label; else ;
  
#line 1312 
  tmp_0 = qlcnic_83xx_lock_driver(adapter);
  
#line 1312 
  if (tmp_0 != 0) {
    
#line 1313 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s:failed, please retry\n","qlcnic_83xx_idc_request_reset");
    
#line 1315 
    goto return_label;
  }
  else ;
  
#line 1318 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
  
#line 1319 
  if ((val & 1U) != 0U) {
    
#line 1320 
    netdev_info((struct net_device const *)adapter->netdev,"%s: Auto firmware recovery is disabled\n","qlcnic_83xx_idc_request_reset");
    
#line 1322 
    qlcnic_83xx_idc_enter_failed_state(adapter,0);
    
#line 1323 
    qlcnic_83xx_unlock_driver(adapter);
    
#line 1324 
    goto return_label;
  }
  else ;
  
#line 1327 
  if (key == 3735936685U) {
    
#line 1328 
    val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
    
#line 1329 
    val |= 2U;
    
#line 1330 
    writel(val,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
  }
  else 
    
#line 1331 
    if (key == 3735944941U) 
#line 1332 
                            (adapter->ahw)->idc.collect_dump = 1; else ;
  
#line 1335 
  qlcnic_83xx_unlock_driver(adapter);
  return_label: 
#line 1336 
                return;
}


#line 1339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_copy_bootloader(struct qlcnic_adapter *adapter)
{
  int __retres;
  u8 *p_cache;
  u32 src;
  u32 size;
  u64 dest;
  unsigned int tmp;
  
#line 1344 
  int ret = -5;
  
#line 1346 
  src = 65536U;
  
#line 1347 
  tmp = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 5U)));
  
#line 1347 
  dest = (unsigned long long)tmp;
  
#line 1348 
  size = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 6U)));
  
#line 1351 
  if ((size & 15U) != 0U) 
#line 1352 
                          size = (size + 16U) & 4294967280U; else ;
  
#line 1354 
  p_cache = (u8 *)vzalloc((unsigned long)size);
  
#line 1355 
  if (p_cache == (u8 *)0U) {
    
#line 1356 
    __retres = -12;
    
#line 1356 
    goto return_label;
  }
  else ;
  
#line 1358 
  ret = qlcnic_83xx_lockless_flash_read32(adapter,src,p_cache,(int)(size / 4U));
  
#line 1360 
  if (ret != 0) {
    
#line 1361 
    vfree((void const *)p_cache);
    
#line 1362 
    __retres = ret;
    
#line 1362 
    goto return_label;
  }
  else ;
  
#line 1365 
  ret = qlcnic_ms_mem_write128(adapter,dest,(u32 *)p_cache,size / 16U);
  
#line 1367 
  if (ret != 0) {
    
#line 1368 
    vfree((void const *)p_cache);
    
#line 1369 
    __retres = ret;
    
#line 1369 
    goto return_label;
  }
  else ;
  
#line 1371 
  vfree((void const *)p_cache);
  
#line 1373 
  __retres = ret;
  return_label: 
#line 1373 
                return __retres;
}


#line 1376  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_copy_fw_file(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 dest;
  u32 *p_cache;
  u32 *temp;
  int i;
  __le32 *temp_le;
  u8 data[16U];
  size_t size;
  u64 addr;
  
#line 1378 
  struct qlc_83xx_fw_info *fw_info = (adapter->ahw)->fw_info;
  
#line 1379 
  struct firmware const *fw = fw_info->fw;
  
#line 1381 
  int ret = -5;
  
#line 1387 
  temp = (u32 *)kzalloc_6(fw->size,208U);
  
#line 1388 
  if (temp == (u32 *)0U) {
    
#line 1389 
    release_firmware(fw);
    
#line 1390 
    fw_info->fw = (struct firmware const *)0;
    
#line 1391 
    __retres = -12;
    
#line 1391 
    goto return_label;
  }
  else ;
  
#line 1394 
  temp_le = (__le32 *)fw->data;
  
#line 1399 
  i = 0;
  
#line 1399 
  goto ldv_54297;
  ldv_54296: 
#line 1400 
  ;
  
#line 1400 
  *(temp + i) = *(temp_le + i);
  
#line 1399 
  i += 1;
  ldv_54297: 
#line 1400 
  ;
  
#line 1399 
  if ((unsigned long)i < fw->size / 4UL) 
#line 1401 
                                         goto ldv_54296; else 
#line 1404 
                                                              goto ldv_54298;
  ldv_54298: 
#line 1405 
  ;
  
#line 1402 
  dest = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 7U)));
  
#line 1403 
  size = fw->size & 18446744073709551600UL;
  
#line 1404 
  p_cache = temp;
  
#line 1405 
  addr = (unsigned long long)dest;
  
#line 1407 
  ret = qlcnic_ms_mem_write128(adapter,addr,p_cache,(unsigned int)(size / 16UL));
  
#line 1409 
  if (ret != 0) {
    
#line 1410 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"MS memory write failed\n");
    
#line 1411 
    goto exit;
  }
  else ;
  
#line 1415 
  if ((fw->size & 15UL) != 0UL) {
    
#line 1416 
    addr = (unsigned long long)((unsigned long)dest + size);
    
#line 1417 
    i = 0;
    
#line 1417 
    goto ldv_54301;
    ldv_54300: 
#line 1418 
    ;
    
#line 1418 
    data[i] = *((u8 *)temp + ((unsigned long)i + size));
    
#line 1417 
    i += 1;
    ldv_54301: 
#line 1418 
    ;
    
#line 1417 
    if ((unsigned long)i < (fw->size & 15UL)) 
#line 1419 
                                              goto ldv_54300; else 
#line 1422 
                                                                   goto ldv_54302;
    ldv_54302: 
#line 1423 
    ;
    
#line 1419 
    goto ldv_54304;
    ldv_54303: 
#line 1420 
    ;
    
#line 1420 
    data[i] = (unsigned char)0U;
    
#line 1419 
    i += 1;
    ldv_54304: 
#line 1420 
    ;
    
#line 1419 
    if (i <= 15) 
#line 1421 
                 goto ldv_54303; else 
#line 1424 
                                      goto ldv_54305;
    ldv_54305: 
#line 1425 
    ;
    
#line 1421 
    ret = qlcnic_ms_mem_write128(adapter,addr,(u32 *)(& data),1U);
    
#line 1423 
    if (ret != 0) {
      
#line 1424 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"MS memory write failed\n");
      
#line 1426 
      goto exit;
    }
    else ;
  }
  else ;
  exit: 
#line 1430 
  ;
  
#line 1431 
  release_firmware(fw);
  
#line 1432 
  fw_info->fw = (struct firmware const *)0;
  
#line 1433 
  kfree((void const *)temp);
  
#line 1435 
  __retres = ret;
  return_label: 
#line 1435 
                return __retres;
}


#line 1438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_dump_pause_control_regs(struct qlcnic_adapter *adapter)
{
  int i;
  int j;
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_5;
  
#line 1441 
  u32 val = 0U;
  
#line 1441 
  u32 val1 = 0U;
  
#line 1441 
  u32 reg = 0U;
  
#line 1442 
  int err = 0;
  
#line 1444 
  tmp = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,220201604UL,& err);
  
#line 1444 
  val = (unsigned int)tmp;
  
#line 1445 
  if (err == -5) 
#line 1446 
                 goto return_label; else ;
  
#line 1447 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"SRE-Shim Ctrl:0x%x\n",val);
  
#line 1449 
  j = 0;
  
#line 1449 
  goto ldv_54319;
  ldv_54318: 
#line 1450 
  ;
  
#line 1450 
  if (j == 0) {
    
#line 1451 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Port 0 RxB Pause Threshold Regs[TC7..TC0]:");
    
#line 1453 
    reg = 186647460U;
  }
  else 
    
#line 1454 
    if (j == 1) {
      
#line 1455 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"Port 1 RxB Pause Threshold Regs[TC7..TC0]:");
      
#line 1457 
      reg = 186651556U;
    }
    else ;
  
#line 1459 
  i = 0;
  
#line 1459 
  goto ldv_54316;
  ldv_54315: 
#line 1460 
  ;
  
#line 1460 
  tmp_0 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)((unsigned int)(i * 4) + reg),& err);
  
#line 1460 
  val = (unsigned int)tmp_0;
  
#line 1461 
  if (err == -5) 
#line 1462 
                 goto return_label; else ;
  
#line 1463 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"0x%x  ",val);
  
#line 1459 
  i += 1;
  ldv_54316: 
#line 1460 
  ;
  
#line 1459 
  if (i <= 7) 
#line 1461 
              goto ldv_54315; else 
#line 1464 
                                   goto ldv_54317;
  ldv_54317: 
#line 1465 
  ;
  
#line 1465 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"\n");
  
#line 1449 
  j += 1;
  ldv_54319: 
#line 1450 
  ;
  
#line 1449 
  if (j <= 1) 
#line 1451 
              goto ldv_54318; else 
#line 1454 
                                   goto ldv_54320;
  ldv_54320: 
#line 1455 
  ;
  
#line 1468 
  j = 0;
  
#line 1468 
  goto ldv_54325;
  ldv_54324: 
#line 1469 
  ;
  
#line 1469 
  if (j == 0) {
    
#line 1470 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Port 0 RxB TC Max Cell Registers[4..1]:");
    
#line 1472 
    reg = 186647432U;
  }
  else 
    
#line 1473 
    if (j == 1) {
      
#line 1474 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"Port 1 RxB TC Max Cell Registers[4..1]:");
      
#line 1476 
      reg = 186651528U;
    }
    else ;
  
#line 1478 
  i = 0;
  
#line 1478 
  goto ldv_54322;
  ldv_54321: 
#line 1479 
  ;
  
#line 1479 
  tmp_1 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)((unsigned int)(i * 4) + reg),& err);
  
#line 1479 
  val = (unsigned int)tmp_1;
  
#line 1480 
  if (err == -5) 
#line 1481 
                 goto return_label; else ;
  
#line 1482 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"0x%x  ",val);
  
#line 1478 
  i += 1;
  ldv_54322: 
#line 1479 
  ;
  
#line 1478 
  if (i <= 3) 
#line 1480 
              goto ldv_54321; else 
#line 1483 
                                   goto ldv_54323;
  ldv_54323: 
#line 1484 
  ;
  
#line 1484 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"\n");
  
#line 1468 
  j += 1;
  ldv_54325: 
#line 1469 
  ;
  
#line 1468 
  if (j <= 1) 
#line 1470 
              goto ldv_54324; else 
#line 1473 
                                   goto ldv_54326;
  ldv_54326: 
#line 1474 
  ;
  
#line 1487 
  j = 0;
  
#line 1487 
  goto ldv_54331;
  ldv_54330: 
#line 1488 
  ;
  
#line 1488 
  if (j == 0) {
    
#line 1489 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Port 0 RxB Rx TC Stats[TC7..TC0]:");
    
#line 1491 
    reg = 186647452U;
  }
  else 
    
#line 1492 
    if (j == 1) {
      
#line 1493 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"Port 1 RxB Rx TC Stats[TC7..TC0]:");
      
#line 1495 
      reg = 186651548U;
    }
    else ;
  
#line 1497 
  i = 7;
  
#line 1497 
  goto ldv_54328;
  ldv_54327: 
#line 1498 
  ;
  
#line 1498 
  tmp_2 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)reg,& err);
  
#line 1498 
  val = (unsigned int)tmp_2;
  
#line 1499 
  if (err == -5) 
#line 1500 
                 goto return_label; else ;
  
#line 1501 
  val &= 536870911U;
  
#line 1502 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)reg,(unsigned int)(i << 29) | val);
  
#line 1503 
  tmp_3 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)reg,& err);
  
#line 1503 
  val = (unsigned int)tmp_3;
  
#line 1504 
  if (err == -5) 
#line 1505 
                 goto return_label; else ;
  
#line 1506 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"0x%x  ",val);
  
#line 1497 
  i -= 1;
  ldv_54328: 
#line 1498 
  ;
  
#line 1497 
  if (i >= 0) 
#line 1499 
              goto ldv_54327; else 
#line 1502 
                                   goto ldv_54329;
  ldv_54329: 
#line 1503 
  ;
  
#line 1508 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"\n");
  
#line 1487 
  j += 1;
  ldv_54331: 
#line 1488 
  ;
  
#line 1487 
  if (j <= 1) 
#line 1489 
              goto ldv_54330; else 
#line 1492 
                                   goto ldv_54332;
  ldv_54332: 
#line 1493 
  ;
  
#line 1511 
  tmp_4 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,186648324UL,& err);
  
#line 1511 
  val = (unsigned int)tmp_4;
  
#line 1512 
  if (err == -5) 
#line 1513 
                 goto return_label; else ;
  
#line 1514 
  tmp_5 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,186652420UL,& err);
  
#line 1514 
  val1 = (unsigned int)tmp_5;
  
#line 1515 
  if (err == -5) 
#line 1516 
                 goto return_label; else ;
  
#line 1517 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"IFB-Pause Thresholds: Port 2:0x%x, Port 3:0x%x\n",val,val1);
  return_label: 
#line 1518 
                return;
}


#line 1523  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_disable_pause_frames(struct qlcnic_adapter *adapter)
{
  u32 i;
  u32 j;
  int tmp;
  
#line 1525 
  u32 reg = 0U;
  
#line 1527 
  tmp = qlcnic_83xx_lock_driver(adapter);
  
#line 1527 
  if (tmp != 0) {
    
#line 1528 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s:failed to acquire driver lock\n","qlcnic_83xx_disable_pause_frames");
    
#line 1530 
    goto return_label;
  }
  else ;
  
#line 1533 
  qlcnic_83xx_dump_pause_control_regs(adapter);
  
#line 1534 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,220201604UL,0U);
  
#line 1536 
  j = 0U;
  
#line 1536 
  goto ldv_54344;
  ldv_54343: 
#line 1537 
  ;
  
#line 1537 
  if (j == 0U) 
#line 1538 
               reg = 186647460U;
  else 
    
#line 1539 
    if (j == 1U) 
#line 1540 
                 reg = 186651556U; else ;
  
#line 1542 
  i = 0U;
  
#line 1542 
  goto ldv_54341;
  ldv_54340: 
#line 1543 
  ;
  
#line 1543 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)(i * 4U + reg),0U);
  
#line 1542 
  i += 1U;
  ldv_54341: 
#line 1543 
  ;
  
#line 1542 
  if (i <= 7U) 
#line 1544 
               goto ldv_54340; else 
#line 1547 
                                    goto ldv_54342;
  ldv_54342: 
#line 1548 
  ;
  
#line 1536 
  j += 1U;
  ldv_54344: 
#line 1537 
  ;
  
#line 1536 
  if (j <= 1U) 
#line 1538 
               goto ldv_54343; else 
#line 1541 
                                    goto ldv_54345;
  ldv_54345: 
#line 1542 
  ;
  
#line 1546 
  j = 0U;
  
#line 1546 
  goto ldv_54350;
  ldv_54349: 
#line 1547 
  ;
  
#line 1547 
  if (j == 0U) 
#line 1548 
               reg = 186647432U;
  else 
    
#line 1549 
    if (j == 1U) 
#line 1550 
                 reg = 186651528U; else ;
  
#line 1552 
  i = 0U;
  
#line 1552 
  goto ldv_54347;
  ldv_54346: 
#line 1553 
  ;
  
#line 1553 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)(i * 4U + reg),67044351U);
  
#line 1552 
  i += 1U;
  ldv_54347: 
#line 1553 
  ;
  
#line 1552 
  if (i <= 3U) 
#line 1554 
               goto ldv_54346; else 
#line 1557 
                                    goto ldv_54348;
  ldv_54348: 
#line 1558 
  ;
  
#line 1546 
  j += 1U;
  ldv_54350: 
#line 1547 
  ;
  
#line 1546 
  if (j <= 1U) 
#line 1548 
               goto ldv_54349; else 
#line 1551 
                                    goto ldv_54351;
  ldv_54351: 
#line 1552 
  ;
  
#line 1556 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,186648324UL,0U);
  
#line 1557 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,186652420UL,0U);
  
#line 1558 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Disabled pause frames successfully on all ports\n");
  
#line 1560 
  qlcnic_83xx_unlock_driver(adapter);
  return_label: 
#line 1561 
                return;
}


#line 1563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_take_eport_out_of_reset(struct qlcnic_adapter *adapter)
{
  
#line 1565 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671632992UL,0U);
  
#line 1566 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671633008UL,0U);
  
#line 1567 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671633024UL,0U);
  
#line 1568 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671633040UL,0U);
  
#line 1569 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671633056UL,0U);
  
#line 1570 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671633072UL,0U);
  
#line 1571 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671633088UL,0U);
  
#line 1572 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671633104UL,0U);
  
#line 1573 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,671632976UL,1U);
  
#line 1574 
  return;
}


#line 1576  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_check_heartbeat(struct qlcnic_adapter *p_dev)
{
  u32 heartbeat;
  u32 peg_status;
  int retries;
  
#line 1579 
  int ret = -5;
  
#line 1579 
  int err = 0;
  
#line 1581 
  retries = 10;
  
#line 1582 
  p_dev->heartbeat = readl((void const volatile *)((p_dev->ahw)->pci_base0 + *((p_dev->ahw)->reg_tbl + 2U)));
  ldv_54364: 
#line 1583 
  ;
  
#line 1586 
  msleep(200U);
  
#line 1587 
  heartbeat = readl((void const volatile *)((p_dev->ahw)->pci_base0 + *((p_dev->ahw)->reg_tbl + 2U)));
  
#line 1589 
  if (p_dev->heartbeat != heartbeat) {
    
#line 1590 
    ret = 0;
    
#line 1591 
    goto ldv_54363;
  }
  else ;
  
#line 1593 
  retries -= 1;
  
#line 1593 
  if (retries != 0) 
#line 1595 
                    goto ldv_54364; else 
#line 1598 
                                         goto ldv_54363;
  ldv_54363: 
#line 1599 
  ;
  
#line 1595 
  if (ret != 0) {
    int tmp;
    int tmp_0;
    int tmp_1;
    int tmp_2;
    int tmp_3;
    unsigned int tmp_4;
    
#line 1596 
    dev_err((struct device const *)(& (p_dev->pdev)->dev),"firmware hang detected\n");
    
#line 1597 
    qlcnic_83xx_take_eport_out_of_reset(p_dev);
    
#line 1598 
    qlcnic_83xx_disable_pause_frames(p_dev);
    
#line 1599 
    peg_status = readl((void const volatile *)((p_dev->ahw)->pci_base0 + *((p_dev->ahw)->reg_tbl)));
    
#line 1601 
    tmp = (*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,883949628UL,& err);
    
#line 1601 
    tmp_0 = (*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,875561020UL,& err);
    
#line 1601 
    tmp_1 = (*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,874512444UL,& err);
    
#line 1601 
    tmp_2 = (*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,873463868UL,& err);
    
#line 1601 
    tmp_3 = (*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,872415292UL,& err);
    
#line 1601 
    tmp_4 = readl((void const volatile *)((p_dev->ahw)->pci_base0 + *((p_dev->ahw)->reg_tbl + 1U)));
    
#line 1601 
    ;
    
#line 1601 
    ;
    
#line 1601 
    _dev_info((struct device const *)(& (p_dev->pdev)->dev),"Dumping HW/FW registers\n",peg_status,tmp_4,tmp_3,tmp_2,tmp_1,tmp_0,tmp);
    
#line 1613 
    if (((peg_status >> 8) & 2097151U) == 103U) 
#line 1614 
                                                dev_err((struct device const *)(& (p_dev->pdev)->dev),"Device is being reset err code 0x00006700.\n"); else ;
  }
  else ;
  
#line 1618 
  return ret;
}


#line 1621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_check_cmd_peg_status(struct qlcnic_adapter *p_dev)
{
  int __retres;
  u32 val;
  
#line 1623 
  int retries = 60;
  ldv_54370: 
#line 1625 
  ;
  
#line 1627 
  val = readl((void const volatile *)((p_dev->ahw)->pci_base0 + *((p_dev->ahw)->reg_tbl + 16U)));
  
#line 1628 
  if (val == 65281U) {
    
#line 1629 
    __retres = 0;
    
#line 1629 
    goto return_label;
  }
  else ;
  
#line 1630 
  msleep(500U);
  
#line 1631 
  retries -= 1;
  
#line 1631 
  if (retries != 0) 
#line 1633 
                    goto ldv_54370; else 
#line 1636 
                                         goto ldv_54371;
  ldv_54371: 
#line 1637 
  ;
  
#line 1633 
  dev_err((struct device const *)(& (p_dev->pdev)->dev),"%s: failed, state = 0x%x\n","qlcnic_83xx_check_cmd_peg_status",val);
  
#line 1634 
  __retres = -5;
  return_label: 
#line 1634 
                return __retres;
}


#line 1637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_check_hw_status(struct qlcnic_adapter *p_dev)
{
  int __retres;
  int err;
  
#line 1641 
  err = qlcnic_83xx_check_cmd_peg_status(p_dev);
  
#line 1642 
  if (err != 0) {
    
#line 1643 
    __retres = err;
    
#line 1643 
    goto return_label;
  }
  else ;
  
#line 1645 
  err = qlcnic_83xx_check_heartbeat(p_dev);
  
#line 1646 
  if (err != 0) {
    
#line 1647 
    __retres = err;
    
#line 1647 
    goto return_label;
  }
  else ;
  
#line 1649 
  __retres = err;
  return_label: 
#line 1649 
                return __retres;
}


#line 1652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_poll_reg(struct qlcnic_adapter *p_dev, u32 addr, int duration, u32 mask, u32 status)
{
  int __retres;
  int timeout_error;
  u32 value;
  u8 retries;
  int tmp;
  u8 tmp_1;
  
#line 1655 
  int err = 0;
  
#line 1659 
  tmp = (*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,(unsigned long)addr,& err);
  
#line 1659 
  value = (unsigned int)tmp;
  
#line 1660 
  if (err == -5) {
    
#line 1661 
    __retres = err;
    
#line 1661 
    goto return_label;
  }
  else ;
  
#line 1662 
  retries = (unsigned char)(duration / 10);
  ldv_54389: 
#line 1663 
  ;
  
#line 1665 
  if ((value & mask) != status) {
    int tmp_0;
    
#line 1666 
    timeout_error = 1;
    
#line 1667 
    msleep((unsigned int)(duration / 10));
    
#line 1668 
    tmp_0 = (*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,(unsigned long)addr,& err);
    
#line 1668 
    value = (unsigned int)tmp_0;
    
#line 1669 
    if (err == -5) {
      
#line 1670 
      __retres = err;
      
#line 1670 
      goto return_label;
    }
    else ;
  }
  else {
    
#line 1672 
    timeout_error = 0;
    
#line 1673 
    goto ldv_54388;
  }
  
#line 1675 
  tmp_1 = retries;
  
#line 1675 
  retries = (u8)((int)retries - 1);
  
#line 1675 
  ;
  
#line 1675 
  if ((unsigned int)tmp_1 != 0U) 
#line 1677 
                                 goto ldv_54389; else 
#line 1680 
                                                      goto ldv_54388;
  ldv_54388: 
#line 1681 
  ;
  
#line 1677 
  if (timeout_error != 0) {
    
#line 1678 
    (p_dev->ahw)->reset.seq_error += 1;
    
#line 1679 
    dev_err((struct device const *)(& (p_dev->pdev)->dev),"%s: Timeout Err, entry_num = %d\n","qlcnic_83xx_poll_reg",(p_dev->ahw)->reset.seq_index);
    
#line 1682 
    dev_err((struct device const *)(& (p_dev->pdev)->dev),"0x%08x 0x%08x 0x%08x\n",value,mask,status);
  }
  else ;
  
#line 1687 
  __retres = timeout_error;
  return_label: 
#line 1687 
                return __retres;
}


#line 1690  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_reset_template_checksum(struct qlcnic_adapter *p_dev)
{
  int __retres;
  u16 *tmp;
  int tmp_0;
  
#line 1692 
  u32 sum = 0U;
  
#line 1693 
  u16 *buff = (u16 *)(p_dev->ahw)->reset.buff;
  
#line 1694 
  int count = (int)((unsigned int)((p_dev->ahw)->reset.hdr)->size / 2U);
  
#line 1696 
  goto ldv_54398;
  ldv_54397: 
#line 1697 
  ;
  
#line 1697 
  tmp = buff;
  
#line 1697 
  buff += 1;
  
#line 1697 
  sum = (unsigned int)*tmp + sum;
  ldv_54398: 
#line 1698 
  ;
  
#line 1696 
  tmp_0 = count;
  
#line 1696 
  count -= 1;
  
#line 1696 
  ;
  
#line 1696 
  if (tmp_0 > 0) 
#line 1698 
                 goto ldv_54397; else 
#line 1701 
                                      goto ldv_54399;
  ldv_54399: 
#line 1702 
  ;
  
#line 1699 
  goto ldv_54401;
  ldv_54400: 
#line 1700 
  ;
  
#line 1700 
  sum = (sum & 65535U) + (sum >> 16);
  ldv_54401: 
#line 1701 
  ;
  
#line 1699 
  if (sum >> 16 != 0U) 
#line 1701 
                       goto ldv_54400; else 
#line 1704 
                                            goto ldv_54402;
  ldv_54402: 
#line 1705 
  ;
  
#line 1702 
  if (sum != 4294967295U) {
    
#line 1703 
    __retres = 0;
    
#line 1703 
    goto return_label;
  }
  else {
    
#line 1705 
    dev_err((struct device const *)(& (p_dev->pdev)->dev),"%s: failed\n","qlcnic_83xx_reset_template_checksum");
    
#line 1706 
    __retres = -1;
    
#line 1706 
    goto return_label;
  }
  return_label: 
#line 1702 
                return __retres;
}


#line 1710  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_get_reset_instruction_template(struct qlcnic_adapter *p_dev)
{
  int __retres;
  u32 addr;
  u32 count;
  u32 prev_ver;
  u32 curr_ver;
  u8 *p_buff;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  
#line 1712 
  struct qlcnic_hardware_context *ahw = p_dev->ahw;
  
#line 1716 
  if (ahw->reset.buff != (u8 *)0U) {
    int tmp;
    
#line 1717 
    prev_ver = p_dev->fw_version;
    
#line 1718 
    tmp = qlcnic_83xx_get_fw_version(p_dev);
    
#line 1718 
    curr_ver = (unsigned int)tmp;
    
#line 1719 
    if (curr_ver > prev_ver) 
#line 1720 
                             kfree((void const *)ahw->reset.buff);
    else {
      
#line 1722 
      __retres = 0;
      
#line 1722 
      goto return_label;
    }
  }
  else ;
  
#line 1725 
  ahw->reset.seq_error = 0;
  
#line 1726 
  ahw->reset.buff = (u8 *)kzalloc_6(8192UL,208U);
  
#line 1727 
  if ((p_dev->ahw)->reset.buff == (u8 *)0U) {
    
#line 1728 
    __retres = -12;
    
#line 1728 
    goto return_label;
  }
  else ;
  
#line 1730 
  p_buff = (p_dev->ahw)->reset.buff;
  
#line 1731 
  addr = 5177344U;
  
#line 1732 
  count = 4U;
  
#line 1735 
  tmp_1 = qlcnic_83xx_flash_read32(p_dev,addr,p_buff,(int)count);
  
#line 1735 
  if (tmp_1 != 0) {
    
#line 1736 
    dev_err((struct device const *)(& (p_dev->pdev)->dev),"%s: flash read failed\n","qlcnic_83xx_get_reset_instruction_template");
    
#line 1737 
    __retres = -5;
    
#line 1737 
    goto return_label;
  }
  else ;
  
#line 1739 
  ahw->reset.hdr = (struct qlc_83xx_reset_hdr *)ahw->reset.buff;
  
#line 1740 
  addr = (unsigned int)((int)(ahw->reset.hdr)->hdr_size + 5177344);
  
#line 1741 
  p_buff = ahw->reset.buff + (int)(ahw->reset.hdr)->hdr_size;
  
#line 1742 
  count = (unsigned int)((unsigned long)((int)(ahw->reset.hdr)->size - (int)(ahw->reset.hdr)->hdr_size) / 4UL);
  
#line 1745 
  tmp_2 = qlcnic_83xx_flash_read32(p_dev,addr,p_buff,(int)count);
  
#line 1745 
  if (tmp_2 != 0) {
    
#line 1746 
    dev_err((struct device const *)(& (p_dev->pdev)->dev),"%s: flash read failed\n","qlcnic_83xx_get_reset_instruction_template");
    
#line 1747 
    __retres = -5;
    
#line 1747 
    goto return_label;
  }
  else ;
  
#line 1750 
  tmp_3 = qlcnic_83xx_reset_template_checksum(p_dev);
  
#line 1750 
  if (tmp_3 != 0) {
    
#line 1751 
    __retres = -5;
    
#line 1751 
    goto return_label;
  }
  else ;
  
#line 1753 
  ahw->reset.init_offset = ahw->reset.buff + (int)(ahw->reset.hdr)->init_offset;
  
#line 1754 
  ahw->reset.start_offset = ahw->reset.buff + (int)(ahw->reset.hdr)->start_offset;
  
#line 1756 
  ahw->reset.stop_offset = ahw->reset.buff + (int)(ahw->reset.hdr)->hdr_size;
  
#line 1757 
  __retres = 0;
  return_label: 
#line 1757 
                return __retres;
}


#line 1761  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_read_write_crb_reg(struct qlcnic_adapter *p_dev, u32 raddr, u32 waddr)
{
  u32 value;
  int tmp;
  
#line 1764 
  int err = 0;
  
#line 1767 
  tmp = (*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,(unsigned long)raddr,& err);
  
#line 1767 
  value = (unsigned int)tmp;
  
#line 1768 
  if (err == -5) 
#line 1769 
                 goto return_label; else ;
  
#line 1770 
  qlcnic_83xx_wrt_reg_indirect(p_dev,(unsigned long)waddr,value);
  return_label: 
#line 1771 
                return;
}


#line 1774  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_rmw_crb_reg(struct qlcnic_adapter *p_dev, u32 raddr, u32 waddr, struct qlc_83xx_rmw *p_rmw_hdr)
{
  u32 value;
  
#line 1778 
  int err = 0;
  
#line 1781 
  if ((unsigned int)p_rmw_hdr->index_a != 0U) 
#line 1782 
                                              value = (p_dev->ahw)->reset.array[(int)p_rmw_hdr->index_a];
  else {
    int tmp;
    
#line 1784 
    tmp = (*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,(unsigned long)raddr,& err);
    
#line 1784 
    value = (unsigned int)tmp;
    
#line 1785 
    if (err == -5) 
#line 1786 
                   goto return_label; else ;
  }
  
#line 1789 
  value = p_rmw_hdr->mask & value;
  
#line 1790 
  value <<= (int)p_rmw_hdr->shl;
  
#line 1791 
  value >>= (int)p_rmw_hdr->shr;
  
#line 1792 
  value = p_rmw_hdr->or_value | value;
  
#line 1793 
  value = p_rmw_hdr->xor_value ^ value;
  
#line 1794 
  qlcnic_83xx_wrt_reg_indirect(p_dev,(unsigned long)waddr,value);
  return_label: 
#line 1795 
                return;
}


#line 1798  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_write_list(struct qlcnic_adapter *p_dev, struct qlc_83xx_entry_hdr *p_hdr)
{
  int i;
  struct qlc_83xx_entry *entry;
  
#line 1804 
  entry = (struct qlc_83xx_entry *)p_hdr + 8U;
  
#line 1807 
  i = 0;
  
#line 1807 
  goto ldv_54436;
  ldv_54435: 
#line 1808 
  ;
  
#line 1808 
  qlcnic_83xx_wrt_reg_indirect(p_dev,(unsigned long)entry->arg1,entry->arg2);
  
#line 1810 
  if ((unsigned int)p_hdr->delay != 0U) 
    
#line 1811 
    if (0 != 0) 
      
#line 1811 
      if ((unsigned int)p_hdr->delay > 19999U) 
#line 1811 
                                               __bad_udelay(); else 
#line 1811 
                                                                    __const_udelay((unsigned long)p_hdr->delay * 4295UL);
    else 
#line 1811 
         __udelay((unsigned long)p_hdr->delay);
  else ;
  
#line 1807 
  i += 1;
  
#line 1807 
  entry += 1;
  ldv_54436: 
#line 1808 
  ;
  
#line 1807 
  if ((int)p_hdr->count > i) 
#line 1809 
                             goto ldv_54435; else 
#line 1812 
                                                  goto ldv_54437;
  ldv_54437: 
#line 1813 
  ;
  
#line 1814 
  return;
}


#line 1816  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_read_write_list(struct qlcnic_adapter *p_dev, struct qlc_83xx_entry_hdr *p_hdr)
{
  int i;
  struct qlc_83xx_entry *entry;
  
#line 1822 
  entry = (struct qlc_83xx_entry *)p_hdr + 8U;
  
#line 1825 
  i = 0;
  
#line 1825 
  goto ldv_54445;
  ldv_54444: 
#line 1826 
  ;
  
#line 1826 
  qlcnic_83xx_read_write_crb_reg(p_dev,entry->arg1,entry->arg2);
  
#line 1828 
  if ((unsigned int)p_hdr->delay != 0U) 
    
#line 1829 
    if (0 != 0) 
      
#line 1829 
      if ((unsigned int)p_hdr->delay > 19999U) 
#line 1829 
                                               __bad_udelay(); else 
#line 1829 
                                                                    __const_udelay((unsigned long)p_hdr->delay * 4295UL);
    else 
#line 1829 
         __udelay((unsigned long)p_hdr->delay);
  else ;
  
#line 1825 
  i += 1;
  
#line 1825 
  entry += 1;
  ldv_54445: 
#line 1826 
  ;
  
#line 1825 
  if ((int)p_hdr->count > i) 
#line 1827 
                             goto ldv_54444; else 
#line 1830 
                                                  goto ldv_54446;
  ldv_54446: 
#line 1831 
  ;
  
#line 1832 
  return;
}


#line 1834  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_poll_list(struct qlcnic_adapter *p_dev, struct qlc_83xx_entry_hdr *p_hdr)
{
  long delay;
  struct qlc_83xx_entry *entry;
  struct qlc_83xx_poll *poll;
  int i;
  unsigned long arg1;
  unsigned long arg2;
  
#line 1840 
  int err = 0;
  
#line 1843 
  poll = (struct qlc_83xx_poll *)p_hdr + 8U;
  
#line 1846 
  entry = (struct qlc_83xx_entry *)poll + 8U;
  
#line 1848 
  delay = (long)p_hdr->delay;
  
#line 1850 
  if (delay == 0L) {
    
#line 1851 
    i = 0;
    
#line 1851 
    goto ldv_54459;
    ldv_54458: 
#line 1852 
    ;
    
#line 1852 
    qlcnic_83xx_poll_reg(p_dev,entry->arg1,(int)delay,poll->mask,poll->status);
    
#line 1851 
    i += 1;
    
#line 1851 
    entry += 1;
    ldv_54459: 
#line 1852 
    ;
    
#line 1851 
    if ((int)p_hdr->count > i) 
#line 1853 
                               goto ldv_54458; else 
#line 1856 
                                                    goto ldv_54460;
    ldv_54460: 
#line 1857 
    ;
  }
  else {
    
#line 1856 
    i = 0;
    
#line 1856 
    goto ldv_54462;
    ldv_54461: 
#line 1857 
    ;
    
#line 1857 
    arg1 = (unsigned long)entry->arg1;
    
#line 1858 
    arg2 = (unsigned long)entry->arg2;
    
#line 1859 
    if (delay != 0L) {
      int tmp;
      
#line 1860 
      tmp = qlcnic_83xx_poll_reg(p_dev,(unsigned int)arg1,(int)delay,poll->mask,poll->status);
      
#line 1860 
      if (tmp != 0) {
        
#line 1864 
        (*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,arg1,& err);
        
#line 1865 
        if (err == -5) 
#line 1866 
                       goto return_label; else ;
        
#line 1867 
        (*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,arg2,& err);
        
#line 1868 
        if (err == -5) 
#line 1869 
                       goto return_label; else ;
      }
      else ;
    }
    else ;
    
#line 1856 
    i += 1;
    
#line 1856 
    entry += 1;
    ldv_54462: 
#line 1857 
    ;
    
#line 1856 
    if ((int)p_hdr->count > i) 
#line 1858 
                               goto ldv_54461; else 
#line 1861 
                                                    goto ldv_54463;
    ldv_54463: 
#line 1862 
    ;
  }
  return_label: 
#line 1864 
                return;
}


#line 1877  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_poll_write_list(struct qlcnic_adapter *p_dev, struct qlc_83xx_entry_hdr *p_hdr)
{
  int i;
  long delay;
  struct qlc_83xx_quad_entry *entry;
  struct qlc_83xx_poll *poll;
  
#line 1885 
  poll = (struct qlc_83xx_poll *)p_hdr + 8U;
  
#line 1887 
  entry = (struct qlc_83xx_quad_entry *)poll + 8U;
  
#line 1889 
  delay = (long)p_hdr->delay;
  
#line 1891 
  i = 0;
  
#line 1891 
  goto ldv_54473;
  ldv_54472: 
#line 1892 
  ;
  
#line 1892 
  qlcnic_83xx_wrt_reg_indirect(p_dev,(unsigned long)entry->dr_addr,entry->dr_value);
  
#line 1894 
  qlcnic_83xx_wrt_reg_indirect(p_dev,(unsigned long)entry->ar_addr,entry->ar_value);
  
#line 1896 
  if (delay != 0L) 
#line 1897 
                   qlcnic_83xx_poll_reg(p_dev,entry->ar_addr,(int)delay,poll->mask,poll->status); else ;
  
#line 1891 
  i += 1;
  
#line 1891 
  entry += 1;
  ldv_54473: 
#line 1892 
  ;
  
#line 1891 
  if ((int)p_hdr->count > i) 
#line 1893 
                             goto ldv_54472; else 
#line 1896 
                                                  goto ldv_54474;
  ldv_54474: 
#line 1897 
  ;
  
#line 1898 
  return;
}


#line 1903  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_read_modify_write(struct qlcnic_adapter *p_dev, struct qlc_83xx_entry_hdr *p_hdr)
{
  int i;
  struct qlc_83xx_entry *entry;
  struct qlc_83xx_rmw *rmw_hdr;
  
#line 1910 
  rmw_hdr = (struct qlc_83xx_rmw *)p_hdr + 8U;
  
#line 1913 
  entry = (struct qlc_83xx_entry *)rmw_hdr + 16U;
  
#line 1916 
  i = 0;
  
#line 1916 
  goto ldv_54483;
  ldv_54482: 
#line 1917 
  ;
  
#line 1917 
  qlcnic_83xx_rmw_crb_reg(p_dev,entry->arg1,entry->arg2,rmw_hdr);
  
#line 1919 
  if ((unsigned int)p_hdr->delay != 0U) 
    
#line 1920 
    if (0 != 0) 
      
#line 1920 
      if ((unsigned int)p_hdr->delay > 19999U) 
#line 1920 
                                               __bad_udelay(); else 
#line 1920 
                                                                    __const_udelay((unsigned long)p_hdr->delay * 4295UL);
    else 
#line 1920 
         __udelay((unsigned long)p_hdr->delay);
  else ;
  
#line 1916 
  i += 1;
  
#line 1916 
  entry += 1;
  ldv_54483: 
#line 1917 
  ;
  
#line 1916 
  if ((int)p_hdr->count > i) 
#line 1918 
                             goto ldv_54482; else 
#line 1921 
                                                  goto ldv_54484;
  ldv_54484: 
#line 1922 
  ;
  
#line 1923 
  return;
}


#line 1924  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_pause(struct qlc_83xx_entry_hdr *p_hdr)
{
  
#line 1926 
  if ((unsigned int)p_hdr->delay != 0U) 
    
#line 1927 
    if (0 != 0 && (unsigned int)p_hdr->delay <= 5U) 
      
#line 1927 
      if (0 != 0) 
        
#line 1927 
        if ((unsigned int)p_hdr->delay * 1000U > 19999U) 
#line 1927 
                                                         __bad_udelay(); else 
                                                                    
#line 1927 
                                                                    __const_udelay((unsigned long)((unsigned int)p_hdr->delay * 1000U) * 4295UL);
      else 
#line 1927 
           __udelay((unsigned long)((unsigned int)p_hdr->delay * 1000U));
    else {
      
#line 1927 
      unsigned long __ms = (unsigned long)p_hdr->delay;
      {
        unsigned long tmp;
        
#line 1927 
        goto ldv_54490;
        ldv_54489: 
#line 1928 
        ;
        
#line 1927 
        __const_udelay(4295000UL);
        ldv_54490: 
#line 1929 
        ;
        
#line 1927 
        tmp = __ms;
        
#line 1927 
        __ms -= 1UL;
        
#line 1927 
        ;
        
#line 1927 
        if (tmp != 0UL) 
#line 1929 
                        goto ldv_54489; else 
#line 1932 
                                             goto ldv_54491;
        ldv_54491: 
#line 1933 
        ;
      }
    }
  else ;
  
#line 1936 
  return;
}


#line 1931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_poll_read_list(struct qlcnic_adapter *p_dev, struct qlc_83xx_entry_hdr *p_hdr)
{
  long delay;
  int index;
  int i;
  int j;
  int err;
  struct qlc_83xx_quad_entry *entry;
  struct qlc_83xx_poll *poll;
  unsigned long addr;
  
#line 1940 
  poll = (struct qlc_83xx_poll *)p_hdr + 8U;
  
#line 1943 
  entry = (struct qlc_83xx_quad_entry *)poll + 8U;
  
#line 1945 
  delay = (long)p_hdr->delay;
  
#line 1947 
  i = 0;
  
#line 1947 
  goto ldv_54505;
  ldv_54504: 
#line 1948 
  ;
  
#line 1948 
  qlcnic_83xx_wrt_reg_indirect(p_dev,(unsigned long)entry->ar_addr,entry->ar_value);
  
#line 1950 
  if (delay != 0L) {
    int tmp_0;
    
#line 1951 
    tmp_0 = qlcnic_83xx_poll_reg(p_dev,entry->ar_addr,(int)delay,poll->mask,poll->status);
    
#line 1951 
    if (tmp_0 == 0) {
      int tmp;
      
#line 1953 
      index = (p_dev->ahw)->reset.array_index;
      
#line 1954 
      addr = (unsigned long)entry->dr_addr;
      
#line 1955 
      j = (*(((p_dev->ahw)->hw_ops)->read_reg))(p_dev,addr,& err);
      
#line 1956 
      if (err == -5) 
#line 1957 
                     goto return_label; else ;
      
#line 1959 
      tmp = index;
      
#line 1959 
      index += 1;
      
#line 1959 
      (p_dev->ahw)->reset.array[tmp] = (unsigned int)j;
      
#line 1961 
      if (index == 16) 
#line 1962 
                       (p_dev->ahw)->reset.array_index = 1; else ;
    }
    else ;
  }
  else ;
  
#line 1947 
  i += 1;
  
#line 1947 
  entry += 1;
  ldv_54505: 
#line 1948 
  ;
  
#line 1947 
  if ((int)p_hdr->count > i) 
#line 1949 
                             goto ldv_54504; else 
#line 1952 
                                                  goto ldv_54506;
  ldv_54506: 
#line 1953 
  ;
  return_label: 
#line 1954 
                return;
}


#line 1968  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
__inline static void qlcnic_83xx_seq_end(struct qlcnic_adapter *p_dev)
{
  
#line 1970 
  (p_dev->ahw)->reset.seq_end = (unsigned char)1U;
  
#line 1971 
  return;
}


#line 1973  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_template_end(struct qlcnic_adapter *p_dev)
{
  
#line 1975 
  (p_dev->ahw)->reset.template_end = (unsigned char)1U;
  
#line 1976 
  if ((p_dev->ahw)->reset.seq_error == 0) 
#line 1977 
                                          dev_err((struct device const *)(& (p_dev->pdev)->dev),"HW restart process completed successfully.\n"); else 
                                                                    
#line 1980 
                                                                    dev_err((struct device const *)(& (p_dev->pdev)->dev),"HW restart completed with timeout errors.\n");
  
#line 1982 
  return;
}


#line 1998  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_exec_template_cmd(struct qlcnic_adapter *p_dev, char *p_buff)
{
  int index;
  int entries;
  struct qlc_83xx_entry_hdr *p_hdr;
  
#line 2003 
  char *entry = p_buff;
  
#line 2005 
  (p_dev->ahw)->reset.seq_end = (unsigned char)0U;
  
#line 2006 
  (p_dev->ahw)->reset.template_end = (unsigned char)0U;
  
#line 2007 
  entries = (int)((p_dev->ahw)->reset.hdr)->entries;
  
#line 2008 
  index = (p_dev->ahw)->reset.seq_index;
  
#line 2010 
  goto ldv_54535;
  ldv_54534: 
#line 2011 
  ;
  
#line 2011 
  p_hdr = (struct qlc_83xx_entry_hdr *)entry;
  
#line 2013 
  switch ((int)p_hdr->cmd) {
    case 0: 
#line 2014 
    ;
    
#line 2015 
    goto ldv_54522;
    case 1: 
#line 2016 
    ;
    
#line 2017 
    qlcnic_83xx_write_list(p_dev,p_hdr);
    
#line 2018 
    goto ldv_54522;
    case 2: 
#line 2019 
    ;
    
#line 2020 
    qlcnic_83xx_read_write_list(p_dev,p_hdr);
    
#line 2021 
    goto ldv_54522;
    case 4: 
#line 2022 
    ;
    
#line 2023 
    qlcnic_83xx_poll_list(p_dev,p_hdr);
    
#line 2024 
    goto ldv_54522;
    case 8: 
#line 2025 
    ;
    
#line 2026 
    qlcnic_83xx_poll_write_list(p_dev,p_hdr);
    
#line 2027 
    goto ldv_54522;
    case 16: 
#line 2028 
    ;
    
#line 2029 
    qlcnic_83xx_read_modify_write(p_dev,p_hdr);
    
#line 2030 
    goto ldv_54522;
    case 32: 
#line 2031 
    ;
    
#line 2032 
    qlcnic_83xx_pause(p_hdr);
    
#line 2033 
    goto ldv_54522;
    case 64: 
#line 2034 
    ;
    
#line 2035 
    qlcnic_83xx_seq_end(p_dev);
    
#line 2036 
    goto ldv_54522;
    case 128: 
#line 2037 
    ;
    
#line 2038 
    qlcnic_83xx_template_end(p_dev);
    
#line 2039 
    goto ldv_54522;
    case 256: 
#line 2040 
    ;
    
#line 2041 
    qlcnic_83xx_poll_read_list(p_dev,p_hdr);
    
#line 2042 
    goto ldv_54522;
    default: 
#line 2043 
    ;
    
#line 2044 
    dev_err((struct device const *)(& (p_dev->pdev)->dev),"%s: Unknown opcode 0x%04x in template %d\n","qlcnic_83xx_exec_template_cmd",(int)p_hdr->cmd,index);
    
#line 2047 
    goto ldv_54522;
  }
  ldv_54522: 
#line 2049 
  ;
  
#line 2049 
  entry += (int)p_hdr->size;
  
#line 2010 
  index += 1;
  ldv_54535: 
#line 2011 
  ;
  
#line 2010 
  if ((unsigned int)(p_dev->ahw)->reset.seq_end == 0U && index < entries) 
    
#line 2012 
    goto ldv_54534; else 
#line 2015 
                         goto ldv_54536;
  ldv_54536: 
#line 2016 
  ;
  
#line 2051 
  (p_dev->ahw)->reset.seq_index = index;
  
#line 2052 
  return;
}


#line 2054  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_stop_hw(struct qlcnic_adapter *p_dev)
{
  
#line 2056 
  (p_dev->ahw)->reset.seq_index = 0;
  
#line 2058 
  qlcnic_83xx_exec_template_cmd(p_dev,(char *)(p_dev->ahw)->reset.stop_offset);
  
#line 2059 
  if ((unsigned int)(p_dev->ahw)->reset.seq_end != 1U) 
#line 2060 
                                                       dev_err((struct device const *)(& (p_dev->pdev)->dev),"%s: failed\n","qlcnic_83xx_stop_hw"); else ;
  
#line 2061 
  return;
}


#line 2063  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_start_hw(struct qlcnic_adapter *p_dev)
{
  
#line 2065 
  qlcnic_83xx_exec_template_cmd(p_dev,(char *)(p_dev->ahw)->reset.start_offset);
  
#line 2066 
  if ((unsigned int)(p_dev->ahw)->reset.template_end != 1U) 
#line 2067 
                                                            dev_err((struct device const *)(& (p_dev->pdev)->dev),"%s: failed\n","qlcnic_83xx_start_hw"); else ;
  
#line 2068 
  return;
}


#line 2070  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_init_hw(struct qlcnic_adapter *p_dev)
{
  
#line 2072 
  qlcnic_83xx_exec_template_cmd(p_dev,(char *)(p_dev->ahw)->reset.init_offset);
  
#line 2073 
  if ((unsigned int)(p_dev->ahw)->reset.seq_end != 1U) 
#line 2074 
                                                       dev_err((struct device const *)(& (p_dev->pdev)->dev),"%s: failed\n","qlcnic_83xx_init_hw"); else ;
  
#line 2075 
  return;
}


#line 2096  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_run_post(struct qlcnic_adapter *adapter)
{
  int __retres;
  int timeout;
  int count;
  u32 signature;
  int tmp;
  
#line 2098 
  struct qlc_83xx_fw_info *fw_info = (adapter->ahw)->fw_info;
  
#line 2099 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 2100 
  int ret = 0;
  
#line 2104 
  switch ((adapter->ahw)->post_mode) {
    case (u32)0: 
#line 2105 
    ;
    
#line 2106 
    timeout = 2690;
    
#line 2107 
    goto ldv_54559;
    case (u32)1: 
#line 2108 
    ;
    
#line 2109 
    timeout = 4930;
    
#line 2110 
    goto ldv_54559;
    case (u32)2: 
#line 2111 
    ;
    
#line 2112 
    timeout = 9500;
    
#line 2113 
    goto ldv_54559;
    default: 
#line 2114 
    ;
    
#line 2115 
    __retres = -22;
    
#line 2115 
    goto return_label;
  }
  ldv_54559: 
#line 2118 
  ;
  
#line 2118 
  strncpy((char *)(& fw_info->fw_file_name),"83xx_post_fw.bin",20UL);
  
#line 2121 
  ret = request_firmware(& fw_info->fw,(char const *)(& fw_info->fw_file_name),dev);
  
#line 2122 
  if (ret != 0) {
    
#line 2123 
    dev_err((struct device const *)dev,"POST firmware can not be loaded, skipping POST\n");
    
#line 2124 
    __retres = 0;
    
#line 2124 
    goto return_label;
  }
  else ;
  
#line 2127 
  ret = qlcnic_83xx_copy_fw_file(adapter);
  
#line 2128 
  if (ret != 0) {
    
#line 2129 
    __retres = ret;
    
#line 2129 
    goto return_label;
  }
  else ;
  
#line 2132 
  qlcnic_ind_wr(adapter,1096818708U,0U);
  
#line 2135 
  qlcnic_ind_wr(adapter,1096818712U,(adapter->ahw)->post_mode);
  
#line 2138 
  writel(305419896U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 15U)));
  
#line 2141 
  qlcnic_83xx_start_hw(adapter);
  
#line 2143 
  count = 0;
  ldv_54564: 
#line 2144 
  ;
  
#line 2145 
  msleep(100U);
  
#line 2146 
  count += 100;
  
#line 2148 
  tmp = qlcnic_ind_rd(adapter,1096818708U);
  
#line 2148 
  signature = (unsigned int)tmp;
  
#line 2149 
  if (signature == 4294967280U) 
#line 2150 
                                goto ldv_54563; else ;
  
#line 2151 
  if (timeout > count) 
#line 2153 
                       goto ldv_54564; else 
#line 2156 
                                            goto ldv_54563;
  ldv_54563: 
#line 2157 
  ;
  
#line 2153 
  if (timeout <= count) {
    
#line 2154 
    dev_err((struct device const *)dev,"POST timed out, signature = 0x%08x\n",signature);
    
#line 2155 
    __retres = -5;
    
#line 2155 
    goto return_label;
  }
  else ;
  
#line 2158 
  switch (signature) {
    case (u32)(-16): 
#line 2159 
    ;
    
#line 2160 
    _dev_info((struct device const *)dev,"POST passed, Signature = 0x%08x\n",signature);
    
#line 2161 
    goto ldv_54566;
    case (u32)(-1): 
#line 2162 
    ;
    
#line 2163 
    dev_err((struct device const *)dev,"POST failed, Test case : ASIC STRESS TEST, Signature = 0x%08x\n",signature);
    
#line 2165 
    ret = -5;
    
#line 2166 
    goto ldv_54566;
    case (u32)(-2): 
#line 2167 
    ;
    
#line 2168 
    dev_err((struct device const *)dev,"POST failed, Test case : DDT TEST, Signature = 0x%08x\n",signature);
    
#line 2170 
    ret = -5;
    
#line 2171 
    goto ldv_54566;
    case (u32)(-4): 
#line 2172 
    ;
    
#line 2173 
    dev_err((struct device const *)dev,"POST failed, Test case : ASIC MEMORY TEST, Signature = 0x%08x\n",signature);
    
#line 2175 
    ret = -5;
    
#line 2176 
    goto ldv_54566;
    case (u32)(-8): 
#line 2177 
    ;
    
#line 2178 
    dev_err((struct device const *)dev,"POST failed, Test case : FLASH TEST, Signature = 0x%08x\n",signature);
    
#line 2180 
    ret = -5;
    
#line 2181 
    goto ldv_54566;
    default: 
#line 2182 
    ;
    
#line 2183 
    dev_err((struct device const *)dev,"POST failed, Test case : INVALID, Signature = 0x%08x\n",signature);
    
#line 2185 
    ret = -5;
    
#line 2186 
    goto ldv_54566;
  }
  ldv_54566: 
#line 2189 
  ;
  
#line 2189 
  __retres = ret;
  return_label: 
#line 2189 
                return __retres;
}


#line 2192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_load_fw_image_from_host(struct qlcnic_adapter *adapter)
{
  int __retres;
  int tmp_0;
  
#line 2194 
  struct qlc_83xx_fw_info *fw_info = (adapter->ahw)->fw_info;
  
#line 2195 
  int err = -5;
  
#line 2197 
  tmp_0 = request_firmware(& fw_info->fw,(char const *)(& fw_info->fw_file_name),& (adapter->pdev)->dev);
  
#line 2197 
  if (tmp_0 != 0) {
    
#line 2199 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"No file FW image, loading flash FW image.\n");
    
#line 2201 
    writel(0U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 15U)));
  }
  else {
    int tmp;
    
#line 2204 
    tmp = qlcnic_83xx_copy_fw_file(adapter);
    
#line 2204 
    if (tmp != 0) {
      
#line 2205 
      __retres = err;
      
#line 2205 
      goto return_label;
    }
    else ;
    
#line 2206 
    writel(305419896U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 15U)));
  }
  
#line 2210 
  __retres = 0;
  return_label: 
#line 2210 
                return __retres;
}


#line 2213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_restart_hw(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 val;
  int tmp;
  int tmp_1;
  
#line 2216 
  int err = -5;
  
#line 2218 
  qlcnic_83xx_stop_hw(adapter);
  
#line 2221 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 15U)));
  
#line 2222 
  if ((val & 2U) == 0U) 
#line 2223 
                        qlcnic_dump_fw(adapter); else ;
  
#line 2225 
  if ((val & 1U) != 0U) {
    
#line 2226 
    netdev_info((struct net_device const *)adapter->netdev,"%s: Auto firmware recovery is disabled\n","qlcnic_83xx_restart_hw");
    
#line 2228 
    qlcnic_83xx_idc_enter_failed_state(adapter,1);
    
#line 2229 
    __retres = err;
    
#line 2229 
    goto return_label;
  }
  else ;
  
#line 2232 
  qlcnic_83xx_init_hw(adapter);
  
#line 2234 
  tmp = qlcnic_83xx_copy_bootloader(adapter);
  
#line 2234 
  if (tmp != 0) {
    
#line 2235 
    __retres = err;
    
#line 2235 
    goto return_label;
  }
  else ;
  
#line 2238 
  if ((int)(adapter->ahw)->run_post != 0) {
    
#line 2239 
    err = qlcnic_83xx_run_post(adapter);
    
#line 2240 
    if (err != 0) {
      
#line 2241 
      __retres = err;
      
#line 2241 
      goto return_label;
    }
    else ;
    
#line 2244 
    (adapter->ahw)->run_post = (_Bool)0;
    
#line 2247 
    qlcnic_83xx_stop_hw(adapter);
    
#line 2248 
    qlcnic_83xx_init_hw(adapter);
    
#line 2250 
    err = qlcnic_83xx_copy_bootloader(adapter);
    
#line 2251 
    if (err != 0) {
      
#line 2252 
      __retres = err;
      
#line 2252 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2256 
  if (qlcnic_load_fw_file == 1) {
    int tmp_0;
    
#line 2257 
    tmp_0 = qlcnic_83xx_load_fw_image_from_host(adapter);
    
#line 2257 
    if (tmp_0 != 0) {
      
#line 2258 
      __retres = err;
      
#line 2258 
      goto return_label;
    }
    else ;
  }
  else 
#line 2260 
       writel(0U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 15U)));
  
#line 2264 
  qlcnic_83xx_start_hw(adapter);
  
#line 2265 
  tmp_1 = qlcnic_83xx_check_hw_status(adapter);
  
#line 2265 
  if (tmp_1 != 0) {
    
#line 2266 
    __retres = -5;
    
#line 2266 
    goto return_label;
  }
  else ;
  
#line 2268 
  __retres = 0;
  return_label: 
#line 2268 
                return __retres;
}


#line 2271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_get_nic_configuration(struct qlcnic_adapter *adapter)
{
  int __retres;
  int err;
  struct qlcnic_info nic_info;
  int tmp;
  
#line 2275 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 2277 
  memset((void *)(& nic_info),0,72UL);
  
#line 2278 
  err = qlcnic_get_nic_info(adapter,& nic_info,(unsigned char)((int)ahw->pci_func));
  
#line 2279 
  if (err != 0) {
    
#line 2280 
    __retres = -5;
    
#line 2280 
    goto return_label;
  }
  else ;
  
#line 2282 
  ahw->physical_port = (unsigned char)nic_info.phys_port;
  
#line 2283 
  ahw->switch_mode = nic_info.switch_mode;
  
#line 2284 
  ahw->max_tx_ques = nic_info.max_tx_ques;
  
#line 2285 
  ahw->max_rx_ques = nic_info.max_rx_ques;
  
#line 2286 
  ahw->capabilities = nic_info.capabilities;
  
#line 2287 
  ahw->max_mac_filters = nic_info.max_mac_filters;
  
#line 2288 
  ahw->max_mtu = nic_info.max_mtu;
  
#line 2298 
  tmp = constant_test_bit(11L,(unsigned long const volatile *)(& adapter->state));
  
#line 2298 
  if (tmp != 0) {
    
#line 2299 
    __retres = 1431655765;
    
#line 2299 
    goto return_label;
  }
  else ;
  
#line 2301 
  if ((ahw->capabilities & 8388608U) != 0U) {
    
#line 2302 
    __retres = 255;
    
#line 2302 
    goto return_label;
  }
  else ;
  
#line 2304 
  __retres = 1431655765;
  return_label: 
#line 2304 
                return __retres;
}


#line 2307  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_configure_opmode(struct qlcnic_adapter *adapter)
{
  int __retres;
  u16 max_sds_rings;
  u16 max_tx_rings;
  int ret;
  int tmp_1;
  int tmp_3;
  
#line 2309 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 2313 
  ret = qlcnic_83xx_get_nic_configuration(adapter);
  
#line 2314 
  if (ret == -5) {
    
#line 2315 
    __retres = -5;
    
#line 2315 
    goto return_label;
  }
  else ;
  
#line 2317 
  if (ret == 255) {
    int tmp;
    
#line 2318 
    ahw->nic_mode = (unsigned char)255U;
    
#line 2320 
    tmp = qlcnic_83xx_config_vnic_opmode(adapter);
    
#line 2320 
    if (tmp != 0) {
      
#line 2321 
      __retres = -5;
      
#line 2321 
      goto return_label;
    }
    else ;
    
#line 2323 
    max_sds_rings = (unsigned short)4U;
    
#line 2324 
    max_tx_rings = (unsigned short)4U;
  }
  else 
    
#line 2325 
    if (ret == 1431655765) {
      
#line 2326 
      ahw->nic_mode = (unsigned char)0U;
      
#line 2327 
      (adapter->nic_ops)->init_driver = & qlcnic_83xx_init_default_driver;
      
#line 2328 
      ahw->idc.state_entry = & qlcnic_83xx_idc_ready_state_entry;
      
#line 2329 
      max_sds_rings = (unsigned short)8U;
      
#line 2330 
      max_tx_rings = (unsigned short)8U;
    }
    else {
      
#line 2332 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Invalid opmode %d\n","qlcnic_83xx_configure_opmode",ret);
      
#line 2334 
      __retres = -5;
      
#line 2334 
      goto return_label;
    }
  {
    int tmp_0;
    
#line 2337 
    u16 _min1 = ahw->max_rx_ques;
    
#line 2337 
    u16 _min2 = max_sds_rings;
    
#line 2337 
    if ((int)_min1 < (int)_min2) 
#line 2337 
                                 tmp_0 = (int)_min1; else 
#line 2337 
                                                          tmp_0 = (int)_min2;
    
#line 2337 
    tmp_1 = tmp_0;
  }
  
#line 2337 
  adapter->max_sds_rings = (unsigned char)tmp_1;
  {
    int tmp_2;
    
#line 2338 
    u16 _min1_0 = ahw->max_tx_ques;
    
#line 2338 
    u16 _min2_0 = max_tx_rings;
    
#line 2338 
    if ((int)_min1_0 < (int)_min2_0) 
#line 2338 
                                     tmp_2 = (int)_min1_0; else 
#line 2338 
                                                                tmp_2 = (int)_min2_0;
    
#line 2338 
    tmp_3 = tmp_2;
  }
  
#line 2338 
  adapter->max_tx_rings = (unsigned char)tmp_3;
  
#line 2340 
  __retres = 0;
  return_label: 
#line 2340 
                return __retres;
}


#line 2343  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_config_buff_descriptors(struct qlcnic_adapter *adapter)
{
  
#line 2345 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 2347 
  if ((unsigned int)ahw->port_type == 2U) {
    
#line 2348 
    adapter->num_rxd = (unsigned short)4096U;
    
#line 2349 
    adapter->max_rxd = (unsigned short)8192U;
    
#line 2350 
    adapter->num_jumbo_rxd = (unsigned short)1024U;
    
#line 2351 
    adapter->max_jumbo_rxd = (unsigned short)1024U;
  }
  else 
    
#line 2353 
    if ((unsigned int)ahw->port_type == 1U) {
      
#line 2354 
      adapter->num_rxd = (unsigned short)2048U;
      
#line 2355 
      adapter->num_jumbo_rxd = (unsigned short)512U;
      
#line 2356 
      adapter->max_jumbo_rxd = (unsigned short)512U;
      
#line 2357 
      adapter->max_rxd = (unsigned short)4096U;
    }
    else ;
  
#line 2359 
  adapter->num_txd = (unsigned short)1024U;
  
#line 2360 
  adapter->max_rds_rings = (unsigned char)2U;
  
#line 2361 
  return;
}


#line 2363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_init_default_driver(struct qlcnic_adapter *adapter)
{
  int __retres;
  int tmp;
  
#line 2365 
  int err = -5;
  
#line 2367 
  qlcnic_83xx_get_minidump_template(adapter);
  
#line 2368 
  tmp = qlcnic_83xx_get_port_info(adapter);
  
#line 2368 
  if (tmp != 0) {
    
#line 2369 
    __retres = err;
    
#line 2369 
    goto return_label;
  }
  else ;
  
#line 2371 
  qlcnic_83xx_config_buff_descriptors(adapter);
  
#line 2372 
  (adapter->ahw)->msix_supported = (unsigned char)(qlcnic_use_msi_x != 0);
  
#line 2373 
  adapter->flags |= 128U;
  
#line 2375 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"HAL Version: %d\n",(adapter->ahw)->fw_hal_version);
  
#line 2378 
  __retres = 0;
  return_label: 
#line 2378 
                return __retres;
}


#line 2382  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_clear_function_resources(struct qlcnic_adapter *adapter)
{
  struct qlcnic_cmd_args cmd;
  u32 presence_mask;
  u32 audit_mask;
  int status;
  
#line 2388 
  presence_mask = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 13U)));
  
#line 2389 
  audit_mask = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 16U)));
  
#line 2391 
  if (((unsigned int)(1 << (int)adapter->portnum) & presence_mask) != 0U || (audit_mask & 64U) != 0U) {
    
#line 2392 
    status = qlcnic_alloc_mbx_args(& cmd,adapter,97U);
    
#line 2394 
    if (status != 0) 
#line 2395 
                     goto return_label; else ;
    
#line 2397 
    *(cmd.req.arg + 1U) = 2147483648U;
    
#line 2398 
    status = qlcnic_issue_cmd(adapter,& cmd);
    
#line 2399 
    if (status != 0) 
#line 2400 
                     dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to clean up the function resources\n"); else ;
    
#line 2402 
    qlcnic_free_mbx_args(& cmd);
  }
  else ;
  return_label: 
#line 2404 
                return;
}


#line 2406  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static int qlcnic_83xx_get_fw_info(struct qlcnic_adapter *adapter)
{
  struct qlc_83xx_fw_info *fw_info;
  
#line 2408 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 2409 
  struct pci_dev *pdev = adapter->pdev;
  
#line 2411 
  int err = 0;
  
#line 2413 
  ahw->fw_info = (struct qlc_83xx_fw_info *)kzalloc_6(32UL,208U);
  
#line 2414 
  if (ahw->fw_info == (struct qlc_83xx_fw_info *)0) 
#line 2415 
                                                    err = -12;
  else {
    
#line 2417 
    fw_info = ahw->fw_info;
    
#line 2418 
    switch ((int)pdev->device) {
      case 32816: 
#line 2419 
      ;
      case 34864: 
#line 2420 
      ;
      
#line 2421 
      strncpy((char *)(& fw_info->fw_file_name),"83xx_fw.bin",20UL);
      
#line 2423 
      goto ldv_54627;
      case 32832: 
#line 2424 
      ;
      
#line 2425 
      strncpy((char *)(& fw_info->fw_file_name),"84xx_fw.bin",20UL);
      
#line 2427 
      goto ldv_54627;
      default: 
#line 2428 
      ;
      
#line 2429 
      dev_err((struct device const *)(& pdev->dev),"%s: Invalid device id\n","qlcnic_83xx_get_fw_info");
      
#line 2431 
      err = -22;
      
#line 2432 
      goto ldv_54627;
    }
    ldv_54627: 
#line 2434 
    ;
  }
  
#line 2436 
  return err;
}


#line 2439  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
static void qlcnic_83xx_init_rings(struct qlcnic_adapter *adapter)
{
  
#line 2441 
  u8 rx_cnt = (unsigned char)4U;
  
#line 2442 
  u8 tx_cnt = (unsigned char)4U;
  
#line 2444 
  adapter->max_tx_rings = (unsigned char)8U;
  
#line 2445 
  adapter->max_sds_rings = (unsigned char)8U;
  
#line 2447 
  if ((unsigned int)(adapter->ahw)->msix_supported == 0U) {
    
#line 2448 
    rx_cnt = (unsigned char)1U;
    
#line 2449 
    tx_cnt = (unsigned char)1U;
  }
  else ;
  
#line 2453 
  qlcnic_set_tx_ring_count(adapter,(unsigned char)((int)tx_cnt));
  
#line 2454 
  qlcnic_set_sds_ring_count(adapter,(unsigned char)((int)rx_cnt));
  
#line 2455 
  return;
}


#line 2457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_init(struct qlcnic_adapter *adapter, int pci_using_dac)
{
  int __retres;
  bool tmp;
  int tmp_0;
  
#line 2459 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 2460 
  int err = 0;
  
#line 2462 
  adapter->rx_mac_learn = (_Bool)0;
  
#line 2463 
  ahw->msix_supported = (unsigned char)(qlcnic_use_msi_x != 0);
  
#line 2466 
  switch (qlcnic_load_fw_file) {
    case 2: 
#line 2467 
    ;
    
#line 2468 
    ahw->post_mode = 0U;
    
#line 2469 
    ahw->run_post = (_Bool)1;
    
#line 2470 
    goto ldv_54643;
    case 3: 
#line 2471 
    ;
    
#line 2472 
    ahw->post_mode = 1U;
    
#line 2473 
    ahw->run_post = (_Bool)1;
    
#line 2474 
    goto ldv_54643;
    case 4: 
#line 2475 
    ;
    
#line 2476 
    ahw->post_mode = 2U;
    
#line 2477 
    ahw->run_post = (_Bool)1;
    
#line 2478 
    goto ldv_54643;
    default: 
#line 2479 
    ;
    
#line 2480 
    ahw->run_post = (_Bool)0;
    
#line 2481 
    goto ldv_54643;
  }
  ldv_54643: 
#line 2484 
  ;
  
#line 2484 
  qlcnic_83xx_init_rings(adapter);
  
#line 2486 
  err = qlcnic_83xx_init_mailbox_work(adapter);
  
#line 2487 
  if (err != 0) 
#line 2488 
                goto exit; else ;
  
#line 2490 
  tmp = qlcnic_sriov_vf_check(adapter);
  
#line 2490 
  if ((int)tmp != 0) {
    
#line 2491 
    err = qlcnic_sriov_vf_init(adapter,pci_using_dac);
    
#line 2492 
    if (err != 0) 
#line 2493 
                  goto detach_mbx;
    else {
      
#line 2495 
      __retres = err;
      
#line 2495 
      goto return_label;
    }
  }
  else ;
  
#line 2498 
  tmp_0 = qlcnic_83xx_read_flash_descriptor_table(adapter);
  
#line 2498 
  if (tmp_0 != 0) 
#line 2498 
                  goto _LOR;
  else {
    int tmp_1;
    
#line 2498 
    tmp_1 = qlcnic_83xx_read_flash_mfg_id(adapter);
    
#line 2498 
    if (tmp_1 != 0) {
      _LOR: {
              
#line 2500 
              dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed reading flash mfg id\n");
              
#line 2501 
              err = -131;
              
#line 2502 
              goto detach_mbx;
            }
    }
    else ;
  }
  
#line 2505 
  err = qlcnic_83xx_check_hw_status(adapter);
  
#line 2506 
  if (err != 0) 
#line 2507 
                goto detach_mbx; else ;
  
#line 2509 
  err = qlcnic_83xx_get_fw_info(adapter);
  
#line 2510 
  if (err != 0) 
#line 2511 
                goto detach_mbx; else ;
  
#line 2513 
  err = qlcnic_83xx_idc_init(adapter);
  
#line 2514 
  if (err != 0) 
#line 2515 
                goto detach_mbx; else ;
  
#line 2517 
  err = qlcnic_setup_intr(adapter);
  
#line 2518 
  if (err != 0) {
    
#line 2519 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to setup interrupt\n");
    
#line 2520 
    goto disable_intr;
  }
  else ;
  {
    struct lock_class_key __key;
    
#line 2523 
    __init_work(& adapter->idc_aen_work.work,0);
    
#line 2523 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL_1};
    
#line 2523 
    adapter->idc_aen_work.work.data = __constr_expr_37;
    
#line 2523 
    lockdep_init_map(& adapter->idc_aen_work.work.lockdep_map,"(&(&adapter->idc_aen_work)->work)",& __key,0);
    
#line 2523 
    INIT_LIST_HEAD(& adapter->idc_aen_work.work.entry);
    
#line 2523 
    adapter->idc_aen_work.work.func = & qlcnic_83xx_idc_aen_work;
  }
  {
    struct lock_class_key __key_0;
    
#line 2523 
    init_timer_key(& adapter->idc_aen_work.timer,2097152U,"(&(&adapter->idc_aen_work)->timer)",& __key_0);
  }
  
#line 2523 
  adapter->idc_aen_work.timer.function = & delayed_work_timer_fn;
  
#line 2523 
  adapter->idc_aen_work.timer.data = (unsigned long)(& adapter->idc_aen_work);
  
#line 2525 
  err = qlcnic_83xx_setup_mbx_intr(adapter);
  
#line 2526 
  if (err != 0) 
#line 2527 
                goto disable_mbx_intr; else ;
  
#line 2529 
  qlcnic_83xx_clear_function_resources(adapter);
  
#line 2530 
  qlcnic_dcb_enable(adapter->dcb);
  
#line 2531 
  qlcnic_83xx_initialize_nic(adapter,1);
  
#line 2532 
  qlcnic_dcb_get_info(adapter->dcb);
  
#line 2535 
  err = qlcnic_83xx_configure_opmode(adapter);
  
#line 2536 
  if (err != 0) 
#line 2537 
                goto disable_mbx_intr; else ;
  
#line 2541 
  err = (*((adapter->nic_ops)->init_driver))(adapter);
  
#line 2542 
  if (err != 0) 
#line 2543 
                goto disable_mbx_intr; else ;
  
#line 2546 
  qlcnic_83xx_idc_poll_dev_state(& adapter->fw_work.work);
  
#line 2547 
  __retres = 0;
  
#line 2547 
  goto return_label;
  disable_mbx_intr: 
#line 2549 
  ;
  
#line 2550 
  qlcnic_83xx_free_mbx_intr(adapter);
  disable_intr: 
#line 2552 
  ;
  
#line 2553 
  qlcnic_teardown_intr(adapter);
  detach_mbx: 
#line 2555 
  ;
  
#line 2556 
  qlcnic_83xx_detach_mailbox_work(adapter);
  
#line 2557 
  qlcnic_83xx_free_mailbox(ahw->mailbox);
  
#line 2558 
  ahw->mailbox = (struct qlcnic_mailbox *)0;
  exit: 
#line 2559 
  ;
  
#line 2560 
  __retres = err;
  return_label: 
#line 2560 
                return __retres;
}


#line 2563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
void qlcnic_83xx_aer_stop_poll_work(struct qlcnic_adapter *adapter)
{
  
#line 2565 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 2566 
  struct qlc_83xx_idc *idc = & ahw->idc;
  
#line 2568 
  set_bit(2L,(unsigned long volatile *)(& idc->status));
  
#line 2569 
  cancel_delayed_work_sync(& adapter->fw_work);
  
#line 2571 
  if ((unsigned int)ahw->nic_mode == 255U) 
#line 2572 
                                           qlcnic_83xx_disable_vnic_mode(adapter,1); else ;
  
#line 2574 
  qlcnic_83xx_idc_detach_driver(adapter);
  
#line 2575 
  qlcnic_83xx_initialize_nic(adapter,0);
  
#line 2577 
  cancel_delayed_work_sync(& adapter->idc_aen_work);
  
#line 2578 
  return;
}


#line 2580  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
int qlcnic_83xx_aer_reset(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 owner;
  int tmp;
  
#line 2582 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 2583 
  struct qlc_83xx_idc *idc = & ahw->idc;
  
#line 2584 
  int ret = 0;
  
#line 2591 
  idc->prev_state = (unsigned char)4U;
  
#line 2592 
  tmp = qlcnic_83xx_idc_find_reset_owner_id(adapter);
  
#line 2592 
  owner = (unsigned int)tmp;
  
#line 2593 
  if ((unsigned int)ahw->pci_func == owner) {
    
#line 2594 
    ret = qlcnic_83xx_restart_hw(adapter);
    
#line 2595 
    if (ret < 0) {
      
#line 2596 
      __retres = ret;
      
#line 2596 
      goto return_label;
    }
    else ;
    
#line 2597 
    qlcnic_83xx_idc_clear_registers(adapter,0);
  }
  else ;
  
#line 2600 
  ret = (*(idc->state_entry))(adapter);
  
#line 2601 
  __retres = ret;
  return_label: 
#line 2601 
                return __retres;
}


#line 2604  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_83xx_init.c"
void qlcnic_83xx_aer_start_poll_work(struct qlcnic_adapter *adapter)
{
  u32 owner;
  int tmp;
  
#line 2606 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 2607 
  struct qlc_83xx_idc *idc = & ahw->idc;
  
#line 2610 
  idc->prev_state = (unsigned char)3U;
  
#line 2611 
  tmp = qlcnic_83xx_idc_find_reset_owner_id(adapter);
  
#line 2611 
  owner = (unsigned int)tmp;
  
#line 2612 
  if ((unsigned int)ahw->pci_func == owner) 
#line 2613 
                                            qlcnic_83xx_idc_enter_ready_state(adapter,0); else ;
  
#line 2615 
  qlcnic_schedule_work(adapter,& qlcnic_83xx_idc_poll_dev_state,0);
  
#line 2616 
  return;
}


#line 510  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_83xx_init.c.aux"
static void *kzalloc_6(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 513 
  tmp = ldv_kzalloc(size,flags);
  
#line 513 
  return tmp;
}


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kcalloc_2(size_t n, size_t size, gfp_t flags);


#line 999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pci_reset_function(struct pci_dev *);


#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static void *dma_zalloc_coherent(struct device *dev, size_t size, dma_addr_t *dma_handle, gfp_t flag)
{
  
#line 186 
  void *ret = dma_alloc_attrs(dev,size,dma_handle,flag | 32768U,(struct dma_attrs *)0);
  
#line 188 
  return ret;
}


#line 1926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_fw_cmd_create_rx_ctx(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 1928 
  tmp = (*(((adapter->ahw)->hw_ops)->create_rx_ctx))(adapter);
  
#line 1928 
  return tmp;
}


#line 1931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static int qlcnic_fw_cmd_create_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *ptr, int ring)
{
  int tmp;
  
#line 1935 
  tmp = (*(((adapter->ahw)->hw_ops)->create_tx_ctx))(adapter,ptr,ring);
  
#line 1935 
  return tmp;
}


#line 1938  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_fw_cmd_del_rx_ctx(struct qlcnic_adapter *adapter)
{
  
#line 1940 
  (*(((adapter->ahw)->hw_ops)->del_rx_ctx))(adapter);
  
#line 1941 
  return;
}


#line 1943  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static void qlcnic_fw_cmd_del_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *ptr)
{
  
#line 1946 
  (*(((adapter->ahw)->hw_ops)->del_tx_ctx))(adapter,ptr);
  
#line 1947 
  return;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
static struct qlcnic_mailbox_metadata const qlcnic_mbx_tbl[33U] = {{.cmd = 7U, .in_args = 4U, .out_args = 1U}, {.cmd = 8U, .in_args = 2U, .out_args = 1U}, {.cmd = 9U, .in_args = 4U, .out_args = 1U}, {.cmd = 10U, .in_args = 3U, .out_args = 1U}, {.cmd = 17U, .in_args = 4U, .out_args = 1U}, {.cmd = 18U, .in_args = 4U, .out_args = 1U}, {.cmd = 19U, .in_args = 4U, .out_args = 2U}, {.cmd = 20U, .in_args = 5U, .out_args = 1U}, {.cmd = 21U, .in_args = 4U, .out_args = 1U}, {.cmd = 22U, .in_args = 4U, .out_args = 2U}, {.cmd = 23U, .in_args = 4U, .out_args = 1U}, {.cmd = 24U, .in_args = 4U, .out_args = 2U}, {.cmd = 25U, .in_args = 4U, .out_args = 2U}, {.cmd = 31U, .in_args = 4U, .out_args = 3U}, {.cmd = 32U, .in_args = 4U, .out_args = 1U}, {.cmd = 33U, .in_args = 4U, .out_args = 1U}, {.cmd = 34U, .in_args = 4U, .out_args = 1U}, {.cmd = 36U, .in_args = 4U, .out_args = 3U}, {.cmd = 37U, .in_args = 4U, .out_args = 1U}, {.cmd = 38U, .in_args = 4U, .out_args = 3U}, {.cmd = 39U, .in_args = 4U, .out_args = 1U}, {.cmd = 40U, .in_args = 4U, .out_args = 1U}, {.cmd = 55U, .in_args = 4U, .out_args = 1U}, {.cmd = 41U, .in_args = 4U, .out_args = 3U}, {.cmd = 42U, .in_args = 4U, .out_args = 1U}, {.cmd = 46U, .in_args = 4U, .out_args = 1U}, {.cmd = 47U, .in_args = 4U, .out_args = 4U}, {.cmd = 48U, .in_args = 4U, .out_args = 1U}, {.cmd = 56U, .in_args = 4U, .out_args = 1U}, {.cmd = 60U, .in_args = 4U, .out_args = 2U}, {.cmd = 57U, .in_args = 2U, .out_args = 3U}, {.cmd = 52U, .in_args = 1U, .out_args = 2U}, {.cmd = 53U, .in_args = 4U, .out_args = 1U}};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
__inline static u32 qlcnic_get_cmd_signature(struct qlcnic_hardware_context *ahw)
{
  u32 __retres;
  
#line 48 
  __retres = ((unsigned int)ahw->pci_func | ((ahw->fw_hal_version << 8) & 65535U)) | 3405643776U;
  
#line 48 
  return __retres;
}


#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_alloc_mbx_args(struct qlcnic_cmd_args *mbx, struct qlcnic_adapter *adapter, u32 type)
{
  int __retres;
  int i;
  int size;
  struct qlcnic_mailbox_metadata const *mbx_tbl;
  
#line 59 
  mbx_tbl = (struct qlcnic_mailbox_metadata const *)(& qlcnic_mbx_tbl);
  
#line 60 
  size = 33;
  
#line 61 
  i = 0;
  
#line 61 
  goto ldv_53757;
  ldv_53756: 
#line 62 
  ;
  
#line 62 
  if ((mbx_tbl + i)->cmd == type) {
    
#line 63 
    mbx->req.num = (mbx_tbl + i)->in_args;
    
#line 64 
    mbx->rsp.num = (mbx_tbl + i)->out_args;
    
#line 65 
    mbx->req.arg = (u32 *)kcalloc_2((unsigned long)mbx->req.num,4UL,32U);
    
#line 67 
    if (mbx->req.arg == (u32 *)0U) {
      
#line 68 
      __retres = -12;
      
#line 68 
      goto return_label;
    }
    else ;
    
#line 69 
    mbx->rsp.arg = (u32 *)kcalloc_2((unsigned long)mbx->rsp.num,4UL,32U);
    
#line 71 
    if (mbx->rsp.arg == (u32 *)0U) {
      
#line 72 
      kfree((void const *)mbx->req.arg);
      
#line 73 
      mbx->req.arg = (u32 *)0U;
      
#line 74 
      __retres = -12;
      
#line 74 
      goto return_label;
    }
    else ;
    
#line 76 
    memset((void *)mbx->req.arg,0,(unsigned long)mbx->req.num * 4UL);
    
#line 77 
    memset((void *)mbx->rsp.arg,0,(unsigned long)mbx->rsp.num * 4UL);
    
#line 78 
    *(mbx->req.arg) = type;
    
#line 79 
    goto ldv_53755;
  }
  else ;
  
#line 61 
  i += 1;
  ldv_53757: 
#line 62 
  ;
  
#line 61 
  if (i < size) 
#line 63 
                goto ldv_53756; else 
#line 66 
                                     goto ldv_53755;
  ldv_53755: 
#line 67 
  ;
  
#line 82 
  __retres = 0;
  return_label: 
#line 82 
                return __retres;
}


#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
void qlcnic_free_mbx_args(struct qlcnic_cmd_args *cmd)
{
  
#line 88 
  kfree((void const *)cmd->req.arg);
  
#line 89 
  cmd->req.arg = (u32 *)0U;
  
#line 90 
  kfree((void const *)cmd->rsp.arg);
  
#line 91 
  cmd->rsp.arg = (u32 *)0U;
  
#line 92 
  return;
}


#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
static u32 qlcnic_poll_rsp(struct qlcnic_adapter *adapter)
{
  u32 __retres;
  u32 rsp;
  int tmp_0;
  
#line 98 
  int timeout = 0;
  
#line 98 
  int err = 0;
  ldv_53771: 
#line 99 
  ;
  
#line 102 
  if (1) 
#line 102 
         __const_udelay(4295000UL);
  else {
    
#line 102 
    unsigned long __ms = 1UL;
    {
      unsigned long tmp;
      
#line 102 
      goto ldv_53769;
      ldv_53768: 
#line 103 
      ;
      
#line 102 
      __const_udelay(4295000UL);
      ldv_53769: 
#line 104 
      ;
      
#line 102 
      tmp = __ms;
      
#line 102 
      __ms -= 1UL;
      
#line 102 
      ;
      
#line 102 
      if (tmp != 0UL) 
#line 104 
                      goto ldv_53768; else 
#line 107 
                                           goto ldv_53770;
      ldv_53770: 
#line 108 
      ;
    }
  }
  
#line 104 
  timeout += 1;
  
#line 104 
  if (timeout > 4000) {
    
#line 105 
    __retres = 3U;
    
#line 105 
    goto return_label;
  }
  else ;
  
#line 107 
  tmp_0 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323608UL,& err);
  
#line 107 
  rsp = (unsigned int)tmp_0;
  
#line 108 
  if (rsp < (u32)0) 
#line 110 
                    goto ldv_53771; else 
#line 113 
                                         goto ldv_53772;
  ldv_53772: 
#line 114 
  ;
  
#line 110 
  __retres = rsp;
  return_label: 
#line 110 
                return __retres;
}


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  int i;
  u32 rsp;
  u32 signature;
  char const *fmt;
  int tmp;
  int tmp_1;
  
#line 116 
  int err = 0;
  
#line 119 
  struct pci_dev *pdev = adapter->pdev;
  
#line 120 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 123 
  signature = qlcnic_get_cmd_signature(ahw);
  
#line 126 
  tmp = qlcnic_api_lock(adapter);
  
#line 126 
  if (tmp != 0) {
    
#line 127 
    *(cmd->rsp.arg) = 17U;
    
#line 128 
    __retres = (int)*(cmd->rsp.arg);
    
#line 128 
    goto return_label;
  }
  else ;
  
#line 131 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,136323624UL,signature);
  
#line 132 
  i = 1;
  
#line 132 
  goto ldv_53785;
  ldv_53784: 
#line 133 
  ;
  
#line 133 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)((i + 6) * 4) + 136323584UL,*(cmd->req.arg + i));
  
#line 132 
  i += 1;
  ldv_53785: 
#line 133 
  ;
  
#line 132 
  if (cmd->req.num > (unsigned int)i) 
#line 134 
                                      goto ldv_53784; else 
#line 137 
                                                           goto ldv_53786;
  ldv_53786: 
#line 138 
  ;
  
#line 134 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,136323608UL,*(cmd->req.arg) | 2147483648U);
  
#line 136 
  rsp = qlcnic_poll_rsp(adapter);
  
#line 138 
  if (rsp == 3U) {
    
#line 139 
    dev_err((struct device const *)(& pdev->dev),"command timeout, response = 0x%x\n",rsp);
    
#line 140 
    *(cmd->rsp.arg) = 17U;
  }
  else 
    
#line 141 
    if (rsp == 2U) {
      int tmp_0;
      
#line 142 
      tmp_0 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323612UL,& err);
      
#line 142 
      *(cmd->rsp.arg) = (unsigned int)tmp_0;
      
#line 143 
      switch (*(cmd->rsp.arg)) {
        case (u32)6: 
#line 144 
        ;
        
#line 145 
        fmt = "CDRP invalid args: [%d]\n";
        
#line 146 
        goto ldv_53788;
        case (u32)9: 
#line 147 
        ;
        case (u32)15: 
#line 148 
        ;
        
#line 149 
        fmt = "CDRP command not supported: [%d]\n";
        
#line 150 
        goto ldv_53788;
        case (u32)10: 
#line 151 
        ;
        
#line 152 
        fmt = "CDRP requested action not permitted: [%d]\n";
        
#line 153 
        goto ldv_53788;
        case (u32)16: 
#line 154 
        ;
        
#line 155 
        fmt = "CDRP invalid or unknown cmd received: [%d]\n";
        
#line 156 
        goto ldv_53788;
        case (u32)17: 
#line 157 
        ;
        
#line 158 
        fmt = "CDRP command timeout: [%d]\n";
        
#line 159 
        goto ldv_53788;
        default: 
#line 160 
        ;
        
#line 161 
        fmt = "CDRP command failed: [%d]\n";
        
#line 162 
        goto ldv_53788;
      }
      ldv_53788: 
#line 164 
      ;
      
#line 164 
      dev_err((struct device const *)(& pdev->dev),fmt,*(cmd->rsp.arg));
      
#line 165 
      qlcnic_dump_mbx(adapter,cmd);
    }
    else 
      
#line 166 
      if (rsp == 1U) 
#line 167 
                     *(cmd->rsp.arg) = 0U; else ;
  
#line 169 
  i = 1;
  
#line 169 
  goto ldv_53796;
  ldv_53795: 
#line 170 
  ;
  
#line 170 
  tmp_1 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,(unsigned long)((i + 6) * 4) + 136323584UL,& err);
  
#line 170 
  *(cmd->rsp.arg + i) = (unsigned int)tmp_1;
  
#line 169 
  i += 1;
  ldv_53796: 
#line 170 
  ;
  
#line 169 
  if (cmd->rsp.num > (unsigned int)i) 
#line 171 
                                      goto ldv_53795; else 
#line 174 
                                                           goto ldv_53797;
  ldv_53797: 
#line 175 
  ;
  
#line 173 
  qlcnic_api_unlock(adapter);
  
#line 174 
  __retres = (int)*(cmd->rsp.arg);
  return_label: 
#line 174 
                return __retres;
}


#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_fw_cmd_set_drv_version(struct qlcnic_adapter *adapter, u32 fw_cmd)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  u32 arg1;
  u32 arg2;
  u32 arg3;
  char drv_string[12U];
  
#line 182 
  int err = 0;
  
#line 184 
  memset((void *)(& drv_string),0,12UL);
  
#line 185 
  snprintf((char *)(& drv_string),12UL,"%d",5,3,62);
  
#line 189 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,fw_cmd);
  
#line 190 
  if (err != 0) {
    
#line 191 
    __retres = err;
    
#line 191 
    goto return_label;
  }
  else ;
  
#line 193 
  memcpy((void *)(& arg1),(void const *)(& drv_string),4UL);
  
#line 194 
  memcpy((void *)(& arg2),(void const *)(& drv_string) + 4U,4UL);
  
#line 195 
  memcpy((void *)(& arg3),(void const *)(& drv_string) + 8U,4UL);
  
#line 197 
  *(cmd.req.arg + 1U) = arg1;
  
#line 198 
  *(cmd.req.arg + 2U) = arg2;
  
#line 199 
  *(cmd.req.arg + 3U) = arg3;
  
#line 201 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 202 
  if (err != 0) {
    
#line 203 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Failed to set driver version in firmware\n");
    
#line 205 
    err = -5;
  }
  else ;
  
#line 207 
  qlcnic_free_mbx_args(& cmd);
  
#line 208 
  __retres = err;
  return_label: 
#line 208 
                return __retres;
}


#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_fw_cmd_set_mtu(struct qlcnic_adapter *adapter, int mtu)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  
#line 214 
  int err = 0;
  
#line 216 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 218 
  if (recv_ctx->state != 2U) {
    
#line 219 
    __retres = err;
    
#line 219 
    goto return_label;
  }
  else ;
  
#line 220 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,18U);
  
#line 221 
  if (err != 0) {
    
#line 222 
    __retres = err;
    
#line 222 
    goto return_label;
  }
  else ;
  
#line 224 
  *(cmd.req.arg + 1U) = (unsigned int)recv_ctx->context_id;
  
#line 225 
  *(cmd.req.arg + 2U) = (unsigned int)mtu;
  
#line 227 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 228 
  if (err != 0) {
    
#line 229 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to set mtu\n");
    
#line 230 
    err = -5;
  }
  else ;
  
#line 232 
  qlcnic_free_mbx_args(& cmd);
  
#line 233 
  __retres = err;
  return_label: 
#line 233 
                return __retres;
}


#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_fw_cmd_create_rx_ctx(struct qlcnic_adapter *adapter)
{
  int __retres;
  dma_addr_t hostrq_phys_addr;
  dma_addr_t cardrsp_phys_addr;
  u32 temp_intr_crb_mode;
  u32 temp_rds_crb_mode;
  struct qlcnic_cardrsp_rds_ring *prsp_rds;
  struct qlcnic_cardrsp_sds_ring *prsp_sds;
  struct qlcnic_hostrq_rds_ring *prq_rds;
  struct qlcnic_hostrq_sds_ring *prq_sds;
  struct qlcnic_host_rds_ring *rds_ring;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_cardrsp_rx_ctx *prsp;
  struct qlcnic_hostrq_rx_ctx *prq;
  u8 i;
  u8 nrds_rings;
  u8 nsds_rings;
  struct qlcnic_cmd_args cmd;
  size_t rq_size;
  size_t rsp_size;
  u32 cap;
  u32 reg;
  u32 val;
  u32 reg2;
  u64 phys_addr;
  u16 temp_u16;
  void *addr;
  int err;
  bool tmp;
  bool tmp_0;
  bool tmp_1;
  
#line 238 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 239 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 241 
  struct net_device *netdev = adapter->netdev;
  
#line 260 
  nrds_rings = adapter->max_rds_rings;
  
#line 261 
  nsds_rings = adapter->drv_sds_rings;
  
#line 263 
  rq_size = ((unsigned long)nrds_rings * 24UL + (unsigned long)nsds_rings * 16UL) + 176UL;
  
#line 265 
  rsp_size = (((unsigned long)nrds_rings + (unsigned long)nsds_rings) + 19UL) * 8UL;
  
#line 268 
  addr = dma_alloc_attrs(& (adapter->pdev)->dev,rq_size,& hostrq_phys_addr,208U,(struct dma_attrs *)0);
  
#line 270 
  if (addr == (void *)0) {
    
#line 271 
    __retres = -12;
    
#line 271 
    goto return_label;
  }
  else ;
  
#line 272 
  prq = (struct qlcnic_hostrq_rx_ctx *)addr;
  
#line 274 
  addr = dma_alloc_attrs(& (adapter->pdev)->dev,rsp_size,& cardrsp_phys_addr,208U,(struct dma_attrs *)0);
  
#line 276 
  if (addr == (void *)0) {
    
#line 277 
    err = -12;
    
#line 278 
    goto out_free_rq;
  }
  else ;
  
#line 280 
  prsp = (struct qlcnic_cardrsp_rx_ctx *)addr;
  
#line 282 
  prq->host_rsp_dma_addr = cardrsp_phys_addr;
  
#line 284 
  cap = 2053U;
  
#line 286 
  cap |= 384U;
  
#line 288 
  tmp = qlcnic_check_multi_tx(adapter);
  
#line 288 
  if ((int)tmp != 0) {
    
#line 288 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
#line 290 
                                                       cap |= 4194304U; else 
                                                                    
#line 288 
                                                                    goto _LAND;
  }
  else {
    _LAND: {
             
#line 292 
             temp_u16 = (unsigned short)47U;
             
#line 293 
             prq->valid_field_offset = temp_u16;
             
#line 294 
             prq->txrx_sds_binding = (unsigned char)((unsigned int)nsds_rings + 255U);
             
#line 295 
             temp_intr_crb_mode = 1U;
             
#line 296 
             prq->host_int_crb_mode = temp_intr_crb_mode;
             
#line 297 
             temp_rds_crb_mode = 0U;
             
#line 298 
             prq->host_rds_crb_mode = temp_rds_crb_mode;
           }
  }
  
#line 301 
  prq->capabilities[0] = cap;
  
#line 303 
  prq->num_rds_rings = (unsigned short)nrds_rings;
  
#line 304 
  prq->num_sds_rings = (unsigned short)nsds_rings;
  
#line 305 
  prq->rds_ring_offset = 0U;
  
#line 307 
  val = prq->rds_ring_offset + (unsigned int)nrds_rings * 24U;
  
#line 309 
  prq->sds_ring_offset = val;
  
#line 311 
  prq_rds = (struct qlcnic_hostrq_rds_ring *)(& prq->data) + prq->rds_ring_offset;
  
#line 314 
  i = (unsigned char)0U;
  
#line 314 
  goto ldv_53849;
  ldv_53848: 
#line 315 
  ;
  
#line 315 
  rds_ring = recv_ctx->rds_rings + (int)i;
  
#line 316 
  rds_ring->producer = 0U;
  
#line 317 
  (prq_rds + (int)i)->host_phys_addr = rds_ring->phys_addr;
  
#line 318 
  (prq_rds + (int)i)->ring_size = rds_ring->num_desc;
  
#line 319 
  (prq_rds + (int)i)->ring_kind = (unsigned int)i;
  
#line 320 
  (prq_rds + (int)i)->buff_size = (unsigned long long)rds_ring->dma_size;
  
#line 314 
  i = (u8)((int)i + 1);
  ldv_53849: 
#line 315 
  ;
  
#line 314 
  if ((int)i < (int)nrds_rings) 
#line 316 
                                goto ldv_53848; else 
#line 319 
                                                     goto ldv_53850;
  ldv_53850: 
#line 320 
  ;
  
#line 323 
  prq_sds = (struct qlcnic_hostrq_sds_ring *)(& prq->data) + prq->sds_ring_offset;
  
#line 326 
  i = (unsigned char)0U;
  
#line 326 
  goto ldv_53852;
  ldv_53851: 
#line 327 
  ;
  
#line 327 
  sds_ring = recv_ctx->sds_rings + (int)i;
  
#line 328 
  sds_ring->consumer = 0U;
  
#line 329 
  memset((void *)sds_ring->desc_head,0,(unsigned long)sds_ring->num_desc * 16UL);
  
#line 330 
  (prq_sds + (int)i)->host_phys_addr = sds_ring->phys_addr;
  
#line 331 
  (prq_sds + (int)i)->ring_size = sds_ring->num_desc;
  
#line 332 
  tmp_0 = qlcnic_check_multi_tx(adapter);
  
#line 332 
  if ((int)tmp_0 != 0) 
    
#line 332 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
#line 334 
                                                       (prq_sds + (int)i)->msi_index = (ahw->intr_tbl + (int)i)->id; else 
                                                                    
#line 336 
                                                                    (prq_sds + (int)i)->msi_index = (unsigned short)i;
  else 
#line 336 
       (prq_sds + (int)i)->msi_index = (unsigned short)i;
  
#line 326 
  i = (u8)((int)i + 1);
  ldv_53852: 
#line 327 
  ;
  
#line 326 
  if ((int)i < (int)nsds_rings) 
#line 328 
                                goto ldv_53851; else 
#line 331 
                                                     goto ldv_53853;
  ldv_53853: 
#line 332 
  ;
  
#line 339 
  phys_addr = hostrq_phys_addr;
  
#line 340 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,7U);
  
#line 341 
  if (err != 0) 
#line 342 
                goto out_free_rsp; else ;
  
#line 344 
  *(cmd.req.arg + 1U) = (unsigned int)(phys_addr >> 32);
  
#line 345 
  *(cmd.req.arg + 2U) = (unsigned int)phys_addr;
  
#line 346 
  *(cmd.req.arg + 3U) = (unsigned int)rq_size;
  
#line 347 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 348 
  if (err != 0) {
    
#line 349 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to create rx ctx in firmware%d\n",err);
    
#line 351 
    goto out_free_rsp;
  }
  else ;
  
#line 354 
  prsp_rds = (struct qlcnic_cardrsp_rds_ring *)(& prsp->data[prsp->rds_ring_offset]);
  
#line 357 
  i = (unsigned char)0U;
  
#line 357 
  goto ldv_53856;
  ldv_53855: 
#line 358 
  ;
  
#line 358 
  rds_ring = recv_ctx->rds_rings + (int)i;
  
#line 359 
  reg = (prsp_rds + (int)i)->host_producer_crb;
  
#line 360 
  rds_ring->crb_rcv_producer = ahw->pci_base0 + reg;
  
#line 357 
  i = (u8)((int)i + 1);
  ldv_53856: 
#line 358 
  ;
  
#line 357 
  if ((int)((unsigned short)i) < (int)prsp->num_rds_rings) 
#line 359 
                                                           goto ldv_53855; else 
                                                                    
#line 362 
                                                                    goto ldv_53857;
  ldv_53857: 
#line 363 
  ;
  
#line 363 
  prsp_sds = (struct qlcnic_cardrsp_sds_ring *)(& prsp->data[prsp->sds_ring_offset]);
  
#line 366 
  i = (unsigned char)0U;
  
#line 366 
  goto ldv_53859;
  ldv_53858: 
#line 367 
  ;
  
#line 367 
  sds_ring = recv_ctx->sds_rings + (int)i;
  
#line 368 
  reg = (prsp_sds + (int)i)->host_consumer_crb;
  
#line 369 
  tmp_1 = qlcnic_check_multi_tx(adapter);
  
#line 369 
  if ((int)tmp_1 != 0) 
    
#line 369 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
#line 370 
                                                       reg2 = (ahw->intr_tbl + (int)i)->src; else 
                                                                    
#line 372 
                                                                    reg2 = (prsp_sds + (int)i)->interrupt_crb;
  else 
#line 372 
       reg2 = (prsp_sds + (int)i)->interrupt_crb;
  
#line 374 
  sds_ring->crb_intr_mask = ahw->pci_base0 + reg2;
  
#line 375 
  sds_ring->crb_sts_consumer = ahw->pci_base0 + reg;
  
#line 366 
  i = (u8)((int)i + 1);
  ldv_53859: 
#line 367 
  ;
  
#line 366 
  if ((int)((unsigned short)i) < (int)prsp->num_sds_rings) 
#line 368 
                                                           goto ldv_53858; else 
                                                                    
#line 371 
                                                                    goto ldv_53860;
  ldv_53860: 
#line 372 
  ;
  
#line 378 
  recv_ctx->state = prsp->host_ctx_state;
  
#line 379 
  recv_ctx->context_id = prsp->context_id;
  
#line 380 
  recv_ctx->virt_port = (unsigned short)prsp->virt_port;
  
#line 382 
  netdev_info((struct net_device const *)netdev,"Rx Context[%d] Created, state 0x%x\n",(int)recv_ctx->context_id,recv_ctx->state);
  
#line 384 
  qlcnic_free_mbx_args(& cmd);
  out_free_rsp: 
#line 386 
  ;
  
#line 387 
  dma_free_attrs(& (adapter->pdev)->dev,rsp_size,(void *)prsp,cardrsp_phys_addr,(struct dma_attrs *)0);
  out_free_rq: 
#line 389 
  ;
  
#line 390 
  dma_free_attrs(& (adapter->pdev)->dev,rq_size,(void *)prq,hostrq_phys_addr,(struct dma_attrs *)0);
  
#line 392 
  __retres = err;
  return_label: 
#line 392 
                return __retres;
}


#line 395  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
void qlcnic_82xx_fw_cmd_del_rx_ctx(struct qlcnic_adapter *adapter)
{
  int err;
  struct qlcnic_cmd_args cmd;
  
#line 399 
  struct qlcnic_recv_context *recv_ctx = adapter->recv_ctx;
  
#line 401 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,8U);
  
#line 402 
  if (err != 0) 
#line 403 
                goto return_label; else ;
  
#line 405 
  *(cmd.req.arg + 1U) = (unsigned int)recv_ctx->context_id;
  
#line 406 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 407 
  if (err != 0) 
#line 408 
                dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to destroy rx ctx in firmware\n"); else ;
  
#line 411 
  recv_ctx->state = 0U;
  
#line 412 
  qlcnic_free_mbx_args(& cmd);
  return_label: 
#line 413 
                return;
}


#line 415  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_fw_cmd_create_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring, int ring)
{
  int __retres;
  struct qlcnic_hostrq_tx_ctx *prq;
  struct qlcnic_hostrq_cds_ring *prq_cds;
  struct qlcnic_cardrsp_tx_ctx *prsp;
  struct qlcnic_cmd_args cmd;
  u32 temp;
  u32 intr_mask;
  u32 temp_int_crb_mode;
  dma_addr_t rq_phys_addr;
  dma_addr_t rsp_phys_addr;
  int temp_nsds_rings;
  int index;
  int err;
  void *rq_addr;
  void *rsp_addr;
  size_t rq_size;
  size_t rsp_size;
  u64 phys_addr;
  u16 msix_id;
  bool tmp;
  bool tmp_0;
  
#line 419 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 420 
  struct net_device *netdev = adapter->netdev;
  
#line 434 
  tx_ring->producer = 0U;
  
#line 435 
  tx_ring->sw_consumer = 0U;
  
#line 436 
  *(tx_ring->hw_consumer) = 0U;
  
#line 438 
  rq_size = 200UL;
  
#line 439 
  rq_addr = dma_zalloc_coherent(& (adapter->pdev)->dev,rq_size,& rq_phys_addr,208U);
  
#line 441 
  if (rq_addr == (void *)0) {
    
#line 442 
    __retres = -12;
    
#line 442 
    goto return_label;
  }
  else ;
  
#line 444 
  rsp_size = 144UL;
  
#line 445 
  rsp_addr = dma_zalloc_coherent(& (adapter->pdev)->dev,rsp_size,& rsp_phys_addr,208U);
  
#line 447 
  if (rsp_addr == (void *)0) {
    
#line 448 
    err = -12;
    
#line 449 
    goto out_free_rq;
  }
  else ;
  
#line 452 
  prq = (struct qlcnic_hostrq_tx_ctx *)rq_addr;
  
#line 453 
  prsp = (struct qlcnic_cardrsp_tx_ctx *)rsp_addr;
  
#line 455 
  prq->host_rsp_dma_addr = rsp_phys_addr;
  
#line 457 
  temp = 69U;
  
#line 459 
  tmp = qlcnic_check_multi_tx(adapter);
  
#line 459 
  if ((int)tmp != 0) {
    
#line 459 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
#line 460 
                                                       temp |= 4194304U; else ;
  }
  else ;
  
#line 462 
  prq->capabilities[0] = temp;
  
#line 464 
  tmp_0 = qlcnic_check_multi_tx(adapter);
  
#line 464 
  if ((int)tmp_0 != 0) {
    
#line 464 
    if ((unsigned int)(adapter->ahw)->diag_test == 0U) {
      
#line 466 
      temp_nsds_rings = (int)adapter->drv_sds_rings;
      
#line 467 
      index = temp_nsds_rings + ring;
      
#line 468 
      msix_id = (ahw->intr_tbl + index)->id;
      
#line 469 
      prq->msi_index = msix_id;
    }
    else 
#line 464 
         goto _LAND;
  }
  else {
    _LAND: {
             
#line 471 
             temp_int_crb_mode = 1U;
             
#line 472 
             prq->host_int_crb_mode = temp_int_crb_mode;
             
#line 473 
             prq->msi_index = (unsigned short)0U;
           }
  }
  
#line 476 
  prq->interrupt_ctl = (unsigned short)0U;
  
#line 477 
  prq->cmd_cons_dma_addr = tx_ring->hw_cons_phys_addr;
  
#line 479 
  prq_cds = & prq->cds_ring;
  
#line 481 
  prq_cds->host_phys_addr = tx_ring->phys_addr;
  
#line 482 
  prq_cds->ring_size = tx_ring->num_desc;
  
#line 484 
  phys_addr = rq_phys_addr;
  
#line 486 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,9U);
  
#line 487 
  if (err != 0) 
#line 488 
                goto out_free_rsp; else ;
  
#line 490 
  *(cmd.req.arg + 1U) = (unsigned int)(phys_addr >> 32);
  
#line 491 
  *(cmd.req.arg + 2U) = (unsigned int)phys_addr;
  
#line 492 
  *(cmd.req.arg + 3U) = (unsigned int)rq_size;
  
#line 493 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 495 
  if (err == 0) {
    bool tmp_1;
    
#line 496 
    tx_ring->state = prsp->host_ctx_state;
    
#line 497 
    temp = prsp->cds_ring.host_producer_crb;
    
#line 498 
    tx_ring->crb_cmd_producer = (adapter->ahw)->pci_base0 + temp;
    
#line 499 
    tx_ring->ctx_id = prsp->context_id;
    
#line 500 
    tmp_1 = qlcnic_check_multi_tx(adapter);
    
#line 500 
    if ((int)tmp_1 != 0) {
      
#line 500 
      if ((unsigned int)(adapter->ahw)->diag_test == 0U) {
        
#line 501 
        if ((adapter->flags & 4U) != 0U) {
          
#line 503 
          index = (int)adapter->drv_sds_rings + ring;
          
#line 504 
          intr_mask = (ahw->intr_tbl + index)->src;
          
#line 505 
          tx_ring->crb_intr_mask = ahw->pci_base0 + intr_mask;
        }
        else ;
      }
      else ;
    }
    else ;
    
#line 508 
    netdev_info((struct net_device const *)netdev,"Tx Context[0x%x] Created, state 0x%x\n",(int)tx_ring->ctx_id,tx_ring->state);
  }
  else {
    
#line 511 
    netdev_err((struct net_device const *)netdev,"Failed to create tx ctx in firmware%d\n",err);
    
#line 513 
    err = -5;
  }
  
#line 515 
  qlcnic_free_mbx_args(& cmd);
  out_free_rsp: 
#line 517 
  ;
  
#line 518 
  dma_free_attrs(& (adapter->pdev)->dev,rsp_size,rsp_addr,rsp_phys_addr,(struct dma_attrs *)0);
  out_free_rq: 
#line 520 
  ;
  
#line 521 
  dma_free_attrs(& (adapter->pdev)->dev,rq_size,rq_addr,rq_phys_addr,(struct dma_attrs *)0);
  
#line 523 
  __retres = err;
  return_label: 
#line 523 
                return __retres;
}


#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
void qlcnic_82xx_fw_cmd_del_tx_ctx(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  struct qlcnic_cmd_args cmd;
  int ret;
  int tmp;
  
#line 532 
  ret = qlcnic_alloc_mbx_args(& cmd,adapter,10U);
  
#line 533 
  if (ret != 0) 
#line 534 
                goto return_label; else ;
  
#line 536 
  *(cmd.req.arg + 1U) = (unsigned int)tx_ring->ctx_id;
  
#line 537 
  tmp = qlcnic_issue_cmd(adapter,& cmd);
  
#line 537 
  if (tmp != 0) 
#line 538 
                dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to destroy tx ctx in firmware\n"); else ;
  
#line 540 
  qlcnic_free_mbx_args(& cmd);
  return_label: 
#line 541 
                return;
}


#line 544  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_fw_cmd_set_port(struct qlcnic_adapter *adapter, u32 config)
{
  int __retres;
  int err;
  struct qlcnic_cmd_args cmd;
  
#line 549 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,46U);
  
#line 550 
  if (err != 0) {
    
#line 551 
    __retres = err;
    
#line 551 
    goto return_label;
  }
  else ;
  
#line 553 
  *(cmd.req.arg + 1U) = config;
  
#line 554 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 555 
  qlcnic_free_mbx_args(& cmd);
  
#line 556 
  __retres = err;
  return_label: 
#line 556 
                return __retres;
}


#line 559  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_alloc_hw_resources(struct qlcnic_adapter *adapter)
{
  int __retres;
  void *addr;
  int err;
  int ring;
  struct qlcnic_recv_context *recv_ctx;
  struct qlcnic_host_rds_ring *rds_ring;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_tx_ring *tx_ring;
  __le32 *ptr;
  
#line 569 
  struct pci_dev *pdev = adapter->pdev;
  
#line 571 
  recv_ctx = adapter->recv_ctx;
  
#line 573 
  ring = 0;
  
#line 573 
  goto ldv_53920;
  ldv_53919: 
#line 574 
  ;
  
#line 574 
  tx_ring = adapter->tx_ring + ring;
  
#line 575 
  ptr = (__le32 *)dma_alloc_attrs(& pdev->dev,4UL,& tx_ring->hw_cons_phys_addr,208U,(struct dma_attrs *)0);
  
#line 578 
  if (ptr == (__le32 *)0U) {
    
#line 579 
    __retres = -12;
    
#line 579 
    goto return_label;
  }
  else ;
  
#line 581 
  tx_ring->hw_consumer = ptr;
  
#line 583 
  addr = dma_alloc_attrs(& pdev->dev,(unsigned long)tx_ring->num_desc * 64UL,& tx_ring->phys_addr,208U,(struct dma_attrs *)0);
  
#line 586 
  if (addr == (void *)0) {
    
#line 587 
    err = -12;
    
#line 588 
    goto err_out_free;
  }
  else ;
  
#line 591 
  tx_ring->desc_head = (struct cmd_desc_type0 *)addr;
  
#line 573 
  ring += 1;
  ldv_53920: 
#line 574 
  ;
  
#line 573 
  if ((int)adapter->drv_tx_rings > ring) 
#line 575 
                                         goto ldv_53919; else 
#line 578 
                                                              goto ldv_53921;
  ldv_53921: 
#line 579 
  ;
  
#line 594 
  ring = 0;
  
#line 594 
  goto ldv_53923;
  ldv_53922: 
#line 595 
  ;
  
#line 595 
  rds_ring = recv_ctx->rds_rings + ring;
  
#line 596 
  addr = dma_alloc_attrs(& (adapter->pdev)->dev,(unsigned long)rds_ring->num_desc * 16UL,& rds_ring->phys_addr,208U,(struct dma_attrs *)0);
  
#line 599 
  if (addr == (void *)0) {
    
#line 600 
    err = -12;
    
#line 601 
    goto err_out_free;
  }
  else ;
  
#line 603 
  rds_ring->desc_head = (struct rcv_desc *)addr;
  
#line 594 
  ring += 1;
  ldv_53923: 
#line 595 
  ;
  
#line 594 
  if ((int)adapter->max_rds_rings > ring) 
#line 596 
                                          goto ldv_53922; else 
#line 599 
                                                               goto ldv_53924;
  ldv_53924: 
#line 600 
  ;
  
#line 607 
  ring = 0;
  
#line 607 
  goto ldv_53926;
  ldv_53925: 
#line 608 
  ;
  
#line 608 
  sds_ring = recv_ctx->sds_rings + ring;
  
#line 610 
  addr = dma_alloc_attrs(& (adapter->pdev)->dev,(unsigned long)sds_ring->num_desc * 16UL,& sds_ring->phys_addr,208U,(struct dma_attrs *)0);
  
#line 613 
  if (addr == (void *)0) {
    
#line 614 
    err = -12;
    
#line 615 
    goto err_out_free;
  }
  else ;
  
#line 617 
  sds_ring->desc_head = (struct status_desc *)addr;
  
#line 607 
  ring += 1;
  ldv_53926: 
#line 608 
  ;
  
#line 607 
  if ((int)adapter->drv_sds_rings > ring) 
#line 609 
                                          goto ldv_53925; else 
#line 612 
                                                               goto ldv_53927;
  ldv_53927: 
#line 613 
  ;
  
#line 620 
  __retres = 0;
  
#line 620 
  goto return_label;
  err_out_free: 
#line 622 
  ;
  
#line 623 
  qlcnic_free_hw_resources(adapter);
  
#line 624 
  __retres = err;
  return_label: 
#line 624 
                return __retres;
}


#line 627  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_fw_create_ctx(struct qlcnic_adapter *dev)
{
  int __retres;
  int i;
  int err;
  int ring;
  bool tmp;
  bool tmp_0;
  bool tmp_2;
  bool tmp_4;
  
#line 631 
  if ((dev->flags & 4096U) != 0U) {
    
#line 632 
    pci_reset_function(dev->pdev);
    
#line 633 
    dev->flags &= 4294963199U;
  }
  else ;
  
#line 636 
  tmp = qlcnic_83xx_check(dev);
  
#line 636 
  if ((int)tmp != 0) {
    
#line 636 
    if ((dev->flags & 4U) != 0U) {
      
#line 637 
      if ((unsigned int)(dev->ahw)->diag_test != 2U) {
        
#line 638 
        err = qlcnic_83xx_config_intrpt(dev,(_Bool)1);
        
#line 639 
        if (err != 0) {
          
#line 640 
          __retres = err;
          
#line 640 
          goto return_label;
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 644 
  tmp_0 = qlcnic_82xx_check(dev);
  
#line 644 
  if ((int)tmp_0 != 0) {
    
#line 644 
    if ((dev->flags & 4U) != 0U) {
      bool tmp_1;
      
#line 644 
      tmp_1 = qlcnic_check_multi_tx(dev);
      
#line 644 
      if ((int)tmp_1 != 0) {
        
#line 645 
        if ((unsigned int)(dev->ahw)->diag_test == 0U) {
          
#line 646 
          err = qlcnic_82xx_mq_intrpt(dev,1);
          
#line 647 
          if (err != 0) {
            
#line 648 
            __retres = err;
            
#line 648 
            goto return_label;
          }
          else ;
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 651 
  err = qlcnic_fw_cmd_create_rx_ctx(dev);
  
#line 652 
  if (err != 0) 
#line 653 
                goto err_out; else ;
  
#line 655 
  ring = 0;
  
#line 655 
  goto ldv_53939;
  ldv_53938: 
#line 656 
  ;
  
#line 656 
  err = qlcnic_fw_cmd_create_tx_ctx(dev,dev->tx_ring + ring,ring);
  
#line 659 
  if (err != 0) {
    
#line 660 
    qlcnic_fw_cmd_del_rx_ctx(dev);
    
#line 661 
    if (ring == 0) 
#line 662 
                   goto err_out; else ;
    
#line 664 
    i = 0;
    
#line 664 
    goto ldv_53936;
    ldv_53935: 
#line 665 
    ;
    
#line 665 
    qlcnic_fw_cmd_del_tx_ctx(dev,dev->tx_ring + i);
    
#line 664 
    i += 1;
    ldv_53936: 
#line 665 
    ;
    
#line 664 
    if (i < ring) 
#line 666 
                  goto ldv_53935; else 
#line 669 
                                       goto ldv_53937;
    ldv_53937: 
#line 670 
    ;
    
#line 667 
    goto err_out;
  }
  else ;
  
#line 655 
  ring += 1;
  ldv_53939: 
#line 656 
  ;
  
#line 655 
  if ((int)dev->drv_tx_rings > ring) 
#line 657 
                                     goto ldv_53938; else 
#line 660 
                                                          goto ldv_53940;
  ldv_53940: 
#line 661 
  ;
  
#line 671 
  set_bit(0L,(unsigned long volatile *)(& dev->state));
  
#line 673 
  __retres = 0;
  
#line 673 
  goto return_label;
  err_out: 
#line 675 
  ;
  
#line 676 
  tmp_2 = qlcnic_82xx_check(dev);
  
#line 676 
  if ((int)tmp_2 != 0) {
    
#line 676 
    if ((dev->flags & 4U) != 0U) {
      bool tmp_3;
      
#line 676 
      tmp_3 = qlcnic_check_multi_tx(dev);
      
#line 676 
      if ((int)tmp_3 != 0) {
        
#line 677 
        if ((unsigned int)(dev->ahw)->diag_test == 0U) 
#line 678 
                                                       qlcnic_82xx_config_intrpt(dev,(unsigned char)0); else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 680 
  tmp_4 = qlcnic_83xx_check(dev);
  
#line 680 
  if ((int)tmp_4 != 0) {
    
#line 680 
    if ((dev->flags & 4U) != 0U) {
      
#line 681 
      if ((unsigned int)(dev->ahw)->diag_test != 2U) 
#line 682 
                                                     qlcnic_83xx_config_intrpt(dev,(_Bool)0); else ;
    }
    else ;
  }
  else ;
  
#line 685 
  __retres = err;
  return_label: 
#line 685 
                return __retres;
}


#line 688  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
void qlcnic_fw_destroy_ctx(struct qlcnic_adapter *adapter)
{
  int ring;
  int tmp_3;
  
#line 692 
  tmp_3 = test_and_set_bit(0L,(unsigned long volatile *)(& adapter->state));
  
#line 692 
  if (tmp_3 != 0) {
    bool tmp;
    bool tmp_1;
    
#line 693 
    qlcnic_fw_cmd_del_rx_ctx(adapter);
    
#line 694 
    ring = 0;
    
#line 694 
    goto ldv_53946;
    ldv_53945: 
#line 695 
    ;
    
#line 695 
    qlcnic_fw_cmd_del_tx_ctx(adapter,adapter->tx_ring + ring);
    
#line 694 
    ring += 1;
    ldv_53946: 
#line 695 
    ;
    
#line 694 
    if ((int)adapter->drv_tx_rings > ring) 
#line 696 
                                           goto ldv_53945; else 
#line 699 
                                                                goto ldv_53947;
    ldv_53947: 
#line 700 
    ;
    
#line 698 
    tmp = qlcnic_82xx_check(adapter);
    
#line 698 
    if ((int)tmp != 0) {
      
#line 698 
      if ((adapter->flags & 4U) != 0U) {
        bool tmp_0;
        
#line 699 
        tmp_0 = qlcnic_check_multi_tx(adapter);
        
#line 699 
        if ((int)tmp_0 != 0) {
          
#line 700 
          if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
#line 702 
                                                             qlcnic_82xx_config_intrpt(adapter,(unsigned char)0); else ;
        }
        else ;
      }
      else ;
    }
    else ;
    
#line 704 
    tmp_1 = qlcnic_83xx_check(adapter);
    
#line 704 
    if ((int)tmp_1 != 0) {
      
#line 704 
      if ((adapter->flags & 4U) != 0U) {
        
#line 706 
        if ((unsigned int)(adapter->ahw)->diag_test != 2U) 
#line 707 
                                                           qlcnic_83xx_config_intrpt(adapter,(_Bool)0); else ;
      }
      else ;
    }
    else ;
    {
      
#line 710 
      unsigned long __ms = 20UL;
      {
        unsigned long tmp_2;
        
#line 710 
        goto ldv_53950;
        ldv_53949: 
#line 711 
        ;
        
#line 710 
        __const_udelay(4295000UL);
        ldv_53950: 
#line 712 
        ;
        
#line 710 
        tmp_2 = __ms;
        
#line 710 
        __ms -= 1UL;
        
#line 710 
        ;
        
#line 710 
        if (tmp_2 != 0UL) 
#line 712 
                          goto ldv_53949; else 
#line 715 
                                               goto ldv_53951;
        ldv_53951: 
#line 716 
        ;
      }
    }
  }
  else ;
  
#line 720 
  return;
}


#line 714  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
void qlcnic_free_hw_resources(struct qlcnic_adapter *adapter)
{
  struct qlcnic_recv_context *recv_ctx;
  struct qlcnic_host_rds_ring *rds_ring;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_host_tx_ring *tx_ring;
  int ring;
  
#line 722 
  recv_ctx = adapter->recv_ctx;
  
#line 724 
  ring = 0;
  
#line 724 
  goto ldv_53961;
  ldv_53960: 
#line 725 
  ;
  
#line 725 
  tx_ring = adapter->tx_ring + ring;
  
#line 726 
  if (tx_ring->hw_consumer != (__le32 *)0U) {
    
#line 727 
    dma_free_attrs(& (adapter->pdev)->dev,4UL,(void *)tx_ring->hw_consumer,tx_ring->hw_cons_phys_addr,(struct dma_attrs *)0);
    
#line 731 
    tx_ring->hw_consumer = (__le32 *)0U;
  }
  else ;
  
#line 734 
  if (tx_ring->desc_head != (struct cmd_desc_type0 *)0) {
    
#line 735 
    dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)tx_ring->num_desc * 64UL,(void *)tx_ring->desc_head,tx_ring->phys_addr,(struct dma_attrs *)0);
    
#line 739 
    tx_ring->desc_head = (struct cmd_desc_type0 *)0;
  }
  else ;
  
#line 724 
  ring += 1;
  ldv_53961: 
#line 725 
  ;
  
#line 724 
  if ((int)adapter->drv_tx_rings > ring) 
#line 726 
                                         goto ldv_53960; else 
#line 729 
                                                              goto ldv_53962;
  ldv_53962: 
#line 730 
  ;
  
#line 743 
  ring = 0;
  
#line 743 
  goto ldv_53964;
  ldv_53963: 
#line 744 
  ;
  
#line 744 
  rds_ring = recv_ctx->rds_rings + ring;
  
#line 746 
  if (rds_ring->desc_head != (struct rcv_desc *)0) {
    
#line 747 
    dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)rds_ring->num_desc * 16UL,(void *)rds_ring->desc_head,rds_ring->phys_addr,(struct dma_attrs *)0);
    
#line 751 
    rds_ring->desc_head = (struct rcv_desc *)0;
  }
  else ;
  
#line 743 
  ring += 1;
  ldv_53964: 
#line 744 
  ;
  
#line 743 
  if ((int)adapter->max_rds_rings > ring) 
#line 745 
                                          goto ldv_53963; else 
#line 748 
                                                               goto ldv_53965;
  ldv_53965: 
#line 749 
  ;
  
#line 755 
  ring = 0;
  
#line 755 
  goto ldv_53967;
  ldv_53966: 
#line 756 
  ;
  
#line 756 
  sds_ring = recv_ctx->sds_rings + ring;
  
#line 758 
  if (sds_ring->desc_head != (struct status_desc *)0) {
    
#line 759 
    dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)sds_ring->num_desc * 16UL,(void *)sds_ring->desc_head,sds_ring->phys_addr,(struct dma_attrs *)0);
    
#line 763 
    sds_ring->desc_head = (struct status_desc *)0;
  }
  else ;
  
#line 755 
  ring += 1;
  ldv_53967: 
#line 756 
  ;
  
#line 755 
  if ((int)adapter->drv_sds_rings > ring) 
#line 757 
                                          goto ldv_53966; else 
#line 760 
                                                               goto ldv_53968;
  ldv_53968: 
#line 761 
  ;
  
#line 762 
  return;
}


#line 768  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_config_intrpt(struct qlcnic_adapter *adapter, u8 op_type)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  u32 type;
  u32 val;
  int i;
  int tmp;
  
#line 770 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 771 
  struct net_device *netdev = adapter->netdev;
  
#line 774 
  int err = 0;
  
#line 776 
  i = 0;
  
#line 776 
  goto ldv_53982;
  ldv_53981: 
#line 777 
  ;
  
#line 777 
  qlcnic_alloc_mbx_args(& cmd,adapter,57U);
  
#line 779 
  if ((unsigned int)op_type != 0U) 
#line 779 
                                   tmp = 1; else 
#line 779 
                                                 tmp = 2;
  
#line 779 
  type = (unsigned int)tmp;
  
#line 780 
  val = (unsigned int)((int)(ahw->intr_tbl + i)->type << 4) | type;
  
#line 781 
  if ((unsigned int)(ahw->intr_tbl + i)->type == 3U) 
#line 782 
                                                     val = (unsigned int)((int)(ahw->intr_tbl + i)->id << 16) | val; else ;
  
#line 783 
  *(cmd.req.arg + 1U) = val;
  
#line 784 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 785 
  if (err != 0) {
    char *tmp_0;
    
#line 786 
    ;
    
#line 786 
    if ((unsigned int)op_type == 1U) 
#line 786 
                                     tmp_0 = (char *)"Add"; else 
#line 786 
                                                                 tmp_0 = (char *)"Delete";
    
#line 786 
    ;
    
#line 786 
    netdev_err((struct net_device const *)netdev,"Failed to %s interrupts %d\n",tmp_0,err);
    
#line 789 
    qlcnic_free_mbx_args(& cmd);
    
#line 790 
    __retres = err;
    
#line 790 
    goto return_label;
  }
  else ;
  
#line 792 
  val = *(cmd.rsp.arg + 1U);
  
#line 793 
  if ((unsigned int)((unsigned char)val) != 0U) {
    
#line 794 
    netdev_info((struct net_device const *)netdev,"failed to configure interrupt for %d\n",(int)(ahw->intr_tbl + i)->id);
    
#line 797 
    goto ldv_53980;
  }
  else ;
  
#line 799 
  if ((unsigned int)op_type != 0U) {
    
#line 800 
    (ahw->intr_tbl + i)->id = (unsigned short)(val >> 16);
    
#line 801 
    (ahw->intr_tbl + i)->enabled = (unsigned char)1U;
    
#line 802 
    (ahw->intr_tbl + i)->src = *(cmd.rsp.arg + 2U);
  }
  else {
    
#line 804 
    (ahw->intr_tbl + i)->id = (unsigned short)i;
    
#line 805 
    (ahw->intr_tbl + i)->enabled = (unsigned char)0U;
    
#line 806 
    (ahw->intr_tbl + i)->src = 0U;
  }
  
#line 808 
  qlcnic_free_mbx_args(& cmd);
  ldv_53980: 
#line 809 
  ;
  
#line 776 
  i += 1;
  ldv_53982: 
#line 777 
  ;
  
#line 776 
  if ((int)ahw->num_msix > i) 
#line 778 
                              goto ldv_53981; else 
#line 781 
                                                   goto ldv_53983;
  ldv_53983: 
#line 782 
  ;
  
#line 811 
  __retres = err;
  return_label: 
#line 811 
                return __retres;
}


#line 814  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_get_mac_address(struct qlcnic_adapter *adapter, u8 *mac, u8 function)
{
  int __retres;
  int err;
  int i;
  struct qlcnic_cmd_args cmd;
  u32 mac_low;
  u32 mac_high;
  
#line 821 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,31U);
  
#line 822 
  if (err != 0) {
    
#line 823 
    __retres = err;
    
#line 823 
    goto return_label;
  }
  else ;
  
#line 825 
  *(cmd.req.arg + 1U) = (unsigned int)((int)function | 256);
  
#line 826 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 828 
  if (err == 0) {
    
#line 829 
    mac_low = *(cmd.rsp.arg + 1U);
    
#line 830 
    mac_high = *(cmd.rsp.arg + 2U);
    
#line 832 
    i = 0;
    
#line 832 
    goto ldv_53995;
    ldv_53994: 
#line 833 
    ;
    
#line 833 
    *(mac + i) = (unsigned char)(mac_high >> (1 - i) * 8);
    
#line 832 
    i += 1;
    ldv_53995: 
#line 833 
    ;
    
#line 832 
    if (i <= 1) 
#line 834 
                goto ldv_53994; else 
#line 837 
                                     goto ldv_53996;
    ldv_53996: 
#line 838 
    ;
    
#line 834 
    i = 2;
    
#line 834 
    goto ldv_53998;
    ldv_53997: 
#line 835 
    ;
    
#line 835 
    *(mac + i) = (unsigned char)(mac_low >> (5 - i) * 8);
    
#line 834 
    i += 1;
    ldv_53998: 
#line 835 
    ;
    
#line 834 
    if (i <= 5) 
#line 836 
                goto ldv_53997; else 
#line 839 
                                     goto ldv_53999;
    ldv_53999: 
#line 840 
    ;
  }
  else {
    
#line 837 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to get mac address%d\n",err);
    
#line 839 
    err = -5;
  }
  
#line 841 
  qlcnic_free_mbx_args(& cmd);
  
#line 842 
  __retres = err;
  return_label: 
#line 842 
                return __retres;
}


#line 846  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_get_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info, u8 func_id)
{
  int __retres;
  int err;
  dma_addr_t nic_dma_t;
  struct qlcnic_info_le const *nic_info;
  void *nic_info_addr;
  struct qlcnic_cmd_args cmd;
  
#line 854 
  size_t nic_size = 128UL;
  
#line 856 
  nic_info_addr = dma_zalloc_coherent(& (adapter->pdev)->dev,nic_size,& nic_dma_t,208U);
  
#line 858 
  if (nic_info_addr == (void *)0) {
    
#line 859 
    __retres = -12;
    
#line 859 
    goto return_label;
  }
  else ;
  
#line 861 
  nic_info = (struct qlcnic_info_le const *)nic_info_addr;
  
#line 863 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,33U);
  
#line 864 
  if (err != 0) 
#line 865 
                goto out_free_dma; else ;
  
#line 867 
  *(cmd.req.arg + 1U) = (unsigned int)(nic_dma_t >> 32);
  
#line 868 
  *(cmd.req.arg + 2U) = (unsigned int)nic_dma_t;
  
#line 869 
  *(cmd.req.arg + 3U) = (unsigned int)((int)func_id << 16) | (unsigned int)nic_size;
  
#line 870 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 871 
  if (err != 0) {
    
#line 872 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to get nic info%d\n",err);
    
#line 874 
    err = -5;
  }
  else {
    
#line 876 
    npar_info->pci_func = nic_info->pci_func;
    
#line 877 
    npar_info->op_mode = nic_info->op_mode;
    
#line 878 
    npar_info->min_tx_bw = nic_info->min_tx_bw;
    
#line 879 
    npar_info->max_tx_bw = nic_info->max_tx_bw;
    
#line 880 
    npar_info->phys_port = nic_info->phys_port;
    
#line 881 
    npar_info->switch_mode = nic_info->switch_mode;
    
#line 882 
    npar_info->max_tx_ques = nic_info->max_tx_ques;
    
#line 883 
    npar_info->max_rx_ques = nic_info->max_rx_ques;
    
#line 884 
    npar_info->capabilities = nic_info->capabilities;
    
#line 885 
    npar_info->max_mtu = nic_info->max_mtu;
  }
  
#line 888 
  qlcnic_free_mbx_args(& cmd);
  out_free_dma: 
#line 889 
  ;
  
#line 890 
  dma_free_attrs(& (adapter->pdev)->dev,nic_size,nic_info_addr,nic_dma_t,(struct dma_attrs *)0);
  
#line 893 
  __retres = err;
  return_label: 
#line 893 
                return __retres;
}


#line 897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_set_nic_info(struct qlcnic_adapter *adapter, struct qlcnic_info *nic)
{
  int __retres;
  dma_addr_t nic_dma_t;
  void *nic_info_addr;
  struct qlcnic_cmd_args cmd;
  struct qlcnic_info_le *nic_info;
  
#line 900 
  int err = -5;
  
#line 905 
  size_t nic_size = 128UL;
  
#line 907 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U) {
    
#line 908 
    __retres = err;
    
#line 908 
    goto return_label;
  }
  else ;
  
#line 910 
  nic_info_addr = dma_zalloc_coherent(& (adapter->pdev)->dev,nic_size,& nic_dma_t,208U);
  
#line 912 
  if (nic_info_addr == (void *)0) {
    
#line 913 
    __retres = -12;
    
#line 913 
    goto return_label;
  }
  else ;
  
#line 915 
  nic_info = (struct qlcnic_info_le *)nic_info_addr;
  
#line 917 
  nic_info->pci_func = nic->pci_func;
  
#line 918 
  nic_info->op_mode = nic->op_mode;
  
#line 919 
  nic_info->phys_port = nic->phys_port;
  
#line 920 
  nic_info->switch_mode = nic->switch_mode;
  
#line 921 
  nic_info->capabilities = nic->capabilities;
  
#line 922 
  nic_info->max_mac_filters = nic->max_mac_filters;
  
#line 923 
  nic_info->max_tx_ques = nic->max_tx_ques;
  
#line 924 
  nic_info->max_rx_ques = nic->max_rx_ques;
  
#line 925 
  nic_info->min_tx_bw = nic->min_tx_bw;
  
#line 926 
  nic_info->max_tx_bw = nic->max_tx_bw;
  
#line 928 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,34U);
  
#line 929 
  if (err != 0) 
#line 930 
                goto out_free_dma; else ;
  
#line 932 
  *(cmd.req.arg + 1U) = (unsigned int)(nic_dma_t >> 32);
  
#line 933 
  *(cmd.req.arg + 2U) = (unsigned int)nic_dma_t;
  
#line 934 
  *(cmd.req.arg + 3U) = (unsigned int)((int)nic->pci_func << 16) | (unsigned int)nic_size;
  
#line 935 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 937 
  if (err != 0) {
    
#line 938 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to set nic info%d\n",err);
    
#line 940 
    err = -5;
  }
  else ;
  
#line 943 
  qlcnic_free_mbx_args(& cmd);
  out_free_dma: 
#line 944 
  ;
  
#line 945 
  dma_free_attrs(& (adapter->pdev)->dev,nic_size,nic_info_addr,nic_dma_t,(struct dma_attrs *)0);
  
#line 948 
  __retres = err;
  return_label: 
#line 948 
                return __retres;
}


#line 952  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_82xx_get_pci_info(struct qlcnic_adapter *adapter, struct qlcnic_pci_info *pci_info)
{
  int __retres;
  struct qlcnic_pci_info_le *npar;
  struct qlcnic_cmd_args cmd;
  dma_addr_t pci_info_dma_t;
  void *pci_info_addr;
  int i;
  
#line 955 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 956 
  size_t npar_size = 128UL;
  
#line 957 
  size_t pci_size = (unsigned long)ahw->max_vnic_func * npar_size;
  
#line 958 
  u16 nic = (unsigned short)0U;
  
#line 958 
  u16 fcoe = (unsigned short)0U;
  
#line 958 
  u16 iscsi = (unsigned short)0U;
  
#line 963 
  int err = 0;
  
#line 965 
  pci_info_addr = dma_zalloc_coherent(& (adapter->pdev)->dev,pci_size,& pci_info_dma_t,208U);
  
#line 967 
  if (pci_info_addr == (void *)0) {
    
#line 968 
    __retres = -12;
    
#line 968 
    goto return_label;
  }
  else ;
  
#line 970 
  npar = (struct qlcnic_pci_info_le *)pci_info_addr;
  
#line 971 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,32U);
  
#line 972 
  if (err != 0) 
#line 973 
                goto out_free_dma; else ;
  
#line 975 
  *(cmd.req.arg + 1U) = (unsigned int)(pci_info_dma_t >> 32);
  
#line 976 
  *(cmd.req.arg + 2U) = (unsigned int)pci_info_dma_t;
  
#line 977 
  *(cmd.req.arg + 3U) = (unsigned int)pci_size;
  
#line 978 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 980 
  ahw->total_nic_func = (unsigned short)0U;
  
#line 981 
  if (err == 0) {
    
#line 982 
    i = 0;
    
#line 982 
    goto ldv_54042;
    ldv_54041: 
#line 983 
    ;
    
#line 983 
    pci_info->id = npar->id;
    
#line 984 
    pci_info->active = npar->active;
    
#line 985 
    if ((unsigned int)pci_info->active == 0U) 
#line 986 
                                              goto ldv_54040; else ;
    
#line 987 
    pci_info->type = npar->type;
    
#line 988 
    err = qlcnic_get_pci_func_type(adapter,(unsigned short)((int)pci_info->type),& nic,& fcoe,& iscsi);
    
#line 990 
    pci_info->default_port = npar->default_port;
    
#line 992 
    pci_info->tx_min_bw = npar->tx_min_bw;
    
#line 994 
    pci_info->tx_max_bw = npar->tx_max_bw;
    
#line 996 
    memcpy((void *)(& pci_info->mac),(void const *)(& npar->mac),6UL);
    ldv_54040: 
#line 997 
    ;
    
#line 982 
    i += 1;
    
#line 982 
    npar += 1;
    
#line 982 
    pci_info += 1;
    ldv_54042: 
#line 983 
    ;
    
#line 982 
    if (ahw->max_vnic_func > (unsigned int)i) 
#line 984 
                                              goto ldv_54041; else 
#line 987 
                                                                   goto ldv_54043;
    ldv_54043: 
#line 988 
    ;
  }
  else {
    
#line 999 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to get PCI Info%d\n",err);
    
#line 1001 
    err = -5;
  }
  
#line 1004 
  ahw->total_nic_func = nic;
  
#line 1005 
  ahw->total_pci_func = (unsigned int)(((int)nic + (int)fcoe) + (int)iscsi);
  
#line 1006 
  if ((unsigned int)ahw->total_nic_func == 0U || ahw->total_pci_func == 0U) {
    
#line 1007 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Invalid function count: total nic func[%x], total pci func[%x]\n","qlcnic_82xx_get_pci_info",(int)ahw->total_nic_func,ahw->total_pci_func);
    
#line 1010 
    err = -5;
  }
  else ;
  
#line 1012 
  qlcnic_free_mbx_args(& cmd);
  out_free_dma: 
#line 1013 
  ;
  
#line 1014 
  dma_free_attrs(& (adapter->pdev)->dev,pci_size,pci_info_addr,pci_info_dma_t,(struct dma_attrs *)0);
  
#line 1017 
  __retres = err;
  return_label: 
#line 1017 
                return __retres;
}


#line 1021  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_config_port_mirroring(struct qlcnic_adapter *adapter, u8 id, u8 enable_mirroring, u8 pci_func)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  u32 arg1;
  int tmp;
  
#line 1024 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1026 
  int err = -5;
  
#line 1029 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U || ((adapter->eswitch + (int)id)->flags & 2U) == 0U) {
    
#line 1031 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Not a management function\n","qlcnic_config_port_mirroring");
    
#line 1033 
    __retres = err;
    
#line 1033 
    goto return_label;
  }
  else ;
  
#line 1036 
  if ((unsigned int)enable_mirroring != 0U) 
#line 1036 
                                            tmp = 16; else 
#line 1036 
                                                           tmp = 0;
  
#line 1036 
  arg1 = (unsigned int)((int)id | tmp);
  
#line 1037 
  arg1 = (unsigned int)((int)pci_func << 8) | arg1;
  
#line 1039 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,39U);
  
#line 1041 
  if (err != 0) {
    
#line 1042 
    __retres = err;
    
#line 1042 
    goto return_label;
  }
  else ;
  
#line 1044 
  *(cmd.req.arg + 1U) = arg1;
  
#line 1045 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1047 
  if (err != 0) 
#line 1048 
                dev_err((struct device const *)dev,"Failed to configure port mirroring for vNIC function %d on eSwitch %d\n",(int)pci_func,(int)id); else 
                                                                    
#line 1051 
                                                                    _dev_info((struct device const *)dev,"Configured port mirroring for vNIC function %d on eSwitch %d\n",(int)pci_func,(int)id);
  
#line 1053 
  qlcnic_free_mbx_args(& cmd);
  
#line 1055 
  __retres = err;
  return_label: 
#line 1055 
                return __retres;
}


#line 1058  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_get_port_stats(struct qlcnic_adapter *adapter, u8 const func, u8 const rx_tx, struct __qlcnic_esw_statistics *esw_stats)
{
  int __retres;
  struct qlcnic_esw_stats_le *stats;
  dma_addr_t stats_dma_t;
  void *stats_addr;
  u32 arg1;
  struct qlcnic_cmd_args cmd;
  int err;
  
#line 1061 
  size_t stats_size = 88UL;
  
#line 1069 
  if (esw_stats == (struct __qlcnic_esw_statistics *)0) {
    
#line 1070 
    __retres = -12;
    
#line 1070 
    goto return_label;
  }
  else ;
  
#line 1072 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U && (int)(adapter->ahw)->pci_func != (int)func) {
    
#line 1074 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Not privilege to query stats for func=%d",(int)func);
    
#line 1076 
    __retres = -5;
    
#line 1076 
    goto return_label;
  }
  else ;
  
#line 1079 
  stats_addr = dma_zalloc_coherent(& (adapter->pdev)->dev,stats_size,& stats_dma_t,208U);
  
#line 1081 
  if (stats_addr == (void *)0) {
    
#line 1082 
    __retres = -12;
    
#line 1082 
    goto return_label;
  }
  else ;
  
#line 1084 
  arg1 = (unsigned int)((int)func | 4352);
  
#line 1085 
  arg1 = ((unsigned int)((int)rx_tx << 15) | ((unsigned int)stats_size << 16U)) | arg1;
  
#line 1087 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,42U);
  
#line 1089 
  if (err != 0) 
#line 1090 
                goto out_free_dma; else ;
  
#line 1092 
  *(cmd.req.arg + 1U) = arg1;
  
#line 1093 
  *(cmd.req.arg + 2U) = (unsigned int)(stats_dma_t >> 32);
  
#line 1094 
  *(cmd.req.arg + 3U) = (unsigned int)stats_dma_t;
  
#line 1095 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1097 
  if (err == 0) {
    
#line 1098 
    stats = (struct qlcnic_esw_stats_le *)stats_addr;
    
#line 1099 
    esw_stats->context_id = stats->context_id;
    
#line 1100 
    esw_stats->version = stats->version;
    
#line 1101 
    esw_stats->size = stats->size;
    
#line 1102 
    esw_stats->multicast_frames = stats->multicast_frames;
    
#line 1104 
    esw_stats->broadcast_frames = stats->broadcast_frames;
    
#line 1106 
    esw_stats->unicast_frames = stats->unicast_frames;
    
#line 1107 
    esw_stats->dropped_frames = stats->dropped_frames;
    
#line 1108 
    esw_stats->local_frames = stats->local_frames;
    
#line 1109 
    esw_stats->errors = stats->errors;
    
#line 1110 
    esw_stats->numbytes = stats->numbytes;
  }
  else ;
  
#line 1113 
  qlcnic_free_mbx_args(& cmd);
  out_free_dma: 
#line 1114 
  ;
  
#line 1115 
  dma_free_attrs(& (adapter->pdev)->dev,stats_size,stats_addr,stats_dma_t,(struct dma_attrs *)0);
  
#line 1118 
  __retres = err;
  return_label: 
#line 1118 
                return __retres;
}


#line 1122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_get_mac_stats(struct qlcnic_adapter *adapter, struct qlcnic_mac_statistics *mac_stats)
{
  int __retres;
  struct qlcnic_mac_statistics_le *stats;
  struct qlcnic_cmd_args cmd;
  dma_addr_t stats_dma_t;
  void *stats_addr;
  int err;
  
#line 1127 
  size_t stats_size = 312UL;
  
#line 1132 
  if (mac_stats == (struct qlcnic_mac_statistics *)0) {
    
#line 1133 
    __retres = -12;
    
#line 1133 
    goto return_label;
  }
  else ;
  
#line 1135 
  stats_addr = dma_zalloc_coherent(& (adapter->pdev)->dev,stats_size,& stats_dma_t,208U);
  
#line 1137 
  if (stats_addr == (void *)0) {
    
#line 1138 
    __retres = -12;
    
#line 1138 
    goto return_label;
  }
  else ;
  
#line 1140 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,55U);
  
#line 1141 
  if (err != 0) 
#line 1142 
                goto out_free_dma; else ;
  
#line 1144 
  *(cmd.req.arg + 1U) = (unsigned int)stats_size << 16U;
  
#line 1145 
  *(cmd.req.arg + 2U) = (unsigned int)(stats_dma_t >> 32);
  
#line 1146 
  *(cmd.req.arg + 3U) = (unsigned int)stats_dma_t;
  
#line 1147 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1148 
  if (err == 0) {
    
#line 1149 
    stats = (struct qlcnic_mac_statistics_le *)stats_addr;
    
#line 1150 
    mac_stats->mac_tx_frames = stats->mac_tx_frames;
    
#line 1151 
    mac_stats->mac_tx_bytes = stats->mac_tx_bytes;
    
#line 1152 
    mac_stats->mac_tx_mcast_pkts = stats->mac_tx_mcast_pkts;
    
#line 1154 
    mac_stats->mac_tx_bcast_pkts = stats->mac_tx_bcast_pkts;
    
#line 1156 
    mac_stats->mac_rx_frames = stats->mac_rx_frames;
    
#line 1157 
    mac_stats->mac_rx_bytes = stats->mac_rx_bytes;
    
#line 1158 
    mac_stats->mac_rx_mcast_pkts = stats->mac_rx_mcast_pkts;
    
#line 1160 
    mac_stats->mac_rx_length_error = stats->mac_rx_length_error;
    
#line 1162 
    mac_stats->mac_rx_length_small = stats->mac_rx_length_small;
    
#line 1164 
    mac_stats->mac_rx_length_large = stats->mac_rx_length_large;
    
#line 1166 
    mac_stats->mac_rx_jabber = stats->mac_rx_jabber;
    
#line 1167 
    mac_stats->mac_rx_dropped = stats->mac_rx_dropped;
    
#line 1168 
    mac_stats->mac_rx_crc_error = stats->mac_rx_crc_error;
  }
  else 
#line 1170 
       dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Get mac stats failed, err=%d.\n","qlcnic_get_mac_stats",err);
  
#line 1174 
  qlcnic_free_mbx_args(& cmd);
  out_free_dma: 
#line 1176 
  ;
  
#line 1177 
  dma_free_attrs(& (adapter->pdev)->dev,stats_size,stats_addr,stats_dma_t,(struct dma_attrs *)0);
  
#line 1180 
  __retres = err;
  return_label: 
#line 1180 
                return __retres;
}


#line 1183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_get_eswitch_stats(struct qlcnic_adapter *adapter, u8 const eswitch, u8 const rx_tx, struct __qlcnic_esw_statistics *esw_stats)
{
  int __retres;
  struct __qlcnic_esw_statistics port_stats;
  u8 i;
  int tmp;
  
#line 1188 
  int ret = -5;
  
#line 1190 
  if (esw_stats == (struct __qlcnic_esw_statistics *)0) {
    
#line 1191 
    __retres = -12;
    
#line 1191 
    goto return_label;
  }
  else ;
  
#line 1192 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U) {
    
#line 1193 
    __retres = -5;
    
#line 1193 
    goto return_label;
  }
  else ;
  
#line 1194 
  if (adapter->npars == (struct qlcnic_npar_info *)0) {
    
#line 1195 
    __retres = -5;
    
#line 1195 
    goto return_label;
  }
  else ;
  
#line 1197 
  memset((void *)esw_stats,0,8UL);
  
#line 1198 
  esw_stats->unicast_frames = 18446744073709551615ULL;
  
#line 1199 
  esw_stats->multicast_frames = 18446744073709551615ULL;
  
#line 1200 
  esw_stats->broadcast_frames = 18446744073709551615ULL;
  
#line 1201 
  esw_stats->dropped_frames = 18446744073709551615ULL;
  
#line 1202 
  esw_stats->errors = 18446744073709551615ULL;
  
#line 1203 
  esw_stats->local_frames = 18446744073709551615ULL;
  
#line 1204 
  esw_stats->numbytes = 18446744073709551615ULL;
  
#line 1205 
  esw_stats->context_id = (unsigned short)eswitch;
  
#line 1207 
  i = (unsigned char)0U;
  
#line 1207 
  goto ldv_54093;
  ldv_54092: 
#line 1208 
  ;
  
#line 1208 
  if ((int)(adapter->npars + (int)i)->phy_port != (int)eswitch) 
#line 1209 
                                                                goto ldv_54091; else ;
  
#line 1211 
  memset((void *)(& port_stats),0,88UL);
  
#line 1212 
  tmp = qlcnic_get_port_stats(adapter,(unsigned char)((int)(adapter->npars + (int)i)->pci_func),(unsigned char)((int)rx_tx),& port_stats);
  
#line 1212 
  if (tmp != 0) 
#line 1214 
                goto ldv_54091; else ;
  
#line 1216 
  esw_stats->size = port_stats.size;
  
#line 1217 
  esw_stats->version = port_stats.version;
  
#line 1218 
  if (esw_stats->unicast_frames == 18446744073709551615ULL && port_stats.unicast_frames != 18446744073709551615ULL) 
    
#line 1218 
    esw_stats->unicast_frames = port_stats.unicast_frames;
  else 
    
#line 1218 
    if (esw_stats->unicast_frames != 18446744073709551615ULL && port_stats.unicast_frames != 18446744073709551615ULL) 
      
#line 1218 
      esw_stats->unicast_frames += port_stats.unicast_frames; else ;
  
#line 1220 
  if (esw_stats->multicast_frames == 18446744073709551615ULL && port_stats.multicast_frames != 18446744073709551615ULL) 
    
#line 1220 
    esw_stats->multicast_frames = port_stats.multicast_frames;
  else 
    
#line 1220 
    if (esw_stats->multicast_frames != 18446744073709551615ULL && port_stats.multicast_frames != 18446744073709551615ULL) 
      
#line 1220 
      esw_stats->multicast_frames += port_stats.multicast_frames; else ;
  
#line 1222 
  if (esw_stats->broadcast_frames == 18446744073709551615ULL && port_stats.broadcast_frames != 18446744073709551615ULL) 
    
#line 1222 
    esw_stats->broadcast_frames = port_stats.broadcast_frames;
  else 
    
#line 1222 
    if (esw_stats->broadcast_frames != 18446744073709551615ULL && port_stats.broadcast_frames != 18446744073709551615ULL) 
      
#line 1222 
      esw_stats->broadcast_frames += port_stats.broadcast_frames; else ;
  
#line 1224 
  if (esw_stats->dropped_frames == 18446744073709551615ULL && port_stats.dropped_frames != 18446744073709551615ULL) 
    
#line 1224 
    esw_stats->dropped_frames = port_stats.dropped_frames;
  else 
    
#line 1224 
    if (esw_stats->dropped_frames != 18446744073709551615ULL && port_stats.dropped_frames != 18446744073709551615ULL) 
      
#line 1224 
      esw_stats->dropped_frames += port_stats.dropped_frames; else ;
  
#line 1226 
  if (esw_stats->errors == 18446744073709551615ULL && port_stats.errors != 18446744073709551615ULL) 
    
#line 1226 
    esw_stats->errors = port_stats.errors;
  else 
    
#line 1226 
    if (esw_stats->errors != 18446744073709551615ULL && port_stats.errors != 18446744073709551615ULL) 
      
#line 1226 
      esw_stats->errors += port_stats.errors; else ;
  
#line 1228 
  if (esw_stats->local_frames == 18446744073709551615ULL && port_stats.local_frames != 18446744073709551615ULL) 
    
#line 1228 
    esw_stats->local_frames = port_stats.local_frames;
  else 
    
#line 1228 
    if (esw_stats->local_frames != 18446744073709551615ULL && port_stats.local_frames != 18446744073709551615ULL) 
      
#line 1228 
      esw_stats->local_frames += port_stats.local_frames; else ;
  
#line 1230 
  if (esw_stats->numbytes == 18446744073709551615ULL && port_stats.numbytes != 18446744073709551615ULL) 
    
#line 1230 
    esw_stats->numbytes = port_stats.numbytes;
  else 
    
#line 1230 
    if (esw_stats->numbytes != 18446744073709551615ULL && port_stats.numbytes != 18446744073709551615ULL) 
      
#line 1230 
      esw_stats->numbytes += port_stats.numbytes; else ;
  
#line 1232 
  ret = 0;
  ldv_54091: 
#line 1233 
  ;
  
#line 1207 
  i = (u8)((int)i + 1);
  ldv_54093: 
#line 1208 
  ;
  
#line 1207 
  if ((int)((unsigned short)i) < (int)(adapter->ahw)->total_nic_func) 
    
#line 1209 
    goto ldv_54092; else 
#line 1212 
                         goto ldv_54094;
  ldv_54094: 
#line 1213 
  ;
  
#line 1234 
  __retres = ret;
  return_label: 
#line 1234 
                return __retres;
}


#line 1237  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_clear_esw_stats(struct qlcnic_adapter *adapter, u8 const func_esw, u8 const port, u8 const rx_tx)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  int err;
  u32 arg1;
  
#line 1240 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1245 
  if ((unsigned int)ahw->op_mode != 0U) {
    
#line 1246 
    __retres = -5;
    
#line 1246 
    goto return_label;
  }
  else ;
  
#line 1248 
  if ((unsigned int)func_esw == 1U) {
    
#line 1249 
    if ((unsigned int)port >= ahw->max_vnic_func) 
#line 1250 
                                                  goto err_ret; else ;
  }
  else 
    
#line 1251 
    if ((unsigned int)func_esw == 2U) {
      
#line 1252 
      if ((unsigned int)port > 1U) 
#line 1253 
                                   goto err_ret; else ;
    }
    else 
#line 1255 
         goto err_ret;
  
#line 1258 
  if ((unsigned int)rx_tx > 1U) 
#line 1259 
                                goto err_ret; else ;
  
#line 1261 
  arg1 = (unsigned int)(((int)port | 256) | ((int)func_esw << 12));
  
#line 1262 
  arg1 = ((unsigned int)((int)rx_tx << 15) | arg1) | 16384U;
  
#line 1264 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,42U);
  
#line 1266 
  if (err != 0) {
    
#line 1267 
    __retres = err;
    
#line 1267 
    goto return_label;
  }
  else ;
  
#line 1269 
  *(cmd.req.arg + 1U) = arg1;
  
#line 1270 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1271 
  qlcnic_free_mbx_args(& cmd);
  
#line 1272 
  __retres = err;
  
#line 1272 
  goto return_label;
  err_ret: 
#line 1274 
  ;
  
#line 1275 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"Invalid args func_esw %d port %d rx_ctx %d\n",(int)func_esw,(int)port,(int)rx_tx);
  
#line 1278 
  __retres = -5;
  return_label: 
#line 1278 
                return __retres;
}


#line 1281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
static int __qlcnic_get_eswitch_port_config(struct qlcnic_adapter *adapter, u32 *arg1, u32 *arg2)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  int err;
  
#line 1284 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1286 
  u8 pci_func = (unsigned char)(*arg1 >> 8);
  
#line 1289 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,41U);
  
#line 1291 
  if (err != 0) {
    
#line 1292 
    __retres = err;
    
#line 1292 
    goto return_label;
  }
  else ;
  
#line 1294 
  *(cmd.req.arg + 1U) = *arg1;
  
#line 1295 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1296 
  *arg1 = *(cmd.rsp.arg + 1U);
  
#line 1297 
  *arg2 = *(cmd.rsp.arg + 2U);
  
#line 1298 
  qlcnic_free_mbx_args(& cmd);
  
#line 1300 
  if (err == 0) 
#line 1301 
                _dev_info((struct device const *)dev,"Get eSwitch port config for vNIC function %d\n",(int)pci_func); else 
                                                                    
#line 1304 
                                                                    dev_err((struct device const *)dev,"Failed to get eswitch port config for vNIC function %d\n",(int)pci_func);
  
#line 1306 
  __retres = err;
  return_label: 
#line 1306 
                return __retres;
}


#line 1315  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_config_switch_port(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  int index;
  u32 arg1;
  u8 pci_func;
  int tmp;
  
#line 1318 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1320 
  int err = -5;
  
#line 1321 
  u32 arg2 = 0U;
  
#line 1324 
  if ((unsigned int)(adapter->ahw)->op_mode != 0U) {
    
#line 1325 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Not a management function\n","qlcnic_config_switch_port");
    
#line 1327 
    __retres = err;
    
#line 1327 
    goto return_label;
  }
  else ;
  
#line 1330 
  pci_func = esw_cfg->pci_func;
  
#line 1331 
  index = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)pci_func));
  
#line 1332 
  if (index < 0) {
    
#line 1333 
    __retres = err;
    
#line 1333 
    goto return_label;
  }
  else ;
  
#line 1334 
  arg1 = (unsigned int)(adapter->npars + index)->phy_port & 1U;
  
#line 1335 
  arg1 = (unsigned int)((int)pci_func << 8) | arg1;
  
#line 1337 
  tmp = __qlcnic_get_eswitch_port_config(adapter,& arg1,& arg2);
  
#line 1337 
  if (tmp != 0) {
    
#line 1338 
    __retres = err;
    
#line 1338 
    goto return_label;
  }
  else ;
  
#line 1339 
  arg1 &= 4294902015U;
  
#line 1340 
  arg1 = (unsigned int)((int)pci_func << 8) | arg1;
  
#line 1341 
  arg1 &= 4294967283U;
  
#line 1342 
  switch ((int)esw_cfg->op_mode) {
    case 0: 
#line 1343 
    ;
    
#line 1344 
    arg1 |= 208U;
    
#line 1345 
    arg2 |= 3U;
    
#line 1346 
    if (((adapter->ahw)->capabilities & 2U) != 0U) 
#line 1347 
                                                   arg2 |= 12U; else ;
    
#line 1348 
    if ((unsigned int)esw_cfg->discard_tagged == 0U) 
#line 1349 
                                                     arg1 &= 4294967279U; else ;
    
#line 1350 
    if ((unsigned int)esw_cfg->promisc_mode == 0U) 
#line 1351 
                                                   arg1 &= 4294967231U; else ;
    
#line 1352 
    if ((unsigned int)esw_cfg->mac_override == 0U) 
#line 1353 
                                                   arg1 &= 4294967167U; else ;
    
#line 1354 
    if ((unsigned int)esw_cfg->mac_anti_spoof == 0U) 
#line 1355 
                                                     arg2 &= 4294967294U; else ;
    
#line 1356 
    if (((int)esw_cfg->offload_flags & 1) == 0) 
#line 1357 
                                                arg2 &= 4294967281U; else ;
    
#line 1358 
    if (((int)esw_cfg->offload_flags & 2) == 0) 
#line 1359 
                                                arg2 &= 4294967291U; else ;
    
#line 1360 
    if (((int)esw_cfg->offload_flags & 4) == 0) 
#line 1361 
                                                arg2 &= 4294967287U; else ;
    
#line 1362 
    goto ldv_54128;
    case 1: 
#line 1363 
    ;
    
#line 1364 
    arg1 &= 65535U;
    
#line 1365 
    arg1 |= 36U;
    
#line 1366 
    arg1 = (unsigned int)((int)esw_cfg->vlan_id << 16) | arg1;
    
#line 1367 
    goto ldv_54128;
    case 2: 
#line 1368 
    ;
    
#line 1369 
    arg1 |= 40U;
    
#line 1370 
    arg1 &= 65535U;
    
#line 1371 
    goto ldv_54128;
    default: 
#line 1372 
    ;
    
#line 1373 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Invalid opmode 0x%x\n","qlcnic_config_switch_port",(int)esw_cfg->op_mode);
    
#line 1375 
    __retres = err;
    
#line 1375 
    goto return_label;
  }
  ldv_54128: 
#line 1378 
  ;
  
#line 1378 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,40U);
  
#line 1380 
  if (err != 0) {
    
#line 1381 
    __retres = err;
    
#line 1381 
    goto return_label;
  }
  else ;
  
#line 1383 
  *(cmd.req.arg + 1U) = arg1;
  
#line 1384 
  *(cmd.req.arg + 2U) = arg2;
  
#line 1385 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1386 
  qlcnic_free_mbx_args(& cmd);
  
#line 1388 
  if (err != 0) 
#line 1389 
                dev_err((struct device const *)dev,"Failed to configure eswitch for vNIC function %d\n",(int)pci_func); else 
                                                                    
#line 1392 
                                                                    _dev_info((struct device const *)dev,"Configured eSwitch for vNIC function %d\n",(int)pci_func);
  
#line 1395 
  __retres = err;
  return_label: 
#line 1395 
                return __retres;
}


#line 1399  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_ctx.c"
int qlcnic_get_eswitch_port_config(struct qlcnic_adapter *adapter, struct qlcnic_esw_func_cfg *esw_cfg)
{
  int __retres;
  u32 arg1;
  u32 arg2;
  int index;
  u8 phy_port;
  int tmp;
  
#line 1406 
  if ((unsigned int)(adapter->ahw)->op_mode == 0U) {
    
#line 1407 
    index = qlcnic_is_valid_nic_func(adapter,(unsigned char)((int)esw_cfg->pci_func));
    
#line 1408 
    if (index < 0) {
      
#line 1409 
      __retres = -5;
      
#line 1409 
      goto return_label;
    }
    else ;
    
#line 1410 
    phy_port = (adapter->npars + index)->phy_port;
  }
  else 
#line 1412 
       phy_port = (adapter->ahw)->physical_port;
  
#line 1414 
  arg1 = (unsigned int)phy_port;
  
#line 1415 
  arg1 = (unsigned int)((int)esw_cfg->pci_func << 8) | arg1;
  
#line 1416 
  tmp = __qlcnic_get_eswitch_port_config(adapter,& arg1,& arg2);
  
#line 1416 
  if (tmp != 0) {
    
#line 1417 
    __retres = -5;
    
#line 1417 
    goto return_label;
  }
  else ;
  
#line 1419 
  esw_cfg->discard_tagged = (unsigned char)((arg1 & 16U) != 0U);
  
#line 1420 
  esw_cfg->host_vlan_tag = (unsigned char)((arg1 & 32U) != 0U);
  
#line 1421 
  esw_cfg->promisc_mode = (unsigned char)((arg1 & 64U) != 0U);
  
#line 1422 
  esw_cfg->mac_override = (unsigned char)((arg1 & 128U) != 0U);
  
#line 1423 
  esw_cfg->vlan_id = (unsigned short)(arg1 >> 16);
  
#line 1424 
  esw_cfg->mac_anti_spoof = (unsigned char)((unsigned int)((unsigned char)arg2) & 1U);
  
#line 1425 
  esw_cfg->offload_flags = (unsigned char)((unsigned int)((unsigned char)(arg2 >> 1)) & 7U);
  
#line 1427 
  __retres = 0;
  return_label: 
#line 1427 
                return __retres;
}


#line 503  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_ctx.c.aux"
static void *kcalloc_2(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 506 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 506 
  return tmp;
}


#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
void ___might_sleep(char const *, int, int);


#line 418 
int sscanf(char const *, char const * , ...);


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
int strncmp(char const *, char const *, __kernel_size_t);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_2(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 358 
static void ldv_spin_lock_75_0(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_2(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 407 
static void ldv_spin_unlock_76_0(spinlock_t *lock);


#line 2903  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
int _cond_resched(void);


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kcalloc_3(size_t n, size_t size, gfp_t flags);


#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static unsigned int crb_addr_xform[60U];

#line 26 
static int qlcnic_check_fw_hearbeat(struct qlcnic_adapter *adapter);


#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static void crb_addr_transform_setup(void)
{
  
#line 30 
  crb_addr_xform[49] = 1078984704U;
  
#line 31 
  crb_addr_xform[40] = 1097859072U;
  
#line 32 
  crb_addr_xform[5] = 218103808U;
  
#line 33 
  crb_addr_xform[11] = 238026752U;
  
#line 34 
  crb_addr_xform[10] = 236978176U;
  
#line 35 
  crb_addr_xform[9] = 235929600U;
  
#line 36 
  crb_addr_xform[8] = 234881024U;
  
#line 37 
  crb_addr_xform[16] = 1883242496U;
  
#line 38 
  crb_addr_xform[15] = 1882193920U;
  
#line 39 
  crb_addr_xform[14] = 1881145344U;
  
#line 40 
  crb_addr_xform[13] = 1880096768U;
  
#line 41 
  crb_addr_xform[48] = 1894776832U;
  
#line 42 
  crb_addr_xform[47] = 148897792U;
  
#line 43 
  crb_addr_xform[46] = 147849216U;
  
#line 44 
  crb_addr_xform[45] = 1891631104U;
  
#line 45 
  crb_addr_xform[44] = 1890582528U;
  
#line 46 
  crb_addr_xform[43] = 1889533952U;
  
#line 47 
  crb_addr_xform[42] = 143654912U;
  
#line 48 
  crb_addr_xform[53] = 142606336U;
  
#line 49 
  crb_addr_xform[51] = 1108344832U;
  
#line 50 
  crb_addr_xform[29] = 1090519040U;
  
#line 51 
  crb_addr_xform[7] = 241172480U;
  
#line 52 
  crb_addr_xform[12] = 1879048192U;
  
#line 53 
  crb_addr_xform[22] = 876609536U;
  
#line 54 
  crb_addr_xform[21] = 877658112U;
  
#line 55 
  crb_addr_xform[20] = 875560960U;
  
#line 56 
  crb_addr_xform[19] = 874512384U;
  
#line 57 
  crb_addr_xform[18] = 873463808U;
  
#line 58 
  crb_addr_xform[17] = 872415232U;
  
#line 59 
  crb_addr_xform[28] = 1010827264U;
  
#line 60 
  crb_addr_xform[27] = 1011875840U;
  
#line 61 
  crb_addr_xform[26] = 1009778688U;
  
#line 62 
  crb_addr_xform[25] = 1008730112U;
  
#line 63 
  crb_addr_xform[24] = 1007681536U;
  
#line 64 
  crb_addr_xform[23] = 1006632960U;
  
#line 65 
  crb_addr_xform[1] = 1999634432U;
  
#line 66 
  crb_addr_xform[0] = 698351616U;
  
#line 67 
  crb_addr_xform[6] = 454033408U;
  
#line 68 
  crb_addr_xform[50] = 1107296256U;
  
#line 69 
  crb_addr_xform[31] = 219152384U;
  
#line 70 
  crb_addr_xform[2] = 693108736U;
  
#line 71 
  crb_addr_xform[3] = 709885952U;
  
#line 72 
  crb_addr_xform[37] = 209715200U;
  
#line 73 
  crb_addr_xform[36] = 208666624U;
  
#line 74 
  crb_addr_xform[35] = 207618048U;
  
#line 75 
  crb_addr_xform[34] = 1096810496U;
  
#line 76 
  crb_addr_xform[39] = 1972371456U;
  
#line 77 
  crb_addr_xform[38] = 1971322880U;
  
#line 78 
  crb_addr_xform[58] = 1904214016U;
  
#line 79 
  crb_addr_xform[56] = 1080033280U;
  
#line 80 
  crb_addr_xform[59] = 428867584U;
  
#line 81 
  return;
}


#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_release_rx_buffers(struct qlcnic_adapter *adapter)
{
  struct qlcnic_recv_context *recv_ctx;
  struct qlcnic_host_rds_ring *rds_ring;
  struct qlcnic_rx_buffer *rx_buf;
  int i;
  int ring;
  
#line 90 
  recv_ctx = adapter->recv_ctx;
  
#line 91 
  ring = 0;
  
#line 91 
  goto ldv_53772;
  ldv_53771: 
#line 92 
  ;
  
#line 92 
  rds_ring = recv_ctx->rds_rings + ring;
  
#line 93 
  i = 0;
  
#line 93 
  goto ldv_53769;
  ldv_53768: 
#line 94 
  ;
  
#line 94 
  rx_buf = rds_ring->rx_buf_arr + i;
  
#line 95 
  if (rx_buf->skb == (struct sk_buff *)0) 
#line 96 
                                          goto ldv_53767; else ;
  
#line 98 
  pci_unmap_single(adapter->pdev,rx_buf->dma,(unsigned long)rds_ring->dma_size,2);
  
#line 103 
  dev_kfree_skb_any(rx_buf->skb);
  ldv_53767: 
#line 104 
  ;
  
#line 93 
  i += 1;
  ldv_53769: 
#line 94 
  ;
  
#line 93 
  if (rds_ring->num_desc > (unsigned int)i) 
#line 95 
                                            goto ldv_53768; else 
#line 98 
                                                                 goto ldv_53770;
  ldv_53770: 
#line 99 
  ;
  
#line 91 
  ring += 1;
  ldv_53772: 
#line 92 
  ;
  
#line 91 
  if ((int)adapter->max_rds_rings > ring) 
#line 93 
                                          goto ldv_53771; else 
#line 96 
                                                               goto ldv_53773;
  ldv_53773: 
#line 97 
  ;
  
#line 98 
  return;
}


#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_reset_rx_buffers_list(struct qlcnic_adapter *adapter)
{
  struct qlcnic_recv_context *recv_ctx;
  struct qlcnic_host_rds_ring *rds_ring;
  struct qlcnic_rx_buffer *rx_buf;
  int i;
  int ring;
  
#line 115 
  recv_ctx = adapter->recv_ctx;
  
#line 116 
  ring = 0;
  
#line 116 
  goto ldv_53786;
  ldv_53785: 
#line 117 
  ;
  
#line 117 
  rds_ring = recv_ctx->rds_rings + ring;
  
#line 119 
  INIT_LIST_HEAD(& rds_ring->free_list);
  
#line 121 
  rx_buf = rds_ring->rx_buf_arr;
  
#line 122 
  i = 0;
  
#line 122 
  goto ldv_53783;
  ldv_53782: 
#line 123 
  ;
  
#line 123 
  list_add_tail(& rx_buf->list,& rds_ring->free_list);
  
#line 125 
  rx_buf += 1;
  
#line 122 
  i += 1;
  ldv_53783: 
#line 123 
  ;
  
#line 122 
  if (rds_ring->num_desc > (unsigned int)i) 
#line 124 
                                            goto ldv_53782; else 
#line 127 
                                                                 goto ldv_53784;
  ldv_53784: 
#line 128 
  ;
  
#line 116 
  ring += 1;
  ldv_53786: 
#line 117 
  ;
  
#line 116 
  if ((int)adapter->max_rds_rings > ring) 
#line 118 
                                          goto ldv_53785; else 
#line 121 
                                                               goto ldv_53787;
  ldv_53787: 
#line 122 
  ;
  
#line 123 
  return;
}


#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_release_tx_buffers(struct qlcnic_adapter *adapter, struct qlcnic_host_tx_ring *tx_ring)
{
  struct qlcnic_cmd_buffer *cmd_buf;
  struct qlcnic_skb_frag *buffrag;
  int i;
  int j;
  
#line 137 
  ldv_spin_lock_75_0(& tx_ring->tx_clean_lock);
  
#line 139 
  cmd_buf = tx_ring->cmd_buf_arr;
  
#line 140 
  i = 0;
  
#line 140 
  goto ldv_53800;
  ldv_53799: 
#line 141 
  ;
  
#line 141 
  buffrag = (struct qlcnic_skb_frag *)(& cmd_buf->frag_array);
  
#line 142 
  if (buffrag->dma != 0ULL) {
    
#line 143 
    pci_unmap_single(adapter->pdev,buffrag->dma,(unsigned long)buffrag->length,1);
    
#line 145 
    buffrag->dma = 0ULL;
  }
  else ;
  
#line 147 
  j = 1;
  
#line 147 
  goto ldv_53797;
  ldv_53796: 
#line 148 
  ;
  
#line 148 
  buffrag += 1;
  
#line 149 
  if (buffrag->dma != 0ULL) {
    
#line 150 
    pci_unmap_page(adapter->pdev,buffrag->dma,(unsigned long)buffrag->length,1);
    
#line 153 
    buffrag->dma = 0ULL;
  }
  else ;
  
#line 147 
  j += 1;
  ldv_53797: 
#line 148 
  ;
  
#line 147 
  if (cmd_buf->frag_count > (unsigned int)j) 
#line 149 
                                             goto ldv_53796; else 
#line 152 
                                                                  goto ldv_53798;
  ldv_53798: 
#line 153 
  ;
  
#line 156 
  if (cmd_buf->skb != (struct sk_buff *)0) {
    
#line 157 
    dev_kfree_skb_any(cmd_buf->skb);
    
#line 158 
    cmd_buf->skb = (struct sk_buff *)0;
  }
  else ;
  
#line 160 
  cmd_buf += 1;
  
#line 140 
  i += 1;
  ldv_53800: 
#line 141 
  ;
  
#line 140 
  if (tx_ring->num_desc > (unsigned int)i) 
#line 142 
                                           goto ldv_53799; else 
#line 145 
                                                                goto ldv_53801;
  ldv_53801: 
#line 146 
  ;
  
#line 163 
  ldv_spin_unlock_76_0(& tx_ring->tx_clean_lock);
  
#line 164 
  return;
}


#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_free_sw_resources(struct qlcnic_adapter *adapter)
{
  struct qlcnic_recv_context *recv_ctx;
  struct qlcnic_host_rds_ring *rds_ring;
  int ring;
  
#line 172 
  recv_ctx = adapter->recv_ctx;
  
#line 174 
  if (recv_ctx->rds_rings == (struct qlcnic_host_rds_ring *)0) 
#line 175 
                                                               goto return_label; else ;
  
#line 177 
  ring = 0;
  
#line 177 
  goto ldv_53809;
  ldv_53808: 
#line 178 
  ;
  
#line 178 
  rds_ring = recv_ctx->rds_rings + ring;
  
#line 179 
  vfree((void const *)rds_ring->rx_buf_arr);
  
#line 180 
  rds_ring->rx_buf_arr = (struct qlcnic_rx_buffer *)0;
  
#line 177 
  ring += 1;
  ldv_53809: 
#line 178 
  ;
  
#line 177 
  if ((int)adapter->max_rds_rings > ring) 
#line 179 
                                          goto ldv_53808; else 
#line 182 
                                                               goto ldv_53810;
  ldv_53810: 
#line 183 
  ;
  
#line 182 
  kfree((void const *)recv_ctx->rds_rings);
  return_label: 
#line 183 
                return;
}


#line 185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_alloc_sw_resources(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_recv_context *recv_ctx;
  struct qlcnic_host_rds_ring *rds_ring;
  struct qlcnic_host_sds_ring *sds_ring;
  struct qlcnic_rx_buffer *rx_buf;
  int ring;
  int i;
  bool tmp_2;
  
#line 193 
  recv_ctx = adapter->recv_ctx;
  
#line 195 
  rds_ring = (struct qlcnic_host_rds_ring *)kcalloc_3((unsigned long)adapter->max_rds_rings,4096UL,208U);
  
#line 197 
  if (rds_ring == (struct qlcnic_host_rds_ring *)0) 
#line 198 
                                                    goto err_out; else ;
  
#line 200 
  recv_ctx->rds_rings = rds_ring;
  
#line 202 
  ring = 0;
  
#line 202 
  goto ldv_53829;
  ldv_53828: 
#line 203 
  ;
  
#line 203 
  rds_ring = recv_ctx->rds_rings + ring;
  
#line 204 
  switch (ring) {
    case 0: 
#line 205 
    ;
    
#line 206 
    rds_ring->num_desc = (unsigned int)adapter->num_rxd;
    
#line 207 
    rds_ring->dma_size = 1532U;
    
#line 208 
    rds_ring->skb_size = rds_ring->dma_size;
    
#line 209 
    goto ldv_53822;
    case 1: 
#line 211 
    ;
    
#line 212 
    rds_ring->num_desc = (unsigned int)adapter->num_jumbo_rxd;
    
#line 213 
    rds_ring->dma_size = 9632U;
    
#line 216 
    if (((adapter->ahw)->capabilities & 1024U) != 0U) 
#line 218 
                                                      rds_ring->dma_size += 2048U; else ;
    
#line 220 
    rds_ring->skb_size = rds_ring->dma_size;
    
#line 222 
    goto ldv_53822;
  }
  ldv_53822: 
#line 224 
  ;
  
#line 224 
  rds_ring->rx_buf_arr = (struct qlcnic_rx_buffer *)vzalloc((unsigned long)rds_ring->num_desc * 40UL);
  
#line 225 
  if (rds_ring->rx_buf_arr == (struct qlcnic_rx_buffer *)0) 
#line 226 
                                                            goto err_out; else ;
  
#line 228 
  INIT_LIST_HEAD(& rds_ring->free_list);
  
#line 233 
  rx_buf = rds_ring->rx_buf_arr;
  
#line 234 
  i = 0;
  
#line 234 
  goto ldv_53825;
  ldv_53824: 
#line 235 
  ;
  
#line 235 
  list_add_tail(& rx_buf->list,& rds_ring->free_list);
  
#line 237 
  rx_buf->ref_handle = (unsigned short)i;
  
#line 238 
  rx_buf += 1;
  
#line 234 
  i += 1;
  ldv_53825: 
#line 235 
  ;
  
#line 234 
  if (rds_ring->num_desc > (unsigned int)i) 
#line 236 
                                            goto ldv_53824; else 
#line 239 
                                                                 goto ldv_53826;
  ldv_53826: 
#line 240 
  ;
  
#line 240 
  spinlock_check(& rds_ring->lock);
  {
    struct lock_class_key __key;
    
#line 240 
    __raw_spin_lock_init(& rds_ring->lock.__anonCompField_spinlock_18.rlock,"&(&rds_ring->lock)->rlock",& __key);
  }
  
#line 202 
  ring += 1;
  ldv_53829: 
#line 203 
  ;
  
#line 202 
  if ((int)adapter->max_rds_rings > ring) 
#line 204 
                                          goto ldv_53828; else 
#line 207 
                                                               goto ldv_53830;
  ldv_53830: 
#line 208 
  ;
  
#line 243 
  ring = 0;
  
#line 243 
  goto ldv_53835;
  ldv_53834: 
#line 244 
  ;
  
#line 244 
  sds_ring = recv_ctx->sds_rings + ring;
  
#line 245 
  sds_ring->irq = (int)(adapter->msix_entries + ring)->vector;
  
#line 246 
  sds_ring->adapter = adapter;
  
#line 247 
  sds_ring->num_desc = (unsigned int)adapter->num_rxd;
  
#line 248 
  tmp_2 = qlcnic_82xx_check(adapter);
  
#line 248 
  if ((int)tmp_2 != 0) {
    bool tmp_1;
    
#line 249 
    tmp_1 = qlcnic_check_multi_tx(adapter);
    
#line 249 
    if ((int)tmp_1 != 0) 
      
#line 249 
      if ((unsigned int)(adapter->ahw)->diag_test == 0U) 
#line 251 
                                                         sds_ring->tx_ring = adapter->tx_ring + ring; else 
                                                                    
#line 253 
                                                                    sds_ring->tx_ring = adapter->tx_ring;
    else 
#line 253 
         sds_ring->tx_ring = adapter->tx_ring;
  }
  else ;
  
#line 255 
  i = 0;
  
#line 255 
  goto ldv_53832;
  ldv_53831: 
#line 256 
  ;
  
#line 256 
  INIT_LIST_HEAD(& sds_ring->free_list[i]);
  
#line 255 
  i += 1;
  ldv_53832: 
#line 256 
  ;
  
#line 255 
  if (i <= 2) 
#line 257 
              goto ldv_53831; else 
#line 260 
                                   goto ldv_53833;
  ldv_53833: 
#line 261 
  ;
  
#line 243 
  ring += 1;
  ldv_53835: 
#line 244 
  ;
  
#line 243 
  if ((int)adapter->drv_sds_rings > ring) 
#line 245 
                                          goto ldv_53834; else 
#line 248 
                                                               goto ldv_53836;
  ldv_53836: 
#line 249 
  ;
  
#line 259 
  __retres = 0;
  
#line 259 
  goto return_label;
  err_out: 
#line 261 
  ;
  
#line 262 
  qlcnic_free_sw_resources(adapter);
  
#line 263 
  __retres = -12;
  return_label: 
#line 263 
                return __retres;
}


#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static u32 qlcnic_decode_crb_addr(u32 addr)
{
  u32 __retres;
  int i;
  u32 base_addr;
  u32 offset;
  u32 pci_base;
  
#line 275 
  crb_addr_transform_setup();
  
#line 277 
  pci_base = 4294967295U;
  
#line 278 
  base_addr = addr & 4293918720U;
  
#line 279 
  offset = addr & 1048575U;
  
#line 281 
  i = 0;
  
#line 281 
  goto ldv_53846;
  ldv_53845: 
#line 282 
  ;
  
#line 282 
  if (crb_addr_xform[i] == base_addr) {
    
#line 283 
    pci_base = (unsigned int)(i << 20);
    
#line 284 
    goto ldv_53844;
  }
  else ;
  
#line 281 
  i += 1;
  ldv_53846: 
#line 282 
  ;
  
#line 281 
  if (i <= 59) 
#line 283 
               goto ldv_53845; else 
#line 286 
                                    goto ldv_53844;
  ldv_53844: 
#line 287 
  ;
  
#line 287 
  if (pci_base == 4294967295U) {
    
#line 288 
    __retres = pci_base;
    
#line 288 
    goto return_label;
  }
  else {
    
#line 290 
    __retres = pci_base + offset;
    
#line 290 
    goto return_label;
  }
  return_label: 
#line 287 
                return __retres;
}


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_wait_rom_done(struct qlcnic_adapter *adapter)
{
  int __retres;
  int tmp;
  
#line 297 
  long timeout = 0L;
  
#line 298 
  long done = 0L;
  
#line 299 
  int err = 0;
  
#line 301 
  ___might_sleep("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c",301,0);
  
#line 301 
  _cond_resched();
  
#line 302 
  goto ldv_53855;
  ldv_53854: 
#line 303 
  ;
  
#line 303 
  tmp = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,154140676UL,& err);
  
#line 303 
  done = (long)tmp;
  
#line 304 
  done &= 2L;
  
#line 305 
  timeout += 1L;
  
#line 305 
  if (timeout > 99L) {
    
#line 306 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Timeout reached  waiting for rom done");
    
#line 308 
    __retres = -5;
    
#line 308 
    goto return_label;
  }
  else ;
  
#line 310 
  __const_udelay(4295UL);
  ldv_53855: 
#line 312 
  ;
  
#line 302 
  if (done == 0L) 
#line 304 
                  goto ldv_53854; else 
#line 307 
                                       goto ldv_53856;
  ldv_53856: 
#line 308 
  ;
  
#line 312 
  __retres = 0;
  return_label: 
#line 312 
                return __retres;
}


#line 315  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int do_rom_fast_read(struct qlcnic_adapter *adapter, u32 addr, u32 *valp)
{
  int __retres;
  int tmp;
  int tmp_0;
  
#line 318 
  int err = 0;
  
#line 320 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,154206216UL,addr);
  
#line 321 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,154206228UL,0U);
  
#line 322 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,154206224UL,3U);
  
#line 323 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,154206212UL,11U);
  
#line 324 
  tmp = qlcnic_wait_rom_done(adapter);
  
#line 324 
  if (tmp != 0) {
    
#line 325 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Error waiting for rom done\n");
    
#line 326 
    __retres = -5;
    
#line 326 
    goto return_label;
  }
  else ;
  
#line 329 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,154206224UL,0U);
  
#line 330 
  __const_udelay(42950UL);
  
#line 331 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,154206228UL,0U);
  
#line 333 
  tmp_0 = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,154206232UL,& err);
  
#line 333 
  *valp = (unsigned int)tmp_0;
  
#line 334 
  if (err == -5) {
    
#line 335 
    __retres = err;
    
#line 335 
    goto return_label;
  }
  else ;
  
#line 336 
  __retres = 0;
  return_label: 
#line 336 
                return __retres;
}


#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int do_rom_fast_read_words(struct qlcnic_adapter *adapter, int addr, u8 *bytes, size_t size)
{
  int addridx;
  
#line 343 
  int ret = 0;
  
#line 345 
  addridx = addr;
  
#line 345 
  goto ldv_53874;
  ldv_53873: 
#line 346 
  ;
  {
    int v;
    
#line 347 
    ret = do_rom_fast_read(adapter,(unsigned int)addridx,(u32 *)(& v));
    
#line 348 
    if (ret != 0) 
#line 349 
                  goto ldv_53872; else ;
    
#line 350 
    *((__le32 *)bytes) = (unsigned int)v;
    
#line 351 
    bytes += 4U;
  }
  
#line 345 
  addridx += 4;
  ldv_53874: 
#line 346 
  ;
  
#line 345 
  if ((unsigned long)addridx < (unsigned long)addr + size) 
#line 347 
                                                           goto ldv_53873; else 
                                                                    
#line 350 
                                                                    goto ldv_53872;
  ldv_53872: 
#line 351 
  ;
  
#line 354 
  return ret;
}


#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_rom_fast_read_words(struct qlcnic_adapter *adapter, int addr, u8 *bytes, size_t size)
{
  int __retres;
  int ret;
  
#line 363 
  ret = qlcnic_pcie_sem_lock(adapter,2,136323328U);
  
#line 364 
  if (ret < 0) {
    
#line 365 
    __retres = ret;
    
#line 365 
    goto return_label;
  }
  else ;
  
#line 367 
  ret = do_rom_fast_read_words(adapter,addr,bytes,size);
  
#line 369 
  qlcnic_pcie_sem_unlock(adapter,2);
  
#line 370 
  __retres = ret;
  return_label: 
#line 370 
                return __retres;
}


#line 373  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_rom_fast_read(struct qlcnic_adapter *adapter, u32 addr, u32 *valp)
{
  int __retres;
  int ret;
  int tmp;
  
#line 377 
  tmp = qlcnic_pcie_sem_lock(adapter,2,136323328U);
  
#line 377 
  if (tmp != 0) {
    
#line 378 
    __retres = -5;
    
#line 378 
    goto return_label;
  }
  else ;
  
#line 380 
  ret = do_rom_fast_read(adapter,addr,valp);
  
#line 381 
  qlcnic_pcie_sem_unlock(adapter,2);
  
#line 382 
  __retres = ret;
  return_label: 
#line 382 
                return __retres;
}


#line 385  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_pinit_from_rom(struct qlcnic_adapter *adapter)
{
  int __retres;
  int addr;
  int i;
  int n;
  int init_delay;
  struct crb_addr_pair *buf;
  unsigned int offset;
  u32 off;
  u32 val;
  int tmp;
  int tmp_0;
  int tmp_3;
  
#line 387 
  int err = 0;
  
#line 392 
  struct pci_dev *pdev = adapter->pdev;
  
#line 394 
  writel(0U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 16U)));
  
#line 395 
  writel(0U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 17U)));
  
#line 399 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,153092112UL,0U);
  
#line 400 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,153092116UL,0U);
  
#line 401 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,153092120UL,0U);
  
#line 402 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,153092124UL,0U);
  
#line 403 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,153092128UL,0U);
  
#line 404 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,153092132UL,0U);
  
#line 407 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,106954816UL,255U);
  
#line 409 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,107413504UL,0U);
  
#line 411 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,107479040UL,0U);
  
#line 413 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,107544576UL,0U);
  
#line 415 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,107610112UL,0U);
  
#line 417 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,107675648UL,0U);
  
#line 420 
  tmp = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,105910272UL,& err);
  
#line 420 
  val = (unsigned int)tmp;
  
#line 421 
  if (err == -5) {
    
#line 422 
    __retres = err;
    
#line 422 
    goto return_label;
  }
  else ;
  
#line 423 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,105910272UL,val & 4294967294U);
  
#line 426 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,133174016UL,1U);
  
#line 429 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,142606336UL,0U);
  
#line 430 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,142606344UL,0U);
  
#line 431 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,142606352UL,0U);
  
#line 432 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,142606360UL,0U);
  
#line 433 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,142606592UL,0U);
  
#line 434 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,142606848UL,0U);
  
#line 436 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,118489148UL,1U);
  
#line 437 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,119537724UL,1U);
  
#line 438 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,120586300UL,1U);
  
#line 439 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,121634876UL,1U);
  
#line 440 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,116391996UL,1U);
  
#line 441 
  msleep(20U);
  
#line 443 
  qlcnic_pcie_sem_unlock(adapter,2);
  
#line 445 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,154140680UL,4278190079U);
  
#line 448 
  tmp_0 = qlcnic_rom_fast_read(adapter,0U,(u32 *)(& n));
  
#line 448 
  if (tmp_0 != 0) 
#line 448 
                  goto _LOR;
  else 
    
#line 448 
    if (n != -889271554) 
#line 448 
                         goto _LOR;
    else {
      int tmp_1;
      
#line 448 
      tmp_1 = qlcnic_rom_fast_read(adapter,4U,(u32 *)(& n));
      
#line 448 
      if (tmp_1 != 0) {
        _LOR: {
                
#line 450 
                dev_err((struct device const *)(& pdev->dev),"ERROR Reading crb_init area: val:%x\n",n);
                
#line 451 
                __retres = -5;
                
#line 451 
                goto return_label;
              }
      }
      else ;
    }
  
#line 453 
  offset = (unsigned int)n & 65535U;
  
#line 454 
  n >>= 16;
  
#line 456 
  if (n > 1023) {
    
#line 457 
    dev_err((struct device const *)(& pdev->dev),"QLOGIC card flash not initialized.\n");
    
#line 458 
    __retres = -5;
    
#line 458 
    goto return_label;
  }
  else ;
  
#line 461 
  buf = (struct crb_addr_pair *)kcalloc_3((unsigned long)n,8UL,208U);
  
#line 462 
  if (buf == (struct crb_addr_pair *)0) {
    
#line 463 
    __retres = -12;
    
#line 463 
    goto return_label;
  }
  else ;
  
#line 465 
  i = 0;
  
#line 465 
  goto ldv_53902;
  ldv_53901: 
#line 466 
  ;
  
#line 466 
  tmp_3 = qlcnic_rom_fast_read(adapter,(unsigned int)(i * 8) + offset * 4U,& val);
  
#line 466 
  if (tmp_3 != 0) 
#line 466 
                  goto _LOR_0;
  else {
    int tmp_4;
    
#line 466 
    tmp_4 = qlcnic_rom_fast_read(adapter,((unsigned int)(i * 8) + offset * 4U) + 4U,(u32 *)(& addr));
    
#line 466 
    if (tmp_4 != 0) {
      _LOR_0: {
                
#line 468 
                kfree((void const *)buf);
                
#line 469 
                __retres = -5;
                
#line 469 
                goto return_label;
              }
    }
    else ;
  }
  
#line 472 
  (buf + i)->addr = (unsigned int)addr;
  
#line 473 
  (buf + i)->data = val;
  
#line 465 
  i += 1;
  ldv_53902: 
#line 466 
  ;
  
#line 465 
  if (i < n) 
#line 467 
             goto ldv_53901; else 
#line 470 
                                  goto ldv_53903;
  ldv_53903: 
#line 471 
  ;
  
#line 476 
  i = 0;
  
#line 476 
  goto ldv_53906;
  ldv_53905: 
#line 477 
  ;
  
#line 478 
  off = qlcnic_decode_crb_addr((buf + i)->addr);
  
#line 479 
  if (off == 4294967295U) {
    
#line 480 
    dev_err((struct device const *)(& pdev->dev),"CRB init value out of range %x\n",(buf + i)->addr);
    
#line 482 
    goto ldv_53904;
  }
  else ;
  
#line 484 
  off += 100663296U;
  
#line 486 
  if ((off & 1U) != 0U) 
#line 487 
                        goto ldv_53904; else ;
  
#line 490 
  if (off == 136323580U) 
#line 491 
                         goto ldv_53904; else ;
  
#line 492 
  if (off == 162529308U) 
#line 493 
                         goto ldv_53904; else ;
  
#line 494 
  if (off == 154140860U) 
#line 495 
                         goto ldv_53904; else ;
  
#line 496 
  if (off == 154140840U) 
#line 497 
                         goto ldv_53904; else ;
  
#line 498 
  if (off == 154140872U) 
#line 499 
                         goto ldv_53904; else ;
  
#line 500 
  if (off == 154140708U) 
#line 501 
                         goto ldv_53904; else ;
  
#line 502 
  if (off == 154140700U) 
#line 503 
                         goto ldv_53904; else ;
  
#line 504 
  if ((off & 267386880U) == 102760448U) 
#line 505 
                                        goto ldv_53904; else ;
  
#line 507 
  if (off == 101785664U) 
#line 508 
                         goto ldv_53904; else ;
  
#line 509 
  if (off == 101785672U) 
#line 510 
                         goto ldv_53904; else ;
  
#line 511 
  if ((off & 267386880U) == 161480704U) 
#line 512 
                                        goto ldv_53904; else ;
  
#line 514 
  init_delay = 1;
  
#line 517 
  if (off == 154140680U) 
#line 518 
                         init_delay = 1000; else ;
  
#line 520 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,(unsigned long)off,(buf + i)->data);
  
#line 522 
  msleep((unsigned int)init_delay);
  ldv_53904: 
#line 523 
  ;
  
#line 476 
  i += 1;
  ldv_53906: 
#line 477 
  ;
  
#line 476 
  if (i < n) 
#line 478 
             goto ldv_53905; else 
#line 481 
                                  goto ldv_53907;
  ldv_53907: 
#line 482 
  ;
  
#line 524 
  kfree((void const *)buf);
  
#line 527 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,122683628UL,30U);
  
#line 528 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,122683468UL,8U);
  
#line 529 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,123732044UL,8U);
  
#line 530 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,118489096UL,0U);
  
#line 531 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,118489100UL,0U);
  
#line 532 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,119537672UL,0U);
  
#line 533 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,119537676UL,0U);
  
#line 534 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,120586248UL,0U);
  
#line 535 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,120586252UL,0U);
  
#line 536 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,121634824UL,0U);
  
#line 537 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,121634828UL,0U);
  
#line 538 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,116391944UL,0U);
  
#line 539 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,116391948UL,0U);
  
#line 540 
  usleep_range(1000UL,1500UL);
  
#line 542 
  writel(0U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl)));
  
#line 543 
  writel(0U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 1U)));
  
#line 545 
  __retres = 0;
  return_label: 
#line 545 
                return __retres;
}


#line 548  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_cmd_peg_ready(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 val;
  
#line 551 
  int retries = 60;
  ldv_53919: 
#line 552 
  ;
  
#line 554 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 16U)));
  
#line 556 
  switch (val) {
    case (u32)65281: 
#line 557 
    ;
    case (u32)61455: 
#line 558 
    ;
    
#line 559 
    __retres = 0;
    
#line 559 
    goto return_label;
    case (u32)65535: 
#line 560 
    ;
    
#line 561 
    goto out_err;
    default: 
#line 562 
    ;
    
#line 563 
    goto ldv_53918;
  }
  ldv_53918: 
#line 566 
  ;
  
#line 566 
  msleep(500U);
  
#line 568 
  retries -= 1;
  
#line 568 
  if (retries != 0) 
#line 570 
                    goto ldv_53919; else 
#line 573 
                                         goto ldv_53920;
  ldv_53920: 
#line 574 
  ;
  
#line 570 
  writel(65535U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 16U)));
  out_err: 
#line 573 
  ;
  
#line 574 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"Command Peg initialization not ",val);
  
#line 576 
  __retres = -5;
  return_label: 
#line 576 
                return __retres;
}


#line 580  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_receive_peg_ready(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 val;
  
#line 583 
  int retries = 2000;
  ldv_53926: 
#line 584 
  ;
  
#line 586 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 17U)));
  
#line 588 
  if (val == 65281U) {
    
#line 589 
    __retres = 0;
    
#line 589 
    goto return_label;
  }
  else ;
  
#line 591 
  msleep(10U);
  
#line 593 
  retries -= 1;
  
#line 593 
  if (retries != 0) 
#line 595 
                    goto ldv_53926; else 
#line 598 
                                         goto ldv_53927;
  ldv_53927: 
#line 599 
  ;
  
#line 595 
  if (retries == 0) {
    
#line 596 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Receive Peg initialization not ",val);
    
#line 598 
    __retres = -5;
    
#line 598 
    goto return_label;
  }
  else ;
  
#line 601 
  __retres = 0;
  return_label: 
#line 601 
                return __retres;
}


#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_check_fw_status(struct qlcnic_adapter *adapter)
{
  int __retres;
  int err;
  
#line 609 
  err = qlcnic_cmd_peg_ready(adapter);
  
#line 610 
  if (err != 0) {
    
#line 611 
    __retres = err;
    
#line 611 
    goto return_label;
  }
  else ;
  
#line 613 
  err = qlcnic_receive_peg_ready(adapter);
  
#line 614 
  if (err != 0) {
    
#line 615 
    __retres = err;
    
#line 615 
    goto return_label;
  }
  else ;
  
#line 617 
  writel(61455U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 16U)));
  
#line 619 
  __retres = err;
  return_label: 
#line 619 
                return __retres;
}


#line 623  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_setup_idc_param(struct qlcnic_adapter *adapter)
{
  int __retres;
  int timeo;
  u32 val;
  int tmp;
  int tmp_0;
  
#line 628 
  val = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 9U)));
  
#line 629 
  val = (val >> (int)adapter->portnum * 4) & 15U;
  
#line 630 
  if ((val & 3U) != 1U) {
    
#line 631 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Not an Ethernet NIC func=%u\n",val);
    
#line 633 
    __retres = -5;
    
#line 633 
    goto return_label;
  }
  else ;
  
#line 635 
  (adapter->ahw)->physical_port = (unsigned char)(val >> 2);
  
#line 636 
  tmp = qlcnic_rom_fast_read(adapter,4098140U,(u32 *)(& timeo));
  
#line 636 
  if (tmp != 0) 
#line 637 
                timeo = 30; else ;
  
#line 639 
  adapter->dev_init_timeo = (unsigned char)timeo;
  
#line 641 
  tmp_0 = qlcnic_rom_fast_read(adapter,4098144U,(u32 *)(& timeo));
  
#line 641 
  if (tmp_0 != 0) 
#line 642 
                  timeo = 10; else ;
  
#line 644 
  adapter->reset_ack_timeo = (unsigned char)timeo;
  
#line 646 
  __retres = 0;
  return_label: 
#line 646 
                return __retres;
}


#line 649  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_get_flt_entry(struct qlcnic_adapter *adapter, u8 region, struct qlcnic_flt_entry *region_entry)
{
  int __retres;
  struct qlcnic_flt_header flt_hdr;
  struct qlcnic_flt_entry *flt_entry;
  int ret;
  u32 entry_size;
  
#line 654 
  int i = 0;
  
#line 657 
  memset((void *)region_entry,0,16UL);
  
#line 658 
  ret = qlcnic_rom_fast_read_words(adapter,4132864,(u8 *)(& flt_hdr),8UL);
  
#line 661 
  if (ret != 0) {
    
#line 662 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"error reading flash layout header\n");
    
#line 664 
    __retres = -5;
    
#line 664 
    goto return_label;
  }
  else ;
  
#line 667 
  entry_size = (unsigned int)flt_hdr.len + 4294967288U;
  
#line 668 
  flt_entry = (struct qlcnic_flt_entry *)vzalloc((unsigned long)entry_size);
  
#line 669 
  if (flt_entry == (struct qlcnic_flt_entry *)0) {
    
#line 670 
    __retres = -5;
    
#line 670 
    goto return_label;
  }
  else ;
  
#line 672 
  ret = qlcnic_rom_fast_read_words(adapter,4132872,(u8 *)flt_entry,(unsigned long)entry_size);
  
#line 675 
  if (ret != 0) {
    
#line 676 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"error reading flash layout entries\n");
    
#line 678 
    goto err_out;
  }
  else ;
  
#line 681 
  goto ldv_53950;
  ldv_53949: 
#line 682 
  ;
  
#line 682 
  if ((int)(flt_entry + i)->region == (int)region) 
#line 683 
                                                   goto ldv_53948; else ;
  
#line 684 
  i += 1;
  ldv_53950: 
#line 685 
  ;
  
#line 681 
  if ((unsigned long)i < (unsigned long)(entry_size / 16U)) 
#line 683 
                                                            goto ldv_53949; else 
                                                                    
#line 686 
                                                                    goto ldv_53948;
  ldv_53948: 
#line 687 
  ;
  
#line 686 
  if ((unsigned long)i >= (unsigned long)(entry_size / 16U)) {
    
#line 687 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"region=%x not found in %d regions\n",(int)region,i);
    
#line 689 
    ret = -5;
    
#line 690 
    goto err_out;
  }
  else ;
  
#line 692 
  memcpy((void *)region_entry,(void const *)(flt_entry + i),16UL);
  err_out: 
#line 694 
  ;
  
#line 695 
  vfree((void const *)flt_entry);
  
#line 696 
  __retres = ret;
  return_label: 
#line 696 
                return __retres;
}


#line 700  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_check_flash_fw_ver(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_flt_entry fw_entry;
  u32 min_ver;
  int ret;
  
#line 703 
  u32 ver = 4294967295U;
  
#line 706 
  if ((unsigned int)(adapter->ahw)->revision_id == 88U) 
#line 707 
                                                        ret = qlcnic_get_flt_entry(adapter,(unsigned char)151,& fw_entry); else 
                                                                    
#line 710 
                                                                    ret = qlcnic_get_flt_entry(adapter,(unsigned char)116,& fw_entry);
  
#line 713 
  if (ret == 0) 
#line 715 
                qlcnic_rom_fast_read(adapter,fw_entry.start_addr + 4U,& ver); else 
                                                                    
#line 718 
                                                                    qlcnic_rom_fast_read(adapter,4097032U,& ver);
  
#line 721 
  ver = ((ver << 24) + (((ver >> 8) << 16) & 16711680U)) + (ver >> 16);
  
#line 722 
  min_ver = 67371010U;
  
#line 724 
  if (ver < min_ver) {
    
#line 725 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"firmware version %d.%d.%d unsupported.",ver >> 24,(ver >> 16) & 255U,ver & 65535U,min_ver >> 24,(min_ver >> 16) & 255U,min_ver & 65535U);
    
#line 730 
    __retres = -22;
    
#line 730 
    goto return_label;
  }
  else ;
  
#line 733 
  __retres = 0;
  return_label: 
#line 733 
                return __retres;
}


#line 737  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_has_mn(struct qlcnic_adapter *adapter)
{
  int __retres;
  int tmp;
  
#line 739 
  u32 capability = 0U;
  
#line 740 
  int err = 0;
  
#line 742 
  tmp = (*(((adapter->ahw)->hw_ops)->read_reg))(adapter,136323116UL,& err);
  
#line 742 
  capability = (unsigned int)tmp;
  
#line 743 
  if (err == -5) {
    
#line 744 
    __retres = err;
    
#line 744 
    goto return_label;
  }
  else ;
  
#line 745 
  if ((capability & 1U) != 0U) {
    
#line 746 
    __retres = 1;
    
#line 746 
    goto return_label;
  }
  else ;
  
#line 748 
  __retres = 0;
  return_label: 
#line 748 
                return __retres;
}


#line 752  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static struct uni_table_desc *qlcnic_get_table_desc(u8 const *unirom, int section)
{
  struct uni_table_desc *__retres;
  u32 i;
  u32 entries;
  
#line 755 
  struct uni_table_desc *directory = (struct uni_table_desc *)unirom;
  
#line 756 
  entries = directory->num_entries;
  
#line 758 
  i = 0U;
  
#line 758 
  goto ldv_53973;
  ldv_53972: 
#line 759 
  ;
  {
    
#line 760 
    u32 offs = directory->findex + directory->entry_size * i;
    
#line 762 
    u32 tab_type = *((__le32 *)(unirom + offs) + 8U);
    
#line 764 
    if (tab_type == (unsigned int)section) {
      
#line 765 
      __retres = (struct uni_table_desc *)(unirom + offs);
      
#line 765 
      goto return_label;
    }
    else ;
  }
  
#line 758 
  i += 1U;
  ldv_53973: 
#line 759 
  ;
  
#line 758 
  if (i < entries) 
#line 760 
                   goto ldv_53972; else 
#line 763 
                                        goto ldv_53974;
  ldv_53974: 
#line 764 
  ;
  
#line 768 
  __retres = (struct uni_table_desc *)0;
  return_label: 
#line 768 
                return __retres;
}


#line 774  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_validate_header(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 entries;
  u32 entry_size;
  u32 tab_size;
  u32 fw_file_size;
  
#line 776 
  u8 const *unirom = (adapter->fw)->data;
  
#line 777 
  struct uni_table_desc *directory = (struct uni_table_desc *)unirom;
  
#line 780 
  fw_file_size = (unsigned int)(adapter->fw)->size;
  
#line 782 
  if (fw_file_size <= 55U) {
    
#line 783 
    __retres = -22;
    
#line 783 
    goto return_label;
  }
  else ;
  
#line 785 
  entries = directory->num_entries;
  
#line 786 
  entry_size = directory->entry_size;
  
#line 787 
  tab_size = directory->findex + entries * entry_size;
  
#line 789 
  if (fw_file_size < tab_size) {
    
#line 790 
    __retres = -22;
    
#line 790 
    goto return_label;
  }
  else ;
  
#line 792 
  __retres = 0;
  return_label: 
#line 792 
                return __retres;
}


#line 796  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_validate_bootld(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct uni_table_desc *tab_desc;
  struct uni_data_desc *descr;
  u32 offs;
  u32 tab_size;
  u32 data_size;
  u32 idx;
  __le32 temp;
  
#line 801 
  u8 const *unirom = (adapter->fw)->data;
  
#line 804 
  temp = *((__le32 *)(unirom + adapter->file_prd_off) + 27U);
  
#line 806 
  idx = temp;
  
#line 807 
  tab_desc = qlcnic_get_table_desc(unirom,6);
  
#line 809 
  if (tab_desc == (struct uni_table_desc *)0) {
    
#line 810 
    __retres = -22;
    
#line 810 
    goto return_label;
  }
  else ;
  
#line 812 
  tab_size = tab_desc->findex + tab_desc->entry_size * (idx + 1U);
  
#line 815 
  if ((adapter->fw)->size < (unsigned long)tab_size) {
    
#line 816 
    __retres = -22;
    
#line 816 
    goto return_label;
  }
  else ;
  
#line 818 
  offs = tab_desc->findex + tab_desc->entry_size * idx;
  
#line 820 
  descr = (struct uni_data_desc *)(unirom + offs);
  
#line 822 
  data_size = descr->findex + descr->size;
  
#line 824 
  if ((adapter->fw)->size < (unsigned long)data_size) {
    
#line 825 
    __retres = -22;
    
#line 825 
    goto return_label;
  }
  else ;
  
#line 827 
  __retres = 0;
  return_label: 
#line 827 
                return __retres;
}


#line 831  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_validate_fw(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct uni_table_desc *tab_desc;
  struct uni_data_desc *descr;
  u32 offs;
  u32 tab_size;
  u32 data_size;
  u32 idx;
  __le32 temp;
  
#line 835 
  u8 const *unirom = (adapter->fw)->data;
  
#line 839 
  temp = *((__le32 *)(unirom + adapter->file_prd_off) + 29U);
  
#line 841 
  idx = temp;
  
#line 842 
  tab_desc = qlcnic_get_table_desc(unirom,7);
  
#line 844 
  if (tab_desc == (struct uni_table_desc *)0) {
    
#line 845 
    __retres = -22;
    
#line 845 
    goto return_label;
  }
  else ;
  
#line 847 
  tab_size = tab_desc->findex + tab_desc->entry_size * (idx + 1U);
  
#line 850 
  if ((adapter->fw)->size < (unsigned long)tab_size) {
    
#line 851 
    __retres = -22;
    
#line 851 
    goto return_label;
  }
  else ;
  
#line 853 
  offs = tab_desc->findex + tab_desc->entry_size * idx;
  
#line 855 
  descr = (struct uni_data_desc *)(unirom + offs);
  
#line 856 
  data_size = descr->findex + descr->size;
  
#line 858 
  if ((adapter->fw)->size < (unsigned long)data_size) {
    
#line 859 
    __retres = -22;
    
#line 859 
    goto return_label;
  }
  else ;
  
#line 861 
  __retres = 0;
  return_label: 
#line 861 
                return __retres;
}


#line 865  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_validate_product_offs(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct uni_table_desc *ptab_descr;
  u32 entries;
  u32 entry_size;
  u32 tab_size;
  u32 i;
  __le32 temp;
  
#line 868 
  u8 const *unirom = (adapter->fw)->data;
  
#line 869 
  int mn_present = qlcnic_has_mn(adapter);
  
#line 873 
  ptab_descr = qlcnic_get_table_desc(unirom,0);
  
#line 875 
  if (ptab_descr == (struct uni_table_desc *)0) {
    
#line 876 
    __retres = -22;
    
#line 876 
    goto return_label;
  }
  else ;
  
#line 878 
  entries = ptab_descr->num_entries;
  
#line 879 
  entry_size = ptab_descr->entry_size;
  
#line 880 
  tab_size = ptab_descr->findex + entries * entry_size;
  
#line 882 
  if ((adapter->fw)->size < (unsigned long)tab_size) {
    
#line 883 
    __retres = -22;
    
#line 883 
    goto return_label;
  }
  else ;
  nomn: 
#line 885 
  ;
  
#line 886 
  i = 0U;
  
#line 886 
  goto ldv_54024;
  ldv_54023: 
#line 887 
  ;
  {
    u32 flags;
    u32 file_chiprev;
    u32 offs;
    u32 flagbit;
    int tmp_0;
    
#line 889 
    u8 chiprev = (adapter->ahw)->revision_id;
    
#line 892 
    offs = ptab_descr->findex + ptab_descr->entry_size * i;
    
#line 894 
    temp = *((__le32 *)(unirom + offs) + 11U);
    
#line 895 
    flags = temp;
    
#line 896 
    temp = *((__le32 *)(unirom + offs) + 10U);
    
#line 897 
    file_chiprev = temp;
    
#line 899 
    if (mn_present != 0) 
#line 899 
                         tmp_0 = 1; else 
#line 899 
                                         tmp_0 = 2;
    
#line 899 
    flagbit = (unsigned int)tmp_0;
    
#line 901 
    if ((unsigned int)chiprev == file_chiprev && (((unsigned long long)flags >> flagbit) & 1ULL) != 0ULL) {
      
#line 903 
      adapter->file_prd_off = offs;
      
#line 904 
      __retres = 0;
      
#line 904 
      goto return_label;
    }
    else ;
  }
  
#line 886 
  i += 1U;
  ldv_54024: 
#line 887 
  ;
  
#line 886 
  if (i < entries) 
#line 888 
                   goto ldv_54023; else 
#line 891 
                                        goto ldv_54025;
  ldv_54025: 
#line 892 
  ;
  
#line 907 
  if (mn_present != 0) {
    
#line 908 
    mn_present = 0;
    
#line 909 
    goto nomn;
  }
  else ;
  
#line 911 
  __retres = -22;
  return_label: 
#line 911 
                return __retres;
}


#line 915  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_validate_unified_romimage(struct qlcnic_adapter *adapter)
{
  int __retres;
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  
#line 917 
  tmp = qlcnic_validate_header(adapter);
  
#line 917 
  if (tmp != 0) {
    
#line 918 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"unified image: header validation failed\n");
    
#line 920 
    __retres = -22;
    
#line 920 
    goto return_label;
  }
  else ;
  
#line 923 
  tmp_0 = qlcnic_validate_product_offs(adapter);
  
#line 923 
  if (tmp_0 != 0) {
    
#line 924 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"unified image: product validation failed\n");
    
#line 926 
    __retres = -22;
    
#line 926 
    goto return_label;
  }
  else ;
  
#line 929 
  tmp_1 = qlcnic_validate_bootld(adapter);
  
#line 929 
  if (tmp_1 != 0) {
    
#line 930 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"unified image: bootld validation failed\n");
    
#line 932 
    __retres = -22;
    
#line 932 
    goto return_label;
  }
  else ;
  
#line 935 
  tmp_2 = qlcnic_validate_fw(adapter);
  
#line 935 
  if (tmp_2 != 0) {
    
#line 936 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"unified image: firmware validation failed\n");
    
#line 938 
    __retres = -22;
    
#line 938 
    goto return_label;
  }
  else ;
  
#line 941 
  __retres = 0;
  return_label: 
#line 941 
                return __retres;
}


#line 945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static struct uni_data_desc *qlcnic_get_data_desc(struct qlcnic_adapter *adapter, u32 section, u32 idx_offset)
{
  struct uni_data_desc *__retres;
  struct uni_table_desc *tab_desc;
  u32 offs;
  u32 idx;
  __le32 temp;
  
#line 948 
  u8 const *unirom = (adapter->fw)->data;
  
#line 953 
  temp = *((__le32 *)(unirom + adapter->file_prd_off) + idx_offset);
  
#line 954 
  idx = temp;
  
#line 956 
  tab_desc = qlcnic_get_table_desc(unirom,(int)section);
  
#line 958 
  if (tab_desc == (struct uni_table_desc *)0) {
    
#line 959 
    __retres = (struct uni_data_desc *)0;
    
#line 959 
    goto return_label;
  }
  else ;
  
#line 961 
  offs = tab_desc->findex + tab_desc->entry_size * idx;
  
#line 964 
  __retres = (struct uni_data_desc *)(unirom + offs);
  return_label: 
#line 964 
                return __retres;
}


#line 968  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static u8 *qlcnic_get_bootld_offs(struct qlcnic_adapter *adapter)
{
  u8 *__retres;
  struct uni_data_desc *data_desc;
  
#line 970 
  u32 offs = 65536U;
  
#line 973 
  data_desc = qlcnic_get_data_desc(adapter,6U,27U);
  
#line 976 
  if ((unsigned int)(adapter->ahw)->fw_type == 0U) 
#line 977 
                                                   offs = data_desc->findex; else ;
  
#line 979 
  __retres = (u8 *)((adapter->fw)->data + offs);
  
#line 979 
  return __retres;
}


#line 983  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static u8 *qlcnic_get_fw_offs(struct qlcnic_adapter *adapter)
{
  u8 *__retres;
  struct uni_data_desc *data_desc;
  
#line 985 
  u32 offs = 274432U;
  
#line 988 
  data_desc = qlcnic_get_data_desc(adapter,7U,29U);
  
#line 990 
  if ((unsigned int)(adapter->ahw)->fw_type == 0U) 
#line 991 
                                                   offs = data_desc->findex; else ;
  
#line 993 
  __retres = (u8 *)((adapter->fw)->data + offs);
  
#line 993 
  return __retres;
}


#line 996  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static u32 qlcnic_get_fw_size(struct qlcnic_adapter *adapter)
{
  u32 __retres;
  struct uni_data_desc *data_desc;
  
#line 999 
  u8 const *unirom = (adapter->fw)->data;
  
#line 1001 
  data_desc = qlcnic_get_data_desc(adapter,7U,29U);
  
#line 1004 
  if ((unsigned int)(adapter->ahw)->fw_type == 0U) {
    
#line 1005 
    __retres = data_desc->size;
    
#line 1005 
    goto return_label;
  }
  else {
    
#line 1007 
    __retres = *((__le32 *)(unirom + 4097036U));
    
#line 1007 
    goto return_label;
  }
  return_label: 
#line 1004 
                return __retres;
}


#line 1010  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static u32 qlcnic_get_fw_version(struct qlcnic_adapter *adapter)
{
  u32 __retres;
  struct uni_data_desc *fw_data_desc;
  u32 major;
  u32 minor;
  u32 sub;
  __le32 version_offset;
  u8 const *ver_str;
  int i;
  int ret;
  int tmp;
  
#line 1013 
  struct firmware const *fw = adapter->fw;
  
#line 1019 
  if ((unsigned int)(adapter->ahw)->fw_type != 0U) {
    
#line 1020 
    version_offset = *((__le32 *)(fw->data + 4097032U));
    
#line 1021 
    __retres = version_offset;
    
#line 1021 
    goto return_label;
  }
  else ;
  
#line 1024 
  fw_data_desc = qlcnic_get_data_desc(adapter,7U,29U);
  
#line 1026 
  ver_str = fw->data + ((unsigned long)(fw_data_desc->findex + fw_data_desc->size) + 18446744073709551599U);
  
#line 1029 
  i = 0;
  
#line 1029 
  goto ldv_54067;
  ldv_54066: 
#line 1030 
  ;
  
#line 1030 
  tmp = strncmp((char const *)(ver_str + i),"REV=",4UL);
  
#line 1030 
  if (tmp == 0) {
    
#line 1031 
    ret = sscanf((char const *)(ver_str + ((unsigned int)i + 4U)),"%u.%u.%u ",& major,& minor,& sub);
    
#line 1033 
    if (ret != 3) {
      
#line 1034 
      __retres = 0U;
      
#line 1034 
      goto return_label;
    }
    else {
      
#line 1036 
      __retres = ((minor << 8) + major) + (sub << 16);
      
#line 1036 
      goto return_label;
    }
  }
  else ;
  
#line 1029 
  i += 1;
  ldv_54067: 
#line 1030 
  ;
  
#line 1029 
  if (i <= 11) 
#line 1031 
               goto ldv_54066; else 
#line 1034 
                                    goto ldv_54068;
  ldv_54068: 
#line 1035 
  ;
  
#line 1040 
  __retres = 0U;
  return_label: 
#line 1040 
                return __retres;
}


#line 1043  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static u32 qlcnic_get_bios_version(struct qlcnic_adapter *adapter)
{
  u32 __retres;
  u32 bios_ver;
  u8 *version_offset;
  __le32 temp;
  
#line 1045 
  struct firmware const *fw = adapter->fw;
  
#line 1046 
  u32 prd_off = adapter->file_prd_off;
  
#line 1050 
  if ((unsigned int)(adapter->ahw)->fw_type != 0U) {
    
#line 1051 
    version_offset = (u8 *)(fw->data + 4098108U);
    
#line 1052 
    __retres = *((__le32 *)version_offset);
    
#line 1052 
    goto return_label;
  }
  else ;
  
#line 1055 
  temp = *((__le32 *)(fw->data + prd_off) + 12U);
  
#line 1056 
  bios_ver = temp;
  
#line 1058 
  __retres = ((bios_ver << 16) + ((bios_ver >> 8) & 65280U)) + (bios_ver >> 24);
  return_label: 
#line 1058 
                return __retres;
}


#line 1061  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static void qlcnic_rom_lock_recovery(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 1063 
  tmp = qlcnic_pcie_sem_lock(adapter,2,136323328U);
  
#line 1063 
  if (tmp != 0) 
#line 1064 
                _dev_info((struct device const *)(& (adapter->pdev)->dev),"Resetting rom_lock\n"); else ;
  
#line 1066 
  qlcnic_pcie_sem_unlock(adapter,2);
  
#line 1067 
  return;
}


#line 1070  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_check_fw_hearbeat(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 heartbeat;
  
#line 1072 
  u32 ret = 4294967291U;
  
#line 1073 
  int retries = 10;
  
#line 1075 
  adapter->heartbeat = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 2U)));
  ldv_54087: 
#line 1076 
  ;
  
#line 1079 
  msleep(200U);
  
#line 1080 
  heartbeat = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 2U)));
  
#line 1082 
  if (adapter->heartbeat != heartbeat) {
    
#line 1083 
    ret = 0U;
    
#line 1084 
    goto ldv_54086;
  }
  else ;
  
#line 1086 
  retries -= 1;
  
#line 1086 
  if (retries != 0) 
#line 1088 
                    goto ldv_54087; else 
#line 1091 
                                         goto ldv_54086;
  ldv_54086: 
#line 1092 
  ;
  
#line 1088 
  __retres = (int)ret;
  
#line 1088 
  return __retres;
}


#line 1092  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_need_fw_reset(struct qlcnic_adapter *adapter)
{
  int __retres;
  
#line 1094 
  if ((adapter->flags & 16384U) != 0U) 
#line 1094 
                                       goto _LOR;
  else {
    int tmp;
    
#line 1094 
    tmp = qlcnic_check_fw_hearbeat(adapter);
    
#line 1094 
    if (tmp != 0) {
      _LOR: {
              
#line 1096 
              qlcnic_rom_lock_recovery(adapter);
              
#line 1097 
              __retres = 1;
              
#line 1097 
              goto return_label;
            }
    }
    else ;
  }
  
#line 1100 
  if ((unsigned int)adapter->need_fw_reset != 0U) {
    
#line 1101 
    __retres = 1;
    
#line 1101 
    goto return_label;
  }
  else ;
  
#line 1103 
  if (adapter->fw != (struct firmware const *)0) {
    
#line 1104 
    __retres = 1;
    
#line 1104 
    goto return_label;
  }
  else ;
  
#line 1106 
  __retres = 0;
  return_label: 
#line 1106 
                return __retres;
}


#line 1109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static char const *fw_name[2U] = {"phanfw.bin", "flash"};

#line 1115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
int qlcnic_load_firmware(struct qlcnic_adapter *adapter)
{
  int __retres;
  __le64 *ptr64;
  u32 i;
  u32 flashaddr;
  u32 size;
  
#line 1119 
  struct firmware const *fw = adapter->fw;
  
#line 1120 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1122 
  _dev_info((struct device const *)(& pdev->dev),"loading firmware from %s\n",fw_name[(int)(adapter->ahw)->fw_type]);
  
#line 1125 
  if (fw != (struct firmware const *)0) {
    u64 data;
    int tmp_0;
    u32 tmp_1;
    int tmp_3;
    u32 tmp_4;
    
#line 1128 
    size = 26112U;
    
#line 1130 
    ptr64 = (__le64 *)qlcnic_get_bootld_offs(adapter);
    
#line 1131 
    flashaddr = 65536U;
    
#line 1133 
    i = 0U;
    
#line 1133 
    goto ldv_54103;
    ldv_54102: 
#line 1134 
    ;
    
#line 1134 
    data = *(ptr64 + i);
    
#line 1136 
    tmp_0 = qlcnic_pci_mem_write_2M(adapter,(unsigned long long)flashaddr,data);
    
#line 1136 
    if (tmp_0 != 0) {
      
#line 1137 
      __retres = -5;
      
#line 1137 
      goto return_label;
    }
    else ;
    
#line 1139 
    flashaddr += 8U;
    
#line 1133 
    i += 1U;
    ldv_54103: 
#line 1134 
    ;
    
#line 1133 
    if (i < size) 
#line 1135 
                  goto ldv_54102; else 
#line 1138 
                                       goto ldv_54104;
    ldv_54104: 
#line 1139 
    ;
    
#line 1142 
    tmp_1 = qlcnic_get_fw_size(adapter);
    
#line 1142 
    size = tmp_1 / 8U;
    
#line 1144 
    ptr64 = (__le64 *)qlcnic_get_fw_offs(adapter);
    
#line 1145 
    flashaddr = 274432U;
    
#line 1147 
    i = 0U;
    
#line 1147 
    goto ldv_54106;
    ldv_54105: 
#line 1148 
    ;
    
#line 1148 
    data = *(ptr64 + i);
    
#line 1150 
    tmp_3 = qlcnic_pci_mem_write_2M(adapter,(unsigned long long)flashaddr,data);
    
#line 1150 
    if (tmp_3 != 0) {
      
#line 1152 
      __retres = -5;
      
#line 1152 
      goto return_label;
    }
    else ;
    
#line 1154 
    flashaddr += 8U;
    
#line 1147 
    i += 1U;
    ldv_54106: 
#line 1148 
    ;
    
#line 1147 
    if (i < size) 
#line 1149 
                  goto ldv_54105; else 
#line 1152 
                                       goto ldv_54107;
    ldv_54107: 
#line 1153 
    ;
    
#line 1157 
    tmp_4 = qlcnic_get_fw_size(adapter);
    
#line 1157 
    size = tmp_4 & 7U;
    
#line 1158 
    if (size != 0U) {
      int tmp_5;
      
#line 1159 
      data = *(ptr64 + i);
      
#line 1161 
      tmp_5 = qlcnic_pci_mem_write_2M(adapter,(unsigned long long)flashaddr,data);
      
#line 1161 
      if (tmp_5 != 0) {
        
#line 1163 
        __retres = -5;
        
#line 1163 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  else {
    u64 data_0;
    u32 hi;
    u32 lo;
    int ret;
    struct qlcnic_flt_entry bootld_entry;
    int tmp_6;
    int tmp_7;
    int tmp_8;
    
#line 1172 
    ret = qlcnic_get_flt_entry(adapter,(unsigned char)114,& bootld_entry);
    
#line 1174 
    if (ret == 0) {
      
#line 1175 
      size = bootld_entry.size / 8U;
      
#line 1176 
      flashaddr = bootld_entry.start_addr;
    }
    else {
      
#line 1178 
      size = 26112U;
      
#line 1179 
      flashaddr = 65536U;
      
#line 1180 
      _dev_info((struct device const *)(& pdev->dev),"using legacy method to get flash fw region");
    }
    
#line 1184 
    i = 0U;
    
#line 1184 
    goto ldv_54114;
    ldv_54113: 
#line 1185 
    ;
    
#line 1185 
    tmp_6 = qlcnic_rom_fast_read(adapter,flashaddr,& lo);
    
#line 1185 
    if (tmp_6 != 0) {
      
#line 1187 
      __retres = -5;
      
#line 1187 
      goto return_label;
    }
    else ;
    
#line 1188 
    tmp_7 = qlcnic_rom_fast_read(adapter,flashaddr + 4U,& hi);
    
#line 1188 
    if (tmp_7 != 0) {
      
#line 1190 
      __retres = -5;
      
#line 1190 
      goto return_label;
    }
    else ;
    
#line 1192 
    data_0 = ((unsigned long long)hi << 32) | (unsigned long long)lo;
    
#line 1194 
    tmp_8 = qlcnic_pci_mem_write_2M(adapter,(unsigned long long)flashaddr,data_0);
    
#line 1194 
    if (tmp_8 != 0) {
      
#line 1196 
      __retres = -5;
      
#line 1196 
      goto return_label;
    }
    else ;
    
#line 1198 
    flashaddr += 8U;
    
#line 1184 
    i += 1U;
    ldv_54114: 
#line 1185 
    ;
    
#line 1184 
    if (i < size) 
#line 1186 
                  goto ldv_54113; else 
#line 1189 
                                       goto ldv_54115;
    ldv_54115: 
#line 1190 
    ;
  }
  
#line 1201 
  usleep_range(1000UL,1500UL);
  
#line 1203 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,118489112UL,4128U);
  
#line 1204 
  (*(((adapter->ahw)->hw_ops)->write_reg))(adapter,154140680UL,8388638U);
  
#line 1205 
  __retres = 0;
  return_label: 
#line 1205 
                return __retres;
}


#line 1209  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static int qlcnic_validate_firmware(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 val;
  u32 ver;
  u32 bios;
  u32 min_size;
  
#line 1213 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1214 
  struct firmware const *fw = adapter->fw;
  
#line 1215 
  u8 fw_type = (adapter->ahw)->fw_type;
  
#line 1217 
  if ((unsigned int)fw_type == 0U) {
    int tmp;
    
#line 1218 
    tmp = qlcnic_validate_unified_romimage(adapter);
    
#line 1218 
    if (tmp != 0) {
      
#line 1219 
      __retres = -22;
      
#line 1219 
      goto return_label;
    }
    else ;
    
#line 1221 
    min_size = 819200U;
  }
  else {
    
#line 1223 
    val = *((__le32 *)(fw->data + 16680U));
    
#line 1224 
    if (val != 305419896U) {
      
#line 1225 
      __retres = -22;
      
#line 1225 
      goto return_label;
    }
    else ;
    
#line 1227 
    min_size = 4194303U;
  }
  
#line 1230 
  if (fw->size < (unsigned long)min_size) {
    
#line 1231 
    __retres = -22;
    
#line 1231 
    goto return_label;
  }
  else ;
  
#line 1233 
  val = qlcnic_get_fw_version(adapter);
  
#line 1234 
  ver = ((val << 24) + (((val >> 8) << 16) & 16711680U)) + (val >> 16);
  
#line 1236 
  if (ver <= 67371009U) {
    
#line 1237 
    dev_err((struct device const *)(& pdev->dev),"%s: firmware version %d.%d.%d unsupported\n",fw_name[(int)fw_type],ver >> 24,(ver >> 16) & 255U,ver & 65535U);
    
#line 1240 
    __retres = -22;
    
#line 1240 
    goto return_label;
  }
  else ;
  
#line 1243 
  val = qlcnic_get_bios_version(adapter);
  
#line 1244 
  qlcnic_rom_fast_read(adapter,4098108U,& bios);
  
#line 1245 
  if (val != bios) {
    
#line 1246 
    dev_err((struct device const *)(& pdev->dev),"%s: firmware bios is incompatible\n",fw_name[(int)fw_type]);
    
#line 1248 
    __retres = -22;
    
#line 1248 
    goto return_label;
  }
  else ;
  
#line 1251 
  writel(305419896U,(void volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->reg_tbl + 15U)));
  
#line 1252 
  __retres = 0;
  return_label: 
#line 1252 
                return __retres;
}


#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
static void qlcnic_get_next_fwtype(struct qlcnic_adapter *adapter)
{
  u8 fw_type;
  
#line 1260 
  switch ((int)(adapter->ahw)->fw_type) {
    case 255: 
#line 1261 
    ;
    
#line 1262 
    fw_type = (unsigned char)0U;
    
#line 1263 
    goto ldv_54131;
    case 0: 
#line 1265 
    ;
    default: 
#line 1266 
    ;
    
#line 1267 
    fw_type = (unsigned char)1U;
    
#line 1268 
    goto ldv_54131;
  }
  ldv_54131: 
#line 1271 
  ;
  
#line 1271 
  (adapter->ahw)->fw_type = fw_type;
  
#line 1272 
  return;
}


#line 1276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_request_firmware(struct qlcnic_adapter *adapter)
{
  int rc;
  
#line 1278 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1281 
  (adapter->ahw)->fw_type = (unsigned char)255U;
  next: 
#line 1283 
  ;
  
#line 1284 
  qlcnic_get_next_fwtype(adapter);
  
#line 1286 
  if ((unsigned int)(adapter->ahw)->fw_type == 1U) 
#line 1287 
                                                   adapter->fw = (struct firmware const *)0;
  else {
    
#line 1289 
    rc = request_firmware(& adapter->fw,fw_name[(int)(adapter->ahw)->fw_type],& pdev->dev);
    
#line 1292 
    if (rc != 0) 
#line 1293 
                 goto next; else ;
    
#line 1295 
    rc = qlcnic_validate_firmware(adapter);
    
#line 1296 
    if (rc != 0) {
      
#line 1297 
      release_firmware(adapter->fw);
      
#line 1298 
      usleep_range(1000UL,1500UL);
      
#line 1299 
      goto next;
    }
    else ;
  }
  
#line 1302 
  return;
}


#line 1306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_init.c"
void qlcnic_release_firmware(struct qlcnic_adapter *adapter)
{
  
#line 1308 
  release_firmware(adapter->fw);
  
#line 1309 
  adapter->fw = (struct firmware const *)0;
  
#line 1310 
  return;
}


#line 503  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_init.c.aux"
static void *kcalloc_3(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 506 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 506 
  return tmp;
}


#line 766  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_init.c.aux"
static void ldv_spin_lock_75_0(spinlock_t *lock)
{
  
#line 770 
  ldv_spin_model_lock((char *)"tx_clean_lock_of_qlcnic_host_tx_ring");
  
#line 772 
  spin_lock_2(lock);
  
#line 773 
  return;
}


#line 776  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_init.c.aux"
static void ldv_spin_unlock_76_0(spinlock_t *lock)
{
  
#line 780 
  ldv_spin_model_unlock((char *)"tx_clean_lock_of_qlcnic_host_tx_ring");
  
#line 782 
  spin_unlock_2(lock);
  
#line 783 
  return;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_3(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 358 
static void ldv_spin_lock_82_0(spinlock_t *lock);


#line 362 
static void ldv_spin_lock_84(spinlock_t *lock);


#line 366 
static void ldv_spin_lock_86(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_88_0(spinlock_t *lock);


#line 371  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_bh_1(spinlock_t *lock)
{
  
#line 373 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 374 
  return;
}


#line 395 
static void ldv_spin_lock_bh_71(spinlock_t *lock);


#line 399 
static void ldv_spin_lock_bh_91(spinlock_t *lock);


#line 403 
static void ldv_spin_lock_bh_93(spinlock_t *lock);


#line 407 
static void ldv_spin_lock_bh_95(spinlock_t *lock);


#line 411 
static void ldv_spin_lock_bh_97(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_3(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 407 
static void ldv_spin_unlock_83_0(spinlock_t *lock);


#line 411 
static void ldv_spin_unlock_85_0(spinlock_t *lock);


#line 415 
static void ldv_spin_unlock_87_0(spinlock_t *lock);


#line 419 
static void ldv_spin_unlock_89_0(spinlock_t *lock);


#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_bh_1(spinlock_t *lock)
{
  
#line 422 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 423 
  return;
}


#line 444 
static void ldv_spin_unlock_bh_73(spinlock_t *lock);


#line 452 
static void ldv_spin_unlock_bh_92(spinlock_t *lock);


#line 456 
static void ldv_spin_unlock_bh_94(spinlock_t *lock);


#line 460 
static void ldv_spin_unlock_bh_96(spinlock_t *lock);


#line 464 
static void ldv_spin_unlock_bh_98(spinlock_t *lock);


#line 478  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_1(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 480 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 481 
  return;
}


#line 510 
static void ldv_spin_unlock_irqrestore_76_0(spinlock_t *lock, unsigned long flags);


#line 514 
static void ldv_spin_unlock_irqrestore_78_0(spinlock_t *lock, unsigned long flags);


#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_mutex_lock_80(struct mutex *ldv_func_arg1);


#line 74 
static void ldv___ldv_spin_lock_75_0(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_77_0(spinlock_t *ldv_func_arg1);


#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
static void ldv_mutex_unlock_81(struct mutex *ldv_func_arg1);


#line 490  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
static bool ldv_queue_work_79_0(struct workqueue_struct *wq, struct work_struct *work);


#line 494 
static bool ldv_queue_work_90(struct workqueue_struct *wq, struct work_struct *work);


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kcalloc_4(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc_7(size_t size, gfp_t flags);


#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pci_bus_read_config_word(struct pci_bus *, unsigned int, int, u16 *);


#line 887  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_read_config_word(struct pci_dev const *dev, int where, u16 *val)
{
  int tmp;
  
#line 889 
  tmp = pci_bus_read_config_word(dev->bus,dev->devfn,where,val);
  
#line 889 
  return tmp;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/random.h"
void get_random_bytes(void *, int);


#line 3314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_addr_lock_bh(struct net_device *dev)
{
  
#line 3316 
  ldv_spin_lock_bh_71(& dev->addr_list_lock);
  
#line 3317 
  return;
}


#line 3324  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_addr_unlock_bh(struct net_device *dev)
{
  
#line 3326 
  ldv_spin_unlock_bh_73(& dev->addr_list_lock);
  
#line 3327 
  return;
}


#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  
#line 220 
  get_random_bytes((void *)addr,6);
  
#line 221 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  
#line 222 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  
#line 223 
  return;
}


#line 2350  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic.h"
__inline static bool qlcnic_83xx_vf_check(struct qlcnic_adapter *adapter)
{
  bool __retres;
  
#line 2352 
  unsigned short device = (adapter->pdev)->device;
  
#line 2354 
  __retres = (_Bool)((unsigned int)device == 33840U);
  
#line 2354 
  return __retres;
}


#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_free_mac_list(struct qlcnic_adapter *adapter);


#line 32 
static int qlcnic_sriov_alloc_bc_mbx_args(struct qlcnic_cmd_args *mbx, u32 type);


#line 33 
static void qlcnic_sriov_vf_poll_dev_state(struct work_struct *work);


#line 34 
static void qlcnic_sriov_vf_cancel_fw_work(struct qlcnic_adapter *adapter);


#line 35 
static void qlcnic_sriov_cleanup_transaction(struct qlcnic_bc_trans *trans);


#line 36 
static int qlcnic_sriov_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd);


#line 38 
static int qlcnic_sriov_channel_cfg_cmd(struct qlcnic_adapter *adapter, u8 cmd_op);


#line 39 
static void qlcnic_sriov_process_bc_cmd(struct work_struct *work);


#line 40 
static int qlcnic_sriov_vf_shutdown(struct pci_dev *pdev);


#line 41 
static int qlcnic_sriov_vf_resume(struct qlcnic_adapter *adapter);


#line 42 
static int qlcnic_sriov_async_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static struct qlcnic_hardware_ops qlcnic_sriov_vf_hw_ops = {.read_crb = & qlcnic_83xx_read_crb, .write_crb = & qlcnic_83xx_write_crb, .read_reg = & qlcnic_83xx_rd_reg_indirect, .write_reg = & qlcnic_83xx_wrt_reg_indirect, .get_ocm_win = (void (*)(struct qlcnic_hardware_context *))0, .get_mac_address = & qlcnic_83xx_get_mac_address, .setup_intr = & qlcnic_83xx_setup_intr, .alloc_mbx_args = & qlcnic_83xx_alloc_mbx_args, .mbx_cmd = & qlcnic_sriov_issue_cmd, .get_func_no = & qlcnic_83xx_get_func_no, .api_lock = & qlcnic_83xx_cam_lock, .api_unlock = & qlcnic_83xx_cam_unlock, .add_sysfs = (void (*)(struct qlcnic_adapter *))0, .remove_sysfs = (void (*)(struct qlcnic_adapter *))0, .process_lb_rcv_ring_diag = & qlcnic_83xx_process_rcv_ring_diag, .create_rx_ctx = & qlcnic_83xx_create_rx_ctx, .create_tx_ctx = & qlcnic_83xx_create_tx_ctx, .del_rx_ctx = & qlcnic_83xx_del_rx_ctx, .del_tx_ctx = & qlcnic_83xx_del_tx_ctx, .setup_link_event = & qlcnic_83xx_setup_link_event, .get_nic_info = & qlcnic_83xx_get_nic_info, .get_pci_info = & qlcnic_83xx_get_pci_info, .set_nic_info = & qlcnic_83xx_set_nic_info, .change_macvlan = & qlcnic_83xx_sre_macaddr_change, .napi_enable = & qlcnic_83xx_napi_enable, .napi_disable = & qlcnic_83xx_napi_disable, .config_intr_coal = & qlcnic_83xx_config_intr_coal, .config_rss = & qlcnic_83xx_config_rss, .config_hw_lro = & qlcnic_83xx_config_hw_lro, .config_loopback = (int (*)(struct qlcnic_adapter *, u8 ))0, .clear_loopback = (int (*)(struct qlcnic_adapter *, u8 ))0, .config_promisc_mode = & qlcnic_83xx_nic_set_promisc, .change_l2_filter = & qlcnic_83xx_change_l2_filter, .get_board_info = & qlcnic_83xx_get_port_info, .set_mac_filter_count = (void (*)(struct qlcnic_adapter *))0, .free_mac_list = & qlcnic_sriov_vf_free_mac_list, .read_phys_port_id = (int (*)(struct qlcnic_adapter *))0, .io_error_detected = (pci_ers_result_t (*)(struct pci_dev *, pci_channel_state_t ))0, .io_slot_reset = (pci_ers_result_t (*)(struct pci_dev *))0, .io_resume = (void (*)(struct pci_dev *))0, .get_beacon_state = (void (*)(struct qlcnic_adapter *))0, .enable_sds_intr = & qlcnic_83xx_enable_sds_intr, .disable_sds_intr = & qlcnic_83xx_disable_sds_intr, .enable_tx_intr = (void (*)(struct qlcnic_adapter *, struct qlcnic_host_tx_ring *))0, .disable_tx_intr = (void (*)(struct qlcnic_adapter *, struct qlcnic_host_tx_ring *))0, .get_saved_state = (u32 (*)(void *, u32 ))0, .set_saved_state = (void (*)(void *, u32 , u32 ))0, .cache_tmpl_hdr_values = (void (*)(struct qlcnic_fw_dump *))0, .get_cap_size = (u32 (*)(void *, int ))0, .set_sys_info = (void (*)(void *, int , u32 ))0, .store_cap_mask = (void (*)(void *, u32 ))0};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static struct qlcnic_nic_template qlcnic_sriov_vf_ops = {.config_bridged_mode = & qlcnic_config_bridged_mode, .config_led = & qlcnic_config_led, .start_firmware = (int (*)(struct qlcnic_adapter *))0, .init_driver = (int (*)(struct qlcnic_adapter *))0, .request_reset = (void (*)(struct qlcnic_adapter *, u32 ))0, .cancel_idc_work = & qlcnic_sriov_vf_cancel_fw_work, .napi_add = & qlcnic_83xx_napi_add, .napi_del = & qlcnic_83xx_napi_del, .config_ipaddr = & qlcnic_83xx_config_ipaddr, .clear_legacy_intr = & qlcnic_83xx_clear_legacy_intr, .shutdown = & qlcnic_sriov_vf_shutdown, .resume = & qlcnic_sriov_vf_resume};

#line 92  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static struct qlcnic_mailbox_metadata const qlcnic_sriov_bc_mbx_tbl[4U] = {{.cmd = 0U, .in_args = 2U, .out_args = 2U}, {.cmd = 1U, .in_args = 2U, .out_args = 2U}, {.cmd = 2U, .in_args = 3U, .out_args = 14U}, {.cmd = 3U, .in_args = 2U, .out_args = 2U}};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
__inline static bool qlcnic_sriov_bc_msg_check(u32 val)
{
  bool __retres;
  
#line 101 
  __retres = (_Bool)(((int)val & 1) != 0);
  
#line 101 
  return __retres;
}


#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
__inline static bool qlcnic_sriov_channel_free_check(u32 val)
{
  bool __retres;
  
#line 106 
  __retres = (_Bool)(((int)(val >> 1) & 1) != 0);
  
#line 106 
  return __retres;
}


#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
__inline static bool qlcnic_sriov_flr_check(u32 val)
{
  bool __retres;
  
#line 111 
  __retres = (_Bool)(((int)(val >> 2) & 1) != 0);
  
#line 111 
  return __retres;
}


#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
__inline static u8 qlcnic_sriov_target_func_id(u32 val)
{
  u8 __retres;
  
#line 116 
  __retres = (unsigned char)(val >> 4);
  
#line 116 
  return __retres;
}


#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_virtid_fn(struct qlcnic_adapter *adapter, int vf_id)
{
  int __retres;
  int pos;
  u16 stride;
  u16 offset;
  bool tmp;
  
#line 121 
  struct pci_dev *dev = adapter->pdev;
  
#line 125 
  tmp = qlcnic_sriov_vf_check(adapter);
  
#line 125 
  if ((int)tmp != 0) {
    
#line 126 
    __retres = 0;
    
#line 126 
    goto return_label;
  }
  else ;
  
#line 128 
  pos = pci_find_ext_capability(dev,16);
  
#line 129 
  pci_read_config_word((struct pci_dev const *)dev,pos + 20,& offset);
  
#line 130 
  pci_read_config_word((struct pci_dev const *)dev,pos + 22,& stride);
  
#line 132 
  __retres = (int)((dev->devfn + (unsigned int)offset) + (unsigned int)((int)stride * vf_id)) & 255;
  return_label: 
#line 132 
                return __retres;
}


#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
int qlcnic_sriov_init(struct qlcnic_adapter *adapter, int num_vfs)
{
  int __retres;
  struct qlcnic_sriov *sriov;
  struct qlcnic_back_channel *bc;
  struct workqueue_struct *wq;
  struct qlcnic_vport *vp;
  struct qlcnic_vf_info *vf;
  int err;
  int i;
  int tmp_0;
  bool tmp;
  struct workqueue_struct *tmp_4;
  struct workqueue_struct *tmp_6;
  int tmp_7;
  bool tmp_9;
  
#line 144 
  tmp = qlcnic_sriov_enable_check(adapter);
  
#line 144 
  if (tmp) 
#line 144 
           tmp_0 = 0; else 
#line 144 
                           tmp_0 = 1;
  
#line 144 
  if (tmp_0) {
    
#line 145 
    __retres = -5;
    
#line 145 
    goto return_label;
  }
  else ;
  
#line 147 
  sriov = (struct qlcnic_sriov *)kzalloc_7(104UL,208U);
  
#line 148 
  if (sriov == (struct qlcnic_sriov *)0) {
    
#line 149 
    __retres = -12;
    
#line 149 
    goto return_label;
  }
  else ;
  
#line 151 
  (adapter->ahw)->sriov = sriov;
  
#line 152 
  sriov->num_vfs = (unsigned char)num_vfs;
  
#line 153 
  bc = & sriov->bc;
  
#line 154 
  sriov->vf_info = (struct qlcnic_vf_info *)kzalloc_7((unsigned long)num_vfs * 744UL,208U);
  
#line 156 
  if (sriov->vf_info == (struct qlcnic_vf_info *)0) {
    
#line 157 
    err = -12;
    
#line 158 
    goto qlcnic_free_sriov;
  }
  else ;
  {
    struct lock_class_key __key;
    char const *__lock_name;
    
#line 161 
    __lock_name = "\"%s\"";
    
#line 161 
    tmp_4 = __alloc_workqueue_key("%s",131082U,1,& __key,__lock_name,(char *)"bc-trans");
  }
  
#line 161 
  wq = tmp_4;
  
#line 162 
  if (wq == (struct workqueue_struct *)0) {
    
#line 163 
    err = -12;
    
#line 164 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Cannot create bc-trans workqueue\n");
    
#line 166 
    goto qlcnic_free_vf_info;
  }
  else ;
  
#line 169 
  bc->bc_trans_wq = wq;
  {
    struct lock_class_key __key_0;
    char const *__lock_name_0;
    
#line 171 
    __lock_name_0 = "\"%s\"";
    
#line 171 
    tmp_6 = __alloc_workqueue_key("%s",131082U,1,& __key_0,__lock_name_0,(char *)"async");
  }
  
#line 171 
  wq = tmp_6;
  
#line 172 
  if (wq == (struct workqueue_struct *)0) {
    
#line 173 
    err = -12;
    
#line 174 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Cannot create async workqueue\n");
    
#line 175 
    goto qlcnic_destroy_trans_wq;
  }
  else ;
  
#line 178 
  bc->bc_async_wq = wq;
  
#line 179 
  INIT_LIST_HEAD(& bc->async_list);
  
#line 181 
  i = 0;
  
#line 181 
  goto ldv_54186;
  ldv_54185: 
#line 182 
  ;
  
#line 182 
  vf = sriov->vf_info + i;
  
#line 183 
  vf->adapter = adapter;
  
#line 184 
  tmp_7 = qlcnic_sriov_virtid_fn(adapter,i);
  
#line 184 
  vf->pci_func = (unsigned char)tmp_7;
  {
    struct lock_class_key __key_1;
    
#line 185 
    __mutex_init(& vf->send_cmd_lock,"&vf->send_cmd_lock",& __key_1);
  }
  
#line 186 
  spinlock_check(& vf->vlan_list_lock);
  {
    struct lock_class_key __key_2;
    
#line 186 
    __raw_spin_lock_init(& vf->vlan_list_lock.__anonCompField_spinlock_18.rlock,"&(&vf->vlan_list_lock)->rlock",& __key_2);
  }
  
#line 187 
  INIT_LIST_HEAD(& vf->rcv_act.wait_list);
  
#line 188 
  INIT_LIST_HEAD(& vf->rcv_pend.wait_list);
  
#line 189 
  spinlock_check(& vf->rcv_act.lock);
  {
    struct lock_class_key __key_3;
    
#line 189 
    __raw_spin_lock_init(& vf->rcv_act.lock.__anonCompField_spinlock_18.rlock,"&(&vf->rcv_act.lock)->rlock",& __key_3);
  }
  
#line 190 
  spinlock_check(& vf->rcv_pend.lock);
  {
    struct lock_class_key __key_4;
    
#line 190 
    __raw_spin_lock_init(& vf->rcv_pend.lock.__anonCompField_spinlock_18.rlock,"&(&vf->rcv_pend.lock)->rlock",& __key_4);
  }
  
#line 191 
  init_completion(& vf->ch_free_cmpl);
  {
    struct lock_class_key __key_5;
    
#line 193 
    __init_work(& vf->trans_work,0);
    
#line 193 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL_3};
    
#line 193 
    vf->trans_work.data = __constr_expr_37;
    
#line 193 
    lockdep_init_map(& vf->trans_work.lockdep_map,"(&vf->trans_work)",& __key_5,0);
    
#line 193 
    INIT_LIST_HEAD(& vf->trans_work.entry);
    
#line 193 
    vf->trans_work.func = & qlcnic_sriov_process_bc_cmd;
  }
  
#line 195 
  tmp_9 = qlcnic_sriov_pf_check(adapter);
  
#line 195 
  if ((int)tmp_9 != 0) {
    
#line 196 
    vp = (struct qlcnic_vport *)kzalloc_7(18UL,208U);
    
#line 197 
    if (vp == (struct qlcnic_vport *)0) {
      
#line 198 
      err = -12;
      
#line 199 
      goto qlcnic_destroy_async_wq;
    }
    else ;
    
#line 201 
    (sriov->vf_info + i)->vp = vp;
    
#line 202 
    vp->vlan_mode = (unsigned char)2U;
    
#line 203 
    vp->max_tx_bw = (unsigned short)100U;
    
#line 204 
    vp->min_tx_bw = (unsigned short)1U;
    
#line 205 
    vp->spoofchk = (_Bool)0;
    
#line 206 
    eth_random_addr((u8 *)(& vp->mac));
    
#line 207 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"MAC Address %pM is configured for VF %d\n",(u8 *)(& vp->mac),i);
  }
  else ;
  
#line 181 
  i += 1;
  ldv_54186: 
#line 182 
  ;
  
#line 181 
  if (i < num_vfs) 
#line 183 
                   goto ldv_54185; else 
#line 186 
                                        goto ldv_54187;
  ldv_54187: 
#line 187 
  ;
  
#line 213 
  __retres = 0;
  
#line 213 
  goto return_label;
  qlcnic_destroy_async_wq: 
#line 215 
  ;
  
#line 216 
  destroy_workqueue(bc->bc_async_wq);
  qlcnic_destroy_trans_wq: 
#line 218 
  ;
  
#line 219 
  destroy_workqueue(bc->bc_trans_wq);
  qlcnic_free_vf_info: 
#line 221 
  ;
  
#line 222 
  kfree((void const *)sriov->vf_info);
  qlcnic_free_sriov: 
#line 224 
  ;
  
#line 225 
  kfree((void const *)(adapter->ahw)->sriov);
  
#line 226 
  __retres = err;
  return_label: 
#line 226 
                return __retres;
}


#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_cleanup_list(struct qlcnic_trans_list *t_list)
{
  struct qlcnic_bc_trans *trans;
  struct qlcnic_cmd_args cmd;
  unsigned long flags;
  struct qlcnic_bc_trans *tmp;
  int tmp_0;
  
#line 235 
  ldv___ldv_spin_lock_75_0(& t_list->lock);
  
#line 237 
  goto ldv_54197;
  ldv_54196: 
#line 238 
  ;
  {
    
#line 238 
    struct list_head const *__mptr = (struct list_head const *)t_list->wait_list.next;
    
#line 238 
    tmp = (struct qlcnic_bc_trans *)__mptr + 18446744073709551592U;
  }
  
#line 238 
  trans = tmp;
  
#line 240 
  list_del(& trans->list);
  
#line 241 
  t_list->count -= 1;
  
#line 242 
  cmd.req.arg = (u32 *)trans->req_pay;
  
#line 243 
  cmd.rsp.arg = (u32 *)trans->rsp_pay;
  
#line 244 
  qlcnic_free_mbx_args(& cmd);
  
#line 245 
  qlcnic_sriov_cleanup_transaction(trans);
  ldv_54197: 
#line 246 
  ;
  
#line 237 
  tmp_0 = list_empty((struct list_head const *)(& t_list->wait_list));
  
#line 237 
  if (tmp_0 == 0) 
#line 239 
                  goto ldv_54196; else 
#line 242 
                                       goto ldv_54198;
  ldv_54198: 
#line 243 
  ;
  
#line 248 
  ldv_spin_unlock_irqrestore_76_0(& t_list->lock,flags);
  
#line 249 
  return;
}


#line 251  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void __qlcnic_sriov_cleanup(struct qlcnic_adapter *adapter)
{
  struct qlcnic_vf_info *vf;
  int i;
  int tmp_0;
  bool tmp;
  
#line 253 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 254 
  struct qlcnic_back_channel *bc = & sriov->bc;
  
#line 258 
  tmp = qlcnic_sriov_enable_check(adapter);
  
#line 258 
  if (tmp) 
#line 258 
           tmp_0 = 0; else 
#line 258 
                           tmp_0 = 1;
  
#line 258 
  if (tmp_0) 
#line 259 
             goto return_label; else ;
  
#line 261 
  qlcnic_sriov_cleanup_async_list(bc);
  
#line 262 
  destroy_workqueue(bc->bc_async_wq);
  
#line 264 
  i = 0;
  
#line 264 
  goto ldv_54207;
  ldv_54206: 
#line 265 
  ;
  
#line 265 
  vf = sriov->vf_info + i;
  
#line 266 
  qlcnic_sriov_cleanup_list(& vf->rcv_pend);
  
#line 267 
  cancel_work_sync(& vf->trans_work);
  
#line 268 
  qlcnic_sriov_cleanup_list(& vf->rcv_act);
  
#line 264 
  i += 1;
  ldv_54207: 
#line 265 
  ;
  
#line 264 
  if ((int)sriov->num_vfs > i) 
#line 266 
                               goto ldv_54206; else 
#line 269 
                                                    goto ldv_54208;
  ldv_54208: 
#line 270 
  ;
  
#line 271 
  destroy_workqueue(bc->bc_trans_wq);
  
#line 273 
  i = 0;
  
#line 273 
  goto ldv_54210;
  ldv_54209: 
#line 274 
  ;
  
#line 274 
  kfree((void const *)(sriov->vf_info + i)->vp);
  
#line 273 
  i += 1;
  ldv_54210: 
#line 274 
  ;
  
#line 273 
  if ((int)sriov->num_vfs > i) 
#line 275 
                               goto ldv_54209; else 
#line 278 
                                                    goto ldv_54211;
  ldv_54211: 
#line 279 
  ;
  
#line 276 
  kfree((void const *)sriov->vf_info);
  
#line 277 
  kfree((void const *)(adapter->ahw)->sriov);
  return_label: 
#line 278 
                return;
}


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_cleanup(struct qlcnic_adapter *adapter)
{
  
#line 282 
  qlcnic_sriov_channel_cfg_cmd(adapter,(unsigned char)1);
  
#line 283 
  qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)0);
  
#line 284 
  __qlcnic_sriov_cleanup(adapter);
  
#line 285 
  return;
}


#line 287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_cleanup(struct qlcnic_adapter *adapter)
{
  int tmp;
  bool tmp_0;
  bool tmp_1;
  
#line 289 
  tmp = constant_test_bit(10L,(unsigned long const volatile *)(& adapter->state));
  
#line 289 
  if (tmp == 0) 
#line 290 
                goto return_label; else ;
  
#line 292 
  qlcnic_sriov_free_vlans(adapter);
  
#line 294 
  tmp_0 = qlcnic_sriov_pf_check(adapter);
  
#line 294 
  if ((int)tmp_0 != 0) 
#line 295 
                       qlcnic_sriov_pf_cleanup(adapter); else ;
  
#line 297 
  tmp_1 = qlcnic_sriov_vf_check(adapter);
  
#line 297 
  if ((int)tmp_1 != 0) 
#line 298 
                       qlcnic_sriov_vf_cleanup(adapter); else ;
  return_label: 
#line 299 
                return;
}


#line 301  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_post_bc_msg(struct qlcnic_adapter *adapter, u32 *hdr, u32 *pay, u8 pci_func, u8 size)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  unsigned long timeout;
  int err;
  unsigned long tmp;
  
#line 304 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 305 
  struct qlcnic_mailbox *mbx = ahw->mailbox;
  
#line 310 
  memset((void *)(& cmd),0,200UL);
  
#line 311 
  cmd.hdr = hdr;
  
#line 312 
  cmd.pay = pay;
  
#line 313 
  cmd.pay_size = (int)size;
  
#line 314 
  cmd.func_num = pci_func;
  
#line 315 
  cmd.op_type = 1U;
  
#line 316 
  cmd.cmd_op = (unsigned int)((struct qlcnic_bc_hdr *)hdr)->cmd_op;
  
#line 318 
  err = (*((mbx->ops)->enqueue_cmd))(adapter,& cmd,& timeout);
  
#line 319 
  if (err != 0) {
    
#line 320 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Mailbox not available, cmd_op=0x%x, cmd_type=0x%x, pci_func=0x%x, op_mode=0x%x\n","qlcnic_sriov_post_bc_msg",cmd.cmd_op,cmd.type,(int)ahw->pci_func,(int)ahw->op_mode);
    
#line 324 
    __retres = err;
    
#line 324 
    goto return_label;
  }
  else ;
  
#line 327 
  tmp = wait_for_completion_timeout(& cmd.completion,timeout);
  
#line 327 
  if (tmp == 0UL) {
    
#line 328 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Mailbox command timed out, cmd_op=0x%x, cmd_type=0x%x, pci_func=0x%x, op_mode=0x%x\n","qlcnic_sriov_post_bc_msg",cmd.cmd_op,cmd.type,(int)ahw->pci_func,(int)ahw->op_mode);
    
#line 332 
    flush_workqueue(mbx->work_q);
  }
  else ;
  
#line 335 
  __retres = (int)cmd.rsp_opcode;
  return_label: 
#line 335 
                return __retres;
}


#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_cfg_buff_desc(struct qlcnic_adapter *adapter)
{
  
#line 340 
  adapter->num_rxd = (unsigned short)2048U;
  
#line 341 
  adapter->max_rxd = (unsigned short)8192U;
  
#line 342 
  adapter->num_jumbo_rxd = (unsigned short)512U;
  
#line 343 
  adapter->max_jumbo_rxd = (unsigned short)1024U;
  
#line 344 
  adapter->num_txd = (unsigned short)1024U;
  
#line 345 
  adapter->max_rds_rings = (unsigned char)2U;
  
#line 346 
  return;
}


#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
int qlcnic_sriov_get_vf_vport_info(struct qlcnic_adapter *adapter, struct qlcnic_info *npar_info, u16 vport_id)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  int err;
  u32 status;
  
#line 351 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 356 
  err = qlcnic_alloc_mbx_args(& cmd,adapter,33U);
  
#line 357 
  if (err != 0) {
    
#line 358 
    __retres = err;
    
#line 358 
    goto return_label;
  }
  else ;
  
#line 360 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)vport_id << 16) | 1);
  
#line 361 
  err = qlcnic_issue_cmd(adapter,& cmd);
  
#line 362 
  if (err != 0) {
    
#line 363 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to get vport info, err=%d\n",err);
    
#line 365 
    qlcnic_free_mbx_args(& cmd);
    
#line 366 
    __retres = err;
    
#line 366 
    goto return_label;
  }
  else ;
  
#line 369 
  status = *(cmd.rsp.arg + 2U) & 65535U;
  
#line 370 
  if ((status & 1U) != 0U) 
#line 371 
                           npar_info->min_tx_bw = (unsigned short)(*(cmd.rsp.arg + 2U) >> 16); else ;
  
#line 372 
  if ((status & 2U) != 0U) 
#line 373 
                           npar_info->max_tx_bw = (unsigned short)*(cmd.rsp.arg + 3U); else ;
  
#line 374 
  if ((status & 4U) != 0U) 
#line 375 
                           npar_info->max_tx_ques = (unsigned short)(*(cmd.rsp.arg + 3U) >> 16); else ;
  
#line 376 
  if ((status & 8U) != 0U) 
#line 377 
                           npar_info->max_tx_mac_filters = (unsigned short)*(cmd.rsp.arg + 4U); else ;
  
#line 378 
  if ((status & 16U) != 0U) 
#line 379 
                            npar_info->max_rx_mcast_mac_filters = (unsigned short)(*(cmd.rsp.arg + 4U) >> 16); else ;
  
#line 380 
  if ((status & 32U) != 0U) 
#line 381 
                            npar_info->max_rx_ucast_mac_filters = (unsigned short)*(cmd.rsp.arg + 5U); else ;
  
#line 382 
  if ((status & 64U) != 0U) 
#line 383 
                            npar_info->max_rx_ip_addr = (unsigned short)(*(cmd.rsp.arg + 5U) >> 16); else ;
  
#line 384 
  if ((status & 128U) != 0U) 
#line 385 
                             npar_info->max_rx_lro_flow = (unsigned short)*(cmd.rsp.arg + 6U); else ;
  
#line 386 
  if ((status & 256U) != 0U) 
#line 387 
                             npar_info->max_rx_status_rings = (unsigned short)(*(cmd.rsp.arg + 6U) >> 16); else ;
  
#line 388 
  if ((status & 512U) != 0U) 
#line 389 
                             npar_info->max_rx_buf_rings = (unsigned short)*(cmd.rsp.arg + 7U); else ;
  
#line 391 
  npar_info->max_rx_ques = (unsigned short)(*(cmd.rsp.arg + 7U) >> 16);
  
#line 392 
  npar_info->max_tx_vlan_keys = (unsigned short)*(cmd.rsp.arg + 8U);
  
#line 393 
  npar_info->max_local_ipv6_addrs = (unsigned short)(*(cmd.rsp.arg + 8U) >> 16);
  
#line 394 
  npar_info->max_remote_ipv6_addrs = (unsigned short)*(cmd.rsp.arg + 9U);
  
#line 396 
  _dev_info((struct device const *)dev,"\n\tmin_tx_bw: %d, max_tx_bw: %d max_tx_ques: %d,\n",(int)npar_info->min_tx_bw,(int)npar_info->max_tx_bw,(int)npar_info->max_tx_ques,(int)npar_info->max_tx_mac_filters,(int)npar_info->max_rx_mcast_mac_filters,(int)npar_info->max_rx_ucast_mac_filters,(int)npar_info->max_rx_ip_addr,(int)npar_info->max_rx_lro_flow,(int)npar_info->max_rx_status_rings,(int)npar_info->max_rx_buf_rings,(int)npar_info->max_rx_ques,(int)npar_info->max_tx_vlan_keys,(int)npar_info->max_local_ipv6_addrs,(int)npar_info->max_remote_ipv6_addrs);
  
#line 411 
  qlcnic_free_mbx_args(& cmd);
  
#line 412 
  __retres = err;
  return_label: 
#line 412 
                return __retres;
}


#line 415  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_set_pvid_mode(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  
#line 418 
  adapter->rx_pvid = (unsigned short)(*(cmd->rsp.arg + 1U) >> 16);
  
#line 419 
  adapter->flags &= 4294967039U;
  
#line 420 
  __retres = 0;
  
#line 420 
  return __retres;
}


#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_set_guest_vlan_mode(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  int i;
  int num_vlans;
  u16 *vlans;
  
#line 426 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 430 
  if (sriov->allowed_vlans != (u16 *)0U) {
    
#line 431 
    __retres = 0;
    
#line 431 
    goto return_label;
  }
  else ;
  
#line 433 
  sriov->any_vlan = (unsigned char)((unsigned int)((unsigned char)*(cmd->rsp.arg + 2U)) & 15U);
  
#line 434 
  sriov->num_allowed_vlans = (unsigned short)(*(cmd->rsp.arg + 2U) >> 16);
  
#line 435 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Number of allowed Guest VLANs = %d\n",(int)sriov->num_allowed_vlans);
  
#line 438 
  qlcnic_sriov_alloc_vlans(adapter);
  
#line 440 
  if ((unsigned int)sriov->any_vlan == 0U) {
    
#line 441 
    __retres = 0;
    
#line 441 
    goto return_label;
  }
  else ;
  
#line 443 
  num_vlans = (int)sriov->num_allowed_vlans;
  
#line 444 
  sriov->allowed_vlans = (u16 *)kzalloc_7((unsigned long)num_vlans * 2UL,208U);
  
#line 445 
  if (sriov->allowed_vlans == (u16 *)0U) {
    
#line 446 
    __retres = -12;
    
#line 446 
    goto return_label;
  }
  else ;
  
#line 448 
  vlans = (u16 *)(cmd->rsp.arg + 3U);
  
#line 449 
  i = 0;
  
#line 449 
  goto ldv_54256;
  ldv_54255: 
#line 450 
  ;
  
#line 450 
  *(sriov->allowed_vlans + i) = *(vlans + i);
  
#line 449 
  i += 1;
  ldv_54256: 
#line 450 
  ;
  
#line 449 
  if (i < num_vlans) 
#line 451 
                     goto ldv_54255; else 
#line 454 
                                          goto ldv_54257;
  ldv_54257: 
#line 455 
  ;
  
#line 452 
  __retres = 0;
  return_label: 
#line 452 
                return __retres;
}


#line 455  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_get_vf_acl(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  
#line 457 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 459 
  int ret = 0;
  
#line 461 
  memset((void *)(& cmd),0,200UL);
  
#line 462 
  ret = qlcnic_sriov_alloc_bc_mbx_args(& cmd,2U);
  
#line 463 
  if (ret != 0) {
    
#line 464 
    __retres = ret;
    
#line 464 
    goto return_label;
  }
  else ;
  
#line 466 
  ret = qlcnic_issue_cmd(adapter,& cmd);
  
#line 467 
  if (ret != 0) 
#line 468 
                dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to get ACL, err=%d\n",ret);
  else {
    
#line 471 
    sriov->vlan_mode = (unsigned char)((unsigned int)((unsigned char)*(cmd.rsp.arg + 1U)) & 3U);
    
#line 472 
    switch ((int)sriov->vlan_mode) {
      case 2: 
#line 473 
      ;
      
#line 474 
      ret = qlcnic_sriov_set_guest_vlan_mode(adapter,& cmd);
      
#line 475 
      goto ldv_54265;
      case 1: 
#line 476 
      ;
      
#line 477 
      ret = qlcnic_sriov_set_pvid_mode(adapter,& cmd);
      
#line 478 
      goto ldv_54265;
    }
    ldv_54265: 
#line 480 
    ;
  }
  
#line 482 
  qlcnic_free_mbx_args(& cmd);
  
#line 483 
  __retres = ret;
  return_label: 
#line 483 
                return __retres;
}


#line 486  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_init_driver(struct qlcnic_adapter *adapter)
{
  int __retres;
  struct qlcnic_info nic_info;
  int err;
  int tmp;
  
#line 488 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 492 
  err = qlcnic_sriov_get_vf_vport_info(adapter,& nic_info,(unsigned short)0);
  
#line 493 
  if (err != 0) {
    
#line 494 
    __retres = err;
    
#line 494 
    goto return_label;
  }
  else ;
  
#line 496 
  ahw->max_mc_count = (unsigned char)nic_info.max_rx_mcast_mac_filters;
  
#line 498 
  err = qlcnic_get_nic_info(adapter,& nic_info,(unsigned char)((int)ahw->pci_func));
  
#line 499 
  if (err != 0) {
    
#line 500 
    __retres = -5;
    
#line 500 
    goto return_label;
  }
  else ;
  
#line 502 
  tmp = qlcnic_83xx_get_port_info(adapter);
  
#line 502 
  if (tmp != 0) {
    
#line 503 
    __retres = -5;
    
#line 503 
    goto return_label;
  }
  else ;
  
#line 505 
  qlcnic_sriov_vf_cfg_buff_desc(adapter);
  
#line 506 
  adapter->flags |= 128U;
  
#line 507 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"HAL Version: %d\n",(adapter->ahw)->fw_hal_version);
  
#line 510 
  ahw->physical_port = (unsigned char)nic_info.phys_port;
  
#line 511 
  ahw->switch_mode = nic_info.switch_mode;
  
#line 512 
  ahw->max_mtu = nic_info.max_mtu;
  
#line 513 
  ahw->op_mode = nic_info.op_mode;
  
#line 514 
  ahw->capabilities = nic_info.capabilities;
  
#line 515 
  __retres = 0;
  return_label: 
#line 515 
                return __retres;
}


#line 518  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_setup_vf(struct qlcnic_adapter *adapter, int pci_using_dac)
{
  int __retres;
  int err;
  
#line 523 
  adapter->flags |= 8388608U;
  
#line 524 
  (adapter->ahw)->total_nic_func = (unsigned short)1U;
  
#line 525 
  INIT_LIST_HEAD(& adapter->vf_mc_list);
  
#line 526 
  if (qlcnic_use_msi_x == 0 && qlcnic_use_msi != 0) 
#line 527 
                                                    dev_warn((struct device const *)(& (adapter->pdev)->dev),"Device does not support MSI interrupts\n"); else ;
  
#line 531 
  qlcnic_set_tx_ring_count(adapter,(unsigned char)1);
  
#line 532 
  qlcnic_set_sds_ring_count(adapter,(unsigned char)1);
  
#line 534 
  err = qlcnic_setup_intr(adapter);
  
#line 535 
  if (err != 0) {
    
#line 536 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to setup interrupt\n");
    
#line 537 
    goto err_out_disable_msi;
  }
  else ;
  
#line 540 
  err = qlcnic_83xx_setup_mbx_intr(adapter);
  
#line 541 
  if (err != 0) 
#line 542 
                goto err_out_disable_msi; else ;
  
#line 544 
  err = qlcnic_sriov_init(adapter,1);
  
#line 545 
  if (err != 0) 
#line 546 
                goto err_out_disable_mbx_intr; else ;
  
#line 548 
  err = qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)1);
  
#line 549 
  if (err != 0) 
#line 550 
                goto err_out_cleanup_sriov; else ;
  
#line 552 
  err = qlcnic_sriov_channel_cfg_cmd(adapter,(unsigned char)0);
  
#line 553 
  if (err != 0) 
#line 554 
                goto err_out_disable_bc_intr; else ;
  
#line 556 
  err = qlcnic_sriov_vf_init_driver(adapter);
  
#line 557 
  if (err != 0) 
#line 558 
                goto err_out_send_channel_term; else ;
  
#line 560 
  err = qlcnic_sriov_get_vf_acl(adapter);
  
#line 561 
  if (err != 0) 
#line 562 
                goto err_out_send_channel_term; else ;
  
#line 564 
  err = qlcnic_setup_netdev(adapter,adapter->netdev,pci_using_dac);
  
#line 565 
  if (err != 0) 
#line 566 
                goto err_out_send_channel_term; else ;
  
#line 568 
  pci_set_drvdata(adapter->pdev,(void *)adapter);
  
#line 569 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: XGbE port initialized\n",(char *)(& (adapter->netdev)->name));
  
#line 572 
  qlcnic_schedule_work(adapter,& qlcnic_sriov_vf_poll_dev_state,(int)(adapter->ahw)->idc.delay);
  
#line 574 
  __retres = 0;
  
#line 574 
  goto return_label;
  err_out_send_channel_term: 
#line 576 
  ;
  
#line 577 
  qlcnic_sriov_channel_cfg_cmd(adapter,(unsigned char)1);
  err_out_disable_bc_intr: 
#line 579 
  ;
  
#line 580 
  qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)0);
  err_out_cleanup_sriov: 
#line 582 
  ;
  
#line 583 
  __qlcnic_sriov_cleanup(adapter);
  err_out_disable_mbx_intr: 
#line 585 
  ;
  
#line 586 
  qlcnic_83xx_free_mbx_intr(adapter);
  err_out_disable_msi: 
#line 588 
  ;
  
#line 589 
  qlcnic_teardown_intr(adapter);
  
#line 590 
  __retres = err;
  return_label: 
#line 590 
                return __retres;
}


#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_check_dev_ready(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 state;
  ldv_54287: 
#line 596 
  ;
  
#line 598 
  msleep(20U);
  
#line 599 
  adapter->fw_fail_cnt = (u8)((int)adapter->fw_fail_cnt + 1);
  
#line 599 
  if ((unsigned int)adapter->fw_fail_cnt > 5U) {
    
#line 600 
    __retres = -5;
    
#line 600 
    goto return_label;
  }
  else ;
  
#line 601 
  state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 12U)));
  
#line 602 
  if (state != 3U) 
#line 604 
                   goto ldv_54287; else 
#line 607 
                                        goto ldv_54288;
  ldv_54288: 
#line 608 
  ;
  
#line 604 
  __retres = 0;
  return_label: 
#line 604 
                return __retres;
}


#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
int qlcnic_sriov_vf_init(struct qlcnic_adapter *adapter, int pci_using_dac)
{
  int __retres;
  int err;
  int tmp;
  
#line 609 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 612 
  set_bit(1L,(unsigned long volatile *)(& ahw->idc.status));
  
#line 613 
  ahw->idc.delay = 250ULL;
  
#line 614 
  ahw->reset_context = (unsigned char)0U;
  
#line 615 
  adapter->fw_fail_cnt = (unsigned char)0U;
  
#line 616 
  ahw->msix_supported = (unsigned char)1U;
  
#line 617 
  adapter->need_fw_reset = (unsigned char)0U;
  
#line 618 
  adapter->flags |= 65536U;
  
#line 620 
  err = qlcnic_sriov_check_dev_ready(adapter);
  
#line 621 
  if (err != 0) {
    
#line 622 
    __retres = err;
    
#line 622 
    goto return_label;
  }
  else ;
  
#line 624 
  err = qlcnic_sriov_setup_vf(adapter,pci_using_dac);
  
#line 625 
  if (err != 0) {
    
#line 626 
    __retres = err;
    
#line 626 
    goto return_label;
  }
  else ;
  
#line 628 
  tmp = qlcnic_read_mac_addr(adapter);
  
#line 628 
  if (tmp != 0) 
#line 629 
                dev_warn((struct device const *)(& (adapter->pdev)->dev),"failed to read mac addr\n"); else ;
  {
    struct lock_class_key __key;
    
#line 631 
    __init_work(& adapter->idc_aen_work.work,0);
    
#line 631 
    atomic_long_t __constr_expr_38 = {.counter = WORK_STRUCT_NO_POOL_3};
    
#line 631 
    adapter->idc_aen_work.work.data = __constr_expr_38;
    
#line 631 
    lockdep_init_map(& adapter->idc_aen_work.work.lockdep_map,"(&(&adapter->idc_aen_work)->work)",& __key,0);
    
#line 631 
    INIT_LIST_HEAD(& adapter->idc_aen_work.work.entry);
    
#line 631 
    adapter->idc_aen_work.work.func = & qlcnic_83xx_idc_aen_work;
  }
  {
    struct lock_class_key __key_0;
    
#line 631 
    init_timer_key(& adapter->idc_aen_work.timer,2097152U,"(&(&adapter->idc_aen_work)->timer)",& __key_0);
  }
  
#line 631 
  adapter->idc_aen_work.timer.function = & delayed_work_timer_fn;
  
#line 631 
  adapter->idc_aen_work.timer.data = (unsigned long)(& adapter->idc_aen_work);
  
#line 633 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 634 
  __retres = 0;
  return_label: 
#line 634 
                return __retres;
}


#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_vf_set_ops(struct qlcnic_adapter *adapter)
{
  
#line 639 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 641 
  ahw->op_mode = (unsigned short)4U;
  
#line 642 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"HAL Version: %d Non Privileged SRIOV function\n",ahw->fw_hal_version);
  
#line 645 
  adapter->nic_ops = & qlcnic_sriov_vf_ops;
  
#line 646 
  set_bit(10L,(unsigned long volatile *)(& adapter->state));
  
#line 647 
  return;
}


#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_vf_register_map(struct qlcnic_hardware_context *ahw)
{
  
#line 652 
  ahw->hw_ops = & qlcnic_sriov_vf_hw_ops;
  
#line 653 
  ahw->reg_tbl = (u32 *)(& qlcnic_83xx_reg_tbl);
  
#line 654 
  ahw->ext_reg_tbl = (u32 *)(& qlcnic_83xx_ext_reg_tbl);
  
#line 655 
  return;
}


#line 657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static u32 qlcnic_sriov_get_bc_paysize(u32 real_pay_size, u8 curr_frag)
{
  u32 pay_size;
  
#line 661 
  pay_size = real_pay_size / (unsigned int)(((int)curr_frag + 1) * 1008);
  
#line 663 
  if (pay_size != 0U) 
#line 664 
                      pay_size = 1008U; else 
#line 666 
                                             pay_size = real_pay_size % 1008U;
  
#line 668 
  return pay_size;
}


#line 671  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
int qlcnic_sriov_func_to_index(struct qlcnic_adapter *adapter, u8 pci_func)
{
  int __retres;
  u8 i;
  bool tmp;
  
#line 673 
  struct qlcnic_vf_info *vf_info = ((adapter->ahw)->sriov)->vf_info;
  
#line 676 
  tmp = qlcnic_sriov_vf_check(adapter);
  
#line 676 
  if ((int)tmp != 0) {
    
#line 677 
    __retres = 0;
    
#line 677 
    goto return_label;
  }
  else ;
  
#line 679 
  i = (unsigned char)0U;
  
#line 679 
  goto ldv_54317;
  ldv_54316: 
#line 680 
  ;
  
#line 680 
  if ((int)(vf_info + (int)i)->pci_func == (int)pci_func) {
    
#line 681 
    __retres = (int)i;
    
#line 681 
    goto return_label;
  }
  else ;
  
#line 679 
  i = (u8)((int)i + 1);
  ldv_54317: 
#line 680 
  ;
  
#line 679 
  if ((int)((adapter->ahw)->sriov)->num_vfs > (int)i) 
#line 681 
                                                      goto ldv_54316; else 
                                                                    
#line 684 
                                                                    goto ldv_54318;
  ldv_54318: 
#line 685 
  ;
  
#line 684 
  __retres = -22;
  return_label: 
#line 684 
                return __retres;
}


#line 687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
__inline static int qlcnic_sriov_alloc_bc_trans(struct qlcnic_bc_trans **trans)
{
  int __retres;
  
#line 689 
  *trans = (struct qlcnic_bc_trans *)kzalloc_7(176UL,32U);
  
#line 690 
  if (*trans == (struct qlcnic_bc_trans *)0) {
    
#line 691 
    __retres = -12;
    
#line 691 
    goto return_label;
  }
  else ;
  
#line 693 
  init_completion(& (*trans)->resp_cmpl);
  
#line 694 
  __retres = 0;
  return_label: 
#line 694 
                return __retres;
}


#line 697  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
__inline static int qlcnic_sriov_alloc_bc_msg(struct qlcnic_bc_hdr **hdr, u32 size)
{
  int __retres;
  
#line 700 
  *hdr = (struct qlcnic_bc_hdr *)kzalloc_7((unsigned long)size * 16UL,32U);
  
#line 701 
  if (*hdr == (struct qlcnic_bc_hdr *)0) {
    
#line 702 
    __retres = -12;
    
#line 702 
    goto return_label;
  }
  else ;
  
#line 704 
  __retres = 0;
  return_label: 
#line 704 
                return __retres;
}


#line 707  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_alloc_bc_mbx_args(struct qlcnic_cmd_args *mbx, u32 type)
{
  int __retres;
  struct qlcnic_mailbox_metadata const *mbx_tbl;
  int i;
  int size;
  
#line 712 
  mbx_tbl = (struct qlcnic_mailbox_metadata const *)(& qlcnic_sriov_bc_mbx_tbl);
  
#line 713 
  size = 4;
  
#line 715 
  i = 0;
  
#line 715 
  goto ldv_54337;
  ldv_54336: 
#line 716 
  ;
  
#line 716 
  if ((mbx_tbl + i)->cmd == type) {
    
#line 717 
    mbx->op_type = 1U;
    
#line 718 
    mbx->req.num = (mbx_tbl + i)->in_args;
    
#line 719 
    mbx->rsp.num = (mbx_tbl + i)->out_args;
    
#line 720 
    mbx->req.arg = (u32 *)kcalloc_4((unsigned long)mbx->req.num,4UL,32U);
    
#line 722 
    if (mbx->req.arg == (u32 *)0U) {
      
#line 723 
      __retres = -12;
      
#line 723 
      goto return_label;
    }
    else ;
    
#line 724 
    mbx->rsp.arg = (u32 *)kcalloc_4((unsigned long)mbx->rsp.num,4UL,32U);
    
#line 726 
    if (mbx->rsp.arg == (u32 *)0U) {
      
#line 727 
      kfree((void const *)mbx->req.arg);
      
#line 728 
      mbx->req.arg = (u32 *)0U;
      
#line 729 
      __retres = -12;
      
#line 729 
      goto return_label;
    }
    else ;
    
#line 731 
    memset((void *)mbx->req.arg,0,(unsigned long)mbx->req.num * 4UL);
    
#line 732 
    memset((void *)mbx->rsp.arg,0,(unsigned long)mbx->rsp.num * 4UL);
    
#line 733 
    *(mbx->req.arg) = ((mbx->req.num << 16) | type) | 1610612736U;
    
#line 735 
    *(mbx->rsp.arg) = (type & 65535U) | (mbx->rsp.num << 16);
    
#line 736 
    __retres = 0;
    
#line 736 
    goto return_label;
  }
  else ;
  
#line 715 
  i += 1;
  ldv_54337: 
#line 716 
  ;
  
#line 715 
  if (i < size) 
#line 717 
                goto ldv_54336; else 
#line 720 
                                     goto ldv_54338;
  ldv_54338: 
#line 721 
  ;
  
#line 739 
  __retres = -22;
  return_label: 
#line 739 
                return __retres;
}


#line 742  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_prepare_bc_hdr(struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd, u16 seq, u8 msg_type)
{
  int __retres;
  struct qlcnic_bc_hdr *hdr;
  int i;
  u32 num_regs;
  u32 bc_pay_sz;
  u16 remainder;
  u8 cmd_op;
  u8 num_frags;
  u8 t_num_frags;
  
#line 752 
  bc_pay_sz = 1008U;
  
#line 753 
  if ((unsigned int)msg_type == 0U) {
    int tmp;
    int tmp_0;
    
#line 754 
    trans->req_pay = (struct qlcnic_bc_payload *)cmd->req.arg;
    
#line 755 
    trans->rsp_pay = (struct qlcnic_bc_payload *)cmd->rsp.arg;
    
#line 756 
    num_regs = cmd->req.num;
    
#line 757 
    trans->req_pay_size = (unsigned short)((unsigned int)((unsigned short)num_regs) * 4U);
    
#line 758 
    num_regs = cmd->rsp.num;
    
#line 759 
    trans->rsp_pay_size = (unsigned short)((unsigned int)((unsigned short)num_regs) * 4U);
    
#line 760 
    cmd_op = (unsigned char)*(cmd->req.arg);
    
#line 761 
    remainder = (unsigned short)((unsigned int)trans->req_pay_size % bc_pay_sz);
    
#line 762 
    num_frags = (unsigned char)((unsigned int)trans->req_pay_size / bc_pay_sz);
    
#line 763 
    if ((unsigned int)remainder != 0U) 
#line 764 
                                       num_frags = (u8)((int)num_frags + 1); else ;
    
#line 765 
    t_num_frags = num_frags;
    
#line 766 
    tmp = qlcnic_sriov_alloc_bc_msg(& trans->req_hdr,(unsigned int)num_frags);
    
#line 766 
    if (tmp != 0) {
      
#line 767 
      __retres = -12;
      
#line 767 
      goto return_label;
    }
    else ;
    
#line 768 
    remainder = (unsigned short)((unsigned int)trans->rsp_pay_size % bc_pay_sz);
    
#line 769 
    num_frags = (unsigned char)((unsigned int)trans->rsp_pay_size / bc_pay_sz);
    
#line 770 
    if ((unsigned int)remainder != 0U) 
#line 771 
                                       num_frags = (u8)((int)num_frags + 1); else ;
    
#line 772 
    tmp_0 = qlcnic_sriov_alloc_bc_msg(& trans->rsp_hdr,(unsigned int)num_frags);
    
#line 772 
    if (tmp_0 != 0) {
      
#line 773 
      __retres = -12;
      
#line 773 
      goto return_label;
    }
    else ;
    
#line 774 
    num_frags = t_num_frags;
    
#line 775 
    hdr = trans->req_hdr;
  }
  else {
    
#line 777 
    cmd->req.arg = (u32 *)trans->req_pay;
    
#line 778 
    cmd->rsp.arg = (u32 *)trans->rsp_pay;
    
#line 779 
    cmd_op = (unsigned char)*(cmd->req.arg);
    
#line 780 
    cmd->cmd_op = (unsigned int)cmd_op;
    
#line 781 
    remainder = (unsigned short)((unsigned int)trans->rsp_pay_size % bc_pay_sz);
    
#line 782 
    num_frags = (unsigned char)((unsigned int)trans->rsp_pay_size / bc_pay_sz);
    
#line 783 
    if ((unsigned int)remainder != 0U) 
#line 784 
                                       num_frags = (u8)((int)num_frags + 1); else ;
    
#line 785 
    cmd->req.num = (unsigned int)trans->req_pay_size / 4U;
    
#line 786 
    cmd->rsp.num = (unsigned int)trans->rsp_pay_size / 4U;
    
#line 787 
    hdr = trans->rsp_hdr;
    
#line 788 
    cmd->op_type = (unsigned int)(trans->req_hdr)->op_type;
  }
  
#line 791 
  trans->trans_id = (unsigned int)seq;
  
#line 792 
  trans->cmd_id = (unsigned short)cmd_op;
  
#line 793 
  i = 0;
  
#line 793 
  goto ldv_54354;
  ldv_54353: 
#line 794 
  ;
  
#line 794 
  (hdr + i)->version = (unsigned char)2U;
  
#line 795 
  (hdr + i)->msg_type = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))msg_type;
  
#line 796 
  (hdr + i)->op_type = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))cmd->op_type;
  
#line 797 
  (hdr + i)->num_cmds = (unsigned char)1U;
  
#line 798 
  (hdr + i)->num_frags = num_frags;
  
#line 799 
  (hdr + i)->frag_num = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
  
#line 800 
  (hdr + i)->cmd_op = cmd_op;
  
#line 801 
  (hdr + i)->seq_id = seq;
  
#line 793 
  i += 1;
  ldv_54354: 
#line 794 
  ;
  
#line 793 
  if ((int)num_frags > i) 
#line 795 
                          goto ldv_54353; else 
#line 798 
                                               goto ldv_54355;
  ldv_54355: 
#line 799 
  ;
  
#line 803 
  __retres = 0;
  return_label: 
#line 803 
                return __retres;
}


#line 806  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_cleanup_transaction(struct qlcnic_bc_trans *trans)
{
  
#line 808 
  if (trans == (struct qlcnic_bc_trans *)0) 
#line 809 
                                            goto return_label; else ;
  
#line 810 
  kfree((void const *)trans->req_hdr);
  
#line 811 
  kfree((void const *)trans->rsp_hdr);
  
#line 812 
  kfree((void const *)trans);
  return_label: 
#line 813 
                return;
}


#line 815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_clear_trans(struct qlcnic_vf_info *vf, struct qlcnic_bc_trans *trans, u8 type)
{
  struct qlcnic_trans_list *t_list;
  unsigned long flags;
  
#line 820 
  int ret = 0;
  
#line 822 
  if ((unsigned int)type == 1U) {
    
#line 823 
    t_list = & vf->rcv_act;
    
#line 824 
    ldv___ldv_spin_lock_77_0(& t_list->lock);
    
#line 825 
    t_list->count -= 1;
    
#line 826 
    list_del(& trans->list);
    
#line 827 
    if (t_list->count > 0) 
#line 828 
                           ret = 1; else ;
    
#line 829 
    ldv_spin_unlock_irqrestore_78_0(& t_list->lock,flags);
  }
  else ;
  
#line 831 
  if ((unsigned int)type == 0U) {
    int tmp;
    
#line 832 
    goto ldv_54368;
    ldv_54367: 
#line 833 
    ;
    
#line 833 
    msleep(100U);
    ldv_54368: 
#line 834 
    ;
    
#line 832 
    tmp = test_and_set_bit(0L,(unsigned long volatile *)(& vf->state));
    
#line 832 
    if (tmp != 0) 
#line 834 
                  goto ldv_54367; else 
#line 837 
                                       goto ldv_54369;
    ldv_54369: 
#line 838 
    ;
    
#line 834 
    vf->send_cmd = (struct qlcnic_bc_trans *)0;
    
#line 835 
    set_bit(0L,(unsigned long volatile *)(& vf->state));
  }
  else ;
  
#line 837 
  return ret;
}


#line 840  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_schedule_bc_cmd(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, void (*func)(struct work_struct *))
{
  int tmp;
  
#line 844 
  tmp = constant_test_bit(4L,(unsigned long const volatile *)(& vf->state));
  
#line 844 
  if (tmp != 0) 
#line 846 
                goto return_label;
  else 
    
#line 844 
    if ((unsigned int)(vf->adapter)->need_fw_reset != 0U) 
#line 846 
                                                          goto return_label; else ;
  
#line 848 
  ldv_queue_work_79_0(sriov->bc.bc_trans_wq,& vf->trans_work);
  return_label: 
#line 849 
                return;
}


#line 851  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
__inline static void qlcnic_sriov_wait_for_resp(struct qlcnic_bc_trans *trans)
{
  unsigned long tmp;
  
#line 853 
  struct completion *cmpl = & trans->resp_cmpl;
  
#line 855 
  tmp = wait_for_completion_timeout(cmpl,2500UL);
  
#line 855 
  if (tmp != 0UL) 
#line 856 
                  trans->trans_state = QLC_END; else 
#line 858 
                                                     trans->trans_state = QLC_ABORT;
  
#line 860 
  return;
}


#line 863  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_handle_multi_frags(struct qlcnic_bc_trans *trans, u8 type)
{
  
#line 866 
  if ((unsigned int)type == 1U) {
    
#line 867 
    trans->curr_rsp_frag = (u8)((int)trans->curr_rsp_frag + 1);
    
#line 868 
    if ((int)trans->curr_rsp_frag < (int)(trans->rsp_hdr)->num_frags) 
      
#line 869 
      trans->trans_state = QLC_INIT; else 
#line 871 
                                          trans->trans_state = QLC_END;
  }
  else {
    
#line 873 
    trans->curr_req_frag = (u8)((int)trans->curr_req_frag + 1);
    
#line 874 
    if ((int)trans->curr_req_frag < (int)(trans->req_hdr)->num_frags) 
      
#line 875 
      trans->trans_state = QLC_INIT; else 
#line 877 
                                          trans->trans_state = QLC_WAIT_FOR_RESP;
  }
  
#line 879 
  return;
}


#line 881  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_wait_for_channel_free(struct qlcnic_bc_trans *trans, u8 type)
{
  unsigned long tmp;
  
#line 884 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 885 
  struct completion *cmpl = & vf->ch_free_cmpl;
  
#line 887 
  tmp = wait_for_completion_timeout(cmpl,2500UL);
  
#line 887 
  if (tmp == 0UL) {
    
#line 888 
    trans->trans_state = QLC_ABORT;
    
#line 889 
    goto return_label;
  }
  else ;
  
#line 892 
  set_bit(2L,(unsigned long volatile *)(& vf->state));
  
#line 893 
  qlcnic_sriov_handle_multi_frags(trans,(unsigned char)((int)type));
  return_label: 
#line 894 
                return;
}


#line 896  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_pull_bc_msg(struct qlcnic_adapter *adapter, u32 *hdr, u32 *pay, u32 size)
{
  u32 fw_mbx;
  u8 i;
  u8 hdr_size;
  u8 j;
  u32 *tmp;
  u32 *tmp_0;
  
#line 899 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 901 
  u8 max = (unsigned char)2U;
  
#line 903 
  hdr_size = (unsigned char)4U;
  
#line 904 
  max = (unsigned char)((int)((unsigned char)(size / 4U)) + (int)hdr_size);
  
#line 906 
  fw_mbx = readl((void const volatile *)(ahw->pci_base0 + 2048U));
  
#line 907 
  i = (unsigned char)2U;
  
#line 907 
  j = (unsigned char)0U;
  
#line 907 
  goto ldv_54402;
  ldv_54401: 
#line 908 
  ;
  
#line 908 
  tmp = hdr;
  
#line 908 
  hdr += 1;
  
#line 908 
  *tmp = readl((void const volatile *)(ahw->pci_base0 + ((unsigned int)((int)i * 4) + 2048U)));
  
#line 907 
  i = (u8)((int)i + 1);
  
#line 907 
  j = (u8)((int)j + 1);
  ldv_54402: 
#line 908 
  ;
  
#line 907 
  if ((int)j < (int)hdr_size) 
#line 909 
                              goto ldv_54401; else 
#line 912 
                                                   goto ldv_54403;
  ldv_54403: 
#line 913 
  ;
  
#line 909 
  goto ldv_54405;
  ldv_54404: 
#line 910 
  ;
  
#line 910 
  tmp_0 = pay;
  
#line 910 
  pay += 1;
  
#line 910 
  *tmp_0 = readl((void const volatile *)(ahw->pci_base0 + ((unsigned int)((int)i * 4) + 2048U)));
  
#line 909 
  i = (u8)((int)i + 1);
  
#line 909 
  j = (u8)((int)j + 1);
  ldv_54405: 
#line 910 
  ;
  
#line 909 
  if ((int)j < (int)max) 
#line 911 
                         goto ldv_54404; else 
#line 914 
                                              goto ldv_54406;
  ldv_54406: 
#line 915 
  ;
  
#line 916 
  return;
}


#line 913  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int __qlcnic_sriov_issue_bc_post(struct qlcnic_vf_info *vf)
{
  int tmp;
  
#line 915 
  int ret = -16;
  
#line 916 
  u32 timeout = 10000U;
  ldv_54417: 
#line 917 
  ;
  
#line 919 
  tmp = test_and_set_bit(2L,(unsigned long volatile *)(& vf->state));
  
#line 919 
  if (tmp == 0) {
    
#line 920 
    ret = 0;
    
#line 921 
    goto ldv_54412;
  }
  else ;
  
#line 923 
  if (1) 
#line 923 
         __const_udelay(4295000UL);
  else {
    
#line 923 
    unsigned long __ms = 1UL;
    {
      unsigned long tmp_0;
      
#line 923 
      goto ldv_54415;
      ldv_54414: 
#line 924 
      ;
      
#line 923 
      __const_udelay(4295000UL);
      ldv_54415: 
#line 925 
      ;
      
#line 923 
      tmp_0 = __ms;
      
#line 923 
      __ms -= 1UL;
      
#line 923 
      ;
      
#line 923 
      if (tmp_0 != 0UL) 
#line 925 
                        goto ldv_54414; else 
#line 928 
                                             goto ldv_54416;
      ldv_54416: 
#line 929 
      ;
    }
  }
  
#line 924 
  timeout -= 1U;
  
#line 924 
  if (timeout != 0U) 
#line 926 
                     goto ldv_54417; else 
#line 929 
                                          goto ldv_54412;
  ldv_54412: 
#line 930 
  ;
  
#line 926 
  return ret;
}


#line 929  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_issue_bc_post(struct qlcnic_bc_trans *trans, u8 type)
{
  int __retres;
  u32 pay_size;
  u32 hdr_size;
  u32 *hdr;
  u32 *pay;
  int ret;
  int tmp;
  
#line 931 
  struct qlcnic_vf_info *vf = trans->vf;
  
#line 935 
  u8 pci_func = trans->func_id;
  
#line 937 
  tmp = __qlcnic_sriov_issue_bc_post(vf);
  
#line 937 
  if (tmp != 0) {
    
#line 938 
    __retres = -16;
    
#line 938 
    goto return_label;
  }
  else ;
  
#line 940 
  if ((unsigned int)type == 0U) {
    
#line 941 
    hdr = (u32 *)(trans->req_hdr + (int)trans->curr_req_frag);
    
#line 942 
    pay = (u32 *)(trans->req_pay + (int)trans->curr_req_frag);
    
#line 943 
    hdr_size = 4U;
    
#line 944 
    pay_size = qlcnic_sriov_get_bc_paysize((unsigned int)trans->req_pay_size,(unsigned char)((int)trans->curr_req_frag));
    
#line 946 
    pay_size /= 4U;
  }
  else {
    
#line 948 
    hdr = (u32 *)(trans->rsp_hdr + (int)trans->curr_rsp_frag);
    
#line 949 
    pay = (u32 *)(trans->rsp_pay + (int)trans->curr_rsp_frag);
    
#line 950 
    hdr_size = 4U;
    
#line 951 
    pay_size = qlcnic_sriov_get_bc_paysize((unsigned int)trans->rsp_pay_size,(unsigned char)((int)trans->curr_rsp_frag));
    
#line 953 
    pay_size /= 4U;
  }
  
#line 956 
  ret = qlcnic_sriov_post_bc_msg(vf->adapter,hdr,pay,(unsigned char)((int)pci_func),(unsigned char)((int)((unsigned char)pay_size)));
  
#line 958 
  __retres = ret;
  return_label: 
#line 958 
                return __retres;
}


#line 961  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int __qlcnic_sriov_send_bc_msg(struct qlcnic_bc_trans *trans, struct qlcnic_vf_info *vf, u8 type)
{
  int tmp;
  
#line 964 
  bool flag = (_Bool)1;
  
#line 965 
  int err = -5;
  
#line 967 
  goto ldv_54444;
  ldv_54443: 
#line 968 
  ;
  
#line 968 
  tmp = constant_test_bit(4L,(unsigned long const volatile *)(& vf->state));
  
#line 968 
  if (tmp != 0) 
#line 970 
                trans->trans_state = QLC_ABORT;
  else 
    
#line 968 
    if ((unsigned int)(vf->adapter)->need_fw_reset != 0U) 
#line 970 
                                                          trans->trans_state = QLC_ABORT; else ;
  
#line 972 
  switch ((unsigned int)trans->trans_state) {
    int tmp_0;
    case (unsigned int)0: 
#line 973 
    ;
    
#line 974 
    trans->trans_state = QLC_WAIT_FOR_CHANNEL_FREE;
    
#line 975 
    tmp_0 = qlcnic_sriov_issue_bc_post(trans,(unsigned char)((int)type));
    
#line 975 
    if (tmp_0 != 0) 
#line 976 
                    trans->trans_state = QLC_ABORT; else ;
    
#line 977 
    goto ldv_54437;
    case (unsigned int)1: 
#line 978 
    ;
    
#line 979 
    qlcnic_sriov_wait_for_channel_free(trans,(unsigned char)((int)type));
    
#line 980 
    goto ldv_54437;
    case (unsigned int)2: 
#line 981 
    ;
    
#line 982 
    qlcnic_sriov_wait_for_resp(trans);
    
#line 983 
    goto ldv_54437;
    case (unsigned int)4: 
#line 984 
    ;
    
#line 985 
    err = 0;
    
#line 986 
    flag = (_Bool)0;
    
#line 987 
    goto ldv_54437;
    case (unsigned int)3: 
#line 988 
    ;
    
#line 989 
    err = -5;
    
#line 990 
    flag = (_Bool)0;
    
#line 991 
    set_bit(2L,(unsigned long volatile *)(& vf->state));
    
#line 992 
    goto ldv_54437;
    default: 
#line 993 
    ;
    
#line 994 
    err = -5;
    
#line 995 
    flag = (_Bool)0;
  }
  ldv_54437: 
#line 997 
  ;
  ldv_54444: 
#line 998 
  ;
  
#line 967 
  if ((int)flag != 0) 
#line 969 
                      goto ldv_54443; else 
#line 972 
                                           goto ldv_54445;
  ldv_54445: 
#line 973 
  ;
  
#line 998 
  return err;
}


#line 1001  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_send_bc_cmd(struct qlcnic_adapter *adapter, struct qlcnic_bc_trans *trans, int pci_func)
{
  int __retres;
  struct qlcnic_vf_info *vf;
  int err;
  int tmp_2;
  
#line 1005 
  int index = qlcnic_sriov_func_to_index(adapter,(unsigned char)((int)((unsigned char)pci_func)));
  
#line 1007 
  if (index < 0) {
    
#line 1008 
    __retres = -5;
    
#line 1008 
    goto return_label;
  }
  else ;
  
#line 1010 
  vf = ((adapter->ahw)->sriov)->vf_info + index;
  
#line 1011 
  trans->vf = vf;
  
#line 1012 
  trans->func_id = (unsigned char)pci_func;
  
#line 1014 
  tmp_2 = constant_test_bit(3L,(unsigned long const volatile *)(& vf->state));
  
#line 1014 
  if (tmp_2 == 0) {
    bool tmp_0;
    bool tmp_1;
    
#line 1015 
    tmp_0 = qlcnic_sriov_pf_check(adapter);
    
#line 1015 
    if ((int)tmp_0 != 0) {
      
#line 1016 
      __retres = -5;
      
#line 1016 
      goto return_label;
    }
    else ;
    
#line 1017 
    tmp_1 = qlcnic_sriov_vf_check(adapter);
    
#line 1017 
    if ((int)tmp_1 != 0) {
      
#line 1017 
      if ((unsigned int)trans->cmd_id != 0U) {
        
#line 1019 
        __retres = -5;
        
#line 1019 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 1022 
  ldv_mutex_lock_80(& vf->send_cmd_lock);
  
#line 1023 
  vf->send_cmd = trans;
  
#line 1024 
  err = __qlcnic_sriov_send_bc_msg(trans,vf,(unsigned char)0);
  
#line 1025 
  qlcnic_sriov_clear_trans(vf,trans,(unsigned char)0);
  
#line 1026 
  ldv_mutex_unlock_81(& vf->send_cmd_lock);
  
#line 1027 
  __retres = err;
  return_label: 
#line 1027 
                return __retres;
}


#line 1030  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void __qlcnic_sriov_process_bc_cmd(struct qlcnic_adapter *adapter, struct qlcnic_bc_trans *trans, struct qlcnic_cmd_args *cmd)
{
  bool tmp;
  
#line 1035 
  tmp = qlcnic_sriov_pf_check(adapter);
  
#line 1035 
  if ((int)tmp != 0) {
    
#line 1036 
    qlcnic_sriov_pf_process_bc_cmd(adapter,trans,cmd);
    
#line 1037 
    goto return_label;
  }
  else ;
  
#line 1040 
  *(cmd->rsp.arg) |= 301989888U;
  return_label: 
#line 1041 
                return;
}


#line 1044  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_process_bc_cmd(struct work_struct *work)
{
  struct qlcnic_vf_info *tmp;
  struct qlcnic_cmd_args cmd;
  u8 req;
  int tmp_0;
  struct qlcnic_bc_trans *tmp_1;
  int tmp_2;
  int tmp_3;
  {
    
#line 1046 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1046 
    tmp = (struct qlcnic_vf_info *)__mptr + 18446744073709551488U;
  }
  
#line 1046 
  struct qlcnic_vf_info *vf = tmp;
  
#line 1048 
  struct qlcnic_bc_trans *trans = (struct qlcnic_bc_trans *)0;
  
#line 1049 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 1053 
  if ((unsigned int)adapter->need_fw_reset != 0U) 
#line 1054 
                                                  goto return_label; else ;
  
#line 1056 
  tmp_0 = constant_test_bit(4L,(unsigned long const volatile *)(& vf->state));
  
#line 1056 
  if (tmp_0 != 0) 
#line 1057 
                  goto return_label; else ;
  
#line 1059 
  memset((void *)(& cmd),0,200UL);
  {
    
#line 1060 
    struct list_head const *__mptr_0 = (struct list_head const *)vf->rcv_act.wait_list.next;
    
#line 1060 
    tmp_1 = (struct qlcnic_bc_trans *)__mptr_0 + 18446744073709551592U;
  }
  
#line 1060 
  trans = tmp_1;
  
#line 1062 
  adapter = vf->adapter;
  
#line 1064 
  tmp_2 = qlcnic_sriov_prepare_bc_hdr(trans,& cmd,(unsigned short)((int)(trans->req_hdr)->seq_id),(unsigned char)1);
  
#line 1064 
  if (tmp_2 != 0) 
#line 1066 
                  goto cleanup_trans; else ;
  
#line 1068 
  __qlcnic_sriov_process_bc_cmd(adapter,trans,& cmd);
  
#line 1069 
  trans->trans_state = QLC_INIT;
  
#line 1070 
  __qlcnic_sriov_send_bc_msg(trans,vf,(unsigned char)1);
  cleanup_trans: 
#line 1072 
  ;
  
#line 1073 
  qlcnic_free_mbx_args(& cmd);
  
#line 1074 
  tmp_3 = qlcnic_sriov_clear_trans(vf,trans,(unsigned char)1);
  
#line 1074 
  req = (unsigned char)tmp_3;
  
#line 1075 
  qlcnic_sriov_cleanup_transaction(trans);
  
#line 1076 
  if ((unsigned int)req != 0U) 
#line 1077 
                               qlcnic_sriov_schedule_bc_cmd((adapter->ahw)->sriov,vf,& qlcnic_sriov_process_bc_cmd); else ;
  return_label: 
#line 1079 
                return;
}


#line 1081  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_handle_bc_resp(struct qlcnic_bc_hdr *hdr, struct qlcnic_vf_info *vf)
{
  struct qlcnic_bc_trans *trans;
  u32 pay_size;
  int tmp;
  
#line 1087 
  tmp = test_and_set_bit(0L,(unsigned long volatile *)(& vf->state));
  
#line 1087 
  if (tmp != 0) 
#line 1088 
                goto return_label; else ;
  
#line 1090 
  trans = vf->send_cmd;
  
#line 1092 
  if (trans == (struct qlcnic_bc_trans *)0) 
#line 1093 
                                            goto clear_send; else ;
  
#line 1095 
  if (trans->trans_id != (unsigned int)hdr->seq_id) 
#line 1096 
                                                    goto clear_send; else ;
  
#line 1098 
  pay_size = qlcnic_sriov_get_bc_paysize((unsigned int)trans->rsp_pay_size,(unsigned char)((int)trans->curr_rsp_frag));
  
#line 1100 
  qlcnic_sriov_pull_bc_msg(vf->adapter,(u32 *)(trans->rsp_hdr + (int)trans->curr_rsp_frag),(u32 *)(trans->rsp_pay + (int)trans->curr_rsp_frag),pay_size);
  
#line 1104 
  trans->curr_rsp_frag = (u8)((int)trans->curr_rsp_frag + 1);
  
#line 1104 
  ;
  
#line 1104 
  if ((int)trans->curr_rsp_frag < (int)(trans->rsp_hdr)->num_frags) 
#line 1105 
                                                                    goto clear_send; else ;
  
#line 1107 
  complete(& trans->resp_cmpl);
  clear_send: 
#line 1109 
  ;
  
#line 1110 
  set_bit(0L,(unsigned long volatile *)(& vf->state));
  return_label: 
#line 1111 
                return;
}


#line 1113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
int __qlcnic_sriov_add_act_list(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, struct qlcnic_bc_trans *trans)
{
  int __retres;
  
#line 1117 
  struct qlcnic_trans_list *t_list = & vf->rcv_act;
  
#line 1119 
  t_list->count += 1;
  
#line 1120 
  list_add_tail(& trans->list,& t_list->wait_list);
  
#line 1121 
  if (t_list->count == 1) 
#line 1122 
                          qlcnic_sriov_schedule_bc_cmd(sriov,vf,& qlcnic_sriov_process_bc_cmd); else ;
  
#line 1124 
  __retres = 0;
  
#line 1124 
  return __retres;
}


#line 1127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_add_act_list(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, struct qlcnic_bc_trans *trans)
{
  int __retres;
  
#line 1131 
  struct qlcnic_trans_list *t_list = & vf->rcv_act;
  
#line 1133 
  ldv_spin_lock_82_0(& t_list->lock);
  
#line 1135 
  __qlcnic_sriov_add_act_list(sriov,vf,trans);
  
#line 1137 
  ldv_spin_unlock_83_0(& t_list->lock);
  
#line 1138 
  __retres = 0;
  
#line 1138 
  return __retres;
}


#line 1141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_handle_pending_trans(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, struct qlcnic_bc_hdr *hdr)
{
  struct list_head *node;
  u32 pay_size;
  u32 curr_frag;
  
#line 1145 
  struct qlcnic_bc_trans *trans = (struct qlcnic_bc_trans *)0;
  
#line 1148 
  u8 found = (unsigned char)0U;
  
#line 1148 
  u8 active = (unsigned char)0U;
  
#line 1150 
  ldv_spin_lock_84(& vf->rcv_pend.lock);
  
#line 1151 
  if (vf->rcv_pend.count > 0) {
    struct qlcnic_bc_trans *tmp;
    
#line 1152 
    node = vf->rcv_pend.wait_list.next;
    
#line 1152 
    goto ldv_54506;
    ldv_54505: 
#line 1153 
    ;
    {
      
#line 1153 
      struct list_head const *__mptr = (struct list_head const *)node;
      
#line 1153 
      tmp = (struct qlcnic_bc_trans *)__mptr + 18446744073709551592U;
    }
    
#line 1153 
    trans = tmp;
    
#line 1154 
    if (trans->trans_id == (unsigned int)hdr->seq_id) {
      
#line 1155 
      found = (unsigned char)1U;
      
#line 1156 
      goto ldv_54504;
    }
    else ;
    
#line 1152 
    node = node->next;
    ldv_54506: 
#line 1153 
    ;
    
#line 1152 
    if (& vf->rcv_pend.wait_list != node) 
#line 1154 
                                          goto ldv_54505; else 
#line 1157 
                                                               goto ldv_54504;
    ldv_54504: 
#line 1158 
    ;
  }
  else ;
  
#line 1161 
  if ((unsigned int)found != 0U) {
    
#line 1162 
    curr_frag = (unsigned int)trans->curr_req_frag;
    
#line 1163 
    pay_size = qlcnic_sriov_get_bc_paysize((unsigned int)trans->req_pay_size,(unsigned char)((int)((unsigned char)curr_frag)));
    
#line 1165 
    qlcnic_sriov_pull_bc_msg(vf->adapter,(u32 *)(trans->req_hdr + curr_frag),(u32 *)(trans->req_pay + curr_frag),pay_size);
    
#line 1169 
    trans->curr_req_frag = (u8)((int)trans->curr_req_frag + 1);
    
#line 1170 
    if ((int)trans->curr_req_frag >= (int)hdr->num_frags) {
      
#line 1171 
      vf->rcv_pend.count -= 1;
      
#line 1172 
      list_del(& trans->list);
      
#line 1173 
      active = (unsigned char)1U;
    }
    else ;
  }
  else ;
  
#line 1176 
  ldv_spin_unlock_85_0(& vf->rcv_pend.lock);
  
#line 1178 
  if ((unsigned int)active != 0U) {
    int tmp_0;
    
#line 1179 
    tmp_0 = qlcnic_sriov_add_act_list(sriov,vf,trans);
    
#line 1179 
    if (tmp_0 != 0) 
#line 1180 
                    qlcnic_sriov_cleanup_transaction(trans); else ;
  }
  else ;
  
#line 1182 
  return;
}


#line 1185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_handle_bc_cmd(struct qlcnic_sriov *sriov, struct qlcnic_bc_hdr *hdr, struct qlcnic_vf_info *vf)
{
  struct qlcnic_bc_trans *trans;
  struct qlcnic_cmd_args cmd;
  u32 pay_size;
  int err;
  u8 cmd_op;
  int tmp;
  int tmp_0;
  int tmp_1;
  bool tmp_2;
  
#line 1190 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 1196 
  if ((unsigned int)adapter->need_fw_reset != 0U) 
#line 1197 
                                                  goto return_label; else ;
  
#line 1199 
  tmp = constant_test_bit(3L,(unsigned long const volatile *)(& vf->state));
  
#line 1199 
  if (tmp == 0) {
    
#line 1199 
    if ((unsigned int)*((unsigned char *)hdr + 1UL) == 0U) {
      
#line 1200 
      if ((unsigned int)hdr->cmd_op != 0U) 
#line 1202 
                                           goto return_label; else ;
    }
    else ;
  }
  else ;
  
#line 1204 
  if ((unsigned int)hdr->frag_num > 1U) {
    
#line 1205 
    qlcnic_sriov_handle_pending_trans(sriov,vf,hdr);
    
#line 1206 
    goto return_label;
  }
  else ;
  
#line 1209 
  memset((void *)(& cmd),0,200UL);
  
#line 1210 
  cmd_op = hdr->cmd_op;
  
#line 1211 
  tmp_0 = qlcnic_sriov_alloc_bc_trans(& trans);
  
#line 1211 
  if (tmp_0 != 0) 
#line 1212 
                  goto return_label; else ;
  
#line 1214 
  if ((unsigned int)*((unsigned char *)hdr + 1UL) != 0U) 
#line 1215 
                                                         err = qlcnic_sriov_alloc_bc_mbx_args(& cmd,(unsigned int)cmd_op); else 
                                                                    
#line 1217 
                                                                    err = qlcnic_alloc_mbx_args(& cmd,adapter,(unsigned int)cmd_op);
  
#line 1219 
  if (err != 0) {
    
#line 1220 
    qlcnic_sriov_cleanup_transaction(trans);
    
#line 1221 
    goto return_label;
  }
  else ;
  
#line 1224 
  cmd.op_type = (unsigned int)hdr->op_type;
  
#line 1225 
  tmp_1 = qlcnic_sriov_prepare_bc_hdr(trans,& cmd,(unsigned short)((int)hdr->seq_id),(unsigned char)0);
  
#line 1225 
  if (tmp_1 != 0) {
    
#line 1227 
    qlcnic_free_mbx_args(& cmd);
    
#line 1228 
    qlcnic_sriov_cleanup_transaction(trans);
    
#line 1229 
    goto return_label;
  }
  else ;
  
#line 1232 
  pay_size = qlcnic_sriov_get_bc_paysize((unsigned int)trans->req_pay_size,(unsigned char)((int)trans->curr_req_frag));
  
#line 1234 
  qlcnic_sriov_pull_bc_msg(vf->adapter,(u32 *)(trans->req_hdr + (int)trans->curr_req_frag),(u32 *)(trans->req_pay + (int)trans->curr_req_frag),pay_size);
  
#line 1238 
  trans->func_id = vf->pci_func;
  
#line 1239 
  trans->vf = vf;
  
#line 1240 
  trans->trans_id = (unsigned int)hdr->seq_id;
  
#line 1241 
  trans->curr_req_frag = (u8)((int)trans->curr_req_frag + 1);
  
#line 1243 
  tmp_2 = qlcnic_sriov_soft_flr_check(adapter,trans,vf);
  
#line 1243 
  if ((int)tmp_2 != 0) 
#line 1244 
                       goto return_label; else ;
  
#line 1246 
  if ((int)trans->curr_req_frag == (int)(trans->req_hdr)->num_frags) {
    int tmp_3;
    
#line 1247 
    tmp_3 = qlcnic_sriov_add_act_list(sriov,vf,trans);
    
#line 1247 
    if (tmp_3 != 0) {
      
#line 1248 
      qlcnic_free_mbx_args(& cmd);
      
#line 1249 
      qlcnic_sriov_cleanup_transaction(trans);
    }
    else ;
  }
  else {
    
#line 1252 
    ldv_spin_lock_86(& vf->rcv_pend.lock);
    
#line 1253 
    list_add_tail(& trans->list,& vf->rcv_pend.wait_list);
    
#line 1254 
    vf->rcv_pend.count += 1;
    
#line 1255 
    ldv_spin_unlock_87_0(& vf->rcv_pend.lock);
  }
  return_label: 
#line 1257 
                return;
}


#line 1259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_handle_msg_event(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf)
{
  struct qlcnic_bc_hdr hdr;
  u8 msg_type;
  u8 i;
  
#line 1263 
  u32 *ptr = (u32 *)(& hdr);
  
#line 1266 
  i = (unsigned char)2U;
  
#line 1266 
  goto ldv_54527;
  ldv_54526: 
#line 1267 
  ;
  
#line 1267 
  *(ptr + ((unsigned long)i + 18446744073709551614U)) = readl((void const volatile *)(((vf->adapter)->ahw)->pci_base0 + ((unsigned int)((int)i * 4) + 2048U)));
  
#line 1266 
  i = (u8)((int)i + 1);
  ldv_54527: 
#line 1267 
  ;
  
#line 1266 
  if ((unsigned int)i <= 5U) 
#line 1268 
                             goto ldv_54526; else 
#line 1271 
                                                  goto ldv_54528;
  ldv_54528: 
#line 1272 
  ;
  
#line 1268 
  msg_type = (unsigned char)hdr.msg_type;
  
#line 1270 
  switch ((int)msg_type) {
    case 0: 
#line 1271 
    ;
    
#line 1272 
    qlcnic_sriov_handle_bc_cmd(sriov,& hdr,vf);
    
#line 1273 
    goto ldv_54530;
    case 1: 
#line 1274 
    ;
    
#line 1275 
    qlcnic_sriov_handle_bc_resp(& hdr,vf);
    
#line 1276 
    goto ldv_54530;
  }
  ldv_54530: 
#line 1278 
  ;
  
#line 1279 
  return;
}


#line 1280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_handle_flr_event(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf)
{
  bool tmp;
  
#line 1283 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 1285 
  tmp = qlcnic_sriov_pf_check(adapter);
  
#line 1285 
  if ((int)tmp != 0) 
#line 1286 
                     qlcnic_sriov_pf_handle_flr(sriov,vf); else 
#line 1288 
                                                                dev_err((struct device const *)(& (adapter->pdev)->dev),"Invalid event to VF. VF should not get FLR event\n");
  
#line 1290 
  return;
}


#line 1292  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_handle_bc_event(struct qlcnic_adapter *adapter, u32 event)
{
  struct qlcnic_vf_info *vf;
  struct qlcnic_sriov *sriov;
  int index;
  u8 pci_func;
  bool tmp;
  bool tmp_0;
  bool tmp_1;
  
#line 1299 
  sriov = (adapter->ahw)->sriov;
  
#line 1300 
  pci_func = qlcnic_sriov_target_func_id(event);
  
#line 1301 
  index = qlcnic_sriov_func_to_index(adapter,(unsigned char)((int)pci_func));
  
#line 1303 
  if (index < 0) 
#line 1304 
                 goto return_label; else ;
  
#line 1306 
  vf = sriov->vf_info + index;
  
#line 1307 
  vf->pci_func = pci_func;
  
#line 1309 
  tmp = qlcnic_sriov_channel_free_check(event);
  
#line 1309 
  if ((int)tmp != 0) 
#line 1310 
                     complete(& vf->ch_free_cmpl); else ;
  
#line 1312 
  tmp_0 = qlcnic_sriov_flr_check(event);
  
#line 1312 
  if ((int)tmp_0 != 0) {
    
#line 1313 
    qlcnic_sriov_handle_flr_event(sriov,vf);
    
#line 1314 
    goto return_label;
  }
  else ;
  
#line 1317 
  tmp_1 = qlcnic_sriov_bc_msg_check(event);
  
#line 1317 
  if ((int)tmp_1 != 0) 
#line 1318 
                       qlcnic_sriov_handle_msg_event(sriov,vf); else ;
  return_label: 
#line 1319 
                return;
}


#line 1321  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
int qlcnic_sriov_cfg_bc_intr(struct qlcnic_adapter *adapter, u8 enable)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  int err;
  int tmp;
  int tmp_0;
  
#line 1326 
  tmp = constant_test_bit(10L,(unsigned long const volatile *)(& adapter->state));
  
#line 1326 
  if (tmp == 0) {
    
#line 1327 
    __retres = 0;
    
#line 1327 
    goto return_label;
  }
  else ;
  
#line 1329 
  tmp_0 = qlcnic_alloc_mbx_args(& cmd,adapter,49U);
  
#line 1329 
  if (tmp_0 != 0) {
    
#line 1330 
    __retres = -12;
    
#line 1330 
    goto return_label;
  }
  else ;
  
#line 1332 
  if ((unsigned int)enable != 0U) 
#line 1333 
                                  *(cmd.req.arg + 1U) = 240U; else ;
  
#line 1335 
  err = qlcnic_83xx_issue_cmd(adapter,& cmd);
  
#line 1337 
  if (err != 0) {
    char *tmp_1;
    
#line 1338 
    ;
    
#line 1339 
    if ((unsigned int)enable != 0U) 
#line 1339 
                                    tmp_1 = (char *)"enable"; else 
#line 1339 
                                                                   tmp_1 = (char *)"disable";
    
#line 1338 
    ;
    
#line 1338 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to %s bc events, err=%d\n",tmp_1,err);
  }
  else ;
  
#line 1343 
  qlcnic_free_mbx_args(& cmd);
  
#line 1344 
  __retres = err;
  return_label: 
#line 1344 
                return __retres;
}


#line 1347  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_retry_bc_cmd(struct qlcnic_adapter *adapter, struct qlcnic_bc_trans *trans)
{
  int __retres;
  u32 state;
  
#line 1350 
  u8 max = (unsigned char)5U;
  
#line 1353 
  state = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 12U)));
  
#line 1354 
  if (state == 3U) {
    
#line 1355 
    msleep(20U);
    
#line 1356 
    set_bit(2L,(unsigned long volatile *)(& (trans->vf)->state));
    
#line 1357 
    trans->trans_state = QLC_INIT;
    
#line 1358 
    adapter->fw_fail_cnt = (u8)((int)adapter->fw_fail_cnt + 1);
    
#line 1358 
    ;
    
#line 1358 
    if ((int)adapter->fw_fail_cnt > (int)max) {
      
#line 1359 
      __retres = -5;
      
#line 1359 
      goto return_label;
    }
    else {
      
#line 1361 
      __retres = 0;
      
#line 1361 
      goto return_label;
    }
  }
  else ;
  
#line 1364 
  __retres = -5;
  return_label: 
#line 1364 
                return __retres;
}


#line 1367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int __qlcnic_sriov_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  struct qlcnic_bc_trans *trans;
  int err;
  u32 rsp_data;
  u32 opcode;
  u32 mbx_err_code;
  u32 rsp;
  int tmp;
  int tmp_0;
  int tmp_2;
  
#line 1370 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1371 
  struct qlcnic_mailbox *mbx = ahw->mailbox;
  
#line 1372 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1376 
  ((adapter->ahw)->sriov)->bc.trans_counter = (u16)((int)((adapter->ahw)->sriov)->bc.trans_counter + 1);
  
#line 1376 
  u16 seq = ((adapter->ahw)->sriov)->bc.trans_counter;
  
#line 1377 
  u8 func = ahw->pci_func;
  
#line 1379 
  tmp = qlcnic_sriov_alloc_bc_trans(& trans);
  
#line 1379 
  rsp = (unsigned int)tmp;
  
#line 1380 
  if (rsp != 0U) 
#line 1381 
                 goto free_cmd; else ;
  
#line 1383 
  tmp_0 = qlcnic_sriov_prepare_bc_hdr(trans,cmd,(unsigned short)((int)seq),(unsigned char)0);
  
#line 1383 
  rsp = (unsigned int)tmp_0;
  
#line 1384 
  if (rsp != 0U) 
#line 1385 
                 goto cleanup_transaction; else ;
  retry: 
#line 1387 
  ;
  
#line 1388 
  tmp_2 = constant_test_bit(2L,(unsigned long const volatile *)(& mbx->status));
  
#line 1388 
  if (tmp_2 == 0) {
    
#line 1389 
    rsp = 4294967291U;
    
#line 1390 
    if (((adapter->ahw)->msg_enable & 1U) != 0U) {
      char const *tmp_1;
      
#line 1390 
      ;
      
#line 1390 
      ;
      
#line 1390 
      tmp_1 = dev_name((struct device const *)(& (adapter->pdev)->dev));
      
#line 1390 
      printk("\001",tmp_1,"__qlcnic_sriov_issue_cmd",(int)((unsigned short)*(cmd->req.arg)),(int)func);
    }
    else ;
    
#line 1392 
    goto err_out;
  }
  else ;
  
#line 1395 
  err = qlcnic_sriov_send_bc_cmd(adapter,trans,(int)func);
  
#line 1396 
  if (err != 0) {
    
#line 1397 
    dev_err((struct device const *)dev,"MBX command 0x%x timed out for VF %d\n",*(cmd->req.arg) & 65535U,(int)func);
    
#line 1399 
    rsp = 17U;
    
#line 1404 
    if ((unsigned int)(trans->req_hdr)->cmd_op == 0U) {
      int tmp_3;
      
#line 1404 
      tmp_3 = qlcnic_sriov_retry_bc_cmd(adapter,trans);
      
#line 1404 
      if (tmp_3 == 0) 
#line 1406 
                      goto retry; else ;
    }
    else ;
    
#line 1408 
    goto err_out;
  }
  else ;
  
#line 1411 
  rsp_data = *(cmd->rsp.arg);
  
#line 1412 
  mbx_err_code = rsp_data >> 25;
  
#line 1413 
  opcode = (unsigned int)((unsigned short)*(cmd->req.arg));
  
#line 1415 
  if (mbx_err_code == 1U || mbx_err_code == 26U) 
#line 1417 
                                                 rsp = 0U;
  else 
    
#line 1419 
    if (cmd->type == 1U) 
#line 1420 
                         rsp = 0U;
    else {
      
#line 1422 
      rsp = mbx_err_code;
      
#line 1423 
      if (rsp == 0U) 
#line 1424 
                     rsp = 1U; else ;
      
#line 1426 
      dev_err((struct device const *)dev,"MBX command 0x%x failed with err:0x%x for VF %d\n",opcode,mbx_err_code,(int)func);
    }
  err_out: 
#line 1432 
  ;
  
#line 1433 
  if (rsp == 17U) {
    
#line 1434 
    ahw->reset_context = (unsigned char)1U;
    
#line 1435 
    adapter->need_fw_reset = (unsigned char)1U;
    
#line 1436 
    set_bit(2L,(unsigned long volatile *)(& mbx->status));
  }
  else ;
  cleanup_transaction: 
#line 1439 
  ;
  
#line 1440 
  qlcnic_sriov_cleanup_transaction(trans);
  free_cmd: 
#line 1442 
  ;
  
#line 1443 
  if (cmd->type == 1U) {
    
#line 1444 
    qlcnic_free_mbx_args(cmd);
    
#line 1445 
    kfree((void const *)cmd);
  }
  else ;
  
#line 1448 
  __retres = (int)rsp;
  
#line 1448 
  return __retres;
}


#line 1452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  
#line 1455 
  if (cmd->type == 1U) {
    int tmp;
    
#line 1456 
    tmp = qlcnic_sriov_async_issue_cmd(adapter,cmd);
    
#line 1456 
    __retres = tmp;
    
#line 1456 
    goto return_label;
  }
  else {
    int tmp_0;
    
#line 1458 
    tmp_0 = __qlcnic_sriov_issue_cmd(adapter,cmd);
    
#line 1458 
    __retres = tmp_0;
    
#line 1458 
    goto return_label;
  }
  return_label: 
#line 1455 
                return __retres;
}


#line 1461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_channel_cfg_cmd(struct qlcnic_adapter *adapter, u8 cmd_op)
{
  int __retres;
  struct qlcnic_cmd_args cmd;
  int ret;
  int tmp;
  
#line 1464 
  struct qlcnic_vf_info *vf = ((adapter->ahw)->sriov)->vf_info;
  
#line 1467 
  memset((void *)(& cmd),0,200UL);
  
#line 1468 
  tmp = qlcnic_sriov_alloc_bc_mbx_args(& cmd,(unsigned int)cmd_op);
  
#line 1468 
  if (tmp != 0) {
    
#line 1469 
    __retres = -12;
    
#line 1469 
    goto return_label;
  }
  else ;
  
#line 1471 
  ret = qlcnic_issue_cmd(adapter,& cmd);
  
#line 1472 
  if (ret != 0) {
    char *tmp_0;
    
#line 1473 
    ;
    
#line 1474 
    if ((unsigned int)cmd_op != 0U) 
#line 1474 
                                    tmp_0 = (char *)"term"; else 
#line 1474 
                                                                 tmp_0 = (char *)"init";
    
#line 1473 
    ;
    
#line 1473 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed bc channel %s %d\n",tmp_0,ret);
    
#line 1476 
    goto out;
  }
  else ;
  
#line 1479 
  cmd_op = (unsigned char)*(cmd.rsp.arg);
  
#line 1480 
  if (*(cmd.rsp.arg) >> 25 == 2U) {
    
#line 1481 
    __retres = 2;
    
#line 1481 
    goto return_label;
  }
  else ;
  
#line 1482 
  if ((unsigned int)cmd_op == 0U) 
#line 1483 
                                  set_bit(3L,(unsigned long volatile *)(& vf->state)); else 
                                                                    
#line 1485 
                                                                    set_bit(3L,(unsigned long volatile *)(& vf->state));
  out: 
#line 1487 
  ;
  
#line 1488 
  qlcnic_free_mbx_args(& cmd);
  
#line 1489 
  __retres = ret;
  return_label: 
#line 1489 
                return __retres;
}


#line 1492  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_vf_add_mc_list(struct net_device *netdev, u8 const *mac, enum qlcnic_mac_type mac_type)
{
  struct qlcnic_vf_info *vf;
  u16 vlan_id;
  int i;
  int tmp_2;
  bool tmp_1;
  
#line 1495 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1496 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 1501 
  vf = ((adapter->ahw)->sriov)->vf_info;
  
#line 1503 
  tmp_1 = qlcnic_sriov_check_any_vlan(vf);
  
#line 1503 
  if (tmp_1) 
#line 1503 
             tmp_2 = 0; else 
#line 1503 
                             tmp_2 = 1;
  
#line 1503 
  if (tmp_2) 
#line 1504 
             qlcnic_nic_add_mac(adapter,mac,(unsigned short)0,mac_type);
  else {
    bool tmp_0;
    
#line 1506 
    ldv_spin_lock_88_0(& vf->vlan_list_lock);
    
#line 1507 
    i = 0;
    
#line 1507 
    goto ldv_54600;
    ldv_54599: 
#line 1508 
    ;
    
#line 1508 
    vlan_id = *(vf->sriov_vlans + i);
    
#line 1509 
    if ((unsigned int)vlan_id != 0U) 
#line 1510 
                                     qlcnic_nic_add_mac(adapter,mac,(unsigned short)((int)vlan_id),mac_type); else ;
    
#line 1507 
    i += 1;
    ldv_54600: 
#line 1508 
    ;
    
#line 1507 
    if ((int)sriov->num_allowed_vlans > i) 
#line 1509 
                                           goto ldv_54599; else 
#line 1512 
                                                                goto ldv_54601;
    ldv_54601: 
#line 1513 
    ;
    
#line 1513 
    ldv_spin_unlock_89_0(& vf->vlan_list_lock);
    
#line 1514 
    tmp_0 = qlcnic_84xx_check(adapter);
    
#line 1514 
    if ((int)tmp_0 != 0) 
#line 1515 
                         qlcnic_nic_add_mac(adapter,mac,(unsigned short)0,mac_type); else ;
  }
  
#line 1517 
  return;
}


#line 1519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_cleanup_async_list(struct qlcnic_back_channel *bc)
{
  struct qlcnic_async_work_list *entry;
  struct qlcnic_async_work_list *tmp;
  int tmp_0;
  
#line 1521 
  struct list_head *head = & bc->async_list;
  
#line 1524 
  flush_workqueue(bc->bc_async_wq);
  
#line 1525 
  goto ldv_54610;
  ldv_54609: 
#line 1526 
  ;
  {
    
#line 1526 
    struct list_head const *__mptr = (struct list_head const *)head->next;
    
#line 1526 
    tmp = (struct qlcnic_async_work_list *)__mptr;
  }
  
#line 1526 
  entry = tmp;
  
#line 1528 
  cancel_work_sync(& entry->work);
  
#line 1529 
  list_del(& entry->list);
  
#line 1530 
  kfree((void const *)entry);
  ldv_54610: 
#line 1531 
  ;
  
#line 1525 
  tmp_0 = list_empty((struct list_head const *)head);
  
#line 1525 
  if (tmp_0 == 0) 
#line 1527 
                  goto ldv_54609; else 
#line 1530 
                                       goto ldv_54611;
  ldv_54611: 
#line 1531 
  ;
  
#line 1532 
  return;
}


#line 1534  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_vf_set_multi(struct net_device *netdev)
{
  struct netdev_hw_addr *ha;
  int tmp_0;
  
#line 1536 
  struct qlcnic_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1537 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1538 
  u8 const bcast_addr[6U] = {(unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U, (unsigned char)255U};
  
#line 1542 
  u32 mode = 0U;
  
#line 1544 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& adapter->state));
  
#line 1544 
  if (tmp_0 == 0) 
#line 1545 
                  goto return_label; else ;
  
#line 1547 
  if ((netdev->flags & 256U) != 0U) {
    
#line 1548 
    if ((adapter->flags & 2048U) == 0U) 
#line 1549 
                                        mode = 1U; else ;
  }
  else 
    
#line 1550 
    if ((netdev->flags & 512U) != 0U || netdev->mc.count > (int)ahw->max_mc_count) 
      
#line 1552 
      mode = 2U;
    else {
      
#line 1554 
      qlcnic_vf_add_mc_list(netdev,(u8 const *)(& bcast_addr),(enum qlcnic_mac_type)QLCNIC_BROADCAST_MAC);
      
#line 1555 
      if (netdev->mc.count != 0) {
        struct netdev_hw_addr *tmp_1;
        struct netdev_hw_addr *tmp_2;
        
#line 1556 
        qlcnic_flush_mcast_mac(adapter);
        {
          
#line 1557 
          struct list_head const *__mptr = (struct list_head const *)netdev->mc.list.next;
          
#line 1557 
          tmp_1 = (struct netdev_hw_addr *)__mptr;
        }
        
#line 1557 
        ha = tmp_1;
        
#line 1557 
        goto ldv_54625;
        ldv_54624: 
#line 1558 
        ;
        
#line 1558 
        qlcnic_vf_add_mc_list(netdev,(u8 const *)(& ha->addr),(enum qlcnic_mac_type)QLCNIC_MULTICAST_MAC);
        {
          
#line 1557 
          struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
          
#line 1557 
          tmp_2 = (struct netdev_hw_addr *)__mptr_0;
        }
        
#line 1557 
        ha = tmp_2;
        ldv_54625: 
#line 1559 
        ;
        
#line 1557 
        if (& ha->list != & netdev->mc.list) 
#line 1559 
                                             goto ldv_54624; else 
#line 1562 
                                                                  goto ldv_54626;
        ldv_54626: 
#line 1563 
        ;
      }
      else ;
    }
  
#line 1566 
  if (netdev->uc.count > (int)ahw->max_uc_count) 
#line 1567 
                                                 mode = 1U;
  else 
    
#line 1568 
    if (netdev->uc.count != 0) {
      struct netdev_hw_addr *tmp_3;
      struct netdev_hw_addr *tmp_4;
      {
        
#line 1569 
        struct list_head const *__mptr_1 = (struct list_head const *)netdev->uc.list.next;
        
#line 1569 
        tmp_3 = (struct netdev_hw_addr *)__mptr_1;
      }
      
#line 1569 
      ha = tmp_3;
      
#line 1569 
      goto ldv_54632;
      ldv_54631: 
#line 1570 
      ;
      
#line 1570 
      qlcnic_vf_add_mc_list(netdev,(u8 const *)(& ha->addr),(enum qlcnic_mac_type)QLCNIC_UNICAST_MAC);
      {
        
#line 1569 
        struct list_head const *__mptr_2 = (struct list_head const *)ha->list.next;
        
#line 1569 
        tmp_4 = (struct netdev_hw_addr *)__mptr_2;
      }
      
#line 1569 
      ha = tmp_4;
      ldv_54632: 
#line 1571 
      ;
      
#line 1569 
      if (& ha->list != & netdev->uc.list) 
#line 1571 
                                           goto ldv_54631; else 
#line 1574 
                                                                goto ldv_54633;
      ldv_54633: 
#line 1575 
      ;
    }
    else ;
  
#line 1574 
  if ((unsigned int)*((unsigned char *)adapter->pdev + 2531UL) != 0U) 
    
#line 1575 
    if (mode == 1U && ! adapter->fdb_mac_learn) {
      
#line 1577 
      qlcnic_alloc_lb_filters_mem(adapter);
      
#line 1578 
      adapter->drv_mac_learn = (_Bool)1;
      
#line 1579 
      adapter->rx_mac_learn = (_Bool)1;
    }
    else {
      
#line 1581 
      adapter->drv_mac_learn = (_Bool)0;
      
#line 1582 
      adapter->rx_mac_learn = (_Bool)0;
    }
  else ;
  
#line 1586 
  qlcnic_nic_set_promisc(adapter,mode);
  return_label: 
#line 1587 
                return;
}


#line 1589  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_handle_async_issue_cmd(struct work_struct *work)
{
  struct qlcnic_async_work_list *entry;
  struct qlcnic_adapter *adapter;
  struct qlcnic_cmd_args *cmd;
  struct qlcnic_async_work_list *tmp;
  {
    
#line 1595 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1595 
    tmp = (struct qlcnic_async_work_list *)__mptr + 18446744073709551600U;
  }
  
#line 1595 
  entry = tmp;
  
#line 1596 
  adapter = (struct qlcnic_adapter *)entry->ptr;
  
#line 1597 
  cmd = entry->cmd;
  
#line 1598 
  __qlcnic_sriov_issue_cmd(adapter,cmd);
  
#line 1599 
  return;
}


#line 1603  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static struct qlcnic_async_work_list *qlcnic_sriov_get_free_node_async_work(struct qlcnic_back_channel *bc)
{
  struct qlcnic_async_work_list *__retres;
  struct list_head *node;
  struct qlcnic_async_work_list *tmp;
  int tmp_0;
  
#line 1606 
  struct qlcnic_async_work_list *entry = (struct qlcnic_async_work_list *)0;
  
#line 1607 
  u8 empty = (unsigned char)0U;
  
#line 1609 
  node = bc->async_list.next;
  
#line 1609 
  goto ldv_54652;
  ldv_54651: 
#line 1610 
  ;
  {
    
#line 1610 
    struct list_head const *__mptr = (struct list_head const *)node;
    
#line 1610 
    tmp = (struct qlcnic_async_work_list *)__mptr;
  }
  
#line 1610 
  entry = tmp;
  
#line 1611 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& entry->work.data));
  
#line 1611 
  if (tmp_0 == 0) {
    
#line 1612 
    empty = (unsigned char)1U;
    
#line 1613 
    goto ldv_54650;
  }
  else ;
  
#line 1609 
  node = node->next;
  ldv_54652: 
#line 1610 
  ;
  
#line 1609 
  if (& bc->async_list != node) 
#line 1611 
                                goto ldv_54651; else 
#line 1614 
                                                     goto ldv_54650;
  ldv_54650: 
#line 1615 
  ;
  
#line 1617 
  if ((unsigned int)empty == 0U) {
    
#line 1618 
    entry = (struct qlcnic_async_work_list *)kzalloc_7(112UL,32U);
    
#line 1620 
    if (entry == (struct qlcnic_async_work_list *)0) {
      
#line 1621 
      __retres = (struct qlcnic_async_work_list *)0;
      
#line 1621 
      goto return_label;
    }
    else ;
    
#line 1622 
    list_add_tail(& entry->list,& bc->async_list);
  }
  else ;
  
#line 1625 
  __retres = entry;
  return_label: 
#line 1625 
                return __retres;
}


#line 1628  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_schedule_async_cmd(struct qlcnic_back_channel *bc, void (*func)(struct work_struct *), void *data, struct qlcnic_cmd_args *cmd)
{
  
#line 1632 
  struct qlcnic_async_work_list *entry = (struct qlcnic_async_work_list *)0;
  
#line 1634 
  entry = qlcnic_sriov_get_free_node_async_work(bc);
  
#line 1635 
  if (entry == (struct qlcnic_async_work_list *)0) 
#line 1636 
                                                   goto return_label; else ;
  
#line 1638 
  entry->ptr = data;
  
#line 1639 
  entry->cmd = cmd;
  {
    struct lock_class_key __key;
    
#line 1640 
    __init_work(& entry->work,0);
    
#line 1640 
    atomic_long_t __constr_expr_39 = {.counter = WORK_STRUCT_NO_POOL_3};
    
#line 1640 
    entry->work.data = __constr_expr_39;
    
#line 1640 
    lockdep_init_map(& entry->work.lockdep_map,"(&entry->work)",& __key,0);
    
#line 1640 
    INIT_LIST_HEAD(& entry->work.entry);
    
#line 1640 
    entry->work.func = func;
  }
  
#line 1641 
  ldv_queue_work_90(bc->bc_async_wq,& entry->work);
  return_label: 
#line 1642 
                return;
}


#line 1644  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_async_issue_cmd(struct qlcnic_adapter *adapter, struct qlcnic_cmd_args *cmd)
{
  int __retres;
  
#line 1648 
  struct qlcnic_back_channel *bc = & ((adapter->ahw)->sriov)->bc;
  
#line 1650 
  if ((unsigned int)adapter->need_fw_reset != 0U) {
    
#line 1651 
    __retres = -5;
    
#line 1651 
    goto return_label;
  }
  else ;
  
#line 1653 
  qlcnic_sriov_schedule_async_cmd(bc,& qlcnic_sriov_handle_async_issue_cmd,(void *)adapter,cmd);
  
#line 1655 
  __retres = 0;
  return_label: 
#line 1655 
                return __retres;
}


#line 1658  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_reinit_driver(struct qlcnic_adapter *adapter)
{
  int __retres;
  int err;
  
#line 1662 
  adapter->need_fw_reset = (unsigned char)0U;
  
#line 1663 
  qlcnic_83xx_reinit_mbx_work((adapter->ahw)->mailbox);
  
#line 1664 
  qlcnic_83xx_enable_mbx_interrupt(adapter);
  
#line 1666 
  err = qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)1);
  
#line 1667 
  if (err != 0) {
    
#line 1668 
    __retres = err;
    
#line 1668 
    goto return_label;
  }
  else ;
  
#line 1670 
  err = qlcnic_sriov_channel_cfg_cmd(adapter,(unsigned char)0);
  
#line 1671 
  if (err != 0) 
#line 1672 
                goto err_out_cleanup_bc_intr; else ;
  
#line 1674 
  err = qlcnic_sriov_vf_init_driver(adapter);
  
#line 1675 
  if (err != 0) 
#line 1676 
                goto err_out_term_channel; else ;
  
#line 1678 
  __retres = 0;
  
#line 1678 
  goto return_label;
  err_out_term_channel: 
#line 1680 
  ;
  
#line 1681 
  qlcnic_sriov_channel_cfg_cmd(adapter,(unsigned char)1);
  err_out_cleanup_bc_intr: 
#line 1683 
  ;
  
#line 1684 
  qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)0);
  
#line 1685 
  __retres = err;
  return_label: 
#line 1685 
                return __retres;
}


#line 1688  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_attach(struct qlcnic_adapter *adapter)
{
  bool tmp_0;
  
#line 1690 
  struct net_device *netdev = adapter->netdev;
  
#line 1692 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 1692 
  if ((int)tmp_0 != 0) {
    int tmp;
    
#line 1693 
    tmp = qlcnic_up(adapter,netdev);
    
#line 1693 
    if (tmp == 0) 
#line 1694 
                  qlcnic_restore_indev_addr(netdev,1UL); else ;
  }
  else ;
  
#line 1697 
  netif_device_attach(netdev);
  
#line 1698 
  return;
}


#line 1700  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_detach(struct qlcnic_adapter *adapter)
{
  u8 i;
  bool tmp;
  
#line 1702 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1703 
  struct qlcnic_intrpt_config *intr_tbl = ahw->intr_tbl;
  
#line 1704 
  struct net_device *netdev = adapter->netdev;
  
#line 1705 
  u8 max_ints = (unsigned char)((unsigned int)ahw->num_msix + 255U);
  
#line 1707 
  netif_device_detach(netdev);
  
#line 1708 
  qlcnic_83xx_detach_mailbox_work(adapter);
  
#line 1709 
  qlcnic_83xx_disable_mbx_intr(adapter);
  
#line 1711 
  tmp = netif_running((struct net_device const *)netdev);
  
#line 1711 
  if ((int)tmp != 0) 
#line 1712 
                     qlcnic_down(adapter,netdev); else ;
  
#line 1714 
  i = (unsigned char)0U;
  
#line 1714 
  goto ldv_54686;
  ldv_54685: 
#line 1715 
  ;
  
#line 1715 
  (intr_tbl + (int)i)->id = (unsigned short)i;
  
#line 1716 
  (intr_tbl + (int)i)->enabled = (unsigned char)0U;
  
#line 1717 
  (intr_tbl + (int)i)->src = 0U;
  
#line 1714 
  i = (u8)((int)i + 1);
  ldv_54686: 
#line 1715 
  ;
  
#line 1714 
  if ((int)i < (int)max_ints) 
#line 1716 
                              goto ldv_54685; else 
#line 1719 
                                                   goto ldv_54687;
  ldv_54687: 
#line 1720 
  ;
  
#line 1719 
  ahw->reset_context = (unsigned char)0U;
  
#line 1720 
  return;
}


#line 1722  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_handle_dev_ready(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 state;
  
#line 1724 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1725 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1726 
  struct qlc_83xx_idc *idc = & ahw->idc;
  
#line 1727 
  u8 func = ahw->pci_func;
  
#line 1730 
  if ((unsigned int)idc->prev_state == 4U || (unsigned int)idc->prev_state == 2U) {
    int tmp;
    
#line 1732 
    tmp = qlcnic_sriov_vf_reinit_driver(adapter);
    
#line 1732 
    if (tmp == 0) {
      
#line 1733 
      qlcnic_sriov_vf_attach(adapter);
      
#line 1734 
      adapter->fw_fail_cnt = (unsigned char)0U;
      
#line 1735 
      _dev_info((struct device const *)dev,"%s: Reinitialization of VF 0x%x done after FW reset\n","qlcnic_sriov_vf_handle_dev_ready",(int)func);
    }
    else {
      
#line 1739 
      dev_err((struct device const *)dev,"%s: Reinitialization of VF 0x%x failed after FW reset\n","qlcnic_sriov_vf_handle_dev_ready",(int)func);
      
#line 1742 
      state = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 12U)));
      
#line 1743 
      _dev_info((struct device const *)dev,"Current state 0x%x after FW reset\n",state);
    }
  }
  else ;
  
#line 1748 
  __retres = 0;
  
#line 1748 
  return __retres;
}


#line 1751  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_handle_context_reset(struct qlcnic_adapter *adapter)
{
  int __retres;
  u32 state;
  int tmp;
  
#line 1753 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1754 
  struct qlcnic_mailbox *mbx = ahw->mailbox;
  
#line 1755 
  struct device *dev = & (adapter->pdev)->dev;
  
#line 1756 
  struct qlc_83xx_idc *idc = & ahw->idc;
  
#line 1757 
  u8 func = ahw->pci_func;
  
#line 1760 
  adapter->reset_ctx_cnt = (u8)((int)adapter->reset_ctx_cnt + 1);
  
#line 1763 
  if ((unsigned int)adapter->reset_ctx_cnt <= 2U) {
    
#line 1764 
    adapter->need_fw_reset = (unsigned char)1U;
    
#line 1765 
    set_bit(2L,(unsigned long volatile *)(& mbx->status));
    
#line 1766 
    _dev_info((struct device const *)dev,"Resetting context, wait here to check if FW is in failed state\n");
    
#line 1768 
    __retres = 0;
    
#line 1768 
    goto return_label;
  }
  else ;
  
#line 1774 
  if ((unsigned int)adapter->reset_ctx_cnt > 8U) {
    
#line 1775 
    set_bit(1L,(unsigned long volatile *)(& idc->status));
    
#line 1776 
    adapter->tx_timeo_cnt = (unsigned char)0U;
    
#line 1777 
    adapter->fw_fail_cnt = (unsigned char)0U;
    
#line 1778 
    adapter->reset_ctx_cnt = (unsigned char)0U;
    
#line 1779 
    qlcnic_sriov_vf_detach(adapter);
    
#line 1780 
    dev_err((struct device const *)dev,"Device context resets have exceeded the threshold, device interface will be shutdown\n");
    
#line 1782 
    __retres = -5;
    
#line 1782 
    goto return_label;
  }
  else ;
  
#line 1785 
  _dev_info((struct device const *)dev,"Resetting context of VF 0x%x\n",(int)func);
  
#line 1786 
  _dev_info((struct device const *)dev,"%s: Context reset count %d for VF 0x%x\n","qlcnic_sriov_vf_handle_context_reset",(int)adapter->reset_ctx_cnt,(int)func);
  
#line 1788 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 1789 
  adapter->need_fw_reset = (unsigned char)1U;
  
#line 1790 
  set_bit(2L,(unsigned long volatile *)(& mbx->status));
  
#line 1791 
  qlcnic_sriov_vf_detach(adapter);
  
#line 1792 
  adapter->need_fw_reset = (unsigned char)0U;
  
#line 1794 
  tmp = qlcnic_sriov_vf_reinit_driver(adapter);
  
#line 1794 
  if (tmp == 0) {
    
#line 1795 
    qlcnic_sriov_vf_attach(adapter);
    
#line 1796 
    adapter->tx_timeo_cnt = (unsigned char)0U;
    
#line 1797 
    adapter->reset_ctx_cnt = (unsigned char)0U;
    
#line 1798 
    adapter->fw_fail_cnt = (unsigned char)0U;
    
#line 1799 
    _dev_info((struct device const *)dev,"Done resetting context for VF 0x%x\n",(int)func);
  }
  else {
    
#line 1801 
    dev_err((struct device const *)dev,"%s: Reinitialization of VF 0x%x failed\n","qlcnic_sriov_vf_handle_context_reset",(int)func);
    
#line 1803 
    state = readl((void const volatile *)(ahw->pci_base0 + *(ahw->ext_reg_tbl + 12U)));
    
#line 1804 
    _dev_info((struct device const *)dev,"%s: Current state 0x%x\n","qlcnic_sriov_vf_handle_context_reset",state);
  }
  
#line 1807 
  __retres = 0;
  return_label: 
#line 1807 
                return __retres;
}


#line 1810  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_idc_ready_state(struct qlcnic_adapter *adapter)
{
  
#line 1812 
  struct qlcnic_hardware_context *ahw = adapter->ahw;
  
#line 1813 
  int ret = 0;
  
#line 1815 
  if ((unsigned int)ahw->idc.prev_state != 3U) 
#line 1816 
                                               ret = qlcnic_sriov_vf_handle_dev_ready(adapter);
  else 
    
#line 1817 
    if ((unsigned int)ahw->reset_context != 0U) 
#line 1818 
                                                ret = qlcnic_sriov_vf_handle_context_reset(adapter); else ;
  
#line 1820 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 1821 
  return ret;
}


#line 1824  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_idc_failed_state(struct qlcnic_adapter *adapter)
{
  int __retres;
  
#line 1826 
  struct qlc_83xx_idc *idc = & (adapter->ahw)->idc;
  
#line 1828 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"Device is in failed state\n");
  
#line 1829 
  if ((unsigned int)idc->prev_state == 3U) 
#line 1830 
                                           qlcnic_sriov_vf_detach(adapter); else ;
  
#line 1832 
  set_bit(1L,(unsigned long volatile *)(& idc->status));
  
#line 1833 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 1834 
  __retres = -5;
  
#line 1834 
  return __retres;
}


#line 1838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_idc_need_quiescent_state(struct qlcnic_adapter *adapter)
{
  int __retres;
  
#line 1840 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  
#line 1841 
  struct qlc_83xx_idc *idc = & (adapter->ahw)->idc;
  
#line 1843 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Device is in quiescent state\n");
  
#line 1844 
  if ((unsigned int)idc->prev_state == 3U) {
    
#line 1845 
    set_bit(2L,(unsigned long volatile *)(& adapter->state));
    
#line 1846 
    adapter->tx_timeo_cnt = (unsigned char)0U;
    
#line 1847 
    adapter->reset_ctx_cnt = (unsigned char)0U;
    
#line 1848 
    set_bit(2L,(unsigned long volatile *)(& mbx->status));
    
#line 1849 
    qlcnic_sriov_vf_detach(adapter);
  }
  else ;
  
#line 1852 
  __retres = 0;
  
#line 1852 
  return __retres;
}


#line 1855  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_idc_init_reset_state(struct qlcnic_adapter *adapter)
{
  int __retres;
  
#line 1857 
  struct qlcnic_mailbox *mbx = (adapter->ahw)->mailbox;
  
#line 1858 
  struct qlc_83xx_idc *idc = & (adapter->ahw)->idc;
  
#line 1859 
  u8 func = (adapter->ahw)->pci_func;
  
#line 1861 
  if ((unsigned int)idc->prev_state == 3U) {
    
#line 1862 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Firmware hang detected by VF 0x%x\n",(int)func);
    
#line 1864 
    set_bit(2L,(unsigned long volatile *)(& adapter->state));
    
#line 1865 
    adapter->tx_timeo_cnt = (unsigned char)0U;
    
#line 1866 
    adapter->reset_ctx_cnt = (unsigned char)0U;
    
#line 1867 
    set_bit(2L,(unsigned long volatile *)(& mbx->status));
    
#line 1868 
    qlcnic_sriov_vf_detach(adapter);
  }
  else ;
  
#line 1870 
  __retres = 0;
  
#line 1870 
  return __retres;
}


#line 1873  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_idc_unknown_state(struct qlcnic_adapter *adapter)
{
  int __retres;
  
#line 1875 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Device in unknown state\n","qlcnic_sriov_vf_idc_unknown_state");
  
#line 1876 
  __retres = 0;
  
#line 1876 
  return __retres;
}


#line 1879  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_periodic_tasks(struct qlcnic_adapter *adapter)
{
  
#line 1881 
  if ((unsigned int)adapter->fhash.fnum != 0U) 
#line 1882 
                                               qlcnic_prune_lb_filters(adapter); else ;
  
#line 1883 
  return;
}


#line 1885  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_poll_dev_state(struct work_struct *work)
{
  struct qlcnic_adapter *adapter;
  struct qlc_83xx_idc *idc;
  struct qlcnic_adapter *tmp;
  unsigned int tmp_0;
  
#line 1889 
  int ret = 0;
  {
    
#line 1891 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1891 
    tmp = (struct qlcnic_adapter *)__mptr + 18446744073709550712U;
  }
  
#line 1891 
  adapter = tmp;
  
#line 1892 
  idc = & (adapter->ahw)->idc;
  
#line 1893 
  tmp_0 = readl((void const volatile *)((adapter->ahw)->pci_base0 + *((adapter->ahw)->ext_reg_tbl + 12U)));
  
#line 1893 
  idc->curr_state = (unsigned char)tmp_0;
  
#line 1895 
  switch ((int)idc->curr_state) {
    case 3: 
#line 1896 
    ;
    
#line 1897 
    ret = qlcnic_sriov_vf_idc_ready_state(adapter);
    
#line 1898 
    goto ldv_54743;
    case 4: 
#line 1899 
    ;
    case 2: 
#line 1900 
    ;
    
#line 1901 
    ret = qlcnic_sriov_vf_idc_init_reset_state(adapter);
    
#line 1902 
    goto ldv_54743;
    case 5: 
#line 1903 
    ;
    
#line 1904 
    ret = qlcnic_sriov_vf_idc_need_quiescent_state(adapter);
    
#line 1905 
    goto ldv_54743;
    case 6: 
#line 1906 
    ;
    
#line 1907 
    ret = qlcnic_sriov_vf_idc_failed_state(adapter);
    
#line 1908 
    goto ldv_54743;
    case 7: 
#line 1909 
    ;
    
#line 1910 
    goto ldv_54743;
    default: 
#line 1911 
    ;
    
#line 1912 
    ret = qlcnic_sriov_vf_idc_unknown_state(adapter);
  }
  ldv_54743: 
#line 1915 
  ;
  
#line 1915 
  idc->prev_state = idc->curr_state;
  
#line 1916 
  qlcnic_sriov_vf_periodic_tasks(adapter);
  
#line 1918 
  if (ret == 0) {
    int tmp_1;
    
#line 1918 
    tmp_1 = constant_test_bit(1L,(unsigned long const volatile *)(& idc->status));
    
#line 1918 
    if (tmp_1 != 0) 
#line 1919 
                    qlcnic_schedule_work(adapter,& qlcnic_sriov_vf_poll_dev_state,(int)idc->delay); else ;
  }
  else ;
  
#line 1921 
  return;
}


#line 1923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_cancel_fw_work(struct qlcnic_adapter *adapter)
{
  int tmp;
  
#line 1925 
  goto ldv_54754;
  ldv_54753: 
#line 1926 
  ;
  
#line 1926 
  msleep(20U);
  ldv_54754: 
#line 1927 
  ;
  
#line 1925 
  tmp = test_and_set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 1925 
  if (tmp != 0) 
#line 1927 
                goto ldv_54753; else 
#line 1930 
                                     goto ldv_54755;
  ldv_54755: 
#line 1931 
  ;
  
#line 1928 
  set_bit(1L,(unsigned long volatile *)(& (adapter->ahw)->idc.status));
  
#line 1929 
  set_bit(2L,(unsigned long volatile *)(& adapter->state));
  
#line 1930 
  cancel_delayed_work_sync(& adapter->fw_work);
  
#line 1931 
  return;
}


#line 1933  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_check_vlan_id(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, u16 vlan_id)
{
  int __retres;
  int i;
  
#line 1936 
  int err = -22;
  
#line 1938 
  if (vf->sriov_vlans == (u16 *)0U) {
    
#line 1939 
    __retres = err;
    
#line 1939 
    goto return_label;
  }
  else ;
  
#line 1941 
  ldv_spin_lock_bh_91(& vf->vlan_list_lock);
  
#line 1943 
  i = 0;
  
#line 1943 
  goto ldv_54765;
  ldv_54764: 
#line 1944 
  ;
  
#line 1944 
  if ((int)*(vf->sriov_vlans + i) == (int)vlan_id) {
    
#line 1945 
    err = 0;
    
#line 1946 
    goto ldv_54763;
  }
  else ;
  
#line 1943 
  i += 1;
  ldv_54765: 
#line 1944 
  ;
  
#line 1943 
  if ((int)sriov->num_allowed_vlans > i) 
#line 1945 
                                         goto ldv_54764; else 
#line 1948 
                                                              goto ldv_54763;
  ldv_54763: 
#line 1949 
  ;
  
#line 1950 
  ldv_spin_unlock_bh_92(& vf->vlan_list_lock);
  
#line 1951 
  __retres = err;
  return_label: 
#line 1951 
                return __retres;
}


#line 1954  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_validate_num_vlans(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf)
{
  
#line 1957 
  int err = 0;
  
#line 1959 
  ldv_spin_lock_bh_93(& vf->vlan_list_lock);
  
#line 1961 
  if (vf->num_vlan >= (int)sriov->num_allowed_vlans) 
#line 1962 
                                                     err = -22; else ;
  
#line 1964 
  ldv_spin_unlock_bh_94(& vf->vlan_list_lock);
  
#line 1965 
  return err;
}


#line 1968  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_validate_vlan_cfg(struct qlcnic_adapter *adapter, u16 vid, u8 enable)
{
  int __retres;
  struct qlcnic_vf_info *vf;
  bool vlan_exist;
  int i;
  
#line 1971 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 1974 
  u8 allowed = (unsigned char)0U;
  
#line 1977 
  vf = ((adapter->ahw)->sriov)->vf_info;
  
#line 1978 
  vlan_exist = qlcnic_sriov_check_any_vlan(vf);
  
#line 1979 
  if ((unsigned int)sriov->vlan_mode != 2U) {
    
#line 1980 
    __retres = -22;
    
#line 1980 
    goto return_label;
  }
  else ;
  
#line 1982 
  if ((unsigned int)enable != 0U) {
    bool tmp;
    int tmp_0;
    
#line 1983 
    tmp = qlcnic_83xx_vf_check(adapter);
    
#line 1983 
    if ((int)tmp != 0) {
      
#line 1983 
      if ((int)vlan_exist != 0) {
        
#line 1984 
        __retres = -22;
        
#line 1984 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 1986 
    tmp_0 = qlcnic_sriov_validate_num_vlans(sriov,vf);
    
#line 1986 
    if (tmp_0 != 0) {
      
#line 1987 
      __retres = -22;
      
#line 1987 
      goto return_label;
    }
    else ;
    
#line 1989 
    if ((unsigned int)sriov->any_vlan != 0U) {
      
#line 1990 
      i = 0;
      
#line 1990 
      goto ldv_54782;
      ldv_54781: 
#line 1991 
      ;
      
#line 1991 
      if ((int)*(sriov->allowed_vlans + i) == (int)vid) 
#line 1992 
                                                        allowed = (unsigned char)1U; else ;
      
#line 1990 
      i += 1;
      ldv_54782: 
#line 1991 
      ;
      
#line 1990 
      if ((int)sriov->num_allowed_vlans > i) 
#line 1992 
                                             goto ldv_54781; else 
#line 1995 
                                                                  goto ldv_54783;
      ldv_54783: 
#line 1996 
      ;
      
#line 1995 
      if ((unsigned int)allowed == 0U) {
        
#line 1996 
        __retres = -22;
        
#line 1996 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  else 
    
#line 1999 
    if (! vlan_exist) {
      
#line 2000 
      __retres = -22;
      
#line 2000 
      goto return_label;
    }
    else {
      int tmp_1;
      
#line 1999 
      tmp_1 = qlcnic_sriov_check_vlan_id(sriov,vf,(unsigned short)((int)vid));
      
#line 1999 
      if (tmp_1 != 0) {
        
#line 2000 
        __retres = -22;
        
#line 2000 
        goto return_label;
      }
      else ;
    }
  
#line 2003 
  __retres = 0;
  return_label: 
#line 2003 
                return __retres;
}


#line 2006  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vlan_operation(struct qlcnic_vf_info *vf, u16 vlan_id, enum qlcnic_vlan_operations opcode)
{
  struct qlcnic_sriov *sriov;
  
#line 2009 
  struct qlcnic_adapter *adapter = vf->adapter;
  
#line 2012 
  sriov = (adapter->ahw)->sriov;
  
#line 2014 
  if (vf->sriov_vlans == (u16 *)0U) 
#line 2015 
                                    goto return_label; else ;
  
#line 2017 
  ldv_spin_lock_bh_95(& vf->vlan_list_lock);
  
#line 2019 
  switch ((unsigned int)opcode) {
    case (unsigned int)0: 
#line 2020 
    ;
    
#line 2021 
    qlcnic_sriov_add_vlan_id(sriov,vf,(unsigned short)((int)vlan_id));
    
#line 2022 
    goto ldv_54792;
    case (unsigned int)1: 
#line 2023 
    ;
    
#line 2024 
    qlcnic_sriov_del_vlan_id(sriov,vf,(unsigned short)((int)vlan_id));
    
#line 2025 
    goto ldv_54792;
    default: 
#line 2026 
    ;
    
#line 2027 
    netdev_err((struct net_device const *)adapter->netdev,"Invalid VLAN operation\n");
  }
  ldv_54792: 
#line 2030 
  ;
  
#line 2030 
  ldv_spin_unlock_bh_96(& vf->vlan_list_lock);
  return_label: 
#line 2031 
                return;
}


#line 2034  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
int qlcnic_sriov_cfg_vf_guest_vlan(struct qlcnic_adapter *adapter, u16 vid, u8 enable)
{
  int __retres;
  struct qlcnic_vf_info *vf;
  struct qlcnic_cmd_args cmd;
  int ret;
  
#line 2037 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 2038 
  struct net_device *netdev = adapter->netdev;
  
#line 2043 
  memset((void *)(& cmd),0,200UL);
  
#line 2044 
  if ((unsigned int)vid == 0U) {
    
#line 2045 
    __retres = 0;
    
#line 2045 
    goto return_label;
  }
  else ;
  
#line 2047 
  vf = ((adapter->ahw)->sriov)->vf_info;
  
#line 2048 
  ret = qlcnic_sriov_validate_vlan_cfg(adapter,(unsigned short)((int)vid),(unsigned char)((int)enable));
  
#line 2049 
  if (ret != 0) {
    
#line 2050 
    __retres = ret;
    
#line 2050 
    goto return_label;
  }
  else ;
  
#line 2052 
  ret = qlcnic_sriov_alloc_bc_mbx_args(& cmd,3U);
  
#line 2054 
  if (ret != 0) {
    
#line 2055 
    __retres = ret;
    
#line 2055 
    goto return_label;
  }
  else ;
  
#line 2057 
  *(cmd.req.arg + 1U) = (unsigned int)(((int)enable & 1) | ((int)vid << 16));
  
#line 2059 
  qlcnic_sriov_cleanup_async_list(& sriov->bc);
  
#line 2060 
  ret = qlcnic_issue_cmd(adapter,& cmd);
  
#line 2061 
  if (ret != 0) 
#line 2062 
                dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to configure guest VLAN, err=%d\n",ret);
  else {
    
#line 2065 
    netif_addr_lock_bh(netdev);
    
#line 2066 
    qlcnic_free_mac_list(adapter);
    
#line 2067 
    netif_addr_unlock_bh(netdev);
    
#line 2069 
    if ((unsigned int)enable != 0U) 
#line 2070 
                                    qlcnic_sriov_vlan_operation(vf,(unsigned short)((int)vid),(enum qlcnic_vlan_operations)QLC_VLAN_ADD); else 
                                                                    
#line 2072 
                                                                    qlcnic_sriov_vlan_operation(vf,(unsigned short)((int)vid),(enum qlcnic_vlan_operations)QLC_VLAN_DELETE);
    
#line 2074 
    netif_addr_lock_bh(netdev);
    
#line 2075 
    qlcnic_set_multi(netdev);
    
#line 2076 
    netif_addr_unlock_bh(netdev);
  }
  
#line 2079 
  qlcnic_free_mbx_args(& cmd);
  
#line 2080 
  __retres = ret;
  return_label: 
#line 2080 
                return __retres;
}


#line 2083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static void qlcnic_sriov_vf_free_mac_list(struct qlcnic_adapter *adapter)
{
  struct qlcnic_mac_vlan_list *cur;
  struct qlcnic_mac_vlan_list *tmp;
  int tmp_0;
  
#line 2085 
  struct list_head *head = & adapter->mac_list;
  
#line 2088 
  goto ldv_54813;
  ldv_54812: 
#line 2089 
  ;
  {
    
#line 2089 
    struct list_head const *__mptr = (struct list_head const *)head->next;
    
#line 2089 
    tmp = (struct qlcnic_mac_vlan_list *)__mptr;
  }
  
#line 2089 
  cur = tmp;
  
#line 2090 
  qlcnic_sre_macaddr_change(adapter,(u8 *)(& cur->mac_addr),(unsigned short)((int)cur->vlan_id),(unsigned char)2);
  
#line 2092 
  list_del(& cur->list);
  
#line 2093 
  kfree((void const *)cur);
  ldv_54813: 
#line 2094 
  ;
  
#line 2088 
  tmp_0 = list_empty((struct list_head const *)head);
  
#line 2088 
  if (tmp_0 == 0) 
#line 2090 
                  goto ldv_54812; else 
#line 2093 
                                       goto ldv_54814;
  ldv_54814: 
#line 2094 
  ;
  
#line 2095 
  return;
}


#line 2098  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_shutdown(struct pci_dev *pdev)
{
  int __retres;
  int retval;
  bool tmp_0;
  
#line 2100 
  struct qlcnic_adapter *adapter = pci_get_drvdata(pdev);
  
#line 2101 
  struct net_device *netdev = adapter->netdev;
  
#line 2104 
  netif_device_detach(netdev);
  
#line 2105 
  qlcnic_cancel_idc_work(adapter);
  
#line 2107 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 2107 
  if ((int)tmp_0 != 0) 
#line 2108 
                       qlcnic_down(adapter,netdev); else ;
  
#line 2110 
  qlcnic_sriov_channel_cfg_cmd(adapter,(unsigned char)1);
  
#line 2111 
  qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)0);
  
#line 2112 
  qlcnic_83xx_disable_mbx_intr(adapter);
  
#line 2113 
  cancel_delayed_work_sync(& adapter->idc_aen_work);
  
#line 2115 
  retval = pci_save_state(pdev);
  
#line 2116 
  if (retval != 0) {
    
#line 2117 
    __retres = retval;
    
#line 2117 
    goto return_label;
  }
  else ;
  
#line 2119 
  __retres = 0;
  return_label: 
#line 2119 
                return __retres;
}


#line 2122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
static int qlcnic_sriov_vf_resume(struct qlcnic_adapter *adapter)
{
  int __retres;
  int err;
  
#line 2124 
  struct qlc_83xx_idc *idc = & (adapter->ahw)->idc;
  
#line 2125 
  struct net_device *netdev = adapter->netdev;
  
#line 2128 
  set_bit(1L,(unsigned long volatile *)(& idc->status));
  
#line 2129 
  qlcnic_83xx_enable_mbx_interrupt(adapter);
  
#line 2130 
  err = qlcnic_sriov_cfg_bc_intr(adapter,(unsigned char)1);
  
#line 2131 
  if (err != 0) {
    
#line 2132 
    __retres = err;
    
#line 2132 
    goto return_label;
  }
  else ;
  
#line 2134 
  err = qlcnic_sriov_channel_cfg_cmd(adapter,(unsigned char)0);
  
#line 2135 
  if (err == 0) {
    bool tmp;
    
#line 2136 
    tmp = netif_running((struct net_device const *)netdev);
    
#line 2136 
    if ((int)tmp != 0) {
      
#line 2137 
      err = qlcnic_up(adapter,netdev);
      
#line 2138 
      if (err == 0) 
#line 2139 
                    qlcnic_restore_indev_addr(netdev,1UL); else ;
    }
    else ;
  }
  else ;
  
#line 2143 
  netif_device_attach(netdev);
  
#line 2144 
  qlcnic_schedule_work(adapter,& qlcnic_sriov_vf_poll_dev_state,(int)idc->delay);
  
#line 2146 
  __retres = err;
  return_label: 
#line 2146 
                return __retres;
}


#line 2149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_alloc_vlans(struct qlcnic_adapter *adapter)
{
  struct qlcnic_vf_info *vf;
  int i;
  
#line 2151 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 2155 
  i = 0;
  
#line 2155 
  goto ldv_54834;
  ldv_54833: 
#line 2156 
  ;
  
#line 2156 
  vf = sriov->vf_info + i;
  
#line 2157 
  vf->sriov_vlans = (u16 *)kcalloc_4((unsigned long)sriov->num_allowed_vlans,2UL,208U);
  
#line 2155 
  i += 1;
  ldv_54834: 
#line 2156 
  ;
  
#line 2155 
  if ((int)sriov->num_vfs > i) 
#line 2157 
                               goto ldv_54833; else 
#line 2160 
                                                    goto ldv_54835;
  ldv_54835: 
#line 2161 
  ;
  
#line 2162 
  return;
}


#line 2162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_free_vlans(struct qlcnic_adapter *adapter)
{
  struct qlcnic_vf_info *vf;
  int i;
  
#line 2164 
  struct qlcnic_sriov *sriov = (adapter->ahw)->sriov;
  
#line 2168 
  i = 0;
  
#line 2168 
  goto ldv_54843;
  ldv_54842: 
#line 2169 
  ;
  
#line 2169 
  vf = sriov->vf_info + i;
  
#line 2170 
  kfree((void const *)vf->sriov_vlans);
  
#line 2171 
  vf->sriov_vlans = (u16 *)0U;
  
#line 2168 
  i += 1;
  ldv_54843: 
#line 2169 
  ;
  
#line 2168 
  if ((int)sriov->num_vfs > i) 
#line 2170 
                               goto ldv_54842; else 
#line 2173 
                                                    goto ldv_54844;
  ldv_54844: 
#line 2174 
  ;
  
#line 2175 
  return;
}


#line 2175  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_add_vlan_id(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, u16 vlan_id)
{
  int i;
  
#line 2180 
  i = 0;
  
#line 2180 
  goto ldv_54852;
  ldv_54851: 
#line 2181 
  ;
  
#line 2181 
  if ((unsigned int)*(vf->sriov_vlans + i) == 0U) {
    
#line 2182 
    *(vf->sriov_vlans + i) = vlan_id;
    
#line 2183 
    vf->num_vlan += 1;
    
#line 2184 
    goto return_label;
  }
  else ;
  
#line 2180 
  i += 1;
  ldv_54852: 
#line 2181 
  ;
  
#line 2180 
  if ((int)sriov->num_allowed_vlans > i) 
#line 2182 
                                         goto ldv_54851; else 
#line 2185 
                                                              goto ldv_54853;
  ldv_54853: 
#line 2186 
  ;
  return_label: 
#line 2187 
                return;
}


#line 2189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
void qlcnic_sriov_del_vlan_id(struct qlcnic_sriov *sriov, struct qlcnic_vf_info *vf, u16 vlan_id)
{
  int i;
  
#line 2194 
  i = 0;
  
#line 2194 
  goto ldv_54861;
  ldv_54860: 
#line 2195 
  ;
  
#line 2195 
  if ((int)*(vf->sriov_vlans + i) == (int)vlan_id) {
    
#line 2196 
    *(vf->sriov_vlans + i) = (unsigned short)0U;
    
#line 2197 
    vf->num_vlan -= 1;
    
#line 2198 
    goto return_label;
  }
  else ;
  
#line 2194 
  i += 1;
  ldv_54861: 
#line 2195 
  ;
  
#line 2194 
  if ((int)sriov->num_allowed_vlans > i) 
#line 2196 
                                         goto ldv_54860; else 
#line 2199 
                                                              goto ldv_54862;
  ldv_54862: 
#line 2200 
  ;
  return_label: 
#line 2201 
                return;
}


#line 2203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/qlogic/qlcnic/qlcnic_sriov_common.c"
bool qlcnic_sriov_check_any_vlan(struct qlcnic_vf_info *vf)
{
  
#line 2205 
  bool err = (_Bool)0;
  
#line 2207 
  ldv_spin_lock_bh_97(& vf->vlan_list_lock);
  
#line 2209 
  if (vf->num_vlan != 0) 
#line 2210 
                         err = (_Bool)1; else ;
  
#line 2212 
  ldv_spin_unlock_bh_98(& vf->vlan_list_lock);
  
#line 2213 
  return err;
}


#line 503  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void *kcalloc_4(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 506 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 506 
  return tmp;
}


#line 510  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void *kzalloc_7(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 513 
  tmp = ldv_kzalloc(size,flags);
  
#line 513 
  return tmp;
}


#line 726  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_lock_bh_71(spinlock_t *lock)
{
  
#line 730 
  ldv_spin_model_lock((char *)"addr_list_lock_of_net_device");
  
#line 732 
  spin_lock_bh_1(lock);
  
#line 733 
  return;
}


#line 746  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_unlock_bh_73(spinlock_t *lock)
{
  
#line 750 
  ldv_spin_model_unlock((char *)"addr_list_lock_of_net_device");
  
#line 752 
  spin_unlock_bh_1(lock);
  
#line 753 
  return;
}


#line 766  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv___ldv_spin_lock_75_0(spinlock_t *ldv_func_arg1)
{
  
#line 770 
  ldv_spin_model_lock((char *)"lock_of_qlcnic_trans_list");
  
#line 772 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 773 
  return;
}


#line 776  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_unlock_irqrestore_76_0(spinlock_t *lock, unsigned long flags)
{
  
#line 780 
  ldv_spin_model_unlock((char *)"lock_of_qlcnic_trans_list");
  
#line 782 
  spin_unlock_irqrestore_1(lock,flags);
  
#line 783 
  return;
}


#line 786  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv___ldv_spin_lock_77_0(spinlock_t *ldv_func_arg1)
{
  
#line 790 
  ldv_spin_model_lock((char *)"lock_of_qlcnic_trans_list");
  
#line 792 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 793 
  return;
}


#line 796  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_unlock_irqrestore_78_0(spinlock_t *lock, unsigned long flags)
{
  
#line 800 
  ldv_spin_model_unlock((char *)"lock_of_qlcnic_trans_list");
  
#line 802 
  spin_unlock_irqrestore_1(lock,flags);
  
#line 803 
  return;
}


#line 806  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static bool ldv_queue_work_79_0(struct workqueue_struct *wq, struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 810 
  tmp = ldv_emg_queue_work(wq,work);
  
#line 810 
  __retres = tmp != 0;
  
#line 810 
  return __retres;
}


#line 814  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_mutex_lock_80(struct mutex *ldv_func_arg1)
{
  
#line 818 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"send_cmd_lock_of_qlcnic_vf_info");
  
#line 819 
  return;
}


#line 822  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_mutex_unlock_81(struct mutex *ldv_func_arg1)
{
  
#line 826 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"send_cmd_lock_of_qlcnic_vf_info");
  
#line 827 
  return;
}


#line 830  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_lock_82_0(spinlock_t *lock)
{
  
#line 834 
  ldv_spin_model_lock((char *)"lock_of_qlcnic_trans_list");
  
#line 836 
  spin_lock_3(lock);
  
#line 837 
  return;
}


#line 840  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_unlock_83_0(spinlock_t *lock)
{
  
#line 844 
  ldv_spin_model_unlock((char *)"lock_of_qlcnic_trans_list");
  
#line 846 
  spin_unlock_3(lock);
  
#line 847 
  return;
}


#line 850  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_lock_84(spinlock_t *lock)
{
  
#line 854 
  ldv_spin_model_lock((char *)"lock_of_qlcnic_trans_list");
  
#line 856 
  spin_lock_3(lock);
  
#line 857 
  return;
}


#line 860  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_unlock_85_0(spinlock_t *lock)
{
  
#line 864 
  ldv_spin_model_unlock((char *)"lock_of_qlcnic_trans_list");
  
#line 866 
  spin_unlock_3(lock);
  
#line 867 
  return;
}


#line 870  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_lock_86(spinlock_t *lock)
{
  
#line 874 
  ldv_spin_model_lock((char *)"lock_of_qlcnic_trans_list");
  
#line 876 
  spin_lock_3(lock);
  
#line 877 
  return;
}


#line 880  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_unlock_87_0(spinlock_t *lock)
{
  
#line 884 
  ldv_spin_model_unlock((char *)"lock_of_qlcnic_trans_list");
  
#line 886 
  spin_unlock_3(lock);
  
#line 887 
  return;
}


#line 890  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_lock_88_0(spinlock_t *lock)
{
  
#line 894 
  ldv_spin_model_lock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  
#line 896 
  spin_lock_3(lock);
  
#line 897 
  return;
}


#line 900  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_unlock_89_0(spinlock_t *lock)
{
  
#line 904 
  ldv_spin_model_unlock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  
#line 906 
  spin_unlock_3(lock);
  
#line 907 
  return;
}


#line 910  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static bool ldv_queue_work_90(struct workqueue_struct *wq, struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 914 
  tmp = ldv_emg_queue_work(wq,work);
  
#line 914 
  __retres = tmp != 0;
  
#line 914 
  return __retres;
}


#line 918  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_lock_bh_91(spinlock_t *lock)
{
  
#line 922 
  ldv_spin_model_lock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  
#line 924 
  spin_lock_bh_1(lock);
  
#line 925 
  return;
}


#line 928  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_unlock_bh_92(spinlock_t *lock)
{
  
#line 932 
  ldv_spin_model_unlock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  
#line 934 
  spin_unlock_bh_1(lock);
  
#line 935 
  return;
}


#line 938  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_lock_bh_93(spinlock_t *lock)
{
  
#line 942 
  ldv_spin_model_lock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  
#line 944 
  spin_lock_bh_1(lock);
  
#line 945 
  return;
}


#line 948  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_unlock_bh_94(spinlock_t *lock)
{
  
#line 952 
  ldv_spin_model_unlock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  
#line 954 
  spin_unlock_bh_1(lock);
  
#line 955 
  return;
}


#line 958  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_lock_bh_95(spinlock_t *lock)
{
  
#line 962 
  ldv_spin_model_lock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  
#line 964 
  spin_lock_bh_1(lock);
  
#line 965 
  return;
}


#line 968  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_unlock_bh_96(spinlock_t *lock)
{
  
#line 972 
  ldv_spin_model_unlock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  
#line 974 
  spin_unlock_bh_1(lock);
  
#line 975 
  return;
}


#line 978  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_lock_bh_97(spinlock_t *lock)
{
  
#line 982 
  ldv_spin_model_lock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  
#line 984 
  spin_lock_bh_1(lock);
  
#line 985 
  return;
}


#line 988  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/weaver/.tmp_qlcnic_sriov_common.c.aux"
static void ldv_spin_unlock_bh_98(spinlock_t *lock)
{
  
#line 992 
  ldv_spin_model_unlock((char *)"vlan_list_lock_of_qlcnic_vf_info");
  
#line 994 
  spin_unlock_bh_1(lock);
  
#line 995 
  return;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  
#line 23 
  v->counter += i;
  
#line 24 
  return;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  
#line 29 
  v->counter -= i;
  
#line 30 
  return;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  int __retres;
  
#line 35 
  v->counter -= i;
  
#line 36 
  if (v->counter != 0) {
    
#line 37 
    __retres = 0;
    
#line 37 
    goto return_label;
  }
  else ;
  
#line 39 
  __retres = 1;
  return_label: 
#line 39 
                return __retres;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  
#line 45 
  v->counter += 1;
  
#line 46 
  return;
}


#line 49  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  
#line 51 
  v->counter -= 1;
  
#line 52 
  return;
}


#line 55  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  int __retres;
  
#line 57 
  v->counter -= 1;
  
#line 58 
  if (v->counter != 0) {
    
#line 59 
    __retres = 0;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  __retres = 1;
  return_label: 
#line 61 
                return __retres;
}


#line 65  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  int __retres;
  
#line 67 
  v->counter += 1;
  
#line 68 
  if (v->counter != 0) {
    
#line 69 
    __retres = 0;
    
#line 69 
    goto return_label;
  }
  else ;
  
#line 71 
  __retres = 1;
  return_label: 
#line 71 
                return __retres;
}


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  int __retres;
  
#line 77 
  v->counter += i;
  
#line 78 
  __retres = v->counter;
  
#line 78 
  return __retres;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  int __retres;
  
#line 84 
  v->counter += i;
  
#line 85 
  __retres = v->counter < 0;
  
#line 85 
  return __retres;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  int __retres;
  
#line 91 
  *v = (short)((unsigned int)*v + 1U);
  
#line 92 
  __retres = (int)*v;
  
#line 92 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device const *dev);


#line 24 
int ldv_dev_set_drvdata(struct device *dev, void *data);


#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_xmalloc(size_t size);


#line 31 
void *ldv_xzalloc(size_t size);


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
struct ldv_list_element global_list = {.data = (void *)0, .next = (struct ldv_list_element *)0};

#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static ldv_list_ptr ldv_list_create(void *data)
{
  
#line 35 
  ldv_list_ptr list = (struct ldv_list_element *)0;
  
#line 37 
  list = (ldv_list_ptr)ldv_xmalloc(16UL);
  
#line 39 
  list->data = data;
  
#line 40 
  list->next = (struct ldv_list_element *)0;
  
#line 42 
  return list;
}


#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static void ldv_save_pointer(void *data)
{
  ldv_list_ptr element;
  ldv_list_ptr cached;
  
#line 50 
  if (global_list.data == (void *)0) {
    
#line 51 
    element = & global_list;
    
#line 52 
    element->data = data;
  }
  else {
    
#line 54 
    element = ldv_list_create(data);
    
#line 55 
    cached = global_list.next;
    
#line 56 
    global_list.next = element;
    
#line 57 
    element->next = cached;
  }
  
#line 60 
  return;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 30 
  if (dev != (struct device const *)0 && dev->p != (struct device_private *)0) {
    
#line 31 
    __retres = (dev->p)->driver_data;
    
#line 31 
    goto return_label;
  }
  else ;
  
#line 33 
  __retres = (void *)0;
  return_label: 
#line 33 
                return __retres;
}


#line 42  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  int __retres;
  
#line 44 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  
#line 45 
  ldv_save_pointer((void *)dev->p);
  
#line 46 
  (dev->p)->driver_data = data;
  
#line 48 
  __retres = 0;
  
#line 48 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_zalloc(size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  struct spi_master *__retres;
  struct spi_master *master;
  
#line 27 
  master = (struct spi_master *)ldv_zalloc((unsigned long)size + 2192UL);
  
#line 29 
  if (master == (struct spi_master *)0) {
    
#line 30 
    __retres = (struct spi_master *)0;
    
#line 30 
    goto return_label;
  }
  else ;
  
#line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  
#line 34 
  __retres = master;
  return_label: 
#line 34 
                return __retres;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err_or_null(void const *ptr);


#line 29 
void *ldv_err_ptr(long error);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_assume(int);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err(void const *ptr)
{
  long __retres;
  
#line 23 
  __retres = (long)((unsigned long)ptr > 4294967295UL);
  
#line 23 
  return __retres;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  void *__retres;
  
#line 28 
  __VERIFIER_assume(error < 0L);
  
#line 29 
  __retres = (void *)(4294967295L - error);
  
#line 29 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void const *ptr)
{
  long __retres;
  
#line 34 
  __VERIFIER_assume((unsigned long)ptr > 4294967295UL);
  
#line 35 
  __retres = (long)(4294967295UL - (unsigned long)ptr);
  
#line 35 
  return __retres;
}


#line 38  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err_or_null(void const *ptr)
{
  long __retres;
  int tmp_0;
  
#line 40 
  if (ptr == (void const *)0) 
#line 40 
                              tmp_0 = 1;
  else {
    long tmp;
    
#line 40 
    tmp = ldv_is_err(ptr);
    
#line 40 
    if (tmp != 0L) 
#line 40 
                   tmp_0 = 1; else 
#line 40 
                                   tmp_0 = 0;
  }
  
#line 40 
  __retres = (long)tmp_0;
  
#line 40 
  return __retres;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/panic.h"
void ldv_panic(void);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  
#line 23 
  __VERIFIER_assume(0);
  
#line 24 
  return;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void);


#line 42 
void ldv_switch_to_process_context(void);


#line 50 
bool ldv_in_interrupt_context(void);


#line 112 
int ldv_post_init(int init_ret_val);


#line 132 
int ldv_post_probe(int probe_ret_val);


#line 133 
void ldv_check_return_value_probe(int);


#line 141 
int ldv_filter_err_code(int ret_val);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;

#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void)
{
  
#line 30 
  __ldv_in_interrupt_context = (_Bool)1;
  
#line 31 
  return;
}


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_process_context(void)
{
  
#line 36 
  __ldv_in_interrupt_context = (_Bool)0;
  
#line 37 
  return;
}


#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
bool ldv_in_interrupt_context(void)
{
  
#line 41 
  return __ldv_in_interrupt_context;
}


#line 44  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static int ldv_filter_positive_int(int val)
{
  
#line 46 
  __VERIFIER_assume(val <= 0);
  
#line 47 
  return val;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_init(int init_ret_val)
{
  int tmp;
  
#line 56 
  tmp = ldv_filter_positive_int(init_ret_val);
  
#line 56 
  return tmp;
}


#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val)
{
  int tmp;
  
#line 62 
  ldv_check_return_value_probe(probe_ret_val);
  
#line 63 
  tmp = ldv_filter_positive_int(probe_ret_val);
  
#line 63 
  return tmp;
}


#line 67  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val)
{
  int tmp;
  
#line 69 
  tmp = ldv_filter_positive_int(ret_val);
  
#line 69 
  return tmp;
}


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kmalloc(size_t size, gfp_t flags);


#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);


#line 28 
void ldv_check_alloc_flags(gfp_t);


#line 29 
void ldv_after_alloc(void *);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_malloc(size_t size);


#line 24 
void *ldv_calloc(size_t nmemb, size_t size);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 25 
  ldv_check_alloc_flags(flags);
  
#line 26 
  res = ldv_malloc(size);
  
#line 27 
  ldv_after_alloc(res);
  
#line 29 
  return res;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 36 
  ldv_check_alloc_flags(flags);
  
#line 37 
  res = ldv_calloc(n,size);
  
#line 38 
  ldv_after_alloc(res);
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 47 
  ldv_check_alloc_flags(flags);
  
#line 48 
  res = ldv_zalloc(size);
  
#line 49 
  ldv_after_alloc(res);
  
#line 51 
  return res;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 58 
  ldv_check_alloc_flags(flags);
  
#line 59 
  res = ldv_malloc(n * size);
  
#line 60 
  ldv_after_alloc(res);
  
#line 62 
  return res;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void ldv_free(void *s);


#line 35 
void *ldv_malloc_unknown_size(void);


#line 36 
void *ldv_calloc_unknown_size(void);


#line 37 
void *ldv_zalloc_unknown_size(void);


#line 40 
void *ldv_reference_malloc(size_t size);


#line 41 
void *ldv_reference_calloc(size_t nmemb, size_t size);


#line 42 
void *ldv_reference_zalloc(size_t size);


#line 43 
void ldv_reference_free(void *s);


#line 47 
void *ldv_reference_xmalloc(size_t size);


#line 48 
void *ldv_reference_xzalloc(size_t size);


#line 52 
void *ldv_reference_malloc_unknown_size(void);


#line 53 
void *ldv_reference_calloc_unknown_size(void);


#line 54 
void *ldv_reference_zalloc_unknown_size(void);


#line 61 
void *ldv_xmalloc_unknown_size(size_t size);


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  void *res;
  
#line 37 
  res = ldv_reference_malloc(size);
  
#line 38 
  if (res != (void *)0) {
    long tmp;
    
#line 39 
    tmp = ldv_is_err((void const *)res);
    
#line 39 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  void *res;
  
#line 46 
  res = ldv_reference_calloc(nmemb,size);
  
#line 47 
  if (res != (void *)0) {
    long tmp;
    
#line 48 
    tmp = ldv_is_err((void const *)res);
    
#line 48 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 49 
  return res;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  void *res;
  
#line 55 
  res = ldv_reference_zalloc(size);
  
#line 56 
  if (res != (void *)0) {
    long tmp;
    
#line 57 
    tmp = ldv_is_err((void const *)res);
    
#line 57 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 58 
  return res;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  
#line 63 
  ldv_reference_free(s);
  
#line 64 
  return;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 69 
  res = ldv_reference_xmalloc(size);
  
#line 70 
  tmp = ldv_is_err((void const *)res);
  
#line 70 
  __VERIFIER_assume(tmp == 0L);
  
#line 71 
  return res;
}


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 77 
  res = ldv_reference_xzalloc(size);
  
#line 78 
  tmp = ldv_is_err((void const *)res);
  
#line 78 
  __VERIFIER_assume(tmp == 0L);
  
#line 79 
  return res;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  void *res;
  
#line 85 
  res = ldv_reference_malloc_unknown_size();
  
#line 86 
  if (res != (void *)0) {
    long tmp;
    
#line 87 
    tmp = ldv_is_err((void const *)res);
    
#line 87 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 88 
  return res;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  void *res;
  
#line 94 
  res = ldv_reference_calloc_unknown_size();
  
#line 95 
  if (res != (void *)0) {
    long tmp;
    
#line 96 
    tmp = ldv_is_err((void const *)res);
    
#line 96 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  void *res;
  
#line 103 
  res = ldv_reference_zalloc_unknown_size();
  
#line 104 
  if (res != (void *)0) {
    long tmp;
    
#line 105 
    tmp = ldv_is_err((void const *)res);
    
#line 105 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 106 
  return res;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  void *res;
  long tmp;
  
#line 112 
  res = ldv_reference_xmalloc_unknown_size(size);
  
#line 113 
  tmp = ldv_is_err((void const *)res);
  
#line 113 
  __VERIFIER_assume(tmp == 0L);
  
#line 114 
  return res;
}

long __builtin_expect(long exp, long c);


#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_error(void);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
long __builtin_expect(long exp, long c)
{
  
#line 26 
  return exp;
}


#line 35  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  
#line 37 
  __VERIFIER_error();
  
#line 38 
  return;
}


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_long(void);


#line 25 
unsigned int ldv_undef_uint(void);


#line 26 
unsigned long ldv_undef_ulong(void);


#line 27 
unsigned long long ldv_undef_ulonglong(void);


#line 28 
void *ldv_undef_ptr(void);


#line 31 
int ldv_undef_int_positive(void);


#line 34 
int ldv_undef_int_negative(void);


#line 37 
int ldv_undef_int_nonpositive(void);


#line 40 
void *ldv_undef_ptr_non_null(void);


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __VERIFIER_nondet_int(void);


#line 31 
long __VERIFIER_nondet_long(void);


#line 38 
unsigned int __VERIFIER_nondet_uint(void);


#line 41 
unsigned long __VERIFIER_nondet_ulong(void);


#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);


#line 43 
void *__VERIFIER_nondet_pointer(void);


#line 46  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  int tmp;
  
#line 48 
  tmp = __VERIFIER_nondet_int();
  
#line 48 
  return tmp;
}


#line 51  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_long(void)
{
  int __retres;
  long tmp;
  
#line 53 
  tmp = __VERIFIER_nondet_long();
  
#line 53 
  __retres = (int)tmp;
  
#line 53 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  unsigned int tmp;
  
#line 58 
  tmp = __VERIFIER_nondet_uint();
  
#line 58 
  return tmp;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  void *tmp;
  
#line 63 
  tmp = __VERIFIER_nondet_pointer();
  
#line 63 
  return tmp;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  unsigned long tmp;
  
#line 68 
  tmp = __VERIFIER_nondet_ulong();
  
#line 68 
  return tmp;
}


#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  unsigned long long tmp;
  
#line 73 
  tmp = __VERIFIER_nondet_ulonglong();
  
#line 73 
  return tmp;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  
#line 78 
  int ret = ldv_undef_int();
  
#line 80 
  __VERIFIER_assume(ret > 0);
  
#line 82 
  return ret;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  
#line 87 
  int ret = ldv_undef_int();
  
#line 89 
  __VERIFIER_assume(ret < 0);
  
#line 91 
  return ret;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  
#line 96 
  int ret = ldv_undef_int();
  
#line 98 
  __VERIFIER_assume(ret <= 0);
  
#line 100 
  return ret;
}


#line 103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  
#line 105 
  void *ret = ldv_undef_ptr();
  
#line 107 
  __VERIFIER_assume(ret != (void *)0);
  
#line 109 
  return ret;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *external_allocated_data(void);


#line 45 
void *ldv_reference_realloc(void *ptr, size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *malloc(size_t);


#line 24 
void *calloc(size_t, size_t);


#line 25 
void free(void *);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 37 
  tmp = ldv_undef_int();
  
#line 37 
  if (tmp != 0) {
    
#line 39 
    res = malloc(size);
    
#line 40 
    __VERIFIER_assume(res != (void *)0);
    
#line 41 
    __retres = res;
    
#line 41 
    goto return_label;
  }
  else {
    
#line 44 
    __retres = (void *)0;
    
#line 44 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 47  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  void *tmp;
  
#line 49 
  tmp = calloc(nmemb,size);
  
#line 49 
  return tmp;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  void *tmp;
  
#line 54 
  tmp = calloc(1UL,size);
  
#line 54 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  
#line 59 
  free(s);
  
#line 60 
  return;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 66 
  if (ptr != (void *)0 && size == 0UL) {
    
#line 67 
    free(ptr);
    
#line 68 
    __retres = (void *)0;
    
#line 68 
    goto return_label;
  }
  else ;
  
#line 71 
  if (ptr == (void *)0) {
    
#line 72 
    res = malloc(size);
    
#line 73 
    __retres = res;
    
#line 73 
    goto return_label;
  }
  else ;
  
#line 76 
  tmp = ldv_undef_int();
  
#line 76 
  if (tmp != 0) {
    
#line 78 
    res = malloc(size);
    
#line 79 
    __VERIFIER_assume(res != (void *)0);
    
#line 81 
    memcpy(res,(void const *)ptr,size);
    
#line 82 
    free(ptr);
    
#line 84 
    __retres = res;
    
#line 84 
    goto return_label;
  }
  else {
    
#line 87 
    __retres = (void *)0;
    
#line 87 
    goto return_label;
  }
  return_label: 
#line 76 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  void *res;
  
#line 94 
  res = malloc(size);
  
#line 95 
  __VERIFIER_assume(res != (void *)0);
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  void *res;
  
#line 104 
  res = calloc(1UL,size);
  
#line 105 
  __VERIFIER_assume(res != (void *)0);
  
#line 107 
  return res;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 114 
  tmp = ldv_undef_int();
  
#line 114 
  if (tmp != 0) {
    
#line 115 
    res = external_allocated_data();
    
#line 116 
    __VERIFIER_assume(res != (void *)0);
    
#line 117 
    __retres = res;
    
#line 117 
    goto return_label;
  }
  else {
    
#line 120 
    __retres = (void *)0;
    
#line 120 
    goto return_label;
  }
  return_label: 
#line 114 
                return __retres;
}


#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 127 
  tmp = ldv_undef_int();
  
#line 127 
  if (tmp != 0) {
    
#line 128 
    res = external_allocated_data();
    
#line 129 
    memset(res,0,8UL);
    
#line 130 
    __VERIFIER_assume(res != (void *)0);
    
#line 131 
    __retres = res;
    
#line 131 
    goto return_label;
  }
  else {
    
#line 134 
    __retres = (void *)0;
    
#line 134 
    goto return_label;
  }
  return_label: 
#line 127 
                return __retres;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  void *tmp;
  
#line 139 
  tmp = ldv_reference_calloc_unknown_size();
  
#line 139 
  return tmp;
}


#line 142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  void *res;
  
#line 146 
  res = external_allocated_data();
  
#line 147 
  __VERIFIER_assume(res != (void *)0);
  
#line 149 
  return res;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_initialize(void);


#line 97 
void ldv_failed_register_netdev(void);


#line 123 
void ldv_pre_probe(void);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
int pthread_create(pthread_t *, pthread_attr_t const *, void *(*)(void *), void *);


#line 37 
int pthread_join(pthread_t, void **);


#line 122  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
int main(void);


#line 123 
void *ldv_devattr_instance_18(void *arg0);


#line 125 
void ldv_dispatch_register_9_3(struct pci_driver *arg0);


#line 126 
void *ldv_pci_scenario_19(void *arg0);


#line 130 
void ldv_dispatch_register_8_4(struct net_device *arg0);


#line 131 
void *ldv_devattr_instance_14(void *arg0);


#line 133 
void ldv_dispatch_deregister_7_1(struct pci_driver *arg0);


#line 134 
void *ldv_interrupt_scenario_16(void *arg0);


#line 135 
void *ldv_initialization_1(void *arg0);


#line 137 
void ldv_dispatch_deregister_4_1(struct net_device *arg0);


#line 139 
void ldv_dispatch_register_10_3(struct device *arg0, struct device_attribute *arg1);


#line 140 
void ldv_dispatch_irq_deregister_6_1(int arg0);


#line 144 
void ldv_dispatch_irq_register_11_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);


#line 145 
void *ldv_random_allocationless_scenario_15(void *arg0);


#line 146 
void *ldv_devattr_instance_17(void *arg0);


#line 148 
void ldv_dispatch_deregister_12_1(struct device *arg0, struct device_attribute *arg1);


#line 152  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_17;

#line 153  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_14;

#line 154  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_16;

#line 155  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_19;

#line 156  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_15;

#line 157  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_18;

#line 161  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
int main(void)
{
  int __retres;
  
#line 164 
  ldv_initialize();
  
#line 167 
  ldv_initialization_1((void *)0);
  
#line 169 
  __retres = 0;
  
#line 169 
  return __retres;
}


#line 174  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_devattr_instance_18(void *arg0)
{
  void *__retres;
  char *ldv_18_ldv_param_2_4;
  unsigned long ldv_18_ldv_param_3_3;
  char *ldv_18_ldv_param_2_2;
  struct device *ldv_18_device;
  int tmp;
  
#line 177 
  struct device_attribute *ldv_18_devattr = ldv_emg_alias_dev_attr_bridged_mode_3;
  
#line 183 
  struct ldv_struct_devattr_instance_14 *data = (struct ldv_struct_devattr_instance_14 *)arg0;
  
#line 188 
  if (data != (struct ldv_struct_devattr_instance_14 *)0) {
    
#line 189 
    ldv_18_device = data->arg0;
    
#line 190 
    ldv_18_devattr = data->arg1;
    
#line 191 
    ldv_free((void *)data);
  }
  else ;
  
#line 199 
  goto ldv_main_18;
  
#line 201 
  __retres = (void *)0;
  
#line 201 
  goto return_label;
  ldv_main_18: 
#line 204 
  ;
  
#line 207 
  tmp = ldv_undef_int();
  
#line 207 
  switch (tmp) {
    case 1: 
#line 208 
    ;
    
#line 210 
    ldv_18_ldv_param_2_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 215 
    ldv_emg_wrapper_qlcnic_show_bridged_mode_2(ldv_18_device,ldv_18_devattr,ldv_18_ldv_param_2_4);
    
#line 219 
    ldv_free((void *)ldv_18_ldv_param_2_4);
    
#line 226 
    goto ldv_main_18;
    case 2: 
#line 229 
    ;
    
#line 231 
    ldv_18_ldv_param_2_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 236 
    ldv_emg_wrapper_qlcnic_store_bridged_mode_4(ldv_18_device,ldv_18_devattr,ldv_18_ldv_param_2_2,ldv_18_ldv_param_3_3);
    
#line 240 
    ldv_free((void *)ldv_18_ldv_param_2_2);
    
#line 247 
    goto ldv_main_18;
    case 3: 
#line 250 
    ;
    
#line 256 
    __retres = (void *)0;
    
#line 256 
    goto return_label;
    default: 
#line 259 
    ;
    
#line 259 
    __VERIFIER_assume(0);
  }
  
#line 262 
  __retres = (void *)0;
  return_label: 
#line 262 
                return __retres;
}


#line 267  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  int __retres;
  int tmp_0;
  
#line 270 
  struct pci_driver *ldv_9_pci_driver = ldv_emg_alias_qlcnic_driver_2;
  
#line 274 
  tmp_0 = ldv_undef_int();
  
#line 274 
  if (tmp_0 != 0) {
    
#line 276 
    ldv_9_pci_driver = arg0;
    
#line 280 
    ldv_dispatch_register_9_3(ldv_9_pci_driver);
    
#line 284 
    __retres = 0;
    
#line 284 
    goto return_label;
  }
  else {
    int tmp;
    
#line 291 
    tmp = ldv_undef_int_negative();
    
#line 291 
    __retres = tmp;
    
#line 291 
    goto return_label;
  }
  return_label: 
#line 274 
                return __retres;
}


#line 301  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_9_3(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_19 *cf_arg_19;
  int tmp;
  
#line 304 
  tmp = ldv_undef_int();
  
#line 304 
  switch (tmp) {
    case 0: 
#line 305 
    ;
    
#line 306 
    cf_arg_19 = (struct ldv_struct_pci_scenario_19 *)ldv_xmalloc(16UL);
    
#line 307 
    cf_arg_19->arg0 = arg0;
    
#line 308 
    ret = pthread_create(& ldv_thread_19,(pthread_attr_t const *)0,& ldv_pci_scenario_19,(void *)cf_arg_19);
    
#line 309 
    __VERIFIER_assume(ret == 0);
    
#line 310 
    goto ldv_45070;
    default: 
#line 312 
    ;
    
#line 312 
    __VERIFIER_assume(0);
  }
  ldv_45070: 
#line 313 
  ;
  
#line 314 
  return;
}


#line 318  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pci_scenario_19(void *arg0)
{
  void *__retres;
  struct pci_dev *ldv_19_resource_1;
  struct pci_device_id *ldv_19_ldv_param_1_2;
  int ldv_19_ldv_param_1_3;
  struct pm_message ldv_19_resource_0;
  int tmp_2;
  int tmp_3;
  
#line 324 
  struct pci_driver *ldv_19_container = ldv_emg_alias_qlcnic_driver_2;
  
#line 325 
  int ldv_19_ret = ldv_undef_int();
  
#line 328 
  struct ldv_struct_pci_scenario_19 *data = (struct ldv_struct_pci_scenario_19 *)arg0;
  
#line 332 
  ldv_19_ret = ldv_undef_int();
  
#line 335 
  if (data != (struct ldv_struct_pci_scenario_19 *)0) {
    
#line 336 
    ldv_19_container = data->arg0;
    
#line 337 
    ldv_free((void *)data);
  }
  else ;
  
#line 348 
  goto ldv_main_19;
  
#line 350 
  __retres = (void *)0;
  
#line 350 
  goto return_label;
  ldv_main_19: 
#line 353 
  ;
  
#line 356 
  tmp_2 = ldv_undef_int();
  
#line 356 
  if (tmp_2 != 0) {
    int tmp_1;
    
#line 358 
    ldv_19_ldv_param_1_2 = (struct pci_device_id *)ldv_xmalloc_unknown_size(0UL);
    
#line 363 
    ldv_pre_probe();
    
#line 365 
    ldv_19_ret = ldv_emg_wrapper_qlcnic_probe_3(ldv_19_resource_1,ldv_19_ldv_param_1_2);
    
#line 367 
    ldv_19_ret = ldv_post_probe(ldv_19_ret);
    
#line 371 
    ldv_free((void *)ldv_19_ldv_param_1_2);
    
#line 374 
    tmp_1 = ldv_undef_int();
    
#line 374 
    if (tmp_1 != 0) {
      
#line 376 
      __VERIFIER_assume(ldv_19_ret == 0);
      
#line 383 
      goto ldv_call_19;
    }
    else {
      
#line 387 
      __VERIFIER_assume(ldv_19_ret != 0);
      
#line 394 
      goto ldv_main_19;
    }
  }
  else {
    
#line 406 
    __retres = (void *)0;
    
#line 406 
    goto return_label;
  }
  
#line 409 
  __retres = (void *)0;
  
#line 409 
  goto return_label;
  ldv_call_19: 
#line 412 
  ;
  
#line 415 
  tmp_3 = ldv_undef_int();
  
#line 415 
  switch (tmp_3) {
    case 1: 
#line 416 
    ;
    
#line 422 
    qlcnic_pci_sriov_configure(ldv_19_resource_1,ldv_19_ldv_param_1_3);
    
#line 432 
    goto ldv_call_19;
    case 2: 
#line 435 
    ;
    
#line 438 
    ldv_19_ret = ldv_emg_wrapper_qlcnic_suspend_4(ldv_19_resource_1,ldv_19_resource_0);
    
#line 440 
    ldv_19_ret = ldv_filter_err_code(ldv_19_ret);
    
#line 444 
    if (ldv_19_container->suspend_late != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 446 
      ldv_19_ret = (*(ldv_19_container->suspend_late))(ldv_19_resource_1,ldv_19_resource_0);
      
#line 448 
      ldv_19_ret = ldv_filter_err_code(ldv_19_ret);
    }
    else 
#line 450 
         ldv_19_ret = ldv_undef_int();
    
#line 455 
    if (ldv_19_container->resume_early != (int (*)(struct pci_dev *))0) 
      
#line 457 
      (*(ldv_19_container->resume_early))(ldv_19_resource_1); else ;
    
#line 463 
    ldv_emg_wrapper_qlcnic_resume_6(ldv_19_resource_1);
    
#line 470 
    goto ldv_call_19;
    case 3: 
#line 473 
    ;
    
#line 476 
    ldv_emg_wrapper_qlcnic_shutdown_2(ldv_19_resource_1);
    
#line 481 
    ldv_emg_wrapper_qlcnic_remove_5(ldv_19_resource_1);
    
#line 488 
    goto ldv_main_19;
    default: 
#line 491 
    ;
    
#line 491 
    __VERIFIER_assume(0);
  }
  
#line 494 
  __retres = (void *)0;
  return_label: 
#line 494 
                return __retres;
}


#line 499  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_7_1(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_19 *cf_arg_19;
  int tmp;
  
#line 502 
  tmp = ldv_undef_int();
  
#line 502 
  switch (tmp) {
    case 0: 
#line 503 
    ;
    
#line 504 
    ret = pthread_join(ldv_thread_19,(void **)0);
    
#line 505 
    __VERIFIER_assume(ret == 0);
    
#line 506 
    goto ldv_45094;
    default: 
#line 508 
    ;
    
#line 508 
    __VERIFIER_assume(0);
  }
  ldv_45094: 
#line 509 
  ;
  
#line 510 
  return;
}


#line 514  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  _Bool __retres;
  struct work_struct *ldv_13_work_struct;
  int tmp;
  
#line 521 
  tmp = ldv_undef_int();
  
#line 521 
  if (tmp != 0) {
    
#line 523 
    ldv_13_work_struct = arg1;
    
#line 527 
    if (ldv_13_work_struct->func != (void (*)(struct work_struct *))0) 
      
#line 529 
      (*(ldv_13_work_struct->func))(ldv_13_work_struct); else ;
    
#line 534 
    __retres = (_Bool)1;
    
#line 534 
    goto return_label;
  }
  else {
    
#line 541 
    __retres = (_Bool)0;
    
#line 541 
    goto return_label;
  }
  return_label: 
#line 521 
                return __retres;
}


#line 551  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  struct net_device *__retres;
  struct net_device *ldv_3_netdev;
  int tmp_0;
  
#line 558 
  tmp_0 = ldv_undef_int();
  
#line 558 
  if (tmp_0 != 0) {
    
#line 560 
    ldv_3_netdev = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    
#line 564 
    __retres = ldv_3_netdev;
    
#line 564 
    goto return_label;
  }
  else {
    
#line 571 
    __retres = (struct net_device *)0;
    
#line 571 
    goto return_label;
  }
  return_label: 
#line 558 
                return __retres;
}


#line 581  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_device_create_file(struct device *arg0, struct device_attribute *arg1)
{
  int __retres;
  struct device_attribute *ldv_10_devattr;
  struct device *ldv_10_device;
  int tmp_0;
  
#line 589 
  tmp_0 = ldv_undef_int();
  
#line 589 
  if (tmp_0 != 0) {
    
#line 591 
    ldv_10_device = arg0;
    
#line 592 
    ldv_10_devattr = arg1;
    
#line 596 
    ldv_dispatch_register_10_3(ldv_10_device,ldv_10_devattr);
    
#line 600 
    __retres = 0;
    
#line 600 
    goto return_label;
  }
  else {
    int tmp;
    
#line 607 
    tmp = ldv_undef_int_negative();
    
#line 607 
    __retres = tmp;
    
#line 607 
    goto return_label;
  }
  return_label: 
#line 589 
                return __retres;
}


#line 617  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_8_4(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_15 *cf_arg_15;
  int tmp;
  
#line 620 
  tmp = ldv_undef_int();
  
#line 620 
  switch (tmp) {
    case 0: 
#line 621 
    ;
    
#line 622 
    cf_arg_15 = (struct ldv_struct_random_allocationless_scenario_15 *)ldv_xmalloc(16UL);
    
#line 623 
    cf_arg_15->arg0 = arg0;
    
#line 624 
    ret = pthread_create(& ldv_thread_15,(pthread_attr_t const *)0,& ldv_random_allocationless_scenario_15,(void *)cf_arg_15);
    
#line 625 
    __VERIFIER_assume(ret == 0);
    
#line 626 
    goto ldv_45119;
    default: 
#line 628 
    ;
    
#line 628 
    __VERIFIER_assume(0);
  }
  ldv_45119: 
#line 629 
  ;
  
#line 630 
  return;
}


#line 634  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_devattr_instance_14(void *arg0)
{
  void *__retres;
  char *ldv_14_ldv_param_2_4;
  unsigned long ldv_14_ldv_param_3_3;
  char *ldv_14_ldv_param_2_2;
  struct device *ldv_14_device;
  int tmp;
  
#line 637 
  struct device_attribute *ldv_14_devattr = ldv_emg_alias_dev_attr_diag_mode_3;
  
#line 643 
  struct ldv_struct_devattr_instance_14 *data = (struct ldv_struct_devattr_instance_14 *)arg0;
  
#line 648 
  if (data != (struct ldv_struct_devattr_instance_14 *)0) {
    
#line 649 
    ldv_14_device = data->arg0;
    
#line 650 
    ldv_14_devattr = data->arg1;
    
#line 651 
    ldv_free((void *)data);
  }
  else ;
  
#line 659 
  goto ldv_main_14;
  
#line 661 
  __retres = (void *)0;
  
#line 661 
  goto return_label;
  ldv_main_14: 
#line 664 
  ;
  
#line 667 
  tmp = ldv_undef_int();
  
#line 667 
  switch (tmp) {
    case 1: 
#line 668 
    ;
    
#line 670 
    ldv_14_ldv_param_2_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 675 
    ldv_emg_wrapper_qlcnic_show_diag_mode_2(ldv_14_device,ldv_14_devattr,ldv_14_ldv_param_2_4);
    
#line 679 
    ldv_free((void *)ldv_14_ldv_param_2_4);
    
#line 686 
    goto ldv_main_14;
    case 2: 
#line 689 
    ;
    
#line 691 
    ldv_14_ldv_param_2_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 696 
    ldv_emg_wrapper_qlcnic_store_diag_mode_4(ldv_14_device,ldv_14_devattr,ldv_14_ldv_param_2_2,ldv_14_ldv_param_3_3);
    
#line 700 
    ldv_free((void *)ldv_14_ldv_param_2_2);
    
#line 707 
    goto ldv_main_14;
    case 3: 
#line 710 
    ;
    
#line 716 
    __retres = (void *)0;
    
#line 716 
    goto return_label;
    default: 
#line 719 
    ;
    
#line 719 
    __VERIFIER_assume(0);
  }
  
#line 722 
  __retres = (void *)0;
  return_label: 
#line 722 
                return __retres;
}


#line 727  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  int __retres;
  int ldv_11_line;
  void *ldv_11_data;
  enum irqreturn (*ldv_11_callback)(int , void *);
  enum irqreturn (*ldv_11_thread)(int , void *);
  int tmp_0;
  
#line 737 
  tmp_0 = ldv_undef_int();
  
#line 737 
  if (tmp_0 != 0) {
    
#line 739 
    ldv_11_line = (int)arg0;
    
#line 740 
    ldv_11_callback = arg1;
    
#line 741 
    ldv_11_thread = (enum irqreturn (*)(int , void *))0;
    
#line 742 
    ldv_11_data = arg4;
    
#line 746 
    ldv_dispatch_irq_register_11_3(ldv_11_line,ldv_11_callback,ldv_11_thread,ldv_11_data);
    
#line 750 
    __retres = 0;
    
#line 750 
    goto return_label;
  }
  else {
    int tmp;
    
#line 757 
    tmp = ldv_undef_int_negative();
    
#line 757 
    __retres = tmp;
    
#line 757 
    goto return_label;
  }
  return_label: 
#line 737 
                return __retres;
}


#line 767  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_16(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_16_ret_val;
  int ldv_16_line;
  void *ldv_16_data;
  enum irqreturn (*ldv_16_callback)(int , void *);
  enum irqreturn (*ldv_16_thread)(int , void *);
  int tmp_0;
  
#line 776 
  struct ldv_struct_interrupt_scenario_16 *data = (struct ldv_struct_interrupt_scenario_16 *)arg0;
  
#line 781 
  if (data != (struct ldv_struct_interrupt_scenario_16 *)0) {
    
#line 782 
    ldv_16_line = data->arg0;
    
#line 783 
    ldv_16_callback = data->arg1;
    
#line 784 
    ldv_16_thread = data->arg2;
    
#line 785 
    ldv_16_data = data->arg3;
    
#line 786 
    ldv_free((void *)data);
  }
  else ;
  
#line 791 
  if (ldv_16_callback != (enum irqreturn (*)(int , void *))0) {
    
#line 793 
    ldv_switch_to_interrupt_context();
    
#line 795 
    ldv_16_ret_val = (*ldv_16_callback)(ldv_16_line,ldv_16_data);
    
#line 797 
    ldv_switch_to_process_context();
  }
  else {
    int tmp;
    
#line 799 
    tmp = ldv_undef_int();
    
#line 799 
    ldv_16_ret_val = (enum irqreturn)tmp;
  }
  
#line 803 
  tmp_0 = ldv_undef_int();
  
#line 803 
  if (tmp_0 != 0) {
    
#line 805 
    __VERIFIER_assume(ldv_16_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 809 
    if (ldv_16_thread != (enum irqreturn (*)(int , void *))0) 
#line 811 
                                                              (*ldv_16_thread)(ldv_16_line,ldv_16_data); else ;
  }
  else 
#line 818 
       __VERIFIER_assume(ldv_16_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 827 
  __retres = (void *)0;
  
#line 827 
  goto return_label;
  
#line 829 
  __retres = (void *)0;
  return_label: 
#line 829 
                return __retres;
}


#line 834  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_initialization_1(void *arg0)
{
  void *__retres;
  int ldv_1_ret;
  int tmp;
  
#line 841 
  ldv_1_ret = ldv_emg_qlcnic_init_module();
  
#line 842 
  ldv_1_ret = ldv_post_init(ldv_1_ret);
  
#line 845 
  tmp = ldv_undef_int();
  
#line 845 
  if (tmp != 0) {
    
#line 847 
    __VERIFIER_assume(ldv_1_ret != 0);
    
#line 851 
    __retres = (void *)0;
    
#line 851 
    goto return_label;
  }
  else {
    
#line 855 
    __VERIFIER_assume(ldv_1_ret == 0);
    
#line 860 
    ldv_emg_qlcnic_exit_module();
    
#line 864 
    __retres = (void *)0;
    
#line 864 
    goto return_label;
  }
  
#line 867 
  __retres = (void *)0;
  return_label: 
#line 867 
                return __retres;
}


#line 872  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_device_remove_file(struct device *arg0, struct device_attribute *arg1)
{
  struct device_attribute *ldv_12_devattr;
  struct device *ldv_12_device;
  
#line 879 
  ldv_12_device = arg0;
  
#line 880 
  ldv_12_devattr = arg1;
  
#line 884 
  ldv_dispatch_deregister_12_1(ldv_12_device,ldv_12_devattr);
  
#line 888 
  goto return_label;
  return_label: 
#line 890 
                return;
}


#line 895  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_4_1(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_15 *cf_arg_15;
  int tmp;
  
#line 898 
  tmp = ldv_undef_int();
  
#line 898 
  switch (tmp) {
    case 0: 
#line 899 
    ;
    
#line 900 
    ret = pthread_join(ldv_thread_15,(void **)0);
    
#line 901 
    __VERIFIER_assume(ret == 0);
    
#line 902 
    goto ldv_45181;
    default: 
#line 904 
    ;
    
#line 904 
    __VERIFIER_assume(0);
  }
  ldv_45181: 
#line 905 
  ;
  
#line 906 
  return;
}


#line 910  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0)
{
  
#line 913 
  struct pci_driver *ldv_7_pci_driver = ldv_emg_alias_qlcnic_driver_2;
  
#line 916 
  ldv_7_pci_driver = arg0;
  
#line 920 
  ldv_dispatch_deregister_7_1(ldv_7_pci_driver);
  
#line 924 
  goto return_label;
  return_label: 
#line 926 
                return;
}


#line 931  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_10_3(struct device *arg0, struct device_attribute *arg1)
{
  int ret;
  struct ldv_struct_devattr_instance_14 *cf_arg_17;
  struct ldv_struct_devattr_instance_14 *cf_arg_18;
  struct ldv_struct_devattr_instance_14 *cf_arg_14;
  int tmp;
  
#line 936 
  tmp = ldv_undef_int();
  
#line 936 
  switch (tmp) {
    case 0: 
#line 937 
    ;
    
#line 938 
    cf_arg_17 = (struct ldv_struct_devattr_instance_14 *)ldv_xmalloc(24UL);
    
#line 939 
    cf_arg_17->arg0 = arg0;
    
#line 940 
    cf_arg_17->arg1 = arg1;
    
#line 941 
    ret = pthread_create(& ldv_thread_17,(pthread_attr_t const *)0,& ldv_devattr_instance_17,(void *)cf_arg_17);
    
#line 942 
    __VERIFIER_assume(ret == 0);
    
#line 943 
    goto ldv_45196;
    case 1: 
#line 945 
    ;
    
#line 946 
    cf_arg_18 = (struct ldv_struct_devattr_instance_14 *)ldv_xmalloc(24UL);
    
#line 947 
    cf_arg_18->arg0 = arg0;
    
#line 948 
    cf_arg_18->arg1 = arg1;
    
#line 949 
    ret = pthread_create(& ldv_thread_18,(pthread_attr_t const *)0,& ldv_devattr_instance_18,(void *)cf_arg_18);
    
#line 950 
    __VERIFIER_assume(ret == 0);
    
#line 951 
    goto ldv_45196;
    case 2: 
#line 953 
    ;
    
#line 954 
    cf_arg_14 = (struct ldv_struct_devattr_instance_14 *)ldv_xmalloc(24UL);
    
#line 955 
    cf_arg_14->arg0 = arg0;
    
#line 956 
    cf_arg_14->arg1 = arg1;
    
#line 957 
    ret = pthread_create(& ldv_thread_14,(pthread_attr_t const *)0,& ldv_devattr_instance_14,(void *)cf_arg_14);
    
#line 958 
    __VERIFIER_assume(ret == 0);
    
#line 959 
    goto ldv_45196;
    default: 
#line 961 
    ;
    
#line 961 
    __VERIFIER_assume(0);
  }
  ldv_45196: 
#line 962 
  ;
  
#line 963 
  return;
}


#line 967  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_deregister_6_1(int arg0)
{
  int ret;
  struct ldv_struct_free_irq_6 *cf_arg_16;
  int tmp;
  
#line 970 
  tmp = ldv_undef_int();
  
#line 970 
  switch (tmp) {
    case 0: 
#line 971 
    ;
    
#line 972 
    ret = pthread_join(ldv_thread_16,(void **)0);
    
#line 973 
    __VERIFIER_assume(ret == 0);
    
#line 974 
    goto ldv_45206;
    default: 
#line 976 
    ;
    
#line 976 
    __VERIFIER_assume(0);
  }
  ldv_45206: 
#line 977 
  ;
  
#line 978 
  return;
}


#line 982  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_unregister_netdev(struct net_device *arg0)
{
  struct net_device *ldv_4_netdev;
  
#line 988 
  ldv_4_netdev = arg0;
  
#line 993 
  ldv_emg_wrapper_qlcnic_close_2(ldv_4_netdev);
  
#line 997 
  ldv_dispatch_deregister_4_1(ldv_4_netdev);
  
#line 1001 
  goto return_label;
  return_label: 
#line 1003 
                return;
}


#line 1008  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_irq(unsigned int arg0, void *arg1)
{
  int ldv_6_line;
  
#line 1014 
  ldv_6_line = (int)arg0;
  
#line 1018 
  ldv_dispatch_irq_deregister_6_1(ldv_6_line);
  
#line 1022 
  goto return_label;
  return_label: 
#line 1024 
                return;
}


#line 1029  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_queue_delayed_work(struct workqueue_struct *arg0, struct delayed_work *arg1, unsigned long arg2)
{
  _Bool __retres;
  struct work_struct *ldv_5_ldv_param_0_2;
  struct delayed_work *ldv_5_delayed_work;
  int tmp_0;
  
#line 1037 
  tmp_0 = ldv_undef_int();
  
#line 1037 
  if (tmp_0 != 0) {
    
#line 1039 
    ldv_5_delayed_work = arg1;
    
#line 1043 
    ldv_5_ldv_param_0_2 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    
#line 1047 
    if (ldv_5_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      
#line 1049 
      (*(ldv_5_delayed_work->work.func))(ldv_5_ldv_param_0_2); else ;
    
#line 1054 
    ldv_free((void *)ldv_5_ldv_param_0_2);
    
#line 1058 
    __retres = (_Bool)1;
    
#line 1058 
    goto return_label;
  }
  else {
    
#line 1065 
    __retres = (_Bool)0;
    
#line 1065 
    goto return_label;
  }
  return_label: 
#line 1037 
                return __retres;
}


#line 1075  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_register_11_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  int ret;
  struct ldv_struct_interrupt_scenario_16 *cf_arg_16;
  int tmp;
  
#line 1078 
  tmp = ldv_undef_int();
  
#line 1078 
  switch (tmp) {
    case 0: 
#line 1079 
    ;
    
#line 1080 
    cf_arg_16 = (struct ldv_struct_interrupt_scenario_16 *)ldv_xmalloc(32UL);
    
#line 1081 
    cf_arg_16->arg0 = arg0;
    
#line 1082 
    cf_arg_16->arg1 = arg1;
    
#line 1083 
    cf_arg_16->arg2 = arg2;
    
#line 1084 
    cf_arg_16->arg3 = arg3;
    
#line 1085 
    ret = pthread_create(& ldv_thread_16,(pthread_attr_t const *)0,& ldv_interrupt_scenario_16,(void *)cf_arg_16);
    
#line 1086 
    __VERIFIER_assume(ret == 0);
    
#line 1087 
    goto ldv_45237;
    default: 
#line 1089 
    ;
    
#line 1089 
    __VERIFIER_assume(0);
  }
  ldv_45237: 
#line 1090 
  ;
  
#line 1091 
  return;
}


#line 1095  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_random_allocationless_scenario_15(void *arg0)
{
  void *__retres;
  unsigned short ldv_15_ldv_param_2_72;
  int ldv_15_ldv_param_1_40;
  struct ethtool_drvinfo *ldv_15_ldv_param_1_10;
  struct ethtool_pauseparam *ldv_15_ldv_param_1_36;
  int ldv_15_ldv_param_2_28;
  struct ethtool_wolinfo *ldv_15_ldv_param_1_60;
  unsigned short ldv_15_ldv_param_2_43;
  unsigned long long ldv_15_ldv_param_1_55;
  struct net_device *ldv_15_ldv_param_3_58;
  int ldv_15_ldv_param_1_14;
  struct ethtool_cmd *ldv_15_ldv_param_1_52;
  unsigned short ldv_15_ldv_param_5_25;
  struct netlink_callback *ldv_15_ldv_param_1_57;
  unsigned long long *ldv_15_ldv_param_2_8;
  void *ldv_15_ldv_param_2_31;
  struct ethtool_wolinfo *ldv_15_ldv_param_1_26;
  unsigned short ldv_15_ldv_param_1_61;
  void *ldv_15_ldv_param_2_65;
  unsigned short ldv_15_ldv_param_4_24;
  unsigned short ldv_15_ldv_param_2_62;
  struct ifla_vf_info *ldv_15_ldv_param_2_51;
  int ldv_15_ldv_param_1_32;
  unsigned char ldv_15_ldv_param_3_44;
  struct ethtool_channels *ldv_15_ldv_param_1_45;
  int ldv_15_ldv_param_4_59;
  unsigned short ldv_15_ldv_param_2_35;
  unsigned long long ldv_15_ldv_param_1_46;
  int ldv_15_ldv_param_1_37;
  struct ethtool_coalesce *ldv_15_ldv_param_1_63;
  int ldv_15_ldv_param_3_29;
  unsigned int ldv_15_ldv_param_1_39;
  struct net_device *ldv_15_container;
  struct ethtool_dump *ldv_15_ldv_param_1_30;
  struct sk_buff *ldv_15_ldv_param_0_12;
  unsigned long long *ldv_15_ldv_param_2_16;
  struct ethtool_pauseparam *ldv_15_ldv_param_1_70;
  unsigned short ldv_15_ldv_param_1_71;
  struct sk_buff *ldv_15_ldv_param_0_56;
  struct netdev_phys_item_id *ldv_15_ldv_param_1_73;
  void *ldv_15_ldv_param_1_13;
  struct ethtool_test *ldv_15_ldv_param_1_15;
  unsigned short ldv_15_ldv_param_2_49;
  unsigned short ldv_15_ldv_param_1_34;
  struct sk_buff *ldv_15_ldv_param_0_3;
  unsigned char *ldv_15_ldv_param_2_68;
  int ldv_15_ldv_param_1_42;
  struct ethtool_cmd *ldv_15_ldv_param_1_2;
  unsigned int ldv_15_ldv_param_1_67;
  enum ethtool_phys_id_state *ldv_15_ldv_param_1_5;
  struct ethtool_ringparam *ldv_15_ldv_param_1_11;
  unsigned char *ldv_15_ldv_param_2_33;
  unsigned short ldv_15_ldv_param_1_48;
  struct nlattr **ldv_15_ldv_param_1_22;
  int ldv_15_ldv_param_1_27;
  struct ndmsg *ldv_15_ldv_param_0_17;
  struct nlattr **ldv_15_ldv_param_1_18;
  struct ndmsg *ldv_15_ldv_param_0_21;
  unsigned char *ldv_15_ldv_param_3_19;
  struct ethtool_channels *ldv_15_ldv_param_1_47;
  unsigned char *ldv_15_ldv_param_3_23;
  unsigned long long ldv_15_ldv_param_2_4;
  struct ethtool_stats *ldv_15_ldv_param_1_7;
  struct ethtool_eeprom *ldv_15_ldv_param_1_53;
  struct ethtool_dump *ldv_15_ldv_param_1_6;
  struct ethtool_coalesce *ldv_15_ldv_param_1_69;
  int ldv_15_ldv_param_1_9;
  struct ethtool_ringparam *ldv_15_ldv_param_1_41;
  struct ethtool_dump *ldv_15_ldv_param_1_66;
  unsigned short ldv_15_ldv_param_4_20;
  _Bool ldv_15_ldv_param_2_38;
  unsigned char *ldv_15_ldv_param_2_54;
  struct ethtool_regs *ldv_15_ldv_param_1_64;
  int ldv_15_ldv_param_1_50;
  int tmp_39;
  
#line 1172 
  struct ldv_struct_random_allocationless_scenario_15 *data = (struct ldv_struct_random_allocationless_scenario_15 *)arg0;
  
#line 1177 
  if (data != (struct ldv_struct_random_allocationless_scenario_15 *)0) {
    
#line 1178 
    ldv_15_container = data->arg0;
    
#line 1179 
    ldv_free((void *)data);
  }
  else ;
  
#line 1187 
  goto ldv_call_15;
  
#line 1189 
  __retres = (void *)0;
  
#line 1189 
  goto return_label;
  ldv_call_15: 
#line 1192 
  ;
  
#line 1195 
  tmp_39 = ldv_undef_int();
  
#line 1195 
  if (tmp_39 != 0) {
    int tmp_0;
    
#line 1197 
    ldv_15_ldv_param_1_2 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
    
#line 1200 
    tmp_0 = ldv_undef_int();
    
#line 1200 
    switch (tmp_0) {
      case 1: 
#line 1201 
      ;
      
#line 1204 
      ldv_emg_wrapper_qlcnic_set_settings_2(ldv_15_container,ldv_15_ldv_param_1_2);
      
#line 1207 
      goto ldv_45318;
      case 2: 
#line 1209 
      ;
      
#line 1212 
      ldv_emg_wrapper_qlcnic_get_eeprom_len_26(ldv_15_container);
      
#line 1215 
      goto ldv_45318;
      case 3: 
#line 1217 
      ;
      
#line 1219 
      ldv_15_ldv_param_1_73 = (struct netdev_phys_item_id *)ldv_xmalloc_unknown_size(0UL);
      
#line 1224 
      ldv_emg_wrapper_qlcnic_get_phys_port_id_38(ldv_15_container,ldv_15_ldv_param_1_73);
      
#line 1228 
      ldv_free((void *)ldv_15_ldv_param_1_73);
      
#line 1231 
      goto ldv_45318;
      case 4: 
#line 1233 
      ;
      
#line 1239 
      ldv_emg_wrapper_qlcnic_vlan_rx_del_42(ldv_15_container,(unsigned short)((int)ldv_15_ldv_param_1_71),(unsigned short)((int)ldv_15_ldv_param_2_72));
      
#line 1245 
      goto ldv_45318;
      case 5: 
#line 1247 
      ;
      
#line 1249 
      ldv_15_ldv_param_1_70 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1254 
      ldv_emg_wrapper_qlcnic_set_pauseparam_29(ldv_15_container,ldv_15_ldv_param_1_70);
      
#line 1258 
      ldv_free((void *)ldv_15_ldv_param_1_70);
      
#line 1261 
      goto ldv_45318;
      case 6: 
#line 1263 
      ;
      
#line 1265 
      ldv_15_ldv_param_1_69 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 1270 
      ldv_emg_wrapper_qlcnic_set_intr_coalesce_41(ldv_15_container,ldv_15_ldv_param_1_69);
      
#line 1274 
      ldv_free((void *)ldv_15_ldv_param_1_69);
      
#line 1277 
      goto ldv_45318;
      case 7: 
#line 1279 
      ;
      
#line 1282 
      ldv_emg_wrapper_qlcnic_get_regs_len_40(ldv_15_container);
      
#line 1285 
      goto ldv_45318;
      case 8: 
#line 1287 
      ;
      
#line 1289 
      ldv_15_ldv_param_2_68 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1294 
      ldv_emg_wrapper_qlcnic_get_strings_20(ldv_15_container,ldv_15_ldv_param_1_67,ldv_15_ldv_param_2_68);
      
#line 1298 
      ldv_free((void *)ldv_15_ldv_param_2_68);
      
#line 1301 
      goto ldv_45318;
      case 9: 
#line 1303 
      ;
      
#line 1306 
      ldv_emg_wrapper_qlcnic_poll_controller_43(ldv_15_container);
      
#line 1309 
      goto ldv_45318;
      case 10: 
#line 1311 
      ;
      
#line 1313 
      ldv_15_ldv_param_1_66 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
      
#line 1318 
      ldv_emg_wrapper_qlcnic_get_dump_flag_37(ldv_15_container,ldv_15_ldv_param_1_66);
      
#line 1322 
      ldv_free((void *)ldv_15_ldv_param_1_66);
      
#line 1325 
      goto ldv_45318;
      case 11: 
#line 1327 
      ;
      
#line 1330 
      ldv_emg_wrapper_qlcnic_get_eeprom_len_26(ldv_15_container);
      
#line 1333 
      goto ldv_45318;
      case 12: 
#line 1335 
      ;
      
#line 1338 
      ldv_emg_wrapper_qlcnic_tx_timeout_10(ldv_15_container);
      
#line 1341 
      goto ldv_45318;
      case 13: 
#line 1343 
      ;
      
#line 1345 
      ldv_15_ldv_param_1_64 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
      
#line 1346 
      ldv_15_ldv_param_2_65 = ldv_xmalloc_unknown_size(0UL);
      
#line 1351 
      ldv_emg_wrapper_qlcnic_get_regs_36(ldv_15_container,ldv_15_ldv_param_1_64,ldv_15_ldv_param_2_65);
      
#line 1355 
      ldv_free((void *)ldv_15_ldv_param_1_64);
      
#line 1356 
      ldv_free(ldv_15_ldv_param_2_65);
      
#line 1359 
      goto ldv_45318;
      case 14: 
#line 1361 
      ;
      
#line 1364 
      ldv_emg_wrapper_qlcnic_get_regs_len_40(ldv_15_container);
      
#line 1367 
      goto ldv_45318;
      case 15: 
#line 1369 
      ;
      
#line 1371 
      ldv_15_ldv_param_1_63 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 1376 
      ldv_emg_wrapper_qlcnic_get_intr_coalesce_34(ldv_15_container,ldv_15_ldv_param_1_63);
      
#line 1380 
      ldv_free((void *)ldv_15_ldv_param_1_63);
      
#line 1383 
      goto ldv_45318;
      case 16: 
#line 1385 
      ;
      
#line 1391 
      ldv_emg_wrapper_qlcnic_vlan_rx_add_33(ldv_15_container,(unsigned short)((int)ldv_15_ldv_param_1_61),(unsigned short)((int)ldv_15_ldv_param_2_62));
      
#line 1397 
      goto ldv_45318;
      case 17: 
#line 1399 
      ;
      
#line 1401 
      ldv_15_ldv_param_1_60 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1406 
      ldv_emg_wrapper_qlcnic_get_wol_32(ldv_15_container,ldv_15_ldv_param_1_60);
      
#line 1410 
      ldv_free((void *)ldv_15_ldv_param_1_60);
      
#line 1413 
      goto ldv_45318;
      case 18: 
#line 1415 
      ;
      
#line 1417 
      ldv_15_ldv_param_1_57 = (struct netlink_callback *)ldv_xmalloc_unknown_size(0UL);
      
#line 1418 
      ldv_15_ldv_param_3_58 = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
      
#line 1419 
      ldv_15_ldv_param_0_56 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 1424 
      ldv_emg_wrapper_qlcnic_fdb_dump_31(ldv_15_ldv_param_0_56,ldv_15_ldv_param_1_57,ldv_15_container,ldv_15_ldv_param_3_58,ldv_15_ldv_param_4_59);
      
#line 1428 
      ldv_free((void *)ldv_15_ldv_param_1_57);
      
#line 1429 
      ldv_free((void *)ldv_15_ldv_param_3_58);
      
#line 1430 
      ldv_free((void *)ldv_15_ldv_param_0_56);
      
#line 1433 
      goto ldv_45318;
      case 19: 
#line 1435 
      ;
      
#line 1441 
      qlcnic_set_features(ldv_15_container,ldv_15_ldv_param_1_55);
      
#line 1447 
      goto ldv_45318;
      case 20: 
#line 1449 
      ;
      
#line 1451 
      ldv_15_ldv_param_2_54 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1452 
      ldv_15_ldv_param_1_53 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
      
#line 1457 
      ldv_emg_wrapper_qlcnic_get_eeprom_30(ldv_15_container,ldv_15_ldv_param_1_53,ldv_15_ldv_param_2_54);
      
#line 1461 
      ldv_free((void *)ldv_15_ldv_param_2_54);
      
#line 1462 
      ldv_free((void *)ldv_15_ldv_param_1_53);
      
#line 1465 
      goto ldv_45318;
      case 21: 
#line 1467 
      ;
      
#line 1469 
      ldv_15_ldv_param_1_52 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
      
#line 1474 
      ldv_emg_wrapper_qlcnic_get_settings_28(ldv_15_container,ldv_15_ldv_param_1_52);
      
#line 1478 
      ldv_free((void *)ldv_15_ldv_param_1_52);
      
#line 1481 
      goto ldv_45318;
      case 22: 
#line 1483 
      ;
      
#line 1485 
      ldv_15_ldv_param_2_51 = (struct ifla_vf_info *)ldv_xmalloc_unknown_size(0UL);
      
#line 1490 
      qlcnic_sriov_get_vf_config(ldv_15_container,ldv_15_ldv_param_1_50,ldv_15_ldv_param_2_51);
      
#line 1494 
      ldv_free((void *)ldv_15_ldv_param_2_51);
      
#line 1497 
      goto ldv_45318;
      case 23: 
#line 1499 
      ;
      
#line 1505 
      ldv_emg_wrapper_qlcnic_add_vxlan_port_27(ldv_15_container,(unsigned short)((int)ldv_15_ldv_param_1_48),(unsigned short)((int)ldv_15_ldv_param_2_49));
      
#line 1511 
      goto ldv_45318;
      case 24: 
#line 1513 
      ;
      
#line 1515 
      ldv_15_ldv_param_1_47 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
      
#line 1520 
      ldv_emg_wrapper_qlcnic_set_channels_25(ldv_15_container,ldv_15_ldv_param_1_47);
      
#line 1524 
      ldv_free((void *)ldv_15_ldv_param_1_47);
      
#line 1527 
      goto ldv_45318;
      case 25: 
#line 1529 
      ;
      
#line 1535 
      qlcnic_fix_features(ldv_15_container,ldv_15_ldv_param_1_46);
      
#line 1541 
      goto ldv_45318;
      case 26: 
#line 1543 
      ;
      
#line 1545 
      ldv_15_ldv_param_1_45 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
      
#line 1550 
      ldv_emg_wrapper_qlcnic_get_channels_24(ldv_15_container,ldv_15_ldv_param_1_45);
      
#line 1554 
      ldv_free((void *)ldv_15_ldv_param_1_45);
      
#line 1557 
      goto ldv_45318;
      case 27: 
#line 1559 
      ;
      
#line 1565 
      qlcnic_sriov_set_vf_vlan(ldv_15_container,ldv_15_ldv_param_1_42,(unsigned short)((int)ldv_15_ldv_param_2_43),(unsigned char)((int)ldv_15_ldv_param_3_44));
      
#line 1571 
      goto ldv_45318;
      case 28: 
#line 1573 
      ;
      
#line 1576 
      (*ldv_emg_alias_eth_validate_addr_23)(ldv_15_container);
      
#line 1579 
      goto ldv_45318;
      case 29: 
#line 1581 
      ;
      
#line 1583 
      ldv_15_ldv_param_1_41 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1588 
      ldv_emg_wrapper_qlcnic_get_ringparam_22(ldv_15_container,ldv_15_ldv_param_1_41);
      
#line 1592 
      ldv_free((void *)ldv_15_ldv_param_1_41);
      
#line 1595 
      goto ldv_45318;
      case 30: 
#line 1597 
      ;
      
#line 1603 
      ldv_emg_wrapper_qlcnic_get_sset_count_21(ldv_15_container,ldv_15_ldv_param_1_40);
      
#line 1609 
      goto ldv_45318;
      case 31: 
#line 1611 
      ;
      
#line 1617 
      ldv_emg_wrapper_qlcnic_set_msglevel_39(ldv_15_container,ldv_15_ldv_param_1_39);
      
#line 1623 
      goto ldv_45318;
      case 32: 
#line 1625 
      ;
      
#line 1628 
      (*ldv_emg_alias_ethtool_op_get_link_19)(ldv_15_container);
      
#line 1631 
      goto ldv_45318;
      case 33: 
#line 1633 
      ;
      
#line 1639 
      qlcnic_sriov_set_vf_spoofchk(ldv_15_container,ldv_15_ldv_param_1_37,(_Bool)((bool)((int)ldv_15_ldv_param_2_38) != 0));
      
#line 1645 
      goto ldv_45318;
      case 34: 
#line 1647 
      ;
      
#line 1649 
      ldv_15_ldv_param_1_36 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1654 
      ldv_emg_wrapper_qlcnic_get_pauseparam_18(ldv_15_container,ldv_15_ldv_param_1_36);
      
#line 1658 
      ldv_free((void *)ldv_15_ldv_param_1_36);
      
#line 1661 
      goto ldv_45318;
      case 35: 
#line 1663 
      ;
      
#line 1666 
      qlcnic_set_multi(ldv_15_container);
      
#line 1669 
      goto ldv_45318;
      case 36: 
#line 1671 
      ;
      
#line 1677 
      ldv_emg_wrapper_qlcnic_del_vxlan_port_17(ldv_15_container,(unsigned short)((int)ldv_15_ldv_param_1_34),(unsigned short)((int)ldv_15_ldv_param_2_35));
      
#line 1683 
      goto ldv_45318;
      case 37: 
#line 1685 
      ;
      
#line 1687 
      ldv_15_ldv_param_2_33 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1692 
      qlcnic_sriov_set_vf_mac(ldv_15_container,ldv_15_ldv_param_1_32,ldv_15_ldv_param_2_33);
      
#line 1696 
      ldv_free((void *)ldv_15_ldv_param_2_33);
      
#line 1699 
      goto ldv_45318;
      case 38: 
#line 1701 
      ;
      
#line 1704 
      ldv_emg_wrapper_qlcnic_get_stats_16(ldv_15_container);
      
#line 1707 
      goto ldv_45318;
      case 39: 
#line 1709 
      ;
      
#line 1711 
      ldv_15_ldv_param_1_30 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
      
#line 1712 
      ldv_15_ldv_param_2_31 = ldv_xmalloc_unknown_size(0UL);
      
#line 1717 
      ldv_emg_wrapper_qlcnic_get_dump_data_15(ldv_15_container,ldv_15_ldv_param_1_30,ldv_15_ldv_param_2_31);
      
#line 1721 
      ldv_free((void *)ldv_15_ldv_param_1_30);
      
#line 1722 
      ldv_free(ldv_15_ldv_param_2_31);
      
#line 1725 
      goto ldv_45318;
      case 40: 
#line 1727 
      ;
      
#line 1733 
      qlcnic_sriov_set_vf_tx_rate(ldv_15_container,ldv_15_ldv_param_1_27,ldv_15_ldv_param_2_28,ldv_15_ldv_param_3_29);
      
#line 1739 
      goto ldv_45318;
      case 41: 
#line 1741 
      ;
      
#line 1743 
      ldv_15_ldv_param_1_26 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1748 
      ldv_emg_wrapper_qlcnic_set_wol_14(ldv_15_container,ldv_15_ldv_param_1_26);
      
#line 1752 
      ldv_free((void *)ldv_15_ldv_param_1_26);
      
#line 1755 
      goto ldv_45318;
      case 42: 
#line 1757 
      ;
      
#line 1759 
      ldv_15_ldv_param_3_23 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1760 
      ldv_15_ldv_param_1_22 = (struct nlattr **)ldv_xmalloc_unknown_size(0UL);
      
#line 1761 
      ldv_15_ldv_param_0_21 = (struct ndmsg *)ldv_xmalloc_unknown_size(0UL);
      
#line 1766 
      ldv_emg_wrapper_qlcnic_fdb_add_13(ldv_15_ldv_param_0_21,ldv_15_ldv_param_1_22,ldv_15_container,ldv_15_ldv_param_3_23,(unsigned short)((int)ldv_15_ldv_param_4_24),(unsigned short)((int)ldv_15_ldv_param_5_25));
      
#line 1770 
      ldv_free((void *)ldv_15_ldv_param_3_23);
      
#line 1771 
      ldv_free((void *)ldv_15_ldv_param_1_22);
      
#line 1772 
      ldv_free((void *)ldv_15_ldv_param_0_21);
      
#line 1775 
      goto ldv_45318;
      case 43: 
#line 1777 
      ;
      
#line 1779 
      ldv_15_ldv_param_1_18 = (struct nlattr **)ldv_xmalloc_unknown_size(0UL);
      
#line 1780 
      ldv_15_ldv_param_3_19 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1781 
      ldv_15_ldv_param_0_17 = (struct ndmsg *)ldv_xmalloc_unknown_size(0UL);
      
#line 1786 
      ldv_emg_wrapper_qlcnic_fdb_del_12(ldv_15_ldv_param_0_17,ldv_15_ldv_param_1_18,ldv_15_container,ldv_15_ldv_param_3_19,(unsigned short)((int)ldv_15_ldv_param_4_20));
      
#line 1790 
      ldv_free((void *)ldv_15_ldv_param_1_18);
      
#line 1791 
      ldv_free((void *)ldv_15_ldv_param_3_19);
      
#line 1792 
      ldv_free((void *)ldv_15_ldv_param_0_17);
      
#line 1795 
      goto ldv_45318;
      case 44: 
#line 1797 
      ;
      
#line 1799 
      ldv_15_ldv_param_1_15 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
      
#line 1800 
      ldv_15_ldv_param_2_16 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1805 
      ldv_emg_wrapper_qlcnic_diag_test_11(ldv_15_container,ldv_15_ldv_param_1_15,ldv_15_ldv_param_2_16);
      
#line 1809 
      ldv_free((void *)ldv_15_ldv_param_1_15);
      
#line 1810 
      ldv_free((void *)ldv_15_ldv_param_2_16);
      
#line 1813 
      goto ldv_45318;
      case 45: 
#line 1815 
      ;
      
#line 1821 
      ldv_emg_wrapper_qlcnic_get_sset_count_21(ldv_15_container,ldv_15_ldv_param_1_14);
      
#line 1827 
      goto ldv_45318;
      case 46: 
#line 1829 
      ;
      
#line 1831 
      ldv_15_ldv_param_1_13 = ldv_xmalloc_unknown_size(0UL);
      
#line 1836 
      ldv_emg_wrapper_qlcnic_set_mac_9(ldv_15_container,ldv_15_ldv_param_1_13);
      
#line 1840 
      ldv_free(ldv_15_ldv_param_1_13);
      
#line 1843 
      goto ldv_45318;
      case 47: 
#line 1845 
      ;
      
#line 1847 
      ldv_15_ldv_param_0_12 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 1852 
      qlcnic_xmit_frame(ldv_15_ldv_param_0_12,ldv_15_container);
      
#line 1856 
      ldv_free((void *)ldv_15_ldv_param_0_12);
      
#line 1859 
      goto ldv_45318;
      case 48: 
#line 1861 
      ;
      
#line 1864 
      ldv_emg_wrapper_qlcnic_get_msglevel_8(ldv_15_container);
      
#line 1867 
      goto ldv_45318;
      case 49: 
#line 1869 
      ;
      
#line 1871 
      ldv_15_ldv_param_1_11 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1876 
      ldv_emg_wrapper_qlcnic_set_ringparam_7(ldv_15_container,ldv_15_ldv_param_1_11);
      
#line 1880 
      ldv_free((void *)ldv_15_ldv_param_1_11);
      
#line 1883 
      goto ldv_45318;
      case 50: 
#line 1885 
      ;
      
#line 1887 
      ldv_15_ldv_param_1_10 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1892 
      ldv_emg_wrapper_qlcnic_get_drvinfo_6(ldv_15_container,ldv_15_ldv_param_1_10);
      
#line 1896 
      ldv_free((void *)ldv_15_ldv_param_1_10);
      
#line 1899 
      goto ldv_45318;
      case 51: 
#line 1901 
      ;
      
#line 1907 
      qlcnic_change_mtu(ldv_15_container,ldv_15_ldv_param_1_9);
      
#line 1913 
      goto ldv_45318;
      case 52: 
#line 1915 
      ;
      
#line 1917 
      ldv_15_ldv_param_2_8 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1918 
      ldv_15_ldv_param_1_7 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
      
#line 1923 
      ldv_emg_wrapper_qlcnic_get_ethtool_stats_5(ldv_15_container,ldv_15_ldv_param_1_7,ldv_15_ldv_param_2_8);
      
#line 1927 
      ldv_free((void *)ldv_15_ldv_param_2_8);
      
#line 1928 
      ldv_free((void *)ldv_15_ldv_param_1_7);
      
#line 1931 
      goto ldv_45318;
      case 53: 
#line 1933 
      ;
      
#line 1935 
      ldv_15_ldv_param_1_6 = (struct ethtool_dump *)ldv_xmalloc_unknown_size(0UL);
      
#line 1940 
      ldv_emg_wrapper_qlcnic_set_dump_4(ldv_15_container,ldv_15_ldv_param_1_6);
      
#line 1944 
      ldv_free((void *)ldv_15_ldv_param_1_6);
      
#line 1947 
      goto ldv_45318;
      case 54: 
#line 1949 
      ;
      
#line 1951 
      ldv_15_ldv_param_1_5 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
      
#line 1956 
      ldv_emg_wrapper_qlcnic_set_led_3(ldv_15_container,*ldv_15_ldv_param_1_5);
      
#line 1960 
      ldv_free((void *)ldv_15_ldv_param_1_5);
      
#line 1963 
      goto ldv_45318;
      case 55: 
#line 1965 
      ;
      
#line 1967 
      ldv_15_ldv_param_0_3 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 1972 
      ldv_emg_wrapper_qlcnic_features_check_35(ldv_15_ldv_param_0_3,ldv_15_container,ldv_15_ldv_param_2_4);
      
#line 1976 
      ldv_free((void *)ldv_15_ldv_param_0_3);
      
#line 1979 
      goto ldv_45318;
      default: 
#line 1981 
      ;
      
#line 1981 
      __VERIFIER_assume(0);
    }
    ldv_45318: 
#line 1984 
    ;
    
#line 1984 
    ldv_free((void *)ldv_15_ldv_param_1_2);
    
#line 1991 
    goto ldv_call_15;
  }
  else {
    
#line 1999 
    __retres = (void *)0;
    
#line 1999 
    goto return_label;
  }
  
#line 2002 
  __retres = (void *)0;
  return_label: 
#line 2002 
                return __retres;
}


#line 2007  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_devattr_instance_17(void *arg0)
{
  void *__retres;
  char *ldv_17_ldv_param_2_4;
  unsigned long ldv_17_ldv_param_3_3;
  char *ldv_17_ldv_param_2_2;
  struct device *ldv_17_device;
  int tmp;
  
#line 2010 
  struct device_attribute *ldv_17_devattr = ldv_emg_alias_dev_attr_beacon_3;
  
#line 2016 
  struct ldv_struct_devattr_instance_14 *data = (struct ldv_struct_devattr_instance_14 *)arg0;
  
#line 2021 
  if (data != (struct ldv_struct_devattr_instance_14 *)0) {
    
#line 2022 
    ldv_17_device = data->arg0;
    
#line 2023 
    ldv_17_devattr = data->arg1;
    
#line 2024 
    ldv_free((void *)data);
  }
  else ;
  
#line 2032 
  goto ldv_main_17;
  
#line 2034 
  __retres = (void *)0;
  
#line 2034 
  goto return_label;
  ldv_main_17: 
#line 2037 
  ;
  
#line 2040 
  tmp = ldv_undef_int();
  
#line 2040 
  switch (tmp) {
    case 1: 
#line 2041 
    ;
    
#line 2043 
    ldv_17_ldv_param_2_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 2048 
    ldv_emg_wrapper_qlcnic_show_beacon_2(ldv_17_device,ldv_17_devattr,ldv_17_ldv_param_2_4);
    
#line 2052 
    ldv_free((void *)ldv_17_ldv_param_2_4);
    
#line 2059 
    goto ldv_main_17;
    case 2: 
#line 2062 
    ;
    
#line 2064 
    ldv_17_ldv_param_2_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 2069 
    ldv_emg_wrapper_qlcnic_store_beacon_4(ldv_17_device,ldv_17_devattr,ldv_17_ldv_param_2_2,ldv_17_ldv_param_3_3);
    
#line 2073 
    ldv_free((void *)ldv_17_ldv_param_2_2);
    
#line 2080 
    goto ldv_main_17;
    case 3: 
#line 2083 
    ;
    
#line 2089 
    __retres = (void *)0;
    
#line 2089 
    goto return_label;
    default: 
#line 2092 
    ;
    
#line 2092 
    __VERIFIER_assume(0);
  }
  
#line 2095 
  __retres = (void *)0;
  return_label: 
#line 2095 
                return __retres;
}


#line 2100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_netdev(struct net_device *arg0)
{
  struct net_device *ldv_2_netdev;
  
#line 2106 
  ldv_2_netdev = arg0;
  
#line 2107 
  ldv_free((void *)ldv_2_netdev);
  
#line 2111 
  goto return_label;
  return_label: 
#line 2113 
                return;
}


#line 2118  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_12_1(struct device *arg0, struct device_attribute *arg1)
{
  int ret;
  struct ldv_struct_devattr_instance_14 *cf_arg_17;
  struct ldv_struct_devattr_instance_14 *cf_arg_18;
  struct ldv_struct_devattr_instance_14 *cf_arg_14;
  int tmp;
  
#line 2123 
  tmp = ldv_undef_int();
  
#line 2123 
  switch (tmp) {
    case 0: 
#line 2124 
    ;
    
#line 2125 
    ret = pthread_join(ldv_thread_17,(void **)0);
    
#line 2126 
    __VERIFIER_assume(ret == 0);
    
#line 2127 
    goto ldv_45401;
    case 1: 
#line 2129 
    ;
    
#line 2130 
    ret = pthread_join(ldv_thread_18,(void **)0);
    
#line 2131 
    __VERIFIER_assume(ret == 0);
    
#line 2132 
    goto ldv_45401;
    case 2: 
#line 2134 
    ;
    
#line 2135 
    ret = pthread_join(ldv_thread_14,(void **)0);
    
#line 2136 
    __VERIFIER_assume(ret == 0);
    
#line 2137 
    goto ldv_45401;
    default: 
#line 2139 
    ;
    
#line 2139 
    __VERIFIER_assume(0);
  }
  ldv_45401: 
#line 2140 
  ;
  
#line 2141 
  return;
}


#line 2145  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/qlogic/qlcnic/qlcnic.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_register_netdev(struct net_device *arg0)
{
  int __retres;
  struct net_device *ldv_8_netdev;
  int tmp_3;
  
#line 2149 
  int ldv_8_ret = ldv_undef_int();
  
#line 2152 
  ldv_8_ret = ldv_undef_int();
  
#line 2155 
  tmp_3 = ldv_undef_int();
  
#line 2155 
  if (tmp_3 != 0) {
    int tmp_1;
    
#line 2157 
    ldv_8_netdev = arg0;
    
#line 2162 
    ldv_8_ret = ldv_emg_wrapper_qlcnic_open_2(ldv_8_netdev);
    
#line 2165 
    tmp_1 = ldv_undef_int();
    
#line 2165 
    if (tmp_1 != 0) {
      
#line 2167 
      __VERIFIER_assume(ldv_8_ret == 0);
      
#line 2171 
      ldv_dispatch_register_8_4(ldv_8_netdev);
      
#line 2175 
      __retres = 0;
      
#line 2175 
      goto return_label;
    }
    else {
      int tmp_0;
      
#line 2182 
      __VERIFIER_assume(ldv_8_ret != 0);
      
#line 2183 
      ldv_failed_register_netdev();
      
#line 2184 
      tmp_0 = ldv_undef_int_negative();
      
#line 2184 
      __retres = tmp_0;
      
#line 2184 
      goto return_label;
    }
  }
  else {
    int tmp_2;
    
#line 2192 
    ldv_failed_register_netdev();
    
#line 2193 
    tmp_2 = ldv_undef_int_negative();
    
#line 2193 
    __retres = tmp_2;
    
#line 2193 
    goto return_label;
  }
  return_label: 
#line 2155 
                return __retres;
}


