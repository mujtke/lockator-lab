/* Generated by Frama-C */

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef signed char s8;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned char u8;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned short u16;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef int s32;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned int u32;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef long long s64;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __le16;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __be16;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __le32;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __be32;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __wsum;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 __kernel_dev_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_dev_t dev_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned short umode_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_pid_t pid_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef _Bool bool;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_uid32_t uid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_gid32_t gid_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_loff_t loff_t;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_size_t size_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_time_t time_t;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __s32 int32_t;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u8 uint8_t;

#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 uint32_t;

#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u64 uint64_t;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long sector_t;

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long blkcnt_t;

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 dma_addr_t;

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int gfp_t;

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int fmode_t;

#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int oom_flags_t;

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 phys_addr_t;

#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef phys_addr_t resource_size_t;

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};

#line 188 
struct hlist_node;

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
};

#line 14  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
struct kernel_symbol {
   unsigned long value ;
   char const *name ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
struct module;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_9 {
   unsigned int a ;
   unsigned int b ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_10 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base1 : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) type : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) s : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) dpl : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) p : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) limit : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) avl : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) g : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base2 : 8 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
union __anonunion_8 {
   struct __anonstruct_9 __anonCompField___anonunion_8_4 ;
   struct __anonstruct_10 __anonCompField___anonunion_8_5 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_8 __anonCompField_desc_struct_6 ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pteval_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_11 {
   pteval_t pte ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_11 pte_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_12 {
   pgdval_t pgd ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_12 pgd_t;

#line 361 
struct page;

#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;

#line 372 
struct file;

#line 385 
struct seq_file;

#line 423 
struct thread_struct;

#line 425 
struct mm_struct;

#line 426 
struct task_struct;

#line 427 
struct cpumask;

#line 428  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
struct paravirt_callee_save {
   void *func ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/paravirt_types.h"
struct pv_irq_ops {
   struct paravirt_callee_save save_fl ;
   struct paravirt_callee_save restore_fl ;
   struct paravirt_callee_save irq_disable ;
   struct paravirt_callee_save irq_enable ;
   void (*safe_halt)(void) ;
   void (*halt)(void) ;
   void (*adjust_exception_frame)(void) ;
};

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/spinlock_types.h"
struct qspinlock {
   atomic_t val ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
struct qrwlock {
   atomic_t cnts ;
   arch_spinlock_t lock ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/init.h"
typedef void (*ctor_fn_t)(void);

#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct _ddebug {
   char const *modname ;
   char const *function ;
   char const *filename ;
   char const *format ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))) lineno : 18 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) flags : 8 ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
struct device;

#line 54 
struct net_device;

#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct file_operations;

#line 432 
struct completion;

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
enum system_states {
    SYSTEM_BOOTING = 0,
    SYSTEM_RUNNING = 1,
    SYSTEM_HALT = 2,
    SYSTEM_POWER_OFF = 3,
    SYSTEM_RESTART = 4
};

#line 555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct timespec;

#line 103 
struct compat_timespec;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_futex_16 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_nanosleep_17 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};

#line 104 
struct pollfd;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_poll_18 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
union __anonunion_15 {
   struct __anonstruct_futex_16 futex ;
   struct __anonstruct_nanosleep_17 nanosleep ;
   struct __anonstruct_poll_18 poll ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_15 __anonCompField_restart_block_7 ;
};

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
union __anonunion_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_19 __anonCompField_math_emu_info_8 ;
};

#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[128U] ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/special_insns.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_29 {
   u64 rip ;
   u64 rdp ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_30 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_28 {
   struct __anonstruct_29 __anonCompField___anonunion_28_12 ;
   struct __anonstruct_30 __anonCompField___anonunion_28_13 ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_31 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_28 __anonCompField_fxregs_state_14 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_31 __anonCompField_fxregs_state_15 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 __reserved[464U] ;
};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned char fpstate_active ;
   unsigned char fpregs_active ;
   unsigned char counter ;
   union fpregs_state state ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct seq_operations;

#line 369 
struct perf_event;

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   struct fpu fpu ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
struct lockdep_map;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const *name ;
   int cpu ;
   unsigned long ip ;
};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))) class_idx : 13 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_context : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) trylock : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) read : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) check : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hardirqs_off : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(12))) references : 12 ;
   unsigned int pin_count ;
};

#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct __anonstruct_35 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
union __anonunion_34 {
   struct raw_spinlock rlock ;
   struct __anonstruct_35 __anonCompField___anonunion_34_17 ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_34 __anonCompField_spinlock_18 ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_36 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_36 rwlock_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jump_label.h"
struct jump_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct mutex;

#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/stat.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_45 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_45 seqlock_t;

#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highuid.h"
struct user_namespace;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kuid_t_46 {
   uid_t val ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_46 kuid_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kgid_t_47 {
   gid_t val ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_47 kgid_t;

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct vm_area_struct;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_48 {
   unsigned long bits[16U] ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_48 nodemask_t;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   void *magic ;
   struct lockdep_map dep_map ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};

#line 193 
struct rw_semaphore;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   struct list_head wait_list ;
   raw_spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct task_struct *owner ;
   struct lockdep_map dep_map ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};

#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
typedef union ktime ktime_t;

#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct notifier_block;

#line 1121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(unsigned long ) ;
   unsigned long data ;
   u32 flags ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};

#line 250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct hrtimer;

#line 251 
enum hrtimer_restart;

#line 252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};

#line 837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/sysctl.h"
struct ctl_table;

#line 838 
struct nsproxy;

#line 839 
struct ctl_table_root;

#line 840 
struct ctl_table_header;

#line 841 
struct ctl_dir;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);

#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table {
   char const *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct __anonstruct_50 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
union __anonunion_49 {
   struct __anonstruct_50 __anonCompField___anonunion_49_19 ;
   struct callback_head rcu ;
};

#line 122 
struct ctl_table_set;

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_49 __anonCompField_ctl_table_header_20 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};

#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};

#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *, struct nsproxy *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};

#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct workqueue_struct;

#line 260 
struct work_struct;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/x86_init.h"
struct pci_dev;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_message {
   int event ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
typedef struct pm_message pm_message_t;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};

#line 320 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};

#line 327 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};

#line 335 
struct wakeup_source;

#line 336 
struct wake_irq;

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};

#line 553 
struct dev_pm_qos;

#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) can_wakeup : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) async_suspend : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_prepared : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_noirq_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_late_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_children : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) early_init : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) direct_complete : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_path : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) disable_depth : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) idle_notification : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) request_pending : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) deferred_resume : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) run_wake : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_auto : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_callbacks : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_safe : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) use_autosuspend : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) timer_autosuspends : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};

#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/topology.h"
struct pci_bus;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct ldt_struct;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_115 {
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   atomic_t perf_rdpmc_allowed ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_115 mm_context_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/xen/features.h"
struct bio_vec;

#line 1281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct llist_node;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmod.h"
struct cred;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/elf.h"
struct inode;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};

#line 66 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_148 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_149 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
union __anonunion_147 {
   struct __anonstruct_148 __anonCompField___anonunion_147_33 ;
   struct __anonstruct_149 __anonCompField___anonunion_147_34 ;
};

#line 73 
struct uprobe;

#line 73 
struct return_instance;

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_147 __anonCompField_uprobe_task_35 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct xol_area;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};

#line 133 
struct address_space;

#line 134 
struct mem_cgroup;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
typedef void compound_page_dtor(struct page *);

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_150 {
   struct address_space *mapping ;
   void *s_mem ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_152 {
   unsigned long index ;
   void *freelist ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_156 {
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) inuse : 16 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(15))) objects : 15 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) frozen : 1 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_155 {
   atomic_t _mapcount ;
   struct __anonstruct_156 __anonCompField___anonunion_155_38 ;
   int units ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_154 {
   union __anonunion_155 __anonCompField___anonstruct_154_39 ;
   atomic_t _count ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_153 {
   unsigned long counters ;
   struct __anonstruct_154 __anonCompField___anonunion_153_40 ;
   unsigned int active ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_151 {
   union __anonunion_152 __anonCompField___anonstruct_151_37 ;
   union __anonunion_153 __anonCompField___anonstruct_151_41 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_158 {
   struct page *next ;
   int pages ;
   int pobjects ;
};

#line 32 
struct slab;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_159 {
   compound_page_dtor *compound_dtor ;
   unsigned long compound_order ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_157 {
   struct list_head lru ;
   struct __anonstruct_158 __anonCompField___anonunion_157_43 ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   struct __anonstruct_159 __anonCompField___anonunion_157_44 ;
   pgtable_t pmd_huge_pte ;
};

#line 32 
struct kmem_cache;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_160 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_150 __anonCompField_page_36 ;
   struct __anonstruct_151 __anonCompField_page_42 ;
   union __anonunion_157 __anonCompField_page_45 ;
   union __anonunion_160 __anonCompField_page_46 ;
   struct mem_cgroup *mem_cgroup ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_shared_161 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};

#line 257 
struct anon_vma;

#line 257 
struct vm_operations_struct;

#line 257 
struct mempolicy;

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_161 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct const *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};

#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};

#line 357 
struct kioctx_table;

#line 358 
struct linux_binfmt;

#line 358 
struct mmu_notifier_mm;

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u32 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   atomic_long_t nr_pmds ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
   void *bd_addr ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;

#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
union __anonunion_166 {
   unsigned long bitmap[4U] ;
   struct callback_head callback_head ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
struct idr_layer {
   int prefix ;
   int layer ;
   struct idr_layer *ary[256U] ;
   int count ;
   union __anonunion_166 __anonCompField_idr_layer_47 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   int layers ;
   int cur ;
   spinlock_t lock ;
   int id_free_cnt ;
   struct idr_layer *id_free ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};

#line 185 
struct dentry;

#line 186 
struct iattr;

#line 187 
struct super_block;

#line 188 
struct file_system_type;

#line 189 
struct kernfs_open_node;

#line 190 
struct kernfs_iattrs;

#line 213 
struct kernfs_root;

#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};

#line 89 
struct kernfs_ops;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops const *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
union __anonunion_171 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const *name ;
   struct rb_node rb ;
   void const *ns ;
   unsigned int hash ;
   union __anonunion_171 __anonCompField_kernfs_node_48 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root *, int *, char *) ;
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char const *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char const *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct const *vm_ops ;
};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};

#line 477 
struct sock;

#line 478 
struct kobject;

#line 479 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};

#line 485  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const *(*netlink_ns)(struct sock *) ;
   void const *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct bin_attribute;

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct attribute {
   char const *name ;
   umode_t mode ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct attribute_group {
   char const *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char const *, size_t ) ;
};

#line 509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset;

#line 52 
struct kobj_type;

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobject {
   char const *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_initialized : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_in_sysfs : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_add_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_remove_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) uevent_suppress : 1 ;
};

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops const *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations const *(*child_ns_type)(struct kobject *) ;
   void const *(*namespace)(struct kobject *) ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const filter)(struct kset *, struct kobject *) ;
   char const *(* const name)(struct kset *, struct kobject *) ;
   int (* const uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops const *uevent_ops ;
};

#line 223 
struct kernel_param;

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const *, struct kernel_param const *) ;
   int (*get)(char *, struct kernel_param const *) ;
   void (*free)(void *) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string;

#line 62 
struct kparam_array;

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
union __anonunion_172 {
   void *arg ;
   struct kparam_string const *str ;
   struct kparam_array const *arr ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kernel_param {
   char const *name ;
   struct module *mod ;
   struct kernel_param_ops const *ops ;
   u16 const perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_172 __anonCompField_kernel_param_49 ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops const *ops ;
   void *elem ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree_latch.h"
struct mod_arch_specific {
   
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_param_attrs;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char const *, size_t ) ;
   void (*setup)(struct module *, char const *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};

#line 74 
struct exception_table_entry;

#line 290 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};

#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};

#line 304 
struct module_sect_attrs;

#line 304 
struct module_notes_attrs;

#line 304 
struct tracepoint;

#line 304 
struct trace_event_call;

#line 304 
struct trace_enum_map;

#line 304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const *version ;
   char const *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol const *syms ;
   unsigned long const *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol const *gpl_syms ;
   unsigned long const *gpl_crcs ;
   struct kernel_symbol const *unused_syms ;
   unsigned long const *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol const *unused_gpl_syms ;
   unsigned long const *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol const *gpl_future_syms ;
   unsigned long const *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_tree_node mtn_core ;
   struct mod_tree_node mtn_init ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_enum_map **trace_enums ;
   unsigned int num_trace_enums ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp_alive ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const *data ;
};

#line 652 
struct klist_node;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};

#line 67 
struct path;

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations const *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};

#line 222 
struct pinctrl;

#line 223 
struct pinctrl_state;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dma_map_ops;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/device.h"
struct device_driver;

#line 16 
struct driver_private;

#line 17 
struct class;

#line 18 
struct subsys_private;

#line 19 
struct bus_type;

#line 20 
struct device_node;

#line 21 
struct fwnode_handle;

#line 22 
struct iommu_ops;

#line 23 
struct iommu_group;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct bus_type {
   char const *name ;
   char const *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group const **bus_groups ;
   struct attribute_group const **dev_groups ;
   struct attribute_group const **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct iommu_ops const *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};

#line 139 
struct device_type;

#line 197 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_driver {
   char const *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id const *of_match_table ;
   struct acpi_device_id const *acpi_match_table ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group const **groups ;
   struct dev_pm_ops const *pm ;
   struct driver_private *p ;
};

#line 353 
struct class_attribute;

#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class {
   char const *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group const **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct kobj_ns_type_operations const *ns_type ;
   void const *(*namespace)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct subsys_private *p ;
};

#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *, struct class_attribute *, char *) ;
   ssize_t (*store)(struct class *, struct class_attribute *, char const *, size_t ) ;
};

#line 514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_type {
   char const *name ;
   struct attribute_group const **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops const *pm ;
};

#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char const *, size_t ) ;
};

#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};

#line 684 
struct dma_coherent_mem;

#line 684 
struct cma;

#line 684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const *init_name ;
   struct device_type const *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group const **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline_disabled : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline : 1 ;
};

#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct wakeup_source {
   char const *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) active : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) autosleep_enabled : 1 ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};

#line 4  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sem_undo_list;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/shm.h"
struct user_struct;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_183 {
   unsigned long sig[1U] ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_183 sigset_t;

#line 25 
struct siginfo;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int );

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};

#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_185 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_186 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_187 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_188 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_190 {
   void *_lower ;
   void *_upper ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_189 {
   void *_addr ;
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_190 _addr_bnd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_191 {
   long _band ;
   int _fd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_192 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_184 {
   int _pad[28U] ;
   struct __anonstruct__kill_185 _kill ;
   struct __anonstruct__timer_186 _timer ;
   struct __anonstruct__rt_187 _rt ;
   struct __anonstruct__sigchld_188 _sigchld ;
   struct __anonstruct__sigfault_189 _sigfault ;
   struct __anonstruct__sigpoll_191 _sigpoll ;
   struct __anonstruct__sigsys_192 _sigsys ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_184 _sifields ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};

#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};

#line 443 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
};

#line 450 
struct pid_namespace;

#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp_filter;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct rt_mutex_waiter;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};

#line 50 
struct hrtimer_clock_base;

#line 51 
struct hrtimer_cpu_base;

#line 60 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
};

#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   seqcount_t seq ;
   struct hrtimer *running ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   bool migration_enabled ;
   bool nohz_active ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_hrtirq : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hres_active : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hang_detected : 1 ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   unsigned int nr_events ;
   unsigned int nr_retries ;
   unsigned int nr_hangs ;
   unsigned int max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array_ptr;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef int32_t key_serial_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef uint32_t key_perm_t;

#line 35 
struct key;

#line 36 
struct signal_struct;

#line 37 
struct key_type;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct keyring_index_key {
   struct key_type *type ;
   char const *description ;
   size_t desc_len ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_199 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};

#line 123 
struct key_user;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_200 {
   time_t expiry ;
   time_t revoked_at ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct __anonstruct_202 {
   struct key_type *type ;
   char *description ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_201 {
   struct keyring_index_key index_key ;
   struct __anonstruct_202 __anonCompField___anonunion_201_52 ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_type_data_203 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_payload_205 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_204 {
   union __anonunion_payload_205 payload ;
   struct assoc_array keys ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_199 __anonCompField_key_50 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_200 __anonCompField_key_51 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion_201 __anonCompField_key_53 ;
   union __anonunion_type_data_203 type_data ;
   union __anonunion_204 __anonCompField_key_54 ;
};

#line 358 
struct audit_context;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};

#line 369 
struct percpu_ref;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref *);

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) force_atomic : 1 ;
   struct callback_head rcu ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup;

#line 28 
struct cgroup_root;

#line 29 
struct cgroup_subsys;

#line 30 
struct cgroup_taskset;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   struct list_head sibling ;
   struct list_head children ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head cgrp_links ;
   struct cgroup *dfl_cgrp ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct css_set *mg_dst_cset ;
   struct list_head e_cset_node[12U] ;
   struct callback_head callback_head ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int id ;
   int populated_cnt ;
   struct kernfs_node *kn ;
   struct kernfs_node *procs_kn ;
   struct kernfs_node *populated_kn ;
   unsigned int subtree_control ;
   unsigned int child_subsys_mask ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[12U] ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
};

#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   struct lock_class_key lockdep_key ;
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_e_css_changed)(struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct cgroup_subsys_state *, struct cgroup_subsys_state *, struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   int id ;
   char const *name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct futex_pi_state;

#line 129 
struct robust_list_head;

#line 130 
struct bio_list;

#line 131 
struct fs_struct;

#line 132 
struct perf_event_context;

#line 133 
struct blk_plug;

#line 135 
struct nameidata;

#line 188 
struct cfs_rq;

#line 189 
struct task_group;

#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};

#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};

#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};

#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};

#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};

#line 563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
   int running ;
};

#line 620 
struct autogroup;

#line 621 
struct tty_struct;

#line 621 
struct taskstats;

#line 621 
struct tty_audit_buf;

#line 621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_child_subreaper : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};

#line 802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};

#line 845 
struct backing_dev_info;

#line 846 
struct reclaim_state;

#line 847  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};

#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   u64 blkio_start ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   u64 freepages_start ;
   u64 freepages_delay ;
   u32 freepages_count ;
};

#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};

#line 1138 
struct io_context;

#line 1172 
struct pipe_inode_info;

#line 1173 
struct uts_namespace;

#line 1174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};

#line 1181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_avg {
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
   unsigned long utilization_avg_contrib ;
   u32 runnable_avg_sum ;
   u32 avg_period ;
   u32 running_avg_sum ;
};

#line 1206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};

#line 1241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};

#line 1273 
struct rt_rq;

#line 1273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};

#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   int dl_yielded ;
   struct hrtimer dl_timer ;
};

#line 1355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) may_oom : 1 ;
};

#line 1779 
struct sched_class;

#line 1779 
struct files_struct;

#line 1779 
struct compat_robust_list_head;

#line 1779 
struct numa_group;

#line 1779 
struct ftrace_ret_stack;

#line 1779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_struct {
   long volatile state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class const *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   unsigned long rcu_tasks_nvcsw ;
   bool rcu_tasks_holdout ;
   struct list_head rcu_tasks_holdout_list ;
   int rcu_tasks_idle_cpu ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   u32 vmacache_seqnum ;
   struct vm_area_struct *vmacache[4U] ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_execve : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_iowait : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_reset_on_fork : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_contributes_to_load : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_migrated : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memcg_kmem_skip_account : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) brk_randomized : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred const *real_cred ;
   struct cred const *cred ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct thread_struct thread ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct hotplug_slot;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef int pci_power_t;

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

#line 138 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;

#line 249 
struct pcie_link_state;

#line 250 
struct pci_vpd;

#line 251 
struct pci_sriov;

#line 252 
struct pci_ats;

#line 253 
struct proc_dir_entry;

#line 253 
struct pci_driver;

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
union __anonunion_220 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   u8 dma_alias_devfn ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   u8 pm_cap ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) pme_support : 5 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_interrupt : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_poll : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d1_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d2_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d1d2 : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d3cold_allowed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) mmio_always_on : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_prepared : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_hotplug : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) transparent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) multifunction : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_busmaster : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_64bit_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) block_cfg_access : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_parity_status : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_reroute_variant : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msi_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msix_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ari_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_freset : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_saved : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_physfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_virtfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) reset_fn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_hotplug_bridge : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first_valid : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_intx_masking : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) io_window_1k : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_secondary_link : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct attribute_group const **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_220 __anonCompField_pci_dev_58 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
};

#line 442 
struct pci_ops;

#line 442 
struct msi_controller;

#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
};

#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_ops {
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};

#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_notify)(struct pci_dev *, bool ) ;
   void (*resume)(struct pci_dev *) ;
};

#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char const *name ;
   struct pci_device_id const *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id const *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*suspend_late)(struct pci_dev *, pm_message_t ) ;
   int (*resume_early)(struct pci_dev *) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers const *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   int nid ;
   struct mem_cgroup *memcg ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page_ext.h"
struct file_ra_state;

#line 65 
struct writeback_control;

#line 66 
struct bdi_writeback;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *cow_page ;
   struct page *page ;
   unsigned long max_pgoff ;
   pte_t *pte ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*fault)(struct vm_area_struct *, struct vm_fault *) ;
   void (*map_pages)(struct vm_area_struct *, struct vm_fault *) ;
   int (*page_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*pfn_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char const *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};

#line 1249 
struct kvec;

#line 2291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmapool.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pci_64.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   int (*mapping_error)(struct device *, dma_addr_t ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   int (*set_dma_mask)(struct device *, u64 ) ;
   int is_phys ;
};

#line 1911  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};

#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/prefetch.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
union __anonunion_229 {
   struct iovec const *iov ;
   struct kvec const *kvec ;
   struct bio_vec const *bvec ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct iov_iter {
   int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_229 __anonCompField_iov_iter_66 ;
   unsigned long nr_segs ;
};

#line 1182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};

#line 38 
struct kiocb;

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_231 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_231 sync_serial_settings;

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_232 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_232 te1_settings;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_233 {
   unsigned short encoding ;
   unsigned short parity ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_233 raw_hdlc_proto;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_234 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_234 fr_proto;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_235 {
   unsigned int dlci ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_235 fr_proto_pvc;

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_236 {
   unsigned int dlci ;
   char master[16U] ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_236 fr_proto_pvc_info;

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_237 {
   unsigned int interval ;
   unsigned int timeout ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_237 cisco_proto;

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_238 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_238 ifs_ifsu ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_239 {
   char ifrn_name[16U] ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_240 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_239 ifr_ifrn ;
   union __anonunion_ifr_ifru_240 ifr_ifru ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_node;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct __anonstruct_245 {
   spinlock_t lock ;
   int count ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
union __anonunion_244 {
   struct __anonstruct_245 __anonCompField___anonunion_244_67 ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion_244 __anonCompField_lockref_68 ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct vfsmount;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct __anonstruct_247 {
   u32 hash ;
   u32 len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
union __anonunion_246 {
   struct __anonstruct_247 __anonCompField___anonunion_246_69 ;
   u64 hash_len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct qstr {
   union __anonunion_246 __anonCompField_qstr_70 ;
   unsigned char const *name ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
union __anonunion_d_u_248 {
   struct hlist_node d_alias ;
   struct callback_head d_rcu ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations const *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_248 d_u ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry const *, struct qstr *) ;
   int (*d_compare)(struct dentry const *, struct dentry const *, unsigned int , char const *, struct qstr const *) ;
   int (*d_delete)(struct dentry const *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct dentry *, bool ) ;
   struct inode *(*d_select_inode)(struct dentry *, unsigned int ) ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/path.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_memcg {
   struct list_lru_one *lru[0U] ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
};

#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct __anonstruct_252 {
   struct radix_tree_node *parent ;
   void *private_data ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
union __anonunion_251 {
   struct __anonstruct_252 __anonCompField___anonunion_251_71 ;
   struct callback_head callback_head ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_node {
   unsigned int path ;
   unsigned int count ;
   union __anonunion_251 __anonCompField_radix_tree_node_72 ;
   struct list_head private_list ;
   void *slots[64U] ;
   unsigned long tags[3U][1U] ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
};

#line 47 
struct block_device;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fs.h"
struct export_operations;

#line 62 
struct poll_table_struct;

#line 63 
struct kstatfs;

#line 64 
struct swap_info_struct;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dqblk_xfs.h"
struct dquot;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
struct __anonstruct_kprojid_t_256 {
   projid_t val ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_256 kprojid_t;

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
typedef long long qsize_t;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
union __anonunion_257 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kqid {
   union __anonunion_257 __anonCompField_kqid_74 ;
   enum quota_type type ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};

#line 206 
struct quota_format_type;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};

#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};

#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
};

#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};

#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};

#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};

#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};

#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};

#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops const *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};

#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops const *ops[3U] ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
};

#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *, loff_t ) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};

#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   atomic_t i_mmap_writable ;
   struct rb_root i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrshadows ;
   unsigned long writeback_index ;
   struct address_space_operations const *a_ops ;
   unsigned long flags ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};

#line 443 
struct request_queue;

#line 444 
struct hd_struct;

#line 444 
struct gendisk;

#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};

#line 560 
struct posix_acl;

#line 561 
struct inode_operations;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_260 {
   unsigned int const i_nlink ;
   unsigned int __i_nlink ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_261 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};

#line 561 
struct file_lock_context;

#line 561 
struct cdev;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_262 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations const *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_260 __anonCompField_inode_75 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_261 __anonCompField_inode_76 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   struct file_operations const *i_fop ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_262 __anonCompField_inode_77 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   void *i_private ;
};

#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};

#line 815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_f_u_263 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file {
   union __anonunion_f_u_263 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations const *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred const *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
};

#line 923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
typedef void *fl_owner_t;

#line 924 
struct file_lock;

#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};

#line 931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock *, struct file_lock *) ;
   unsigned long (*lm_owner_key)(struct file_lock *) ;
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};

#line 947 
struct net;

#line 952 
struct nlm_lockowner;

#line 953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};

#line 19 
struct fasync_struct;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_265 {
   struct list_head link ;
   int state ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_264 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_265 afs ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations const *fl_ops ;
   struct lock_manager_operations const *fl_lmops ;
   union __anonunion_fl_u_264 fl_u ;
};

#line 1005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};

#line 1221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};

#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};

#line 1287 
struct super_operations;

#line 1287 
struct xattr_handler;

#line 1287 
struct mtd_info;

#line 1287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations const *s_op ;
   struct dquot_operations const *dq_op ;
   struct quotactl_ops const *s_qcop ;
   struct export_operations const *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler const **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations const *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   int s_stack_depth ;
};

#line 1526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};

#line 1540 
struct dir_context;

#line 1565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char const *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};

#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char const *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   unsigned int (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*mremap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*aio_fsync)(struct kiocb *, int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
};

#line 1633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char const *(*follow_link)(struct dentry *, void **) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   void (*put_link)(struct inode *, void *) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char const *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *) ;
   int (*rename2)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct vfsmount *, struct dentry *, struct kstat *) ;
   int (*setxattr)(struct dentry *, char const *, void const *, size_t , int ) ;
   ssize_t (*getxattr)(struct dentry *, char const *, void *, size_t ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*removexattr)(struct dentry *, char const *) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t , int *) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
};

#line 1687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char const *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};

#line 1926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_system_type {
   char const *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type *, int , char const *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};

#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
struct in6_addr;

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct sk_buff;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
typedef u64 netdev_features_t;

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
union __anonunion_in6_u_280 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
struct in6_addr {
   union __anonunion_in6_u_280 in6_u ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/in6.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buf_operations;

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations const *ops ;
   unsigned int flags ;
   unsigned long private ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int nrbufs ;
   unsigned int curbuf ;
   unsigned int buffers ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int waiting_writers ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int can_merge ;
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct napi_struct;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct nf_conntrack {
   atomic_t use ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
enum ldv_27733 {
    BRNF_PROTO_UNCHANGED = 0,
    BRNF_PROTO_8021Q = 1,
    BRNF_PROTO_PPPOE = 2
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_285 {
   struct net_device *physoutdev ;
   char neigh_header[8U] ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_286 {
   __be32 ipv4_daddr ;
   struct in6_addr ipv6_daddr ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   enum ldv_27733 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) orig_proto : 8 ;
   bool pkt_otherhost ;
   __u16 frag_max_size ;
   unsigned int mask ;
   struct net_device *physindev ;
   union __anonunion_285 __anonCompField_nf_bridge_info_81 ;
   union __anonunion_286 __anonCompField_nf_bridge_info_82 ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};

#line 215 
struct skb_frag_struct;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef struct skb_frag_struct skb_frag_t;

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_page_287 {
   struct page *p ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct {
   struct __anonstruct_page_287 page ;
   __u32 page_offset ;
   __u32 size ;
};

#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};

#line 319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_info {
   unsigned char nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   unsigned short gso_type ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   u32 tskey ;
   __be32 ip6_frag_id ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};

#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_289 {
   u32 stamp_us ;
   u32 stamp_jiffies ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_288 {
   u64 v64 ;
   struct __anonstruct_289 __anonCompField___anonunion_288_83 ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_mstamp {
   union __anonunion_288 __anonCompField_skb_mstamp_84 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_292 {
   ktime_t tstamp ;
   struct skb_mstamp skb_mstamp ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_291 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_292 __anonCompField___anonstruct_291_85 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_290 {
   struct __anonstruct_291 __anonCompField___anonunion_290_86 ;
   struct rb_node rbnode ;
};

#line 457 
struct sec_path;

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_294 {
   __u16 csum_start ;
   __u16 csum_offset ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_293 {
   __wsum csum ;
   struct __anonstruct_294 __anonCompField___anonunion_293_88 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_295 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_296 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_297 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_290 __anonCompField_sk_buff_87 ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
   struct sec_path *sp ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cloned : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nohdr : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) fclone : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) peeked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) head_frag : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) xmit_more : 1 ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pkt_type : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pfmemalloc : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_df : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) nfctinfo : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nf_trace : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ip_summed : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ooo_okay : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l4_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sw_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_fcs : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encapsulation : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encap_hdr_csum : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_complete_sw : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) csum_level : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_bad : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ndisc_nodetype : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ipvs_property : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) inner_protocol_type : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) remcsum_offload : 1 ;
   __u16 tc_index ;
   __u16 tc_verd ;
   union __anonunion_293 __anonCompField_sk_buff_89 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_295 __anonCompField_sk_buff_90 ;
   __u32 secmark ;
   union __anonunion_296 __anonCompField_sk_buff_91 ;
   union __anonunion_297 __anonCompField_sk_buff_92 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};

#line 718 
struct dst_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};

#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};

#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};

#line 438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};

#line 475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};

#line 503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};

#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};

#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};

#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};

#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};

#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};

#line 748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};

#line 759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};

#line 778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};

#line 828  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};

#line 999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};

#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device *, struct ethtool_cmd *) ;
   int (*set_settings)(struct net_device *, struct ethtool_cmd *) ;
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 const *, u8 const *, u8 const ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable const *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable const *, void const *) ;
};

#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct prot_inuse;

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct u64_stats_sync {
   
};

#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[115U] ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/packet.h"
struct netns_frags {
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct ipv4_devconf;

#line 185 
struct fib_rules_ops;

#line 186 
struct fib_table;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};

#line 29 
struct inet_peer_base;

#line 29 
struct xt_table;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};

#line 113 
struct neighbour;

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry const *) ;
   unsigned int (*mtu)(struct dst_entry const *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry const *, struct sk_buff *, void const *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct ipv6_devconf;

#line 39 
struct rt6_info;

#line 39 
struct rt6_statistics;

#line 39 
struct fib6_table;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct netns_frags frags ;
};

#line 20 
struct sctp_mib;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct nf_logger;

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger const *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct ebt_table;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};

#line 72 
struct ip_conntrack_stat;

#line 72 
struct nf_ct_event_notifier;

#line 72 
struct nf_exp_event_notifier;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   seqcount_t generation ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};

#line 114 
struct nft_af_info;

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   struct nft_af_info *netdev ;
   unsigned int base_seq ;
   u8 gencursor ;
};

#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/xfrm.h"
struct flow_cache_percpu {
   struct hlist_head *hash_table ;
   int hash_count ;
   u32 hash_rnd ;
   int hash_rnd_recalc ;
   struct tasklet_struct flush_tasklet ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct flow_cache {
   u32 hash_shift ;
   struct flow_cache_percpu *percpu ;
   struct notifier_block hotcpu_notifier ;
   int low_watermark ;
   int high_watermark ;
   struct timer_list rnd_timer ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
   struct flow_cache flow_cache_global ;
   atomic_t flow_cache_genid ;
   struct list_head flow_cache_gc_list ;
   spinlock_t flow_cache_gc_lock ;
   struct work_struct flow_cache_gc_work ;
   struct work_struct flow_cache_flush_work ;
   struct mutex flow_flush_sem ;
};

#line 88 
struct mpls_route;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_mpls {
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct proc_ns_operations;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations const *ops ;
   unsigned int inum ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net_generic;

#line 12 
struct netns_ipvs;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   atomic64_t cookie_gen ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   spinlock_t nsid_lock ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_306 {
   struct net *net ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_306 possible_net_t;

#line 376 
enum fwnode_type {
    FWNODE_INVALID = 0,
    FWNODE_OF = 1,
    FWNODE_ACPI = 2,
    FWNODE_PDATA = 3
};

#line 383  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct fwnode_handle {
   enum fwnode_type type ;
   struct fwnode_handle *secondary ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
typedef u32 phandle;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
   struct bin_attribute attr ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct device_node {
   char const *name ;
   char const *type ;
   phandle phandle ;
   char const *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
enum ldv_29585 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_MII = 1,
    PHY_INTERFACE_MODE_GMII = 2,
    PHY_INTERFACE_MODE_SGMII = 3,
    PHY_INTERFACE_MODE_TBI = 4,
    PHY_INTERFACE_MODE_REVMII = 5,
    PHY_INTERFACE_MODE_RMII = 6,
    PHY_INTERFACE_MODE_RGMII = 7,
    PHY_INTERFACE_MODE_RGMII_ID = 8,
    PHY_INTERFACE_MODE_RGMII_RXID = 9,
    PHY_INTERFACE_MODE_RGMII_TXID = 10,
    PHY_INTERFACE_MODE_RTBI = 11,
    PHY_INTERFACE_MODE_SMII = 12,
    PHY_INTERFACE_MODE_XGMII = 13,
    PHY_INTERFACE_MODE_MOCA = 14,
    PHY_INTERFACE_MODE_QSGMII = 15,
    PHY_INTERFACE_MODE_MAX = 16
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
typedef enum ldv_29585 phy_interface_t;

#line 126 
enum ldv_29638 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};

#line 133 
struct phy_device;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct mii_bus {
   char const *name ;
   char id[17U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_29638 state ;
   struct device dev ;
   struct phy_device *phy_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int *irq ;
};

#line 214 
enum phy_state {
    PHY_DOWN = 0,
    PHY_STARTING = 1,
    PHY_READY = 2,
    PHY_PENDING = 3,
    PHY_UP = 4,
    PHY_AN = 5,
    PHY_RUNNING = 6,
    PHY_NOLINK = 7,
    PHY_FORCING = 8,
    PHY_CHANGELINK = 9,
    PHY_HALTED = 10,
    PHY_RESUMING = 11
};

#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};

#line 323 
struct phy_driver;

#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_device {
   struct phy_driver *drv ;
   struct mii_bus *bus ;
   struct device dev ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   bool is_c45 ;
   bool is_internal ;
   bool has_fixups ;
   bool suspended ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int addr ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   int link ;
   u32 interrupts ;
   u32 supported ;
   u32 advertising ;
   u32 lp_advertising ;
   int autoneg ;
   int link_timeout ;
   int irq ;
   void *priv ;
   struct work_struct phy_queue ;
   struct delayed_work state_queue ;
   atomic_t irq_disable ;
   struct mutex lock ;
   struct net_device *attached_dev ;
   void (*adjust_link)(struct net_device *) ;
};

#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_driver {
   u32 phy_id ;
   char *name ;
   unsigned int phy_id_mask ;
   u32 features ;
   u32 flags ;
   void const *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd_indirect)(struct phy_device *, int , int , int ) ;
   void (*write_mmd_indirect)(struct phy_device *, int , int , int , u32 ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   struct device_driver driver ;
};

#line 803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct fixed_phy_status {
   int link ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
enum dsa_tag_protocol {
    DSA_TAG_PROTO_NONE = 0,
    DSA_TAG_PROTO_DSA = 1,
    DSA_TAG_PROTO_TRAILER = 2,
    DSA_TAG_PROTO_EDSA = 3,
    DSA_TAG_PROTO_BRCM = 4
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
struct dsa_chip_data {
   struct device *host_dev ;
   int sw_addr ;
   int eeprom_len ;
   struct device_node *of_node ;
   char *port_names[12U] ;
   struct device_node *port_dn[12U] ;
   s8 *rtable ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   struct net_device *of_netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};

#line 84 
struct packet_type;

#line 85 
struct dsa_switch;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   int (*rcv)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   enum dsa_tag_protocol tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};

#line 123 
struct dsa_switch_driver;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   enum dsa_tag_protocol tag_protocol ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct device *master_dev ;
   char hwmon_name[24U] ;
   struct device *hwmon_dev ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   u32 phys_mii_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   enum dsa_tag_protocol tag_protocol ;
   int priv_size ;
   char *(*probe)(struct device *, int ) ;
   int (*setup)(struct dsa_switch *) ;
   int (*set_addr)(struct dsa_switch *, u8 *) ;
   u32 (*get_phy_flags)(struct dsa_switch *, int ) ;
   int (*phy_read)(struct dsa_switch *, int , int ) ;
   int (*phy_write)(struct dsa_switch *, int , int , u16 ) ;
   void (*poll_link)(struct dsa_switch *) ;
   void (*adjust_link)(struct dsa_switch *, int , struct phy_device *) ;
   void (*fixed_link_update)(struct dsa_switch *, int , struct fixed_phy_status *) ;
   void (*get_strings)(struct dsa_switch *, int , uint8_t *) ;
   void (*get_ethtool_stats)(struct dsa_switch *, int , uint64_t *) ;
   int (*get_sset_count)(struct dsa_switch *) ;
   void (*get_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*set_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*suspend)(struct dsa_switch *) ;
   int (*resume)(struct dsa_switch *) ;
   int (*port_enable)(struct dsa_switch *, int , struct phy_device *) ;
   void (*port_disable)(struct dsa_switch *, int , struct phy_device *) ;
   int (*set_eee)(struct dsa_switch *, int , struct phy_device *, struct ethtool_eee *) ;
   int (*get_eee)(struct dsa_switch *, int , struct ethtool_eee *) ;
   int (*get_temp)(struct dsa_switch *, int *) ;
   int (*get_temp_limit)(struct dsa_switch *, int *) ;
   int (*set_temp_limit)(struct dsa_switch *, int ) ;
   int (*get_temp_alarm)(struct dsa_switch *, bool *) ;
   int (*get_eeprom_len)(struct dsa_switch *) ;
   int (*get_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*get_regs_len)(struct dsa_switch *, int ) ;
   void (*get_regs)(struct dsa_switch *, int , struct ethtool_regs *, void *) ;
   int (*port_join_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_leave_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_stp_update)(struct dsa_switch *, int , u8 ) ;
   int (*fdb_add)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_del)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_getnext)(struct dsa_switch *, int , unsigned char *, bool *) ;
};

#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};

#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};

#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};

#line 1628  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct mnt_namespace;

#line 1629 
struct ipc_namespace;

#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr const *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};

#line 643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_bonding.h"
struct netpoll_info;

#line 119 
struct wireless_dev;

#line 120 
struct wpan_dev;

#line 121 
struct mpls_dev;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};

#line 190 
struct neigh_parms;

#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void const *, void const *, unsigned int ) ;
   int (*parse)(struct sk_buff const *, unsigned char *) ;
   int (*cache)(struct neighbour const *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device const *, unsigned char const *) ;
};

#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct *, int ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};

#line 331 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;

#line 340 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;

#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);

#line 537 
struct Qdisc;

#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
   unsigned long tx_maxrate ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};

#line 619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};

#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};

#line 683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};

#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};

#line 719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};

#line 730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};

#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};

#line 757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};

#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_busy_poll)(struct napi_struct *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, u8 ) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff const *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_add_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void (*ndo_del_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff *, struct net_device *, void *) ;
   int (*ndo_get_lock_subclass)(struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device const *) ;
};

#line 1243 
enum ldv_31348 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};

#line 1252 
enum ldv_31349 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_adj_list_316 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_all_adj_list_317 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257 
struct iw_handler_def;

#line 1257 
struct iw_public_data;

#line 1257 
struct switchdev_ops;

#line 1257 
struct vlan_info;

#line 1257 
struct tipc_bearer;

#line 1257 
struct in_device;

#line 1257 
struct dn_dev;

#line 1257 
struct inet6_dev;

#line 1257 
struct tcf_proto;

#line 1257 
struct cpu_rmap;

#line 1257 
struct pcpu_lstats;

#line 1257 
struct pcpu_sw_netstats;

#line 1257 
struct pcpu_dstats;

#line 1257 
struct pcpu_vstats;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
union __anonunion_318 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};

#line 1257 
struct garp_port;

#line 1257 
struct mrp_port;

#line 1257 
struct rtnl_link_ops;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   atomic_t carrier_changes ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_316 adj_list ;
   struct __anonstruct_all_adj_list_317 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   struct iw_handler_def const *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops const *netdev_ops ;
   struct ethtool_ops const *ethtool_ops ;
   struct switchdev_ops const *switchdev_ops ;
   struct header_ops const *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct tcf_proto *ingress_cl_list ;
   struct netdev_queue *ingress_queue ;
   struct list_head nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_31348 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) reg_state : 8 ;
   bool dismantle ;
   enum ldv_31349 __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) rtnl_link_state : 16 ;
   void (*destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_318 __anonCompField_net_device_95 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group const *sysfs_groups[4U] ;
   struct attribute_group const *sysfs_rx_queue_group ;
   struct rtnl_link_ops const *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   u16 gso_min_segs ;
   struct dcbnl_rtnl_ops const *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
};

#line 1978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct packet_type {
   __be16 type ;
   struct net_device *dev ;
   int (*func)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   bool (*id_match)(struct packet_type *, struct sock *) ;
   void *af_packet_priv ;
   struct list_head list ;
};

#line 2025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};

#line 2893 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};

#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};

#line 219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uaccess.h"
struct ring_desc {
   __le32 buf ;
   __le32 flaglen ;
};

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
struct ring_desc_ex {
   __le32 bufhigh ;
   __le32 buflow ;
   __le32 txvlan ;
   __le32 flaglen ;
};

#line 365  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
union ring_type {
   struct ring_desc *orig ;
   struct ring_desc_ex *ex ;
};

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
struct nv_ethtool_str {
   char name[32U] ;
};

#line 610  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
struct nv_ethtool_stats {
   u64 tx_bytes ;
   u64 tx_zero_rexmt ;
   u64 tx_one_rexmt ;
   u64 tx_many_rexmt ;
   u64 tx_late_collision ;
   u64 tx_fifo_errors ;
   u64 tx_carrier_errors ;
   u64 tx_excess_deferral ;
   u64 tx_retry_error ;
   u64 rx_frame_error ;
   u64 rx_extra_byte ;
   u64 rx_late_collision ;
   u64 rx_runt ;
   u64 rx_frame_too_long ;
   u64 rx_over_errors ;
   u64 rx_crc_errors ;
   u64 rx_frame_align_error ;
   u64 rx_length_error ;
   u64 rx_unicast ;
   u64 rx_multicast ;
   u64 rx_broadcast ;
   u64 rx_packets ;
   u64 rx_errors_total ;
   u64 tx_errors_total ;
   u64 tx_deferral ;
   u64 tx_packets ;
   u64 rx_bytes ;
   u64 tx_pause ;
   u64 rx_pause ;
   u64 rx_drop_frame ;
   u64 tx_unicast ;
   u64 tx_multicast ;
   u64 tx_broadcast ;
};

#line 698  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
struct register_test {
   __u32 reg ;
   __u32 mask ;
};

#line 710  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
struct nv_skb_map {
   struct sk_buff *skb ;
   dma_addr_t dma ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(31))) dma_len : 31 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) dma_single : 1 ;
   struct ring_desc_ex *first_tx_desc ;
   struct nv_skb_map *next_tx_ctx ;
};

#line 727  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
struct fe_priv {
   spinlock_t lock ;
   struct net_device *dev ;
   struct napi_struct napi ;
   spinlock_t hwstats_lock ;
   struct nv_ethtool_stats estats ;
   int in_shutdown ;
   u32 linkspeed ;
   int duplex ;
   int autoneg ;
   int fixed_mode ;
   int phyaddr ;
   int wolenabled ;
   unsigned int phy_oui ;
   unsigned int phy_model ;
   unsigned int phy_rev ;
   u16 gigabit ;
   int intr_test ;
   int recover_error ;
   int quiet_count ;
   dma_addr_t ring_addr ;
   struct pci_dev *pci_dev ;
   u32 orig_mac[2U] ;
   u32 events ;
   u32 irqmask ;
   u32 desc_ver ;
   u32 txrxctl_bits ;
   u32 vlanctl_bits ;
   u32 driver_data ;
   u32 device_id ;
   u32 register_size ;
   u32 mac_in_use ;
   int mgmt_version ;
   int mgmt_sema ;
   void *base ;
   union ring_type get_rx ;
   union ring_type put_rx ;
   union ring_type first_rx ;
   union ring_type last_rx ;
   struct nv_skb_map *get_rx_ctx ;
   struct nv_skb_map *put_rx_ctx ;
   struct nv_skb_map *first_rx_ctx ;
   struct nv_skb_map *last_rx_ctx ;
   struct nv_skb_map *rx_skb ;
   union ring_type rx_ring ;
   unsigned int rx_buf_sz ;
   unsigned int pkt_limit ;
   struct timer_list oom_kick ;
   struct timer_list nic_poll ;
   struct timer_list stats_poll ;
   u32 nic_poll_irq ;
   int rx_ring_size ;
   struct u64_stats_sync swstats_rx_syncp ;
   u64 stat_rx_packets ;
   u64 stat_rx_bytes ;
   u64 stat_rx_missed_errors ;
   u64 stat_rx_dropped ;
   int need_linktimer ;
   unsigned long link_timeout ;
   union ring_type get_tx ;
   union ring_type put_tx ;
   union ring_type first_tx ;
   union ring_type last_tx ;
   struct nv_skb_map *get_tx_ctx ;
   struct nv_skb_map *put_tx_ctx ;
   struct nv_skb_map *first_tx_ctx ;
   struct nv_skb_map *last_tx_ctx ;
   struct nv_skb_map *tx_skb ;
   union ring_type tx_ring ;
   u32 tx_flags ;
   int tx_ring_size ;
   int tx_limit ;
   u32 tx_pkts_in_progress ;
   struct nv_skb_map *tx_change_owner ;
   struct nv_skb_map *tx_end_flip ;
   int tx_stop ;
   struct u64_stats_sync swstats_tx_syncp ;
   u64 stat_tx_packets ;
   u64 stat_tx_bytes ;
   u64 stat_tx_dropped ;
   u32 msi_flags ;
   struct msix_entry msi_x_entry[8U] ;
   u32 pause_flags ;
   u32 saved_config_space[385U] ;
   char name_rx[19U] ;
   char name_tx[19U] ;
   char name_other[22U] ;
};

#line 1205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
struct __anonstruct_ri_332 {
   int reg ;
   int init ;
};

#line 819  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
typedef int ldv_func_ret_type;

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
struct ldv_list_element {
   void *data ;
   struct ldv_list_element *next ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
typedef struct ldv_list_element *ldv_list_ptr;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef short s16;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_chan;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};

#line 151 
struct spi_message;

#line 152 
struct spi_transfer;

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_master *) ;
   int (*transfer_one_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_master *) ;
   int (*prepare_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_master *, struct spi_message *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_master *, struct spi_message *) ;
   int *cs_gpios ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
};

#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_transfer {
   void const *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cs_change : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) tx_nbits : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};

#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef unsigned long pthread_t;

#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};

#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct ldv_struct_free_irq_3 {
   int arg0 ;
   int signal_pending ;
};

#line 18  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_interrupt_scenario_13 {
   enum irqreturn (*arg2)(int , void *) ;
   enum irqreturn (*arg1)(int , void *) ;
   void *arg3 ;
   int arg0 ;
   int signal_pending ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_pci_scenario_12 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};

#line 31  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_random_allocationless_scenario_16 {
   struct net_device *arg0 ;
   int signal_pending ;
};

#line 36  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_timer_scenario_15 {
   struct timer_list *arg0 ;
   int signal_pending ;
};
unsigned short __builtin_bswap16(unsigned short);

void __builtin_prefetch(void const * , ...);

void __builtin_unreachable(void);


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/fvtp/.tmp_forcedeth.c"
void ldv_inline_asm(void);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
extern struct module __this_module;


#line 369  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/paravirt_types.h"
extern struct pv_irq_ops pv_irq_ops;


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void set_bit(long nr, unsigned long volatile *addr)
{
  
#line 74 
  if (0 != 0) 
#line 76 
              ldv_inline_asm(); else 
#line 79 
                                     ldv_inline_asm();
  
#line 80 
  return;
}


#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(long nr, unsigned long volatile *addr)
{
  int __retres;
  
#line 206 
  ldv_inline_asm();
  
#line 207 
  ldv_inline_asm();
  
#line 206 
  __retres = 0;
  
#line 206 
  goto return_label;
  cc_label: 
#line 206 
  ;
  
#line 206 
  __retres = 1;
  return_label: 
#line 206 
                return __retres;
}


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(long nr, unsigned long const volatile *addr)
{
  int __retres;
  
#line 311 
  __retres = ((*(addr + (nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL;
  
#line 311 
  return __retres;
}


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val)
{
  __u16 tmp;
  
#line 49 
  tmp = __builtin_bswap16((unsigned short)((int)val));
  
#line 49 
  return tmp;
}


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
int printk(char const * , ...);


#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
void __dynamic_dev_dbg(struct _ddebug *, struct device const *, char const * , ...);


#line 59 
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device const *, char const * , ...);


#line 402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int sprintf(char *, char const * , ...);


#line 474 
extern enum system_states system_state;


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
void __bad_percpu_size(void);


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-defs.h"
void __bad_size_call_parameter(void);


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bug.h"
void warn_slowpath_fmt(char const *, int const, char const * , ...);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_64.h"
unsigned long __phys_addr(unsigned long);


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memcpy(void *, void const *, size_t);


#line 56 
void *memset(void *, int, size_t);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
size_t strlcpy(char *, char const *, size_t);


#line 839  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/paravirt.h"
__inline static void arch_local_irq_disable(void)
{
  
#line 841 
  unsigned long __edi = __edi;
  
#line 841 
  unsigned long __esi = __esi;
  
#line 841 
  unsigned long __edx = __edx;
  
#line 841 
  unsigned long __ecx = __ecx;
  
#line 841 
  unsigned long __eax = __eax;
  
#line 841 
  if ((long)(pv_irq_ops.irq_disable.func == (void *)0) != 0L) {
    
#line 843 
    ldv_inline_asm();
    
#line 841 
    ;
  }
  else ;
  
#line 844 
  ldv_inline_asm();
  
#line 846 
  return;
}


#line 844  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/paravirt.h"
__inline static void arch_local_irq_enable(void)
{
  
#line 846 
  unsigned long __edi = __edi;
  
#line 846 
  unsigned long __esi = __esi;
  
#line 846 
  unsigned long __edx = __edx;
  
#line 846 
  unsigned long __ecx = __ecx;
  
#line 846 
  unsigned long __eax = __eax;
  
#line 846 
  if ((long)(pv_irq_ops.irq_enable.func == (void *)0) != 0L) {
    
#line 848 
    ldv_inline_asm();
    
#line 846 
    ;
  }
  else ;
  
#line 849 
  ldv_inline_asm();
  
#line 851 
  return;
}


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/irqflags.h"
void trace_hardirqs_on(void);


#line 21 
void trace_hardirqs_off(void);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const *v)
{
  int __retres;
  int const volatile *tmp;
  {
    
#line 27 
    int const __var = 0;
    
#line 27 
    tmp = (int const volatile *)(& v->counter);
  }
  
#line 27 
  __retres = *tmp;
  
#line 27 
  return __retres;
}


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  int __retres;
  int tmp;
  {
    int pfo_ret__;
    
#line 22 
    switch (4UL) {
      case (unsigned long)1: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      case (unsigned long)2: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      case (unsigned long)4: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      case (unsigned long)8: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      default: 
#line 22 
      ;
      
#line 22 
      __bad_percpu_size();
    }
    ldv_6320: 
#line 22 
    ;
    
#line 22 
    tmp = pfo_ret__;
  }
  
#line 22 
  __retres = tmp & 2147483647;
  
#line 22 
  return __retres;
}


#line 7  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
void __local_bh_disable_ip(unsigned long, unsigned int);


#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  __here_0: 
#line 18 
  ;
  
#line 18 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  
#line 20 
  return;
}


#line 22 
void __local_bh_enable_ip(unsigned long, unsigned int);


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  __here_0: 
#line 31 
  ;
  
#line 31 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  
#line 33 
  return;
}


#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock.h"
__inline static int queued_spin_is_locked(struct qspinlock *lock)
{
  int tmp;
  
#line 30 
  tmp = atomic_read((atomic_t const *)(& lock->val));
  
#line 30 
  return tmp;
}


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
void __raw_spin_lock_init(raw_spinlock_t *, char const *, struct lock_class_key *);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock(raw_spinlock_t *);


#line 30 
void _raw_spin_lock_bh(raw_spinlock_t *);


#line 31 
void _raw_spin_lock_irq(raw_spinlock_t *);


#line 39 
int _raw_spin_trylock(raw_spinlock_t *);


#line 41 
void _raw_spin_unlock(raw_spinlock_t *);


#line 42 
void _raw_spin_unlock_bh(raw_spinlock_t *);


#line 43 
void _raw_spin_unlock_irq(raw_spinlock_t *);


#line 45 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  raw_spinlock_t *__retres;
  
#line 301 
  __retres = & lock->__anonCompField_spinlock_18.rlock;
  
#line 301 
  return __retres;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 346 
static void ldv_spin_lock_60(spinlock_t *lock);


#line 350 
static void ldv_spin_lock_65(spinlock_t *lock);


#line 354 
static void ldv_spin_lock_67(spinlock_t *lock);


#line 358 
static void ldv_spin_lock_86(spinlock_t *lock);


#line 362 
static void ldv_spin_lock_130(spinlock_t *lock);


#line 366 
static void ldv_spin_lock_142(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_158(spinlock_t *lock);


#line 374 
static void ldv_spin_lock_160(spinlock_t *lock);


#line 378 
static void ldv_spin_lock_163(spinlock_t *lock);


#line 379  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  
#line 381 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 382 
  return;
}


#line 407 
static void ldv_spin_lock_bh_72(spinlock_t *lock);


#line 411 
static void ldv_spin_lock_bh_177(spinlock_t *lock);


#line 412  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static int spin_trylock(spinlock_t *lock)
{
  int tmp;
  
#line 414 
  tmp = _raw_spin_trylock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 414 
  return tmp;
}


#line 347 
static int ldv_spin_trylock_145(spinlock_t *lock);


#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_irq(spinlock_t *lock)
{
  
#line 350 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 351 
  return;
}


#line 366 
static void ldv_spin_lock_irq_84(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_irq_89(spinlock_t *lock);


#line 374 
static void ldv_spin_lock_irq_91(spinlock_t *lock);


#line 378 
static void ldv_spin_lock_irq_148(spinlock_t *lock);


#line 382 
static void ldv_spin_lock_irq_150(spinlock_t *lock);


#line 386 
static void ldv_spin_lock_irq_152(spinlock_t *lock);


#line 390 
static void ldv_spin_lock_irq_156(spinlock_t *lock);


#line 394 
static void ldv_spin_lock_irq_173(spinlock_t *lock);


#line 398 
static void ldv_spin_lock_irq_175(spinlock_t *lock);


#line 402 
static void ldv_spin_lock_irq_179(spinlock_t *lock);


#line 406 
static void ldv_spin_lock_irq_181(spinlock_t *lock);


#line 410 
static void ldv_spin_lock_irq_184(spinlock_t *lock);


#line 414 
static void ldv_spin_lock_irq_188(spinlock_t *lock);


#line 418 
static void ldv_spin_lock_irq_193(spinlock_t *lock);


#line 422 
static void ldv_spin_lock_irq_196(spinlock_t *lock);


#line 426 
static void ldv_spin_lock_irq_198(spinlock_t *lock);


#line 427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  
#line 429 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 430 
  return;
}


#line 459 
static void ldv_spin_unlock_63(spinlock_t *lock);


#line 463 
static void ldv_spin_unlock_66(spinlock_t *lock);


#line 467 
static void ldv_spin_unlock_70(spinlock_t *lock);


#line 471 
static void ldv_spin_unlock_88(spinlock_t *lock);


#line 475 
static void ldv_spin_unlock_131(spinlock_t *lock);


#line 479 
static void ldv_spin_unlock_144(spinlock_t *lock);


#line 483 
static void ldv_spin_unlock_146(spinlock_t *lock);


#line 487 
static void ldv_spin_unlock_159(spinlock_t *lock);


#line 491 
static void ldv_spin_unlock_162(spinlock_t *lock);


#line 495 
static void ldv_spin_unlock_164(spinlock_t *lock);


#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  
#line 498 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 499 
  return;
}


#line 524 
static void ldv_spin_unlock_bh_73(spinlock_t *lock);


#line 528 
static void ldv_spin_unlock_bh_178(spinlock_t *lock);


#line 529  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irq(spinlock_t *lock)
{
  
#line 531 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 532 
  return;
}


#line 545 
static void ldv_spin_unlock_irq_85(spinlock_t *lock);


#line 549 
static void ldv_spin_unlock_irq_90(spinlock_t *lock);


#line 553 
static void ldv_spin_unlock_irq_92(spinlock_t *lock);


#line 557 
static void ldv_spin_unlock_irq_149(spinlock_t *lock);


#line 561 
static void ldv_spin_unlock_irq_151(spinlock_t *lock);


#line 565 
static void ldv_spin_unlock_irq_153(spinlock_t *lock);


#line 569 
static void ldv_spin_unlock_irq_157(spinlock_t *lock);


#line 573 
static void ldv_spin_unlock_irq_174(spinlock_t *lock);


#line 577 
static void ldv_spin_unlock_irq_176(spinlock_t *lock);


#line 581 
static void ldv_spin_unlock_irq_180(spinlock_t *lock);


#line 585 
static void ldv_spin_unlock_irq_182(spinlock_t *lock);


#line 589 
static void ldv_spin_unlock_irq_187(spinlock_t *lock);


#line 593 
static void ldv_spin_unlock_irq_189(spinlock_t *lock);


#line 597 
static void ldv_spin_unlock_irq_194(spinlock_t *lock);


#line 601 
static void ldv_spin_unlock_irq_197(spinlock_t *lock);


#line 605 
static void ldv_spin_unlock_irq_199(spinlock_t *lock);


#line 606  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 608 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 609 
  return;
}


#line 638 
static void ldv_spin_unlock_irqrestore_75(spinlock_t *lock, unsigned long flags);


#line 642 
static void ldv_spin_unlock_irqrestore_76(spinlock_t *lock, unsigned long flags);


#line 646 
static void ldv_spin_unlock_irqrestore_78(spinlock_t *lock, unsigned long flags);


#line 650 
static void ldv_spin_unlock_irqrestore_80(spinlock_t *lock, unsigned long flags);


#line 654 
static void ldv_spin_unlock_irqrestore_81(spinlock_t *lock, unsigned long flags);


#line 658 
static void ldv_spin_unlock_irqrestore_83(spinlock_t *lock, unsigned long flags);


#line 662 
static void ldv_spin_unlock_irqrestore_94(spinlock_t *lock, unsigned long flags);


#line 666 
static void ldv_spin_unlock_irqrestore_97(spinlock_t *lock, unsigned long flags);


#line 670 
static void ldv_spin_unlock_irqrestore_99(spinlock_t *lock, unsigned long flags);


#line 674 
static void ldv_spin_unlock_irqrestore_101(spinlock_t *lock, unsigned long flags);


#line 678 
static void ldv_spin_unlock_irqrestore_104(spinlock_t *lock, unsigned long flags);


#line 682 
static void ldv_spin_unlock_irqrestore_106(spinlock_t *lock, unsigned long flags);


#line 686 
static void ldv_spin_unlock_irqrestore_108(spinlock_t *lock, unsigned long flags);


#line 690 
static void ldv_spin_unlock_irqrestore_111(spinlock_t *lock, unsigned long flags);


#line 694 
static void ldv_spin_unlock_irqrestore_114(spinlock_t *lock, unsigned long flags);


#line 698 
static void ldv_spin_unlock_irqrestore_117(spinlock_t *lock, unsigned long flags);


#line 702 
static void ldv_spin_unlock_irqrestore_119(spinlock_t *lock, unsigned long flags);


#line 706 
static void ldv_spin_unlock_irqrestore_121(spinlock_t *lock, unsigned long flags);


#line 710 
static void ldv_spin_unlock_irqrestore_123(spinlock_t *lock, unsigned long flags);


#line 714 
static void ldv_spin_unlock_irqrestore_126(spinlock_t *lock, unsigned long flags);


#line 718 
static void ldv_spin_unlock_irqrestore_129(spinlock_t *lock, unsigned long flags);


#line 722 
static void ldv_spin_unlock_irqrestore_155(spinlock_t *lock, unsigned long flags);


#line 726 
static void ldv_spin_unlock_irqrestore_166(spinlock_t *lock, unsigned long flags);


#line 730 
static void ldv_spin_unlock_irqrestore_167(spinlock_t *lock, unsigned long flags);


#line 734 
static void ldv_spin_unlock_irqrestore_168(spinlock_t *lock, unsigned long flags);


#line 738 
static void ldv_spin_unlock_irqrestore_169(spinlock_t *lock, unsigned long flags);


#line 742 
static void ldv_spin_unlock_irqrestore_170(spinlock_t *lock, unsigned long flags);


#line 746 
static void ldv_spin_unlock_irqrestore_172(spinlock_t *lock, unsigned long flags);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_int(void);


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
void __ldv_spin_lock(spinlock_t *);


#line 70 
static void ldv___ldv_spin_lock_74(spinlock_t *ldv_func_arg1);


#line 74 
static void ldv___ldv_spin_lock_77(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_79(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_82(spinlock_t *ldv_func_arg1);


#line 86 
static void ldv___ldv_spin_lock_93(spinlock_t *ldv_func_arg1);


#line 90 
static void ldv___ldv_spin_lock_95(spinlock_t *ldv_func_arg1);


#line 94 
static void ldv___ldv_spin_lock_98(spinlock_t *ldv_func_arg1);


#line 98 
static void ldv___ldv_spin_lock_100(spinlock_t *ldv_func_arg1);


#line 102 
static void ldv___ldv_spin_lock_102(spinlock_t *ldv_func_arg1);


#line 106 
static void ldv___ldv_spin_lock_105(spinlock_t *ldv_func_arg1);


#line 110 
static void ldv___ldv_spin_lock_107(spinlock_t *ldv_func_arg1);


#line 114 
static void ldv___ldv_spin_lock_109(spinlock_t *ldv_func_arg1);


#line 118 
static void ldv___ldv_spin_lock_112(spinlock_t *ldv_func_arg1);


#line 122 
static void ldv___ldv_spin_lock_115(spinlock_t *ldv_func_arg1);


#line 126 
static void ldv___ldv_spin_lock_118(spinlock_t *ldv_func_arg1);


#line 130 
static void ldv___ldv_spin_lock_120(spinlock_t *ldv_func_arg1);


#line 134 
static void ldv___ldv_spin_lock_122(spinlock_t *ldv_func_arg1);


#line 138 
static void ldv___ldv_spin_lock_124(spinlock_t *ldv_func_arg1);


#line 142 
static void ldv___ldv_spin_lock_127(spinlock_t *ldv_func_arg1);


#line 146 
static void ldv___ldv_spin_lock_154(spinlock_t *ldv_func_arg1);


#line 150 
static void ldv___ldv_spin_lock_165(spinlock_t *ldv_func_arg1);


#line 154 
static void ldv___ldv_spin_lock_171(spinlock_t *ldv_func_arg1);


#line 162 
void ldv_spin_model_lock(char *);


#line 163 
void ldv_spin_model_unlock(char *);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kmalloc(size_t size, gfp_t flags);


#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
extern unsigned long volatile jiffies;


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
void init_timer_key(struct timer_list *, unsigned int, char const *, struct lock_class_key *);


#line 173 
static int ldv_mod_timer_87(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 177 
static int ldv_mod_timer_96(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 181 
static int ldv_mod_timer_103(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 185 
static int ldv_mod_timer_110(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 189 
static int ldv_mod_timer_113(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 193 
static int ldv_mod_timer_116(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 197 
static int ldv_mod_timer_125(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 201 
static int ldv_mod_timer_128(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 205 
static int ldv_mod_timer_143(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 209 
static int ldv_mod_timer_147(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 213 
static int ldv_mod_timer_161(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 217 
static int ldv_mod_timer_183(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 221 
static int ldv_mod_timer_185(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 225 
static int ldv_mod_timer_186(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 232 
static int ldv_del_timer_sync_190(struct timer_list *ldv_func_arg1);


#line 236 
static int ldv_del_timer_sync_191(struct timer_list *ldv_func_arg1);


#line 240 
static int ldv_del_timer_sync_192(struct timer_list *ldv_func_arg1);


#line 252 
unsigned long round_jiffies(unsigned long);


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void const volatile *addr)
{
  unsigned int ret;
  
#line 59 
  ldv_inline_asm();
  
#line 58 
  return ret;
}


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void volatile *addr)
{
  
#line 68 
  ldv_inline_asm();
  
#line 69 
  return;
}


#line 181 
void *ioremap_nocache(resource_size_t, unsigned long);


#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void *ioremap(resource_size_t offset, unsigned long size)
{
  void *tmp;
  
#line 192 
  tmp = ioremap_nocache(offset,size);
  
#line 192 
  return tmp;
}


#line 195 
void iounmap(void volatile *);


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
__inline static char const *kobject_name(struct kobject const *kobj)
{
  char const *__retres;
  
#line 89 
  __retres = kobj->name;
  
#line 89 
  return __retres;
}


#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_wakeup.h"
int device_set_wakeup_enable(struct device *, bool);


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static char const *dev_name(struct device const *dev)
{
  char const *__retres;
  char const *tmp;
  
#line 836 
  if (dev->init_name != (char const *)0) {
    
#line 837 
    __retres = dev->init_name;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  tmp = kobject_name(& dev->kobj);
  
#line 839 
  __retres = tmp;
  return_label: 
#line 839 
                return __retres;
}


#line 864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 866 
  __retres = dev->driver_data;
  
#line 866 
  return __retres;
}


#line 869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  
#line 871 
  dev->driver_data = data;
  
#line 872 
  return;
}


#line 1083 
void dev_err(struct device const *, char const * , ...);


#line 1089 
void _dev_info(struct device const *, char const * , ...);


#line 424  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
long schedule_timeout_uninterruptible(long);


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
void kfree(void const *);


#line 418 
static void *kmalloc(size_t size, gfp_t flags);


#line 542 
static void *kcalloc(size_t n, size_t size, gfp_t flags);


#line 869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pci_bus_write_config_dword(struct pci_bus *, unsigned int, int, u32);


#line 904  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_write_config_dword(struct pci_dev const *dev, int where, u32 val)
{
  int tmp;
  
#line 907 
  tmp = pci_bus_write_config_dword(dev->bus,dev->devfn,where,val);
  
#line 907 
  return tmp;
}


#line 951 
int pci_enable_device(struct pci_dev *);


#line 968 
void pci_disable_device(struct pci_dev *);


#line 971 
void pci_set_master(struct pci_dev *);


#line 1040 
int pci_set_power_state(struct pci_dev *, pci_power_t);


#line 1046 
int pci_wake_from_d3(struct pci_dev *, bool);


#line 1094 
int pci_request_regions(struct pci_dev *, char const *);


#line 1096 
void pci_release_regions(struct pci_dev *);


#line 1146 
static int ldv___pci_register_driver_204(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3);


#line 1158 
static void ldv_pci_unregister_driver_205(struct pci_driver *ldv_func_arg1);


#line 945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page const *page)
{
  void *__retres;
  
#line 947 
  __retres = (void *)((unsigned long)((unsigned long long)(((long)page + 24189255811072L) / 64L) << 12) + 18446612132314218496UL);
  
#line 947 
  return __retres;
}


#line 1212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
void pci_disable_msi(struct pci_dev *);


#line 1216 
void pci_disable_msix(struct pci_dev *);


#line 1219 
int pci_enable_msi_range(struct pci_dev *, int, int);


#line 1220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_enable_msi_exact(struct pci_dev *dev, int nvec)
{
  int __retres;
  
#line 1222 
  int rc = pci_enable_msi_range(dev,nvec,nvec);
  
#line 1223 
  if (rc < 0) {
    
#line 1224 
    __retres = rc;
    
#line 1224 
    goto return_label;
  }
  else ;
  
#line 1225 
  __retres = 0;
  return_label: 
#line 1225 
                return __retres;
}


#line 1227 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  int __retres;
  
#line 76 
  __retres = (unsigned int)dma_direction <= 2U;
  
#line 76 
  return __retres;
}


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemcheck.h"
__inline static void kmemcheck_mark_initialized(void *address, unsigned int n)
{
  
#line 133 
  return;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-debug.h"
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t, bool);


#line 42 
void debug_dma_mapping_error(struct device *, dma_addr_t);


#line 44 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int, bool);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
extern struct dma_map_ops *dma_ops;


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  struct dma_map_ops *__retres;
  
#line 37 
  if ((long)(dev == (struct device *)0) != 0L || dev->archdata.dma_ops == (struct dma_map_ops *)0) {
    
#line 38 
    __retres = dma_ops;
    
#line 38 
    goto return_label;
  }
  else {
    
#line 40 
    __retres = dev->archdata.dma_ops;
    
#line 40 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  dma_addr_t addr;
  int tmp_0;
  unsigned long tmp_1;
  unsigned long tmp_2;
  
#line 15 
  struct dma_map_ops *ops_0 = get_dma_ops(dev);
  
#line 18 
  kmemcheck_mark_initialized(ptr,(unsigned int)size);
  
#line 19 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 19 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 21 
    ldv_inline_asm();
    
#line 19 
    ;
  }
  else ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  tmp_1 = __phys_addr((unsigned long)ptr);
  
#line 20 
  ;
  
#line 20 
  addr = (*(ops_0->map_page))(dev,(struct page *)(-24189255811072) + (tmp_1 >> 12),(unsigned long)ptr & 4095UL,size,dir,attrs);
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  tmp_2 = __phys_addr((unsigned long)ptr);
  
#line 23 
  ;
  
#line 23 
  debug_dma_map_page(dev,(struct page *)(-24189255811072) + (tmp_2 >> 12),(unsigned long)ptr & 4095UL,size,(int)dir,addr,(_Bool)1);
  
#line 26 
  return addr;
}


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  int tmp_0;
  
#line 34 
  struct dma_map_ops *ops_0 = get_dma_ops(dev);
  
#line 36 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 36 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 38 
    ldv_inline_asm();
    
#line 36 
    ;
  }
  else ;
  
#line 37 
  if (ops_0->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 38 
    (*(ops_0->unmap_page))(dev,addr,size,dir,attrs); else ;
  
#line 39 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)1);
  
#line 40 
  return;
}


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_page(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t addr;
  void *tmp_0;
  int tmp_1;
  
#line 80 
  struct dma_map_ops *ops_0 = get_dma_ops(dev);
  
#line 83 
  ;
  
#line 83 
  tmp_0 = lowmem_page_address((struct page const *)page);
  
#line 83 
  ;
  
#line 83 
  kmemcheck_mark_initialized(tmp_0 + offset,(unsigned int)size);
  
#line 84 
  tmp_1 = valid_dma_direction((int)dir);
  
#line 84 
  if ((long)(tmp_1 == 0) != 0L) {
    
#line 86 
    ldv_inline_asm();
    
#line 84 
    ;
  }
  else ;
  
#line 85 
  addr = (*(ops_0->map_page))(dev,page,offset,size,dir,(struct dma_attrs *)0);
  
#line 86 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr,(_Bool)0);
  
#line 88 
  return addr;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_page(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 94 
  struct dma_map_ops *ops_0 = get_dma_ops(dev);
  
#line 96 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 96 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 98 
    ldv_inline_asm();
    
#line 96 
    ;
  }
  else ;
  
#line 97 
  if (ops_0->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 98 
    (*(ops_0->unmap_page))(dev,addr,size,dir,(struct dma_attrs *)0); else ;
  
#line 99 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)0);
  
#line 100 
  return;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  int __retres;
  
#line 49 
  struct dma_map_ops *ops_0 = get_dma_ops(dev);
  
#line 50 
  debug_dma_mapping_error(dev,dma_addr);
  
#line 51 
  if (ops_0->mapping_error != (int (*)(struct device *, dma_addr_t ))0) {
    int tmp_0;
    
#line 52 
    tmp_0 = (*(ops_0->mapping_error))(dev,dma_addr);
    
#line 52 
    __retres = tmp_0;
    
#line 52 
    goto return_label;
  }
  else ;
  
#line 54 
  __retres = dma_addr == 0ULL;
  return_label: 
#line 54 
                return __retres;
}


#line 60 
int dma_supported(struct device *, u64);


#line 61 
int dma_set_mask(struct device *, u64);


#line 131 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, struct dma_attrs *);


#line 136 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, struct dma_attrs *);


#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_coherent_mask(struct device *dev, u64 mask)
{
  int __retres;
  int tmp;
  
#line 103 
  tmp = dma_supported(dev,mask);
  
#line 103 
  if (tmp == 0) {
    
#line 104 
    __retres = -5;
    
#line 104 
    goto return_label;
  }
  else ;
  
#line 105 
  dev->coherent_dma_mask = mask;
  
#line 106 
  __retres = 0;
  return_label: 
#line 106 
                return __retres;
}


#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void *pci_alloc_consistent(struct pci_dev *hwdev, size_t size, dma_addr_t *dma_handle)
{
  void *tmp_0;
  struct device *tmp;
  
#line 19 
  ;
  
#line 19 
  ;
  
#line 19 
  if (hwdev != (struct pci_dev *)0) 
#line 19 
                                    tmp = & hwdev->dev; else 
#line 19 
                                                             tmp = (struct device *)0;
  
#line 19 
  tmp_0 = dma_alloc_attrs(tmp,size,dma_handle,32U,(struct dma_attrs *)0);
  
#line 19 
  return tmp_0;
}


#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_free_consistent(struct pci_dev *hwdev, size_t size, void *vaddr, dma_addr_t dma_handle)
{
  struct device *tmp;
  
#line 34 
  ;
  
#line 34 
  ;
  
#line 34 
  ;
  
#line 34 
  if (hwdev != (struct pci_dev *)0) 
#line 34 
                                    tmp = & hwdev->dev; else 
#line 34 
                                                             tmp = (struct device *)0;
  
#line 34 
  dma_free_attrs(tmp,size,vaddr,dma_handle,(struct dma_attrs *)0);
  
#line 35 
  return;
}


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static dma_addr_t pci_map_single(struct pci_dev *hwdev, void *ptr, size_t size, int direction)
{
  dma_addr_t tmp_0;
  struct device *tmp;
  
#line 40 
  ;
  
#line 40 
  ;
  
#line 40 
  ;
  
#line 40 
  if (hwdev != (struct pci_dev *)0) 
#line 40 
                                    tmp = & hwdev->dev; else 
#line 40 
                                                             tmp = (struct device *)0;
  
#line 40 
  tmp_0 = dma_map_single_attrs(tmp,ptr,size,(enum dma_data_direction)direction,(struct dma_attrs *)0);
  
#line 40 
  return tmp_0;
}


#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_unmap_single(struct pci_dev *hwdev, dma_addr_t dma_addr, size_t size, int direction)
{
  struct device *tmp;
  
#line 47 
  ;
  
#line 47 
  ;
  
#line 47 
  ;
  
#line 47 
  if (hwdev != (struct pci_dev *)0) 
#line 47 
                                    tmp = & hwdev->dev; else 
#line 47 
                                                             tmp = (struct device *)0;
  
#line 47 
  dma_unmap_single_attrs(tmp,dma_addr,size,(enum dma_data_direction)direction,(struct dma_attrs *)0);
  
#line 48 
  return;
}


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static void pci_unmap_page(struct pci_dev *hwdev, dma_addr_t dma_address, size_t size, int direction)
{
  struct device *tmp;
  
#line 61 
  ;
  
#line 61 
  ;
  
#line 61 
  ;
  
#line 61 
  if (hwdev != (struct pci_dev *)0) 
#line 61 
                                    tmp = & hwdev->dev; else 
#line 61 
                                                             tmp = (struct device *)0;
  
#line 61 
  dma_unmap_page(tmp,dma_address,size,(enum dma_data_direction)direction);
  
#line 62 
  return;
}


#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_dma_mapping_error(struct pci_dev *pdev, dma_addr_t dma_addr)
{
  int tmp;
  
#line 109 
  tmp = dma_mapping_error(& pdev->dev,dma_addr);
  
#line 109 
  return tmp;
}


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  int tmp;
  
#line 115 
  tmp = dma_set_mask(& dev->dev,mask);
  
#line 115 
  return tmp;
}


#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  int tmp;
  
#line 120 
  tmp = dma_set_coherent_mask(& dev->dev,mask);
  
#line 120 
  return tmp;
}


#line 1471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  void *tmp;
  
#line 1473 
  tmp = dev_get_drvdata((struct device const *)(& pdev->dev));
  
#line 1473 
  return tmp;
}


#line 1476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  
#line 1478 
  dev_set_drvdata(& pdev->dev,data);
  
#line 1479 
  return;
}


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static char const *pci_name(struct pci_dev const *pdev)
{
  char const *tmp;
  
#line 1486 
  tmp = dev_name(& pdev->dev);
  
#line 1486 
  return tmp;
}


#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hardirq.h"
void synchronize_irq(unsigned int);


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_132(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 145 
static int ldv_request_irq_133(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 149 
static int ldv_request_irq_134(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 153 
static int ldv_request_irq_135(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 157 
static int ldv_request_irq_136(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 161 
static int ldv_request_irq_137(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 173 
static void ldv_free_irq_138(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 177 
static void ldv_free_irq_139(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 181 
static void ldv_free_irq_140(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 185 
static void ldv_free_irq_141(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 192 
void disable_irq(unsigned int);


#line 194 
void enable_irq(unsigned int);


#line 327  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
__inline static void disable_irq_lockdep(unsigned int irq)
{
  
#line 329 
  disable_irq(irq);
  
#line 331 
  arch_local_irq_disable();
  
#line 331 
  trace_hardirqs_off();
  
#line 332 
  return;
}


#line 335  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
__inline static void enable_irq_lockdep(unsigned int irq)
{
  
#line 338 
  trace_hardirqs_on();
  
#line 338 
  arch_local_irq_enable();
  
#line 340 
  enable_irq(irq);
  
#line 341 
  return;
}


#line 5  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/delay.h"
void __bad_udelay(void);


#line 8 
void __udelay(unsigned long);


#line 10 
void __const_udelay(unsigned long);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
void msleep(unsigned int);


#line 48 
void usleep_range(unsigned long, unsigned long);


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  
#line 74 
  if ((long)(count > 268435455U) != 0L) {
    
#line 76 
    ldv_inline_asm();
    
#line 74 
    ;
  }
  else ;
  
#line 76 
  dql->last_obj_cnt = count;
  
#line 77 
  ldv_inline_asm();
  
#line 85 
  dql->num_queued += count;
  
#line 86 
  return;
}


#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql const *dql)
{
  int __retres;
  unsigned int const volatile *tmp;
  unsigned int const volatile *tmp_0;
  {
    
#line 91 
    unsigned int const __var = 0U;
    
#line 91 
    tmp = (unsigned int const volatile *)(& dql->adj_limit);
  }
  {
    
#line 91 
    unsigned int const __var_0 = 0U;
    
#line 91 
    tmp_0 = (unsigned int const volatile *)(& dql->num_queued);
  }
  
#line 91 
  ;
  
#line 91 
  __retres = (int)(*tmp - *tmp_0);
  
#line 91 
  return __retres;
}


#line 95 
void dql_completed(struct dql *, unsigned int);


#line 98 
void dql_reset(struct dql *);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/random.h"
void get_random_bytes(void *, int);


#line 230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t const *frag)
{
  unsigned int __retres;
  
#line 232 
  __retres = frag->size;
  
#line 232 
  return __retres;
}


#line 772 
void kfree_skb(struct sk_buff *);


#line 775 
void consume_skb(struct sk_buff *);


#line 976  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 978 
  __retres = skb->head + skb->end;
  
#line 978 
  return __retres;
}


#line 1567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff const *skb)
{
  bool __retres;
  
#line 1569 
  __retres = (_Bool)(skb->data_len != 0U);
  
#line 1569 
  return __retres;
}


#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1574 
  __retres = skb->len - skb->data_len;
  
#line 1574 
  return __retres;
}


#line 1688 
unsigned char *skb_put(struct sk_buff *, unsigned int);


#line 1761  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_tailroom(struct sk_buff const *skb)
{
  int __retres;
  unsigned int tmp_0;
  bool tmp;
  
#line 1763 
  tmp = skb_is_nonlinear(skb);
  
#line 1763 
  if ((int)tmp == 0) 
#line 1763 
                     tmp_0 = skb->end - skb->tail; else 
#line 1763 
                                                        tmp_0 = 0U;
  
#line 1763 
  __retres = (int)tmp_0;
  
#line 1763 
  return __retres;
}


#line 2140 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);


#line 2156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  struct sk_buff *tmp;
  
#line 2159 
  tmp = __netdev_alloc_skb(dev,length,32U);
  
#line 2159 
  return tmp;
}


#line 2272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t const *frag)
{
  struct page *__retres;
  
#line 2274 
  __retres = frag->page.p;
  
#line 2274 
  return __retres;
}


#line 2390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t const *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t tmp_0;
  struct page *tmp;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  tmp = skb_frag_page(frag);
  
#line 2395 
  ;
  
#line 2395 
  tmp_0 = dma_map_page(dev,tmp,(unsigned long)frag->page_offset + offset,size,dir);
  
#line 2395 
  return tmp_0;
}


#line 2865 
void skb_clone_tx_timestamp(struct sk_buff *);


#line 2911 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);


#line 2914  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void sw_tx_timestamp(struct sk_buff *skb)
{
  unsigned char *tmp;
  
#line 2916 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 2916 
  ;
  
#line 2916 
  if (((int)((struct skb_shared_info *)tmp)->tx_flags & 2) != 0) {
    unsigned char *tmp_0;
    
#line 2917 
    tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2916 
    ;
    
#line 2916 
    if (((int)((struct skb_shared_info *)tmp_0)->tx_flags & 4) == 0) 
      
#line 2918 
      skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0); else ;
  }
  else ;
  
#line 2919 
  return;
}


#line 2933  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  
#line 2935 
  skb_clone_tx_timestamp(skb);
  
#line 2936 
  sw_tx_timestamp(skb);
  
#line 2937 
  return;
}


#line 3384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff const *skb)
{
  bool __retres;
  unsigned char *tmp;
  
#line 3386 
  tmp = skb_end_pointer(skb);
  
#line 3386 
  ;
  
#line 3386 
  __retres = (_Bool)((unsigned int)((struct skb_shared_info *)tmp)->gso_size != 0U);
  
#line 3386 
  return __retres;
}


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static void ethtool_cmd_speed_set(struct ethtool_cmd *ep, __u32 speed)
{
  
#line 117 
  ep->speed = (unsigned short)speed;
  
#line 118 
  ep->speed_hi = (unsigned short)(speed >> 16);
  
#line 119 
  return;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static __u32 ethtool_cmd_speed(struct ethtool_cmd const *ep)
{
  __u32 __retres;
  
#line 123 
  __retres = (unsigned int)(((int)ep->speed_hi << 16) | (int)ep->speed);
  
#line 123 
  return __retres;
}


#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
u32 ethtool_op_get_link(struct net_device *);


#line 86 
int ethtool_op_get_ts_info(struct net_device *, struct ethtool_ts_info *);


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  
#line 73 
  return;
}


#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
__inline static unsigned int u64_stats_fetch_begin_irq(struct u64_stats_sync const *syncp)
{
  unsigned int __retres;
  
#line 131 
  __retres = 0U;
  
#line 131 
  return __retres;
}


#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
__inline static bool u64_stats_fetch_retry_irq(struct u64_stats_sync const *syncp, unsigned int start)
{
  bool __retres;
  
#line 144 
  __retres = (_Bool)0;
  
#line 144 
  return __retres;
}


#line 391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void __napi_schedule(struct napi_struct *);


#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_disable_pending(struct napi_struct *n)
{
  bool __retres;
  int tmp;
  
#line 396 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& n->state));
  
#line 396 
  __retres = (_Bool)(tmp != 0);
  
#line 396 
  return __retres;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_schedule_prep(struct napi_struct *n)
{
  bool __retres;
  int tmp_2;
  int tmp_0;
  bool tmp;
  
#line 410 
  tmp = napi_disable_pending(n);
  
#line 410 
  if (tmp) 
#line 410 
           tmp_0 = 0; else 
#line 410 
                           tmp_0 = 1;
  
#line 410 
  if (tmp_0) {
    int tmp_1;
    
#line 410 
    tmp_1 = test_and_set_bit(0L,(unsigned long volatile *)(& n->state));
    
#line 410 
    if (tmp_1 == 0) 
#line 410 
                    tmp_2 = 1; else 
#line 410 
                                    tmp_2 = 0;
  }
  else 
#line 410 
       tmp_2 = 0;
  
#line 410 
  __retres = (_Bool)(tmp_2 != 0);
  
#line 410 
  return __retres;
}


#line 421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  bool tmp;
  
#line 423 
  tmp = napi_schedule_prep(n);
  
#line 423 
  if ((int)tmp != 0) 
#line 424 
                     __napi_schedule(n); else ;
  
#line 425 
  return;
}


#line 450 
void napi_complete_done(struct napi_struct *, int);


#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_complete(struct napi_struct *n)
{
  
#line 460 
  napi_complete_done(n,0);
  
#line 461 
  return;
}


#line 496 
void napi_disable(struct napi_struct *);


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  int tmp;
  
#line 507 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 507 
  if ((long)(tmp == 0) != 0L) {
    
#line 509 
    ldv_inline_asm();
    
#line 507 
    ;
  }
  else ;
  
#line 509 
  ldv_inline_asm();
  
#line 509 
  set_bit(0L,(unsigned long volatile *)(& n->state));
  
#line 510 
  return;
}


#line 1822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device const *dev, unsigned int index)
{
  struct netdev_queue *__retres;
  
#line 1825 
  __retres = dev->_tx + index;
  
#line 1825 
  return __retres;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device const *dev)
{
  void *__retres;
  
#line 1882 
  __retres = (void *)dev + 3008U;
  
#line 1882 
  return __retres;
}


#line 1911 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);


#line 2205 
static void ldv_free_netdev_201(struct net_device *ldv_func_arg1);


#line 2209 
static void ldv_free_netdev_203(struct net_device *ldv_func_arg1);


#line 2505 
void netif_schedule_queue(struct netdev_queue *);


#line 2515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  
#line 2517 
  set_bit(0L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2518 
  return;
}


#line 2526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_start_queue(struct net_device *dev)
{
  struct netdev_queue *tmp;
  
#line 2528 
  tmp = netdev_get_tx_queue((struct net_device const *)dev,0U);
  
#line 2528 
  netif_tx_start_queue(tmp);
  
#line 2529 
  return;
}


#line 2541 
void netif_tx_wake_queue(struct netdev_queue *);


#line 2550  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev)
{
  struct netdev_queue *tmp;
  
#line 2552 
  tmp = netdev_get_tx_queue((struct net_device const *)dev,0U);
  
#line 2552 
  netif_tx_wake_queue(tmp);
  
#line 2553 
  return;
}


#line 2645  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  int tmp;
  int tmp_0;
  
#line 2649 
  dql_queued(& dev_queue->dql,bytes);
  
#line 2651 
  tmp = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2651 
  if ((long)(tmp >= 0) != 0L) 
#line 2652 
                              goto return_label; else ;
  
#line 2654 
  set_bit(1L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2655 
  ldv_inline_asm();
  
#line 2664 
  tmp_0 = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2664 
  if ((long)(tmp_0 >= 0) != 0L) 
#line 2665 
                                set_bit(1L,(unsigned long volatile *)(& dev_queue->state)); else ;
  return_label: 
#line 2666 
                return;
}


#line 2678  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_sent_queue(struct net_device *dev, unsigned int bytes)
{
  struct netdev_queue *tmp;
  
#line 2680 
  ;
  
#line 2680 
  tmp = netdev_get_tx_queue((struct net_device const *)dev,0U);
  
#line 2680 
  netdev_tx_sent_queue(tmp,bytes);
  
#line 2681 
  return;
}


#line 2683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  int tmp;
  int tmp_0;
  
#line 2687 
  if ((long)(bytes == 0U) != 0L) 
#line 2688 
                                 goto return_label; else ;
  
#line 2690 
  dql_completed(& dev_queue->dql,bytes);
  
#line 2691 
  ldv_inline_asm();
  
#line 2699 
  tmp = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2699 
  if (tmp < 0) 
#line 2700 
               goto return_label; else ;
  
#line 2702 
  tmp_0 = test_and_set_bit(1L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2702 
  if (tmp_0 != 0) 
#line 2703 
                  netif_schedule_queue(dev_queue); else ;
  return_label: 
#line 2704 
                return;
}


#line 2717  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_completed_queue(struct net_device *dev, unsigned int pkts, unsigned int bytes)
{
  struct netdev_queue *tmp;
  
#line 2720 
  ;
  
#line 2720 
  ;
  
#line 2720 
  tmp = netdev_get_tx_queue((struct net_device const *)dev,0U);
  
#line 2720 
  netdev_tx_completed_queue(tmp,pkts,bytes);
  
#line 2721 
  return;
}


#line 2723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  
#line 2726 
  set_bit(1L,(unsigned long volatile *)(& q->state));
  
#line 2727 
  dql_reset(& q->dql);
  
#line 2728 
  return;
}


#line 2738  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_reset_queue(struct net_device *dev_queue)
{
  struct netdev_queue *tmp;
  
#line 2740 
  tmp = netdev_get_tx_queue((struct net_device const *)dev_queue,0U);
  
#line 2740 
  netdev_tx_reset_queue(tmp);
  
#line 2741 
  return;
}


#line 2769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 2771 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev->state));
  
#line 2771 
  __retres = (_Bool)(tmp != 0);
  
#line 2771 
  return __retres;
}


#line 2900 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);


#line 2931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  
#line 2933 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  
#line 2934 
  return;
}


#line 2948 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);


#line 3038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 3040 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& dev->state));
  
#line 3040 
  __retres = (_Bool)(tmp == 0);
  
#line 3040 
  return __retres;
}


#line 3047 
void netif_carrier_on(struct net_device *);


#line 3049 
void netif_carrier_off(struct net_device *);


#line 3117 
void netif_device_detach(struct net_device *);


#line 3119 
void netif_device_attach(struct net_device *);


#line 3170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  
#line 3172 
  ldv_spin_lock_60(& txq->_xmit_lock);
  
#line 3173 
  txq->xmit_lock_owner = cpu;
  
#line 3174 
  return;
}


#line 3190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  
#line 3192 
  txq->xmit_lock_owner = -1;
  
#line 3193 
  ldv_spin_unlock_63(& txq->_xmit_lock);
  
#line 3194 
  return;
}


#line 3214  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_lock(struct net_device *dev)
{
  unsigned int i;
  int cpu;
  int tmp_3;
  
#line 3219 
  ldv_spin_lock_65(& dev->tx_global_lock);
  {
    int pscr_ret__;
    {
      
#line 3220 
      void const *__vpp_verify = (void const *)0;
      
#line 3220 
      void const *tmp = __vpp_verify;
    }
    
#line 3220 
    switch (4UL) {
      int tmp_0;
      int tmp_0_0;
      int tmp_1;
      int tmp_2;
      case (unsigned long)1: 
#line 3220 
      ;
      {
        int pfo_ret__;
        
#line 3220 
        switch (4UL) {
          case (unsigned long)1: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_46033;
          case (unsigned long)2: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_46033;
          case (unsigned long)4: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_46033;
          case (unsigned long)8: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_46033;
          default: 
#line 3220 
          ;
          
#line 3220 
          __bad_percpu_size();
        }
        ldv_46033: 
#line 3220 
        ;
        
#line 3220 
        tmp_0 = pfo_ret__;
      }
      
#line 3220 
      pscr_ret__ = tmp_0;
      
#line 3220 
      goto ldv_46039;
      case (unsigned long)2: 
#line 3220 
      ;
      {
        int pfo_ret___0;
        
#line 3220 
        switch (4UL) {
          case (unsigned long)1: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_46043;
          case (unsigned long)2: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_46043;
          case (unsigned long)4: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_46043;
          case (unsigned long)8: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_46043;
          default: 
#line 3220 
          ;
          
#line 3220 
          __bad_percpu_size();
        }
        ldv_46043: 
#line 3220 
        ;
        
#line 3220 
        tmp_0_0 = pfo_ret___0;
      }
      
#line 3220 
      pscr_ret__ = tmp_0_0;
      
#line 3220 
      goto ldv_46039;
      case (unsigned long)4: 
#line 3220 
      ;
      {
        int pfo_ret___1;
        
#line 3220 
        switch (4UL) {
          case (unsigned long)1: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_46052;
          case (unsigned long)2: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_46052;
          case (unsigned long)4: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_46052;
          case (unsigned long)8: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_46052;
          default: 
#line 3220 
          ;
          
#line 3220 
          __bad_percpu_size();
        }
        ldv_46052: 
#line 3220 
        ;
        
#line 3220 
        tmp_1 = pfo_ret___1;
      }
      
#line 3220 
      pscr_ret__ = tmp_1;
      
#line 3220 
      goto ldv_46039;
      case (unsigned long)8: 
#line 3220 
      ;
      {
        int pfo_ret___2;
        
#line 3220 
        switch (4UL) {
          case (unsigned long)1: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_46061;
          case (unsigned long)2: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_46061;
          case (unsigned long)4: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_46061;
          case (unsigned long)8: 
#line 3220 
          ;
          
#line 3221 
          ldv_inline_asm();
          
#line 3220 
          goto ldv_46061;
          default: 
#line 3220 
          ;
          
#line 3220 
          __bad_percpu_size();
        }
        ldv_46061: 
#line 3220 
        ;
        
#line 3220 
        tmp_2 = pfo_ret___2;
      }
      
#line 3220 
      pscr_ret__ = tmp_2;
      
#line 3220 
      goto ldv_46039;
      default: 
#line 3220 
      ;
      
#line 3220 
      __bad_size_call_parameter();
      
#line 3220 
      goto ldv_46039;
    }
    ldv_46039: 
#line 3220 
    ;
    
#line 3220 
    tmp_3 = pscr_ret__;
  }
  
#line 3220 
  cpu = tmp_3;
  
#line 3221 
  i = 0U;
  
#line 3221 
  goto ldv_46071;
  ldv_46070: 
#line 3222 
  ;
  {
    
#line 3222 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 3230 
    __netif_tx_lock(txq,cpu);
    
#line 3231 
    set_bit(2L,(unsigned long volatile *)(& txq->state));
    
#line 3232 
    __netif_tx_unlock(txq);
  }
  
#line 3221 
  i += 1U;
  ldv_46071: 
#line 3222 
  ;
  
#line 3221 
  if (dev->num_tx_queues > i) 
#line 3223 
                              goto ldv_46070; else 
#line 3226 
                                                   goto ldv_46072;
  ldv_46072: 
#line 3227 
  ;
  
#line 3228 
  return;
}


#line 3236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_lock_bh(struct net_device *dev)
{
  
#line 3238 
  local_bh_disable();
  
#line 3239 
  netif_tx_lock(dev);
  
#line 3240 
  return;
}


#line 3242  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_unlock(struct net_device *dev)
{
  unsigned int i;
  
#line 3246 
  i = 0U;
  
#line 3246 
  goto ldv_46082;
  ldv_46081: 
#line 3247 
  ;
  {
    
#line 3247 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 3253 
    set_bit(2L,(unsigned long volatile *)(& txq->state));
    
#line 3254 
    netif_schedule_queue(txq);
  }
  
#line 3246 
  i += 1U;
  ldv_46082: 
#line 3247 
  ;
  
#line 3246 
  if (dev->num_tx_queues > i) 
#line 3248 
                              goto ldv_46081; else 
#line 3251 
                                                   goto ldv_46083;
  ldv_46083: 
#line 3252 
  ;
  
#line 3256 
  ldv_spin_unlock_66(& dev->tx_global_lock);
  
#line 3257 
  return;
}


#line 3259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_unlock_bh(struct net_device *dev)
{
  
#line 3261 
  netif_tx_unlock(dev);
  
#line 3262 
  local_bh_enable();
  
#line 3263 
  return;
}


#line 3299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_addr_lock(struct net_device *dev)
{
  
#line 3301 
  ldv_spin_lock_67(& dev->addr_list_lock);
  
#line 3302 
  return;
}


#line 3319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_addr_unlock(struct net_device *dev)
{
  
#line 3321 
  ldv_spin_unlock_70(& dev->addr_list_lock);
  
#line 3322 
  return;
}


#line 3355 
static int ldv_register_netdev_200(struct net_device *ldv_func_arg1);


#line 3360 
static void ldv_unregister_netdev_202(struct net_device *ldv_func_arg1);


#line 3830 
void netdev_warn(struct net_device const *, char const * , ...);


#line 3834 
void netdev_info(struct net_device const *, char const * , ...);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__be16 eth_type_trans(struct sk_buff *, struct net_device *);


#line 47 
int eth_validate_addr(struct net_device *);


#line 53 
static struct net_device *ldv_alloc_etherdev_mqs_195(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 96 
  __retres = (_Bool)((*((u32 const *)addr) | (unsigned int)*((u16 const *)(addr + 4U))) == 0U);
  
#line 96 
  return __retres;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 114 
  u32 a = *((u32 const *)addr);
  
#line 121 
  __retres = (_Bool)((a & 1U) != 0U);
  
#line 121 
  return __retres;
}


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_3;
  int tmp_0;
  bool tmp;
  
#line 190 
  tmp = is_multicast_ether_addr(addr);
  
#line 190 
  if (tmp) 
#line 190 
           tmp_0 = 0; else 
#line 190 
                           tmp_0 = 1;
  
#line 190 
  if (tmp_0) {
    int tmp_2;
    bool tmp_1;
    
#line 190 
    tmp_1 = is_zero_ether_addr(addr);
    
#line 190 
    if (tmp_1) 
#line 190 
               tmp_2 = 0; else 
#line 190 
                               tmp_2 = 1;
    
#line 190 
    if (tmp_2) 
#line 190 
               tmp_3 = 1; else 
#line 190 
                               tmp_3 = 0;
  }
  else 
#line 190 
       tmp_3 = 0;
  
#line 190 
  __retres = (_Bool)(tmp_3 != 0);
  
#line 190 
  return __retres;
}


#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  
#line 220 
  get_random_bytes((void *)addr,6);
  
#line 221 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  
#line 222 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  
#line 223 
  return;
}


#line 258  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static void eth_hw_addr_random(struct net_device *dev)
{
  
#line 260 
  dev->addr_assign_type = (unsigned char)1U;
  
#line 261 
  eth_random_addr(dev->dev_addr);
  
#line 262 
  return;
}


#line 409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  
#line 412 
  skb->vlan_proto = vlan_proto;
  
#line 413 
  skb->vlan_tci = (unsigned short)((unsigned int)vlan_tci | 4096U);
  
#line 414 
  return;
}


#line 609  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static struct nv_ethtool_str const nv_estats_str[33U] = {{.name = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'z', (char)'e', (char)'r', (char)'o', (char)'_', (char)'r', (char)'e', (char)'x', (char)'m', (char)'t', (char)'\000'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'o', (char)'n', (char)'e', (char)'_', (char)'r', (char)'e', (char)'x', (char)'m', (char)'t', (char)'\000'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'a', (char)'n', (char)'y', (char)'_', (char)'r', (char)'e', (char)'x', (char)'m', (char)'t', (char)'\000'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'l', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'\000'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'x', (char)'c', (char)'e', (char)'s', (char)'s', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'a', (char)'l', (char)'\000'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'r', (char)'e', (char)'t', (char)'r', (char)'y', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'x', (char)'t', (char)'r', (char)'a', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'r', (char)'u', (char)'n', (char)'t', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'t', (char)'o', (char)'o', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'\000'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'_', (char)'t', (char)'o', (char)'t', (char)'a', (char)'l', (char)'\000'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'a', (char)'l', (char)'\000'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'u', (char)'s', (char)'e', (char)'\000'}}, {.name = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'\000'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}}, {.name = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}}};

#line 697  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static struct nv_ethtool_str const nv_etests_str[4U] = {{.name = {(char)'l', (char)'i', (char)'n', (char)'k', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'n', (char)'l', (char)'i', (char)'n', (char)'e', (char)'/', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}}, {.name = {(char)'r', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}}, {.name = {(char)'i', (char)'n', (char)'t', (char)'e', (char)'r', (char)'r', (char)'u', (char)'p', (char)'t', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}}, {.name = {(char)'l', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}}};

#line 709  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static struct register_test const nv_registers_test[7U] = {{.reg = 8U, .mask = 1U}, {.reg = 128U, .mask = 60U}, {.reg = 144U, .mask = 1023U}, {.reg = 176U, .mask = 4294967295U}, {.reg = 316U, .mask = 255U}, {.reg = 512U, .mask = 30583U}, {.reg = 0U, .mask = 0U}};

#line 865  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int max_interrupt_work = 4;

#line 878  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int optimization_mode = 2;

#line 887  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int poll_interval = -1;

#line 896  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int msi = 1;

#line 905  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int msix = 1;

#line 914  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int dma_64bit = 1;

#line 919  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static bool debug_tx_timeout = (_Bool)0;

#line 929  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int phy_cross = 0;

#line 935  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int phy_power_down;

#line 937  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static struct fe_priv *get_nvpriv(struct net_device *dev)
{
  struct fe_priv *tmp;
  
#line 939 
  tmp = (struct fe_priv *)netdev_priv((struct net_device const *)dev);
  
#line 939 
  return tmp;
}


#line 942  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static u8 *get_hwbase(struct net_device *dev)
{
  u8 *__retres;
  void *tmp;
  
#line 944 
  tmp = netdev_priv((struct net_device const *)dev);
  
#line 944 
  __retres = (u8 *)((struct fe_priv *)tmp)->base;
  
#line 944 
  return __retres;
}


#line 947  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static void pci_push(u8 *base)
{
  
#line 950 
  readl((void const volatile *)base);
  
#line 951 
  return;
}


#line 953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static u32 nv_descr_getlength(struct ring_desc *prd, u32 v)
{
  u32 __retres;
  unsigned int tmp;
  
#line 956 
  if (v == 1U) 
#line 956 
               tmp = 65535U; else 
#line 956 
                                  tmp = 16383U;
  
#line 955 
  ;
  
#line 956 
  __retres = prd->flaglen & tmp;
  
#line 956 
  return __retres;
}


#line 959  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static u32 nv_descr_getlength_ex(struct ring_desc_ex *prd, u32 v)
{
  u32 __retres;
  
#line 961 
  __retres = prd->flaglen & 16383U;
  
#line 961 
  return __retres;
}


#line 964  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static bool nv_optimized(struct fe_priv *np)
{
  bool __retres;
  
#line 966 
  if (np->desc_ver + 4294967295U <= 1U) {
    
#line 967 
    __retres = (_Bool)0;
    
#line 967 
    goto return_label;
  }
  else ;
  
#line 968 
  __retres = (_Bool)1;
  return_label: 
#line 968 
                return __retres;
}


#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int reg_delay(struct net_device *dev, int offset, u32 mask, u32 target, int delay, int delaymax)
{
  int __retres;
  unsigned int tmp_0;
  
#line 974 
  u8 *base = get_hwbase(dev);
  
#line 976 
  pci_push(base);
  ldv_47738: 
#line 977 
  ;
  
#line 978 
  if (0 != 0) 
    
#line 978 
    if (delay > 19999) 
#line 978 
                       __bad_udelay(); else 
#line 978 
                                            __const_udelay((unsigned long)delay * 4295UL);
  else 
#line 978 
       __udelay((unsigned long)delay);
  
#line 979 
  delaymax -= delay;
  
#line 980 
  if (delaymax < 0) {
    
#line 981 
    __retres = 1;
    
#line 981 
    goto return_label;
  }
  else ;
  
#line 982 
  tmp_0 = readl((void const volatile *)(base + offset));
  
#line 982 
  ;
  
#line 982 
  if ((tmp_0 & mask) != target) 
#line 984 
                                goto ldv_47738; else 
#line 987 
                                                     goto ldv_47739;
  ldv_47739: 
#line 988 
  ;
  
#line 983 
  __retres = 0;
  return_label: 
#line 983 
                return __retres;
}


#line 989  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static u32 dma_low(dma_addr_t addr)
{
  u32 __retres;
  
#line 991 
  __retres = (unsigned int)addr;
  
#line 991 
  return __retres;
}


#line 994  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static u32 dma_high(dma_addr_t addr)
{
  u32 __retres;
  
#line 996 
  __retres = (unsigned int)(addr >> 32);
  
#line 996 
  return __retres;
}


#line 999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void setup_hw_rings(struct net_device *dev, int rxtx_flags)
{
  int tmp_8;
  bool tmp_7;
  
#line 1001 
  struct fe_priv *np = get_nvpriv(dev);
  
#line 1002 
  u8 *base = get_hwbase(dev);
  
#line 1004 
  tmp_7 = nv_optimized(np);
  
#line 1004 
  if (tmp_7) 
#line 1004 
             tmp_8 = 0; else 
#line 1004 
                             tmp_8 = 1;
  
#line 1004 
  if (tmp_8) {
    
#line 1005 
    if ((rxtx_flags & 1) != 0) {
      u32 tmp_1;
      
#line 1006 
      ;
      
#line 1006 
      tmp_1 = dma_low(np->ring_addr);
      
#line 1006 
      writel(tmp_1,(void volatile *)(base + 260U));
    }
    else ;
    
#line 1007 
    if ((rxtx_flags & 2) != 0) {
      u32 tmp_2;
      
#line 1008 
      ;
      
#line 1008 
      tmp_2 = dma_low(np->ring_addr + (unsigned long long)((unsigned long)np->rx_ring_size * 8UL));
      
#line 1008 
      writel(tmp_2,(void volatile *)(base + 256U));
    }
    else ;
  }
  else {
    
#line 1010 
    if ((rxtx_flags & 1) != 0) {
      u32 tmp_3;
      u32 tmp_4;
      
#line 1011 
      ;
      
#line 1011 
      tmp_3 = dma_low(np->ring_addr);
      
#line 1011 
      writel(tmp_3,(void volatile *)(base + 260U));
      
#line 1012 
      ;
      
#line 1012 
      tmp_4 = dma_high(np->ring_addr);
      
#line 1012 
      writel(tmp_4,(void volatile *)(base + 332U));
    }
    else ;
    
#line 1014 
    if ((rxtx_flags & 2) != 0) {
      u32 tmp_5;
      u32 tmp_6;
      
#line 1015 
      ;
      
#line 1015 
      tmp_5 = dma_low(np->ring_addr + (unsigned long long)((unsigned long)np->rx_ring_size * 16UL));
      
#line 1015 
      writel(tmp_5,(void volatile *)(base + 256U));
      
#line 1016 
      ;
      
#line 1016 
      tmp_6 = dma_high(np->ring_addr + (unsigned long long)((unsigned long)np->rx_ring_size * 16UL));
      
#line 1016 
      writel(tmp_6,(void volatile *)(base + 328U));
    }
    else ;
  }
  
#line 1019 
  return;
}


#line 1021  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void free_rings(struct net_device *dev)
{
  int tmp_1;
  bool tmp_0;
  
#line 1023 
  struct fe_priv *np = get_nvpriv(dev);
  
#line 1025 
  tmp_0 = nv_optimized(np);
  
#line 1025 
  if (tmp_0) 
#line 1025 
             tmp_1 = 0; else 
#line 1025 
                             tmp_1 = 1;
  
#line 1025 
  if (tmp_1) {
    
#line 1026 
    if (np->rx_ring.orig != (struct ring_desc *)0) 
#line 1027 
                                                   pci_free_consistent(np->pci_dev,(unsigned long)(np->rx_ring_size + np->tx_ring_size) * 8UL,(void *)np->rx_ring.orig,np->ring_addr); else ;
  }
  else 
    
#line 1030 
    if (np->rx_ring.ex != (struct ring_desc_ex *)0) 
#line 1031 
                                                    pci_free_consistent(np->pci_dev,(unsigned long)(np->rx_ring_size + np->tx_ring_size) * 16UL,(void *)np->rx_ring.ex,np->ring_addr); else ;
  
#line 1034 
  kfree((void const *)np->rx_skb);
  
#line 1035 
  kfree((void const *)np->tx_skb);
  
#line 1036 
  return;
}


#line 1038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int using_multi_irqs(struct net_device *dev)
{
  int __retres;
  
#line 1040 
  struct fe_priv *np = get_nvpriv(dev);
  
#line 1042 
  if ((np->msi_flags & 128U) == 0U || (np->msi_flags & 15U) == 1U) {
    
#line 1045 
    __retres = 0;
    
#line 1045 
    goto return_label;
  }
  else {
    
#line 1047 
    __retres = 1;
    
#line 1047 
    goto return_label;
  }
  return_label: 
#line 1042 
                return __retres;
}


#line 1050  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_txrx_gate(struct net_device *dev, bool gate)
{
  u32 powerstate;
  
#line 1052 
  struct fe_priv *np = get_nvpriv(dev);
  
#line 1053 
  u8 *base = get_hwbase(dev);
  
#line 1056 
  if (np->mac_in_use == 0U && (np->driver_data & 256U) != 0U) {
    
#line 1058 
    powerstate = readl((void const volatile *)(base + 1536U));
    
#line 1059 
    if ((int)gate != 0) 
#line 1060 
                        powerstate |= 3840U; else 
#line 1062 
                                                  powerstate &= 4294963455U;
    
#line 1063 
    writel(powerstate,(void volatile *)(base + 1536U));
  }
  else ;
  
#line 1065 
  return;
}


#line 1067  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_enable_irq(struct net_device *dev)
{
  int tmp_0;
  
#line 1069 
  struct fe_priv *np = get_nvpriv(dev);
  
#line 1071 
  tmp_0 = using_multi_irqs(dev);
  
#line 1071 
  if (tmp_0 == 0) 
    
#line 1072 
    if ((np->msi_flags & 128U) != 0U) 
#line 1073 
                                      enable_irq(np->msi_x_entry[0].vector); else 
                                                                    
#line 1075 
                                                                    enable_irq((np->pci_dev)->irq);
  else {
    
#line 1077 
    enable_irq(np->msi_x_entry[0].vector);
    
#line 1078 
    enable_irq(np->msi_x_entry[1].vector);
    
#line 1079 
    enable_irq(np->msi_x_entry[2].vector);
  }
  
#line 1081 
  return;
}


#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_disable_irq(struct net_device *dev)
{
  int tmp_0;
  
#line 1085 
  struct fe_priv *np = get_nvpriv(dev);
  
#line 1087 
  tmp_0 = using_multi_irqs(dev);
  
#line 1087 
  if (tmp_0 == 0) 
    
#line 1088 
    if ((np->msi_flags & 128U) != 0U) 
#line 1089 
                                      disable_irq(np->msi_x_entry[0].vector); else 
                                                                    
#line 1091 
                                                                    disable_irq((np->pci_dev)->irq);
  else {
    
#line 1093 
    disable_irq(np->msi_x_entry[0].vector);
    
#line 1094 
    disable_irq(np->msi_x_entry[1].vector);
    
#line 1095 
    disable_irq(np->msi_x_entry[2].vector);
  }
  
#line 1097 
  return;
}


#line 1100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_enable_hw_interrupts(struct net_device *dev, u32 mask)
{
  
#line 1102 
  u8 *base = get_hwbase(dev);
  
#line 1104 
  writel(mask,(void volatile *)(base + 4U));
  
#line 1105 
  return;
}


#line 1107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_disable_hw_interrupts(struct net_device *dev, u32 mask)
{
  
#line 1109 
  struct fe_priv *np = get_nvpriv(dev);
  
#line 1110 
  u8 *base = get_hwbase(dev);
  
#line 1112 
  if ((np->msi_flags & 128U) != 0U) 
#line 1113 
                                    writel(mask,(void volatile *)(base + 4U));
  else {
    
#line 1115 
    if ((np->msi_flags & 64U) != 0U) 
#line 1116 
                                     writel(0U,(void volatile *)(base + 48U)); else ;
    
#line 1117 
    writel(0U,(void volatile *)(base + 4U));
  }
  
#line 1119 
  return;
}


#line 1121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_napi_enable(struct net_device *dev)
{
  
#line 1123 
  struct fe_priv *np = get_nvpriv(dev);
  
#line 1125 
  napi_enable(& np->napi);
  
#line 1126 
  return;
}


#line 1128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_napi_disable(struct net_device *dev)
{
  
#line 1130 
  struct fe_priv *np = get_nvpriv(dev);
  
#line 1132 
  napi_disable(& np->napi);
  
#line 1133 
  return;
}


#line 1140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int mii_rw(struct net_device *dev, int addr, int miireg, int value)
{
  u32 reg;
  int retval;
  int tmp_2;
  
#line 1142 
  u8 *base = get_hwbase(dev);
  
#line 1146 
  writel(7U,(void volatile *)(base + 384U));
  
#line 1148 
  reg = readl((void const volatile *)(base + 400U));
  
#line 1149 
  if ((reg & 32768U) != 0U) {
    
#line 1150 
    writel(32768U,(void volatile *)(base + 400U));
    
#line 1151 
    __const_udelay(214750UL);
  }
  else ;
  
#line 1154 
  reg = (unsigned int)((addr << 5) | miireg);
  
#line 1155 
  if (value != -1) {
    
#line 1156 
    writel((unsigned int)value,(void volatile *)(base + 404U));
    
#line 1157 
    reg |= 1024U;
  }
  else ;
  
#line 1159 
  writel(reg,(void volatile *)(base + 400U));
  
#line 1161 
  tmp_2 = reg_delay(dev,400,32768U,0U,10,10000);
  
#line 1161 
  if (tmp_2 != 0) 
#line 1163 
                  retval = -1;
  else 
    
#line 1164 
    if (value != -1) 
#line 1166 
                     retval = 0;
    else {
      unsigned int tmp_1;
      
#line 1167 
      tmp_1 = readl((void const volatile *)(base + 384U));
      
#line 1167 
      if ((tmp_1 & 1U) != 0U) 
#line 1168 
                              retval = -1;
      else {
        unsigned int tmp_0;
        
#line 1170 
        tmp_0 = readl((void const volatile *)(base + 404U));
        
#line 1170 
        retval = (int)tmp_0;
      }
    }
  
#line 1173 
  return retval;
}


#line 1176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int phy_reset(struct net_device *dev, u32 bmcr_setup)
{
  int __retres;
  u32 miicontrol;
  int tmp_0;
  int tmp_1;
  unsigned int tmp_2;
  
#line 1178 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 1180 
  unsigned int tries = 0U;
  
#line 1182 
  miicontrol = bmcr_setup | 32768U;
  
#line 1183 
  tmp_0 = mii_rw(dev,np->phyaddr,0,(int)miicontrol);
  
#line 1183 
  if (tmp_0 != 0) {
    
#line 1184 
    __retres = -1;
    
#line 1184 
    goto return_label;
  }
  else ;
  
#line 1187 
  msleep(500U);
  
#line 1190 
  goto ldv_47811;
  ldv_47810: 
#line 1191 
  ;
  
#line 1191 
  usleep_range(10000UL,20000UL);
  
#line 1192 
  tmp_1 = mii_rw(dev,np->phyaddr,0,-1);
  
#line 1192 
  miicontrol = (unsigned int)tmp_1;
  
#line 1194 
  tmp_2 = tries;
  
#line 1194 
  tries += 1U;
  
#line 1194 
  ;
  
#line 1194 
  if (tmp_2 > 100U) {
    
#line 1195 
    __retres = -1;
    
#line 1195 
    goto return_label;
  }
  else ;
  ldv_47811: 
#line 1196 
  ;
  
#line 1190 
  if ((miicontrol & 32768U) != 0U) 
#line 1192 
                                   goto ldv_47810; else 
#line 1195 
                                                        goto ldv_47812;
  ldv_47812: 
#line 1196 
  ;
  
#line 1197 
  __retres = 0;
  return_label: 
#line 1197 
                return __retres;
}


#line 1200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int init_realtek_8211b(struct net_device *dev, struct fe_priv *np)
{
  int __retres;
  int i;
  int tmp;
  
#line 1205 
  struct __anonstruct_ri_332 const ri[7U] = {{.reg = 31, .init = 0}, {.reg = 25, .init = 36352}, {.reg = 31, .init = 1}, {.reg = 19, .init = 44311}, {.reg = 20, .init = 64340}, {.reg = 24, .init = 62919}, {.reg = 31, .init = 0}};
  
#line 1216 
  i = 0;
  
#line 1216 
  goto ldv_47826;
  ldv_47825: 
#line 1217 
  ;
  
#line 1217 
  tmp = mii_rw(dev,np->phyaddr,ri[i].reg,ri[i].init);
  
#line 1217 
  if (tmp != 0) {
    
#line 1218 
    __retres = 2;
    
#line 1218 
    goto return_label;
  }
  else ;
  
#line 1216 
  i += 1;
  ldv_47826: 
#line 1217 
  ;
  
#line 1216 
  if ((unsigned int)i <= 6U) 
#line 1218 
                             goto ldv_47825; else 
#line 1221 
                                                  goto ldv_47827;
  ldv_47827: 
#line 1222 
  ;
  
#line 1221 
  __retres = 0;
  return_label: 
#line 1221 
                return __retres;
}


#line 1224  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int init_realtek_8211c(struct net_device *dev, struct fe_priv *np)
{
  int __retres;
  u32 reg;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_6;
  
#line 1227 
  u8 *base = get_hwbase(dev);
  
#line 1228 
  u32 powerstate = readl((void const volatile *)(base + 1536U));
  
#line 1231 
  powerstate |= 4U;
  
#line 1232 
  writel(powerstate,(void volatile *)(base + 1536U));
  
#line 1233 
  msleep(25U);
  
#line 1235 
  powerstate &= 4294967291U;
  
#line 1236 
  writel(powerstate,(void volatile *)(base + 1536U));
  
#line 1237 
  msleep(25U);
  
#line 1239 
  tmp_1 = mii_rw(dev,np->phyaddr,17,-1);
  
#line 1239 
  reg = (unsigned int)tmp_1;
  
#line 1240 
  reg |= 8U;
  
#line 1241 
  tmp_2 = mii_rw(dev,np->phyaddr,17,(int)reg);
  
#line 1241 
  if (tmp_2 != 0) {
    
#line 1242 
    __retres = 2;
    
#line 1242 
    goto return_label;
  }
  else ;
  
#line 1243 
  tmp_3 = mii_rw(dev,np->phyaddr,31,5);
  
#line 1243 
  if (tmp_3 != 0) {
    
#line 1245 
    __retres = 2;
    
#line 1245 
    goto return_label;
  }
  else ;
  
#line 1246 
  tmp_4 = mii_rw(dev,np->phyaddr,1,-1);
  
#line 1246 
  reg = (unsigned int)tmp_4;
  
#line 1247 
  if ((reg & 512U) == 0U) {
    int tmp_5;
    
#line 1248 
    reg |= 512U;
    
#line 1249 
    tmp_5 = mii_rw(dev,np->phyaddr,1,(int)reg);
    
#line 1249 
    if (tmp_5 != 0) {
      
#line 1250 
      __retres = 2;
      
#line 1250 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1252 
  tmp_6 = mii_rw(dev,np->phyaddr,31,0);
  
#line 1252 
  if (tmp_6 != 0) {
    
#line 1254 
    __retres = 2;
    
#line 1254 
    goto return_label;
  }
  else ;
  
#line 1256 
  __retres = 0;
  return_label: 
#line 1256 
                return __retres;
}


#line 1259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int init_realtek_8201(struct net_device *dev, struct fe_priv *np)
{
  int __retres;
  u32 phy_reserved;
  
#line 1263 
  if ((np->driver_data & 4194304U) != 0U) {
    int tmp;
    int tmp_0;
    
#line 1264 
    tmp = mii_rw(dev,np->phyaddr,17,-1);
    
#line 1264 
    phy_reserved = (unsigned int)tmp;
    
#line 1266 
    phy_reserved |= 4096U;
    
#line 1267 
    tmp_0 = mii_rw(dev,np->phyaddr,17,(int)phy_reserved);
    
#line 1267 
    if (tmp_0 != 0) {
      
#line 1269 
      __retres = 2;
      
#line 1269 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1272 
  __retres = 0;
  return_label: 
#line 1272 
                return __retres;
}


#line 1275  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int init_realtek_8201_cross(struct net_device *dev, struct fe_priv *np)
{
  int __retres;
  u32 phy_reserved;
  
#line 1279 
  if (phy_cross == 0) {
    int tmp;
    int tmp_0;
    int tmp_1;
    int tmp_2;
    
#line 1280 
    tmp = mii_rw(dev,np->phyaddr,31,1);
    
#line 1280 
    if (tmp != 0) {
      
#line 1282 
      __retres = 2;
      
#line 1282 
      goto return_label;
    }
    else ;
    
#line 1283 
    tmp_0 = mii_rw(dev,np->phyaddr,25,-1);
    
#line 1283 
    phy_reserved = (unsigned int)tmp_0;
    
#line 1285 
    phy_reserved &= 4294967292U;
    
#line 1286 
    phy_reserved |= 1U;
    
#line 1287 
    tmp_1 = mii_rw(dev,np->phyaddr,25,(int)phy_reserved);
    
#line 1287 
    if (tmp_1 != 0) {
      
#line 1289 
      __retres = 2;
      
#line 1289 
      goto return_label;
    }
    else ;
    
#line 1290 
    tmp_2 = mii_rw(dev,np->phyaddr,31,0);
    
#line 1290 
    if (tmp_2 != 0) {
      
#line 1292 
      __retres = 2;
      
#line 1292 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1295 
  __retres = 0;
  return_label: 
#line 1295 
                return __retres;
}


#line 1298  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int init_cicada(struct net_device *dev, struct fe_priv *np, u32 phyinterface)
{
  int __retres;
  u32 phy_reserved;
  int tmp_3;
  int tmp_4;
  
#line 1303 
  if ((phyinterface & 268435456U) != 0U) {
    int tmp;
    int tmp_0;
    int tmp_1;
    int tmp_2;
    
#line 1304 
    tmp = mii_rw(dev,np->phyaddr,23,-1);
    
#line 1304 
    phy_reserved = (unsigned int)tmp;
    
#line 1305 
    phy_reserved &= 4294902271U;
    
#line 1306 
    phy_reserved |= 4608U;
    
#line 1307 
    tmp_0 = mii_rw(dev,np->phyaddr,23,(int)phy_reserved);
    
#line 1307 
    if (tmp_0 != 0) {
      
#line 1308 
      __retres = 2;
      
#line 1308 
      goto return_label;
    }
    else ;
    
#line 1309 
    tmp_1 = mii_rw(dev,np->phyaddr,28,-1);
    
#line 1309 
    phy_reserved = (unsigned int)tmp_1;
    
#line 1310 
    phy_reserved |= 4U;
    
#line 1311 
    tmp_2 = mii_rw(dev,np->phyaddr,28,(int)phy_reserved);
    
#line 1311 
    if (tmp_2 != 0) {
      
#line 1312 
      __retres = 2;
      
#line 1312 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1314 
  tmp_3 = mii_rw(dev,np->phyaddr,22,-1);
  
#line 1314 
  phy_reserved = (unsigned int)tmp_3;
  
#line 1315 
  phy_reserved |= 8192U;
  
#line 1316 
  tmp_4 = mii_rw(dev,np->phyaddr,22,(int)phy_reserved);
  
#line 1316 
  if (tmp_4 != 0) {
    
#line 1317 
    __retres = 2;
    
#line 1317 
    goto return_label;
  }
  else ;
  
#line 1319 
  __retres = 0;
  return_label: 
#line 1319 
                return __retres;
}


#line 1322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int init_vitesse(struct net_device *dev, struct fe_priv *np)
{
  int __retres;
  u32 phy_reserved;
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_5;
  int tmp_6;
  int tmp_7;
  int tmp_8;
  int tmp_9;
  int tmp_10;
  int tmp_11;
  int tmp_12;
  int tmp_13;
  int tmp_14;
  int tmp_15;
  int tmp_16;
  int tmp_17;
  int tmp_18;
  
#line 1326 
  tmp = mii_rw(dev,np->phyaddr,31,21173);
  
#line 1326 
  if (tmp != 0) {
    
#line 1328 
    __retres = 2;
    
#line 1328 
    goto return_label;
  }
  else ;
  
#line 1329 
  tmp_0 = mii_rw(dev,np->phyaddr,16,44938);
  
#line 1329 
  if (tmp_0 != 0) {
    
#line 1331 
    __retres = 2;
    
#line 1331 
    goto return_label;
  }
  else ;
  
#line 1332 
  tmp_1 = mii_rw(dev,np->phyaddr,18,-1);
  
#line 1332 
  phy_reserved = (unsigned int)tmp_1;
  
#line 1334 
  tmp_2 = mii_rw(dev,np->phyaddr,18,(int)phy_reserved);
  
#line 1334 
  if (tmp_2 != 0) {
    
#line 1335 
    __retres = 2;
    
#line 1335 
    goto return_label;
  }
  else ;
  
#line 1336 
  tmp_3 = mii_rw(dev,np->phyaddr,17,-1);
  
#line 1336 
  phy_reserved = (unsigned int)tmp_3;
  
#line 1338 
  phy_reserved &= 4294967283U;
  
#line 1339 
  phy_reserved |= 8U;
  
#line 1340 
  tmp_4 = mii_rw(dev,np->phyaddr,17,(int)phy_reserved);
  
#line 1340 
  if (tmp_4 != 0) {
    
#line 1341 
    __retres = 2;
    
#line 1341 
    goto return_label;
  }
  else ;
  
#line 1342 
  tmp_5 = mii_rw(dev,np->phyaddr,16,36746);
  
#line 1342 
  if (tmp_5 != 0) {
    
#line 1344 
    __retres = 2;
    
#line 1344 
    goto return_label;
  }
  else ;
  
#line 1345 
  tmp_6 = mii_rw(dev,np->phyaddr,16,44934);
  
#line 1345 
  if (tmp_6 != 0) {
    
#line 1347 
    __retres = 2;
    
#line 1347 
    goto return_label;
  }
  else ;
  
#line 1348 
  tmp_7 = mii_rw(dev,np->phyaddr,18,-1);
  
#line 1348 
  phy_reserved = (unsigned int)tmp_7;
  
#line 1350 
  phy_reserved &= 4294967283U;
  
#line 1351 
  phy_reserved |= 8U;
  
#line 1352 
  tmp_8 = mii_rw(dev,np->phyaddr,18,(int)phy_reserved);
  
#line 1352 
  if (tmp_8 != 0) {
    
#line 1353 
    __retres = 2;
    
#line 1353 
    goto return_label;
  }
  else ;
  
#line 1354 
  tmp_9 = mii_rw(dev,np->phyaddr,17,-1);
  
#line 1354 
  phy_reserved = (unsigned int)tmp_9;
  
#line 1356 
  tmp_10 = mii_rw(dev,np->phyaddr,17,(int)phy_reserved);
  
#line 1356 
  if (tmp_10 != 0) {
    
#line 1357 
    __retres = 2;
    
#line 1357 
    goto return_label;
  }
  else ;
  
#line 1358 
  tmp_11 = mii_rw(dev,np->phyaddr,16,36742);
  
#line 1358 
  if (tmp_11 != 0) {
    
#line 1360 
    __retres = 2;
    
#line 1360 
    goto return_label;
  }
  else ;
  
#line 1361 
  tmp_12 = mii_rw(dev,np->phyaddr,16,44930);
  
#line 1361 
  if (tmp_12 != 0) {
    
#line 1363 
    __retres = 2;
    
#line 1363 
    goto return_label;
  }
  else ;
  
#line 1364 
  tmp_13 = mii_rw(dev,np->phyaddr,18,-1);
  
#line 1364 
  phy_reserved = (unsigned int)tmp_13;
  
#line 1366 
  tmp_14 = mii_rw(dev,np->phyaddr,18,(int)phy_reserved);
  
#line 1366 
  if (tmp_14 != 0) {
    
#line 1367 
    __retres = 2;
    
#line 1367 
    goto return_label;
  }
  else ;
  
#line 1368 
  tmp_15 = mii_rw(dev,np->phyaddr,17,-1);
  
#line 1368 
  phy_reserved = (unsigned int)tmp_15;
  
#line 1370 
  phy_reserved &= 4294966911U;
  
#line 1371 
  phy_reserved |= 256U;
  
#line 1372 
  tmp_16 = mii_rw(dev,np->phyaddr,17,(int)phy_reserved);
  
#line 1372 
  if (tmp_16 != 0) {
    
#line 1373 
    __retres = 2;
    
#line 1373 
    goto return_label;
  }
  else ;
  
#line 1374 
  tmp_17 = mii_rw(dev,np->phyaddr,16,36738);
  
#line 1374 
  if (tmp_17 != 0) {
    
#line 1376 
    __retres = 2;
    
#line 1376 
    goto return_label;
  }
  else ;
  
#line 1377 
  tmp_18 = mii_rw(dev,np->phyaddr,31,0);
  
#line 1377 
  if (tmp_18 != 0) {
    
#line 1379 
    __retres = 2;
    
#line 1379 
    goto return_label;
  }
  else ;
  
#line 1381 
  __retres = 0;
  return_label: 
#line 1381 
                return __retres;
}


#line 1384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int phy_init(struct net_device *dev)
{
  int __retres;
  u32 phyinterface;
  u32 mii_status;
  u32 mii_control;
  u32 mii_control_1000;
  u32 reg;
  int tmp_10;
  int tmp_12;
  int tmp_13;
  int tmp_17;
  int tmp_31;
  int tmp_32;
  
#line 1386 
  struct fe_priv *np = get_nvpriv(dev);
  
#line 1387 
  u8 *base = get_hwbase(dev);
  
#line 1392 
  if (np->phy_model == 544U) {
    int tmp_1;
    int tmp_3;
    
#line 1393 
    tmp_1 = mii_rw(dev,np->phyaddr,28,-1);
    
#line 1393 
    reg = (unsigned int)tmp_1;
    
#line 1394 
    reg &= 4294966527U;
    
#line 1395 
    tmp_3 = mii_rw(dev,np->phyaddr,28,(int)reg);
    
#line 1395 
    if (tmp_3 != 0) {
      char const *tmp_2;
      
#line 1396 
      tmp_2 = pci_name((struct pci_dev const *)np->pci_dev);
      
#line 1396 
      ;
      
#line 1396 
      netdev_info((struct net_device const *)dev,"%s: phy write to errata reg failed\n",tmp_2);
      
#line 1398 
      __retres = 2;
      
#line 1398 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1401 
  if (np->phy_oui == 1842U) {
    
#line 1402 
    if (np->phy_model == 272U && np->phy_rev == 0U) {
      int tmp_5;
      
#line 1404 
      tmp_5 = init_realtek_8211b(dev,np);
      
#line 1404 
      if (tmp_5 != 0) {
        char const *tmp_4;
        
#line 1405 
        tmp_4 = pci_name((struct pci_dev const *)np->pci_dev);
        
#line 1405 
        ;
        
#line 1405 
        netdev_info((struct net_device const *)dev,"%s: phy init failed\n",tmp_4);
        
#line 1407 
        __retres = 2;
        
#line 1407 
        goto return_label;
      }
      else ;
    }
    else 
      
#line 1409 
      if (np->phy_model == 272U && np->phy_rev == 1U) {
        int tmp_7;
        
#line 1411 
        tmp_7 = init_realtek_8211c(dev,np);
        
#line 1411 
        if (tmp_7 != 0) {
          char const *tmp_6;
          
#line 1412 
          tmp_6 = pci_name((struct pci_dev const *)np->pci_dev);
          
#line 1412 
          ;
          
#line 1412 
          netdev_info((struct net_device const *)dev,"%s: phy init failed\n",tmp_6);
          
#line 1414 
          __retres = 2;
          
#line 1414 
          goto return_label;
        }
        else ;
      }
      else 
        
#line 1416 
        if (np->phy_model == 512U) {
          int tmp_9;
          
#line 1417 
          tmp_9 = init_realtek_8201(dev,np);
          
#line 1417 
          if (tmp_9 != 0) {
            char const *tmp_8;
            
#line 1418 
            tmp_8 = pci_name((struct pci_dev const *)np->pci_dev);
            
#line 1418 
            ;
            
#line 1418 
            netdev_info((struct net_device const *)dev,"%s: phy init failed\n",tmp_8);
            
#line 1420 
            __retres = 2;
            
#line 1420 
            goto return_label;
          }
          else ;
        }
        else ;
  }
  else ;
  
#line 1426 
  tmp_10 = mii_rw(dev,np->phyaddr,4,-1);
  
#line 1426 
  reg = (unsigned int)tmp_10;
  
#line 1427 
  reg |= 3552U;
  
#line 1430 
  tmp_12 = mii_rw(dev,np->phyaddr,4,(int)reg);
  
#line 1430 
  if (tmp_12 != 0) {
    char const *tmp_11;
    
#line 1431 
    tmp_11 = pci_name((struct pci_dev const *)np->pci_dev);
    
#line 1431 
    ;
    
#line 1431 
    netdev_info((struct net_device const *)dev,"%s: phy write to advertise failed\n",tmp_11);
    
#line 1433 
    __retres = 2;
    
#line 1433 
    goto return_label;
  }
  else ;
  
#line 1437 
  phyinterface = readl((void const volatile *)(base + 192U));
  
#line 1440 
  tmp_13 = mii_rw(dev,np->phyaddr,1,-1);
  
#line 1440 
  mii_status = (unsigned int)tmp_13;
  
#line 1441 
  if ((mii_status & 256U) != 0U) {
    int tmp_14;
    int tmp_16;
    
#line 1442 
    np->gigabit = (unsigned short)256U;
    
#line 1443 
    tmp_14 = mii_rw(dev,np->phyaddr,9,-1);
    
#line 1443 
    mii_control_1000 = (unsigned int)tmp_14;
    
#line 1445 
    mii_control_1000 &= 4294967039U;
    
#line 1446 
    if ((phyinterface & 268435456U) != 0U) 
#line 1447 
                                           mii_control_1000 |= 512U; else 
                                                                    
#line 1449 
                                                                    mii_control_1000 &= 4294966783U;
    
#line 1451 
    tmp_16 = mii_rw(dev,np->phyaddr,9,(int)mii_control_1000);
    
#line 1451 
    if (tmp_16 != 0) {
      char const *tmp_15;
      
#line 1452 
      tmp_15 = pci_name((struct pci_dev const *)np->pci_dev);
      
#line 1452 
      ;
      
#line 1452 
      netdev_info((struct net_device const *)dev,"%s: phy init failed\n",tmp_15);
      
#line 1454 
      __retres = 2;
      
#line 1454 
      goto return_label;
    }
    else ;
  }
  else 
#line 1457 
       np->gigabit = (unsigned short)0U;
  
#line 1459 
  tmp_17 = mii_rw(dev,np->phyaddr,0,-1);
  
#line 1459 
  mii_control = (unsigned int)tmp_17;
  
#line 1460 
  mii_control |= 4096U;
  
#line 1462 
  if ((np->phy_oui == 1842U && np->phy_model == 272U) && np->phy_rev == 1U) {
    int tmp_19;
    
#line 1466 
    mii_control |= 512U;
    
#line 1467 
    tmp_19 = mii_rw(dev,np->phyaddr,0,(int)mii_control);
    
#line 1467 
    if (tmp_19 != 0) {
      char const *tmp_18;
      
#line 1468 
      tmp_18 = pci_name((struct pci_dev const *)np->pci_dev);
      
#line 1468 
      ;
      
#line 1468 
      netdev_info((struct net_device const *)dev,"%s: phy init failed\n",tmp_18);
      
#line 1470 
      __retres = 2;
      
#line 1470 
      goto return_label;
    }
    else ;
  }
  else {
    int tmp_21;
    
#line 1476 
    tmp_21 = phy_reset(dev,mii_control);
    
#line 1476 
    if (tmp_21 != 0) {
      char const *tmp_20;
      
#line 1477 
      tmp_20 = pci_name((struct pci_dev const *)np->pci_dev);
      
#line 1477 
      ;
      
#line 1477 
      netdev_info((struct net_device const *)dev,"%s: phy reset failed\n",tmp_20);
      
#line 1479 
      __retres = 2;
      
#line 1479 
      goto return_label;
    }
    else ;
  }
  
#line 1484 
  if (np->phy_oui == 1009U) {
    int tmp_23;
    
#line 1485 
    tmp_23 = init_cicada(dev,np,phyinterface);
    
#line 1485 
    if (tmp_23 != 0) {
      char const *tmp_22;
      
#line 1486 
      tmp_22 = pci_name((struct pci_dev const *)np->pci_dev);
      
#line 1486 
      ;
      
#line 1486 
      netdev_info((struct net_device const *)dev,"%s: phy init failed\n",tmp_22);
      
#line 1488 
      __retres = 2;
      
#line 1488 
      goto return_label;
    }
    else ;
  }
  else 
    
#line 1490 
    if (np->phy_oui == 449U) {
      int tmp_25;
      
#line 1491 
      tmp_25 = init_vitesse(dev,np);
      
#line 1491 
      if (tmp_25 != 0) {
        char const *tmp_24;
        
#line 1492 
        tmp_24 = pci_name((struct pci_dev const *)np->pci_dev);
        
#line 1492 
        ;
        
#line 1492 
        netdev_info((struct net_device const *)dev,"%s: phy init failed\n",tmp_24);
        
#line 1494 
        __retres = 2;
        
#line 1494 
        goto return_label;
      }
      else ;
    }
    else 
      
#line 1496 
      if (np->phy_oui == 1842U) {
        
#line 1497 
        if (np->phy_model == 272U && np->phy_rev == 0U) {
          int tmp_27;
          
#line 1500 
          tmp_27 = init_realtek_8211b(dev,np);
          
#line 1500 
          if (tmp_27 != 0) {
            char const *tmp_26;
            
#line 1501 
            tmp_26 = pci_name((struct pci_dev const *)np->pci_dev);
            
#line 1501 
            ;
            
#line 1501 
            netdev_info((struct net_device const *)dev,"%s: phy init failed\n",tmp_26);
            
#line 1503 
            __retres = 2;
            
#line 1503 
            goto return_label;
          }
          else ;
        }
        else 
          
#line 1505 
          if (np->phy_model == 512U) {
            int tmp_29;
            
#line 1506 
            tmp_29 = init_realtek_8201(dev,np);
            
#line 1506 
            if (tmp_29 != 0) 
#line 1506 
                             goto _LOR;
            else {
              int tmp_30;
              
#line 1506 
              tmp_30 = init_realtek_8201_cross(dev,np);
              
#line 1506 
              if (tmp_30 != 0) {
                _LOR: {
                        char const *tmp_28;
                        
#line 1508 
                        tmp_28 = pci_name((struct pci_dev const *)np->pci_dev);
                        
#line 1508 
                        ;
                        
#line 1508 
                        netdev_info((struct net_device const *)dev,"%s: phy init failed\n",tmp_28);
                        
#line 1510 
                        __retres = 2;
                        
#line 1510 
                        goto return_label;
                      }
              }
              else ;
            }
          }
          else ;
      }
      else ;
  
#line 1516 
  mii_rw(dev,np->phyaddr,4,(int)reg);
  
#line 1519 
  tmp_31 = mii_rw(dev,np->phyaddr,0,-1);
  
#line 1519 
  mii_control = (unsigned int)tmp_31;
  
#line 1520 
  mii_control |= 4608U;
  
#line 1521 
  if (phy_power_down != 0) 
#line 1522 
                           mii_control |= 2048U; else ;
  
#line 1523 
  tmp_32 = mii_rw(dev,np->phyaddr,0,(int)mii_control);
  
#line 1523 
  if (tmp_32 != 0) {
    
#line 1524 
    __retres = 2;
    
#line 1524 
    goto return_label;
  }
  else ;
  
#line 1526 
  __retres = 0;
  return_label: 
#line 1526 
                return __retres;
}


#line 1529  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_start_rx(struct net_device *dev)
{
  unsigned int tmp_2;
  
#line 1531 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 1532 
  u8 *base = get_hwbase(dev);
  
#line 1533 
  u32 rx_ctrl = readl((void const volatile *)(base + 148U));
  
#line 1536 
  tmp_2 = readl((void const volatile *)(base + 148U));
  
#line 1536 
  if ((tmp_2 & 1U) != 0U) {
    
#line 1536 
    if (np->mac_in_use == 0U) {
      
#line 1537 
      rx_ctrl &= 4294967294U;
      
#line 1538 
      writel(rx_ctrl,(void volatile *)(base + 148U));
      
#line 1539 
      pci_push(base);
    }
    else ;
  }
  else ;
  
#line 1541 
  writel(np->linkspeed,(void volatile *)(base + 272U));
  
#line 1542 
  pci_push(base);
  
#line 1543 
  rx_ctrl |= 1U;
  
#line 1544 
  if (np->mac_in_use != 0U) 
#line 1545 
                            rx_ctrl &= 4278190079U; else ;
  
#line 1546 
  writel(rx_ctrl,(void volatile *)(base + 148U));
  
#line 1547 
  pci_push(base);
  
#line 1548 
  return;
}


#line 1550  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_stop_rx(struct net_device *dev)
{
  int tmp_2;
  
#line 1552 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 1553 
  u8 *base = get_hwbase(dev);
  
#line 1554 
  u32 rx_ctrl = readl((void const volatile *)(base + 148U));
  
#line 1556 
  if (np->mac_in_use == 0U) 
#line 1557 
                            rx_ctrl &= 4294967294U; else 
#line 1559 
                                                         rx_ctrl |= 16777216U;
  
#line 1560 
  writel(rx_ctrl,(void volatile *)(base + 148U));
  
#line 1561 
  tmp_2 = reg_delay(dev,152,1U,0U,10,500000);
  
#line 1561 
  if (tmp_2 != 0) 
#line 1563 
                  netdev_info((struct net_device const *)dev,"%s: ReceiverStatus remained busy\n","nv_stop_rx"); else ;
  
#line 1566 
  __const_udelay(429500UL);
  
#line 1567 
  if (np->mac_in_use == 0U) 
#line 1568 
                            writel(0U,(void volatile *)(base + 272U)); else ;
  
#line 1569 
  return;
}


#line 1571  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_start_tx(struct net_device *dev)
{
  
#line 1573 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 1574 
  u8 *base = get_hwbase(dev);
  
#line 1575 
  u32 tx_ctrl = readl((void const volatile *)(base + 132U));
  
#line 1577 
  tx_ctrl |= 1U;
  
#line 1578 
  if (np->mac_in_use != 0U) 
#line 1579 
                            tx_ctrl &= 4278190079U; else ;
  
#line 1580 
  writel(tx_ctrl,(void volatile *)(base + 132U));
  
#line 1581 
  pci_push(base);
  
#line 1582 
  return;
}


#line 1584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_stop_tx(struct net_device *dev)
{
  int tmp_2;
  
#line 1586 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 1587 
  u8 *base = get_hwbase(dev);
  
#line 1588 
  u32 tx_ctrl = readl((void const volatile *)(base + 132U));
  
#line 1590 
  if (np->mac_in_use == 0U) 
#line 1591 
                            tx_ctrl &= 4294967294U; else 
#line 1593 
                                                         tx_ctrl |= 16777216U;
  
#line 1594 
  writel(tx_ctrl,(void volatile *)(base + 132U));
  
#line 1595 
  tmp_2 = reg_delay(dev,136,1U,0U,10,500000);
  
#line 1595 
  if (tmp_2 != 0) 
#line 1597 
                  netdev_info((struct net_device const *)dev,"%s: TransmitterStatus remained busy\n","nv_stop_tx"); else ;
  
#line 1600 
  __const_udelay(429500UL);
  
#line 1601 
  if (np->mac_in_use == 0U) {
    unsigned int tmp_3;
    
#line 1602 
    ;
    
#line 1602 
    tmp_3 = readl((void const volatile *)(base + 268U));
    
#line 1602 
    writel(tmp_3 & 32768U,(void volatile *)(base + 268U));
  }
  else ;
  
#line 1604 
  return;
}


#line 1606  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_start_rxtx(struct net_device *dev)
{
  
#line 1608 
  nv_start_rx(dev);
  
#line 1609 
  nv_start_tx(dev);
  
#line 1610 
  return;
}


#line 1612  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_stop_rxtx(struct net_device *dev)
{
  
#line 1614 
  nv_stop_rx(dev);
  
#line 1615 
  nv_stop_tx(dev);
  
#line 1616 
  return;
}


#line 1618  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_txrx_reset(struct net_device *dev)
{
  
#line 1620 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 1621 
  u8 *base = get_hwbase(dev);
  
#line 1623 
  writel(np->txrxctl_bits | 20U,(void volatile *)(base + 324U));
  
#line 1624 
  pci_push(base);
  
#line 1625 
  __const_udelay(17180UL);
  
#line 1626 
  writel(np->txrxctl_bits | 4U,(void volatile *)(base + 324U));
  
#line 1627 
  pci_push(base);
  
#line 1628 
  return;
}


#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_mac_reset(struct net_device *dev)
{
  u32 temp1;
  u32 temp2;
  u32 temp3;
  
#line 1632 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 1633 
  u8 *base = get_hwbase(dev);
  
#line 1636 
  writel(np->txrxctl_bits | 20U,(void volatile *)(base + 324U));
  
#line 1637 
  pci_push(base);
  
#line 1640 
  temp1 = readl((void const volatile *)(base + 168U));
  
#line 1641 
  temp2 = readl((void const volatile *)(base + 172U));
  
#line 1642 
  temp3 = readl((void const volatile *)(base + 268U));
  
#line 1644 
  writel(243U,(void volatile *)(base + 52U));
  
#line 1645 
  pci_push(base);
  
#line 1646 
  __const_udelay(274880UL);
  
#line 1647 
  writel(0U,(void volatile *)(base + 52U));
  
#line 1648 
  pci_push(base);
  
#line 1649 
  __const_udelay(274880UL);
  
#line 1652 
  writel(temp1,(void volatile *)(base + 168U));
  
#line 1653 
  writel(temp2,(void volatile *)(base + 172U));
  
#line 1654 
  writel(temp3,(void volatile *)(base + 268U));
  
#line 1656 
  writel(np->txrxctl_bits | 4U,(void volatile *)(base + 324U));
  
#line 1657 
  pci_push(base);
  
#line 1658 
  return;
}


#line 1661  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_update_stats(struct net_device *dev)
{
  int tmp_3_0;
  unsigned int tmp_4;
  unsigned int tmp_5;
  unsigned int tmp_6;
  unsigned int tmp_7;
  unsigned int tmp_8;
  unsigned int tmp_9;
  unsigned int tmp_10;
  unsigned int tmp_11;
  unsigned int tmp_12;
  unsigned int tmp_13;
  unsigned int tmp_14;
  unsigned int tmp_15;
  unsigned int tmp_16;
  unsigned int tmp_17;
  unsigned int tmp_18;
  unsigned int tmp_19;
  unsigned int tmp_20;
  unsigned int tmp_21;
  unsigned int tmp_22;
  unsigned int tmp_23;
  unsigned int tmp_24;
  
#line 1663 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 1664 
  u8 *base = get_hwbase(dev);
  {
    bool __warned;
    int tmp_1;
    
#line 1669 
    tmp_1 = preempt_count();
    
#line 1669 
    int __ret_warn_once = ((unsigned long)tmp_1 & 983040UL) != 0UL;
    
#line 1669 
    if ((long)(__ret_warn_once != 0) != 0L) {
      int tmp_2;
      {
        
#line 1669 
        int __ret_warn_on = ! __warned;
        
#line 1669 
        if ((long)(__ret_warn_on != 0) != 0L) 
#line 1669 
                                              warn_slowpath_fmt("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c",1669,"forcedeth: estats spin_lock(_bh) from top-half"); else ;
        
#line 1669 
        tmp_2 = (long)(__ret_warn_on != 0);
      }
      
#line 1669 
      if ((long)tmp_2 != 0L) 
#line 1669 
                             __warned = (_Bool)1; else ;
    }
    else ;
    
#line 1669 
    long tmp_3 = (long)(__ret_warn_once != 0);
  }
  
#line 1670 
  tmp_3_0 = queued_spin_is_locked(& np->hwstats_lock.__anonCompField_spinlock_18.rlock.raw_lock);
  
#line 1670 
  if ((long)(tmp_3_0 == 0) != 0L) {
    
#line 1672 
    ldv_inline_asm();
    
#line 1670 
    ;
  }
  else ;
  
#line 1673 
  tmp_4 = readl((void const volatile *)(base + 640U));
  
#line 1673 
  np->estats.tx_bytes += (unsigned long long)tmp_4;
  
#line 1674 
  tmp_5 = readl((void const volatile *)(base + 644U));
  
#line 1674 
  np->estats.tx_zero_rexmt += (unsigned long long)tmp_5;
  
#line 1675 
  tmp_6 = readl((void const volatile *)(base + 648U));
  
#line 1675 
  np->estats.tx_one_rexmt += (unsigned long long)tmp_6;
  
#line 1676 
  tmp_7 = readl((void const volatile *)(base + 652U));
  
#line 1676 
  np->estats.tx_many_rexmt += (unsigned long long)tmp_7;
  
#line 1677 
  tmp_8 = readl((void const volatile *)(base + 656U));
  
#line 1677 
  np->estats.tx_late_collision += (unsigned long long)tmp_8;
  
#line 1678 
  tmp_9 = readl((void const volatile *)(base + 660U));
  
#line 1678 
  np->estats.tx_fifo_errors += (unsigned long long)tmp_9;
  
#line 1679 
  tmp_10 = readl((void const volatile *)(base + 664U));
  
#line 1679 
  np->estats.tx_carrier_errors += (unsigned long long)tmp_10;
  
#line 1680 
  tmp_11 = readl((void const volatile *)(base + 668U));
  
#line 1680 
  np->estats.tx_excess_deferral += (unsigned long long)tmp_11;
  
#line 1681 
  tmp_12 = readl((void const volatile *)(base + 672U));
  
#line 1681 
  np->estats.tx_retry_error += (unsigned long long)tmp_12;
  
#line 1682 
  tmp_13 = readl((void const volatile *)(base + 676U));
  
#line 1682 
  np->estats.rx_frame_error += (unsigned long long)tmp_13;
  
#line 1683 
  tmp_14 = readl((void const volatile *)(base + 680U));
  
#line 1683 
  np->estats.rx_extra_byte += (unsigned long long)tmp_14;
  
#line 1684 
  tmp_15 = readl((void const volatile *)(base + 684U));
  
#line 1684 
  np->estats.rx_late_collision += (unsigned long long)tmp_15;
  
#line 1685 
  tmp_16 = readl((void const volatile *)(base + 688U));
  
#line 1685 
  np->estats.rx_runt += (unsigned long long)tmp_16;
  
#line 1686 
  tmp_17 = readl((void const volatile *)(base + 692U));
  
#line 1686 
  np->estats.rx_frame_too_long += (unsigned long long)tmp_17;
  
#line 1687 
  tmp_18 = readl((void const volatile *)(base + 696U));
  
#line 1687 
  np->estats.rx_over_errors += (unsigned long long)tmp_18;
  
#line 1688 
  tmp_19 = readl((void const volatile *)(base + 700U));
  
#line 1688 
  np->estats.rx_crc_errors += (unsigned long long)tmp_19;
  
#line 1689 
  tmp_20 = readl((void const volatile *)(base + 704U));
  
#line 1689 
  np->estats.rx_frame_align_error += (unsigned long long)tmp_20;
  
#line 1690 
  tmp_21 = readl((void const volatile *)(base + 708U));
  
#line 1690 
  np->estats.rx_length_error += (unsigned long long)tmp_21;
  
#line 1691 
  tmp_22 = readl((void const volatile *)(base + 712U));
  
#line 1691 
  np->estats.rx_unicast += (unsigned long long)tmp_22;
  
#line 1692 
  tmp_23 = readl((void const volatile *)(base + 716U));
  
#line 1692 
  np->estats.rx_multicast += (unsigned long long)tmp_23;
  
#line 1693 
  tmp_24 = readl((void const volatile *)(base + 720U));
  
#line 1693 
  np->estats.rx_broadcast += (unsigned long long)tmp_24;
  
#line 1694 
  np->estats.rx_packets = (np->estats.rx_unicast + np->estats.rx_multicast) + np->estats.rx_broadcast;
  
#line 1698 
  np->estats.rx_errors_total = (((((np->estats.rx_crc_errors + np->estats.rx_over_errors) + np->estats.rx_frame_error) + (np->estats.rx_frame_align_error - np->estats.rx_extra_byte)) + np->estats.rx_late_collision) + np->estats.rx_runt) + np->estats.rx_frame_too_long;
  
#line 1706 
  np->estats.tx_errors_total = (((np->estats.tx_late_collision + np->estats.tx_fifo_errors) + np->estats.tx_carrier_errors) + np->estats.tx_excess_deferral) + np->estats.tx_retry_error;
  
#line 1713 
  if ((np->driver_data & 1024U) != 0U) {
    unsigned int tmp_25;
    unsigned int tmp_26;
    unsigned int tmp_27;
    unsigned int tmp_28;
    unsigned int tmp_29;
    unsigned int tmp_30;
    
#line 1714 
    tmp_25 = readl((void const volatile *)(base + 724U));
    
#line 1714 
    np->estats.tx_deferral += (unsigned long long)tmp_25;
    
#line 1715 
    tmp_26 = readl((void const volatile *)(base + 728U));
    
#line 1715 
    np->estats.tx_packets += (unsigned long long)tmp_26;
    
#line 1716 
    tmp_27 = readl((void const volatile *)(base + 732U));
    
#line 1716 
    np->estats.rx_bytes += (unsigned long long)tmp_27;
    
#line 1717 
    tmp_28 = readl((void const volatile *)(base + 736U));
    
#line 1717 
    np->estats.tx_pause += (unsigned long long)tmp_28;
    
#line 1718 
    tmp_29 = readl((void const volatile *)(base + 740U));
    
#line 1718 
    np->estats.rx_pause += (unsigned long long)tmp_29;
    
#line 1719 
    tmp_30 = readl((void const volatile *)(base + 744U));
    
#line 1719 
    np->estats.rx_drop_frame += (unsigned long long)tmp_30;
    
#line 1720 
    np->estats.rx_errors_total += np->estats.rx_drop_frame;
  }
  else ;
  
#line 1723 
  if ((np->driver_data & 2048U) != 0U) {
    unsigned int tmp_31;
    unsigned int tmp_32;
    unsigned int tmp_33;
    
#line 1724 
    tmp_31 = readl((void const volatile *)(base + 416U));
    
#line 1724 
    np->estats.tx_unicast += (unsigned long long)tmp_31;
    
#line 1725 
    tmp_32 = readl((void const volatile *)(base + 420U));
    
#line 1725 
    np->estats.tx_multicast += (unsigned long long)tmp_32;
    
#line 1726 
    tmp_33 = readl((void const volatile *)(base + 424U));
    
#line 1726 
    np->estats.tx_broadcast += (unsigned long long)tmp_33;
  }
  else ;
  
#line 1728 
  return;
}


#line 1737  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static struct rtnl_link_stats64 *nv_get_stats64(struct net_device *dev, struct rtnl_link_stats64 *storage)
{
  unsigned int syncp_start;
  bool tmp_0;
  bool tmp_1;
  
#line 1741 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  ldv_47927: 
#line 1743 
  ;
  
#line 1756 
  syncp_start = u64_stats_fetch_begin_irq((struct u64_stats_sync const *)(& np->swstats_rx_syncp));
  
#line 1757 
  storage->rx_packets = np->stat_rx_packets;
  
#line 1758 
  storage->rx_bytes = np->stat_rx_bytes;
  
#line 1759 
  storage->rx_dropped = np->stat_rx_dropped;
  
#line 1760 
  storage->rx_missed_errors = np->stat_rx_missed_errors;
  
#line 1761 
  tmp_0 = u64_stats_fetch_retry_irq((struct u64_stats_sync const *)(& np->swstats_rx_syncp),syncp_start);
  
#line 1761 
  if ((int)tmp_0 != 0) 
#line 1763 
                       goto ldv_47927; else 
#line 1766 
                                            goto ldv_47928;
  ldv_47928: 
#line 1767 
  ;
  ldv_47929: 
#line 1768 
  ;
  
#line 1764 
  syncp_start = u64_stats_fetch_begin_irq((struct u64_stats_sync const *)(& np->swstats_tx_syncp));
  
#line 1765 
  storage->tx_packets = np->stat_tx_packets;
  
#line 1766 
  storage->tx_bytes = np->stat_tx_bytes;
  
#line 1767 
  storage->tx_dropped = np->stat_tx_dropped;
  
#line 1768 
  tmp_1 = u64_stats_fetch_retry_irq((struct u64_stats_sync const *)(& np->swstats_tx_syncp),syncp_start);
  
#line 1768 
  if ((int)tmp_1 != 0) 
#line 1770 
                       goto ldv_47929; else 
#line 1773 
                                            goto ldv_47930;
  ldv_47930: 
#line 1774 
  ;
  
#line 1771 
  if ((np->driver_data & 3584U) != 0U) {
    
#line 1772 
    ldv_spin_lock_bh_72(& np->hwstats_lock);
    
#line 1774 
    nv_update_stats(dev);
    
#line 1777 
    storage->rx_errors = np->estats.rx_errors_total;
    
#line 1778 
    storage->tx_errors = np->estats.tx_errors_total;
    
#line 1781 
    storage->multicast = np->estats.rx_multicast;
    
#line 1784 
    storage->rx_length_errors = np->estats.rx_length_error;
    
#line 1785 
    storage->rx_over_errors = np->estats.rx_over_errors;
    
#line 1786 
    storage->rx_crc_errors = np->estats.rx_crc_errors;
    
#line 1787 
    storage->rx_frame_errors = np->estats.rx_frame_align_error;
    
#line 1788 
    storage->rx_fifo_errors = np->estats.rx_drop_frame;
    
#line 1791 
    storage->tx_carrier_errors = np->estats.tx_carrier_errors;
    
#line 1792 
    storage->tx_fifo_errors = np->estats.tx_fifo_errors;
    
#line 1794 
    ldv_spin_unlock_bh_73(& np->hwstats_lock);
  }
  else ;
  
#line 1797 
  return storage;
}


#line 1805  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_alloc_rx(struct net_device *dev)
{
  int __retres;
  struct ring_desc *less_rx;
  struct ring_desc *tmp_0;
  
#line 1807 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 1810 
  less_rx = np->get_rx.orig;
  
#line 1811 
  tmp_0 = less_rx;
  
#line 1811 
  less_rx -= 1;
  
#line 1811 
  ;
  
#line 1811 
  if (tmp_0 == np->first_rx.orig) 
#line 1812 
                                  less_rx = np->last_rx.orig; else ;
  
#line 1814 
  goto ldv_47939;
  ldv_47938: 
#line 1815 
  ;
  {
    
#line 1815 
    struct sk_buff *skb = netdev_alloc_skb(dev,np->rx_buf_sz + 64U);
    
#line 1816 
    if (skb != (struct sk_buff *)0) {
      int tmp_2;
      int tmp_3;
      int tmp_4;
      struct ring_desc *tmp_5;
      struct nv_skb_map *tmp_6;
      
#line 1817 
      (np->put_rx_ctx)->skb = skb;
      
#line 1820 
      tmp_2 = skb_tailroom((struct sk_buff const *)skb);
      
#line 1818 
      ;
      
#line 1818 
      ;
      
#line 1818 
      (np->put_rx_ctx)->dma = pci_map_single(np->pci_dev,(void *)skb->data,(unsigned long)tmp_2,2);
      
#line 1822 
      tmp_3 = pci_dma_mapping_error(np->pci_dev,(np->put_rx_ctx)->dma);
      
#line 1822 
      if (tmp_3 != 0) {
        
#line 1824 
        kfree_skb(skb);
        
#line 1825 
        goto packet_dropped;
      }
      else ;
      
#line 1827 
      tmp_4 = skb_tailroom((struct sk_buff const *)skb);
      
#line 1827 
      (np->put_rx_ctx)->dma_len = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(31))))tmp_4;
      
#line 1828 
      (np->put_rx.orig)->buf = (unsigned int)(np->put_rx_ctx)->dma;
      
#line 1829 
      ldv_inline_asm();
      
#line 1830 
      (np->put_rx.orig)->flaglen = np->rx_buf_sz | 2147483648U;
      
#line 1831 
      tmp_5 = np->put_rx.orig;
      
#line 1831 
      np->put_rx.orig += 1;
      
#line 1831 
      ;
      
#line 1831 
      if ((long)(tmp_5 == np->last_rx.orig) != 0L) 
#line 1832 
                                                   np->put_rx.orig = np->first_rx.orig; else ;
      
#line 1833 
      tmp_6 = np->put_rx_ctx;
      
#line 1833 
      np->put_rx_ctx += 1;
      
#line 1833 
      ;
      
#line 1833 
      if ((long)(tmp_6 == np->last_rx_ctx) != 0L) 
#line 1834 
                                                  np->put_rx_ctx = np->first_rx_ctx; else ;
    }
    else {
      packet_dropped: 
#line 1836 
      ;
      
#line 1837 
      u64_stats_init(& np->swstats_rx_syncp);
      
#line 1838 
      np->stat_rx_dropped += 1ULL;
      
#line 1839 
      u64_stats_init(& np->swstats_rx_syncp);
      
#line 1840 
      __retres = 1;
      
#line 1840 
      goto return_label;
    }
  }
  ldv_47939: 
#line 1843 
  ;
  
#line 1814 
  if (np->put_rx.orig != less_rx) 
#line 1816 
                                  goto ldv_47938; else 
#line 1819 
                                                       goto ldv_47940;
  ldv_47940: 
#line 1820 
  ;
  
#line 1843 
  __retres = 0;
  return_label: 
#line 1843 
                return __retres;
}


#line 1846  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_alloc_rx_optimized(struct net_device *dev)
{
  int __retres;
  struct ring_desc_ex *less_rx;
  struct ring_desc_ex *tmp_0;
  
#line 1848 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 1851 
  less_rx = np->get_rx.ex;
  
#line 1852 
  tmp_0 = less_rx;
  
#line 1852 
  less_rx -= 1;
  
#line 1852 
  ;
  
#line 1852 
  if (tmp_0 == np->first_rx.ex) 
#line 1853 
                                less_rx = np->last_rx.ex; else ;
  
#line 1855 
  goto ldv_47949;
  ldv_47948: 
#line 1856 
  ;
  {
    
#line 1856 
    struct sk_buff *skb = netdev_alloc_skb(dev,np->rx_buf_sz + 64U);
    
#line 1857 
    if (skb != (struct sk_buff *)0) {
      int tmp_2;
      int tmp_3;
      int tmp_4;
      struct ring_desc_ex *tmp_7;
      struct nv_skb_map *tmp_8;
      
#line 1858 
      (np->put_rx_ctx)->skb = skb;
      
#line 1861 
      tmp_2 = skb_tailroom((struct sk_buff const *)skb);
      
#line 1859 
      ;
      
#line 1859 
      ;
      
#line 1859 
      (np->put_rx_ctx)->dma = pci_map_single(np->pci_dev,(void *)skb->data,(unsigned long)tmp_2,2);
      
#line 1863 
      tmp_3 = pci_dma_mapping_error(np->pci_dev,(np->put_rx_ctx)->dma);
      
#line 1863 
      if (tmp_3 != 0) {
        
#line 1865 
        kfree_skb(skb);
        
#line 1866 
        goto packet_dropped;
      }
      else ;
      
#line 1868 
      tmp_4 = skb_tailroom((struct sk_buff const *)skb);
      
#line 1868 
      (np->put_rx_ctx)->dma_len = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(31))))tmp_4;
      
#line 1869 
      (np->put_rx.ex)->bufhigh = dma_high((np->put_rx_ctx)->dma);
      
#line 1870 
      (np->put_rx.ex)->buflow = dma_low((np->put_rx_ctx)->dma);
      
#line 1871 
      ldv_inline_asm();
      
#line 1872 
      (np->put_rx.ex)->flaglen = np->rx_buf_sz | 2147483648U;
      
#line 1873 
      tmp_7 = np->put_rx.ex;
      
#line 1873 
      np->put_rx.ex += 1;
      
#line 1873 
      ;
      
#line 1873 
      if ((long)(tmp_7 == np->last_rx.ex) != 0L) 
#line 1874 
                                                 np->put_rx.ex = np->first_rx.ex; else ;
      
#line 1875 
      tmp_8 = np->put_rx_ctx;
      
#line 1875 
      np->put_rx_ctx += 1;
      
#line 1875 
      ;
      
#line 1875 
      if ((long)(tmp_8 == np->last_rx_ctx) != 0L) 
#line 1876 
                                                  np->put_rx_ctx = np->first_rx_ctx; else ;
    }
    else {
      packet_dropped: 
#line 1878 
      ;
      
#line 1879 
      u64_stats_init(& np->swstats_rx_syncp);
      
#line 1880 
      np->stat_rx_dropped += 1ULL;
      
#line 1881 
      u64_stats_init(& np->swstats_rx_syncp);
      
#line 1882 
      __retres = 1;
      
#line 1882 
      goto return_label;
    }
  }
  ldv_47949: 
#line 1885 
  ;
  
#line 1855 
  if (np->put_rx.ex != less_rx) 
#line 1857 
                                goto ldv_47948; else 
#line 1860 
                                                     goto ldv_47950;
  ldv_47950: 
#line 1861 
  ;
  
#line 1885 
  __retres = 0;
  return_label: 
#line 1885 
                return __retres;
}


#line 1889  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_do_rx_refill(unsigned long data)
{
  
#line 1891 
  struct net_device *dev = (struct net_device *)data;
  
#line 1892 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 1895 
  napi_schedule(& np->napi);
  
#line 1896 
  return;
}


#line 1898  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_init_rx(struct net_device *dev)
{
  int i;
  union ring_type tmp_1;
  union ring_type tmp_0;
  int tmp_3;
  bool tmp_2;
  struct nv_skb_map *tmp_5;
  struct nv_skb_map *tmp_4;
  int tmp_7;
  bool tmp_6;
  
#line 1900 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 1903 
  tmp_1 = np->rx_ring;
  
#line 1903 
  np->first_rx = tmp_1;
  
#line 1903 
  tmp_0 = tmp_1;
  
#line 1903 
  np->put_rx = tmp_0;
  
#line 1903 
  np->get_rx = tmp_0;
  
#line 1905 
  tmp_2 = nv_optimized(np);
  
#line 1905 
  if (tmp_2) 
#line 1905 
             tmp_3 = 0; else 
#line 1905 
                             tmp_3 = 1;
  
#line 1905 
  if (tmp_3) 
#line 1906 
             np->last_rx.orig = np->rx_ring.orig + ((unsigned long)np->rx_ring_size + 18446744073709551615U); else 
                                                                    
#line 1908 
                                                                    np->last_rx.ex = np->rx_ring.ex + ((unsigned long)np->rx_ring_size + 18446744073709551615U);
  
#line 1909 
  tmp_5 = np->rx_skb;
  
#line 1909 
  np->first_rx_ctx = tmp_5;
  
#line 1909 
  tmp_4 = tmp_5;
  
#line 1909 
  np->put_rx_ctx = tmp_4;
  
#line 1909 
  np->get_rx_ctx = tmp_4;
  
#line 1910 
  np->last_rx_ctx = np->rx_skb + ((unsigned long)np->rx_ring_size + 18446744073709551615U);
  
#line 1912 
  i = 0;
  
#line 1912 
  goto ldv_47962;
  ldv_47961: 
#line 1913 
  ;
  
#line 1913 
  tmp_6 = nv_optimized(np);
  
#line 1913 
  if (tmp_6) 
#line 1913 
             tmp_7 = 0; else 
#line 1913 
                             tmp_7 = 1;
  
#line 1913 
  if (tmp_7) {
    
#line 1914 
    (np->rx_ring.orig + i)->flaglen = 0U;
    
#line 1915 
    (np->rx_ring.orig + i)->buf = 0U;
  }
  else {
    
#line 1917 
    (np->rx_ring.ex + i)->flaglen = 0U;
    
#line 1918 
    (np->rx_ring.ex + i)->txvlan = 0U;
    
#line 1919 
    (np->rx_ring.ex + i)->bufhigh = 0U;
    
#line 1920 
    (np->rx_ring.ex + i)->buflow = 0U;
  }
  
#line 1922 
  (np->rx_skb + i)->skb = (struct sk_buff *)0;
  
#line 1923 
  (np->rx_skb + i)->dma = 0ULL;
  
#line 1912 
  i += 1;
  ldv_47962: 
#line 1913 
  ;
  
#line 1912 
  if (np->rx_ring_size > i) 
#line 1914 
                            goto ldv_47961; else 
#line 1917 
                                                 goto ldv_47963;
  ldv_47963: 
#line 1918 
  ;
  
#line 1919 
  return;
}


#line 1927  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_init_tx(struct net_device *dev)
{
  int i;
  union ring_type tmp_1;
  union ring_type tmp_0;
  int tmp_3;
  bool tmp_2;
  struct nv_skb_map *tmp_5;
  struct nv_skb_map *tmp_4;
  int tmp_7;
  bool tmp_6;
  
#line 1929 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 1932 
  tmp_1 = np->tx_ring;
  
#line 1932 
  np->first_tx = tmp_1;
  
#line 1932 
  tmp_0 = tmp_1;
  
#line 1932 
  np->put_tx = tmp_0;
  
#line 1932 
  np->get_tx = tmp_0;
  
#line 1934 
  tmp_2 = nv_optimized(np);
  
#line 1934 
  if (tmp_2) 
#line 1934 
             tmp_3 = 0; else 
#line 1934 
                             tmp_3 = 1;
  
#line 1934 
  if (tmp_3) 
#line 1935 
             np->last_tx.orig = np->tx_ring.orig + ((unsigned long)np->tx_ring_size + 18446744073709551615U); else 
                                                                    
#line 1937 
                                                                    np->last_tx.ex = np->tx_ring.ex + ((unsigned long)np->tx_ring_size + 18446744073709551615U);
  
#line 1938 
  tmp_5 = np->tx_skb;
  
#line 1938 
  np->first_tx_ctx = tmp_5;
  
#line 1938 
  tmp_4 = tmp_5;
  
#line 1938 
  np->put_tx_ctx = tmp_4;
  
#line 1938 
  np->get_tx_ctx = tmp_4;
  
#line 1939 
  np->last_tx_ctx = np->tx_skb + ((unsigned long)np->tx_ring_size + 18446744073709551615U);
  
#line 1940 
  netdev_reset_queue(np->dev);
  
#line 1941 
  np->tx_pkts_in_progress = 0U;
  
#line 1942 
  np->tx_change_owner = (struct nv_skb_map *)0;
  
#line 1943 
  np->tx_end_flip = (struct nv_skb_map *)0;
  
#line 1944 
  np->tx_stop = 0;
  
#line 1946 
  i = 0;
  
#line 1946 
  goto ldv_47970;
  ldv_47969: 
#line 1947 
  ;
  
#line 1947 
  tmp_6 = nv_optimized(np);
  
#line 1947 
  if (tmp_6) 
#line 1947 
             tmp_7 = 0; else 
#line 1947 
                             tmp_7 = 1;
  
#line 1947 
  if (tmp_7) {
    
#line 1948 
    (np->tx_ring.orig + i)->flaglen = 0U;
    
#line 1949 
    (np->tx_ring.orig + i)->buf = 0U;
  }
  else {
    
#line 1951 
    (np->tx_ring.ex + i)->flaglen = 0U;
    
#line 1952 
    (np->tx_ring.ex + i)->txvlan = 0U;
    
#line 1953 
    (np->tx_ring.ex + i)->bufhigh = 0U;
    
#line 1954 
    (np->tx_ring.ex + i)->buflow = 0U;
  }
  
#line 1956 
  (np->tx_skb + i)->skb = (struct sk_buff *)0;
  
#line 1957 
  (np->tx_skb + i)->dma = 0ULL;
  
#line 1958 
  (np->tx_skb + i)->dma_len = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(31))))0U;
  
#line 1959 
  (np->tx_skb + i)->dma_single = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
  
#line 1960 
  (np->tx_skb + i)->first_tx_desc = (struct ring_desc_ex *)0;
  
#line 1961 
  (np->tx_skb + i)->next_tx_ctx = (struct nv_skb_map *)0;
  
#line 1946 
  i += 1;
  ldv_47970: 
#line 1947 
  ;
  
#line 1946 
  if (np->tx_ring_size > i) 
#line 1948 
                            goto ldv_47969; else 
#line 1951 
                                                 goto ldv_47971;
  ldv_47971: 
#line 1952 
  ;
  
#line 1953 
  return;
}


#line 1965  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_init_ring(struct net_device *dev)
{
  int __retres;
  int tmp_3;
  bool tmp_2;
  
#line 1967 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 1969 
  nv_init_tx(dev);
  
#line 1970 
  nv_init_rx(dev);
  
#line 1972 
  tmp_2 = nv_optimized(np);
  
#line 1972 
  if (tmp_2) 
#line 1972 
             tmp_3 = 0; else 
#line 1972 
                             tmp_3 = 1;
  
#line 1972 
  if (tmp_3) {
    int tmp_0;
    
#line 1973 
    tmp_0 = nv_alloc_rx(dev);
    
#line 1973 
    __retres = tmp_0;
    
#line 1973 
    goto return_label;
  }
  else {
    int tmp_1;
    
#line 1975 
    tmp_1 = nv_alloc_rx_optimized(dev);
    
#line 1975 
    __retres = tmp_1;
    
#line 1975 
    goto return_label;
  }
  return_label: 
#line 1972 
                return __retres;
}


#line 1978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_unmap_txskb(struct fe_priv *np, struct nv_skb_map *tx_skb)
{
  
#line 1980 
  if (tx_skb->dma != 0ULL) {
    
#line 1981 
    if ((unsigned int)*((unsigned char *)tx_skb + 19UL) != 0U) 
#line 1982 
                                                               pci_unmap_single(np->pci_dev,tx_skb->dma,(unsigned long)tx_skb->dma_len,1); else 
                                                                    
#line 1986 
                                                                    pci_unmap_page(np->pci_dev,tx_skb->dma,(unsigned long)tx_skb->dma_len,1);
    
#line 1989 
    tx_skb->dma = 0ULL;
  }
  else ;
  
#line 1991 
  return;
}


#line 1993  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_release_txskb(struct fe_priv *np, struct nv_skb_map *tx_skb)
{
  int __retres;
  
#line 1995 
  nv_unmap_txskb(np,tx_skb);
  
#line 1996 
  if (tx_skb->skb != (struct sk_buff *)0) {
    
#line 1997 
    dev_kfree_skb_any(tx_skb->skb);
    
#line 1998 
    tx_skb->skb = (struct sk_buff *)0;
    
#line 1999 
    __retres = 1;
    
#line 1999 
    goto return_label;
  }
  else ;
  
#line 2001 
  __retres = 0;
  return_label: 
#line 2001 
                return __retres;
}


#line 2004  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_drain_tx(struct net_device *dev)
{
  unsigned int i;
  int tmp_1;
  bool tmp_0;
  int tmp_2;
  
#line 2006 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 2009 
  i = 0U;
  
#line 2009 
  goto ldv_47990;
  ldv_47989: 
#line 2010 
  ;
  
#line 2010 
  tmp_0 = nv_optimized(np);
  
#line 2010 
  if (tmp_0) 
#line 2010 
             tmp_1 = 0; else 
#line 2010 
                             tmp_1 = 1;
  
#line 2010 
  if (tmp_1) {
    
#line 2011 
    (np->tx_ring.orig + i)->flaglen = 0U;
    
#line 2012 
    (np->tx_ring.orig + i)->buf = 0U;
  }
  else {
    
#line 2014 
    (np->tx_ring.ex + i)->flaglen = 0U;
    
#line 2015 
    (np->tx_ring.ex + i)->txvlan = 0U;
    
#line 2016 
    (np->tx_ring.ex + i)->bufhigh = 0U;
    
#line 2017 
    (np->tx_ring.ex + i)->buflow = 0U;
  }
  
#line 2019 
  tmp_2 = nv_release_txskb(np,np->tx_skb + i);
  
#line 2019 
  if (tmp_2 != 0) {
    
#line 2020 
    u64_stats_init(& np->swstats_tx_syncp);
    
#line 2021 
    np->stat_tx_dropped += 1ULL;
    
#line 2022 
    u64_stats_init(& np->swstats_tx_syncp);
  }
  else ;
  
#line 2024 
  (np->tx_skb + i)->dma = 0ULL;
  
#line 2025 
  (np->tx_skb + i)->dma_len = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(31))))0U;
  
#line 2026 
  (np->tx_skb + i)->dma_single = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
  
#line 2027 
  (np->tx_skb + i)->first_tx_desc = (struct ring_desc_ex *)0;
  
#line 2028 
  (np->tx_skb + i)->next_tx_ctx = (struct nv_skb_map *)0;
  
#line 2009 
  i += 1U;
  ldv_47990: 
#line 2010 
  ;
  
#line 2009 
  if ((unsigned int)np->tx_ring_size > i) 
#line 2011 
                                          goto ldv_47989; else 
#line 2014 
                                                               goto ldv_47991;
  ldv_47991: 
#line 2015 
  ;
  
#line 2030 
  np->tx_pkts_in_progress = 0U;
  
#line 2031 
  np->tx_change_owner = (struct nv_skb_map *)0;
  
#line 2032 
  np->tx_end_flip = (struct nv_skb_map *)0;
  
#line 2033 
  return;
}


#line 2035  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_drain_rx(struct net_device *dev)
{
  int i;
  int tmp_1;
  bool tmp_0;
  
#line 2037 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 2040 
  i = 0;
  
#line 2040 
  goto ldv_47998;
  ldv_47997: 
#line 2041 
  ;
  
#line 2041 
  tmp_0 = nv_optimized(np);
  
#line 2041 
  if (tmp_0) 
#line 2041 
             tmp_1 = 0; else 
#line 2041 
                             tmp_1 = 1;
  
#line 2041 
  if (tmp_1) {
    
#line 2042 
    (np->rx_ring.orig + i)->flaglen = 0U;
    
#line 2043 
    (np->rx_ring.orig + i)->buf = 0U;
  }
  else {
    
#line 2045 
    (np->rx_ring.ex + i)->flaglen = 0U;
    
#line 2046 
    (np->rx_ring.ex + i)->txvlan = 0U;
    
#line 2047 
    (np->rx_ring.ex + i)->bufhigh = 0U;
    
#line 2048 
    (np->rx_ring.ex + i)->buflow = 0U;
  }
  
#line 2050 
  ldv_inline_asm();
  
#line 2051 
  if ((np->rx_skb + i)->skb != (struct sk_buff *)0) {
    unsigned char *tmp_2;
    
#line 2053 
    tmp_2 = skb_end_pointer((struct sk_buff const *)(np->rx_skb + i)->skb);
    
#line 2052 
    ;
    
#line 2052 
    ;
    
#line 2052 
    ;
    
#line 2052 
    pci_unmap_single(np->pci_dev,(np->rx_skb + i)->dma,(unsigned long)((long)tmp_2 - (long)((np->rx_skb + i)->skb)->data),2);
    
#line 2056 
    consume_skb((np->rx_skb + i)->skb);
    
#line 2057 
    (np->rx_skb + i)->skb = (struct sk_buff *)0;
  }
  else ;
  
#line 2040 
  i += 1;
  ldv_47998: 
#line 2041 
  ;
  
#line 2040 
  if (np->rx_ring_size > i) 
#line 2042 
                            goto ldv_47997; else 
#line 2045 
                                                 goto ldv_47999;
  ldv_47999: 
#line 2046 
  ;
  
#line 2047 
  return;
}


#line 2062  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_drain_rxtx(struct net_device *dev)
{
  
#line 2064 
  nv_drain_tx(dev);
  
#line 2065 
  nv_drain_rx(dev);
  
#line 2066 
  return;
}


#line 2068  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static u32 nv_get_empty_tx_slots(struct fe_priv *np)
{
  u32 __retres;
  
#line 2070 
  __retres = (unsigned int)np->tx_ring_size - (unsigned int)(((long)np->tx_ring_size + ((long)np->put_tx_ctx - (long)np->get_tx_ctx) / 40L) % (long)np->tx_ring_size);
  
#line 2070 
  return __retres;
}


#line 2073  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_legacybackoff_reseed(struct net_device *dev)
{
  u32 reg;
  u32 low;
  unsigned int tmp_0;
  unsigned int tmp_1;
  
#line 2075 
  u8 *base = get_hwbase(dev);
  
#line 2078 
  int tx_status = 0;
  
#line 2080 
  tmp_0 = readl((void const volatile *)(base + 156U));
  
#line 2080 
  reg = tmp_0 & 4294967040U;
  
#line 2081 
  get_random_bytes((void *)(& low),4);
  
#line 2082 
  reg = (low & 255U) | reg;
  
#line 2087 
  tmp_1 = readl((void const volatile *)(base + 132U));
  
#line 2087 
  tx_status = (int)tmp_1 & 1;
  
#line 2088 
  if (tx_status != 0) 
#line 2089 
                      nv_stop_tx(dev); else ;
  
#line 2090 
  nv_stop_rx(dev);
  
#line 2091 
  writel(reg,(void volatile *)(base + 156U));
  
#line 2092 
  if (tx_status != 0) 
#line 2093 
                      nv_start_tx(dev); else ;
  
#line 2094 
  nv_start_rx(dev);
  
#line 2095 
  return;
}


#line 2102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static u32 const main_seedset[8U][15U] = {{145U, 155U, 165U, 175U, 185U, 196U, 235U, 245U, 255U, 265U, 275U, 285U, 660U, 690U, 874U}, {245U, 255U, 265U, 575U, 385U, 298U, 335U, 345U, 355U, 366U, 375U, 385U, 761U, 790U, 974U}, {145U, 155U, 165U, 175U, 185U, 196U, 235U, 245U, 255U, 265U, 275U, 285U, 660U, 690U, 874U}, {245U, 255U, 265U, 575U, 385U, 298U, 335U, 345U, 355U, 366U, 375U, 386U, 761U, 790U, 974U}, {266U, 265U, 276U, 585U, 397U, 208U, 345U, 355U, 365U, 376U, 385U, 396U, 771U, 700U, 984U}, {266U, 265U, 276U, 586U, 397U, 208U, 346U, 355U, 365U, 376U, 285U, 396U, 771U, 700U, 984U}, {366U, 365U, 376U, 686U, 497U, 308U, 447U, 455U, 466U, 476U, 485U, 496U, 871U, 800U, 84U}, {466U, 465U, 476U, 786U, 597U, 408U, 547U, 555U, 566U, 576U, 585U, 597U, 971U, 900U, 184U}};

#line 2112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static u32 const gear_seedset[8U][15U] = {{251U, 262U, 273U, 324U, 319U, 508U, 375U, 364U, 341U, 371U, 398U, 193U, 375U, 30U, 295U}, {351U, 375U, 373U, 469U, 551U, 639U, 477U, 464U, 441U, 472U, 498U, 293U, 476U, 130U, 395U}, {351U, 375U, 373U, 469U, 551U, 639U, 477U, 464U, 441U, 472U, 498U, 293U, 476U, 130U, 397U}, {251U, 262U, 273U, 324U, 319U, 508U, 375U, 364U, 341U, 371U, 398U, 193U, 375U, 30U, 295U}, {251U, 262U, 273U, 324U, 319U, 508U, 375U, 364U, 341U, 371U, 398U, 193U, 375U, 30U, 295U}, {351U, 375U, 373U, 469U, 551U, 639U, 477U, 464U, 441U, 472U, 498U, 293U, 476U, 130U, 395U}, {351U, 375U, 373U, 469U, 551U, 639U, 477U, 464U, 441U, 472U, 498U, 293U, 476U, 130U, 395U}, {351U, 375U, 373U, 469U, 551U, 639U, 477U, 464U, 441U, 472U, 498U, 293U, 476U, 130U, 395U}};

#line 2122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_gear_backoff_reseed(struct net_device *dev)
{
  u32 miniseed1;
  u32 miniseed2;
  u32 miniseed2_reversed;
  u32 miniseed3;
  u32 miniseed3_reversed;
  u32 temp;
  u32 seedset;
  u32 combinedSeed;
  int i;
  
#line 2124 
  u8 *base = get_hwbase(dev);
  
#line 2132 
  get_random_bytes((void *)(& miniseed1),4);
  
#line 2133 
  miniseed1 &= 4095U;
  
#line 2134 
  if (miniseed1 == 0U) 
#line 2135 
                       miniseed1 = 2748U; else ;
  
#line 2137 
  get_random_bytes((void *)(& miniseed2),4);
  
#line 2138 
  miniseed2 &= 4095U;
  
#line 2139 
  if (miniseed2 == 0U) 
#line 2140 
                       miniseed2 = 2748U; else ;
  
#line 2141 
  miniseed2_reversed = (((miniseed2 >> 8) & 15U) | (miniseed2 & 240U)) | ((miniseed2 << 8) & 3840U);
  
#line 2146 
  get_random_bytes((void *)(& miniseed3),4);
  
#line 2147 
  miniseed3 &= 4095U;
  
#line 2148 
  if (miniseed3 == 0U) 
#line 2149 
                       miniseed3 = 2748U; else ;
  
#line 2150 
  miniseed3_reversed = (((miniseed3 >> 8) & 15U) | (miniseed3 & 240U)) | ((miniseed3 << 8) & 3840U);
  
#line 2155 
  combinedSeed = ((miniseed1 ^ miniseed2_reversed) << 12) | (miniseed2 ^ miniseed3_reversed);
  
#line 2159 
  if ((combinedSeed & 1023U) == 0U) 
#line 2160 
                                    combinedSeed |= 8U; else ;
  
#line 2161 
  if ((combinedSeed & 4190208U) == 0U) 
#line 2162 
                                       combinedSeed |= 32768U; else ;
  
#line 2165 
  temp = 1879048192U;
  
#line 2166 
  temp = (combinedSeed & 1023U) | temp;
  
#line 2167 
  temp = (combinedSeed >> 12) | temp;
  
#line 2168 
  writel(temp,(void volatile *)(base + 196U));
  
#line 2171 
  get_random_bytes((void *)(& seedset),4);
  
#line 2172 
  seedset &= 7U;
  
#line 2173 
  i = 1;
  
#line 2173 
  goto ldv_48029;
  ldv_48028: 
#line 2174 
  ;
  
#line 2174 
  temp = (unsigned int)((i << 24) | 1879048192);
  
#line 2175 
  temp = (main_seedset[seedset][i + -1] & 1023U) | temp;
  
#line 2176 
  temp = ((gear_seedset[seedset][i + -1] << 12) & 4190208U) | temp;
  
#line 2177 
  writel(temp,(void volatile *)(base + 196U));
  
#line 2173 
  i += 1;
  ldv_48029: 
#line 2174 
  ;
  
#line 2173 
  if (i <= 15) 
#line 2175 
               goto ldv_48028; else 
#line 2178 
                                    goto ldv_48030;
  ldv_48030: 
#line 2179 
  ;
  
#line 2180 
  return;
}


#line 2185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static netdev_tx_t nv_start_xmit(struct sk_buff *skb, struct net_device *dev)
{
  netdev_tx_t __retres;
  int tmp_0;
  unsigned char *tmp_1;
  unsigned int i;
  u32 bcnt;
  u32 empty_slots;
  struct ring_desc *put_tx;
  struct ring_desc *start_tx;
  struct ring_desc *prev_tx;
  struct nv_skb_map *prev_tx_ctx;
  unsigned long flags;
  int tmp_5;
  struct ring_desc *tmp_6;
  struct nv_skb_map *tmp_7;
  bool tmp_16;
  u8 *tmp_17;
  
#line 2187 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 2188 
  u32 tx_flags = 0U;
  
#line 2189 
  if (np->desc_ver == 1U) 
#line 2189 
                          tmp_0 = 65536; else 
#line 2189 
                                              tmp_0 = 536870912;
  
#line 2189 
  u32 tx_flags_extra = (unsigned int)tmp_0;
  
#line 2190 
  tmp_1 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 2190 
  unsigned int fragments = (unsigned int)((struct skb_shared_info *)tmp_1)->nr_frags;
  
#line 2192 
  u32 offset = 0U;
  
#line 2194 
  u32 size = skb_headlen((struct sk_buff const *)skb);
  
#line 2195 
  u32 entries = (size >> 14) + (unsigned int)((size & 16383U) != 0U);
  
#line 2201 
  struct nv_skb_map *tmp_tx_ctx = (struct nv_skb_map *)0;
  
#line 2201 
  struct nv_skb_map *start_tx_ctx = (struct nv_skb_map *)0;
  
#line 2205 
  i = 0U;
  
#line 2205 
  goto ldv_48054;
  ldv_48053: 
#line 2206 
  ;
  {
    u32 tmp_4;
    unsigned char *tmp_3;
    
#line 2206 
    tmp_3 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2206 
    tmp_4 = skb_frag_size((skb_frag_t const *)(& ((struct skb_shared_info *)tmp_3)->frags[i]));
    
#line 2206 
    u32 frag_size = tmp_4;
    
#line 2208 
    entries = ((frag_size >> 14) + (unsigned int)((frag_size & 16383U) != 0U)) + entries;
  }
  
#line 2205 
  i += 1U;
  ldv_48054: 
#line 2206 
  ;
  
#line 2205 
  if (i < fragments) 
#line 2207 
                     goto ldv_48053; else 
#line 2210 
                                          goto ldv_48055;
  ldv_48055: 
#line 2211 
  ;
  
#line 2212 
  ldv___ldv_spin_lock_74(& np->lock);
  
#line 2213 
  empty_slots = nv_get_empty_tx_slots(np);
  
#line 2214 
  if ((long)(empty_slots <= entries) != 0L) {
    
#line 2215 
    netif_start_queue(dev);
    
#line 2216 
    np->tx_stop = 1;
    
#line 2217 
    ldv_spin_unlock_irqrestore_75(& np->lock,flags);
    
#line 2218 
    __retres = NETDEV_TX_BUSY;
    
#line 2218 
    goto return_label;
  }
  else ;
  
#line 2220 
  ldv_spin_unlock_irqrestore_76(& np->lock,flags);
  
#line 2222 
  put_tx = np->put_tx.orig;
  
#line 2222 
  start_tx = put_tx;
  ldv_48056: 
#line 2223 
  ;
  
#line 2226 
  prev_tx = put_tx;
  
#line 2227 
  prev_tx_ctx = np->put_tx_ctx;
  
#line 2228 
  if (16384U < size) 
#line 2228 
                     bcnt = 16384U; else 
#line 2228 
                                         bcnt = size;
  
#line 2229 
  (np->put_tx_ctx)->dma = pci_map_single(np->pci_dev,(void *)(skb->data + offset),(unsigned long)bcnt,1);
  
#line 2231 
  tmp_5 = pci_dma_mapping_error(np->pci_dev,(np->put_tx_ctx)->dma);
  
#line 2231 
  if (tmp_5 != 0) {
    
#line 2234 
    dev_kfree_skb_any(skb);
    
#line 2235 
    u64_stats_init(& np->swstats_tx_syncp);
    
#line 2236 
    np->stat_tx_dropped += 1ULL;
    
#line 2237 
    u64_stats_init(& np->swstats_tx_syncp);
    
#line 2238 
    __retres = NETDEV_TX_OK;
    
#line 2238 
    goto return_label;
  }
  else ;
  
#line 2240 
  (np->put_tx_ctx)->dma_len = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(31))))bcnt;
  
#line 2241 
  (np->put_tx_ctx)->dma_single = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
  
#line 2242 
  put_tx->buf = (unsigned int)(np->put_tx_ctx)->dma;
  
#line 2243 
  put_tx->flaglen = (bcnt + 4294967295U) | tx_flags;
  
#line 2245 
  tx_flags = np->tx_flags;
  
#line 2246 
  offset += bcnt;
  
#line 2247 
  size -= bcnt;
  
#line 2248 
  tmp_6 = put_tx;
  
#line 2248 
  put_tx += 1;
  
#line 2248 
  ;
  
#line 2248 
  if ((long)(tmp_6 == np->last_tx.orig) != 0L) 
#line 2249 
                                               put_tx = np->first_tx.orig; else ;
  
#line 2250 
  tmp_7 = np->put_tx_ctx;
  
#line 2250 
  np->put_tx_ctx += 1;
  
#line 2250 
  ;
  
#line 2250 
  if ((long)(tmp_7 == np->last_tx_ctx) != 0L) 
#line 2251 
                                              np->put_tx_ctx = np->first_tx_ctx; else ;
  
#line 2252 
  if (size != 0U) 
#line 2254 
                  goto ldv_48056; else 
#line 2257 
                                       goto ldv_48057;
  ldv_48057: 
#line 2258 
  ;
  
#line 2255 
  i = 0U;
  
#line 2255 
  goto ldv_48065;
  ldv_48064: 
#line 2256 
  ;
  {
    unsigned char *tmp_8;
    int tmp_11;
    struct ring_desc *tmp_12;
    struct nv_skb_map *tmp_13;
    
#line 2256 
    tmp_8 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2256 
    skb_frag_t const *frag = (skb_frag_t const *)(& ((struct skb_shared_info *)tmp_8)->frags[i]);
    
#line 2257 
    u32 frag_size_0 = skb_frag_size(frag);
    
#line 2258 
    offset = 0U;
    ldv_48062: 
#line 2259 
    ;
    
#line 2261 
    prev_tx = put_tx;
    
#line 2262 
    prev_tx_ctx = np->put_tx_ctx;
    
#line 2263 
    if (start_tx_ctx == (struct nv_skb_map *)0) {
      
#line 2264 
      tmp_tx_ctx = np->put_tx_ctx;
      
#line 2264 
      start_tx_ctx = tmp_tx_ctx;
    }
    else ;
    
#line 2266 
    if (16384U < frag_size_0) 
#line 2266 
                              bcnt = 16384U; else 
#line 2266 
                                                  bcnt = frag_size_0;
    
#line 2267 
    (np->put_tx_ctx)->dma = skb_frag_dma_map(& (np->pci_dev)->dev,frag,(unsigned long)offset,(unsigned long)bcnt,(enum dma_data_direction)DMA_TO_DEVICE);
    
#line 2272 
    tmp_11 = dma_mapping_error(& (np->pci_dev)->dev,(np->put_tx_ctx)->dma);
    
#line 2272 
    if (tmp_11 != 0) {
      struct nv_skb_map *tmp_10;
      ldv_48060: 
#line 2274 
      ;
      
#line 2276 
      nv_unmap_txskb(np,start_tx_ctx);
      
#line 2277 
      tmp_10 = tmp_tx_ctx;
      
#line 2277 
      tmp_tx_ctx += 1;
      
#line 2277 
      ;
      
#line 2277 
      if ((long)(tmp_10 == np->last_tx_ctx) != 0L) 
#line 2278 
                                                   tmp_tx_ctx = np->first_tx_ctx; else ;
      
#line 2279 
      if (np->put_tx_ctx != tmp_tx_ctx) 
#line 2281 
                                        goto ldv_48060; else 
#line 2284 
                                                             goto ldv_48061;
      ldv_48061: 
#line 2285 
      ;
      
#line 2280 
      dev_kfree_skb_any(skb);
      
#line 2281 
      np->put_tx_ctx = start_tx_ctx;
      
#line 2282 
      u64_stats_init(& np->swstats_tx_syncp);
      
#line 2283 
      np->stat_tx_dropped += 1ULL;
      
#line 2284 
      u64_stats_init(& np->swstats_tx_syncp);
      
#line 2285 
      __retres = NETDEV_TX_OK;
      
#line 2285 
      goto return_label;
    }
    else ;
    
#line 2288 
    (np->put_tx_ctx)->dma_len = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(31))))bcnt;
    
#line 2289 
    (np->put_tx_ctx)->dma_single = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
    
#line 2290 
    put_tx->buf = (unsigned int)(np->put_tx_ctx)->dma;
    
#line 2291 
    put_tx->flaglen = (bcnt + 4294967295U) | tx_flags;
    
#line 2293 
    offset += bcnt;
    
#line 2294 
    frag_size_0 -= bcnt;
    
#line 2295 
    tmp_12 = put_tx;
    
#line 2295 
    put_tx += 1;
    
#line 2295 
    ;
    
#line 2295 
    if ((long)(tmp_12 == np->last_tx.orig) != 0L) 
#line 2296 
                                                  put_tx = np->first_tx.orig; else ;
    
#line 2297 
    tmp_13 = np->put_tx_ctx;
    
#line 2297 
    np->put_tx_ctx += 1;
    
#line 2297 
    ;
    
#line 2297 
    if ((long)(tmp_13 == np->last_tx_ctx) != 0L) 
#line 2298 
                                                 np->put_tx_ctx = np->first_tx_ctx; else ;
    
#line 2299 
    if (frag_size_0 != 0U) 
#line 2301 
                           goto ldv_48062; else 
#line 2304 
                                                goto ldv_48063;
    ldv_48063: 
#line 2305 
    ;
  }
  
#line 2255 
  i += 1U;
  ldv_48065: 
#line 2256 
  ;
  
#line 2255 
  if (i < fragments) 
#line 2257 
                     goto ldv_48064; else 
#line 2260 
                                          goto ldv_48066;
  ldv_48066: 
#line 2261 
  ;
  
#line 2303 
  prev_tx->flaglen |= tx_flags_extra;
  
#line 2306 
  prev_tx_ctx->skb = skb;
  
#line 2308 
  tmp_16 = skb_is_gso((struct sk_buff const *)skb);
  
#line 2308 
  if ((int)tmp_16 != 0) {
    unsigned char *tmp_14;
    
#line 2309 
    tmp_14 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2309 
    tx_flags_extra = (unsigned int)(((int)((struct skb_shared_info *)tmp_14)->gso_size << 14) | 268435456);
  }
  else {
    int tmp_15;
    
#line 2312 
    if ((unsigned int)*((unsigned char *)skb + 145UL) == 6U) 
#line 2312 
                                                             tmp_15 = 201326592; else 
                                                                    
#line 2312 
                                                                    tmp_15 = 0;
    
#line 2311 
    tx_flags_extra = (unsigned int)tmp_15;
  }
  
#line 2314 
  ldv___ldv_spin_lock_77(& np->lock);
  
#line 2317 
  start_tx->flaglen |= tx_flags | tx_flags_extra;
  
#line 2319 
  netdev_sent_queue(np->dev,skb->len);
  
#line 2321 
  skb_tx_timestamp(skb);
  
#line 2323 
  np->put_tx.orig = put_tx;
  
#line 2325 
  ldv_spin_unlock_irqrestore_78(& np->lock,flags);
  
#line 2327 
  tmp_17 = get_hwbase(dev);
  
#line 2327 
  ;
  
#line 2327 
  writel(np->txrxctl_bits | 1U,(void volatile *)(tmp_17 + 324U));
  
#line 2328 
  __retres = NETDEV_TX_OK;
  return_label: 
#line 2328 
                return __retres;
}


#line 2331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static netdev_tx_t nv_start_xmit_optimized(struct sk_buff *skb, struct net_device *dev)
{
  netdev_tx_t __retres;
  u32 tx_flags_extra;
  unsigned char *tmp_0;
  unsigned int i;
  u32 bcnt;
  u32 empty_slots;
  struct ring_desc_ex *put_tx;
  struct ring_desc_ex *start_tx;
  struct ring_desc_ex *prev_tx;
  struct nv_skb_map *prev_tx_ctx;
  unsigned long flags;
  int tmp_4;
  struct ring_desc_ex *tmp_7;
  struct nv_skb_map *tmp_8;
  bool tmp_19;
  u8 *tmp_20;
  
#line 2334 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 2335 
  u32 tx_flags = 0U;
  
#line 2337 
  tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 2337 
  unsigned int fragments = (unsigned int)((struct skb_shared_info *)tmp_0)->nr_frags;
  
#line 2339 
  u32 offset = 0U;
  
#line 2341 
  u32 size = skb_headlen((struct sk_buff const *)skb);
  
#line 2342 
  u32 entries = (size >> 14) + (unsigned int)((size & 16383U) != 0U);
  
#line 2348 
  struct nv_skb_map *start_tx_ctx = (struct nv_skb_map *)0;
  
#line 2349 
  struct nv_skb_map *tmp_tx_ctx = (struct nv_skb_map *)0;
  
#line 2353 
  i = 0U;
  
#line 2353 
  goto ldv_48090;
  ldv_48089: 
#line 2354 
  ;
  {
    u32 tmp_3;
    unsigned char *tmp_2;
    
#line 2354 
    tmp_2 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2354 
    tmp_3 = skb_frag_size((skb_frag_t const *)(& ((struct skb_shared_info *)tmp_2)->frags[i]));
    
#line 2354 
    u32 frag_size = tmp_3;
    
#line 2356 
    entries = ((frag_size >> 14) + (unsigned int)((frag_size & 16383U) != 0U)) + entries;
  }
  
#line 2353 
  i += 1U;
  ldv_48090: 
#line 2354 
  ;
  
#line 2353 
  if (i < fragments) 
#line 2355 
                     goto ldv_48089; else 
#line 2358 
                                          goto ldv_48091;
  ldv_48091: 
#line 2359 
  ;
  
#line 2360 
  ldv___ldv_spin_lock_79(& np->lock);
  
#line 2361 
  empty_slots = nv_get_empty_tx_slots(np);
  
#line 2362 
  if ((long)(empty_slots <= entries) != 0L) {
    
#line 2363 
    netif_start_queue(dev);
    
#line 2364 
    np->tx_stop = 1;
    
#line 2365 
    ldv_spin_unlock_irqrestore_80(& np->lock,flags);
    
#line 2366 
    __retres = NETDEV_TX_BUSY;
    
#line 2366 
    goto return_label;
  }
  else ;
  
#line 2368 
  ldv_spin_unlock_irqrestore_81(& np->lock,flags);
  
#line 2370 
  put_tx = np->put_tx.ex;
  
#line 2370 
  start_tx = put_tx;
  
#line 2371 
  start_tx_ctx = np->put_tx_ctx;
  ldv_48092: 
#line 2372 
  ;
  
#line 2375 
  prev_tx = put_tx;
  
#line 2376 
  prev_tx_ctx = np->put_tx_ctx;
  
#line 2377 
  if (16384U < size) 
#line 2377 
                     bcnt = 16384U; else 
#line 2377 
                                         bcnt = size;
  
#line 2378 
  (np->put_tx_ctx)->dma = pci_map_single(np->pci_dev,(void *)(skb->data + offset),(unsigned long)bcnt,1);
  
#line 2380 
  tmp_4 = pci_dma_mapping_error(np->pci_dev,(np->put_tx_ctx)->dma);
  
#line 2380 
  if (tmp_4 != 0) {
    
#line 2383 
    dev_kfree_skb_any(skb);
    
#line 2384 
    u64_stats_init(& np->swstats_tx_syncp);
    
#line 2385 
    np->stat_tx_dropped += 1ULL;
    
#line 2386 
    u64_stats_init(& np->swstats_tx_syncp);
    
#line 2387 
    __retres = NETDEV_TX_OK;
    
#line 2387 
    goto return_label;
  }
  else ;
  
#line 2389 
  (np->put_tx_ctx)->dma_len = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(31))))bcnt;
  
#line 2390 
  (np->put_tx_ctx)->dma_single = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
  
#line 2391 
  put_tx->bufhigh = dma_high((np->put_tx_ctx)->dma);
  
#line 2392 
  put_tx->buflow = dma_low((np->put_tx_ctx)->dma);
  
#line 2393 
  put_tx->flaglen = (bcnt + 4294967295U) | tx_flags;
  
#line 2395 
  tx_flags = 2147483648U;
  
#line 2396 
  offset += bcnt;
  
#line 2397 
  size -= bcnt;
  
#line 2398 
  tmp_7 = put_tx;
  
#line 2398 
  put_tx += 1;
  
#line 2398 
  ;
  
#line 2398 
  if ((long)(tmp_7 == np->last_tx.ex) != 0L) 
#line 2399 
                                             put_tx = np->first_tx.ex; else ;
  
#line 2400 
  tmp_8 = np->put_tx_ctx;
  
#line 2400 
  np->put_tx_ctx += 1;
  
#line 2400 
  ;
  
#line 2400 
  if ((long)(tmp_8 == np->last_tx_ctx) != 0L) 
#line 2401 
                                              np->put_tx_ctx = np->first_tx_ctx; else ;
  
#line 2402 
  if (size != 0U) 
#line 2404 
                  goto ldv_48092; else 
#line 2407 
                                       goto ldv_48093;
  ldv_48093: 
#line 2408 
  ;
  
#line 2405 
  i = 0U;
  
#line 2405 
  goto ldv_48101;
  ldv_48100: 
#line 2406 
  ;
  {
    unsigned char *tmp_9;
    int tmp_12;
    struct ring_desc_ex *tmp_15;
    struct nv_skb_map *tmp_16;
    
#line 2406 
    tmp_9 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2406 
    skb_frag_t *frag = & ((struct skb_shared_info *)tmp_9)->frags[i];
    
#line 2407 
    u32 frag_size_0 = skb_frag_size((skb_frag_t const *)frag);
    
#line 2408 
    offset = 0U;
    ldv_48098: 
#line 2409 
    ;
    
#line 2411 
    prev_tx = put_tx;
    
#line 2412 
    prev_tx_ctx = np->put_tx_ctx;
    
#line 2413 
    if (16384U < frag_size_0) 
#line 2413 
                              bcnt = 16384U; else 
#line 2413 
                                                  bcnt = frag_size_0;
    
#line 2414 
    if (start_tx_ctx == (struct nv_skb_map *)0) {
      
#line 2415 
      tmp_tx_ctx = np->put_tx_ctx;
      
#line 2415 
      start_tx_ctx = tmp_tx_ctx;
    }
    else ;
    
#line 2416 
    (np->put_tx_ctx)->dma = skb_frag_dma_map(& (np->pci_dev)->dev,(skb_frag_t const *)frag,(unsigned long)offset,(unsigned long)bcnt,(enum dma_data_direction)DMA_TO_DEVICE);
    
#line 2422 
    tmp_12 = dma_mapping_error(& (np->pci_dev)->dev,(np->put_tx_ctx)->dma);
    
#line 2422 
    if (tmp_12 != 0) {
      struct nv_skb_map *tmp_11;
      ldv_48096: 
#line 2424 
      ;
      
#line 2426 
      nv_unmap_txskb(np,start_tx_ctx);
      
#line 2427 
      tmp_11 = tmp_tx_ctx;
      
#line 2427 
      tmp_tx_ctx += 1;
      
#line 2427 
      ;
      
#line 2427 
      if ((long)(tmp_11 == np->last_tx_ctx) != 0L) 
#line 2428 
                                                   tmp_tx_ctx = np->first_tx_ctx; else ;
      
#line 2429 
      if (np->put_tx_ctx != tmp_tx_ctx) 
#line 2431 
                                        goto ldv_48096; else 
#line 2434 
                                                             goto ldv_48097;
      ldv_48097: 
#line 2435 
      ;
      
#line 2430 
      dev_kfree_skb_any(skb);
      
#line 2431 
      np->put_tx_ctx = start_tx_ctx;
      
#line 2432 
      u64_stats_init(& np->swstats_tx_syncp);
      
#line 2433 
      np->stat_tx_dropped += 1ULL;
      
#line 2434 
      u64_stats_init(& np->swstats_tx_syncp);
      
#line 2435 
      __retres = NETDEV_TX_OK;
      
#line 2435 
      goto return_label;
    }
    else ;
    
#line 2437 
    (np->put_tx_ctx)->dma_len = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(31))))bcnt;
    
#line 2438 
    (np->put_tx_ctx)->dma_single = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
    
#line 2439 
    put_tx->bufhigh = dma_high((np->put_tx_ctx)->dma);
    
#line 2440 
    put_tx->buflow = dma_low((np->put_tx_ctx)->dma);
    
#line 2441 
    put_tx->flaglen = (bcnt + 4294967295U) | tx_flags;
    
#line 2443 
    offset += bcnt;
    
#line 2444 
    frag_size_0 -= bcnt;
    
#line 2445 
    tmp_15 = put_tx;
    
#line 2445 
    put_tx += 1;
    
#line 2445 
    ;
    
#line 2445 
    if ((long)(tmp_15 == np->last_tx.ex) != 0L) 
#line 2446 
                                                put_tx = np->first_tx.ex; else ;
    
#line 2447 
    tmp_16 = np->put_tx_ctx;
    
#line 2447 
    np->put_tx_ctx += 1;
    
#line 2447 
    ;
    
#line 2447 
    if ((long)(tmp_16 == np->last_tx_ctx) != 0L) 
#line 2448 
                                                 np->put_tx_ctx = np->first_tx_ctx; else ;
    
#line 2449 
    if (frag_size_0 != 0U) 
#line 2451 
                           goto ldv_48098; else 
#line 2454 
                                                goto ldv_48099;
    ldv_48099: 
#line 2455 
    ;
  }
  
#line 2405 
  i += 1U;
  ldv_48101: 
#line 2406 
  ;
  
#line 2405 
  if (i < fragments) 
#line 2407 
                     goto ldv_48100; else 
#line 2410 
                                          goto ldv_48102;
  ldv_48102: 
#line 2411 
  ;
  
#line 2453 
  prev_tx->flaglen |= 536870912U;
  
#line 2456 
  prev_tx_ctx->skb = skb;
  
#line 2458 
  tmp_19 = skb_is_gso((struct sk_buff const *)skb);
  
#line 2458 
  if ((int)tmp_19 != 0) {
    unsigned char *tmp_17;
    
#line 2459 
    tmp_17 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2459 
    tx_flags_extra = (unsigned int)(((int)((struct skb_shared_info *)tmp_17)->gso_size << 14) | 268435456);
  }
  else {
    int tmp_18;
    
#line 2462 
    if ((unsigned int)*((unsigned char *)skb + 145UL) == 6U) 
#line 2462 
                                                             tmp_18 = 201326592; else 
                                                                    
#line 2462 
                                                                    tmp_18 = 0;
    
#line 2461 
    tx_flags_extra = (unsigned int)tmp_18;
  }
  
#line 2465 
  if (((int)skb->vlan_tci & 4096) != 0) 
#line 2466 
                                        start_tx->txvlan = (unsigned int)(((int)skb->vlan_tci & -266241) | 262144); else 
                                                                    
#line 2469 
                                                                    start_tx->txvlan = 0U;
  
#line 2471 
  ldv___ldv_spin_lock_82(& np->lock);
  
#line 2473 
  if (np->tx_limit != 0) 
    
#line 2479 
    if (np->tx_pkts_in_progress == 16U) {
      
#line 2480 
      if (np->tx_change_owner == (struct nv_skb_map *)0) 
#line 2481 
                                                         np->tx_change_owner = start_tx_ctx; else ;
      
#line 2484 
      tx_flags &= 2147483647U;
      
#line 2485 
      start_tx_ctx->first_tx_desc = start_tx;
      
#line 2486 
      start_tx_ctx->next_tx_ctx = np->put_tx_ctx;
      
#line 2487 
      np->tx_end_flip = np->put_tx_ctx;
    }
    else 
#line 2489 
         np->tx_pkts_in_progress += 1U;
  else ;
  
#line 2494 
  start_tx->flaglen |= tx_flags | tx_flags_extra;
  
#line 2496 
  netdev_sent_queue(np->dev,skb->len);
  
#line 2498 
  skb_tx_timestamp(skb);
  
#line 2500 
  np->put_tx.ex = put_tx;
  
#line 2502 
  ldv_spin_unlock_irqrestore_83(& np->lock,flags);
  
#line 2504 
  tmp_20 = get_hwbase(dev);
  
#line 2504 
  ;
  
#line 2504 
  writel(np->txrxctl_bits | 1U,(void volatile *)(tmp_20 + 324U));
  
#line 2505 
  __retres = NETDEV_TX_OK;
  return_label: 
#line 2505 
                return __retres;
}


#line 2508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static void nv_tx_flip_ownership(struct net_device *dev)
{
  
#line 2510 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 2512 
  np->tx_pkts_in_progress -= 1U;
  
#line 2513 
  if (np->tx_change_owner != (struct nv_skb_map *)0) {
    u8 *tmp_0;
    
#line 2514 
    ((np->tx_change_owner)->first_tx_desc)->flaglen |= 2147483648U;
    
#line 2516 
    np->tx_pkts_in_progress += 1U;
    
#line 2518 
    np->tx_change_owner = (np->tx_change_owner)->next_tx_ctx;
    
#line 2519 
    if (np->tx_change_owner == np->tx_end_flip) 
#line 2520 
                                                np->tx_change_owner = (struct nv_skb_map *)0; else ;
    
#line 2522 
    tmp_0 = get_hwbase(dev);
    
#line 2522 
    ;
    
#line 2522 
    writel(np->txrxctl_bits | 1U,(void volatile *)(tmp_0 + 324U));
  }
  else ;
  
#line 2524 
  return;
}


#line 2531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_tx_done(struct net_device *dev, int limit)
{
  u32 flags;
  struct ring_desc *tmp_0;
  struct nv_skb_map *tmp_1;
  
#line 2533 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 2535 
  int tx_work = 0;
  
#line 2536 
  struct ring_desc *orig_get_tx = np->get_tx.orig;
  
#line 2537 
  unsigned int bytes_compl = 0U;
  
#line 2539 
  goto ldv_48117;
  ldv_48116: 
#line 2540 
  ;
  
#line 2543 
  nv_unmap_txskb(np,np->get_tx_ctx);
  
#line 2545 
  if (np->desc_ver == 1U) {
    
#line 2546 
    if ((flags & 65536U) != 0U) {
      
#line 2547 
      if ((flags & 1073741824U) != 0U) {
        
#line 2548 
        if ((flags & 524288U) != 0U && (flags & 15728640U) == 0U) 
#line 2550 
                                                                  nv_legacybackoff_reseed(dev); else ;
      }
      else {
        
#line 2552 
        u64_stats_init(& np->swstats_tx_syncp);
        
#line 2553 
        np->stat_tx_packets += 1ULL;
        
#line 2554 
        np->stat_tx_bytes += (unsigned long long)((np->get_tx_ctx)->skb)->len;
        
#line 2555 
        u64_stats_init(& np->swstats_tx_syncp);
      }
      
#line 2557 
      bytes_compl = ((np->get_tx_ctx)->skb)->len + bytes_compl;
      
#line 2558 
      dev_kfree_skb_any((np->get_tx_ctx)->skb);
      
#line 2559 
      (np->get_tx_ctx)->skb = (struct sk_buff *)0;
      
#line 2560 
      tx_work += 1;
    }
    else ;
  }
  else 
    
#line 2563 
    if ((flags & 536870912U) != 0U) {
      
#line 2564 
      if ((flags & 1073741824U) != 0U) {
        
#line 2565 
        if ((flags & 262144U) != 0U && (flags & 7864320U) == 0U) 
#line 2567 
                                                                 nv_legacybackoff_reseed(dev); else ;
      }
      else {
        
#line 2569 
        u64_stats_init(& np->swstats_tx_syncp);
        
#line 2570 
        np->stat_tx_packets += 1ULL;
        
#line 2571 
        np->stat_tx_bytes += (unsigned long long)((np->get_tx_ctx)->skb)->len;
        
#line 2572 
        u64_stats_init(& np->swstats_tx_syncp);
      }
      
#line 2574 
      bytes_compl = ((np->get_tx_ctx)->skb)->len + bytes_compl;
      
#line 2575 
      dev_kfree_skb_any((np->get_tx_ctx)->skb);
      
#line 2576 
      (np->get_tx_ctx)->skb = (struct sk_buff *)0;
      
#line 2577 
      tx_work += 1;
    }
    else ;
  
#line 2580 
  tmp_0 = np->get_tx.orig;
  
#line 2580 
  np->get_tx.orig += 1;
  
#line 2580 
  ;
  
#line 2580 
  if ((long)(tmp_0 == np->last_tx.orig) != 0L) 
#line 2581 
                                               np->get_tx.orig = np->first_tx.orig; else ;
  
#line 2582 
  tmp_1 = np->get_tx_ctx;
  
#line 2582 
  np->get_tx_ctx += 1;
  
#line 2582 
  ;
  
#line 2582 
  if ((long)(tmp_1 == np->last_tx_ctx) != 0L) 
#line 2583 
                                              np->get_tx_ctx = np->first_tx_ctx; else ;
  ldv_48117: 
#line 2584 
  ;
  
#line 2539 
  if (np->get_tx.orig != np->put_tx.orig) {
    
#line 2539 
    flags = (np->get_tx.orig)->flaglen;
    
#line 2539 
    if (flags >= (u32)0) {
      
#line 2540 
      if (tx_work < limit) 
#line 2543 
                           goto ldv_48116; else 
#line 2546 
                                                goto ldv_48118;
    }
    else 
#line 2546 
         goto ldv_48118;
  }
  else 
#line 2546 
       goto ldv_48118;
  ldv_48118: 
#line 2547 
  ;
  
#line 2586 
  netdev_completed_queue(np->dev,(unsigned int)tx_work,bytes_compl);
  
#line 2588 
  if ((long)(np->tx_stop == 1) != 0L && (long)(np->get_tx.orig != orig_get_tx) != 0L) {
    
#line 2589 
    np->tx_stop = 0;
    
#line 2590 
    netif_wake_queue(dev);
  }
  else ;
  
#line 2592 
  return tx_work;
}


#line 2595  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_tx_done_optimized(struct net_device *dev, int limit)
{
  u32 flags;
  struct ring_desc_ex *tmp_0;
  struct nv_skb_map *tmp_1;
  
#line 2597 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 2599 
  int tx_work = 0;
  
#line 2600 
  struct ring_desc_ex *orig_get_tx = np->get_tx.ex;
  
#line 2601 
  unsigned long bytes_cleaned = 0UL;
  
#line 2603 
  goto ldv_48129;
  ldv_48128: 
#line 2604 
  ;
  
#line 2607 
  nv_unmap_txskb(np,np->get_tx_ctx);
  
#line 2609 
  if ((flags & 536870912U) != 0U) {
    
#line 2610 
    if ((flags & 1073741824U) != 0U) {
      
#line 2611 
      if ((flags & 262144U) != 0U && (flags & 7864320U) == 0U) 
        
#line 2613 
        if ((np->driver_data & 2097152U) != 0U) 
#line 2614 
                                                nv_gear_backoff_reseed(dev); else 
                                                                    
#line 2616 
                                                                    nv_legacybackoff_reseed(dev);
      else ;
    }
    else {
      
#line 2619 
      u64_stats_init(& np->swstats_tx_syncp);
      
#line 2620 
      np->stat_tx_packets += 1ULL;
      
#line 2621 
      np->stat_tx_bytes += (unsigned long long)((np->get_tx_ctx)->skb)->len;
      
#line 2622 
      u64_stats_init(& np->swstats_tx_syncp);
    }
    
#line 2625 
    bytes_cleaned = (unsigned long)((np->get_tx_ctx)->skb)->len + bytes_cleaned;
    
#line 2626 
    dev_kfree_skb_any((np->get_tx_ctx)->skb);
    
#line 2627 
    (np->get_tx_ctx)->skb = (struct sk_buff *)0;
    
#line 2628 
    tx_work += 1;
    
#line 2630 
    if (np->tx_limit != 0) 
#line 2631 
                           nv_tx_flip_ownership(dev); else ;
  }
  else ;
  
#line 2634 
  tmp_0 = np->get_tx.ex;
  
#line 2634 
  np->get_tx.ex += 1;
  
#line 2634 
  ;
  
#line 2634 
  if ((long)(tmp_0 == np->last_tx.ex) != 0L) 
#line 2635 
                                             np->get_tx.ex = np->first_tx.ex; else ;
  
#line 2636 
  tmp_1 = np->get_tx_ctx;
  
#line 2636 
  np->get_tx_ctx += 1;
  
#line 2636 
  ;
  
#line 2636 
  if ((long)(tmp_1 == np->last_tx_ctx) != 0L) 
#line 2637 
                                              np->get_tx_ctx = np->first_tx_ctx; else ;
  ldv_48129: 
#line 2638 
  ;
  
#line 2603 
  if (np->get_tx.ex != np->put_tx.ex) {
    
#line 2603 
    flags = (np->get_tx.ex)->flaglen;
    
#line 2603 
    if (flags >= (u32)0) {
      
#line 2604 
      if (tx_work < limit) 
#line 2607 
                           goto ldv_48128; else 
#line 2610 
                                                goto ldv_48130;
    }
    else 
#line 2610 
         goto ldv_48130;
  }
  else 
#line 2610 
       goto ldv_48130;
  ldv_48130: 
#line 2611 
  ;
  
#line 2640 
  netdev_completed_queue(np->dev,(unsigned int)tx_work,(unsigned int)bytes_cleaned);
  
#line 2642 
  if ((long)(np->tx_stop == 1) != 0L && (long)(np->get_tx.ex != orig_get_tx) != 0L) {
    
#line 2643 
    np->tx_stop = 0;
    
#line 2644 
    netif_wake_queue(dev);
  }
  else ;
  
#line 2646 
  return tx_work;
}


#line 2653  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_tx_timeout(struct net_device *dev)
{
  u32 status;
  union ring_type put_tx;
  int saved_tx_limit;
  int tmp_14;
  bool tmp_13;
  union ring_type tmp_15;
  
#line 2655 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 2656 
  u8 *base = get_hwbase(dev);
  
#line 2661 
  if ((np->msi_flags & 128U) != 0U) {
    unsigned int tmp_1;
    
#line 2662 
    tmp_1 = readl((void const volatile *)(base + 1008U));
    
#line 2662 
    status = tmp_1 & 33791U;
  }
  else {
    unsigned int tmp_2;
    
#line 2664 
    tmp_2 = readl((void const volatile *)base);
    
#line 2664 
    status = tmp_2 & 33791U;
  }
  
#line 2666 
  netdev_warn((struct net_device const *)dev,"Got tx_timeout. irq status: %08x\n",status);
  
#line 2668 
  if ((long)((int)debug_tx_timeout != 0) != 0L) {
    int i;
    unsigned int tmp_3;
    unsigned int tmp_4;
    unsigned int tmp_5;
    unsigned int tmp_6;
    unsigned int tmp_7;
    unsigned int tmp_8;
    unsigned int tmp_9;
    unsigned int tmp_10;
    int tmp_12;
    bool tmp_11;
    
#line 2671 
    netdev_info((struct net_device const *)dev,"Ring at %lx\n",(unsigned long)np->ring_addr);
    
#line 2672 
    netdev_info((struct net_device const *)dev,"Dumping tx registers\n");
    
#line 2673 
    i = 0;
    
#line 2673 
    goto ldv_48141;
    ldv_48140: 
#line 2674 
    ;
    
#line 2681 
    tmp_3 = readl((void const volatile *)(base + ((unsigned int)i + 28U)));
    
#line 2680 
    tmp_4 = readl((void const volatile *)(base + ((unsigned int)i + 24U)));
    
#line 2680 
    tmp_5 = readl((void const volatile *)(base + ((unsigned int)i + 20U)));
    
#line 2679 
    tmp_6 = readl((void const volatile *)(base + ((unsigned int)i + 16U)));
    
#line 2679 
    tmp_7 = readl((void const volatile *)(base + ((unsigned int)i + 12U)));
    
#line 2678 
    tmp_8 = readl((void const volatile *)(base + ((unsigned int)i + 8U)));
    
#line 2678 
    tmp_9 = readl((void const volatile *)(base + ((unsigned int)i + 4U)));
    
#line 2675 
    tmp_10 = readl((void const volatile *)(base + i));
    
#line 2674 
    ;
    
#line 2674 
    ;
    
#line 2674 
    netdev_info((struct net_device const *)dev,"%3x: %08x %08x %08x %08x ",i,tmp_10,tmp_9,tmp_8,tmp_7,tmp_6,tmp_5,tmp_4,tmp_3);
    
#line 2673 
    i += 32;
    ldv_48141: 
#line 2674 
    ;
    
#line 2673 
    if (np->register_size >= (unsigned int)i) 
#line 2675 
                                              goto ldv_48140; else 
#line 2678 
                                                                   goto ldv_48142;
    ldv_48142: 
#line 2679 
    ;
    
#line 2683 
    netdev_info((struct net_device const *)dev,"Dumping tx ring\n");
    
#line 2684 
    i = 0;
    
#line 2684 
    goto ldv_48144;
    ldv_48143: 
#line 2685 
    ;
    
#line 2685 
    tmp_11 = nv_optimized(np);
    
#line 2685 
    if (tmp_11) 
#line 2685 
                tmp_12 = 0; else 
#line 2685 
                                 tmp_12 = 1;
    
#line 2685 
    if (tmp_12) 
#line 2686 
                netdev_info((struct net_device const *)dev,"%03x: %08x %08x // %08x %08x ",i,(np->tx_ring.orig + i)->buf,(np->tx_ring.orig + i)->flaglen,(np->tx_ring.orig + ((unsigned int)i + 1U))->buf,(np->tx_ring.orig + ((unsigned int)i + 1U))->flaglen,(np->tx_ring.orig + ((unsigned int)i + 2U))->buf,(np->tx_ring.orig + ((unsigned int)i + 2U))->flaglen,(np->tx_ring.orig + ((unsigned int)i + 3U))->buf,(np->tx_ring.orig + ((unsigned int)i + 3U))->flaglen); else 
                                                                    
#line 2699 
                                                                    netdev_info((struct net_device const *)dev,"%03x: %08x %08x %08x ",i,(np->tx_ring.ex + i)->bufhigh,(np->tx_ring.ex + i)->buflow,(np->tx_ring.ex + i)->flaglen,(np->tx_ring.ex + ((unsigned int)i + 1U))->bufhigh,(np->tx_ring.ex + ((unsigned int)i + 1U))->buflow,(np->tx_ring.ex + ((unsigned int)i + 1U))->flaglen,(np->tx_ring.ex + ((unsigned int)i + 2U))->bufhigh,(np->tx_ring.ex + ((unsigned int)i + 2U))->buflow,(np->tx_ring.ex + ((unsigned int)i + 2U))->flaglen,(np->tx_ring.ex + ((unsigned int)i + 3U))->bufhigh,(np->tx_ring.ex + ((unsigned int)i + 3U))->buflow,(np->tx_ring.ex + ((unsigned int)i + 3U))->flaglen);
    
#line 2684 
    i += 4;
    ldv_48144: 
#line 2685 
    ;
    
#line 2684 
    if (np->tx_ring_size > i) 
#line 2686 
                              goto ldv_48143; else 
#line 2689 
                                                   goto ldv_48145;
    ldv_48145: 
#line 2690 
    ;
  }
  else ;
  
#line 2721 
  ldv_spin_lock_irq_84(& np->lock);
  
#line 2724 
  nv_stop_tx(dev);
  
#line 2727 
  saved_tx_limit = np->tx_limit;
  
#line 2728 
  np->tx_limit = 0;
  
#line 2729 
  np->tx_stop = 0;
  
#line 2730 
  tmp_13 = nv_optimized(np);
  
#line 2730 
  if (tmp_13) 
#line 2730 
              tmp_14 = 0; else 
#line 2730 
                               tmp_14 = 1;
  
#line 2730 
  if (tmp_14) 
#line 2731 
              nv_tx_done(dev,np->tx_ring_size); else 
#line 2733 
                                                     nv_tx_done_optimized(dev,np->tx_ring_size);
  
#line 2736 
  if (np->tx_change_owner != (struct nv_skb_map *)0) 
#line 2737 
                                                     put_tx.ex = (np->tx_change_owner)->first_tx_desc; else 
                                                                    
#line 2739 
                                                                    put_tx = np->put_tx;
  
#line 2742 
  nv_drain_tx(dev);
  
#line 2743 
  nv_init_tx(dev);
  
#line 2746 
  tmp_15 = put_tx;
  
#line 2746 
  np->put_tx = tmp_15;
  
#line 2746 
  np->get_tx = tmp_15;
  
#line 2747 
  np->tx_limit = saved_tx_limit;
  
#line 2750 
  nv_start_tx(dev);
  
#line 2751 
  netif_wake_queue(dev);
  
#line 2752 
  ldv_spin_unlock_irq_85(& np->lock);
  
#line 2753 
  return;
}


#line 2759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_getlen(struct net_device *dev, void *packet, int datalen)
{
  int __retres;
  int hdrlen;
  int protolen;
  
#line 2765 
  if ((unsigned int)((struct vlan_ethhdr *)packet)->h_vlan_proto == 129U) {
    
#line 2766 
    if (0 != 0) 
#line 2766 
                protolen = (int)((unsigned short)(((int)((struct vlan_ethhdr *)packet)->h_vlan_encapsulated_proto << 8) | ((int)((struct vlan_ethhdr *)packet)->h_vlan_encapsulated_proto >> 8)));
    else {
      __u16 tmp;
      
#line 2766 
      tmp = __fswab16((unsigned short)((int)((struct vlan_ethhdr *)packet)->h_vlan_encapsulated_proto));
      
#line 2766 
      protolen = (int)tmp;
    }
    
#line 2767 
    hdrlen = 4;
  }
  else {
    
#line 2769 
    if (0 != 0) 
#line 2769 
                protolen = (int)((unsigned short)(((int)((struct ethhdr *)packet)->h_proto << 8) | ((int)((struct ethhdr *)packet)->h_proto >> 8)));
    else {
      __u16 tmp_0;
      
#line 2769 
      tmp_0 = __fswab16((unsigned short)((int)((struct ethhdr *)packet)->h_proto));
      
#line 2769 
      protolen = (int)tmp_0;
    }
    
#line 2770 
    hdrlen = 14;
  }
  
#line 2772 
  if (protolen > 1500) {
    
#line 2773 
    __retres = datalen;
    
#line 2773 
    goto return_label;
  }
  else ;
  
#line 2775 
  protolen += hdrlen;
  
#line 2777 
  if (datalen > 60) 
    
#line 2778 
    if (datalen >= protolen) {
      
#line 2782 
      __retres = protolen;
      
#line 2782 
      goto return_label;
    }
    else {
      
#line 2787 
      __retres = -1;
      
#line 2787 
      goto return_label;
    }
  else {
    
#line 2791 
    if (protolen > 60) {
      
#line 2792 
      __retres = -1;
      
#line 2792 
      goto return_label;
    }
    else ;
    
#line 2794 
    __retres = datalen;
    
#line 2794 
    goto return_label;
  }
  return_label: 
#line 2777 
                return __retres;
}


#line 2798  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_rx_process(struct net_device *dev, int limit)
{
  u32 flags;
  struct sk_buff *skb;
  int len;
  struct ring_desc *tmp_0;
  struct nv_skb_map *tmp_1;
  
#line 2800 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 2802 
  int rx_work = 0;
  
#line 2806 
  goto ldv_48164;
  ldv_48163: 
#line 2807 
  ;
  
#line 2815 
  pci_unmap_single(np->pci_dev,(np->get_rx_ctx)->dma,(unsigned long)(np->get_rx_ctx)->dma_len,2);
  
#line 2818 
  skb = (np->get_rx_ctx)->skb;
  
#line 2819 
  (np->get_rx_ctx)->skb = (struct sk_buff *)0;
  
#line 2822 
  if (np->desc_ver == 1U) 
    
#line 2823 
    if ((long)((flags & 65536U) != 0U) != 0L) {
      
#line 2824 
      len = (int)flags & 65535;
      
#line 2825 
      if ((long)((flags & 1073741824U) != 0U) != 0L) 
        
#line 2826 
        if ((flags & 1065353216U) == 67108864U) {
          
#line 2827 
          len = nv_getlen(dev,(void *)skb->data,len);
          
#line 2828 
          if (len < 0) {
            
#line 2829 
            consume_skb(skb);
            
#line 2830 
            goto next_pkt;
          }
          else ;
        }
        else 
          
#line 2834 
          if ((flags & 1065353216U) == 536870912U) {
            
#line 2835 
            if ((flags & 262144U) != 0U) 
#line 2836 
                                         len -= 1; else ;
          }
          else {
            
#line 2840 
            if ((flags & 131072U) != 0U) {
              
#line 2841 
              u64_stats_init(& np->swstats_rx_syncp);
              
#line 2842 
              np->stat_rx_missed_errors += 1ULL;
              
#line 2843 
              u64_stats_init(& np->swstats_rx_syncp);
            }
            else ;
            
#line 2845 
            consume_skb(skb);
            
#line 2846 
            goto next_pkt;
          }
      else ;
    }
    else {
      
#line 2850 
      consume_skb(skb);
      
#line 2851 
      goto next_pkt;
    }
  else 
    
#line 2854 
    if ((long)((flags & 536870912U) != 0U) != 0L) {
      
#line 2855 
      len = (int)flags & 16383;
      
#line 2856 
      if ((long)((flags & 1073741824U) != 0U) != 0L) 
        
#line 2857 
        if ((flags & 33292288U) == 2097152U) {
          
#line 2858 
          len = nv_getlen(dev,(void *)skb->data,len);
          
#line 2859 
          if (len < 0) {
            
#line 2860 
            consume_skb(skb);
            
#line 2861 
            goto next_pkt;
          }
          else ;
        }
        else 
          
#line 2865 
          if ((flags & 33292288U) == 16777216U) {
            
#line 2866 
            if ((flags & 33554432U) != 0U) 
#line 2867 
                                           len -= 1; else ;
          }
          else {
            
#line 2871 
            consume_skb(skb);
            
#line 2872 
            goto next_pkt;
          }
      else ;
      
#line 2875 
      if ((flags & 469762048U) == 335544320U || (flags & 469762048U) == 402653184U) 
        
#line 2877 
        skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U; else ;
    }
    else {
      
#line 2879 
      consume_skb(skb);
      
#line 2880 
      goto next_pkt;
    }
  
#line 2884 
  skb_put(skb,(unsigned int)len);
  
#line 2885 
  skb->protocol = eth_type_trans(skb,dev);
  
#line 2886 
  napi_gro_receive(& np->napi,skb);
  
#line 2887 
  u64_stats_init(& np->swstats_rx_syncp);
  
#line 2888 
  np->stat_rx_packets += 1ULL;
  
#line 2889 
  np->stat_rx_bytes += (unsigned long long)len;
  
#line 2890 
  u64_stats_init(& np->swstats_rx_syncp);
  next_pkt: 
#line 2891 
  ;
  
#line 2892 
  tmp_0 = np->get_rx.orig;
  
#line 2892 
  np->get_rx.orig += 1;
  
#line 2892 
  ;
  
#line 2892 
  if ((long)(tmp_0 == np->last_rx.orig) != 0L) 
#line 2893 
                                               np->get_rx.orig = np->first_rx.orig; else ;
  
#line 2894 
  tmp_1 = np->get_rx_ctx;
  
#line 2894 
  np->get_rx_ctx += 1;
  
#line 2894 
  ;
  
#line 2894 
  if ((long)(tmp_1 == np->last_rx_ctx) != 0L) 
#line 2895 
                                              np->get_rx_ctx = np->first_rx_ctx; else ;
  
#line 2897 
  rx_work += 1;
  ldv_48164: 
#line 2898 
  ;
  
#line 2806 
  if (np->get_rx.orig != np->put_rx.orig) {
    
#line 2806 
    flags = (np->get_rx.orig)->flaglen;
    
#line 2806 
    if (flags >= (u32)0) {
      
#line 2807 
      if (rx_work < limit) 
#line 2810 
                           goto ldv_48163; else 
#line 2813 
                                                goto ldv_48165;
    }
    else 
#line 2813 
         goto ldv_48165;
  }
  else 
#line 2813 
       goto ldv_48165;
  ldv_48165: 
#line 2814 
  ;
  
#line 2900 
  return rx_work;
}


#line 2903  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_rx_process_optimized(struct net_device *dev, int limit)
{
  u32 flags;
  struct sk_buff *skb;
  int len;
  struct ring_desc_ex *tmp_0;
  struct nv_skb_map *tmp_1;
  
#line 2905 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 2907 
  u32 vlanflags = 0U;
  
#line 2908 
  int rx_work = 0;
  
#line 2912 
  goto ldv_48179;
  ldv_48178: 
#line 2913 
  ;
  
#line 2921 
  pci_unmap_single(np->pci_dev,(np->get_rx_ctx)->dma,(unsigned long)(np->get_rx_ctx)->dma_len,2);
  
#line 2924 
  skb = (np->get_rx_ctx)->skb;
  
#line 2925 
  (np->get_rx_ctx)->skb = (struct sk_buff *)0;
  
#line 2928 
  if ((long)((flags & 536870912U) != 0U) != 0L) {
    
#line 2929 
    len = (int)flags & 16383;
    
#line 2930 
    if ((long)((flags & 1073741824U) != 0U) != 0L) 
      
#line 2931 
      if ((flags & 33292288U) == 2097152U) {
        
#line 2932 
        len = nv_getlen(dev,(void *)skb->data,len);
        
#line 2933 
        if (len < 0) {
          
#line 2934 
          consume_skb(skb);
          
#line 2935 
          goto next_pkt;
        }
        else ;
      }
      else 
        
#line 2939 
        if ((flags & 33292288U) == 16777216U) {
          
#line 2940 
          if ((flags & 33554432U) != 0U) 
#line 2941 
                                         len -= 1; else ;
        }
        else {
          
#line 2945 
          consume_skb(skb);
          
#line 2946 
          goto next_pkt;
        }
    else ;
    
#line 2950 
    if ((flags & 469762048U) == 335544320U || (flags & 469762048U) == 402653184U) 
      
#line 2952 
      skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U; else ;
    
#line 2955 
    skb_put(skb,(unsigned int)len);
    
#line 2956 
    skb->protocol = eth_type_trans(skb,dev);
    
#line 2957 
    __builtin_prefetch((void const *)skb->data);
    
#line 2959 
    vlanflags = (np->get_rx.ex)->buflow;
    
#line 2966 
    if ((dev->features & 256ULL) != 0ULL && (vlanflags & 65536U) != 0U) {
      
#line 2968 
      u16 vid = (unsigned short)vlanflags;
      
#line 2970 
      __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vid));
    }
    else ;
    
#line 2972 
    napi_gro_receive(& np->napi,skb);
    
#line 2973 
    u64_stats_init(& np->swstats_rx_syncp);
    
#line 2974 
    np->stat_rx_packets += 1ULL;
    
#line 2975 
    np->stat_rx_bytes += (unsigned long long)len;
    
#line 2976 
    u64_stats_init(& np->swstats_rx_syncp);
  }
  else 
#line 2978 
       consume_skb(skb);
  next_pkt: 
#line 2980 
  ;
  
#line 2981 
  tmp_0 = np->get_rx.ex;
  
#line 2981 
  np->get_rx.ex += 1;
  
#line 2981 
  ;
  
#line 2981 
  if ((long)(tmp_0 == np->last_rx.ex) != 0L) 
#line 2982 
                                             np->get_rx.ex = np->first_rx.ex; else ;
  
#line 2983 
  tmp_1 = np->get_rx_ctx;
  
#line 2983 
  np->get_rx_ctx += 1;
  
#line 2983 
  ;
  
#line 2983 
  if ((long)(tmp_1 == np->last_rx_ctx) != 0L) 
#line 2984 
                                              np->get_rx_ctx = np->first_rx_ctx; else ;
  
#line 2986 
  rx_work += 1;
  ldv_48179: 
#line 2987 
  ;
  
#line 2912 
  if (np->get_rx.ex != np->put_rx.ex) {
    
#line 2912 
    flags = (np->get_rx.ex)->flaglen;
    
#line 2912 
    if (flags >= (u32)0) {
      
#line 2913 
      if (rx_work < limit) 
#line 2916 
                           goto ldv_48178; else 
#line 2919 
                                                goto ldv_48180;
    }
    else 
#line 2919 
         goto ldv_48180;
  }
  else 
#line 2919 
       goto ldv_48180;
  ldv_48180: 
#line 2920 
  ;
  
#line 2989 
  return rx_work;
}


#line 2992  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void set_bufsize(struct net_device *dev)
{
  
#line 2994 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 2996 
  if (dev->mtu <= 1500U) 
#line 2997 
                         np->rx_buf_sz = 1564U; else 
#line 2999 
                                                     np->rx_buf_sz = dev->mtu + 64U;
  
#line 3000 
  return;
}


#line 3006  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_change_mtu(struct net_device *dev, int new_mtu)
{
  int __retres;
  int old_mtu;
  bool tmp_3;
  
#line 3008 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 3011 
  if (new_mtu <= 63 || np->pkt_limit < (unsigned int)new_mtu) {
    
#line 3012 
    __retres = -22;
    
#line 3012 
    goto return_label;
  }
  else ;
  
#line 3014 
  old_mtu = (int)dev->mtu;
  
#line 3015 
  dev->mtu = (unsigned int)new_mtu;
  
#line 3018 
  if (old_mtu <= 1500 && new_mtu <= 1500) {
    
#line 3019 
    __retres = 0;
    
#line 3019 
    goto return_label;
  }
  else ;
  
#line 3020 
  if (old_mtu == new_mtu) {
    
#line 3021 
    __retres = 0;
    
#line 3021 
    goto return_label;
  }
  else ;
  
#line 3024 
  tmp_3 = netif_running((struct net_device const *)dev);
  
#line 3024 
  if ((int)tmp_3 != 0) {
    int tmp_1;
    u8 *tmp_2;
    
#line 3025 
    u8 *base = get_hwbase(dev);
    
#line 3032 
    nv_disable_irq(dev);
    
#line 3033 
    nv_napi_disable(dev);
    
#line 3034 
    netif_tx_lock_bh(dev);
    
#line 3035 
    netif_addr_lock(dev);
    
#line 3036 
    ldv_spin_lock_86(& np->lock);
    
#line 3038 
    nv_stop_rxtx(dev);
    
#line 3039 
    nv_txrx_reset(dev);
    
#line 3041 
    nv_drain_rxtx(dev);
    
#line 3043 
    set_bufsize(dev);
    
#line 3044 
    tmp_1 = nv_init_ring(dev);
    
#line 3044 
    if (tmp_1 != 0) {
      
#line 3045 
      if (np->in_shutdown == 0) 
#line 3046 
                                ldv_mod_timer_87(& np->oom_kick,jiffies + 13UL); else ;
    }
    else ;
    
#line 3049 
    writel(np->rx_buf_sz,(void volatile *)(base + 144U));
    
#line 3050 
    setup_hw_rings(dev,3);
    
#line 3051 
    writel((unsigned int)(((np->rx_ring_size + -1) << 16) + (np->tx_ring_size + -1)),(void volatile *)(base + 264U));
    
#line 3053 
    pci_push(base);
    
#line 3054 
    tmp_2 = get_hwbase(dev);
    
#line 3054 
    ;
    
#line 3054 
    writel(np->txrxctl_bits | 1U,(void volatile *)(tmp_2 + 324U));
    
#line 3055 
    pci_push(base);
    
#line 3058 
    nv_start_rxtx(dev);
    
#line 3059 
    ldv_spin_unlock_88(& np->lock);
    
#line 3060 
    netif_addr_unlock(dev);
    
#line 3061 
    netif_tx_unlock_bh(dev);
    
#line 3062 
    nv_napi_enable(dev);
    
#line 3063 
    nv_enable_irq(dev);
  }
  else ;
  
#line 3065 
  __retres = 0;
  return_label: 
#line 3065 
                return __retres;
}


#line 3068  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_copy_mac_to_hw(struct net_device *dev)
{
  u32 mac[2U];
  
#line 3070 
  u8 *base = get_hwbase(dev);
  
#line 3073 
  mac[0] = (unsigned int)((((int)*(dev->dev_addr) + ((int)*(dev->dev_addr + 1U) << 8)) + ((int)*(dev->dev_addr + 2U) << 16)) + ((int)*(dev->dev_addr + 3U) << 24));
  
#line 3075 
  mac[1] = (unsigned int)((int)*(dev->dev_addr + 4U) + ((int)*(dev->dev_addr + 5U) << 8));
  
#line 3077 
  writel(mac[0],(void volatile *)(base + 168U));
  
#line 3078 
  writel(mac[1],(void volatile *)(base + 172U));
  
#line 3079 
  return;
}


#line 3085  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_set_mac_address(struct net_device *dev, void *addr)
{
  int __retres;
  int tmp_1;
  bool tmp_0;
  bool tmp_2;
  
#line 3087 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 3088 
  struct sockaddr *macaddr = (struct sockaddr *)addr;
  
#line 3090 
  tmp_0 = is_valid_ether_addr((u8 const *)(& macaddr->sa_data));
  
#line 3090 
  if (tmp_0) 
#line 3090 
             tmp_1 = 0; else 
#line 3090 
                             tmp_1 = 1;
  
#line 3090 
  if (tmp_1) {
    
#line 3091 
    __retres = -99;
    
#line 3091 
    goto return_label;
  }
  else ;
  
#line 3094 
  memcpy((void *)dev->dev_addr,(void const *)(& macaddr->sa_data),6UL);
  
#line 3096 
  tmp_2 = netif_running((struct net_device const *)dev);
  
#line 3096 
  if ((int)tmp_2 != 0) {
    
#line 3097 
    netif_tx_lock_bh(dev);
    
#line 3098 
    netif_addr_lock(dev);
    
#line 3099 
    ldv_spin_lock_irq_89(& np->lock);
    
#line 3102 
    nv_stop_rx(dev);
    
#line 3105 
    nv_copy_mac_to_hw(dev);
    
#line 3108 
    nv_start_rx(dev);
    
#line 3109 
    ldv_spin_unlock_irq_90(& np->lock);
    
#line 3110 
    netif_addr_unlock(dev);
    
#line 3111 
    netif_tx_unlock_bh(dev);
  }
  else 
#line 3113 
       nv_copy_mac_to_hw(dev);
  
#line 3115 
  __retres = 0;
  return_label: 
#line 3115 
                return __retres;
}


#line 3122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_set_multicast(struct net_device *dev)
{
  u32 addr[2U];
  u32 mask[2U];
  unsigned int tmp_1;
  
#line 3124 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 3125 
  u8 *base = get_hwbase(dev);
  
#line 3128 
  tmp_1 = readl((void const volatile *)(base + 140U));
  
#line 3128 
  u32 pff = tmp_1 & 8U;
  
#line 3130 
  memset((void *)(& addr),0,8UL);
  
#line 3131 
  memset((void *)(& mask),0,8UL);
  
#line 3133 
  if ((dev->flags & 256U) != 0U) 
#line 3134 
                                 pff |= 128U;
  else {
    
#line 3136 
    pff |= 32U;
    
#line 3138 
    if ((dev->flags & 512U) != 0U || dev->mc.count != 0) {
      u32 alwaysOff[2U];
      u32 alwaysOn[2U];
      
#line 3142 
      alwaysOff[1] = 4294967295U;
      
#line 3142 
      alwaysOff[0] = alwaysOff[1];
      
#line 3142 
      alwaysOn[1] = alwaysOff[0];
      
#line 3142 
      alwaysOn[0] = alwaysOn[1];
      
#line 3143 
      if ((dev->flags & 512U) != 0U) {
        
#line 3144 
        alwaysOff[1] = 0U;
        
#line 3144 
        alwaysOff[0] = alwaysOff[1];
        
#line 3144 
        alwaysOn[1] = alwaysOff[0];
        
#line 3144 
        alwaysOn[0] = alwaysOn[1];
      }
      else {
        struct netdev_hw_addr *ha;
        struct netdev_hw_addr *tmp_2;
        struct netdev_hw_addr *tmp_3;
        {
          
#line 3148 
          struct list_head const *__mptr = (struct list_head const *)dev->mc.list.next;
          
#line 3148 
          tmp_2 = (struct netdev_hw_addr *)__mptr;
        }
        
#line 3148 
        ha = tmp_2;
        
#line 3148 
        goto ldv_48222;
        ldv_48221: 
#line 3149 
        ;
        {
          u32 a;
          u32 b;
          
#line 3149 
          unsigned char *hw_addr = (unsigned char *)(& ha->addr);
          
#line 3152 
          a = *((__le32 *)hw_addr);
          
#line 3153 
          b = (unsigned int)*((__le16 *)(hw_addr + 4U));
          
#line 3154 
          alwaysOn[0] &= a;
          
#line 3155 
          alwaysOff[0] &= ~ a;
          
#line 3156 
          alwaysOn[1] &= b;
          
#line 3157 
          alwaysOff[1] &= ~ b;
        }
        {
          
#line 3148 
          struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
          
#line 3148 
          tmp_3 = (struct netdev_hw_addr *)__mptr_0;
        }
        
#line 3148 
        ha = tmp_3;
        ldv_48222: 
#line 3150 
        ;
        
#line 3148 
        if (& ha->list != & dev->mc.list) 
#line 3150 
                                          goto ldv_48221; else 
#line 3153 
                                                               goto ldv_48223;
        ldv_48223: 
#line 3154 
        ;
      }
      
#line 3160 
      addr[0] = alwaysOn[0];
      
#line 3161 
      addr[1] = alwaysOn[1];
      
#line 3162 
      mask[0] = alwaysOn[0] | alwaysOff[0];
      
#line 3163 
      mask[1] = alwaysOn[1] | alwaysOff[1];
    }
    else {
      
#line 3165 
      mask[0] = 4294967295U;
      
#line 3166 
      mask[1] = 65535U;
    }
  }
  
#line 3169 
  addr[0] |= 1U;
  
#line 3170 
  pff |= 8323072U;
  
#line 3171 
  ldv_spin_lock_irq_91(& np->lock);
  
#line 3172 
  nv_stop_rx(dev);
  
#line 3173 
  writel(addr[0],(void volatile *)(base + 176U));
  
#line 3174 
  writel(addr[1],(void volatile *)(base + 180U));
  
#line 3175 
  writel(mask[0],(void volatile *)(base + 184U));
  
#line 3176 
  writel(mask[1],(void volatile *)(base + 188U));
  
#line 3177 
  writel(pff,(void volatile *)(base + 140U));
  
#line 3178 
  nv_start_rx(dev);
  
#line 3179 
  ldv_spin_unlock_irq_92(& np->lock);
  
#line 3180 
  return;
}


#line 3182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_update_pause(struct net_device *dev, u32 pause_flags)
{
  
#line 3184 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 3185 
  u8 *base = get_hwbase(dev);
  
#line 3187 
  np->pause_flags &= 4294967283U;
  
#line 3189 
  if ((np->pause_flags & 1U) != 0U) {
    unsigned int tmp_1;
    
#line 3190 
    tmp_1 = readl((void const volatile *)(base + 140U));
    
#line 3190 
    u32 pff = tmp_1 & 4294967287U;
    
#line 3191 
    if ((pause_flags & 4U) != 0U) {
      
#line 3192 
      writel(pff | 8U,(void volatile *)(base + 140U));
      
#line 3193 
      np->pause_flags |= 4U;
    }
    else 
#line 3195 
         writel(pff,(void volatile *)(base + 140U));
  }
  else ;
  
#line 3198 
  if ((np->pause_flags & 2U) != 0U) {
    unsigned int tmp_2;
    
#line 3199 
    tmp_2 = readl((void const volatile *)(base + 128U));
    
#line 3199 
    u32 regmisc = tmp_2 & 4294967294U;
    
#line 3200 
    if ((pause_flags & 8U) != 0U) {
      
#line 3201 
      u32 pause_enable = 25165840U;
      
#line 3202 
      if ((np->driver_data & 131072U) != 0U) 
#line 3203 
                                             pause_enable = 90178544U; else ;
      
#line 3204 
      if ((np->driver_data & 262144U) != 0U) {
        unsigned int tmp_3;
        
#line 3205 
        pause_enable = 166725760U;
        
#line 3207 
        ;
        
#line 3207 
        tmp_3 = readl((void const volatile *)(base + 372U));
        
#line 3207 
        writel(tmp_3 | 65536U,(void volatile *)(base + 372U));
      }
      else ;
      
#line 3209 
      writel(pause_enable,(void volatile *)(base + 368U));
      
#line 3210 
      writel(regmisc | 1U,(void volatile *)(base + 128U));
      
#line 3211 
      np->pause_flags |= 8U;
    }
    else {
      
#line 3213 
      writel(268370048U,(void volatile *)(base + 368U));
      
#line 3214 
      writel(regmisc,(void volatile *)(base + 128U));
    }
  }
  else ;
  
#line 3217 
  return;
}


#line 3219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_force_linkspeed(struct net_device *dev, int speed, int duplex)
{
  u32 phyreg;
  u32 txreg;
  int mii_status;
  int tmp_1;
  
#line 3221 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 3222 
  u8 *base = get_hwbase(dev);
  
#line 3226 
  np->linkspeed = (unsigned int)(speed | 65536);
  
#line 3227 
  np->duplex = duplex;
  
#line 3230 
  mii_status = mii_rw(dev,np->phyaddr,1,-1);
  
#line 3231 
  if ((mii_status & 256) != 0) {
    
#line 3232 
    np->gigabit = (unsigned short)256U;
    
#line 3233 
    phyreg = readl((void const volatile *)(base + 156U));
    
#line 3234 
    phyreg &= 4294705407U;
    
#line 3235 
    if ((np->linkspeed & 4095U) == 1000U) 
#line 3236 
                                          phyreg |= 32512U;
    else 
      
#line 3237 
      if ((np->linkspeed & 4095U) == 100U) 
#line 3238 
                                           phyreg |= 32512U;
      else 
        
#line 3239 
        if ((np->linkspeed & 4095U) == 50U) 
#line 3240 
                                            phyreg |= 261888U; else ;
    
#line 3241 
    writel(phyreg,(void volatile *)(base + 156U));
  }
  else ;
  
#line 3244 
  phyreg = readl((void const volatile *)(base + 192U));
  
#line 3245 
  phyreg &= 4294967036U;
  
#line 3246 
  if (np->duplex == 0) 
#line 3247 
                       phyreg |= 256U; else ;
  
#line 3248 
  if ((np->linkspeed & 4095U) == 100U) 
#line 3249 
                                       phyreg |= 1U;
  else 
    
#line 3250 
    if ((np->linkspeed & 4095U) == 50U) 
#line 3252 
                                        phyreg |= 2U; else ;
  
#line 3253 
  writel(phyreg,(void volatile *)(base + 192U));
  
#line 3255 
  if ((phyreg & 268435456U) != 0U) 
    
#line 3256 
    if ((np->linkspeed & 4095U) == 50U) 
#line 3258 
                                        txreg = 1312015U; else 
#line 3260 
                                                               txreg = 1443599U;
  else 
#line 3262 
       txreg = 1377551U;
  
#line 3264 
  writel(txreg,(void volatile *)(base + 160U));
  
#line 3266 
  if (np->desc_ver == 1U) 
#line 3267 
                          txreg = 2097168U;
  else 
    
#line 3269 
    if ((np->linkspeed & 4095U) == 50U) 
#line 3271 
                                        txreg = 266371072U; else 
#line 3273 
                                                                 txreg = 31490048U;
  
#line 3275 
  writel(txreg,(void volatile *)(base + 316U));
  
#line 3277 
  ;
  
#line 3277 
  if (np->duplex != 0) 
#line 3277 
                       tmp_1 = 3870524; else 
#line 3277 
                                             tmp_1 = 3870526;
  
#line 3277 
  writel((unsigned int)tmp_1,(void volatile *)(base + 128U));
  
#line 3279 
  pci_push(base);
  
#line 3280 
  writel(np->linkspeed,(void volatile *)(base + 272U));
  
#line 3281 
  pci_push(base);
  
#line 3283 
  return;
}


#line 3297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_update_linkspeed(struct net_device *dev)
{
  int __retres;
  int adv_lpa;
  int adv_pause;
  int lpa_pause;
  int mii_status;
  u32 bmcr;
  u32 control_1000;
  u32 status_1000;
  u32 phyreg;
  u32 pause_flags;
  u32 txreg;
  u32 phy_exp;
  int tmp_1;
  unsigned int tmp_7;
  unsigned int tmp_8;
  int tmp_9;
  int tmp_10;
  bool tmp_11;
  
#line 3299 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 3300 
  u8 *base = get_hwbase(dev);
  
#line 3301 
  int adv = 0;
  
#line 3302 
  int lpa = 0;
  
#line 3304 
  int newls = (int)np->linkspeed;
  
#line 3305 
  int newdup = np->duplex;
  
#line 3308 
  int retval = 0;
  
#line 3310 
  u32 txrxFlags = 0U;
  
#line 3316 
  tmp_1 = mii_rw(dev,np->phyaddr,0,-1);
  
#line 3316 
  bmcr = (unsigned int)tmp_1;
  
#line 3317 
  if ((bmcr & 16384U) != 0U) {
    bool tmp_4;
    
#line 3318 
    tmp_4 = netif_running((struct net_device const *)dev);
    
#line 3318 
    if ((int)tmp_4 != 0) {
      int tmp_3;
      bool tmp_2;
      
#line 3319 
      nv_force_linkspeed(dev,50,1);
      
#line 3320 
      tmp_2 = netif_carrier_ok((struct net_device const *)dev);
      
#line 3320 
      if (tmp_2) 
#line 3320 
                 tmp_3 = 0; else 
#line 3320 
                                 tmp_3 = 1;
      
#line 3320 
      if (tmp_3) 
#line 3321 
                 netif_carrier_on(dev); else ;
    }
    else ;
    
#line 3323 
    __retres = 1;
    
#line 3323 
    goto return_label;
  }
  else ;
  
#line 3329 
  mii_rw(dev,np->phyaddr,1,-1);
  
#line 3330 
  mii_status = mii_rw(dev,np->phyaddr,1,-1);
  
#line 3332 
  if ((mii_status & 4) == 0) {
    
#line 3333 
    newls = 66536;
    
#line 3334 
    newdup = 0;
    
#line 3335 
    retval = 0;
    
#line 3336 
    goto set_speed;
  }
  else ;
  
#line 3339 
  if (np->autoneg == 0) {
    
#line 3340 
    if ((np->fixed_mode & 256) != 0) {
      
#line 3341 
      newls = 65636;
      
#line 3342 
      newdup = 1;
    }
    else 
      
#line 3343 
      if ((np->fixed_mode & 128) != 0) {
        
#line 3344 
        newls = 65636;
        
#line 3345 
        newdup = 0;
      }
      else 
        
#line 3346 
        if ((np->fixed_mode & 64) != 0) {
          
#line 3347 
          newls = 66536;
          
#line 3348 
          newdup = 1;
        }
        else {
          
#line 3350 
          newls = 66536;
          
#line 3351 
          newdup = 0;
        }
    
#line 3353 
    retval = 1;
    
#line 3354 
    goto set_speed;
  }
  else ;
  
#line 3357 
  if ((mii_status & 32) == 0) {
    
#line 3359 
    newls = 66536;
    
#line 3360 
    newdup = 0;
    
#line 3361 
    retval = 0;
    
#line 3362 
    goto set_speed;
  }
  else ;
  
#line 3365 
  adv = mii_rw(dev,np->phyaddr,4,-1);
  
#line 3366 
  lpa = mii_rw(dev,np->phyaddr,5,-1);
  
#line 3368 
  retval = 1;
  
#line 3369 
  if ((unsigned int)np->gigabit == 256U) {
    int tmp_5;
    int tmp_6;
    
#line 3370 
    tmp_5 = mii_rw(dev,np->phyaddr,9,-1);
    
#line 3370 
    control_1000 = (unsigned int)tmp_5;
    
#line 3371 
    tmp_6 = mii_rw(dev,np->phyaddr,10,-1);
    
#line 3371 
    status_1000 = (unsigned int)tmp_6;
    
#line 3373 
    if ((control_1000 & 512U) != 0U && (status_1000 & 2048U) != 0U) {
      
#line 3375 
      newls = 65586;
      
#line 3376 
      newdup = 1;
      
#line 3377 
      goto set_speed;
    }
    else ;
  }
  else ;
  
#line 3382 
  adv_lpa = lpa & adv;
  
#line 3383 
  if ((adv_lpa & 256) != 0) {
    
#line 3384 
    newls = 65636;
    
#line 3385 
    newdup = 1;
  }
  else 
    
#line 3386 
    if ((adv_lpa & 128) != 0) {
      
#line 3387 
      newls = 65636;
      
#line 3388 
      newdup = 0;
    }
    else 
      
#line 3389 
      if ((adv_lpa & 64) != 0) {
        
#line 3390 
        newls = 66536;
        
#line 3391 
        newdup = 1;
      }
      else 
        
#line 3392 
        if ((adv_lpa & 32) != 0) {
          
#line 3393 
          newls = 66536;
          
#line 3394 
          newdup = 0;
        }
        else {
          
#line 3396 
          newls = 66536;
          
#line 3397 
          newdup = 0;
        }
  set_speed: 
#line 3400 
  ;
  
#line 3401 
  if (np->duplex == newdup && np->linkspeed == (unsigned int)newls) {
    
#line 3402 
    __retres = retval;
    
#line 3402 
    goto return_label;
  }
  else ;
  
#line 3404 
  np->duplex = newdup;
  
#line 3405 
  np->linkspeed = (unsigned int)newls;
  
#line 3408 
  tmp_7 = readl((void const volatile *)(base + 132U));
  
#line 3408 
  if ((tmp_7 & 1U) != 0U) {
    
#line 3409 
    txrxFlags |= 1U;
    
#line 3410 
    nv_stop_tx(dev);
  }
  else ;
  
#line 3412 
  tmp_8 = readl((void const volatile *)(base + 148U));
  
#line 3412 
  if ((tmp_8 & 1U) != 0U) {
    
#line 3413 
    txrxFlags |= 2U;
    
#line 3414 
    nv_stop_rx(dev);
  }
  else ;
  
#line 3417 
  if ((unsigned int)np->gigabit == 256U) {
    
#line 3418 
    phyreg = readl((void const volatile *)(base + 156U));
    
#line 3419 
    phyreg &= 4294705407U;
    
#line 3420 
    if ((np->linkspeed & 4095U) == 1000U || (np->linkspeed & 4095U) == 100U) 
      
#line 3422 
      phyreg |= 32512U;
    else 
      
#line 3423 
      if ((np->linkspeed & 4095U) == 50U) 
#line 3424 
                                          phyreg |= 261888U; else ;
    
#line 3425 
    writel(phyreg,(void volatile *)(base + 156U));
  }
  else ;
  
#line 3428 
  phyreg = readl((void const volatile *)(base + 192U));
  
#line 3429 
  phyreg &= 4294967036U;
  
#line 3430 
  if (np->duplex == 0) 
#line 3431 
                       phyreg |= 256U; else ;
  
#line 3432 
  if ((np->linkspeed & 4095U) == 100U) 
#line 3433 
                                       phyreg |= 1U;
  else 
    
#line 3434 
    if ((np->linkspeed & 4095U) == 50U) 
#line 3435 
                                        phyreg |= 2U; else ;
  
#line 3436 
  writel(phyreg,(void volatile *)(base + 192U));
  
#line 3438 
  tmp_9 = mii_rw(dev,np->phyaddr,6,-1);
  
#line 3438 
  phy_exp = (unsigned int)tmp_9 & 1U;
  
#line 3439 
  if ((phyreg & 268435456U) != 0U) 
    
#line 3440 
    if ((np->linkspeed & 4095U) == 50U) 
#line 3441 
                                        txreg = 1312015U;
    else 
      
#line 3443 
      if ((phy_exp == 0U && np->duplex == 0) && (np->driver_data & 32768U) != 0U) 
        
#line 3444 
        if ((np->linkspeed & 4095U) == 1000U) 
#line 3445 
                                              txreg = 1448207U; else 
                                                                  
#line 3447 
                                                                  txreg = 1454095U;
      else 
#line 3449 
           txreg = 1443599U;
  else 
    
#line 3453 
    if ((phy_exp == 0U && np->duplex == 0) && (np->driver_data & 32768U) != 0U) 
      
#line 3454 
      txreg = 1384448U; else 
#line 3456 
                             txreg = 1377551U;
  
#line 3458 
  writel(txreg,(void volatile *)(base + 160U));
  
#line 3460 
  if (np->desc_ver == 1U) 
#line 3461 
                          txreg = 2097168U;
  else 
    
#line 3463 
    if ((np->linkspeed & 4095U) == 50U) 
#line 3464 
                                        txreg = 266371072U; else 
#line 3466 
                                                                 txreg = 31490048U;
  
#line 3468 
  writel(txreg,(void volatile *)(base + 316U));
  
#line 3470 
  ;
  
#line 3470 
  if (np->duplex != 0) 
#line 3470 
                       tmp_10 = 3870524; else 
#line 3470 
                                              tmp_10 = 3870526;
  
#line 3470 
  writel((unsigned int)tmp_10,(void volatile *)(base + 128U));
  
#line 3472 
  pci_push(base);
  
#line 3473 
  writel(np->linkspeed,(void volatile *)(base + 272U));
  
#line 3474 
  pci_push(base);
  
#line 3476 
  pause_flags = 0U;
  
#line 3478 
  tmp_11 = netif_running((struct net_device const *)dev);
  
#line 3478 
  if ((int)tmp_11 != 0) {
    
#line 3478 
    if (np->duplex != 0) 
      
#line 3479 
      if (np->autoneg != 0 && (np->pause_flags & 64U) != 0U) {
        
#line 3480 
        adv_pause = adv & 3072;
        
#line 3481 
        lpa_pause = lpa & 3072;
        
#line 3483 
        switch (adv_pause) {
          case 1024: 
#line 3484 
          ;
          
#line 3485 
          if ((lpa_pause & 1024) != 0) {
            
#line 3486 
            pause_flags |= 4U;
            
#line 3487 
            if ((np->pause_flags & 32U) != 0U) 
#line 3488 
                                               pause_flags |= 8U; else ;
          }
          else ;
          
#line 3490 
          goto ldv_48267;
          case 2048: 
#line 3491 
          ;
          
#line 3492 
          if (lpa_pause == 3072) 
#line 3493 
                                 pause_flags |= 8U; else ;
          
#line 3494 
          goto ldv_48267;
          case 3072: 
#line 3495 
          ;
          
#line 3496 
          if ((lpa_pause & 1024) != 0) {
            
#line 3497 
            pause_flags |= 4U;
            
#line 3498 
            if ((np->pause_flags & 32U) != 0U) 
#line 3499 
                                               pause_flags |= 8U; else ;
          }
          else ;
          
#line 3501 
          if (lpa_pause == 2048) 
#line 3502 
                                 pause_flags |= 4U; else ;
          
#line 3503 
          goto ldv_48267;
        }
        ldv_48267: 
#line 3505 
        ;
      }
      else 
#line 3506 
           pause_flags = np->pause_flags;
    else ;
  }
  else ;
  
#line 3509 
  nv_update_pause(dev,pause_flags);
  
#line 3511 
  if ((txrxFlags & 1U) != 0U) 
#line 3512 
                              nv_start_tx(dev); else ;
  
#line 3513 
  if ((txrxFlags & 2U) != 0U) 
#line 3514 
                              nv_start_rx(dev); else ;
  
#line 3516 
  __retres = retval;
  return_label: 
#line 3516 
                return __retres;
}


#line 3519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_linkchange(struct net_device *dev)
{
  int tmp_2;
  
#line 3521 
  tmp_2 = nv_update_linkspeed(dev);
  
#line 3521 
  if (tmp_2 != 0) {
    int tmp_0;
    bool tmp;
    
#line 3522 
    tmp = netif_carrier_ok((struct net_device const *)dev);
    
#line 3522 
    if (tmp) 
#line 3522 
             tmp_0 = 0; else 
#line 3522 
                             tmp_0 = 1;
    
#line 3522 
    if (tmp_0) {
      
#line 3523 
      netif_carrier_on(dev);
      
#line 3524 
      netdev_info((struct net_device const *)dev,"link up\n");
      
#line 3525 
      nv_txrx_gate(dev,(_Bool)0);
      
#line 3526 
      nv_start_rx(dev);
    }
    else ;
  }
  else {
    bool tmp_1;
    
#line 3529 
    tmp_1 = netif_carrier_ok((struct net_device const *)dev);
    
#line 3529 
    if ((int)tmp_1 != 0) {
      
#line 3530 
      netif_carrier_off(dev);
      
#line 3531 
      netdev_info((struct net_device const *)dev,"link down\n");
      
#line 3532 
      nv_txrx_gate(dev,(_Bool)1);
      
#line 3533 
      nv_stop_rx(dev);
    }
    else ;
  }
  
#line 3535 
  return;
}


#line 3538  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_link_irq(struct net_device *dev)
{
  u32 miistat;
  
#line 3540 
  u8 *base = get_hwbase(dev);
  
#line 3543 
  miistat = readl((void const volatile *)(base + 384U));
  
#line 3544 
  writel(8U,(void volatile *)(base + 384U));
  
#line 3546 
  if ((miistat & 8U) != 0U) 
#line 3547 
                            nv_linkchange(dev); else ;
  
#line 3548 
  return;
}


#line 3550  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_msi_workaround(struct fe_priv *np)
{
  
#line 3556 
  if ((np->msi_flags & 64U) != 0U) {
    
#line 3557 
    u8 *base = (u8 *)np->base;
    
#line 3559 
    writel(0U,(void volatile *)(base + 48U));
    
#line 3560 
    writel(1U,(void volatile *)(base + 48U));
  }
  else ;
  
#line 3562 
  return;
}


#line 3564  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
__inline static int nv_change_interrupt_mode(struct net_device *dev, int total_work)
{
  int __retres;
  
#line 3566 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 3568 
  if (optimization_mode == 2) {
    
#line 3569 
    if (total_work > 4) {
      
#line 3571 
      np->quiet_count = 0;
      
#line 3572 
      if (np->irqmask != 96U) {
        
#line 3573 
        np->irqmask = 96U;
        
#line 3574 
        __retres = 1;
        
#line 3574 
        goto return_label;
      }
      else ;
    }
    else 
      
#line 3577 
      if (np->quiet_count <= 2047) 
#line 3578 
                                   np->quiet_count += 1;
      else 
        
#line 3582 
        if (np->irqmask != 223U) {
          
#line 3583 
          np->irqmask = 223U;
          
#line 3584 
          __retres = 1;
          
#line 3584 
          goto return_label;
        }
        else ;
  }
  else ;
  
#line 3589 
  __retres = 0;
  return_label: 
#line 3589 
                return __retres;
}


#line 3592  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static irqreturn_t nv_nic_irq(int foo, void *data)
{
  irqreturn_t __retres;
  bool tmp_1;
  
#line 3594 
  struct net_device *dev = (struct net_device *)data;
  
#line 3595 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 3596 
  u8 *base = get_hwbase(dev);
  
#line 3598 
  if ((np->msi_flags & 128U) == 0U) {
    
#line 3599 
    np->events = readl((void const volatile *)base);
    
#line 3600 
    writel(np->events,(void volatile *)base);
  }
  else {
    
#line 3602 
    np->events = readl((void const volatile *)(base + 1008U));
    
#line 3603 
    writel(np->events,(void volatile *)(base + 1008U));
  }
  
#line 3605 
  if ((np->events & np->irqmask) == 0U) {
    
#line 3606 
    __retres = IRQ_NONE;
    
#line 3606 
    goto return_label;
  }
  else ;
  
#line 3608 
  nv_msi_workaround(np);
  
#line 3610 
  tmp_1 = napi_schedule_prep(& np->napi);
  
#line 3610 
  if ((int)tmp_1 != 0) {
    
#line 3614 
    writel(0U,(void volatile *)(base + 4U));
    
#line 3615 
    __napi_schedule(& np->napi);
  }
  else ;
  
#line 3618 
  __retres = IRQ_HANDLED;
  return_label: 
#line 3618 
                return __retres;
}


#line 3625  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static irqreturn_t nv_nic_irq_optimized(int foo, void *data)
{
  irqreturn_t __retres;
  bool tmp_1;
  
#line 3627 
  struct net_device *dev = (struct net_device *)data;
  
#line 3628 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 3629 
  u8 *base = get_hwbase(dev);
  
#line 3631 
  if ((np->msi_flags & 128U) == 0U) {
    
#line 3632 
    np->events = readl((void const volatile *)base);
    
#line 3633 
    writel(np->events,(void volatile *)base);
  }
  else {
    
#line 3635 
    np->events = readl((void const volatile *)(base + 1008U));
    
#line 3636 
    writel(np->events,(void volatile *)(base + 1008U));
  }
  
#line 3638 
  if ((np->events & np->irqmask) == 0U) {
    
#line 3639 
    __retres = IRQ_NONE;
    
#line 3639 
    goto return_label;
  }
  else ;
  
#line 3641 
  nv_msi_workaround(np);
  
#line 3643 
  tmp_1 = napi_schedule_prep(& np->napi);
  
#line 3643 
  if ((int)tmp_1 != 0) {
    
#line 3647 
    writel(0U,(void volatile *)(base + 4U));
    
#line 3648 
    __napi_schedule(& np->napi);
  }
  else ;
  
#line 3651 
  __retres = IRQ_HANDLED;
  return_label: 
#line 3651 
                return __retres;
}


#line 3654  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static irqreturn_t nv_nic_irq_tx(int foo, void *data)
{
  irqreturn_t __retres;
  u32 events;
  int i;
  unsigned long flags;
  unsigned int tmp_1;
  
#line 3656 
  struct net_device *dev = (struct net_device *)data;
  
#line 3657 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 3658 
  u8 *base = get_hwbase(dev);
  
#line 3663 
  i = 0;
  ldv_48315: 
#line 3664 
  ;
  
#line 3664 
  tmp_1 = readl((void const volatile *)(base + 1008U));
  
#line 3664 
  events = tmp_1 & 280U;
  
#line 3665 
  writel(events,(void volatile *)(base + 1008U));
  {
    
#line 3666 
    struct _ddebug descriptor = {.modname = "forcedeth", .function = "nv_nic_irq_tx", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c", .format = "tx irq events: %08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3666U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 3666 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3666 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"tx irq events: %08x\n",events); else ;
  }
  
#line 3667 
  if ((np->irqmask & events) == 0U) 
#line 3668 
                                    goto ldv_48313; else ;
  
#line 3670 
  ldv___ldv_spin_lock_93(& np->lock);
  
#line 3671 
  nv_tx_done_optimized(dev,64);
  
#line 3672 
  ldv_spin_unlock_irqrestore_94(& np->lock,flags);
  
#line 3674 
  if ((long)(i > max_interrupt_work) != 0L) {
    
#line 3675 
    ldv___ldv_spin_lock_95(& np->lock);
    
#line 3677 
    writel(280U,(void volatile *)(base + 4U));
    
#line 3678 
    pci_push(base);
    
#line 3680 
    if (np->in_shutdown == 0) {
      
#line 3681 
      np->nic_poll_irq |= 280U;
      
#line 3682 
      ldv_mod_timer_96(& np->nic_poll,jiffies + 3UL);
    }
    else ;
    
#line 3684 
    ldv_spin_unlock_irqrestore_97(& np->lock,flags);
    {
      
#line 3685 
      struct _ddebug descriptor_0 = {.modname = "forcedeth", .function = "nv_nic_irq_tx", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c", .format = "%s: too many iterations (%d)\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3686U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3685 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 3685 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)dev,"%s: too many iterations (%d)\n","nv_nic_irq_tx",i); else ;
    }
    
#line 3687 
    goto ldv_48313;
  }
  else ;
  
#line 3663 
  i += 1;
  
#line 3664 
  goto ldv_48315;
  ldv_48313: 
#line 3665 
  ;
  
#line 3692 
  __retres = (enum irqreturn)(i != 0);
  
#line 3692 
  return __retres;
}


#line 3695  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_napi_poll(struct napi_struct *napi, int budget)
{
  int __retres;
  struct fe_priv *tmp;
  unsigned long flags;
  int retcode;
  int rx_count;
  int tmp_4;
  bool tmp_3;
  {
    
#line 3697 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 3697 
    tmp = (struct fe_priv *)__mptr + 18446744073709551536U;
  }
  
#line 3697 
  struct fe_priv *np = tmp;
  
#line 3698 
  struct net_device *dev = np->dev;
  
#line 3699 
  u8 *base = get_hwbase(dev);
  
#line 3702 
  int tx_work = 0;
  
#line 3702 
  int rx_work = 0;
  ldv_48330: 
#line 3703 
  ;
  
#line 3705 
  tmp_3 = nv_optimized(np);
  
#line 3705 
  if (tmp_3) 
#line 3705 
             tmp_4 = 0; else 
#line 3705 
                             tmp_4 = 1;
  
#line 3705 
  if (tmp_4) {
    int tmp_1;
    
#line 3706 
    ldv___ldv_spin_lock_98(& np->lock);
    
#line 3707 
    tmp_1 = nv_tx_done(dev,np->tx_ring_size);
    
#line 3707 
    tx_work = tmp_1 + tx_work;
    
#line 3708 
    ldv_spin_unlock_irqrestore_99(& np->lock,flags);
    
#line 3710 
    rx_count = nv_rx_process(dev,budget - rx_work);
    
#line 3711 
    retcode = nv_alloc_rx(dev);
  }
  else {
    int tmp_2;
    
#line 3713 
    ldv___ldv_spin_lock_100(& np->lock);
    
#line 3714 
    tmp_2 = nv_tx_done_optimized(dev,np->tx_ring_size);
    
#line 3714 
    tx_work = tmp_2 + tx_work;
    
#line 3715 
    ldv_spin_unlock_irqrestore_101(& np->lock,flags);
    
#line 3717 
    rx_count = nv_rx_process_optimized(dev,budget - rx_work);
    
#line 3719 
    retcode = nv_alloc_rx_optimized(dev);
  }
  
#line 3722 
  if (retcode == 0 && rx_count > 0) {
    
#line 3722 
    rx_work += rx_count;
    
#line 3722 
    ;
    
#line 3722 
    if (rx_work < budget) 
#line 3724 
                          goto ldv_48330; else 
#line 3727 
                                               goto ldv_48331;
  }
  else 
#line 3727 
       goto ldv_48331;
  ldv_48331: 
#line 3728 
  ;
  
#line 3724 
  if (retcode != 0) {
    
#line 3725 
    ldv___ldv_spin_lock_102(& np->lock);
    
#line 3726 
    if (np->in_shutdown == 0) 
#line 3727 
                              ldv_mod_timer_103(& np->oom_kick,jiffies + 13UL); else ;
    
#line 3728 
    ldv_spin_unlock_irqrestore_104(& np->lock,flags);
  }
  else ;
  
#line 3731 
  nv_change_interrupt_mode(dev,tx_work + rx_work);
  
#line 3733 
  if ((long)((np->events & 64U) != 0U) != 0L) {
    
#line 3734 
    ldv___ldv_spin_lock_105(& np->lock);
    
#line 3735 
    nv_link_irq(dev);
    
#line 3736 
    ldv_spin_unlock_irqrestore_106(& np->lock,flags);
  }
  else ;
  
#line 3738 
  if ((long)(np->need_linktimer != 0) != 0L) {
    int tmp_8;
    int tmp_7;
    int tmp_5;
    {
      unsigned long __dummy;
      unsigned long volatile __dummy2;
      
#line 3738 
      tmp_5 = 1;
    }
    
#line 3738 
    if ((long)(tmp_5 != 0) != 0L) {
      int tmp_6;
      {
        unsigned long __dummy_0;
        unsigned long __dummy2_0;
        
#line 3738 
        tmp_6 = 1;
      }
      
#line 3738 
      if ((long)(tmp_6 != 0) != 0L) 
#line 3738 
                                    tmp_7 = 1; else 
#line 3738 
                                                    tmp_7 = 0;
    }
    else 
#line 3738 
         tmp_7 = 0;
    
#line 3738 
    if (tmp_7 != 0) 
      
#line 3738 
      if ((long)((long)(np->link_timeout - jiffies) < 0L) != 0L) 
#line 3738 
                                                                 tmp_8 = 1; else 
                                                                    
#line 3738 
                                                                    tmp_8 = 0;
    else 
#line 3738 
         tmp_8 = 0;
    
#line 3738 
    if (tmp_8 != 0) {
      
#line 3739 
      ldv___ldv_spin_lock_107(& np->lock);
      
#line 3740 
      nv_linkchange(dev);
      
#line 3741 
      ldv_spin_unlock_irqrestore_108(& np->lock,flags);
      
#line 3742 
      np->link_timeout = jiffies + 750UL;
    }
    else ;
  }
  else ;
  
#line 3744 
  if ((long)((np->events & 33280U) != 0U) != 0L) {
    
#line 3745 
    ldv___ldv_spin_lock_109(& np->lock);
    
#line 3746 
    if (np->in_shutdown == 0) {
      
#line 3747 
      np->nic_poll_irq = np->irqmask;
      
#line 3748 
      np->recover_error = 1;
      
#line 3749 
      ldv_mod_timer_110(& np->nic_poll,jiffies + 3UL);
    }
    else ;
    
#line 3751 
    ldv_spin_unlock_irqrestore_111(& np->lock,flags);
    
#line 3752 
    napi_complete(napi);
    
#line 3753 
    __retres = rx_work;
    
#line 3753 
    goto return_label;
  }
  else ;
  
#line 3756 
  if (rx_work < budget) {
    
#line 3759 
    napi_complete(napi);
    
#line 3761 
    writel(np->irqmask,(void volatile *)(base + 4U));
  }
  else ;
  
#line 3763 
  __retres = rx_work;
  return_label: 
#line 3763 
                return __retres;
}


#line 3766  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static irqreturn_t nv_nic_irq_rx(int foo, void *data)
{
  irqreturn_t __retres;
  u32 events;
  int i;
  unsigned long flags;
  unsigned int tmp_1;
  int tmp_3;
  
#line 3768 
  struct net_device *dev = (struct net_device *)data;
  
#line 3769 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 3770 
  u8 *base = get_hwbase(dev);
  
#line 3775 
  i = 0;
  ldv_48352: 
#line 3776 
  ;
  
#line 3776 
  tmp_1 = readl((void const volatile *)(base + 1008U));
  
#line 3776 
  events = tmp_1 & 135U;
  
#line 3777 
  writel(events,(void volatile *)(base + 1008U));
  {
    
#line 3778 
    struct _ddebug descriptor = {.modname = "forcedeth", .function = "nv_nic_irq_rx", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c", .format = "rx irq events: %08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3778U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 3778 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3778 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"rx irq events: %08x\n",events); else ;
  }
  
#line 3779 
  if ((np->irqmask & events) == 0U) 
#line 3780 
                                    goto ldv_48350; else ;
  
#line 3782 
  tmp_3 = nv_rx_process_optimized(dev,64);
  
#line 3782 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 3783 
    tmp_2 = nv_alloc_rx_optimized(dev);
    
#line 3783 
    if ((long)(tmp_2 != 0) != 0L) {
      
#line 3784 
      ldv___ldv_spin_lock_112(& np->lock);
      
#line 3785 
      if (np->in_shutdown == 0) 
#line 3786 
                                ldv_mod_timer_113(& np->oom_kick,jiffies + 13UL); else ;
      
#line 3787 
      ldv_spin_unlock_irqrestore_114(& np->lock,flags);
    }
    else ;
  }
  else ;
  
#line 3791 
  if ((long)(i > max_interrupt_work) != 0L) {
    
#line 3792 
    ldv___ldv_spin_lock_115(& np->lock);
    
#line 3794 
    writel(135U,(void volatile *)(base + 4U));
    
#line 3795 
    pci_push(base);
    
#line 3797 
    if (np->in_shutdown == 0) {
      
#line 3798 
      np->nic_poll_irq |= 135U;
      
#line 3799 
      ldv_mod_timer_116(& np->nic_poll,jiffies + 3UL);
    }
    else ;
    
#line 3801 
    ldv_spin_unlock_irqrestore_117(& np->lock,flags);
    {
      
#line 3802 
      struct _ddebug descriptor_0 = {.modname = "forcedeth", .function = "nv_nic_irq_rx", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c", .format = "%s: too many iterations (%d)\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3803U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3802 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 3802 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)dev,"%s: too many iterations (%d)\n","nv_nic_irq_rx",i); else ;
    }
    
#line 3804 
    goto ldv_48350;
  }
  else ;
  
#line 3775 
  i += 1;
  
#line 3776 
  goto ldv_48352;
  ldv_48350: 
#line 3777 
  ;
  
#line 3808 
  __retres = (enum irqreturn)(i != 0);
  
#line 3808 
  return __retres;
}


#line 3811  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static irqreturn_t nv_nic_irq_other(int foo, void *data)
{
  irqreturn_t __retres;
  u32 events;
  int i;
  unsigned long flags;
  unsigned int tmp_1;
  
#line 3813 
  struct net_device *dev = (struct net_device *)data;
  
#line 3814 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 3815 
  u8 *base = get_hwbase(dev);
  
#line 3820 
  i = 0;
  ldv_48373: 
#line 3821 
  ;
  
#line 3821 
  tmp_1 = readl((void const volatile *)(base + 1008U));
  
#line 3821 
  events = tmp_1 & 33376U;
  
#line 3822 
  writel(events,(void volatile *)(base + 1008U));
  {
    
#line 3823 
    struct _ddebug descriptor = {.modname = "forcedeth", .function = "nv_nic_irq_other", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c", .format = "irq events: %08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3823U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 3823 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3823 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"irq events: %08x\n",events); else ;
  }
  
#line 3824 
  if ((np->irqmask & events) == 0U) 
#line 3825 
                                    goto ldv_48365; else ;
  
#line 3828 
  ldv___ldv_spin_lock_118(& np->lock);
  
#line 3829 
  nv_tx_done_optimized(dev,64);
  
#line 3830 
  ldv_spin_unlock_irqrestore_119(& np->lock,flags);
  
#line 3832 
  if ((events & 64U) != 0U) {
    
#line 3833 
    ldv___ldv_spin_lock_120(& np->lock);
    
#line 3834 
    nv_link_irq(dev);
    
#line 3835 
    ldv_spin_unlock_irqrestore_121(& np->lock,flags);
  }
  else ;
  
#line 3837 
  if (np->need_linktimer != 0) {
    int tmp_2;
    {
      unsigned long __dummy;
      unsigned long volatile __dummy2;
      
#line 3837 
      tmp_2 = 1;
    }
    
#line 3837 
    if (tmp_2 != 0) {
      int tmp_3;
      {
        unsigned long __dummy_0;
        unsigned long __dummy2_0;
        
#line 3837 
        tmp_3 = 1;
      }
      
#line 3837 
      if (tmp_3 != 0) {
        
#line 3837 
        if ((long)(np->link_timeout - jiffies) < 0L) {
          
#line 3838 
          ldv___ldv_spin_lock_122(& np->lock);
          
#line 3839 
          nv_linkchange(dev);
          
#line 3840 
          ldv_spin_unlock_irqrestore_123(& np->lock,flags);
          
#line 3841 
          np->link_timeout = jiffies + 750UL;
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 3843 
  if ((events & 33280U) != 0U) {
    
#line 3844 
    ldv___ldv_spin_lock_124(& np->lock);
    
#line 3846 
    writel(33376U,(void volatile *)(base + 4U));
    
#line 3847 
    pci_push(base);
    
#line 3849 
    if (np->in_shutdown == 0) {
      
#line 3850 
      np->nic_poll_irq |= 33376U;
      
#line 3851 
      np->recover_error = 1;
      
#line 3852 
      ldv_mod_timer_125(& np->nic_poll,jiffies + 3UL);
    }
    else ;
    
#line 3854 
    ldv_spin_unlock_irqrestore_126(& np->lock,flags);
    
#line 3855 
    goto ldv_48365;
  }
  else ;
  
#line 3857 
  if ((long)(i > max_interrupt_work) != 0L) {
    
#line 3858 
    ldv___ldv_spin_lock_127(& np->lock);
    
#line 3860 
    writel(33376U,(void volatile *)(base + 4U));
    
#line 3861 
    pci_push(base);
    
#line 3863 
    if (np->in_shutdown == 0) {
      
#line 3864 
      np->nic_poll_irq |= 33376U;
      
#line 3865 
      ldv_mod_timer_128(& np->nic_poll,jiffies + 3UL);
    }
    else ;
    
#line 3867 
    ldv_spin_unlock_irqrestore_129(& np->lock,flags);
    {
      
#line 3868 
      struct _ddebug descriptor_0 = {.modname = "forcedeth", .function = "nv_nic_irq_other", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c", .format = "%s: too many iterations (%d)\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3869U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3868 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 3868 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)dev,"%s: too many iterations (%d)\n","nv_nic_irq_other",i); else ;
    }
    
#line 3870 
    goto ldv_48365;
  }
  else ;
  
#line 3820 
  i += 1;
  
#line 3821 
  goto ldv_48373;
  ldv_48365: 
#line 3822 
  ;
  
#line 3875 
  __retres = (enum irqreturn)(i != 0);
  
#line 3875 
  return __retres;
}


#line 3878  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static irqreturn_t nv_nic_irq_test(int foo, void *data)
{
  irqreturn_t __retres;
  u32 events;
  
#line 3880 
  struct net_device *dev = (struct net_device *)data;
  
#line 3881 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 3882 
  u8 *base = get_hwbase(dev);
  
#line 3885 
  if ((np->msi_flags & 128U) == 0U) {
    unsigned int tmp_1;
    
#line 3886 
    tmp_1 = readl((void const volatile *)base);
    
#line 3886 
    events = tmp_1 & 33791U;
    
#line 3887 
    writel(events & 32U,(void volatile *)base);
  }
  else {
    unsigned int tmp_2;
    
#line 3889 
    tmp_2 = readl((void const volatile *)(base + 1008U));
    
#line 3889 
    events = tmp_2 & 33791U;
    
#line 3890 
    writel(events & 32U,(void volatile *)(base + 1008U));
  }
  
#line 3892 
  pci_push(base);
  
#line 3893 
  if ((events & 32U) == 0U) {
    
#line 3894 
    __retres = IRQ_NONE;
    
#line 3894 
    goto return_label;
  }
  else ;
  
#line 3896 
  nv_msi_workaround(np);
  
#line 3898 
  ldv_spin_lock_130(& np->lock);
  
#line 3899 
  np->intr_test = 1;
  
#line 3900 
  ldv_spin_unlock_131(& np->lock);
  
#line 3902 
  __retres = IRQ_HANDLED;
  return_label: 
#line 3902 
                return __retres;
}


#line 3905  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void set_msix_vector_map(struct net_device *dev, u32 vector, u32 irqmask)
{
  int i;
  unsigned int tmp_0;
  unsigned int tmp_1;
  
#line 3907 
  u8 *base = get_hwbase(dev);
  
#line 3909 
  u32 msixmap = 0U;
  
#line 3915 
  i = 0;
  
#line 3915 
  goto ldv_48391;
  ldv_48390: 
#line 3916 
  ;
  
#line 3916 
  if (((irqmask >> i) & 1U) != 0U) 
#line 3917 
                                   msixmap = (vector << (i << 2)) | msixmap; else ;
  
#line 3915 
  i += 1;
  ldv_48391: 
#line 3916 
  ;
  
#line 3915 
  if (i <= 7) 
#line 3917 
              goto ldv_48390; else 
#line 3920 
                                   goto ldv_48392;
  ldv_48392: 
#line 3921 
  ;
  
#line 3919 
  ;
  
#line 3919 
  tmp_0 = readl((void const volatile *)(base + 992U));
  
#line 3919 
  ;
  
#line 3919 
  writel(tmp_0 | msixmap,(void volatile *)(base + 992U));
  
#line 3921 
  msixmap = 0U;
  
#line 3922 
  i = 0;
  
#line 3922 
  goto ldv_48394;
  ldv_48393: 
#line 3923 
  ;
  
#line 3923 
  if (((irqmask >> (i + 8)) & 1U) != 0U) 
#line 3924 
                                         msixmap = (vector << (i << 2)) | msixmap; else ;
  
#line 3922 
  i += 1;
  ldv_48394: 
#line 3923 
  ;
  
#line 3922 
  if (i <= 7) 
#line 3924 
              goto ldv_48393; else 
#line 3927 
                                   goto ldv_48395;
  ldv_48395: 
#line 3928 
  ;
  
#line 3926 
  ;
  
#line 3926 
  tmp_1 = readl((void const volatile *)(base + 996U));
  
#line 3926 
  ;
  
#line 3926 
  writel(tmp_1 | msixmap,(void volatile *)(base + 996U));
  
#line 3927 
  return;
}


#line 3929  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_request_irq(struct net_device *dev, int intr_test)
{
  int __retres;
  int ret;
  int i;
  irqreturn_t (*handler)(int , void *);
  int tmp_2;
  
#line 3931 
  struct fe_priv *np = get_nvpriv(dev);
  
#line 3932 
  u8 *base = get_hwbase(dev);
  
#line 3937 
  if (intr_test != 0) 
#line 3938 
                      handler = & nv_nic_irq_test;
  else {
    bool tmp_1;
    
#line 3940 
    tmp_1 = nv_optimized(np);
    
#line 3940 
    if ((int)tmp_1 != 0) 
#line 3941 
                         handler = & nv_nic_irq_optimized; else 
#line 3943 
                                                                handler = & nv_nic_irq;
  }
  
#line 3946 
  if ((np->msi_flags & 32U) != 0U) {
    
#line 3947 
    i = 0;
    
#line 3947 
    goto ldv_48408;
    ldv_48407: 
#line 3948 
    ;
    
#line 3948 
    np->msi_x_entry[i].entry = (unsigned short)i;
    
#line 3947 
    i += 1;
    ldv_48408: 
#line 3948 
    ;
    
#line 3947 
    if ((np->msi_flags & 15U) > (unsigned int)i) 
#line 3949 
                                                 goto ldv_48407; else 
                                                                   
#line 3952 
                                                                   goto ldv_48409;
    ldv_48409: 
#line 3953 
    ;
    
#line 3949 
    ret = pci_enable_msix_range(np->pci_dev,(struct msix_entry *)(& np->msi_x_entry),(int)np->msi_flags & 15,(int)np->msi_flags & 15);
    
#line 3953 
    if (ret > 0) {
      
#line 3954 
      np->msi_flags |= 128U;
      
#line 3955 
      if (optimization_mode == 0 && intr_test == 0) {
        
#line 3957 
        sprintf((char *)(& np->name_rx),"%s-rx",(char *)(& dev->name));
        
#line 3958 
        ret = ldv_request_irq_132(np->msi_x_entry[0].vector,& nv_nic_irq_rx,128UL,(char const *)(& np->name_rx),(void *)dev);
        
#line 3960 
        if (ret != 0) {
          
#line 3961 
          netdev_info((struct net_device const *)dev,"request_irq failed for rx %d\n",ret);
          
#line 3964 
          pci_disable_msix(np->pci_dev);
          
#line 3965 
          np->msi_flags &= 4294967167U;
          
#line 3966 
          goto out_err;
        }
        else ;
        
#line 3969 
        sprintf((char *)(& np->name_tx),"%s-tx",(char *)(& dev->name));
        
#line 3970 
        ret = ldv_request_irq_133(np->msi_x_entry[1].vector,& nv_nic_irq_tx,128UL,(char const *)(& np->name_tx),(void *)dev);
        
#line 3972 
        if (ret != 0) {
          
#line 3973 
          netdev_info((struct net_device const *)dev,"request_irq failed for tx %d\n",ret);
          
#line 3976 
          pci_disable_msix(np->pci_dev);
          
#line 3977 
          np->msi_flags &= 4294967167U;
          
#line 3978 
          goto out_free_rx;
        }
        else ;
        
#line 3981 
        sprintf((char *)(& np->name_other),"%s-other",(char *)(& dev->name));
        
#line 3982 
        ret = ldv_request_irq_134(np->msi_x_entry[2].vector,& nv_nic_irq_other,128UL,(char const *)(& np->name_other),(void *)dev);
        
#line 3984 
        if (ret != 0) {
          
#line 3985 
          netdev_info((struct net_device const *)dev,"request_irq failed for link %d\n",ret);
          
#line 3988 
          pci_disable_msix(np->pci_dev);
          
#line 3989 
          np->msi_flags &= 4294967167U;
          
#line 3990 
          goto out_free_tx;
        }
        else ;
        
#line 3993 
        writel(0U,(void volatile *)(base + 992U));
        
#line 3994 
        writel(0U,(void volatile *)(base + 996U));
        
#line 3995 
        set_msix_vector_map(dev,0U,135U);
        
#line 3996 
        set_msix_vector_map(dev,1U,280U);
        
#line 3997 
        set_msix_vector_map(dev,2U,33376U);
      }
      else {
        
#line 4000 
        ret = ldv_request_irq_135(np->msi_x_entry[0].vector,handler,128UL,(char const *)(& dev->name),(void *)dev);
        
#line 4002 
        if (ret != 0) {
          
#line 4003 
          netdev_info((struct net_device const *)dev,"request_irq failed %d\n",ret);
          
#line 4006 
          pci_disable_msix(np->pci_dev);
          
#line 4007 
          np->msi_flags &= 4294967167U;
          
#line 4008 
          goto out_err;
        }
        else ;
        
#line 4012 
        writel(0U,(void volatile *)(base + 992U));
        
#line 4013 
        writel(0U,(void volatile *)(base + 996U));
      }
      
#line 4015 
      netdev_info((struct net_device const *)dev,"MSI-X enabled\n");
      
#line 4016 
      __retres = 0;
      
#line 4016 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 4019 
  if ((np->msi_flags & 16U) != 0U) {
    
#line 4020 
    ret = pci_enable_msi_exact(np->pci_dev,1);
    
#line 4021 
    if (ret == 0) {
      
#line 4022 
      np->msi_flags |= 64U;
      
#line 4023 
      ret = ldv_request_irq_136((np->pci_dev)->irq,handler,128UL,(char const *)(& dev->name),(void *)dev);
      
#line 4024 
      if (ret != 0) {
        
#line 4025 
        netdev_info((struct net_device const *)dev,"request_irq failed %d\n",ret);
        
#line 4027 
        pci_disable_msi(np->pci_dev);
        
#line 4028 
        np->msi_flags &= 4294967231U;
        
#line 4029 
        goto out_err;
      }
      else ;
      
#line 4033 
      writel(0U,(void volatile *)(base + 32U));
      
#line 4034 
      writel(0U,(void volatile *)(base + 36U));
      
#line 4036 
      writel(1U,(void volatile *)(base + 48U));
      
#line 4037 
      netdev_info((struct net_device const *)dev,"MSI enabled\n");
      
#line 4038 
      __retres = 0;
      
#line 4038 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 4042 
  tmp_2 = ldv_request_irq_137((np->pci_dev)->irq,handler,128UL,(char const *)(& dev->name),(void *)dev);
  
#line 4042 
  if (tmp_2 != 0) 
#line 4043 
                  goto out_err; else ;
  
#line 4045 
  __retres = 0;
  
#line 4045 
  goto return_label;
  out_free_tx: 
#line 4046 
  ;
  
#line 4047 
  ldv_free_irq_138(np->msi_x_entry[1].vector,(void *)dev);
  out_free_rx: 
#line 4048 
  ;
  
#line 4049 
  ldv_free_irq_139(np->msi_x_entry[0].vector,(void *)dev);
  out_err: 
#line 4050 
  ;
  
#line 4051 
  __retres = 1;
  return_label: 
#line 4051 
                return __retres;
}


#line 4054  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_free_irq(struct net_device *dev)
{
  int i;
  
#line 4056 
  struct fe_priv *np = get_nvpriv(dev);
  
#line 4059 
  if ((np->msi_flags & 128U) != 0U) {
    
#line 4060 
    i = 0;
    
#line 4060 
    goto ldv_48419;
    ldv_48418: 
#line 4061 
    ;
    
#line 4061 
    ldv_free_irq_140(np->msi_x_entry[i].vector,(void *)dev);
    
#line 4060 
    i += 1;
    ldv_48419: 
#line 4061 
    ;
    
#line 4060 
    if ((np->msi_flags & 15U) > (unsigned int)i) 
#line 4062 
                                                 goto ldv_48418; else 
                                                                   
#line 4065 
                                                                   goto ldv_48420;
    ldv_48420: 
#line 4066 
    ;
    
#line 4062 
    pci_disable_msix(np->pci_dev);
    
#line 4063 
    np->msi_flags &= 4294967167U;
  }
  else {
    
#line 4065 
    ldv_free_irq_141((np->pci_dev)->irq,(void *)dev);
    
#line 4066 
    if ((np->msi_flags & 64U) != 0U) {
      
#line 4067 
      pci_disable_msi(np->pci_dev);
      
#line 4068 
      np->msi_flags &= 4294967231U;
    }
    else ;
  }
  
#line 4071 
  return;
}


#line 4073  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_do_nic_poll(unsigned long data)
{
  int tmp_1;
  int tmp_6;
  
#line 4075 
  struct net_device *dev = (struct net_device *)data;
  
#line 4076 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4077 
  u8 *base = get_hwbase(dev);
  
#line 4078 
  u32 mask = 0U;
  
#line 4086 
  tmp_1 = using_multi_irqs(dev);
  
#line 4086 
  if (tmp_1 == 0) {
    
#line 4087 
    if ((np->msi_flags & 128U) != 0U) 
#line 4088 
                                      disable_irq_lockdep(np->msi_x_entry[0].vector); else 
                                                                    
#line 4090 
                                                                    disable_irq_lockdep((np->pci_dev)->irq);
    
#line 4091 
    mask = np->irqmask;
  }
  else {
    
#line 4093 
    if ((np->nic_poll_irq & 135U) != 0U) {
      
#line 4094 
      disable_irq_lockdep(np->msi_x_entry[0].vector);
      
#line 4095 
      mask |= 135U;
    }
    else ;
    
#line 4097 
    if ((np->nic_poll_irq & 280U) != 0U) {
      
#line 4098 
      disable_irq_lockdep(np->msi_x_entry[1].vector);
      
#line 4099 
      mask |= 280U;
    }
    else ;
    
#line 4101 
    if ((np->nic_poll_irq & 33376U) != 0U) {
      
#line 4102 
      disable_irq_lockdep(np->msi_x_entry[2].vector);
      
#line 4103 
      mask |= 33376U;
    }
    else ;
  }
  
#line 4108 
  if (np->recover_error != 0) {
    bool tmp_4;
    
#line 4109 
    np->recover_error = 0;
    
#line 4110 
    netdev_info((struct net_device const *)dev,"MAC in recoverable error state\n");
    
#line 4111 
    tmp_4 = netif_running((struct net_device const *)dev);
    
#line 4111 
    if ((int)tmp_4 != 0) {
      int tmp_2;
      u8 *tmp_3;
      
#line 4112 
      netif_tx_lock_bh(dev);
      
#line 4113 
      netif_addr_lock(dev);
      
#line 4114 
      ldv_spin_lock_142(& np->lock);
      
#line 4116 
      nv_stop_rxtx(dev);
      
#line 4117 
      if ((np->driver_data & 256U) != 0U) 
#line 4118 
                                          nv_mac_reset(dev); else ;
      
#line 4119 
      nv_txrx_reset(dev);
      
#line 4121 
      nv_drain_rxtx(dev);
      
#line 4123 
      set_bufsize(dev);
      
#line 4124 
      tmp_2 = nv_init_ring(dev);
      
#line 4124 
      if (tmp_2 != 0) {
        
#line 4125 
        if (np->in_shutdown == 0) 
#line 4126 
                                  ldv_mod_timer_143(& np->oom_kick,jiffies + 13UL); else ;
      }
      else ;
      
#line 4129 
      writel(np->rx_buf_sz,(void volatile *)(base + 144U));
      
#line 4130 
      setup_hw_rings(dev,3);
      
#line 4131 
      writel((unsigned int)(((np->rx_ring_size + -1) << 16) + (np->tx_ring_size + -1)),(void volatile *)(base + 264U));
      
#line 4133 
      pci_push(base);
      
#line 4134 
      tmp_3 = get_hwbase(dev);
      
#line 4134 
      ;
      
#line 4134 
      writel(np->txrxctl_bits | 1U,(void volatile *)(tmp_3 + 324U));
      
#line 4135 
      pci_push(base);
      
#line 4137 
      if ((np->msi_flags & 128U) == 0U) 
#line 4138 
                                        writel(33791U,(void volatile *)base); else 
                                                                    
#line 4140 
                                                                    writel(33791U,(void volatile *)(base + 1008U));
      
#line 4143 
      nv_start_rxtx(dev);
      
#line 4144 
      ldv_spin_unlock_144(& np->lock);
      
#line 4145 
      netif_addr_unlock(dev);
      
#line 4146 
      netif_tx_unlock_bh(dev);
    }
    else ;
  }
  else ;
  
#line 4150 
  writel(mask,(void volatile *)(base + 4U));
  
#line 4151 
  pci_push(base);
  
#line 4153 
  tmp_6 = using_multi_irqs(dev);
  
#line 4153 
  if (tmp_6 == 0) {
    bool tmp_5;
    
#line 4154 
    np->nic_poll_irq = 0U;
    
#line 4155 
    tmp_5 = nv_optimized(np);
    
#line 4155 
    if ((int)tmp_5 != 0) 
#line 4156 
                         nv_nic_irq_optimized(0,(void *)dev); else 
#line 4158 
                                                                   nv_nic_irq(0,(void *)dev);
    
#line 4159 
    if ((np->msi_flags & 128U) != 0U) 
#line 4160 
                                      enable_irq_lockdep(np->msi_x_entry[0].vector); else 
                                                                    
#line 4162 
                                                                    enable_irq_lockdep((np->pci_dev)->irq);
  }
  else {
    
#line 4164 
    if ((np->nic_poll_irq & 135U) != 0U) {
      
#line 4165 
      np->nic_poll_irq &= 4294967160U;
      
#line 4166 
      nv_nic_irq_rx(0,(void *)dev);
      
#line 4167 
      enable_irq_lockdep(np->msi_x_entry[0].vector);
    }
    else ;
    
#line 4169 
    if ((np->nic_poll_irq & 280U) != 0U) {
      
#line 4170 
      np->nic_poll_irq &= 4294967015U;
      
#line 4171 
      nv_nic_irq_tx(0,(void *)dev);
      
#line 4172 
      enable_irq_lockdep(np->msi_x_entry[1].vector);
    }
    else ;
    
#line 4174 
    if ((np->nic_poll_irq & 33376U) != 0U) {
      
#line 4175 
      np->nic_poll_irq &= 4294933919U;
      
#line 4176 
      nv_nic_irq_other(0,(void *)dev);
      
#line 4177 
      enable_irq_lockdep(np->msi_x_entry[2].vector);
    }
    else ;
  }
  
#line 4180 
  return;
}


#line 4184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_poll_controller(struct net_device *dev)
{
  
#line 4186 
  nv_do_nic_poll((unsigned long)dev);
  
#line 4187 
  return;
}


#line 4190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_do_stats_poll(unsigned long data)
{
  int tmp_0;
  
#line 4194 
  struct net_device *dev = (struct net_device *)data;
  
#line 4195 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4199 
  tmp_0 = ldv_spin_trylock_145(& np->hwstats_lock);
  
#line 4199 
  if (tmp_0 != 0) {
    
#line 4200 
    nv_update_stats(dev);
    
#line 4201 
    ldv_spin_unlock_146(& np->hwstats_lock);
  }
  else ;
  
#line 4204 
  if (np->in_shutdown == 0) {
    unsigned long tmp_1;
    
#line 4205 
    tmp_1 = round_jiffies(jiffies + 2500UL);
    
#line 4205 
    ;
    
#line 4205 
    ldv_mod_timer_147(& np->stats_poll,tmp_1);
  }
  else ;
  
#line 4207 
  return;
}


#line 4209  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  char const *tmp_0;
  
#line 4211 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4212 
  strlcpy((char *)(& info->driver),"forcedeth",32UL);
  
#line 4213 
  strlcpy((char *)(& info->version),"0.64",32UL);
  
#line 4214 
  tmp_0 = pci_name((struct pci_dev const *)np->pci_dev);
  
#line 4214 
  ;
  
#line 4214 
  strlcpy((char *)(& info->bus_info),tmp_0,32UL);
  
#line 4215 
  return;
}


#line 4217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_get_wol(struct net_device *dev, struct ethtool_wolinfo *wolinfo)
{
  
#line 4219 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4220 
  wolinfo->supported = 32U;
  
#line 4222 
  ldv_spin_lock_irq_148(& np->lock);
  
#line 4223 
  if (np->wolenabled != 0) 
#line 4224 
                           wolinfo->wolopts = 32U; else ;
  
#line 4225 
  ldv_spin_unlock_irq_149(& np->lock);
  
#line 4226 
  return;
}


#line 4228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_set_wol(struct net_device *dev, struct ethtool_wolinfo *wolinfo)
{
  int __retres;
  bool tmp_1;
  
#line 4230 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4231 
  u8 *base = get_hwbase(dev);
  
#line 4232 
  u32 flags = 0U;
  
#line 4234 
  if (wolinfo->wolopts == 0U) 
#line 4235 
                              np->wolenabled = 0;
  else 
    
#line 4236 
    if ((wolinfo->wolopts & 32U) != 0U) {
      
#line 4237 
      np->wolenabled = 1;
      
#line 4238 
      flags = 4369U;
    }
    else ;
  
#line 4240 
  tmp_1 = netif_running((struct net_device const *)dev);
  
#line 4240 
  if ((int)tmp_1 != 0) {
    
#line 4241 
    ldv_spin_lock_irq_150(& np->lock);
    
#line 4242 
    writel(flags,(void volatile *)(base + 512U));
    
#line 4243 
    ldv_spin_unlock_irq_151(& np->lock);
  }
  else ;
  
#line 4245 
  device_set_wakeup_enable(& (np->pci_dev)->dev,(_Bool)(np->wolenabled != 0));
  
#line 4246 
  __retres = 0;
  
#line 4246 
  return __retres;
}


#line 4249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_get_settings(struct net_device *dev, struct ethtool_cmd *ecmd)
{
  int __retres;
  u32 speed;
  int adv;
  int tmp_5;
  bool tmp_4;
  bool tmp_6;
  
#line 4251 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4255 
  ldv_spin_lock_irq_152(& np->lock);
  
#line 4256 
  ecmd->port = (unsigned char)2U;
  
#line 4257 
  tmp_4 = netif_running((struct net_device const *)dev);
  
#line 4257 
  if (tmp_4) 
#line 4257 
             tmp_5 = 0; else 
#line 4257 
                             tmp_5 = 1;
  
#line 4257 
  if (tmp_5) {
    int tmp_3;
    
#line 4260 
    tmp_3 = nv_update_linkspeed(dev);
    
#line 4260 
    if (tmp_3 != 0) {
      int tmp_1;
      bool tmp_0;
      
#line 4261 
      tmp_0 = netif_carrier_ok((struct net_device const *)dev);
      
#line 4261 
      if (tmp_0) 
#line 4261 
                 tmp_1 = 0; else 
#line 4261 
                                 tmp_1 = 1;
      
#line 4261 
      if (tmp_1) 
#line 4262 
                 netif_carrier_on(dev); else ;
    }
    else {
      bool tmp_2;
      
#line 4264 
      tmp_2 = netif_carrier_ok((struct net_device const *)dev);
      
#line 4264 
      if ((int)tmp_2 != 0) 
#line 4265 
                           netif_carrier_off(dev); else ;
    }
  }
  else ;
  
#line 4269 
  tmp_6 = netif_carrier_ok((struct net_device const *)dev);
  
#line 4269 
  if ((int)tmp_6 != 0) {
    
#line 4270 
    switch (np->linkspeed & 4095U) {
      case (unsigned int)1000: 
#line 4271 
      ;
      
#line 4272 
      speed = 10U;
      
#line 4273 
      goto ldv_48461;
      case (unsigned int)100: 
#line 4274 
      ;
      
#line 4275 
      speed = 100U;
      
#line 4276 
      goto ldv_48461;
      case (unsigned int)50: 
#line 4277 
      ;
      
#line 4278 
      speed = 1000U;
      
#line 4279 
      goto ldv_48461;
      default: 
#line 4280 
      ;
      
#line 4281 
      speed = 4294967295U;
      
#line 4282 
      goto ldv_48461;
    }
    ldv_48461: 
#line 4284 
    ;
    
#line 4284 
    ecmd->duplex = (unsigned char)0U;
    
#line 4285 
    if (np->duplex != 0) 
#line 4286 
                         ecmd->duplex = (unsigned char)1U; else ;
  }
  else {
    
#line 4288 
    speed = 4294967295U;
    
#line 4289 
    ecmd->duplex = (unsigned char)255U;
  }
  
#line 4291 
  ethtool_cmd_speed_set(ecmd,speed);
  
#line 4292 
  ecmd->autoneg = (unsigned char)np->autoneg;
  
#line 4294 
  ecmd->advertising = 512U;
  
#line 4295 
  if (np->autoneg != 0) {
    
#line 4296 
    ecmd->advertising |= 64U;
    
#line 4297 
    adv = mii_rw(dev,np->phyaddr,4,-1);
    
#line 4298 
    if ((adv & 32) != 0) 
#line 4299 
                         ecmd->advertising |= 1U; else ;
    
#line 4300 
    if ((adv & 64) != 0) 
#line 4301 
                         ecmd->advertising |= 2U; else ;
    
#line 4302 
    if ((adv & 128) != 0) 
#line 4303 
                          ecmd->advertising |= 4U; else ;
    
#line 4304 
    if ((adv & 256) != 0) 
#line 4305 
                          ecmd->advertising |= 8U; else ;
    
#line 4306 
    if ((unsigned int)np->gigabit == 256U) {
      
#line 4307 
      adv = mii_rw(dev,np->phyaddr,9,-1);
      
#line 4308 
      if ((adv & 512) != 0) 
#line 4309 
                            ecmd->advertising |= 32U; else ;
    }
    else ;
  }
  else ;
  
#line 4312 
  ecmd->supported = 591U;
  
#line 4316 
  if ((unsigned int)np->gigabit == 256U) 
#line 4317 
                                         ecmd->supported |= 32U; else ;
  
#line 4319 
  ecmd->phy_address = (unsigned char)np->phyaddr;
  
#line 4320 
  ecmd->transceiver = (unsigned char)1U;
  
#line 4323 
  ldv_spin_unlock_irq_153(& np->lock);
  
#line 4324 
  __retres = 0;
  
#line 4324 
  return __retres;
}


#line 4327  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_set_settings(struct net_device *dev, struct ethtool_cmd *ecmd)
{
  int __retres;
  bool tmp_1;
  bool tmp_6;
  
#line 4329 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4330 
  u32 speed = ethtool_cmd_speed((struct ethtool_cmd const *)ecmd);
  
#line 4332 
  if ((unsigned int)ecmd->port != 2U) {
    
#line 4333 
    __retres = -22;
    
#line 4333 
    goto return_label;
  }
  else ;
  
#line 4334 
  if ((unsigned int)ecmd->transceiver != 1U) {
    
#line 4335 
    __retres = -22;
    
#line 4335 
    goto return_label;
  }
  else ;
  
#line 4336 
  if ((int)ecmd->phy_address != np->phyaddr) {
    
#line 4339 
    __retres = -22;
    
#line 4339 
    goto return_label;
  }
  else ;
  
#line 4341 
  if ((unsigned int)ecmd->autoneg == 1U) {
    u32 mask;
    
#line 4344 
    mask = 15U;
    
#line 4346 
    if ((unsigned int)np->gigabit == 256U) 
#line 4347 
                                           mask |= 32U; else ;
    
#line 4349 
    if ((ecmd->advertising & mask) == 0U) {
      
#line 4350 
      __retres = -22;
      
#line 4350 
      goto return_label;
    }
    else ;
  }
  else 
    
#line 4352 
    if ((unsigned int)ecmd->autoneg == 0U) {
      
#line 4356 
      if (speed != 10U && speed != 100U) {
        
#line 4357 
        __retres = -22;
        
#line 4357 
        goto return_label;
      }
      else ;
      
#line 4358 
      if ((unsigned int)ecmd->duplex > 1U) {
        
#line 4359 
        __retres = -22;
        
#line 4359 
        goto return_label;
      }
      else ;
    }
    else {
      
#line 4361 
      __retres = -22;
      
#line 4361 
      goto return_label;
    }
  
#line 4364 
  netif_carrier_off(dev);
  
#line 4365 
  tmp_1 = netif_running((struct net_device const *)dev);
  
#line 4365 
  if ((int)tmp_1 != 0) {
    unsigned long flags;
    
#line 4368 
    nv_disable_irq(dev);
    
#line 4369 
    netif_tx_lock_bh(dev);
    
#line 4370 
    netif_addr_lock(dev);
    
#line 4372 
    ldv___ldv_spin_lock_154(& np->lock);
    
#line 4382 
    nv_stop_rxtx(dev);
    
#line 4383 
    ldv_spin_unlock_irqrestore_155(& np->lock,flags);
    
#line 4384 
    netif_addr_unlock(dev);
    
#line 4385 
    netif_tx_unlock_bh(dev);
  }
  else ;
  
#line 4388 
  if ((unsigned int)ecmd->autoneg == 1U) {
    int adv;
    int bmcr;
    bool tmp_2;
    
#line 4391 
    np->autoneg = 1;
    
#line 4394 
    adv = mii_rw(dev,np->phyaddr,4,-1);
    
#line 4395 
    adv &= -4065;
    
#line 4396 
    if ((ecmd->advertising & 1U) != 0U) 
#line 4397 
                                        adv |= 32; else ;
    
#line 4398 
    if ((ecmd->advertising & 2U) != 0U) 
#line 4399 
                                        adv |= 64; else ;
    
#line 4400 
    if ((ecmd->advertising & 4U) != 0U) 
#line 4401 
                                        adv |= 128; else ;
    
#line 4402 
    if ((ecmd->advertising & 8U) != 0U) 
#line 4403 
                                        adv |= 256; else ;
    
#line 4404 
    if ((np->pause_flags & 16U) != 0U) 
#line 4405 
                                       adv |= 3072; else ;
    
#line 4406 
    if ((np->pause_flags & 32U) != 0U) 
#line 4407 
                                       adv |= 2048; else ;
    
#line 4408 
    mii_rw(dev,np->phyaddr,4,adv);
    
#line 4410 
    if ((unsigned int)np->gigabit == 256U) {
      
#line 4411 
      adv = mii_rw(dev,np->phyaddr,9,-1);
      
#line 4412 
      adv &= -513;
      
#line 4413 
      if ((ecmd->advertising & 32U) != 0U) 
#line 4414 
                                           adv |= 512; else ;
      
#line 4415 
      mii_rw(dev,np->phyaddr,9,adv);
    }
    else ;
    
#line 4418 
    tmp_2 = netif_running((struct net_device const *)dev);
    
#line 4418 
    if ((int)tmp_2 != 0) 
#line 4419 
                         netdev_info((struct net_device const *)dev,"link down\n"); else ;
    
#line 4420 
    bmcr = mii_rw(dev,np->phyaddr,0,-1);
    
#line 4421 
    if (np->phy_model == 544U) {
      int tmp_3;
      
#line 4422 
      bmcr |= 4096;
      
#line 4425 
      tmp_3 = phy_reset(dev,(unsigned int)bmcr);
      
#line 4425 
      if (tmp_3 != 0) {
        
#line 4426 
        netdev_info((struct net_device const *)dev,"phy reset failed\n");
        
#line 4427 
        __retres = -22;
        
#line 4427 
        goto return_label;
      }
      else ;
    }
    else {
      
#line 4430 
      bmcr |= 4608;
      
#line 4431 
      mii_rw(dev,np->phyaddr,0,bmcr);
    }
  }
  else {
    int adv_0;
    int bmcr_0;
    
#line 4436 
    np->autoneg = 0;
    
#line 4438 
    adv_0 = mii_rw(dev,np->phyaddr,4,-1);
    
#line 4439 
    adv_0 &= -4065;
    
#line 4440 
    if (speed == 10U && (unsigned int)ecmd->duplex == 0U) 
#line 4441 
                                                          adv_0 |= 32; else ;
    
#line 4442 
    if (speed == 10U && (unsigned int)ecmd->duplex == 1U) 
#line 4443 
                                                          adv_0 |= 64; else ;
    
#line 4444 
    if (speed == 100U && (unsigned int)ecmd->duplex == 0U) 
#line 4445 
                                                           adv_0 |= 128; else ;
    
#line 4446 
    if (speed == 100U && (unsigned int)ecmd->duplex == 1U) 
#line 4447 
                                                           adv_0 |= 256; else ;
    
#line 4448 
    np->pause_flags &= 4294967219U;
    
#line 4449 
    if ((np->pause_flags & 16U) != 0U) {
      
#line 4450 
      adv_0 |= 3072;
      
#line 4451 
      np->pause_flags |= 4U;
    }
    else ;
    
#line 4453 
    if ((np->pause_flags & 32U) != 0U) {
      
#line 4454 
      adv_0 |= 2048;
      
#line 4455 
      np->pause_flags |= 8U;
    }
    else ;
    
#line 4457 
    mii_rw(dev,np->phyaddr,4,adv_0);
    
#line 4458 
    np->fixed_mode = adv_0;
    
#line 4460 
    if ((unsigned int)np->gigabit == 256U) {
      
#line 4461 
      adv_0 = mii_rw(dev,np->phyaddr,9,-1);
      
#line 4462 
      adv_0 &= -513;
      
#line 4463 
      mii_rw(dev,np->phyaddr,9,adv_0);
    }
    else ;
    
#line 4466 
    bmcr_0 = mii_rw(dev,np->phyaddr,0,-1);
    
#line 4467 
    bmcr_0 &= -12609;
    
#line 4468 
    if ((np->fixed_mode & 320) != 0) 
#line 4469 
                                     bmcr_0 |= 256; else ;
    
#line 4470 
    if ((np->fixed_mode & 384) != 0) 
#line 4471 
                                     bmcr_0 |= 8192; else ;
    
#line 4472 
    if (np->phy_oui == 20547U) {
      int tmp_4;
      
#line 4474 
      tmp_4 = phy_reset(dev,(unsigned int)bmcr_0);
      
#line 4474 
      if (tmp_4 != 0) {
        
#line 4475 
        netdev_info((struct net_device const *)dev,"phy reset failed\n");
        
#line 4476 
        __retres = -22;
        
#line 4476 
        goto return_label;
      }
      else ;
    }
    else {
      bool tmp_5;
      
#line 4479 
      mii_rw(dev,np->phyaddr,0,bmcr_0);
      
#line 4480 
      tmp_5 = netif_running((struct net_device const *)dev);
      
#line 4480 
      if ((int)tmp_5 != 0) {
        
#line 4482 
        __const_udelay(42950UL);
        
#line 4483 
        nv_linkchange(dev);
      }
      else ;
    }
  }
  
#line 4488 
  tmp_6 = netif_running((struct net_device const *)dev);
  
#line 4488 
  if ((int)tmp_6 != 0) {
    
#line 4489 
    nv_start_rxtx(dev);
    
#line 4490 
    nv_enable_irq(dev);
  }
  else ;
  
#line 4493 
  __retres = 0;
  return_label: 
#line 4493 
                return __retres;
}


#line 4498  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_get_regs_len(struct net_device *dev)
{
  int __retres;
  
#line 4500 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4501 
  __retres = (int)np->register_size;
  
#line 4501 
  return __retres;
}


#line 4504  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_get_regs(struct net_device *dev, struct ethtool_regs *regs, void *buf)
{
  int i;
  
#line 4506 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4507 
  u8 *base = get_hwbase(dev);
  
#line 4508 
  u32 *rbuf = (u32 *)buf;
  
#line 4511 
  regs->version = 1U;
  
#line 4512 
  ldv_spin_lock_irq_156(& np->lock);
  
#line 4513 
  i = 0;
  
#line 4513 
  goto ldv_48491;
  ldv_48490: 
#line 4514 
  ;
  
#line 4514 
  *(rbuf + i) = readl((void const volatile *)(base + (unsigned long)i * 4UL));
  
#line 4513 
  i += 1;
  ldv_48491: 
#line 4514 
  ;
  
#line 4513 
  if ((unsigned long)i < (unsigned long)(np->register_size / 4U)) 
#line 4515 
                                                                  goto ldv_48490; else 
                                                                    
#line 4518 
                                                                    goto ldv_48492;
  ldv_48492: 
#line 4519 
  ;
  
#line 4515 
  ldv_spin_unlock_irq_157(& np->lock);
  
#line 4516 
  return;
}


#line 4518  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_nway_reset(struct net_device *dev)
{
  int __retres;
  int ret;
  
#line 4520 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4523 
  if (np->autoneg != 0) {
    int bmcr;
    bool tmp_0;
    bool tmp_2;
    
#line 4526 
    netif_carrier_off(dev);
    
#line 4527 
    tmp_0 = netif_running((struct net_device const *)dev);
    
#line 4527 
    if ((int)tmp_0 != 0) {
      
#line 4528 
      nv_disable_irq(dev);
      
#line 4529 
      netif_tx_lock_bh(dev);
      
#line 4530 
      netif_addr_lock(dev);
      
#line 4531 
      ldv_spin_lock_158(& np->lock);
      
#line 4533 
      nv_stop_rxtx(dev);
      
#line 4534 
      ldv_spin_unlock_159(& np->lock);
      
#line 4535 
      netif_addr_unlock(dev);
      
#line 4536 
      netif_tx_unlock_bh(dev);
      
#line 4537 
      netdev_info((struct net_device const *)dev,"link down\n");
    }
    else ;
    
#line 4540 
    bmcr = mii_rw(dev,np->phyaddr,0,-1);
    
#line 4541 
    if (np->phy_model == 544U) {
      int tmp_1;
      
#line 4542 
      bmcr |= 4096;
      
#line 4544 
      tmp_1 = phy_reset(dev,(unsigned int)bmcr);
      
#line 4544 
      if (tmp_1 != 0) {
        
#line 4545 
        netdev_info((struct net_device const *)dev,"phy reset failed\n");
        
#line 4546 
        __retres = -22;
        
#line 4546 
        goto return_label;
      }
      else ;
    }
    else {
      
#line 4549 
      bmcr |= 4608;
      
#line 4550 
      mii_rw(dev,np->phyaddr,0,bmcr);
    }
    
#line 4553 
    tmp_2 = netif_running((struct net_device const *)dev);
    
#line 4553 
    if ((int)tmp_2 != 0) {
      
#line 4554 
      nv_start_rxtx(dev);
      
#line 4555 
      nv_enable_irq(dev);
    }
    else ;
    
#line 4557 
    ret = 0;
  }
  else 
#line 4559 
       ret = -22;
  
#line 4562 
  __retres = ret;
  return_label: 
#line 4562 
                return __retres;
}


#line 4565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_get_ringparam(struct net_device *dev, struct ethtool_ringparam *ring)
{
  int tmp_0;
  int tmp_1;
  
#line 4567 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4569 
  if (np->desc_ver == 1U) 
#line 4569 
                          tmp_0 = 1024; else 
#line 4569 
                                             tmp_0 = 16384;
  
#line 4569 
  ring->rx_max_pending = (unsigned int)tmp_0;
  
#line 4570 
  if (np->desc_ver == 1U) 
#line 4570 
                          tmp_1 = 1024; else 
#line 4570 
                                             tmp_1 = 16384;
  
#line 4570 
  ring->tx_max_pending = (unsigned int)tmp_1;
  
#line 4572 
  ring->rx_pending = (unsigned int)np->rx_ring_size;
  
#line 4573 
  ring->tx_pending = (unsigned int)np->tx_ring_size;
  
#line 4574 
  return;
}


#line 4576  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_set_ringparam(struct net_device *dev, struct ethtool_ringparam *ring)
{
  int __retres;
  u8 *rxtx_ring;
  u8 *rx_skbuff;
  u8 *tx_skbuff;
  dma_addr_t ring_addr;
  int tmp_4;
  bool tmp_3;
  bool tmp_9;
  int tmp_11;
  bool tmp_10;
  bool tmp_14;
  
#line 4578 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4579 
  u8 *base = get_hwbase(dev);
  
#line 4583 
  if (((((ring->rx_pending <= 127U || ring->tx_pending <= 63U) || ring->rx_mini_pending != 0U) || ring->rx_jumbo_pending != 0U) || (np->desc_ver == 1U && (ring->rx_pending > 1024U || ring->tx_pending > 1024U))) || (np->desc_ver != 1U && (ring->rx_pending > 16384U || ring->tx_pending > 16384U))) {
    
#line 4593 
    __retres = -22;
    
#line 4593 
    goto return_label;
  }
  else ;
  
#line 4597 
  tmp_3 = nv_optimized(np);
  
#line 4597 
  if (tmp_3) 
#line 4597 
             tmp_4 = 0; else 
#line 4597 
                             tmp_4 = 1;
  
#line 4597 
  if (tmp_4) 
#line 4598 
             rxtx_ring = (u8 *)pci_alloc_consistent(np->pci_dev,(unsigned long)(ring->rx_pending + ring->tx_pending) * 8UL,& ring_addr); else 
                                                                    
#line 4602 
                                                                    rxtx_ring = (u8 *)pci_alloc_consistent(np->pci_dev,(unsigned long)(ring->rx_pending + ring->tx_pending) * 16UL,& ring_addr);
  
#line 4606 
  rx_skbuff = (u8 *)kmalloc((unsigned long)ring->rx_pending * 40UL,208U);
  
#line 4607 
  tx_skbuff = (u8 *)kmalloc((unsigned long)ring->tx_pending * 40UL,208U);
  
#line 4608 
  if ((rxtx_ring == (u8 *)0U || rx_skbuff == (u8 *)0U) || tx_skbuff == (u8 *)0U) {
    int tmp_8;
    bool tmp_7;
    
#line 4610 
    tmp_7 = nv_optimized(np);
    
#line 4610 
    if (tmp_7) 
#line 4610 
               tmp_8 = 0; else 
#line 4610 
                               tmp_8 = 1;
    
#line 4610 
    if (tmp_8) {
      
#line 4611 
      if (rxtx_ring != (u8 *)0U) 
#line 4612 
                                 pci_free_consistent(np->pci_dev,(unsigned long)(ring->rx_pending + ring->tx_pending) * 8UL,(void *)rxtx_ring,ring_addr); else ;
    }
    else 
      
#line 4615 
      if (rxtx_ring != (u8 *)0U) 
#line 4616 
                                 pci_free_consistent(np->pci_dev,(unsigned long)(ring->rx_pending + ring->tx_pending) * 16UL,(void *)rxtx_ring,ring_addr); else ;
    
#line 4620 
    kfree((void const *)rx_skbuff);
    
#line 4621 
    kfree((void const *)tx_skbuff);
    
#line 4622 
    goto exit;
  }
  else ;
  
#line 4625 
  tmp_9 = netif_running((struct net_device const *)dev);
  
#line 4625 
  if ((int)tmp_9 != 0) {
    
#line 4626 
    nv_disable_irq(dev);
    
#line 4627 
    nv_napi_disable(dev);
    
#line 4628 
    netif_tx_lock_bh(dev);
    
#line 4629 
    netif_addr_lock(dev);
    
#line 4630 
    ldv_spin_lock_160(& np->lock);
    
#line 4632 
    nv_stop_rxtx(dev);
    
#line 4633 
    nv_txrx_reset(dev);
    
#line 4635 
    nv_drain_rxtx(dev);
    
#line 4637 
    free_rings(dev);
  }
  else ;
  
#line 4641 
  np->rx_ring_size = (int)ring->rx_pending;
  
#line 4642 
  np->tx_ring_size = (int)ring->tx_pending;
  
#line 4644 
  tmp_10 = nv_optimized(np);
  
#line 4644 
  if (tmp_10) 
#line 4644 
              tmp_11 = 0; else 
#line 4644 
                               tmp_11 = 1;
  
#line 4644 
  if (tmp_11) {
    
#line 4645 
    np->rx_ring.orig = (struct ring_desc *)rxtx_ring;
    
#line 4646 
    np->tx_ring.orig = np->rx_ring.orig + np->rx_ring_size;
  }
  else {
    
#line 4648 
    np->rx_ring.ex = (struct ring_desc_ex *)rxtx_ring;
    
#line 4649 
    np->tx_ring.ex = np->rx_ring.ex + np->rx_ring_size;
  }
  
#line 4651 
  np->rx_skb = (struct nv_skb_map *)rx_skbuff;
  
#line 4652 
  np->tx_skb = (struct nv_skb_map *)tx_skbuff;
  
#line 4653 
  np->ring_addr = ring_addr;
  
#line 4655 
  memset((void *)np->rx_skb,0,(unsigned long)np->rx_ring_size * 40UL);
  
#line 4656 
  memset((void *)np->tx_skb,0,(unsigned long)np->tx_ring_size * 40UL);
  
#line 4658 
  tmp_14 = netif_running((struct net_device const *)dev);
  
#line 4658 
  if ((int)tmp_14 != 0) {
    int tmp_12;
    u8 *tmp_13;
    
#line 4660 
    set_bufsize(dev);
    
#line 4661 
    tmp_12 = nv_init_ring(dev);
    
#line 4661 
    if (tmp_12 != 0) {
      
#line 4662 
      if (np->in_shutdown == 0) 
#line 4663 
                                ldv_mod_timer_161(& np->oom_kick,jiffies + 13UL); else ;
    }
    else ;
    
#line 4667 
    writel(np->rx_buf_sz,(void volatile *)(base + 144U));
    
#line 4668 
    setup_hw_rings(dev,3);
    
#line 4669 
    writel((unsigned int)(((np->rx_ring_size + -1) << 16) + (np->tx_ring_size + -1)),(void volatile *)(base + 264U));
    
#line 4671 
    pci_push(base);
    
#line 4672 
    tmp_13 = get_hwbase(dev);
    
#line 4672 
    ;
    
#line 4672 
    writel(np->txrxctl_bits | 1U,(void volatile *)(tmp_13 + 324U));
    
#line 4673 
    pci_push(base);
    
#line 4676 
    nv_start_rxtx(dev);
    
#line 4677 
    ldv_spin_unlock_162(& np->lock);
    
#line 4678 
    netif_addr_unlock(dev);
    
#line 4679 
    netif_tx_unlock_bh(dev);
    
#line 4680 
    nv_napi_enable(dev);
    
#line 4681 
    nv_enable_irq(dev);
  }
  else ;
  
#line 4683 
  __retres = 0;
  
#line 4683 
  goto return_label;
  exit: 
#line 4684 
  ;
  
#line 4685 
  __retres = -12;
  return_label: 
#line 4685 
                return __retres;
}


#line 4688  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_get_pauseparam(struct net_device *dev, struct ethtool_pauseparam *pause)
{
  
#line 4690 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4692 
  pause->autoneg = (unsigned int)((np->pause_flags & 64U) != 0U);
  
#line 4693 
  pause->rx_pause = (unsigned int)((np->pause_flags & 4U) != 0U);
  
#line 4694 
  pause->tx_pause = (unsigned int)((np->pause_flags & 8U) != 0U);
  
#line 4695 
  return;
}


#line 4697  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_set_pauseparam(struct net_device *dev, struct ethtool_pauseparam *pause)
{
  int __retres;
  int adv;
  int bmcr;
  bool tmp_0;
  bool tmp_4;
  
#line 4699 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4702 
  if ((np->autoneg == 0 || pause->autoneg == 0U) && np->duplex == 0) {
    
#line 4704 
    netdev_info((struct net_device const *)dev,"can not set pause settings when forced link is in half duplex\n");
    
#line 4705 
    __retres = -22;
    
#line 4705 
    goto return_label;
  }
  else ;
  
#line 4707 
  if (pause->tx_pause != 0U && (np->pause_flags & 2U) == 0U) {
    
#line 4708 
    netdev_info((struct net_device const *)dev,"hardware does not support tx pause frames\n");
    
#line 4709 
    __retres = -22;
    
#line 4709 
    goto return_label;
  }
  else ;
  
#line 4712 
  netif_carrier_off(dev);
  
#line 4713 
  tmp_0 = netif_running((struct net_device const *)dev);
  
#line 4713 
  if ((int)tmp_0 != 0) {
    
#line 4714 
    nv_disable_irq(dev);
    
#line 4715 
    netif_tx_lock_bh(dev);
    
#line 4716 
    netif_addr_lock(dev);
    
#line 4717 
    ldv_spin_lock_163(& np->lock);
    
#line 4719 
    nv_stop_rxtx(dev);
    
#line 4720 
    ldv_spin_unlock_164(& np->lock);
    
#line 4721 
    netif_addr_unlock(dev);
    
#line 4722 
    netif_tx_unlock_bh(dev);
  }
  else ;
  
#line 4725 
  np->pause_flags &= 4294967247U;
  
#line 4726 
  if (pause->rx_pause != 0U) 
#line 4727 
                             np->pause_flags |= 16U; else ;
  
#line 4728 
  if (pause->tx_pause != 0U) 
#line 4729 
                             np->pause_flags |= 32U; else ;
  
#line 4731 
  if (np->autoneg != 0 && pause->autoneg != 0U) {
    bool tmp_1;
    
#line 4732 
    np->pause_flags |= 64U;
    
#line 4734 
    adv = mii_rw(dev,np->phyaddr,4,-1);
    
#line 4735 
    adv &= -3073;
    
#line 4736 
    if ((np->pause_flags & 16U) != 0U) 
#line 4737 
                                       adv |= 3072; else ;
    
#line 4738 
    if ((np->pause_flags & 32U) != 0U) 
#line 4739 
                                       adv |= 2048; else ;
    
#line 4740 
    mii_rw(dev,np->phyaddr,4,adv);
    
#line 4742 
    tmp_1 = netif_running((struct net_device const *)dev);
    
#line 4742 
    if ((int)tmp_1 != 0) 
#line 4743 
                         netdev_info((struct net_device const *)dev,"link down\n"); else ;
    
#line 4744 
    bmcr = mii_rw(dev,np->phyaddr,0,-1);
    
#line 4745 
    bmcr |= 4608;
    
#line 4746 
    mii_rw(dev,np->phyaddr,0,bmcr);
  }
  else {
    int tmp_3;
    bool tmp_2;
    
#line 4748 
    np->pause_flags &= 4294967219U;
    
#line 4749 
    if (pause->rx_pause != 0U) 
#line 4750 
                               np->pause_flags |= 4U; else ;
    
#line 4751 
    if (pause->tx_pause != 0U) 
#line 4752 
                               np->pause_flags |= 8U; else ;
    
#line 4754 
    tmp_2 = netif_running((struct net_device const *)dev);
    
#line 4754 
    if (tmp_2) 
#line 4754 
               tmp_3 = 0; else 
#line 4754 
                               tmp_3 = 1;
    
#line 4754 
    if (tmp_3) 
#line 4755 
               nv_update_linkspeed(dev); else 
#line 4757 
                                              nv_update_pause(dev,np->pause_flags);
  }
  
#line 4760 
  tmp_4 = netif_running((struct net_device const *)dev);
  
#line 4760 
  if ((int)tmp_4 != 0) {
    
#line 4761 
    nv_start_rxtx(dev);
    
#line 4762 
    nv_enable_irq(dev);
  }
  else ;
  
#line 4764 
  __retres = 0;
  return_label: 
#line 4764 
                return __retres;
}


#line 4767  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_set_loopback(struct net_device *dev, netdev_features_t features)
{
  int __retres;
  unsigned long flags;
  u32 miicontrol;
  int err;
  int tmp_0;
  
#line 4769 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4772 
  int retval = 0;
  
#line 4774 
  ldv___ldv_spin_lock_165(& np->lock);
  
#line 4775 
  tmp_0 = mii_rw(dev,np->phyaddr,0,-1);
  
#line 4775 
  miicontrol = (unsigned int)tmp_0;
  
#line 4776 
  if ((features & 68719476736ULL) != 0ULL) {
    
#line 4777 
    if ((miicontrol & 16384U) != 0U) {
      
#line 4778 
      ldv_spin_unlock_irqrestore_166(& np->lock,flags);
      
#line 4779 
      netdev_info((struct net_device const *)dev,"Loopback already enabled\n");
      
#line 4780 
      __retres = 0;
      
#line 4780 
      goto return_label;
    }
    else ;
    
#line 4782 
    nv_disable_irq(dev);
    
#line 4784 
    miicontrol |= 16704U;
    
#line 4785 
    err = mii_rw(dev,np->phyaddr,0,(int)miicontrol);
    
#line 4786 
    if (err != 0) {
      
#line 4787 
      retval = 2;
      
#line 4788 
      ldv_spin_unlock_irqrestore_167(& np->lock,flags);
      
#line 4789 
      phy_init(dev);
    }
    else {
      bool tmp_1;
      
#line 4791 
      tmp_1 = netif_running((struct net_device const *)dev);
      
#line 4791 
      if ((int)tmp_1 != 0) {
        
#line 4793 
        nv_force_linkspeed(dev,50,1);
        
#line 4796 
        netif_carrier_on(dev);
      }
      else ;
      
#line 4798 
      ldv_spin_unlock_irqrestore_168(& np->lock,flags);
      
#line 4799 
      netdev_info((struct net_device const *)dev,"Internal PHY loopback mode enabled.\n");
    }
  }
  else {
    
#line 4803 
    if ((miicontrol & 16384U) == 0U) {
      
#line 4804 
      ldv_spin_unlock_irqrestore_169(& np->lock,flags);
      
#line 4805 
      netdev_info((struct net_device const *)dev,"Loopback already disabled\n");
      
#line 4806 
      __retres = 0;
      
#line 4806 
      goto return_label;
    }
    else ;
    
#line 4808 
    nv_disable_irq(dev);
    
#line 4810 
    ldv_spin_unlock_irqrestore_170(& np->lock,flags);
    
#line 4811 
    netdev_info((struct net_device const *)dev,"Internal PHY loopback mode disabled.\n");
    
#line 4812 
    phy_init(dev);
  }
  
#line 4814 
  msleep(500U);
  
#line 4815 
  ldv___ldv_spin_lock_171(& np->lock);
  
#line 4816 
  nv_enable_irq(dev);
  
#line 4817 
  ldv_spin_unlock_irqrestore_172(& np->lock,flags);
  
#line 4819 
  __retres = retval;
  return_label: 
#line 4819 
                return __retres;
}


#line 4822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static netdev_features_t nv_fix_features(struct net_device *dev, netdev_features_t features)
{
  
#line 4826 
  if ((features & 384ULL) != 0ULL) 
#line 4827 
                                   features |= 17179869184ULL; else ;
  
#line 4829 
  return features;
}


#line 4832  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_vlan_mode(struct net_device *dev, netdev_features_t features)
{
  u8 *tmp_0;
  
#line 4834 
  struct fe_priv *np = get_nvpriv(dev);
  
#line 4836 
  ldv_spin_lock_irq_173(& np->lock);
  
#line 4838 
  if ((features & 256ULL) != 0ULL) 
#line 4839 
                                   np->txrxctl_bits |= 64U; else 
#line 4841 
                                                                 np->txrxctl_bits &= 4294967231U;
  
#line 4843 
  if ((features & 128ULL) != 0ULL) 
#line 4844 
                                   np->txrxctl_bits |= 128U; else 
#line 4846 
                                                                  np->txrxctl_bits &= 4294967167U;
  
#line 4848 
  tmp_0 = get_hwbase(dev);
  
#line 4848 
  ;
  
#line 4848 
  writel(np->txrxctl_bits,(void volatile *)(tmp_0 + 324U));
  
#line 4850 
  ldv_spin_unlock_irq_174(& np->lock);
  
#line 4851 
  return;
}


#line 4853  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_set_features(struct net_device *dev, netdev_features_t features)
{
  int __retres;
  int retval;
  
#line 4855 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4856 
  u8 *base = get_hwbase(dev);
  
#line 4857 
  netdev_features_t changed = dev->features ^ features;
  
#line 4860 
  if ((changed & 68719476736ULL) != 0ULL) {
    bool tmp_1;
    
#line 4860 
    tmp_1 = netif_running((struct net_device const *)dev);
    
#line 4860 
    if ((int)tmp_1 != 0) {
      
#line 4861 
      retval = nv_set_loopback(dev,features);
      
#line 4862 
      if (retval != 0) {
        
#line 4863 
        __retres = retval;
        
#line 4863 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 4866 
  if ((changed & 17179869184ULL) != 0ULL) {
    bool tmp_2;
    
#line 4867 
    ldv_spin_lock_irq_175(& np->lock);
    
#line 4869 
    if ((features & 17179869184ULL) != 0ULL) 
#line 4870 
                                             np->txrxctl_bits |= 1024U; else 
                                                                    
#line 4872 
                                                                    np->txrxctl_bits &= 4294966271U;
    
#line 4874 
    tmp_2 = netif_running((struct net_device const *)dev);
    
#line 4874 
    if ((int)tmp_2 != 0) 
#line 4875 
                         writel(np->txrxctl_bits,(void volatile *)(base + 324U)); else ;
    
#line 4877 
    ldv_spin_unlock_irq_176(& np->lock);
  }
  else ;
  
#line 4880 
  if ((changed & 384ULL) != 0ULL) 
#line 4881 
                                  nv_vlan_mode(dev,features); else ;
  
#line 4883 
  __retres = 0;
  return_label: 
#line 4883 
                return __retres;
}


#line 4886  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_get_sset_count(struct net_device *dev, int sset)
{
  int __retres;
  
#line 4888 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4890 
  switch (sset) {
    case 0: 
#line 4891 
    ;
    
#line 4892 
    if ((np->driver_data & 4096U) != 0U) {
      
#line 4893 
      __retres = 4;
      
#line 4893 
      goto return_label;
    }
    else {
      
#line 4895 
      __retres = 3;
      
#line 4895 
      goto return_label;
    }
    case 1: 
#line 4896 
    ;
    
#line 4897 
    if ((np->driver_data & 2048U) != 0U) {
      
#line 4898 
      __retres = 33;
      
#line 4898 
      goto return_label;
    }
    else 
      
#line 4899 
      if ((np->driver_data & 1024U) != 0U) {
        
#line 4900 
        __retres = 30;
        
#line 4900 
        goto return_label;
      }
      else 
        
#line 4901 
        if ((np->driver_data & 512U) != 0U) {
          
#line 4902 
          __retres = 24;
          
#line 4902 
          goto return_label;
        }
        else {
          
#line 4904 
          __retres = 0;
          
#line 4904 
          goto return_label;
        }
    default: 
#line 4905 
    ;
    
#line 4906 
    __retres = -95;
    
#line 4906 
    goto return_label;
  }
  return_label: 
#line 4890 
                return __retres;
}


#line 4910  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_get_ethtool_stats(struct net_device *dev, struct ethtool_stats *estats, u64 *buffer)
{
  int tmp_0;
  
#line 4915 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4917 
  ldv_spin_lock_bh_177(& np->hwstats_lock);
  
#line 4918 
  nv_update_stats(dev);
  
#line 4920 
  tmp_0 = nv_get_sset_count(dev,1);
  
#line 4919 
  ;
  
#line 4919 
  ;
  
#line 4919 
  memcpy((void *)buffer,(void const *)(& np->estats),(unsigned long)tmp_0 * 8UL);
  
#line 4921 
  ldv_spin_unlock_bh_178(& np->hwstats_lock);
  
#line 4922 
  return;
}


#line 4924  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_link_test(struct net_device *dev)
{
  int __retres;
  int mii_status;
  
#line 4926 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4929 
  mii_rw(dev,np->phyaddr,1,-1);
  
#line 4930 
  mii_status = mii_rw(dev,np->phyaddr,1,-1);
  
#line 4933 
  if ((mii_status & 4) == 0) {
    
#line 4934 
    __retres = 0;
    
#line 4934 
    goto return_label;
  }
  else {
    
#line 4936 
    __retres = 1;
    
#line 4936 
    goto return_label;
  }
  return_label: 
#line 4933 
                return __retres;
}


#line 4939  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_register_test(struct net_device *dev)
{
  int __retres;
  u32 orig_read;
  u32 new_read;
  
#line 4941 
  u8 *base = get_hwbase(dev);
  
#line 4942 
  int i = 0;
  ldv_48579: 
#line 4944 
  ;
  
#line 4946 
  orig_read = readl((void const volatile *)(base + nv_registers_test[i].reg));
  
#line 4949 
  orig_read = nv_registers_test[i].mask ^ orig_read;
  
#line 4951 
  writel(orig_read,(void volatile *)(base + nv_registers_test[i].reg));
  
#line 4953 
  new_read = readl((void const volatile *)(base + nv_registers_test[i].reg));
  
#line 4955 
  if (((new_read ^ orig_read) & nv_registers_test[i].mask) != 0U) {
    
#line 4956 
    __retres = 0;
    
#line 4956 
    goto return_label;
  }
  else ;
  
#line 4959 
  orig_read = nv_registers_test[i].mask ^ orig_read;
  
#line 4960 
  writel(orig_read,(void volatile *)(base + nv_registers_test[i].reg));
  
#line 4962 
  i += 1;
  
#line 4962 
  ;
  
#line 4962 
  if (nv_registers_test[i].reg != 0U) 
#line 4964 
                                      goto ldv_48579; else 
#line 4967 
                                                           goto ldv_48580;
  ldv_48580: 
#line 4968 
  ;
  
#line 4964 
  __retres = 1;
  return_label: 
#line 4964 
                return __retres;
}


#line 4967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_interrupt_test(struct net_device *dev)
{
  int __retres;
  int testcnt;
  u32 save_msi_flags;
  bool tmp_1;
  int tmp_2;
  bool tmp_4;
  
#line 4969 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 4970 
  u8 *base = get_hwbase(dev);
  
#line 4971 
  int ret = 1;
  
#line 4973 
  u32 save_poll_interval = 0U;
  
#line 4975 
  tmp_1 = netif_running((struct net_device const *)dev);
  
#line 4975 
  if ((int)tmp_1 != 0) {
    
#line 4977 
    nv_free_irq(dev);
    
#line 4978 
    save_poll_interval = readl((void const volatile *)(base + 12U));
  }
  else ;
  
#line 4982 
  np->intr_test = 0;
  
#line 4985 
  save_msi_flags = np->msi_flags;
  
#line 4986 
  np->msi_flags &= 4294967280U;
  
#line 4987 
  np->msi_flags |= 1U;
  
#line 4988 
  tmp_2 = nv_request_irq(dev,1);
  
#line 4988 
  if (tmp_2 != 0) {
    
#line 4989 
    __retres = 0;
    
#line 4989 
    goto return_label;
  }
  else ;
  
#line 4992 
  writel(13U,(void volatile *)(base + 12U));
  
#line 4993 
  writel(3U,(void volatile *)(base + 8U));
  
#line 4995 
  nv_enable_hw_interrupts(dev,32U);
  
#line 4998 
  msleep(100U);
  
#line 5000 
  ldv_spin_lock_irq_179(& np->lock);
  
#line 5003 
  testcnt = np->intr_test;
  
#line 5004 
  if (testcnt == 0) 
#line 5005 
                    ret = 2; else ;
  
#line 5007 
  nv_disable_hw_interrupts(dev,32U);
  
#line 5008 
  if ((np->msi_flags & 128U) == 0U) 
#line 5009 
                                    writel(33791U,(void volatile *)base); else 
                                                                    
#line 5011 
                                                                    writel(33791U,(void volatile *)(base + 1008U));
  
#line 5013 
  ldv_spin_unlock_irq_180(& np->lock);
  
#line 5015 
  nv_free_irq(dev);
  
#line 5017 
  np->msi_flags = save_msi_flags;
  
#line 5019 
  tmp_4 = netif_running((struct net_device const *)dev);
  
#line 5019 
  if ((int)tmp_4 != 0) {
    int tmp_3;
    
#line 5020 
    writel(save_poll_interval,(void volatile *)(base + 12U));
    
#line 5021 
    writel(3U,(void volatile *)(base + 8U));
    
#line 5023 
    tmp_3 = nv_request_irq(dev,0);
    
#line 5023 
    if (tmp_3 != 0) {
      
#line 5024 
      __retres = 0;
      
#line 5024 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 5027 
  __retres = ret;
  return_label: 
#line 5027 
                return __retres;
}


#line 5030  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_loopback_test(struct net_device *dev)
{
  struct sk_buff *tx_skb;
  struct sk_buff *rx_skb;
  dma_addr_t test_dma_addr;
  int tmp_1;
  u32 flags;
  int len;
  int i;
  int pkt_len;
  u8 *pkt_data;
  bool tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_9;
  bool tmp_8;
  u8 *tmp_10;
  u8 *tmp_11;
  int tmp_15;
  bool tmp_14;
  unsigned char *tmp_16;
  bool tmp_17;
  
#line 5032 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 5033 
  u8 *base = get_hwbase(dev);
  
#line 5036 
  if (np->desc_ver == 1U) 
#line 5036 
                          tmp_1 = 65536; else 
#line 5036 
                                              tmp_1 = 536870912;
  
#line 5036 
  u32 tx_flags_extra = (unsigned int)tmp_1;
  
#line 5040 
  u32 filter_flags = 0U;
  
#line 5041 
  u32 misc1_flags = 0U;
  
#line 5042 
  int ret = 1;
  
#line 5044 
  tmp_2 = netif_running((struct net_device const *)dev);
  
#line 5044 
  if ((int)tmp_2 != 0) {
    
#line 5045 
    nv_disable_irq(dev);
    
#line 5046 
    filter_flags = readl((void const volatile *)(base + 140U));
    
#line 5047 
    misc1_flags = readl((void const volatile *)(base + 128U));
  }
  else 
#line 5049 
       nv_txrx_reset(dev);
  
#line 5053 
  set_bufsize(dev);
  
#line 5054 
  nv_init_ring(dev);
  
#line 5057 
  writel(3870524U,(void volatile *)(base + 128U));
  
#line 5058 
  writel(8323088U,(void volatile *)(base + 140U));
  
#line 5061 
  writel(np->rx_buf_sz,(void volatile *)(base + 144U));
  
#line 5062 
  setup_hw_rings(dev,3);
  
#line 5063 
  writel((unsigned int)(((np->rx_ring_size + -1) << 16) + (np->tx_ring_size + -1)),(void volatile *)(base + 264U));
  
#line 5065 
  pci_push(base);
  
#line 5068 
  nv_start_rxtx(dev);
  
#line 5071 
  pkt_len = 1500;
  
#line 5072 
  tx_skb = netdev_alloc_skb(dev,(unsigned int)pkt_len);
  
#line 5073 
  if (tx_skb == (struct sk_buff *)0) {
    
#line 5074 
    ret = 0;
    
#line 5075 
    goto out;
  }
  else ;
  
#line 5078 
  tmp_3 = skb_tailroom((struct sk_buff const *)tx_skb);
  
#line 5077 
  ;
  
#line 5077 
  ;
  
#line 5077 
  test_dma_addr = pci_map_single(np->pci_dev,(void *)tx_skb->data,(unsigned long)tmp_3,2);
  
#line 5080 
  tmp_4 = pci_dma_mapping_error(np->pci_dev,test_dma_addr);
  
#line 5080 
  if (tmp_4 != 0) {
    
#line 5082 
    dev_kfree_skb_any(tx_skb);
    
#line 5083 
    goto out;
  }
  else ;
  
#line 5085 
  pkt_data = skb_put(tx_skb,(unsigned int)pkt_len);
  
#line 5086 
  i = 0;
  
#line 5086 
  goto ldv_48609;
  ldv_48608: 
#line 5087 
  ;
  
#line 5087 
  *(pkt_data + i) = (unsigned char)i;
  
#line 5086 
  i += 1;
  ldv_48609: 
#line 5087 
  ;
  
#line 5086 
  if (i < pkt_len) 
#line 5088 
                   goto ldv_48608; else 
#line 5091 
                                        goto ldv_48610;
  ldv_48610: 
#line 5092 
  ;
  
#line 5089 
  tmp_8 = nv_optimized(np);
  
#line 5089 
  if (tmp_8) 
#line 5089 
             tmp_9 = 0; else 
#line 5089 
                             tmp_9 = 1;
  
#line 5089 
  if (tmp_9) {
    
#line 5090 
    (np->tx_ring.orig)->buf = (unsigned int)test_dma_addr;
    
#line 5091 
    (np->tx_ring.orig)->flaglen = ((unsigned int)(pkt_len + -1) | np->tx_flags) | tx_flags_extra;
  }
  else {
    
#line 5093 
    (np->tx_ring.ex)->bufhigh = dma_high(test_dma_addr);
    
#line 5094 
    (np->tx_ring.ex)->buflow = dma_low(test_dma_addr);
    
#line 5095 
    (np->tx_ring.ex)->flaglen = ((unsigned int)(pkt_len + -1) | np->tx_flags) | tx_flags_extra;
  }
  
#line 5097 
  tmp_10 = get_hwbase(dev);
  
#line 5097 
  ;
  
#line 5097 
  writel(np->txrxctl_bits | 1U,(void volatile *)(tmp_10 + 324U));
  
#line 5098 
  tmp_11 = get_hwbase(dev);
  
#line 5098 
  pci_push(tmp_11);
  
#line 5100 
  msleep(500U);
  
#line 5103 
  tmp_14 = nv_optimized(np);
  
#line 5103 
  if (tmp_14) 
#line 5103 
              tmp_15 = 0; else 
#line 5103 
                               tmp_15 = 1;
  
#line 5103 
  if (tmp_15) {
    u32 tmp_12;
    
#line 5104 
    flags = (np->rx_ring.orig)->flaglen;
    
#line 5105 
    tmp_12 = nv_descr_getlength(np->rx_ring.orig,np->desc_ver);
    
#line 5105 
    len = (int)tmp_12;
  }
  else {
    u32 tmp_13;
    
#line 5108 
    flags = (np->rx_ring.ex)->flaglen;
    
#line 5109 
    tmp_13 = nv_descr_getlength_ex(np->rx_ring.ex,np->desc_ver);
    
#line 5109 
    len = (int)tmp_13;
  }
  
#line 5112 
  if (flags < (u32)0) 
#line 5113 
                      ret = 0;
  else 
    
#line 5114 
    if (np->desc_ver == 1U) {
      
#line 5115 
      if ((flags & 1073741824U) != 0U) 
#line 5116 
                                       ret = 0; else ;
    }
    else 
      
#line 5118 
      if ((flags & 1073741824U) != 0U) 
#line 5119 
                                       ret = 0; else ;
  
#line 5122 
  if (ret != 0) 
    
#line 5123 
    if (len != pkt_len) 
#line 5124 
                        ret = 0;
    else {
      
#line 5126 
      rx_skb = (np->rx_skb)->skb;
      
#line 5127 
      i = 0;
      
#line 5127 
      goto ldv_48613;
      ldv_48612: 
#line 5128 
      ;
      
#line 5128 
      if ((int)*(rx_skb->data + i) != (int)((unsigned char)i)) {
        
#line 5129 
        ret = 0;
        
#line 5130 
        goto ldv_48611;
      }
      else ;
      
#line 5127 
      i += 1;
      ldv_48613: 
#line 5128 
      ;
      
#line 5127 
      if (i < pkt_len) 
#line 5129 
                       goto ldv_48612; else 
#line 5132 
                                            goto ldv_48611;
      ldv_48611: 
#line 5133 
      ;
    }
  else ;
  
#line 5137 
  tmp_16 = skb_end_pointer((struct sk_buff const *)tx_skb);
  
#line 5136 
  ;
  
#line 5136 
  ;
  
#line 5136 
  ;
  
#line 5136 
  pci_unmap_single(np->pci_dev,test_dma_addr,(unsigned long)((long)tmp_16 - (long)tx_skb->data),1);
  
#line 5139 
  dev_kfree_skb_any(tx_skb);
  out: 
#line 5140 
  ;
  
#line 5142 
  nv_stop_rxtx(dev);
  
#line 5143 
  nv_txrx_reset(dev);
  
#line 5145 
  nv_drain_rxtx(dev);
  
#line 5147 
  tmp_17 = netif_running((struct net_device const *)dev);
  
#line 5147 
  if ((int)tmp_17 != 0) {
    
#line 5148 
    writel(misc1_flags,(void volatile *)(base + 128U));
    
#line 5149 
    writel(filter_flags,(void volatile *)(base + 140U));
    
#line 5150 
    nv_enable_irq(dev);
  }
  else ;
  
#line 5153 
  return ret;
}


#line 5156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_self_test(struct net_device *dev, struct ethtool_test *test, u64 *buffer)
{
  int result;
  int count;
  int tmp_1;
  
#line 5158 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 5159 
  u8 *base = get_hwbase(dev);
  
#line 5162 
  count = nv_get_sset_count(dev,0);
  
#line 5163 
  memset((void *)buffer,0,(unsigned long)count * 8UL);
  
#line 5165 
  tmp_1 = nv_link_test(dev);
  
#line 5165 
  if (tmp_1 == 0) {
    
#line 5166 
    test->flags |= 2U;
    
#line 5167 
    *buffer = 1ULL;
  }
  else ;
  
#line 5170 
  if ((test->flags & 1U) != 0U) {
    bool tmp_2;
    int tmp_3;
    bool tmp_7;
    
#line 5171 
    tmp_2 = netif_running((struct net_device const *)dev);
    
#line 5171 
    if ((int)tmp_2 != 0) {
      
#line 5172 
      netif_start_queue(dev);
      
#line 5173 
      nv_napi_disable(dev);
      
#line 5174 
      netif_tx_lock_bh(dev);
      
#line 5175 
      netif_addr_lock(dev);
      
#line 5176 
      ldv_spin_lock_irq_181(& np->lock);
      
#line 5177 
      nv_disable_hw_interrupts(dev,np->irqmask);
      
#line 5178 
      if ((np->msi_flags & 128U) == 0U) 
#line 5179 
                                        writel(33791U,(void volatile *)base); else 
                                                                    
#line 5181 
                                                                    writel(33791U,(void volatile *)(base + 1008U));
      
#line 5183 
      nv_stop_rxtx(dev);
      
#line 5184 
      nv_txrx_reset(dev);
      
#line 5186 
      nv_drain_rxtx(dev);
      
#line 5187 
      ldv_spin_unlock_irq_182(& np->lock);
      
#line 5188 
      netif_addr_unlock(dev);
      
#line 5189 
      netif_tx_unlock_bh(dev);
    }
    else ;
    
#line 5192 
    tmp_3 = nv_register_test(dev);
    
#line 5192 
    if (tmp_3 == 0) {
      
#line 5193 
      test->flags |= 2U;
      
#line 5194 
      *(buffer + 1U) = 1ULL;
    }
    else ;
    
#line 5197 
    result = nv_interrupt_test(dev);
    
#line 5198 
    if (result != 1) {
      
#line 5199 
      test->flags |= 2U;
      
#line 5200 
      *(buffer + 2U) = 1ULL;
    }
    else ;
    
#line 5202 
    if (result == 0) 
#line 5204 
                     goto return_label; else ;
    
#line 5207 
    if (count > 3) {
      int tmp_4;
      
#line 5207 
      tmp_4 = nv_loopback_test(dev);
      
#line 5207 
      if (tmp_4 == 0) {
        
#line 5208 
        test->flags |= 2U;
        
#line 5209 
        *(buffer + 3U) = 1ULL;
      }
      else ;
    }
    else ;
    
#line 5212 
    tmp_7 = netif_running((struct net_device const *)dev);
    
#line 5212 
    if ((int)tmp_7 != 0) {
      int tmp_5;
      u8 *tmp_6;
      
#line 5214 
      set_bufsize(dev);
      
#line 5215 
      tmp_5 = nv_init_ring(dev);
      
#line 5215 
      if (tmp_5 != 0) {
        
#line 5216 
        if (np->in_shutdown == 0) 
#line 5217 
                                  ldv_mod_timer_183(& np->oom_kick,jiffies + 13UL); else ;
      }
      else ;
      
#line 5220 
      writel(np->rx_buf_sz,(void volatile *)(base + 144U));
      
#line 5221 
      setup_hw_rings(dev,3);
      
#line 5222 
      writel((unsigned int)(((np->rx_ring_size + -1) << 16) + (np->tx_ring_size + -1)),(void volatile *)(base + 264U));
      
#line 5224 
      pci_push(base);
      
#line 5225 
      tmp_6 = get_hwbase(dev);
      
#line 5225 
      ;
      
#line 5225 
      writel(np->txrxctl_bits | 1U,(void volatile *)(tmp_6 + 324U));
      
#line 5226 
      pci_push(base);
      
#line 5228 
      nv_start_rxtx(dev);
      
#line 5229 
      netif_start_queue(dev);
      
#line 5230 
      nv_napi_enable(dev);
      
#line 5231 
      nv_enable_hw_interrupts(dev,np->irqmask);
    }
    else ;
  }
  else ;
  return_label: 
#line 5234 
                return;
}


#line 5236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_get_strings(struct net_device *dev, u32 stringset, u8 *buffer)
{
  
#line 5238 
  switch (stringset) {
    int tmp;
    int tmp_0;
    case (u32)1: 
#line 5239 
    ;
    
#line 5240 
    tmp = nv_get_sset_count(dev,1);
    
#line 5240 
    ;
    
#line 5240 
    memcpy((void *)buffer,(void const *)(& nv_estats_str),(unsigned long)tmp * 32UL);
    
#line 5241 
    goto ldv_48629;
    case (u32)0: 
#line 5242 
    ;
    
#line 5243 
    tmp_0 = nv_get_sset_count(dev,0);
    
#line 5243 
    ;
    
#line 5243 
    memcpy((void *)buffer,(void const *)(& nv_etests_str),(unsigned long)tmp_0 * 32UL);
    
#line 5244 
    goto ldv_48629;
  }
  ldv_48629: 
#line 5246 
  ;
  
#line 5247 
  return;
}


#line 5248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static struct ethtool_ops const ops = {.get_settings = & nv_get_settings, .set_settings = & nv_set_settings, .get_drvinfo = & nv_get_drvinfo, .get_regs_len = & nv_get_regs_len, .get_regs = & nv_get_regs, .get_wol = & nv_get_wol, .set_wol = & nv_set_wol, .get_msglevel = (u32 (*)(struct net_device *))0, .set_msglevel = (void (*)(struct net_device *, u32 ))0, .nway_reset = & nv_nway_reset, .get_link = & ethtool_op_get_link, .get_eeprom_len = (int (*)(struct net_device *))0, .get_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .set_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_coalesce = (int (*)(struct net_device *, struct ethtool_coalesce *))0, .set_coalesce = (int (*)(struct net_device *, struct ethtool_coalesce *))0, .get_ringparam = & nv_get_ringparam, .set_ringparam = & nv_set_ringparam, .get_pauseparam = & nv_get_pauseparam, .set_pauseparam = & nv_set_pauseparam, .self_test = & nv_self_test, .get_strings = & nv_get_strings, .set_phys_id = (int (*)(struct net_device *, enum ethtool_phys_id_state ))0, .get_ethtool_stats = & nv_get_ethtool_stats, .begin = (int (*)(struct net_device *))0, .complete = (void (*)(struct net_device *))0, .get_priv_flags = (u32 (*)(struct net_device *))0, .set_priv_flags = (int (*)(struct net_device *, u32 ))0, .get_sset_count = & nv_get_sset_count, .get_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *, u32 *))0, .set_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *))0, .flash_device = (int (*)(struct net_device *, struct ethtool_flash *))0, .reset = (int (*)(struct net_device *, u32 *))0, .get_rxfh_key_size = (u32 (*)(struct net_device *))0, .get_rxfh_indir_size = (u32 (*)(struct net_device *))0, .get_rxfh = (int (*)(struct net_device *, u32 *, u8 *, u8 *))0, .set_rxfh = (int (*)(struct net_device *, u32 const *, u8 const *, u8 const ))0, .get_channels = (void (*)(struct net_device *, struct ethtool_channels *))0, .set_channels = (int (*)(struct net_device *, struct ethtool_channels *))0, .get_dump_flag = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_dump_data = (int (*)(struct net_device *, struct ethtool_dump *, void *))0, .set_dump = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_ts_info = & ethtool_op_get_ts_info, .get_module_info = (int (*)(struct net_device *, struct ethtool_modinfo *))0, .get_module_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .set_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .get_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void *))0, .set_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void const *))0};

#line 5270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_mgmt_acquire_sema(struct net_device *dev)
{
  int __retres;
  int i;
  u32 tx_ctrl;
  u32 mgmt_sema;
  unsigned int tmp_1;
  
#line 5272 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 5273 
  u8 *base = get_hwbase(dev);
  
#line 5277 
  i = 0;
  
#line 5277 
  goto ldv_48642;
  ldv_48641: 
#line 5278 
  ;
  
#line 5278 
  tmp_1 = readl((void const volatile *)(base + 132U));
  
#line 5278 
  mgmt_sema = tmp_1 & 3840U;
  
#line 5279 
  if (mgmt_sema == 0U) 
#line 5280 
                       goto ldv_48640; else ;
  
#line 5281 
  msleep(500U);
  
#line 5277 
  i += 1;
  ldv_48642: 
#line 5278 
  ;
  
#line 5277 
  if (i <= 9) 
#line 5279 
              goto ldv_48641; else 
#line 5282 
                                   goto ldv_48640;
  ldv_48640: 
#line 5283 
  ;
  
#line 5284 
  if (mgmt_sema != 0U) {
    
#line 5285 
    __retres = 0;
    
#line 5285 
    goto return_label;
  }
  else ;
  
#line 5287 
  i = 0;
  
#line 5287 
  goto ldv_48644;
  ldv_48643: 
#line 5288 
  ;
  
#line 5288 
  tx_ctrl = readl((void const volatile *)(base + 132U));
  
#line 5289 
  tx_ctrl |= 61440U;
  
#line 5290 
  writel(tx_ctrl,(void volatile *)(base + 132U));
  
#line 5293 
  tx_ctrl = readl((void const volatile *)(base + 132U));
  
#line 5294 
  if ((tx_ctrl & 61440U) == 61440U && (tx_ctrl & 3840U) == 0U) {
    
#line 5296 
    np->mgmt_sema = 1;
    
#line 5297 
    __retres = 1;
    
#line 5297 
    goto return_label;
  }
  else 
#line 5299 
       __const_udelay(214750UL);
  
#line 5287 
  i += 1;
  ldv_48644: 
#line 5288 
  ;
  
#line 5287 
  if (i <= 1) 
#line 5289 
              goto ldv_48643; else 
#line 5292 
                                   goto ldv_48645;
  ldv_48645: 
#line 5293 
  ;
  
#line 5302 
  __retres = 0;
  return_label: 
#line 5302 
                return __retres;
}


#line 5305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_mgmt_release_sema(struct net_device *dev)
{
  u32 tx_ctrl;
  
#line 5307 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 5308 
  u8 *base = get_hwbase(dev);
  
#line 5311 
  if ((np->driver_data & 8192U) != 0U) {
    
#line 5312 
    if (np->mgmt_sema != 0) {
      
#line 5313 
      tx_ctrl = readl((void const volatile *)(base + 132U));
      
#line 5314 
      tx_ctrl &= 4294905855U;
      
#line 5315 
      writel(tx_ctrl,(void volatile *)(base + 132U));
    }
    else ;
  }
  else ;
  
#line 5317 
  return;
}


#line 5321  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_mgmt_get_version(struct net_device *dev)
{
  int __retres;
  unsigned long start;
  int tmp_2;
  unsigned int tmp_4;
  
#line 5323 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 5324 
  u8 *base = get_hwbase(dev);
  
#line 5325 
  u32 data_ready = readl((void const volatile *)(base + 132U));
  
#line 5326 
  u32 data_ready2 = 0U;
  
#line 5328 
  int ready = 0;
  
#line 5330 
  writel(1U,(void volatile *)(base + 516U));
  
#line 5331 
  writel(data_ready ^ 1048576U,(void volatile *)(base + 132U));
  
#line 5332 
  start = jiffies;
  
#line 5333 
  goto ldv_48669;
  ldv_48668: 
#line 5334 
  ;
  
#line 5334 
  data_ready2 = readl((void const volatile *)(base + 132U));
  
#line 5335 
  if (((data_ready ^ data_ready2) & 65536U) != 0U) {
    
#line 5336 
    ready = 1;
    
#line 5337 
    goto ldv_48667;
  }
  else ;
  
#line 5339 
  schedule_timeout_uninterruptible(1L);
  ldv_48669: 
#line 5340 
  ;
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
#line 5333 
    tmp_2 = 1;
  }
  
#line 5333 
  if (tmp_2 != 0) {
    int tmp_3;
    {
      unsigned long __dummy_0;
      unsigned long volatile __dummy2_0;
      
#line 5333 
      tmp_3 = 1;
    }
    
#line 5333 
    if (tmp_3 != 0) {
      
#line 5333 
      if ((long)((jiffies - start) + 18446744073709550366UL) < 0L) 
#line 5335 
                                                                   goto ldv_48668; else 
                                                                    
#line 5338 
                                                                    goto ldv_48667;
    }
    else 
#line 5338 
         goto ldv_48667;
  }
  else 
#line 5338 
       goto ldv_48667;
  ldv_48667: 
#line 5339 
  ;
  
#line 5342 
  if (ready == 0 || (data_ready2 & 131072U) != 0U) {
    
#line 5343 
    __retres = 0;
    
#line 5343 
    goto return_label;
  }
  else ;
  
#line 5345 
  tmp_4 = readl((void const volatile *)(base + 520U));
  
#line 5345 
  np->mgmt_version = (int)tmp_4 & 8;
  
#line 5347 
  __retres = 1;
  return_label: 
#line 5347 
                return __retres;
}


#line 5350  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_open(struct net_device *dev)
{
  int __retres;
  int oom;
  int i;
  u32 low;
  int tmp_1;
  unsigned int tmp_2;
  int tmp_3;
  unsigned int tmp_4;
  unsigned int tmp_5;
  unsigned int tmp_6;
  unsigned int tmp_7;
  int tmp_8;
  
#line 5352 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 5353 
  u8 *base = get_hwbase(dev);
  
#line 5354 
  int ret = 1;
  
#line 5359 
  tmp_1 = mii_rw(dev,np->phyaddr,0,-1);
  
#line 5359 
  ;
  
#line 5359 
  ;
  
#line 5359 
  mii_rw(dev,np->phyaddr,0,tmp_1 & -2049);
  
#line 5362 
  nv_txrx_gate(dev,(_Bool)0);
  
#line 5364 
  if ((np->driver_data & 256U) != 0U) 
#line 5365 
                                      nv_mac_reset(dev); else ;
  
#line 5366 
  writel(1U,(void volatile *)(base + 176U));
  
#line 5367 
  writel(0U,(void volatile *)(base + 180U));
  
#line 5368 
  writel(4294967295U,(void volatile *)(base + 184U));
  
#line 5369 
  writel(65535U,(void volatile *)(base + 188U));
  
#line 5370 
  writel(0U,(void volatile *)(base + 140U));
  
#line 5372 
  writel(0U,(void volatile *)(base + 132U));
  
#line 5373 
  writel(0U,(void volatile *)(base + 148U));
  
#line 5375 
  writel(0U,(void volatile *)(base + 392U));
  
#line 5377 
  if ((np->pause_flags & 2U) != 0U) 
#line 5378 
                                    writel(268370048U,(void volatile *)(base + 368U)); else ;
  
#line 5381 
  set_bufsize(dev);
  
#line 5382 
  oom = nv_init_ring(dev);
  
#line 5384 
  writel(0U,(void volatile *)(base + 272U));
  
#line 5385 
  ;
  
#line 5385 
  tmp_2 = readl((void const volatile *)(base + 268U));
  
#line 5385 
  writel(tmp_2 & 32768U,(void volatile *)(base + 268U));
  
#line 5386 
  nv_txrx_reset(dev);
  
#line 5387 
  writel(0U,(void volatile *)(base + 8U));
  
#line 5389 
  np->in_shutdown = 0;
  
#line 5392 
  setup_hw_rings(dev,3);
  
#line 5393 
  writel((unsigned int)(((np->rx_ring_size + -1) << 16) + (np->tx_ring_size + -1)),(void volatile *)(base + 264U));
  
#line 5396 
  writel(np->linkspeed,(void volatile *)(base + 272U));
  
#line 5397 
  if (np->desc_ver == 1U) 
#line 5398 
                          writel(2097168U,(void volatile *)(base + 316U)); else 
                                                                    
#line 5400 
                                                                    writel(31490048U,(void volatile *)(base + 316U));
  
#line 5401 
  writel(np->txrxctl_bits,(void volatile *)(base + 324U));
  
#line 5402 
  writel(np->vlanctl_bits,(void volatile *)(base + 768U));
  
#line 5403 
  pci_push(base);
  
#line 5404 
  writel(np->txrxctl_bits | 2U,(void volatile *)(base + 324U));
  
#line 5405 
  tmp_3 = reg_delay(dev,304,2147483648U,2147483648U,5,50000);
  
#line 5405 
  if (tmp_3 != 0) 
#line 5408 
                  netdev_info((struct net_device const *)dev,"%s: SetupReg5, Bit 31 remained off\n","nv_open"); else ;
  
#line 5411 
  writel(0U,(void volatile *)(base + 388U));
  
#line 5412 
  writel(33791U,(void volatile *)base);
  
#line 5413 
  writel(15U,(void volatile *)(base + 384U));
  
#line 5415 
  writel(3870526U,(void volatile *)(base + 128U));
  
#line 5416 
  ;
  
#line 5416 
  tmp_4 = readl((void const volatile *)(base + 136U));
  
#line 5416 
  writel(tmp_4,(void volatile *)(base + 136U));
  
#line 5417 
  writel(8323072U,(void volatile *)(base + 140U));
  
#line 5418 
  writel(np->rx_buf_sz,(void volatile *)(base + 144U));
  
#line 5420 
  ;
  
#line 5420 
  tmp_5 = readl((void const volatile *)(base + 152U));
  
#line 5420 
  writel(tmp_5,(void volatile *)(base + 152U));
  
#line 5422 
  get_random_bytes((void *)(& low),4);
  
#line 5423 
  low &= 255U;
  
#line 5424 
  if (np->desc_ver == 1U) 
#line 5425 
                          writel(low | 32512U,(void volatile *)(base + 156U));
  else 
    
#line 5427 
    if ((np->driver_data & 2097152U) == 0U) 
#line 5429 
                                            writel(low | 2147516160U,(void volatile *)(base + 156U));
    else {
      
#line 5431 
      writel(32512U,(void volatile *)(base + 156U));
      
#line 5432 
      nv_gear_backoff_reseed(dev);
    }
  
#line 5435 
  writel(1377551U,(void volatile *)(base + 160U));
  
#line 5436 
  writel(22U,(void volatile *)(base + 164U));
  
#line 5437 
  if (poll_interval == -1) 
    
#line 5438 
    if (optimization_mode == 0) 
#line 5439 
                                writel(65535U,(void volatile *)(base + 12U)); else 
                                                                    
#line 5441 
                                                                    writel(13U,(void volatile *)(base + 12U));
  else 
#line 5443 
       writel((unsigned int)poll_interval & 65535U,(void volatile *)(base + 12U));
  
#line 5444 
  writel(3U,(void volatile *)(base + 8U));
  
#line 5445 
  writel((unsigned int)((np->phyaddr << 24) | 1310720),(void volatile *)(base + 392U));
  
#line 5447 
  writel(261U,(void volatile *)(base + 396U));
  
#line 5448 
  writel(8U,(void volatile *)(base + 388U));
  
#line 5449 
  if (np->wolenabled != 0) 
#line 5450 
                           writel(4369U,(void volatile *)(base + 512U)); else ;
  
#line 5452 
  tmp_6 = readl((void const volatile *)(base + 620U));
  
#line 5452 
  i = (int)tmp_6;
  
#line 5453 
  if ((i & 32768) == 0) 
#line 5454 
                        writel((unsigned int)(i | 32768),(void volatile *)(base + 620U)); else ;
  
#line 5456 
  pci_push(base);
  
#line 5457 
  __const_udelay(42950UL);
  
#line 5458 
  ;
  
#line 5458 
  tmp_7 = readl((void const volatile *)(base + 620U));
  
#line 5458 
  writel(tmp_7 | 256U,(void volatile *)(base + 620U));
  
#line 5460 
  nv_disable_hw_interrupts(dev,np->irqmask);
  
#line 5461 
  pci_push(base);
  
#line 5462 
  writel(15U,(void volatile *)(base + 384U));
  
#line 5463 
  writel(33791U,(void volatile *)base);
  
#line 5464 
  pci_push(base);
  
#line 5466 
  tmp_8 = nv_request_irq(dev,0);
  
#line 5466 
  if (tmp_8 != 0) 
#line 5467 
                  goto out_drain; else ;
  
#line 5470 
  nv_enable_hw_interrupts(dev,np->irqmask);
  
#line 5472 
  ldv_spin_lock_irq_184(& np->lock);
  
#line 5473 
  writel(1U,(void volatile *)(base + 176U));
  
#line 5474 
  writel(0U,(void volatile *)(base + 180U));
  
#line 5475 
  writel(4294967295U,(void volatile *)(base + 184U));
  
#line 5476 
  writel(65535U,(void volatile *)(base + 188U));
  
#line 5477 
  writel(8323104U,(void volatile *)(base + 140U));
  {
    u32 miistat;
    
#line 5483 
    miistat = readl((void const volatile *)(base + 384U));
    
#line 5484 
    writel(15U,(void volatile *)(base + 384U));
  }
  
#line 5488 
  np->linkspeed = 0U;
  
#line 5489 
  ret = nv_update_linkspeed(dev);
  
#line 5490 
  nv_start_rxtx(dev);
  
#line 5491 
  netif_start_queue(dev);
  
#line 5492 
  nv_napi_enable(dev);
  
#line 5494 
  if (ret != 0) 
#line 5495 
                netif_carrier_on(dev);
  else {
    
#line 5497 
    netdev_info((struct net_device const *)dev,"no link during initialization\n");
    
#line 5498 
    netif_carrier_off(dev);
  }
  
#line 5500 
  if (oom != 0) 
#line 5501 
                ldv_mod_timer_185(& np->oom_kick,jiffies + 13UL); else ;
  
#line 5504 
  if ((np->driver_data & 3584U) != 0U) {
    unsigned long tmp_9;
    
#line 5505 
    tmp_9 = round_jiffies(jiffies + 2500UL);
    
#line 5505 
    ;
    
#line 5505 
    ldv_mod_timer_186(& np->stats_poll,tmp_9);
  }
  else ;
  
#line 5508 
  ldv_spin_unlock_irq_187(& np->lock);
  
#line 5513 
  if ((dev->features & 68719476736ULL) != 0ULL) 
#line 5514 
                                                nv_set_loopback(dev,dev->features); else ;
  
#line 5516 
  __retres = 0;
  
#line 5516 
  goto return_label;
  out_drain: 
#line 5517 
  ;
  
#line 5518 
  nv_drain_rxtx(dev);
  
#line 5519 
  __retres = ret;
  return_label: 
#line 5519 
                return __retres;
}


#line 5522  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_close(struct net_device *dev)
{
  int __retres;
  u8 *base;
  
#line 5524 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 5527 
  ldv_spin_lock_irq_188(& np->lock);
  
#line 5528 
  np->in_shutdown = 1;
  
#line 5529 
  ldv_spin_unlock_irq_189(& np->lock);
  
#line 5530 
  nv_napi_disable(dev);
  
#line 5531 
  synchronize_irq((np->pci_dev)->irq);
  
#line 5533 
  ldv_del_timer_sync_190(& np->oom_kick);
  
#line 5534 
  ldv_del_timer_sync_191(& np->nic_poll);
  
#line 5535 
  ldv_del_timer_sync_192(& np->stats_poll);
  
#line 5537 
  netif_start_queue(dev);
  
#line 5538 
  ldv_spin_lock_irq_193(& np->lock);
  
#line 5539 
  nv_update_pause(dev,0U);
  
#line 5540 
  nv_stop_rxtx(dev);
  
#line 5541 
  nv_txrx_reset(dev);
  
#line 5544 
  base = get_hwbase(dev);
  
#line 5545 
  nv_disable_hw_interrupts(dev,np->irqmask);
  
#line 5546 
  pci_push(base);
  
#line 5548 
  ldv_spin_unlock_irq_194(& np->lock);
  
#line 5550 
  nv_free_irq(dev);
  
#line 5552 
  nv_drain_rxtx(dev);
  
#line 5554 
  if (np->wolenabled != 0 || phy_power_down == 0) {
    
#line 5555 
    nv_txrx_gate(dev,(_Bool)0);
    
#line 5556 
    writel(8323104U,(void volatile *)(base + 140U));
    
#line 5557 
    nv_start_rx(dev);
  }
  else {
    int tmp_0;
    
#line 5560 
    tmp_0 = mii_rw(dev,np->phyaddr,0,-1);
    
#line 5560 
    ;
    
#line 5560 
    ;
    
#line 5560 
    mii_rw(dev,np->phyaddr,0,tmp_0 | 2048);
    
#line 5562 
    nv_txrx_gate(dev,(_Bool)1);
  }
  
#line 5567 
  __retres = 0;
  
#line 5567 
  return __retres;
}


#line 5570  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static struct net_device_ops const nv_netdev_ops = {.ndo_init = (int (*)(struct net_device *))0, .ndo_uninit = (void (*)(struct net_device *))0, .ndo_open = & nv_open, .ndo_stop = & nv_close, .ndo_start_xmit = & nv_start_xmit, .ndo_select_queue = (u16 (*)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)))0, .ndo_change_rx_flags = (void (*)(struct net_device *, int ))0, .ndo_set_rx_mode = & nv_set_multicast, .ndo_set_mac_address = & nv_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = (int (*)(struct net_device *, struct ifreq *, int ))0, .ndo_set_config = (int (*)(struct net_device *, struct ifmap *))0, .ndo_change_mtu = & nv_change_mtu, .ndo_neigh_setup = (int (*)(struct net_device *, struct neigh_parms *))0, .ndo_tx_timeout = & nv_tx_timeout, .ndo_get_stats64 = & nv_get_stats64, .ndo_get_stats = (struct net_device_stats *(*)(struct net_device *))0, .ndo_vlan_rx_add_vid = (int (*)(struct net_device *, __be16 , u16 ))0, .ndo_vlan_rx_kill_vid = (int (*)(struct net_device *, __be16 , u16 ))0, .ndo_poll_controller = & nv_poll_controller, .ndo_netpoll_setup = (int (*)(struct net_device *, struct netpoll_info *))0, .ndo_netpoll_cleanup = (void (*)(struct net_device *))0, .ndo_busy_poll = (int (*)(struct napi_struct *))0, .ndo_set_vf_mac = (int (*)(struct net_device *, int , u8 *))0, .ndo_set_vf_vlan = (int (*)(struct net_device *, int , u16 , u8 ))0, .ndo_set_vf_rate = (int (*)(struct net_device *, int , int , int ))0, .ndo_set_vf_spoofchk = (int (*)(struct net_device *, int , bool ))0, .ndo_get_vf_config = (int (*)(struct net_device *, int , struct ifla_vf_info *))0, .ndo_set_vf_link_state = (int (*)(struct net_device *, int , int ))0, .ndo_get_vf_stats = (int (*)(struct net_device *, int , struct ifla_vf_stats *))0, .ndo_set_vf_port = (int (*)(struct net_device *, int , struct nlattr **))0, .ndo_get_vf_port = (int (*)(struct net_device *, int , struct sk_buff *))0, .ndo_set_vf_rss_query_en = (int (*)(struct net_device *, int , bool ))0, .ndo_setup_tc = (int (*)(struct net_device *, u8 ))0, .ndo_fcoe_enable = (int (*)(struct net_device *))0, .ndo_fcoe_disable = (int (*)(struct net_device *))0, .ndo_fcoe_ddp_setup = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_ddp_done = (int (*)(struct net_device *, u16 ))0, .ndo_fcoe_ddp_target = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_get_hbainfo = (int (*)(struct net_device *, struct netdev_fcoe_hbainfo *))0, .ndo_fcoe_get_wwn = (int (*)(struct net_device *, u64 *, int ))0, .ndo_rx_flow_steer = (int (*)(struct net_device *, struct sk_buff const *, u16 , u32 ))0, .ndo_add_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_del_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_fix_features = & nv_fix_features, .ndo_set_features = & nv_set_features, .ndo_neigh_construct = (int (*)(struct neighbour *))0, .ndo_neigh_destroy = (void (*)(struct neighbour *))0, .ndo_fdb_add = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ))0, .ndo_fdb_del = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ))0, .ndo_fdb_dump = (int (*)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ))0, .ndo_bridge_setlink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_bridge_getlink = (int (*)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ))0, .ndo_bridge_dellink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_change_carrier = (int (*)(struct net_device *, bool ))0, .ndo_get_phys_port_id = (int (*)(struct net_device *, struct netdev_phys_item_id *))0, .ndo_get_phys_port_name = (int (*)(struct net_device *, char *, size_t ))0, .ndo_add_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_del_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_dfwd_add_station = (void *(*)(struct net_device *, struct net_device *))0, .ndo_dfwd_del_station = (void (*)(struct net_device *, void *))0, .ndo_dfwd_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *, void *))0, .ndo_get_lock_subclass = (int (*)(struct net_device *))0, .ndo_features_check = (netdev_features_t (*)(struct sk_buff *, struct net_device *, netdev_features_t ))0, .ndo_set_tx_maxrate = (int (*)(struct net_device *, int , u32 ))0, .ndo_get_iflink = (int (*)(struct net_device const *))0};

#line 5587  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static struct net_device_ops const nv_netdev_ops_optimized = {.ndo_init = (int (*)(struct net_device *))0, .ndo_uninit = (void (*)(struct net_device *))0, .ndo_open = & nv_open, .ndo_stop = & nv_close, .ndo_start_xmit = & nv_start_xmit_optimized, .ndo_select_queue = (u16 (*)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)))0, .ndo_change_rx_flags = (void (*)(struct net_device *, int ))0, .ndo_set_rx_mode = & nv_set_multicast, .ndo_set_mac_address = & nv_set_mac_address, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = (int (*)(struct net_device *, struct ifreq *, int ))0, .ndo_set_config = (int (*)(struct net_device *, struct ifmap *))0, .ndo_change_mtu = & nv_change_mtu, .ndo_neigh_setup = (int (*)(struct net_device *, struct neigh_parms *))0, .ndo_tx_timeout = & nv_tx_timeout, .ndo_get_stats64 = & nv_get_stats64, .ndo_get_stats = (struct net_device_stats *(*)(struct net_device *))0, .ndo_vlan_rx_add_vid = (int (*)(struct net_device *, __be16 , u16 ))0, .ndo_vlan_rx_kill_vid = (int (*)(struct net_device *, __be16 , u16 ))0, .ndo_poll_controller = & nv_poll_controller, .ndo_netpoll_setup = (int (*)(struct net_device *, struct netpoll_info *))0, .ndo_netpoll_cleanup = (void (*)(struct net_device *))0, .ndo_busy_poll = (int (*)(struct napi_struct *))0, .ndo_set_vf_mac = (int (*)(struct net_device *, int , u8 *))0, .ndo_set_vf_vlan = (int (*)(struct net_device *, int , u16 , u8 ))0, .ndo_set_vf_rate = (int (*)(struct net_device *, int , int , int ))0, .ndo_set_vf_spoofchk = (int (*)(struct net_device *, int , bool ))0, .ndo_get_vf_config = (int (*)(struct net_device *, int , struct ifla_vf_info *))0, .ndo_set_vf_link_state = (int (*)(struct net_device *, int , int ))0, .ndo_get_vf_stats = (int (*)(struct net_device *, int , struct ifla_vf_stats *))0, .ndo_set_vf_port = (int (*)(struct net_device *, int , struct nlattr **))0, .ndo_get_vf_port = (int (*)(struct net_device *, int , struct sk_buff *))0, .ndo_set_vf_rss_query_en = (int (*)(struct net_device *, int , bool ))0, .ndo_setup_tc = (int (*)(struct net_device *, u8 ))0, .ndo_fcoe_enable = (int (*)(struct net_device *))0, .ndo_fcoe_disable = (int (*)(struct net_device *))0, .ndo_fcoe_ddp_setup = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_ddp_done = (int (*)(struct net_device *, u16 ))0, .ndo_fcoe_ddp_target = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_get_hbainfo = (int (*)(struct net_device *, struct netdev_fcoe_hbainfo *))0, .ndo_fcoe_get_wwn = (int (*)(struct net_device *, u64 *, int ))0, .ndo_rx_flow_steer = (int (*)(struct net_device *, struct sk_buff const *, u16 , u32 ))0, .ndo_add_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_del_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_fix_features = & nv_fix_features, .ndo_set_features = & nv_set_features, .ndo_neigh_construct = (int (*)(struct neighbour *))0, .ndo_neigh_destroy = (void (*)(struct neighbour *))0, .ndo_fdb_add = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ))0, .ndo_fdb_del = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ))0, .ndo_fdb_dump = (int (*)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ))0, .ndo_bridge_setlink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_bridge_getlink = (int (*)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ))0, .ndo_bridge_dellink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_change_carrier = (int (*)(struct net_device *, bool ))0, .ndo_get_phys_port_id = (int (*)(struct net_device *, struct netdev_phys_item_id *))0, .ndo_get_phys_port_name = (int (*)(struct net_device *, char *, size_t ))0, .ndo_add_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_del_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_dfwd_add_station = (void *(*)(struct net_device *, struct net_device *))0, .ndo_dfwd_del_station = (void (*)(struct net_device *, void *))0, .ndo_dfwd_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *, void *))0, .ndo_get_lock_subclass = (int (*)(struct net_device *))0, .ndo_features_check = (netdev_features_t (*)(struct sk_buff *, struct net_device *, netdev_features_t ))0, .ndo_set_tx_maxrate = (int (*)(struct net_device *, int , u32 ))0, .ndo_get_iflink = (int (*)(struct net_device const *))0};

#line 5604  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_probe(struct pci_dev *pci_dev, struct pci_device_id const *id)
{
  int __retres;
  struct net_device *dev;
  struct fe_priv *np;
  unsigned long addr;
  u8 *base;
  int err;
  int i;
  u32 powerstate;
  u32 txreg;
  u32 phystate;
  int printed_version;
  int tmp;
  int tmp_7;
  bool tmp_6;
  int tmp_11;
  bool tmp_10;
  int tmp_13;
  bool tmp_12;
  char *tmp_22;
  char *tmp_23;
  char *tmp_24;
  char *tmp_25;
  char *tmp_26;
  char *tmp_27;
  char *tmp_28;
  char *tmp_29;
  char *tmp_30;
  char *tmp_31;
  char *tmp_32;
  u8 *tmp_33;
  
#line 5612 
  u32 phystate_orig = 0U;
  
#line 5613 
  int phyinitialized = 0;
  
#line 5616 
  tmp = printed_version;
  
#line 5616 
  printed_version += 1;
  
#line 5616 
  ;
  
#line 5616 
  if (tmp == 0) 
#line 5617 
                printk("\001",(char *)"0.64"); else ;
  
#line 5620 
  dev = ldv_alloc_etherdev_mqs_195(3176,1U,1U);
  
#line 5621 
  err = -12;
  
#line 5622 
  if (dev == (struct net_device *)0) 
#line 5623 
                                     goto out; else ;
  
#line 5625 
  np = (struct fe_priv *)netdev_priv((struct net_device const *)dev);
  
#line 5626 
  np->dev = dev;
  
#line 5627 
  np->pci_dev = pci_dev;
  
#line 5628 
  spinlock_check(& np->lock);
  {
    struct lock_class_key __key;
    
#line 5628 
    __raw_spin_lock_init(& np->lock.__anonCompField_spinlock_18.rlock,"&(&np->lock)->rlock",& __key);
  }
  
#line 5629 
  spinlock_check(& np->hwstats_lock);
  {
    struct lock_class_key __key_0;
    
#line 5629 
    __raw_spin_lock_init(& np->hwstats_lock.__anonCompField_spinlock_18.rlock,"&(&np->hwstats_lock)->rlock",& __key_0);
  }
  
#line 5630 
  dev->dev.parent = & pci_dev->dev;
  
#line 5631 
  u64_stats_init(& np->swstats_rx_syncp);
  
#line 5632 
  u64_stats_init(& np->swstats_tx_syncp);
  {
    struct lock_class_key __key_1;
    
#line 5634 
    init_timer_key(& np->oom_kick,0U,"(&np->oom_kick)",& __key_1);
  }
  
#line 5635 
  np->oom_kick.data = (unsigned long)dev;
  
#line 5636 
  np->oom_kick.function = & nv_do_rx_refill;
  {
    struct lock_class_key __key_2;
    
#line 5637 
    init_timer_key(& np->nic_poll,0U,"(&np->nic_poll)",& __key_2);
  }
  
#line 5638 
  np->nic_poll.data = (unsigned long)dev;
  
#line 5639 
  np->nic_poll.function = & nv_do_nic_poll;
  {
    struct lock_class_key __key_3;
    
#line 5640 
    init_timer_key(& np->stats_poll,1048576U,"(&np->stats_poll)",& __key_3);
  }
  
#line 5641 
  np->stats_poll.data = (unsigned long)dev;
  
#line 5642 
  np->stats_poll.function = & nv_do_stats_poll;
  
#line 5644 
  err = pci_enable_device(pci_dev);
  
#line 5645 
  if (err != 0) 
#line 5646 
                goto out_free; else ;
  
#line 5648 
  pci_set_master(pci_dev);
  
#line 5650 
  err = pci_request_regions(pci_dev,"forcedeth");
  
#line 5651 
  if (err < 0) 
#line 5652 
               goto out_disable; else ;
  
#line 5654 
  if ((id->driver_data & 3488UL) != 0UL) 
#line 5655 
                                         np->register_size = 1540U;
  else 
    
#line 5656 
    if ((id->driver_data & 512UL) != 0UL) 
#line 5657 
                                          np->register_size = 724U; else 
                                                                    
#line 5659 
                                                                    np->register_size = 624U;
  
#line 5661 
  err = -22;
  
#line 5662 
  addr = 0UL;
  
#line 5663 
  i = 0;
  
#line 5663 
  goto ldv_48715;
  ldv_48714: 
#line 5664 
  ;
  
#line 5664 
  if ((pci_dev->resource[i].flags & 512UL) != 0UL) {
    resource_size_t tmp_1;
    
#line 5664 
    if (pci_dev->resource[i].start != 0ULL || pci_dev->resource[i].end != pci_dev->resource[i].start) 
      
#line 5664 
      tmp_1 = (pci_dev->resource[i].end - pci_dev->resource[i].start) + 1ULL; else 
                                                                    
#line 5664 
                                                                    tmp_1 = 0ULL;
    
#line 5664 
    ;
    
#line 5664 
    if (tmp_1 >= (unsigned long long)np->register_size) {
      
#line 5666 
      addr = (unsigned long)pci_dev->resource[i].start;
      
#line 5667 
      goto ldv_48713;
    }
    else ;
  }
  else ;
  
#line 5663 
  i += 1;
  ldv_48715: 
#line 5664 
  ;
  
#line 5663 
  if (i <= 16) 
#line 5665 
               goto ldv_48714; else 
#line 5668 
                                    goto ldv_48713;
  ldv_48713: 
#line 5669 
  ;
  
#line 5670 
  if (i == 17) {
    
#line 5671 
    _dev_info((struct device const *)(& pci_dev->dev),"Couldn\'t find register window\n");
    
#line 5672 
    goto out_relreg;
  }
  else ;
  
#line 5676 
  np->driver_data = (unsigned int)id->driver_data;
  
#line 5678 
  np->device_id = id->device;
  
#line 5681 
  if ((id->driver_data & 8UL) != 0UL) {
    
#line 5683 
    np->desc_ver = 3U;
    
#line 5684 
    np->txrxctl_bits = 12591616U;
    
#line 5685 
    if (dma_64bit != 0) {
      int tmp_2;
      int tmp_3;
      
#line 5686 
      tmp_2 = pci_set_dma_mask(pci_dev,549755813887ULL);
      
#line 5686 
      if (tmp_2 != 0) 
#line 5687 
                      _dev_info((struct device const *)(& pci_dev->dev),"64-bit DMA failed, using 32-bit addressing\n"); else 
                                                                    
#line 5690 
                                                                    dev->features |= 32ULL;
      
#line 5691 
      tmp_3 = pci_set_consistent_dma_mask(pci_dev,549755813887ULL);
      
#line 5691 
      if (tmp_3 != 0) 
#line 5692 
                      _dev_info((struct device const *)(& pci_dev->dev),"64-bit DMA (consistent) failed, using 32-bit ring buffers\n"); else ;
    }
    else ;
  }
  else 
    
#line 5696 
    if ((id->driver_data & 4UL) != 0UL) {
      
#line 5698 
      np->desc_ver = 2U;
      
#line 5699 
      np->txrxctl_bits = 8448U;
    }
    else {
      
#line 5702 
      np->desc_ver = 1U;
      
#line 5703 
      np->txrxctl_bits = 0U;
    }
  
#line 5706 
  np->pkt_limit = 1500U;
  
#line 5707 
  if ((id->driver_data & 4UL) != 0UL) 
#line 5708 
                                      np->pkt_limit = 9100U; else ;
  
#line 5710 
  if ((id->driver_data & 16UL) != 0UL) {
    
#line 5711 
    np->txrxctl_bits |= 1024U;
    
#line 5712 
    dev->hw_features |= 17179934723ULL;
  }
  else ;
  
#line 5716 
  np->vlanctl_bits = 0U;
  
#line 5717 
  if ((id->driver_data & 32UL) != 0UL) {
    
#line 5718 
    np->vlanctl_bits = 8192U;
    
#line 5719 
    dev->hw_features |= 384ULL;
  }
  else ;
  
#line 5723 
  dev->features |= dev->hw_features;
  
#line 5726 
  dev->hw_features |= 68719476736ULL;
  
#line 5728 
  np->pause_flags = 81U;
  
#line 5729 
  if (((id->driver_data & 65536UL) != 0UL || (id->driver_data & 131072UL) != 0UL) || (id->driver_data & 262144UL) != 0UL) 
    
#line 5732 
    np->pause_flags |= 34U; else ;
  
#line 5735 
  err = -12;
  
#line 5736 
  np->base = ioremap((unsigned long long)addr,(unsigned long)np->register_size);
  
#line 5737 
  if (np->base == (void *)0) 
#line 5738 
                             goto out_relreg; else ;
  
#line 5740 
  np->rx_ring_size = 512;
  
#line 5741 
  np->tx_ring_size = 256;
  
#line 5743 
  tmp_6 = nv_optimized(np);
  
#line 5743 
  if (tmp_6) 
#line 5743 
             tmp_7 = 0; else 
#line 5743 
                             tmp_7 = 1;
  
#line 5743 
  if (tmp_7) {
    
#line 5744 
    np->rx_ring.orig = (struct ring_desc *)pci_alloc_consistent(pci_dev,(unsigned long)(np->rx_ring_size + np->tx_ring_size) * 8UL,& np->ring_addr);
    
#line 5747 
    if (np->rx_ring.orig == (struct ring_desc *)0) 
#line 5748 
                                                   goto out_unmap; else ;
    
#line 5749 
    np->tx_ring.orig = np->rx_ring.orig + np->rx_ring_size;
  }
  else {
    
#line 5751 
    np->rx_ring.ex = (struct ring_desc_ex *)pci_alloc_consistent(pci_dev,(unsigned long)(np->rx_ring_size + np->tx_ring_size) * 16UL,& np->ring_addr);
    
#line 5754 
    if (np->rx_ring.ex == (struct ring_desc_ex *)0) 
#line 5755 
                                                    goto out_unmap; else ;
    
#line 5756 
    np->tx_ring.ex = np->rx_ring.ex + np->rx_ring_size;
  }
  
#line 5758 
  np->rx_skb = (struct nv_skb_map *)kcalloc((unsigned long)np->rx_ring_size,40UL,208U);
  
#line 5759 
  np->tx_skb = (struct nv_skb_map *)kcalloc((unsigned long)np->tx_ring_size,40UL,208U);
  
#line 5760 
  if (np->rx_skb == (struct nv_skb_map *)0 || np->tx_skb == (struct nv_skb_map *)0) 
    
#line 5761 
    goto out_freering; else ;
  
#line 5763 
  tmp_10 = nv_optimized(np);
  
#line 5763 
  if (tmp_10) 
#line 5763 
              tmp_11 = 0; else 
#line 5763 
                               tmp_11 = 1;
  
#line 5763 
  if (tmp_11) 
#line 5764 
              dev->netdev_ops = & nv_netdev_ops; else 
#line 5766 
                                                      dev->netdev_ops = & nv_netdev_ops_optimized;
  
#line 5768 
  netif_napi_add(dev,& np->napi,& nv_napi_poll,64);
  
#line 5769 
  dev->ethtool_ops = & ops;
  
#line 5770 
  dev->watchdog_timeo = 1250;
  
#line 5772 
  pci_set_drvdata(pci_dev,(void *)dev);
  
#line 5775 
  base = get_hwbase(dev);
  
#line 5776 
  np->orig_mac[0] = readl((void const volatile *)(base + 168U));
  
#line 5777 
  np->orig_mac[1] = readl((void const volatile *)(base + 172U));
  
#line 5780 
  txreg = readl((void const volatile *)(base + 268U));
  
#line 5781 
  if ((id->driver_data & 16384UL) != 0UL) {
    
#line 5783 
    *(dev->dev_addr) = (unsigned char)np->orig_mac[0];
    
#line 5784 
    *(dev->dev_addr + 1U) = (unsigned char)(np->orig_mac[0] >> 8);
    
#line 5785 
    *(dev->dev_addr + 2U) = (unsigned char)(np->orig_mac[0] >> 16);
    
#line 5786 
    *(dev->dev_addr + 3U) = (unsigned char)(np->orig_mac[0] >> 24);
    
#line 5787 
    *(dev->dev_addr + 4U) = (unsigned char)np->orig_mac[1];
    
#line 5788 
    *(dev->dev_addr + 5U) = (unsigned char)(np->orig_mac[1] >> 8);
  }
  else 
    
#line 5789 
    if ((txreg & 32768U) != 0U) {
      
#line 5791 
      *(dev->dev_addr) = (unsigned char)np->orig_mac[0];
      
#line 5792 
      *(dev->dev_addr + 1U) = (unsigned char)(np->orig_mac[0] >> 8);
      
#line 5793 
      *(dev->dev_addr + 2U) = (unsigned char)(np->orig_mac[0] >> 16);
      
#line 5794 
      *(dev->dev_addr + 3U) = (unsigned char)(np->orig_mac[0] >> 24);
      
#line 5795 
      *(dev->dev_addr + 4U) = (unsigned char)np->orig_mac[1];
      
#line 5796 
      *(dev->dev_addr + 5U) = (unsigned char)(np->orig_mac[1] >> 8);
      
#line 5802 
      np->orig_mac[0] = (unsigned int)((((int)*(dev->dev_addr + 5U) + ((int)*(dev->dev_addr + 4U) << 8)) + ((int)*(dev->dev_addr + 3U) << 16)) + ((int)*(dev->dev_addr + 2U) << 24));
      
#line 5804 
      np->orig_mac[1] = (unsigned int)((int)*(dev->dev_addr + 1U) + ((int)*(dev->dev_addr) << 8));
    }
    else {
      
#line 5807 
      *(dev->dev_addr) = (unsigned char)(np->orig_mac[1] >> 8);
      
#line 5808 
      *(dev->dev_addr + 1U) = (unsigned char)np->orig_mac[1];
      
#line 5809 
      *(dev->dev_addr + 2U) = (unsigned char)(np->orig_mac[0] >> 24);
      
#line 5810 
      *(dev->dev_addr + 3U) = (unsigned char)(np->orig_mac[0] >> 16);
      
#line 5811 
      *(dev->dev_addr + 4U) = (unsigned char)(np->orig_mac[0] >> 8);
      
#line 5812 
      *(dev->dev_addr + 5U) = (unsigned char)np->orig_mac[0];
      
#line 5813 
      writel(txreg | 32768U,(void volatile *)(base + 268U));
      {
        
#line 5814 
        struct _ddebug descriptor = {.modname = "forcedeth", .function = "nv_probe", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c", .format = "%s: set workaround bit for reversed mac addr\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))5816U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 5814 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 5814 
                                                            __dynamic_dev_dbg(& descriptor,(struct device const *)(& pci_dev->dev),"%s: set workaround bit for reversed mac addr\n","nv_probe"); else ;
      }
    }
  
#line 5819 
  tmp_12 = is_valid_ether_addr((u8 const *)dev->dev_addr);
  
#line 5819 
  if (tmp_12) 
#line 5819 
              tmp_13 = 0; else 
#line 5819 
                               tmp_13 = 1;
  
#line 5819 
  if (tmp_13) {
    
#line 5824 
    dev_err((struct device const *)(& pci_dev->dev),"Invalid MAC address detected: %pM - Please complain to your hardware vendor.\n",dev->dev_addr);
    
#line 5827 
    eth_hw_addr_random(dev);
    
#line 5828 
    dev_err((struct device const *)(& pci_dev->dev),"Using random MAC address: %pM\n",dev->dev_addr);
  }
  else ;
  
#line 5833 
  nv_copy_mac_to_hw(dev);
  
#line 5836 
  writel(0U,(void volatile *)(base + 512U));
  
#line 5837 
  np->wolenabled = 0;
  
#line 5838 
  device_set_wakeup_enable(& pci_dev->dev,(_Bool)0);
  
#line 5840 
  if ((id->driver_data & 256UL) != 0UL) {
    
#line 5843 
    powerstate = readl((void const volatile *)(base + 1536U));
    
#line 5844 
    powerstate &= 4294963434U;
    
#line 5845 
    if ((id->driver_data & 8388608UL) != 0UL && (unsigned int)pci_dev->revision > 162U) 
      
#line 5847 
      powerstate |= 1U; else ;
    
#line 5848 
    writel(powerstate,(void volatile *)(base + 1536U));
  }
  else ;
  
#line 5851 
  if (np->desc_ver == 1U) 
#line 5852 
                          np->tx_flags = 2147483648U; else 
#line 5854 
                                                           np->tx_flags = 2147483648U;
  
#line 5856 
  np->msi_flags = 0U;
  
#line 5857 
  if ((id->driver_data & 64UL) != 0UL && msi != 0) 
#line 5858 
                                                   np->msi_flags |= 16U; else ;
  
#line 5860 
  if ((id->driver_data & 128UL) != 0UL && msix != 0) ; else ;
  
#line 5869 
  if (optimization_mode == 1) {
    
#line 5870 
    np->irqmask = 96U;
    
#line 5871 
    if ((np->msi_flags & 32U) != 0U) 
#line 5872 
                                     np->msi_flags |= 1U; else ;
  }
  else 
    
#line 5873 
    if (optimization_mode == 2 && (id->driver_data & 1UL) == 0UL) {
      
#line 5876 
      np->irqmask = 223U;
      
#line 5878 
      np->msi_flags &= 4294967263U;
    }
    else {
      
#line 5880 
      optimization_mode = 0;
      
#line 5881 
      np->irqmask = 223U;
      
#line 5882 
      if ((np->msi_flags & 32U) != 0U) 
#line 5883 
                                       np->msi_flags |= 3U; else ;
    }
  
#line 5886 
  if ((id->driver_data & 1UL) != 0UL) 
#line 5887 
                                      np->irqmask |= 32U; else ;
  
#line 5888 
  if ((id->driver_data & 2UL) != 0UL) {
    
#line 5889 
    np->need_linktimer = 1;
    
#line 5890 
    np->link_timeout = jiffies + 750UL;
  }
  else 
#line 5892 
       np->need_linktimer = 0;
  
#line 5896 
  if ((id->driver_data & 524288UL) != 0UL) {
    
#line 5897 
    np->tx_limit = 1;
    
#line 5898 
    if ((id->driver_data & 1572864UL) == 1572864UL && (unsigned int)pci_dev->revision > 161U) 
      
#line 5900 
      np->tx_limit = 0; else ;
  }
  else ;
  
#line 5904 
  writel(0U,(void volatile *)(base + 388U));
  
#line 5905 
  phystate = readl((void const volatile *)(base + 392U));
  
#line 5906 
  if ((phystate & 1048576U) != 0U) {
    
#line 5907 
    phystate_orig = 1U;
    
#line 5908 
    phystate &= 4293918719U;
    
#line 5909 
    writel(phystate,(void volatile *)(base + 392U));
  }
  else ;
  
#line 5911 
  writel(15U,(void volatile *)(base + 384U));
  
#line 5913 
  if ((id->driver_data & 8192UL) != 0UL) {
    unsigned int tmp_16;
    
#line 5915 
    tmp_16 = readl((void const volatile *)(base + 132U));
    
#line 5915 
    if ((tmp_16 & 1073741824U) != 0U) {
      unsigned int tmp_17;
      
#line 5915 
      tmp_17 = readl((void const volatile *)(base + 132U));
      
#line 5915 
      if ((tmp_17 & 262144U) != 0U) {
        int tmp_18;
        
#line 5916 
        tmp_18 = nv_mgmt_acquire_sema(dev);
        
#line 5916 
        if (tmp_18 != 0) {
          int tmp_19;
          
#line 5917 
          tmp_19 = nv_mgmt_get_version(dev);
          
#line 5917 
          if (tmp_19 != 0) {
            
#line 5919 
            np->mac_in_use = 1U;
            
#line 5920 
            if (np->mgmt_version > 0) {
              unsigned int tmp_14;
              
#line 5921 
              tmp_14 = readl((void const volatile *)(base + 632U));
              
#line 5921 
              np->mac_in_use = tmp_14 & 131072U;
            }
            else ;
            
#line 5923 
            if (np->mac_in_use != 0U) {
              unsigned int tmp_15;
              
#line 5923 
              tmp_15 = readl((void const volatile *)(base + 132U));
              
#line 5923 
              if ((tmp_15 & 983040U) == 262144U) 
#line 5927 
                                                 phyinitialized = 1; else 
                                                                    
#line 5923 
                                                                    goto _LAND;
            }
            else _LAND: ;
          }
          else ;
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 5935 
  i = 1;
  
#line 5935 
  goto ldv_48727;
  ldv_48726: 
#line 5936 
  ;
  {
    int id1;
    int id2;
    
#line 5937 
    int phyaddr = i & 31;
    
#line 5939 
    ldv_spin_lock_irq_196(& np->lock);
    
#line 5940 
    id1 = mii_rw(dev,phyaddr,2,-1);
    
#line 5941 
    ldv_spin_unlock_irq_197(& np->lock);
    
#line 5942 
    if (id1 < 0 || id1 == 65535) 
#line 5943 
                                 goto ldv_48724; else ;
    
#line 5944 
    ldv_spin_lock_irq_198(& np->lock);
    
#line 5945 
    id2 = mii_rw(dev,phyaddr,3,-1);
    
#line 5946 
    ldv_spin_unlock_irq_199(& np->lock);
    
#line 5947 
    if (id2 < 0 || id2 == 65535) 
#line 5948 
                                 goto ldv_48724; else ;
    
#line 5950 
    np->phy_model = (unsigned int)id2 & 1008U;
    
#line 5951 
    id1 = (id1 << 6) & 65535;
    
#line 5952 
    id2 = (id2 >> 10) & 63;
    
#line 5953 
    np->phyaddr = phyaddr;
    
#line 5954 
    np->phy_oui = (unsigned int)(id1 | id2);
    
#line 5957 
    if (np->phy_oui == 32U) 
#line 5958 
                            np->phy_oui = 1842U; else ;
    
#line 5960 
    if (np->phy_oui == 1842U && np->phy_model == 272U) {
      int tmp_20;
      
#line 5961 
      tmp_20 = mii_rw(dev,phyaddr,23,-1);
      
#line 5961 
      np->phy_rev = (unsigned int)tmp_20 & 1U;
    }
    else ;
    
#line 5963 
    goto ldv_48725;
  }
  ldv_48724: 
#line 5965 
  ;
  
#line 5935 
  i += 1;
  ldv_48727: 
#line 5936 
  ;
  
#line 5935 
  if (i <= 32) 
#line 5937 
               goto ldv_48726; else 
#line 5940 
                                    goto ldv_48725;
  ldv_48725: 
#line 5941 
  ;
  
#line 5965 
  if (i == 33) {
    
#line 5966 
    _dev_info((struct device const *)(& pci_dev->dev),"open: Could not find a valid PHY\n");
    
#line 5967 
    goto out_error;
  }
  else ;
  
#line 5970 
  if (phyinitialized == 0) 
#line 5972 
                           phy_init(dev);
  else {
    int tmp_21;
    
#line 5975 
    tmp_21 = mii_rw(dev,np->phyaddr,1,-1);
    
#line 5975 
    u32 mii_status = (unsigned int)tmp_21;
    
#line 5976 
    if ((mii_status & 256U) != 0U) 
#line 5977 
                                   np->gigabit = (unsigned short)256U; else ;
  }
  
#line 5981 
  np->linkspeed = 66536U;
  
#line 5982 
  np->duplex = 0;
  
#line 5983 
  np->autoneg = 1;
  
#line 5985 
  err = ldv_register_netdev_200(dev);
  
#line 5986 
  if (err != 0) {
    
#line 5987 
    _dev_info((struct device const *)(& pci_dev->dev),"unable to register netdev: %d\n",err);
    
#line 5988 
    goto out_error;
  }
  else ;
  
#line 5991 
  netif_carrier_off(dev);
  
#line 5997 
  nv_update_pause(dev,0U);
  
#line 5998 
  nv_start_tx(dev);
  
#line 5999 
  nv_stop_tx(dev);
  
#line 6001 
  if ((id->driver_data & 32UL) != 0UL) 
#line 6002 
                                       nv_vlan_mode(dev,dev->features); else ;
  
#line 6004 
  _dev_info((struct device const *)(& pci_dev->dev),"ifname %s, PHY OUI 0x%x @ %d, addr %pM\n",(char *)(& dev->name),np->phy_oui,np->phyaddr,dev->dev_addr);
  
#line 6007 
  ;
  
#line 6007 
  if ((np->msi_flags & 32U) != 0U) 
#line 6007 
                                   tmp_22 = (char *)"msi-x "; else 
#line 6007 
                                                                   tmp_22 = (char *)"";
  
#line 6007 
  if ((np->msi_flags & 16U) != 0U) 
#line 6007 
                                   tmp_23 = (char *)"msi "; else 
#line 6007 
                                                                 tmp_23 = (char *)"";
  
#line 6007 
  if (np->need_linktimer != 0) 
#line 6007 
                               tmp_24 = (char *)"lnktim "; else 
#line 6007 
                                                                tmp_24 = (char *)"";
  
#line 6007 
  if ((unsigned int)np->gigabit == 256U) 
#line 6007 
                                         tmp_25 = (char *)"gbit "; else 
                                                                    
#line 6007 
                                                                    tmp_25 = (char *)"";
  
#line 6007 
  if ((id->driver_data & 1UL) != 0UL) 
#line 6007 
                                      tmp_26 = (char *)"timirq "; else 
                                                                    
#line 6007 
                                                                    tmp_26 = (char *)"";
  
#line 6007 
  if ((id->driver_data & 8192UL) != 0UL) 
#line 6007 
                                         tmp_27 = (char *)"mgmt "; else 
                                                                    
#line 6007 
                                                                    tmp_27 = (char *)"";
  
#line 6007 
  if ((id->driver_data & 256UL) != 0UL) 
#line 6007 
                                        tmp_28 = (char *)"pwrctl "; else 
                                                                    
#line 6007 
                                                                    tmp_28 = (char *)"";
  
#line 6007 
  if ((dev->features & 68719476736ULL) != 0ULL) 
#line 6007 
                                                tmp_29 = (char *)"loopback "; else 
                                                                    
#line 6007 
                                                                    tmp_29 = (char *)"";
  
#line 6007 
  if ((dev->features & 384ULL) != 0ULL) 
#line 6007 
                                        tmp_30 = (char *)"vlan "; else 
                                                                    
#line 6007 
                                                                    tmp_30 = (char *)"";
  
#line 6007 
  if ((dev->features & 3ULL) != 0ULL) 
#line 6007 
                                      tmp_31 = (char *)"csum "; else 
                                                                  
#line 6007 
                                                                  tmp_31 = (char *)"";
  
#line 6007 
  if ((dev->features & 32ULL) != 0ULL) 
#line 6007 
                                       tmp_32 = (char *)"highdma "; else 
                                                                    
#line 6007 
                                                                    tmp_32 = (char *)"";
  
#line 6007 
  ;
  
#line 6007 
  _dev_info((struct device const *)(& pci_dev->dev),"%s%s%s%s%s%s%s%s%s%s%sdesc-v%u\n",tmp_32,tmp_31,tmp_30,tmp_29,tmp_28,tmp_27,tmp_26,tmp_25,tmp_24,tmp_23,tmp_22,np->desc_ver);
  
#line 6025 
  __retres = 0;
  
#line 6025 
  goto return_label;
  out_error: 
#line 6027 
  ;
  
#line 6028 
  if (phystate_orig != 0U) 
#line 6029 
                           writel(phystate | 1048576U,(void volatile *)(base + 392U)); else ;
  out_freering: 
#line 6030 
  ;
  
#line 6031 
  free_rings(dev);
  out_unmap: 
#line 6032 
  ;
  
#line 6033 
  tmp_33 = get_hwbase(dev);
  
#line 6033 
  iounmap((void volatile *)tmp_33);
  out_relreg: 
#line 6034 
  ;
  
#line 6035 
  pci_release_regions(pci_dev);
  out_disable: 
#line 6036 
  ;
  
#line 6037 
  pci_disable_device(pci_dev);
  out_free: 
#line 6038 
  ;
  
#line 6039 
  ldv_free_netdev_201(dev);
  out: 
#line 6040 
  ;
  
#line 6041 
  __retres = err;
  return_label: 
#line 6041 
                return __retres;
}


#line 6044  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_restore_phy(struct net_device *dev)
{
  u16 phy_reserved;
  u16 mii_control;
  
#line 6046 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 6049 
  if ((np->phy_oui == 1842U && np->phy_model == 512U) && phy_cross == 0) {
    int tmp_0;
    int tmp_1;
    
#line 6052 
    mii_rw(dev,np->phyaddr,31,1);
    
#line 6053 
    tmp_0 = mii_rw(dev,np->phyaddr,25,-1);
    
#line 6053 
    phy_reserved = (unsigned short)tmp_0;
    
#line 6054 
    phy_reserved = (unsigned short)((unsigned int)phy_reserved & 65532U);
    
#line 6055 
    phy_reserved = (unsigned short)((unsigned int)phy_reserved | 3U);
    
#line 6056 
    mii_rw(dev,np->phyaddr,25,(int)phy_reserved);
    
#line 6057 
    mii_rw(dev,np->phyaddr,31,0);
    
#line 6060 
    tmp_1 = mii_rw(dev,np->phyaddr,0,-1);
    
#line 6060 
    mii_control = (unsigned short)tmp_1;
    
#line 6061 
    mii_control = (unsigned short)((unsigned int)mii_control | 4608U);
    
#line 6062 
    mii_rw(dev,np->phyaddr,0,(int)mii_control);
  }
  else ;
  
#line 6064 
  return;
}


#line 6066  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_restore_mac_addr(struct pci_dev *pci_dev)
{
  unsigned int tmp_2;
  
#line 6068 
  struct net_device *dev = pci_get_drvdata(pci_dev);
  
#line 6069 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 6070 
  u8 *base = get_hwbase(dev);
  
#line 6075 
  writel(np->orig_mac[0],(void volatile *)(base + 168U));
  
#line 6076 
  writel(np->orig_mac[1],(void volatile *)(base + 172U));
  
#line 6077 
  ;
  
#line 6077 
  tmp_2 = readl((void const volatile *)(base + 268U));
  
#line 6077 
  writel(tmp_2 & 4294934527U,(void volatile *)(base + 268U));
  
#line 6079 
  return;
}


#line 6081  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_remove(struct pci_dev *pci_dev)
{
  u8 *tmp_0;
  
#line 6083 
  struct net_device *dev = pci_get_drvdata(pci_dev);
  
#line 6085 
  ldv_unregister_netdev_202(dev);
  
#line 6087 
  nv_restore_mac_addr(pci_dev);
  
#line 6090 
  nv_restore_phy(dev);
  
#line 6092 
  nv_mgmt_release_sema(dev);
  
#line 6095 
  free_rings(dev);
  
#line 6096 
  tmp_0 = get_hwbase(dev);
  
#line 6096 
  iounmap((void volatile *)tmp_0);
  
#line 6097 
  pci_release_regions(pci_dev);
  
#line 6098 
  pci_disable_device(pci_dev);
  
#line 6099 
  ldv_free_netdev_203(dev);
  
#line 6100 
  return;
}


#line 6103  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_suspend(struct device *device)
{
  int __retres;
  struct pci_dev *tmp;
  int i;
  bool tmp_3;
  {
    
#line 6105 
    struct device const *__mptr = (struct device const *)device;
    
#line 6105 
    tmp = (struct pci_dev *)__mptr + 18446744073709551464U;
  }
  
#line 6105 
  struct pci_dev *pdev = tmp;
  
#line 6106 
  struct net_device *dev = pci_get_drvdata(pdev);
  
#line 6107 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 6108 
  u8 *base = get_hwbase(dev);
  
#line 6111 
  tmp_3 = netif_running((struct net_device const *)dev);
  
#line 6111 
  if ((int)tmp_3 != 0) 
#line 6113 
                       nv_close(dev); else ;
  
#line 6115 
  netif_device_detach(dev);
  
#line 6118 
  i = 0;
  
#line 6118 
  goto ldv_48757;
  ldv_48756: 
#line 6119 
  ;
  
#line 6119 
  np->saved_config_space[i] = readl((void const volatile *)(base + (unsigned long)i * 4UL));
  
#line 6118 
  i += 1;
  ldv_48757: 
#line 6119 
  ;
  
#line 6118 
  if ((unsigned long)i <= (unsigned long)(np->register_size / 4U)) 
#line 6120 
                                                                   goto ldv_48756; else 
                                                                    
#line 6123 
                                                                    goto ldv_48758;
  ldv_48758: 
#line 6124 
  ;
  
#line 6121 
  __retres = 0;
  
#line 6121 
  return __retres;
}


#line 6124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int nv_resume(struct device *device)
{
  struct pci_dev *tmp;
  int i;
  bool tmp_3;
  {
    
#line 6126 
    struct device const *__mptr = (struct device const *)device;
    
#line 6126 
    tmp = (struct pci_dev *)__mptr + 18446744073709551464U;
  }
  
#line 6126 
  struct pci_dev *pdev = tmp;
  
#line 6127 
  struct net_device *dev = pci_get_drvdata(pdev);
  
#line 6128 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 6129 
  u8 *base = get_hwbase(dev);
  
#line 6130 
  int rc = 0;
  
#line 6133 
  i = 0;
  
#line 6133 
  goto ldv_48771;
  ldv_48770: 
#line 6134 
  ;
  
#line 6134 
  writel(np->saved_config_space[i],(void volatile *)(base + (unsigned long)i * 4UL));
  
#line 6133 
  i += 1;
  ldv_48771: 
#line 6134 
  ;
  
#line 6133 
  if ((unsigned long)i <= (unsigned long)(np->register_size / 4U)) 
#line 6135 
                                                                   goto ldv_48770; else 
                                                                    
#line 6138 
                                                                    goto ldv_48772;
  ldv_48772: 
#line 6139 
  ;
  
#line 6136 
  if ((np->driver_data & 16777216U) != 0U) 
#line 6137 
                                           pci_write_config_dword((struct pci_dev const *)pdev,104,4294967295U); else ;
  
#line 6140 
  phy_init(dev);
  
#line 6142 
  netif_device_attach(dev);
  
#line 6143 
  tmp_3 = netif_running((struct net_device const *)dev);
  
#line 6143 
  if ((int)tmp_3 != 0) {
    
#line 6144 
    rc = nv_open(dev);
    
#line 6145 
    nv_set_multicast(dev);
  }
  else ;
  
#line 6147 
  return rc;
}


#line 6150  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static struct dev_pm_ops const nv_pm_ops = {.prepare = (int (*)(struct device *))0, .complete = (void (*)(struct device *))0, .suspend = & nv_suspend, .resume = & nv_resume, .freeze = & nv_suspend, .thaw = & nv_resume, .poweroff = & nv_suspend, .restore = & nv_resume, .suspend_late = (int (*)(struct device *))0, .resume_early = (int (*)(struct device *))0, .freeze_late = (int (*)(struct device *))0, .thaw_early = (int (*)(struct device *))0, .poweroff_late = (int (*)(struct device *))0, .restore_early = (int (*)(struct device *))0, .suspend_noirq = (int (*)(struct device *))0, .resume_noirq = (int (*)(struct device *))0, .freeze_noirq = (int (*)(struct device *))0, .thaw_noirq = (int (*)(struct device *))0, .poweroff_noirq = (int (*)(struct device *))0, .restore_noirq = (int (*)(struct device *))0, .runtime_suspend = (int (*)(struct device *))0, .runtime_resume = (int (*)(struct device *))0, .runtime_idle = (int (*)(struct device *))0};

#line 6158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void nv_shutdown(struct pci_dev *pdev)
{
  bool tmp_1;
  
#line 6160 
  struct net_device *dev = pci_get_drvdata(pdev);
  
#line 6161 
  struct fe_priv *np = netdev_priv((struct net_device const *)dev);
  
#line 6163 
  tmp_1 = netif_running((struct net_device const *)dev);
  
#line 6163 
  if ((int)tmp_1 != 0) 
#line 6164 
                       nv_close(dev); else ;
  
#line 6171 
  if (system_state != (unsigned int)SYSTEM_POWER_OFF) 
#line 6172 
                                                      nv_restore_mac_addr(pdev); else ;
  
#line 6174 
  pci_disable_device(pdev);
  
#line 6179 
  if (system_state == (unsigned int)SYSTEM_POWER_OFF) {
    
#line 6180 
    pci_wake_from_d3(pdev,(_Bool)(np->wolenabled != 0));
    
#line 6181 
    pci_set_power_state(pdev,3);
  }
  else ;
  
#line 6183 
  return;
}


#line 6188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static struct pci_device_id const pci_tbl[41U] = {{.vendor = 4318U, .device = 451U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 3UL}, {.vendor = 4318U, .device = 102U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 3UL}, {.vendor = 4318U, .device = 214U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 3UL}, {.vendor = 4318U, .device = 134U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 23UL}, {.vendor = 4318U, .device = 140U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 23UL}, {.vendor = 4318U, .device = 230U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 23UL}, {.vendor = 4318U, .device = 223U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 23UL}, {.vendor = 4318U, .device = 86U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 524830UL}, {.vendor = 4318U, .device = 87U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 524830UL}, {.vendor = 4318U, .device = 55U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 524830UL}, {.vendor = 4318U, .device = 56U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 524830UL}, {.vendor = 4318U, .device = 616U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 8389386UL}, {.vendor = 4318U, .device = 617U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 8389386UL}, {.vendor = 4318U, .device = 882U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 17381374UL}, {.vendor = 4318U, .device = 883U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 17381374UL}, {.vendor = 4318U, .device = 997U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 16873290UL}, {.vendor = 4318U, .device = 998U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 16873290UL}, {.vendor = 4318U, .device = 1006U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 16873290UL}, {.vendor = 4318U, .device = 1007U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 16873290UL}, {.vendor = 4318U, .device = 1104U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 19494734UL}, {.vendor = 4318U, .device = 1105U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 19494734UL}, {.vendor = 4318U, .device = 1106U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 19494734UL}, {.vendor = 4318U, .device = 1107U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 19494734UL}, {.vendor = 4318U, .device = 1356U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 18970442UL}, {.vendor = 4318U, .device = 1357U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 18970442UL}, {.vendor = 4318U, .device = 1358U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 18970442UL}, {.vendor = 4318U, .device = 1359U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 18970442UL}, {.vendor = 4318U, .device = 2012U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 19003210UL}, {.vendor = 4318U, .device = 2013U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 19003210UL}, {.vendor = 4318U, .device = 2014U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 19003210UL}, {.vendor = 4318U, .device = 2015U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 19003210UL}, {.vendor = 4318U, .device = 1888U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 24837978UL}, {.vendor = 4318U, .device = 1889U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 24837978UL}, {.vendor = 4318U, .device = 1890U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 24837978UL}, {.vendor = 4318U, .device = 1891U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 24837978UL}, {.vendor = 4318U, .device = 2736U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 24960862UL}, {.vendor = 4318U, .device = 2737U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 24960862UL}, {.vendor = 4318U, .device = 2738U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 24960862UL}, {.vendor = 4318U, .device = 2739U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 24960862UL}, {.vendor = 4318U, .device = 3453U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 6610782UL}, {.vendor = 0U, .device = 0U, .subvendor = 0U, .subdevice = 0U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}};

#line 6352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static struct pci_driver forcedeth_pci_driver = {.node = {.next = (struct list_head *)0, .prev = (struct list_head *)0}, .name = "forcedeth", .id_table = (struct pci_device_id const *)(& pci_tbl), .probe = & nv_probe, .remove = & nv_remove, .suspend = (int (*)(struct pci_dev *, pm_message_t ))0, .suspend_late = (int (*)(struct pci_dev *, pm_message_t ))0, .resume_early = (int (*)(struct pci_dev *))0, .resume = (int (*)(struct pci_dev *))0, .shutdown = & nv_shutdown, .sriov_configure = (int (*)(struct pci_dev *, int ))0, .err_handler = (struct pci_error_handlers const *)0, .driver = {.name = (char const *)0, .bus = (struct bus_type *)0, .owner = (struct module *)0, .mod_name = (char const *)0, .suppress_bind_attrs = (_Bool)0, .probe_type = 0, .of_match_table = (struct of_device_id const *)0, .acpi_match_table = (struct acpi_device_id const *)0, .probe = (int (*)(struct device *))0, .remove = (int (*)(struct device *))0, .shutdown = (void (*)(struct device *))0, .suspend = (int (*)(struct device *, pm_message_t ))0, .resume = (int (*)(struct device *))0, .groups = (struct attribute_group const **)0, .pm = & nv_pm_ops, .p = (struct driver_private *)0}, .dynids = {.lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 0U, .owner_cpu = 0U, .owner = (void *)0, .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char const *)0, .cpu = 0, .ip = 0UL}}}}, .list = {.next = (struct list_head *)0, .prev = (struct list_head *)0}}};

#line 6381  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static int forcedeth_pci_driver_init(void)
{
  int tmp;
  
#line 6381 
  tmp = ldv___pci_register_driver_204(& forcedeth_pci_driver,& __this_module,"forcedeth");
  
#line 6381 
  return tmp;
}


#line 6381  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
static void forcedeth_pci_driver_exit(void)
{
  
#line 6381 
  ldv_pci_unregister_driver_205(& forcedeth_pci_driver);
  
#line 6382 
  return;
}


#line 6385  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/nvidia/forcedeth.c"
struct pci_device_id const __mod_pci__pci_tbl_device_table[41U];

#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int (*ldv_emg_alias_eth_validate_addr_8)(struct net_device *) = & eth_validate_addr;

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
struct pci_driver *ldv_emg_alias_forcedeth_pci_driver_2 = & forcedeth_pci_driver;

#line 58  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
unsigned int (*ldv_emg_alias_ethtool_op_get_link_9)(struct net_device *) = & ethtool_op_get_link;

#line 59  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int (*ldv_emg_alias_ethtool_op_get_ts_info_24)(struct net_device *, struct ethtool_ts_info *) = & ethtool_op_get_ts_info;

#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
struct dev_pm_ops *ldv_emg_alias_nv_pm_ops_3 = (struct dev_pm_ops *)(& nv_pm_ops);

#line 63 
void ldv_emg_unregister_netdev(struct net_device *arg0);


#line 64 
void ldv_emg_free_irq(unsigned int arg0, void *arg1);


#line 65 
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0);


#line 66 
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);


#line 67 
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1);


#line 68 
int ldv_emg_del_timer_sync(struct timer_list *arg0);


#line 69 
void ldv_emg_free_netdev(struct net_device *arg0);


#line 70 
int ldv_emg_register_netdev(struct net_device *arg0);


#line 71 
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);


#line 72 
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_wrapper_nv_suspend_2(struct device *arg0)
{
  int tmp;
  
#line 77 
  tmp = nv_suspend(arg0);
  
#line 77 
  return tmp;
}


#line 81  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_wrapper_nv_set_wol_20(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  int tmp;
  
#line 82 
  tmp = nv_set_wol(arg0,arg1);
  
#line 82 
  return tmp;
}


#line 86  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
void ldv_emg_wrapper_nv_tx_timeout_22(struct net_device *arg0)
{
  
#line 87 
  nv_tx_timeout(arg0);
  
#line 88 
  return;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
void ldv_emg_wrapper_nv_get_ringparam_25(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  
#line 92 
  nv_get_ringparam(arg0,arg1);
  
#line 93 
  return;
}


#line 96  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_wrapper_nv_set_ringparam_13(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  int tmp;
  
#line 97 
  tmp = nv_set_ringparam(arg0,arg1);
  
#line 97 
  return tmp;
}


#line 101  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
void ldv_emg_wrapper_nv_set_multicast_27(struct net_device *arg0)
{
  
#line 102 
  nv_set_multicast(arg0);
  
#line 103 
  return;
}


#line 106  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
enum irqreturn ldv_emg_wrapper_nv_nic_irq_tx_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 107 
  tmp = nv_nic_irq_tx(arg0,arg1);
  
#line 107 
  return tmp;
}


#line 111  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_forcedeth_pci_driver_init(void)
{
  int tmp;
  
#line 112 
  tmp = forcedeth_pci_driver_init();
  
#line 112 
  return tmp;
}


#line 115  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_wrapper_nv_get_regs_len_26(struct net_device *arg0)
{
  int tmp;
  
#line 116 
  tmp = nv_get_regs_len(arg0);
  
#line 116 
  return tmp;
}


#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_wrapper_nv_open_2(struct net_device *arg0)
{
  int tmp;
  
#line 121 
  tmp = nv_open(arg0);
  
#line 121 
  return tmp;
}


#line 125  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_wrapper_nv_set_pauseparam_29(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  int tmp;
  
#line 126 
  tmp = nv_set_pauseparam(arg0,arg1);
  
#line 126 
  return tmp;
}


#line 130  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
void ldv_emg_wrapper_nv_get_drvinfo_11(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  
#line 131 
  nv_get_drvinfo(arg0,arg1);
  
#line 132 
  return;
}


#line 135  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
void ldv_emg_wrapper_nv_shutdown_2(struct pci_dev *arg0)
{
  
#line 136 
  nv_shutdown(arg0);
  
#line 137 
  return;
}


#line 140  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_wrapper_nv_get_sset_count_17(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 141 
  tmp = nv_get_sset_count(arg0,arg1);
  
#line 141 
  return tmp;
}


#line 145  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
void ldv_emg_wrapper_nv_get_strings_4(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  
#line 146 
  nv_get_strings(arg0,arg1,arg2);
  
#line 147 
  return;
}


#line 150  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
void ldv_emg_wrapper_nv_remove_4(struct pci_dev *arg0)
{
  
#line 151 
  nv_remove(arg0);
  
#line 152 
  return;
}


#line 155  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_wrapper_nv_change_mtu_6(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 156 
  tmp = nv_change_mtu(arg0,arg1);
  
#line 156 
  return tmp;
}


#line 160  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
void ldv_emg_wrapper_nv_self_test_18(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  
#line 161 
  nv_self_test(arg0,arg1,arg2);
  
#line 162 
  return;
}


#line 165  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
void ldv_emg_wrapper_nv_get_pauseparam_2(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  
#line 166 
  nv_get_pauseparam(arg0,arg1);
  
#line 167 
  return;
}


#line 170  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
void ldv_emg_wrapper_nv_get_regs_21(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  
#line 171 
  nv_get_regs(arg0,arg1,arg2);
  
#line 172 
  return;
}


#line 175  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_wrapper_nv_set_features_10(struct net_device *arg0, unsigned long long arg1)
{
  int tmp;
  
#line 176 
  tmp = nv_set_features(arg0,arg1);
  
#line 176 
  return tmp;
}


#line 180  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
struct rtnl_link_stats64 *ldv_emg_wrapper_nv_get_stats64_5(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  struct rtnl_link_stats64 *tmp;
  
#line 181 
  tmp = nv_get_stats64(arg0,arg1);
  
#line 181 
  return tmp;
}


#line 185  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
void ldv_emg_forcedeth_pci_driver_exit(void)
{
  
#line 186 
  forcedeth_pci_driver_exit();
  
#line 187 
  return;
}


#line 189  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_wrapper_nv_probe_3(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  int tmp;
  
#line 190 
  tmp = nv_probe(arg0,(struct pci_device_id const *)arg1);
  
#line 190 
  return tmp;
}


#line 194  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_wrapper_nv_set_mac_address_15(struct net_device *arg0, void *arg1)
{
  int tmp;
  
#line 195 
  tmp = nv_set_mac_address(arg0,arg1);
  
#line 195 
  return tmp;
}


#line 199  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
enum netdev_tx ldv_emg_wrapper_nv_start_xmit_optimized_14(struct sk_buff *arg0, struct net_device *arg1)
{
  enum netdev_tx tmp;
  
#line 200 
  tmp = nv_start_xmit_optimized(arg0,arg1);
  
#line 200 
  return tmp;
}


#line 204  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_wrapper_nv_get_settings_16(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 205 
  tmp = nv_get_settings(arg0,arg1);
  
#line 205 
  return tmp;
}


#line 209  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_wrapper_nv_nway_reset_23(struct net_device *arg0)
{
  int tmp;
  
#line 210 
  tmp = nv_nway_reset(arg0);
  
#line 210 
  return tmp;
}


#line 214  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
void ldv_emg_wrapper_nv_poll_controller_28(struct net_device *arg0)
{
  
#line 215 
  nv_poll_controller(arg0);
  
#line 216 
  return;
}


#line 219  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
enum irqreturn ldv_emg_wrapper_nv_nic_irq_other_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 220 
  tmp = nv_nic_irq_other(arg0,arg1);
  
#line 220 
  return tmp;
}


#line 224  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
void ldv_emg_wrapper_nv_get_ethtool_stats_7(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  
#line 225 
  nv_get_ethtool_stats(arg0,arg1,arg2);
  
#line 226 
  return;
}


#line 229  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
enum irqreturn ldv_emg_wrapper_nv_nic_irq_rx_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 230 
  tmp = nv_nic_irq_rx(arg0,arg1);
  
#line 230 
  return tmp;
}


#line 234  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_wrapper_nv_set_settings_3(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 235 
  tmp = nv_set_settings(arg0,arg1);
  
#line 235 
  return tmp;
}


#line 239  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_wrapper_nv_close_2(struct net_device *arg0)
{
  int tmp;
  
#line 240 
  tmp = nv_close(arg0);
  
#line 240 
  return tmp;
}


#line 244  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
unsigned long long ldv_emg_wrapper_nv_fix_features_12(struct net_device *arg0, unsigned long long arg1)
{
  unsigned long long tmp;
  
#line 245 
  tmp = nv_fix_features(arg0,arg1);
  
#line 245 
  return tmp;
}


#line 249  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
void ldv_emg_wrapper_nv_get_wol_19(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  
#line 250 
  nv_get_wol(arg0,arg1);
  
#line 251 
  return;
}


#line 254  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
int ldv_emg_wrapper_nv_resume_4(struct device *arg0)
{
  int tmp;
  
#line 255 
  tmp = nv_resume(arg0);
  
#line 255 
  return tmp;
}


#line 663  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 666 
  tmp = ldv_kmalloc(size,flags);
  
#line 666 
  return tmp;
}


#line 677  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 680 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 680 
  return tmp;
}


#line 797  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_60(spinlock_t *lock)
{
  
#line 801 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  
#line 803 
  spin_lock(lock);
  
#line 804 
  return;
}


#line 840  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_63(spinlock_t *lock)
{
  
#line 844 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  
#line 846 
  spin_unlock(lock);
  
#line 847 
  return;
}


#line 860  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_65(spinlock_t *lock)
{
  
#line 864 
  ldv_spin_model_lock((char *)"tx_global_lock_of_net_device");
  
#line 866 
  spin_lock(lock);
  
#line 867 
  return;
}


#line 870  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_66(spinlock_t *lock)
{
  
#line 874 
  ldv_spin_model_unlock((char *)"tx_global_lock_of_net_device");
  
#line 876 
  spin_unlock(lock);
  
#line 877 
  return;
}


#line 880  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_67(spinlock_t *lock)
{
  
#line 884 
  ldv_spin_model_lock((char *)"addr_list_lock_of_net_device");
  
#line 886 
  spin_lock(lock);
  
#line 887 
  return;
}


#line 910  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_70(spinlock_t *lock)
{
  
#line 914 
  ldv_spin_model_unlock((char *)"addr_list_lock_of_net_device");
  
#line 916 
  spin_unlock(lock);
  
#line 917 
  return;
}


#line 930  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_bh_72(spinlock_t *lock)
{
  
#line 934 
  ldv_spin_model_lock((char *)"hwstats_lock_of_fe_priv");
  
#line 936 
  spin_lock_bh(lock);
  
#line 937 
  return;
}


#line 940  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_bh_73(spinlock_t *lock)
{
  
#line 944 
  ldv_spin_model_unlock((char *)"hwstats_lock_of_fe_priv");
  
#line 946 
  spin_unlock_bh(lock);
  
#line 947 
  return;
}


#line 950  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_74(spinlock_t *ldv_func_arg1)
{
  
#line 954 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 956 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 957 
  return;
}


#line 960  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_75(spinlock_t *lock, unsigned long flags)
{
  
#line 964 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 966 
  spin_unlock_irqrestore(lock,flags);
  
#line 967 
  return;
}


#line 970  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_76(spinlock_t *lock, unsigned long flags)
{
  
#line 974 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 976 
  spin_unlock_irqrestore(lock,flags);
  
#line 977 
  return;
}


#line 980  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_77(spinlock_t *ldv_func_arg1)
{
  
#line 984 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 986 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 987 
  return;
}


#line 990  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_78(spinlock_t *lock, unsigned long flags)
{
  
#line 994 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 996 
  spin_unlock_irqrestore(lock,flags);
  
#line 997 
  return;
}


#line 1000  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_79(spinlock_t *ldv_func_arg1)
{
  
#line 1004 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1006 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1007 
  return;
}


#line 1010  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_80(spinlock_t *lock, unsigned long flags)
{
  
#line 1014 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1016 
  spin_unlock_irqrestore(lock,flags);
  
#line 1017 
  return;
}


#line 1020  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_81(spinlock_t *lock, unsigned long flags)
{
  
#line 1024 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1026 
  spin_unlock_irqrestore(lock,flags);
  
#line 1027 
  return;
}


#line 1030  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_82(spinlock_t *ldv_func_arg1)
{
  
#line 1034 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1036 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1037 
  return;
}


#line 1040  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_83(spinlock_t *lock, unsigned long flags)
{
  
#line 1044 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1046 
  spin_unlock_irqrestore(lock,flags);
  
#line 1047 
  return;
}


#line 1050  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_irq_84(spinlock_t *lock)
{
  
#line 1054 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1056 
  spin_lock_irq(lock);
  
#line 1057 
  return;
}


#line 1060  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irq_85(spinlock_t *lock)
{
  
#line 1064 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1066 
  spin_unlock_irq(lock);
  
#line 1067 
  return;
}


#line 1070  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_86(spinlock_t *lock)
{
  
#line 1074 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1076 
  spin_lock(lock);
  
#line 1077 
  return;
}


#line 1080  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_mod_timer_87(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1084 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1084 
  return tmp;
}


#line 1088  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_88(spinlock_t *lock)
{
  
#line 1092 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1094 
  spin_unlock(lock);
  
#line 1095 
  return;
}


#line 1098  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_irq_89(spinlock_t *lock)
{
  
#line 1102 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1104 
  spin_lock_irq(lock);
  
#line 1105 
  return;
}


#line 1108  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irq_90(spinlock_t *lock)
{
  
#line 1112 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1114 
  spin_unlock_irq(lock);
  
#line 1115 
  return;
}


#line 1118  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_irq_91(spinlock_t *lock)
{
  
#line 1122 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1124 
  spin_lock_irq(lock);
  
#line 1125 
  return;
}


#line 1128  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irq_92(spinlock_t *lock)
{
  
#line 1132 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1134 
  spin_unlock_irq(lock);
  
#line 1135 
  return;
}


#line 1138  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_93(spinlock_t *ldv_func_arg1)
{
  
#line 1142 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1144 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1145 
  return;
}


#line 1148  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_94(spinlock_t *lock, unsigned long flags)
{
  
#line 1152 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1154 
  spin_unlock_irqrestore(lock,flags);
  
#line 1155 
  return;
}


#line 1158  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_95(spinlock_t *ldv_func_arg1)
{
  
#line 1162 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1164 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1165 
  return;
}


#line 1168  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_mod_timer_96(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1172 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1172 
  return tmp;
}


#line 1176  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_97(spinlock_t *lock, unsigned long flags)
{
  
#line 1180 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1182 
  spin_unlock_irqrestore(lock,flags);
  
#line 1183 
  return;
}


#line 1186  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_98(spinlock_t *ldv_func_arg1)
{
  
#line 1190 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1192 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1193 
  return;
}


#line 1196  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_99(spinlock_t *lock, unsigned long flags)
{
  
#line 1200 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1202 
  spin_unlock_irqrestore(lock,flags);
  
#line 1203 
  return;
}


#line 1206  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_100(spinlock_t *ldv_func_arg1)
{
  
#line 1210 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1212 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1213 
  return;
}


#line 1216  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_101(spinlock_t *lock, unsigned long flags)
{
  
#line 1220 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1222 
  spin_unlock_irqrestore(lock,flags);
  
#line 1223 
  return;
}


#line 1226  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_102(spinlock_t *ldv_func_arg1)
{
  
#line 1230 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1232 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1233 
  return;
}


#line 1236  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_mod_timer_103(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1240 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1240 
  return tmp;
}


#line 1244  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_104(spinlock_t *lock, unsigned long flags)
{
  
#line 1248 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1250 
  spin_unlock_irqrestore(lock,flags);
  
#line 1251 
  return;
}


#line 1254  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_105(spinlock_t *ldv_func_arg1)
{
  
#line 1258 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1260 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1261 
  return;
}


#line 1264  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_106(spinlock_t *lock, unsigned long flags)
{
  
#line 1268 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1270 
  spin_unlock_irqrestore(lock,flags);
  
#line 1271 
  return;
}


#line 1274  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_107(spinlock_t *ldv_func_arg1)
{
  
#line 1278 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1280 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1281 
  return;
}


#line 1284  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_108(spinlock_t *lock, unsigned long flags)
{
  
#line 1288 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1290 
  spin_unlock_irqrestore(lock,flags);
  
#line 1291 
  return;
}


#line 1294  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_109(spinlock_t *ldv_func_arg1)
{
  
#line 1298 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1300 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1301 
  return;
}


#line 1304  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_mod_timer_110(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1308 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1308 
  return tmp;
}


#line 1312  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_111(spinlock_t *lock, unsigned long flags)
{
  
#line 1316 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1318 
  spin_unlock_irqrestore(lock,flags);
  
#line 1319 
  return;
}


#line 1322  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_112(spinlock_t *ldv_func_arg1)
{
  
#line 1326 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1328 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1329 
  return;
}


#line 1332  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_mod_timer_113(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1336 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1336 
  return tmp;
}


#line 1340  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_114(spinlock_t *lock, unsigned long flags)
{
  
#line 1344 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1346 
  spin_unlock_irqrestore(lock,flags);
  
#line 1347 
  return;
}


#line 1350  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_115(spinlock_t *ldv_func_arg1)
{
  
#line 1354 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1356 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1357 
  return;
}


#line 1360  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_mod_timer_116(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1364 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1364 
  return tmp;
}


#line 1368  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_117(spinlock_t *lock, unsigned long flags)
{
  
#line 1372 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1374 
  spin_unlock_irqrestore(lock,flags);
  
#line 1375 
  return;
}


#line 1378  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_118(spinlock_t *ldv_func_arg1)
{
  
#line 1382 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1384 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1385 
  return;
}


#line 1388  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_119(spinlock_t *lock, unsigned long flags)
{
  
#line 1392 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1394 
  spin_unlock_irqrestore(lock,flags);
  
#line 1395 
  return;
}


#line 1398  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_120(spinlock_t *ldv_func_arg1)
{
  
#line 1402 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1404 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1405 
  return;
}


#line 1408  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_121(spinlock_t *lock, unsigned long flags)
{
  
#line 1412 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1414 
  spin_unlock_irqrestore(lock,flags);
  
#line 1415 
  return;
}


#line 1418  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_122(spinlock_t *ldv_func_arg1)
{
  
#line 1422 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1424 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1425 
  return;
}


#line 1428  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_123(spinlock_t *lock, unsigned long flags)
{
  
#line 1432 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1434 
  spin_unlock_irqrestore(lock,flags);
  
#line 1435 
  return;
}


#line 1438  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_124(spinlock_t *ldv_func_arg1)
{
  
#line 1442 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1444 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1445 
  return;
}


#line 1448  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_mod_timer_125(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1452 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1452 
  return tmp;
}


#line 1456  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_126(spinlock_t *lock, unsigned long flags)
{
  
#line 1460 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1462 
  spin_unlock_irqrestore(lock,flags);
  
#line 1463 
  return;
}


#line 1466  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_127(spinlock_t *ldv_func_arg1)
{
  
#line 1470 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1472 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1473 
  return;
}


#line 1476  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_mod_timer_128(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1480 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1480 
  return tmp;
}


#line 1484  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_129(spinlock_t *lock, unsigned long flags)
{
  
#line 1488 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1490 
  spin_unlock_irqrestore(lock,flags);
  
#line 1491 
  return;
}


#line 1494  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_130(spinlock_t *lock)
{
  
#line 1498 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1500 
  spin_lock(lock);
  
#line 1501 
  return;
}


#line 1504  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_131(spinlock_t *lock)
{
  
#line 1508 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1510 
  spin_unlock(lock);
  
#line 1511 
  return;
}


#line 1514  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_request_irq_132(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1518 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1518 
  return tmp;
}


#line 1522  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_request_irq_133(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1526 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1526 
  return tmp;
}


#line 1530  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_request_irq_134(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1534 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1534 
  return tmp;
}


#line 1538  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_request_irq_135(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1542 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1542 
  return tmp;
}


#line 1546  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_request_irq_136(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1550 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1550 
  return tmp;
}


#line 1554  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_request_irq_137(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1558 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1558 
  return tmp;
}


#line 1562  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_free_irq_138(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1566 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1567 
  return;
}


#line 1570  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_free_irq_139(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1574 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1575 
  return;
}


#line 1578  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_free_irq_140(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1582 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1583 
  return;
}


#line 1586  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_free_irq_141(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1590 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1591 
  return;
}


#line 1594  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_142(spinlock_t *lock)
{
  
#line 1598 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1600 
  spin_lock(lock);
  
#line 1601 
  return;
}


#line 1604  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_mod_timer_143(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1608 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1608 
  return tmp;
}


#line 1612  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_144(spinlock_t *lock)
{
  
#line 1616 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1618 
  spin_unlock(lock);
  
#line 1619 
  return;
}


#line 1622  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_spin_trylock_145(spinlock_t *lock)
{
  int __retres;
  
#line 1626 
  ldv_func_ret_type ldv_func_res = spin_trylock(lock);
  
#line 1628 
  int is_spin_held_by_another_thread = ldv_undef_int();
  
#line 1630 
  if (is_spin_held_by_another_thread != 0) {
    
#line 1633 
    __retres = 0;
    
#line 1633 
    goto return_label;
  }
  else {
    
#line 1636 
    ldv_spin_model_lock((char *)"hwstats_lock_of_fe_priv");
    
#line 1638 
    __retres = 1;
    
#line 1638 
    goto return_label;
  }
  
#line 1641 
  __retres = ldv_func_res;
  return_label: 
#line 1641 
                return __retres;
}


#line 1645  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_146(spinlock_t *lock)
{
  
#line 1649 
  ldv_spin_model_unlock((char *)"hwstats_lock_of_fe_priv");
  
#line 1651 
  spin_unlock(lock);
  
#line 1652 
  return;
}


#line 1655  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_mod_timer_147(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1659 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1659 
  return tmp;
}


#line 1663  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_irq_148(spinlock_t *lock)
{
  
#line 1667 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1669 
  spin_lock_irq(lock);
  
#line 1670 
  return;
}


#line 1673  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irq_149(spinlock_t *lock)
{
  
#line 1677 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1679 
  spin_unlock_irq(lock);
  
#line 1680 
  return;
}


#line 1683  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_irq_150(spinlock_t *lock)
{
  
#line 1687 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1689 
  spin_lock_irq(lock);
  
#line 1690 
  return;
}


#line 1693  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irq_151(spinlock_t *lock)
{
  
#line 1697 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1699 
  spin_unlock_irq(lock);
  
#line 1700 
  return;
}


#line 1703  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_irq_152(spinlock_t *lock)
{
  
#line 1707 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1709 
  spin_lock_irq(lock);
  
#line 1710 
  return;
}


#line 1713  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irq_153(spinlock_t *lock)
{
  
#line 1717 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1719 
  spin_unlock_irq(lock);
  
#line 1720 
  return;
}


#line 1723  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_154(spinlock_t *ldv_func_arg1)
{
  
#line 1727 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1729 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1730 
  return;
}


#line 1733  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_155(spinlock_t *lock, unsigned long flags)
{
  
#line 1737 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1739 
  spin_unlock_irqrestore(lock,flags);
  
#line 1740 
  return;
}


#line 1743  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_irq_156(spinlock_t *lock)
{
  
#line 1747 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1749 
  spin_lock_irq(lock);
  
#line 1750 
  return;
}


#line 1753  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irq_157(spinlock_t *lock)
{
  
#line 1757 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1759 
  spin_unlock_irq(lock);
  
#line 1760 
  return;
}


#line 1763  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_158(spinlock_t *lock)
{
  
#line 1767 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1769 
  spin_lock(lock);
  
#line 1770 
  return;
}


#line 1773  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_159(spinlock_t *lock)
{
  
#line 1777 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1779 
  spin_unlock(lock);
  
#line 1780 
  return;
}


#line 1783  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_160(spinlock_t *lock)
{
  
#line 1787 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1789 
  spin_lock(lock);
  
#line 1790 
  return;
}


#line 1793  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_mod_timer_161(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1797 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1797 
  return tmp;
}


#line 1801  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_162(spinlock_t *lock)
{
  
#line 1805 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1807 
  spin_unlock(lock);
  
#line 1808 
  return;
}


#line 1811  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_163(spinlock_t *lock)
{
  
#line 1815 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1817 
  spin_lock(lock);
  
#line 1818 
  return;
}


#line 1821  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_164(spinlock_t *lock)
{
  
#line 1825 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1827 
  spin_unlock(lock);
  
#line 1828 
  return;
}


#line 1831  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_165(spinlock_t *ldv_func_arg1)
{
  
#line 1835 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1837 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1838 
  return;
}


#line 1841  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_166(spinlock_t *lock, unsigned long flags)
{
  
#line 1845 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1847 
  spin_unlock_irqrestore(lock,flags);
  
#line 1848 
  return;
}


#line 1851  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_167(spinlock_t *lock, unsigned long flags)
{
  
#line 1855 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1857 
  spin_unlock_irqrestore(lock,flags);
  
#line 1858 
  return;
}


#line 1861  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_168(spinlock_t *lock, unsigned long flags)
{
  
#line 1865 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1867 
  spin_unlock_irqrestore(lock,flags);
  
#line 1868 
  return;
}


#line 1871  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_169(spinlock_t *lock, unsigned long flags)
{
  
#line 1875 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1877 
  spin_unlock_irqrestore(lock,flags);
  
#line 1878 
  return;
}


#line 1881  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_170(spinlock_t *lock, unsigned long flags)
{
  
#line 1885 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1887 
  spin_unlock_irqrestore(lock,flags);
  
#line 1888 
  return;
}


#line 1891  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv___ldv_spin_lock_171(spinlock_t *ldv_func_arg1)
{
  
#line 1895 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1897 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1898 
  return;
}


#line 1901  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irqrestore_172(spinlock_t *lock, unsigned long flags)
{
  
#line 1905 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1907 
  spin_unlock_irqrestore(lock,flags);
  
#line 1908 
  return;
}


#line 1911  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_irq_173(spinlock_t *lock)
{
  
#line 1915 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1917 
  spin_lock_irq(lock);
  
#line 1918 
  return;
}


#line 1921  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irq_174(spinlock_t *lock)
{
  
#line 1925 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1927 
  spin_unlock_irq(lock);
  
#line 1928 
  return;
}


#line 1931  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_irq_175(spinlock_t *lock)
{
  
#line 1935 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1937 
  spin_lock_irq(lock);
  
#line 1938 
  return;
}


#line 1941  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irq_176(spinlock_t *lock)
{
  
#line 1945 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1947 
  spin_unlock_irq(lock);
  
#line 1948 
  return;
}


#line 1951  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_bh_177(spinlock_t *lock)
{
  
#line 1955 
  ldv_spin_model_lock((char *)"hwstats_lock_of_fe_priv");
  
#line 1957 
  spin_lock_bh(lock);
  
#line 1958 
  return;
}


#line 1961  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_bh_178(spinlock_t *lock)
{
  
#line 1965 
  ldv_spin_model_unlock((char *)"hwstats_lock_of_fe_priv");
  
#line 1967 
  spin_unlock_bh(lock);
  
#line 1968 
  return;
}


#line 1971  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_irq_179(spinlock_t *lock)
{
  
#line 1975 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1977 
  spin_lock_irq(lock);
  
#line 1978 
  return;
}


#line 1981  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irq_180(spinlock_t *lock)
{
  
#line 1985 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 1987 
  spin_unlock_irq(lock);
  
#line 1988 
  return;
}


#line 1991  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_irq_181(spinlock_t *lock)
{
  
#line 1995 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 1997 
  spin_lock_irq(lock);
  
#line 1998 
  return;
}


#line 2001  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irq_182(spinlock_t *lock)
{
  
#line 2005 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 2007 
  spin_unlock_irq(lock);
  
#line 2008 
  return;
}


#line 2011  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_mod_timer_183(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 2015 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 2015 
  return tmp;
}


#line 2019  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_irq_184(spinlock_t *lock)
{
  
#line 2023 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 2025 
  spin_lock_irq(lock);
  
#line 2026 
  return;
}


#line 2029  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_mod_timer_185(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 2033 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 2033 
  return tmp;
}


#line 2037  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_mod_timer_186(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 2041 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 2041 
  return tmp;
}


#line 2045  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irq_187(spinlock_t *lock)
{
  
#line 2049 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 2051 
  spin_unlock_irq(lock);
  
#line 2052 
  return;
}


#line 2055  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_irq_188(spinlock_t *lock)
{
  
#line 2059 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 2061 
  spin_lock_irq(lock);
  
#line 2062 
  return;
}


#line 2065  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irq_189(spinlock_t *lock)
{
  
#line 2069 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 2071 
  spin_unlock_irq(lock);
  
#line 2072 
  return;
}


#line 2075  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_del_timer_sync_190(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 2079 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 2079 
  return tmp;
}


#line 2083  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_del_timer_sync_191(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 2087 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 2087 
  return tmp;
}


#line 2091  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_del_timer_sync_192(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 2095 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 2095 
  return tmp;
}


#line 2099  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_irq_193(spinlock_t *lock)
{
  
#line 2103 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 2105 
  spin_lock_irq(lock);
  
#line 2106 
  return;
}


#line 2109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irq_194(spinlock_t *lock)
{
  
#line 2113 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 2115 
  spin_unlock_irq(lock);
  
#line 2116 
  return;
}


#line 2119  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static struct net_device *ldv_alloc_etherdev_mqs_195(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3)
{
  struct net_device *tmp;
  
#line 2123 
  tmp = ldv_emg_alloc_etherdev_mqs(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
  
#line 2123 
  return tmp;
}


#line 2127  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_irq_196(spinlock_t *lock)
{
  
#line 2131 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 2133 
  spin_lock_irq(lock);
  
#line 2134 
  return;
}


#line 2137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irq_197(spinlock_t *lock)
{
  
#line 2141 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 2143 
  spin_unlock_irq(lock);
  
#line 2144 
  return;
}


#line 2147  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_lock_irq_198(spinlock_t *lock)
{
  
#line 2151 
  ldv_spin_model_lock((char *)"lock_of_fe_priv");
  
#line 2153 
  spin_lock_irq(lock);
  
#line 2154 
  return;
}


#line 2157  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_spin_unlock_irq_199(spinlock_t *lock)
{
  
#line 2161 
  ldv_spin_model_unlock((char *)"lock_of_fe_priv");
  
#line 2163 
  spin_unlock_irq(lock);
  
#line 2164 
  return;
}


#line 2167  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv_register_netdev_200(struct net_device *ldv_func_arg1)
{
  int tmp;
  
#line 2171 
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  
#line 2171 
  return tmp;
}


#line 2175  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_free_netdev_201(struct net_device *ldv_func_arg1)
{
  
#line 2179 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 2180 
  return;
}


#line 2183  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_unregister_netdev_202(struct net_device *ldv_func_arg1)
{
  
#line 2187 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 2188 
  return;
}


#line 2191  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_free_netdev_203(struct net_device *ldv_func_arg1)
{
  
#line 2195 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 2196 
  return;
}


#line 2199  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static int ldv___pci_register_driver_204(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3)
{
  int tmp;
  
#line 2203 
  tmp = ldv_emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,(char *)ldv_func_arg3);
  
#line 2203 
  return tmp;
}


#line 2207  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/weaver/.tmp_forcedeth.c.aux"
static void ldv_pci_unregister_driver_205(struct pci_driver *ldv_func_arg1)
{
  
#line 2211 
  ldv_emg_pci_unregister_driver(ldv_func_arg1);
  
#line 2212 
  return;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  
#line 23 
  v->counter += i;
  
#line 24 
  return;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  
#line 29 
  v->counter -= i;
  
#line 30 
  return;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  int __retres;
  
#line 35 
  v->counter -= i;
  
#line 36 
  if (v->counter != 0) {
    
#line 37 
    __retres = 0;
    
#line 37 
    goto return_label;
  }
  else ;
  
#line 39 
  __retres = 1;
  return_label: 
#line 39 
                return __retres;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  
#line 45 
  v->counter += 1;
  
#line 46 
  return;
}


#line 49  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  
#line 51 
  v->counter -= 1;
  
#line 52 
  return;
}


#line 55  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  int __retres;
  
#line 57 
  v->counter -= 1;
  
#line 58 
  if (v->counter != 0) {
    
#line 59 
    __retres = 0;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  __retres = 1;
  return_label: 
#line 61 
                return __retres;
}


#line 65  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  int __retres;
  
#line 67 
  v->counter += 1;
  
#line 68 
  if (v->counter != 0) {
    
#line 69 
    __retres = 0;
    
#line 69 
    goto return_label;
  }
  else ;
  
#line 71 
  __retres = 1;
  return_label: 
#line 71 
                return __retres;
}


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  int __retres;
  
#line 77 
  v->counter += i;
  
#line 78 
  __retres = v->counter;
  
#line 78 
  return __retres;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  int __retres;
  
#line 84 
  v->counter += i;
  
#line 85 
  __retres = v->counter < 0;
  
#line 85 
  return __retres;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  int __retres;
  
#line 91 
  *v = (short)((unsigned int)*v + 1U);
  
#line 92 
  __retres = (int)*v;
  
#line 92 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device const *dev);


#line 24 
int ldv_dev_set_drvdata(struct device *dev, void *data);


#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_xmalloc(size_t size);


#line 31 
void *ldv_xzalloc(size_t size);


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
struct ldv_list_element global_list = {.data = (void *)0, .next = (struct ldv_list_element *)0};

#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static ldv_list_ptr ldv_list_create(void *data)
{
  
#line 35 
  ldv_list_ptr list = (struct ldv_list_element *)0;
  
#line 37 
  list = (ldv_list_ptr)ldv_xmalloc(16UL);
  
#line 39 
  list->data = data;
  
#line 40 
  list->next = (struct ldv_list_element *)0;
  
#line 42 
  return list;
}


#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static void ldv_save_pointer(void *data)
{
  ldv_list_ptr element;
  ldv_list_ptr cached;
  
#line 50 
  if (global_list.data == (void *)0) {
    
#line 51 
    element = & global_list;
    
#line 52 
    element->data = data;
  }
  else {
    
#line 54 
    element = ldv_list_create(data);
    
#line 55 
    cached = global_list.next;
    
#line 56 
    global_list.next = element;
    
#line 57 
    element->next = cached;
  }
  
#line 60 
  return;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 30 
  if (dev != (struct device const *)0 && dev->p != (struct device_private *)0) {
    
#line 31 
    __retres = (dev->p)->driver_data;
    
#line 31 
    goto return_label;
  }
  else ;
  
#line 33 
  __retres = (void *)0;
  return_label: 
#line 33 
                return __retres;
}


#line 42  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  int __retres;
  
#line 44 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  
#line 45 
  ldv_save_pointer((void *)dev->p);
  
#line 46 
  (dev->p)->driver_data = data;
  
#line 48 
  __retres = 0;
  
#line 48 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_zalloc(size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  struct spi_master *__retres;
  struct spi_master *master;
  
#line 27 
  master = (struct spi_master *)ldv_zalloc((unsigned long)size + 2192UL);
  
#line 29 
  if (master == (struct spi_master *)0) {
    
#line 30 
    __retres = (struct spi_master *)0;
    
#line 30 
    goto return_label;
  }
  else ;
  
#line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  
#line 34 
  __retres = master;
  return_label: 
#line 34 
                return __retres;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err(void const *ptr);


#line 28 
long ldv_is_err_or_null(void const *ptr);


#line 29 
void *ldv_err_ptr(long error);


#line 30 
long ldv_ptr_err(void const *ptr);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_assume(int);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err(void const *ptr)
{
  long __retres;
  
#line 23 
  __retres = (long)((unsigned long)ptr > 4294967295UL);
  
#line 23 
  return __retres;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  void *__retres;
  
#line 28 
  __VERIFIER_assume(error < 0L);
  
#line 29 
  __retres = (void *)(4294967295L - error);
  
#line 29 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void const *ptr)
{
  long __retres;
  
#line 34 
  __VERIFIER_assume((unsigned long)ptr > 4294967295UL);
  
#line 35 
  __retres = (long)(4294967295UL - (unsigned long)ptr);
  
#line 35 
  return __retres;
}


#line 38  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err_or_null(void const *ptr)
{
  long __retres;
  int tmp_0;
  
#line 40 
  if (ptr == (void const *)0) 
#line 40 
                              tmp_0 = 1;
  else {
    long tmp;
    
#line 40 
    tmp = ldv_is_err(ptr);
    
#line 40 
    if (tmp != 0L) 
#line 40 
                   tmp_0 = 1; else 
#line 40 
                                   tmp_0 = 0;
  }
  
#line 40 
  __retres = (long)tmp_0;
  
#line 40 
  return __retres;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/panic.h"
void ldv_panic(void);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  
#line 23 
  __VERIFIER_assume(0);
  
#line 24 
  return;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void);


#line 42 
void ldv_switch_to_process_context(void);


#line 50 
bool ldv_in_interrupt_context(void);


#line 112 
int ldv_post_init(int init_ret_val);


#line 132 
int ldv_post_probe(int probe_ret_val);


#line 133 
void ldv_check_return_value_probe(int);


#line 141 
int ldv_filter_err_code(int ret_val);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;

#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void)
{
  
#line 30 
  __ldv_in_interrupt_context = (_Bool)1;
  
#line 31 
  return;
}


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_process_context(void)
{
  
#line 36 
  __ldv_in_interrupt_context = (_Bool)0;
  
#line 37 
  return;
}


#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
bool ldv_in_interrupt_context(void)
{
  
#line 41 
  return __ldv_in_interrupt_context;
}


#line 44  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static int ldv_filter_positive_int(int val)
{
  
#line 46 
  __VERIFIER_assume(val <= 0);
  
#line 47 
  return val;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_init(int init_ret_val)
{
  int tmp;
  
#line 56 
  tmp = ldv_filter_positive_int(init_ret_val);
  
#line 56 
  return tmp;
}


#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val)
{
  int tmp;
  
#line 62 
  ldv_check_return_value_probe(probe_ret_val);
  
#line 63 
  tmp = ldv_filter_positive_int(probe_ret_val);
  
#line 63 
  return tmp;
}


#line 67  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val)
{
  int tmp;
  
#line 69 
  tmp = ldv_filter_positive_int(ret_val);
  
#line 69 
  return tmp;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size, gfp_t flags);


#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);


#line 28 
void ldv_check_alloc_flags(gfp_t);


#line 29 
void ldv_after_alloc(void *);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_malloc(size_t size);


#line 24 
void *ldv_calloc(size_t nmemb, size_t size);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 25 
  ldv_check_alloc_flags(flags);
  
#line 26 
  res = ldv_malloc(size);
  
#line 27 
  ldv_after_alloc(res);
  
#line 29 
  return res;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 36 
  ldv_check_alloc_flags(flags);
  
#line 37 
  res = ldv_calloc(n,size);
  
#line 38 
  ldv_after_alloc(res);
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 47 
  ldv_check_alloc_flags(flags);
  
#line 48 
  res = ldv_zalloc(size);
  
#line 49 
  ldv_after_alloc(res);
  
#line 51 
  return res;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 58 
  ldv_check_alloc_flags(flags);
  
#line 59 
  res = ldv_malloc(n * size);
  
#line 60 
  ldv_after_alloc(res);
  
#line 62 
  return res;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void ldv_free(void *s);


#line 35 
void *ldv_malloc_unknown_size(void);


#line 36 
void *ldv_calloc_unknown_size(void);


#line 37 
void *ldv_zalloc_unknown_size(void);


#line 40 
void *ldv_reference_malloc(size_t size);


#line 41 
void *ldv_reference_calloc(size_t nmemb, size_t size);


#line 42 
void *ldv_reference_zalloc(size_t size);


#line 43 
void ldv_reference_free(void *s);


#line 47 
void *ldv_reference_xmalloc(size_t size);


#line 48 
void *ldv_reference_xzalloc(size_t size);


#line 52 
void *ldv_reference_malloc_unknown_size(void);


#line 53 
void *ldv_reference_calloc_unknown_size(void);


#line 54 
void *ldv_reference_zalloc_unknown_size(void);


#line 61 
void *ldv_xmalloc_unknown_size(size_t size);


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  void *res;
  
#line 37 
  res = ldv_reference_malloc(size);
  
#line 38 
  if (res != (void *)0) {
    long tmp;
    
#line 39 
    tmp = ldv_is_err((void const *)res);
    
#line 39 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  void *res;
  
#line 46 
  res = ldv_reference_calloc(nmemb,size);
  
#line 47 
  if (res != (void *)0) {
    long tmp;
    
#line 48 
    tmp = ldv_is_err((void const *)res);
    
#line 48 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 49 
  return res;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  void *res;
  
#line 55 
  res = ldv_reference_zalloc(size);
  
#line 56 
  if (res != (void *)0) {
    long tmp;
    
#line 57 
    tmp = ldv_is_err((void const *)res);
    
#line 57 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 58 
  return res;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  
#line 63 
  ldv_reference_free(s);
  
#line 64 
  return;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 69 
  res = ldv_reference_xmalloc(size);
  
#line 70 
  tmp = ldv_is_err((void const *)res);
  
#line 70 
  __VERIFIER_assume(tmp == 0L);
  
#line 71 
  return res;
}


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 77 
  res = ldv_reference_xzalloc(size);
  
#line 78 
  tmp = ldv_is_err((void const *)res);
  
#line 78 
  __VERIFIER_assume(tmp == 0L);
  
#line 79 
  return res;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  void *res;
  
#line 85 
  res = ldv_reference_malloc_unknown_size();
  
#line 86 
  if (res != (void *)0) {
    long tmp;
    
#line 87 
    tmp = ldv_is_err((void const *)res);
    
#line 87 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 88 
  return res;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  void *res;
  
#line 94 
  res = ldv_reference_calloc_unknown_size();
  
#line 95 
  if (res != (void *)0) {
    long tmp;
    
#line 96 
    tmp = ldv_is_err((void const *)res);
    
#line 96 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  void *res;
  
#line 103 
  res = ldv_reference_zalloc_unknown_size();
  
#line 104 
  if (res != (void *)0) {
    long tmp;
    
#line 105 
    tmp = ldv_is_err((void const *)res);
    
#line 105 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 106 
  return res;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  void *res;
  long tmp;
  
#line 112 
  res = ldv_reference_xmalloc_unknown_size(size);
  
#line 113 
  tmp = ldv_is_err((void const *)res);
  
#line 113 
  __VERIFIER_assume(tmp == 0L);
  
#line 114 
  return res;
}

long __builtin_expect(long exp, long c);


#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_error(void);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
long __builtin_expect(long exp, long c)
{
  
#line 26 
  return exp;
}


#line 35  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  
#line 37 
  __VERIFIER_error();
  
#line 38 
  return;
}


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_long(void);


#line 25 
unsigned int ldv_undef_uint(void);


#line 26 
unsigned long ldv_undef_ulong(void);


#line 27 
unsigned long long ldv_undef_ulonglong(void);


#line 28 
void *ldv_undef_ptr(void);


#line 31 
int ldv_undef_int_positive(void);


#line 34 
int ldv_undef_int_negative(void);


#line 37 
int ldv_undef_int_nonpositive(void);


#line 40 
void *ldv_undef_ptr_non_null(void);


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __VERIFIER_nondet_int(void);


#line 31 
long __VERIFIER_nondet_long(void);


#line 38 
unsigned int __VERIFIER_nondet_uint(void);


#line 41 
unsigned long __VERIFIER_nondet_ulong(void);


#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);


#line 43 
void *__VERIFIER_nondet_pointer(void);


#line 46  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  int tmp;
  
#line 48 
  tmp = __VERIFIER_nondet_int();
  
#line 48 
  return tmp;
}


#line 51  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_long(void)
{
  int __retres;
  long tmp;
  
#line 53 
  tmp = __VERIFIER_nondet_long();
  
#line 53 
  __retres = (int)tmp;
  
#line 53 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  unsigned int tmp;
  
#line 58 
  tmp = __VERIFIER_nondet_uint();
  
#line 58 
  return tmp;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  void *tmp;
  
#line 63 
  tmp = __VERIFIER_nondet_pointer();
  
#line 63 
  return tmp;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  unsigned long tmp;
  
#line 68 
  tmp = __VERIFIER_nondet_ulong();
  
#line 68 
  return tmp;
}


#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  unsigned long long tmp;
  
#line 73 
  tmp = __VERIFIER_nondet_ulonglong();
  
#line 73 
  return tmp;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  
#line 78 
  int ret = ldv_undef_int();
  
#line 80 
  __VERIFIER_assume(ret > 0);
  
#line 82 
  return ret;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  
#line 87 
  int ret = ldv_undef_int();
  
#line 89 
  __VERIFIER_assume(ret < 0);
  
#line 91 
  return ret;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  
#line 96 
  int ret = ldv_undef_int();
  
#line 98 
  __VERIFIER_assume(ret <= 0);
  
#line 100 
  return ret;
}


#line 103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  
#line 105 
  void *ret = ldv_undef_ptr();
  
#line 107 
  __VERIFIER_assume(ret != (void *)0);
  
#line 109 
  return ret;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *external_allocated_data(void);


#line 45 
void *ldv_reference_realloc(void *ptr, size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *malloc(size_t);


#line 24 
void *calloc(size_t, size_t);


#line 25 
void free(void *);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 37 
  tmp = ldv_undef_int();
  
#line 37 
  if (tmp != 0) {
    
#line 39 
    res = malloc(size);
    
#line 40 
    __VERIFIER_assume(res != (void *)0);
    
#line 41 
    __retres = res;
    
#line 41 
    goto return_label;
  }
  else {
    
#line 44 
    __retres = (void *)0;
    
#line 44 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 47  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  void *tmp;
  
#line 49 
  tmp = calloc(nmemb,size);
  
#line 49 
  return tmp;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  void *tmp;
  
#line 54 
  tmp = calloc(1UL,size);
  
#line 54 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  
#line 59 
  free(s);
  
#line 60 
  return;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 66 
  if (ptr != (void *)0 && size == 0UL) {
    
#line 67 
    free(ptr);
    
#line 68 
    __retres = (void *)0;
    
#line 68 
    goto return_label;
  }
  else ;
  
#line 71 
  if (ptr == (void *)0) {
    
#line 72 
    res = malloc(size);
    
#line 73 
    __retres = res;
    
#line 73 
    goto return_label;
  }
  else ;
  
#line 76 
  tmp = ldv_undef_int();
  
#line 76 
  if (tmp != 0) {
    
#line 78 
    res = malloc(size);
    
#line 79 
    __VERIFIER_assume(res != (void *)0);
    
#line 81 
    memcpy(res,(void const *)ptr,size);
    
#line 82 
    free(ptr);
    
#line 84 
    __retres = res;
    
#line 84 
    goto return_label;
  }
  else {
    
#line 87 
    __retres = (void *)0;
    
#line 87 
    goto return_label;
  }
  return_label: 
#line 76 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  void *res;
  
#line 94 
  res = malloc(size);
  
#line 95 
  __VERIFIER_assume(res != (void *)0);
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  void *res;
  
#line 104 
  res = calloc(1UL,size);
  
#line 105 
  __VERIFIER_assume(res != (void *)0);
  
#line 107 
  return res;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 114 
  tmp = ldv_undef_int();
  
#line 114 
  if (tmp != 0) {
    
#line 115 
    res = external_allocated_data();
    
#line 116 
    __VERIFIER_assume(res != (void *)0);
    
#line 117 
    __retres = res;
    
#line 117 
    goto return_label;
  }
  else {
    
#line 120 
    __retres = (void *)0;
    
#line 120 
    goto return_label;
  }
  return_label: 
#line 114 
                return __retres;
}


#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 127 
  tmp = ldv_undef_int();
  
#line 127 
  if (tmp != 0) {
    
#line 128 
    res = external_allocated_data();
    
#line 129 
    memset(res,0,8UL);
    
#line 130 
    __VERIFIER_assume(res != (void *)0);
    
#line 131 
    __retres = res;
    
#line 131 
    goto return_label;
  }
  else {
    
#line 134 
    __retres = (void *)0;
    
#line 134 
    goto return_label;
  }
  return_label: 
#line 127 
                return __retres;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  void *tmp;
  
#line 139 
  tmp = ldv_reference_calloc_unknown_size();
  
#line 139 
  return tmp;
}


#line 142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  void *res;
  
#line 146 
  res = external_allocated_data();
  
#line 147 
  __VERIFIER_assume(res != (void *)0);
  
#line 149 
  return res;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_initialize(void);


#line 97 
void ldv_failed_register_netdev(void);


#line 123 
void ldv_pre_probe(void);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
int pthread_create(pthread_t *, pthread_attr_t const *, void *(*)(void *), void *);


#line 37 
int pthread_join(pthread_t, void **);


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_register_4_3(struct timer_list *arg0);


#line 91 
int main(void);


#line 92 
void ldv_dispatch_instance_deregister_8_1(struct timer_list *arg0);


#line 93 
void *ldv_timer_scenario_15(void *arg0);


#line 94 
void ldv_dispatch_irq_deregister_3_1(int arg0);


#line 96 
void *ldv_interrupt_scenario_17(void *arg0);


#line 97 
void ldv_dispatch_register_7_3(struct pci_driver *arg0);


#line 99 
void *ldv_pm_ops_scenario_18(void *arg0);


#line 100 
void *ldv_initialization_1(void *arg0);


#line 102 
void *ldv_interrupt_scenario_13(void *arg0);


#line 103 
void ldv_dispatch_deregister_9_1(struct pci_driver *arg0);


#line 105 
void ldv_dispatch_register_10_4(struct net_device *arg0);


#line 108 
void ldv_dispatch_irq_register_11_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);


#line 109 
void *ldv_pci_scenario_12(void *arg0);


#line 110 
void ldv_dispatch_deregister_6_1(struct net_device *arg0);


#line 112 
void *ldv_random_allocationless_scenario_16(void *arg0);


#line 113 
void *ldv_interrupt_scenario_14(void *arg0);


#line 117  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_17;

#line 118  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_12;

#line 119  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_13;

#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_16;

#line 121  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_14;

#line 122  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_15;

#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_18;

#line 127  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_del_timer_sync(struct timer_list *arg0)
{
  int __retres;
  struct timer_list *ldv_8_timer_list;
  
#line 133 
  ldv_8_timer_list = arg0;
  
#line 137 
  ldv_dispatch_instance_deregister_8_1(ldv_8_timer_list);
  
#line 138 
  ;
  
#line 138 
  __retres = 0;
  
#line 138 
  return __retres;
}


#line 146  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_register_4_3(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_15 *cf_arg_15;
  int tmp;
  
#line 149 
  tmp = ldv_undef_int();
  
#line 149 
  switch (tmp) {
    case 0: 
#line 150 
    ;
    
#line 151 
    cf_arg_15 = (struct ldv_struct_timer_scenario_15 *)ldv_xmalloc(16UL);
    
#line 152 
    cf_arg_15->arg0 = arg0;
    
#line 153 
    ret = pthread_create(& ldv_thread_15,(pthread_attr_t const *)0,& ldv_timer_scenario_15,(void *)cf_arg_15);
    
#line 154 
    __VERIFIER_assume(ret == 0);
    
#line 155 
    goto ldv_44755;
    default: 
#line 157 
    ;
    
#line 157 
    __VERIFIER_assume(0);
  }
  ldv_44755: 
#line 158 
  ;
  
#line 159 
  return;
}


#line 163  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  int __retres;
  int tmp_0;
  
#line 166 
  struct pci_driver *ldv_7_pci_driver = ldv_emg_alias_forcedeth_pci_driver_2;
  
#line 170 
  tmp_0 = ldv_undef_int();
  
#line 170 
  if (tmp_0 != 0) {
    
#line 172 
    ldv_7_pci_driver = arg0;
    
#line 176 
    ldv_dispatch_register_7_3(ldv_7_pci_driver);
    
#line 180 
    __retres = 0;
    
#line 180 
    goto return_label;
  }
  else {
    int tmp;
    
#line 187 
    tmp = ldv_undef_int_negative();
    
#line 187 
    __retres = tmp;
    
#line 187 
    goto return_label;
  }
  return_label: 
#line 170 
                return __retres;
}


#line 197  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
int main(void)
{
  int __retres;
  
#line 200 
  ldv_initialize();
  
#line 203 
  ldv_initialization_1((void *)0);
  
#line 205 
  __retres = 0;
  
#line 205 
  return __retres;
}


#line 210  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_10_4(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_16 *cf_arg_16;
  int tmp;
  
#line 213 
  tmp = ldv_undef_int();
  
#line 213 
  switch (tmp) {
    case 0: 
#line 214 
    ;
    
#line 215 
    cf_arg_16 = (struct ldv_struct_random_allocationless_scenario_16 *)ldv_xmalloc(16UL);
    
#line 216 
    cf_arg_16->arg0 = arg0;
    
#line 217 
    ret = pthread_create(& ldv_thread_16,(pthread_attr_t const *)0,& ldv_random_allocationless_scenario_16,(void *)cf_arg_16);
    
#line 218 
    __VERIFIER_assume(ret == 0);
    
#line 219 
    goto ldv_44772;
    default: 
#line 221 
    ;
    
#line 221 
    __VERIFIER_assume(0);
  }
  ldv_44772: 
#line 222 
  ;
  
#line 223 
  return;
}


#line 227  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_timer_scenario_15(void *arg0)
{
  void *__retres;
  struct timer_list *ldv_15_container;
  
#line 232 
  struct ldv_struct_timer_scenario_15 *data = (struct ldv_struct_timer_scenario_15 *)arg0;
  
#line 237 
  if (data != (struct ldv_struct_timer_scenario_15 *)0) {
    
#line 238 
    ldv_15_container = data->arg0;
    
#line 239 
    ldv_free((void *)data);
  }
  else ;
  
#line 244 
  if (ldv_15_container->function != (void (*)(unsigned long ))0) {
    
#line 246 
    ldv_switch_to_interrupt_context();
    
#line 248 
    (*(ldv_15_container->function))(ldv_15_container->data);
    
#line 250 
    ldv_switch_to_process_context();
  }
  else ;
  
#line 259 
  __retres = (void *)0;
  
#line 259 
  goto return_label;
  
#line 261 
  __retres = (void *)0;
  return_label: 
#line 261 
                return __retres;
}


#line 266  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_deregister_3_1(int arg0)
{
  int ret;
  struct ldv_struct_free_irq_3 *cf_arg_17;
  struct ldv_struct_free_irq_3 *cf_arg_13;
  struct ldv_struct_free_irq_3 *cf_arg_14;
  int tmp;
  
#line 271 
  tmp = ldv_undef_int();
  
#line 271 
  switch (tmp) {
    case 0: 
#line 272 
    ;
    
#line 273 
    ret = pthread_join(ldv_thread_17,(void **)0);
    
#line 274 
    __VERIFIER_assume(ret == 0);
    
#line 275 
    goto ldv_44787;
    case 1: 
#line 277 
    ;
    
#line 278 
    ret = pthread_join(ldv_thread_13,(void **)0);
    
#line 279 
    __VERIFIER_assume(ret == 0);
    
#line 280 
    goto ldv_44787;
    case 2: 
#line 282 
    ;
    
#line 283 
    ret = pthread_join(ldv_thread_14,(void **)0);
    
#line 284 
    __VERIFIER_assume(ret == 0);
    
#line 285 
    goto ldv_44787;
    default: 
#line 287 
    ;
    
#line 287 
    __VERIFIER_assume(0);
  }
  ldv_44787: 
#line 288 
  ;
  
#line 289 
  return;
}


#line 293  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  struct net_device *__retres;
  struct net_device *ldv_5_netdev;
  int tmp_0;
  
#line 300 
  tmp_0 = ldv_undef_int();
  
#line 300 
  if (tmp_0 != 0) {
    
#line 302 
    ldv_5_netdev = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    
#line 306 
    __retres = ldv_5_netdev;
    
#line 306 
    goto return_label;
  }
  else {
    
#line 313 
    __retres = (struct net_device *)0;
    
#line 313 
    goto return_label;
  }
  return_label: 
#line 300 
                return __retres;
}


#line 323  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_17(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_17_ret_val;
  int ldv_17_line;
  void *ldv_17_data;
  enum irqreturn (*ldv_17_thread)(int , void *);
  int tmp;
  
#line 329 
  enum irqreturn (*ldv_17_callback)(int , void *) = & ldv_emg_wrapper_nv_nic_irq_rx_2;
  
#line 332 
  struct ldv_struct_interrupt_scenario_13 *data = (struct ldv_struct_interrupt_scenario_13 *)arg0;
  
#line 337 
  if (data != (struct ldv_struct_interrupt_scenario_13 *)0) {
    
#line 338 
    ldv_17_line = data->arg0;
    
#line 339 
    ldv_17_callback = data->arg1;
    
#line 340 
    ldv_17_thread = data->arg2;
    
#line 341 
    ldv_17_data = data->arg3;
    
#line 342 
    ldv_free((void *)data);
  }
  else ;
  
#line 348 
  ldv_switch_to_interrupt_context();
  
#line 350 
  ldv_17_ret_val = ldv_emg_wrapper_nv_nic_irq_rx_2(ldv_17_line,ldv_17_data);
  
#line 352 
  ldv_switch_to_process_context();
  
#line 355 
  tmp = ldv_undef_int();
  
#line 355 
  if (tmp != 0) {
    
#line 357 
    __VERIFIER_assume(ldv_17_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 361 
    if (ldv_17_thread != (enum irqreturn (*)(int , void *))0) 
#line 363 
                                                              (*ldv_17_thread)(ldv_17_line,ldv_17_data); else ;
  }
  else 
#line 370 
       __VERIFIER_assume(ldv_17_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 379 
  __retres = (void *)0;
  
#line 379 
  goto return_label;
  
#line 381 
  __retres = (void *)0;
  return_label: 
#line 381 
                return __retres;
}


#line 386  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_7_3(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_12 *cf_arg_12;
  int tmp;
  
#line 389 
  tmp = ldv_undef_int();
  
#line 389 
  switch (tmp) {
    case 0: 
#line 390 
    ;
    
#line 391 
    cf_arg_12 = (struct ldv_struct_pci_scenario_12 *)ldv_xmalloc(16UL);
    
#line 392 
    cf_arg_12->arg0 = arg0;
    
#line 393 
    ret = pthread_create(& ldv_thread_12,(pthread_attr_t const *)0,& ldv_pci_scenario_12,(void *)cf_arg_12);
    
#line 394 
    __VERIFIER_assume(ret == 0);
    
#line 395 
    goto ldv_44816;
    default: 
#line 397 
    ;
    
#line 397 
    __VERIFIER_assume(0);
  }
  ldv_44816: 
#line 398 
  ;
  
#line 399 
  return;
}


#line 403  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  int __retres;
  int ldv_11_line;
  void *ldv_11_data;
  enum irqreturn (*ldv_11_thread)(int , void *);
  int tmp_0;
  
#line 408 
  enum irqreturn (*ldv_11_callback)(int , void *) = & ldv_emg_wrapper_nv_nic_irq_rx_2;
  
#line 413 
  tmp_0 = ldv_undef_int();
  
#line 413 
  if (tmp_0 != 0) {
    
#line 415 
    ldv_11_line = (int)arg0;
    
#line 416 
    ldv_11_callback = arg1;
    
#line 417 
    ldv_11_thread = (enum irqreturn (*)(int , void *))0;
    
#line 418 
    ldv_11_data = arg4;
    
#line 422 
    ldv_dispatch_irq_register_11_3(ldv_11_line,ldv_11_callback,ldv_11_thread,ldv_11_data);
    
#line 426 
    __retres = 0;
    
#line 426 
    goto return_label;
  }
  else {
    int tmp;
    
#line 433 
    tmp = ldv_undef_int_negative();
    
#line 433 
    __retres = tmp;
    
#line 433 
    goto return_label;
  }
  return_label: 
#line 413 
                return __retres;
}


#line 443  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pm_ops_scenario_18(void *arg0)
{
  void *__retres;
  struct device *ldv_18_device;
  int tmp;
  
#line 446 
  struct dev_pm_ops *ldv_18_pm_ops = ldv_emg_alias_nv_pm_ops_3;
  
#line 457 
  goto ldv_do_18;
  
#line 459 
  __retres = (void *)0;
  
#line 459 
  goto return_label;
  ldv_do_18: 
#line 462 
  ;
  
#line 465 
  tmp = ldv_undef_int();
  
#line 465 
  switch (tmp) {
    int tmp_0;
    case 1: 
#line 466 
    ;
    
#line 468 
    if (ldv_18_pm_ops->runtime_idle != (int (*)(struct device *))0) 
#line 470 
                                                                    (*(ldv_18_pm_ops->runtime_idle))(ldv_18_device); else ;
    
#line 478 
    goto ldv_do_18;
    case 2: 
#line 481 
    ;
    
#line 483 
    if (ldv_18_pm_ops->runtime_suspend != (int (*)(struct device *))0) 
      
#line 485 
      (*(ldv_18_pm_ops->runtime_suspend))(ldv_18_device); else ;
    
#line 490 
    if (ldv_18_pm_ops->runtime_resume != (int (*)(struct device *))0) 
      
#line 492 
      (*(ldv_18_pm_ops->runtime_resume))(ldv_18_device); else ;
    
#line 500 
    goto ldv_do_18;
    case 3: 
#line 503 
    ;
    
#line 505 
    if (ldv_18_pm_ops->prepare != (int (*)(struct device *))0) 
#line 507 
                                                               (*(ldv_18_pm_ops->prepare))(ldv_18_device); else ;
    
#line 511 
    tmp_0 = ldv_undef_int();
    
#line 511 
    switch (tmp_0) {
      int tmp_1;
      int tmp_2;
      int tmp_3;
      case 1: 
#line 512 
      ;
      
#line 515 
      ldv_emg_wrapper_nv_suspend_2(ldv_18_device);
      
#line 518 
      tmp_1 = ldv_undef_int();
      
#line 518 
      if (tmp_1 != 0) {
        
#line 520 
        if (ldv_18_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
          
#line 522 
          (*(ldv_18_pm_ops->suspend_noirq))(ldv_18_device); else ;
        
#line 527 
        if (ldv_18_pm_ops->resume_noirq != (int (*)(struct device *))0) 
          
#line 529 
          (*(ldv_18_pm_ops->resume_noirq))(ldv_18_device); else ;
      }
      else {
        
#line 536 
        if (ldv_18_pm_ops->suspend_late != (int (*)(struct device *))0) 
          
#line 538 
          (*(ldv_18_pm_ops->suspend_late))(ldv_18_device); else ;
        
#line 543 
        if (ldv_18_pm_ops->resume_early != (int (*)(struct device *))0) 
          
#line 545 
          (*(ldv_18_pm_ops->resume_early))(ldv_18_device); else ;
      }
      
#line 552 
      ldv_emg_wrapper_nv_resume_4(ldv_18_device);
      
#line 555 
      goto ldv_44845;
      case 2: 
#line 557 
      ;
      
#line 560 
      ldv_emg_wrapper_nv_suspend_2(ldv_18_device);
      
#line 563 
      tmp_2 = ldv_undef_int();
      
#line 563 
      if (tmp_2 != 0) {
        
#line 565 
        if (ldv_18_pm_ops->freeze_late != (int (*)(struct device *))0) 
          
#line 567 
          (*(ldv_18_pm_ops->freeze_late))(ldv_18_device); else ;
        
#line 572 
        if (ldv_18_pm_ops->thaw_early != (int (*)(struct device *))0) 
          
#line 574 
          (*(ldv_18_pm_ops->thaw_early))(ldv_18_device); else ;
      }
      else {
        
#line 581 
        if (ldv_18_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
          
#line 583 
          (*(ldv_18_pm_ops->freeze_noirq))(ldv_18_device); else ;
        
#line 588 
        if (ldv_18_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
          
#line 590 
          (*(ldv_18_pm_ops->thaw_noirq))(ldv_18_device); else ;
      }
      
#line 597 
      ldv_emg_wrapper_nv_resume_4(ldv_18_device);
      
#line 600 
      goto ldv_44845;
      case 3: 
#line 602 
      ;
      
#line 605 
      ldv_emg_wrapper_nv_suspend_2(ldv_18_device);
      
#line 608 
      tmp_3 = ldv_undef_int();
      
#line 608 
      if (tmp_3 != 0) {
        
#line 610 
        if (ldv_18_pm_ops->poweroff_late != (int (*)(struct device *))0) 
          
#line 612 
          (*(ldv_18_pm_ops->poweroff_late))(ldv_18_device); else ;
        
#line 617 
        if (ldv_18_pm_ops->restore_early != (int (*)(struct device *))0) 
          
#line 619 
          (*(ldv_18_pm_ops->restore_early))(ldv_18_device); else ;
      }
      else {
        
#line 626 
        if (ldv_18_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
          
#line 628 
          (*(ldv_18_pm_ops->poweroff_noirq))(ldv_18_device); else ;
        
#line 633 
        if (ldv_18_pm_ops->restore_noirq != (int (*)(struct device *))0) 
          
#line 635 
          (*(ldv_18_pm_ops->restore_noirq))(ldv_18_device); else ;
      }
      
#line 642 
      ldv_emg_wrapper_nv_resume_4(ldv_18_device);
      
#line 645 
      goto ldv_44845;
      default: 
#line 647 
      ;
      
#line 647 
      __VERIFIER_assume(0);
    }
    ldv_44845: 
#line 650 
    ;
    
#line 650 
    if (ldv_18_pm_ops->complete != (void (*)(struct device *))0) 
#line 652 
                                                                 (*(ldv_18_pm_ops->complete))(ldv_18_device); else ;
    
#line 660 
    goto ldv_do_18;
    case 4: 
#line 663 
    ;
    
#line 669 
    __retres = (void *)0;
    
#line 669 
    goto return_label;
    default: 
#line 672 
    ;
    
#line 672 
    __VERIFIER_assume(0);
  }
  
#line 675 
  __retres = (void *)0;
  return_label: 
#line 675 
                return __retres;
}


#line 680  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_initialization_1(void *arg0)
{
  void *__retres;
  int ldv_1_ret;
  int tmp;
  
#line 687 
  ldv_1_ret = ldv_emg_forcedeth_pci_driver_init();
  
#line 688 
  ldv_1_ret = ldv_post_init(ldv_1_ret);
  
#line 691 
  tmp = ldv_undef_int();
  
#line 691 
  if (tmp != 0) {
    
#line 693 
    __VERIFIER_assume(ldv_1_ret != 0);
    
#line 697 
    __retres = (void *)0;
    
#line 697 
    goto return_label;
  }
  else {
    
#line 701 
    __VERIFIER_assume(ldv_1_ret == 0);
    
#line 706 
    ldv_emg_forcedeth_pci_driver_exit();
    
#line 710 
    __retres = (void *)0;
    
#line 710 
    goto return_label;
  }
  
#line 713 
  __retres = (void *)0;
  return_label: 
#line 713 
                return __retres;
}


#line 718  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_register_netdev(struct net_device *arg0)
{
  int __retres;
  struct net_device *ldv_10_netdev;
  int tmp_3;
  
#line 722 
  int ldv_10_ret = ldv_undef_int();
  
#line 725 
  ldv_10_ret = ldv_undef_int();
  
#line 728 
  tmp_3 = ldv_undef_int();
  
#line 728 
  if (tmp_3 != 0) {
    int tmp_1;
    
#line 730 
    ldv_10_netdev = arg0;
    
#line 735 
    ldv_10_ret = ldv_emg_wrapper_nv_open_2(ldv_10_netdev);
    
#line 738 
    tmp_1 = ldv_undef_int();
    
#line 738 
    if (tmp_1 != 0) {
      
#line 740 
      __VERIFIER_assume(ldv_10_ret == 0);
      
#line 744 
      ldv_dispatch_register_10_4(ldv_10_netdev);
      
#line 748 
      __retres = 0;
      
#line 748 
      goto return_label;
    }
    else {
      int tmp_0;
      
#line 755 
      __VERIFIER_assume(ldv_10_ret != 0);
      
#line 756 
      ldv_failed_register_netdev();
      
#line 757 
      tmp_0 = ldv_undef_int_negative();
      
#line 757 
      __retres = tmp_0;
      
#line 757 
      goto return_label;
    }
  }
  else {
    int tmp_2;
    
#line 765 
    ldv_failed_register_netdev();
    
#line 766 
    tmp_2 = ldv_undef_int_negative();
    
#line 766 
    __retres = tmp_2;
    
#line 766 
    goto return_label;
  }
  return_label: 
#line 728 
                return __retres;
}


#line 776  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_13(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_13_ret_val;
  int ldv_13_line;
  void *ldv_13_data;
  enum irqreturn (*ldv_13_thread)(int , void *);
  int tmp;
  
#line 782 
  enum irqreturn (*ldv_13_callback)(int , void *) = & ldv_emg_wrapper_nv_nic_irq_other_2;
  
#line 785 
  struct ldv_struct_interrupt_scenario_13 *data = (struct ldv_struct_interrupt_scenario_13 *)arg0;
  
#line 790 
  if (data != (struct ldv_struct_interrupt_scenario_13 *)0) {
    
#line 791 
    ldv_13_line = data->arg0;
    
#line 792 
    ldv_13_callback = data->arg1;
    
#line 793 
    ldv_13_thread = data->arg2;
    
#line 794 
    ldv_13_data = data->arg3;
    
#line 795 
    ldv_free((void *)data);
  }
  else ;
  
#line 801 
  ldv_switch_to_interrupt_context();
  
#line 803 
  ldv_13_ret_val = ldv_emg_wrapper_nv_nic_irq_other_2(ldv_13_line,ldv_13_data);
  
#line 805 
  ldv_switch_to_process_context();
  
#line 808 
  tmp = ldv_undef_int();
  
#line 808 
  if (tmp != 0) {
    
#line 810 
    __VERIFIER_assume(ldv_13_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 814 
    if (ldv_13_thread != (enum irqreturn (*)(int , void *))0) 
#line 816 
                                                              (*ldv_13_thread)(ldv_13_line,ldv_13_data); else ;
  }
  else 
#line 823 
       __VERIFIER_assume(ldv_13_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 832 
  __retres = (void *)0;
  
#line 832 
  goto return_label;
  
#line 834 
  __retres = (void *)0;
  return_label: 
#line 834 
                return __retres;
}


#line 839  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_9_1(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_12 *cf_arg_12;
  int tmp;
  
#line 842 
  tmp = ldv_undef_int();
  
#line 842 
  switch (tmp) {
    case 0: 
#line 843 
    ;
    
#line 844 
    ret = pthread_join(ldv_thread_12,(void **)0);
    
#line 845 
    __VERIFIER_assume(ret == 0);
    
#line 846 
    goto ldv_44879;
    default: 
#line 848 
    ;
    
#line 848 
    __VERIFIER_assume(0);
  }
  ldv_44879: 
#line 849 
  ;
  
#line 850 
  return;
}


#line 854  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0)
{
  
#line 857 
  struct pci_driver *ldv_9_pci_driver = ldv_emg_alias_forcedeth_pci_driver_2;
  
#line 860 
  ldv_9_pci_driver = arg0;
  
#line 864 
  ldv_dispatch_deregister_9_1(ldv_9_pci_driver);
  
#line 868 
  goto return_label;
  return_label: 
#line 870 
                return;
}


#line 875  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_deregister_8_1(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_15 *cf_arg_15;
  int tmp;
  
#line 878 
  tmp = ldv_undef_int();
  
#line 878 
  switch (tmp) {
    case 0: 
#line 879 
    ;
    
#line 880 
    ret = pthread_join(ldv_thread_15,(void **)0);
    
#line 881 
    __VERIFIER_assume(ret == 0);
    
#line 882 
    goto ldv_44891;
    default: 
#line 884 
    ;
    
#line 884 
    __VERIFIER_assume(0);
  }
  ldv_44891: 
#line 885 
  ;
  
#line 886 
  return;
}


#line 890  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_unregister_netdev(struct net_device *arg0)
{
  struct net_device *ldv_6_netdev;
  
#line 896 
  ldv_6_netdev = arg0;
  
#line 901 
  ldv_emg_wrapper_nv_close_2(ldv_6_netdev);
  
#line 905 
  ldv_dispatch_deregister_6_1(ldv_6_netdev);
  
#line 909 
  goto return_label;
  return_label: 
#line 911 
                return;
}


#line 916  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_irq(unsigned int arg0, void *arg1)
{
  int ldv_3_line;
  
#line 922 
  ldv_3_line = (int)arg0;
  
#line 926 
  ldv_dispatch_irq_deregister_3_1(ldv_3_line);
  
#line 930 
  goto return_label;
  return_label: 
#line 932 
                return;
}


#line 937  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_register_11_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  int ret;
  struct ldv_struct_interrupt_scenario_13 *cf_arg_17;
  struct ldv_struct_interrupt_scenario_13 *cf_arg_13;
  struct ldv_struct_interrupt_scenario_13 *cf_arg_14;
  int tmp;
  
#line 942 
  tmp = ldv_undef_int();
  
#line 942 
  switch (tmp) {
    case 0: 
#line 943 
    ;
    
#line 944 
    cf_arg_17 = (struct ldv_struct_interrupt_scenario_13 *)ldv_xmalloc(32UL);
    
#line 945 
    cf_arg_17->arg0 = arg0;
    
#line 946 
    cf_arg_17->arg1 = arg1;
    
#line 947 
    cf_arg_17->arg2 = arg2;
    
#line 948 
    cf_arg_17->arg3 = arg3;
    
#line 949 
    ret = pthread_create(& ldv_thread_17,(pthread_attr_t const *)0,& ldv_interrupt_scenario_17,(void *)cf_arg_17);
    
#line 950 
    __VERIFIER_assume(ret == 0);
    
#line 951 
    goto ldv_44917;
    case 1: 
#line 953 
    ;
    
#line 954 
    cf_arg_13 = (struct ldv_struct_interrupt_scenario_13 *)ldv_xmalloc(32UL);
    
#line 955 
    cf_arg_13->arg0 = arg0;
    
#line 956 
    cf_arg_13->arg1 = arg1;
    
#line 957 
    cf_arg_13->arg2 = arg2;
    
#line 958 
    cf_arg_13->arg3 = arg3;
    
#line 959 
    ret = pthread_create(& ldv_thread_13,(pthread_attr_t const *)0,& ldv_interrupt_scenario_13,(void *)cf_arg_13);
    
#line 960 
    __VERIFIER_assume(ret == 0);
    
#line 961 
    goto ldv_44917;
    case 2: 
#line 963 
    ;
    
#line 964 
    cf_arg_14 = (struct ldv_struct_interrupt_scenario_13 *)ldv_xmalloc(32UL);
    
#line 965 
    cf_arg_14->arg0 = arg0;
    
#line 966 
    cf_arg_14->arg1 = arg1;
    
#line 967 
    cf_arg_14->arg2 = arg2;
    
#line 968 
    cf_arg_14->arg3 = arg3;
    
#line 969 
    ret = pthread_create(& ldv_thread_14,(pthread_attr_t const *)0,& ldv_interrupt_scenario_14,(void *)cf_arg_14);
    
#line 970 
    __VERIFIER_assume(ret == 0);
    
#line 971 
    goto ldv_44917;
    default: 
#line 973 
    ;
    
#line 973 
    __VERIFIER_assume(0);
  }
  ldv_44917: 
#line 974 
  ;
  
#line 975 
  return;
}


#line 979  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pci_scenario_12(void *arg0)
{
  void *__retres;
  struct pci_dev *ldv_12_resource_1;
  struct pci_device_id *ldv_12_ldv_param_1_2;
  struct pm_message ldv_12_resource_0;
  int tmp_2;
  int tmp_3;
  
#line 984 
  struct pci_driver *ldv_12_container = ldv_emg_alias_forcedeth_pci_driver_2;
  
#line 985 
  int ldv_12_ret = ldv_undef_int();
  
#line 988 
  struct ldv_struct_pci_scenario_12 *data = (struct ldv_struct_pci_scenario_12 *)arg0;
  
#line 992 
  ldv_12_ret = ldv_undef_int();
  
#line 995 
  if (data != (struct ldv_struct_pci_scenario_12 *)0) {
    
#line 996 
    ldv_12_container = data->arg0;
    
#line 997 
    ldv_free((void *)data);
  }
  else ;
  
#line 1008 
  goto ldv_main_12;
  
#line 1010 
  __retres = (void *)0;
  
#line 1010 
  goto return_label;
  ldv_main_12: 
#line 1013 
  ;
  
#line 1016 
  tmp_2 = ldv_undef_int();
  
#line 1016 
  if (tmp_2 != 0) {
    int tmp_1;
    
#line 1018 
    ldv_12_ldv_param_1_2 = (struct pci_device_id *)ldv_xmalloc_unknown_size(0UL);
    
#line 1023 
    ldv_pre_probe();
    
#line 1025 
    ldv_12_ret = ldv_emg_wrapper_nv_probe_3(ldv_12_resource_1,ldv_12_ldv_param_1_2);
    
#line 1027 
    ldv_12_ret = ldv_post_probe(ldv_12_ret);
    
#line 1031 
    ldv_free((void *)ldv_12_ldv_param_1_2);
    
#line 1034 
    tmp_1 = ldv_undef_int();
    
#line 1034 
    if (tmp_1 != 0) {
      
#line 1036 
      __VERIFIER_assume(ldv_12_ret == 0);
      
#line 1043 
      goto ldv_call_12;
    }
    else {
      
#line 1047 
      __VERIFIER_assume(ldv_12_ret != 0);
      
#line 1054 
      goto ldv_main_12;
    }
  }
  else {
    
#line 1066 
    __retres = (void *)0;
    
#line 1066 
    goto return_label;
  }
  
#line 1069 
  __retres = (void *)0;
  
#line 1069 
  goto return_label;
  ldv_call_12: 
#line 1072 
  ;
  
#line 1075 
  tmp_3 = ldv_undef_int();
  
#line 1075 
  switch (tmp_3) {
    case 1: 
#line 1076 
    ;
    
#line 1085 
    goto ldv_call_12;
    case 2: 
#line 1088 
    ;
    
#line 1090 
    if (ldv_12_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 1092 
      ldv_12_ret = (*(ldv_12_container->suspend))(ldv_12_resource_1,ldv_12_resource_0);
      
#line 1094 
      ldv_12_ret = ldv_filter_err_code(ldv_12_ret);
    }
    else 
#line 1096 
         ldv_12_ret = ldv_undef_int();
    
#line 1101 
    if (ldv_12_container->suspend_late != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 1103 
      ldv_12_ret = (*(ldv_12_container->suspend_late))(ldv_12_resource_1,ldv_12_resource_0);
      
#line 1105 
      ldv_12_ret = ldv_filter_err_code(ldv_12_ret);
    }
    else 
#line 1107 
         ldv_12_ret = ldv_undef_int();
    
#line 1112 
    if (ldv_12_container->resume_early != (int (*)(struct pci_dev *))0) 
      
#line 1114 
      (*(ldv_12_container->resume_early))(ldv_12_resource_1); else ;
    
#line 1119 
    if (ldv_12_container->resume != (int (*)(struct pci_dev *))0) 
#line 1121 
                                                                  (*(ldv_12_container->resume))(ldv_12_resource_1); else ;
    
#line 1129 
    goto ldv_call_12;
    case 3: 
#line 1132 
    ;
    
#line 1135 
    ldv_emg_wrapper_nv_shutdown_2(ldv_12_resource_1);
    
#line 1140 
    ldv_emg_wrapper_nv_remove_4(ldv_12_resource_1);
    
#line 1147 
    goto ldv_main_12;
    default: 
#line 1150 
    ;
    
#line 1150 
    __VERIFIER_assume(0);
  }
  
#line 1153 
  __retres = (void *)0;
  return_label: 
#line 1153 
                return __retres;
}


#line 1158  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_6_1(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_16 *cf_arg_16;
  int tmp;
  
#line 1161 
  tmp = ldv_undef_int();
  
#line 1161 
  switch (tmp) {
    case 0: 
#line 1162 
    ;
    
#line 1163 
    ret = pthread_join(ldv_thread_16,(void **)0);
    
#line 1164 
    __VERIFIER_assume(ret == 0);
    
#line 1165 
    goto ldv_44942;
    default: 
#line 1167 
    ;
    
#line 1167 
    __VERIFIER_assume(0);
  }
  ldv_44942: 
#line 1168 
  ;
  
#line 1169 
  return;
}


#line 1173  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_netdev(struct net_device *arg0)
{
  struct net_device *ldv_2_netdev;
  
#line 1179 
  ldv_2_netdev = arg0;
  
#line 1180 
  ldv_free((void *)ldv_2_netdev);
  
#line 1184 
  goto return_label;
  return_label: 
#line 1186 
                return;
}


#line 1191  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_random_allocationless_scenario_16(void *arg0)
{
  void *__retres;
  struct sk_buff *ldv_16_ldv_param_0_13;
  struct ethtool_cmd *ldv_16_ldv_param_1_3;
  struct ethtool_drvinfo *ldv_16_ldv_param_1_10;
  struct ethtool_cmd *ldv_16_ldv_param_1_15;
  struct ethtool_ringparam *ldv_16_ldv_param_1_25;
  int ldv_16_ldv_param_1_16;
  unsigned char *ldv_16_ldv_param_2_24;
  struct ethtool_pauseparam *ldv_16_ldv_param_1_2;
  struct ethtool_ts_info *ldv_16_ldv_param_1_4;
  struct rtnl_link_stats64 *ldv_16_ldv_param_1_5;
  unsigned long long ldv_16_ldv_param_1_11;
  unsigned long long *ldv_16_ldv_param_2_7;
  struct ethtool_pauseparam *ldv_16_ldv_param_1_26;
  void *ldv_16_ldv_param_1_14;
  int ldv_16_ldv_param_1_8;
  struct ethtool_ringparam *ldv_16_ldv_param_1_12;
  unsigned int ldv_16_ldv_param_1_23;
  struct ethtool_wolinfo *ldv_16_ldv_param_1_20;
  struct ethtool_regs *ldv_16_ldv_param_1_21;
  struct ethtool_stats *ldv_16_ldv_param_1_6;
  unsigned long long ldv_16_ldv_param_1_9;
  struct ethtool_test *ldv_16_ldv_param_1_17;
  struct ethtool_wolinfo *ldv_16_ldv_param_1_19;
  struct net_device *ldv_16_container;
  void *ldv_16_ldv_param_2_22;
  unsigned long long *ldv_16_ldv_param_2_18;
  int tmp_18;
  
#line 1221 
  struct ldv_struct_random_allocationless_scenario_16 *data = (struct ldv_struct_random_allocationless_scenario_16 *)arg0;
  
#line 1226 
  if (data != (struct ldv_struct_random_allocationless_scenario_16 *)0) {
    
#line 1227 
    ldv_16_container = data->arg0;
    
#line 1228 
    ldv_free((void *)data);
  }
  else ;
  
#line 1236 
  goto ldv_call_16;
  
#line 1238 
  __retres = (void *)0;
  
#line 1238 
  goto return_label;
  ldv_call_16: 
#line 1241 
  ;
  
#line 1244 
  tmp_18 = ldv_undef_int();
  
#line 1244 
  if (tmp_18 != 0) {
    int tmp_0;
    
#line 1246 
    ldv_16_ldv_param_1_2 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    
#line 1249 
    tmp_0 = ldv_undef_int();
    
#line 1249 
    switch (tmp_0) {
      case 1: 
#line 1250 
      ;
      
#line 1253 
      ldv_emg_wrapper_nv_get_pauseparam_2(ldv_16_container,ldv_16_ldv_param_1_2);
      
#line 1256 
      goto ldv_44980;
      case 2: 
#line 1258 
      ;
      
#line 1261 
      ldv_emg_wrapper_nv_set_multicast_27(ldv_16_container);
      
#line 1264 
      goto ldv_44980;
      case 3: 
#line 1266 
      ;
      
#line 1269 
      ldv_emg_wrapper_nv_nway_reset_23(ldv_16_container);
      
#line 1272 
      goto ldv_44980;
      case 4: 
#line 1274 
      ;
      
#line 1276 
      ldv_16_ldv_param_1_26 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1281 
      ldv_emg_wrapper_nv_set_pauseparam_29(ldv_16_container,ldv_16_ldv_param_1_26);
      
#line 1285 
      ldv_free((void *)ldv_16_ldv_param_1_26);
      
#line 1288 
      goto ldv_44980;
      case 5: 
#line 1290 
      ;
      
#line 1293 
      ldv_emg_wrapper_nv_get_regs_len_26(ldv_16_container);
      
#line 1296 
      goto ldv_44980;
      case 6: 
#line 1298 
      ;
      
#line 1300 
      ldv_16_ldv_param_1_25 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1305 
      ldv_emg_wrapper_nv_get_ringparam_25(ldv_16_container,ldv_16_ldv_param_1_25);
      
#line 1309 
      ldv_free((void *)ldv_16_ldv_param_1_25);
      
#line 1312 
      goto ldv_44980;
      case 7: 
#line 1314 
      ;
      
#line 1316 
      ldv_16_ldv_param_2_24 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1321 
      ldv_emg_wrapper_nv_get_strings_4(ldv_16_container,ldv_16_ldv_param_1_23,ldv_16_ldv_param_2_24);
      
#line 1325 
      ldv_free((void *)ldv_16_ldv_param_2_24);
      
#line 1328 
      goto ldv_44980;
      case 8: 
#line 1330 
      ;
      
#line 1333 
      ldv_emg_wrapper_nv_poll_controller_28(ldv_16_container);
      
#line 1336 
      goto ldv_44980;
      case 9: 
#line 1338 
      ;
      
#line 1341 
      ldv_emg_wrapper_nv_tx_timeout_22(ldv_16_container);
      
#line 1344 
      goto ldv_44980;
      case 10: 
#line 1346 
      ;
      
#line 1348 
      ldv_16_ldv_param_1_21 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
      
#line 1349 
      ldv_16_ldv_param_2_22 = ldv_xmalloc_unknown_size(0UL);
      
#line 1354 
      ldv_emg_wrapper_nv_get_regs_21(ldv_16_container,ldv_16_ldv_param_1_21,ldv_16_ldv_param_2_22);
      
#line 1358 
      ldv_free((void *)ldv_16_ldv_param_1_21);
      
#line 1359 
      ldv_free(ldv_16_ldv_param_2_22);
      
#line 1362 
      goto ldv_44980;
      case 11: 
#line 1364 
      ;
      
#line 1366 
      ldv_16_ldv_param_1_20 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1371 
      ldv_emg_wrapper_nv_set_wol_20(ldv_16_container,ldv_16_ldv_param_1_20);
      
#line 1375 
      ldv_free((void *)ldv_16_ldv_param_1_20);
      
#line 1378 
      goto ldv_44980;
      case 12: 
#line 1380 
      ;
      
#line 1382 
      ldv_16_ldv_param_1_19 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1387 
      ldv_emg_wrapper_nv_get_wol_19(ldv_16_container,ldv_16_ldv_param_1_19);
      
#line 1391 
      ldv_free((void *)ldv_16_ldv_param_1_19);
      
#line 1394 
      goto ldv_44980;
      case 13: 
#line 1396 
      ;
      
#line 1398 
      ldv_16_ldv_param_2_18 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1399 
      ldv_16_ldv_param_1_17 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
      
#line 1404 
      ldv_emg_wrapper_nv_self_test_18(ldv_16_container,ldv_16_ldv_param_1_17,ldv_16_ldv_param_2_18);
      
#line 1408 
      ldv_free((void *)ldv_16_ldv_param_2_18);
      
#line 1409 
      ldv_free((void *)ldv_16_ldv_param_1_17);
      
#line 1412 
      goto ldv_44980;
      case 14: 
#line 1414 
      ;
      
#line 1420 
      ldv_emg_wrapper_nv_get_sset_count_17(ldv_16_container,ldv_16_ldv_param_1_16);
      
#line 1426 
      goto ldv_44980;
      case 15: 
#line 1428 
      ;
      
#line 1430 
      ldv_16_ldv_param_1_15 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
      
#line 1435 
      ldv_emg_wrapper_nv_get_settings_16(ldv_16_container,ldv_16_ldv_param_1_15);
      
#line 1439 
      ldv_free((void *)ldv_16_ldv_param_1_15);
      
#line 1442 
      goto ldv_44980;
      case 16: 
#line 1444 
      ;
      
#line 1446 
      ldv_16_ldv_param_1_14 = ldv_xmalloc_unknown_size(0UL);
      
#line 1451 
      ldv_emg_wrapper_nv_set_mac_address_15(ldv_16_container,ldv_16_ldv_param_1_14);
      
#line 1455 
      ldv_free(ldv_16_ldv_param_1_14);
      
#line 1458 
      goto ldv_44980;
      case 17: 
#line 1460 
      ;
      
#line 1462 
      ldv_16_ldv_param_0_13 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 1467 
      ldv_emg_wrapper_nv_start_xmit_optimized_14(ldv_16_ldv_param_0_13,ldv_16_container);
      
#line 1471 
      ldv_free((void *)ldv_16_ldv_param_0_13);
      
#line 1474 
      goto ldv_44980;
      case 18: 
#line 1476 
      ;
      
#line 1478 
      ldv_16_ldv_param_1_12 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1483 
      ldv_emg_wrapper_nv_set_ringparam_13(ldv_16_container,ldv_16_ldv_param_1_12);
      
#line 1487 
      ldv_free((void *)ldv_16_ldv_param_1_12);
      
#line 1490 
      goto ldv_44980;
      case 19: 
#line 1492 
      ;
      
#line 1498 
      ldv_emg_wrapper_nv_fix_features_12(ldv_16_container,ldv_16_ldv_param_1_11);
      
#line 1504 
      goto ldv_44980;
      case 20: 
#line 1506 
      ;
      
#line 1508 
      ldv_16_ldv_param_1_10 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1513 
      ldv_emg_wrapper_nv_get_drvinfo_11(ldv_16_container,ldv_16_ldv_param_1_10);
      
#line 1517 
      ldv_free((void *)ldv_16_ldv_param_1_10);
      
#line 1520 
      goto ldv_44980;
      case 21: 
#line 1522 
      ;
      
#line 1528 
      ldv_emg_wrapper_nv_set_features_10(ldv_16_container,ldv_16_ldv_param_1_9);
      
#line 1534 
      goto ldv_44980;
      case 22: 
#line 1536 
      ;
      
#line 1539 
      (*ldv_emg_alias_ethtool_op_get_link_9)(ldv_16_container);
      
#line 1542 
      goto ldv_44980;
      case 23: 
#line 1544 
      ;
      
#line 1550 
      ldv_emg_wrapper_nv_change_mtu_6(ldv_16_container,ldv_16_ldv_param_1_8);
      
#line 1556 
      goto ldv_44980;
      case 24: 
#line 1558 
      ;
      
#line 1560 
      ldv_16_ldv_param_1_6 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
      
#line 1561 
      ldv_16_ldv_param_2_7 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1566 
      ldv_emg_wrapper_nv_get_ethtool_stats_7(ldv_16_container,ldv_16_ldv_param_1_6,ldv_16_ldv_param_2_7);
      
#line 1570 
      ldv_free((void *)ldv_16_ldv_param_1_6);
      
#line 1571 
      ldv_free((void *)ldv_16_ldv_param_2_7);
      
#line 1574 
      goto ldv_44980;
      case 25: 
#line 1576 
      ;
      
#line 1579 
      (*ldv_emg_alias_eth_validate_addr_8)(ldv_16_container);
      
#line 1582 
      goto ldv_44980;
      case 26: 
#line 1584 
      ;
      
#line 1586 
      ldv_16_ldv_param_1_5 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
      
#line 1591 
      ldv_emg_wrapper_nv_get_stats64_5(ldv_16_container,ldv_16_ldv_param_1_5);
      
#line 1595 
      ldv_free((void *)ldv_16_ldv_param_1_5);
      
#line 1598 
      goto ldv_44980;
      case 27: 
#line 1600 
      ;
      
#line 1602 
      ldv_16_ldv_param_1_4 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
      
#line 1607 
      (*ldv_emg_alias_ethtool_op_get_ts_info_24)(ldv_16_container,ldv_16_ldv_param_1_4);
      
#line 1611 
      ldv_free((void *)ldv_16_ldv_param_1_4);
      
#line 1614 
      goto ldv_44980;
      case 28: 
#line 1616 
      ;
      
#line 1618 
      ldv_16_ldv_param_1_3 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
      
#line 1623 
      ldv_emg_wrapper_nv_set_settings_3(ldv_16_container,ldv_16_ldv_param_1_3);
      
#line 1627 
      ldv_free((void *)ldv_16_ldv_param_1_3);
      
#line 1630 
      goto ldv_44980;
      default: 
#line 1632 
      ;
      
#line 1632 
      __VERIFIER_assume(0);
    }
    ldv_44980: 
#line 1635 
    ;
    
#line 1635 
    ldv_free((void *)ldv_16_ldv_param_1_2);
    
#line 1642 
    goto ldv_call_16;
  }
  else {
    
#line 1650 
    __retres = (void *)0;
    
#line 1650 
    goto return_label;
  }
  
#line 1653 
  __retres = (void *)0;
  return_label: 
#line 1653 
                return __retres;
}


#line 1658  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_14(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_14_ret_val;
  int ldv_14_line;
  void *ldv_14_data;
  enum irqreturn (*ldv_14_thread)(int , void *);
  int tmp;
  
#line 1664 
  enum irqreturn (*ldv_14_callback)(int , void *) = & ldv_emg_wrapper_nv_nic_irq_tx_2;
  
#line 1667 
  struct ldv_struct_interrupt_scenario_13 *data = (struct ldv_struct_interrupt_scenario_13 *)arg0;
  
#line 1672 
  if (data != (struct ldv_struct_interrupt_scenario_13 *)0) {
    
#line 1673 
    ldv_14_line = data->arg0;
    
#line 1674 
    ldv_14_callback = data->arg1;
    
#line 1675 
    ldv_14_thread = data->arg2;
    
#line 1676 
    ldv_14_data = data->arg3;
    
#line 1677 
    ldv_free((void *)data);
  }
  else ;
  
#line 1683 
  ldv_switch_to_interrupt_context();
  
#line 1685 
  ldv_14_ret_val = ldv_emg_wrapper_nv_nic_irq_tx_2(ldv_14_line,ldv_14_data);
  
#line 1687 
  ldv_switch_to_process_context();
  
#line 1690 
  tmp = ldv_undef_int();
  
#line 1690 
  if (tmp != 0) {
    
#line 1692 
    __VERIFIER_assume(ldv_14_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 1696 
    if (ldv_14_thread != (enum irqreturn (*)(int , void *))0) 
#line 1698 
                                                              (*ldv_14_thread)(ldv_14_line,ldv_14_data); else ;
  }
  else 
#line 1705 
       __VERIFIER_assume(ldv_14_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 1714 
  __retres = (void *)0;
  
#line 1714 
  goto return_label;
  
#line 1716 
  __retres = (void *)0;
  return_label: 
#line 1716 
                return __retres;
}


#line 1721  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/nvidia/forcedeth.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  int __retres;
  struct timer_list *ldv_4_timer_list;
  int tmp_0;
  
#line 1728 
  tmp_0 = ldv_undef_int();
  
#line 1728 
  if (tmp_0 != 0) {
    
#line 1730 
    ldv_4_timer_list = arg0;
    
#line 1734 
    ldv_dispatch_instance_register_4_3(ldv_4_timer_list);
    
#line 1738 
    __retres = 0;
    
#line 1738 
    goto return_label;
  }
  else {
    int tmp;
    
#line 1745 
    tmp = ldv_undef_int_negative();
    
#line 1745 
    __retres = tmp;
    
#line 1745 
    goto return_label;
  }
  return_label: 
#line 1728 
                return __retres;
}


