/* Generated by Frama-C */

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef signed char s8;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned char u8;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned short u16;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef int s32;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned int u32;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef long long s64;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __be16;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __be32;

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u64 __le64;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __wsum;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 __kernel_dev_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_dev_t dev_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned short umode_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_pid_t pid_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef _Bool bool;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_uid32_t uid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_gid32_t gid_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_loff_t loff_t;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_size_t size_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_time_t time_t;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __s32 int32_t;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u8 uint8_t;

#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 uint32_t;

#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u64 uint64_t;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long sector_t;

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long blkcnt_t;

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 dma_addr_t;

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int gfp_t;

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int fmode_t;

#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int oom_flags_t;

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 phys_addr_t;

#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef phys_addr_t resource_size_t;

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};

#line 188 
struct hlist_node;

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
};

#line 14  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
struct kernel_symbol {
   unsigned long value ;
   char const *name ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
struct module;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_9 {
   unsigned int a ;
   unsigned int b ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_10 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base1 : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) type : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) s : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) dpl : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) p : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) limit : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) avl : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) g : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base2 : 8 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
union __anonunion_8 {
   struct __anonstruct_9 __anonCompField___anonunion_8_4 ;
   struct __anonstruct_10 __anonCompField___anonunion_8_5 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_8 __anonCompField_desc_struct_6 ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pteval_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_11 {
   pteval_t pte ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_11 pte_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_12 {
   pgdval_t pgd ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_12 pgd_t;

#line 361 
struct page;

#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;

#line 372 
struct file;

#line 385 
struct seq_file;

#line 423 
struct thread_struct;

#line 425 
struct mm_struct;

#line 426 
struct task_struct;

#line 427 
struct cpumask;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/spinlock_types.h"
struct qspinlock {
   atomic_t val ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
struct qrwlock {
   atomic_t cnts ;
   arch_spinlock_t lock ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/init.h"
typedef void (*ctor_fn_t)(void);

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
struct device;

#line 54 
struct net_device;

#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct file_operations;

#line 432 
struct completion;

#line 555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct timespec;

#line 103 
struct compat_timespec;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_futex_16 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_nanosleep_17 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};

#line 104 
struct pollfd;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_poll_18 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
union __anonunion_15 {
   struct __anonstruct_futex_16 futex ;
   struct __anonstruct_nanosleep_17 nanosleep ;
   struct __anonstruct_poll_18 poll ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_15 __anonCompField_restart_block_7 ;
};

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
union __anonunion_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_19 __anonCompField_math_emu_info_8 ;
};

#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[128U] ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/special_insns.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_29 {
   u64 rip ;
   u64 rdp ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_30 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_28 {
   struct __anonstruct_29 __anonCompField___anonunion_28_12 ;
   struct __anonstruct_30 __anonCompField___anonunion_28_13 ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_31 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_28 __anonCompField_fxregs_state_14 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_31 __anonCompField_fxregs_state_15 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 __reserved[464U] ;
};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned char fpstate_active ;
   unsigned char fpregs_active ;
   unsigned char counter ;
   union fpregs_state state ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct seq_operations;

#line 369 
struct perf_event;

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   struct fpu fpu ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
struct lockdep_map;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const *name ;
   int cpu ;
   unsigned long ip ;
};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))) class_idx : 13 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_context : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) trylock : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) read : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) check : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hardirqs_off : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(12))) references : 12 ;
   unsigned int pin_count ;
};

#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct __anonstruct_35 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
union __anonunion_34 {
   struct raw_spinlock rlock ;
   struct __anonstruct_35 __anonCompField___anonunion_34_17 ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_34 __anonCompField_spinlock_18 ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_36 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_36 rwlock_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jump_label.h"
struct jump_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct mutex;

#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/stat.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_45 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_45 seqlock_t;

#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highuid.h"
struct user_namespace;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kuid_t_46 {
   uid_t val ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_46 kuid_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kgid_t_47 {
   gid_t val ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_47 kgid_t;

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct vm_area_struct;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_48 {
   unsigned long bits[16U] ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_48 nodemask_t;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   void *magic ;
   struct lockdep_map dep_map ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};

#line 193 
struct rw_semaphore;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct rw_semaphore {
   long count ;
   struct list_head wait_list ;
   raw_spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct task_struct *owner ;
   struct lockdep_map dep_map ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwsem.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};

#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
typedef union ktime ktime_t;

#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct notifier_block;

#line 1121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(unsigned long ) ;
   unsigned long data ;
   u32 flags ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};

#line 238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct hrtimer;

#line 239 
enum hrtimer_restart;

#line 240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};

#line 837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/sysctl.h"
struct ctl_table;

#line 838 
struct nsproxy;

#line 839 
struct ctl_table_root;

#line 840 
struct ctl_table_header;

#line 841 
struct ctl_dir;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);

#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table {
   char const *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct __anonstruct_50 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
union __anonunion_49 {
   struct __anonstruct_50 __anonCompField___anonunion_49_19 ;
   struct callback_head rcu ;
};

#line 122 
struct ctl_table_set;

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_49 __anonCompField_ctl_table_header_20 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};

#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};

#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *, struct nsproxy *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};

#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct workqueue_struct;

#line 260 
struct work_struct;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/x86_init.h"
struct pci_dev;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_message {
   int event ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
typedef struct pm_message pm_message_t;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};

#line 320 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};

#line 327 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};

#line 335 
struct wakeup_source;

#line 336 
struct wake_irq;

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};

#line 553 
struct dev_pm_qos;

#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) can_wakeup : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) async_suspend : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_prepared : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_noirq_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_late_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_children : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) early_init : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) direct_complete : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_path : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) disable_depth : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) idle_notification : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) request_pending : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) deferred_resume : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) run_wake : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_auto : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_callbacks : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_safe : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) use_autosuspend : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) timer_autosuspends : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};

#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/topology.h"
struct pci_bus;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct ldt_struct;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_115 {
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   atomic_t perf_rdpmc_allowed ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_115 mm_context_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/xen/features.h"
struct bio_vec;

#line 1281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct llist_node;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmod.h"
struct cred;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/elf.h"
struct inode;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};

#line 66 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_148 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_149 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
union __anonunion_147 {
   struct __anonstruct_148 __anonCompField___anonunion_147_33 ;
   struct __anonstruct_149 __anonCompField___anonunion_147_34 ;
};

#line 73 
struct uprobe;

#line 73 
struct return_instance;

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_147 __anonCompField_uprobe_task_35 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct xol_area;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};

#line 133 
struct address_space;

#line 134 
struct mem_cgroup;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
typedef void compound_page_dtor(struct page *);

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_150 {
   struct address_space *mapping ;
   void *s_mem ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_152 {
   unsigned long index ;
   void *freelist ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_156 {
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) inuse : 16 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(15))) objects : 15 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) frozen : 1 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_155 {
   atomic_t _mapcount ;
   struct __anonstruct_156 __anonCompField___anonunion_155_38 ;
   int units ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_154 {
   union __anonunion_155 __anonCompField___anonstruct_154_39 ;
   atomic_t _count ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_153 {
   unsigned long counters ;
   struct __anonstruct_154 __anonCompField___anonunion_153_40 ;
   unsigned int active ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_151 {
   union __anonunion_152 __anonCompField___anonstruct_151_37 ;
   union __anonunion_153 __anonCompField___anonstruct_151_41 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_158 {
   struct page *next ;
   int pages ;
   int pobjects ;
};

#line 32 
struct slab;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_159 {
   compound_page_dtor *compound_dtor ;
   unsigned long compound_order ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_157 {
   struct list_head lru ;
   struct __anonstruct_158 __anonCompField___anonunion_157_43 ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   struct __anonstruct_159 __anonCompField___anonunion_157_44 ;
   pgtable_t pmd_huge_pte ;
};

#line 32 
struct kmem_cache;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_160 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_150 __anonCompField_page_36 ;
   struct __anonstruct_151 __anonCompField_page_42 ;
   union __anonunion_157 __anonCompField_page_45 ;
   union __anonunion_160 __anonCompField_page_46 ;
   struct mem_cgroup *mem_cgroup ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_shared_161 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};

#line 257 
struct anon_vma;

#line 257 
struct vm_operations_struct;

#line 257 
struct mempolicy;

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_161 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct const *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};

#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};

#line 357 
struct kioctx_table;

#line 358 
struct linux_binfmt;

#line 358 
struct mmu_notifier_mm;

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u32 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   atomic_long_t nr_pmds ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
   void *bd_addr ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;

#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
union __anonunion_166 {
   unsigned long bitmap[4U] ;
   struct callback_head callback_head ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
struct idr_layer {
   int prefix ;
   int layer ;
   struct idr_layer *ary[256U] ;
   int count ;
   union __anonunion_166 __anonCompField_idr_layer_47 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   int layers ;
   int cur ;
   spinlock_t lock ;
   int id_free_cnt ;
   struct idr_layer *id_free ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};

#line 185 
struct dentry;

#line 186 
struct iattr;

#line 187 
struct super_block;

#line 188 
struct file_system_type;

#line 189 
struct kernfs_open_node;

#line 190 
struct kernfs_iattrs;

#line 213 
struct kernfs_root;

#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};

#line 89 
struct kernfs_ops;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops const *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
union __anonunion_171 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const *name ;
   struct rb_node rb ;
   void const *ns ;
   unsigned int hash ;
   union __anonunion_171 __anonCompField_kernfs_node_48 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root *, int *, char *) ;
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char const *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char const *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct const *vm_ops ;
};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};

#line 477 
struct sock;

#line 478 
struct kobject;

#line 479 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};

#line 485  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const *(*netlink_ns)(struct sock *) ;
   void const *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct bin_attribute;

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject_ns.h"
struct attribute {
   char const *name ;
   umode_t mode ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct attribute_group {
   char const *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char const *, size_t ) ;
};

#line 509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset;

#line 52 
struct kobj_type;

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobject {
   char const *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_initialized : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_in_sysfs : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_add_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_remove_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) uevent_suppress : 1 ;
};

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops const *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations const *(*child_ns_type)(struct kobject *) ;
   void const *(*namespace)(struct kobject *) ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const filter)(struct kset *, struct kobject *) ;
   char const *(* const name)(struct kset *, struct kobject *) ;
   int (* const uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops const *uevent_ops ;
};

#line 223 
struct kernel_param;

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const *, struct kernel_param const *) ;
   int (*get)(char *, struct kernel_param const *) ;
   void (*free)(void *) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string;

#line 62 
struct kparam_array;

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
union __anonunion_172 {
   void *arg ;
   struct kparam_string const *str ;
   struct kparam_array const *arr ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kernel_param {
   char const *name ;
   struct module *mod ;
   struct kernel_param_ops const *ops ;
   u16 const perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_172 __anonCompField_kernel_param_49 ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops const *ops ;
   void *elem ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree_latch.h"
struct mod_arch_specific {
   
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_param_attrs;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char const *, size_t ) ;
   void (*setup)(struct module *, char const *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};

#line 74 
struct exception_table_entry;

#line 290 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};

#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};

#line 304 
struct module_sect_attrs;

#line 304 
struct module_notes_attrs;

#line 304 
struct tracepoint;

#line 304 
struct trace_event_call;

#line 304 
struct trace_enum_map;

#line 304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const *version ;
   char const *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol const *syms ;
   unsigned long const *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol const *gpl_syms ;
   unsigned long const *gpl_crcs ;
   struct kernel_symbol const *unused_syms ;
   unsigned long const *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol const *unused_gpl_syms ;
   unsigned long const *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol const *gpl_future_syms ;
   unsigned long const *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_tree_node mtn_core ;
   struct mod_tree_node mtn_init ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_enum_map **trace_enums ;
   unsigned int num_trace_enums ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp_alive ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const *data ;
};

#line 652 
struct klist_node;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};

#line 67 
struct path;

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations const *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};

#line 222 
struct pinctrl;

#line 223 
struct pinctrl_state;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dma_map_ops;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/device.h"
struct device_driver;

#line 16 
struct driver_private;

#line 17 
struct class;

#line 18 
struct subsys_private;

#line 19 
struct bus_type;

#line 20 
struct device_node;

#line 21 
struct fwnode_handle;

#line 22 
struct iommu_ops;

#line 23 
struct iommu_group;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct bus_type {
   char const *name ;
   char const *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group const **bus_groups ;
   struct attribute_group const **dev_groups ;
   struct attribute_group const **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct iommu_ops const *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};

#line 139 
struct device_type;

#line 197 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_driver {
   char const *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id const *of_match_table ;
   struct acpi_device_id const *acpi_match_table ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group const **groups ;
   struct dev_pm_ops const *pm ;
   struct driver_private *p ;
};

#line 353 
struct class_attribute;

#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class {
   char const *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group const **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct kobj_ns_type_operations const *ns_type ;
   void const *(*namespace)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct subsys_private *p ;
};

#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *, struct class_attribute *, char *) ;
   ssize_t (*store)(struct class *, struct class_attribute *, char const *, size_t ) ;
};

#line 514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_type {
   char const *name ;
   struct attribute_group const **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops const *pm ;
};

#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char const *, size_t ) ;
};

#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};

#line 684 
struct dma_coherent_mem;

#line 684 
struct cma;

#line 684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const *init_name ;
   struct device_type const *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group const **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline_disabled : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline : 1 ;
};

#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct wakeup_source {
   char const *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) active : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) autosleep_enabled : 1 ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};

#line 4  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sem_undo_list;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/shm.h"
struct user_struct;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_183 {
   unsigned long sig[1U] ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_183 sigset_t;

#line 25 
struct siginfo;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int );

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};

#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_185 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_186 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_187 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_188 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_190 {
   void *_lower ;
   void *_upper ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_189 {
   void *_addr ;
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_190 _addr_bnd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_191 {
   long _band ;
   int _fd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_192 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_184 {
   int _pad[28U] ;
   struct __anonstruct__kill_185 _kill ;
   struct __anonstruct__timer_186 _timer ;
   struct __anonstruct__rt_187 _rt ;
   struct __anonstruct__sigchld_188 _sigchld ;
   struct __anonstruct__sigfault_189 _sigfault ;
   struct __anonstruct__sigpoll_191 _sigpoll ;
   struct __anonstruct__sigsys_192 _sigsys ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_184 _sifields ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};

#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};

#line 443 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
};

#line 450 
struct pid_namespace;

#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp_filter;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct rt_mutex_waiter;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};

#line 50 
struct hrtimer_clock_base;

#line 51 
struct hrtimer_cpu_base;

#line 60 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
};

#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   seqcount_t seq ;
   struct hrtimer *running ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   bool migration_enabled ;
   bool nohz_active ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_hrtirq : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hres_active : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hang_detected : 1 ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   unsigned int nr_events ;
   unsigned int nr_retries ;
   unsigned int nr_hangs ;
   unsigned int max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array_ptr;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef int32_t key_serial_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef uint32_t key_perm_t;

#line 35 
struct key;

#line 36 
struct signal_struct;

#line 37 
struct key_type;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct keyring_index_key {
   struct key_type *type ;
   char const *description ;
   size_t desc_len ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_199 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};

#line 123 
struct key_user;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_200 {
   time_t expiry ;
   time_t revoked_at ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct __anonstruct_202 {
   struct key_type *type ;
   char *description ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_201 {
   struct keyring_index_key index_key ;
   struct __anonstruct_202 __anonCompField___anonunion_201_52 ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_type_data_203 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_payload_205 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_204 {
   union __anonunion_payload_205 payload ;
   struct assoc_array keys ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_199 __anonCompField_key_50 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_200 __anonCompField_key_51 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion_201 __anonCompField_key_53 ;
   union __anonunion_type_data_203 type_data ;
   union __anonunion_204 __anonCompField_key_54 ;
};

#line 358 
struct audit_context;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};

#line 369 
struct percpu_ref;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref *);

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) force_atomic : 1 ;
   struct callback_head rcu ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup;

#line 28 
struct cgroup_root;

#line 29 
struct cgroup_subsys;

#line 30 
struct cgroup_taskset;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   struct list_head sibling ;
   struct list_head children ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head cgrp_links ;
   struct cgroup *dfl_cgrp ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct css_set *mg_dst_cset ;
   struct list_head e_cset_node[12U] ;
   struct callback_head callback_head ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int id ;
   int populated_cnt ;
   struct kernfs_node *kn ;
   struct kernfs_node *procs_kn ;
   struct kernfs_node *populated_kn ;
   unsigned int subtree_control ;
   unsigned int child_subsys_mask ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[12U] ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
};

#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   struct lock_class_key lockdep_key ;
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_e_css_changed)(struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct cgroup_subsys_state *, struct cgroup_subsys_state *, struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   int id ;
   char const *name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct futex_pi_state;

#line 129 
struct robust_list_head;

#line 130 
struct bio_list;

#line 131 
struct fs_struct;

#line 132 
struct perf_event_context;

#line 133 
struct blk_plug;

#line 135 
struct nameidata;

#line 188 
struct cfs_rq;

#line 189 
struct task_group;

#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};

#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};

#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};

#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};

#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};

#line 563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
   int running ;
};

#line 620 
struct autogroup;

#line 621 
struct tty_struct;

#line 621 
struct taskstats;

#line 621 
struct tty_audit_buf;

#line 621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_child_subreaper : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};

#line 802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};

#line 845 
struct backing_dev_info;

#line 846 
struct reclaim_state;

#line 847  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};

#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   u64 blkio_start ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   u64 freepages_start ;
   u64 freepages_delay ;
   u32 freepages_count ;
};

#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};

#line 1138 
struct io_context;

#line 1172 
struct pipe_inode_info;

#line 1173 
struct uts_namespace;

#line 1174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};

#line 1181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_avg {
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
   unsigned long utilization_avg_contrib ;
   u32 runnable_avg_sum ;
   u32 avg_period ;
   u32 running_avg_sum ;
};

#line 1206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};

#line 1241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};

#line 1273 
struct rt_rq;

#line 1273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};

#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   int dl_yielded ;
   struct hrtimer dl_timer ;
};

#line 1355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) may_oom : 1 ;
};

#line 1779 
struct sched_class;

#line 1779 
struct files_struct;

#line 1779 
struct compat_robust_list_head;

#line 1779 
struct numa_group;

#line 1779 
struct ftrace_ret_stack;

#line 1779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_struct {
   long volatile state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class const *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   unsigned long rcu_tasks_nvcsw ;
   bool rcu_tasks_holdout ;
   struct list_head rcu_tasks_holdout_list ;
   int rcu_tasks_idle_cpu ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   u32 vmacache_seqnum ;
   struct vm_area_struct *vmacache[4U] ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_execve : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_iowait : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_reset_on_fork : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_contributes_to_load : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_migrated : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memcg_kmem_skip_account : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) brk_randomized : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred const *real_cred ;
   struct cred const *cred ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct thread_struct thread ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct hotplug_slot;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef int pci_power_t;

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

#line 138 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;

#line 249 
struct pcie_link_state;

#line 250 
struct pci_vpd;

#line 251 
struct pci_sriov;

#line 252 
struct pci_ats;

#line 253 
struct proc_dir_entry;

#line 253 
struct pci_driver;

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
union __anonunion_220 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   u8 dma_alias_devfn ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   u8 pm_cap ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) pme_support : 5 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_interrupt : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_poll : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d1_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d2_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d1d2 : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d3cold_allowed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) mmio_always_on : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_prepared : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_hotplug : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) transparent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) multifunction : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_busmaster : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_64bit_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) block_cfg_access : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_parity_status : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_reroute_variant : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msi_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msix_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ari_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_freset : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_saved : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_physfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_virtfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) reset_fn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_hotplug_bridge : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first_valid : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_intx_masking : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) io_window_1k : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_secondary_link : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct attribute_group const **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_220 __anonCompField_pci_dev_58 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
};

#line 442 
struct pci_ops;

#line 442 
struct msi_controller;

#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
};

#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_ops {
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};

#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_notify)(struct pci_dev *, bool ) ;
   void (*resume)(struct pci_dev *) ;
};

#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char const *name ;
   struct pci_device_id const *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id const *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*suspend_late)(struct pci_dev *, pm_message_t ) ;
   int (*resume_early)(struct pci_dev *) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers const *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   int nid ;
   struct mem_cgroup *memcg ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page_ext.h"
struct file_ra_state;

#line 65 
struct writeback_control;

#line 66 
struct bdi_writeback;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *cow_page ;
   struct page *page ;
   unsigned long max_pgoff ;
   pte_t *pte ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*fault)(struct vm_area_struct *, struct vm_fault *) ;
   void (*map_pages)(struct vm_area_struct *, struct vm_fault *) ;
   int (*page_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*pfn_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char const *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};

#line 1249 
struct kvec;

#line 2291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmapool.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pci_64.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   int (*mapping_error)(struct device *, dma_addr_t ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   int (*set_dma_mask)(struct device *, u64 ) ;
   int is_phys ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/prefetch.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
union __anonunion_221 {
   struct iovec const *iov ;
   struct kvec const *kvec ;
   struct bio_vec const *bvec ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct iov_iter {
   int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_221 __anonCompField_iov_iter_59 ;
   unsigned long nr_segs ;
};

#line 1182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};

#line 38 
struct kiocb;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_223 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_223 sync_serial_settings;

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_224 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_224 te1_settings;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_225 {
   unsigned short encoding ;
   unsigned short parity ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_225 raw_hdlc_proto;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_226 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_226 fr_proto;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_227 {
   unsigned int dlci ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_227 fr_proto_pvc;

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_228 {
   unsigned int dlci ;
   char master[16U] ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_228 fr_proto_pvc_info;

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_229 {
   unsigned int interval ;
   unsigned int timeout ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_229 cisco_proto;

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_230 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_230 ifs_ifsu ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_231 {
   char ifrn_name[16U] ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_232 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_231 ifr_ifrn ;
   union __anonunion_ifr_ifru_232 ifr_ifru ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_node;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct __anonstruct_237 {
   spinlock_t lock ;
   int count ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
union __anonunion_236 {
   struct __anonstruct_237 __anonCompField___anonunion_236_60 ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion_236 __anonCompField_lockref_61 ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct vfsmount;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct __anonstruct_239 {
   u32 hash ;
   u32 len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
union __anonunion_238 {
   struct __anonstruct_239 __anonCompField___anonunion_238_62 ;
   u64 hash_len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct qstr {
   union __anonunion_238 __anonCompField_qstr_63 ;
   unsigned char const *name ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
union __anonunion_d_u_240 {
   struct hlist_node d_alias ;
   struct callback_head d_rcu ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations const *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_240 d_u ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry const *, struct qstr *) ;
   int (*d_compare)(struct dentry const *, struct dentry const *, unsigned int , char const *, struct qstr const *) ;
   int (*d_delete)(struct dentry const *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct dentry *, bool ) ;
   struct inode *(*d_select_inode)(struct dentry *, unsigned int ) ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/path.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_memcg {
   struct list_lru_one *lru[0U] ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
};

#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct __anonstruct_244 {
   struct radix_tree_node *parent ;
   void *private_data ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
union __anonunion_243 {
   struct __anonstruct_244 __anonCompField___anonunion_243_64 ;
   struct callback_head callback_head ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_node {
   unsigned int path ;
   unsigned int count ;
   union __anonunion_243 __anonCompField_radix_tree_node_65 ;
   struct list_head private_list ;
   void *slots[64U] ;
   unsigned long tags[3U][1U] ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
};

#line 47 
struct block_device;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fs.h"
struct export_operations;

#line 62 
struct poll_table_struct;

#line 63 
struct kstatfs;

#line 64 
struct swap_info_struct;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dqblk_xfs.h"
struct dquot;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
struct __anonstruct_kprojid_t_248 {
   projid_t val ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_248 kprojid_t;

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
typedef long long qsize_t;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
union __anonunion_249 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kqid {
   union __anonunion_249 __anonCompField_kqid_67 ;
   enum quota_type type ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};

#line 206 
struct quota_format_type;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};

#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};

#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
};

#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};

#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};

#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};

#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};

#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};

#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops const *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};

#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops const *ops[3U] ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
};

#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *, loff_t ) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};

#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   atomic_t i_mmap_writable ;
   struct rb_root i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrshadows ;
   unsigned long writeback_index ;
   struct address_space_operations const *a_ops ;
   unsigned long flags ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};

#line 443 
struct request_queue;

#line 444 
struct hd_struct;

#line 444 
struct gendisk;

#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};

#line 560 
struct posix_acl;

#line 561 
struct inode_operations;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_252 {
   unsigned int const i_nlink ;
   unsigned int __i_nlink ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_253 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};

#line 561 
struct file_lock_context;

#line 561 
struct cdev;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_254 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations const *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_252 __anonCompField_inode_68 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_253 __anonCompField_inode_69 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   struct file_operations const *i_fop ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_254 __anonCompField_inode_70 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   void *i_private ;
};

#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};

#line 815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_f_u_255 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file {
   union __anonunion_f_u_255 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations const *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred const *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
};

#line 923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
typedef void *fl_owner_t;

#line 924 
struct file_lock;

#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};

#line 931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock *, struct file_lock *) ;
   unsigned long (*lm_owner_key)(struct file_lock *) ;
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};

#line 947 
struct net;

#line 952 
struct nlm_lockowner;

#line 953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};

#line 19 
struct fasync_struct;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_257 {
   struct list_head link ;
   int state ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_256 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_257 afs ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations const *fl_ops ;
   struct lock_manager_operations const *fl_lmops ;
   union __anonunion_fl_u_256 fl_u ;
};

#line 1005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};

#line 1221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};

#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};

#line 1287 
struct super_operations;

#line 1287 
struct xattr_handler;

#line 1287 
struct mtd_info;

#line 1287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations const *s_op ;
   struct dquot_operations const *dq_op ;
   struct quotactl_ops const *s_qcop ;
   struct export_operations const *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler const **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations const *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   int s_stack_depth ;
};

#line 1526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};

#line 1540 
struct dir_context;

#line 1565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char const *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};

#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char const *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   unsigned int (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*mremap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*aio_fsync)(struct kiocb *, int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
};

#line 1633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char const *(*follow_link)(struct dentry *, void **) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   void (*put_link)(struct inode *, void *) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char const *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *) ;
   int (*rename2)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct vfsmount *, struct dentry *, struct kstat *) ;
   int (*setxattr)(struct dentry *, char const *, void const *, size_t , int ) ;
   ssize_t (*getxattr)(struct dentry *, char const *, void *, size_t ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*removexattr)(struct dentry *, char const *) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t , int *) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
};

#line 1687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char const *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};

#line 1926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_system_type {
   char const *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type *, int , char const *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};

#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/random.h"
enum ldv_25479 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
typedef enum ldv_25479 socket_state;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops;

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops const *ops ;
};

#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int ) ;
   int (*getname)(struct socket *, struct sockaddr *, int *, int ) ;
   unsigned int (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
struct in6_addr;

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct sk_buff;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
typedef u64 netdev_features_t;

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
union __anonunion_in6_u_272 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
struct in6_addr {
   union __anonunion_in6_u_272 in6_u ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/in6.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buf_operations;

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations const *ops ;
   unsigned int flags ;
   unsigned long private ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int nrbufs ;
   unsigned int curbuf ;
   unsigned int buffers ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int waiting_writers ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int can_merge ;
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct napi_struct;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct nf_conntrack {
   atomic_t use ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
enum ldv_26325 {
    BRNF_PROTO_UNCHANGED = 0,
    BRNF_PROTO_8021Q = 1,
    BRNF_PROTO_PPPOE = 2
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_277 {
   struct net_device *physoutdev ;
   char neigh_header[8U] ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_278 {
   __be32 ipv4_daddr ;
   struct in6_addr ipv6_daddr ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   enum ldv_26325 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) orig_proto : 8 ;
   bool pkt_otherhost ;
   __u16 frag_max_size ;
   unsigned int mask ;
   struct net_device *physindev ;
   union __anonunion_277 __anonCompField_nf_bridge_info_74 ;
   union __anonunion_278 __anonCompField_nf_bridge_info_75 ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};

#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_281 {
   u32 stamp_us ;
   u32 stamp_jiffies ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_280 {
   u64 v64 ;
   struct __anonstruct_281 __anonCompField___anonunion_280_76 ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_mstamp {
   union __anonunion_280 __anonCompField_skb_mstamp_77 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_284 {
   ktime_t tstamp ;
   struct skb_mstamp skb_mstamp ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_283 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_284 __anonCompField___anonstruct_283_78 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_282 {
   struct __anonstruct_283 __anonCompField___anonunion_282_79 ;
   struct rb_node rbnode ;
};

#line 457 
struct sec_path;

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_286 {
   __u16 csum_start ;
   __u16 csum_offset ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_285 {
   __wsum csum ;
   struct __anonstruct_286 __anonCompField___anonunion_285_81 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_287 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_288 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_289 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_282 __anonCompField_sk_buff_80 ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
   struct sec_path *sp ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cloned : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nohdr : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) fclone : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) peeked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) head_frag : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) xmit_more : 1 ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pkt_type : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pfmemalloc : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_df : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) nfctinfo : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nf_trace : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ip_summed : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ooo_okay : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l4_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sw_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_fcs : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encapsulation : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encap_hdr_csum : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_complete_sw : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) csum_level : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_bad : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ndisc_nodetype : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ipvs_property : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) inner_protocol_type : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) remcsum_offload : 1 ;
   __u16 tc_index ;
   __u16 tc_verd ;
   union __anonunion_285 __anonCompField_sk_buff_82 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_287 __anonCompField_sk_buff_83 ;
   __u32 secmark ;
   union __anonunion_288 __anonCompField_sk_buff_84 ;
   union __anonunion_289 __anonCompField_sk_buff_85 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};

#line 718 
struct dst_entry;

#line 767 
struct rtable;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};

#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};

#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};

#line 438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};

#line 475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};

#line 503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};

#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};

#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};

#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};

#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};

#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};

#line 748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};

#line 759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};

#line 778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};

#line 828  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};

#line 999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};

#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device *, struct ethtool_cmd *) ;
   int (*set_settings)(struct net_device *, struct ethtool_cmd *) ;
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 const *, u8 const *, u8 const ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable const *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable const *, void const *) ;
};

#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct prot_inuse;

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct u64_stats_sync {
   
};

#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[115U] ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/packet.h"
struct netns_frags {
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct ipv4_devconf;

#line 185 
struct fib_rules_ops;

#line 186 
struct fib_table;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};

#line 29 
struct inet_peer_base;

#line 29 
struct xt_table;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};

#line 113 
struct neighbour;

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry const *) ;
   unsigned int (*mtu)(struct dst_entry const *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry const *, struct sk_buff *, void const *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct ipv6_devconf;

#line 39 
struct rt6_info;

#line 39 
struct rt6_statistics;

#line 39 
struct fib6_table;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct netns_frags frags ;
};

#line 20 
struct sctp_mib;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct nf_logger;

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger const *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct ebt_table;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};

#line 72 
struct ip_conntrack_stat;

#line 72 
struct nf_ct_event_notifier;

#line 72 
struct nf_exp_event_notifier;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   seqcount_t generation ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};

#line 114 
struct nft_af_info;

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   struct nft_af_info *netdev ;
   unsigned int base_seq ;
   u8 gencursor ;
};

#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};

#line 672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct flow_cache_percpu {
   struct hlist_head *hash_table ;
   int hash_count ;
   u32 hash_rnd ;
   int hash_rnd_recalc ;
   struct tasklet_struct flush_tasklet ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct flow_cache {
   u32 hash_shift ;
   struct flow_cache_percpu *percpu ;
   struct notifier_block hotcpu_notifier ;
   int low_watermark ;
   int high_watermark ;
   struct timer_list rnd_timer ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
   struct flow_cache flow_cache_global ;
   atomic_t flow_cache_genid ;
   struct list_head flow_cache_gc_list ;
   spinlock_t flow_cache_gc_lock ;
   struct work_struct flow_cache_gc_work ;
   struct work_struct flow_cache_flush_work ;
   struct mutex flow_flush_sem ;
};

#line 88 
struct mpls_route;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_mpls {
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct proc_ns_operations;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations const *ops ;
   unsigned int inum ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net_generic;

#line 12 
struct netns_ipvs;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   atomic64_t cookie_gen ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   spinlock_t nsid_lock ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_306 {
   struct net *net ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_306 possible_net_t;

#line 376 
enum fwnode_type {
    FWNODE_INVALID = 0,
    FWNODE_OF = 1,
    FWNODE_ACPI = 2,
    FWNODE_PDATA = 3
};

#line 383  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct fwnode_handle {
   enum fwnode_type type ;
   struct fwnode_handle *secondary ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
typedef u32 phandle;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
   struct bin_attribute attr ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct device_node {
   char const *name ;
   char const *type ;
   phandle phandle ;
   char const *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
enum ldv_29086 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_MII = 1,
    PHY_INTERFACE_MODE_GMII = 2,
    PHY_INTERFACE_MODE_SGMII = 3,
    PHY_INTERFACE_MODE_TBI = 4,
    PHY_INTERFACE_MODE_REVMII = 5,
    PHY_INTERFACE_MODE_RMII = 6,
    PHY_INTERFACE_MODE_RGMII = 7,
    PHY_INTERFACE_MODE_RGMII_ID = 8,
    PHY_INTERFACE_MODE_RGMII_RXID = 9,
    PHY_INTERFACE_MODE_RGMII_TXID = 10,
    PHY_INTERFACE_MODE_RTBI = 11,
    PHY_INTERFACE_MODE_SMII = 12,
    PHY_INTERFACE_MODE_XGMII = 13,
    PHY_INTERFACE_MODE_MOCA = 14,
    PHY_INTERFACE_MODE_QSGMII = 15,
    PHY_INTERFACE_MODE_MAX = 16
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
typedef enum ldv_29086 phy_interface_t;

#line 126 
enum ldv_29139 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};

#line 133 
struct phy_device;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct mii_bus {
   char const *name ;
   char id[17U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_29139 state ;
   struct device dev ;
   struct phy_device *phy_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int *irq ;
};

#line 214 
enum phy_state {
    PHY_DOWN = 0,
    PHY_STARTING = 1,
    PHY_READY = 2,
    PHY_PENDING = 3,
    PHY_UP = 4,
    PHY_AN = 5,
    PHY_RUNNING = 6,
    PHY_NOLINK = 7,
    PHY_FORCING = 8,
    PHY_CHANGELINK = 9,
    PHY_HALTED = 10,
    PHY_RESUMING = 11
};

#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};

#line 323 
struct phy_driver;

#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_device {
   struct phy_driver *drv ;
   struct mii_bus *bus ;
   struct device dev ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   bool is_c45 ;
   bool is_internal ;
   bool has_fixups ;
   bool suspended ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int addr ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   int link ;
   u32 interrupts ;
   u32 supported ;
   u32 advertising ;
   u32 lp_advertising ;
   int autoneg ;
   int link_timeout ;
   int irq ;
   void *priv ;
   struct work_struct phy_queue ;
   struct delayed_work state_queue ;
   atomic_t irq_disable ;
   struct mutex lock ;
   struct net_device *attached_dev ;
   void (*adjust_link)(struct net_device *) ;
};

#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_driver {
   u32 phy_id ;
   char *name ;
   unsigned int phy_id_mask ;
   u32 features ;
   u32 flags ;
   void const *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd_indirect)(struct phy_device *, int , int , int ) ;
   void (*write_mmd_indirect)(struct phy_device *, int , int , int , u32 ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   struct device_driver driver ;
};

#line 803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct fixed_phy_status {
   int link ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
enum dsa_tag_protocol {
    DSA_TAG_PROTO_NONE = 0,
    DSA_TAG_PROTO_DSA = 1,
    DSA_TAG_PROTO_TRAILER = 2,
    DSA_TAG_PROTO_EDSA = 3,
    DSA_TAG_PROTO_BRCM = 4
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
struct dsa_chip_data {
   struct device *host_dev ;
   int sw_addr ;
   int eeprom_len ;
   struct device_node *of_node ;
   char *port_names[12U] ;
   struct device_node *port_dn[12U] ;
   s8 *rtable ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   struct net_device *of_netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};

#line 84 
struct packet_type;

#line 85 
struct dsa_switch;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   int (*rcv)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   enum dsa_tag_protocol tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};

#line 123 
struct dsa_switch_driver;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   enum dsa_tag_protocol tag_protocol ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct device *master_dev ;
   char hwmon_name[24U] ;
   struct device *hwmon_dev ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   u32 phys_mii_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   enum dsa_tag_protocol tag_protocol ;
   int priv_size ;
   char *(*probe)(struct device *, int ) ;
   int (*setup)(struct dsa_switch *) ;
   int (*set_addr)(struct dsa_switch *, u8 *) ;
   u32 (*get_phy_flags)(struct dsa_switch *, int ) ;
   int (*phy_read)(struct dsa_switch *, int , int ) ;
   int (*phy_write)(struct dsa_switch *, int , int , u16 ) ;
   void (*poll_link)(struct dsa_switch *) ;
   void (*adjust_link)(struct dsa_switch *, int , struct phy_device *) ;
   void (*fixed_link_update)(struct dsa_switch *, int , struct fixed_phy_status *) ;
   void (*get_strings)(struct dsa_switch *, int , uint8_t *) ;
   void (*get_ethtool_stats)(struct dsa_switch *, int , uint64_t *) ;
   int (*get_sset_count)(struct dsa_switch *) ;
   void (*get_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*set_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*suspend)(struct dsa_switch *) ;
   int (*resume)(struct dsa_switch *) ;
   int (*port_enable)(struct dsa_switch *, int , struct phy_device *) ;
   void (*port_disable)(struct dsa_switch *, int , struct phy_device *) ;
   int (*set_eee)(struct dsa_switch *, int , struct phy_device *, struct ethtool_eee *) ;
   int (*get_eee)(struct dsa_switch *, int , struct ethtool_eee *) ;
   int (*get_temp)(struct dsa_switch *, int *) ;
   int (*get_temp_limit)(struct dsa_switch *, int *) ;
   int (*set_temp_limit)(struct dsa_switch *, int ) ;
   int (*get_temp_alarm)(struct dsa_switch *, bool *) ;
   int (*get_eeprom_len)(struct dsa_switch *) ;
   int (*get_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*get_regs_len)(struct dsa_switch *, int ) ;
   void (*get_regs)(struct dsa_switch *, int , struct ethtool_regs *, void *) ;
   int (*port_join_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_leave_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_stp_update)(struct dsa_switch *, int , u8 ) ;
   int (*fdb_add)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_del)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_getnext)(struct dsa_switch *, int , unsigned char *, bool *) ;
};

#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};

#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};

#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct xfrm_policy;

#line 98 
struct xfrm_state;

#line 114 
struct request_sock;

#line 1628 
struct mnt_namespace;

#line 1629 
struct ipc_namespace;

#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr const *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};

#line 643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_bonding.h"
struct netpoll_info;

#line 119 
struct wireless_dev;

#line 120 
struct wpan_dev;

#line 121 
struct mpls_dev;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};

#line 190 
struct neigh_parms;

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void const *, void const *, unsigned int ) ;
   int (*parse)(struct sk_buff const *, unsigned char *) ;
   int (*cache)(struct neighbour const *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device const *, unsigned char const *) ;
};

#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct *, int ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};

#line 340 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;

#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);

#line 537 
struct Qdisc;

#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
   unsigned long tx_maxrate ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};

#line 619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};

#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};

#line 683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};

#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};

#line 719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};

#line 730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};

#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};

#line 757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};

#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_busy_poll)(struct napi_struct *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, u8 ) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff const *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_add_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void (*ndo_del_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff *, struct net_device *, void *) ;
   int (*ndo_get_lock_subclass)(struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device const *) ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_adj_list_316 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_all_adj_list_317 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257 
struct iw_handler_def;

#line 1257 
struct iw_public_data;

#line 1257 
struct switchdev_ops;

#line 1257 
struct vlan_info;

#line 1257 
struct tipc_bearer;

#line 1257 
struct in_device;

#line 1257 
struct dn_dev;

#line 1257 
struct inet6_dev;

#line 1257 
struct tcf_proto;

#line 1257 
struct cpu_rmap;

#line 1257 
struct pcpu_lstats;

#line 1257 
struct pcpu_sw_netstats;

#line 1257 
struct pcpu_dstats;

#line 1257 
struct pcpu_vstats;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
union __anonunion_318 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};

#line 1257 
struct garp_port;

#line 1257 
struct mrp_port;

#line 1257 
struct rtnl_link_ops;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   atomic_t carrier_changes ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_316 adj_list ;
   struct __anonstruct_all_adj_list_317 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   struct iw_handler_def const *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops const *netdev_ops ;
   struct ethtool_ops const *ethtool_ops ;
   struct switchdev_ops const *switchdev_ops ;
   struct header_ops const *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct tcf_proto *ingress_cl_list ;
   struct netdev_queue *ingress_queue ;
   struct list_head nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) reg_state : 8 ;
   bool dismantle ;
   int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) rtnl_link_state : 16 ;
   void (*destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_318 __anonCompField_net_device_95 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group const *sysfs_groups[4U] ;
   struct attribute_group const *sysfs_rx_queue_group ;
   struct rtnl_link_ops const *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   u16 gso_min_segs ;
   struct dcbnl_rtnl_ops const *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
};

#line 1978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct packet_type {
   __be16 type ;
   struct net_device *dev ;
   int (*func)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   bool (*id_match)(struct packet_type *, struct sock *) ;
   void *af_packet_priv ;
   struct list_head list ;
};

#line 2025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uaccess.h"
struct page_counter {
   atomic_long_t count ;
   unsigned long limit ;
   struct page_counter *parent ;
   unsigned long watermark ;
   unsigned long failcnt ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/cacheflush.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/filter.h"
struct bpf_insn {
   __u8 code ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) dst_reg : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4
};

#line 273 
struct bpf_prog_aux;

#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
union __anonunion_337 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   bool jited ;
   bool gpl_compatible ;
   u32 len ;
   enum bpf_prog_type type ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(struct sk_buff const *, struct bpf_insn const *) ;
   union __anonunion_337 __anonCompField_bpf_prog_100 ;
};

#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   unsigned long _key ;
};

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   int maxtype ;
   struct nla_policy const *policy ;
   int (*validate)(struct nlattr **, struct nlattr **) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device const *) ;
   int (*fill_info)(struct sk_buff *, struct net_device const *) ;
   size_t (*get_xstats_size)(struct net_device const *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device const *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   int slave_maxtype ;
   struct nla_policy const *slave_policy ;
   int (*slave_validate)(struct nlattr **, struct nlattr **) ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **) ;
   size_t (*get_slave_size)(struct net_device const *, struct net_device const *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device const *, struct net_device const *) ;
   struct net *(*get_link_net)(struct net_device const *) ;
};

#line 171 
struct neigh_table;

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   void (*neigh_cleanup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};

#line 129 
struct neigh_ops;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops const *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_table {
   int family ;
   int entry_size ;
   int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void const *, struct net_device const *, __u32 *) ;
   bool (*key_eq)(struct neighbour const *, void const *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};

#line 519 
struct dn_route;

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
union __anonunion_345 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct dst_entry *from ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_345 __anonCompField_dst_entry_101 ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_socket_lock_t_346 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_346 socket_lock_t;

#line 124 
struct proto;

#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u32 __portpair;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u64 __addrpair;

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_348 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_347 {
   __addrpair skc_addrpair ;
   struct __anonstruct_348 __anonCompField___anonunion_347_102 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_349 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_351 {
   __be16 skc_dport ;
   __u16 skc_num ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_350 {
   __portpair skc_portpair ;
   struct __anonstruct_351 __anonCompField___anonunion_350_105 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_352 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_353 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock_common {
   union __anonunion_347 __anonCompField_sock_common_103 ;
   union __anonunion_349 __anonCompField_sock_common_104 ;
   union __anonunion_350 __anonCompField_sock_common_106 ;
   unsigned short skc_family ;
   unsigned char volatile skc_state ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) skc_reuse : 4 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_reuseport : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_ipv6only : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_352 __anonCompField_sock_common_107 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_353 __anonCompField_sock_common_108 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};

#line 219 
struct cg_proto;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_sk_backlog_354 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_354 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   u16 sk_incoming_cpu ;
   __u32 sk_txhash ;
   unsigned int sk_napi_id ;
   unsigned int sk_ll_usec ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) sk_shutdown : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_tx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_rx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) sk_userlocks : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) sk_protocol : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) sk_type : 16 ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   u32 sk_pacing_rate ;
   u32 sk_max_pacing_rate ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred const *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u32 sk_tskey ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
};

#line 914 
struct request_sock_ops;

#line 915 
struct timewait_sock_ops;

#line 916 
struct inet_hashinfo;

#line 917 
struct raw_hashinfo;

#line 932 
struct udp_table;

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_h_357 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   void (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   void (*clear_sk)(struct sock *, int ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock const *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_357 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup *, struct cgroup_subsys *) ;
   void (*destroy_cgroup)(struct mem_cgroup *) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup *) ;
};

#line 1054  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct cg_proto {
   struct page_counter memory_allocated ;
   struct percpu_counter sockets_allocated ;
   int memory_pressure ;
   long sysctl_mem[3U] ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock const *) ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   struct sock *rsk_listener ;
   u16 mss ;
   u8 num_retrans ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cookie_ts : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))) num_timeout : 7 ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops const *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};

#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   struct ipv6_stable_secret stable_secret ;
   void *sysctl ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};

#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};

#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __u8 rs_probes ;
   __u8 addr_gen_mode ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};

#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/ipv6.h"
union __anonunion_381 {
   __be32 a4 ;
   __be32 a6[4U] ;
   struct in6_addr in6 ;
};

#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_381 __anonCompField_inetpeer_addr_base_110 ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
union __anonunion_382 {
   struct list_head gc_list ;
   struct callback_head gc_rcu ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct __anonstruct_384 {
   atomic_t rid ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
union __anonunion_383 {
   struct __anonstruct_384 __anonCompField___anonunion_383_112 ;
   struct callback_head rcu ;
   struct inet_peer *gc_next ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[16U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   union __anonunion_382 __anonCompField_inet_peer_111 ;
   union __anonunion_383 __anonCompField_inet_peer_113 ;
   __u32 dtime ;
   atomic_t refcnt ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inet_peer_base {
   struct inet_peer *root ;
   seqlock_t lock ;
   int total ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/route.h"
struct uncached_list;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   __be32 rt_gateway ;
   u32 rt_pmtu ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/udp.h"
struct udp_hslot {
   struct hlist_nulls_head head ;
   int count ;
   spinlock_t lock ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/udp.h"
struct udp_table {
   struct udp_hslot *hash ;
   struct udp_hslot *hash2 ;
   unsigned int mask ;
   unsigned int log ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/io-64-nonatomic-lo-hi.h"
struct i40e_dma_mem {
   void *va ;
   dma_addr_t pa ;
   u32 size ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_osdep.h"
struct i40e_virt_mem {
   void *va ;
   u32 size ;
};

#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq_cmd.h"
enum i40e_admin_queue_err {
    I40E_AQ_RC_OK = 0,
    I40E_AQ_RC_EPERM = 1,
    I40E_AQ_RC_ENOENT = 2,
    I40E_AQ_RC_ESRCH = 3,
    I40E_AQ_RC_EINTR = 4,
    I40E_AQ_RC_EIO = 5,
    I40E_AQ_RC_ENXIO = 6,
    I40E_AQ_RC_E2BIG = 7,
    I40E_AQ_RC_EAGAIN = 8,
    I40E_AQ_RC_ENOMEM = 9,
    I40E_AQ_RC_EACCES = 10,
    I40E_AQ_RC_EFAULT = 11,
    I40E_AQ_RC_EBUSY = 12,
    I40E_AQ_RC_EEXIST = 13,
    I40E_AQ_RC_EINVAL = 14,
    I40E_AQ_RC_ENOTTY = 15,
    I40E_AQ_RC_ENOSPC = 16,
    I40E_AQ_RC_ENOSYS = 17,
    I40E_AQ_RC_ERANGE = 18,
    I40E_AQ_RC_EFLUSHED = 19,
    I40E_AQ_RC_BAD_ADDR = 20,
    I40E_AQ_RC_EMODE = 21,
    I40E_AQ_RC_EFBIG = 22
};

#line 1558 
enum i40e_aq_phy_type {
    I40E_PHY_TYPE_SGMII = 0,
    I40E_PHY_TYPE_1000BASE_KX = 1,
    I40E_PHY_TYPE_10GBASE_KX4 = 2,
    I40E_PHY_TYPE_10GBASE_KR = 3,
    I40E_PHY_TYPE_40GBASE_KR4 = 4,
    I40E_PHY_TYPE_XAUI = 5,
    I40E_PHY_TYPE_XFI = 6,
    I40E_PHY_TYPE_SFI = 7,
    I40E_PHY_TYPE_XLAUI = 8,
    I40E_PHY_TYPE_XLPPI = 9,
    I40E_PHY_TYPE_40GBASE_CR4_CU = 10,
    I40E_PHY_TYPE_10GBASE_CR1_CU = 11,
    I40E_PHY_TYPE_10GBASE_AOC = 12,
    I40E_PHY_TYPE_40GBASE_AOC = 13,
    I40E_PHY_TYPE_100BASE_TX = 17,
    I40E_PHY_TYPE_1000BASE_T = 18,
    I40E_PHY_TYPE_10GBASE_T = 19,
    I40E_PHY_TYPE_10GBASE_SR = 20,
    I40E_PHY_TYPE_10GBASE_LR = 21,
    I40E_PHY_TYPE_10GBASE_SFPP_CU = 22,
    I40E_PHY_TYPE_10GBASE_CR1 = 23,
    I40E_PHY_TYPE_40GBASE_CR4 = 24,
    I40E_PHY_TYPE_40GBASE_SR4 = 25,
    I40E_PHY_TYPE_40GBASE_LR4 = 26,
    I40E_PHY_TYPE_1000BASE_SX = 27,
    I40E_PHY_TYPE_1000BASE_LX = 28,
    I40E_PHY_TYPE_1000BASE_T_OPTICAL = 29,
    I40E_PHY_TYPE_20GBASE_KR2 = 30,
    I40E_PHY_TYPE_MAX = 31
};

#line 1590 
enum i40e_aq_link_speed {
    I40E_LINK_SPEED_UNKNOWN = 0,
    I40E_LINK_SPEED_100MB = 2,
    I40E_LINK_SPEED_1GB = 4,
    I40E_LINK_SPEED_10GB = 8,
    I40E_LINK_SPEED_40GB = 16,
    I40E_LINK_SPEED_20GB = 32
};

#line 2270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq_cmd.h"
union __anonunion_r_393 {
   struct i40e_dma_mem *asq_bi ;
   struct i40e_dma_mem *arq_bi ;
};

#line 2270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq_cmd.h"
struct i40e_adminq_ring {
   struct i40e_virt_mem dma_head ;
   struct i40e_dma_mem desc_buf ;
   struct i40e_virt_mem cmd_buf ;
   union __anonunion_r_393 r ;
   u16 count ;
   u16 rx_buf_len ;
   u16 next_to_use ;
   u16 next_to_clean ;
   u32 head ;
   u32 tail ;
   u32 len ;
   u32 bah ;
   u32 bal ;
};

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.h"
struct i40e_adminq_info {
   struct i40e_adminq_ring arq ;
   struct i40e_adminq_ring asq ;
   u32 asq_cmd_timeout ;
   u16 num_arq_entries ;
   u16 num_asq_entries ;
   u16 arq_buf_size ;
   u16 asq_buf_size ;
   u16 fw_maj_ver ;
   u16 fw_min_ver ;
   u32 fw_build ;
   u16 api_maj_ver ;
   u16 api_min_ver ;
   bool nvm_release_on_done ;
   struct mutex asq_mutex ;
   struct mutex arq_mutex ;
   enum i40e_admin_queue_err asq_last_status ;
   enum i40e_admin_queue_err arq_last_status ;
};

#line 155 
struct i40e_hw;

#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.h"
struct i40e_hmc_obj_info {
   u64 base ;
   u32 max_cnt ;
   u32 cnt ;
   u64 size ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_hmc.h"
enum i40e_sd_entry_type {
    I40E_SD_TYPE_INVALID = 0,
    I40E_SD_TYPE_PAGED = 1,
    I40E_SD_TYPE_DIRECT = 2
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_hmc.h"
struct i40e_hmc_bp {
   enum i40e_sd_entry_type entry_type ;
   struct i40e_dma_mem addr ;
   u32 sd_pd_index ;
   u32 ref_cnt ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_hmc.h"
struct i40e_hmc_pd_entry {
   struct i40e_hmc_bp bp ;
   u32 sd_index ;
   bool valid ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_hmc.h"
struct i40e_hmc_pd_table {
   struct i40e_dma_mem pd_page_addr ;
   struct i40e_hmc_pd_entry *pd_entry ;
   struct i40e_virt_mem pd_entry_virt_mem ;
   u32 ref_cnt ;
   u32 sd_index ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_hmc.h"
union __anonunion_u_395 {
   struct i40e_hmc_pd_table pd_table ;
   struct i40e_hmc_bp bp ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_hmc.h"
struct i40e_hmc_sd_entry {
   enum i40e_sd_entry_type entry_type ;
   bool valid ;
   union __anonunion_u_395 u ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_hmc.h"
struct i40e_hmc_sd_table {
   struct i40e_virt_mem addr ;
   u32 sd_cnt ;
   u32 ref_cnt ;
   struct i40e_hmc_sd_entry *sd_entry ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_hmc.h"
struct i40e_hmc_info {
   u32 signature ;
   u8 hmc_fn_id ;
   u16 first_sd_index ;
   struct i40e_hmc_obj_info *hmc_obj ;
   struct i40e_virt_mem hmc_obj_virt_mem ;
   struct i40e_hmc_sd_table sd_table ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
enum i40e_mac_type {
    I40E_MAC_UNKNOWN = 0,
    I40E_MAC_X710 = 1,
    I40E_MAC_XL710 = 2,
    I40E_MAC_VF = 3,
    I40E_MAC_GENERIC = 4
};

#line 101 
enum i40e_media_type {
    I40E_MEDIA_TYPE_UNKNOWN = 0,
    I40E_MEDIA_TYPE_FIBER = 1,
    I40E_MEDIA_TYPE_BASET = 2,
    I40E_MEDIA_TYPE_BACKPLANE = 3,
    I40E_MEDIA_TYPE_CX4 = 4,
    I40E_MEDIA_TYPE_DA = 5,
    I40E_MEDIA_TYPE_VIRTUAL = 6
};

#line 111 
enum i40e_fc_mode {
    I40E_FC_NONE = 0,
    I40E_FC_RX_PAUSE = 1,
    I40E_FC_TX_PAUSE = 2,
    I40E_FC_FULL = 3,
    I40E_FC_PFC = 4,
    I40E_FC_DEFAULT = 5
};

#line 128 
enum i40e_vsi_type {
    I40E_VSI_MAIN = 0,
    I40E_VSI_VMDQ1 = 1,
    I40E_VSI_VMDQ2 = 2,
    I40E_VSI_CTRL = 3,
    I40E_VSI_FCOE = 4,
    I40E_VSI_MIRROR = 5,
    I40E_VSI_SRIOV = 6,
    I40E_VSI_FDIR = 7,
    I40E_VSI_TYPE_UNKNOWN = 8
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_link_status {
   enum i40e_aq_phy_type phy_type ;
   enum i40e_aq_link_speed link_speed ;
   u8 link_info ;
   u8 an_info ;
   u8 ext_info ;
   u8 loopback ;
   bool lse_enable ;
   u16 max_frame_size ;
   bool crc_enable ;
   u8 pacing ;
   u8 requested_speeds ;
};

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_phy_info {
   struct i40e_link_status link_info ;
   struct i40e_link_status link_info_old ;
   u32 autoneg_advertised ;
   u32 phy_id ;
   u32 module_type ;
   bool get_link_info ;
   enum i40e_media_type media_type ;
};

#line 196  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_hw_capabilities {
   u32 switch_mode ;
   u32 management_mode ;
   u32 npar_enable ;
   u32 os2bmc ;
   u32 valid_functions ;
   bool sr_iov_1_1 ;
   bool vmdq ;
   bool evb_802_1_qbg ;
   bool evb_802_1_qbh ;
   bool dcb ;
   bool fcoe ;
   bool iscsi ;
   bool mfp_mode_1 ;
   bool mgmt_cem ;
   bool ieee_1588 ;
   bool iwarp ;
   bool fd ;
   u32 fd_filters_guaranteed ;
   u32 fd_filters_best_effort ;
   bool rss ;
   u32 rss_table_size ;
   u32 rss_table_entry_width ;
   bool led[30U] ;
   bool sdp[30U] ;
   u32 nvm_image_type ;
   u32 num_flow_director_filters ;
   u32 num_vfs ;
   u32 vf_base_id ;
   u32 num_vsis ;
   u32 num_rx_qp ;
   u32 num_tx_qp ;
   u32 base_queue ;
   u32 num_msix_vectors ;
   u32 num_msix_vectors_vf ;
   u32 led_pin_num ;
   u32 sdp_pin_num ;
   u32 mdio_port_num ;
   u32 mdio_port_mode ;
   u8 rx_buf_chain_len ;
   u32 enabled_tcmap ;
   u32 maxtc ;
   u64 wr_csr_prot ;
};

#line 247  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_mac_info {
   enum i40e_mac_type type ;
   u8 addr[6U] ;
   u8 perm_addr[6U] ;
   u8 san_addr[6U] ;
   u16 max_fcoeq ;
};

#line 264  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_nvm_info {
   u64 hw_semaphore_timeout ;
   u32 timeout ;
   u16 sr_size ;
   bool blank_nvm_mode ;
   u16 version ;
   u32 eetrack ;
};

#line 289 
enum i40e_nvmupd_state {
    I40E_NVMUPD_STATE_INIT = 0,
    I40E_NVMUPD_STATE_READING = 1,
    I40E_NVMUPD_STATE_WRITING = 2
};

#line 328 
enum i40e_bus_type {
    i40e_bus_type_unknown = 0,
    i40e_bus_type_pci = 1,
    i40e_bus_type_pcix = 2,
    i40e_bus_type_pci_express = 3,
    i40e_bus_type_reserved = 4
};

#line 336 
enum i40e_bus_speed {
    i40e_bus_speed_unknown = 0,
    i40e_bus_speed_33 = 33,
    i40e_bus_speed_66 = 66,
    i40e_bus_speed_100 = 100,
    i40e_bus_speed_120 = 120,
    i40e_bus_speed_133 = 133,
    i40e_bus_speed_2500 = 2500,
    i40e_bus_speed_5000 = 5000,
    i40e_bus_speed_8000 = 8000,
    i40e_bus_speed_reserved = 8001
};

#line 349 
enum i40e_bus_width {
    i40e_bus_width_unknown = 0,
    i40e_bus_width_pcie_x1 = 1,
    i40e_bus_width_pcie_x2 = 2,
    i40e_bus_width_pcie_x4 = 4,
    i40e_bus_width_pcie_x8 = 8,
    i40e_bus_width_32 = 32,
    i40e_bus_width_64 = 64,
    i40e_bus_width_reserved = 65
};

#line 360  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_bus_info {
   enum i40e_bus_speed speed ;
   enum i40e_bus_width width ;
   enum i40e_bus_type type ;
   u16 func ;
   u16 device ;
   u16 lan_id ;
};

#line 374  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_fc_info {
   enum i40e_fc_mode current_mode ;
   enum i40e_fc_mode requested_mode ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_ieee_ets_config {
   u8 willing ;
   u8 cbs ;
   u8 maxtcs ;
   u8 prioritytable[8U] ;
   u8 tcbwtable[8U] ;
   u8 tsatable[8U] ;
};

#line 395  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_ieee_ets_recommend {
   u8 prioritytable[8U] ;
   u8 tcbwtable[8U] ;
   u8 tsatable[8U] ;
};

#line 402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_ieee_pfc_config {
   u8 willing ;
   u8 mbc ;
   u8 pfccap ;
   u8 pfcenable ;
};

#line 410  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_ieee_app_priority_table {
   u8 priority ;
   u8 selector ;
   u16 protocolid ;
};

#line 417  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_dcbx_config {
   u32 numapps ;
   struct i40e_ieee_ets_config etscfg ;
   struct i40e_ieee_ets_recommend etsrec ;
   struct i40e_ieee_pfc_config pfc ;
   struct i40e_ieee_app_priority_table app[32U] ;
};

#line 425  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_hw {
   u8 *hw_addr ;
   void *back ;
   struct i40e_phy_info phy ;
   struct i40e_mac_info mac ;
   struct i40e_bus_info bus ;
   struct i40e_nvm_info nvm ;
   struct i40e_fc_info fc ;
   u16 device_id ;
   u16 vendor_id ;
   u16 subsystem_device_id ;
   u16 subsystem_vendor_id ;
   u8 revision_id ;
   u8 port ;
   bool adapter_stopped ;
   struct i40e_hw_capabilities dev_caps ;
   struct i40e_hw_capabilities func_caps ;
   u16 fdir_shared_filter_count ;
   u8 pf_id ;
   u16 main_vsi_seid ;
   u16 partition_id ;
   u16 num_partitions ;
   u16 num_ports ;
   u16 numa_node ;
   struct i40e_adminq_info aq ;
   enum i40e_nvmupd_state nvmupd_state ;
   struct i40e_hmc_info hmc ;
   u16 dcbx_status ;
   struct i40e_dcbx_config local_dcbx_config ;
   struct i40e_dcbx_config remote_dcbx_config ;
   u32 debug_mask ;
};

#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_tx_desc {
   __le64 buffer_addr ;
   __le64 cmd_type_offset_bsz ;
};

#line 1049  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_eth_stats {
   u64 rx_bytes ;
   u64 rx_unicast ;
   u64 rx_multicast ;
   u64 rx_broadcast ;
   u64 rx_discards ;
   u64 rx_unknown_protocol ;
   u64 tx_bytes ;
   u64 tx_unicast ;
   u64 tx_multicast ;
   u64 tx_broadcast ;
   u64 tx_discards ;
   u64 tx_errors ;
};

#line 1248 
enum i40e_virtchnl_ops {
    I40E_VIRTCHNL_OP_UNKNOWN = 0,
    I40E_VIRTCHNL_OP_VERSION = 1,
    I40E_VIRTCHNL_OP_RESET_VF = 2,
    I40E_VIRTCHNL_OP_GET_VF_RESOURCES = 3,
    I40E_VIRTCHNL_OP_CONFIG_TX_QUEUE = 4,
    I40E_VIRTCHNL_OP_CONFIG_RX_QUEUE = 5,
    I40E_VIRTCHNL_OP_CONFIG_VSI_QUEUES = 6,
    I40E_VIRTCHNL_OP_CONFIG_IRQ_MAP = 7,
    I40E_VIRTCHNL_OP_ENABLE_QUEUES = 8,
    I40E_VIRTCHNL_OP_DISABLE_QUEUES = 9,
    I40E_VIRTCHNL_OP_ADD_ETHER_ADDRESS = 10,
    I40E_VIRTCHNL_OP_DEL_ETHER_ADDRESS = 11,
    I40E_VIRTCHNL_OP_ADD_VLAN = 12,
    I40E_VIRTCHNL_OP_DEL_VLAN = 13,
    I40E_VIRTCHNL_OP_CONFIG_PROMISCUOUS_MODE = 14,
    I40E_VIRTCHNL_OP_GET_STATS = 15,
    I40E_VIRTCHNL_OP_FCOE = 16,
    I40E_VIRTCHNL_OP_EVENT = 17,
    I40E_VIRTCHNL_OP_CONFIG_RSS = 18
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct i40e_virtchnl_vsi_resource {
   u16 vsi_id ;
   u16 num_queue_pairs ;
   enum i40e_vsi_type vsi_type ;
   u16 qset_handle ;
   u8 default_mac_addr[6U] ;
};

#line 145  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct i40e_virtchnl_vf_resource {
   u16 num_vsis ;
   u16 num_queue_pairs ;
   u16 max_vectors ;
   u16 max_mtu ;
   u32 vf_offload_flags ;
   u32 max_fcoe_contexts ;
   u32 max_fcoe_filters ;
   struct i40e_virtchnl_vsi_resource vsi_res[1U] ;
};

#line 356  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
union __anonunion_416 {
   struct sk_buff *skb ;
   void *raw_buf ;
};

#line 356  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct i40e_tx_buffer {
   struct i40e_tx_desc *next_to_watch ;
   union __anonunion_416 __anonCompField_i40e_tx_buffer_115 ;
   unsigned int bytecount ;
   unsigned short gso_segs ;
   dma_addr_t dma ;
   __u32 len ;
   u32 tx_flags ;
};

#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.h"
struct i40e_rx_buffer {
   struct sk_buff *skb ;
   void *hdr_buf ;
   dma_addr_t dma ;
   struct page *page ;
   dma_addr_t page_dma ;
   unsigned int page_offset ;
};

#line 168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.h"
struct i40e_queue_stats {
   u64 packets ;
   u64 bytes ;
};

#line 173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.h"
struct i40e_tx_queue_stats {
   u64 restart_queue ;
   u64 tx_busy ;
   u64 tx_done_old ;
};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.h"
struct i40e_rx_queue_stats {
   u64 non_eop_descs ;
   u64 alloc_page_failed ;
   u64 alloc_buff_failed ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.h"
union __anonunion_417 {
   struct i40e_tx_buffer *tx_bi ;
   struct i40e_rx_buffer *rx_bi ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.h"
union __anonunion_418 {
   struct i40e_tx_queue_stats tx_stats ;
   struct i40e_rx_queue_stats rx_stats ;
};

#line 194 
struct i40e_vsi;

#line 194 
struct i40e_q_vector;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.h"
struct i40e_ring {
   struct i40e_ring *next ;
   void *desc ;
   struct device *dev ;
   struct net_device *netdev ;
   union __anonunion_417 __anonCompField_i40e_ring_116 ;
   unsigned long state ;
   u16 queue_index ;
   u8 dcb_tc ;
   u8 *tail ;
   u16 count ;
   u16 reg_idx ;
   u16 rx_hdr_len ;
   u16 rx_buf_len ;
   u8 dtype ;
   u8 hsplit ;
   u16 next_to_use ;
   u16 next_to_clean ;
   u8 atr_sample_rate ;
   u8 atr_count ;
   bool ring_active ;
   bool arm_wb ;
   struct i40e_queue_stats stats ;
   struct u64_stats_sync syncp ;
   union __anonunion_418 __anonCompField_i40e_ring_117 ;
   unsigned int size ;
   dma_addr_t dma ;
   struct i40e_vsi *vsi ;
   struct i40e_q_vector *q_vector ;
   struct callback_head rcu ;
};

#line 269 
enum i40e_latency_range {
    I40E_LOWEST_LATENCY = 0,
    I40E_LOW_LATENCY = 1,
    I40E_BULK_LATENCY = 2
};

#line 275  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.h"
struct i40e_ring_container {
   struct i40e_ring *ring ;
   unsigned int total_bytes ;
   unsigned int total_packets ;
   u16 count ;
   enum i40e_latency_range latency_range ;
   u16 itr ;
};

#line 301 
struct i40evf_adapter;

#line 301  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.h"
struct i40e_vsi {
   struct i40evf_adapter *back ;
   struct net_device *netdev ;
   unsigned long active_vlans[64U] ;
   u16 seid ;
   u16 id ;
   unsigned long state ;
   int base_vector ;
   u16 work_limit ;
   u16 rx_itr_setting ;
   u16 tx_itr_setting ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf.h"
struct i40e_q_vector {
   struct i40evf_adapter *adapter ;
   struct i40e_vsi *vsi ;
   struct napi_struct napi ;
   unsigned long reg_idx ;
   struct i40e_ring_container rx ;
   struct i40e_ring_container tx ;
   u32 ring_mask ;
   u8 num_ringpairs ;
   int v_idx ;
   char name[25U] ;
   cpumask_var_t affinity_mask ;
};

#line 164 
enum i40evf_state_t {
    __I40EVF_STARTUP = 0,
    __I40EVF_REMOVE = 1,
    __I40EVF_INIT_VERSION_CHECK = 2,
    __I40EVF_INIT_GET_RESOURCES = 3,
    __I40EVF_INIT_SW = 4,
    __I40EVF_RESETTING = 5,
    __I40EVF_DOWN = 6,
    __I40EVF_TESTING = 7,
    __I40EVF_RUNNING = 8
};

#line 180  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf.h"
struct i40evf_adapter {
   struct timer_list watchdog_timer ;
   struct work_struct reset_task ;
   struct work_struct adminq_task ;
   struct delayed_work init_task ;
   struct i40e_q_vector *q_vector[4U] ;
   struct list_head vlan_filter_list ;
   char misc_vector_name[25U] ;
   int num_active_queues ;
   struct i40e_ring *tx_rings[16U] ;
   u32 tx_timeout_count ;
   struct list_head mac_filter_list ;
   u32 tx_desc_count ;
   struct i40e_ring *rx_rings[16U] ;
   u64 hw_csum_rx_error ;
   u32 rx_desc_count ;
   int num_msix_vectors ;
   struct msix_entry *msix_entries ;
   u32 flags ;
   u32 aq_required ;
   struct net_device *netdev ;
   struct pci_dev *pdev ;
   struct net_device_stats net_stats ;
   struct i40e_hw hw ;
   enum i40evf_state_t state ;
   unsigned long crit_section ;
   struct work_struct watchdog_task ;
   bool netdev_registered ;
   bool link_up ;
   enum i40e_virtchnl_ops current_op ;
   struct i40e_virtchnl_vf_resource *vf_res ;
   struct i40e_virtchnl_vsi_resource *vsi_res ;
   u16 msg_enable ;
   struct i40e_eth_stats current_stats ;
   struct i40e_vsi vsi ;
   u32 aq_wait_count ;
};

#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf.h"
struct i40evf_stats {
   char stat_string[32U] ;
   int stat_offset ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __le16;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __le32;

#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
enum i40e_status_code {
    I40E_SUCCESS = 0,
    I40E_ERR_NVM = -1,
    I40E_ERR_NVM_CHECKSUM = -2,
    I40E_ERR_PHY = -3,
    I40E_ERR_CONFIG = -4,
    I40E_ERR_PARAM = -5,
    I40E_ERR_MAC_TYPE = -6,
    I40E_ERR_UNKNOWN_PHY = -7,
    I40E_ERR_LINK_SETUP = -8,
    I40E_ERR_ADAPTER_STOPPED = -9,
    I40E_ERR_INVALID_MAC_ADDR = -10,
    I40E_ERR_DEVICE_NOT_SUPPORTED = -11,
    I40E_ERR_MASTER_REQUESTS_PENDING = -12,
    I40E_ERR_INVALID_LINK_SETTINGS = -13,
    I40E_ERR_AUTONEG_NOT_COMPLETE = -14,
    I40E_ERR_RESET_FAILED = -15,
    I40E_ERR_SWFW_SYNC = -16,
    I40E_ERR_NO_AVAILABLE_VSI = -17,
    I40E_ERR_NO_MEMORY = -18,
    I40E_ERR_BAD_PTR = -19,
    I40E_ERR_RING_FULL = -20,
    I40E_ERR_INVALID_PD_ID = -21,
    I40E_ERR_INVALID_QP_ID = -22,
    I40E_ERR_INVALID_CQ_ID = -23,
    I40E_ERR_INVALID_CEQ_ID = -24,
    I40E_ERR_INVALID_AEQ_ID = -25,
    I40E_ERR_INVALID_SIZE = -26,
    I40E_ERR_INVALID_ARP_INDEX = -27,
    I40E_ERR_INVALID_FPM_FUNC_ID = -28,
    I40E_ERR_QP_INVALID_MSG_SIZE = -29,
    I40E_ERR_QP_TOOMANY_WRS_POSTED = -30,
    I40E_ERR_INVALID_FRAG_COUNT = -31,
    I40E_ERR_QUEUE_EMPTY = -32,
    I40E_ERR_INVALID_ALIGNMENT = -33,
    I40E_ERR_FLUSHED_QUEUE = -34,
    I40E_ERR_INVALID_PUSH_PAGE_INDEX = -35,
    I40E_ERR_INVALID_IMM_DATA_SIZE = -36,
    I40E_ERR_TIMEOUT = -37,
    I40E_ERR_OPCODE_MISMATCH = -38,
    I40E_ERR_CQP_COMPL_ERROR = -39,
    I40E_ERR_INVALID_VF_ID = -40,
    I40E_ERR_INVALID_HMCFN_ID = -41,
    I40E_ERR_BACKING_PAGE_ERROR = -42,
    I40E_ERR_NO_PBLCHUNKS_AVAILABLE = -43,
    I40E_ERR_INVALID_PBLE_INDEX = -44,
    I40E_ERR_INVALID_SD_INDEX = -45,
    I40E_ERR_INVALID_PAGE_DESC_INDEX = -46,
    I40E_ERR_INVALID_SD_TYPE = -47,
    I40E_ERR_MEMCPY_FAILED = -48,
    I40E_ERR_INVALID_HMC_OBJ_INDEX = -49,
    I40E_ERR_INVALID_HMC_OBJ_COUNT = -50,
    I40E_ERR_INVALID_SRQ_ARM_LIMIT = -51,
    I40E_ERR_SRQ_ENABLED = -52,
    I40E_ERR_ADMIN_QUEUE_ERROR = -53,
    I40E_ERR_ADMIN_QUEUE_TIMEOUT = -54,
    I40E_ERR_BUF_TOO_SHORT = -55,
    I40E_ERR_ADMIN_QUEUE_FULL = -56,
    I40E_ERR_ADMIN_QUEUE_NO_WORK = -57,
    I40E_ERR_BAD_IWARP_CQE = -58,
    I40E_ERR_NVM_BLANK_MODE = -59,
    I40E_ERR_NOT_IMPLEMENTED = -60,
    I40E_ERR_PE_DOORBELL_NOT_ENABLED = -61,
    I40E_ERR_DIAG_TEST_FAILED = -62,
    I40E_ERR_NOT_READY = -63,
    I40E_NOT_SUPPORTED = -64,
    I40E_ERR_FIRMWARE_API_VERSION = -65
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_osdep.h"
typedef enum i40e_status_code i40e_status;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_osdep.h"
struct __anonstruct_internal_784 {
   __le32 param0 ;
   __le32 param1 ;
   __le32 param2 ;
   __le32 param3 ;
};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_osdep.h"
struct __anonstruct_external_785 {
   __le32 param0 ;
   __le32 param1 ;
   __le32 addr_high ;
   __le32 addr_low ;
};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_osdep.h"
union __anonunion_params_783 {
   struct __anonstruct_internal_784 internal ;
   struct __anonstruct_external_785 external ;
   u8 raw[16U] ;
};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_osdep.h"
struct i40e_aq_desc {
   __le16 flags ;
   __le16 opcode ;
   __le16 datalen ;
   __le16 retval ;
   __le32 cookie_high ;
   __le32 cookie_low ;
   union __anonunion_params_783 params ;
};

#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.h"
struct i40e_asq_cmd_details {
   void *callback ;
   u64 cookie ;
   u16 flags_ena ;
   u16 flags_dis ;
   bool async ;
   bool postpone ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.h"
struct i40e_arq_event_info {
   struct i40e_aq_desc desc ;
   u16 msg_len ;
   u16 buf_len ;
   u8 *msg_buf ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
enum i40e_debug_mask {
    I40E_DEBUG_INIT = 1,
    I40E_DEBUG_RELEASE = 2,
    I40E_DEBUG_LINK = 16,
    I40E_DEBUG_PHY = 32,
    I40E_DEBUG_HMC = 64,
    I40E_DEBUG_NVM = 128,
    I40E_DEBUG_LAN = 256,
    I40E_DEBUG_FLOW = 512,
    I40E_DEBUG_DCB = 1024,
    I40E_DEBUG_DIAG = 2048,
    I40E_DEBUG_FD = 4096,
    I40E_DEBUG_AQ_MESSAGE = 16777216,
    I40E_DEBUG_AQ_DESCRIPTOR = 33554432,
    I40E_DEBUG_AQ_DESC_BUFFER = 67108864,
    I40E_DEBUG_AQ_COMMAND = 100663296,
    I40E_DEBUG_AQ = 251658240,
    I40E_DEBUG_USER = 4026531840,
    I40E_DEBUG_ALL = 4294967295
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __sum16;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef struct skb_frag_struct skb_frag_t;

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_page_1075 {
   struct page *p ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct {
   struct __anonstruct_page_1075 page ;
   __u32 page_offset ;
   __u32 size ;
};

#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};

#line 319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_info {
   unsigned char nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   unsigned short gso_type ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   u32 tskey ;
   __be32 ip6_frag_id ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};

#line 890 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;

#line 2893 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct iphdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) ihl : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) priority : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_timewait_sock.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) res1 : 4 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) doff : 4 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) fin : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syn : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) rst : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) psh : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ack : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) urg : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ece : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};

#line 410  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
struct udphdr {
   __be16 source ;
   __be16 dest ;
   __be16 len ;
   __sum16 check ;
};

#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct __anonstruct_read_1214 {
   __le64 pkt_addr ;
   __le64 hdr_addr ;
   __le64 rsvd1 ;
   __le64 rsvd2 ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
union __anonunion_mirr_fcoe_1218 {
   __le16 mirroring_status ;
   __le16 fcoe_ctx_id ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct __anonstruct_lo_dword_1217 {
   union __anonunion_mirr_fcoe_1218 mirr_fcoe ;
   __le16 l2tag1 ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
union __anonunion_hi_dword_1219 {
   __le32 rss ;
   __le32 fcoe_param ;
   __le32 fd_id ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct __anonstruct_qword0_1216 {
   struct __anonstruct_lo_dword_1217 lo_dword ;
   union __anonunion_hi_dword_1219 hi_dword ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct __anonstruct_qword1_1220 {
   __le64 status_error_len ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct __anonstruct_qword2_1221 {
   __le16 ext_status ;
   __le16 rsvd ;
   __le16 l2tag2_1 ;
   __le16 l2tag2_2 ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
union __anonunion_lo_dword_1223 {
   __le32 flex_bytes_lo ;
   __le32 pe_status ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
union __anonunion_hi_dword_1224 {
   __le32 flex_bytes_hi ;
   __le32 fd_id ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct __anonstruct_qword3_1222 {
   union __anonunion_lo_dword_1223 lo_dword ;
   union __anonunion_hi_dword_1224 hi_dword ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct __anonstruct_wb_1215 {
   struct __anonstruct_qword0_1216 qword0 ;
   struct __anonstruct_qword1_1220 qword1 ;
   struct __anonstruct_qword2_1221 qword2 ;
   struct __anonstruct_qword3_1222 qword3 ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
union i40e_32byte_rx_desc {
   struct __anonstruct_read_1214 read ;
   struct __anonstruct_wb_1215 wb ;
};

#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_rx_ptype_decoded {
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) ptype : 8 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) known : 1 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) outer_ip : 1 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) outer_ip_ver : 1 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) outer_frag : 1 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) tunnel_type : 3 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) tunnel_end_prot : 2 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) tunnel_end_frag : 1 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) inner_prot : 4 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) payload_layer : 3 ;
};

#line 843  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_tx_context_desc {
   __le32 tunneling_params ;
   __le16 l2tag2 ;
   __le16 rsvd ;
   __le64 type_cmd_tso_mss ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_lan_hmc.h"
enum i40e_hmc_obj_rx_hsplit_0 {
    I40E_HMC_OBJ_RX_HSPLIT_0_NO_SPLIT = 0,
    I40E_HMC_OBJ_RX_HSPLIT_0_SPLIT_L2 = 1,
    I40E_HMC_OBJ_RX_HSPLIT_0_SPLIT_IP = 2,
    I40E_HMC_OBJ_RX_HSPLIT_0_SPLIT_TCP_UDP = 4,
    I40E_HMC_OBJ_RX_HSPLIT_0_SPLIT_SCTP = 8
};

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct i40e_virtchnl_version_info {
   u32 major ;
   u32 minor ;
};

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct i40e_virtchnl_txq_info {
   u16 vsi_id ;
   u16 queue_id ;
   u16 ring_len ;
   u16 headwb_enabled ;
   u64 dma_ring_addr ;
   u64 dma_headwb_addr ;
};

#line 178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct i40e_virtchnl_rxq_info {
   u16 vsi_id ;
   u16 queue_id ;
   u32 ring_len ;
   u16 hdr_size ;
   u16 splithdr_enabled ;
   u32 databuffer_size ;
   u32 max_pkt_size ;
   u64 dma_ring_addr ;
   enum i40e_hmc_obj_rx_hsplit_0 rx_split_pos ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct i40e_virtchnl_queue_pair_info {
   struct i40e_virtchnl_txq_info txq ;
   struct i40e_virtchnl_rxq_info rxq ;
};

#line 210  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct i40e_virtchnl_vsi_queue_config_info {
   u16 vsi_id ;
   u16 num_queue_pairs ;
   struct i40e_virtchnl_queue_pair_info qpair[1U] ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct i40e_virtchnl_vector_map {
   u16 vsi_id ;
   u16 vector_id ;
   u16 rxq_map ;
   u16 txq_map ;
   u16 rxitr_idx ;
   u16 txitr_idx ;
};

#line 232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct i40e_virtchnl_irq_map_info {
   u16 num_vectors ;
   struct i40e_virtchnl_vector_map vecmap[1U] ;
};

#line 237  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct i40e_virtchnl_queue_select {
   u16 vsi_id ;
   u16 pad ;
   u32 rx_queues ;
   u32 tx_queues ;
};

#line 252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct i40e_virtchnl_ether_addr {
   u8 addr[6U] ;
   u8 pad[2U] ;
};

#line 269  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct i40e_virtchnl_ether_addr_list {
   u16 vsi_id ;
   u16 num_elements ;
   struct i40e_virtchnl_ether_addr list[1U] ;
};

#line 275  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct i40e_virtchnl_vlan_filter_list {
   u16 vsi_id ;
   u16 num_elements ;
   u16 vlan_id[1U] ;
};

#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct i40e_virtchnl_promisc_info {
   u16 vsi_id ;
   u16 flags ;
};

#line 305 
enum i40e_virtchnl_event_codes {
    I40E_VIRTCHNL_EVENT_UNKNOWN = 0,
    I40E_VIRTCHNL_EVENT_LINK_CHANGE = 1,
    I40E_VIRTCHNL_EVENT_RESET_IMPENDING = 2,
    I40E_VIRTCHNL_EVENT_PF_DRIVER_CLOSE = 3
};

#line 312  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct __anonstruct_link_event_1644 {
   enum i40e_aq_link_speed link_speed ;
   bool link_status ;
};

#line 312  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
union __anonunion_event_data_1643 {
   struct __anonstruct_link_event_1644 link_event ;
};

#line 312  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_virtchnl.h"
struct i40e_virtchnl_pf_event {
   enum i40e_virtchnl_event_codes event ;
   union __anonunion_event_data_1643 event_data ;
   int severity ;
};

#line 120  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf.h"
struct i40evf_mac_filter {
   struct list_head list ;
   u8 macaddr[6U] ;
   bool remove ;
   bool add ;
};

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf.h"
struct i40evf_vlan_filter {
   struct list_head list ;
   u16 vlan ;
   bool remove ;
   bool add ;
};

#line 6  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/fvtp/.tmp_i40evf_main.c"
struct __va_list_tag;

#line 6  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/fvtp/.tmp_i40evf_main.c"
typedef struct __va_list_tag __va_list_tag;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list[1U];

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/usr/lib/gcc/x86_64-linux-gnu/6/include/stdarg.h"
typedef __gnuc_va_list va_list[1U];

#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct _ddebug {
   char const *modname ;
   char const *function ;
   char const *filename ;
   char const *format ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))) lineno : 18 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) flags : 8 ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11730 {
    WORK_STRUCT_PENDING_BIT = 0,
    WORK_STRUCT_DELAYED_BIT = 1,
    WORK_STRUCT_PWQ_BIT = 2,
    WORK_STRUCT_LINKED_BIT = 3,
    WORK_STRUCT_STATIC_BIT = 4,
    WORK_STRUCT_COLOR_SHIFT = 5,
    WORK_STRUCT_COLOR_BITS = 4,
    WORK_STRUCT_PENDING = 1,
    WORK_STRUCT_DELAYED = 2,
    WORK_STRUCT_PWQ = 4,
    WORK_STRUCT_LINKED = 8,
    WORK_STRUCT_STATIC = 16,
    WORK_NR_COLORS = 15,
    WORK_NO_COLOR = 15,
    WORK_CPU_UNBOUND = 8192,
    WORK_STRUCT_FLAG_BITS = 9,
    WORK_OFFQ_FLAG_BASE = 5,
    __WORK_OFFQ_CANCELING = 5,
    WORK_OFFQ_CANCELING = 32,
    WORK_OFFQ_FLAG_BITS = 1,
    WORK_OFFQ_POOL_SHIFT = 6,
    WORK_OFFQ_LEFT = 58,
    WORK_OFFQ_POOL_BITS = 31,
    WORK_OFFQ_POOL_NONE = 2147483647,
    WORK_STRUCT_FLAG_MASK = 511,
    WORK_STRUCT_WQ_DATA_MASK = -512,
    WORK_STRUCT_NO_POOL = 137438953408,
    WORK_BUSY_PENDING = 1,
    WORK_BUSY_RUNNING = 2,
    WORKER_DESC_LEN = 24
};

#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/xfrm.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;

#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};

#line 1270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
struct i40e_virtchnl_msg {
   u8 pad[8U] ;
   enum i40e_virtchnl_ops v_opcode ;
   i40e_status v_retval ;
   u32 vfid ;
};

#line 337  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq_cmd.h"
struct i40e_aqc_queue_shutdown {
   __le32 driver_unloading ;
   u8 reserved[12U] ;
};

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
struct ldv_list_element {
   void *data ;
   struct ldv_list_element *next ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
typedef struct ldv_list_element *ldv_list_ptr;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef short s16;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_chan;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};

#line 151 
struct spi_message;

#line 152 
struct spi_transfer;

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_master *) ;
   int (*transfer_one_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_master *) ;
   int (*prepare_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_master *, struct spi_message *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_master *, struct spi_message *) ;
   int *cs_gpios ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
};

#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_transfer {
   void const *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cs_change : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) tx_nbits : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};

#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef unsigned long pthread_t;

#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};

#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct ldv_struct_free_irq_6 {
   int arg0 ;
   int signal_pending ;
};

#line 19  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_interrupt_scenario_15 {
   enum irqreturn (*arg2)(int , void *) ;
   enum irqreturn (*arg1)(int , void *) ;
   void *arg3 ;
   int arg0 ;
   int signal_pending ;
};

#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_pci_scenario_17 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};

#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_random_allocationless_scenario_16 {
   struct net_device *arg0 ;
   int signal_pending ;
};

#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_timer_scenario_19 {
   struct timer_list *arg0 ;
   int signal_pending ;
};

#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/fvtp/.tmp_i40evf_ethtool.c"
void ldv_inline_asm(void);


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(long nr, unsigned long const volatile *addr)
{
  int __retres;
  
#line 311 
  __retres = ((*(addr + (nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL;
  
#line 311 
  return __retres;
}


#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int snprintf(char *, size_t, char const * , ...);


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memcpy(void *, void const *, size_t);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
size_t strlcpy(char *, char const *, size_t);


#line 560  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
static bool ldv_schedule_work_73(struct work_struct *work);


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void const volatile *addr)
{
  unsigned int ret;
  
#line 59 
  ldv_inline_asm();
  
#line 58 
  return ret;
}


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void volatile *addr)
{
  
#line 68 
  ldv_inline_asm();
  
#line 69 
  return;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
__inline static char const *kobject_name(struct kobject const *kobj)
{
  char const *__retres;
  
#line 89 
  __retres = kobj->name;
  
#line 89 
  return __retres;
}


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static char const *dev_name(struct device const *dev)
{
  char const *__retres;
  char const *tmp;
  
#line 836 
  if (dev->init_name != (char const *)0) {
    
#line 837 
    __retres = dev->init_name;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  tmp = kobject_name(& dev->kobj);
  
#line 839 
  __retres = tmp;
  return_label: 
#line 839 
                return __retres;
}


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static char const *pci_name(struct pci_dev const *pdev)
{
  char const *tmp;
  
#line 1486 
  tmp = dev_name(& pdev->dev);
  
#line 1486 
  return tmp;
}


#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
u32 ethtool_op_get_link(struct net_device *);


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device const *dev)
{
  void *__retres;
  
#line 1882 
  __retres = (void *)dev + 3008U;
  
#line 1882 
  return __retres;
}


#line 2769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 2771 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev->state));
  
#line 2771 
  __retres = (_Bool)(tmp != 0);
  
#line 2771 
  return __retres;
}


#line 262  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf.h"
char i40evf_driver_name[7U];


#line 263 
char const i40evf_driver_version[7U];


#line 268 
void i40evf_set_ethtool_ops(struct net_device *netdev);


#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static struct i40evf_stats const i40evf_gstrings_stats[12U] = {{.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .stat_offset = 2800}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .stat_offset = 2808}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .stat_offset = 2816}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .stat_offset = 2824}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d', (char)'s', (char)'\000'}, .stat_offset = 2832}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'u', (char)'n', (char)'k', (char)'n', (char)'o', (char)'w', (char)'n', (char)'_', (char)'p', (char)'r', (char)'o', (char)'t', (char)'o', (char)'c', (char)'o', (char)'l', (char)'\000'}, .stat_offset = 2840}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .stat_offset = 2848}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'u', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .stat_offset = 2856}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .stat_offset = 2864}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .stat_offset = 2872}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'i', (char)'s', (char)'c', (char)'a', (char)'r', (char)'d', (char)'s', (char)'\000'}, .stat_offset = 2880}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .stat_offset = 2888}};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static int i40evf_get_settings(struct net_device *netdev, struct ethtool_cmd *ecmd)
{
  int __retres;
  
#line 80 
  ecmd->supported = 0U;
  
#line 81 
  ecmd->autoneg = (unsigned char)0U;
  
#line 82 
  ecmd->transceiver = (unsigned char)2U;
  
#line 83 
  ecmd->port = (unsigned char)239U;
  
#line 85 
  __retres = 0;
  
#line 85 
  return __retres;
}


#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static int i40evf_get_sset_count(struct net_device *netdev, int sset)
{
  int __retres;
  
#line 98 
  if (sset == 1) {
    void *tmp;
    
#line 99 
    tmp = netdev_priv((struct net_device const *)netdev);
    
#line 99 
    ;
    
#line 99 
    __retres = (int)(((unsigned long)((struct i40evf_adapter *)tmp)->num_active_queues + 3UL) * (unsigned long)4U);
    
#line 99 
    goto return_label;
  }
  else {
    
#line 101 
    __retres = -22;
    
#line 101 
    goto return_label;
  }
  return_label: 
#line 98 
                return __retres;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static void i40evf_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  int i;
  int j;
  char *p;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  
#line 115 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 119 
  i = 0;
  
#line 119 
  goto ldv_56722;
  ldv_56721: 
#line 120 
  ;
  
#line 120 
  p = (char *)adapter + i40evf_gstrings_stats[i].stat_offset;
  
#line 121 
  *(data + i) = *((u64 *)p);
  
#line 119 
  i += 1;
  ldv_56722: 
#line 120 
  ;
  
#line 119 
  if ((unsigned int)i <= 11U) 
#line 121 
                              goto ldv_56721; else 
#line 124 
                                                   goto ldv_56723;
  ldv_56723: 
#line 125 
  ;
  
#line 123 
  j = 0;
  
#line 123 
  goto ldv_56725;
  ldv_56724: 
#line 124 
  ;
  
#line 124 
  tmp_0 = i;
  
#line 124 
  i += 1;
  
#line 124 
  *(data + tmp_0) = (adapter->tx_rings[j])->stats.packets;
  
#line 125 
  tmp_1 = i;
  
#line 125 
  i += 1;
  
#line 125 
  *(data + tmp_1) = (adapter->tx_rings[j])->stats.bytes;
  
#line 123 
  j += 1;
  ldv_56725: 
#line 124 
  ;
  
#line 123 
  if (adapter->num_active_queues > j) 
#line 125 
                                      goto ldv_56724; else 
#line 128 
                                                           goto ldv_56726;
  ldv_56726: 
#line 129 
  ;
  
#line 127 
  j = 0;
  
#line 127 
  goto ldv_56728;
  ldv_56727: 
#line 128 
  ;
  
#line 128 
  tmp_2 = i;
  
#line 128 
  i += 1;
  
#line 128 
  *(data + tmp_2) = (adapter->rx_rings[j])->stats.packets;
  
#line 129 
  tmp_3 = i;
  
#line 129 
  i += 1;
  
#line 129 
  *(data + tmp_3) = (adapter->rx_rings[j])->stats.bytes;
  
#line 127 
  j += 1;
  ldv_56728: 
#line 128 
  ;
  
#line 127 
  if (adapter->num_active_queues > j) 
#line 129 
                                      goto ldv_56727; else 
#line 132 
                                                           goto ldv_56729;
  ldv_56729: 
#line 133 
  ;
  
#line 134 
  return;
}


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static void i40evf_get_strings(struct net_device *netdev, u32 sset, u8 *data)
{
  int i;
  
#line 143 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 144 
  u8 *p = data;
  
#line 147 
  if (sset == 1U) {
    
#line 148 
    i = 0;
    
#line 148 
    goto ldv_56742;
    ldv_56741: 
#line 149 
    ;
    
#line 149 
    memcpy((void *)p,(void const *)(& i40evf_gstrings_stats[i].stat_string),32UL);
    
#line 151 
    p += 32U;
    
#line 148 
    i += 1;
    ldv_56742: 
#line 149 
    ;
    
#line 148 
    if ((unsigned int)i <= 11U) 
#line 150 
                                goto ldv_56741; else 
#line 153 
                                                     goto ldv_56743;
    ldv_56743: 
#line 154 
    ;
    
#line 153 
    i = 0;
    
#line 153 
    goto ldv_56745;
    ldv_56744: 
#line 154 
    ;
    
#line 154 
    snprintf((char *)p,32UL,"tx-%u.packets",i);
    
#line 155 
    p += 32U;
    
#line 156 
    snprintf((char *)p,32UL,"tx-%u.bytes",i);
    
#line 157 
    p += 32U;
    
#line 153 
    i += 1;
    ldv_56745: 
#line 154 
    ;
    
#line 153 
    if (adapter->num_active_queues > i) 
#line 155 
                                        goto ldv_56744; else 
#line 158 
                                                             goto ldv_56746;
    ldv_56746: 
#line 159 
    ;
    
#line 159 
    i = 0;
    
#line 159 
    goto ldv_56748;
    ldv_56747: 
#line 160 
    ;
    
#line 160 
    snprintf((char *)p,32UL,"rx-%u.packets",i);
    
#line 161 
    p += 32U;
    
#line 162 
    snprintf((char *)p,32UL,"rx-%u.bytes",i);
    
#line 163 
    p += 32U;
    
#line 159 
    i += 1;
    ldv_56748: 
#line 160 
    ;
    
#line 159 
    if (adapter->num_active_queues > i) 
#line 161 
                                        goto ldv_56747; else 
#line 164 
                                                             goto ldv_56749;
    ldv_56749: 
#line 165 
    ;
  }
  else ;
  
#line 167 
  return;
}


#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static u32 i40evf_get_msglevel(struct net_device *netdev)
{
  u32 __retres;
  
#line 176 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 178 
  __retres = (unsigned int)adapter->msg_enable;
  
#line 178 
  return __retres;
}


#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static void i40evf_set_msglevel(struct net_device *netdev, u32 data)
{
  
#line 191 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 193 
  if ((data & 4026531840U) != 0U) 
#line 194 
                                  adapter->hw.debug_mask = data; else ;
  
#line 195 
  adapter->msg_enable = (unsigned short)data;
  
#line 196 
  return;
}


#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static void i40evf_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  char const *tmp_0;
  
#line 208 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 210 
  strlcpy((char *)(& drvinfo->driver),(char const *)(& i40evf_driver_name),32UL);
  
#line 211 
  strlcpy((char *)(& drvinfo->version),(char const *)(& i40evf_driver_version),32UL);
  
#line 212 
  strlcpy((char *)(& drvinfo->fw_version),"N/A",4UL);
  
#line 213 
  tmp_0 = pci_name((struct pci_dev const *)adapter->pdev);
  
#line 213 
  ;
  
#line 213 
  strlcpy((char *)(& drvinfo->bus_info),tmp_0,32UL);
  
#line 214 
  return;
}


#line 224  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static void i40evf_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  
#line 227 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 229 
  ring->rx_max_pending = 4096U;
  
#line 230 
  ring->tx_max_pending = 4096U;
  
#line 231 
  ring->rx_pending = adapter->rx_desc_count;
  
#line 232 
  ring->tx_pending = adapter->tx_desc_count;
  
#line 233 
  return;
}


#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static int i40evf_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  int __retres;
  u32 new_rx_count;
  u32 new_tx_count;
  u32 tmp_3;
  u32 tmp_7;
  bool tmp_8;
  
#line 246 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 249 
  if (ring->rx_mini_pending != 0U || ring->rx_jumbo_pending != 0U) {
    
#line 250 
    __retres = -22;
    
#line 250 
    goto return_label;
  }
  else ;
  {
    u32 tmp_1;
    u32 tmp_2;
    {
      u32 tmp_0;
      
#line 252 
      u32 __max1 = ring->tx_pending;
      
#line 252 
      u32 __max2 = 64U;
      
#line 252 
      if (__max1 > __max2) 
#line 252 
                           tmp_0 = __max1; else 
#line 252 
                                                tmp_0 = __max2;
      
#line 252 
      tmp_1 = tmp_0;
    }
    
#line 252 
    u32 __min1 = tmp_1;
    
#line 252 
    u32 __min2 = 4096U;
    
#line 252 
    if (__min1 < __min2) 
#line 252 
                         tmp_2 = __min1; else 
#line 252 
                                              tmp_2 = __min2;
    
#line 252 
    tmp_3 = tmp_2;
  }
  
#line 252 
  new_tx_count = tmp_3;
  
#line 255 
  new_tx_count = (new_tx_count + 31U) & 4294967264U;
  {
    u32 tmp_5;
    u32 tmp_6;
    {
      u32 tmp_4;
      
#line 257 
      u32 __max1_0 = ring->rx_pending;
      
#line 257 
      u32 __max2_0 = 64U;
      
#line 257 
      if (__max1_0 > __max2_0) 
#line 257 
                               tmp_4 = __max1_0; else 
#line 257 
                                                      tmp_4 = __max2_0;
      
#line 257 
      tmp_5 = tmp_4;
    }
    
#line 257 
    u32 __min1_0 = tmp_5;
    
#line 257 
    u32 __min2_0 = 4096U;
    
#line 257 
    if (__min1_0 < __min2_0) 
#line 257 
                             tmp_6 = __min1_0; else 
#line 257 
                                                    tmp_6 = __min2_0;
    
#line 257 
    tmp_7 = tmp_6;
  }
  
#line 257 
  new_rx_count = tmp_7;
  
#line 260 
  new_rx_count = (new_rx_count + 31U) & 4294967264U;
  
#line 263 
  if (adapter->tx_desc_count == new_tx_count && adapter->rx_desc_count == new_rx_count) {
    
#line 265 
    __retres = 0;
    
#line 265 
    goto return_label;
  }
  else ;
  
#line 267 
  adapter->tx_desc_count = new_tx_count;
  
#line 268 
  adapter->rx_desc_count = new_rx_count;
  
#line 270 
  tmp_8 = netif_running((struct net_device const *)netdev);
  
#line 270 
  if ((int)tmp_8 != 0) {
    
#line 271 
    adapter->flags |= 1024U;
    
#line 272 
    ldv_schedule_work_73(& adapter->reset_task);
  }
  else ;
  
#line 275 
  __retres = 0;
  return_label: 
#line 275 
                return __retres;
}


#line 287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static int i40evf_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  int __retres;
  
#line 290 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 291 
  struct i40e_vsi *vsi = & adapter->vsi;
  
#line 293 
  ec->tx_max_coalesced_frames = (unsigned int)vsi->work_limit;
  
#line 294 
  ec->rx_max_coalesced_frames = (unsigned int)vsi->work_limit;
  
#line 296 
  if ((int)vsi->rx_itr_setting < 0) 
#line 297 
                                    ec->use_adaptive_rx_coalesce = 1U; else ;
  
#line 299 
  if ((int)vsi->tx_itr_setting < 0) 
#line 300 
                                    ec->use_adaptive_tx_coalesce = 1U; else ;
  
#line 302 
  ec->rx_coalesce_usecs = (unsigned int)vsi->rx_itr_setting & 4294934527U;
  
#line 303 
  ec->tx_coalesce_usecs = (unsigned int)vsi->tx_itr_setting & 4294934527U;
  
#line 305 
  __retres = 0;
  
#line 305 
  return __retres;
}


#line 315  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static int i40evf_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  int __retres;
  struct i40e_q_vector *q_vector;
  int i;
  
#line 318 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 319 
  struct i40e_hw *hw = & adapter->hw;
  
#line 320 
  struct i40e_vsi *vsi = & adapter->vsi;
  
#line 324 
  if (ec->tx_max_coalesced_frames_irq != 0U || ec->rx_max_coalesced_frames_irq != 0U) 
    
#line 325 
    vsi->work_limit = (unsigned short)ec->tx_max_coalesced_frames_irq; else ;
  
#line 327 
  if (ec->rx_coalesce_usecs + 4294967294U <= 8158U) 
#line 329 
                                                    vsi->rx_itr_setting = (unsigned short)ec->rx_coalesce_usecs;
  else {
    
#line 332 
    __retres = -22;
    
#line 332 
    goto return_label;
  }
  
#line 334 
  if (ec->tx_coalesce_usecs + 4294967294U <= 8158U) 
#line 336 
                                                    vsi->tx_itr_setting = (unsigned short)ec->tx_coalesce_usecs;
  else 
    
#line 337 
    if (ec->use_adaptive_tx_coalesce != 0U) 
#line 338 
                                            vsi->tx_itr_setting = (unsigned short)32892U;
    else {
      
#line 341 
      __retres = -22;
      
#line 341 
      goto return_label;
    }
  
#line 343 
  if (ec->use_adaptive_rx_coalesce != 0U) 
#line 344 
                                          vsi->rx_itr_setting = (unsigned short)((unsigned int)vsi->rx_itr_setting | 32768U); else 
                                                                    
#line 346 
                                                                    vsi->rx_itr_setting = (unsigned short)((unsigned int)vsi->rx_itr_setting & 32767U);
  
#line 348 
  if (ec->use_adaptive_tx_coalesce != 0U) 
#line 349 
                                          vsi->tx_itr_setting = (unsigned short)((unsigned int)vsi->tx_itr_setting | 32768U); else 
                                                                    
#line 351 
                                                                    vsi->tx_itr_setting = (unsigned short)((unsigned int)vsi->tx_itr_setting & 32767U);
  
#line 353 
  i = 0;
  
#line 353 
  goto ldv_56804;
  ldv_56803: 
#line 354 
  ;
  
#line 354 
  q_vector = adapter->q_vector[i];
  
#line 355 
  q_vector->rx.itr = (unsigned short)((unsigned int)((unsigned short)((int)vsi->rx_itr_setting >> 1)) & 49151U);
  
#line 356 
  writel((unsigned int)q_vector->rx.itr,(void volatile *)(hw->hw_addr + (i + 2560) * 4));
  
#line 357 
  q_vector->tx.itr = (unsigned short)((unsigned int)((unsigned short)((int)vsi->tx_itr_setting >> 1)) & 49151U);
  
#line 358 
  writel((unsigned int)q_vector->tx.itr,(void volatile *)(hw->hw_addr + (i + 2576) * 4));
  
#line 359 
  readl((void const volatile *)(hw->hw_addr + 34816U));
  
#line 353 
  i += 1;
  ldv_56804: 
#line 354 
  ;
  
#line 353 
  if (adapter->num_msix_vectors + -1 > i) 
#line 355 
                                          goto ldv_56803; else 
#line 358 
                                                               goto ldv_56805;
  ldv_56805: 
#line 359 
  ;
  
#line 362 
  __retres = 0;
  return_label: 
#line 362 
                return __retres;
}


#line 372  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static int i40evf_get_rss_hash_opts(struct i40evf_adapter *adapter, struct ethtool_rxnfc *cmd)
{
  int __retres;
  unsigned int tmp;
  unsigned int tmp_0;
  
#line 375 
  struct i40e_hw *hw = & adapter->hw;
  
#line 376 
  tmp = readl((void const volatile *)(hw->hw_addr + 50176U));
  
#line 377 
  tmp_0 = readl((void const volatile *)(hw->hw_addr + 50180U));
  
#line 376 
  u64 hena = (unsigned long long)tmp | ((unsigned long long)tmp_0 << 32);
  
#line 380 
  cmd->data = 48ULL;
  
#line 382 
  switch (cmd->flow_type) {
    case (__u32)1: 
#line 383 
    ;
    
#line 384 
    if ((hena & 8589934592ULL) != 0ULL) 
#line 385 
                                        cmd->data |= 192ULL; else ;
    
#line 386 
    goto ldv_56813;
    case (__u32)2: 
#line 387 
    ;
    
#line 388 
    if ((hena & 2147483648ULL) != 0ULL) 
#line 389 
                                        cmd->data |= 192ULL; else ;
    
#line 390 
    goto ldv_56813;
    case (__u32)3: 
#line 392 
    ;
    case (__u32)4: 
#line 393 
    ;
    case (__u32)9: 
#line 394 
    ;
    case (__u32)10: 
#line 395 
    ;
    case (__u32)16: 
#line 396 
    ;
    
#line 397 
    goto ldv_56813;
    case (__u32)5: 
#line 399 
    ;
    
#line 400 
    if ((hena & 8796093022208ULL) != 0ULL) 
#line 401 
                                           cmd->data |= 192ULL; else ;
    
#line 402 
    goto ldv_56813;
    case (__u32)6: 
#line 403 
    ;
    
#line 404 
    if ((hena & 2199023255552ULL) != 0ULL) 
#line 405 
                                           cmd->data |= 192ULL; else ;
    
#line 406 
    goto ldv_56813;
    case (__u32)7: 
#line 408 
    ;
    case (__u32)8: 
#line 409 
    ;
    case (__u32)11: 
#line 410 
    ;
    case (__u32)12: 
#line 411 
    ;
    case (__u32)17: 
#line 412 
    ;
    
#line 413 
    goto ldv_56813;
    default: 
#line 414 
    ;
    
#line 415 
    cmd->data = 0ULL;
    
#line 416 
    __retres = -22;
    
#line 416 
    goto return_label;
  }
  ldv_56813: 
#line 419 
  ;
  
#line 419 
  __retres = 0;
  return_label: 
#line 419 
                return __retres;
}


#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static int i40evf_get_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *cmd, u32 *rule_locs)
{
  
#line 433 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 434 
  int ret = -95;
  
#line 436 
  switch (cmd->cmd) {
    case (__u32)45: 
#line 437 
    ;
    
#line 438 
    cmd->data = (unsigned long long)adapter->num_active_queues;
    
#line 439 
    ret = 0;
    
#line 440 
    goto ldv_56836;
    case (__u32)41: 
#line 441 
    ;
    
#line 442 
    ret = i40evf_get_rss_hash_opts(adapter,cmd);
    
#line 443 
    goto ldv_56836;
    default: 
#line 444 
    ;
    
#line 445 
    goto ldv_56836;
  }
  ldv_56836: 
#line 448 
  ;
  
#line 448 
  return ret;
}


#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static int i40evf_set_rss_hash_opt(struct i40evf_adapter *adapter, struct ethtool_rxnfc *nfc)
{
  int __retres;
  unsigned int tmp;
  unsigned int tmp_0;
  
#line 461 
  struct i40e_hw *hw = & adapter->hw;
  
#line 463 
  tmp = readl((void const volatile *)(hw->hw_addr + 50176U));
  
#line 464 
  tmp_0 = readl((void const volatile *)(hw->hw_addr + 50180U));
  
#line 463 
  u64 hena = (unsigned long long)tmp | ((unsigned long long)tmp_0 << 32);
  
#line 469 
  if ((nfc->data & 18446744073709551375ULL) != 0ULL) {
    
#line 471 
    __retres = -22;
    
#line 471 
    goto return_label;
  }
  else ;
  
#line 474 
  if ((nfc->data & 16ULL) == 0ULL || (nfc->data & 32ULL) == 0ULL) {
    
#line 476 
    __retres = -22;
    
#line 476 
    goto return_label;
  }
  else ;
  
#line 478 
  switch (nfc->flow_type) {
    case (__u32)1: 
#line 479 
    ;
    
#line 480 
    switch (nfc->data & 192ULL) {
      case (unsigned long long)0: 
#line 481 
      ;
      
#line 482 
      hena &= 18446744065119617023ULL;
      
#line 483 
      goto ldv_56847;
      case (unsigned long long)192: 
#line 484 
      ;
      
#line 485 
      hena |= 8589934592ULL;
      
#line 486 
      goto ldv_56847;
      default: 
#line 487 
      ;
      
#line 488 
      __retres = -22;
      
#line 488 
      goto return_label;
    }
    ldv_56847: 
#line 490 
    ;
    
#line 490 
    goto ldv_56850;
    case (__u32)5: 
#line 491 
    ;
    
#line 492 
    switch (nfc->data & 192ULL) {
      case (unsigned long long)0: 
#line 493 
      ;
      
#line 494 
      hena &= 18446735277616529407ULL;
      
#line 495 
      goto ldv_56853;
      case (unsigned long long)192: 
#line 496 
      ;
      
#line 497 
      hena |= 8796093022208ULL;
      
#line 498 
      goto ldv_56853;
      default: 
#line 499 
      ;
      
#line 500 
      __retres = -22;
      
#line 500 
      goto return_label;
    }
    ldv_56853: 
#line 502 
    ;
    
#line 502 
    goto ldv_56850;
    case (__u32)2: 
#line 503 
    ;
    
#line 504 
    switch (nfc->data & 192ULL) {
      case (unsigned long long)0: 
#line 505 
      ;
      
#line 506 
      hena &= 18446744002842591231ULL;
      
#line 508 
      goto ldv_56858;
      case (unsigned long long)192: 
#line 509 
      ;
      
#line 510 
      hena |= 70866960384ULL;
      
#line 512 
      goto ldv_56858;
      default: 
#line 513 
      ;
      
#line 514 
      __retres = -22;
      
#line 514 
      goto return_label;
    }
    ldv_56858: 
#line 516 
    ;
    
#line 516 
    goto ldv_56850;
    case (__u32)6: 
#line 517 
    ;
    
#line 518 
    switch (nfc->data & 192ULL) {
      case (unsigned long long)0: 
#line 519 
      ;
      
#line 520 
      hena &= 18446671505942118399ULL;
      
#line 522 
      goto ldv_56863;
      case (unsigned long long)192: 
#line 523 
      ;
      
#line 524 
      hena |= 72567767433216ULL;
      
#line 526 
      goto ldv_56863;
      default: 
#line 527 
      ;
      
#line 528 
      __retres = -22;
      
#line 528 
      goto return_label;
    }
    ldv_56863: 
#line 530 
    ;
    
#line 530 
    goto ldv_56850;
    case (__u32)4: 
#line 531 
    ;
    case (__u32)9: 
#line 532 
    ;
    case (__u32)10: 
#line 533 
    ;
    case (__u32)3: 
#line 534 
    ;
    
#line 535 
    if ((nfc->data & 64ULL) != 0ULL || (nfc->data & 128ULL) != 0ULL) {
      
#line 537 
      __retres = -22;
      
#line 537 
      goto return_label;
    }
    else ;
    
#line 538 
    hena |= 34359738368ULL;
    
#line 539 
    goto ldv_56850;
    case (__u32)8: 
#line 540 
    ;
    case (__u32)11: 
#line 541 
    ;
    case (__u32)12: 
#line 542 
    ;
    case (__u32)7: 
#line 543 
    ;
    
#line 544 
    if ((nfc->data & 64ULL) != 0ULL || (nfc->data & 128ULL) != 0ULL) {
      
#line 546 
      __retres = -22;
      
#line 546 
      goto return_label;
    }
    else ;
    
#line 547 
    hena |= 35184372088832ULL;
    
#line 548 
    goto ldv_56850;
    case (__u32)16: 
#line 549 
    ;
    
#line 550 
    hena |= 103079215104ULL;
    
#line 552 
    goto ldv_56850;
    case (__u32)17: 
#line 553 
    ;
    
#line 554 
    hena |= 105553116266496ULL;
    
#line 556 
    goto ldv_56850;
    default: 
#line 557 
    ;
    
#line 558 
    __retres = -22;
    
#line 558 
    goto return_label;
  }
  ldv_56850: 
#line 561 
  ;
  
#line 561 
  writel((unsigned int)hena,(void volatile *)(hw->hw_addr + 50176U));
  
#line 562 
  writel((unsigned int)(hena >> 32),(void volatile *)(hw->hw_addr + 50180U));
  
#line 563 
  readl((void const volatile *)(hw->hw_addr + 34816U));
  
#line 565 
  __retres = 0;
  return_label: 
#line 565 
                return __retres;
}


#line 575  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static int i40evf_set_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *cmd)
{
  
#line 578 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 579 
  int ret = -95;
  
#line 581 
  switch (cmd->cmd) {
    case (__u32)42: 
#line 582 
    ;
    
#line 583 
    ret = i40evf_set_rss_hash_opt(adapter,cmd);
    
#line 584 
    goto ldv_56884;
    default: 
#line 585 
    ;
    
#line 586 
    goto ldv_56884;
  }
  ldv_56884: 
#line 589 
  ;
  
#line 589 
  return ret;
}


#line 600  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static void i40evf_get_channels(struct net_device *netdev, struct ethtool_channels *ch)
{
  
#line 603 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 606 
  ch->max_combined = (unsigned int)adapter->num_active_queues;
  
#line 608 
  ch->max_other = 1U;
  
#line 609 
  ch->other_count = 1U;
  
#line 611 
  ch->combined_count = (unsigned int)adapter->num_active_queues;
  
#line 612 
  return;
}


#line 620  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static u32 i40evf_get_rxfh_indir_size(struct net_device *netdev)
{
  u32 __retres;
  
#line 622 
  __retres = 64U;
  
#line 622 
  return __retres;
}


#line 633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static int i40evf_get_rxfh(struct net_device *netdev, u32 *indir, u8 *key, u8 *hfunc)
{
  int __retres;
  u32 hlut_val;
  int i;
  int j;
  
#line 636 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 637 
  struct i40e_hw *hw = & adapter->hw;
  
#line 641 
  if (hfunc != (u8 *)0U) 
#line 642 
                         *hfunc = (unsigned char)1U; else ;
  
#line 643 
  if (indir == (u32 *)0U) {
    
#line 644 
    __retres = 0;
    
#line 644 
    goto return_label;
  }
  else ;
  
#line 646 
  if (indir != (u32 *)0U) {
    int tmp_0;
    int tmp_1;
    int tmp_2;
    int tmp_3;
    
#line 647 
    i = 0;
    
#line 647 
    j = 0;
    
#line 647 
    goto ldv_56906;
    ldv_56905: 
#line 648 
    ;
    
#line 648 
    hlut_val = readl((void const volatile *)(hw->hw_addr + (i + 13312) * 4));
    
#line 649 
    tmp_0 = j;
    
#line 649 
    j += 1;
    
#line 649 
    *(indir + tmp_0) = hlut_val & 255U;
    
#line 650 
    tmp_1 = j;
    
#line 650 
    j += 1;
    
#line 650 
    *(indir + tmp_1) = (hlut_val >> 8) & 255U;
    
#line 651 
    tmp_2 = j;
    
#line 651 
    j += 1;
    
#line 651 
    *(indir + tmp_2) = (hlut_val >> 16) & 255U;
    
#line 652 
    tmp_3 = j;
    
#line 652 
    j += 1;
    
#line 652 
    *(indir + tmp_3) = hlut_val >> 24;
    
#line 647 
    i += 1;
    ldv_56906: 
#line 648 
    ;
    
#line 647 
    if (i <= 15) 
#line 649 
                 goto ldv_56905; else 
#line 652 
                                      goto ldv_56907;
    ldv_56907: 
#line 653 
    ;
  }
  else ;
  
#line 655 
  __retres = 0;
  return_label: 
#line 655 
                return __retres;
}


#line 667  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static int i40evf_set_rxfh(struct net_device *netdev, u32 const *indir, u8 const *key, u8 const hfunc)
{
  int __retres;
  u32 hlut_val;
  int i;
  int j;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  
#line 670 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 671 
  struct i40e_hw *hw = & adapter->hw;
  
#line 676 
  if (key != (u8 const *)0U || (unsigned int)hfunc > 1U) {
    
#line 678 
    __retres = -95;
    
#line 678 
    goto return_label;
  }
  else ;
  
#line 679 
  if (indir == (u32 const *)0U) {
    
#line 680 
    __retres = 0;
    
#line 680 
    goto return_label;
  }
  else ;
  
#line 682 
  i = 0;
  
#line 682 
  j = 0;
  
#line 682 
  goto ldv_56920;
  ldv_56919: 
#line 683 
  ;
  
#line 683 
  tmp_0 = j;
  
#line 683 
  j += 1;
  
#line 683 
  hlut_val = *(indir + tmp_0);
  
#line 684 
  tmp_1 = j;
  
#line 684 
  j += 1;
  
#line 684 
  hlut_val = (*(indir + tmp_1) << 8) | hlut_val;
  
#line 685 
  tmp_2 = j;
  
#line 685 
  j += 1;
  
#line 685 
  hlut_val = (*(indir + tmp_2) << 16) | hlut_val;
  
#line 686 
  tmp_3 = j;
  
#line 686 
  j += 1;
  
#line 686 
  hlut_val = (*(indir + tmp_3) << 24) | hlut_val;
  
#line 687 
  writel(hlut_val,(void volatile *)(hw->hw_addr + (i + 13312) * 4));
  
#line 682 
  i += 1;
  ldv_56920: 
#line 683 
  ;
  
#line 682 
  if (i <= 15) 
#line 684 
               goto ldv_56919; else 
#line 687 
                                    goto ldv_56921;
  ldv_56921: 
#line 688 
  ;
  
#line 690 
  __retres = 0;
  return_label: 
#line 690 
                return __retres;
}


#line 693  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
static struct ethtool_ops const i40evf_ethtool_ops = {.get_settings = & i40evf_get_settings, .set_settings = (int (*)(struct net_device *, struct ethtool_cmd *))0, .get_drvinfo = & i40evf_get_drvinfo, .get_regs_len = (int (*)(struct net_device *))0, .get_regs = (void (*)(struct net_device *, struct ethtool_regs *, void *))0, .get_wol = (void (*)(struct net_device *, struct ethtool_wolinfo *))0, .set_wol = (int (*)(struct net_device *, struct ethtool_wolinfo *))0, .get_msglevel = & i40evf_get_msglevel, .set_msglevel = & i40evf_set_msglevel, .nway_reset = (int (*)(struct net_device *))0, .get_link = & ethtool_op_get_link, .get_eeprom_len = (int (*)(struct net_device *))0, .get_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .set_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_coalesce = & i40evf_get_coalesce, .set_coalesce = & i40evf_set_coalesce, .get_ringparam = & i40evf_get_ringparam, .set_ringparam = & i40evf_set_ringparam, .get_pauseparam = (void (*)(struct net_device *, struct ethtool_pauseparam *))0, .set_pauseparam = (int (*)(struct net_device *, struct ethtool_pauseparam *))0, .self_test = (void (*)(struct net_device *, struct ethtool_test *, u64 *))0, .get_strings = & i40evf_get_strings, .set_phys_id = (int (*)(struct net_device *, enum ethtool_phys_id_state ))0, .get_ethtool_stats = & i40evf_get_ethtool_stats, .begin = (int (*)(struct net_device *))0, .complete = (void (*)(struct net_device *))0, .get_priv_flags = (u32 (*)(struct net_device *))0, .set_priv_flags = (int (*)(struct net_device *, u32 ))0, .get_sset_count = & i40evf_get_sset_count, .get_rxnfc = & i40evf_get_rxnfc, .set_rxnfc = & i40evf_set_rxnfc, .flash_device = (int (*)(struct net_device *, struct ethtool_flash *))0, .reset = (int (*)(struct net_device *, u32 *))0, .get_rxfh_key_size = (u32 (*)(struct net_device *))0, .get_rxfh_indir_size = & i40evf_get_rxfh_indir_size, .get_rxfh = & i40evf_get_rxfh, .set_rxfh = & i40evf_set_rxfh, .get_channels = & i40evf_get_channels, .set_channels = (int (*)(struct net_device *, struct ethtool_channels *))0, .get_dump_flag = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_dump_data = (int (*)(struct net_device *, struct ethtool_dump *, void *))0, .set_dump = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_ts_info = (int (*)(struct net_device *, struct ethtool_ts_info *))0, .get_module_info = (int (*)(struct net_device *, struct ethtool_modinfo *))0, .get_module_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .set_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .get_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void *))0, .set_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void const *))0};

#line 721  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_ethtool.c"
void i40evf_set_ethtool_ops(struct net_device *netdev)
{
  
#line 723 
  netdev->ethtool_ops = & i40evf_ethtool_ops;
  
#line 724 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
unsigned int (*ldv_emg_alias_ethtool_op_get_link_3)(struct net_device *) = & ethtool_op_get_link;

#line 69 
_Bool ldv_emg_schedule_work(struct work_struct *arg0);


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
void ldv_emg_wrapper_i40evf_get_drvinfo_10(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  
#line 76 
  i40evf_get_drvinfo(arg0,arg1);
  
#line 77 
  return;
}


#line 80  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
int ldv_emg_wrapper_i40evf_set_ringparam_12(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  int tmp;
  
#line 81 
  tmp = i40evf_set_ringparam(arg0,arg1);
  
#line 81 
  return tmp;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
void ldv_emg_wrapper_i40evf_get_channels_6(struct net_device *arg0, struct ethtool_channels *arg1)
{
  
#line 86 
  i40evf_get_channels(arg0,arg1);
  
#line 87 
  return;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
int ldv_emg_wrapper_i40evf_set_rxnfc_9(struct net_device *arg0, struct ethtool_rxnfc *arg1)
{
  int tmp;
  
#line 91 
  tmp = i40evf_set_rxnfc(arg0,arg1);
  
#line 91 
  return tmp;
}


#line 95  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
void ldv_emg_wrapper_i40evf_get_strings_5(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  
#line 96 
  i40evf_get_strings(arg0,arg1,arg2);
  
#line 97 
  return;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
unsigned int ldv_emg_wrapper_i40evf_get_msglevel_13(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 101 
  tmp = i40evf_get_msglevel(arg0);
  
#line 101 
  return tmp;
}


#line 105  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
int ldv_emg_wrapper_i40evf_get_rxnfc_19(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  int tmp;
  
#line 106 
  tmp = i40evf_get_rxnfc(arg0,arg1,arg2);
  
#line 106 
  return tmp;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
int ldv_emg_wrapper_i40evf_set_coalesce_25(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 111 
  tmp = i40evf_set_coalesce(arg0,arg1);
  
#line 111 
  return tmp;
}


#line 115  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
int ldv_emg_wrapper_i40evf_get_sset_count_16(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 116 
  tmp = i40evf_get_sset_count(arg0,arg1);
  
#line 116 
  return tmp;
}


#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
int ldv_emg_wrapper_i40evf_get_rxfh_24(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  int tmp;
  
#line 121 
  tmp = i40evf_get_rxfh(arg0,arg1,arg2,arg3);
  
#line 121 
  return tmp;
}


#line 125  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
int ldv_emg_wrapper_i40evf_get_coalesce_18(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 126 
  tmp = i40evf_get_coalesce(arg0,arg1);
  
#line 126 
  return tmp;
}


#line 130  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
int ldv_emg_wrapper_i40evf_get_settings_15(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 131 
  tmp = i40evf_get_settings(arg0,arg1);
  
#line 131 
  return tmp;
}


#line 135  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
int ldv_emg_wrapper_i40evf_set_rxfh_11(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  int tmp;
  
#line 136 
  tmp = i40evf_set_rxfh(arg0,(u32 const *)arg1,(u8 const *)arg2,(unsigned char)((int)arg3));
  
#line 136 
  return tmp;
}


#line 140  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
void ldv_emg_wrapper_i40evf_set_msglevel_22(struct net_device *arg0, unsigned int arg1)
{
  
#line 141 
  i40evf_set_msglevel(arg0,arg1);
  
#line 142 
  return;
}


#line 145  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
void ldv_emg_wrapper_i40evf_get_ringparam_23(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  
#line 146 
  i40evf_get_ringparam(arg0,arg1);
  
#line 147 
  return;
}


#line 150  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
void ldv_emg_wrapper_i40evf_get_ethtool_stats_7(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  
#line 151 
  i40evf_get_ethtool_stats(arg0,arg1,arg2);
  
#line 152 
  return;
}


#line 155  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
unsigned int ldv_emg_wrapper_i40evf_get_rxfh_indir_size_4(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 156 
  tmp = i40evf_get_rxfh_indir_size(arg0);
  
#line 156 
  return tmp;
}


#line 841  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_ethtool.c.aux"
static bool ldv_schedule_work_73(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 845 
  tmp = ldv_emg_schedule_work(work);
  
#line 845 
  __retres = tmp != 0;
  
#line 845 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memset(void *, int, size_t);


#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40e_adminq.c.aux"
static void ldv_mutex_lock_73(struct mutex *ldv_func_arg1);


#line 41 
static void ldv_mutex_lock_75(struct mutex *ldv_func_arg1);


#line 45 
static void ldv_mutex_lock_77(struct mutex *ldv_func_arg1);


#line 49 
static void ldv_mutex_lock_79(struct mutex *ldv_func_arg1);


#line 55 
void ldv_mutex_model_lock(struct mutex *, char *);


#line 57 
void ldv_mutex_model_unlock(struct mutex *, char *);


#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
void __mutex_init(struct mutex *, char const *, struct lock_class_key *);


#line 193 
static void ldv_mutex_unlock_74(struct mutex *ldv_func_arg1);


#line 197 
static void ldv_mutex_unlock_76(struct mutex *ldv_func_arg1);


#line 201 
static void ldv_mutex_unlock_78(struct mutex *ldv_func_arg1);


#line 205 
static void ldv_mutex_unlock_80(struct mutex *ldv_func_arg1);


#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
void usleep_range(unsigned long, unsigned long);


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_osdep.h"
void i40evf_debug_d(void *hw, u32 mask, char *fmt_str , ...);


#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.h"
void i40evf_fill_default_direct_cmd_desc(struct i40e_aq_desc *desc, u16 opcode);


#line 486  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_type.h"
__inline static bool i40e_is_vf(struct i40e_hw *hw)
{
  bool __retres;
  
#line 488 
  __retres = (_Bool)(hw->mac.type == (unsigned int)I40E_MAC_VF);
  
#line 488 
  return __retres;
}


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_alloc.h"
i40e_status i40evf_allocate_dma_mem_d(struct i40e_hw *hw, struct i40e_dma_mem *mem, u64 size, u32 alignment);


#line 50 
i40e_status i40evf_free_dma_mem_d(struct i40e_hw *hw, struct i40e_dma_mem *mem);


#line 52 
i40e_status i40evf_allocate_virt_mem_d(struct i40e_hw *hw, struct i40e_virt_mem *mem, u32 size);


#line 55 
i40e_status i40evf_free_virt_mem_d(struct i40e_hw *hw, struct i40e_virt_mem *mem);


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_prototype.h"
i40e_status i40evf_init_adminq(struct i40e_hw *hw);


#line 43 
i40e_status i40evf_shutdown_adminq(struct i40e_hw *hw);


#line 45 
i40e_status i40evf_clean_arq_element(struct i40e_hw *hw, struct i40e_arq_event_info *e, u16 *pending);


#line 48 
i40e_status i40evf_asq_send_command(struct i40e_hw *hw, struct i40e_aq_desc *desc, void *buff, u16 buff_size, struct i40e_asq_cmd_details *cmd_details);


#line 53 
bool i40evf_asq_done(struct i40e_hw *hw);


#line 56 
void i40evf_debug_aq(struct i40e_hw *hw, enum i40e_debug_mask mask, void *desc, void *buffer, u16 buf_len);


#line 60 
void i40evf_resume_aq(struct i40e_hw *hw);


#line 61 
bool i40evf_check_asq_alive(struct i40e_hw *hw);


#line 62 
i40e_status i40evf_aq_queue_shutdown(struct i40e_hw *hw, bool unloading);


#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
static void i40e_adminq_init_regs(struct i40e_hw *hw)
{
  bool tmp;
  
#line 52 
  tmp = i40e_is_vf(hw);
  
#line 52 
  if ((int)tmp != 0) {
    
#line 53 
    hw->aq.asq.tail = 33792U;
    
#line 54 
    hw->aq.asq.head = 25600U;
    
#line 55 
    hw->aq.asq.len = 26624U;
    
#line 56 
    hw->aq.asq.bal = 31744U;
    
#line 57 
    hw->aq.asq.bah = 30720U;
    
#line 58 
    hw->aq.arq.tail = 28672U;
    
#line 59 
    hw->aq.arq.head = 29696U;
    
#line 60 
    hw->aq.arq.len = 32768U;
    
#line 61 
    hw->aq.arq.bal = 27648U;
    
#line 62 
    hw->aq.arq.bah = 24576U;
  }
  else {
    
#line 64 
    hw->aq.asq.tail = 525312U;
    
#line 65 
    hw->aq.asq.head = 525056U;
    
#line 66 
    hw->aq.asq.len = 524800U;
    
#line 67 
    hw->aq.asq.bal = 524288U;
    
#line 68 
    hw->aq.asq.bah = 524544U;
    
#line 69 
    hw->aq.arq.tail = 525440U;
    
#line 70 
    hw->aq.arq.head = 525184U;
    
#line 71 
    hw->aq.arq.len = 524928U;
    
#line 72 
    hw->aq.arq.bal = 524416U;
    
#line 73 
    hw->aq.arq.bah = 524672U;
  }
  
#line 75 
  return;
}


#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
static i40e_status i40e_alloc_adminq_asq_ring(struct i40e_hw *hw)
{
  i40e_status __retres;
  i40e_status ret_code;
  
#line 85 
  ret_code = i40evf_allocate_dma_mem_d(hw,& hw->aq.asq.desc_buf,(unsigned long long)((unsigned long)hw->aq.num_asq_entries * 32UL),4096U);
  
#line 90 
  if (ret_code != I40E_SUCCESS) {
    
#line 91 
    __retres = ret_code;
    
#line 91 
    goto return_label;
  }
  else ;
  
#line 93 
  ret_code = i40evf_allocate_virt_mem_d(hw,& hw->aq.asq.cmd_buf,(unsigned int)hw->aq.num_asq_entries * 24U);
  
#line 96 
  if (ret_code != I40E_SUCCESS) {
    
#line 97 
    i40evf_free_dma_mem_d(hw,& hw->aq.asq.desc_buf);
    
#line 98 
    __retres = ret_code;
    
#line 98 
    goto return_label;
  }
  else ;
  
#line 101 
  __retres = ret_code;
  return_label: 
#line 101 
                return __retres;
}


#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
static i40e_status i40e_alloc_adminq_arq_ring(struct i40e_hw *hw)
{
  i40e_status ret_code;
  
#line 112 
  ret_code = i40evf_allocate_dma_mem_d(hw,& hw->aq.arq.desc_buf,(unsigned long long)((unsigned long)hw->aq.num_arq_entries * 32UL),4096U);
  
#line 118 
  return ret_code;
}


#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
static void i40e_free_adminq_asq(struct i40e_hw *hw)
{
  
#line 130 
  i40evf_free_dma_mem_d(hw,& hw->aq.asq.desc_buf);
  
#line 131 
  return;
}


#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
static void i40e_free_adminq_arq(struct i40e_hw *hw)
{
  
#line 142 
  i40evf_free_dma_mem_d(hw,& hw->aq.arq.desc_buf);
  
#line 143 
  return;
}


#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
static i40e_status i40e_alloc_arq_bufs(struct i40e_hw *hw)
{
  i40e_status __retres;
  i40e_status ret_code;
  struct i40e_aq_desc *desc;
  struct i40e_dma_mem *bi;
  int i;
  
#line 161 
  ret_code = i40evf_allocate_virt_mem_d(hw,& hw->aq.arq.dma_head,(unsigned int)hw->aq.num_arq_entries * 20U);
  
#line 163 
  if (ret_code != I40E_SUCCESS) 
#line 164 
                                goto alloc_arq_bufs; else ;
  
#line 165 
  hw->aq.arq.r.arq_bi = (struct i40e_dma_mem *)hw->aq.arq.dma_head.va;
  
#line 168 
  i = 0;
  
#line 168 
  goto ldv_52525;
  ldv_52524: 
#line 169 
  ;
  
#line 169 
  bi = hw->aq.arq.r.arq_bi + i;
  
#line 170 
  ret_code = i40evf_allocate_dma_mem_d(hw,bi,(unsigned long long)hw->aq.arq_buf_size,4096U);
  
#line 174 
  if (ret_code != I40E_SUCCESS) 
#line 175 
                                goto unwind_alloc_arq_bufs; else ;
  
#line 178 
  desc = (struct i40e_aq_desc *)hw->aq.arq.desc_buf.va + i;
  
#line 180 
  desc->flags = (unsigned short)4096U;
  
#line 181 
  if ((unsigned int)hw->aq.arq_buf_size > 512U) 
#line 182 
                                                desc->flags = (unsigned short)((unsigned int)desc->flags | 512U); else ;
  
#line 183 
  desc->opcode = (unsigned short)0U;
  
#line 187 
  desc->datalen = (unsigned short)bi->size;
  
#line 188 
  desc->retval = (unsigned short)0U;
  
#line 189 
  desc->cookie_high = 0U;
  
#line 190 
  desc->cookie_low = 0U;
  
#line 191 
  desc->params.external.addr_high = (unsigned int)(bi->pa >> 32);
  
#line 193 
  desc->params.external.addr_low = (unsigned int)bi->pa;
  
#line 195 
  desc->params.external.param0 = 0U;
  
#line 196 
  desc->params.external.param1 = 0U;
  
#line 168 
  i += 1;
  ldv_52525: 
#line 169 
  ;
  
#line 168 
  if ((int)hw->aq.num_arq_entries > i) 
#line 170 
                                       goto ldv_52524; else 
#line 173 
                                                            goto ldv_52526;
  ldv_52526: 
#line 174 
  ;
  alloc_arq_bufs: 
#line 199 
  ;
  
#line 200 
  __retres = ret_code;
  
#line 200 
  goto return_label;
  unwind_alloc_arq_bufs: 
#line 202 
  ;
  
#line 204 
  i -= 1;
  
#line 205 
  goto ldv_52528;
  ldv_52527: 
#line 206 
  ;
  
#line 206 
  i40evf_free_dma_mem_d(hw,hw->aq.arq.r.arq_bi + i);
  
#line 205 
  i -= 1;
  ldv_52528: 
#line 206 
  ;
  
#line 205 
  if (i >= 0) 
#line 207 
              goto ldv_52527; else 
#line 210 
                                   goto ldv_52529;
  ldv_52529: 
#line 211 
  ;
  
#line 207 
  i40evf_free_virt_mem_d(hw,& hw->aq.arq.dma_head);
  
#line 209 
  __retres = ret_code;
  return_label: 
#line 209 
                return __retres;
}


#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
static i40e_status i40e_alloc_asq_bufs(struct i40e_hw *hw)
{
  i40e_status __retres;
  i40e_status ret_code;
  struct i40e_dma_mem *bi;
  int i;
  
#line 223 
  ret_code = i40evf_allocate_virt_mem_d(hw,& hw->aq.asq.dma_head,(unsigned int)hw->aq.num_asq_entries * 20U);
  
#line 225 
  if (ret_code != I40E_SUCCESS) 
#line 226 
                                goto alloc_asq_bufs; else ;
  
#line 227 
  hw->aq.asq.r.asq_bi = (struct i40e_dma_mem *)hw->aq.asq.dma_head.va;
  
#line 230 
  i = 0;
  
#line 230 
  goto ldv_52539;
  ldv_52538: 
#line 231 
  ;
  
#line 231 
  bi = hw->aq.asq.r.asq_bi + i;
  
#line 232 
  ret_code = i40evf_allocate_dma_mem_d(hw,bi,(unsigned long long)hw->aq.asq_buf_size,4096U);
  
#line 236 
  if (ret_code != I40E_SUCCESS) 
#line 237 
                                goto unwind_alloc_asq_bufs; else ;
  
#line 230 
  i += 1;
  ldv_52539: 
#line 231 
  ;
  
#line 230 
  if ((int)hw->aq.num_asq_entries > i) 
#line 232 
                                       goto ldv_52538; else 
#line 235 
                                                            goto ldv_52540;
  ldv_52540: 
#line 236 
  ;
  alloc_asq_bufs: 
#line 239 
  ;
  
#line 240 
  __retres = ret_code;
  
#line 240 
  goto return_label;
  unwind_alloc_asq_bufs: 
#line 242 
  ;
  
#line 244 
  i -= 1;
  
#line 245 
  goto ldv_52542;
  ldv_52541: 
#line 246 
  ;
  
#line 246 
  i40evf_free_dma_mem_d(hw,hw->aq.asq.r.asq_bi + i);
  
#line 245 
  i -= 1;
  ldv_52542: 
#line 246 
  ;
  
#line 245 
  if (i >= 0) 
#line 247 
              goto ldv_52541; else 
#line 250 
                                   goto ldv_52543;
  ldv_52543: 
#line 251 
  ;
  
#line 247 
  i40evf_free_virt_mem_d(hw,& hw->aq.asq.dma_head);
  
#line 249 
  __retres = ret_code;
  return_label: 
#line 249 
                return __retres;
}


#line 256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
static void i40e_free_arq_bufs(struct i40e_hw *hw)
{
  int i;
  
#line 261 
  i = 0;
  
#line 261 
  goto ldv_52549;
  ldv_52548: 
#line 262 
  ;
  
#line 262 
  i40evf_free_dma_mem_d(hw,hw->aq.arq.r.arq_bi + i);
  
#line 261 
  i += 1;
  ldv_52549: 
#line 262 
  ;
  
#line 261 
  if ((int)hw->aq.num_arq_entries > i) 
#line 263 
                                       goto ldv_52548; else 
#line 266 
                                                            goto ldv_52550;
  ldv_52550: 
#line 267 
  ;
  
#line 265 
  i40evf_free_dma_mem_d(hw,& hw->aq.arq.desc_buf);
  
#line 268 
  i40evf_free_virt_mem_d(hw,& hw->aq.arq.dma_head);
  
#line 269 
  return;
}


#line 275  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
static void i40e_free_asq_bufs(struct i40e_hw *hw)
{
  int i;
  
#line 280 
  i = 0;
  
#line 280 
  goto ldv_52556;
  ldv_52555: 
#line 281 
  ;
  
#line 281 
  if ((hw->aq.asq.r.asq_bi + i)->pa != 0ULL) 
#line 282 
                                             i40evf_free_dma_mem_d(hw,hw->aq.asq.r.asq_bi + i); else ;
  
#line 280 
  i += 1;
  ldv_52556: 
#line 281 
  ;
  
#line 280 
  if ((int)hw->aq.num_asq_entries > i) 
#line 282 
                                       goto ldv_52555; else 
#line 285 
                                                            goto ldv_52557;
  ldv_52557: 
#line 286 
  ;
  
#line 285 
  i40evf_free_virt_mem_d(hw,& hw->aq.asq.cmd_buf);
  
#line 288 
  i40evf_free_dma_mem_d(hw,& hw->aq.asq.desc_buf);
  
#line 291 
  i40evf_free_virt_mem_d(hw,& hw->aq.asq.dma_head);
  
#line 292 
  return;
}


#line 300  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
static i40e_status i40e_config_asq_regs(struct i40e_hw *hw)
{
  
#line 302 
  i40e_status ret_code = 0;
  
#line 303 
  u32 reg = 0U;
  
#line 306 
  writel(0U,(void volatile *)(hw->hw_addr + hw->aq.asq.head));
  
#line 307 
  writel(0U,(void volatile *)(hw->hw_addr + hw->aq.asq.tail));
  
#line 310 
  writel((unsigned int)((int)hw->aq.num_asq_entries) | -2147483648,(void volatile *)(hw->hw_addr + hw->aq.asq.len));
  
#line 312 
  writel((unsigned int)hw->aq.asq.desc_buf.pa,(void volatile *)(hw->hw_addr + hw->aq.asq.bal));
  
#line 313 
  writel((unsigned int)(hw->aq.asq.desc_buf.pa >> 32),(void volatile *)(hw->hw_addr + hw->aq.asq.bah));
  
#line 316 
  reg = readl((void const volatile *)(hw->hw_addr + hw->aq.asq.bal));
  
#line 317 
  if ((unsigned int)hw->aq.asq.desc_buf.pa != reg) 
#line 318 
                                                   ret_code = I40E_ERR_ADMIN_QUEUE_ERROR; else ;
  
#line 320 
  return ret_code;
}


#line 329  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
static i40e_status i40e_config_arq_regs(struct i40e_hw *hw)
{
  
#line 331 
  i40e_status ret_code = 0;
  
#line 332 
  u32 reg = 0U;
  
#line 335 
  writel(0U,(void volatile *)(hw->hw_addr + hw->aq.arq.head));
  
#line 336 
  writel(0U,(void volatile *)(hw->hw_addr + hw->aq.arq.tail));
  
#line 339 
  writel((unsigned int)((int)hw->aq.num_arq_entries) | -2147483648,(void volatile *)(hw->hw_addr + hw->aq.arq.len));
  
#line 341 
  writel((unsigned int)hw->aq.arq.desc_buf.pa,(void volatile *)(hw->hw_addr + hw->aq.arq.bal));
  
#line 342 
  writel((unsigned int)(hw->aq.arq.desc_buf.pa >> 32),(void volatile *)(hw->hw_addr + hw->aq.arq.bah));
  
#line 345 
  writel((unsigned int)((int)hw->aq.num_arq_entries + -1),(void volatile *)(hw->hw_addr + hw->aq.arq.tail));
  
#line 348 
  reg = readl((void const volatile *)(hw->hw_addr + hw->aq.arq.bal));
  
#line 349 
  if ((unsigned int)hw->aq.arq.desc_buf.pa != reg) 
#line 350 
                                                   ret_code = I40E_ERR_ADMIN_QUEUE_ERROR; else ;
  
#line 352 
  return ret_code;
}


#line 368  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
static i40e_status i40e_init_asq(struct i40e_hw *hw)
{
  
#line 370 
  i40e_status ret_code = 0;
  
#line 372 
  if ((unsigned int)hw->aq.asq.count != 0U) {
    
#line 374 
    ret_code = I40E_ERR_NOT_READY;
    
#line 375 
    goto init_adminq_exit;
  }
  else ;
  
#line 379 
  if ((unsigned int)hw->aq.num_asq_entries == 0U || (unsigned int)hw->aq.asq_buf_size == 0U) {
    
#line 381 
    ret_code = I40E_ERR_CONFIG;
    
#line 382 
    goto init_adminq_exit;
  }
  else ;
  
#line 385 
  hw->aq.asq.next_to_use = (unsigned short)0U;
  
#line 386 
  hw->aq.asq.next_to_clean = (unsigned short)0U;
  
#line 387 
  hw->aq.asq.count = hw->aq.num_asq_entries;
  
#line 390 
  ret_code = i40e_alloc_adminq_asq_ring(hw);
  
#line 391 
  if (ret_code != I40E_SUCCESS) 
#line 392 
                                goto init_adminq_exit; else ;
  
#line 395 
  ret_code = i40e_alloc_asq_bufs(hw);
  
#line 396 
  if (ret_code != I40E_SUCCESS) 
#line 397 
                                goto init_adminq_free_rings; else ;
  
#line 400 
  ret_code = i40e_config_asq_regs(hw);
  
#line 401 
  if (ret_code != I40E_SUCCESS) 
#line 402 
                                goto init_adminq_free_rings; else ;
  
#line 405 
  goto init_adminq_exit;
  init_adminq_free_rings: 
#line 407 
  ;
  
#line 408 
  i40e_free_adminq_asq(hw);
  init_adminq_exit: 
#line 410 
  ;
  
#line 411 
  return ret_code;
}


#line 427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
static i40e_status i40e_init_arq(struct i40e_hw *hw)
{
  
#line 429 
  i40e_status ret_code = 0;
  
#line 431 
  if ((unsigned int)hw->aq.arq.count != 0U) {
    
#line 433 
    ret_code = I40E_ERR_NOT_READY;
    
#line 434 
    goto init_adminq_exit;
  }
  else ;
  
#line 438 
  if ((unsigned int)hw->aq.num_arq_entries == 0U || (unsigned int)hw->aq.arq_buf_size == 0U) {
    
#line 440 
    ret_code = I40E_ERR_CONFIG;
    
#line 441 
    goto init_adminq_exit;
  }
  else ;
  
#line 444 
  hw->aq.arq.next_to_use = (unsigned short)0U;
  
#line 445 
  hw->aq.arq.next_to_clean = (unsigned short)0U;
  
#line 446 
  hw->aq.arq.count = hw->aq.num_arq_entries;
  
#line 449 
  ret_code = i40e_alloc_adminq_arq_ring(hw);
  
#line 450 
  if (ret_code != I40E_SUCCESS) 
#line 451 
                                goto init_adminq_exit; else ;
  
#line 454 
  ret_code = i40e_alloc_arq_bufs(hw);
  
#line 455 
  if (ret_code != I40E_SUCCESS) 
#line 456 
                                goto init_adminq_free_rings; else ;
  
#line 459 
  ret_code = i40e_config_arq_regs(hw);
  
#line 460 
  if (ret_code != I40E_SUCCESS) 
#line 461 
                                goto init_adminq_free_rings; else ;
  
#line 464 
  goto init_adminq_exit;
  init_adminq_free_rings: 
#line 466 
  ;
  
#line 467 
  i40e_free_adminq_arq(hw);
  init_adminq_exit: 
#line 469 
  ;
  
#line 470 
  return ret_code;
}


#line 479  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
static i40e_status i40e_shutdown_asq(struct i40e_hw *hw)
{
  i40e_status __retres;
  
#line 481 
  i40e_status ret_code = 0;
  
#line 483 
  if ((unsigned int)hw->aq.asq.count == 0U) {
    
#line 484 
    __retres = I40E_ERR_NOT_READY;
    
#line 484 
    goto return_label;
  }
  else ;
  
#line 487 
  writel(0U,(void volatile *)(hw->hw_addr + hw->aq.asq.head));
  
#line 488 
  writel(0U,(void volatile *)(hw->hw_addr + hw->aq.asq.tail));
  
#line 489 
  writel(0U,(void volatile *)(hw->hw_addr + hw->aq.asq.len));
  
#line 490 
  writel(0U,(void volatile *)(hw->hw_addr + hw->aq.asq.bal));
  
#line 491 
  writel(0U,(void volatile *)(hw->hw_addr + hw->aq.asq.bah));
  
#line 494 
  ldv_mutex_lock_73(& hw->aq.asq_mutex);
  
#line 496 
  hw->aq.asq.count = (unsigned short)0U;
  
#line 499 
  i40e_free_asq_bufs(hw);
  
#line 501 
  ldv_mutex_unlock_74(& hw->aq.asq_mutex);
  
#line 503 
  __retres = ret_code;
  return_label: 
#line 503 
                return __retres;
}


#line 512  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
static i40e_status i40e_shutdown_arq(struct i40e_hw *hw)
{
  i40e_status __retres;
  
#line 514 
  i40e_status ret_code = 0;
  
#line 516 
  if ((unsigned int)hw->aq.arq.count == 0U) {
    
#line 517 
    __retres = I40E_ERR_NOT_READY;
    
#line 517 
    goto return_label;
  }
  else ;
  
#line 520 
  writel(0U,(void volatile *)(hw->hw_addr + hw->aq.arq.head));
  
#line 521 
  writel(0U,(void volatile *)(hw->hw_addr + hw->aq.arq.tail));
  
#line 522 
  writel(0U,(void volatile *)(hw->hw_addr + hw->aq.arq.len));
  
#line 523 
  writel(0U,(void volatile *)(hw->hw_addr + hw->aq.arq.bal));
  
#line 524 
  writel(0U,(void volatile *)(hw->hw_addr + hw->aq.arq.bah));
  
#line 527 
  ldv_mutex_lock_75(& hw->aq.arq_mutex);
  
#line 529 
  hw->aq.arq.count = (unsigned short)0U;
  
#line 532 
  i40e_free_arq_bufs(hw);
  
#line 534 
  ldv_mutex_unlock_76(& hw->aq.arq_mutex);
  
#line 536 
  __retres = ret_code;
  return_label: 
#line 536 
                return __retres;
}


#line 550  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
i40e_status i40evf_init_adminq(struct i40e_hw *hw)
{
  i40e_status ret_code;
  
#line 555 
  if ((((unsigned int)hw->aq.num_arq_entries == 0U || (unsigned int)hw->aq.num_asq_entries == 0U) || (unsigned int)hw->aq.arq_buf_size == 0U) || (unsigned int)hw->aq.asq_buf_size == 0U) {
    
#line 559 
    ret_code = I40E_ERR_CONFIG;
    
#line 560 
    goto init_adminq_exit;
  }
  else ;
  {
    struct lock_class_key __key;
    
#line 564 
    __mutex_init(& hw->aq.asq_mutex,"&hw->aq.asq_mutex",& __key);
  }
  {
    struct lock_class_key __key_0;
    
#line 565 
    __mutex_init(& hw->aq.arq_mutex,"&hw->aq.arq_mutex",& __key_0);
  }
  
#line 568 
  i40e_adminq_init_regs(hw);
  
#line 571 
  hw->aq.asq_cmd_timeout = 250U;
  
#line 574 
  ret_code = i40e_init_asq(hw);
  
#line 575 
  if (ret_code != I40E_SUCCESS) 
#line 576 
                                goto init_adminq_destroy_locks; else ;
  
#line 579 
  ret_code = i40e_init_arq(hw);
  
#line 580 
  if (ret_code != I40E_SUCCESS) 
#line 581 
                                goto init_adminq_free_asq; else ;
  
#line 584 
  goto init_adminq_exit;
  init_adminq_free_asq: 
#line 586 
  ;
  
#line 587 
  i40e_shutdown_asq(hw);
  init_adminq_destroy_locks: 
#line 588 
  ;
  init_adminq_exit: 
#line 590 
  ;
  
#line 591 
  return ret_code;
}


#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
i40e_status i40evf_shutdown_adminq(struct i40e_hw *hw)
{
  bool tmp;
  
#line 600 
  i40e_status ret_code = 0;
  
#line 602 
  tmp = i40evf_check_asq_alive(hw);
  
#line 602 
  if ((int)tmp != 0) 
#line 603 
                     i40evf_aq_queue_shutdown(hw,(_Bool)1); else ;
  
#line 605 
  i40e_shutdown_asq(hw);
  
#line 606 
  i40e_shutdown_arq(hw);
  
#line 610 
  return ret_code;
}


#line 619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
static u16 i40e_clean_asq(struct i40e_hw *hw)
{
  u16 __retres;
  struct i40e_asq_cmd_details *details;
  struct i40e_aq_desc desc_cb;
  struct i40e_aq_desc *desc;
  unsigned int tmp;
  unsigned int tmp_0;
  unsigned int tmp_1;
  
#line 621 
  struct i40e_adminq_ring *asq = & hw->aq.asq;
  
#line 623 
  u16 ntc = asq->next_to_clean;
  
#line 627 
  desc = (struct i40e_aq_desc *)asq->desc_buf.va + (int)ntc;
  
#line 628 
  details = (struct i40e_asq_cmd_details *)asq->cmd_buf.va + (int)ntc;
  
#line 629 
  goto ldv_52612;
  ldv_52611: 
#line 630 
  ;
  
#line 630 
  tmp = readl((void const volatile *)(hw->hw_addr + hw->aq.asq.head));
  
#line 630 
  ;
  
#line 630 
  ;
  
#line 630 
  i40evf_debug_d((void *)hw,16777216U,(char *)"%s: ntc %d head %d.\n","i40e_clean_asq",(int)ntc,tmp);
  
#line 634 
  if (details->callback != (void *)0) {
    
#line 635 
    void (*cb_func)(struct i40e_hw *, struct i40e_aq_desc *) = (void (*)(struct i40e_hw *, struct i40e_aq_desc *))details->callback;
    
#line 637 
    desc_cb = *desc;
    
#line 638 
    (*cb_func)(hw,& desc_cb);
  }
  else ;
  
#line 640 
  memset((void *)desc,0,32UL);
  
#line 641 
  memset((void *)details,0,24UL);
  
#line 643 
  ntc = (u16)((int)ntc + 1);
  
#line 644 
  if ((int)asq->count == (int)ntc) 
#line 645 
                                   ntc = (unsigned short)0U; else ;
  
#line 646 
  desc = (struct i40e_aq_desc *)asq->desc_buf.va + (int)ntc;
  
#line 647 
  details = (struct i40e_asq_cmd_details *)asq->cmd_buf.va + (int)ntc;
  ldv_52612: 
#line 648 
  ;
  
#line 629 
  tmp_0 = readl((void const volatile *)(hw->hw_addr + hw->aq.asq.head));
  
#line 629 
  ;
  
#line 629 
  if (tmp_0 != (unsigned int)ntc) 
#line 631 
                                  goto ldv_52611; else 
#line 634 
                                                       goto ldv_52613;
  ldv_52613: 
#line 635 
  ;
  
#line 650 
  asq->next_to_clean = ntc;
  
#line 652 
  if ((int)asq->next_to_clean <= (int)asq->next_to_use) 
#line 652 
                                                        tmp_1 = (unsigned int)asq->count; else 
                                                                    
#line 652 
                                                                    tmp_1 = 0U;
  
#line 652 
  ;
  
#line 652 
  __retres = (unsigned short)(((tmp_1 + (unsigned int)asq->next_to_clean) - (unsigned int)asq->next_to_use) + 65535U);
  
#line 652 
  return __retres;
}


#line 662  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
bool i40evf_asq_done(struct i40e_hw *hw)
{
  bool __retres;
  unsigned int tmp;
  
#line 667 
  tmp = readl((void const volatile *)(hw->hw_addr + hw->aq.asq.head));
  
#line 667 
  ;
  
#line 667 
  __retres = (_Bool)(tmp == (unsigned int)hw->aq.asq.next_to_use);
  
#line 667 
  return __retres;
}


#line 682  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
i40e_status i40evf_asq_send_command(struct i40e_hw *hw, struct i40e_aq_desc *desc, void *buff, u16 buff_size, struct i40e_asq_cmd_details *cmd_details)
{
  struct i40e_asq_cmd_details *details;
  struct i40e_aq_desc *desc_on_ring;
  u16 tmp;
  bool tmp_1;
  
#line 688 
  i40e_status status = 0;
  
#line 689 
  struct i40e_dma_mem *dma_buff = (struct i40e_dma_mem *)0;
  
#line 692 
  bool cmd_completed = (_Bool)0;
  
#line 693 
  u16 retval = (unsigned short)0U;
  
#line 694 
  u32 val = 0U;
  
#line 696 
  val = readl((void const volatile *)(hw->hw_addr + hw->aq.asq.head));
  
#line 697 
  if ((unsigned int)hw->aq.num_asq_entries <= val) {
    
#line 698 
    i40evf_debug_d((void *)hw,16777216U,(char *)"AQTX: head overrun at %d\n",val);
    
#line 700 
    status = I40E_ERR_QUEUE_EMPTY;
    
#line 701 
    goto asq_send_command_exit;
  }
  else ;
  
#line 704 
  if ((unsigned int)hw->aq.asq.count == 0U) {
    
#line 705 
    i40evf_debug_d((void *)hw,16777216U,(char *)"AQTX: Admin queue not initialized.\n");
    
#line 707 
    status = I40E_ERR_QUEUE_EMPTY;
    
#line 708 
    goto asq_send_command_exit;
  }
  else ;
  
#line 711 
  details = (struct i40e_asq_cmd_details *)hw->aq.asq.cmd_buf.va + (int)hw->aq.asq.next_to_use;
  
#line 712 
  if (cmd_details != (struct i40e_asq_cmd_details *)0) {
    
#line 713 
    *details = *cmd_details;
    
#line 719 
    if (details->cookie != 0ULL) {
      
#line 720 
      desc->cookie_high = (unsigned int)(details->cookie >> 32);
      
#line 722 
      desc->cookie_low = (unsigned int)details->cookie;
    }
    else ;
  }
  else 
#line 726 
       memset((void *)details,0,24UL);
  
#line 730 
  desc->flags = (unsigned short)((int)desc->flags & ~ ((int)details->flags_dis));
  
#line 731 
  desc->flags = (unsigned short)((int)desc->flags | (int)details->flags_ena);
  
#line 733 
  ldv_mutex_lock_77(& hw->aq.asq_mutex);
  
#line 735 
  if ((int)hw->aq.asq_buf_size < (int)buff_size) {
    
#line 736 
    i40evf_debug_d((void *)hw,16777216U,(char *)"AQTX: Invalid buffer size: %d.\n",(int)buff_size);
    
#line 740 
    status = I40E_ERR_INVALID_SIZE;
    
#line 741 
    goto asq_send_command_error;
  }
  else ;
  
#line 744 
  if ((int)details->postpone != 0 && ! details->async) {
    
#line 745 
    i40evf_debug_d((void *)hw,16777216U,(char *)"AQTX: Async flag not set along with postpone flag");
    
#line 748 
    status = I40E_ERR_PARAM;
    
#line 749 
    goto asq_send_command_error;
  }
  else ;
  
#line 759 
  tmp = i40e_clean_asq(hw);
  
#line 759 
  if ((unsigned int)tmp == 0U) {
    
#line 760 
    i40evf_debug_d((void *)hw,16777216U,(char *)"AQTX: Error queue is full.\n");
    
#line 763 
    status = I40E_ERR_ADMIN_QUEUE_FULL;
    
#line 764 
    goto asq_send_command_error;
  }
  else ;
  
#line 768 
  desc_on_ring = (struct i40e_aq_desc *)hw->aq.asq.desc_buf.va + (int)hw->aq.asq.next_to_use;
  
#line 771 
  *desc_on_ring = *desc;
  
#line 774 
  if (buff != (void *)0) {
    
#line 775 
    dma_buff = hw->aq.asq.r.asq_bi + (int)hw->aq.asq.next_to_use;
    
#line 777 
    memcpy(dma_buff->va,(void const *)buff,(unsigned long)buff_size);
    
#line 778 
    desc_on_ring->datalen = buff_size;
    
#line 783 
    desc_on_ring->params.external.addr_high = (unsigned int)(dma_buff->pa >> 32);
    
#line 785 
    desc_on_ring->params.external.addr_low = (unsigned int)dma_buff->pa;
  }
  else ;
  
#line 790 
  i40evf_debug_d((void *)hw,16777216U,(char *)"AQTX: desc and buffer:\n");
  
#line 791 
  i40evf_debug_aq(hw,(enum i40e_debug_mask)I40E_DEBUG_AQ_COMMAND,(void *)desc_on_ring,buff,(unsigned short)((int)buff_size));
  
#line 793 
  hw->aq.asq.next_to_use = (u16)((int)hw->aq.asq.next_to_use + 1);
  
#line 794 
  if ((int)hw->aq.asq.next_to_use == (int)hw->aq.asq.count) 
#line 795 
                                                            hw->aq.asq.next_to_use = (unsigned short)0U; else ;
  
#line 796 
  if (! details->postpone) 
#line 797 
                           writel((unsigned int)hw->aq.asq.next_to_use,(void volatile *)(hw->hw_addr + hw->aq.asq.tail)); else ;
  
#line 802 
  if (! details->async && ! details->postpone) {
    bool tmp_0;
    
#line 803 
    u32 total_delay = 0U;
    ldv_52635: 
#line 804 
    ;
    
#line 809 
    tmp_0 = i40evf_asq_done(hw);
    
#line 809 
    if ((int)tmp_0 != 0) 
#line 810 
                         goto ldv_52634; else ;
    
#line 811 
    usleep_range(1000UL,2000UL);
    
#line 812 
    total_delay += 1U;
    
#line 813 
    if (hw->aq.asq_cmd_timeout > total_delay) 
#line 815 
                                              goto ldv_52635; else 
#line 818 
                                                                   goto ldv_52634;
    ldv_52634: 
#line 819 
    ;
  }
  else ;
  
#line 817 
  tmp_1 = i40evf_asq_done(hw);
  
#line 817 
  if ((int)tmp_1 != 0) {
    
#line 818 
    *desc = *desc_on_ring;
    
#line 819 
    if (buff != (void *)0) 
#line 820 
                           memcpy(buff,(void const *)dma_buff->va,(unsigned long)buff_size); else ;
    
#line 821 
    retval = desc->retval;
    
#line 822 
    if ((unsigned int)retval != 0U) {
      
#line 823 
      i40evf_debug_d((void *)hw,16777216U,(char *)"AQTX: Command completed with error 0x%X.\n",(int)retval);
      
#line 829 
      retval = (unsigned short)((unsigned int)retval & 255U);
    }
    else ;
    
#line 831 
    cmd_completed = (_Bool)1;
    
#line 832 
    if ((unsigned int)retval == 0U) 
#line 833 
                                    status = I40E_SUCCESS; else 
#line 835 
                                                                status = I40E_ERR_ADMIN_QUEUE_ERROR;
    
#line 836 
    hw->aq.asq_last_status = (enum i40e_admin_queue_err)retval;
  }
  else ;
  
#line 839 
  i40evf_debug_d((void *)hw,16777216U,(char *)"AQTX: desc and buffer writeback:\n");
  
#line 841 
  i40evf_debug_aq(hw,(enum i40e_debug_mask)I40E_DEBUG_AQ_COMMAND,(void *)desc,buff,(unsigned short)((int)buff_size));
  
#line 845 
  if (! cmd_completed && (! details->async && ! details->postpone)) {
    
#line 847 
    i40evf_debug_d((void *)hw,16777216U,(char *)"AQTX: Writeback timeout.\n");
    
#line 850 
    status = I40E_ERR_ADMIN_QUEUE_TIMEOUT;
  }
  else ;
  asq_send_command_error: 
#line 853 
  ;
  
#line 854 
  ldv_mutex_unlock_78(& hw->aq.asq_mutex);
  asq_send_command_exit: 
#line 855 
  ;
  
#line 856 
  return status;
}


#line 866  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
void i40evf_fill_default_direct_cmd_desc(struct i40e_aq_desc *desc, u16 opcode)
{
  
#line 870 
  memset((void *)desc,0,32UL);
  
#line 871 
  desc->opcode = opcode;
  
#line 872 
  desc->flags = (unsigned short)8192U;
  
#line 873 
  return;
}


#line 885  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
i40e_status i40evf_clean_arq_element(struct i40e_hw *hw, struct i40e_arq_event_info *e, u16 *pending)
{
  struct i40e_aq_desc *desc;
  struct i40e_dma_mem *bi;
  u16 desc_idx;
  u16 datalen;
  u16 flags;
  u16 ntu;
  unsigned int tmp;
  int tmp_1;
  
#line 889 
  i40e_status ret_code = 0;
  
#line 890 
  u16 ntc = hw->aq.arq.next_to_clean;
  
#line 899 
  ldv_mutex_lock_79(& hw->aq.arq_mutex);
  
#line 902 
  tmp = readl((void const volatile *)(hw->hw_addr + hw->aq.arq.head));
  
#line 902 
  ntu = (unsigned short)((unsigned int)((unsigned short)tmp) & 1023U);
  
#line 903 
  if ((int)ntu == (int)ntc) {
    
#line 905 
    ret_code = I40E_ERR_ADMIN_QUEUE_NO_WORK;
    
#line 906 
    goto clean_arq_element_out;
  }
  else ;
  
#line 910 
  desc = (struct i40e_aq_desc *)hw->aq.arq.desc_buf.va + (int)ntc;
  
#line 911 
  desc_idx = ntc;
  
#line 913 
  flags = desc->flags;
  
#line 914 
  if (((int)flags & 4) != 0) {
    
#line 915 
    ret_code = I40E_ERR_ADMIN_QUEUE_ERROR;
    
#line 916 
    hw->aq.arq_last_status = (enum i40e_admin_queue_err)desc->retval;
    
#line 918 
    i40evf_debug_d((void *)hw,16777216U,(char *)"AQRX: Event received with error 0x%X.\n",(unsigned int)hw->aq.arq_last_status);
  }
  else ;
  
#line 924 
  e->desc = *desc;
  
#line 925 
  datalen = desc->datalen;
  {
    int tmp_0;
    
#line 926 
    u16 _min1 = datalen;
    
#line 926 
    u16 _min2 = e->buf_len;
    
#line 926 
    if ((int)_min1 < (int)_min2) 
#line 926 
                                 tmp_0 = (int)_min1; else 
#line 926 
                                                          tmp_0 = (int)_min2;
    
#line 926 
    tmp_1 = tmp_0;
  }
  
#line 926 
  e->msg_len = (unsigned short)tmp_1;
  
#line 927 
  if (e->msg_buf != (u8 *)0U && (unsigned int)e->msg_len != 0U) 
#line 928 
                                                                memcpy((void *)e->msg_buf,(void const *)(hw->aq.arq.r.arq_bi + (int)desc_idx)->va,(unsigned long)e->msg_len); else ;
  
#line 931 
  i40evf_debug_d((void *)hw,16777216U,(char *)"AQRX: desc and buffer:\n");
  
#line 932 
  i40evf_debug_aq(hw,(enum i40e_debug_mask)I40E_DEBUG_AQ_COMMAND,(void *)desc,(void *)e->msg_buf,(unsigned short)((int)hw->aq.arq_buf_size));
  
#line 939 
  bi = hw->aq.arq.r.arq_bi + (int)ntc;
  
#line 940 
  memset((void *)desc,0,32UL);
  
#line 942 
  desc->flags = (unsigned short)4096U;
  
#line 943 
  if ((unsigned int)hw->aq.arq_buf_size > 512U) 
#line 944 
                                                desc->flags = (unsigned short)((unsigned int)desc->flags | 512U); else ;
  
#line 945 
  desc->datalen = (unsigned short)bi->size;
  
#line 946 
  desc->params.external.addr_high = (unsigned int)(bi->pa >> 32);
  
#line 947 
  desc->params.external.addr_low = (unsigned int)bi->pa;
  
#line 950 
  writel((unsigned int)ntc,(void volatile *)(hw->hw_addr + hw->aq.arq.tail));
  
#line 952 
  ntc = (u16)((int)ntc + 1);
  
#line 953 
  if ((int)hw->aq.num_arq_entries == (int)ntc) 
#line 954 
                                               ntc = (unsigned short)0U; else ;
  
#line 955 
  hw->aq.arq.next_to_clean = ntc;
  
#line 956 
  hw->aq.arq.next_to_use = ntu;
  clean_arq_element_out: 
#line 958 
  ;
  
#line 960 
  if (pending != (u16 *)0U) {
    unsigned int tmp_2;
    
#line 961 
    if ((int)ntc > (int)ntu) 
#line 961 
                             tmp_2 = (unsigned int)hw->aq.arq.count; else 
                                                                    
#line 961 
                                                                    tmp_2 = 0U;
    
#line 961 
    *pending = (unsigned short)(tmp_2 + (unsigned int)((int)ntu - (int)ntc));
  }
  else ;
  
#line 962 
  ldv_mutex_unlock_80(& hw->aq.arq_mutex);
  
#line 964 
  return ret_code;
}


#line 967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_adminq.c"
void i40evf_resume_aq(struct i40e_hw *hw)
{
  
#line 970 
  hw->aq.asq.next_to_use = (unsigned short)0U;
  
#line 971 
  hw->aq.asq.next_to_clean = (unsigned short)0U;
  
#line 973 
  i40e_config_asq_regs(hw);
  
#line 975 
  hw->aq.arq.next_to_use = (unsigned short)0U;
  
#line 976 
  hw->aq.arq.next_to_clean = (unsigned short)0U;
  
#line 978 
  i40e_config_arq_regs(hw);
  
#line 979 
  return;
}


#line 751  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40e_adminq.c.aux"
static void ldv_mutex_lock_73(struct mutex *ldv_func_arg1)
{
  
#line 755 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"asq_mutex_of_i40e_adminq_info");
  
#line 756 
  return;
}


#line 759  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40e_adminq.c.aux"
static void ldv_mutex_unlock_74(struct mutex *ldv_func_arg1)
{
  
#line 763 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"asq_mutex_of_i40e_adminq_info");
  
#line 764 
  return;
}


#line 767  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40e_adminq.c.aux"
static void ldv_mutex_lock_75(struct mutex *ldv_func_arg1)
{
  
#line 771 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"arq_mutex_of_i40e_adminq_info");
  
#line 772 
  return;
}


#line 775  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40e_adminq.c.aux"
static void ldv_mutex_unlock_76(struct mutex *ldv_func_arg1)
{
  
#line 779 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"arq_mutex_of_i40e_adminq_info");
  
#line 780 
  return;
}


#line 783  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40e_adminq.c.aux"
static void ldv_mutex_lock_77(struct mutex *ldv_func_arg1)
{
  
#line 787 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"asq_mutex_of_i40e_adminq_info");
  
#line 788 
  return;
}


#line 791  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40e_adminq.c.aux"
static void ldv_mutex_unlock_78(struct mutex *ldv_func_arg1)
{
  
#line 795 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"asq_mutex_of_i40e_adminq_info");
  
#line 796 
  return;
}


#line 799  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40e_adminq.c.aux"
static void ldv_mutex_lock_79(struct mutex *ldv_func_arg1)
{
  
#line 803 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"arq_mutex_of_i40e_adminq_info");
  
#line 804 
  return;
}


#line 807  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40e_adminq.c.aux"
static void ldv_mutex_unlock_80(struct mutex *ldv_func_arg1)
{
  
#line 811 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"arq_mutex_of_i40e_adminq_info");
  
#line 812 
  return;
}

unsigned short __builtin_bswap16(unsigned short);

void __builtin_prefetch(void const * , ...);

void __builtin_unreachable(void);


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40e_txrx.c.aux"
void ldv_atomic_inc(atomic_t *v);


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void set_bit(long nr, unsigned long volatile *addr)
{
  
#line 74 
  if (0 != 0) 
#line 76 
              ldv_inline_asm(); else 
#line 79 
                                     ldv_inline_asm();
  
#line 80 
  return;
}


#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(long nr, unsigned long volatile *addr)
{
  int __retres;
  
#line 206 
  ldv_inline_asm();
  
#line 207 
  ldv_inline_asm();
  
#line 206 
  __retres = 0;
  
#line 206 
  goto return_label;
  cc_label: 
#line 206 
  ;
  
#line 206 
  __retres = 1;
  return_label: 
#line 206 
                return __retres;
}


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val)
{
  __u16 tmp;
  
#line 49 
  tmp = __builtin_bswap16((unsigned short)((int)val));
  
#line 49 
  return tmp;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
void __bad_percpu_size(void);


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-defs.h"
void __bad_size_call_parameter(void);


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bug.h"
void warn_slowpath_null(char const *, int const);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_64.h"
unsigned long __phys_addr(unsigned long);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const *v)
{
  int __retres;
  int const volatile *tmp;
  {
    
#line 27 
    int const __var = 0;
    
#line 27 
    tmp = (int const volatile *)(& v->counter);
  }
  
#line 27 
  __retres = *tmp;
  
#line 27 
  return __retres;
}


#line 98 
static void atomic_inc(atomic_t *v);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size, gfp_t flags);


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmdebug.h"
void dump_page(struct page *, char const *);


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/topology.h"
__inline static int numa_node_id(void)
{
  int tmp_3;
  {
    int pscr_ret__;
    {
      
#line 77 
      void const *__vpp_verify = (void const *)0;
      
#line 77 
      void const *tmp = __vpp_verify;
    }
    
#line 77 
    switch (4UL) {
      int tmp_0;
      int tmp_0_0;
      int tmp_1;
      int tmp_2;
      case (unsigned long)1: 
#line 77 
      ;
      {
        int pfo_ret__;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15521;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15521;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15521;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15521;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_15521: 
#line 77 
        ;
        
#line 77 
        tmp_0 = pfo_ret__;
      }
      
#line 77 
      pscr_ret__ = tmp_0;
      
#line 77 
      goto ldv_15527;
      case (unsigned long)2: 
#line 77 
      ;
      {
        int pfo_ret___0;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15531;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15531;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15531;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15531;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_15531: 
#line 77 
        ;
        
#line 77 
        tmp_0_0 = pfo_ret___0;
      }
      
#line 77 
      pscr_ret__ = tmp_0_0;
      
#line 77 
      goto ldv_15527;
      case (unsigned long)4: 
#line 77 
      ;
      {
        int pfo_ret___1;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15540;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15540;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15540;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15540;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_15540: 
#line 77 
        ;
        
#line 77 
        tmp_1 = pfo_ret___1;
      }
      
#line 77 
      pscr_ret__ = tmp_1;
      
#line 77 
      goto ldv_15527;
      case (unsigned long)8: 
#line 77 
      ;
      {
        int pfo_ret___2;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15549;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15549;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15549;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15549;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_15549: 
#line 77 
        ;
        
#line 77 
        tmp_2 = pfo_ret___2;
      }
      
#line 77 
      pscr_ret__ = tmp_2;
      
#line 77 
      goto ldv_15527;
      default: 
#line 77 
      ;
      
#line 77 
      __bad_size_call_parameter();
      
#line 77 
      goto ldv_15527;
    }
    ldv_15527: 
#line 77 
    ;
    
#line 77 
    tmp_3 = pscr_ret__;
  }
  
#line 77 
  return tmp_3;
}


#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
struct page *alloc_pages_current(gfp_t, unsigned int);


#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  struct page *tmp;
  
#line 327 
  tmp = alloc_pages_current(gfp_mask,order);
  
#line 327 
  return tmp;
}


#line 366 
void __free_pages(struct page *, unsigned int);


#line 1089  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
void _dev_info(struct device const *, char const * , ...);


#line 400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page-flags.h"
__inline static int PageTail(struct page const *page)
{
  int tmp;
  
#line 400 
  tmp = constant_test_bit(15L,(unsigned long const volatile *)(& page->flags));
  
#line 400 
  return tmp;
}


#line 440  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static struct page *compound_head_by_tail(struct page *tail)
{
  struct page *__retres;
  int tmp;
  
#line 442 
  struct page *head = tail->__anonCompField_page_46.first_page;
  
#line 443 
  ldv_inline_asm();
  
#line 450 
  tmp = PageTail((struct page const *)tail);
  
#line 450 
  if ((long)(tmp != 0) != 0L) {
    
#line 451 
    __retres = head;
    
#line 451 
    goto return_label;
  }
  else ;
  
#line 452 
  __retres = tail;
  return_label: 
#line 452 
                return __retres;
}


#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static struct page *compound_head(struct page *page)
{
  struct page *__retres;
  int tmp_0;
  
#line 463 
  tmp_0 = PageTail((struct page const *)page);
  
#line 463 
  if ((long)(tmp_0 != 0) != 0L) {
    struct page *tmp;
    
#line 464 
    tmp = compound_head_by_tail(page);
    
#line 464 
    __retres = tmp;
    
#line 464 
    goto return_label;
  }
  else ;
  
#line 465 
  __retres = page;
  return_label: 
#line 465 
                return __retres;
}


#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static int page_count(struct page *page)
{
  int tmp_0;
  struct page *tmp;
  
#line 498 
  tmp = compound_head(page);
  
#line 498 
  tmp_0 = atomic_read((atomic_t const *)(& tmp->__anonCompField_page_42.__anonCompField___anonstruct_151_41.__anonCompField___anonunion_153_40._count));
  
#line 498 
  return tmp_0;
}


#line 532 
bool __get_page_tail(struct page *);


#line 534  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void get_page(struct page *page)
{
  int tmp_0;
  int tmp_1;
  
#line 536 
  tmp_0 = PageTail((struct page const *)page);
  
#line 536 
  if ((long)(tmp_0 != 0) != 0L) {
    bool tmp;
    
#line 537 
    tmp = __get_page_tail(page);
    
#line 537 
    if ((long)((int)tmp != 0) != 0L) 
#line 538 
                                     goto return_label; else ;
  }
  else ;
  
#line 543 
  tmp_1 = atomic_read((atomic_t const *)(& page->__anonCompField_page_42.__anonCompField___anonstruct_151_41.__anonCompField___anonunion_153_40._count));
  
#line 543 
  if ((long)(tmp_1 <= 0) != 0L) {
    
#line 543 
    dump_page(page,"VM_BUG_ON_PAGE(");
    
#line 544 
    ldv_inline_asm();
    
#line 543 
    ;
  }
  else ;
  
#line 544 
  atomic_inc(& page->__anonCompField_page_42.__anonCompField___anonstruct_151_41.__anonCompField___anonunion_153_40._count);
  return_label: 
#line 545 
                return;
}


#line 760  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static int page_to_nid(struct page const *page)
{
  int __retres;
  
#line 762 
  __retres = (int)(page->flags >> 54UL);
  
#line 762 
  return __retres;
}


#line 945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page const *page)
{
  void *__retres;
  
#line 947 
  __retres = (void *)((unsigned long)((unsigned long long)(((long)page + 24189255811072L) / 64L) << 12) + 18446612132314218496UL);
  
#line 947 
  return __retres;
}


#line 1031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  bool __retres;
  
#line 1037 
  __retres = (_Bool)(page->__anonCompField_page_42.__anonCompField___anonstruct_151_37.index == 18446744073709551615UL);
  
#line 1037 
  return __retres;
}


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  
#line 74 
  if ((long)(count > 268435455U) != 0L) {
    
#line 76 
    ldv_inline_asm();
    
#line 74 
    ;
  }
  else ;
  
#line 76 
  dql->last_obj_cnt = count;
  
#line 77 
  ldv_inline_asm();
  
#line 85 
  dql->num_queued += count;
  
#line 86 
  return;
}


#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql const *dql)
{
  int __retres;
  unsigned int const volatile *tmp;
  unsigned int const volatile *tmp_0;
  {
    
#line 91 
    unsigned int const __var = 0U;
    
#line 91 
    tmp = (unsigned int const volatile *)(& dql->adj_limit);
  }
  {
    
#line 91 
    unsigned int const __var_0 = 0U;
    
#line 91 
    tmp_0 = (unsigned int const volatile *)(& dql->num_queued);
  }
  
#line 91 
  ;
  
#line 91 
  __retres = (int)(*tmp - *tmp_0);
  
#line 91 
  return __retres;
}


#line 95 
void dql_completed(struct dql *, unsigned int);


#line 98 
void dql_reset(struct dql *);


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemcheck.h"
__inline static void kmemcheck_mark_initialized(void *address, unsigned int n)
{
  
#line 133 
  return;
}


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
void kfree(void const *);


#line 581 
static void *kzalloc(size_t size, gfp_t flags);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  __sum16 __retres;
  
#line 24 
  ldv_inline_asm();
  
#line 29 
  __retres = (unsigned short)(~ sum >> 16);
  
#line 29 
  return __retres;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_tcpudp_nofold(__be32 saddr, __be32 daddr, unsigned short len, unsigned short proto, __wsum sum)
{
  
#line 89 
  ldv_inline_asm();
  
#line 97 
  return sum;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr, unsigned short len, unsigned short proto, __wsum sum)
{
  __sum16 tmp_0;
  __wsum tmp;
  
#line 116 
  tmp = csum_tcpudp_nofold(saddr,daddr,(unsigned short)((int)len),(unsigned short)((int)proto),sum);
  
#line 116 
  tmp_0 = csum_fold(tmp);
  
#line 116 
  return tmp_0;
}


#line 129 
__wsum csum_partial(void const *, int, __wsum);


#line 179 
__sum16 csum_ipv6_magic(struct in6_addr const *, struct in6_addr const *, __u32, unsigned short, __wsum);


#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static unsigned int add32_with_carry(unsigned int a, unsigned int b)
{
  
#line 184 
  ldv_inline_asm();
  
#line 188 
  return a;
}


#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_add(__wsum csum, __wsum addend)
{
  __wsum tmp;
  
#line 194 
  tmp = add32_with_carry(csum,addend);
  
#line 194 
  return tmp;
}


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  int __retres;
  
#line 76 
  __retres = (unsigned int)dma_direction <= 2U;
  
#line 76 
  return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-debug.h"
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t, bool);


#line 42 
void debug_dma_mapping_error(struct device *, dma_addr_t);


#line 44 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int, bool);


#line 67 
void debug_dma_sync_single_range_for_cpu(struct device *, dma_addr_t, unsigned long, size_t, int);


#line 73 
void debug_dma_sync_single_range_for_device(struct device *, dma_addr_t, unsigned long, size_t, int);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
extern struct dma_map_ops *dma_ops;


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  struct dma_map_ops *__retres;
  
#line 37 
  if ((long)(dev == (struct device *)0) != 0L || dev->archdata.dma_ops == (struct dma_map_ops *)0) {
    
#line 38 
    __retres = dma_ops;
    
#line 38 
    goto return_label;
  }
  else {
    
#line 40 
    __retres = dev->archdata.dma_ops;
    
#line 40 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  dma_addr_t addr;
  int tmp_0;
  unsigned long tmp_1;
  unsigned long tmp_2;
  
#line 15 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 18 
  kmemcheck_mark_initialized(ptr,(unsigned int)size);
  
#line 19 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 19 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 21 
    ldv_inline_asm();
    
#line 19 
    ;
  }
  else ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  tmp_1 = __phys_addr((unsigned long)ptr);
  
#line 20 
  ;
  
#line 20 
  addr = (*(ops->map_page))(dev,(struct page *)(-24189255811072) + (tmp_1 >> 12),(unsigned long)ptr & 4095UL,size,dir,attrs);
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  tmp_2 = __phys_addr((unsigned long)ptr);
  
#line 23 
  ;
  
#line 23 
  debug_dma_map_page(dev,(struct page *)(-24189255811072) + (tmp_2 >> 12),(unsigned long)ptr & 4095UL,size,(int)dir,addr,(_Bool)1);
  
#line 26 
  return addr;
}


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  int tmp_0;
  
#line 34 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 36 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 36 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 38 
    ldv_inline_asm();
    
#line 36 
    ;
  }
  else ;
  
#line 37 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 38 
    (*(ops->unmap_page))(dev,addr,size,dir,attrs); else ;
  
#line 39 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)1);
  
#line 40 
  return;
}


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_page(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t addr;
  void *tmp_0;
  int tmp_1;
  
#line 80 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 83 
  ;
  
#line 83 
  tmp_0 = lowmem_page_address((struct page const *)page);
  
#line 83 
  ;
  
#line 83 
  kmemcheck_mark_initialized(tmp_0 + offset,(unsigned int)size);
  
#line 84 
  tmp_1 = valid_dma_direction((int)dir);
  
#line 84 
  if ((long)(tmp_1 == 0) != 0L) {
    
#line 86 
    ldv_inline_asm();
    
#line 84 
    ;
  }
  else ;
  
#line 85 
  addr = (*(ops->map_page))(dev,page,offset,size,dir,(struct dma_attrs *)0);
  
#line 86 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr,(_Bool)0);
  
#line 88 
  return addr;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_page(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 94 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 96 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 96 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 98 
    ldv_inline_asm();
    
#line 96 
    ;
  }
  else ;
  
#line 97 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 98 
    (*(ops->unmap_page))(dev,addr,size,dir,(struct dma_attrs *)0); else ;
  
#line 99 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)0);
  
#line 100 
  return;
}


#line 126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_range_for_cpu(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 132 
  struct dma_map_ops const *ops = get_dma_ops(dev);
  
#line 134 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 134 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 136 
    ldv_inline_asm();
    
#line 134 
    ;
  }
  else ;
  
#line 135 
  if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 136 
    (*(ops->sync_single_for_cpu))(dev,addr + (unsigned long long)offset,size,dir); else ;
  
#line 137 
  debug_dma_sync_single_range_for_cpu(dev,addr,offset,size,(int)dir);
  
#line 138 
  return;
}


#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_range_for_device(struct device *dev, dma_addr_t addr, unsigned long offset, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 146 
  struct dma_map_ops const *ops = get_dma_ops(dev);
  
#line 148 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 148 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 150 
    ldv_inline_asm();
    
#line 148 
    ;
  }
  else ;
  
#line 149 
  if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 150 
    (*(ops->sync_single_for_device))(dev,addr + (unsigned long long)offset,size,dir); else ;
  
#line 151 
  debug_dma_sync_single_range_for_device(dev,addr,offset,size,(int)dir);
  
#line 152 
  return;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  int __retres;
  
#line 49 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 50 
  debug_dma_mapping_error(dev,dma_addr);
  
#line 51 
  if (ops->mapping_error != (int (*)(struct device *, dma_addr_t ))0) {
    int tmp_0;
    
#line 52 
    tmp_0 = (*(ops->mapping_error))(dev,dma_addr);
    
#line 52 
    __retres = tmp_0;
    
#line 52 
    goto return_label;
  }
  else ;
  
#line 54 
  __retres = dma_addr == 0ULL;
  return_label: 
#line 54 
                return __retres;
}


#line 131 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, struct dma_attrs *);


#line 136 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, struct dma_attrs *);


#line 230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t const *frag)
{
  unsigned int __retres;
  
#line 232 
  __retres = frag->size;
  
#line 232 
  return __retres;
}


#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  
#line 237 
  frag->size = size;
  
#line 238 
  return;
}


#line 775 
void consume_skb(struct sk_buff *);


#line 852 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);


#line 862 
int skb_pad(struct sk_buff *, int);


#line 926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  
#line 928 
  skb->l4_hash = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))(type == (unsigned int)PKT_HASH_TYPE_L4);
  
#line 929 
  skb->sw_hash = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
  
#line 930 
  skb->hash = hash;
  
#line 931 
  return;
}


#line 976  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 978 
  __retres = skb->head + skb->end;
  
#line 978 
  return __retres;
}


#line 1127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff const *skb)
{
  int __retres;
  int dataref;
  unsigned char *tmp;
  
#line 1131 
  if ((unsigned int)*((unsigned char *)skb + 142UL) == 0U) {
    
#line 1132 
    __retres = 0;
    
#line 1132 
    goto return_label;
  }
  else ;
  
#line 1134 
  tmp = skb_end_pointer(skb);
  
#line 1134 
  dataref = atomic_read((atomic_t const *)(& ((struct skb_shared_info *)tmp)->dataref));
  
#line 1135 
  dataref = (dataref & 65535) - (dataref >> 16);
  
#line 1136 
  __retres = dataref != 1;
  return_label: 
#line 1136 
                return __retres;
}


#line 1567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff const *skb)
{
  bool __retres;
  
#line 1569 
  __retres = (_Bool)(skb->data_len != 0U);
  
#line 1569 
  return __retres;
}


#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1574 
  __retres = skb->len - skb->data_len;
  
#line 1574 
  return __retres;
}


#line 1599  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  unsigned char *tmp;
  bool tmp_0;
  
#line 1602 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1602 
  skb_frag_t *frag = & ((struct skb_shared_info *)tmp)->frags[i];
  
#line 1609 
  frag->page.p = page;
  
#line 1610 
  frag->page_offset = (unsigned int)off;
  
#line 1611 
  skb_frag_size_set(frag,(unsigned int)size);
  
#line 1613 
  page = compound_head(page);
  
#line 1614 
  tmp_0 = page_is_pfmemalloc(page);
  
#line 1614 
  if ((int)tmp_0 != 0) 
#line 1615 
                       skb->pfmemalloc = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U; else ;
  
#line 1616 
  return;
}


#line 1632  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  unsigned char *tmp;
  
#line 1635 
  __skb_fill_page_desc(skb,i,page,off,size);
  
#line 1636 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1636 
  ((struct skb_shared_info *)tmp)->nr_frags = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
  
#line 1637 
  return;
}


#line 1650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1652 
  __retres = skb->head + skb->tail;
  
#line 1652 
  return __retres;
}


#line 1655  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_reset_tail_pointer(struct sk_buff *skb)
{
  
#line 1657 
  skb->tail = (unsigned int)((long)skb->data - (long)skb->head);
  
#line 1658 
  return;
}


#line 1660  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_set_tail_pointer(struct sk_buff *skb, int const offset)
{
  
#line 1662 
  skb_reset_tail_pointer(skb);
  
#line 1663 
  skb->tail += (unsigned int)offset;
  
#line 1664 
  return;
}


#line 1688 
unsigned char *skb_put(struct sk_buff *, unsigned int);


#line 1689  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *__skb_put(struct sk_buff *skb, unsigned int len)
{
  bool tmp_1;
  
#line 1691 
  unsigned char *tmp = skb_tail_pointer((struct sk_buff const *)skb);
  
#line 1692 
  tmp_1 = skb_is_nonlinear((struct sk_buff const *)skb);
  
#line 1692 
  if ((long)((int)tmp_1 != 0) != 0L) {
    
#line 1694 
    ldv_inline_asm();
    
#line 1692 
    ;
  }
  else ;
  
#line 1693 
  skb->tail += len;
  
#line 1694 
  skb->len += len;
  
#line 1695 
  return tmp;
}


#line 1719 
unsigned char *__pskb_pull_tail(struct sk_buff *, int);


#line 1735  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  int __retres;
  unsigned int tmp;
  unsigned char *tmp_1;
  unsigned int tmp_0;
  
#line 1737 
  tmp = skb_headlen((struct sk_buff const *)skb);
  
#line 1737 
  ;
  
#line 1737 
  if ((long)(tmp >= len) != 0L) {
    
#line 1738 
    __retres = 1;
    
#line 1738 
    goto return_label;
  }
  else ;
  
#line 1739 
  if ((long)(skb->len < len) != 0L) {
    
#line 1740 
    __retres = 0;
    
#line 1740 
    goto return_label;
  }
  else ;
  
#line 1741 
  tmp_0 = skb_headlen((struct sk_buff const *)skb);
  
#line 1741 
  ;
  
#line 1741 
  ;
  
#line 1741 
  tmp_1 = __pskb_pull_tail(skb,(int)(len - tmp_0));
  
#line 1741 
  __retres = tmp_1 != (unsigned char *)0U;
  return_label: 
#line 1741 
                return __retres;
}


#line 1750  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1752 
  __retres = (unsigned int)((long)skb->data - (long)skb->head);
  
#line 1752 
  return __retres;
}


#line 1824  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_transport_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1827 
  __retres = skb->head + (int)skb->inner_transport_header;
  
#line 1827 
  return __retres;
}


#line 1842  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_inner_network_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1844 
  __retres = skb->head + (int)skb->inner_network_header;
  
#line 1844 
  return __retres;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1882 
  __retres = skb->head + (int)skb->transport_header;
  
#line 1882 
  return __retres;
}


#line 1897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1899 
  __retres = skb->head + (int)skb->network_header;
  
#line 1899 
  return __retres;
}


#line 1967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1969 
  tmp = skb_transport_header(skb);
  
#line 1969 
  ;
  
#line 1969 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1969 
  return __retres;
}


#line 1972  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static u32 skb_network_header_len(struct sk_buff const *skb)
{
  u32 __retres;
  
#line 1974 
  __retres = (unsigned int)((int)skb->transport_header - (int)skb->network_header);
  
#line 1974 
  return __retres;
}


#line 1977  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static u32 skb_inner_network_header_len(struct sk_buff const *skb)
{
  u32 __retres;
  
#line 1979 
  __retres = (unsigned int)((int)skb->inner_transport_header - (int)skb->inner_network_header);
  
#line 1979 
  return __retres;
}


#line 1982  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1984 
  tmp = skb_network_header(skb);
  
#line 1984 
  ;
  
#line 1984 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1984 
  return __retres;
}


#line 1987  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_inner_network_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1989 
  tmp = skb_inner_network_header(skb);
  
#line 1989 
  ;
  
#line 1989 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1989 
  return __retres;
}


#line 2140 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);


#line 2176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length, gfp_t gfp)
{
  
#line 2179 
  struct sk_buff *skb = __netdev_alloc_skb(dev,length,gfp);
  
#line 2183 
  return skb;
}


#line 2186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length)
{
  struct sk_buff *tmp;
  
#line 2189 
  tmp = __netdev_alloc_skb_ip_align(dev,length,32U);
  
#line 2189 
  return tmp;
}


#line 2272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t const *frag)
{
  struct page *__retres;
  
#line 2274 
  __retres = frag->page.p;
  
#line 2274 
  return __retres;
}


#line 2390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t const *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t tmp_0;
  struct page *tmp;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  tmp = skb_frag_page(frag);
  
#line 2395 
  ;
  
#line 2395 
  tmp_0 = dma_map_page(dev,tmp,(unsigned long)frag->page_offset + offset,size,dir);
  
#line 2395 
  return tmp_0;
}


#line 2427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  int __retres;
  unsigned int tmp_0;
  
#line 2430 
  int delta = 0;
  
#line 2432 
  tmp_0 = skb_headroom((struct sk_buff const *)skb);
  
#line 2432 
  ;
  
#line 2432 
  if (tmp_0 < headroom) {
    unsigned int tmp;
    
#line 2433 
    tmp = skb_headroom((struct sk_buff const *)skb);
    
#line 2433 
    delta = (int)(headroom - tmp);
  }
  else ;
  
#line 2435 
  if (delta != 0 || cloned != 0) {
    int tmp_5;
    int tmp_2;
    int tmp_4;
    {
      int tmp_1;
      
#line 2436 
      int _max1 = 32;
      
#line 2436 
      int _max2 = 64;
      
#line 2436 
      if (_max1 > _max2) 
#line 2436 
                         tmp_1 = _max1; else 
#line 2436 
                                             tmp_1 = _max2;
      
#line 2436 
      tmp_2 = tmp_1;
    }
    {
      int tmp_3;
      
#line 2436 
      int _max1_0 = 32;
      
#line 2436 
      int _max2_0 = 64;
      
#line 2436 
      if (_max1_0 > _max2_0) 
#line 2436 
                             tmp_3 = _max1_0; else 
#line 2436 
                                                   tmp_3 = _max2_0;
      
#line 2436 
      tmp_4 = tmp_3;
    }
    
#line 2436 
    ;
    
#line 2436 
    ;
    
#line 2436 
    tmp_5 = pskb_expand_head(skb,((tmp_2 + -1) + delta) & ~ (tmp_4 + -1),0,32U);
    
#line 2436 
    __retres = tmp_5;
    
#line 2436 
    goto return_label;
  }
  else ;
  
#line 2438 
  __retres = 0;
  return_label: 
#line 2438 
                return __retres;
}


#line 2468  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  int tmp_0;
  int tmp;
  
#line 2470 
  tmp = skb_header_cloned((struct sk_buff const *)skb);
  
#line 2470 
  ;
  
#line 2470 
  ;
  
#line 2470 
  tmp_0 = __skb_cow(skb,headroom,tmp);
  
#line 2470 
  return tmp_0;
}


#line 2545  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int __skb_linearize(struct sk_buff *skb)
{
  int tmp_0;
  unsigned char *tmp;
  
#line 2547 
  tmp = __pskb_pull_tail(skb,(int)skb->data_len);
  
#line 2547 
  if (tmp != (unsigned char *)0U) 
#line 2547 
                                  tmp_0 = 0; else 
#line 2547 
                                                  tmp_0 = -12;
  
#line 2547 
  return tmp_0;
}


#line 2557  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_linearize(struct sk_buff *skb)
{
  int tmp_1;
  bool tmp;
  
#line 2559 
  tmp = skb_is_nonlinear((struct sk_buff const *)skb);
  
#line 2559 
  if ((int)tmp != 0) 
#line 2559 
                     tmp_1 = __skb_linearize(skb); else 
#line 2559 
                                                        tmp_1 = 0;
  
#line 2559 
  return tmp_1;
}


#line 2703 
int skb_copy_bits(struct sk_buff const *, int, void *, int);


#line 2751  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void *__skb_header_pointer(struct sk_buff const *skb, int offset, int len, void *data, int hlen, void *buffer)
{
  void *__retres;
  
#line 2754 
  if (hlen - offset >= len) {
    
#line 2755 
    __retres = data + offset;
    
#line 2755 
    goto return_label;
  }
  else ;
  
#line 2757 
  if (skb == (struct sk_buff const *)0) {
    
#line 2759 
    __retres = (void *)0;
    
#line 2759 
    goto return_label;
  }
  else {
    int tmp;
    
#line 2757 
    tmp = skb_copy_bits(skb,offset,buffer,len);
    
#line 2757 
    if (tmp < 0) {
      
#line 2759 
      __retres = (void *)0;
      
#line 2759 
      goto return_label;
    }
    else ;
  }
  
#line 2761 
  __retres = buffer;
  return_label: 
#line 2761 
                return __retres;
}


#line 2765  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void *skb_header_pointer(struct sk_buff const *skb, int offset, int len, void *buffer)
{
  void *tmp_0;
  unsigned int tmp;
  
#line 2767 
  ;
  
#line 2768 
  tmp = skb_headlen(skb);
  
#line 2767 
  ;
  
#line 2767 
  ;
  
#line 2767 
  ;
  
#line 2767 
  ;
  
#line 2767 
  tmp_0 = __skb_header_pointer(skb,offset,len,(void *)skb->data,(int)tmp,buffer);
  
#line 2767 
  return tmp_0;
}


#line 2865 
void skb_clone_tx_timestamp(struct sk_buff *);


#line 2911 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);


#line 2914  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void sw_tx_timestamp(struct sk_buff *skb)
{
  unsigned char *tmp;
  
#line 2916 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 2916 
  ;
  
#line 2916 
  if (((int)((struct skb_shared_info *)tmp)->tx_flags & 2) != 0) {
    unsigned char *tmp_0;
    
#line 2917 
    tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2916 
    ;
    
#line 2916 
    if (((int)((struct skb_shared_info *)tmp_0)->tx_flags & 4) == 0) 
      
#line 2918 
      skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0); else ;
  }
  else ;
  
#line 2919 
  return;
}


#line 2933  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  
#line 2935 
  skb_clone_tx_timestamp(skb);
  
#line 2936 
  sw_tx_timestamp(skb);
  
#line 2937 
  return;
}


#line 3305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  
#line 3307 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  
#line 3308 
  return;
}


#line 3384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff const *skb)
{
  bool __retres;
  unsigned char *tmp;
  
#line 3386 
  tmp = skb_end_pointer(skb);
  
#line 3386 
  ;
  
#line 3386 
  __retres = (_Bool)((unsigned int)((struct skb_shared_info *)tmp)->gso_size != 0U);
  
#line 3386 
  return __retres;
}


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
__inline static void u64_stats_init(struct u64_stats_sync *syncp)
{
  
#line 73 
  return;
}


#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void napi_complete_done(struct napi_struct *, int);


#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_complete(struct napi_struct *n)
{
  
#line 460 
  napi_complete_done(n,0);
  
#line 461 
  return;
}


#line 1822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device const *dev, unsigned int index)
{
  struct netdev_queue *__retres;
  
#line 1825 
  __retres = dev->_tx + index;
  
#line 1825 
  return __retres;
}


#line 2505 
void netif_schedule_queue(struct netdev_queue *);


#line 2515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  
#line 2517 
  set_bit(0L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2518 
  return;
}


#line 2584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue const *dev_queue)
{
  bool __retres;
  int tmp;
  
#line 2586 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev_queue->state));
  
#line 2586 
  __retres = (_Bool)(tmp != 0);
  
#line 2586 
  return __retres;
}


#line 2600  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue const *dev_queue)
{
  bool __retres;
  
#line 2602 
  __retres = (_Bool)((dev_queue->state & 3UL) != 0UL);
  
#line 2602 
  return __retres;
}


#line 2645  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  int tmp;
  int tmp_0;
  
#line 2649 
  dql_queued(& dev_queue->dql,bytes);
  
#line 2651 
  tmp = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2651 
  if ((long)(tmp >= 0) != 0L) 
#line 2652 
                              goto return_label; else ;
  
#line 2654 
  set_bit(1L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2655 
  ldv_inline_asm();
  
#line 2664 
  tmp_0 = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2664 
  if ((long)(tmp_0 >= 0) != 0L) 
#line 2665 
                                set_bit(1L,(unsigned long volatile *)(& dev_queue->state)); else ;
  return_label: 
#line 2666 
                return;
}


#line 2683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  int tmp;
  int tmp_0;
  
#line 2687 
  if ((long)(bytes == 0U) != 0L) 
#line 2688 
                                 goto return_label; else ;
  
#line 2690 
  dql_completed(& dev_queue->dql,bytes);
  
#line 2691 
  ldv_inline_asm();
  
#line 2699 
  tmp = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2699 
  if (tmp < 0) 
#line 2700 
               goto return_label; else ;
  
#line 2702 
  tmp_0 = test_and_set_bit(1L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2702 
  if (tmp_0 != 0) 
#line 2703 
                  netif_schedule_queue(dev_queue); else ;
  return_label: 
#line 2704 
                return;
}


#line 2723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  
#line 2726 
  set_bit(1L,(unsigned long volatile *)(& q->state));
  
#line 2727 
  dql_reset(& q->dql);
  
#line 2728 
  return;
}


#line 2788  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_start_subqueue(struct net_device *dev, u16 queue_index)
{
  
#line 2790 
  struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,(unsigned int)queue_index);
  
#line 2792 
  netif_tx_start_queue(txq);
  
#line 2793 
  return;
}


#line 2815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool __netif_subqueue_stopped(struct net_device const *dev, u16 queue_index)
{
  bool tmp_0;
  
#line 2818 
  struct netdev_queue *txq = netdev_get_tx_queue(dev,(unsigned int)queue_index);
  
#line 2820 
  tmp_0 = netif_tx_queue_stopped((struct netdev_queue const *)txq);
  
#line 2820 
  return tmp_0;
}


#line 2829 
void netif_wake_subqueue(struct net_device *, u16);


#line 2900 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);


#line 2931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  
#line 2933 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  
#line 2934 
  return;
}


#line 2941 
int netif_rx(struct sk_buff *);


#line 2948 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);


#line 3038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 3040 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& dev->state));
  
#line 3040 
  __retres = (_Bool)(tmp == 0);
  
#line 3040 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff const *skb)
{
  struct iphdr *tmp;
  
#line 25 
  tmp = (struct iphdr *)skb_network_header(skb);
  
#line 25 
  return tmp;
}


#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ip.h"
__inline static struct iphdr *inner_ip_hdr(struct sk_buff const *skb)
{
  struct iphdr *tmp;
  
#line 30 
  tmp = (struct iphdr *)skb_inner_network_header(skb);
  
#line 30 
  return tmp;
}


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff const *skb)
{
  struct tcphdr *tmp;
  
#line 29 
  tmp = (struct tcphdr *)skb_transport_header(skb);
  
#line 29 
  return tmp;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  struct tcphdr *tmp;
  
#line 34 
  tmp = tcp_hdr(skb);
  
#line 34 
  ;
  
#line 34 
  __retres = (unsigned int)((int)tmp->doff * 4);
  
#line 34 
  return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static struct tcphdr *inner_tcp_hdr(struct sk_buff const *skb)
{
  struct tcphdr *tmp;
  
#line 39 
  tmp = (struct tcphdr *)skb_inner_transport_header(skb);
  
#line 39 
  return tmp;
}


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static unsigned int inner_tcp_hdrlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  struct tcphdr *tmp;
  
#line 44 
  tmp = inner_tcp_hdr(skb);
  
#line 44 
  ;
  
#line 44 
  __retres = (unsigned int)((int)tmp->doff * 4);
  
#line 44 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/udp.h"
__inline static struct udphdr *udp_hdr(struct sk_buff const *skb)
{
  struct udphdr *tmp;
  
#line 27 
  tmp = (struct udphdr *)skb_transport_header(skb);
  
#line 27 
  return tmp;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff const *skb)
{
  struct ipv6hdr *tmp;
  
#line 76 
  tmp = (struct ipv6hdr *)skb_network_header(skb);
  
#line 76 
  return tmp;
}


#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
__inline static struct ipv6hdr *inner_ipv6_hdr(struct sk_buff const *skb)
{
  struct ipv6hdr *tmp;
  
#line 81 
  tmp = (struct ipv6hdr *)skb_inner_network_header(skb);
  
#line 81 
  return tmp;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/busy_poll.h"
__inline static void skb_mark_napi_id(struct sk_buff *skb, struct napi_struct *napi)
{
  
#line 124 
  skb->__anonCompField_sk_buff_83.napi_id = napi->napi_id;
  
#line 125 
  return;
}


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__be16 eth_type_trans(struct sk_buff *, struct net_device *);


#line 409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  
#line 412 
  skb->vlan_proto = vlan_proto;
  
#line 413 
  skb->vlan_tci = (unsigned short)((unsigned int)vlan_tci | 4096U);
  
#line 414 
  return;
}


#line 481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  __be16 __retres;
  
#line 484 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  
#line 490 
  if ((unsigned int)type == 129U || (unsigned int)type == 43144U) {
    
#line 491 
    if (vlan_depth != 0U) {
      int tmp;
      {
        
#line 492 
        int __ret_warn_on = vlan_depth <= 3U;
        
#line 492 
        if ((long)(__ret_warn_on != 0) != 0L) 
#line 492 
                                              warn_slowpath_null("include/linux/if_vlan.h",492); else ;
        
#line 492 
        tmp = (long)(__ret_warn_on != 0);
      }
      
#line 492 
      if ((long)tmp != 0L) {
        
#line 493 
        __retres = (unsigned short)0U;
        
#line 493 
        goto return_label;
      }
      else ;
      
#line 494 
      vlan_depth += 4294967292U;
    }
    else 
#line 496 
         vlan_depth = 14U;
    ldv_53351: 
#line 497 
    ;
    {
      struct vlan_hdr *vh;
      int tmp_0;
      
#line 501 
      tmp_0 = pskb_may_pull(skb,vlan_depth + 4U);
      
#line 501 
      if ((long)(tmp_0 == 0) != 0L) {
        
#line 503 
        __retres = (unsigned short)0U;
        
#line 503 
        goto return_label;
      }
      else ;
      
#line 505 
      vh = (struct vlan_hdr *)(skb->data + vlan_depth);
      
#line 506 
      type = vh->h_vlan_encapsulated_proto;
      
#line 507 
      vlan_depth += 4U;
    }
    
#line 509 
    if ((unsigned int)type == 129U || (unsigned int)type == 43144U) 
#line 511 
                                                                    goto ldv_53351; else 
                                                                    
#line 514 
                                                                    goto ldv_53352;
    ldv_53352: 
#line 515 
    ;
  }
  else ;
  
#line 512 
  if (depth != (int *)0) 
#line 513 
                         *depth = (int)vlan_depth; else ;
  
#line 515 
  __retres = type;
  return_label: 
#line 515 
                return __retres;
}


#line 525  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  __be16 tmp;
  
#line 527 
  tmp = __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
  
#line 527 
  return tmp;
}


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/udp.h"
__inline static __wsum udp_csum(struct sk_buff *skb)
{
  __wsum tmp_0;
  unsigned char *tmp;
  unsigned char *tmp_1;
  
#line 143 
  ;
  
#line 143 
  tmp = skb_transport_header((struct sk_buff const *)skb);
  
#line 143 
  tmp_0 = csum_partial((void const *)tmp,8,skb->__anonCompField_sk_buff_82.csum);
  
#line 143 
  __wsum csum = tmp_0;
  
#line 146 
  tmp_1 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 146 
  skb = ((struct skb_shared_info *)tmp_1)->frag_list;
  
#line 146 
  goto ldv_54069;
  ldv_54068: 
#line 147 
  ;
  
#line 147 
  csum = csum_add(csum,skb->__anonCompField_sk_buff_82.csum);
  
#line 146 
  skb = skb->__anonCompField_sk_buff_80.__anonCompField___anonunion_282_79.next;
  ldv_54069: 
#line 147 
  ;
  
#line 146 
  if (skb != (struct sk_buff *)0) 
#line 148 
                                  goto ldv_54068; else 
#line 151 
                                                       goto ldv_54070;
  ldv_54070: 
#line 152 
  ;
  
#line 149 
  return csum;
}


#line 290  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.h"
void i40evf_alloc_rx_buffers_ps(struct i40e_ring *rx_ring, u16 cleaned_count);


#line 291 
void i40evf_alloc_rx_buffers_1buf(struct i40e_ring *rx_ring, u16 cleaned_count);


#line 292 
void i40evf_alloc_rx_headers(struct i40e_ring *rx_ring);


#line 293 
netdev_tx_t i40evf_xmit_frame(struct sk_buff *skb, struct net_device *netdev);


#line 294 
void i40evf_clean_tx_ring(struct i40e_ring *tx_ring);


#line 295 
void i40evf_clean_rx_ring(struct i40e_ring *rx_ring);


#line 296 
int i40evf_setup_tx_descriptors(struct i40e_ring *tx_ring);


#line 297 
int i40evf_setup_rx_descriptors(struct i40e_ring *rx_ring);


#line 298 
void i40evf_free_tx_resources(struct i40e_ring *tx_ring);


#line 299 
void i40evf_free_rx_resources(struct i40e_ring *rx_ring);


#line 300 
int i40evf_napi_poll(struct napi_struct *napi, int budget);


#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf.h"
void i40evf_irq_enable_queues(struct i40evf_adapter *adapter, u32 mask);


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_prototype.h"
struct i40e_rx_ptype_decoded i40evf_ptype_lookup[256U];


#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_prototype.h"
__inline static struct i40e_rx_ptype_decoded decode_rx_desc_ptype(u8 ptype)
{
  struct i40e_rx_ptype_decoded __retres;
  
#line 70 
  __retres = i40evf_ptype_lookup[(int)ptype];
  
#line 70 
  return __retres;
}


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
__inline static __le64 build_ctob(u32 td_cmd, u32 td_offset, unsigned int size, u32 td_tag)
{
  __le64 __retres;
  
#line 36 
  __retres = ((((unsigned long long)td_cmd << 4) | ((unsigned long long)td_offset << 16)) | ((unsigned long long)size << 34)) | ((unsigned long long)td_tag << 48);
  
#line 36 
  return __retres;
}


#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
static void i40e_unmap_and_free_tx_resource(struct i40e_ring *ring, struct i40e_tx_buffer *tx_buffer)
{
  
#line 53 
  if (tx_buffer->__anonCompField_i40e_tx_buffer_115.skb != (struct sk_buff *)0) {
    
#line 54 
    if ((tx_buffer->tx_flags & 512U) != 0U) 
#line 55 
                                            kfree((void const *)tx_buffer->__anonCompField_i40e_tx_buffer_115.raw_buf); else 
                                                                    
#line 57 
                                                                    dev_kfree_skb_any(tx_buffer->__anonCompField_i40e_tx_buffer_115.skb);
    
#line 59 
    if (tx_buffer->len != 0U) 
#line 60 
                              dma_unmap_single_attrs(ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0); else ;
  }
  else 
    
#line 64 
    if (tx_buffer->len != 0U) 
#line 65 
                              dma_unmap_page(ring->dev,tx_buffer->dma,(unsigned long)tx_buffer->len,(enum dma_data_direction)DMA_TO_DEVICE); else ;
  
#line 70 
  tx_buffer->next_to_watch = (struct i40e_tx_desc *)0;
  
#line 71 
  tx_buffer->__anonCompField_i40e_tx_buffer_115.skb = (struct sk_buff *)0;
  
#line 72 
  tx_buffer->len = 0U;
  
#line 73 
  return;
}


#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
void i40evf_clean_tx_ring(struct i40e_ring *tx_ring)
{
  unsigned long bi_size;
  u16 i;
  struct netdev_queue *tmp;
  
#line 86 
  if (tx_ring->__anonCompField_i40e_ring_116.tx_bi == (struct i40e_tx_buffer *)0) 
    
#line 87 
    goto return_label; else ;
  
#line 90 
  i = (unsigned short)0U;
  
#line 90 
  goto ldv_56887;
  ldv_56886: 
#line 91 
  ;
  
#line 91 
  i40e_unmap_and_free_tx_resource(tx_ring,tx_ring->__anonCompField_i40e_ring_116.tx_bi + (int)i);
  
#line 90 
  i = (u16)((int)i + 1);
  ldv_56887: 
#line 91 
  ;
  
#line 90 
  if ((int)tx_ring->count > (int)i) 
#line 92 
                                    goto ldv_56886; else 
#line 95 
                                                         goto ldv_56888;
  ldv_56888: 
#line 96 
  ;
  
#line 93 
  bi_size = (unsigned long)tx_ring->count * 40UL;
  
#line 94 
  memset((void *)tx_ring->__anonCompField_i40e_ring_116.tx_bi,0,bi_size);
  
#line 97 
  memset(tx_ring->desc,0,(unsigned long)tx_ring->size);
  
#line 99 
  tx_ring->next_to_use = (unsigned short)0U;
  
#line 100 
  tx_ring->next_to_clean = (unsigned short)0U;
  
#line 102 
  if (tx_ring->netdev == (struct net_device *)0) 
#line 103 
                                                 goto return_label; else ;
  
#line 106 
  tmp = netdev_get_tx_queue((struct net_device const *)tx_ring->netdev,(unsigned int)tx_ring->queue_index);
  
#line 106 
  netdev_tx_reset_queue(tmp);
  return_label: 
#line 108 
                return;
}


#line 116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
void i40evf_free_tx_resources(struct i40e_ring *tx_ring)
{
  
#line 118 
  i40evf_clean_tx_ring(tx_ring);
  
#line 119 
  kfree((void const *)tx_ring->__anonCompField_i40e_ring_116.tx_bi);
  
#line 120 
  tx_ring->__anonCompField_i40e_ring_116.tx_bi = (struct i40e_tx_buffer *)0;
  
#line 122 
  if (tx_ring->desc != (void *)0) {
    
#line 123 
    dma_free_attrs(tx_ring->dev,(unsigned long)tx_ring->size,tx_ring->desc,tx_ring->dma,(struct dma_attrs *)0);
    
#line 125 
    tx_ring->desc = (void *)0;
  }
  else ;
  
#line 127 
  return;
}


#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
__inline static u32 i40e_get_head(struct i40e_ring *tx_ring)
{
  u32 __retres;
  
#line 138 
  void *head = tx_ring->desc + (int)tx_ring->count;
  
#line 140 
  __retres = *((__le32 volatile *)head);
  
#line 140 
  return __retres;
}


#line 150  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
static u32 i40e_get_tx_pending(struct i40e_ring *ring)
{
  u32 __retres;
  u32 head;
  u32 tail;
  
#line 154 
  head = i40e_get_head(ring);
  
#line 155 
  tail = readl((void const volatile *)ring->tail);
  
#line 157 
  if (head != tail) {
    u32 tmp;
    
#line 159 
    if (head < tail) 
#line 159 
                     tmp = tail - head; else 
#line 159 
                                             tmp = ((unsigned int)ring->count + tail) - head;
    
#line 159 
    __retres = tmp;
    
#line 159 
    goto return_label;
  }
  else ;
  
#line 161 
  __retres = 0U;
  return_label: 
#line 161 
                return __retres;
}


#line 168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
static bool i40e_check_tx_hang(struct i40e_ring *tx_ring)
{
  
#line 170 
  u32 tx_done = (unsigned int)tx_ring->stats.packets;
  
#line 171 
  u32 tx_done_old = (unsigned int)tx_ring->__anonCompField_i40e_ring_117.tx_stats.tx_done_old;
  
#line 172 
  u32 tx_pending = i40e_get_tx_pending(tx_ring);
  
#line 173 
  bool ret = (_Bool)0;
  
#line 175 
  set_bit(2L,(unsigned long volatile *)(& tx_ring->state));
  
#line 188 
  if (tx_done_old == tx_done && tx_pending != 0U) {
    int tmp_0;
    
#line 190 
    tmp_0 = test_and_set_bit(3L,(unsigned long volatile *)(& tx_ring->state));
    
#line 190 
    ret = (_Bool)(tmp_0 != 0);
  }
  else 
    
#line 192 
    if ((tx_done_old == tx_done && tx_pending <= 3U) && tx_pending != 0U) {
      
#line 195 
      tx_ring->__anonCompField_i40e_ring_117.tx_stats.tx_done_old = (unsigned long long)tx_done;
      
#line 196 
      set_bit(3L,(unsigned long volatile *)(& tx_ring->state));
    }
    else ;
  
#line 199 
  return ret;
}


#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
static bool i40e_clean_tx_irq(struct i40e_ring *tx_ring, int budget)
{
  bool __retres;
  struct i40e_tx_buffer *tx_buf;
  struct i40e_tx_desc *tx_head;
  struct i40e_tx_desc *tx_desc;
  u32 tmp;
  int tmp_2;
  struct netdev_queue *tmp_4;
  int tmp_8;
  
#line 213 
  u16 i = tx_ring->next_to_clean;
  
#line 217 
  unsigned int total_packets = 0U;
  
#line 218 
  unsigned int total_bytes = 0U;
  
#line 220 
  tx_buf = tx_ring->__anonCompField_i40e_ring_116.tx_bi + (int)i;
  
#line 221 
  tx_desc = (struct i40e_tx_desc *)tx_ring->desc + (int)i;
  
#line 222 
  i = (unsigned short)((int)i - (int)tx_ring->count);
  
#line 224 
  tmp = i40e_get_head(tx_ring);
  
#line 224 
  tx_head = (struct i40e_tx_desc *)tx_ring->desc + tmp;
  ldv_56923: 
#line 225 
  ;
  {
    
#line 227 
    struct i40e_tx_desc *eop_desc = tx_buf->next_to_watch;
    
#line 230 
    if (eop_desc == (struct i40e_tx_desc *)0) 
#line 231 
                                              goto ldv_56919; else ;
    
#line 237 
    if (tx_head == tx_desc) 
#line 238 
                            goto ldv_56919; else ;
    
#line 241 
    tx_buf->next_to_watch = (struct i40e_tx_desc *)0;
    
#line 244 
    total_bytes = tx_buf->bytecount + total_bytes;
    
#line 245 
    total_packets = (unsigned int)tx_buf->gso_segs + total_packets;
    
#line 248 
    dev_kfree_skb_any(tx_buf->__anonCompField_i40e_tx_buffer_115.skb);
    
#line 251 
    dma_unmap_single_attrs(tx_ring->dev,tx_buf->dma,(unsigned long)tx_buf->len,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
    
#line 257 
    tx_buf->__anonCompField_i40e_tx_buffer_115.skb = (struct sk_buff *)0;
    
#line 258 
    tx_buf->len = 0U;
    
#line 261 
    goto ldv_56921;
    ldv_56920: 
#line 262 
    ;
    
#line 263 
    tx_buf += 1;
    
#line 264 
    tx_desc += 1;
    
#line 265 
    i = (u16)((int)i + 1);
    
#line 266 
    if ((long)((unsigned int)i == 0U) != 0L) {
      
#line 267 
      i = (unsigned short)((int)i - (int)tx_ring->count);
      
#line 268 
      tx_buf = tx_ring->__anonCompField_i40e_ring_116.tx_bi;
      
#line 269 
      tx_desc = (struct i40e_tx_desc *)tx_ring->desc;
    }
    else ;
    
#line 273 
    if (tx_buf->len != 0U) {
      
#line 274 
      dma_unmap_page(tx_ring->dev,tx_buf->dma,(unsigned long)tx_buf->len,(enum dma_data_direction)DMA_TO_DEVICE);
      
#line 278 
      tx_buf->len = 0U;
    }
    else ;
    ldv_56921: 
#line 280 
    ;
    
#line 261 
    if (tx_desc != eop_desc) 
#line 263 
                             goto ldv_56920; else 
#line 266 
                                                  goto ldv_56922;
    ldv_56922: 
#line 267 
    ;
    
#line 283 
    tx_buf += 1;
    
#line 284 
    tx_desc += 1;
    
#line 285 
    i = (u16)((int)i + 1);
    
#line 286 
    if ((long)((unsigned int)i == 0U) != 0L) {
      
#line 287 
      i = (unsigned short)((int)i - (int)tx_ring->count);
      
#line 288 
      tx_buf = tx_ring->__anonCompField_i40e_ring_116.tx_bi;
      
#line 289 
      tx_desc = (struct i40e_tx_desc *)tx_ring->desc;
    }
    else ;
    
#line 292 
    __builtin_prefetch((void const *)tx_desc);
    
#line 295 
    budget -= 1;
  }
  
#line 296 
  if ((long)(budget != 0) != 0L) 
#line 298 
                                 goto ldv_56923; else 
#line 301 
                                                      goto ldv_56919;
  ldv_56919: 
#line 302 
  ;
  
#line 298 
  i = (unsigned short)((int)tx_ring->count + (int)i);
  
#line 299 
  tx_ring->next_to_clean = i;
  
#line 300 
  u64_stats_init(& tx_ring->syncp);
  
#line 301 
  tx_ring->stats.bytes += (unsigned long long)total_bytes;
  
#line 302 
  tx_ring->stats.packets += (unsigned long long)total_packets;
  
#line 303 
  u64_stats_init(& tx_ring->syncp);
  
#line 304 
  (tx_ring->q_vector)->tx.total_bytes += total_bytes;
  
#line 305 
  (tx_ring->q_vector)->tx.total_packets += total_packets;
  
#line 307 
  if (budget != 0 && ((int)i & 3) != 3) {
    int tmp_0;
    
#line 308 
    tmp_0 = constant_test_bit(6L,(unsigned long const volatile *)(& (tx_ring->vsi)->state));
    
#line 308 
    if (tmp_0 == 0) {
      int tmp_1;
      
#line 309 
      if ((int)tx_ring->next_to_clean <= (int)tx_ring->next_to_use) 
#line 309 
                                                                    tmp_1 = (int)tx_ring->count; else 
                                                                    
#line 309 
                                                                    tmp_1 = 0;
      
#line 309 
      ;
      
#line 309 
      if (((tmp_1 + (int)tx_ring->next_to_clean) - (int)tx_ring->next_to_use) + -1 != (int)tx_ring->count) 
        
#line 311 
        tx_ring->arm_wb = (_Bool)1; else 
#line 313 
                                         tx_ring->arm_wb = (_Bool)0;
    }
    else 
#line 313 
         tx_ring->arm_wb = (_Bool)0;
  }
  else 
#line 313 
       tx_ring->arm_wb = (_Bool)0;
  
#line 315 
  tmp_2 = constant_test_bit(2L,(unsigned long const volatile *)(& tx_ring->state));
  
#line 315 
  if (tmp_2 != 0) {
    bool tmp_3;
    
#line 315 
    tmp_3 = i40e_check_tx_hang(tx_ring);
    
#line 315 
    if ((int)tmp_3 != 0) {
      
#line 317 
      _dev_info((struct device const *)tx_ring->dev,"Detected Tx Unit Hang\n",(int)(tx_ring->vsi)->seid,(int)tx_ring->queue_index,(int)tx_ring->next_to_use,(int)i);
      
#line 326 
      netif_start_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
      
#line 328 
      _dev_info((struct device const *)tx_ring->dev,"tx hang detected on queue %d, resetting adapter\n",(int)tx_ring->queue_index);
      
#line 332 
      (*(((tx_ring->netdev)->netdev_ops)->ndo_tx_timeout))(tx_ring->netdev);
      
#line 335 
      __retres = (_Bool)1;
      
#line 335 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 338 
  ;
  
#line 338 
  ;
  
#line 338 
  tmp_4 = netdev_get_tx_queue((struct net_device const *)tx_ring->netdev,(unsigned int)tx_ring->queue_index);
  
#line 338 
  netdev_tx_completed_queue(tmp_4,total_packets,total_bytes);
  
#line 343 
  if ((long)(total_packets != 0U) != 0L) {
    bool tmp_7;
    
#line 343 
    tmp_7 = netif_carrier_ok((struct net_device const *)tx_ring->netdev);
    
#line 343 
    if ((long)((int)tmp_7 != 0) != 0L) 
#line 343 
                                       tmp_8 = 1; else 
#line 343 
                                                       tmp_8 = 0;
  }
  else 
#line 343 
       tmp_8 = 0;
  
#line 343 
  if (tmp_8 != 0) {
    int tmp_9;
    
#line 343 
    if ((int)tx_ring->next_to_clean <= (int)tx_ring->next_to_use) 
#line 343 
                                                                  tmp_9 = (int)tx_ring->count; else 
                                                                    
#line 343 
                                                                    tmp_9 = 0;
    
#line 343 
    ;
    
#line 343 
    if ((long)((unsigned int)(((tmp_9 + (int)tx_ring->next_to_clean) - (int)tx_ring->next_to_use) + -1) > 41U) != 0L) {
      bool tmp_5;
      
#line 345 
      ldv_inline_asm();
      
#line 349 
      tmp_5 = __netif_subqueue_stopped((struct net_device const *)tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
      
#line 349 
      if ((int)tmp_5 != 0) {
        int tmp_6;
        
#line 350 
        tmp_6 = constant_test_bit(6L,(unsigned long const volatile *)(& (tx_ring->vsi)->state));
        
#line 350 
        if (tmp_6 == 0) {
          
#line 352 
          netif_wake_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
          
#line 354 
          tx_ring->__anonCompField_i40e_ring_117.tx_stats.restart_queue += 1ULL;
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 358 
  __retres = (_Bool)(budget > 0);
  return_label: 
#line 358 
                return __retres;
}


#line 367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
static void i40e_force_wb(struct i40e_vsi *vsi, struct i40e_q_vector *q_vector)
{
  
#line 369 
  u32 val = 16777245U;
  
#line 375 
  writel(val,(void volatile *)((vsi->back)->hw.hw_addr + ((q_vector->v_idx + vsi->base_vector) + 3583) * 4));
  
#line 376 
  return;
}


#line 392  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
static void i40e_set_new_dynamic_itr(struct i40e_ring_container *rc)
{
  int bytes_per_int;
  
#line 394 
  enum i40e_latency_range new_latency_range = rc->latency_range;
  
#line 395 
  u32 new_itr = (unsigned int)rc->itr;
  
#line 398 
  if (rc->total_packets == 0U || (unsigned int)rc->itr == 0U) 
#line 399 
                                                              goto return_label; else ;
  
#line 406 
  bytes_per_int = (int)(rc->total_bytes / (unsigned int)rc->itr);
  
#line 407 
  switch ((int)rc->itr) {
    case 0: 
#line 408 
    ;
    
#line 409 
    if (bytes_per_int > 10) 
#line 410 
                            new_latency_range = I40E_LOW_LATENCY; else ;
    
#line 411 
    goto ldv_56936;
    case 1: 
#line 412 
    ;
    
#line 413 
    if (bytes_per_int > 20) 
#line 414 
                            new_latency_range = I40E_BULK_LATENCY;
    else 
      
#line 415 
      if (bytes_per_int <= 10) 
#line 416 
                               new_latency_range = I40E_LOWEST_LATENCY; else ;
    
#line 417 
    goto ldv_56936;
    case 2: 
#line 418 
    ;
    
#line 419 
    if (bytes_per_int <= 20) 
#line 420 
                             rc->latency_range = I40E_LOW_LATENCY; else ;
    
#line 421 
    goto ldv_56936;
  }
  ldv_56936: 
#line 424 
  ;
  
#line 424 
  switch ((unsigned int)new_latency_range) {
    case (unsigned int)0: 
#line 425 
    ;
    
#line 426 
    new_itr = 5U;
    
#line 427 
    goto ldv_56940;
    case (unsigned int)1: 
#line 428 
    ;
    
#line 429 
    new_itr = 25U;
    
#line 430 
    goto ldv_56940;
    case (unsigned int)2: 
#line 431 
    ;
    
#line 432 
    new_itr = 62U;
    
#line 433 
    goto ldv_56940;
    default: 
#line 434 
    ;
    
#line 435 
    goto ldv_56940;
  }
  ldv_56940: 
#line 438 
  ;
  
#line 438 
  if ((unsigned int)rc->itr != new_itr) {
    
#line 440 
    new_itr = (((unsigned int)rc->itr * new_itr) * 10U) / (new_itr * 9U + (unsigned int)rc->itr);
    
#line 442 
    rc->itr = (unsigned short)((unsigned int)((unsigned short)new_itr) & 4080U);
  }
  else ;
  
#line 445 
  rc->total_bytes = 0U;
  
#line 446 
  rc->total_packets = 0U;
  return_label: 
#line 447 
                return;
}


#line 453  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
static void i40e_update_dynamic_itr(struct i40e_q_vector *q_vector)
{
  u32 reg_addr;
  u16 old_itr;
  
#line 455 
  u16 vector = (unsigned short)((int)((unsigned short)(q_vector->vsi)->base_vector) + (int)((unsigned short)q_vector->v_idx));
  
#line 456 
  struct i40e_hw *hw = & ((q_vector->vsi)->back)->hw;
  
#line 460 
  reg_addr = (unsigned int)(((int)vector + 2559) * 4);
  
#line 461 
  old_itr = q_vector->rx.itr;
  
#line 462 
  i40e_set_new_dynamic_itr(& q_vector->rx);
  
#line 463 
  if ((int)q_vector->rx.itr != (int)old_itr) 
#line 464 
                                             writel((unsigned int)q_vector->rx.itr,(void volatile *)(hw->hw_addr + reg_addr)); else ;
  
#line 466 
  reg_addr = (unsigned int)(((int)vector + 2575) * 4);
  
#line 467 
  old_itr = q_vector->tx.itr;
  
#line 468 
  i40e_set_new_dynamic_itr(& q_vector->tx);
  
#line 469 
  if ((int)q_vector->tx.itr != (int)old_itr) 
#line 470 
                                             writel((unsigned int)q_vector->tx.itr,(void volatile *)(hw->hw_addr + reg_addr)); else ;
  
#line 471 
  return;
}


#line 479  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
int i40evf_setup_tx_descriptors(struct i40e_ring *tx_ring)
{
  int __retres;
  int bi_size;
  
#line 481 
  struct device *dev = tx_ring->dev;
  
#line 484 
  if (dev == (struct device *)0) {
    
#line 485 
    __retres = -12;
    
#line 485 
    goto return_label;
  }
  else ;
  {
    
#line 488 
    int __ret_warn_on = tx_ring->__anonCompField_i40e_ring_116.tx_bi != (struct i40e_tx_buffer *)0;
    
#line 488 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 488 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c",488); else ;
    
#line 488 
    long tmp = (long)(__ret_warn_on != 0);
  }
  
#line 489 
  bi_size = (int)((unsigned int)tx_ring->count * 40U);
  
#line 490 
  tx_ring->__anonCompField_i40e_ring_116.tx_bi = (struct i40e_tx_buffer *)kzalloc((unsigned long)bi_size,208U);
  
#line 491 
  if (tx_ring->__anonCompField_i40e_ring_116.tx_bi == (struct i40e_tx_buffer *)0) 
    
#line 492 
    goto err; else ;
  
#line 495 
  tx_ring->size = (unsigned int)tx_ring->count * 16U;
  
#line 499 
  tx_ring->size += 4U;
  
#line 500 
  tx_ring->size = (tx_ring->size + 4095U) & 4294963200U;
  
#line 501 
  tx_ring->desc = dma_alloc_attrs(dev,(unsigned long)tx_ring->size,& tx_ring->dma,208U,(struct dma_attrs *)0);
  
#line 503 
  if (tx_ring->desc == (void *)0) {
    
#line 504 
    _dev_info((struct device const *)dev,"Unable to allocate memory for the Tx descriptor ring, size=%d\n",tx_ring->size);
    
#line 506 
    goto err;
  }
  else ;
  
#line 509 
  tx_ring->next_to_use = (unsigned short)0U;
  
#line 510 
  tx_ring->next_to_clean = (unsigned short)0U;
  
#line 511 
  __retres = 0;
  
#line 511 
  goto return_label;
  err: 
#line 513 
  ;
  
#line 514 
  kfree((void const *)tx_ring->__anonCompField_i40e_ring_116.tx_bi);
  
#line 515 
  tx_ring->__anonCompField_i40e_ring_116.tx_bi = (struct i40e_tx_buffer *)0;
  
#line 516 
  __retres = -12;
  return_label: 
#line 516 
                return __retres;
}


#line 523  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
void i40evf_clean_rx_ring(struct i40e_ring *rx_ring)
{
  struct i40e_rx_buffer *rx_bi;
  unsigned long bi_size;
  u16 i;
  int tmp;
  
#line 525 
  struct device *dev = rx_ring->dev;
  
#line 531 
  if (rx_ring->__anonCompField_i40e_ring_116.rx_bi == (struct i40e_rx_buffer *)0) 
    
#line 532 
    goto return_label; else ;
  
#line 534 
  tmp = constant_test_bit(4L,(unsigned long const volatile *)(& rx_ring->state));
  
#line 534 
  if (tmp != 0) {
    
#line 535 
    int bufsz = (((int)rx_ring->rx_hdr_len + 255) & -256) * (int)rx_ring->count;
    
#line 537 
    rx_bi = rx_ring->__anonCompField_i40e_ring_116.rx_bi;
    
#line 538 
    if (rx_bi->hdr_buf != (void *)0) {
      
#line 539 
      dma_free_attrs(dev,(unsigned long)bufsz,rx_bi->hdr_buf,rx_bi->dma,(struct dma_attrs *)0);
      
#line 543 
      i = (unsigned short)0U;
      
#line 543 
      goto ldv_56968;
      ldv_56967: 
#line 544 
      ;
      
#line 544 
      rx_bi = rx_ring->__anonCompField_i40e_ring_116.rx_bi + (int)i;
      
#line 545 
      rx_bi->dma = 0ULL;
      
#line 546 
      rx_bi->hdr_buf = (void *)0;
      
#line 543 
      i = (u16)((int)i + 1);
      ldv_56968: 
#line 544 
      ;
      
#line 543 
      if ((int)rx_ring->count > (int)i) 
#line 545 
                                        goto ldv_56967; else 
#line 548 
                                                             goto ldv_56969;
      ldv_56969: 
#line 549 
      ;
    }
    else ;
  }
  else ;
  
#line 551 
  i = (unsigned short)0U;
  
#line 551 
  goto ldv_56971;
  ldv_56970: 
#line 552 
  ;
  
#line 552 
  rx_bi = rx_ring->__anonCompField_i40e_ring_116.rx_bi + (int)i;
  
#line 553 
  if (rx_bi->dma != 0ULL) {
    
#line 554 
    dma_unmap_single_attrs(dev,rx_bi->dma,(unsigned long)rx_ring->rx_buf_len,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0);
    
#line 558 
    rx_bi->dma = 0ULL;
  }
  else ;
  
#line 560 
  if (rx_bi->skb != (struct sk_buff *)0) {
    
#line 561 
    consume_skb(rx_bi->skb);
    
#line 562 
    rx_bi->skb = (struct sk_buff *)0;
  }
  else ;
  
#line 564 
  if (rx_bi->page != (struct page *)0) {
    
#line 565 
    if (rx_bi->page_dma != 0ULL) {
      
#line 566 
      dma_unmap_page(dev,rx_bi->page_dma,2048UL,(enum dma_data_direction)DMA_FROM_DEVICE);
      
#line 570 
      rx_bi->page_dma = 0ULL;
    }
    else ;
    
#line 572 
    __free_pages(rx_bi->page,0U);
    
#line 573 
    rx_bi->page = (struct page *)0;
    
#line 574 
    rx_bi->page_offset = 0U;
  }
  else ;
  
#line 551 
  i = (u16)((int)i + 1);
  ldv_56971: 
#line 552 
  ;
  
#line 551 
  if ((int)rx_ring->count > (int)i) 
#line 553 
                                    goto ldv_56970; else 
#line 556 
                                                         goto ldv_56972;
  ldv_56972: 
#line 557 
  ;
  
#line 578 
  bi_size = (unsigned long)rx_ring->count * 48UL;
  
#line 579 
  memset((void *)rx_ring->__anonCompField_i40e_ring_116.rx_bi,0,bi_size);
  
#line 582 
  memset(rx_ring->desc,0,(unsigned long)rx_ring->size);
  
#line 584 
  rx_ring->next_to_clean = (unsigned short)0U;
  
#line 585 
  rx_ring->next_to_use = (unsigned short)0U;
  return_label: 
#line 586 
                return;
}


#line 594  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
void i40evf_free_rx_resources(struct i40e_ring *rx_ring)
{
  
#line 596 
  i40evf_clean_rx_ring(rx_ring);
  
#line 597 
  kfree((void const *)rx_ring->__anonCompField_i40e_ring_116.rx_bi);
  
#line 598 
  rx_ring->__anonCompField_i40e_ring_116.rx_bi = (struct i40e_rx_buffer *)0;
  
#line 600 
  if (rx_ring->desc != (void *)0) {
    
#line 601 
    dma_free_attrs(rx_ring->dev,(unsigned long)rx_ring->size,rx_ring->desc,rx_ring->dma,(struct dma_attrs *)0);
    
#line 603 
    rx_ring->desc = (void *)0;
  }
  else ;
  
#line 605 
  return;
}


#line 614  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
void i40evf_alloc_rx_headers(struct i40e_ring *rx_ring)
{
  struct i40e_rx_buffer *rx_bi;
  dma_addr_t dma;
  void *buffer;
  int buf_size;
  int i;
  
#line 616 
  struct device *dev = rx_ring->dev;
  
#line 623 
  if ((rx_ring->__anonCompField_i40e_ring_116.rx_bi)->hdr_buf != (void *)0) 
    
#line 624 
    goto return_label; else ;
  
#line 626 
  buf_size = ((int)rx_ring->rx_hdr_len + 255) & -256;
  
#line 627 
  buffer = dma_alloc_attrs(dev,(unsigned long)((int)rx_ring->count * buf_size),& dma,208U,(struct dma_attrs *)0);
  
#line 629 
  if (buffer == (void *)0) 
#line 630 
                           goto return_label; else ;
  
#line 631 
  i = 0;
  
#line 631 
  goto ldv_56986;
  ldv_56985: 
#line 632 
  ;
  
#line 632 
  rx_bi = rx_ring->__anonCompField_i40e_ring_116.rx_bi + i;
  
#line 633 
  rx_bi->dma = (unsigned long long)(i * buf_size) + dma;
  
#line 634 
  rx_bi->hdr_buf = buffer + i * buf_size;
  
#line 631 
  i += 1;
  ldv_56986: 
#line 632 
  ;
  
#line 631 
  if ((int)rx_ring->count > i) 
#line 633 
                               goto ldv_56985; else 
#line 636 
                                                    goto ldv_56987;
  ldv_56987: 
#line 637 
  ;
  return_label: 
#line 638 
                return;
}


#line 644  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
int i40evf_setup_rx_descriptors(struct i40e_ring *rx_ring)
{
  int __retres;
  int bi_size;
  int tmp_0;
  
#line 646 
  struct device *dev = rx_ring->dev;
  {
    
#line 650 
    int __ret_warn_on = rx_ring->__anonCompField_i40e_ring_116.rx_bi != (struct i40e_rx_buffer *)0;
    
#line 650 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 650 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c",650); else ;
    
#line 650 
    long tmp = (long)(__ret_warn_on != 0);
  }
  
#line 651 
  bi_size = (int)((unsigned int)rx_ring->count * 48U);
  
#line 652 
  rx_ring->__anonCompField_i40e_ring_116.rx_bi = (struct i40e_rx_buffer *)kzalloc((unsigned long)bi_size,208U);
  
#line 653 
  if (rx_ring->__anonCompField_i40e_ring_116.rx_bi == (struct i40e_rx_buffer *)0) 
    
#line 654 
    goto err; else ;
  
#line 656 
  u64_stats_init(& rx_ring->syncp);
  
#line 659 
  tmp_0 = constant_test_bit(5L,(unsigned long const volatile *)(& rx_ring->state));
  
#line 659 
  if (tmp_0 != 0) 
#line 659 
                  rx_ring->size = (unsigned int)rx_ring->count * 16U; else 
                                                                    
#line 659 
                                                                    rx_ring->size = (unsigned int)rx_ring->count * 32U;
  
#line 662 
  rx_ring->size = (rx_ring->size + 4095U) & 4294963200U;
  
#line 663 
  rx_ring->desc = dma_alloc_attrs(dev,(unsigned long)rx_ring->size,& rx_ring->dma,208U,(struct dma_attrs *)0);
  
#line 666 
  if (rx_ring->desc == (void *)0) {
    
#line 667 
    _dev_info((struct device const *)dev,"Unable to allocate memory for the Rx descriptor ring, size=%d\n",rx_ring->size);
    
#line 669 
    goto err;
  }
  else ;
  
#line 672 
  rx_ring->next_to_clean = (unsigned short)0U;
  
#line 673 
  rx_ring->next_to_use = (unsigned short)0U;
  
#line 675 
  __retres = 0;
  
#line 675 
  goto return_label;
  err: 
#line 676 
  ;
  
#line 677 
  kfree((void const *)rx_ring->__anonCompField_i40e_ring_116.rx_bi);
  
#line 678 
  rx_ring->__anonCompField_i40e_ring_116.rx_bi = (struct i40e_rx_buffer *)0;
  
#line 679 
  __retres = -12;
  return_label: 
#line 679 
                return __retres;
}


#line 687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
__inline static void i40e_release_rx_desc(struct i40e_ring *rx_ring, u32 val)
{
  
#line 689 
  rx_ring->next_to_use = (unsigned short)val;
  
#line 690 
  ldv_inline_asm();
  
#line 696 
  writel(val,(void volatile *)rx_ring->tail);
  
#line 697 
  return;
}


#line 704  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
void i40evf_alloc_rx_buffers_ps(struct i40e_ring *rx_ring, u16 cleaned_count)
{
  union i40e_32byte_rx_desc *rx_desc;
  struct i40e_rx_buffer *bi;
  u16 tmp_0;
  
#line 706 
  u16 i = rx_ring->next_to_use;
  
#line 711 
  if (rx_ring->netdev == (struct net_device *)0 || (unsigned int)cleaned_count == 0U) 
    
#line 712 
    goto return_label; else ;
  
#line 714 
  goto ldv_57009;
  ldv_57008: 
#line 715 
  ;
  
#line 715 
  rx_desc = (union i40e_32byte_rx_desc *)rx_ring->desc + (int)i;
  
#line 716 
  bi = rx_ring->__anonCompField_i40e_ring_116.rx_bi + (int)i;
  
#line 718 
  if (bi->skb != (struct sk_buff *)0) 
#line 719 
                                      goto no_buffers; else ;
  
#line 720 
  if (bi->page == (struct page *)0) {
    
#line 721 
    bi->page = alloc_pages(32U,0U);
    
#line 722 
    if (bi->page == (struct page *)0) {
      
#line 723 
      rx_ring->__anonCompField_i40e_ring_117.rx_stats.alloc_page_failed += 1ULL;
      
#line 724 
      goto no_buffers;
    }
    else ;
  }
  else ;
  
#line 728 
  if (bi->page_dma == 0ULL) {
    int tmp;
    
#line 730 
    bi->page_offset ^= 2048U;
    
#line 731 
    bi->page_dma = dma_map_page(rx_ring->dev,bi->page,(unsigned long)bi->page_offset,2048UL,(enum dma_data_direction)DMA_FROM_DEVICE);
    
#line 736 
    tmp = dma_mapping_error(rx_ring->dev,bi->page_dma);
    
#line 736 
    if (tmp != 0) {
      
#line 738 
      rx_ring->__anonCompField_i40e_ring_117.rx_stats.alloc_page_failed += 1ULL;
      
#line 739 
      bi->page_dma = 0ULL;
      
#line 740 
      goto no_buffers;
    }
    else ;
  }
  else ;
  
#line 744 
  dma_sync_single_range_for_device(rx_ring->dev,bi->dma,0UL,(unsigned long)rx_ring->rx_hdr_len,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 752 
  rx_desc->read.pkt_addr = bi->page_dma;
  
#line 753 
  rx_desc->read.hdr_addr = bi->dma;
  
#line 754 
  i = (u16)((int)i + 1);
  
#line 755 
  if ((int)rx_ring->count == (int)i) 
#line 756 
                                     i = (unsigned short)0U; else ;
  ldv_57009: 
#line 757 
  ;
  
#line 714 
  tmp_0 = cleaned_count;
  
#line 714 
  cleaned_count = (u16)((int)cleaned_count - 1);
  
#line 714 
  ;
  
#line 714 
  if ((unsigned int)tmp_0 != 0U) 
#line 716 
                                 goto ldv_57008; else 
#line 719 
                                                      goto ldv_57010;
  ldv_57010: 
#line 720 
  ;
  no_buffers: 
#line 759 
  ;
  
#line 760 
  if ((int)rx_ring->next_to_use != (int)i) 
#line 761 
                                           i40e_release_rx_desc(rx_ring,(unsigned int)i); else ;
  return_label: 
#line 762 
                return;
}


#line 769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
void i40evf_alloc_rx_buffers_1buf(struct i40e_ring *rx_ring, u16 cleaned_count)
{
  union i40e_32byte_rx_desc *rx_desc;
  struct i40e_rx_buffer *bi;
  struct sk_buff *skb;
  u16 tmp_0;
  
#line 771 
  u16 i = rx_ring->next_to_use;
  
#line 777 
  if (rx_ring->netdev == (struct net_device *)0 || (unsigned int)cleaned_count == 0U) 
    
#line 778 
    goto return_label; else ;
  
#line 780 
  goto ldv_57021;
  ldv_57020: 
#line 781 
  ;
  
#line 781 
  rx_desc = (union i40e_32byte_rx_desc *)rx_ring->desc + (int)i;
  
#line 782 
  bi = rx_ring->__anonCompField_i40e_ring_116.rx_bi + (int)i;
  
#line 783 
  skb = bi->skb;
  
#line 785 
  if (skb == (struct sk_buff *)0) {
    
#line 786 
    skb = netdev_alloc_skb_ip_align(rx_ring->netdev,(unsigned int)rx_ring->rx_buf_len);
    
#line 788 
    if (skb == (struct sk_buff *)0) {
      
#line 789 
      rx_ring->__anonCompField_i40e_ring_117.rx_stats.alloc_buff_failed += 1ULL;
      
#line 790 
      goto no_buffers;
    }
    else ;
    
#line 793 
    skb_record_rx_queue(skb,(unsigned short)((int)rx_ring->queue_index));
    
#line 794 
    bi->skb = skb;
  }
  else ;
  
#line 797 
  if (bi->dma == 0ULL) {
    int tmp;
    
#line 798 
    bi->dma = dma_map_single_attrs(rx_ring->dev,(void *)skb->data,(unsigned long)rx_ring->rx_buf_len,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0);
    
#line 802 
    tmp = dma_mapping_error(rx_ring->dev,bi->dma);
    
#line 802 
    if (tmp != 0) {
      
#line 803 
      rx_ring->__anonCompField_i40e_ring_117.rx_stats.alloc_buff_failed += 1ULL;
      
#line 804 
      bi->dma = 0ULL;
      
#line 805 
      goto no_buffers;
    }
    else ;
  }
  else ;
  
#line 809 
  rx_desc->read.pkt_addr = bi->dma;
  
#line 810 
  rx_desc->read.hdr_addr = 0ULL;
  
#line 811 
  i = (u16)((int)i + 1);
  
#line 812 
  if ((int)rx_ring->count == (int)i) 
#line 813 
                                     i = (unsigned short)0U; else ;
  ldv_57021: 
#line 814 
  ;
  
#line 780 
  tmp_0 = cleaned_count;
  
#line 780 
  cleaned_count = (u16)((int)cleaned_count - 1);
  
#line 780 
  ;
  
#line 780 
  if ((unsigned int)tmp_0 != 0U) 
#line 782 
                                 goto ldv_57020; else 
#line 785 
                                                      goto ldv_57022;
  ldv_57022: 
#line 786 
  ;
  no_buffers: 
#line 816 
  ;
  
#line 817 
  if ((int)rx_ring->next_to_use != (int)i) 
#line 818 
                                           i40e_release_rx_desc(rx_ring,(unsigned int)i); else ;
  return_label: 
#line 819 
                return;
}


#line 827  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
static void i40e_receive_skb(struct i40e_ring *rx_ring, struct sk_buff *skb, u16 vlan_tag)
{
  
#line 830 
  struct i40e_q_vector *q_vector = rx_ring->q_vector;
  
#line 831 
  struct i40e_vsi *vsi = rx_ring->vsi;
  
#line 832 
  u64 flags = (unsigned long long)(vsi->back)->flags;
  
#line 834 
  if (((int)vlan_tag & 4095) != 0) 
#line 835 
                                   __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)vlan_tag)); else ;
  
#line 837 
  if ((flags & 16ULL) != 0ULL) 
#line 838 
                               netif_rx(skb); else 
#line 840 
                                                   napi_gro_receive(& q_vector->napi,skb);
  
#line 841 
  return;
}


#line 851  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
__inline static void i40e_rx_checksum(struct i40e_vsi *vsi, struct sk_buff *skb, u32 rx_status, u32 rx_error, u16 rx_ptype)
{
  bool ipv4_tunnel;
  bool ipv6_tunnel;
  __wsum rx_udp_csum;
  struct iphdr *iph;
  __sum16 csum;
  
#line 857 
  struct i40e_rx_ptype_decoded decoded = decode_rx_desc_ptype((unsigned char)((int)((unsigned char)rx_ptype)));
  
#line 858 
  bool ipv4 = (_Bool)0;
  
#line 858 
  bool ipv6 = (_Bool)0;
  
#line 864 
  ipv4_tunnel = (_Bool)((unsigned int)rx_ptype + 65478U <= 29U);
  
#line 866 
  ipv6_tunnel = (_Bool)((unsigned int)rx_ptype + 65412U <= 29U);
  
#line 869 
  skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U;
  
#line 872 
  if (((vsi->netdev)->features & 17179869184ULL) == 0ULL) 
#line 873 
                                                          goto return_label; else ;
  
#line 876 
  if ((rx_status & 8U) == 0U) 
#line 877 
                              goto return_label; else ;
  
#line 880 
  if ((unsigned int)*((unsigned char *)(& decoded) + 1UL) == 0U || (unsigned int)*((unsigned char *)(& decoded) + 1UL) == 0U) 
    
#line 881 
    goto return_label; else ;
  
#line 883 
  if ((unsigned int)*((unsigned char *)(& decoded) + 1UL) != 0U && (unsigned int)*((unsigned char *)(& decoded) + 1UL) == 0U) 
    
#line 885 
    ipv4 = (_Bool)1;
  else 
    
#line 886 
    if ((unsigned int)*((unsigned char *)(& decoded) + 1UL) != 0U && (unsigned int)*((unsigned char *)(& decoded) + 1UL) != 0U) 
      
#line 888 
      ipv6 = (_Bool)1; else ;
  
#line 890 
  if ((int)ipv4 != 0 && (rx_error & 40U) != 0U) 
#line 893 
                                                goto checksum_fail; else ;
  
#line 896 
  if ((int)ipv6 != 0 && (rx_status & 32768U) != 0U) 
#line 899 
                                                    goto return_label; else ;
  
#line 902 
  if ((rx_error & 16U) != 0U) 
#line 903 
                              goto checksum_fail; else ;
  
#line 909 
  if ((rx_error & 128U) != 0U) 
#line 910 
                               goto return_label; else ;
  
#line 918 
  if ((int)ipv4_tunnel != 0) {
    struct iphdr *tmp_0;
    unsigned int tmp_1;
    struct iphdr *tmp_4;
    
#line 921 
    tmp_0 = ip_hdr((struct sk_buff const *)skb);
    
#line 919 
    skb->transport_header = (unsigned short)(((unsigned int)skb->mac_header + (unsigned int)((unsigned short)tmp_0->ihl) * 4U) + 14U);
    
#line 924 
    if ((unsigned int)skb->protocol == 129U || (unsigned int)skb->protocol == 43144U) 
      
#line 924 
      tmp_1 = 4U; else 
#line 924 
                       tmp_1 = 0U;
    
#line 924 
    skb->transport_header = (unsigned short)((unsigned int)skb->transport_header + tmp_1);
    
#line 928 
    tmp_4 = ip_hdr((struct sk_buff const *)skb);
    
#line 928 
    ;
    
#line 928 
    if ((unsigned int)tmp_4->protocol == 17U) {
      struct udphdr *tmp_5;
      
#line 929 
      tmp_5 = udp_hdr((struct sk_buff const *)skb);
      
#line 928 
      ;
      
#line 928 
      if ((unsigned int)tmp_5->check != 0U) {
        int tmp_2;
        struct udphdr *tmp_3;
        
#line 930 
        rx_udp_csum = udp_csum(skb);
        
#line 931 
        iph = ip_hdr((struct sk_buff const *)skb);
        
#line 932 
        ;
        
#line 933 
        tmp_2 = skb_transport_offset((struct sk_buff const *)skb);
        
#line 932 
        ;
        
#line 932 
        ;
        
#line 932 
        ;
        
#line 932 
        csum = csum_tcpudp_magic(iph->saddr,iph->daddr,(unsigned short)((int)((unsigned short)skb->len) - (int)((unsigned short)tmp_2)),(unsigned short)17,rx_udp_csum);
        
#line 937 
        tmp_3 = udp_hdr((struct sk_buff const *)skb);
        
#line 937 
        ;
        
#line 937 
        if ((int)tmp_3->check != (int)csum) 
#line 938 
                                            goto checksum_fail; else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 943 
  skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
  
#line 944 
  skb->csum_level = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))(((int)ipv4_tunnel != 0 || (int)ipv6_tunnel != 0) != 0);
  
#line 946 
  goto return_label;
  checksum_fail: 
#line 948 
  ;
  
#line 949 
  (vsi->back)->hw_csum_rx_error += 1ULL;
  return_label: 
#line 950 
                return;
}


#line 957  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
__inline static u32 i40e_rx_hash(struct i40e_ring *ring, union i40e_32byte_rx_desc *rx_desc)
{
  u32 __retres;
  
#line 960 
  __le64 const rss_mask = 12288ULL;
  
#line 964 
  if (((ring->netdev)->features & 8589934592ULL) != 0ULL && (rx_desc->wb.qword1.status_error_len & 12288ULL) == 12288ULL) {
    
#line 966 
    __retres = rx_desc->wb.qword0.hi_dword.rss;
    
#line 966 
    goto return_label;
  }
  else {
    
#line 968 
    __retres = 0U;
    
#line 968 
    goto return_label;
  }
  return_label: 
#line 964 
                return __retres;
}


#line 977  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
__inline static enum pkt_hash_types i40e_ptype_to_hash(u8 ptype)
{
  enum pkt_hash_types __retres;
  
#line 979 
  struct i40e_rx_ptype_decoded decoded = decode_rx_desc_ptype((unsigned char)((int)ptype));
  
#line 981 
  if ((unsigned int)*((unsigned char *)(& decoded) + 1UL) == 0U) {
    
#line 982 
    __retres = PKT_HASH_TYPE_NONE;
    
#line 982 
    goto return_label;
  }
  else ;
  
#line 984 
  if ((unsigned int)*((unsigned char *)(& decoded) + 1UL) != 0U && (unsigned int)*((unsigned short *)(& decoded) + 1UL) == 192U) {
    
#line 986 
    __retres = PKT_HASH_TYPE_L4;
    
#line 986 
    goto return_label;
  }
  else 
    
#line 987 
    if ((unsigned int)*((unsigned char *)(& decoded) + 1UL) != 0U && (unsigned int)*((unsigned short *)(& decoded) + 1UL) == 128U) {
      
#line 989 
      __retres = PKT_HASH_TYPE_L3;
      
#line 989 
      goto return_label;
    }
    else {
      
#line 991 
      __retres = PKT_HASH_TYPE_L2;
      
#line 991 
      goto return_label;
    }
  return_label: 
#line 984 
                return __retres;
}


#line 1001  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
static int i40e_clean_rx_irq_ps(struct i40e_ring *rx_ring, int budget)
{
  int __retres;
  u16 rx_packet_len;
  u16 rx_header_len;
  u16 rx_sph;
  u16 rx_hbo;
  unsigned int tmp;
  union i40e_32byte_rx_desc *rx_desc;
  u32 rx_error;
  u32 rx_status;
  u8 rx_ptype;
  u64 qword;
  
#line 1003 
  unsigned int total_rx_bytes = 0U;
  
#line 1003 
  unsigned int total_rx_packets = 0U;
  
#line 1005 
  if ((int)rx_ring->next_to_clean <= (int)rx_ring->next_to_use) 
#line 1005 
                                                                tmp = (unsigned int)rx_ring->count; else 
                                                                    
#line 1005 
                                                                    tmp = 0U;
  
#line 1005 
  u16 cleaned_count = (unsigned short)(((tmp + (unsigned int)rx_ring->next_to_clean) - (unsigned int)rx_ring->next_to_use) + 65535U);
  
#line 1006 
  int const current_node = numa_node_id();
  
#line 1007 
  struct i40e_vsi *vsi = rx_ring->vsi;
  
#line 1008 
  u16 i = rx_ring->next_to_clean;
  ldv_57083: 
#line 1013 
  ;
  {
    struct i40e_rx_buffer *rx_bi;
    struct sk_buff *skb;
    u16 vlan_tag;
    enum pkt_hash_types tmp_9;
    u32 tmp_10;
    
#line 1019 
    if ((unsigned int)cleaned_count > 15U) {
      
#line 1020 
      i40evf_alloc_rx_buffers_ps(rx_ring,(unsigned short)((int)cleaned_count));
      
#line 1021 
      cleaned_count = (unsigned short)0U;
    }
    else ;
    
#line 1024 
    i = rx_ring->next_to_clean;
    
#line 1025 
    rx_desc = (union i40e_32byte_rx_desc *)rx_ring->desc + (int)i;
    
#line 1026 
    qword = rx_desc->wb.qword1.status_error_len;
    
#line 1027 
    rx_status = (unsigned int)qword & 524287U;
    
#line 1030 
    if ((rx_status & 1U) == 0U) 
#line 1031 
                                goto ldv_57078; else ;
    
#line 1032 
    ldv_inline_asm();
    
#line 1038 
    rx_bi = rx_ring->__anonCompField_i40e_ring_116.rx_bi + (int)i;
    
#line 1039 
    skb = rx_bi->skb;
    
#line 1040 
    if ((long)(skb == (struct sk_buff *)0) != 0L) {
      
#line 1041 
      skb = netdev_alloc_skb_ip_align(rx_ring->netdev,(unsigned int)rx_ring->rx_hdr_len);
      
#line 1043 
      if (skb == (struct sk_buff *)0) {
        
#line 1044 
        rx_ring->__anonCompField_i40e_ring_117.rx_stats.alloc_buff_failed += 1ULL;
        
#line 1045 
        goto ldv_57078;
      }
      else ;
      
#line 1049 
      skb_record_rx_queue(skb,(unsigned short)((int)rx_ring->queue_index));
      
#line 1051 
      dma_sync_single_range_for_cpu(rx_ring->dev,rx_bi->dma,0UL,(unsigned long)rx_ring->rx_hdr_len,(enum dma_data_direction)DMA_FROM_DEVICE);
    }
    else ;
    
#line 1057 
    rx_packet_len = (unsigned short)((unsigned int)((unsigned short)(qword >> 38)) & 16383U);
    
#line 1059 
    rx_header_len = (unsigned short)((unsigned int)((unsigned short)(qword >> 52)) & 2047U);
    
#line 1061 
    rx_sph = (unsigned short)(qword >> 63);
    
#line 1064 
    rx_error = (unsigned int)(qword >> 19) & 255U;
    
#line 1066 
    rx_hbo = (unsigned short)((unsigned int)((unsigned short)rx_error) & 4U);
    
#line 1067 
    rx_error &= 4294967291U;
    
#line 1069 
    rx_ptype = (unsigned char)(qword >> 30);
    
#line 1071 
    __builtin_prefetch((void const *)rx_bi->page);
    
#line 1072 
    rx_bi->skb = (struct sk_buff *)0;
    
#line 1073 
    cleaned_count = (u16)((int)cleaned_count + 1);
    
#line 1074 
    if ((unsigned int)rx_hbo != 0U || (unsigned int)rx_sph != 0U) {
      int len;
      unsigned char *tmp_1;
      
#line 1076 
      if ((unsigned int)rx_hbo != 0U) 
#line 1077 
                                      len = 512; else 
#line 1079 
                                                      len = (int)rx_header_len;
      
#line 1080 
      ;
      
#line 1080 
      ;
      
#line 1080 
      tmp_1 = __skb_put(skb,(unsigned int)len);
      
#line 1080 
      memcpy((void *)tmp_1,(void const *)rx_bi->hdr_buf,(unsigned long)len);
    }
    else 
      
#line 1081 
      if (skb->len == 0U) {
        int len_0;
        unsigned int tmp_4;
        unsigned int tmp_2;
        unsigned char *tmp_5;
        
#line 1084 
        tmp_2 = skb_headlen((struct sk_buff const *)skb);
        
#line 1085 
        ;
        
#line 1085 
        if ((unsigned int)rx_packet_len > tmp_2) 
#line 1084 
                                                 tmp_4 = skb_headlen((struct sk_buff const *)skb); else 
                                                                    
#line 1085 
                                                                    tmp_4 = (unsigned int)rx_packet_len;
        
#line 1084 
        len_0 = (int)tmp_4;
        
#line 1086 
        ;
        
#line 1086 
        ;
        
#line 1086 
        tmp_5 = __skb_put(skb,(unsigned int)len_0);
        
#line 1086 
        memcpy((void *)tmp_5,(void const *)(rx_bi->page + rx_bi->page_offset),(unsigned long)len_0);
        
#line 1089 
        rx_bi->page_offset += (unsigned int)len_0;
        
#line 1090 
        rx_packet_len = (unsigned short)((int)rx_packet_len - (int)((unsigned short)len_0));
      }
      else ;
    
#line 1094 
    if ((unsigned int)rx_packet_len != 0U) {
      unsigned char *tmp_6;
      int tmp_7;
      
#line 1095 
      ;
      
#line 1095 
      ;
      
#line 1095 
      ;
      
#line 1095 
      tmp_6 = skb_end_pointer((struct sk_buff const *)skb);
      
#line 1095 
      ;
      
#line 1095 
      skb_fill_page_desc(skb,(int)((struct skb_shared_info *)tmp_6)->nr_frags,rx_bi->page,(int)rx_bi->page_offset,(int)rx_packet_len);
      
#line 1100 
      skb->len += (unsigned int)rx_packet_len;
      
#line 1101 
      skb->data_len += (unsigned int)rx_packet_len;
      
#line 1102 
      skb->truesize += (unsigned int)rx_packet_len;
      
#line 1104 
      tmp_7 = page_count(rx_bi->page);
      
#line 1104 
      if (tmp_7 == 1) {
        int tmp_8;
        
#line 1104 
        tmp_8 = page_to_nid((struct page const *)rx_bi->page);
        
#line 1104 
        ;
        
#line 1104 
        if (tmp_8 == current_node) 
#line 1106 
                                   get_page(rx_bi->page); else 
#line 1108 
                                                               rx_bi->page = (struct page *)0;
      }
      else 
#line 1108 
           rx_bi->page = (struct page *)0;
      
#line 1110 
      dma_unmap_page(rx_ring->dev,rx_bi->page_dma,2048UL,(enum dma_data_direction)DMA_FROM_DEVICE);
      
#line 1114 
      rx_bi->page_dma = 0ULL;
    }
    else ;
    
#line 1116 
    i = (u16)((int)i + 1);
    
#line 1116 
    if ((int)rx_ring->count == (int)i) 
#line 1116 
                                       i = (unsigned short)0U; else ;
    
#line 1116 
    rx_ring->next_to_clean = i;
    
#line 1118 
    if ((long)((rx_status & 2U) == 0U) != 0L) {
      struct i40e_rx_buffer *next_buffer;
      
#line 1122 
      next_buffer = rx_ring->__anonCompField_i40e_ring_116.rx_bi + (int)i;
      
#line 1123 
      next_buffer->skb = skb;
      
#line 1124 
      rx_ring->__anonCompField_i40e_ring_117.rx_stats.non_eop_descs += 1ULL;
      
#line 1125 
      goto ldv_57082;
    }
    else ;
    
#line 1129 
    if ((long)((rx_error & 1U) != 0U) != 0L) {
      
#line 1130 
      dev_kfree_skb_any(skb);
      
#line 1131 
      goto ldv_57082;
    }
    else ;
    
#line 1134 
    tmp_9 = i40e_ptype_to_hash((unsigned char)((int)rx_ptype));
    
#line 1134 
    tmp_10 = i40e_rx_hash(rx_ring,rx_desc);
    
#line 1134 
    ;
    
#line 1134 
    skb_set_hash(skb,tmp_10,tmp_9);
    
#line 1137 
    total_rx_bytes = skb->len + total_rx_bytes;
    
#line 1138 
    total_rx_packets += 1U;
    
#line 1140 
    skb->protocol = eth_type_trans(skb,rx_ring->netdev);
    
#line 1142 
    i40e_rx_checksum(vsi,skb,rx_status,rx_error,(unsigned short)((int)rx_ptype));
    
#line 1144 
    if ((rx_status & 4U) != 0U) 
#line 1144 
                                vlan_tag = rx_desc->wb.qword0.lo_dword.l2tag1; else 
                                                                    
#line 1144 
                                                                    vlan_tag = (unsigned short)0U;
    
#line 1153 
    skb_mark_napi_id(skb,& (rx_ring->q_vector)->napi);
    
#line 1154 
    i40e_receive_skb(rx_ring,skb,(unsigned short)((int)vlan_tag));
    
#line 1156 
    rx_desc->wb.qword1.status_error_len = 0ULL;
  }
  ldv_57082: 
#line 1158 
  ;
  
#line 1158 
  if ((long)(total_rx_packets < (unsigned int)budget) != 0L) 
#line 1160 
                                                             goto ldv_57083; else 
                                                                    
#line 1163 
                                                                    goto ldv_57078;
  ldv_57078: 
#line 1164 
  ;
  
#line 1160 
  u64_stats_init(& rx_ring->syncp);
  
#line 1161 
  rx_ring->stats.packets += (unsigned long long)total_rx_packets;
  
#line 1162 
  rx_ring->stats.bytes += (unsigned long long)total_rx_bytes;
  
#line 1163 
  u64_stats_init(& rx_ring->syncp);
  
#line 1164 
  (rx_ring->q_vector)->rx.total_packets += total_rx_packets;
  
#line 1165 
  (rx_ring->q_vector)->rx.total_bytes += total_rx_bytes;
  
#line 1167 
  __retres = (int)total_rx_packets;
  
#line 1167 
  return __retres;
}


#line 1177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
static int i40e_clean_rx_irq_1buf(struct i40e_ring *rx_ring, int budget)
{
  int __retres;
  unsigned int tmp;
  union i40e_32byte_rx_desc *rx_desc;
  u32 rx_error;
  u32 rx_status;
  u16 rx_packet_len;
  u8 rx_ptype;
  u64 qword;
  u16 i;
  
#line 1179 
  unsigned int total_rx_bytes = 0U;
  
#line 1179 
  unsigned int total_rx_packets = 0U;
  
#line 1180 
  if ((int)rx_ring->next_to_clean <= (int)rx_ring->next_to_use) 
#line 1180 
                                                                tmp = (unsigned int)rx_ring->count; else 
                                                                    
#line 1180 
                                                                    tmp = 0U;
  
#line 1180 
  u16 cleaned_count = (unsigned short)(((tmp + (unsigned int)rx_ring->next_to_clean) - (unsigned int)rx_ring->next_to_use) + 65535U);
  
#line 1181 
  struct i40e_vsi *vsi = rx_ring->vsi;
  ldv_57104: 
#line 1188 
  ;
  {
    struct i40e_rx_buffer *rx_bi;
    struct sk_buff *skb;
    u16 vlan_tag;
    enum pkt_hash_types tmp_0;
    u32 tmp_1;
    
#line 1194 
    if ((unsigned int)cleaned_count > 15U) {
      
#line 1195 
      i40evf_alloc_rx_buffers_1buf(rx_ring,(unsigned short)((int)cleaned_count));
      
#line 1196 
      cleaned_count = (unsigned short)0U;
    }
    else ;
    
#line 1199 
    i = rx_ring->next_to_clean;
    
#line 1200 
    rx_desc = (union i40e_32byte_rx_desc *)rx_ring->desc + (int)i;
    
#line 1201 
    qword = rx_desc->wb.qword1.status_error_len;
    
#line 1202 
    rx_status = (unsigned int)qword & 524287U;
    
#line 1205 
    if ((rx_status & 1U) == 0U) 
#line 1206 
                                goto ldv_57102; else ;
    
#line 1207 
    ldv_inline_asm();
    
#line 1214 
    rx_bi = rx_ring->__anonCompField_i40e_ring_116.rx_bi + (int)i;
    
#line 1215 
    skb = rx_bi->skb;
    
#line 1216 
    __builtin_prefetch((void const *)skb->data);
    
#line 1218 
    rx_packet_len = (unsigned short)((unsigned int)((unsigned short)(qword >> 38)) & 16383U);
    
#line 1221 
    rx_error = (unsigned int)(qword >> 19) & 255U;
    
#line 1223 
    rx_error &= 4294967291U;
    
#line 1225 
    rx_ptype = (unsigned char)(qword >> 30);
    
#line 1227 
    rx_bi->skb = (struct sk_buff *)0;
    
#line 1228 
    cleaned_count = (u16)((int)cleaned_count + 1);
    
#line 1233 
    skb_put(skb,(unsigned int)rx_packet_len);
    
#line 1234 
    dma_unmap_single_attrs(rx_ring->dev,rx_bi->dma,(unsigned long)rx_ring->rx_buf_len,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0);
    
#line 1236 
    rx_bi->dma = 0ULL;
    
#line 1238 
    i = (u16)((int)i + 1);
    
#line 1238 
    if ((int)rx_ring->count == (int)i) 
#line 1238 
                                       i = (unsigned short)0U; else ;
    
#line 1238 
    rx_ring->next_to_clean = i;
    
#line 1240 
    if ((long)((rx_status & 2U) == 0U) != 0L) {
      
#line 1242 
      rx_ring->__anonCompField_i40e_ring_117.rx_stats.non_eop_descs += 1ULL;
      
#line 1243 
      goto ldv_57103;
    }
    else ;
    
#line 1247 
    if ((long)((rx_error & 1U) != 0U) != 0L) {
      
#line 1248 
      dev_kfree_skb_any(skb);
      
#line 1252 
      goto ldv_57103;
    }
    else ;
    
#line 1255 
    tmp_0 = i40e_ptype_to_hash((unsigned char)((int)rx_ptype));
    
#line 1255 
    tmp_1 = i40e_rx_hash(rx_ring,rx_desc);
    
#line 1255 
    ;
    
#line 1255 
    skb_set_hash(skb,tmp_1,tmp_0);
    
#line 1258 
    total_rx_bytes = skb->len + total_rx_bytes;
    
#line 1259 
    total_rx_packets += 1U;
    
#line 1261 
    skb->protocol = eth_type_trans(skb,rx_ring->netdev);
    
#line 1263 
    i40e_rx_checksum(vsi,skb,rx_status,rx_error,(unsigned short)((int)rx_ptype));
    
#line 1265 
    if ((rx_status & 4U) != 0U) 
#line 1265 
                                vlan_tag = rx_desc->wb.qword0.lo_dword.l2tag1; else 
                                                                    
#line 1265 
                                                                    vlan_tag = (unsigned short)0U;
    
#line 1268 
    i40e_receive_skb(rx_ring,skb,(unsigned short)((int)vlan_tag));
    
#line 1270 
    rx_desc->wb.qword1.status_error_len = 0ULL;
  }
  ldv_57103: 
#line 1272 
  ;
  
#line 1271 
  if ((long)(total_rx_packets < (unsigned int)budget) != 0L) 
#line 1273 
                                                             goto ldv_57104; else 
                                                                    
#line 1276 
                                                                    goto ldv_57102;
  ldv_57102: 
#line 1277 
  ;
  
#line 1273 
  u64_stats_init(& rx_ring->syncp);
  
#line 1274 
  rx_ring->stats.packets += (unsigned long long)total_rx_packets;
  
#line 1275 
  rx_ring->stats.bytes += (unsigned long long)total_rx_bytes;
  
#line 1276 
  u64_stats_init(& rx_ring->syncp);
  
#line 1277 
  (rx_ring->q_vector)->rx.total_packets += total_rx_packets;
  
#line 1278 
  (rx_ring->q_vector)->rx.total_bytes += total_rx_bytes;
  
#line 1280 
  __retres = (int)total_rx_packets;
  
#line 1280 
  return __retres;
}


#line 1292  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
int i40evf_napi_poll(struct napi_struct *napi, int budget)
{
  int __retres;
  struct i40e_q_vector *tmp;
  struct i40e_ring *ring;
  int budget_per_ring;
  int cleaned;
  int tmp_0;
  bool tmp_1;
  int tmp_3;
  int tmp_4;
  int tmp_5;
  {
    
#line 1295 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 1295 
    tmp = (struct i40e_q_vector *)__mptr + 18446744073709551600U;
  }
  
#line 1294 
  struct i40e_q_vector *q_vector = tmp;
  
#line 1296 
  struct i40e_vsi *vsi = q_vector->vsi;
  
#line 1298 
  bool clean_complete = (_Bool)1;
  
#line 1299 
  bool arm_wb = (_Bool)0;
  
#line 1303 
  tmp_0 = constant_test_bit(6L,(unsigned long const volatile *)(& vsi->state));
  
#line 1303 
  if (tmp_0 != 0) {
    
#line 1304 
    napi_complete(napi);
    
#line 1305 
    __retres = 0;
    
#line 1305 
    goto return_label;
  }
  else ;
  
#line 1311 
  ring = q_vector->tx.ring;
  
#line 1311 
  goto ldv_57119;
  ldv_57118: 
#line 1312 
  ;
  
#line 1312 
  tmp_1 = i40e_clean_tx_irq(ring,(int)vsi->work_limit);
  
#line 1312 
  clean_complete = (_Bool)(((int)clean_complete & (int)tmp_1) != 0);
  
#line 1313 
  arm_wb = (_Bool)(((int)ring->arm_wb | (int)arm_wb) != 0);
  
#line 1311 
  ring = ring->next;
  ldv_57119: 
#line 1312 
  ;
  
#line 1311 
  if (ring != (struct i40e_ring *)0) 
#line 1313 
                                     goto ldv_57118; else 
#line 1316 
                                                          goto ldv_57120;
  ldv_57120: 
#line 1317 
  ;
  {
    int tmp_2;
    
#line 1319 
    int _max1 = budget / (int)q_vector->num_ringpairs;
    
#line 1319 
    int _max2 = 1;
    
#line 1319 
    if (_max1 > _max2) 
#line 1319 
                       tmp_2 = _max1; else 
#line 1319 
                                           tmp_2 = _max2;
    
#line 1319 
    tmp_3 = tmp_2;
  }
  
#line 1319 
  budget_per_ring = tmp_3;
  
#line 1321 
  ring = q_vector->rx.ring;
  
#line 1321 
  goto ldv_57125;
  ldv_57124: 
#line 1322 
  ;
  
#line 1322 
  tmp_4 = constant_test_bit(4L,(unsigned long const volatile *)(& ring->state));
  
#line 1322 
  if (tmp_4 != 0) 
#line 1323 
                  cleaned = i40e_clean_rx_irq_ps(ring,budget_per_ring); else 
                                                                    
#line 1325 
                                                                    cleaned = i40e_clean_rx_irq_1buf(ring,budget_per_ring);
  
#line 1327 
  clean_complete = (_Bool)(((int)clean_complete & (budget_per_ring != cleaned)) != 0);
  
#line 1321 
  ring = ring->next;
  ldv_57125: 
#line 1322 
  ;
  
#line 1321 
  if (ring != (struct i40e_ring *)0) 
#line 1323 
                                     goto ldv_57124; else 
#line 1326 
                                                          goto ldv_57126;
  ldv_57126: 
#line 1327 
  ;
  
#line 1331 
  if (! clean_complete) {
    
#line 1332 
    if ((int)arm_wb != 0) 
#line 1333 
                          i40e_force_wb(vsi,q_vector); else ;
    
#line 1334 
    __retres = budget;
    
#line 1334 
    goto return_label;
  }
  else ;
  
#line 1338 
  napi_complete(napi);
  
#line 1339 
  if ((int)vsi->rx_itr_setting < 0 || (int)vsi->tx_itr_setting < 0) 
#line 1341 
                                                                    i40e_update_dynamic_itr(q_vector); else ;
  
#line 1343 
  tmp_5 = constant_test_bit(6L,(unsigned long const volatile *)(& vsi->state));
  
#line 1343 
  if (tmp_5 == 0) 
#line 1344 
                  i40evf_irq_enable_queues(vsi->back,(unsigned int)(1 << q_vector->v_idx)); else ;
  
#line 1346 
  __retres = 0;
  return_label: 
#line 1346 
                return __retres;
}


#line 1361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
__inline static int i40evf_tx_prepare_vlan_flags(struct sk_buff *skb, struct i40e_ring *tx_ring, u32 *flags)
{
  int __retres;
  
#line 1365 
  __be16 protocol = skb->protocol;
  
#line 1366 
  u32 tx_flags = 0U;
  
#line 1368 
  if ((unsigned int)protocol == 129U && ((tx_ring->netdev)->features & 128ULL) == 0ULL) {
    
#line 1377 
    skb->protocol = vlan_get_protocol(skb);
    
#line 1378 
    goto out;
  }
  else ;
  
#line 1382 
  if (((int)skb->vlan_tci & 4096) != 0) {
    
#line 1383 
    tx_flags = ((unsigned int)((int)skb->vlan_tci << 16) & 4026466304U) | tx_flags;
    
#line 1384 
    tx_flags |= 2U;
  }
  else 
    
#line 1386 
    if ((unsigned int)protocol == 129U) {
      struct vlan_hdr *vhdr;
      struct vlan_hdr _vhdr;
      int tmp_1;
      
#line 1388 
      vhdr = (struct vlan_hdr *)skb_header_pointer((struct sk_buff const *)skb,14,4,(void *)(& _vhdr));
      
#line 1389 
      if (vhdr == (struct vlan_hdr *)0) {
        
#line 1390 
        __retres = -22;
        
#line 1390 
        goto return_label;
      }
      else ;
      
#line 1392 
      protocol = vhdr->h_vlan_encapsulated_proto;
      
#line 1393 
      if (0 != 0) 
#line 1393 
                  tmp_1 = (int)((unsigned short)(((int)vhdr->h_vlan_TCI << 8) | ((int)vhdr->h_vlan_TCI >> 8))) << 16;
      else {
        __u16 tmp_0;
        
#line 1393 
        tmp_0 = __fswab16((unsigned short)((int)vhdr->h_vlan_TCI));
        
#line 1393 
        tmp_1 = (int)tmp_0 << 16;
      }
      
#line 1393 
      tx_flags = (unsigned int)tmp_1 | tx_flags;
      
#line 1394 
      tx_flags |= 4U;
    }
    else ;
  out: 
#line 1397 
  ;
  
#line 1398 
  *flags = tx_flags;
  
#line 1399 
  __retres = 0;
  return_label: 
#line 1399 
                return __retres;
}


#line 1411  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
static int i40e_tso(struct i40e_ring *tx_ring, struct sk_buff *skb, u8 *hdr_len, u64 *cd_type_cmd_tso_mss, u32 *cd_tunneling)
{
  int __retres;
  u32 cd_cmd;
  u32 cd_tso_len;
  u32 cd_mss;
  struct ipv6hdr *ipv6h;
  struct tcphdr *tcph;
  struct iphdr *iph;
  u32 l4len;
  int err;
  int tmp_0;
  bool tmp;
  int tmp_15;
  unsigned char *tmp_16;
  
#line 1422 
  tmp = skb_is_gso((struct sk_buff const *)skb);
  
#line 1422 
  if (tmp) 
#line 1422 
           tmp_0 = 0; else 
#line 1422 
                           tmp_0 = 1;
  
#line 1422 
  if (tmp_0) {
    
#line 1423 
    __retres = 0;
    
#line 1423 
    goto return_label;
  }
  else ;
  
#line 1425 
  err = skb_cow_head(skb,0U);
  
#line 1426 
  if (err < 0) {
    
#line 1427 
    __retres = err;
    
#line 1427 
    goto return_label;
  }
  else ;
  
#line 1429 
  if ((unsigned int)*((unsigned char *)skb + 146UL) != 0U) 
#line 1429 
                                                           iph = inner_ip_hdr((struct sk_buff const *)skb); else 
                                                                    
#line 1429 
                                                                    iph = ip_hdr((struct sk_buff const *)skb);
  
#line 1430 
  if ((unsigned int)*((unsigned char *)skb + 146UL) != 0U) 
#line 1430 
                                                           ipv6h = inner_ipv6_hdr((struct sk_buff const *)skb); else 
                                                                    
#line 1430 
                                                                    ipv6h = ipv6_hdr((struct sk_buff const *)skb);
  
#line 1432 
  if ((unsigned int)*((unsigned char *)iph + 0UL) == 64U) {
    __sum16 tmp_7;
    
#line 1433 
    if ((unsigned int)*((unsigned char *)skb + 146UL) != 0U) 
#line 1433 
                                                             tcph = inner_tcp_hdr((struct sk_buff const *)skb); else 
                                                                    
#line 1433 
                                                                    tcph = tcp_hdr((struct sk_buff const *)skb);
    
#line 1434 
    iph->tot_len = (unsigned short)0U;
    
#line 1435 
    iph->check = (unsigned short)0U;
    
#line 1436 
    tmp_7 = csum_tcpudp_magic(iph->saddr,iph->daddr,(unsigned short)0,(unsigned short)6,0U);
    
#line 1436 
    tcph->check = (unsigned short)(~ ((int)tmp_7));
  }
  else 
    
#line 1438 
    if ((unsigned int)*((unsigned char *)ipv6h + 0UL) == 96U) {
      __sum16 tmp_10;
      
#line 1439 
      if ((unsigned int)*((unsigned char *)skb + 146UL) != 0U) 
#line 1439 
                                                               tcph = inner_tcp_hdr((struct sk_buff const *)skb); else 
                                                                    
#line 1439 
                                                                    tcph = tcp_hdr((struct sk_buff const *)skb);
      
#line 1440 
      ipv6h->payload_len = (unsigned short)0U;
      
#line 1441 
      tmp_10 = csum_ipv6_magic((struct in6_addr const *)(& ipv6h->saddr),(struct in6_addr const *)(& ipv6h->daddr),0U,(unsigned short)6,0U);
      
#line 1441 
      tcph->check = (unsigned short)(~ ((int)tmp_10));
    }
    else ;
  
#line 1445 
  if ((unsigned int)*((unsigned char *)skb + 146UL) != 0U) 
#line 1445 
                                                           l4len = inner_tcp_hdrlen((struct sk_buff const *)skb); else 
                                                                    
#line 1445 
                                                                    l4len = tcp_hdrlen((struct sk_buff const *)skb);
  
#line 1446 
  if ((unsigned int)*((unsigned char *)skb + 146UL) != 0U) {
    unsigned char *tmp_13;
    
#line 1447 
    tmp_13 = skb_inner_transport_header((struct sk_buff const *)skb);
    
#line 1446 
    tmp_15 = (int)((unsigned char)((long)tmp_13 - (long)skb->data));
  }
  else {
    int tmp_14;
    
#line 1447 
    tmp_14 = skb_transport_offset((struct sk_buff const *)skb);
    
#line 1446 
    tmp_15 = (int)((unsigned char)tmp_14);
  }
  
#line 1446 
  *hdr_len = (unsigned char)(tmp_15 + (int)((unsigned char)l4len));
  
#line 1451 
  cd_cmd = 1U;
  
#line 1452 
  cd_tso_len = skb->len - (unsigned int)*hdr_len;
  
#line 1453 
  tmp_16 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1453 
  cd_mss = (unsigned int)((struct skb_shared_info *)tmp_16)->gso_size;
  
#line 1454 
  *cd_type_cmd_tso_mss |= (((unsigned long long)cd_cmd << 4) | ((unsigned long long)cd_tso_len << 30)) | ((unsigned long long)cd_mss << 50);
  
#line 1458 
  __retres = 1;
  return_label: 
#line 1458 
                return __retres;
}


#line 1469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
static void i40e_tx_enable_csum(struct sk_buff *skb, u32 *tx_flags, u32 *td_cmd, u32 *td_offset, struct i40e_ring *tx_ring, u32 *cd_tunneling)
{
  struct ipv6hdr *this_ipv6_hdr;
  unsigned int this_tcp_hdrlen;
  struct iphdr *this_ip_hdr;
  u32 network_hdr_len;
  int tmp_5;
  
#line 1478 
  u8 l4_hdr = (unsigned char)0U;
  
#line 1479 
  u32 l4_tunnel = 0U;
  
#line 1481 
  if ((unsigned int)*((unsigned char *)skb + 146UL) != 0U) {
    struct iphdr *tmp;
    u32 tmp_2;
    int tmp_3;
    int tmp_4;
    
#line 1482 
    tmp = ip_hdr((struct sk_buff const *)skb);
    
#line 1482 
    switch ((int)tmp->protocol) {
      case 17: 
#line 1483 
      ;
      
#line 1484 
      l4_tunnel = 512U;
      
#line 1485 
      *tx_flags |= 1024U;
      
#line 1486 
      goto ldv_57167;
      default: 
#line 1487 
      ;
      
#line 1488 
      goto return_label;
    }
    ldv_57167: 
#line 1490 
    ;
    
#line 1490 
    network_hdr_len = skb_inner_network_header_len((struct sk_buff const *)skb);
    
#line 1491 
    this_ip_hdr = inner_ip_hdr((struct sk_buff const *)skb);
    
#line 1492 
    this_ipv6_hdr = inner_ipv6_hdr((struct sk_buff const *)skb);
    
#line 1493 
    this_tcp_hdrlen = inner_tcp_hdrlen((struct sk_buff const *)skb);
    
#line 1495 
    if ((*tx_flags & 16U) != 0U) 
      
#line 1496 
      if ((*tx_flags & 8U) != 0U) {
        struct iphdr *tmp_0;
        
#line 1497 
        *cd_tunneling |= 3U;
        
#line 1498 
        tmp_0 = ip_hdr((struct sk_buff const *)skb);
        
#line 1498 
        tmp_0->check = (unsigned short)0U;
      }
      else 
#line 1500 
           *cd_tunneling |= 2U;
    else 
      
#line 1503 
      if ((*tx_flags & 32U) != 0U) {
        
#line 1504 
        *cd_tunneling |= 1U;
        
#line 1505 
        if ((*tx_flags & 8U) != 0U) {
          struct iphdr *tmp_1;
          
#line 1506 
          tmp_1 = ip_hdr((struct sk_buff const *)skb);
          
#line 1506 
          tmp_1->check = (unsigned short)0U;
        }
        else ;
      }
      else ;
    
#line 1510 
    tmp_2 = skb_network_header_len((struct sk_buff const *)skb);
    
#line 1514 
    tmp_3 = skb_inner_network_offset((struct sk_buff const *)skb);
    
#line 1513 
    tmp_4 = skb_transport_offset((struct sk_buff const *)skb);
    
#line 1515 
    *cd_tunneling |= (((tmp_2 >> 2) << 2) | l4_tunnel) | (unsigned int)(((tmp_3 - tmp_4) >> 1) << 12);
    
#line 1516 
    if ((unsigned int)*((unsigned char *)this_ip_hdr + 0UL) == 96U) {
      
#line 1517 
      *tx_flags &= 4294967279U;
      
#line 1518 
      *tx_flags |= 32U;
    }
    else ;
  }
  else {
    
#line 1523 
    network_hdr_len = skb_network_header_len((struct sk_buff const *)skb);
    
#line 1524 
    this_ip_hdr = ip_hdr((struct sk_buff const *)skb);
    
#line 1525 
    this_ipv6_hdr = ipv6_hdr((struct sk_buff const *)skb);
    
#line 1526 
    this_tcp_hdrlen = tcp_hdrlen((struct sk_buff const *)skb);
  }
  
#line 1530 
  if ((*tx_flags & 16U) != 0U) {
    
#line 1531 
    l4_hdr = this_ip_hdr->protocol;
    
#line 1535 
    if ((*tx_flags & 8U) != 0U) {
      
#line 1536 
      *td_cmd |= 96U;
      
#line 1537 
      this_ip_hdr->check = (unsigned short)0U;
    }
    else 
#line 1539 
         *td_cmd |= 64U;
    
#line 1542 
    *td_offset = (network_hdr_len >> 2) << 7;
  }
  else 
    
#line 1544 
    if ((*tx_flags & 32U) != 0U) {
      
#line 1545 
      l4_hdr = this_ipv6_hdr->nexthdr;
      
#line 1546 
      *td_cmd |= 32U;
      
#line 1548 
      *td_offset = (network_hdr_len >> 2) << 7;
    }
    else ;
  
#line 1552 
  tmp_5 = skb_network_offset((struct sk_buff const *)skb);
  
#line 1553 
  *td_offset |= (unsigned int)(tmp_5 >> 1);
  
#line 1556 
  switch ((int)l4_hdr) {
    case 6: 
#line 1557 
    ;
    
#line 1559 
    *td_cmd |= 256U;
    
#line 1560 
    *td_offset |= (this_tcp_hdrlen >> 2) << 14;
    
#line 1562 
    goto ldv_57170;
    case 132: 
#line 1563 
    ;
    
#line 1565 
    *td_cmd |= 512U;
    
#line 1566 
    *td_offset |= 49152U;
    
#line 1568 
    goto ldv_57170;
    case 17: 
#line 1569 
    ;
    
#line 1571 
    *td_cmd |= 768U;
    
#line 1572 
    *td_offset |= 32768U;
    
#line 1574 
    goto ldv_57170;
    default: 
#line 1575 
    ;
    
#line 1576 
    goto ldv_57170;
  }
  ldv_57170: 
#line 1578 
  ;
  return_label: 
#line 1579 
                return;
}


#line 1587  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
static void i40e_create_tx_ctx(struct i40e_ring *tx_ring, u64 const cd_type_cmd_tso_mss, u32 const cd_tunneling, u32 const cd_l2tag2)
{
  struct i40e_tx_context_desc *context_desc;
  
#line 1592 
  int i = (int)tx_ring->next_to_use;
  
#line 1594 
  if ((cd_type_cmd_tso_mss == 1ULL && cd_tunneling == 0U) && cd_l2tag2 == 0U) 
    
#line 1596 
    goto return_label; else ;
  
#line 1599 
  context_desc = (struct i40e_tx_context_desc *)tx_ring->desc + i;
  
#line 1601 
  i += 1;
  
#line 1602 
  if ((int)tx_ring->count > i) 
#line 1602 
                               tx_ring->next_to_use = (unsigned short)i; else 
                                                                    
#line 1602 
                                                                    tx_ring->next_to_use = (unsigned short)0U;
  
#line 1605 
  context_desc->tunneling_params = cd_tunneling;
  
#line 1606 
  context_desc->l2tag2 = (unsigned short)cd_l2tag2;
  
#line 1607 
  context_desc->rsvd = (unsigned short)0U;
  
#line 1608 
  context_desc->type_cmd_tso_mss = cd_type_cmd_tso_mss;
  return_label: 
#line 1609 
                return;
}


#line 1620  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
static bool i40e_chk_linearize(struct sk_buff *skb, u32 tx_flags)
{
  struct skb_frag_struct *frag;
  u16 num_frags;
  u16 gso_segs;
  unsigned char *tmp;
  unsigned char *tmp_0;
  
#line 1623 
  bool linearize = (_Bool)0;
  
#line 1624 
  unsigned int size = 0U;
  
#line 1628 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1628 
  num_frags = (unsigned short)((struct skb_shared_info *)tmp)->nr_frags;
  
#line 1629 
  tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1629 
  gso_segs = ((struct skb_shared_info *)tmp_0)->gso_segs;
  
#line 1631 
  if ((tx_flags & 136U) != 0U) {
    unsigned char *tmp_1;
    unsigned int tmp_2;
    unsigned char *tmp_4;
    
#line 1632 
    u16 j = (unsigned short)0U;
    
#line 1634 
    if ((unsigned int)num_frags <= 7U) 
#line 1635 
                                       goto linearize_chk_done; else ;
    
#line 1637 
    if (((((int)num_frags + (int)gso_segs) + (int)gso_segs) + -1) / (int)gso_segs > 8) {
      
#line 1639 
      linearize = (_Bool)1;
      
#line 1640 
      goto linearize_chk_done;
    }
    else ;
    
#line 1642 
    tmp_1 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 1642 
    frag = & ((struct skb_shared_info *)tmp_1)->frags[0];
    ldv_57194: 
#line 1643 
    ;
    
#line 1645 
    tmp_2 = skb_frag_size((skb_frag_t const *)frag);
    
#line 1645 
    size = tmp_2 + size;
    
#line 1646 
    frag += 1;
    
#line 1646 
    j = (u16)((int)j + 1);
    
#line 1647 
    tmp_4 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 1647 
    ;
    
#line 1647 
    if ((unsigned int)((struct skb_shared_info *)tmp_4)->gso_size <= size) {
      
#line 1647 
      if ((unsigned int)j <= 7U) {
        unsigned char *tmp_3;
        
#line 1649 
        tmp_3 = skb_end_pointer((struct sk_buff const *)skb);
        
#line 1649 
        size %= (unsigned int)((struct skb_shared_info *)tmp_3)->gso_size;
        
#line 1650 
        j = (unsigned short)(size != 0U);
      }
      else ;
    }
    else ;
    
#line 1652 
    if ((unsigned int)j == 8U) {
      
#line 1653 
      linearize = (_Bool)1;
      
#line 1654 
      goto ldv_57193;
    }
    else ;
    
#line 1656 
    num_frags = (u16)((int)num_frags - 1);
    
#line 1657 
    if ((unsigned int)num_frags != 0U) 
#line 1659 
                                       goto ldv_57194; else 
#line 1662 
                                                            goto ldv_57193;
    ldv_57193: 
#line 1663 
    ;
  }
  else 
    
#line 1659 
    if ((unsigned int)num_frags > 7U) 
#line 1660 
                                      linearize = (_Bool)1; else ;
  linearize_chk_done: 
#line 1663 
  ;
  
#line 1664 
  return linearize;
}


#line 1674  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
__inline static int __i40evf_maybe_stop_tx(struct i40e_ring *tx_ring, int size)
{
  int __retres;
  int tmp;
  
#line 1676 
  netif_start_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
  
#line 1677 
  ldv_inline_asm();
  
#line 1681 
  if ((int)tx_ring->next_to_clean <= (int)tx_ring->next_to_use) 
#line 1681 
                                                                tmp = (int)tx_ring->count; else 
                                                                    
#line 1681 
                                                                    tmp = 0;
  
#line 1681 
  ;
  
#line 1681 
  if ((long)(((tmp + (int)tx_ring->next_to_clean) - (int)tx_ring->next_to_use) + -1 < size) != 0L) {
    
#line 1682 
    __retres = -16;
    
#line 1682 
    goto return_label;
  }
  else ;
  
#line 1685 
  netif_start_subqueue(tx_ring->netdev,(unsigned short)((int)tx_ring->queue_index));
  
#line 1686 
  tx_ring->__anonCompField_i40e_ring_117.tx_stats.restart_queue += 1ULL;
  
#line 1687 
  __retres = 0;
  return_label: 
#line 1687 
                return __retres;
}


#line 1697  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
__inline static int i40evf_maybe_stop_tx(struct i40e_ring *tx_ring, int size)
{
  int __retres;
  int tmp;
  int tmp_0;
  
#line 1699 
  if ((int)tx_ring->next_to_clean <= (int)tx_ring->next_to_use) 
#line 1699 
                                                                tmp = (int)tx_ring->count; else 
                                                                    
#line 1699 
                                                                    tmp = 0;
  
#line 1699 
  ;
  
#line 1699 
  if ((long)(((tmp + (int)tx_ring->next_to_clean) - (int)tx_ring->next_to_use) + -1 >= size) != 0L) {
    
#line 1700 
    __retres = 0;
    
#line 1700 
    goto return_label;
  }
  else ;
  
#line 1701 
  tmp_0 = __i40evf_maybe_stop_tx(tx_ring,size);
  
#line 1701 
  __retres = tmp_0;
  return_label: 
#line 1701 
                return __retres;
}


#line 1714  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
__inline static void i40evf_tx_map(struct i40e_ring *tx_ring, struct sk_buff *skb, struct i40e_tx_buffer *first, u32 tx_flags, u8 const hdr_len, u32 td_cmd, u32 td_offset)
{
  struct skb_frag_struct *frag;
  struct i40e_tx_buffer *tx_bi;
  struct i40e_tx_desc *tx_desc;
  dma_addr_t dma;
  u16 gso_segs;
  unsigned char *tmp_1;
  int tmp_2;
  struct netdev_queue *tmp_5;
  
#line 1718 
  unsigned int data_len = skb->data_len;
  
#line 1719 
  unsigned int size = skb_headlen((struct sk_buff const *)skb);
  
#line 1723 
  u16 i = tx_ring->next_to_use;
  
#line 1724 
  u32 td_tag = 0U;
  
#line 1728 
  if ((tx_flags & 2U) != 0U) {
    
#line 1729 
    td_cmd |= 8U;
    
#line 1730 
    td_tag = tx_flags >> 16;
  }
  else ;
  
#line 1734 
  if ((tx_flags & 136U) != 0U) {
    unsigned char *tmp_0;
    
#line 1735 
    tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 1735 
    gso_segs = ((struct skb_shared_info *)tmp_0)->gso_segs;
  }
  else 
#line 1737 
       gso_segs = (unsigned short)1U;
  
#line 1740 
  first->bytecount = (skb->len - (unsigned int)hdr_len) + (unsigned int)((int)gso_segs * (int)hdr_len);
  
#line 1741 
  first->gso_segs = gso_segs;
  
#line 1742 
  first->__anonCompField_i40e_tx_buffer_115.skb = skb;
  
#line 1743 
  first->tx_flags = tx_flags;
  
#line 1745 
  dma = dma_map_single_attrs(tx_ring->dev,(void *)skb->data,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
  
#line 1747 
  tx_desc = (struct i40e_tx_desc *)tx_ring->desc + (int)i;
  
#line 1748 
  tx_bi = first;
  
#line 1750 
  tmp_1 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1750 
  frag = & ((struct skb_shared_info *)tmp_1)->frags[0];
  ldv_57226: 
#line 1751 
  ;
  
#line 1751 
  tmp_2 = dma_mapping_error(tx_ring->dev,dma);
  
#line 1751 
  if (tmp_2 != 0) 
#line 1752 
                  goto dma_error; else ;
  
#line 1755 
  tx_bi->len = size;
  
#line 1756 
  tx_bi->dma = dma;
  
#line 1758 
  tx_desc->buffer_addr = dma;
  
#line 1760 
  goto ldv_57223;
  ldv_57222: 
#line 1761 
  ;
  
#line 1761 
  tx_desc->cmd_type_offset_bsz = build_ctob(td_cmd,td_offset,8192U,td_tag);
  
#line 1765 
  tx_desc += 1;
  
#line 1766 
  i = (u16)((int)i + 1);
  
#line 1767 
  if ((int)tx_ring->count == (int)i) {
    
#line 1768 
    tx_desc = (struct i40e_tx_desc *)tx_ring->desc;
    
#line 1769 
    i = (unsigned short)0U;
  }
  else ;
  
#line 1772 
  dma += 8192ULL;
  
#line 1773 
  size += 4294959104U;
  
#line 1775 
  tx_desc->buffer_addr = dma;
  ldv_57223: 
#line 1776 
  ;
  
#line 1760 
  if ((long)(size > 8192U) != 0L) 
#line 1762 
                                  goto ldv_57222; else 
#line 1765 
                                                       goto ldv_57224;
  ldv_57224: 
#line 1766 
  ;
  
#line 1778 
  if ((long)(data_len == 0U) != 0L) 
#line 1779 
                                    goto ldv_57225; else ;
  
#line 1781 
  tx_desc->cmd_type_offset_bsz = build_ctob(td_cmd,td_offset,size,td_tag);
  
#line 1784 
  tx_desc += 1;
  
#line 1785 
  i = (u16)((int)i + 1);
  
#line 1786 
  if ((int)tx_ring->count == (int)i) {
    
#line 1787 
    tx_desc = (struct i40e_tx_desc *)tx_ring->desc;
    
#line 1788 
    i = (unsigned short)0U;
  }
  else ;
  
#line 1791 
  size = skb_frag_size((skb_frag_t const *)frag);
  
#line 1792 
  data_len -= size;
  
#line 1794 
  dma = skb_frag_dma_map(tx_ring->dev,(skb_frag_t const *)frag,0UL,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE);
  
#line 1797 
  tx_bi = tx_ring->__anonCompField_i40e_ring_116.tx_bi + (int)i;
  
#line 1750 
  frag += 1;
  
#line 1751 
  goto ldv_57226;
  ldv_57225: 
#line 1752 
  ;
  
#line 1804 
  if ((((int)i & 3) != 3 && tx_ring->__anonCompField_i40e_ring_116.tx_bi + (int)i >= first) && tx_ring->__anonCompField_i40e_ring_116.tx_bi + ((int)i & -4) <= first) {
    __le64 tmp_3;
    
#line 1808 
    tmp_3 = build_ctob(td_cmd,td_offset,size,td_tag);
    
#line 1807 
    tx_desc->cmd_type_offset_bsz = tmp_3 | 16ULL;
  }
  else {
    __le64 tmp_4;
    
#line 1813 
    tmp_4 = build_ctob(td_cmd,td_offset,size,td_tag);
    
#line 1812 
    tx_desc->cmd_type_offset_bsz = tmp_4 | 48ULL;
  }
  
#line 1818 
  ;
  
#line 1818 
  tmp_5 = netdev_get_tx_queue((struct net_device const *)tx_ring->netdev,(unsigned int)tx_ring->queue_index);
  
#line 1818 
  netdev_tx_sent_queue(tmp_5,first->bytecount);
  
#line 1821 
  ldv_inline_asm();
  
#line 1830 
  first->next_to_watch = tx_desc;
  
#line 1832 
  i = (u16)((int)i + 1);
  
#line 1833 
  if ((int)tx_ring->count == (int)i) 
#line 1834 
                                     i = (unsigned short)0U; else ;
  
#line 1836 
  tx_ring->next_to_use = i;
  
#line 1838 
  i40evf_maybe_stop_tx(tx_ring,21);
  
#line 1840 
  if ((unsigned int)*((unsigned char *)skb + 142UL) == 0U) 
#line 1843 
                                                           writel((unsigned int)i,(void volatile *)tx_ring->tail);
  else {
    bool tmp_7;
    struct netdev_queue *tmp_6;
    
#line 1841 
    tmp_6 = netdev_get_tx_queue((struct net_device const *)tx_ring->netdev,(unsigned int)tx_ring->queue_index);
    
#line 1840 
    tmp_7 = netif_xmit_stopped((struct netdev_queue const *)tmp_6);
    
#line 1840 
    if ((int)tmp_7 != 0) 
#line 1843 
                         writel((unsigned int)i,(void volatile *)tx_ring->tail); else ;
  }
  
#line 1845 
  goto return_label;
  dma_error: 
#line 1847 
  ;
  
#line 1848 
  _dev_info((struct device const *)tx_ring->dev,"TX DMA map failed\n");
  ldv_57228: 
#line 1849 
  ;
  
#line 1852 
  tx_bi = tx_ring->__anonCompField_i40e_ring_116.tx_bi + (int)i;
  
#line 1853 
  i40e_unmap_and_free_tx_resource(tx_ring,tx_bi);
  
#line 1854 
  if (tx_bi == first) 
#line 1855 
                      goto ldv_57227; else ;
  
#line 1856 
  if ((unsigned int)i == 0U) 
#line 1857 
                             i = tx_ring->count; else ;
  
#line 1858 
  i = (u16)((int)i - 1);
  
#line 1852 
  goto ldv_57228;
  ldv_57227: 
#line 1853 
  ;
  
#line 1861 
  tx_ring->next_to_use = i;
  return_label: 
#line 1862 
                return;
}


#line 1873  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
__inline static int i40evf_xmit_descriptor_count(struct sk_buff *skb, struct i40e_ring *tx_ring)
{
  int __retres;
  unsigned int f;
  unsigned char *tmp;
  unsigned char *tmp_0;
  unsigned int tmp_1;
  int tmp_2;
  
#line 1877 
  int count = 0;
  
#line 1885 
  f = 0U;
  
#line 1885 
  goto ldv_57236;
  ldv_57235: 
#line 1886 
  ;
  
#line 1886 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1886 
  count = (int)((((struct skb_shared_info *)tmp)->frags[f].size + 8191U) / 8192U + (unsigned int)count);
  
#line 1885 
  f += 1U;
  ldv_57236: 
#line 1886 
  ;
  
#line 1885 
  tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1885 
  ;
  
#line 1885 
  if ((unsigned int)((struct skb_shared_info *)tmp_0)->nr_frags > f) 
    
#line 1887 
    goto ldv_57235; else 
#line 1890 
                         goto ldv_57237;
  ldv_57237: 
#line 1891 
  ;
  
#line 1888 
  tmp_1 = skb_headlen((struct sk_buff const *)skb);
  
#line 1888 
  count = (int)((tmp_1 + 8191U) / 8192U + (unsigned int)count);
  
#line 1889 
  tmp_2 = i40evf_maybe_stop_tx(tx_ring,count + 5);
  
#line 1889 
  if (tmp_2 != 0) {
    
#line 1890 
    tx_ring->__anonCompField_i40e_ring_117.tx_stats.tx_busy += 1ULL;
    
#line 1891 
    __retres = 0;
    
#line 1891 
    goto return_label;
  }
  else ;
  
#line 1893 
  __retres = count;
  return_label: 
#line 1893 
                return __retres;
}


#line 1903  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
static netdev_tx_t i40e_xmit_frame_ring(struct sk_buff *skb, struct i40e_ring *tx_ring)
{
  netdev_tx_t __retres;
  struct i40e_tx_buffer *first;
  __be16 protocol;
  int tso;
  int tmp;
  int tmp_0;
  bool tmp_2;
  
#line 1906 
  u64 cd_type_cmd_tso_mss = 1ULL;
  
#line 1907 
  u32 cd_tunneling = 0U;
  
#line 1907 
  u32 cd_l2tag2 = 0U;
  
#line 1909 
  u32 td_offset = 0U;
  
#line 1910 
  u32 tx_flags = 0U;
  
#line 1912 
  u32 td_cmd = 0U;
  
#line 1913 
  u8 hdr_len = (unsigned char)0U;
  
#line 1915 
  tmp = i40evf_xmit_descriptor_count(skb,tx_ring);
  
#line 1915 
  if (tmp == 0) {
    
#line 1916 
    __retres = NETDEV_TX_BUSY;
    
#line 1916 
    goto return_label;
  }
  else ;
  
#line 1919 
  tmp_0 = i40evf_tx_prepare_vlan_flags(skb,tx_ring,& tx_flags);
  
#line 1919 
  if (tmp_0 != 0) 
#line 1920 
                  goto out_drop; else ;
  
#line 1923 
  protocol = vlan_get_protocol(skb);
  
#line 1926 
  first = tx_ring->__anonCompField_i40e_ring_116.tx_bi + (int)tx_ring->next_to_use;
  
#line 1929 
  if ((unsigned int)protocol == 8U) 
#line 1930 
                                    tx_flags |= 16U;
  else 
    
#line 1931 
    if ((unsigned int)protocol == 56710U) 
#line 1932 
                                          tx_flags |= 32U; else ;
  
#line 1934 
  tso = i40e_tso(tx_ring,skb,& hdr_len,& cd_type_cmd_tso_mss,& cd_tunneling);
  
#line 1937 
  if (tso < 0) 
#line 1938 
               goto out_drop;
  else 
    
#line 1939 
    if (tso != 0) 
#line 1940 
                  tx_flags |= 8U; else ;
  
#line 1942 
  tmp_2 = i40e_chk_linearize(skb,tx_flags);
  
#line 1942 
  if ((int)tmp_2 != 0) {
    int tmp_1;
    
#line 1943 
    tmp_1 = skb_linearize(skb);
    
#line 1943 
    if (tmp_1 != 0) 
#line 1944 
                    goto out_drop; else ;
  }
  else ;
  
#line 1946 
  skb_tx_timestamp(skb);
  
#line 1949 
  td_cmd |= 4U;
  
#line 1952 
  if ((unsigned int)*((unsigned char *)skb + 145UL) == 6U) {
    
#line 1953 
    tx_flags |= 1U;
    
#line 1955 
    i40e_tx_enable_csum(skb,& tx_flags,& td_cmd,& td_offset,tx_ring,& cd_tunneling);
  }
  else ;
  
#line 1959 
  i40e_create_tx_ctx(tx_ring,cd_type_cmd_tso_mss,cd_tunneling,cd_l2tag2);
  
#line 1962 
  i40evf_tx_map(tx_ring,skb,first,tx_flags,(unsigned char)((int)hdr_len),td_cmd,td_offset);
  
#line 1965 
  __retres = NETDEV_TX_OK;
  
#line 1965 
  goto return_label;
  out_drop: 
#line 1967 
  ;
  
#line 1968 
  dev_kfree_skb_any(skb);
  
#line 1969 
  __retres = NETDEV_TX_OK;
  return_label: 
#line 1969 
                return __retres;
}


#line 1979  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_txrx.c"
netdev_tx_t i40evf_xmit_frame(struct sk_buff *skb, struct net_device *netdev)
{
  netdev_tx_t __retres;
  netdev_tx_t tmp_1;
  
#line 1981 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1982 
  struct i40e_ring *tx_ring = adapter->tx_rings[(int)skb->queue_mapping];
  
#line 1987 
  if ((long)(skb->len <= 16U) != 0L) {
    int tmp_0;
    
#line 1988 
    tmp_0 = skb_pad(skb,(int)(17U - skb->len));
    
#line 1988 
    if (tmp_0 != 0) {
      
#line 1989 
      __retres = NETDEV_TX_OK;
      
#line 1989 
      goto return_label;
    }
    else ;
    
#line 1990 
    skb->len = 17U;
    
#line 1991 
    skb_set_tail_pointer(skb,17);
  }
  else ;
  
#line 1994 
  tmp_1 = i40e_xmit_frame_ring(skb,tx_ring);
  
#line 1994 
  __retres = tmp_1;
  return_label: 
#line 1994 
                return __retres;
}


#line 124  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40e_txrx.c.aux"
static void atomic_inc(atomic_t *v)
{
  
#line 127 
  ldv_atomic_inc(v);
  
#line 128 
  return;
}


#line 601  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40e_txrx.c.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 604 
  tmp = ldv_kzalloc(size,flags);
  
#line 604 
  return tmp;
}


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
void list_del(struct list_head *);


#line 560  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
static bool ldv_schedule_work_73_0(struct work_struct *work);


#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
void dev_err(struct device const *, char const * , ...);


#line 1085 
void dev_warn(struct device const *, char const * , ...);


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kzalloc_0(size_t size, gfp_t flags);


#line 2531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  unsigned int i;
  
#line 2535 
  i = 0U;
  
#line 2535 
  goto ldv_44741;
  ldv_44740: 
#line 2536 
  ;
  {
    
#line 2536 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 2537 
    netif_tx_start_queue(txq);
  }
  
#line 2535 
  i += 1U;
  ldv_44741: 
#line 2536 
  ;
  
#line 2535 
  if (dev->num_tx_queues > i) 
#line 2537 
                              goto ldv_44740; else 
#line 2540 
                                                   goto ldv_44742;
  ldv_44742: 
#line 2541 
  ;
  
#line 2542 
  return;
}


#line 2541 
void netif_tx_wake_queue(struct netdev_queue *);


#line 2555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_wake_all_queues(struct net_device *dev)
{
  unsigned int i;
  
#line 2559 
  i = 0U;
  
#line 2559 
  goto ldv_44754;
  ldv_44753: 
#line 2560 
  ;
  {
    
#line 2560 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 2561 
    netif_tx_wake_queue(txq);
  }
  
#line 2559 
  i += 1U;
  ldv_44754: 
#line 2560 
  ;
  
#line 2559 
  if (dev->num_tx_queues > i) 
#line 2561 
                              goto ldv_44753; else 
#line 2564 
                                                   goto ldv_44755;
  ldv_44755: 
#line 2565 
  ;
  
#line 2566 
  return;
}


#line 2582 
void netif_tx_stop_all_queues(struct net_device *);


#line 3047 
void netif_carrier_on(struct net_device *);


#line 3049 
void netif_carrier_off(struct net_device *);


#line 271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 const *src)
{
  
#line 274 
  *((u32 *)dst) = *((u32 const *)src);
  
#line 275 
  *((u16 *)(dst + 4U)) = *((u16 const *)(src + 4U));
  
#line 276 
  return;
}


#line 273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf.h"
void i40evf_free_all_tx_resources(struct i40evf_adapter *adapter);


#line 274 
void i40evf_free_all_rx_resources(struct i40evf_adapter *adapter);


#line 279 
int i40evf_send_api_ver(struct i40evf_adapter *adapter);


#line 280 
int i40evf_verify_api_ver(struct i40evf_adapter *adapter);


#line 281 
int i40evf_send_vf_config_msg(struct i40evf_adapter *adapter);


#line 282 
int i40evf_get_vf_config(struct i40evf_adapter *adapter);


#line 283 
void i40evf_irq_enable(struct i40evf_adapter *adapter, bool flush);


#line 284 
void i40evf_configure_queues(struct i40evf_adapter *adapter);


#line 286 
void i40evf_enable_queues(struct i40evf_adapter *adapter);


#line 287 
void i40evf_disable_queues(struct i40evf_adapter *adapter);


#line 288 
void i40evf_map_queues(struct i40evf_adapter *adapter);


#line 289 
void i40evf_add_ether_addrs(struct i40evf_adapter *adapter);


#line 290 
void i40evf_del_ether_addrs(struct i40evf_adapter *adapter);


#line 291 
void i40evf_add_vlans(struct i40evf_adapter *adapter);


#line 292 
void i40evf_del_vlans(struct i40evf_adapter *adapter);


#line 293 
void i40evf_set_promiscuous(struct i40evf_adapter *adapter, int flags);


#line 294 
void i40evf_request_stats(struct i40evf_adapter *adapter);


#line 295 
void i40evf_request_reset(struct i40evf_adapter *adapter);


#line 296 
void i40evf_virtchnl_completion(struct i40evf_adapter *adapter, enum i40e_virtchnl_ops v_opcode, i40e_status v_retval, u8 *msg, u16 msglen);


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_prototype.h"
void i40e_vf_parse_hw_config(struct i40e_hw *hw, struct i40e_virtchnl_vf_resource *msg);


#line 79 
i40e_status i40e_aq_send_msg_to_pf(struct i40e_hw *hw, enum i40e_virtchnl_ops v_opcode, i40e_status v_retval, u8 *msg, u16 msglen, struct i40e_asq_cmd_details *cmd_details);


#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
static int i40evf_send_pf_msg(struct i40evf_adapter *adapter, enum i40e_virtchnl_ops op, u8 *msg, u16 len)
{
  int __retres;
  i40e_status err;
  
#line 46 
  struct i40e_hw *hw = & adapter->hw;
  
#line 49 
  if ((adapter->flags & 256U) != 0U) {
    
#line 50 
    __retres = 0;
    
#line 50 
    goto return_label;
  }
  else ;
  
#line 52 
  err = i40e_aq_send_msg_to_pf(hw,op,(enum i40e_status_code)I40E_SUCCESS,msg,(unsigned short)((int)len),(struct i40e_asq_cmd_details *)0);
  
#line 53 
  if (err != I40E_SUCCESS) 
#line 54 
                           dev_err((struct device const *)(& (adapter->pdev)->dev),"Unable to send opcode %d to PF, error %d, aq status %d\n",(unsigned int)op,(int)err,(unsigned int)hw->aq.asq_last_status); else ;
  
#line 56 
  __retres = (int)err;
  return_label: 
#line 56 
                return __retres;
}


#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
int i40evf_send_api_ver(struct i40evf_adapter *adapter)
{
  struct i40e_virtchnl_version_info vvi;
  int tmp;
  
#line 71 
  vvi.major = 1U;
  
#line 72 
  vvi.minor = 0U;
  
#line 74 
  tmp = i40evf_send_pf_msg(adapter,(enum i40e_virtchnl_ops)I40E_VIRTCHNL_OP_VERSION,(u8 *)(& vvi),(unsigned short)8);
  
#line 74 
  return tmp;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
int i40evf_verify_api_ver(struct i40evf_adapter *adapter)
{
  int __retres;
  struct i40e_virtchnl_version_info *pf_vvi;
  struct i40e_arq_event_info event;
  enum i40e_virtchnl_ops op;
  i40e_status err;
  
#line 90 
  struct i40e_hw *hw = & adapter->hw;
  
#line 95 
  event.buf_len = (unsigned short)4096U;
  
#line 96 
  event.msg_buf = (u8 *)kzalloc_0((unsigned long)event.buf_len,208U);
  
#line 97 
  if (event.msg_buf == (u8 *)0U) {
    
#line 98 
    err = I40E_ERR_MASTER_REQUESTS_PENDING;
    
#line 99 
    goto out;
  }
  else ;
  ldv_56806: 
#line 101 
  ;
  
#line 103 
  err = i40evf_clean_arq_element(hw,& event,(u16 *)0U);
  
#line 107 
  if (err != I40E_SUCCESS) 
#line 108 
                           goto out_alloc; else ;
  
#line 109 
  op = (enum i40e_virtchnl_ops)event.desc.cookie_high;
  
#line 111 
  if (op == (unsigned int)I40E_VIRTCHNL_OP_VERSION) 
#line 112 
                                                    goto ldv_56805; else ;
  
#line 103 
  goto ldv_56806;
  ldv_56805: 
#line 104 
  ;
  
#line 116 
  err = (enum i40e_status_code)event.desc.cookie_low;
  
#line 117 
  if (err != I40E_SUCCESS) 
#line 118 
                           goto out_alloc; else ;
  
#line 120 
  if (op != (unsigned int)I40E_VIRTCHNL_OP_VERSION) {
    
#line 121 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Invalid reply type %d from PF\n",(unsigned int)op);
    
#line 123 
    err = I40E_ERR_PARAM;
    
#line 124 
    goto out_alloc;
  }
  else ;
  
#line 127 
  pf_vvi = (struct i40e_virtchnl_version_info *)event.msg_buf;
  
#line 128 
  if (pf_vvi->major != 1U || pf_vvi->minor != 0U) 
#line 130 
                                                  err = I40E_ERR_PARAM; else ;
  out_alloc: 
#line 132 
  ;
  
#line 133 
  kfree((void const *)event.msg_buf);
  out: 
#line 134 
  ;
  
#line 135 
  __retres = (int)err;
  
#line 135 
  return __retres;
}


#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
int i40evf_send_vf_config_msg(struct i40evf_adapter *adapter)
{
  int tmp;
  
#line 148 
  tmp = i40evf_send_pf_msg(adapter,(enum i40e_virtchnl_ops)I40E_VIRTCHNL_OP_GET_VF_RESOURCES,(u8 *)0U,(unsigned short)0);
  
#line 148 
  return tmp;
}


#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
int i40evf_get_vf_config(struct i40evf_adapter *adapter)
{
  int __retres;
  struct i40e_arq_event_info event;
  enum i40e_virtchnl_ops op;
  i40e_status err;
  u16 len;
  int tmp_1;
  
#line 164 
  struct i40e_hw *hw = & adapter->hw;
  
#line 170 
  len = (unsigned short)84U;
  
#line 172 
  event.buf_len = len;
  
#line 173 
  event.msg_buf = (u8 *)kzalloc_0((unsigned long)event.buf_len,208U);
  
#line 174 
  if (event.msg_buf == (u8 *)0U) {
    
#line 175 
    err = I40E_ERR_MASTER_REQUESTS_PENDING;
    
#line 176 
    goto out;
  }
  else ;
  ldv_56821: 
#line 178 
  ;
  
#line 183 
  err = i40evf_clean_arq_element(hw,& event,(u16 *)0U);
  
#line 184 
  if (err != I40E_SUCCESS) 
#line 185 
                           goto out_alloc; else ;
  
#line 186 
  op = (enum i40e_virtchnl_ops)event.desc.cookie_high;
  
#line 188 
  if (op == (unsigned int)I40E_VIRTCHNL_OP_GET_VF_RESOURCES) 
#line 189 
                                                             goto ldv_56820; else ;
  
#line 183 
  goto ldv_56821;
  ldv_56820: 
#line 184 
  ;
  
#line 192 
  err = (enum i40e_status_code)event.desc.cookie_low;
  {
    int tmp_0;
    
#line 193 
    u16 _min1 = event.msg_len;
    
#line 193 
    u16 _min2 = len;
    
#line 193 
    if ((int)_min1 < (int)_min2) 
#line 193 
                                 tmp_0 = (int)_min1; else 
#line 193 
                                                          tmp_0 = (int)_min2;
    
#line 193 
    tmp_1 = tmp_0;
  }
  
#line 193 
  ;
  
#line 193 
  ;
  
#line 193 
  memcpy((void *)adapter->vf_res,(void const *)event.msg_buf,(unsigned long)tmp_1);
  
#line 195 
  i40e_vf_parse_hw_config(hw,adapter->vf_res);
  out_alloc: 
#line 196 
  ;
  
#line 197 
  kfree((void const *)event.msg_buf);
  out: 
#line 198 
  ;
  
#line 199 
  __retres = (int)err;
  
#line 199 
  return __retres;
}


#line 208  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
void i40evf_configure_queues(struct i40evf_adapter *adapter)
{
  struct i40e_virtchnl_vsi_queue_config_info *vqci;
  struct i40e_virtchnl_queue_pair_info *vqpi;
  int i;
  int len;
  
#line 212 
  int pairs = adapter->num_active_queues;
  
#line 215 
  if (adapter->current_op != (unsigned int)I40E_VIRTCHNL_OP_UNKNOWN) {
    
#line 217 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: command %d pending\n","i40evf_configure_queues",(unsigned int)adapter->current_op);
    
#line 219 
    goto return_label;
  }
  else ;
  
#line 221 
  adapter->current_op = I40E_VIRTCHNL_OP_CONFIG_VSI_QUEUES;
  
#line 222 
  len = (int)((unsigned long)pairs * (unsigned long)64U + (unsigned long)72U);
  
#line 224 
  vqci = (struct i40e_virtchnl_vsi_queue_config_info *)kzalloc_0((unsigned long)len,32U);
  
#line 225 
  if (vqci == (struct i40e_virtchnl_vsi_queue_config_info *)0) 
#line 226 
                                                               goto return_label; else ;
  
#line 228 
  vqci->vsi_id = (adapter->vsi_res)->vsi_id;
  
#line 229 
  vqci->num_queue_pairs = (unsigned short)pairs;
  
#line 230 
  vqpi = (struct i40e_virtchnl_queue_pair_info *)(& vqci->qpair);
  
#line 234 
  i = 0;
  
#line 234 
  goto ldv_56835;
  ldv_56834: 
#line 235 
  ;
  
#line 235 
  vqpi->txq.vsi_id = vqci->vsi_id;
  
#line 236 
  vqpi->txq.queue_id = (unsigned short)i;
  
#line 237 
  vqpi->txq.ring_len = (adapter->tx_rings[i])->count;
  
#line 238 
  vqpi->txq.dma_ring_addr = (adapter->tx_rings[i])->dma;
  
#line 239 
  vqpi->txq.headwb_enabled = (unsigned short)1U;
  
#line 240 
  vqpi->txq.dma_headwb_addr = vqpi->txq.dma_ring_addr + (unsigned long long)((unsigned long)vqpi->txq.ring_len * 16UL);
  
#line 243 
  vqpi->rxq.vsi_id = vqci->vsi_id;
  
#line 244 
  vqpi->rxq.queue_id = (unsigned short)i;
  
#line 245 
  vqpi->rxq.ring_len = (unsigned int)(adapter->rx_rings[i])->count;
  
#line 246 
  vqpi->rxq.dma_ring_addr = (adapter->rx_rings[i])->dma;
  
#line 247 
  vqpi->rxq.max_pkt_size = (adapter->netdev)->mtu + 22U;
  
#line 249 
  vqpi->rxq.databuffer_size = (unsigned int)(adapter->rx_rings[i])->rx_buf_len;
  
#line 250 
  vqpi += 1;
  
#line 234 
  i += 1;
  ldv_56835: 
#line 235 
  ;
  
#line 234 
  if (i < pairs) 
#line 236 
                 goto ldv_56834; else 
#line 239 
                                      goto ldv_56836;
  ldv_56836: 
#line 240 
  ;
  
#line 253 
  adapter->aq_required &= 4294967231U;
  
#line 254 
  i40evf_send_pf_msg(adapter,(enum i40e_virtchnl_ops)I40E_VIRTCHNL_OP_CONFIG_VSI_QUEUES,(u8 *)vqci,(unsigned short)((int)((unsigned short)len)));
  
#line 256 
  kfree((void const *)vqci);
  return_label: 
#line 257 
                return;
}


#line 265  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
void i40evf_enable_queues(struct i40evf_adapter *adapter)
{
  struct i40e_virtchnl_queue_select vqs;
  
#line 269 
  if (adapter->current_op != (unsigned int)I40E_VIRTCHNL_OP_UNKNOWN) {
    
#line 271 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: command %d pending\n","i40evf_enable_queues",(unsigned int)adapter->current_op);
    
#line 273 
    goto return_label;
  }
  else ;
  
#line 275 
  adapter->current_op = I40E_VIRTCHNL_OP_ENABLE_QUEUES;
  
#line 276 
  vqs.vsi_id = (adapter->vsi_res)->vsi_id;
  
#line 277 
  vqs.tx_queues = (unsigned int)((1 << adapter->num_active_queues) + -1);
  
#line 278 
  vqs.rx_queues = vqs.tx_queues;
  
#line 279 
  adapter->aq_required &= 4294967294U;
  
#line 280 
  i40evf_send_pf_msg(adapter,(enum i40e_virtchnl_ops)I40E_VIRTCHNL_OP_ENABLE_QUEUES,(u8 *)(& vqs),(unsigned short)12);
  return_label: 
#line 282 
                return;
}


#line 290  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
void i40evf_disable_queues(struct i40evf_adapter *adapter)
{
  struct i40e_virtchnl_queue_select vqs;
  
#line 294 
  if (adapter->current_op != (unsigned int)I40E_VIRTCHNL_OP_UNKNOWN) {
    
#line 296 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: command %d pending\n","i40evf_disable_queues",(unsigned int)adapter->current_op);
    
#line 298 
    goto return_label;
  }
  else ;
  
#line 300 
  adapter->current_op = I40E_VIRTCHNL_OP_DISABLE_QUEUES;
  
#line 301 
  vqs.vsi_id = (adapter->vsi_res)->vsi_id;
  
#line 302 
  vqs.tx_queues = (unsigned int)((1 << adapter->num_active_queues) + -1);
  
#line 303 
  vqs.rx_queues = vqs.tx_queues;
  
#line 304 
  adapter->aq_required &= 4294967293U;
  
#line 305 
  i40evf_send_pf_msg(adapter,(enum i40e_virtchnl_ops)I40E_VIRTCHNL_OP_DISABLE_QUEUES,(u8 *)(& vqs),(unsigned short)12);
  return_label: 
#line 307 
                return;
}


#line 316  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
void i40evf_map_queues(struct i40evf_adapter *adapter)
{
  struct i40e_virtchnl_irq_map_info *vimi;
  int v_idx;
  int q_vectors;
  int len;
  struct i40e_q_vector *q_vector;
  
#line 322 
  if (adapter->current_op != (unsigned int)I40E_VIRTCHNL_OP_UNKNOWN) {
    
#line 324 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: command %d pending\n","i40evf_map_queues",(unsigned int)adapter->current_op);
    
#line 326 
    goto return_label;
  }
  else ;
  
#line 328 
  adapter->current_op = I40E_VIRTCHNL_OP_CONFIG_IRQ_MAP;
  
#line 330 
  q_vectors = adapter->num_msix_vectors + -1;
  
#line 332 
  len = (int)((unsigned long)adapter->num_msix_vectors * (unsigned long)12U + (unsigned long)14U);
  
#line 335 
  vimi = (struct i40e_virtchnl_irq_map_info *)kzalloc_0((unsigned long)len,32U);
  
#line 336 
  if (vimi == (struct i40e_virtchnl_irq_map_info *)0) 
#line 337 
                                                      goto return_label; else ;
  
#line 339 
  vimi->num_vectors = (unsigned short)adapter->num_msix_vectors;
  
#line 341 
  v_idx = 0;
  
#line 341 
  goto ldv_56857;
  ldv_56856: 
#line 342 
  ;
  
#line 342 
  q_vector = adapter->q_vector[v_idx];
  
#line 343 
  vimi->vecmap[v_idx].vsi_id = (adapter->vsi_res)->vsi_id;
  
#line 344 
  vimi->vecmap[v_idx].vector_id = (unsigned short)((unsigned int)((unsigned short)v_idx) + 1U);
  
#line 345 
  vimi->vecmap[v_idx].txq_map = (unsigned short)q_vector->ring_mask;
  
#line 346 
  vimi->vecmap[v_idx].rxq_map = (unsigned short)q_vector->ring_mask;
  
#line 341 
  v_idx += 1;
  ldv_56857: 
#line 342 
  ;
  
#line 341 
  if (v_idx < q_vectors) 
#line 343 
                         goto ldv_56856; else 
#line 346 
                                              goto ldv_56858;
  ldv_56858: 
#line 347 
  ;
  
#line 349 
  vimi->vecmap[v_idx].vsi_id = (adapter->vsi_res)->vsi_id;
  
#line 350 
  vimi->vecmap[v_idx].vector_id = (unsigned short)0U;
  
#line 351 
  vimi->vecmap[v_idx].txq_map = (unsigned short)0U;
  
#line 352 
  vimi->vecmap[v_idx].rxq_map = (unsigned short)0U;
  
#line 354 
  adapter->aq_required &= 4294967167U;
  
#line 355 
  i40evf_send_pf_msg(adapter,(enum i40e_virtchnl_ops)I40E_VIRTCHNL_OP_CONFIG_IRQ_MAP,(u8 *)vimi,(unsigned short)((int)((unsigned short)len)));
  
#line 357 
  kfree((void const *)vimi);
  return_label: 
#line 358 
                return;
}


#line 368  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
void i40evf_add_ether_addrs(struct i40evf_adapter *adapter)
{
  struct i40e_virtchnl_ether_addr_list *veal;
  int len;
  struct i40evf_mac_filter *f;
  struct i40evf_mac_filter *tmp;
  struct i40evf_mac_filter *tmp_0;
  struct i40evf_mac_filter *tmp_2;
  struct i40evf_mac_filter *tmp_3;
  
#line 371 
  int i = 0;
  
#line 371 
  int count = 0;
  
#line 374 
  if (adapter->current_op != (unsigned int)I40E_VIRTCHNL_OP_UNKNOWN) {
    
#line 376 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: command %d pending\n","i40evf_add_ether_addrs",(unsigned int)adapter->current_op);
    
#line 378 
    goto return_label;
  }
  else ;
  {
    
#line 380 
    struct list_head const *__mptr = (struct list_head const *)adapter->mac_filter_list.next;
    
#line 380 
    tmp = (struct i40evf_mac_filter *)__mptr;
  }
  
#line 380 
  f = tmp;
  
#line 380 
  goto ldv_56873;
  ldv_56872: 
#line 381 
  ;
  
#line 381 
  if ((int)f->add != 0) 
#line 382 
                        count += 1; else ;
  {
    
#line 380 
    struct list_head const *__mptr_0 = (struct list_head const *)f->list.next;
    
#line 380 
    tmp_0 = (struct i40evf_mac_filter *)__mptr_0;
  }
  
#line 380 
  f = tmp_0;
  ldv_56873: 
#line 382 
  ;
  
#line 380 
  if (& f->list != & adapter->mac_filter_list) 
#line 382 
                                               goto ldv_56872; else 
#line 385 
                                                                    goto ldv_56874;
  ldv_56874: 
#line 386 
  ;
  
#line 384 
  if (count == 0) {
    
#line 385 
    adapter->aq_required &= 4294967291U;
    
#line 386 
    goto return_label;
  }
  else ;
  
#line 388 
  adapter->current_op = I40E_VIRTCHNL_OP_ADD_ETHER_ADDRESS;
  
#line 390 
  len = (int)((unsigned long)count * (unsigned long)8U + (unsigned long)12U);
  
#line 392 
  if (len > 4096) {
    
#line 393 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"%s: Too many MAC address changes in one request\n","i40evf_add_ether_addrs");
    
#line 395 
    count = 510;
    
#line 398 
    len = 4096;
  }
  else ;
  
#line 401 
  veal = (struct i40e_virtchnl_ether_addr_list *)kzalloc_0((unsigned long)len,32U);
  
#line 402 
  if (veal == (struct i40e_virtchnl_ether_addr_list *)0) 
#line 403 
                                                         goto return_label; else ;
  
#line 405 
  veal->vsi_id = (adapter->vsi_res)->vsi_id;
  
#line 406 
  veal->num_elements = (unsigned short)count;
  {
    
#line 407 
    struct list_head const *__mptr_1 = (struct list_head const *)adapter->mac_filter_list.next;
    
#line 407 
    tmp_2 = (struct i40evf_mac_filter *)__mptr_1;
  }
  
#line 407 
  f = tmp_2;
  
#line 407 
  goto ldv_56880;
  ldv_56879: 
#line 408 
  ;
  
#line 408 
  if ((int)f->add != 0) {
    
#line 409 
    ether_addr_copy((u8 *)(& veal->list[i].addr),(u8 const *)(& f->macaddr));
    
#line 410 
    i += 1;
    
#line 411 
    f->add = (_Bool)0;
  }
  else ;
  {
    
#line 407 
    struct list_head const *__mptr_2 = (struct list_head const *)f->list.next;
    
#line 407 
    tmp_3 = (struct i40evf_mac_filter *)__mptr_2;
  }
  
#line 407 
  f = tmp_3;
  ldv_56880: 
#line 409 
  ;
  
#line 407 
  if (& f->list != & adapter->mac_filter_list) 
#line 409 
                                               goto ldv_56879; else 
#line 412 
                                                                    goto ldv_56881;
  ldv_56881: 
#line 413 
  ;
  
#line 414 
  adapter->aq_required &= 4294967291U;
  
#line 415 
  i40evf_send_pf_msg(adapter,(enum i40e_virtchnl_ops)I40E_VIRTCHNL_OP_ADD_ETHER_ADDRESS,(u8 *)veal,(unsigned short)((int)((unsigned short)len)));
  
#line 417 
  kfree((void const *)veal);
  return_label: 
#line 418 
                return;
}


#line 428  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
void i40evf_del_ether_addrs(struct i40evf_adapter *adapter)
{
  struct i40e_virtchnl_ether_addr_list *veal;
  struct i40evf_mac_filter *f;
  struct i40evf_mac_filter *ftmp;
  int len;
  struct i40evf_mac_filter *tmp;
  struct i40evf_mac_filter *tmp_0;
  struct i40evf_mac_filter *tmp_2;
  struct i40evf_mac_filter *tmp_3;
  struct i40evf_mac_filter *tmp_4;
  
#line 432 
  int i = 0;
  
#line 432 
  int count = 0;
  
#line 434 
  if (adapter->current_op != (unsigned int)I40E_VIRTCHNL_OP_UNKNOWN) {
    
#line 436 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: command %d pending\n","i40evf_del_ether_addrs",(unsigned int)adapter->current_op);
    
#line 438 
    goto return_label;
  }
  else ;
  {
    
#line 440 
    struct list_head const *__mptr = (struct list_head const *)adapter->mac_filter_list.next;
    
#line 440 
    tmp = (struct i40evf_mac_filter *)__mptr;
  }
  
#line 440 
  f = tmp;
  
#line 440 
  goto ldv_56897;
  ldv_56896: 
#line 441 
  ;
  
#line 441 
  if ((int)f->remove != 0) 
#line 442 
                           count += 1; else ;
  {
    
#line 440 
    struct list_head const *__mptr_0 = (struct list_head const *)f->list.next;
    
#line 440 
    tmp_0 = (struct i40evf_mac_filter *)__mptr_0;
  }
  
#line 440 
  f = tmp_0;
  ldv_56897: 
#line 442 
  ;
  
#line 440 
  if (& f->list != & adapter->mac_filter_list) 
#line 442 
                                               goto ldv_56896; else 
#line 445 
                                                                    goto ldv_56898;
  ldv_56898: 
#line 446 
  ;
  
#line 444 
  if (count == 0) {
    
#line 445 
    adapter->aq_required &= 4294967279U;
    
#line 446 
    goto return_label;
  }
  else ;
  
#line 448 
  adapter->current_op = I40E_VIRTCHNL_OP_DEL_ETHER_ADDRESS;
  
#line 450 
  len = (int)((unsigned long)count * (unsigned long)8U + (unsigned long)12U);
  
#line 452 
  if (len > 4096) {
    
#line 453 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"%s: Too many MAC address changes in one request\n","i40evf_del_ether_addrs");
    
#line 455 
    count = 510;
    
#line 458 
    len = 4096;
  }
  else ;
  
#line 460 
  veal = (struct i40e_virtchnl_ether_addr_list *)kzalloc_0((unsigned long)len,32U);
  
#line 461 
  if (veal == (struct i40e_virtchnl_ether_addr_list *)0) 
#line 462 
                                                         goto return_label; else ;
  
#line 464 
  veal->vsi_id = (adapter->vsi_res)->vsi_id;
  
#line 465 
  veal->num_elements = (unsigned short)count;
  {
    
#line 466 
    struct list_head const *__mptr_1 = (struct list_head const *)adapter->mac_filter_list.next;
    
#line 466 
    tmp_2 = (struct i40evf_mac_filter *)__mptr_1;
  }
  
#line 466 
  f = tmp_2;
  {
    
#line 466 
    struct list_head const *__mptr_2 = (struct list_head const *)f->list.next;
    
#line 466 
    tmp_3 = (struct i40evf_mac_filter *)__mptr_2;
  }
  
#line 467 
  ftmp = tmp_3;
  
#line 466 
  goto ldv_56906;
  ldv_56905: 
#line 467 
  ;
  
#line 467 
  if ((int)f->remove != 0) {
    
#line 468 
    ether_addr_copy((u8 *)(& veal->list[i].addr),(u8 const *)(& f->macaddr));
    
#line 469 
    i += 1;
    
#line 470 
    list_del(& f->list);
    
#line 471 
    kfree((void const *)f);
  }
  else ;
  
#line 466 
  f = ftmp;
  {
    
#line 466 
    struct list_head const *__mptr_3 = (struct list_head const *)ftmp->list.next;
    
#line 466 
    tmp_4 = (struct i40evf_mac_filter *)__mptr_3;
  }
  
#line 466 
  ftmp = tmp_4;
  ldv_56906: 
#line 468 
  ;
  
#line 466 
  if (& f->list != & adapter->mac_filter_list) 
#line 468 
                                               goto ldv_56905; else 
#line 471 
                                                                    goto ldv_56907;
  ldv_56907: 
#line 472 
  ;
  
#line 474 
  adapter->aq_required &= 4294967279U;
  
#line 475 
  i40evf_send_pf_msg(adapter,(enum i40e_virtchnl_ops)I40E_VIRTCHNL_OP_DEL_ETHER_ADDRESS,(u8 *)veal,(unsigned short)((int)((unsigned short)len)));
  
#line 477 
  kfree((void const *)veal);
  return_label: 
#line 478 
                return;
}


#line 488  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
void i40evf_add_vlans(struct i40evf_adapter *adapter)
{
  struct i40e_virtchnl_vlan_filter_list *vvfl;
  int len;
  struct i40evf_vlan_filter *f;
  struct i40evf_vlan_filter *tmp;
  struct i40evf_vlan_filter *tmp_0;
  struct i40evf_vlan_filter *tmp_2;
  struct i40evf_vlan_filter *tmp_3;
  
#line 491 
  int i = 0;
  
#line 491 
  int count = 0;
  
#line 494 
  if (adapter->current_op != (unsigned int)I40E_VIRTCHNL_OP_UNKNOWN) {
    
#line 496 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: command %d pending\n","i40evf_add_vlans",(unsigned int)adapter->current_op);
    
#line 498 
    goto return_label;
  }
  else ;
  {
    
#line 501 
    struct list_head const *__mptr = (struct list_head const *)adapter->vlan_filter_list.next;
    
#line 501 
    tmp = (struct i40evf_vlan_filter *)__mptr;
  }
  
#line 501 
  f = tmp;
  
#line 501 
  goto ldv_56922;
  ldv_56921: 
#line 502 
  ;
  
#line 502 
  if ((int)f->add != 0) 
#line 503 
                        count += 1; else ;
  {
    
#line 501 
    struct list_head const *__mptr_0 = (struct list_head const *)f->list.next;
    
#line 501 
    tmp_0 = (struct i40evf_vlan_filter *)__mptr_0;
  }
  
#line 501 
  f = tmp_0;
  ldv_56922: 
#line 503 
  ;
  
#line 501 
  if (& f->list != & adapter->vlan_filter_list) 
#line 503 
                                                goto ldv_56921; else 
                                                                  
#line 506 
                                                                  goto ldv_56923;
  ldv_56923: 
#line 507 
  ;
  
#line 505 
  if (count == 0) {
    
#line 506 
    adapter->aq_required &= 4294967287U;
    
#line 507 
    goto return_label;
  }
  else ;
  
#line 509 
  adapter->current_op = I40E_VIRTCHNL_OP_ADD_VLAN;
  
#line 511 
  len = (int)(((unsigned long)count + 3UL) * (unsigned long)2U);
  
#line 513 
  if (len > 4096) {
    
#line 514 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"%s: Too many VLAN changes in one request\n","i40evf_add_vlans");
    
#line 516 
    count = 2045;
    
#line 519 
    len = 4096;
  }
  else ;
  
#line 521 
  vvfl = (struct i40e_virtchnl_vlan_filter_list *)kzalloc_0((unsigned long)len,32U);
  
#line 522 
  if (vvfl == (struct i40e_virtchnl_vlan_filter_list *)0) 
#line 523 
                                                          goto return_label; else ;
  
#line 525 
  vvfl->vsi_id = (adapter->vsi_res)->vsi_id;
  
#line 526 
  vvfl->num_elements = (unsigned short)count;
  {
    
#line 527 
    struct list_head const *__mptr_1 = (struct list_head const *)adapter->vlan_filter_list.next;
    
#line 527 
    tmp_2 = (struct i40evf_vlan_filter *)__mptr_1;
  }
  
#line 527 
  f = tmp_2;
  
#line 527 
  goto ldv_56929;
  ldv_56928: 
#line 528 
  ;
  
#line 528 
  if ((int)f->add != 0) {
    
#line 529 
    vvfl->vlan_id[i] = f->vlan;
    
#line 530 
    i += 1;
    
#line 531 
    f->add = (_Bool)0;
  }
  else ;
  {
    
#line 527 
    struct list_head const *__mptr_2 = (struct list_head const *)f->list.next;
    
#line 527 
    tmp_3 = (struct i40evf_vlan_filter *)__mptr_2;
  }
  
#line 527 
  f = tmp_3;
  ldv_56929: 
#line 529 
  ;
  
#line 527 
  if (& f->list != & adapter->vlan_filter_list) 
#line 529 
                                                goto ldv_56928; else 
                                                                  
#line 532 
                                                                  goto ldv_56930;
  ldv_56930: 
#line 533 
  ;
  
#line 534 
  adapter->aq_required &= 4294967287U;
  
#line 535 
  i40evf_send_pf_msg(adapter,(enum i40e_virtchnl_ops)I40E_VIRTCHNL_OP_ADD_VLAN,(u8 *)vvfl,(unsigned short)((int)((unsigned short)len)));
  
#line 536 
  kfree((void const *)vvfl);
  return_label: 
#line 537 
                return;
}


#line 547  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
void i40evf_del_vlans(struct i40evf_adapter *adapter)
{
  struct i40e_virtchnl_vlan_filter_list *vvfl;
  struct i40evf_vlan_filter *f;
  struct i40evf_vlan_filter *ftmp;
  int len;
  struct i40evf_vlan_filter *tmp;
  struct i40evf_vlan_filter *tmp_0;
  struct i40evf_vlan_filter *tmp_2;
  struct i40evf_vlan_filter *tmp_3;
  struct i40evf_vlan_filter *tmp_4;
  
#line 551 
  int i = 0;
  
#line 551 
  int count = 0;
  
#line 553 
  if (adapter->current_op != (unsigned int)I40E_VIRTCHNL_OP_UNKNOWN) {
    
#line 555 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: command %d pending\n","i40evf_del_vlans",(unsigned int)adapter->current_op);
    
#line 557 
    goto return_label;
  }
  else ;
  {
    
#line 560 
    struct list_head const *__mptr = (struct list_head const *)adapter->vlan_filter_list.next;
    
#line 560 
    tmp = (struct i40evf_vlan_filter *)__mptr;
  }
  
#line 560 
  f = tmp;
  
#line 560 
  goto ldv_56946;
  ldv_56945: 
#line 561 
  ;
  
#line 561 
  if ((int)f->remove != 0) 
#line 562 
                           count += 1; else ;
  {
    
#line 560 
    struct list_head const *__mptr_0 = (struct list_head const *)f->list.next;
    
#line 560 
    tmp_0 = (struct i40evf_vlan_filter *)__mptr_0;
  }
  
#line 560 
  f = tmp_0;
  ldv_56946: 
#line 562 
  ;
  
#line 560 
  if (& f->list != & adapter->vlan_filter_list) 
#line 562 
                                                goto ldv_56945; else 
                                                                  
#line 565 
                                                                  goto ldv_56947;
  ldv_56947: 
#line 566 
  ;
  
#line 564 
  if (count == 0) {
    
#line 565 
    adapter->aq_required &= 4294967263U;
    
#line 566 
    goto return_label;
  }
  else ;
  
#line 568 
  adapter->current_op = I40E_VIRTCHNL_OP_DEL_VLAN;
  
#line 570 
  len = (int)(((unsigned long)count + 3UL) * (unsigned long)2U);
  
#line 572 
  if (len > 4096) {
    
#line 573 
    dev_warn((struct device const *)(& (adapter->pdev)->dev),"%s: Too many VLAN changes in one request\n","i40evf_del_vlans");
    
#line 575 
    count = 2045;
    
#line 578 
    len = 4096;
  }
  else ;
  
#line 580 
  vvfl = (struct i40e_virtchnl_vlan_filter_list *)kzalloc_0((unsigned long)len,32U);
  
#line 581 
  if (vvfl == (struct i40e_virtchnl_vlan_filter_list *)0) 
#line 582 
                                                          goto return_label; else ;
  
#line 584 
  vvfl->vsi_id = (adapter->vsi_res)->vsi_id;
  
#line 585 
  vvfl->num_elements = (unsigned short)count;
  {
    
#line 586 
    struct list_head const *__mptr_1 = (struct list_head const *)adapter->vlan_filter_list.next;
    
#line 586 
    tmp_2 = (struct i40evf_vlan_filter *)__mptr_1;
  }
  
#line 586 
  f = tmp_2;
  {
    
#line 586 
    struct list_head const *__mptr_2 = (struct list_head const *)f->list.next;
    
#line 586 
    tmp_3 = (struct i40evf_vlan_filter *)__mptr_2;
  }
  
#line 587 
  ftmp = tmp_3;
  
#line 586 
  goto ldv_56955;
  ldv_56954: 
#line 587 
  ;
  
#line 587 
  if ((int)f->remove != 0) {
    
#line 588 
    vvfl->vlan_id[i] = f->vlan;
    
#line 589 
    i += 1;
    
#line 590 
    list_del(& f->list);
    
#line 591 
    kfree((void const *)f);
  }
  else ;
  
#line 586 
  f = ftmp;
  {
    
#line 586 
    struct list_head const *__mptr_3 = (struct list_head const *)ftmp->list.next;
    
#line 586 
    tmp_4 = (struct i40evf_vlan_filter *)__mptr_3;
  }
  
#line 586 
  ftmp = tmp_4;
  ldv_56955: 
#line 588 
  ;
  
#line 586 
  if (& f->list != & adapter->vlan_filter_list) 
#line 588 
                                                goto ldv_56954; else 
                                                                  
#line 591 
                                                                  goto ldv_56956;
  ldv_56956: 
#line 592 
  ;
  
#line 594 
  adapter->aq_required &= 4294967263U;
  
#line 595 
  i40evf_send_pf_msg(adapter,(enum i40e_virtchnl_ops)I40E_VIRTCHNL_OP_DEL_VLAN,(u8 *)vvfl,(unsigned short)((int)((unsigned short)len)));
  
#line 596 
  kfree((void const *)vvfl);
  return_label: 
#line 597 
                return;
}


#line 606  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
void i40evf_set_promiscuous(struct i40evf_adapter *adapter, int flags)
{
  struct i40e_virtchnl_promisc_info vpi;
  
#line 610 
  if (adapter->current_op != (unsigned int)I40E_VIRTCHNL_OP_UNKNOWN) {
    
#line 612 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: command %d pending\n","i40evf_set_promiscuous",(unsigned int)adapter->current_op);
    
#line 614 
    goto return_label;
  }
  else ;
  
#line 616 
  adapter->current_op = I40E_VIRTCHNL_OP_CONFIG_PROMISCUOUS_MODE;
  
#line 617 
  vpi.vsi_id = (adapter->vsi_res)->vsi_id;
  
#line 618 
  vpi.flags = (unsigned short)flags;
  
#line 619 
  i40evf_send_pf_msg(adapter,(enum i40e_virtchnl_ops)I40E_VIRTCHNL_OP_CONFIG_PROMISCUOUS_MODE,(u8 *)(& vpi),(unsigned short)4);
  return_label: 
#line 621 
                return;
}


#line 629  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
void i40evf_request_stats(struct i40evf_adapter *adapter)
{
  struct i40e_virtchnl_queue_select vqs;
  int tmp;
  
#line 633 
  if (adapter->current_op != (unsigned int)I40E_VIRTCHNL_OP_UNKNOWN) 
    
#line 635 
    goto return_label; else ;
  
#line 637 
  adapter->current_op = I40E_VIRTCHNL_OP_GET_STATS;
  
#line 638 
  vqs.vsi_id = (adapter->vsi_res)->vsi_id;
  
#line 640 
  tmp = i40evf_send_pf_msg(adapter,(enum i40e_virtchnl_ops)I40E_VIRTCHNL_OP_GET_STATS,(u8 *)(& vqs),(unsigned short)12);
  
#line 640 
  if (tmp != 0) 
#line 643 
                adapter->current_op = I40E_VIRTCHNL_OP_UNKNOWN; else ;
  return_label: 
#line 644 
                return;
}


#line 651  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
void i40evf_request_reset(struct i40evf_adapter *adapter)
{
  
#line 654 
  i40evf_send_pf_msg(adapter,(enum i40e_virtchnl_ops)I40E_VIRTCHNL_OP_RESET_VF,(u8 *)0U,(unsigned short)0);
  
#line 655 
  adapter->current_op = I40E_VIRTCHNL_OP_UNKNOWN;
  
#line 656 
  return;
}


#line 670  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_virtchnl.c"
void i40evf_virtchnl_completion(struct i40evf_adapter *adapter, enum i40e_virtchnl_ops v_opcode, i40e_status v_retval, u8 *msg, u16 msglen)
{
  
#line 675 
  struct net_device *netdev = adapter->netdev;
  
#line 677 
  if (v_opcode == (unsigned int)I40E_VIRTCHNL_OP_EVENT) {
    
#line 678 
    struct i40e_virtchnl_pf_event *vpe = (struct i40e_virtchnl_pf_event *)msg;
    
#line 680 
    switch ((unsigned int)vpe->event) {
      case (unsigned int)1: 
#line 681 
      ;
      
#line 682 
      adapter->link_up = vpe->event_data.link_event.link_status;
      
#line 684 
      if ((int)adapter->link_up != 0) {
        int tmp_0;
        bool tmp;
        
#line 684 
        tmp = netif_carrier_ok((struct net_device const *)netdev);
        
#line 684 
        if (tmp) 
#line 684 
                 tmp_0 = 0; else 
#line 684 
                                 tmp_0 = 1;
        
#line 684 
        if (tmp_0) {
          
#line 685 
          _dev_info((struct device const *)(& (adapter->pdev)->dev),"NIC Link is Up\n");
          
#line 686 
          netif_carrier_on(netdev);
          
#line 687 
          netif_tx_wake_all_queues(netdev);
        }
        else 
#line 684 
             goto _LAND;
      }
      else 
        _LAND: 
#line 688 
               if (! adapter->link_up) {
                 
#line 689 
                 _dev_info((struct device const *)(& (adapter->pdev)->dev),"NIC Link is Down\n");
                 
#line 690 
                 netif_carrier_off(netdev);
                 
#line 691 
                 netif_tx_stop_all_queues(netdev);
               }
               else ;
      
#line 693 
      goto ldv_56980;
      case (unsigned int)2: 
#line 694 
      ;
      
#line 695 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"PF reset warning received\n");
      
#line 696 
      if ((adapter->flags & 512U) == 0U) {
        
#line 697 
        adapter->flags |= 512U;
        
#line 698 
        _dev_info((struct device const *)(& (adapter->pdev)->dev),"Scheduling reset task\n");
        
#line 699 
        ldv_schedule_work_73_0(& adapter->reset_task);
      }
      else ;
      
#line 701 
      goto ldv_56980;
      default: 
#line 702 
      ;
      
#line 703 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Unknown event %d from pf\n","i40evf_virtchnl_completion",(unsigned int)vpe->event);
      
#line 706 
      goto ldv_56980;
    }
    ldv_56980: 
#line 708 
    ;
    
#line 708 
    goto return_label;
  }
  else ;
  
#line 710 
  if (v_retval != I40E_SUCCESS) 
#line 711 
                                dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: PF returned error %d to our request %d\n","i40evf_virtchnl_completion",(int)v_retval,(unsigned int)v_opcode); else ;
  
#line 714 
  switch ((unsigned int)v_opcode) {
    case (unsigned int)15: 
#line 715 
    ;
    {
      
#line 716 
      struct i40e_eth_stats *stats = (struct i40e_eth_stats *)msg;
      
#line 718 
      adapter->net_stats.rx_packets = (unsigned long)((stats->rx_unicast + stats->rx_multicast) + stats->rx_broadcast);
      
#line 721 
      adapter->net_stats.tx_packets = (unsigned long)((stats->tx_unicast + stats->tx_multicast) + stats->tx_broadcast);
      
#line 724 
      adapter->net_stats.rx_bytes = (unsigned long)stats->rx_bytes;
      
#line 725 
      adapter->net_stats.tx_bytes = (unsigned long)stats->tx_bytes;
      
#line 726 
      adapter->net_stats.tx_errors = (unsigned long)stats->tx_errors;
      
#line 727 
      adapter->net_stats.rx_dropped = (unsigned long)stats->rx_discards;
      
#line 728 
      adapter->net_stats.tx_dropped = (unsigned long)stats->tx_discards;
      
#line 729 
      adapter->current_stats = *stats;
    }
    
#line 731 
    goto ldv_56986;
    case (unsigned int)8: 
#line 732 
    ;
    
#line 734 
    i40evf_irq_enable(adapter,(_Bool)1);
    
#line 735 
    netif_tx_start_all_queues(adapter->netdev);
    
#line 736 
    netif_carrier_on(adapter->netdev);
    
#line 737 
    goto ldv_56986;
    case (unsigned int)9: 
#line 738 
    ;
    
#line 739 
    i40evf_free_all_tx_resources(adapter);
    
#line 740 
    i40evf_free_all_rx_resources(adapter);
    
#line 741 
    goto ldv_56986;
    case (unsigned int)1: 
#line 742 
    ;
    case (unsigned int)3: 
#line 743 
    ;
    case (unsigned int)7: 
#line 744 
    ;
    
#line 749 
    if (adapter->current_op != v_opcode) 
#line 750 
                                         goto return_label; else ;
    
#line 751 
    goto ldv_56986;
    default: 
#line 752 
    ;
    
#line 753 
    if (adapter->current_op != v_opcode) 
#line 754 
                                         dev_warn((struct device const *)(& (adapter->pdev)->dev),"Expected response %d from PF, received %d\n",(unsigned int)adapter->current_op,(unsigned int)v_opcode); else ;
    
#line 756 
    goto ldv_56986;
  }
  ldv_56986: 
#line 758 
  ;
  
#line 758 
  adapter->current_op = I40E_VIRTCHNL_OP_UNKNOWN;
  return_label: 
#line 759 
                return;
}


#line 495  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_virtchnl.c.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 498 
  tmp = ldv_kzalloc(size,flags);
  
#line 498 
  return tmp;
}


#line 751  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_virtchnl.c.aux"
static bool ldv_schedule_work_73_0(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 755 
  tmp = ldv_emg_schedule_work(work);
  
#line 755 
  __retres = tmp != 0;
  
#line 755 
  return __retres;
}

void __builtin_va_end(__builtin_va_list);

void __builtin_va_start(__builtin_va_list);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
extern struct module __this_module;


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w)
{
  
#line 47 
  unsigned long res = 0UL;
  
#line 48 
  ldv_inline_asm();
  
#line 58 
  return res;
}


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w)
{
  unsigned long tmp_0;
  
#line 80 
  if (0 != 0) 
#line 80 
              tmp_0 = (unsigned long)((((unsigned int)((((((((((unsigned long long)w & 1ULL) != 0ULL) + (((unsigned long long)w & 2ULL) != 0ULL)) + (((unsigned long long)w & 4ULL) != 0ULL)) + (((unsigned long long)w & 8ULL) != 0ULL)) + (((unsigned long long)w & 16ULL) != 0ULL)) + (((unsigned long long)w & 32ULL) != 0ULL)) + (((unsigned long long)w & 64ULL) != 0ULL)) + (((unsigned long long)w & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 8) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 8) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 16) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 16) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 24) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 24) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 128ULL) != 0ULL)))) + (((unsigned int)((((((((((unsigned long long)(w >> 32) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 32) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 40) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 40) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 48) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 48) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 56) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 56) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 128ULL) != 0ULL))))); else 
                                                                    
#line 80 
                                                                    tmp_0 = __arch_hweight64((unsigned long long)w);
  
#line 80 
  return tmp_0;
}


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
int printk(char const * , ...);


#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
void __dynamic_dev_dbg(struct _ddebug *, struct device const *, char const * , ...);


#line 407  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int vsnprintf(char *, size_t, char const *, __va_list_tag *);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list)
{
  
#line 27 
  list->next = list;
  
#line 28 
  list->prev = list;
  
#line 29 
  return;
}


#line 48 
void __list_add(struct list_head *, struct list_head *, struct list_head *);


#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void list_add(struct list_head *new, struct list_head *head)
{
  
#line 63 
  __list_add(new,head,head->next);
  
#line 64 
  return;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
int __bitmap_weight(unsigned long const *, unsigned int);


#line 298  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const *src, unsigned int nbits)
{
  int __retres;
  int tmp_0;
  
#line 300 
  if (0 != 0 && nbits <= 64U) {
    unsigned long tmp;
    
#line 301 
    tmp = hweight_long(*src & (18446744073709551615UL >> (- nbits & 63U)));
    
#line 301 
    __retres = (int)tmp;
    
#line 301 
    goto return_label;
  }
  else ;
  
#line 302 
  tmp_0 = __bitmap_weight(src,nbits);
  
#line 302 
  __retres = tmp_0;
  return_label: 
#line 302 
                return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
extern int nr_cpu_ids;


#line 89 
extern struct cpumask const * const cpu_online_mask;


#line 474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask const *srcp)
{
  unsigned int __retres;
  int tmp;
  
#line 476 
  tmp = bitmap_weight((unsigned long const *)(& srcp->bits),(unsigned int)nr_cpu_ids);
  
#line 476 
  __retres = (unsigned int)tmp;
  
#line 476 
  return __retres;
}


#line 7  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
void __local_bh_disable_ip(unsigned long, unsigned int);


#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  __here_0: 
#line 18 
  ;
  
#line 18 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  
#line 20 
  return;
}


#line 22 
void __local_bh_enable_ip(unsigned long, unsigned int);


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  __here_0: 
#line 31 
  ;
  
#line 31 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  
#line 33 
  return;
}


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
void lockdep_init_map(struct lockdep_map *, char const *, struct lock_class_key *, int);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock(raw_spinlock_t *);


#line 41 
void _raw_spin_unlock(raw_spinlock_t *);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 346 
static void ldv_spin_lock_60(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 395 
static void ldv_spin_unlock_63(spinlock_t *lock);


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
void ldv_spin_model_lock(char *);


#line 75 
void ldv_spin_model_unlock(char *);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
extern unsigned long volatile jiffies;


#line 292 
unsigned long __msecs_to_jiffies(unsigned int const);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
__inline static unsigned long _msecs_to_jiffies(unsigned int const m)
{
  unsigned long __retres;
  
#line 301 
  __retres = (unsigned long)(((long)m + 3L) / 4L);
  
#line 301 
  return __retres;
}


#line 354  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
__inline static unsigned long msecs_to_jiffies(unsigned int const m)
{
  unsigned long __retres;
  
#line 356 
  if (0 != 0) {
    unsigned long tmp;
    
#line 357 
    if ((int)m < 0) {
      
#line 358 
      __retres = 4611686018427387902UL;
      
#line 358 
      goto return_label;
    }
    else ;
    
#line 359 
    tmp = _msecs_to_jiffies(m);
    
#line 359 
    __retres = tmp;
    
#line 359 
    goto return_label;
  }
  else {
    unsigned long tmp_0;
    
#line 361 
    tmp_0 = __msecs_to_jiffies(m);
    
#line 361 
    __retres = tmp_0;
    
#line 361 
    goto return_label;
  }
  return_label: 
#line 356 
                return __retres;
}


#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcutree.h"
void kfree_call_rcu(struct callback_head *, void (*)(struct callback_head *));


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
void init_timer_key(struct timer_list *, unsigned int, char const *, struct lock_class_key *);


#line 173 
static int ldv_mod_timer_85(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 177 
static int ldv_mod_timer_86(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 181 
static int ldv_mod_timer_88(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 185 
static int ldv_mod_timer_90(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 190 
static int ldv_mod_timer_pending_81(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 232 
static int ldv_del_timer_sync_99(struct timer_list *ldv_func_arg1);


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void delayed_work_timer_fn(unsigned long);


#line 181 
void __init_work(struct work_struct *, int);


#line 352 
extern struct workqueue_struct *system_wq;


#line 436 
void flush_workqueue(struct workqueue_struct *);


#line 444 
bool cancel_work_sync(struct work_struct *);


#line 448 
bool cancel_delayed_work_sync(struct delayed_work *);


#line 560 
static bool ldv_schedule_work_73_1(struct work_struct *work);


#line 564 
static bool ldv_schedule_work_74(struct work_struct *work);


#line 568 
static bool ldv_schedule_work_82(struct work_struct *work);


#line 572 
static bool ldv_schedule_work_84(struct work_struct *work);


#line 576 
static bool ldv_schedule_work_87(struct work_struct *work);


#line 580 
static bool ldv_schedule_work_89(struct work_struct *work);


#line 584 
static bool ldv_schedule_work_97(struct work_struct *work);


#line 585  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
__inline static void flush_scheduled_work(void)
{
  
#line 587 
  flush_workqueue(system_wq);
  
#line 588 
  return;
}


#line 597 
static bool ldv_schedule_delayed_work_83(struct delayed_work *dwork, unsigned long delay);


#line 601 
static bool ldv_schedule_delayed_work_92(struct delayed_work *dwork, unsigned long delay);


#line 605 
static bool ldv_schedule_delayed_work_93(struct delayed_work *dwork, unsigned long delay);


#line 609 
static bool ldv_schedule_delayed_work_95(struct delayed_work *dwork, unsigned long delay);


#line 181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
void *ioremap_nocache(resource_size_t, unsigned long);


#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void *ioremap(resource_size_t offset, unsigned long size)
{
  void *tmp;
  
#line 192 
  tmp = ioremap_nocache(offset,size);
  
#line 192 
  return tmp;
}


#line 195 
void iounmap(void volatile *);


#line 864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 866 
  __retres = dev->driver_data;
  
#line 866 
  return __retres;
}


#line 869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  
#line 871 
  dev->driver_data = data;
  
#line 872 
  return;
}


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kcalloc(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc_1(size_t size, gfp_t flags);


#line 859  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pci_bus_read_config_byte(struct pci_bus *, unsigned int, int, u8 *);


#line 883  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_read_config_byte(struct pci_dev const *dev, int where, u8 *val)
{
  int tmp;
  
#line 885 
  tmp = pci_bus_read_config_byte(dev->bus,dev->devfn,where,val);
  
#line 885 
  return tmp;
}


#line 951 
int pci_enable_device(struct pci_dev *);


#line 953 
int pci_enable_device_mem(struct pci_dev *);


#line 968 
void pci_disable_device(struct pci_dev *);


#line 971 
void pci_set_master(struct pci_dev *);


#line 1026 
int pci_save_state(struct pci_dev *);


#line 1027 
void pci_restore_state(struct pci_dev *);


#line 1040 
int pci_set_power_state(struct pci_dev *, pci_power_t);


#line 1094 
int pci_request_regions(struct pci_dev *, char const *);


#line 1096 
void pci_release_regions(struct pci_dev *);


#line 1146 
static int ldv___pci_register_driver_101(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3);


#line 1158 
static void ldv_pci_unregister_driver_102(struct pci_driver *ldv_func_arg1);


#line 1216 
void pci_disable_msix(struct pci_dev *);


#line 1227 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);


#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
int dma_supported(struct device *, u64);


#line 61 
int dma_set_mask(struct device *, u64);


#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_coherent_mask(struct device *dev, u64 mask)
{
  int __retres;
  int tmp;
  
#line 103 
  tmp = dma_supported(dev,mask);
  
#line 103 
  if (tmp == 0) {
    
#line 104 
    __retres = -5;
    
#line 104 
    goto return_label;
  }
  else ;
  
#line 105 
  dev->coherent_dma_mask = mask;
  
#line 106 
  __retres = 0;
  return_label: 
#line 106 
                return __retres;
}


#line 116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  
#line 118 
  int rc = dma_set_mask(dev,mask);
  
#line 119 
  if (rc == 0) 
#line 120 
               dma_set_coherent_mask(dev,mask); else ;
  
#line 121 
  return rc;
}


#line 1471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  void *tmp;
  
#line 1473 
  tmp = dev_get_drvdata((struct device const *)(& pdev->dev));
  
#line 1473 
  return tmp;
}


#line 1476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  
#line 1478 
  dev_set_drvdata(& pdev->dev,data);
  
#line 1479 
  return;
}


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/aer.h"
int pci_enable_pcie_error_reporting(struct pci_dev *);


#line 43 
int pci_disable_pcie_error_reporting(struct pci_dev *);


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/delay.h"
void __const_udelay(unsigned long);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
void msleep(unsigned int);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/random.h"
void get_random_bytes(void *, int);


#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hardirq.h"
void synchronize_irq(unsigned int);


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_75(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 145 
static int ldv_request_irq_77(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 157 
static void ldv_free_irq_76(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 161 
static void ldv_free_irq_78(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 165 
static void ldv_free_irq_79(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 169 
static void ldv_free_irq_80(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 263 
int irq_set_affinity_hint(unsigned int, struct cpumask const *);


#line 391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void __napi_schedule(struct napi_struct *);


#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_disable_pending(struct napi_struct *n)
{
  bool __retres;
  int tmp;
  
#line 396 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& n->state));
  
#line 396 
  __retres = (_Bool)(tmp != 0);
  
#line 396 
  return __retres;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_schedule_prep(struct napi_struct *n)
{
  bool __retres;
  int tmp_2;
  int tmp_0;
  bool tmp;
  
#line 410 
  tmp = napi_disable_pending(n);
  
#line 410 
  if (tmp) 
#line 410 
           tmp_0 = 0; else 
#line 410 
                           tmp_0 = 1;
  
#line 410 
  if (tmp_0) {
    int tmp_1;
    
#line 410 
    tmp_1 = test_and_set_bit(0L,(unsigned long volatile *)(& n->state));
    
#line 410 
    if (tmp_1 == 0) 
#line 410 
                    tmp_2 = 1; else 
#line 410 
                                    tmp_2 = 0;
  }
  else 
#line 410 
       tmp_2 = 0;
  
#line 410 
  __retres = (_Bool)(tmp_2 != 0);
  
#line 410 
  return __retres;
}


#line 421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  bool tmp;
  
#line 423 
  tmp = napi_schedule_prep(n);
  
#line 423 
  if ((int)tmp != 0) 
#line 424 
                     __napi_schedule(n); else ;
  
#line 425 
  return;
}


#line 496 
void napi_disable(struct napi_struct *);


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  int tmp;
  
#line 507 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 507 
  if ((long)(tmp == 0) != 0L) {
    
#line 509 
    ldv_inline_asm();
    
#line 507 
    ;
  }
  else ;
  
#line 509 
  ldv_inline_asm();
  
#line 509 
  set_bit(0L,(unsigned long volatile *)(& n->state));
  
#line 510 
  return;
}


#line 1911 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);


#line 1920 
void netif_napi_del(struct napi_struct *);


#line 2205 
static void ldv_free_netdev_96(struct net_device *ldv_func_arg1);


#line 2209 
static void ldv_free_netdev_100(struct net_device *ldv_func_arg1);


#line 3117 
void netif_device_detach(struct net_device *);


#line 3119 
void netif_device_attach(struct net_device *);


#line 3170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_lock(struct netdev_queue *txq, int cpu)
{
  
#line 3172 
  ldv_spin_lock_60(& txq->_xmit_lock);
  
#line 3173 
  txq->xmit_lock_owner = cpu;
  
#line 3174 
  return;
}


#line 3190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  
#line 3192 
  txq->xmit_lock_owner = -1;
  
#line 3193 
  ldv_spin_unlock_63(& txq->_xmit_lock);
  
#line 3194 
  return;
}


#line 3282  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_disable(struct net_device *dev)
{
  unsigned int i;
  int cpu;
  int tmp_3;
  
#line 3287 
  local_bh_disable();
  {
    int pscr_ret__;
    {
      
#line 3288 
      void const *__vpp_verify = (void const *)0;
      
#line 3288 
      void const *tmp = __vpp_verify;
    }
    
#line 3288 
    switch (4UL) {
      int tmp_0;
      int tmp_0_0;
      int tmp_1;
      int tmp_2;
      case (unsigned long)1: 
#line 3288 
      ;
      {
        int pfo_ret__;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45497;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45497;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45497;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45497;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45497: 
#line 3288 
        ;
        
#line 3288 
        tmp_0 = pfo_ret__;
      }
      
#line 3288 
      pscr_ret__ = tmp_0;
      
#line 3288 
      goto ldv_45503;
      case (unsigned long)2: 
#line 3288 
      ;
      {
        int pfo_ret___0;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45507;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45507;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45507;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45507;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45507: 
#line 3288 
        ;
        
#line 3288 
        tmp_0_0 = pfo_ret___0;
      }
      
#line 3288 
      pscr_ret__ = tmp_0_0;
      
#line 3288 
      goto ldv_45503;
      case (unsigned long)4: 
#line 3288 
      ;
      {
        int pfo_ret___1;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45516;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45516;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45516;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45516;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45516: 
#line 3288 
        ;
        
#line 3288 
        tmp_1 = pfo_ret___1;
      }
      
#line 3288 
      pscr_ret__ = tmp_1;
      
#line 3288 
      goto ldv_45503;
      case (unsigned long)8: 
#line 3288 
      ;
      {
        int pfo_ret___2;
        
#line 3288 
        switch (4UL) {
          case (unsigned long)1: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45525;
          case (unsigned long)2: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45525;
          case (unsigned long)4: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45525;
          case (unsigned long)8: 
#line 3288 
          ;
          
#line 3289 
          ldv_inline_asm();
          
#line 3288 
          goto ldv_45525;
          default: 
#line 3288 
          ;
          
#line 3288 
          __bad_percpu_size();
        }
        ldv_45525: 
#line 3288 
        ;
        
#line 3288 
        tmp_2 = pfo_ret___2;
      }
      
#line 3288 
      pscr_ret__ = tmp_2;
      
#line 3288 
      goto ldv_45503;
      default: 
#line 3288 
      ;
      
#line 3288 
      __bad_size_call_parameter();
      
#line 3288 
      goto ldv_45503;
    }
    ldv_45503: 
#line 3288 
    ;
    
#line 3288 
    tmp_3 = pscr_ret__;
  }
  
#line 3288 
  cpu = tmp_3;
  
#line 3289 
  i = 0U;
  
#line 3289 
  goto ldv_45535;
  ldv_45534: 
#line 3290 
  ;
  {
    
#line 3290 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 3292 
    __netif_tx_lock(txq,cpu);
    
#line 3293 
    netif_tx_start_queue(txq);
    
#line 3294 
    __netif_tx_unlock(txq);
  }
  
#line 3289 
  i += 1U;
  ldv_45535: 
#line 3290 
  ;
  
#line 3289 
  if (dev->num_tx_queues > i) 
#line 3291 
                              goto ldv_45534; else 
#line 3294 
                                                   goto ldv_45536;
  ldv_45536: 
#line 3295 
  ;
  
#line 3296 
  local_bh_enable();
  
#line 3297 
  return;
}


#line 3355 
static int ldv_register_netdev_91(struct net_device *ldv_func_arg1);


#line 3360 
static void ldv_unregister_netdev_98(struct net_device *ldv_func_arg1);


#line 3549 
void netdev_rss_key_fill(void *, size_t);


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
int eth_validate_addr(struct net_device *);


#line 53 
static struct net_device *ldv_alloc_etherdev_mqs_94(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 96 
  __retres = (_Bool)((*((u32 const *)addr) | (unsigned int)*((u16 const *)(addr + 4U))) == 0U);
  
#line 96 
  return __retres;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 114 
  u32 a = *((u32 const *)addr);
  
#line 121 
  __retres = (_Bool)((a & 1U) != 0U);
  
#line 121 
  return __retres;
}


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_3;
  int tmp_0;
  bool tmp;
  
#line 190 
  tmp = is_multicast_ether_addr(addr);
  
#line 190 
  if (tmp) 
#line 190 
           tmp_0 = 0; else 
#line 190 
                           tmp_0 = 1;
  
#line 190 
  if (tmp_0) {
    int tmp_2;
    bool tmp_1;
    
#line 190 
    tmp_1 = is_zero_ether_addr(addr);
    
#line 190 
    if (tmp_1) 
#line 190 
               tmp_2 = 0; else 
#line 190 
                               tmp_2 = 1;
    
#line 190 
    if (tmp_2) 
#line 190 
               tmp_3 = 1; else 
#line 190 
                               tmp_3 = 0;
  }
  else 
#line 190 
       tmp_3 = 0;
  
#line 190 
  __retres = (_Bool)(tmp_3 != 0);
  
#line 190 
  return __retres;
}


#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static void eth_random_addr(u8 *addr)
{
  
#line 220 
  get_random_bytes((void *)addr,6);
  
#line 221 
  *addr = (unsigned char)((unsigned int)*addr & 254U);
  
#line 222 
  *addr = (unsigned char)((unsigned int)*addr | 2U);
  
#line 223 
  return;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool ether_addr_equal(u8 const *addr1, u8 const *addr2)
{
  bool __retres;
  
#line 313 
  u32 fold = (*((u32 const *)addr1) ^ *((u32 const *)addr2)) | (unsigned int)((int)*((u16 const *)(addr1 + 4U)) ^ (int)*((u16 const *)(addr2 + 4U)));
  
#line 316 
  __retres = (_Bool)(fold == 0U);
  
#line 316 
  return __retres;
}


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
void rtnl_lock(void);


#line 28 
void rtnl_unlock(void);


#line 266  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf.h"
void i40evf_down(struct i40evf_adapter *adapter);


#line 270 
void i40evf_reset_interrupt_capability(struct i40evf_adapter *adapter);


#line 271 
int i40evf_init_interrupt_scheme(struct i40evf_adapter *adapter);


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_prototype.h"
i40e_status i40e_set_mac_type(struct i40e_hw *hw);


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_setup_all_tx_resources(struct i40evf_adapter *adapter);


#line 30 
static int i40evf_setup_all_rx_resources(struct i40evf_adapter *adapter);


#line 31 
static int i40evf_close(struct net_device *netdev);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
char i40evf_driver_name[7U] = {(char)'i', (char)'4', (char)'0', (char)'e', (char)'v', (char)'f', (char)'\000'};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static char const i40evf_driver_string[52U] = {(char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)'(', (char)'R', (char)')', (char)' ', (char)'X', (char)'L', (char)'7', (char)'1', (char)'0', (char)'/', (char)'X', (char)'7', (char)'1', (char)'0', (char)' ', (char)'V', (char)'i', (char)'r', (char)'t', (char)'u', (char)'a', (char)'l', (char)' ', (char)'F', (char)'u', (char)'n', (char)'c', (char)'t', (char)'i', (char)'o', (char)'n', (char)' ', (char)'N', (char)'e', (char)'t', (char)'w', (char)'o', (char)'r', (char)'k', (char)' ', (char)'D', (char)'r', (char)'i', (char)'v', (char)'e', (char)'r', (char)'\000'};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
char const i40evf_driver_version[7U] = {(char)'1', (char)'.', (char)'2', (char)'.', (char)'2', (char)'5', (char)'\000'};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static char const i40evf_copyright[45U] = {(char)'C', (char)'o', (char)'p', (char)'y', (char)'r', (char)'i', (char)'g', (char)'h', (char)'t', (char)' ', (char)'(', (char)'c', (char)')', (char)' ', (char)'2', (char)'0', (char)'1', (char)'3', (char)' ', (char)'-', (char)' ', (char)'2', (char)'0', (char)'1', (char)'4', (char)' ', (char)'I', (char)'n', (char)'t', (char)'e', (char)'l', (char)' ', (char)'C', (char)'o', (char)'r', (char)'p', (char)'o', (char)'r', (char)'a', (char)'t', (char)'i', (char)'o', (char)'n', (char)'.', (char)'\000'};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static struct pci_device_id const i40evf_pci_tbl[2U] = {{.vendor = 32902U, .device = 5452U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 0U, .device = 0U, .subvendor = 0U, .subdevice = 0U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
struct pci_device_id const __mod_pci__i40evf_pci_tbl_device_table[2U];

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
i40e_status i40evf_allocate_dma_mem_d(struct i40e_hw *hw, struct i40e_dma_mem *mem, u64 size, u32 alignment)
{
  i40e_status __retres;
  
#line 74 
  struct i40evf_adapter *adapter = (struct i40evf_adapter *)hw->back;
  
#line 76 
  if (mem == (struct i40e_dma_mem *)0) {
    
#line 77 
    __retres = I40E_ERR_PARAM;
    
#line 77 
    goto return_label;
  }
  else ;
  
#line 79 
  mem->size = (((unsigned int)size + alignment) + 4294967295U) & - alignment;
  
#line 80 
  mem->va = dma_alloc_attrs(& (adapter->pdev)->dev,(unsigned long)mem->size,& mem->pa,208U,(struct dma_attrs *)0);
  
#line 82 
  if (mem->va != (void *)0) {
    
#line 83 
    __retres = I40E_SUCCESS;
    
#line 83 
    goto return_label;
  }
  else {
    
#line 85 
    __retres = I40E_ERR_NO_MEMORY;
    
#line 85 
    goto return_label;
  }
  return_label: 
#line 82 
                return __retres;
}


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
i40e_status i40evf_free_dma_mem_d(struct i40e_hw *hw, struct i40e_dma_mem *mem)
{
  i40e_status __retres;
  
#line 95 
  struct i40evf_adapter *adapter = (struct i40evf_adapter *)hw->back;
  
#line 97 
  if (mem == (struct i40e_dma_mem *)0 || mem->va == (void *)0) {
    
#line 98 
    __retres = I40E_ERR_PARAM;
    
#line 98 
    goto return_label;
  }
  else ;
  
#line 99 
  dma_free_attrs(& (adapter->pdev)->dev,(unsigned long)mem->size,mem->va,mem->pa,(struct dma_attrs *)0);
  
#line 101 
  __retres = I40E_SUCCESS;
  return_label: 
#line 101 
                return __retres;
}


#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
i40e_status i40evf_allocate_virt_mem_d(struct i40e_hw *hw, struct i40e_virt_mem *mem, u32 size)
{
  i40e_status __retres;
  
#line 113 
  if (mem == (struct i40e_virt_mem *)0) {
    
#line 114 
    __retres = I40E_ERR_PARAM;
    
#line 114 
    goto return_label;
  }
  else ;
  
#line 116 
  mem->size = size;
  
#line 117 
  mem->va = kzalloc_1((unsigned long)size,208U);
  
#line 119 
  if (mem->va != (void *)0) {
    
#line 120 
    __retres = I40E_SUCCESS;
    
#line 120 
    goto return_label;
  }
  else {
    
#line 122 
    __retres = I40E_ERR_NO_MEMORY;
    
#line 122 
    goto return_label;
  }
  return_label: 
#line 119 
                return __retres;
}


#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
i40e_status i40evf_free_virt_mem_d(struct i40e_hw *hw, struct i40e_virt_mem *mem)
{
  i40e_status __retres;
  
#line 133 
  if (mem == (struct i40e_virt_mem *)0) {
    
#line 134 
    __retres = I40E_ERR_PARAM;
    
#line 134 
    goto return_label;
  }
  else ;
  
#line 137 
  kfree((void const *)mem->va);
  
#line 139 
  __retres = I40E_SUCCESS;
  return_label: 
#line 139 
                return __retres;
}


#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
void i40evf_debug_d(void *hw, u32 mask, char *fmt_str , ...)
{
  char buf[512U];
  va_list argptr;
  
#line 153 
  if ((((struct i40e_hw *)hw)->debug_mask & mask) == 0U) 
#line 154 
                                                         goto return_label; else ;
  
#line 156 
  __builtin_va_start((__builtin_va_list)((__va_list_tag *)(& argptr)));
  
#line 157 
  vsnprintf((char *)(& buf),512UL,(char const *)fmt_str,(__va_list_tag *)(& argptr));
  
#line 158 
  __builtin_va_end((__builtin_va_list)((__va_list_tag *)(& argptr)));
  
#line 161 
  printk("\001",(char *)(& buf));
  return_label: 
#line 162 
                return;
}


#line 168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_tx_timeout(struct net_device *netdev)
{
  
#line 170 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 172 
  adapter->tx_timeout_count += 1U;
  
#line 173 
  if ((adapter->flags & 1536U) == 0U) {
    
#line 175 
    adapter->flags |= 1024U;
    
#line 176 
    ldv_schedule_work_73_1(& adapter->reset_task);
  }
  else ;
  
#line 178 
  return;
}


#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_misc_irq_disable(struct i40evf_adapter *adapter)
{
  
#line 186 
  struct i40e_hw *hw = & adapter->hw;
  
#line 188 
  writel(0U,(void volatile *)(hw->hw_addr + 23552U));
  
#line 191 
  readl((void const volatile *)(hw->hw_addr + 34816U));
  
#line 193 
  synchronize_irq((adapter->msix_entries)->vector);
  
#line 194 
  return;
}


#line 200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_misc_irq_enable(struct i40evf_adapter *adapter)
{
  
#line 202 
  struct i40e_hw *hw = & adapter->hw;
  
#line 204 
  writel(25U,(void volatile *)(hw->hw_addr + 23552U));
  
#line 206 
  writel(1073741824U,(void volatile *)(hw->hw_addr + 20480U));
  
#line 209 
  readl((void const volatile *)(hw->hw_addr + 34816U));
  
#line 210 
  return;
}


#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_irq_disable(struct i40evf_adapter *adapter)
{
  int i;
  
#line 219 
  struct i40e_hw *hw = & adapter->hw;
  
#line 221 
  if (adapter->msix_entries == (struct msix_entry *)0) 
#line 222 
                                                       goto return_label; else ;
  
#line 224 
  i = 1;
  
#line 224 
  goto ldv_57043;
  ldv_57042: 
#line 225 
  ;
  
#line 225 
  writel(0U,(void volatile *)(hw->hw_addr + (i + 3583) * 4));
  
#line 226 
  synchronize_irq((adapter->msix_entries + i)->vector);
  
#line 224 
  i += 1;
  ldv_57043: 
#line 225 
  ;
  
#line 224 
  if (adapter->num_msix_vectors > i) 
#line 226 
                                     goto ldv_57042; else 
#line 229 
                                                          goto ldv_57044;
  ldv_57044: 
#line 230 
  ;
  
#line 229 
  readl((void const volatile *)(hw->hw_addr + 34816U));
  return_label: 
#line 230 
                return;
}


#line 237  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
void i40evf_irq_enable_queues(struct i40evf_adapter *adapter, u32 mask)
{
  int i;
  
#line 239 
  struct i40e_hw *hw = & adapter->hw;
  
#line 242 
  i = 1;
  
#line 242 
  goto ldv_57052;
  ldv_57051: 
#line 243 
  ;
  
#line 243 
  if (((unsigned int)(1 << (i + -1)) & mask) != 0U) 
#line 244 
                                                    writel(27U,(void volatile *)(hw->hw_addr + (i + 3583) * 4)); else ;
  
#line 242 
  i += 1;
  ldv_57052: 
#line 243 
  ;
  
#line 242 
  if (adapter->num_msix_vectors > i) 
#line 244 
                                     goto ldv_57051; else 
#line 247 
                                                          goto ldv_57053;
  ldv_57053: 
#line 248 
  ;
  
#line 249 
  return;
}


#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_fire_sw_int(struct i40evf_adapter *adapter, u32 mask)
{
  int i;
  uint32_t dyn_ctl;
  
#line 259 
  struct i40e_hw *hw = & adapter->hw;
  
#line 263 
  if ((mask & 1U) != 0U) {
    
#line 264 
    dyn_ctl = readl((void const volatile *)(hw->hw_addr + 23552U));
    
#line 265 
    dyn_ctl |= 30U;
    
#line 268 
    writel(dyn_ctl,(void volatile *)(hw->hw_addr + 23552U));
  }
  else ;
  
#line 270 
  i = 1;
  
#line 270 
  goto ldv_57062;
  ldv_57061: 
#line 271 
  ;
  
#line 271 
  if (((unsigned int)(1 << i) & mask) != 0U) {
    
#line 272 
    dyn_ctl = readl((void const volatile *)(hw->hw_addr + (i + 3583) * 4));
    
#line 273 
    dyn_ctl |= 30U;
    
#line 276 
    writel(dyn_ctl,(void volatile *)(hw->hw_addr + (i + 3583) * 4));
  }
  else ;
  
#line 270 
  i += 1;
  ldv_57062: 
#line 271 
  ;
  
#line 270 
  if (adapter->num_msix_vectors > i) 
#line 272 
                                     goto ldv_57061; else 
#line 275 
                                                          goto ldv_57063;
  ldv_57063: 
#line 276 
  ;
  
#line 277 
  return;
}


#line 285  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
void i40evf_irq_enable(struct i40evf_adapter *adapter, bool flush)
{
  
#line 287 
  struct i40e_hw *hw = & adapter->hw;
  
#line 289 
  i40evf_misc_irq_enable(adapter);
  
#line 290 
  i40evf_irq_enable_queues(adapter,4294967295U);
  
#line 292 
  if ((int)flush != 0) 
#line 293 
                       readl((void const volatile *)(hw->hw_addr + 34816U)); else ;
  
#line 294 
  return;
}


#line 301  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static irqreturn_t i40evf_msix_aq(int irq, void *data)
{
  irqreturn_t __retres;
  u32 val;
  u32 ena_mask;
  
#line 303 
  struct net_device *netdev = (struct net_device *)data;
  
#line 304 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 305 
  struct i40e_hw *hw = & adapter->hw;
  
#line 310 
  val = readl((void const volatile *)(hw->hw_addr + 18432U));
  
#line 311 
  ena_mask = readl((void const volatile *)(hw->hw_addr + 20480U));
  
#line 314 
  val = readl((void const volatile *)(hw->hw_addr + 23552U));
  
#line 315 
  val |= 2U;
  
#line 316 
  writel(val,(void volatile *)(hw->hw_addr + 23552U));
  
#line 319 
  ldv_schedule_work_74(& adapter->adminq_task);
  
#line 321 
  __retres = IRQ_HANDLED;
  
#line 321 
  return __retres;
}


#line 329  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static irqreturn_t i40evf_msix_clean_rings(int irq, void *data)
{
  irqreturn_t __retres;
  
#line 331 
  struct i40e_q_vector *q_vector = (struct i40e_q_vector *)data;
  
#line 333 
  if (q_vector->tx.ring == (struct i40e_ring *)0 && q_vector->rx.ring == (struct i40e_ring *)0) {
    
#line 334 
    __retres = IRQ_HANDLED;
    
#line 334 
    goto return_label;
  }
  else ;
  
#line 336 
  napi_schedule(& q_vector->napi);
  
#line 338 
  __retres = IRQ_HANDLED;
  return_label: 
#line 338 
                return __retres;
}


#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_map_vector_to_rxq(struct i40evf_adapter *adapter, int v_idx, int r_idx)
{
  
#line 350 
  struct i40e_q_vector *q_vector = adapter->q_vector[v_idx];
  
#line 351 
  struct i40e_ring *rx_ring = adapter->rx_rings[r_idx];
  
#line 353 
  rx_ring->q_vector = q_vector;
  
#line 354 
  rx_ring->next = q_vector->rx.ring;
  
#line 355 
  rx_ring->vsi = & adapter->vsi;
  
#line 356 
  q_vector->rx.ring = rx_ring;
  
#line 357 
  q_vector->rx.count = (u16)((int)q_vector->rx.count + 1);
  
#line 358 
  q_vector->rx.latency_range = I40E_LOW_LATENCY;
  
#line 359 
  return;
}


#line 368  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_map_vector_to_txq(struct i40evf_adapter *adapter, int v_idx, int t_idx)
{
  
#line 370 
  struct i40e_q_vector *q_vector = adapter->q_vector[v_idx];
  
#line 371 
  struct i40e_ring *tx_ring = adapter->tx_rings[t_idx];
  
#line 373 
  tx_ring->q_vector = q_vector;
  
#line 374 
  tx_ring->next = q_vector->tx.ring;
  
#line 375 
  tx_ring->vsi = & adapter->vsi;
  
#line 376 
  q_vector->tx.ring = tx_ring;
  
#line 377 
  q_vector->tx.count = (u16)((int)q_vector->tx.count + 1);
  
#line 378 
  q_vector->tx.latency_range = I40E_LOW_LATENCY;
  
#line 379 
  q_vector->num_ringpairs = (u8)((int)q_vector->num_ringpairs + 1);
  
#line 380 
  q_vector->ring_mask |= (unsigned int)(1 << t_idx);
  
#line 381 
  return;
}


#line 393  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_map_rings_to_vectors(struct i40evf_adapter *adapter)
{
  int q_vectors;
  int i;
  int j;
  int rqpv;
  int tqpv;
  
#line 396 
  int v_start = 0;
  
#line 397 
  int rxr_idx = 0;
  
#line 397 
  int txr_idx = 0;
  
#line 398 
  int rxr_remaining = adapter->num_active_queues;
  
#line 399 
  int txr_remaining = adapter->num_active_queues;
  
#line 402 
  int err = 0;
  
#line 404 
  q_vectors = adapter->num_msix_vectors + -1;
  
#line 409 
  if (rxr_remaining * 2 == q_vectors) {
    
#line 410 
    goto ldv_57112;
    ldv_57111: 
#line 411 
    ;
    
#line 411 
    i40evf_map_vector_to_rxq(adapter,v_start,rxr_idx);
    
#line 410 
    v_start += 1;
    
#line 410 
    rxr_idx += 1;
    ldv_57112: 
#line 411 
    ;
    
#line 410 
    if (rxr_idx < rxr_remaining) 
#line 412 
                                 goto ldv_57111; else 
#line 415 
                                                      goto ldv_57113;
    ldv_57113: 
#line 416 
    ;
    
#line 413 
    goto ldv_57115;
    ldv_57114: 
#line 414 
    ;
    
#line 414 
    i40evf_map_vector_to_txq(adapter,v_start,txr_idx);
    
#line 413 
    v_start += 1;
    
#line 413 
    txr_idx += 1;
    ldv_57115: 
#line 414 
    ;
    
#line 413 
    if (txr_idx < txr_remaining) 
#line 415 
                                 goto ldv_57114; else 
#line 418 
                                                      goto ldv_57116;
    ldv_57116: 
#line 419 
    ;
    
#line 415 
    goto out;
  }
  else ;
  
#line 423 
  i = v_start;
  
#line 423 
  goto ldv_57122;
  ldv_57121: 
#line 424 
  ;
  
#line 424 
  rqpv = (((q_vectors - i) + rxr_remaining) + -1) / (q_vectors - i);
  
#line 425 
  j = 0;
  
#line 425 
  goto ldv_57119;
  ldv_57118: 
#line 426 
  ;
  
#line 426 
  i40evf_map_vector_to_rxq(adapter,i,rxr_idx);
  
#line 427 
  rxr_idx += 1;
  
#line 428 
  rxr_remaining -= 1;
  
#line 425 
  j += 1;
  ldv_57119: 
#line 426 
  ;
  
#line 425 
  if (j < rqpv) 
#line 427 
                goto ldv_57118; else 
#line 430 
                                     goto ldv_57120;
  ldv_57120: 
#line 431 
  ;
  
#line 423 
  i += 1;
  ldv_57122: 
#line 424 
  ;
  
#line 423 
  if (i < q_vectors) 
#line 425 
                     goto ldv_57121; else 
#line 428 
                                          goto ldv_57123;
  ldv_57123: 
#line 429 
  ;
  
#line 431 
  i = v_start;
  
#line 431 
  goto ldv_57128;
  ldv_57127: 
#line 432 
  ;
  
#line 432 
  tqpv = (((q_vectors - i) + txr_remaining) + -1) / (q_vectors - i);
  
#line 433 
  j = 0;
  
#line 433 
  goto ldv_57125;
  ldv_57124: 
#line 434 
  ;
  
#line 434 
  i40evf_map_vector_to_txq(adapter,i,txr_idx);
  
#line 435 
  txr_idx += 1;
  
#line 436 
  txr_remaining -= 1;
  
#line 433 
  j += 1;
  ldv_57125: 
#line 434 
  ;
  
#line 433 
  if (j < tqpv) 
#line 435 
                goto ldv_57124; else 
#line 438 
                                     goto ldv_57126;
  ldv_57126: 
#line 439 
  ;
  
#line 431 
  i += 1;
  ldv_57128: 
#line 432 
  ;
  
#line 431 
  if (i < q_vectors) 
#line 433 
                     goto ldv_57127; else 
#line 436 
                                          goto ldv_57129;
  ldv_57129: 
#line 437 
  ;
  out: 
#line 440 
  ;
  
#line 441 
  adapter->aq_required |= 128U;
  
#line 443 
  return err;
}


#line 454  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_request_traffic_irqs(struct i40evf_adapter *adapter, char *basename)
{
  int __retres;
  int vector;
  int err;
  int q_vectors;
  
#line 457 
  int rx_int_idx = 0;
  
#line 457 
  int tx_int_idx = 0;
  
#line 459 
  i40evf_irq_disable(adapter);
  
#line 461 
  q_vectors = adapter->num_msix_vectors + -1;
  
#line 463 
  vector = 0;
  
#line 463 
  goto ldv_57144;
  ldv_57143: 
#line 464 
  ;
  {
    
#line 464 
    struct i40e_q_vector *q_vector = adapter->q_vector[vector];
    
#line 466 
    if (q_vector->tx.ring != (struct i40e_ring *)0 && q_vector->rx.ring != (struct i40e_ring *)0) {
      int tmp;
      
#line 469 
      tmp = rx_int_idx;
      
#line 469 
      rx_int_idx += 1;
      
#line 467 
      ;
      
#line 467 
      ;
      
#line 467 
      ;
      
#line 467 
      snprintf((char *)(& q_vector->name),24UL,"i40evf-%s-%s-%d",basename,(char *)"TxRx",tmp);
      
#line 470 
      tx_int_idx += 1;
    }
    else 
      
#line 471 
      if (q_vector->rx.ring != (struct i40e_ring *)0) {
        int tmp_0;
        
#line 474 
        tmp_0 = rx_int_idx;
        
#line 474 
        rx_int_idx += 1;
        
#line 472 
        ;
        
#line 472 
        ;
        
#line 472 
        ;
        
#line 472 
        snprintf((char *)(& q_vector->name),24UL,"i40evf-%s-%s-%d",basename,(char *)"rx",tmp_0);
      }
      else 
        
#line 475 
        if (q_vector->tx.ring != (struct i40e_ring *)0) {
          int tmp_1;
          
#line 478 
          tmp_1 = tx_int_idx;
          
#line 478 
          tx_int_idx += 1;
          
#line 476 
          ;
          
#line 476 
          ;
          
#line 476 
          ;
          
#line 476 
          snprintf((char *)(& q_vector->name),24UL,"i40evf-%s-%s-%d",basename,(char *)"tx",tmp_1);
        }
        else 
#line 481 
             goto ldv_57140;
    
#line 483 
    err = ldv_request_irq_75((adapter->msix_entries + ((unsigned int)vector + 1U))->vector,& i40evf_msix_clean_rings,0UL,(char const *)(& q_vector->name),(void *)q_vector);
    
#line 489 
    if (err != 0) {
      
#line 490 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s: request_irq failed, error: %d\n","i40evf_request_traffic_irqs",err);
      
#line 493 
      goto free_queue_irqs;
    }
    else ;
    
#line 496 
    irq_set_affinity_hint((adapter->msix_entries + ((unsigned int)vector + 1U))->vector,(struct cpumask const *)q_vector->affinity_mask);
  }
  ldv_57140: 
#line 500 
  ;
  
#line 463 
  vector += 1;
  ldv_57144: 
#line 464 
  ;
  
#line 463 
  if (vector < q_vectors) 
#line 465 
                          goto ldv_57143; else 
#line 468 
                                               goto ldv_57145;
  ldv_57145: 
#line 469 
  ;
  
#line 501 
  __retres = 0;
  
#line 501 
  goto return_label;
  free_queue_irqs: 
#line 503 
  ;
  
#line 504 
  goto ldv_57147;
  ldv_57146: 
#line 505 
  ;
  
#line 505 
  vector -= 1;
  
#line 506 
  irq_set_affinity_hint((adapter->msix_entries + ((unsigned int)vector + 1U))->vector,(struct cpumask const *)0);
  
#line 509 
  ldv_free_irq_76((adapter->msix_entries + ((unsigned int)vector + 1U))->vector,(void *)adapter->q_vector[vector]);
  ldv_57147: 
#line 511 
  ;
  
#line 504 
  if (vector != 0) 
#line 506 
                   goto ldv_57146; else 
#line 509 
                                        goto ldv_57148;
  ldv_57148: 
#line 510 
  ;
  
#line 512 
  __retres = err;
  return_label: 
#line 512 
                return __retres;
}


#line 523  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_request_misc_irq(struct i40evf_adapter *adapter)
{
  int err;
  char const *tmp;
  
#line 525 
  struct net_device *netdev = adapter->netdev;
  
#line 529 
  tmp = dev_name((struct device const *)(& (adapter->pdev)->dev));
  
#line 528 
  ;
  
#line 528 
  snprintf((char *)(& adapter->misc_vector_name),24UL,"i40evf-%s:mbx",tmp);
  
#line 531 
  err = ldv_request_irq_77((adapter->msix_entries)->vector,& i40evf_msix_aq,0UL,(char const *)(& adapter->misc_vector_name),(void *)netdev);
  
#line 534 
  if (err != 0) {
    
#line 535 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"request_irq for %s failed: %d\n",(char *)(& adapter->misc_vector_name),err);
    
#line 538 
    ldv_free_irq_78((adapter->msix_entries)->vector,(void *)netdev);
  }
  else ;
  
#line 540 
  return err;
}


#line 549  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_free_traffic_irqs(struct i40evf_adapter *adapter)
{
  int i;
  int q_vectors;
  
#line 554 
  q_vectors = adapter->num_msix_vectors + -1;
  
#line 556 
  i = 0;
  
#line 556 
  goto ldv_57160;
  ldv_57159: 
#line 557 
  ;
  
#line 557 
  irq_set_affinity_hint((adapter->msix_entries + ((unsigned int)i + 1U))->vector,(struct cpumask const *)0);
  
#line 559 
  ldv_free_irq_79((adapter->msix_entries + ((unsigned int)i + 1U))->vector,(void *)adapter->q_vector[i]);
  
#line 556 
  i += 1;
  ldv_57160: 
#line 557 
  ;
  
#line 556 
  if (i < q_vectors) 
#line 558 
                     goto ldv_57159; else 
#line 561 
                                          goto ldv_57161;
  ldv_57161: 
#line 562 
  ;
  
#line 563 
  return;
}


#line 570  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_free_misc_irq(struct i40evf_adapter *adapter)
{
  
#line 572 
  struct net_device *netdev = adapter->netdev;
  
#line 574 
  ldv_free_irq_80((adapter->msix_entries)->vector,(void *)netdev);
  
#line 575 
  return;
}


#line 583  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_configure_tx(struct i40evf_adapter *adapter)
{
  int i;
  
#line 585 
  struct i40e_hw *hw = & adapter->hw;
  
#line 588 
  i = 0;
  
#line 588 
  goto ldv_57172;
  ldv_57171: 
#line 589 
  ;
  
#line 589 
  (adapter->tx_rings[i])->tail = hw->hw_addr + i * 4;
  
#line 588 
  i += 1;
  ldv_57172: 
#line 589 
  ;
  
#line 588 
  if (adapter->num_active_queues > i) 
#line 590 
                                      goto ldv_57171; else 
#line 593 
                                                           goto ldv_57173;
  ldv_57173: 
#line 594 
  ;
  
#line 595 
  return;
}


#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_configure_rx(struct i40evf_adapter *adapter)
{
  int i;
  int rx_buf_len;
  
#line 600 
  struct i40e_hw *hw = & adapter->hw;
  
#line 601 
  struct net_device *netdev = adapter->netdev;
  
#line 602 
  int max_frame = (int)(netdev->mtu + 18U);
  
#line 607 
  adapter->flags &= 4294967291U;
  
#line 608 
  adapter->flags |= 2U;
  
#line 611 
  if (netdev->mtu > 1500U) 
    
#line 612 
    if ((adapter->flags & 4U) != 0U) 
#line 613 
                                     adapter->flags |= 8U; else 
#line 615 
                                                                adapter->flags &= 4294967287U;
  else 
    
#line 617 
    if ((adapter->flags & 2U) != 0U) 
#line 618 
                                     adapter->flags &= 4294967287U; else 
                                                                    
#line 620 
                                                                    adapter->flags |= 8U;
  
#line 624 
  if ((adapter->flags & 8U) != 0U) 
#line 625 
                                   rx_buf_len = 512;
  else 
    
#line 627 
    if (netdev->mtu <= 1500U) 
#line 628 
                              rx_buf_len = 2048; else 
#line 630 
                                                      rx_buf_len = (max_frame + 1023) & -1024;
  
#line 633 
  i = 0;
  
#line 633 
  goto ldv_57183;
  ldv_57182: 
#line 634 
  ;
  
#line 634 
  (adapter->rx_rings[i])->tail = hw->hw_addr + (i + 2048) * 4;
  
#line 635 
  (adapter->rx_rings[i])->rx_buf_len = (unsigned short)rx_buf_len;
  
#line 633 
  i += 1;
  ldv_57183: 
#line 634 
  ;
  
#line 633 
  if (adapter->num_active_queues > i) 
#line 635 
                                      goto ldv_57182; else 
#line 638 
                                                           goto ldv_57184;
  ldv_57184: 
#line 639 
  ;
  
#line 640 
  return;
}


#line 647  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static struct i40evf_vlan_filter *i40evf_find_vlan(struct i40evf_adapter *adapter, u16 vlan)
{
  struct i40evf_vlan_filter *__retres;
  struct i40evf_vlan_filter *f;
  struct i40evf_vlan_filter *tmp;
  struct i40evf_vlan_filter *tmp_0;
  {
    
#line 651 
    struct list_head const *__mptr = (struct list_head const *)adapter->vlan_filter_list.next;
    
#line 651 
    tmp = (struct i40evf_vlan_filter *)__mptr;
  }
  
#line 651 
  f = tmp;
  
#line 651 
  goto ldv_57195;
  ldv_57194: 
#line 652 
  ;
  
#line 652 
  if ((int)f->vlan == (int)vlan) {
    
#line 653 
    __retres = f;
    
#line 653 
    goto return_label;
  }
  else ;
  {
    
#line 651 
    struct list_head const *__mptr_0 = (struct list_head const *)f->list.next;
    
#line 651 
    tmp_0 = (struct i40evf_vlan_filter *)__mptr_0;
  }
  
#line 651 
  f = tmp_0;
  ldv_57195: 
#line 653 
  ;
  
#line 651 
  if (& f->list != & adapter->vlan_filter_list) 
#line 653 
                                                goto ldv_57194; else 
                                                                  
#line 656 
                                                                  goto ldv_57196;
  ldv_57196: 
#line 657 
  ;
  
#line 655 
  __retres = (struct i40evf_vlan_filter *)0;
  return_label: 
#line 655 
                return __retres;
}


#line 666  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static struct i40evf_vlan_filter *i40evf_add_vlan(struct i40evf_adapter *adapter, u16 vlan)
{
  int tmp;
  
#line 668 
  struct i40evf_vlan_filter *f = (struct i40evf_vlan_filter *)0;
  
#line 669 
  int count = 50;
  
#line 671 
  goto ldv_57205;
  ldv_57204: 
#line 672 
  ;
  
#line 673 
  __const_udelay(4295UL);
  
#line 674 
  count -= 1;
  
#line 674 
  if (count == 0) 
#line 675 
                  goto out; else ;
  ldv_57205: 
#line 676 
  ;
  
#line 671 
  tmp = test_and_set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
  
#line 671 
  if (tmp != 0) 
#line 673 
                goto ldv_57204; else 
#line 676 
                                     goto ldv_57206;
  ldv_57206: 
#line 677 
  ;
  
#line 678 
  f = i40evf_find_vlan(adapter,(unsigned short)((int)vlan));
  
#line 679 
  if (f == (struct i40evf_vlan_filter *)0) {
    
#line 680 
    f = (struct i40evf_vlan_filter *)kzalloc_1(24UL,32U);
    
#line 681 
    if (f == (struct i40evf_vlan_filter *)0) 
#line 682 
                                             goto clearout; else ;
    
#line 684 
    f->vlan = vlan;
    
#line 686 
    INIT_LIST_HEAD(& f->list);
    
#line 687 
    list_add(& f->list,& adapter->vlan_filter_list);
    
#line 688 
    f->add = (_Bool)1;
    
#line 689 
    adapter->aq_required |= 8U;
  }
  else ;
  clearout: 
#line 692 
  ;
  
#line 693 
  set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
  out: 
#line 694 
  ;
  
#line 695 
  return f;
}


#line 703  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_del_vlan(struct i40evf_adapter *adapter, u16 vlan)
{
  struct i40evf_vlan_filter *f;
  int tmp;
  
#line 706 
  int count = 50;
  
#line 708 
  goto ldv_57215;
  ldv_57214: 
#line 709 
  ;
  
#line 710 
  __const_udelay(4295UL);
  
#line 711 
  count -= 1;
  
#line 711 
  if (count == 0) 
#line 712 
                  goto return_label; else ;
  ldv_57215: 
#line 713 
  ;
  
#line 708 
  tmp = test_and_set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
  
#line 708 
  if (tmp != 0) 
#line 710 
                goto ldv_57214; else 
#line 713 
                                     goto ldv_57216;
  ldv_57216: 
#line 714 
  ;
  
#line 715 
  f = i40evf_find_vlan(adapter,(unsigned short)((int)vlan));
  
#line 716 
  if (f != (struct i40evf_vlan_filter *)0) {
    
#line 717 
    f->remove = (_Bool)1;
    
#line 718 
    adapter->aq_required |= 32U;
  }
  else ;
  
#line 720 
  set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
  return_label: 
#line 721 
                return;
}


#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  int __retres;
  struct i40evf_vlan_filter *tmp_0;
  
#line 731 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 733 
  tmp_0 = i40evf_add_vlan(adapter,(unsigned short)((int)vid));
  
#line 733 
  if (tmp_0 == (struct i40evf_vlan_filter *)0) {
    
#line 734 
    __retres = -12;
    
#line 734 
    goto return_label;
  }
  else ;
  
#line 735 
  __retres = 0;
  return_label: 
#line 735 
                return __retres;
}


#line 743  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  int __retres;
  
#line 746 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 748 
  i40evf_del_vlan(adapter,(unsigned short)((int)vid));
  
#line 749 
  __retres = 0;
  
#line 749 
  return __retres;
}


#line 760  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static struct i40evf_mac_filter *i40evf_find_filter(struct i40evf_adapter *adapter, u8 *macaddr)
{
  struct i40evf_mac_filter *__retres;
  struct i40evf_mac_filter *f;
  struct i40evf_mac_filter *tmp;
  bool tmp_0;
  struct i40evf_mac_filter *tmp_1;
  
#line 765 
  if (macaddr == (u8 *)0U) {
    
#line 766 
    __retres = (struct i40evf_mac_filter *)0;
    
#line 766 
    goto return_label;
  }
  else ;
  {
    
#line 768 
    struct list_head const *__mptr = (struct list_head const *)adapter->mac_filter_list.next;
    
#line 768 
    tmp = (struct i40evf_mac_filter *)__mptr;
  }
  
#line 768 
  f = tmp;
  
#line 768 
  goto ldv_57239;
  ldv_57238: 
#line 769 
  ;
  
#line 769 
  tmp_0 = ether_addr_equal((u8 const *)macaddr,(u8 const *)(& f->macaddr));
  
#line 769 
  if ((int)tmp_0 != 0) {
    
#line 770 
    __retres = f;
    
#line 770 
    goto return_label;
  }
  else ;
  {
    
#line 768 
    struct list_head const *__mptr_0 = (struct list_head const *)f->list.next;
    
#line 768 
    tmp_1 = (struct i40evf_mac_filter *)__mptr_0;
  }
  
#line 768 
  f = tmp_1;
  ldv_57239: 
#line 770 
  ;
  
#line 768 
  if (& f->list != & adapter->mac_filter_list) 
#line 770 
                                               goto ldv_57238; else 
#line 773 
                                                                    goto ldv_57240;
  ldv_57240: 
#line 774 
  ;
  
#line 772 
  __retres = (struct i40evf_mac_filter *)0;
  return_label: 
#line 772 
                return __retres;
}


#line 783  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static struct i40evf_mac_filter *i40evf_add_filter(struct i40evf_adapter *adapter, u8 *macaddr)
{
  struct i40evf_mac_filter *__retres;
  struct i40evf_mac_filter *f;
  int tmp;
  
#line 787 
  int count = 50;
  
#line 789 
  if (macaddr == (u8 *)0U) {
    
#line 790 
    __retres = (struct i40evf_mac_filter *)0;
    
#line 790 
    goto return_label;
  }
  else ;
  
#line 792 
  goto ldv_57248;
  ldv_57247: 
#line 793 
  ;
  
#line 794 
  __const_udelay(4295UL);
  
#line 795 
  count -= 1;
  
#line 795 
  if (count == 0) {
    
#line 796 
    __retres = (struct i40evf_mac_filter *)0;
    
#line 796 
    goto return_label;
  }
  else ;
  ldv_57248: 
#line 797 
  ;
  
#line 792 
  tmp = test_and_set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
  
#line 792 
  if (tmp != 0) 
#line 794 
                goto ldv_57247; else 
#line 797 
                                     goto ldv_57249;
  ldv_57249: 
#line 798 
  ;
  
#line 799 
  f = i40evf_find_filter(adapter,macaddr);
  
#line 800 
  if (f == (struct i40evf_mac_filter *)0) {
    
#line 801 
    f = (struct i40evf_mac_filter *)kzalloc_1(24UL,32U);
    
#line 802 
    if (f == (struct i40evf_mac_filter *)0) {
      
#line 803 
      set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
      
#line 805 
      __retres = (struct i40evf_mac_filter *)0;
      
#line 805 
      goto return_label;
    }
    else ;
    
#line 808 
    ether_addr_copy((u8 *)(& f->macaddr),(u8 const *)macaddr);
    
#line 810 
    list_add(& f->list,& adapter->mac_filter_list);
    
#line 811 
    f->add = (_Bool)1;
    
#line 812 
    adapter->aq_required |= 4U;
  }
  else ;
  
#line 815 
  set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
  
#line 816 
  __retres = f;
  return_label: 
#line 816 
                return __retres;
}


#line 826  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_set_mac(struct net_device *netdev, void *p)
{
  int __retres;
  struct i40evf_mac_filter *f;
  int tmp_1;
  bool tmp_0;
  bool tmp_2;
  int tmp_3;
  
#line 828 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 829 
  struct i40e_hw *hw = & adapter->hw;
  
#line 831 
  struct sockaddr *addr = (struct sockaddr *)p;
  
#line 833 
  tmp_0 = is_valid_ether_addr((u8 const *)(& addr->sa_data));
  
#line 833 
  if (tmp_0) 
#line 833 
             tmp_1 = 0; else 
#line 833 
                             tmp_1 = 1;
  
#line 833 
  if (tmp_1) {
    
#line 834 
    __retres = -99;
    
#line 834 
    goto return_label;
  }
  else ;
  
#line 836 
  tmp_2 = ether_addr_equal((u8 const *)netdev->dev_addr,(u8 const *)(& addr->sa_data));
  
#line 836 
  if ((int)tmp_2 != 0) {
    
#line 837 
    __retres = 0;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  f = i40evf_add_filter(adapter,(u8 *)(& addr->sa_data));
  
#line 840 
  if (f != (struct i40evf_mac_filter *)0) {
    
#line 841 
    ether_addr_copy((u8 *)(& hw->mac.addr),(u8 const *)(& addr->sa_data));
    
#line 842 
    ether_addr_copy(netdev->dev_addr,(u8 const *)(& adapter->hw.mac.addr));
  }
  else ;
  
#line 845 
  if (f == (struct i40evf_mac_filter *)0) 
#line 845 
                                          tmp_3 = -12; else 
#line 845 
                                                            tmp_3 = 0;
  
#line 845 
  __retres = tmp_3;
  return_label: 
#line 845 
                return __retres;
}


#line 852  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_set_rx_mode(struct net_device *netdev)
{
  struct i40evf_mac_filter *f;
  struct i40evf_mac_filter *ftmp;
  struct netdev_hw_addr *uca;
  struct netdev_hw_addr *mca;
  struct netdev_hw_addr *tmp_0;
  struct netdev_hw_addr *tmp_1;
  struct netdev_hw_addr *tmp_2;
  struct netdev_hw_addr *tmp_3;
  int tmp_4;
  struct i40evf_mac_filter *tmp_5;
  struct i40evf_mac_filter *tmp_6;
  struct i40evf_mac_filter *tmp_14;
  
#line 854 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 858 
  int count = 50;
  {
    
#line 861 
    struct list_head const *__mptr = (struct list_head const *)netdev->uc.list.next;
    
#line 861 
    tmp_0 = (struct netdev_hw_addr *)__mptr;
  }
  
#line 861 
  uca = tmp_0;
  
#line 861 
  goto ldv_57272;
  ldv_57271: 
#line 862 
  ;
  
#line 862 
  i40evf_add_filter(adapter,(u8 *)(& uca->addr));
  {
    
#line 861 
    struct list_head const *__mptr_0 = (struct list_head const *)uca->list.next;
    
#line 861 
    tmp_1 = (struct netdev_hw_addr *)__mptr_0;
  }
  
#line 861 
  uca = tmp_1;
  ldv_57272: 
#line 863 
  ;
  
#line 861 
  if (& uca->list != & netdev->uc.list) 
#line 863 
                                        goto ldv_57271; else 
#line 866 
                                                             goto ldv_57273;
  ldv_57273: 
#line 867 
  ;
  {
    
#line 864 
    struct list_head const *__mptr_1 = (struct list_head const *)netdev->mc.list.next;
    
#line 864 
    tmp_2 = (struct netdev_hw_addr *)__mptr_1;
  }
  
#line 864 
  mca = tmp_2;
  
#line 864 
  goto ldv_57279;
  ldv_57278: 
#line 865 
  ;
  
#line 865 
  i40evf_add_filter(adapter,(u8 *)(& mca->addr));
  {
    
#line 864 
    struct list_head const *__mptr_2 = (struct list_head const *)mca->list.next;
    
#line 864 
    tmp_3 = (struct netdev_hw_addr *)__mptr_2;
  }
  
#line 864 
  mca = tmp_3;
  ldv_57279: 
#line 866 
  ;
  
#line 864 
  if (& mca->list != & netdev->mc.list) 
#line 866 
                                        goto ldv_57278; else 
#line 869 
                                                             goto ldv_57280;
  ldv_57280: 
#line 870 
  ;
  
#line 868 
  goto ldv_57283;
  ldv_57282: 
#line 869 
  ;
  
#line 870 
  __const_udelay(4295UL);
  
#line 871 
  count -= 1;
  
#line 871 
  if (count == 0) {
    
#line 872 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to get lock in %s\n","i40evf_set_rx_mode");
    
#line 874 
    goto return_label;
  }
  else ;
  ldv_57283: 
#line 876 
  ;
  
#line 868 
  tmp_4 = test_and_set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
  
#line 868 
  if (tmp_4 != 0) 
#line 870 
                  goto ldv_57282; else 
#line 873 
                                       goto ldv_57284;
  ldv_57284: 
#line 874 
  ;
  {
    
#line 878 
    struct list_head const *__mptr_3 = (struct list_head const *)adapter->mac_filter_list.next;
    
#line 878 
    tmp_5 = (struct i40evf_mac_filter *)__mptr_3;
  }
  
#line 878 
  f = tmp_5;
  {
    
#line 878 
    struct list_head const *__mptr_4 = (struct list_head const *)f->list.next;
    
#line 878 
    tmp_6 = (struct i40evf_mac_filter *)__mptr_4;
  }
  
#line 879 
  ftmp = tmp_6;
  
#line 878 
  goto ldv_57307;
  ldv_57306: 
#line 879 
  ;
  {
    bool tmp_13;
    
#line 879 
    bool found = (_Bool)0;
    
#line 881 
    tmp_13 = is_multicast_ether_addr((u8 const *)(& f->macaddr));
    
#line 881 
    if ((int)tmp_13 != 0) {
      struct netdev_hw_addr *tmp_7;
      bool tmp_8;
      struct netdev_hw_addr *tmp_9;
      {
        
#line 882 
        struct list_head const *__mptr_5 = (struct list_head const *)netdev->mc.list.next;
        
#line 882 
        tmp_7 = (struct netdev_hw_addr *)__mptr_5;
      }
      
#line 882 
      mca = tmp_7;
      
#line 882 
      goto ldv_57298;
      ldv_57297: 
#line 883 
      ;
      
#line 883 
      tmp_8 = ether_addr_equal((u8 const *)(& mca->addr),(u8 const *)(& f->macaddr));
      
#line 883 
      if ((int)tmp_8 != 0) {
        
#line 884 
        found = (_Bool)1;
        
#line 885 
        goto ldv_57296;
      }
      else ;
      {
        
#line 882 
        struct list_head const *__mptr_6 = (struct list_head const *)mca->list.next;
        
#line 882 
        tmp_9 = (struct netdev_hw_addr *)__mptr_6;
      }
      
#line 882 
      mca = tmp_9;
      ldv_57298: 
#line 884 
      ;
      
#line 882 
      if (& mca->list != & netdev->mc.list) 
#line 884 
                                            goto ldv_57297; else 
#line 887 
                                                                 goto ldv_57296;
      ldv_57296: 
#line 888 
      ;
    }
    else {
      struct netdev_hw_addr *tmp_10;
      bool tmp_11;
      struct netdev_hw_addr *tmp_12;
      {
        
#line 889 
        struct list_head const *__mptr_7 = (struct list_head const *)netdev->uc.list.next;
        
#line 889 
        tmp_10 = (struct netdev_hw_addr *)__mptr_7;
      }
      
#line 889 
      uca = tmp_10;
      
#line 889 
      goto ldv_57305;
      ldv_57304: 
#line 890 
      ;
      
#line 890 
      tmp_11 = ether_addr_equal((u8 const *)(& uca->addr),(u8 const *)(& f->macaddr));
      
#line 890 
      if ((int)tmp_11 != 0) {
        
#line 891 
        found = (_Bool)1;
        
#line 892 
        goto ldv_57303;
      }
      else ;
      {
        
#line 889 
        struct list_head const *__mptr_8 = (struct list_head const *)uca->list.next;
        
#line 889 
        tmp_12 = (struct netdev_hw_addr *)__mptr_8;
      }
      
#line 889 
      uca = tmp_12;
      ldv_57305: 
#line 891 
      ;
      
#line 889 
      if (& uca->list != & netdev->uc.list) 
#line 891 
                                            goto ldv_57304; else 
#line 894 
                                                                 goto ldv_57303;
      ldv_57303: 
#line 895 
      ;
    }
    
#line 896 
    if ((int)found != 0) {
      
#line 897 
      f->remove = (_Bool)1;
      
#line 898 
      adapter->aq_required |= 16U;
    }
    else ;
  }
  
#line 878 
  f = ftmp;
  {
    
#line 878 
    struct list_head const *__mptr_9 = (struct list_head const *)ftmp->list.next;
    
#line 878 
    tmp_14 = (struct i40evf_mac_filter *)__mptr_9;
  }
  
#line 878 
  ftmp = tmp_14;
  ldv_57307: 
#line 880 
  ;
  
#line 878 
  if (& f->list != & adapter->mac_filter_list) 
#line 880 
                                               goto ldv_57306; else 
#line 883 
                                                                    goto ldv_57308;
  ldv_57308: 
#line 884 
  ;
  
#line 901 
  set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
  return_label: 
#line 902 
                return;
}


#line 908  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_napi_enable_all(struct i40evf_adapter *adapter)
{
  int q_idx;
  struct i40e_q_vector *q_vector;
  
#line 912 
  int q_vectors = adapter->num_msix_vectors + -1;
  
#line 914 
  q_idx = 0;
  
#line 914 
  goto ldv_57317;
  ldv_57316: 
#line 915 
  ;
  {
    struct napi_struct *napi;
    
#line 917 
    q_vector = adapter->q_vector[q_idx];
    
#line 918 
    napi = & q_vector->napi;
    
#line 919 
    napi_enable(napi);
  }
  
#line 914 
  q_idx += 1;
  ldv_57317: 
#line 915 
  ;
  
#line 914 
  if (q_idx < q_vectors) 
#line 916 
                         goto ldv_57316; else 
#line 919 
                                              goto ldv_57318;
  ldv_57318: 
#line 920 
  ;
  
#line 921 
  return;
}


#line 927  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_napi_disable_all(struct i40evf_adapter *adapter)
{
  int q_idx;
  struct i40e_q_vector *q_vector;
  
#line 931 
  int q_vectors = adapter->num_msix_vectors + -1;
  
#line 933 
  q_idx = 0;
  
#line 933 
  goto ldv_57326;
  ldv_57325: 
#line 934 
  ;
  
#line 934 
  q_vector = adapter->q_vector[q_idx];
  
#line 935 
  napi_disable(& q_vector->napi);
  
#line 933 
  q_idx += 1;
  ldv_57326: 
#line 934 
  ;
  
#line 933 
  if (q_idx < q_vectors) 
#line 935 
                         goto ldv_57325; else 
#line 938 
                                              goto ldv_57327;
  ldv_57327: 
#line 939 
  ;
  
#line 940 
  return;
}


#line 943  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_configure(struct i40evf_adapter *adapter)
{
  int i;
  
#line 945 
  struct net_device *netdev = adapter->netdev;
  
#line 948 
  i40evf_set_rx_mode(netdev);
  
#line 950 
  i40evf_configure_tx(adapter);
  
#line 951 
  i40evf_configure_rx(adapter);
  
#line 952 
  adapter->aq_required |= 64U;
  
#line 954 
  i = 0;
  
#line 954 
  goto ldv_57335;
  ldv_57334: 
#line 955 
  ;
  {
    
#line 955 
    struct i40e_ring *ring = adapter->rx_rings[i];
    
#line 957 
    i40evf_alloc_rx_buffers_1buf(ring,(unsigned short)((int)ring->count));
    
#line 958 
    ring->next_to_use = (unsigned short)((unsigned int)ring->count + 65535U);
    
#line 959 
    writel((unsigned int)ring->next_to_use,(void volatile *)ring->tail);
  }
  
#line 954 
  i += 1;
  ldv_57335: 
#line 955 
  ;
  
#line 954 
  if (adapter->num_active_queues > i) 
#line 956 
                                      goto ldv_57334; else 
#line 959 
                                                           goto ldv_57336;
  ldv_57336: 
#line 960 
  ;
  
#line 961 
  return;
}


#line 967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_up_complete(struct i40evf_adapter *adapter)
{
  int __retres;
  
#line 969 
  adapter->state = __I40EVF_RUNNING;
  
#line 970 
  set_bit(6L,(unsigned long volatile *)(& adapter->vsi.state));
  
#line 972 
  i40evf_napi_enable_all(adapter);
  
#line 974 
  adapter->aq_required |= 1U;
  
#line 975 
  ldv_mod_timer_pending_81(& adapter->watchdog_timer,jiffies + 1UL);
  
#line 976 
  __retres = 0;
  
#line 976 
  return __retres;
}


#line 983  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
void i40evf_down(struct i40evf_adapter *adapter)
{
  struct i40evf_mac_filter *f;
  int tmp;
  struct i40evf_mac_filter *tmp_0;
  struct i40evf_mac_filter *tmp_1;
  struct i40evf_mac_filter *tmp_2;
  struct i40evf_mac_filter *tmp_3;
  
#line 985 
  struct net_device *netdev = adapter->netdev;
  
#line 988 
  if (adapter->state == (unsigned int)__I40EVF_DOWN) 
#line 989 
                                                     goto return_label; else ;
  
#line 991 
  goto ldv_57346;
  ldv_57345: 
#line 992 
  ;
  
#line 993 
  usleep_range(500UL,1000UL);
  ldv_57346: 
#line 994 
  ;
  
#line 991 
  tmp = test_and_set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
  
#line 991 
  if (tmp != 0) 
#line 993 
                goto ldv_57345; else 
#line 996 
                                     goto ldv_57347;
  ldv_57347: 
#line 997 
  ;
  
#line 995 
  netif_carrier_off(netdev);
  
#line 996 
  netif_tx_disable(netdev);
  
#line 997 
  i40evf_napi_disable_all(adapter);
  
#line 998 
  i40evf_irq_disable(adapter);
  {
    
#line 1001 
    struct list_head const *__mptr = (struct list_head const *)adapter->mac_filter_list.next;
    
#line 1001 
    tmp_0 = (struct i40evf_mac_filter *)__mptr;
  }
  
#line 1001 
  f = tmp_0;
  
#line 1001 
  goto ldv_57353;
  ldv_57352: 
#line 1002 
  ;
  
#line 1002 
  f->remove = (_Bool)1;
  {
    
#line 1001 
    struct list_head const *__mptr_0 = (struct list_head const *)f->list.next;
    
#line 1001 
    tmp_1 = (struct i40evf_mac_filter *)__mptr_0;
  }
  
#line 1001 
  f = tmp_1;
  ldv_57353: 
#line 1003 
  ;
  
#line 1001 
  if (& f->list != & adapter->mac_filter_list) 
#line 1003 
                                               goto ldv_57352; else 
#line 1006 
                                                                    goto ldv_57354;
  ldv_57354: 
#line 1007 
  ;
  {
    
#line 1005 
    struct list_head const *__mptr_1 = (struct list_head const *)adapter->vlan_filter_list.next;
    
#line 1005 
    tmp_2 = (struct i40evf_mac_filter *)__mptr_1;
  }
  
#line 1005 
  f = tmp_2;
  
#line 1005 
  goto ldv_57360;
  ldv_57359: 
#line 1006 
  ;
  
#line 1006 
  f->remove = (_Bool)1;
  {
    
#line 1005 
    struct list_head const *__mptr_2 = (struct list_head const *)f->list.next;
    
#line 1005 
    tmp_3 = (struct i40evf_mac_filter *)__mptr_2;
  }
  
#line 1005 
  f = tmp_3;
  ldv_57360: 
#line 1007 
  ;
  
#line 1005 
  if (& f->list != & adapter->vlan_filter_list) 
#line 1007 
                                                goto ldv_57359; else 
                                                                  
#line 1010 
                                                                  goto ldv_57361;
  ldv_57361: 
#line 1011 
  ;
  
#line 1008 
  if ((adapter->flags & 256U) == 0U && adapter->state != (unsigned int)__I40EVF_RESETTING) {
    
#line 1011 
    adapter->current_op = I40E_VIRTCHNL_OP_UNKNOWN;
    
#line 1016 
    adapter->aq_required = 16U;
    
#line 1017 
    adapter->aq_required |= 32U;
    
#line 1018 
    adapter->aq_required |= 2U;
  }
  else ;
  
#line 1021 
  set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
  return_label: 
#line 1022 
                return;
}


#line 1034  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_acquire_msix_vectors(struct i40evf_adapter *adapter, int vectors)
{
  int __retres;
  int err;
  int vector_threshold;
  
#line 1043 
  vector_threshold = 2;
  
#line 1050 
  err = pci_enable_msix_range(adapter->pdev,adapter->msix_entries,vector_threshold,vectors);
  
#line 1052 
  if (err < 0) {
    
#line 1053 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Unable to allocate MSI-X interrupts\n");
    
#line 1054 
    kfree((void const *)adapter->msix_entries);
    
#line 1055 
    adapter->msix_entries = (struct msix_entry *)0;
    
#line 1056 
    __retres = err;
    
#line 1056 
    goto return_label;
  }
  else ;
  
#line 1063 
  adapter->num_msix_vectors = err;
  
#line 1064 
  __retres = 0;
  return_label: 
#line 1064 
                return __retres;
}


#line 1081 
void __compiletime_assert_1081(void);


#line 1073  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_free_queues(struct i40evf_adapter *adapter)
{
  int i;
  
#line 1077 
  if (adapter->vsi_res == (struct i40e_virtchnl_vsi_resource *)0) 
#line 1078 
                                                                  goto return_label; else ;
  
#line 1079 
  i = 0;
  
#line 1079 
  goto ldv_57378;
  ldv_57377: 
#line 1080 
  ;
  
#line 1080 
  if (adapter->tx_rings[i] != (struct i40e_ring *)0) {
    {
      
#line 1081 
      bool __cond = (_Bool)0;
      
#line 1081 
      if ((int)__cond != 0) 
#line 1081 
                            __compiletime_assert_1081(); else ;
    }
    
#line 1081 
    kfree_call_rcu(& (adapter->tx_rings[i])->rcu,(void (*)(struct callback_head *))160);
  }
  else ;
  
#line 1082 
  adapter->tx_rings[i] = (struct i40e_ring *)0;
  
#line 1083 
  adapter->rx_rings[i] = (struct i40e_ring *)0;
  
#line 1079 
  i += 1;
  ldv_57378: 
#line 1080 
  ;
  
#line 1079 
  if (adapter->num_active_queues > i) 
#line 1081 
                                      goto ldv_57377; else 
#line 1084 
                                                           goto ldv_57379;
  ldv_57379: 
#line 1085 
  ;
  return_label: 
#line 1086 
                return;
}


#line 1095  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_alloc_queues(struct i40evf_adapter *adapter)
{
  int __retres;
  int i;
  
#line 1099 
  i = 0;
  
#line 1099 
  goto ldv_57388;
  ldv_57387: 
#line 1100 
  ;
  {
    struct i40e_ring *tx_ring;
    struct i40e_ring *rx_ring;
    
#line 1103 
    tx_ring = (struct i40e_ring *)kzalloc_1(8192UL,208U);
    
#line 1104 
    if (tx_ring == (struct i40e_ring *)0) 
#line 1105 
                                          goto err_out; else ;
    
#line 1107 
    tx_ring->queue_index = (unsigned short)i;
    
#line 1108 
    tx_ring->netdev = adapter->netdev;
    
#line 1109 
    tx_ring->dev = & (adapter->pdev)->dev;
    
#line 1110 
    tx_ring->count = (unsigned short)adapter->tx_desc_count;
    
#line 1111 
    adapter->tx_rings[i] = tx_ring;
    
#line 1113 
    rx_ring = tx_ring + 1U;
    
#line 1114 
    rx_ring->queue_index = (unsigned short)i;
    
#line 1115 
    rx_ring->netdev = adapter->netdev;
    
#line 1116 
    rx_ring->dev = & (adapter->pdev)->dev;
    
#line 1117 
    rx_ring->count = (unsigned short)adapter->rx_desc_count;
    
#line 1118 
    adapter->rx_rings[i] = rx_ring;
  }
  
#line 1099 
  i += 1;
  ldv_57388: 
#line 1100 
  ;
  
#line 1099 
  if (adapter->num_active_queues > i) 
#line 1101 
                                      goto ldv_57387; else 
#line 1104 
                                                           goto ldv_57389;
  ldv_57389: 
#line 1105 
  ;
  
#line 1121 
  __retres = 0;
  
#line 1121 
  goto return_label;
  err_out: 
#line 1123 
  ;
  
#line 1124 
  i40evf_free_queues(adapter);
  
#line 1125 
  __retres = -12;
  return_label: 
#line 1125 
                return __retres;
}


#line 1135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_set_interrupt_capability(struct i40evf_adapter *adapter)
{
  int vector;
  int v_budget;
  int tmp_1;
  int tmp_3;
  
#line 1138 
  int pairs = 0;
  
#line 1139 
  int err = 0;
  
#line 1141 
  if (adapter->vsi_res == (struct i40e_virtchnl_vsi_resource *)0) {
    
#line 1142 
    err = -5;
    
#line 1143 
    goto out;
  }
  else ;
  
#line 1145 
  pairs = adapter->num_active_queues;
  {
    unsigned int tmp;
    int tmp_0;
    
#line 1152 
    int __min1 = pairs;
    
#line 1152 
    tmp = cpumask_weight(cpu_online_mask);
    
#line 1152 
    int __min2 = (int)(tmp * 2U);
    
#line 1152 
    if (__min1 < __min2) 
#line 1152 
                         tmp_0 = __min1; else 
#line 1152 
                                              tmp_0 = __min2;
    
#line 1152 
    tmp_1 = tmp_0;
  }
  
#line 1152 
  v_budget = tmp_1 + 1;
  {
    int tmp_2;
    
#line 1153 
    int __min1_0 = v_budget;
    
#line 1153 
    int __min2_0 = (int)(adapter->vf_res)->max_vectors;
    
#line 1153 
    if (__min1_0 < __min2_0) 
#line 1153 
                             tmp_2 = __min1_0; else 
#line 1153 
                                                    tmp_2 = __min2_0;
    
#line 1153 
    tmp_3 = tmp_2;
  }
  
#line 1153 
  v_budget = tmp_3;
  
#line 1155 
  adapter->msix_entries = (struct msix_entry *)kcalloc((unsigned long)v_budget,8UL,208U);
  
#line 1157 
  if (adapter->msix_entries == (struct msix_entry *)0) {
    
#line 1158 
    err = -12;
    
#line 1159 
    goto out;
  }
  else ;
  
#line 1162 
  vector = 0;
  
#line 1162 
  goto ldv_57405;
  ldv_57404: 
#line 1163 
  ;
  
#line 1163 
  (adapter->msix_entries + vector)->entry = (unsigned short)vector;
  
#line 1162 
  vector += 1;
  ldv_57405: 
#line 1163 
  ;
  
#line 1162 
  if (vector < v_budget) 
#line 1164 
                         goto ldv_57404; else 
#line 1167 
                                              goto ldv_57406;
  ldv_57406: 
#line 1168 
  ;
  
#line 1165 
  i40evf_acquire_msix_vectors(adapter,v_budget);
  out: 
#line 1167 
  ;
  
#line 1168 
  (adapter->netdev)->real_num_tx_queues = (unsigned int)pairs;
  
#line 1169 
  return err;
}


#line 1179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_alloc_q_vectors(struct i40evf_adapter *adapter)
{
  int __retres;
  int q_idx;
  int num_q_vectors;
  struct i40e_q_vector *q_vector;
  
#line 1184 
  num_q_vectors = adapter->num_msix_vectors + -1;
  
#line 1186 
  q_idx = 0;
  
#line 1186 
  goto ldv_57415;
  ldv_57414: 
#line 1187 
  ;
  
#line 1187 
  q_vector = (struct i40e_q_vector *)kzalloc_1(416UL,208U);
  
#line 1188 
  if (q_vector == (struct i40e_q_vector *)0) 
#line 1189 
                                             goto err_out; else ;
  
#line 1190 
  q_vector->adapter = adapter;
  
#line 1191 
  q_vector->vsi = & adapter->vsi;
  
#line 1192 
  q_vector->v_idx = q_idx;
  
#line 1193 
  netif_napi_add(adapter->netdev,& q_vector->napi,& i40evf_napi_poll,64);
  
#line 1195 
  adapter->q_vector[q_idx] = q_vector;
  
#line 1186 
  q_idx += 1;
  ldv_57415: 
#line 1187 
  ;
  
#line 1186 
  if (q_idx < num_q_vectors) 
#line 1188 
                             goto ldv_57414; else 
#line 1191 
                                                  goto ldv_57416;
  ldv_57416: 
#line 1192 
  ;
  
#line 1198 
  __retres = 0;
  
#line 1198 
  goto return_label;
  err_out: 
#line 1200 
  ;
  
#line 1201 
  goto ldv_57418;
  ldv_57417: 
#line 1202 
  ;
  
#line 1202 
  q_idx -= 1;
  
#line 1203 
  q_vector = adapter->q_vector[q_idx];
  
#line 1204 
  netif_napi_del(& q_vector->napi);
  
#line 1205 
  kfree((void const *)q_vector);
  
#line 1206 
  adapter->q_vector[q_idx] = (struct i40e_q_vector *)0;
  ldv_57418: 
#line 1207 
  ;
  
#line 1201 
  if (q_idx != 0) 
#line 1203 
                  goto ldv_57417; else 
#line 1206 
                                       goto ldv_57419;
  ldv_57419: 
#line 1207 
  ;
  
#line 1208 
  __retres = -12;
  return_label: 
#line 1208 
                return __retres;
}


#line 1219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_free_q_vectors(struct i40evf_adapter *adapter)
{
  int q_idx;
  int num_q_vectors;
  int napi_vectors;
  
#line 1224 
  num_q_vectors = adapter->num_msix_vectors + -1;
  
#line 1225 
  napi_vectors = adapter->num_active_queues;
  
#line 1227 
  q_idx = 0;
  
#line 1227 
  goto ldv_57428;
  ldv_57427: 
#line 1228 
  ;
  {
    
#line 1228 
    struct i40e_q_vector *q_vector = adapter->q_vector[q_idx];
    
#line 1230 
    adapter->q_vector[q_idx] = (struct i40e_q_vector *)0;
    
#line 1231 
    if (q_idx < napi_vectors) 
#line 1232 
                              netif_napi_del(& q_vector->napi); else ;
    
#line 1233 
    kfree((void const *)q_vector);
  }
  
#line 1227 
  q_idx += 1;
  ldv_57428: 
#line 1228 
  ;
  
#line 1227 
  if (q_idx < num_q_vectors) 
#line 1229 
                             goto ldv_57427; else 
#line 1232 
                                                  goto ldv_57429;
  ldv_57429: 
#line 1233 
  ;
  
#line 1234 
  return;
}


#line 1242  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
void i40evf_reset_interrupt_capability(struct i40evf_adapter *adapter)
{
  
#line 1244 
  pci_disable_msix(adapter->pdev);
  
#line 1245 
  kfree((void const *)adapter->msix_entries);
  
#line 1246 
  adapter->msix_entries = (struct msix_entry *)0;
  
#line 1247 
  return;
}


#line 1254  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
int i40evf_init_interrupt_scheme(struct i40evf_adapter *adapter)
{
  int __retres;
  int err;
  char *tmp;
  
#line 1258 
  err = i40evf_set_interrupt_capability(adapter);
  
#line 1259 
  if (err != 0) {
    
#line 1260 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Unable to setup interrupt capabilities\n");
    
#line 1262 
    goto err_set_interrupt;
  }
  else ;
  
#line 1265 
  err = i40evf_alloc_q_vectors(adapter);
  
#line 1266 
  if (err != 0) {
    
#line 1267 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Unable to allocate memory for queue vectors\n");
    
#line 1269 
    goto err_alloc_q_vectors;
  }
  else ;
  
#line 1272 
  err = i40evf_alloc_queues(adapter);
  
#line 1273 
  if (err != 0) {
    
#line 1274 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Unable to allocate memory for queues\n");
    
#line 1276 
    goto err_alloc_queues;
  }
  else ;
  
#line 1279 
  ;
  
#line 1279 
  if (adapter->num_active_queues > 1) 
#line 1279 
                                      tmp = (char *)"Enabled"; else 
#line 1279 
                                                                    tmp = (char *)"Disabled";
  
#line 1279 
  ;
  
#line 1279 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Multiqueue %s: Queue pair count = %u",tmp,adapter->num_active_queues);
  
#line 1283 
  __retres = 0;
  
#line 1283 
  goto return_label;
  err_alloc_queues: 
#line 1284 
  ;
  
#line 1285 
  i40evf_free_q_vectors(adapter);
  err_alloc_q_vectors: 
#line 1286 
  ;
  
#line 1287 
  i40evf_reset_interrupt_capability(adapter);
  err_set_interrupt: 
#line 1288 
  ;
  
#line 1289 
  __retres = err;
  return_label: 
#line 1289 
                return __retres;
}


#line 1296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_watchdog_timer(unsigned long data)
{
  
#line 1298 
  struct i40evf_adapter *adapter = (struct i40evf_adapter *)data;
  
#line 1300 
  ldv_schedule_work_82(& adapter->watchdog_task);
  
#line 1301 
  return;
}


#line 1308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_watchdog_task(struct work_struct *work)
{
  struct i40evf_adapter *tmp;
  uint32_t rstat_val;
  int tmp_0;
  unsigned int tmp_2;
  {
    
#line 1310 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1310 
    tmp = (struct i40evf_adapter *)__mptr + 18446744073709548928U;
  }
  
#line 1310 
  struct i40evf_adapter *adapter = tmp;
  
#line 1313 
  struct i40e_hw *hw = & adapter->hw;
  
#line 1316 
  tmp_0 = test_and_set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
  
#line 1316 
  if (tmp_0 != 0) 
#line 1317 
                  goto restart_watchdog; else ;
  
#line 1319 
  if ((adapter->flags & 256U) != 0U) {
    unsigned int tmp_1;
    
#line 1320 
    tmp_1 = readl((void const volatile *)(hw->hw_addr + 34816U));
    
#line 1320 
    rstat_val = tmp_1 & 3U;
    
#line 1322 
    if (rstat_val + 4294967295U <= 1U) {
      
#line 1325 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"Hardware came out of reset. Attempting reinit.\n");
      
#line 1326 
      adapter->state = __I40EVF_STARTUP;
      
#line 1327 
      adapter->flags &= 4294967039U;
      
#line 1328 
      ldv_schedule_delayed_work_83(& adapter->init_task,10UL);
      
#line 1329 
      set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
      
#line 1336 
      goto return_label;
    }
    else ;
    
#line 1338 
    adapter->aq_required = 0U;
    
#line 1339 
    adapter->current_op = I40E_VIRTCHNL_OP_UNKNOWN;
    
#line 1340 
    goto watchdog_done;
  }
  else ;
  
#line 1343 
  if (adapter->state <= (unsigned int)__I40EVF_RESETTING || (adapter->flags & 512U) != 0U) 
    
#line 1345 
    goto watchdog_done; else ;
  
#line 1348 
  tmp_2 = readl((void const volatile *)(hw->hw_addr + 34816U));
  
#line 1348 
  rstat_val = tmp_2 & 3U;
  
#line 1350 
  if ((adapter->flags & 512U) == 0U && rstat_val + 4294967295U > 1U) {
    
#line 1353 
    adapter->state = __I40EVF_RESETTING;
    
#line 1354 
    adapter->flags |= 512U;
    
#line 1355 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Hardware reset detected\n");
    
#line 1356 
    ldv_schedule_work_84(& adapter->reset_task);
    
#line 1357 
    adapter->aq_required = 0U;
    
#line 1358 
    adapter->current_op = I40E_VIRTCHNL_OP_UNKNOWN;
    
#line 1359 
    goto watchdog_done;
  }
  else ;
  
#line 1365 
  if (adapter->current_op != (unsigned int)I40E_VIRTCHNL_OP_UNKNOWN) {
    int tmp_4;
    bool tmp_3;
    
#line 1366 
    tmp_3 = i40evf_asq_done(hw);
    
#line 1366 
    if (tmp_3) 
#line 1366 
               tmp_4 = 0; else 
#line 1366 
                               tmp_4 = 1;
    
#line 1366 
    if (tmp_4) {
      {
        
#line 1367 
        struct _ddebug descriptor = {.modname = "i40evf", .function = "i40evf_watchdog_task", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c", .format = "Admin queue timeout\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1367U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1367 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1367 
                                                            __dynamic_dev_dbg(& descriptor,(struct device const *)(& (adapter->pdev)->dev),"Admin queue timeout\n"); else ;
      }
      
#line 1368 
      i40evf_send_api_ver(adapter);
    }
    else ;
    
#line 1370 
    goto watchdog_done;
  }
  else ;
  
#line 1373 
  if ((adapter->aq_required & 2U) != 0U) {
    
#line 1374 
    i40evf_disable_queues(adapter);
    
#line 1375 
    goto watchdog_done;
  }
  else ;
  
#line 1378 
  if ((adapter->aq_required & 128U) != 0U) {
    
#line 1379 
    i40evf_map_queues(adapter);
    
#line 1380 
    goto watchdog_done;
  }
  else ;
  
#line 1383 
  if ((adapter->aq_required & 4U) != 0U) {
    
#line 1384 
    i40evf_add_ether_addrs(adapter);
    
#line 1385 
    goto watchdog_done;
  }
  else ;
  
#line 1388 
  if ((adapter->aq_required & 8U) != 0U) {
    
#line 1389 
    i40evf_add_vlans(adapter);
    
#line 1390 
    goto watchdog_done;
  }
  else ;
  
#line 1393 
  if ((adapter->aq_required & 16U) != 0U) {
    
#line 1394 
    i40evf_del_ether_addrs(adapter);
    
#line 1395 
    goto watchdog_done;
  }
  else ;
  
#line 1398 
  if ((adapter->aq_required & 32U) != 0U) {
    
#line 1399 
    i40evf_del_vlans(adapter);
    
#line 1400 
    goto watchdog_done;
  }
  else ;
  
#line 1403 
  if ((adapter->aq_required & 64U) != 0U) {
    
#line 1404 
    i40evf_configure_queues(adapter);
    
#line 1405 
    goto watchdog_done;
  }
  else ;
  
#line 1408 
  if ((adapter->aq_required & 1U) != 0U) {
    
#line 1409 
    i40evf_enable_queues(adapter);
    
#line 1410 
    goto watchdog_done;
  }
  else ;
  
#line 1413 
  if (adapter->state == (unsigned int)__I40EVF_RUNNING) 
#line 1414 
                                                        i40evf_request_stats(adapter); else ;
  watchdog_done: 
#line 1415 
  ;
  
#line 1416 
  if (adapter->state == (unsigned int)__I40EVF_RUNNING) {
    
#line 1417 
    i40evf_irq_enable_queues(adapter,4294967295U);
    
#line 1418 
    i40evf_fire_sw_int(adapter,255U);
  }
  else 
#line 1420 
       i40evf_fire_sw_int(adapter,1U);
  
#line 1423 
  set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
  restart_watchdog: 
#line 1424 
  ;
  
#line 1425 
  if (adapter->state == (unsigned int)__I40EVF_REMOVE) 
#line 1426 
                                                       goto return_label; else ;
  
#line 1427 
  if (adapter->aq_required != 0U) {
    unsigned long tmp_5;
    
#line 1428 
    tmp_5 = msecs_to_jiffies(20U);
    
#line 1428 
    ;
    
#line 1428 
    ;
    
#line 1428 
    ldv_mod_timer_85(& adapter->watchdog_timer,tmp_5 + jiffies);
  }
  else 
#line 1431 
       ldv_mod_timer_86(& adapter->watchdog_timer,jiffies + 500UL);
  
#line 1432 
  ldv_schedule_work_87(& adapter->adminq_task);
  return_label: 
#line 1433 
                return;
}


#line 1439  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_configure_rss(struct i40evf_adapter *adapter)
{
  u32 rss_key[13U];
  int i;
  int j;
  u64 hena;
  
#line 1442 
  struct i40e_hw *hw = & adapter->hw;
  
#line 1443 
  u32 cqueue = 0U;
  
#line 1444 
  u32 lut = 0U;
  
#line 1449 
  netdev_rss_key_fill((void *)(& rss_key),52UL);
  
#line 1452 
  i = 0;
  
#line 1452 
  goto ldv_57467;
  ldv_57466: 
#line 1453 
  ;
  
#line 1453 
  writel(rss_key[i],(void volatile *)(hw->hw_addr + (i + 13056) * 4));
  
#line 1452 
  i += 1;
  ldv_57467: 
#line 1453 
  ;
  
#line 1452 
  if (i <= 12) 
#line 1454 
               goto ldv_57466; else 
#line 1457 
                                    goto ldv_57468;
  ldv_57468: 
#line 1458 
  ;
  
#line 1456 
  hena = 9223506308269867008ULL;
  
#line 1457 
  writel((unsigned int)hena,(void volatile *)(hw->hw_addr + 50176U));
  
#line 1458 
  writel((unsigned int)(hena >> 32),(void volatile *)(hw->hw_addr + 50180U));
  
#line 1461 
  i = 0;
  
#line 1461 
  goto ldv_57473;
  ldv_57472: 
#line 1462 
  ;
  
#line 1462 
  lut = 0U;
  
#line 1463 
  j = 0;
  
#line 1463 
  goto ldv_57470;
  ldv_57469: 
#line 1464 
  ;
  
#line 1464 
  if ((unsigned int)adapter->num_active_queues == cqueue) 
#line 1465 
                                                          cqueue = 0U; else ;
  
#line 1466 
  lut = (cqueue << j * 8) | lut;
  
#line 1467 
  cqueue += 1U;
  
#line 1463 
  j += 1;
  ldv_57470: 
#line 1464 
  ;
  
#line 1463 
  if (j <= 3) 
#line 1465 
              goto ldv_57469; else 
#line 1468 
                                   goto ldv_57471;
  ldv_57471: 
#line 1469 
  ;
  
#line 1469 
  writel(lut,(void volatile *)(hw->hw_addr + (i + 13312) * 4));
  
#line 1461 
  i += 1;
  ldv_57473: 
#line 1462 
  ;
  
#line 1461 
  if (i <= 15) 
#line 1463 
               goto ldv_57472; else 
#line 1466 
                                    goto ldv_57474;
  ldv_57474: 
#line 1467 
  ;
  
#line 1471 
  readl((void const volatile *)(hw->hw_addr + 34816U));
  
#line 1472 
  return;
}


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_reset_task(struct work_struct *work)
{
  struct i40evf_adapter *tmp;
  struct i40evf_mac_filter *f;
  uint32_t rstat_val;
  int err;
  int tmp_0;
  unsigned int tmp_1;
  unsigned int tmp_2;
  bool tmp_10;
  i40e_status tmp_11;
  i40e_status tmp_12;
  struct i40evf_mac_filter *tmp_13;
  struct i40evf_mac_filter *tmp_14;
  struct i40evf_mac_filter *tmp_15;
  struct i40evf_mac_filter *tmp_16;
  bool tmp_17;
  {
    
#line 1486 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1486 
    tmp = (struct i40evf_adapter *)__mptr + 18446744073709551488U;
  }
  
#line 1486 
  struct i40evf_adapter *adapter = tmp;
  
#line 1489 
  struct net_device *netdev = adapter->netdev;
  
#line 1490 
  struct i40e_hw *hw = & adapter->hw;
  
#line 1493 
  int i = 0;
  
#line 1495 
  goto ldv_57488;
  ldv_57487: 
#line 1496 
  ;
  
#line 1497 
  usleep_range(500UL,1000UL);
  ldv_57488: 
#line 1498 
  ;
  
#line 1495 
  tmp_0 = test_and_set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
  
#line 1495 
  if (tmp_0 != 0) 
#line 1497 
                  goto ldv_57487; else 
#line 1500 
                                       goto ldv_57489;
  ldv_57489: 
#line 1501 
  ;
  
#line 1499 
  i40evf_misc_irq_disable(adapter);
  
#line 1500 
  if ((adapter->flags & 1024U) != 0U) {
    
#line 1501 
    adapter->flags &= 4294966271U;
    
#line 1505 
    i40evf_shutdown_adminq(hw);
    
#line 1506 
    i40evf_init_adminq(hw);
    
#line 1507 
    i40evf_request_reset(adapter);
  }
  else ;
  
#line 1509 
  adapter->flags |= 512U;
  
#line 1512 
  i = 0;
  
#line 1512 
  goto ldv_57492;
  ldv_57491: 
#line 1513 
  ;
  
#line 1513 
  tmp_1 = readl((void const volatile *)(hw->hw_addr + 34816U));
  
#line 1513 
  rstat_val = tmp_1 & 3U;
  
#line 1515 
  if (rstat_val + 4294967295U > 1U) 
#line 1517 
                                    goto ldv_57490; else ;
  
#line 1518 
  usleep_range(500UL,1000UL);
  
#line 1512 
  i += 1;
  ldv_57492: 
#line 1513 
  ;
  
#line 1512 
  if (i <= 499) 
#line 1514 
                goto ldv_57491; else 
#line 1517 
                                     goto ldv_57490;
  ldv_57490: 
#line 1518 
  ;
  
#line 1520 
  if (i == 500) {
    
#line 1521 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Never saw reset\n");
    
#line 1522 
    goto continue_reset;
  }
  else ;
  
#line 1526 
  i = 0;
  
#line 1526 
  goto ldv_57496;
  ldv_57495: 
#line 1527 
  ;
  
#line 1527 
  tmp_2 = readl((void const volatile *)(hw->hw_addr + 34816U));
  
#line 1527 
  rstat_val = tmp_2 & 3U;
  
#line 1529 
  if (rstat_val == 2U) 
#line 1530 
                       goto ldv_57494; else ;
  
#line 1531 
  msleep(10U);
  
#line 1526 
  i += 1;
  ldv_57496: 
#line 1527 
  ;
  
#line 1526 
  if (i <= 499) 
#line 1528 
                goto ldv_57495; else 
#line 1531 
                                     goto ldv_57494;
  ldv_57494: 
#line 1532 
  ;
  
#line 1534 
  msleep(10U);
  
#line 1535 
  if (i == 500) {
    struct i40evf_mac_filter *f_0;
    struct i40evf_mac_filter *ftmp;
    struct i40evf_vlan_filter *fv;
    struct i40evf_vlan_filter *fvtmp;
    bool tmp_3;
    struct i40evf_mac_filter *tmp_4;
    struct i40evf_mac_filter *tmp_5;
    struct i40evf_mac_filter *tmp_6;
    struct i40evf_vlan_filter *tmp_7;
    struct i40evf_vlan_filter *tmp_8;
    struct i40evf_vlan_filter *tmp_9;
    
#line 1540 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Reset never finished (%x)\n",rstat_val);
    
#line 1542 
    adapter->flags |= 256U;
    
#line 1544 
    tmp_3 = netif_running((struct net_device const *)adapter->netdev);
    
#line 1544 
    if ((int)tmp_3 != 0) {
      
#line 1545 
      set_bit(6L,(unsigned long volatile *)(& adapter->vsi.state));
      
#line 1546 
      netif_carrier_off(netdev);
      
#line 1547 
      netif_tx_disable(netdev);
      
#line 1548 
      i40evf_napi_disable_all(adapter);
      
#line 1549 
      i40evf_irq_disable(adapter);
      
#line 1550 
      i40evf_free_traffic_irqs(adapter);
      
#line 1551 
      i40evf_free_all_tx_resources(adapter);
      
#line 1552 
      i40evf_free_all_rx_resources(adapter);
    }
    else ;
    {
      
#line 1556 
      struct list_head const *__mptr_0 = (struct list_head const *)adapter->mac_filter_list.next;
      
#line 1556 
      tmp_4 = (struct i40evf_mac_filter *)__mptr_0;
    }
    
#line 1556 
    f_0 = tmp_4;
    {
      
#line 1556 
      struct list_head const *__mptr_1 = (struct list_head const *)f_0->list.next;
      
#line 1556 
      tmp_5 = (struct i40evf_mac_filter *)__mptr_1;
    }
    
#line 1557 
    ftmp = tmp_5;
    
#line 1556 
    goto ldv_57508;
    ldv_57507: 
#line 1557 
    ;
    
#line 1558 
    list_del(& f_0->list);
    
#line 1559 
    kfree((void const *)f_0);
    
#line 1556 
    f_0 = ftmp;
    {
      
#line 1556 
      struct list_head const *__mptr_2 = (struct list_head const *)ftmp->list.next;
      
#line 1556 
      tmp_6 = (struct i40evf_mac_filter *)__mptr_2;
    }
    
#line 1556 
    ftmp = tmp_6;
    ldv_57508: 
#line 1558 
    ;
    
#line 1556 
    if (& f_0->list != & adapter->mac_filter_list) 
#line 1558 
                                                   goto ldv_57507; else 
                                                                    
#line 1561 
                                                                    goto ldv_57509;
    ldv_57509: 
#line 1562 
    ;
    {
      
#line 1562 
      struct list_head const *__mptr_3 = (struct list_head const *)adapter->vlan_filter_list.next;
      
#line 1562 
      tmp_7 = (struct i40evf_vlan_filter *)__mptr_3;
    }
    
#line 1562 
    fv = tmp_7;
    {
      
#line 1562 
      struct list_head const *__mptr_4 = (struct list_head const *)fv->list.next;
      
#line 1562 
      tmp_8 = (struct i40evf_vlan_filter *)__mptr_4;
    }
    
#line 1563 
    fvtmp = tmp_8;
    
#line 1562 
    goto ldv_57517;
    ldv_57516: 
#line 1563 
    ;
    
#line 1564 
    list_del(& fv->list);
    
#line 1565 
    kfree((void const *)fv);
    
#line 1562 
    fv = fvtmp;
    {
      
#line 1562 
      struct list_head const *__mptr_5 = (struct list_head const *)fvtmp->list.next;
      
#line 1562 
      tmp_9 = (struct i40evf_vlan_filter *)__mptr_5;
    }
    
#line 1562 
    fvtmp = tmp_9;
    ldv_57517: 
#line 1564 
    ;
    
#line 1562 
    if (& fv->list != & adapter->vlan_filter_list) 
#line 1564 
                                                   goto ldv_57516; else 
                                                                    
#line 1567 
                                                                    goto ldv_57518;
    ldv_57518: 
#line 1568 
    ;
    
#line 1568 
    i40evf_free_misc_irq(adapter);
    
#line 1569 
    i40evf_reset_interrupt_capability(adapter);
    
#line 1570 
    i40evf_free_queues(adapter);
    
#line 1571 
    i40evf_free_q_vectors(adapter);
    
#line 1572 
    kfree((void const *)adapter->vf_res);
    
#line 1573 
    i40evf_shutdown_adminq(hw);
    
#line 1574 
    (adapter->netdev)->flags &= 4294967294U;
    
#line 1575 
    set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
    
#line 1576 
    adapter->flags &= 4294966783U;
    
#line 1577 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Reset task did not complete, VF disabled\n");
    
#line 1578 
    goto return_label;
  }
  else ;
  continue_reset: 
#line 1581 
  ;
  
#line 1582 
  tmp_10 = netif_running((struct net_device const *)adapter->netdev);
  
#line 1582 
  if ((int)tmp_10 != 0) {
    
#line 1583 
    netif_carrier_off(netdev);
    
#line 1584 
    netif_tx_stop_all_queues(netdev);
    
#line 1585 
    i40evf_napi_disable_all(adapter);
  }
  else ;
  
#line 1587 
  i40evf_irq_disable(adapter);
  
#line 1589 
  adapter->state = __I40EVF_RESETTING;
  
#line 1590 
  adapter->flags &= 4294966783U;
  
#line 1595 
  i40evf_free_all_rx_resources(adapter);
  
#line 1596 
  i40evf_free_all_tx_resources(adapter);
  
#line 1599 
  tmp_11 = i40evf_shutdown_adminq(hw);
  
#line 1599 
  if (tmp_11 != I40E_SUCCESS) 
#line 1600 
                              dev_warn((struct device const *)(& (adapter->pdev)->dev),"Failed to shut down adminq\n"); else ;
  
#line 1601 
  adapter->current_op = I40E_VIRTCHNL_OP_UNKNOWN;
  
#line 1602 
  tmp_12 = i40evf_init_adminq(hw);
  
#line 1602 
  err = (int)tmp_12;
  
#line 1603 
  if (err != 0) 
#line 1604 
                _dev_info((struct device const *)(& (adapter->pdev)->dev),"Failed to init adminq: %d\n",err); else ;
  
#line 1607 
  i40evf_map_queues(adapter);
  {
    
#line 1610 
    struct list_head const *__mptr_6 = (struct list_head const *)adapter->mac_filter_list.next;
    
#line 1610 
    tmp_13 = (struct i40evf_mac_filter *)__mptr_6;
  }
  
#line 1610 
  f = tmp_13;
  
#line 1610 
  goto ldv_57524;
  ldv_57523: 
#line 1611 
  ;
  
#line 1611 
  f->add = (_Bool)1;
  {
    
#line 1610 
    struct list_head const *__mptr_7 = (struct list_head const *)f->list.next;
    
#line 1610 
    tmp_14 = (struct i40evf_mac_filter *)__mptr_7;
  }
  
#line 1610 
  f = tmp_14;
  ldv_57524: 
#line 1612 
  ;
  
#line 1610 
  if (& f->list != & adapter->mac_filter_list) 
#line 1612 
                                               goto ldv_57523; else 
#line 1615 
                                                                    goto ldv_57525;
  ldv_57525: 
#line 1616 
  ;
  {
    
#line 1614 
    struct list_head const *__mptr_8 = (struct list_head const *)adapter->vlan_filter_list.next;
    
#line 1614 
    tmp_15 = (struct i40evf_mac_filter *)__mptr_8;
  }
  
#line 1614 
  f = tmp_15;
  
#line 1614 
  goto ldv_57531;
  ldv_57530: 
#line 1615 
  ;
  
#line 1615 
  f->add = (_Bool)1;
  {
    
#line 1614 
    struct list_head const *__mptr_9 = (struct list_head const *)f->list.next;
    
#line 1614 
    tmp_16 = (struct i40evf_mac_filter *)__mptr_9;
  }
  
#line 1614 
  f = tmp_16;
  ldv_57531: 
#line 1616 
  ;
  
#line 1614 
  if (& f->list != & adapter->vlan_filter_list) 
#line 1616 
                                                goto ldv_57530; else 
                                                                  
#line 1619 
                                                                  goto ldv_57532;
  ldv_57532: 
#line 1620 
  ;
  
#line 1617 
  adapter->aq_required = 4U;
  
#line 1618 
  adapter->aq_required |= 8U;
  
#line 1619 
  set_bit(0L,(unsigned long volatile *)(& adapter->crit_section));
  
#line 1620 
  i40evf_misc_irq_enable(adapter);
  
#line 1622 
  ldv_mod_timer_88(& adapter->watchdog_timer,jiffies + 2UL);
  
#line 1624 
  tmp_17 = netif_running((struct net_device const *)adapter->netdev);
  
#line 1624 
  if ((int)tmp_17 != 0) {
    
#line 1626 
    err = i40evf_setup_all_tx_resources(adapter);
    
#line 1627 
    if (err != 0) 
#line 1628 
                  goto reset_err; else ;
    
#line 1631 
    err = i40evf_setup_all_rx_resources(adapter);
    
#line 1632 
    if (err != 0) 
#line 1633 
                  goto reset_err; else ;
    
#line 1635 
    i40evf_configure(adapter);
    
#line 1637 
    err = i40evf_up_complete(adapter);
    
#line 1638 
    if (err != 0) 
#line 1639 
                  goto reset_err; else ;
    
#line 1641 
    i40evf_irq_enable(adapter,(_Bool)1);
  }
  else 
#line 1643 
       adapter->state = __I40EVF_DOWN;
  
#line 1646 
  goto return_label;
  reset_err: 
#line 1647 
  ;
  
#line 1648 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"failed to allocate resources during reinit\n");
  
#line 1649 
  i40evf_close(adapter->netdev);
  return_label: 
#line 1650 
                return;
}


#line 1656  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_adminq_task(struct work_struct *work)
{
  struct i40evf_adapter *tmp;
  struct i40e_arq_event_info event;
  struct i40e_virtchnl_msg *v_msg;
  i40e_status ret;
  u32 val;
  u32 oldval;
  u16 pending;
  {
    
#line 1659 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1659 
    tmp = (struct i40evf_adapter *)__mptr + 18446744073709551408U;
  }
  
#line 1658 
  struct i40evf_adapter *adapter = tmp;
  
#line 1660 
  struct i40e_hw *hw = & adapter->hw;
  
#line 1667 
  if ((adapter->flags & 256U) != 0U) 
#line 1668 
                                     goto out; else ;
  
#line 1670 
  event.buf_len = (unsigned short)4096U;
  
#line 1671 
  event.msg_buf = (u8 *)kzalloc_1((unsigned long)event.buf_len,208U);
  
#line 1672 
  if (event.msg_buf == (u8 *)0U) 
#line 1673 
                                 goto out; else ;
  
#line 1675 
  v_msg = (struct i40e_virtchnl_msg *)(& event.desc);
  ldv_57549: 
#line 1676 
  ;
  
#line 1677 
  ret = i40evf_clean_arq_element(hw,& event,& pending);
  
#line 1678 
  if (ret != I40E_SUCCESS || v_msg->v_opcode == (unsigned int)I40E_VIRTCHNL_OP_UNKNOWN) 
    
#line 1679 
    goto ldv_57548; else ;
  
#line 1681 
  i40evf_virtchnl_completion(adapter,v_msg->v_opcode,v_msg->v_retval,event.msg_buf,(unsigned short)((int)event.msg_len));
  
#line 1684 
  if ((unsigned int)pending != 0U) 
#line 1685 
                                   memset((void *)event.msg_buf,0,4096UL); else ;
  
#line 1686 
  if ((unsigned int)pending != 0U) 
#line 1688 
                                   goto ldv_57549; else 
#line 1691 
                                                        goto ldv_57548;
  ldv_57548: 
#line 1692 
  ;
  
#line 1688 
  if ((adapter->flags & 1536U) != 0U || adapter->state == (unsigned int)__I40EVF_RESETTING) 
    
#line 1691 
    goto freedom; else ;
  
#line 1694 
  val = readl((void const volatile *)(hw->hw_addr + hw->aq.arq.len));
  
#line 1695 
  oldval = val;
  
#line 1696 
  if ((val & 268435456U) != 0U) {
    
#line 1697 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"ARQ VF Error detected\n");
    
#line 1698 
    val &= 4026531839U;
  }
  else ;
  
#line 1700 
  if ((val & 536870912U) != 0U) {
    
#line 1701 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"ARQ Overflow Error detected\n");
    
#line 1702 
    val &= 3758096383U;
  }
  else ;
  
#line 1704 
  if ((val & 1073741824U) != 0U) {
    
#line 1705 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"ARQ Critical Error detected\n");
    
#line 1706 
    val &= 3221225471U;
  }
  else ;
  
#line 1708 
  if (oldval != val) 
#line 1709 
                     writel(val,(void volatile *)(hw->hw_addr + hw->aq.arq.len)); else ;
  
#line 1711 
  val = readl((void const volatile *)(hw->hw_addr + hw->aq.asq.len));
  
#line 1712 
  oldval = val;
  
#line 1713 
  if ((val & 268435456U) != 0U) {
    
#line 1714 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"ASQ VF Error detected\n");
    
#line 1715 
    val &= 4026531839U;
  }
  else ;
  
#line 1717 
  if ((val & 536870912U) != 0U) {
    
#line 1718 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"ASQ Overflow Error detected\n");
    
#line 1719 
    val &= 3758096383U;
  }
  else ;
  
#line 1721 
  if ((val & 1073741824U) != 0U) {
    
#line 1722 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"ASQ Critical Error detected\n");
    
#line 1723 
    val &= 3221225471U;
  }
  else ;
  
#line 1725 
  if (oldval != val) 
#line 1726 
                     writel(val,(void volatile *)(hw->hw_addr + hw->aq.asq.len)); else ;
  freedom: 
#line 1728 
  ;
  
#line 1729 
  kfree((void const *)event.msg_buf);
  out: 
#line 1730 
  ;
  
#line 1732 
  i40evf_misc_irq_enable(adapter);
  
#line 1733 
  return;
}


#line 1741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
void i40evf_free_all_tx_resources(struct i40evf_adapter *adapter)
{
  int i;
  
#line 1745 
  i = 0;
  
#line 1745 
  goto ldv_57556;
  ldv_57555: 
#line 1746 
  ;
  
#line 1746 
  if ((adapter->tx_rings[i])->desc != (void *)0) 
#line 1747 
                                                 i40evf_free_tx_resources(adapter->tx_rings[i]); else ;
  
#line 1745 
  i += 1;
  ldv_57556: 
#line 1746 
  ;
  
#line 1745 
  if (adapter->num_active_queues > i) 
#line 1747 
                                      goto ldv_57555; else 
#line 1750 
                                                           goto ldv_57557;
  ldv_57557: 
#line 1751 
  ;
  
#line 1752 
  return;
}


#line 1760  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_setup_all_tx_resources(struct i40evf_adapter *adapter)
{
  int i;
  
#line 1762 
  int err = 0;
  
#line 1764 
  i = 0;
  
#line 1764 
  goto ldv_57567;
  ldv_57566: 
#line 1765 
  ;
  
#line 1765 
  (adapter->tx_rings[i])->count = (unsigned short)adapter->tx_desc_count;
  
#line 1766 
  err = i40evf_setup_tx_descriptors(adapter->tx_rings[i]);
  
#line 1767 
  if (err == 0) 
#line 1768 
                goto ldv_57563; else ;
  
#line 1769 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Allocation for Tx Queue %u failed\n","i40evf_setup_all_tx_resources",i);
  
#line 1772 
  goto ldv_57565;
  ldv_57563: 
#line 1773 
  ;
  
#line 1764 
  i += 1;
  ldv_57567: 
#line 1765 
  ;
  
#line 1764 
  if (adapter->num_active_queues > i) 
#line 1766 
                                      goto ldv_57566; else 
#line 1769 
                                                           goto ldv_57565;
  ldv_57565: 
#line 1770 
  ;
  
#line 1775 
  return err;
}


#line 1788  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_setup_all_rx_resources(struct i40evf_adapter *adapter)
{
  int i;
  
#line 1790 
  int err = 0;
  
#line 1792 
  i = 0;
  
#line 1792 
  goto ldv_57577;
  ldv_57576: 
#line 1793 
  ;
  
#line 1793 
  (adapter->rx_rings[i])->count = (unsigned short)adapter->rx_desc_count;
  
#line 1794 
  err = i40evf_setup_rx_descriptors(adapter->rx_rings[i]);
  
#line 1795 
  if (err == 0) 
#line 1796 
                goto ldv_57573; else ;
  
#line 1797 
  dev_err((struct device const *)(& (adapter->pdev)->dev),"%s: Allocation for Rx Queue %u failed\n","i40evf_setup_all_rx_resources",i);
  
#line 1800 
  goto ldv_57575;
  ldv_57573: 
#line 1801 
  ;
  
#line 1792 
  i += 1;
  ldv_57577: 
#line 1793 
  ;
  
#line 1792 
  if (adapter->num_active_queues > i) 
#line 1794 
                                      goto ldv_57576; else 
#line 1797 
                                                           goto ldv_57575;
  ldv_57575: 
#line 1798 
  ;
  
#line 1802 
  return err;
}


#line 1811  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
void i40evf_free_all_rx_resources(struct i40evf_adapter *adapter)
{
  int i;
  
#line 1815 
  i = 0;
  
#line 1815 
  goto ldv_57583;
  ldv_57582: 
#line 1816 
  ;
  
#line 1816 
  if ((adapter->rx_rings[i])->desc != (void *)0) 
#line 1817 
                                                 i40evf_free_rx_resources(adapter->rx_rings[i]); else ;
  
#line 1815 
  i += 1;
  ldv_57583: 
#line 1816 
  ;
  
#line 1815 
  if (adapter->num_active_queues > i) 
#line 1817 
                                      goto ldv_57582; else 
#line 1820 
                                                           goto ldv_57584;
  ldv_57584: 
#line 1821 
  ;
  
#line 1822 
  return;
}


#line 1832  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_open(struct net_device *netdev)
{
  int __retres;
  int err;
  
#line 1834 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1837 
  if ((adapter->flags & 256U) != 0U) {
    
#line 1838 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Unable to open device due to PF driver failure.\n");
    
#line 1839 
    __retres = -5;
    
#line 1839 
    goto return_label;
  }
  else ;
  
#line 1841 
  if (adapter->state != (unsigned int)__I40EVF_DOWN || adapter->aq_required != 0U) {
    
#line 1842 
    __retres = -16;
    
#line 1842 
    goto return_label;
  }
  else ;
  
#line 1845 
  err = i40evf_setup_all_tx_resources(adapter);
  
#line 1846 
  if (err != 0) 
#line 1847 
                goto err_setup_tx; else ;
  
#line 1850 
  err = i40evf_setup_all_rx_resources(adapter);
  
#line 1851 
  if (err != 0) 
#line 1852 
                goto err_setup_rx; else ;
  
#line 1855 
  err = i40evf_request_traffic_irqs(adapter,(char *)(& netdev->name));
  
#line 1856 
  if (err != 0) 
#line 1857 
                goto err_req_irq; else ;
  
#line 1859 
  i40evf_configure(adapter);
  
#line 1861 
  err = i40evf_up_complete(adapter);
  
#line 1862 
  if (err != 0) 
#line 1863 
                goto err_req_irq; else ;
  
#line 1865 
  i40evf_irq_enable(adapter,(_Bool)1);
  
#line 1867 
  __retres = 0;
  
#line 1867 
  goto return_label;
  err_req_irq: 
#line 1869 
  ;
  
#line 1870 
  i40evf_down(adapter);
  
#line 1871 
  i40evf_free_traffic_irqs(adapter);
  err_setup_rx: 
#line 1872 
  ;
  
#line 1873 
  i40evf_free_all_rx_resources(adapter);
  err_setup_tx: 
#line 1874 
  ;
  
#line 1875 
  i40evf_free_all_tx_resources(adapter);
  
#line 1877 
  __retres = err;
  return_label: 
#line 1877 
                return __retres;
}


#line 1891  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_close(struct net_device *netdev)
{
  int __retres;
  
#line 1893 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1895 
  if (adapter->state <= (unsigned int)__I40EVF_DOWN) {
    
#line 1896 
    __retres = 0;
    
#line 1896 
    goto return_label;
  }
  else ;
  
#line 1899 
  set_bit(6L,(unsigned long volatile *)(& adapter->vsi.state));
  
#line 1901 
  i40evf_down(adapter);
  
#line 1902 
  adapter->state = __I40EVF_DOWN;
  
#line 1903 
  i40evf_free_traffic_irqs(adapter);
  
#line 1905 
  __retres = 0;
  return_label: 
#line 1905 
                return __retres;
}


#line 1915  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static struct net_device_stats *i40evf_get_stats(struct net_device *netdev)
{
  struct net_device_stats *__retres;
  
#line 1917 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1920 
  __retres = & adapter->net_stats;
  
#line 1920 
  return __retres;
}


#line 1930  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_change_mtu(struct net_device *netdev, int new_mtu)
{
  int __retres;
  
#line 1932 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1933 
  int max_frame = new_mtu + 18;
  
#line 1935 
  if (new_mtu <= 67 || max_frame > 9728) {
    
#line 1936 
    __retres = -22;
    
#line 1936 
    goto return_label;
  }
  else ;
  
#line 1938 
  netdev->mtu = (unsigned int)new_mtu;
  
#line 1939 
  adapter->flags |= 1024U;
  
#line 1940 
  ldv_schedule_work_89(& adapter->reset_task);
  
#line 1942 
  __retres = 0;
  return_label: 
#line 1942 
                return __retres;
}


#line 1945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static struct net_device_ops const i40evf_netdev_ops = {.ndo_init = (int (*)(struct net_device *))0, .ndo_uninit = (void (*)(struct net_device *))0, .ndo_open = & i40evf_open, .ndo_stop = & i40evf_close, .ndo_start_xmit = & i40evf_xmit_frame, .ndo_select_queue = (u16 (*)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)))0, .ndo_change_rx_flags = (void (*)(struct net_device *, int ))0, .ndo_set_rx_mode = & i40evf_set_rx_mode, .ndo_set_mac_address = & i40evf_set_mac, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = (int (*)(struct net_device *, struct ifreq *, int ))0, .ndo_set_config = (int (*)(struct net_device *, struct ifmap *))0, .ndo_change_mtu = & i40evf_change_mtu, .ndo_neigh_setup = (int (*)(struct net_device *, struct neigh_parms *))0, .ndo_tx_timeout = & i40evf_tx_timeout, .ndo_get_stats64 = (struct rtnl_link_stats64 *(*)(struct net_device *, struct rtnl_link_stats64 *))0, .ndo_get_stats = & i40evf_get_stats, .ndo_vlan_rx_add_vid = & i40evf_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & i40evf_vlan_rx_kill_vid, .ndo_poll_controller = (void (*)(struct net_device *))0, .ndo_netpoll_setup = (int (*)(struct net_device *, struct netpoll_info *))0, .ndo_netpoll_cleanup = (void (*)(struct net_device *))0, .ndo_busy_poll = (int (*)(struct napi_struct *))0, .ndo_set_vf_mac = (int (*)(struct net_device *, int , u8 *))0, .ndo_set_vf_vlan = (int (*)(struct net_device *, int , u16 , u8 ))0, .ndo_set_vf_rate = (int (*)(struct net_device *, int , int , int ))0, .ndo_set_vf_spoofchk = (int (*)(struct net_device *, int , bool ))0, .ndo_get_vf_config = (int (*)(struct net_device *, int , struct ifla_vf_info *))0, .ndo_set_vf_link_state = (int (*)(struct net_device *, int , int ))0, .ndo_get_vf_stats = (int (*)(struct net_device *, int , struct ifla_vf_stats *))0, .ndo_set_vf_port = (int (*)(struct net_device *, int , struct nlattr **))0, .ndo_get_vf_port = (int (*)(struct net_device *, int , struct sk_buff *))0, .ndo_set_vf_rss_query_en = (int (*)(struct net_device *, int , bool ))0, .ndo_setup_tc = (int (*)(struct net_device *, u8 ))0, .ndo_fcoe_enable = (int (*)(struct net_device *))0, .ndo_fcoe_disable = (int (*)(struct net_device *))0, .ndo_fcoe_ddp_setup = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_ddp_done = (int (*)(struct net_device *, u16 ))0, .ndo_fcoe_ddp_target = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_get_hbainfo = (int (*)(struct net_device *, struct netdev_fcoe_hbainfo *))0, .ndo_fcoe_get_wwn = (int (*)(struct net_device *, u64 *, int ))0, .ndo_rx_flow_steer = (int (*)(struct net_device *, struct sk_buff const *, u16 , u32 ))0, .ndo_add_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_del_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_fix_features = (netdev_features_t (*)(struct net_device *, netdev_features_t ))0, .ndo_set_features = (int (*)(struct net_device *, netdev_features_t ))0, .ndo_neigh_construct = (int (*)(struct neighbour *))0, .ndo_neigh_destroy = (void (*)(struct neighbour *))0, .ndo_fdb_add = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ))0, .ndo_fdb_del = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ))0, .ndo_fdb_dump = (int (*)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ))0, .ndo_bridge_setlink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_bridge_getlink = (int (*)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ))0, .ndo_bridge_dellink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_change_carrier = (int (*)(struct net_device *, bool ))0, .ndo_get_phys_port_id = (int (*)(struct net_device *, struct netdev_phys_item_id *))0, .ndo_get_phys_port_name = (int (*)(struct net_device *, char *, size_t ))0, .ndo_add_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_del_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_dfwd_add_station = (void *(*)(struct net_device *, struct net_device *))0, .ndo_dfwd_del_station = (void (*)(struct net_device *, void *))0, .ndo_dfwd_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *, void *))0, .ndo_get_lock_subclass = (int (*)(struct net_device *))0, .ndo_features_check = (netdev_features_t (*)(struct sk_buff *, struct net_device *, netdev_features_t ))0, .ndo_set_tx_maxrate = (int (*)(struct net_device *, int , u32 ))0, .ndo_get_iflink = (int (*)(struct net_device const *))0};

#line 1965  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_check_reset_complete(struct i40e_hw *hw)
{
  int __retres;
  u32 rstat;
  int i;
  unsigned int tmp;
  
#line 1970 
  i = 0;
  
#line 1970 
  goto ldv_57614;
  ldv_57613: 
#line 1971 
  ;
  
#line 1971 
  tmp = readl((void const volatile *)(hw->hw_addr + 34816U));
  
#line 1971 
  rstat = tmp & 3U;
  
#line 1973 
  if (rstat + 4294967295U <= 1U) {
    
#line 1975 
    __retres = 0;
    
#line 1975 
    goto return_label;
  }
  else ;
  
#line 1976 
  usleep_range(10UL,20UL);
  
#line 1970 
  i += 1;
  ldv_57614: 
#line 1971 
  ;
  
#line 1970 
  if (i <= 99) 
#line 1972 
               goto ldv_57613; else 
#line 1975 
                                    goto ldv_57615;
  ldv_57615: 
#line 1976 
  ;
  
#line 1978 
  __retres = -16;
  return_label: 
#line 1978 
                return __retres;
}


#line 1993  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_init_task(struct work_struct *work)
{
  struct i40evf_adapter *tmp;
  struct i40evf_mac_filter *f;
  int i;
  int err;
  int bufsz;
  int tmp_6;
  bool tmp_5;
  int tmp_10;
  unsigned long tmp_11;
  {
    
#line 1995 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1995 
    tmp = (struct i40evf_adapter *)__mptr + 18446744073709551328U;
  }
  
#line 1995 
  struct i40evf_adapter *adapter = tmp;
  
#line 1998 
  struct net_device *netdev = adapter->netdev;
  
#line 2000 
  struct i40e_hw *hw = & adapter->hw;
  
#line 2001 
  struct pci_dev *pdev = adapter->pdev;
  
#line 2004 
  switch ((unsigned int)adapter->state) {
    i40e_status tmp_0;
    i40e_status tmp_1;
    int tmp_3;
    bool tmp_2;
    case (unsigned int)0: 
#line 2005 
    ;
    
#line 2007 
    adapter->flags &= 4294967039U;
    
#line 2008 
    adapter->flags &= 4294966783U;
    
#line 2009 
    tmp_0 = i40e_set_mac_type(hw);
    
#line 2009 
    err = (int)tmp_0;
    
#line 2010 
    if (err != 0) {
      
#line 2011 
      dev_err((struct device const *)(& pdev->dev),"Failed to set MAC type (%d)\n",err);
      
#line 2013 
      goto err;
    }
    else ;
    
#line 2015 
    err = i40evf_check_reset_complete(hw);
    
#line 2016 
    if (err != 0) {
      
#line 2017 
      _dev_info((struct device const *)(& pdev->dev),"Device is still in reset (%d), retrying\n",err);
      
#line 2019 
      goto err;
    }
    else ;
    
#line 2021 
    hw->aq.num_arq_entries = (unsigned short)32U;
    
#line 2022 
    hw->aq.num_asq_entries = (unsigned short)32U;
    
#line 2023 
    hw->aq.arq_buf_size = (unsigned short)4096U;
    
#line 2024 
    hw->aq.asq_buf_size = (unsigned short)4096U;
    
#line 2026 
    tmp_1 = i40evf_init_adminq(hw);
    
#line 2026 
    err = (int)tmp_1;
    
#line 2027 
    if (err != 0) {
      
#line 2028 
      dev_err((struct device const *)(& pdev->dev),"Failed to init Admin Queue (%d)\n",err);
      
#line 2030 
      goto err;
    }
    else ;
    
#line 2032 
    err = i40evf_send_api_ver(adapter);
    
#line 2033 
    if (err != 0) {
      
#line 2034 
      dev_err((struct device const *)(& pdev->dev),"Unable to send to PF (%d)\n",err);
      
#line 2035 
      i40evf_shutdown_adminq(hw);
      
#line 2036 
      goto err;
    }
    else ;
    
#line 2038 
    adapter->state = __I40EVF_INIT_VERSION_CHECK;
    
#line 2039 
    goto restart;
    case (unsigned int)2: 
#line 2040 
    ;
    
#line 2041 
    tmp_2 = i40evf_asq_done(hw);
    
#line 2041 
    if (tmp_2) 
#line 2041 
               tmp_3 = 0; else 
#line 2041 
                               tmp_3 = 1;
    
#line 2041 
    if (tmp_3) {
      
#line 2042 
      dev_err((struct device const *)(& pdev->dev),"Admin queue command never completed\n");
      
#line 2043 
      i40evf_shutdown_adminq(hw);
      
#line 2044 
      adapter->state = __I40EVF_STARTUP;
      
#line 2045 
      goto err;
    }
    else ;
    
#line 2049 
    err = i40evf_verify_api_ver(adapter);
    
#line 2050 
    if (err != 0) {
      
#line 2051 
      if (err == -57) 
#line 2052 
                      err = i40evf_send_api_ver(adapter); else ;
      
#line 2053 
      goto err;
    }
    else ;
    
#line 2055 
    err = i40evf_send_vf_config_msg(adapter);
    
#line 2056 
    if (err != 0) {
      
#line 2057 
      dev_err((struct device const *)(& pdev->dev),"Unable to send config request (%d)\n",err);
      
#line 2059 
      goto err;
    }
    else ;
    
#line 2061 
    adapter->state = __I40EVF_INIT_GET_RESOURCES;
    
#line 2062 
    goto restart;
    case (unsigned int)3: 
#line 2063 
    ;
    
#line 2065 
    if (adapter->vf_res == (struct i40e_virtchnl_vf_resource *)0) {
      
#line 2066 
      bufsz = 84;
      
#line 2069 
      adapter->vf_res = (struct i40e_virtchnl_vf_resource *)kzalloc_1((unsigned long)bufsz,208U);
      
#line 2070 
      if (adapter->vf_res == (struct i40e_virtchnl_vf_resource *)0) 
#line 2071 
                                                                    goto err; else ;
    }
    else ;
    
#line 2073 
    err = i40evf_get_vf_config(adapter);
    
#line 2074 
    if (err == -57) {
      
#line 2075 
      err = i40evf_send_vf_config_msg(adapter);
      
#line 2076 
      goto err;
    }
    else ;
    
#line 2078 
    if (err != 0) {
      
#line 2079 
      dev_err((struct device const *)(& pdev->dev),"Unable to get VF config (%d)\n",err);
      
#line 2081 
      goto err_alloc;
    }
    else ;
    
#line 2083 
    adapter->state = __I40EVF_INIT_SW;
    
#line 2084 
    goto ldv_57635;
    default: 
#line 2085 
    ;
    
#line 2086 
    goto err_alloc;
  }
  ldv_57635: 
#line 2089 
  ;
  
#line 2089 
  i = 0;
  
#line 2089 
  goto ldv_57638;
  ldv_57637: 
#line 2090 
  ;
  
#line 2090 
  if ((adapter->vf_res)->vsi_res[i].vsi_type == (unsigned int)I40E_VSI_SRIOV) 
    
#line 2091 
    adapter->vsi_res = & (adapter->vf_res)->vsi_res[i]; else ;
  
#line 2089 
  i += 1;
  ldv_57638: 
#line 2090 
  ;
  
#line 2089 
  if ((int)(adapter->vf_res)->num_vsis > i) 
#line 2091 
                                            goto ldv_57637; else 
#line 2094 
                                                                 goto ldv_57639;
  ldv_57639: 
#line 2095 
  ;
  
#line 2093 
  if (adapter->vsi_res == (struct i40e_virtchnl_vsi_resource *)0) {
    
#line 2094 
    dev_err((struct device const *)(& pdev->dev),"No LAN VSI found\n");
    
#line 2095 
    goto err_alloc;
  }
  else ;
  
#line 2098 
  adapter->flags |= 1U;
  
#line 2100 
  netdev->netdev_ops = & i40evf_netdev_ops;
  
#line 2101 
  i40evf_set_ethtool_ops(netdev);
  
#line 2102 
  netdev->watchdog_timeo = 1250;
  
#line 2103 
  netdev->features |= 18254741555ULL;
  
#line 2113 
  if (((adapter->vf_res)->vf_offload_flags & 65536U) != 0U) {
    
#line 2115 
    netdev->vlan_features = netdev->features;
    
#line 2116 
    netdev->features |= 896ULL;
  }
  else ;
  
#line 2122 
  netdev->hw_features |= netdev->features;
  
#line 2123 
  netdev->hw_features &= 18446744056529682431ULL;
  
#line 2125 
  tmp_5 = is_valid_ether_addr((u8 const *)(& adapter->hw.mac.addr));
  
#line 2125 
  if (tmp_5) 
#line 2125 
             tmp_6 = 0; else 
#line 2125 
                             tmp_6 = 1;
  
#line 2125 
  if (tmp_6) {
    
#line 2126 
    _dev_info((struct device const *)(& pdev->dev),"Invalid MAC address %pM, using random\n",(u8 *)(& adapter->hw.mac.addr));
    
#line 2128 
    eth_random_addr((u8 *)(& adapter->hw.mac.addr));
  }
  else ;
  
#line 2130 
  ether_addr_copy(netdev->dev_addr,(u8 const *)(& adapter->hw.mac.addr));
  
#line 2131 
  ether_addr_copy((u8 *)(& netdev->perm_addr),(u8 const *)(& adapter->hw.mac.addr));
  
#line 2133 
  f = (struct i40evf_mac_filter *)kzalloc_1(24UL,32U);
  
#line 2134 
  if (f == (struct i40evf_mac_filter *)0) 
#line 2135 
                                          goto err_sw_init; else ;
  
#line 2137 
  ether_addr_copy((u8 *)(& f->macaddr),(u8 const *)(& adapter->hw.mac.addr));
  
#line 2138 
  f->add = (_Bool)1;
  
#line 2139 
  adapter->aq_required |= 4U;
  
#line 2141 
  list_add(& f->list,& adapter->mac_filter_list);
  {
    struct lock_class_key __key;
    
#line 2143 
    init_timer_key(& adapter->watchdog_timer,0U,"(&adapter->watchdog_timer)",& __key);
  }
  
#line 2144 
  adapter->watchdog_timer.function = & i40evf_watchdog_timer;
  
#line 2145 
  adapter->watchdog_timer.data = (unsigned long)adapter;
  
#line 2146 
  ldv_mod_timer_90(& adapter->watchdog_timer,jiffies + 1UL);
  {
    unsigned int tmp_8;
    int tmp_9;
    
#line 2148 
    int __min1 = (int)(adapter->vsi_res)->num_queue_pairs;
    
#line 2148 
    tmp_8 = cpumask_weight(cpu_online_mask);
    
#line 2148 
    int __min2 = (int)tmp_8;
    
#line 2148 
    if (__min1 < __min2) 
#line 2148 
                         tmp_9 = __min1; else 
#line 2148 
                                              tmp_9 = __min2;
    
#line 2148 
    tmp_10 = tmp_9;
  }
  
#line 2148 
  adapter->num_active_queues = tmp_10;
  
#line 2151 
  adapter->tx_desc_count = 512U;
  
#line 2152 
  adapter->rx_desc_count = 512U;
  
#line 2153 
  err = i40evf_init_interrupt_scheme(adapter);
  
#line 2154 
  if (err != 0) 
#line 2155 
                goto err_sw_init; else ;
  
#line 2156 
  i40evf_map_rings_to_vectors(adapter);
  
#line 2157 
  i40evf_configure_rss(adapter);
  
#line 2158 
  err = i40evf_request_misc_irq(adapter);
  
#line 2159 
  if (err != 0) 
#line 2160 
                goto err_sw_init; else ;
  
#line 2162 
  netif_carrier_off(netdev);
  
#line 2164 
  adapter->vsi.id = (adapter->vsi_res)->vsi_id;
  
#line 2165 
  adapter->vsi.seid = (adapter->vsi_res)->vsi_id;
  
#line 2166 
  adapter->vsi.back = adapter;
  
#line 2167 
  adapter->vsi.base_vector = 1;
  
#line 2168 
  adapter->vsi.work_limit = (unsigned short)256U;
  
#line 2169 
  adapter->vsi.rx_itr_setting = (unsigned short)32892U;
  
#line 2171 
  adapter->vsi.tx_itr_setting = (unsigned short)33012U;
  
#line 2173 
  adapter->vsi.netdev = adapter->netdev;
  
#line 2175 
  if (! adapter->netdev_registered) {
    
#line 2176 
    err = ldv_register_netdev_91(netdev);
    
#line 2177 
    if (err != 0) 
#line 2178 
                  goto err_register; else ;
  }
  else ;
  
#line 2181 
  adapter->netdev_registered = (_Bool)1;
  
#line 2183 
  netif_tx_stop_all_queues(netdev);
  
#line 2185 
  _dev_info((struct device const *)(& pdev->dev),"MAC address: %pM\n",(u8 *)(& adapter->hw.mac.addr));
  
#line 2186 
  if ((netdev->features & 16384ULL) != 0ULL) 
#line 2187 
                                             _dev_info((struct device const *)(& pdev->dev),"GRO is enabled\n"); else ;
  
#line 2189 
  _dev_info((struct device const *)(& pdev->dev),"%s\n",(char const *)(& i40evf_driver_string));
  
#line 2190 
  adapter->state = __I40EVF_DOWN;
  
#line 2191 
  set_bit(6L,(unsigned long volatile *)(& adapter->vsi.state));
  
#line 2192 
  i40evf_misc_irq_enable(adapter);
  
#line 2193 
  goto return_label;
  restart: 
#line 2194 
  ;
  
#line 2195 
  tmp_11 = msecs_to_jiffies(50U);
  
#line 2195 
  ;
  
#line 2195 
  ldv_schedule_delayed_work_92(& adapter->init_task,tmp_11);
  
#line 2197 
  goto return_label;
  err_register: 
#line 2199 
  ;
  
#line 2200 
  i40evf_free_misc_irq(adapter);
  err_sw_init: 
#line 2201 
  ;
  
#line 2202 
  i40evf_reset_interrupt_capability(adapter);
  err_alloc: 
#line 2203 
  ;
  
#line 2204 
  kfree((void const *)adapter->vf_res);
  
#line 2205 
  adapter->vf_res = (struct i40e_virtchnl_vf_resource *)0;
  err: 
#line 2206 
  ;
  
#line 2208 
  adapter->aq_wait_count += 1U;
  
#line 2208 
  if (adapter->aq_wait_count > 10U) {
    
#line 2209 
    dev_err((struct device const *)(& pdev->dev),"Failed to communicate with PF; giving up\n");
    
#line 2210 
    adapter->flags |= 256U;
    
#line 2211 
    goto return_label;
  }
  else ;
  
#line 2213 
  ldv_schedule_delayed_work_93(& adapter->init_task,750UL);
  return_label: 
#line 2214 
                return;
}


#line 2220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_shutdown(struct pci_dev *pdev)
{
  bool tmp_1;
  
#line 2222 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 2223 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2225 
  netif_device_detach(netdev);
  
#line 2227 
  tmp_1 = netif_running((struct net_device const *)netdev);
  
#line 2227 
  if ((int)tmp_1 != 0) 
#line 2228 
                       i40evf_close(netdev); else ;
  
#line 2231 
  adapter->state = __I40EVF_REMOVE;
  
#line 2232 
  adapter->aq_required = 0U;
  
#line 2235 
  pci_save_state(pdev);
  
#line 2238 
  pci_disable_device(pdev);
  
#line 2239 
  return;
}


#line 2252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_probe(struct pci_dev *pdev, struct pci_device_id const *ent)
{
  int __retres;
  struct net_device *netdev;
  int err;
  void *tmp_1;
  resource_size_t tmp_0;
  
#line 2255 
  struct i40evf_adapter *adapter = (struct i40evf_adapter *)0;
  
#line 2256 
  struct i40e_hw *hw = (struct i40e_hw *)0;
  
#line 2259 
  err = pci_enable_device(pdev);
  
#line 2260 
  if (err != 0) {
    
#line 2261 
    __retres = err;
    
#line 2261 
    goto return_label;
  }
  else ;
  
#line 2263 
  err = dma_set_mask_and_coherent(& pdev->dev,18446744073709551615ULL);
  
#line 2264 
  if (err != 0) {
    
#line 2265 
    err = dma_set_mask_and_coherent(& pdev->dev,4294967295ULL);
    
#line 2266 
    if (err != 0) {
      
#line 2267 
      dev_err((struct device const *)(& pdev->dev),"DMA configuration failed: 0x%x\n",err);
      
#line 2269 
      goto err_dma;
    }
    else ;
  }
  else ;
  
#line 2273 
  err = pci_request_regions(pdev,(char const *)(& i40evf_driver_name));
  
#line 2274 
  if (err != 0) {
    
#line 2275 
    dev_err((struct device const *)(& pdev->dev),"pci_request_regions failed 0x%x\n",err);
    
#line 2277 
    goto err_pci_reg;
  }
  else ;
  
#line 2280 
  pci_enable_pcie_error_reporting(pdev);
  
#line 2282 
  pci_set_master(pdev);
  
#line 2284 
  netdev = ldv_alloc_etherdev_mqs_94(3464,8U,8U);
  
#line 2286 
  if (netdev == (struct net_device *)0) {
    
#line 2287 
    err = -12;
    
#line 2288 
    goto err_alloc_etherdev;
  }
  else ;
  
#line 2291 
  netdev->dev.parent = & pdev->dev;
  
#line 2293 
  pci_set_drvdata(pdev,(void *)netdev);
  
#line 2294 
  adapter = (struct i40evf_adapter *)netdev_priv((struct net_device const *)netdev);
  
#line 2296 
  adapter->netdev = netdev;
  
#line 2297 
  adapter->pdev = pdev;
  
#line 2299 
  hw = & adapter->hw;
  
#line 2300 
  hw->back = (void *)adapter;
  
#line 2302 
  adapter->msg_enable = (unsigned short)7U;
  
#line 2303 
  adapter->state = __I40EVF_STARTUP;
  
#line 2306 
  pci_save_state(pdev);
  
#line 2309 
  if (pdev->resource[0].start != 0ULL || pdev->resource[0].end != pdev->resource[0].start) 
    
#line 2309 
    tmp_0 = (pdev->resource[0].end - pdev->resource[0].start) + 1ULL; else 
                                                                    
#line 2309 
                                                                    tmp_0 = 0ULL;
  
#line 2308 
  ;
  
#line 2308 
  tmp_1 = ioremap(pdev->resource[0].start,(unsigned long)tmp_0);
  
#line 2308 
  hw->hw_addr = (u8 *)tmp_1;
  
#line 2310 
  if (hw->hw_addr == (u8 *)0U) {
    
#line 2311 
    err = -5;
    
#line 2312 
    goto err_ioremap;
  }
  else ;
  
#line 2314 
  hw->vendor_id = pdev->vendor;
  
#line 2315 
  hw->device_id = pdev->device;
  
#line 2316 
  pci_read_config_byte((struct pci_dev const *)pdev,8,& hw->revision_id);
  
#line 2317 
  hw->subsystem_vendor_id = pdev->subsystem_vendor;
  
#line 2318 
  hw->subsystem_device_id = pdev->subsystem_device;
  
#line 2319 
  hw->bus.device = (unsigned short)((unsigned int)((unsigned short)(pdev->devfn >> 3)) & 31U);
  
#line 2320 
  hw->bus.func = (unsigned short)((unsigned int)((unsigned short)pdev->devfn) & 7U);
  
#line 2322 
  INIT_LIST_HEAD(& adapter->mac_filter_list);
  
#line 2323 
  INIT_LIST_HEAD(& adapter->vlan_filter_list);
  {
    struct lock_class_key __key;
    
#line 2325 
    __init_work(& adapter->reset_task,0);
    
#line 2325 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 2325 
    adapter->reset_task.data = __constr_expr_37;
    
#line 2325 
    lockdep_init_map(& adapter->reset_task.lockdep_map,"(&adapter->reset_task)",& __key,0);
    
#line 2325 
    INIT_LIST_HEAD(& adapter->reset_task.entry);
    
#line 2325 
    adapter->reset_task.func = & i40evf_reset_task;
  }
  {
    struct lock_class_key __key_0;
    
#line 2326 
    __init_work(& adapter->adminq_task,0);
    
#line 2326 
    atomic_long_t __constr_expr_38 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 2326 
    adapter->adminq_task.data = __constr_expr_38;
    
#line 2326 
    lockdep_init_map(& adapter->adminq_task.lockdep_map,"(&adapter->adminq_task)",& __key_0,0);
    
#line 2326 
    INIT_LIST_HEAD(& adapter->adminq_task.entry);
    
#line 2326 
    adapter->adminq_task.func = & i40evf_adminq_task;
  }
  {
    struct lock_class_key __key_1;
    
#line 2327 
    __init_work(& adapter->watchdog_task,0);
    
#line 2327 
    atomic_long_t __constr_expr_39 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 2327 
    adapter->watchdog_task.data = __constr_expr_39;
    
#line 2327 
    lockdep_init_map(& adapter->watchdog_task.lockdep_map,"(&adapter->watchdog_task)",& __key_1,0);
    
#line 2327 
    INIT_LIST_HEAD(& adapter->watchdog_task.entry);
    
#line 2327 
    adapter->watchdog_task.func = & i40evf_watchdog_task;
  }
  {
    struct lock_class_key __key_2;
    
#line 2328 
    __init_work(& adapter->init_task.work,0);
    
#line 2328 
    atomic_long_t __constr_expr_40 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 2328 
    adapter->init_task.work.data = __constr_expr_40;
    
#line 2328 
    lockdep_init_map(& adapter->init_task.work.lockdep_map,"(&(&adapter->init_task)->work)",& __key_2,0);
    
#line 2328 
    INIT_LIST_HEAD(& adapter->init_task.work.entry);
    
#line 2328 
    adapter->init_task.work.func = & i40evf_init_task;
  }
  {
    struct lock_class_key __key_3;
    
#line 2328 
    init_timer_key(& adapter->init_task.timer,2097152U,"(&(&adapter->init_task)->timer)",& __key_3);
  }
  
#line 2328 
  adapter->init_task.timer.function = & delayed_work_timer_fn;
  
#line 2328 
  adapter->init_task.timer.data = (unsigned long)(& adapter->init_task);
  
#line 2329 
  ldv_schedule_delayed_work_95(& adapter->init_task,10UL);
  
#line 2331 
  __retres = 0;
  
#line 2331 
  goto return_label;
  err_ioremap: 
#line 2333 
  ;
  
#line 2334 
  ldv_free_netdev_96(netdev);
  err_alloc_etherdev: 
#line 2335 
  ;
  
#line 2336 
  pci_release_regions(pdev);
  err_pci_reg: 
#line 2337 
  ;
  err_dma: 
#line 2338 
  ;
  
#line 2339 
  pci_disable_device(pdev);
  
#line 2340 
  __retres = err;
  return_label: 
#line 2340 
                return __retres;
}


#line 2351  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_suspend(struct pci_dev *pdev, pm_message_t state)
{
  int __retres;
  bool tmp_1;
  
#line 2353 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 2354 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2355 
  int retval = 0;
  
#line 2357 
  netif_device_detach(netdev);
  
#line 2359 
  tmp_1 = netif_running((struct net_device const *)netdev);
  
#line 2359 
  if ((int)tmp_1 != 0) {
    
#line 2360 
    rtnl_lock();
    
#line 2361 
    i40evf_down(adapter);
    
#line 2362 
    rtnl_unlock();
  }
  else ;
  
#line 2364 
  i40evf_free_misc_irq(adapter);
  
#line 2365 
  i40evf_reset_interrupt_capability(adapter);
  
#line 2367 
  retval = pci_save_state(pdev);
  
#line 2368 
  if (retval != 0) {
    
#line 2369 
    __retres = retval;
    
#line 2369 
    goto return_label;
  }
  else ;
  
#line 2371 
  pci_disable_device(pdev);
  
#line 2373 
  __retres = 0;
  return_label: 
#line 2373 
                return __retres;
}


#line 2382  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_resume(struct pci_dev *pdev)
{
  int __retres;
  u32 err;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  
#line 2384 
  struct i40evf_adapter *adapter = pci_get_drvdata(pdev);
  
#line 2385 
  struct net_device *netdev = adapter->netdev;
  
#line 2388 
  pci_set_power_state(pdev,0);
  
#line 2389 
  pci_restore_state(pdev);
  
#line 2393 
  pci_save_state(pdev);
  
#line 2395 
  tmp_0 = pci_enable_device_mem(pdev);
  
#line 2395 
  err = (unsigned int)tmp_0;
  
#line 2396 
  if (err != 0U) {
    
#line 2397 
    dev_err((struct device const *)(& pdev->dev),"Cannot enable PCI device from suspend.\n");
    
#line 2398 
    __retres = (int)err;
    
#line 2398 
    goto return_label;
  }
  else ;
  
#line 2400 
  pci_set_master(pdev);
  
#line 2402 
  rtnl_lock();
  
#line 2403 
  tmp_1 = i40evf_set_interrupt_capability(adapter);
  
#line 2403 
  err = (unsigned int)tmp_1;
  
#line 2404 
  if (err != 0U) {
    
#line 2405 
    dev_err((struct device const *)(& pdev->dev),"Cannot enable MSI-X interrupts.\n");
    
#line 2406 
    __retres = (int)err;
    
#line 2406 
    goto return_label;
  }
  else ;
  
#line 2408 
  tmp_2 = i40evf_request_misc_irq(adapter);
  
#line 2408 
  err = (unsigned int)tmp_2;
  
#line 2409 
  rtnl_unlock();
  
#line 2410 
  if (err != 0U) {
    
#line 2411 
    dev_err((struct device const *)(& pdev->dev),"Cannot get interrupt vector.\n");
    
#line 2412 
    __retres = (int)err;
    
#line 2412 
    goto return_label;
  }
  else ;
  
#line 2415 
  ldv_schedule_work_97(& adapter->reset_task);
  
#line 2417 
  netif_device_attach(netdev);
  
#line 2419 
  __retres = (int)err;
  return_label: 
#line 2419 
                return __retres;
}


#line 2432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_remove(struct pci_dev *pdev)
{
  struct i40evf_mac_filter *f;
  struct i40evf_mac_filter *ftmp;
  int tmp_2;
  bool tmp_1;
  struct i40evf_mac_filter *tmp_3;
  struct i40evf_mac_filter *tmp_4;
  struct i40evf_mac_filter *tmp_5;
  struct i40evf_mac_filter *tmp_6;
  struct i40evf_mac_filter *tmp_7;
  struct i40evf_mac_filter *tmp_8;
  
#line 2434 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 2435 
  struct i40evf_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2437 
  struct i40e_hw *hw = & adapter->hw;
  
#line 2439 
  cancel_delayed_work_sync(& adapter->init_task);
  
#line 2440 
  cancel_work_sync(& adapter->reset_task);
  
#line 2442 
  if ((int)adapter->netdev_registered != 0) {
    
#line 2443 
    ldv_unregister_netdev_98(netdev);
    
#line 2444 
    adapter->netdev_registered = (_Bool)0;
  }
  else ;
  
#line 2448 
  adapter->state = __I40EVF_REMOVE;
  
#line 2449 
  adapter->aq_required = 0U;
  
#line 2450 
  i40evf_request_reset(adapter);
  
#line 2451 
  msleep(20U);
  
#line 2453 
  tmp_1 = i40evf_asq_done(hw);
  
#line 2453 
  if (tmp_1) 
#line 2453 
             tmp_2 = 0; else 
#line 2453 
                             tmp_2 = 1;
  
#line 2453 
  if (tmp_2) {
    
#line 2454 
    i40evf_request_reset(adapter);
    
#line 2455 
    msleep(20U);
  }
  else ;
  
#line 2458 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    
#line 2459 
    i40evf_misc_irq_disable(adapter);
    
#line 2460 
    i40evf_free_misc_irq(adapter);
    
#line 2461 
    i40evf_reset_interrupt_capability(adapter);
    
#line 2462 
    i40evf_free_q_vectors(adapter);
  }
  else ;
  
#line 2465 
  if (adapter->watchdog_timer.function != (void (*)(unsigned long ))0) 
    
#line 2466 
    ldv_del_timer_sync_99(& adapter->watchdog_timer); else ;
  
#line 2468 
  flush_scheduled_work();
  
#line 2470 
  if ((unsigned int)hw->aq.asq.count != 0U) 
#line 2471 
                                            i40evf_shutdown_adminq(hw); else ;
  
#line 2473 
  iounmap((void volatile *)hw->hw_addr);
  
#line 2474 
  pci_release_regions(pdev);
  
#line 2476 
  i40evf_free_all_tx_resources(adapter);
  
#line 2477 
  i40evf_free_all_rx_resources(adapter);
  
#line 2478 
  i40evf_free_queues(adapter);
  
#line 2479 
  kfree((void const *)adapter->vf_res);
  {
    
#line 2483 
    struct list_head const *__mptr = (struct list_head const *)adapter->mac_filter_list.next;
    
#line 2483 
    tmp_3 = (struct i40evf_mac_filter *)__mptr;
  }
  
#line 2483 
  f = tmp_3;
  {
    
#line 2483 
    struct list_head const *__mptr_0 = (struct list_head const *)f->list.next;
    
#line 2483 
    tmp_4 = (struct i40evf_mac_filter *)__mptr_0;
  }
  
#line 2484 
  ftmp = tmp_4;
  
#line 2483 
  goto ldv_57700;
  ldv_57699: 
#line 2484 
  ;
  
#line 2484 
  list_del(& f->list);
  
#line 2485 
  kfree((void const *)f);
  
#line 2483 
  f = ftmp;
  {
    
#line 2483 
    struct list_head const *__mptr_1 = (struct list_head const *)ftmp->list.next;
    
#line 2483 
    tmp_5 = (struct i40evf_mac_filter *)__mptr_1;
  }
  
#line 2483 
  ftmp = tmp_5;
  ldv_57700: 
#line 2485 
  ;
  
#line 2483 
  if (& f->list != & adapter->mac_filter_list) 
#line 2485 
                                               goto ldv_57699; else 
#line 2488 
                                                                    goto ldv_57701;
  ldv_57701: 
#line 2489 
  ;
  {
    
#line 2487 
    struct list_head const *__mptr_2 = (struct list_head const *)adapter->vlan_filter_list.next;
    
#line 2487 
    tmp_6 = (struct i40evf_mac_filter *)__mptr_2;
  }
  
#line 2487 
  f = tmp_6;
  {
    
#line 2487 
    struct list_head const *__mptr_3 = (struct list_head const *)f->list.next;
    
#line 2487 
    tmp_7 = (struct i40evf_mac_filter *)__mptr_3;
  }
  
#line 2488 
  ftmp = tmp_7;
  
#line 2487 
  goto ldv_57709;
  ldv_57708: 
#line 2488 
  ;
  
#line 2488 
  list_del(& f->list);
  
#line 2489 
  kfree((void const *)f);
  
#line 2487 
  f = ftmp;
  {
    
#line 2487 
    struct list_head const *__mptr_4 = (struct list_head const *)ftmp->list.next;
    
#line 2487 
    tmp_8 = (struct i40evf_mac_filter *)__mptr_4;
  }
  
#line 2487 
  ftmp = tmp_8;
  ldv_57709: 
#line 2489 
  ;
  
#line 2487 
  if (& f->list != & adapter->vlan_filter_list) 
#line 2489 
                                                goto ldv_57708; else 
                                                                  
#line 2492 
                                                                  goto ldv_57710;
  ldv_57710: 
#line 2493 
  ;
  
#line 2492 
  ldv_free_netdev_100(netdev);
  
#line 2494 
  pci_disable_pcie_error_reporting(pdev);
  
#line 2496 
  pci_disable_device(pdev);
  
#line 2497 
  return;
}


#line 2499  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static struct pci_driver i40evf_driver = {.node = {.next = (struct list_head *)0, .prev = (struct list_head *)0}, .name = (char const *)(& i40evf_driver_name), .id_table = (struct pci_device_id const *)(& i40evf_pci_tbl), .probe = & i40evf_probe, .remove = & i40evf_remove, .suspend = & i40evf_suspend, .suspend_late = (int (*)(struct pci_dev *, pm_message_t ))0, .resume_early = (int (*)(struct pci_dev *))0, .resume = & i40evf_resume, .shutdown = & i40evf_shutdown, .sriov_configure = (int (*)(struct pci_dev *, int ))0, .err_handler = (struct pci_error_handlers const *)0, .driver = {.name = (char const *)0, .bus = (struct bus_type *)0, .owner = (struct module *)0, .mod_name = (char const *)0, .suppress_bind_attrs = (_Bool)0, .probe_type = 0, .of_match_table = (struct of_device_id const *)0, .acpi_match_table = (struct acpi_device_id const *)0, .probe = (int (*)(struct device *))0, .remove = (int (*)(struct device *))0, .shutdown = (void (*)(struct device *))0, .suspend = (int (*)(struct device *, pm_message_t ))0, .resume = (int (*)(struct device *))0, .groups = (struct attribute_group const **)0, .pm = (struct dev_pm_ops const *)0, .p = (struct driver_private *)0}, .dynids = {.lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 0U, .owner_cpu = 0U, .owner = (void *)0, .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char const *)0, .cpu = 0, .ip = 0UL}}}}, .list = {.next = (struct list_head *)0, .prev = (struct list_head *)0}}};

#line 2517  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static int i40evf_init_module(void)
{
  int ret;
  
#line 2521 
  printk("\001",(char const *)(& i40evf_driver_string),(char const *)(& i40evf_driver_version));
  
#line 2524 
  printk("\001",(char const *)(& i40evf_copyright));
  
#line 2526 
  ret = ldv___pci_register_driver_101(& i40evf_driver,& __this_module,"i40evf");
  
#line 2527 
  return ret;
}


#line 2538  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40evf_main.c"
static void i40evf_exit_module(void)
{
  
#line 2540 
  ldv_pci_unregister_driver_102(& i40evf_driver);
  
#line 2541 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
int (*ldv_emg_alias_eth_validate_addr_2)(struct net_device *) = & eth_validate_addr;

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
struct pci_driver *ldv_emg_alias_i40evf_driver_2 = & i40evf_driver;

#line 60 
int ldv_emg_del_timer_sync(struct timer_list *arg0);


#line 61 
_Bool ldv_emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1);


#line 62 
void ldv_emg_free_netdev(struct net_device *arg0);


#line 63 
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);


#line 64 
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0);


#line 65 
int ldv_emg_register_netdev(struct net_device *arg0);


#line 66 
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);


#line 67 
void ldv_emg_unregister_netdev(struct net_device *arg0);


#line 68 
void ldv_emg_free_irq(unsigned int arg0, void *arg1);


#line 69 
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);


#line 71 
int ldv_emg_mod_timer_pending(struct timer_list *arg0, unsigned long arg1);


#line 72 
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1);


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
int ldv_emg_wrapper_i40evf_change_mtu_8(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 77 
  tmp = i40evf_change_mtu(arg0,arg1);
  
#line 77 
  return tmp;
}


#line 81  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
struct net_device_stats *ldv_emg_wrapper_i40evf_get_stats_21(struct net_device *arg0)
{
  struct net_device_stats *tmp;
  
#line 82 
  tmp = i40evf_get_stats(arg0);
  
#line 82 
  return tmp;
}


#line 86  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
int ldv_emg_wrapper_i40evf_suspend_4(struct pci_dev *arg0, struct pm_message arg1)
{
  int tmp;
  
#line 87 
  tmp = i40evf_suspend(arg0,arg1);
  
#line 87 
  return tmp;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
int ldv_emg_wrapper_i40evf_probe_3(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  int tmp;
  
#line 92 
  tmp = i40evf_probe(arg0,(struct pci_device_id const *)arg1);
  
#line 92 
  return tmp;
}


#line 96  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
int ldv_emg_i40evf_init_module(void)
{
  int tmp;
  
#line 97 
  tmp = i40evf_init_module();
  
#line 97 
  return tmp;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
int ldv_emg_wrapper_i40evf_close_2(struct net_device *arg0)
{
  int tmp;
  
#line 101 
  tmp = i40evf_close(arg0);
  
#line 101 
  return tmp;
}


#line 105  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
void ldv_emg_wrapper_i40evf_remove_5(struct pci_dev *arg0)
{
  
#line 106 
  i40evf_remove(arg0);
  
#line 107 
  return;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
int ldv_emg_wrapper_i40evf_vlan_rx_add_vid_17(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  int tmp;
  
#line 111 
  tmp = i40evf_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 111 
  return tmp;
}


#line 115  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
enum irqreturn ldv_emg_wrapper_i40evf_msix_clean_rings_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 116 
  tmp = i40evf_msix_clean_rings(arg0,arg1);
  
#line 116 
  return tmp;
}


#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
int ldv_emg_wrapper_i40evf_set_mac_14(struct net_device *arg0, void *arg1)
{
  int tmp;
  
#line 121 
  tmp = i40evf_set_mac(arg0,arg1);
  
#line 121 
  return tmp;
}


#line 125  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
int ldv_emg_wrapper_i40evf_vlan_rx_kill_vid_26(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  int tmp;
  
#line 126 
  tmp = i40evf_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 126 
  return tmp;
}


#line 130  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
void ldv_emg_wrapper_i40evf_set_rx_mode_27(struct net_device *arg0)
{
  
#line 131 
  i40evf_set_rx_mode(arg0);
  
#line 132 
  return;
}


#line 135  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
void ldv_emg_wrapper_i40evf_shutdown_2(struct pci_dev *arg0)
{
  
#line 136 
  i40evf_shutdown(arg0);
  
#line 137 
  return;
}


#line 140  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
enum irqreturn ldv_emg_wrapper_i40evf_msix_aq_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 141 
  tmp = i40evf_msix_aq(arg0,arg1);
  
#line 141 
  return tmp;
}


#line 145  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
int ldv_emg_wrapper_i40evf_open_2(struct net_device *arg0)
{
  int tmp;
  
#line 146 
  tmp = i40evf_open(arg0);
  
#line 146 
  return tmp;
}


#line 150  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
void ldv_emg_i40evf_exit_module(void)
{
  
#line 151 
  i40evf_exit_module();
  
#line 152 
  return;
}


#line 154  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
void ldv_emg_wrapper_i40evf_tx_timeout_20(struct net_device *arg0)
{
  
#line 155 
  i40evf_tx_timeout(arg0);
  
#line 156 
  return;
}


#line 159  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
int ldv_emg_wrapper_i40evf_resume_6(struct pci_dev *arg0)
{
  int tmp;
  
#line 160 
  tmp = i40evf_resume(arg0);
  
#line 160 
  return tmp;
}


#line 582  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 585 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 585 
  return tmp;
}


#line 589  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static void *kzalloc_1(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 592 
  tmp = ldv_kzalloc(size,flags);
  
#line 592 
  return tmp;
}


#line 702  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static void ldv_spin_lock_60(spinlock_t *lock)
{
  
#line 706 
  ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
  
#line 708 
  spin_lock(lock);
  
#line 709 
  return;
}


#line 745  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static void ldv_spin_unlock_63(spinlock_t *lock)
{
  
#line 749 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  
#line 751 
  spin_unlock(lock);
  
#line 752 
  return;
}


#line 845  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static bool ldv_schedule_work_73_1(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 849 
  tmp = ldv_emg_schedule_work(work);
  
#line 849 
  __retres = tmp != 0;
  
#line 849 
  return __retres;
}


#line 853  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static bool ldv_schedule_work_74(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 857 
  tmp = ldv_emg_schedule_work(work);
  
#line 857 
  __retres = tmp != 0;
  
#line 857 
  return __retres;
}


#line 861  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static int ldv_request_irq_75(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 865 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 865 
  return tmp;
}


#line 869  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static void ldv_free_irq_76(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 873 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 874 
  return;
}


#line 877  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static int ldv_request_irq_77(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 881 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 881 
  return tmp;
}


#line 885  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static void ldv_free_irq_78(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 889 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 890 
  return;
}


#line 893  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static void ldv_free_irq_79(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 897 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 898 
  return;
}


#line 901  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static void ldv_free_irq_80(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 905 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 906 
  return;
}


#line 909  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static int ldv_mod_timer_pending_81(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 913 
  tmp = ldv_emg_mod_timer_pending(ldv_func_arg1,ldv_func_arg2);
  
#line 913 
  return tmp;
}


#line 917  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static bool ldv_schedule_work_82(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 921 
  tmp = ldv_emg_schedule_work(work);
  
#line 921 
  __retres = tmp != 0;
  
#line 921 
  return __retres;
}


#line 925  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static bool ldv_schedule_delayed_work_83(struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 929 
  tmp = ldv_emg_schedule_delayed_work(dwork,delay);
  
#line 929 
  __retres = tmp != 0;
  
#line 929 
  return __retres;
}


#line 933  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static bool ldv_schedule_work_84(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 937 
  tmp = ldv_emg_schedule_work(work);
  
#line 937 
  __retres = tmp != 0;
  
#line 937 
  return __retres;
}


#line 941  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static int ldv_mod_timer_85(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 945 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 945 
  return tmp;
}


#line 949  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static int ldv_mod_timer_86(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 953 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 953 
  return tmp;
}


#line 957  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static bool ldv_schedule_work_87(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 961 
  tmp = ldv_emg_schedule_work(work);
  
#line 961 
  __retres = tmp != 0;
  
#line 961 
  return __retres;
}


#line 965  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static int ldv_mod_timer_88(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 969 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 969 
  return tmp;
}


#line 973  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static bool ldv_schedule_work_89(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 977 
  tmp = ldv_emg_schedule_work(work);
  
#line 977 
  __retres = tmp != 0;
  
#line 977 
  return __retres;
}


#line 981  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static int ldv_mod_timer_90(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 985 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 985 
  return tmp;
}


#line 989  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static int ldv_register_netdev_91(struct net_device *ldv_func_arg1)
{
  int tmp;
  
#line 993 
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  
#line 993 
  return tmp;
}


#line 997  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static bool ldv_schedule_delayed_work_92(struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 1001 
  tmp = ldv_emg_schedule_delayed_work(dwork,delay);
  
#line 1001 
  __retres = tmp != 0;
  
#line 1001 
  return __retres;
}


#line 1005  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static bool ldv_schedule_delayed_work_93(struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 1009 
  tmp = ldv_emg_schedule_delayed_work(dwork,delay);
  
#line 1009 
  __retres = tmp != 0;
  
#line 1009 
  return __retres;
}


#line 1013  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static struct net_device *ldv_alloc_etherdev_mqs_94(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3)
{
  struct net_device *tmp;
  
#line 1017 
  tmp = ldv_emg_alloc_etherdev_mqs(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
  
#line 1017 
  return tmp;
}


#line 1021  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static bool ldv_schedule_delayed_work_95(struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 1025 
  tmp = ldv_emg_schedule_delayed_work(dwork,delay);
  
#line 1025 
  __retres = tmp != 0;
  
#line 1025 
  return __retres;
}


#line 1029  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static void ldv_free_netdev_96(struct net_device *ldv_func_arg1)
{
  
#line 1033 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1034 
  return;
}


#line 1037  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static bool ldv_schedule_work_97(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1041 
  tmp = ldv_emg_schedule_work(work);
  
#line 1041 
  __retres = tmp != 0;
  
#line 1041 
  return __retres;
}


#line 1045  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static void ldv_unregister_netdev_98(struct net_device *ldv_func_arg1)
{
  
#line 1049 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 1050 
  return;
}


#line 1053  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static int ldv_del_timer_sync_99(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1057 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1057 
  return tmp;
}


#line 1061  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static void ldv_free_netdev_100(struct net_device *ldv_func_arg1)
{
  
#line 1065 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1066 
  return;
}


#line 1069  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static int ldv___pci_register_driver_101(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3)
{
  int tmp;
  
#line 1073 
  tmp = ldv_emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,(char *)ldv_func_arg3);
  
#line 1073 
  return tmp;
}


#line 1077  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/weaver/.tmp_i40evf_main.c.aux"
static void ldv_pci_unregister_driver_102(struct pci_driver *ldv_func_arg1)
{
  
#line 1081 
  ldv_emg_pci_unregister_driver(ldv_func_arg1);
  
#line 1082 
  return;
}


#line 402  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int sprintf(char *, char const * , ...);


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_prototype.h"
i40e_status i40e_vf_reset(struct i40e_hw *hw);


#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_common.c"
i40e_status i40e_set_mac_type(struct i40e_hw *hw)
{
  
#line 41 
  i40e_status status = 0;
  
#line 43 
  if ((unsigned int)hw->vendor_id == 32902U) {
    
#line 44 
    switch ((int)hw->device_id) {
      case 5490: 
#line 45 
      ;
      case 5492: 
#line 46 
      ;
      case 5503: 
#line 47 
      ;
      case 5504: 
#line 48 
      ;
      case 5505: 
#line 49 
      ;
      case 5507: 
#line 50 
      ;
      case 5508: 
#line 51 
      ;
      case 5509: 
#line 52 
      ;
      case 5510: 
#line 53 
      ;
      case 5511: 
#line 54 
      ;
      
#line 55 
      hw->mac.type = I40E_MAC_XL710;
      
#line 56 
      goto ldv_52477;
      case 5452: 
#line 57 
      ;
      case 5489: 
#line 58 
      ;
      
#line 59 
      hw->mac.type = I40E_MAC_VF;
      
#line 60 
      goto ldv_52477;
      default: 
#line 61 
      ;
      
#line 62 
      hw->mac.type = I40E_MAC_GENERIC;
      
#line 63 
      goto ldv_52477;
    }
    ldv_52477: 
#line 65 
    ;
  }
  else 
#line 66 
       status = I40E_ERR_DEVICE_NOT_SUPPORTED;
  
#line 71 
  return status;
}


#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_common.c"
void i40evf_debug_aq(struct i40e_hw *hw, enum i40e_debug_mask mask, void *desc, void *buffer, u16 buf_len)
{
  
#line 87 
  struct i40e_aq_desc *aq_desc = (struct i40e_aq_desc *)desc;
  
#line 88 
  u16 len = aq_desc->datalen;
  
#line 89 
  u8 *buf = (u8 *)buffer;
  
#line 90 
  u16 i = (unsigned short)0U;
  
#line 92 
  if ((hw->debug_mask & (unsigned int)mask) == 0U || desc == (void *)0) 
    
#line 93 
    goto return_label; else ;
  
#line 95 
  i40evf_debug_d((void *)hw,(unsigned int)mask,(char *)"AQ CMD: opcode 0x%04X, flags 0x%04X, datalen 0x%04X, retval 0x%04X\n",(int)aq_desc->opcode,(int)aq_desc->flags,(int)aq_desc->datalen,(int)aq_desc->retval);
  
#line 101 
  i40evf_debug_d((void *)hw,(unsigned int)mask,(char *)"\tcookie (h,l) 0x%08X 0x%08X\n",aq_desc->cookie_high,aq_desc->cookie_low);
  
#line 104 
  i40evf_debug_d((void *)hw,(unsigned int)mask,(char *)"\tparam (0,1)  0x%08X 0x%08X\n",aq_desc->params.internal.param0,aq_desc->params.internal.param1);
  
#line 107 
  i40evf_debug_d((void *)hw,(unsigned int)mask,(char *)"\taddr (h,l)   0x%08X 0x%08X\n",aq_desc->params.external.addr_high,aq_desc->params.external.addr_low);
  
#line 111 
  if (buffer != (void *)0 && (unsigned int)aq_desc->datalen != 0U) {
    
#line 112 
    i40evf_debug_d((void *)hw,(unsigned int)mask,(char *)"AQ CMD Buffer:\n");
    
#line 113 
    if ((int)buf_len < (int)len) 
#line 114 
                                 len = buf_len; else ;
    
#line 116 
    i = (unsigned short)0U;
    
#line 116 
    goto ldv_52493;
    ldv_52492: 
#line 117 
    ;
    
#line 117 
    i40evf_debug_d((void *)hw,(unsigned int)mask,(char *)"\t0x%04X  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n",(int)i,(int)*(buf + (int)i),(int)*(buf + ((unsigned int)i + 1U)),(int)*(buf + ((unsigned int)i + 2U)),(int)*(buf + ((unsigned int)i + 3U)),(int)*(buf + ((unsigned int)i + 4U)),(int)*(buf + ((unsigned int)i + 5U)),(int)*(buf + ((unsigned int)i + 6U)),(int)*(buf + ((unsigned int)i + 7U)),(int)*(buf + ((unsigned int)i + 8U)),(int)*(buf + ((unsigned int)i + 9U)),(int)*(buf + ((unsigned int)i + 10U)),(int)*(buf + ((unsigned int)i + 11U)),(int)*(buf + ((unsigned int)i + 12U)),(int)*(buf + ((unsigned int)i + 13U)),(int)*(buf + ((unsigned int)i + 14U)),(int)*(buf + ((unsigned int)i + 15U)));
    
#line 116 
    i = (unsigned short)((unsigned int)i + 16U);
    ldv_52493: 
#line 117 
    ;
    
#line 116 
    if ((int)i < (int)len + -16) 
#line 118 
                                 goto ldv_52492; else 
#line 121 
                                                      goto ldv_52494;
    ldv_52494: 
#line 122 
    ;
    
#line 126 
    if ((int)i < (int)len) {
      char d_buf[80U];
      int tmp;
      int tmp_1;
      u16 tmp_0;
      
#line 128 
      int j = 0;
      
#line 130 
      memset((void *)(& d_buf),0,80UL);
      
#line 131 
      tmp = sprintf((char *)(& d_buf),"\t0x%04X ",(int)i);
      
#line 131 
      j = tmp + j;
      
#line 132 
      goto ldv_52498;
      ldv_52497: 
#line 133 
      ;
      
#line 133 
      tmp_0 = i;
      
#line 133 
      i = (u16)((int)i + 1);
      
#line 133 
      ;
      
#line 133 
      tmp_1 = sprintf(& d_buf[j]," %02X",(int)*(buf + (int)tmp_0));
      
#line 133 
      j = tmp_1 + j;
      ldv_52498: 
#line 134 
      ;
      
#line 132 
      if ((int)i < (int)len) 
#line 134 
                             goto ldv_52497; else 
#line 137 
                                                  goto ldv_52499;
      ldv_52499: 
#line 138 
      ;
      
#line 134 
      i40evf_debug_d((void *)hw,(unsigned int)mask,(char *)"%s\n",(char *)(& d_buf));
    }
    else ;
  }
  else ;
  return_label: 
#line 137 
                return;
}


#line 145  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_common.c"
bool i40evf_check_asq_alive(struct i40e_hw *hw)
{
  bool __retres;
  
#line 147 
  if (hw->aq.asq.len != 0U) {
    unsigned int tmp;
    
#line 148 
    tmp = readl((void const volatile *)(hw->hw_addr + hw->aq.asq.len));
    
#line 148 
    __retres = (_Bool)(tmp < (unsigned int)0);
    
#line 148 
    goto return_label;
  }
  else {
    
#line 151 
    __retres = (_Bool)0;
    
#line 151 
    goto return_label;
  }
  return_label: 
#line 147 
                return __retres;
}


#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_common.c"
i40e_status i40evf_aq_queue_shutdown(struct i40e_hw *hw, bool unloading)
{
  struct i40e_aq_desc desc;
  i40e_status status;
  
#line 166 
  struct i40e_aqc_queue_shutdown *cmd = (struct i40e_aqc_queue_shutdown *)(& desc.params.raw);
  
#line 170 
  i40evf_fill_default_direct_cmd_desc(& desc,(unsigned short)3);
  
#line 173 
  if ((int)unloading != 0) 
#line 174 
                           cmd->driver_unloading = 1U; else ;
  
#line 175 
  status = i40evf_asq_send_command(hw,& desc,(void *)0,(unsigned short)0,(struct i40e_asq_cmd_details *)0);
  
#line 177 
  return status;
}


#line 226  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_common.c"
struct i40e_rx_ptype_decoded i40evf_ptype_lookup[256U] = {{.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))1U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))2U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))5U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))3U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))4U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))5U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))6U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))7U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))8U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))9U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))10U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))11U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))12U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))13U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))14U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))15U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))16U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))17U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))18U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))19U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))20U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))21U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))22U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))23U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))24U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))25U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))26U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))27U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))28U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))29U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))30U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))31U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))32U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))33U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))34U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))35U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))36U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))37U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))38U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))39U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))40U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))41U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))42U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))43U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))44U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))45U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))46U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))47U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))48U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))49U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))50U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))51U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))52U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))53U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))54U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))55U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))56U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))57U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))58U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))59U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))60U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))61U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))62U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))63U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))64U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))65U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))66U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))67U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))68U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))69U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))70U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))71U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))72U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))73U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))74U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))75U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))76U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))77U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))78U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))79U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))80U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))81U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))82U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))83U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))84U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))85U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))86U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))87U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))88U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))89U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))90U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))91U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))92U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))93U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))94U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))95U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))96U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))97U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))98U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))99U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))100U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))101U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))102U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))103U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))104U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))105U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))106U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))107U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))108U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))1U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))109U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))110U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))111U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))112U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))113U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))114U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))115U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))116U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))117U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))118U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))119U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))120U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))121U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))122U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))123U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))124U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))125U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))126U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))127U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))128U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))129U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))130U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))131U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))132U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))133U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))134U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))135U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))136U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))137U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))138U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))139U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))140U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))141U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))142U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))143U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))144U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))145U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))146U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))147U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))148U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))2U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))149U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))1U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))150U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))151U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))2U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))152U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))3U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))153U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))4U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))4U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))3U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))154U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))155U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))156U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))157U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))158U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))159U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))160U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))161U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))162U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))163U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))164U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))165U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))166U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))167U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))168U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))169U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))170U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))171U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))172U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))173U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))174U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))175U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))176U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))177U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))178U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))179U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))180U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))181U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))182U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))183U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))184U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))185U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))186U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))187U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))188U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))189U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))190U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))191U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))192U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))193U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))194U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))195U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))196U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))197U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))198U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))199U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))200U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))201U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))202U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))203U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))204U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))205U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))206U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))207U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))208U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))209U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))210U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))211U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))212U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))213U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))214U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))215U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))216U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))217U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))218U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))219U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))220U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))221U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))222U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))223U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))224U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))225U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))226U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))227U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))228U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))229U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))230U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))231U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))232U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))233U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))234U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))235U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))236U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))237U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))238U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))239U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))240U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))241U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))242U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))243U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))244U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))245U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))246U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))247U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))248U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))249U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))250U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))251U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))252U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))253U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))254U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}, {.ptype = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))255U, .known = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_ip_ver = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .outer_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .tunnel_type = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U, .tunnel_end_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U, .tunnel_end_frag = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U, .inner_prot = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))0U, .payload_layer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))0U}};

#line 559  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_common.c"
i40e_status i40e_aq_send_msg_to_pf(struct i40e_hw *hw, enum i40e_virtchnl_ops v_opcode, i40e_status v_retval, u8 *msg, u16 msglen, struct i40e_asq_cmd_details *cmd_details)
{
  struct i40e_aq_desc desc;
  struct i40e_asq_cmd_details details;
  i40e_status status;
  
#line 569 
  i40evf_fill_default_direct_cmd_desc(& desc,(unsigned short)2049);
  
#line 570 
  desc.flags = (unsigned short)((unsigned int)desc.flags | 8192U);
  
#line 571 
  desc.cookie_high = (unsigned int)v_opcode;
  
#line 572 
  desc.cookie_low = (unsigned int)v_retval;
  
#line 573 
  if ((unsigned int)msglen != 0U) {
    
#line 574 
    desc.flags = (unsigned short)((unsigned int)desc.flags | 5120U);
    
#line 576 
    if ((unsigned int)msglen > 512U) 
#line 577 
                                     desc.flags = (unsigned short)((unsigned int)desc.flags | 512U); else ;
    
#line 578 
    desc.datalen = msglen;
  }
  else ;
  
#line 580 
  if (cmd_details == (struct i40e_asq_cmd_details *)0) {
    
#line 581 
    memset((void *)(& details),0,24UL);
    
#line 582 
    details.async = (_Bool)1;
    
#line 583 
    cmd_details = & details;
  }
  else ;
  
#line 585 
  status = i40evf_asq_send_command(hw,& desc,(void *)msg,(unsigned short)((int)msglen),cmd_details);
  
#line 586 
  return status;
}


#line 597  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_common.c"
void i40e_vf_parse_hw_config(struct i40e_hw *hw, struct i40e_virtchnl_vf_resource *msg)
{
  struct i40e_virtchnl_vsi_resource *vsi_res;
  int i;
  
#line 603 
  vsi_res = & msg->vsi_res[0];
  
#line 605 
  hw->dev_caps.num_vsis = (unsigned int)msg->num_vsis;
  
#line 606 
  hw->dev_caps.num_rx_qp = (unsigned int)msg->num_queue_pairs;
  
#line 607 
  hw->dev_caps.num_tx_qp = (unsigned int)msg->num_queue_pairs;
  
#line 608 
  hw->dev_caps.num_msix_vectors_vf = (unsigned int)msg->max_vectors;
  
#line 609 
  hw->dev_caps.dcb = (_Bool)((msg->vf_offload_flags & 1U) != 0U);
  
#line 611 
  hw->dev_caps.fcoe = (_Bool)(((int)(msg->vf_offload_flags >> 2) & 1) != 0);
  
#line 613 
  i = 0;
  
#line 613 
  goto ldv_52529;
  ldv_52528: 
#line 614 
  ;
  
#line 614 
  if (vsi_res->vsi_type == (unsigned int)I40E_VSI_SRIOV) {
    
#line 615 
    memcpy((void *)(& hw->mac.perm_addr),(void const *)(& vsi_res->default_mac_addr),6UL);
    
#line 617 
    memcpy((void *)(& hw->mac.addr),(void const *)(& vsi_res->default_mac_addr),6UL);
  }
  else ;
  
#line 620 
  vsi_res += 1;
  
#line 613 
  i += 1;
  ldv_52529: 
#line 614 
  ;
  
#line 613 
  if ((int)msg->num_vsis > i) 
#line 615 
                              goto ldv_52528; else 
#line 618 
                                                   goto ldv_52530;
  ldv_52530: 
#line 619 
  ;
  
#line 620 
  return;
}


#line 632  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/i40evf/i40e_common.c"
i40e_status i40e_vf_reset(struct i40e_hw *hw)
{
  i40e_status tmp;
  
#line 634 
  tmp = i40e_aq_send_msg_to_pf(hw,(enum i40e_virtchnl_ops)I40E_VIRTCHNL_OP_RESET_VF,(enum i40e_status_code)I40E_SUCCESS,(u8 *)0U,(unsigned short)0,(struct i40e_asq_cmd_details *)0);
  
#line 634 
  return tmp;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  
#line 23 
  v->counter += i;
  
#line 24 
  return;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  
#line 29 
  v->counter -= i;
  
#line 30 
  return;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  int __retres;
  
#line 35 
  v->counter -= i;
  
#line 36 
  if (v->counter != 0) {
    
#line 37 
    __retres = 0;
    
#line 37 
    goto return_label;
  }
  else ;
  
#line 39 
  __retres = 1;
  return_label: 
#line 39 
                return __retres;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  
#line 45 
  v->counter += 1;
  
#line 46 
  return;
}


#line 49  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  
#line 51 
  v->counter -= 1;
  
#line 52 
  return;
}


#line 55  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  int __retres;
  
#line 57 
  v->counter -= 1;
  
#line 58 
  if (v->counter != 0) {
    
#line 59 
    __retres = 0;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  __retres = 1;
  return_label: 
#line 61 
                return __retres;
}


#line 65  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  int __retres;
  
#line 67 
  v->counter += 1;
  
#line 68 
  if (v->counter != 0) {
    
#line 69 
    __retres = 0;
    
#line 69 
    goto return_label;
  }
  else ;
  
#line 71 
  __retres = 1;
  return_label: 
#line 71 
                return __retres;
}


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  int __retres;
  
#line 77 
  v->counter += i;
  
#line 78 
  __retres = v->counter;
  
#line 78 
  return __retres;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  int __retres;
  
#line 84 
  v->counter += i;
  
#line 85 
  __retres = v->counter < 0;
  
#line 85 
  return __retres;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  int __retres;
  
#line 91 
  *v = (short)((unsigned int)*v + 1U);
  
#line 92 
  __retres = (int)*v;
  
#line 92 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device const *dev);


#line 24 
int ldv_dev_set_drvdata(struct device *dev, void *data);


#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_xmalloc(size_t size);


#line 31 
void *ldv_xzalloc(size_t size);


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
struct ldv_list_element global_list = {.data = (void *)0, .next = (struct ldv_list_element *)0};

#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static ldv_list_ptr ldv_list_create(void *data)
{
  
#line 35 
  ldv_list_ptr list = (struct ldv_list_element *)0;
  
#line 37 
  list = (ldv_list_ptr)ldv_xmalloc(16UL);
  
#line 39 
  list->data = data;
  
#line 40 
  list->next = (struct ldv_list_element *)0;
  
#line 42 
  return list;
}


#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static void ldv_save_pointer(void *data)
{
  ldv_list_ptr element;
  ldv_list_ptr cached;
  
#line 50 
  if (global_list.data == (void *)0) {
    
#line 51 
    element = & global_list;
    
#line 52 
    element->data = data;
  }
  else {
    
#line 54 
    element = ldv_list_create(data);
    
#line 55 
    cached = global_list.next;
    
#line 56 
    global_list.next = element;
    
#line 57 
    element->next = cached;
  }
  
#line 60 
  return;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 30 
  if (dev != (struct device const *)0 && dev->p != (struct device_private *)0) {
    
#line 31 
    __retres = (dev->p)->driver_data;
    
#line 31 
    goto return_label;
  }
  else ;
  
#line 33 
  __retres = (void *)0;
  return_label: 
#line 33 
                return __retres;
}


#line 42  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  int __retres;
  
#line 44 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  
#line 45 
  ldv_save_pointer((void *)dev->p);
  
#line 46 
  (dev->p)->driver_data = data;
  
#line 48 
  __retres = 0;
  
#line 48 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_zalloc(size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  struct spi_master *__retres;
  struct spi_master *master;
  
#line 27 
  master = (struct spi_master *)ldv_zalloc((unsigned long)size + 2192UL);
  
#line 29 
  if (master == (struct spi_master *)0) {
    
#line 30 
    __retres = (struct spi_master *)0;
    
#line 30 
    goto return_label;
  }
  else ;
  
#line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  
#line 34 
  __retres = master;
  return_label: 
#line 34 
                return __retres;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err(void const *ptr);


#line 28 
long ldv_is_err_or_null(void const *ptr);


#line 29 
void *ldv_err_ptr(long error);


#line 30 
long ldv_ptr_err(void const *ptr);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_assume(int);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err(void const *ptr)
{
  long __retres;
  
#line 23 
  __retres = (long)((unsigned long)ptr > 4294967295UL);
  
#line 23 
  return __retres;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  void *__retres;
  
#line 28 
  __VERIFIER_assume(error < 0L);
  
#line 29 
  __retres = (void *)(4294967295L - error);
  
#line 29 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void const *ptr)
{
  long __retres;
  
#line 34 
  __VERIFIER_assume((unsigned long)ptr > 4294967295UL);
  
#line 35 
  __retres = (long)(4294967295UL - (unsigned long)ptr);
  
#line 35 
  return __retres;
}


#line 38  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err_or_null(void const *ptr)
{
  long __retres;
  int tmp_0;
  
#line 40 
  if (ptr == (void const *)0) 
#line 40 
                              tmp_0 = 1;
  else {
    long tmp;
    
#line 40 
    tmp = ldv_is_err(ptr);
    
#line 40 
    if (tmp != 0L) 
#line 40 
                   tmp_0 = 1; else 
#line 40 
                                   tmp_0 = 0;
  }
  
#line 40 
  __retres = (long)tmp_0;
  
#line 40 
  return __retres;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/panic.h"
void ldv_panic(void);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  
#line 23 
  __VERIFIER_assume(0);
  
#line 24 
  return;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void);


#line 42 
void ldv_switch_to_process_context(void);


#line 50 
bool ldv_in_interrupt_context(void);


#line 112 
int ldv_post_init(int init_ret_val);


#line 132 
int ldv_post_probe(int probe_ret_val);


#line 133 
void ldv_check_return_value_probe(int);


#line 141 
int ldv_filter_err_code(int ret_val);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;

#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void)
{
  
#line 30 
  __ldv_in_interrupt_context = (_Bool)1;
  
#line 31 
  return;
}


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_process_context(void)
{
  
#line 36 
  __ldv_in_interrupt_context = (_Bool)0;
  
#line 37 
  return;
}


#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
bool ldv_in_interrupt_context(void)
{
  
#line 41 
  return __ldv_in_interrupt_context;
}


#line 44  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static int ldv_filter_positive_int(int val)
{
  
#line 46 
  __VERIFIER_assume(val <= 0);
  
#line 47 
  return val;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_init(int init_ret_val)
{
  int tmp;
  
#line 56 
  tmp = ldv_filter_positive_int(init_ret_val);
  
#line 56 
  return tmp;
}


#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val)
{
  int tmp;
  
#line 62 
  ldv_check_return_value_probe(probe_ret_val);
  
#line 63 
  tmp = ldv_filter_positive_int(probe_ret_val);
  
#line 63 
  return tmp;
}


#line 67  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val)
{
  int tmp;
  
#line 69 
  tmp = ldv_filter_positive_int(ret_val);
  
#line 69 
  return tmp;
}


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kmalloc(size_t size, gfp_t flags);


#line 26 
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);


#line 28 
void ldv_check_alloc_flags(gfp_t);


#line 29 
void ldv_after_alloc(void *);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_malloc(size_t size);


#line 24 
void *ldv_calloc(size_t nmemb, size_t size);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 25 
  ldv_check_alloc_flags(flags);
  
#line 26 
  res = ldv_malloc(size);
  
#line 27 
  ldv_after_alloc(res);
  
#line 29 
  return res;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 36 
  ldv_check_alloc_flags(flags);
  
#line 37 
  res = ldv_calloc(n,size);
  
#line 38 
  ldv_after_alloc(res);
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 47 
  ldv_check_alloc_flags(flags);
  
#line 48 
  res = ldv_zalloc(size);
  
#line 49 
  ldv_after_alloc(res);
  
#line 51 
  return res;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 58 
  ldv_check_alloc_flags(flags);
  
#line 59 
  res = ldv_malloc(n * size);
  
#line 60 
  ldv_after_alloc(res);
  
#line 62 
  return res;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void ldv_free(void *s);


#line 35 
void *ldv_malloc_unknown_size(void);


#line 36 
void *ldv_calloc_unknown_size(void);


#line 37 
void *ldv_zalloc_unknown_size(void);


#line 40 
void *ldv_reference_malloc(size_t size);


#line 41 
void *ldv_reference_calloc(size_t nmemb, size_t size);


#line 42 
void *ldv_reference_zalloc(size_t size);


#line 43 
void ldv_reference_free(void *s);


#line 47 
void *ldv_reference_xmalloc(size_t size);


#line 48 
void *ldv_reference_xzalloc(size_t size);


#line 52 
void *ldv_reference_malloc_unknown_size(void);


#line 53 
void *ldv_reference_calloc_unknown_size(void);


#line 54 
void *ldv_reference_zalloc_unknown_size(void);


#line 61 
void *ldv_xmalloc_unknown_size(size_t size);


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  void *res;
  
#line 37 
  res = ldv_reference_malloc(size);
  
#line 38 
  if (res != (void *)0) {
    long tmp;
    
#line 39 
    tmp = ldv_is_err((void const *)res);
    
#line 39 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  void *res;
  
#line 46 
  res = ldv_reference_calloc(nmemb,size);
  
#line 47 
  if (res != (void *)0) {
    long tmp;
    
#line 48 
    tmp = ldv_is_err((void const *)res);
    
#line 48 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 49 
  return res;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  void *res;
  
#line 55 
  res = ldv_reference_zalloc(size);
  
#line 56 
  if (res != (void *)0) {
    long tmp;
    
#line 57 
    tmp = ldv_is_err((void const *)res);
    
#line 57 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 58 
  return res;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  
#line 63 
  ldv_reference_free(s);
  
#line 64 
  return;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 69 
  res = ldv_reference_xmalloc(size);
  
#line 70 
  tmp = ldv_is_err((void const *)res);
  
#line 70 
  __VERIFIER_assume(tmp == 0L);
  
#line 71 
  return res;
}


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 77 
  res = ldv_reference_xzalloc(size);
  
#line 78 
  tmp = ldv_is_err((void const *)res);
  
#line 78 
  __VERIFIER_assume(tmp == 0L);
  
#line 79 
  return res;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  void *res;
  
#line 85 
  res = ldv_reference_malloc_unknown_size();
  
#line 86 
  if (res != (void *)0) {
    long tmp;
    
#line 87 
    tmp = ldv_is_err((void const *)res);
    
#line 87 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 88 
  return res;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  void *res;
  
#line 94 
  res = ldv_reference_calloc_unknown_size();
  
#line 95 
  if (res != (void *)0) {
    long tmp;
    
#line 96 
    tmp = ldv_is_err((void const *)res);
    
#line 96 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  void *res;
  
#line 103 
  res = ldv_reference_zalloc_unknown_size();
  
#line 104 
  if (res != (void *)0) {
    long tmp;
    
#line 105 
    tmp = ldv_is_err((void const *)res);
    
#line 105 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 106 
  return res;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  void *res;
  long tmp;
  
#line 112 
  res = ldv_reference_xmalloc_unknown_size(size);
  
#line 113 
  tmp = ldv_is_err((void const *)res);
  
#line 113 
  __VERIFIER_assume(tmp == 0L);
  
#line 114 
  return res;
}

long __builtin_expect(long exp, long c);


#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_error(void);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
long __builtin_expect(long exp, long c)
{
  
#line 26 
  return exp;
}


#line 35  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  
#line 37 
  __VERIFIER_error();
  
#line 38 
  return;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_int(void);


#line 24 
int ldv_undef_long(void);


#line 25 
unsigned int ldv_undef_uint(void);


#line 26 
unsigned long ldv_undef_ulong(void);


#line 27 
unsigned long long ldv_undef_ulonglong(void);


#line 28 
void *ldv_undef_ptr(void);


#line 31 
int ldv_undef_int_positive(void);


#line 34 
int ldv_undef_int_negative(void);


#line 37 
int ldv_undef_int_nonpositive(void);


#line 40 
void *ldv_undef_ptr_non_null(void);


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __VERIFIER_nondet_int(void);


#line 31 
long __VERIFIER_nondet_long(void);


#line 38 
unsigned int __VERIFIER_nondet_uint(void);


#line 41 
unsigned long __VERIFIER_nondet_ulong(void);


#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);


#line 43 
void *__VERIFIER_nondet_pointer(void);


#line 46  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  int tmp;
  
#line 48 
  tmp = __VERIFIER_nondet_int();
  
#line 48 
  return tmp;
}


#line 51  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_long(void)
{
  int __retres;
  long tmp;
  
#line 53 
  tmp = __VERIFIER_nondet_long();
  
#line 53 
  __retres = (int)tmp;
  
#line 53 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  unsigned int tmp;
  
#line 58 
  tmp = __VERIFIER_nondet_uint();
  
#line 58 
  return tmp;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  void *tmp;
  
#line 63 
  tmp = __VERIFIER_nondet_pointer();
  
#line 63 
  return tmp;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  unsigned long tmp;
  
#line 68 
  tmp = __VERIFIER_nondet_ulong();
  
#line 68 
  return tmp;
}


#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  unsigned long long tmp;
  
#line 73 
  tmp = __VERIFIER_nondet_ulonglong();
  
#line 73 
  return tmp;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  
#line 78 
  int ret = ldv_undef_int();
  
#line 80 
  __VERIFIER_assume(ret > 0);
  
#line 82 
  return ret;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  
#line 87 
  int ret = ldv_undef_int();
  
#line 89 
  __VERIFIER_assume(ret < 0);
  
#line 91 
  return ret;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  
#line 96 
  int ret = ldv_undef_int();
  
#line 98 
  __VERIFIER_assume(ret <= 0);
  
#line 100 
  return ret;
}


#line 103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  
#line 105 
  void *ret = ldv_undef_ptr();
  
#line 107 
  __VERIFIER_assume(ret != (void *)0);
  
#line 109 
  return ret;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *external_allocated_data(void);


#line 45 
void *ldv_reference_realloc(void *ptr, size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *malloc(size_t);


#line 24 
void *calloc(size_t, size_t);


#line 25 
void free(void *);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 37 
  tmp = ldv_undef_int();
  
#line 37 
  if (tmp != 0) {
    
#line 39 
    res = malloc(size);
    
#line 40 
    __VERIFIER_assume(res != (void *)0);
    
#line 41 
    __retres = res;
    
#line 41 
    goto return_label;
  }
  else {
    
#line 44 
    __retres = (void *)0;
    
#line 44 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 47  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  void *tmp;
  
#line 49 
  tmp = calloc(nmemb,size);
  
#line 49 
  return tmp;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  void *tmp;
  
#line 54 
  tmp = calloc(1UL,size);
  
#line 54 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  
#line 59 
  free(s);
  
#line 60 
  return;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 66 
  if (ptr != (void *)0 && size == 0UL) {
    
#line 67 
    free(ptr);
    
#line 68 
    __retres = (void *)0;
    
#line 68 
    goto return_label;
  }
  else ;
  
#line 71 
  if (ptr == (void *)0) {
    
#line 72 
    res = malloc(size);
    
#line 73 
    __retres = res;
    
#line 73 
    goto return_label;
  }
  else ;
  
#line 76 
  tmp = ldv_undef_int();
  
#line 76 
  if (tmp != 0) {
    
#line 78 
    res = malloc(size);
    
#line 79 
    __VERIFIER_assume(res != (void *)0);
    
#line 81 
    memcpy(res,(void const *)ptr,size);
    
#line 82 
    free(ptr);
    
#line 84 
    __retres = res;
    
#line 84 
    goto return_label;
  }
  else {
    
#line 87 
    __retres = (void *)0;
    
#line 87 
    goto return_label;
  }
  return_label: 
#line 76 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  void *res;
  
#line 94 
  res = malloc(size);
  
#line 95 
  __VERIFIER_assume(res != (void *)0);
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  void *res;
  
#line 104 
  res = calloc(1UL,size);
  
#line 105 
  __VERIFIER_assume(res != (void *)0);
  
#line 107 
  return res;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 114 
  tmp = ldv_undef_int();
  
#line 114 
  if (tmp != 0) {
    
#line 115 
    res = external_allocated_data();
    
#line 116 
    __VERIFIER_assume(res != (void *)0);
    
#line 117 
    __retres = res;
    
#line 117 
    goto return_label;
  }
  else {
    
#line 120 
    __retres = (void *)0;
    
#line 120 
    goto return_label;
  }
  return_label: 
#line 114 
                return __retres;
}


#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 127 
  tmp = ldv_undef_int();
  
#line 127 
  if (tmp != 0) {
    
#line 128 
    res = external_allocated_data();
    
#line 129 
    memset(res,0,8UL);
    
#line 130 
    __VERIFIER_assume(res != (void *)0);
    
#line 131 
    __retres = res;
    
#line 131 
    goto return_label;
  }
  else {
    
#line 134 
    __retres = (void *)0;
    
#line 134 
    goto return_label;
  }
  return_label: 
#line 127 
                return __retres;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  void *tmp;
  
#line 139 
  tmp = ldv_reference_calloc_unknown_size();
  
#line 139 
  return tmp;
}


#line 142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  void *res;
  
#line 146 
  res = external_allocated_data();
  
#line 147 
  __VERIFIER_assume(res != (void *)0);
  
#line 149 
  return res;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_initialize(void);


#line 97 
void ldv_failed_register_netdev(void);


#line 123 
void ldv_pre_probe(void);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
int pthread_create(pthread_t *, pthread_attr_t const *, void *(*)(void *), void *);


#line 37 
int pthread_join(pthread_t, void **);


#line 86  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_5_1(struct net_device *arg0);


#line 88 
void *ldv_interrupt_scenario_18(void *arg0);


#line 90 
int main(void);


#line 91 
void ldv_dispatch_instance_register_9_3(struct timer_list *arg0);


#line 92 
void ldv_dispatch_irq_register_12_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);


#line 94 
void ldv_dispatch_instance_register_3_3(struct timer_list *arg0);


#line 97 
void ldv_dispatch_register_14_4(struct net_device *arg0);


#line 100 
void *ldv_pci_scenario_17(void *arg0);


#line 101 
void ldv_dispatch_instance_deregister_13_1(struct timer_list *arg0);


#line 102 
void ldv_dispatch_deregister_8_1(struct pci_driver *arg0);


#line 103 
void *ldv_interrupt_scenario_15(void *arg0);


#line 105 
void *ldv_timer_scenario_19(void *arg0);


#line 106 
void ldv_dispatch_register_10_3(struct pci_driver *arg0);


#line 107 
void ldv_dispatch_irq_deregister_6_1(int arg0);


#line 108 
void *ldv_initialization_1(void *arg0);


#line 113 
void *ldv_random_allocationless_scenario_16(void *arg0);


#line 117  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_17;

#line 118  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_15;

#line 119  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_18;

#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_16;

#line 121  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_19;

#line 125  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_5_1(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_16 *cf_arg_16;
  int tmp;
  
#line 128 
  tmp = ldv_undef_int();
  
#line 128 
  switch (tmp) {
    case 0: 
#line 129 
    ;
    
#line 130 
    ret = pthread_join(ldv_thread_16,(void **)0);
    
#line 131 
    __VERIFIER_assume(ret == 0);
    
#line 132 
    goto ldv_44754;
    default: 
#line 134 
    ;
    
#line 134 
    __VERIFIER_assume(0);
  }
  ldv_44754: 
#line 135 
  ;
  
#line 136 
  return;
}


#line 140  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1)
{
  _Bool __retres;
  struct work_struct *ldv_7_ldv_param_0_2;
  struct delayed_work *ldv_7_delayed_work;
  int tmp_0;
  
#line 148 
  tmp_0 = ldv_undef_int();
  
#line 148 
  if (tmp_0 != 0) {
    
#line 150 
    ldv_7_delayed_work = arg0;
    
#line 154 
    ldv_7_ldv_param_0_2 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    
#line 158 
    if (ldv_7_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      
#line 160 
      (*(ldv_7_delayed_work->work.func))(ldv_7_ldv_param_0_2); else ;
    
#line 165 
    ldv_free((void *)ldv_7_ldv_param_0_2);
    
#line 169 
    __retres = (_Bool)1;
    
#line 169 
    goto return_label;
  }
  else {
    
#line 176 
    __retres = (_Bool)0;
    
#line 176 
    goto return_label;
  }
  return_label: 
#line 148 
                return __retres;
}


#line 186  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_18(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_18_ret_val;
  int ldv_18_line;
  void *ldv_18_data;
  enum irqreturn (*ldv_18_thread)(int , void *);
  int tmp;
  
#line 192 
  enum irqreturn (*ldv_18_callback)(int , void *) = & ldv_emg_wrapper_i40evf_msix_clean_rings_2;
  
#line 195 
  struct ldv_struct_interrupt_scenario_15 *data = (struct ldv_struct_interrupt_scenario_15 *)arg0;
  
#line 200 
  if (data != (struct ldv_struct_interrupt_scenario_15 *)0) {
    
#line 201 
    ldv_18_line = data->arg0;
    
#line 202 
    ldv_18_callback = data->arg1;
    
#line 203 
    ldv_18_thread = data->arg2;
    
#line 204 
    ldv_18_data = data->arg3;
    
#line 205 
    ldv_free((void *)data);
  }
  else ;
  
#line 211 
  ldv_switch_to_interrupt_context();
  
#line 213 
  ldv_18_ret_val = ldv_emg_wrapper_i40evf_msix_clean_rings_2(ldv_18_line,ldv_18_data);
  
#line 215 
  ldv_switch_to_process_context();
  
#line 218 
  tmp = ldv_undef_int();
  
#line 218 
  if (tmp != 0) {
    
#line 220 
    __VERIFIER_assume(ldv_18_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 224 
    if (ldv_18_thread != (enum irqreturn (*)(int , void *))0) 
#line 226 
                                                              (*ldv_18_thread)(ldv_18_line,ldv_18_data); else ;
  }
  else 
#line 233 
       __VERIFIER_assume(ldv_18_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 242 
  __retres = (void *)0;
  
#line 242 
  goto return_label;
  
#line 244 
  __retres = (void *)0;
  return_label: 
#line 244 
                return __retres;
}


#line 249  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  int __retres;
  int tmp_0;
  
#line 252 
  struct pci_driver *ldv_10_pci_driver = ldv_emg_alias_i40evf_driver_2;
  
#line 256 
  tmp_0 = ldv_undef_int();
  
#line 256 
  if (tmp_0 != 0) {
    
#line 258 
    ldv_10_pci_driver = arg0;
    
#line 262 
    ldv_dispatch_register_10_3(ldv_10_pci_driver);
    
#line 266 
    __retres = 0;
    
#line 266 
    goto return_label;
  }
  else {
    int tmp;
    
#line 273 
    tmp = ldv_undef_int_negative();
    
#line 273 
    __retres = tmp;
    
#line 273 
    goto return_label;
  }
  return_label: 
#line 256 
                return __retres;
}


#line 283  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
int main(void)
{
  int __retres;
  
#line 286 
  ldv_initialize();
  
#line 289 
  ldv_initialization_1((void *)0);
  
#line 291 
  __retres = 0;
  
#line 291 
  return __retres;
}


#line 296  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_register_9_3(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_19 *cf_arg_19;
  int tmp;
  
#line 299 
  tmp = ldv_undef_int();
  
#line 299 
  switch (tmp) {
    case 0: 
#line 300 
    ;
    
#line 301 
    cf_arg_19 = (struct ldv_struct_timer_scenario_19 *)ldv_xmalloc(16UL);
    
#line 302 
    cf_arg_19->arg0 = arg0;
    
#line 303 
    ret = pthread_create(& ldv_thread_19,(pthread_attr_t const *)0,& ldv_timer_scenario_19,(void *)cf_arg_19);
    
#line 304 
    __VERIFIER_assume(ret == 0);
    
#line 305 
    goto ldv_44790;
    default: 
#line 307 
    ;
    
#line 307 
    __VERIFIER_assume(0);
  }
  ldv_44790: 
#line 308 
  ;
  
#line 309 
  return;
}


#line 313  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_register_12_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  int ret;
  struct ldv_struct_interrupt_scenario_15 *cf_arg_18;
  struct ldv_struct_interrupt_scenario_15 *cf_arg_15;
  int tmp;
  
#line 317 
  tmp = ldv_undef_int();
  
#line 317 
  switch (tmp) {
    case 0: 
#line 318 
    ;
    
#line 319 
    cf_arg_18 = (struct ldv_struct_interrupt_scenario_15 *)ldv_xmalloc(32UL);
    
#line 320 
    cf_arg_18->arg0 = arg0;
    
#line 321 
    cf_arg_18->arg1 = arg1;
    
#line 322 
    cf_arg_18->arg2 = arg2;
    
#line 323 
    cf_arg_18->arg3 = arg3;
    
#line 324 
    ret = pthread_create(& ldv_thread_18,(pthread_attr_t const *)0,& ldv_interrupt_scenario_18,(void *)cf_arg_18);
    
#line 325 
    __VERIFIER_assume(ret == 0);
    
#line 326 
    goto ldv_44806;
    case 1: 
#line 328 
    ;
    
#line 329 
    cf_arg_15 = (struct ldv_struct_interrupt_scenario_15 *)ldv_xmalloc(32UL);
    
#line 330 
    cf_arg_15->arg0 = arg0;
    
#line 331 
    cf_arg_15->arg1 = arg1;
    
#line 332 
    cf_arg_15->arg2 = arg2;
    
#line 333 
    cf_arg_15->arg3 = arg3;
    
#line 334 
    ret = pthread_create(& ldv_thread_15,(pthread_attr_t const *)0,& ldv_interrupt_scenario_15,(void *)cf_arg_15);
    
#line 335 
    __VERIFIER_assume(ret == 0);
    
#line 336 
    goto ldv_44806;
    default: 
#line 338 
    ;
    
#line 338 
    __VERIFIER_assume(0);
  }
  ldv_44806: 
#line 339 
  ;
  
#line 340 
  return;
}


#line 344  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  struct net_device *__retres;
  struct net_device *ldv_4_netdev;
  int tmp_0;
  
#line 351 
  tmp_0 = ldv_undef_int();
  
#line 351 
  if (tmp_0 != 0) {
    
#line 353 
    ldv_4_netdev = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    
#line 357 
    __retres = ldv_4_netdev;
    
#line 357 
    goto return_label;
  }
  else {
    
#line 364 
    __retres = (struct net_device *)0;
    
#line 364 
    goto return_label;
  }
  return_label: 
#line 351 
                return __retres;
}


#line 374  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_10_3(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_17 *cf_arg_17;
  int tmp;
  
#line 377 
  tmp = ldv_undef_int();
  
#line 377 
  switch (tmp) {
    case 0: 
#line 378 
    ;
    
#line 379 
    cf_arg_17 = (struct ldv_struct_pci_scenario_17 *)ldv_xmalloc(16UL);
    
#line 380 
    cf_arg_17->arg0 = arg0;
    
#line 381 
    ret = pthread_create(& ldv_thread_17,(pthread_attr_t const *)0,& ldv_pci_scenario_17,(void *)cf_arg_17);
    
#line 382 
    __VERIFIER_assume(ret == 0);
    
#line 383 
    goto ldv_44821;
    default: 
#line 385 
    ;
    
#line 385 
    __VERIFIER_assume(0);
  }
  ldv_44821: 
#line 386 
  ;
  
#line 387 
  return;
}


#line 391  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_del_timer_sync(struct timer_list *arg0)
{
  int __retres;
  struct timer_list *ldv_13_timer_list;
  
#line 397 
  ldv_13_timer_list = arg0;
  
#line 401 
  ldv_dispatch_instance_deregister_13_1(ldv_13_timer_list);
  
#line 402 
  ;
  
#line 402 
  __retres = 0;
  
#line 402 
  return __retres;
}


#line 410  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  int __retres;
  int ldv_12_line;
  void *ldv_12_data;
  enum irqreturn (*ldv_12_thread)(int , void *);
  int tmp_0;
  
#line 415 
  enum irqreturn (*ldv_12_callback)(int , void *) = & ldv_emg_wrapper_i40evf_msix_aq_2;
  
#line 420 
  tmp_0 = ldv_undef_int();
  
#line 420 
  if (tmp_0 != 0) {
    
#line 422 
    ldv_12_line = (int)arg0;
    
#line 423 
    ldv_12_callback = arg1;
    
#line 424 
    ldv_12_thread = (enum irqreturn (*)(int , void *))0;
    
#line 425 
    ldv_12_data = arg4;
    
#line 429 
    ldv_dispatch_irq_register_12_3(ldv_12_line,ldv_12_callback,ldv_12_thread,ldv_12_data);
    
#line 433 
    __retres = 0;
    
#line 433 
    goto return_label;
  }
  else {
    int tmp;
    
#line 440 
    tmp = ldv_undef_int_negative();
    
#line 440 
    __retres = tmp;
    
#line 440 
    goto return_label;
  }
  return_label: 
#line 420 
                return __retres;
}


#line 450  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_14_4(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_16 *cf_arg_16;
  int tmp;
  
#line 453 
  tmp = ldv_undef_int();
  
#line 453 
  switch (tmp) {
    case 0: 
#line 454 
    ;
    
#line 455 
    cf_arg_16 = (struct ldv_struct_random_allocationless_scenario_16 *)ldv_xmalloc(16UL);
    
#line 456 
    cf_arg_16->arg0 = arg0;
    
#line 457 
    ret = pthread_create(& ldv_thread_16,(pthread_attr_t const *)0,& ldv_random_allocationless_scenario_16,(void *)cf_arg_16);
    
#line 458 
    __VERIFIER_assume(ret == 0);
    
#line 459 
    goto ldv_44850;
    default: 
#line 461 
    ;
    
#line 461 
    __VERIFIER_assume(0);
  }
  ldv_44850: 
#line 462 
  ;
  
#line 463 
  return;
}


#line 467  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_schedule_work(struct work_struct *arg0)
{
  _Bool __retres;
  struct work_struct *ldv_11_work_struct;
  int tmp;
  
#line 474 
  tmp = ldv_undef_int();
  
#line 474 
  if (tmp != 0) {
    
#line 476 
    ldv_11_work_struct = arg0;
    
#line 480 
    if (ldv_11_work_struct->func != (void (*)(struct work_struct *))0) 
      
#line 482 
      (*(ldv_11_work_struct->func))(ldv_11_work_struct); else ;
    
#line 487 
    __retres = (_Bool)1;
    
#line 487 
    goto return_label;
  }
  else {
    
#line 494 
    __retres = (_Bool)0;
    
#line 494 
    goto return_label;
  }
  return_label: 
#line 474 
                return __retres;
}


#line 504  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_mod_timer_pending(struct timer_list *arg0, unsigned long arg1)
{
  int __retres;
  struct timer_list *ldv_9_timer_list;
  int tmp_0;
  
#line 511 
  tmp_0 = ldv_undef_int();
  
#line 511 
  if (tmp_0 != 0) {
    
#line 513 
    ldv_9_timer_list = arg0;
    
#line 517 
    ldv_dispatch_instance_register_9_3(ldv_9_timer_list);
    
#line 521 
    __retres = 0;
    
#line 521 
    goto return_label;
  }
  else {
    int tmp;
    
#line 528 
    tmp = ldv_undef_int_negative();
    
#line 528 
    __retres = tmp;
    
#line 528 
    goto return_label;
  }
  return_label: 
#line 511 
                return __retres;
}


#line 538  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pci_scenario_17(void *arg0)
{
  void *__retres;
  struct pci_dev *ldv_17_resource_1;
  struct pci_device_id *ldv_17_ldv_param_1_2;
  struct pm_message ldv_17_resource_0;
  int tmp_2;
  int tmp_3;
  
#line 543 
  struct pci_driver *ldv_17_container = ldv_emg_alias_i40evf_driver_2;
  
#line 544 
  int ldv_17_ret = ldv_undef_int();
  
#line 547 
  struct ldv_struct_pci_scenario_17 *data = (struct ldv_struct_pci_scenario_17 *)arg0;
  
#line 551 
  ldv_17_ret = ldv_undef_int();
  
#line 554 
  if (data != (struct ldv_struct_pci_scenario_17 *)0) {
    
#line 555 
    ldv_17_container = data->arg0;
    
#line 556 
    ldv_free((void *)data);
  }
  else ;
  
#line 567 
  goto ldv_main_17;
  
#line 569 
  __retres = (void *)0;
  
#line 569 
  goto return_label;
  ldv_main_17: 
#line 572 
  ;
  
#line 575 
  tmp_2 = ldv_undef_int();
  
#line 575 
  if (tmp_2 != 0) {
    int tmp_1;
    
#line 577 
    ldv_17_ldv_param_1_2 = (struct pci_device_id *)ldv_xmalloc_unknown_size(0UL);
    
#line 582 
    ldv_pre_probe();
    
#line 584 
    ldv_17_ret = ldv_emg_wrapper_i40evf_probe_3(ldv_17_resource_1,ldv_17_ldv_param_1_2);
    
#line 586 
    ldv_17_ret = ldv_post_probe(ldv_17_ret);
    
#line 590 
    ldv_free((void *)ldv_17_ldv_param_1_2);
    
#line 593 
    tmp_1 = ldv_undef_int();
    
#line 593 
    if (tmp_1 != 0) {
      
#line 595 
      __VERIFIER_assume(ldv_17_ret == 0);
      
#line 602 
      goto ldv_call_17;
    }
    else {
      
#line 606 
      __VERIFIER_assume(ldv_17_ret != 0);
      
#line 613 
      goto ldv_main_17;
    }
  }
  else {
    
#line 625 
    __retres = (void *)0;
    
#line 625 
    goto return_label;
  }
  
#line 628 
  __retres = (void *)0;
  
#line 628 
  goto return_label;
  ldv_call_17: 
#line 631 
  ;
  
#line 634 
  tmp_3 = ldv_undef_int();
  
#line 634 
  switch (tmp_3) {
    case 1: 
#line 635 
    ;
    
#line 644 
    goto ldv_call_17;
    case 2: 
#line 647 
    ;
    
#line 650 
    ldv_17_ret = ldv_emg_wrapper_i40evf_suspend_4(ldv_17_resource_1,ldv_17_resource_0);
    
#line 652 
    ldv_17_ret = ldv_filter_err_code(ldv_17_ret);
    
#line 656 
    if (ldv_17_container->suspend_late != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 658 
      ldv_17_ret = (*(ldv_17_container->suspend_late))(ldv_17_resource_1,ldv_17_resource_0);
      
#line 660 
      ldv_17_ret = ldv_filter_err_code(ldv_17_ret);
    }
    else 
#line 662 
         ldv_17_ret = ldv_undef_int();
    
#line 667 
    if (ldv_17_container->resume_early != (int (*)(struct pci_dev *))0) 
      
#line 669 
      (*(ldv_17_container->resume_early))(ldv_17_resource_1); else ;
    
#line 675 
    ldv_emg_wrapper_i40evf_resume_6(ldv_17_resource_1);
    
#line 682 
    goto ldv_call_17;
    case 3: 
#line 685 
    ;
    
#line 688 
    ldv_emg_wrapper_i40evf_shutdown_2(ldv_17_resource_1);
    
#line 693 
    ldv_emg_wrapper_i40evf_remove_5(ldv_17_resource_1);
    
#line 700 
    goto ldv_main_17;
    default: 
#line 703 
    ;
    
#line 703 
    __VERIFIER_assume(0);
  }
  
#line 706 
  __retres = (void *)0;
  return_label: 
#line 706 
                return __retres;
}


#line 711  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_deregister_13_1(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_19 *cf_arg_19;
  int tmp;
  
#line 714 
  tmp = ldv_undef_int();
  
#line 714 
  switch (tmp) {
    case 0: 
#line 715 
    ;
    
#line 716 
    ret = pthread_join(ldv_thread_19,(void **)0);
    
#line 717 
    __VERIFIER_assume(ret == 0);
    
#line 718 
    goto ldv_44882;
    default: 
#line 720 
    ;
    
#line 720 
    __VERIFIER_assume(0);
  }
  ldv_44882: 
#line 721 
  ;
  
#line 722 
  return;
}


#line 726  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_8_1(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_17 *cf_arg_17;
  int tmp;
  
#line 729 
  tmp = ldv_undef_int();
  
#line 729 
  switch (tmp) {
    case 0: 
#line 730 
    ;
    
#line 731 
    ret = pthread_join(ldv_thread_17,(void **)0);
    
#line 732 
    __VERIFIER_assume(ret == 0);
    
#line 733 
    goto ldv_44890;
    default: 
#line 735 
    ;
    
#line 735 
    __VERIFIER_assume(0);
  }
  ldv_44890: 
#line 736 
  ;
  
#line 737 
  return;
}


#line 741  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_15(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_15_ret_val;
  int ldv_15_line;
  void *ldv_15_data;
  enum irqreturn (*ldv_15_thread)(int , void *);
  int tmp;
  
#line 747 
  enum irqreturn (*ldv_15_callback)(int , void *) = & ldv_emg_wrapper_i40evf_msix_aq_2;
  
#line 750 
  struct ldv_struct_interrupt_scenario_15 *data = (struct ldv_struct_interrupt_scenario_15 *)arg0;
  
#line 755 
  if (data != (struct ldv_struct_interrupt_scenario_15 *)0) {
    
#line 756 
    ldv_15_line = data->arg0;
    
#line 757 
    ldv_15_callback = data->arg1;
    
#line 758 
    ldv_15_thread = data->arg2;
    
#line 759 
    ldv_15_data = data->arg3;
    
#line 760 
    ldv_free((void *)data);
  }
  else ;
  
#line 766 
  ldv_switch_to_interrupt_context();
  
#line 768 
  ldv_15_ret_val = ldv_emg_wrapper_i40evf_msix_aq_2(ldv_15_line,ldv_15_data);
  
#line 770 
  ldv_switch_to_process_context();
  
#line 773 
  tmp = ldv_undef_int();
  
#line 773 
  if (tmp != 0) {
    
#line 775 
    __VERIFIER_assume(ldv_15_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 779 
    if (ldv_15_thread != (enum irqreturn (*)(int , void *))0) 
#line 781 
                                                              (*ldv_15_thread)(ldv_15_line,ldv_15_data); else ;
  }
  else 
#line 788 
       __VERIFIER_assume(ldv_15_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 797 
  __retres = (void *)0;
  
#line 797 
  goto return_label;
  
#line 799 
  __retres = (void *)0;
  return_label: 
#line 799 
                return __retres;
}


#line 804  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0)
{
  
#line 807 
  struct pci_driver *ldv_8_pci_driver = ldv_emg_alias_i40evf_driver_2;
  
#line 810 
  ldv_8_pci_driver = arg0;
  
#line 814 
  ldv_dispatch_deregister_8_1(ldv_8_pci_driver);
  
#line 818 
  goto return_label;
  return_label: 
#line 820 
                return;
}


#line 825  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_timer_scenario_19(void *arg0)
{
  void *__retres;
  struct timer_list *ldv_19_container;
  
#line 830 
  struct ldv_struct_timer_scenario_19 *data = (struct ldv_struct_timer_scenario_19 *)arg0;
  
#line 835 
  if (data != (struct ldv_struct_timer_scenario_19 *)0) {
    
#line 836 
    ldv_19_container = data->arg0;
    
#line 837 
    ldv_free((void *)data);
  }
  else ;
  
#line 842 
  if (ldv_19_container->function != (void (*)(unsigned long ))0) {
    
#line 844 
    ldv_switch_to_interrupt_context();
    
#line 846 
    (*(ldv_19_container->function))(ldv_19_container->data);
    
#line 848 
    ldv_switch_to_process_context();
  }
  else ;
  
#line 857 
  __retres = (void *)0;
  
#line 857 
  goto return_label;
  
#line 859 
  __retres = (void *)0;
  return_label: 
#line 859 
                return __retres;
}


#line 864  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_register_3_3(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_19 *cf_arg_19;
  int tmp;
  
#line 867 
  tmp = ldv_undef_int();
  
#line 867 
  switch (tmp) {
    case 0: 
#line 868 
    ;
    
#line 869 
    cf_arg_19 = (struct ldv_struct_timer_scenario_19 *)ldv_xmalloc(16UL);
    
#line 870 
    cf_arg_19->arg0 = arg0;
    
#line 871 
    ret = pthread_create(& ldv_thread_19,(pthread_attr_t const *)0,& ldv_timer_scenario_19,(void *)cf_arg_19);
    
#line 872 
    __VERIFIER_assume(ret == 0);
    
#line 873 
    goto ldv_44920;
    default: 
#line 875 
    ;
    
#line 875 
    __VERIFIER_assume(0);
  }
  ldv_44920: 
#line 876 
  ;
  
#line 877 
  return;
}


#line 881  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_deregister_6_1(int arg0)
{
  int ret;
  struct ldv_struct_free_irq_6 *cf_arg_18;
  struct ldv_struct_free_irq_6 *cf_arg_15;
  int tmp;
  
#line 885 
  tmp = ldv_undef_int();
  
#line 885 
  switch (tmp) {
    case 0: 
#line 886 
    ;
    
#line 887 
    ret = pthread_join(ldv_thread_18,(void **)0);
    
#line 888 
    __VERIFIER_assume(ret == 0);
    
#line 889 
    goto ldv_44929;
    case 1: 
#line 891 
    ;
    
#line 892 
    ret = pthread_join(ldv_thread_15,(void **)0);
    
#line 893 
    __VERIFIER_assume(ret == 0);
    
#line 894 
    goto ldv_44929;
    default: 
#line 896 
    ;
    
#line 896 
    __VERIFIER_assume(0);
  }
  ldv_44929: 
#line 897 
  ;
  
#line 898 
  return;
}


#line 902  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_initialization_1(void *arg0)
{
  void *__retres;
  int ldv_1_ret;
  int tmp;
  
#line 909 
  ldv_1_ret = ldv_emg_i40evf_init_module();
  
#line 910 
  ldv_1_ret = ldv_post_init(ldv_1_ret);
  
#line 913 
  tmp = ldv_undef_int();
  
#line 913 
  if (tmp != 0) {
    
#line 915 
    __VERIFIER_assume(ldv_1_ret != 0);
    
#line 919 
    __retres = (void *)0;
    
#line 919 
    goto return_label;
  }
  else {
    
#line 923 
    __VERIFIER_assume(ldv_1_ret == 0);
    
#line 928 
    ldv_emg_i40evf_exit_module();
    
#line 932 
    __retres = (void *)0;
    
#line 932 
    goto return_label;
  }
  
#line 935 
  __retres = (void *)0;
  return_label: 
#line 935 
                return __retres;
}


#line 940  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_unregister_netdev(struct net_device *arg0)
{
  struct net_device *ldv_5_netdev;
  
#line 946 
  ldv_5_netdev = arg0;
  
#line 951 
  ldv_emg_wrapper_i40evf_close_2(ldv_5_netdev);
  
#line 955 
  ldv_dispatch_deregister_5_1(ldv_5_netdev);
  
#line 959 
  goto return_label;
  return_label: 
#line 961 
                return;
}


#line 966  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_irq(unsigned int arg0, void *arg1)
{
  int ldv_6_line;
  
#line 972 
  ldv_6_line = (int)arg0;
  
#line 976 
  ldv_dispatch_irq_deregister_6_1(ldv_6_line);
  
#line 980 
  goto return_label;
  return_label: 
#line 982 
                return;
}


#line 987  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_register_netdev(struct net_device *arg0)
{
  int __retres;
  struct net_device *ldv_14_netdev;
  int tmp_3;
  
#line 991 
  int ldv_14_ret = ldv_undef_int();
  
#line 994 
  ldv_14_ret = ldv_undef_int();
  
#line 997 
  tmp_3 = ldv_undef_int();
  
#line 997 
  if (tmp_3 != 0) {
    int tmp_1;
    
#line 999 
    ldv_14_netdev = arg0;
    
#line 1004 
    ldv_14_ret = ldv_emg_wrapper_i40evf_open_2(ldv_14_netdev);
    
#line 1007 
    tmp_1 = ldv_undef_int();
    
#line 1007 
    if (tmp_1 != 0) {
      
#line 1009 
      __VERIFIER_assume(ldv_14_ret == 0);
      
#line 1013 
      ldv_dispatch_register_14_4(ldv_14_netdev);
      
#line 1017 
      __retres = 0;
      
#line 1017 
      goto return_label;
    }
    else {
      int tmp_0;
      
#line 1024 
      __VERIFIER_assume(ldv_14_ret != 0);
      
#line 1025 
      ldv_failed_register_netdev();
      
#line 1026 
      tmp_0 = ldv_undef_int_negative();
      
#line 1026 
      __retres = tmp_0;
      
#line 1026 
      goto return_label;
    }
  }
  else {
    int tmp_2;
    
#line 1034 
    ldv_failed_register_netdev();
    
#line 1035 
    tmp_2 = ldv_undef_int_negative();
    
#line 1035 
    __retres = tmp_2;
    
#line 1035 
    goto return_label;
  }
  return_label: 
#line 997 
                return __retres;
}


#line 1045  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_netdev(struct net_device *arg0)
{
  struct net_device *ldv_2_netdev;
  
#line 1051 
  ldv_2_netdev = arg0;
  
#line 1052 
  ldv_free((void *)ldv_2_netdev);
  
#line 1056 
  goto return_label;
  return_label: 
#line 1058 
                return;
}


#line 1063  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_random_allocationless_scenario_16(void *arg0)
{
  void *__retres;
  struct ethtool_coalesce *ldv_16_ldv_param_1_28;
  int ldv_16_ldv_param_1_3;
  struct ethtool_ringparam *ldv_16_ldv_param_1_13;
  void *ldv_16_ldv_param_1_15;
  struct sk_buff *ldv_16_ldv_param_0_14;
  unsigned char ldv_16_ldv_param_3_12;
  unsigned int *ldv_16_ldv_param_1_25;
  unsigned char *ldv_16_ldv_param_3_27;
  unsigned char *ldv_16_ldv_param_2_24;
  unsigned short ldv_16_ldv_param_1_29;
  unsigned int ldv_16_ldv_param_1_2;
  struct ethtool_ringparam *ldv_16_ldv_param_1_4;
  struct ethtool_stats *ldv_16_ldv_param_1_5;
  unsigned char *ldv_16_ldv_param_2_11;
  struct ethtool_channels *ldv_16_ldv_param_1_8;
  unsigned int *ldv_16_ldv_param_1_10;
  struct ethtool_cmd *ldv_16_ldv_param_1_16;
  unsigned short ldv_16_ldv_param_1_18;
  struct ethtool_coalesce *ldv_16_ldv_param_1_20;
  unsigned short ldv_16_ldv_param_2_19;
  struct ethtool_rxnfc *ldv_16_ldv_param_1_21;
  unsigned int ldv_16_ldv_param_1_23;
  unsigned short ldv_16_ldv_param_2_30;
  struct ethtool_drvinfo *ldv_16_ldv_param_1_9;
  int ldv_16_ldv_param_1_17;
  unsigned long long *ldv_16_ldv_param_2_6;
  struct net_device *ldv_16_container;
  unsigned int *ldv_16_ldv_param_2_22;
  unsigned char *ldv_16_ldv_param_2_26;
  struct ethtool_rxnfc *ldv_16_ldv_param_1_7;
  int tmp;
  
#line 1097 
  struct ldv_struct_random_allocationless_scenario_16 *data = (struct ldv_struct_random_allocationless_scenario_16 *)arg0;
  
#line 1102 
  if (data != (struct ldv_struct_random_allocationless_scenario_16 *)0) {
    
#line 1103 
    ldv_16_container = data->arg0;
    
#line 1104 
    ldv_free((void *)data);
  }
  else ;
  
#line 1112 
  goto ldv_call_16;
  
#line 1114 
  __retres = (void *)0;
  
#line 1114 
  goto return_label;
  ldv_call_16: 
#line 1117 
  ;
  
#line 1120 
  tmp = ldv_undef_int();
  
#line 1120 
  switch (tmp) {
    case 1: 
#line 1121 
    ;
    
#line 1124 
    (*ldv_emg_alias_ethtool_op_get_link_3)(ldv_16_container);
    
#line 1131 
    goto ldv_call_16;
    case 2: 
#line 1134 
    ;
    
#line 1137 
    ldv_emg_wrapper_i40evf_set_rx_mode_27(ldv_16_container);
    
#line 1144 
    goto ldv_call_16;
    case 3: 
#line 1147 
    ;
    
#line 1153 
    ldv_emg_wrapper_i40evf_vlan_rx_kill_vid_26(ldv_16_container,(unsigned short)((int)ldv_16_ldv_param_1_29),(unsigned short)((int)ldv_16_ldv_param_2_30));
    
#line 1163 
    goto ldv_call_16;
    case 4: 
#line 1166 
    ;
    
#line 1168 
    ldv_16_ldv_param_1_28 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    
#line 1173 
    ldv_emg_wrapper_i40evf_set_coalesce_25(ldv_16_container,ldv_16_ldv_param_1_28);
    
#line 1177 
    ldv_free((void *)ldv_16_ldv_param_1_28);
    
#line 1184 
    goto ldv_call_16;
    case 5: 
#line 1187 
    ;
    
#line 1189 
    ldv_16_ldv_param_3_27 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1190 
    ldv_16_ldv_param_1_25 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    
#line 1191 
    ldv_16_ldv_param_2_26 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1196 
    ldv_emg_wrapper_i40evf_get_rxfh_24(ldv_16_container,ldv_16_ldv_param_1_25,ldv_16_ldv_param_2_26,ldv_16_ldv_param_3_27);
    
#line 1200 
    ldv_free((void *)ldv_16_ldv_param_3_27);
    
#line 1201 
    ldv_free((void *)ldv_16_ldv_param_1_25);
    
#line 1202 
    ldv_free((void *)ldv_16_ldv_param_2_26);
    
#line 1209 
    goto ldv_call_16;
    case 6: 
#line 1212 
    ;
    
#line 1214 
    ldv_16_ldv_param_2_24 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1219 
    ldv_emg_wrapper_i40evf_get_strings_5(ldv_16_container,ldv_16_ldv_param_1_23,ldv_16_ldv_param_2_24);
    
#line 1223 
    ldv_free((void *)ldv_16_ldv_param_2_24);
    
#line 1230 
    goto ldv_call_16;
    case 7: 
#line 1233 
    ;
    
#line 1235 
    ldv_16_ldv_param_2_22 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    
#line 1236 
    ldv_16_ldv_param_1_21 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    
#line 1241 
    ldv_emg_wrapper_i40evf_get_rxnfc_19(ldv_16_container,ldv_16_ldv_param_1_21,ldv_16_ldv_param_2_22);
    
#line 1245 
    ldv_free((void *)ldv_16_ldv_param_2_22);
    
#line 1246 
    ldv_free((void *)ldv_16_ldv_param_1_21);
    
#line 1253 
    goto ldv_call_16;
    case 8: 
#line 1256 
    ;
    
#line 1259 
    ldv_emg_wrapper_i40evf_tx_timeout_20(ldv_16_container);
    
#line 1266 
    goto ldv_call_16;
    case 9: 
#line 1269 
    ;
    
#line 1272 
    ldv_emg_wrapper_i40evf_get_stats_21(ldv_16_container);
    
#line 1279 
    goto ldv_call_16;
    case 10: 
#line 1282 
    ;
    
#line 1284 
    ldv_16_ldv_param_1_20 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
    
#line 1289 
    ldv_emg_wrapper_i40evf_get_coalesce_18(ldv_16_container,ldv_16_ldv_param_1_20);
    
#line 1293 
    ldv_free((void *)ldv_16_ldv_param_1_20);
    
#line 1300 
    goto ldv_call_16;
    case 11: 
#line 1303 
    ;
    
#line 1309 
    ldv_emg_wrapper_i40evf_vlan_rx_add_vid_17(ldv_16_container,(unsigned short)((int)ldv_16_ldv_param_1_18),(unsigned short)((int)ldv_16_ldv_param_2_19));
    
#line 1319 
    goto ldv_call_16;
    case 12: 
#line 1322 
    ;
    
#line 1328 
    ldv_emg_wrapper_i40evf_get_sset_count_16(ldv_16_container,ldv_16_ldv_param_1_17);
    
#line 1338 
    goto ldv_call_16;
    case 13: 
#line 1341 
    ;
    
#line 1343 
    ldv_16_ldv_param_1_16 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
    
#line 1348 
    ldv_emg_wrapper_i40evf_get_settings_15(ldv_16_container,ldv_16_ldv_param_1_16);
    
#line 1352 
    ldv_free((void *)ldv_16_ldv_param_1_16);
    
#line 1359 
    goto ldv_call_16;
    case 14: 
#line 1362 
    ;
    
#line 1364 
    ldv_16_ldv_param_1_15 = ldv_xmalloc_unknown_size(0UL);
    
#line 1369 
    ldv_emg_wrapper_i40evf_set_mac_14(ldv_16_container,ldv_16_ldv_param_1_15);
    
#line 1373 
    ldv_free(ldv_16_ldv_param_1_15);
    
#line 1380 
    goto ldv_call_16;
    case 15: 
#line 1383 
    ;
    
#line 1385 
    ldv_16_ldv_param_0_14 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
    
#line 1390 
    i40evf_xmit_frame(ldv_16_ldv_param_0_14,ldv_16_container);
    
#line 1394 
    ldv_free((void *)ldv_16_ldv_param_0_14);
    
#line 1401 
    goto ldv_call_16;
    case 16: 
#line 1404 
    ;
    
#line 1407 
    ldv_emg_wrapper_i40evf_get_msglevel_13(ldv_16_container);
    
#line 1414 
    goto ldv_call_16;
    case 17: 
#line 1417 
    ;
    
#line 1419 
    ldv_16_ldv_param_1_13 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    
#line 1424 
    ldv_emg_wrapper_i40evf_set_ringparam_12(ldv_16_container,ldv_16_ldv_param_1_13);
    
#line 1428 
    ldv_free((void *)ldv_16_ldv_param_1_13);
    
#line 1435 
    goto ldv_call_16;
    case 18: 
#line 1438 
    ;
    
#line 1440 
    ldv_16_ldv_param_1_10 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
    
#line 1441 
    ldv_16_ldv_param_2_11 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1446 
    ldv_emg_wrapper_i40evf_set_rxfh_11(ldv_16_container,ldv_16_ldv_param_1_10,ldv_16_ldv_param_2_11,(unsigned char)((int)ldv_16_ldv_param_3_12));
    
#line 1450 
    ldv_free((void *)ldv_16_ldv_param_1_10);
    
#line 1451 
    ldv_free((void *)ldv_16_ldv_param_2_11);
    
#line 1458 
    goto ldv_call_16;
    case 19: 
#line 1461 
    ;
    
#line 1463 
    ldv_16_ldv_param_1_9 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
    
#line 1468 
    ldv_emg_wrapper_i40evf_get_drvinfo_10(ldv_16_container,ldv_16_ldv_param_1_9);
    
#line 1472 
    ldv_free((void *)ldv_16_ldv_param_1_9);
    
#line 1479 
    goto ldv_call_16;
    case 20: 
#line 1482 
    ;
    
#line 1484 
    ldv_16_ldv_param_1_8 = (struct ethtool_channels *)ldv_xmalloc_unknown_size(0UL);
    
#line 1489 
    ldv_emg_wrapper_i40evf_get_channels_6(ldv_16_container,ldv_16_ldv_param_1_8);
    
#line 1493 
    ldv_free((void *)ldv_16_ldv_param_1_8);
    
#line 1500 
    goto ldv_call_16;
    case 21: 
#line 1503 
    ;
    
#line 1505 
    ldv_16_ldv_param_1_7 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
    
#line 1510 
    ldv_emg_wrapper_i40evf_set_rxnfc_9(ldv_16_container,ldv_16_ldv_param_1_7);
    
#line 1514 
    ldv_free((void *)ldv_16_ldv_param_1_7);
    
#line 1521 
    goto ldv_call_16;
    case 22: 
#line 1524 
    ;
    
#line 1527 
    (*ldv_emg_alias_eth_validate_addr_2)(ldv_16_container);
    
#line 1534 
    goto ldv_call_16;
    case 23: 
#line 1537 
    ;
    
#line 1539 
    ldv_16_ldv_param_1_5 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
    
#line 1540 
    ldv_16_ldv_param_2_6 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1545 
    ldv_emg_wrapper_i40evf_get_ethtool_stats_7(ldv_16_container,ldv_16_ldv_param_1_5,ldv_16_ldv_param_2_6);
    
#line 1549 
    ldv_free((void *)ldv_16_ldv_param_1_5);
    
#line 1550 
    ldv_free((void *)ldv_16_ldv_param_2_6);
    
#line 1557 
    goto ldv_call_16;
    case 24: 
#line 1560 
    ;
    
#line 1562 
    ldv_16_ldv_param_1_4 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
    
#line 1567 
    ldv_emg_wrapper_i40evf_get_ringparam_23(ldv_16_container,ldv_16_ldv_param_1_4);
    
#line 1571 
    ldv_free((void *)ldv_16_ldv_param_1_4);
    
#line 1578 
    goto ldv_call_16;
    case 25: 
#line 1581 
    ;
    
#line 1587 
    ldv_emg_wrapper_i40evf_change_mtu_8(ldv_16_container,ldv_16_ldv_param_1_3);
    
#line 1597 
    goto ldv_call_16;
    case 26: 
#line 1600 
    ;
    
#line 1606 
    ldv_emg_wrapper_i40evf_set_msglevel_22(ldv_16_container,ldv_16_ldv_param_1_2);
    
#line 1616 
    goto ldv_call_16;
    case 27: 
#line 1619 
    ;
    
#line 1622 
    ldv_emg_wrapper_i40evf_get_rxfh_indir_size_4(ldv_16_container);
    
#line 1629 
    goto ldv_call_16;
    case 28: 
#line 1632 
    ;
    
#line 1638 
    __retres = (void *)0;
    
#line 1638 
    goto return_label;
    default: 
#line 1641 
    ;
    
#line 1641 
    __VERIFIER_assume(0);
  }
  
#line 1644 
  __retres = (void *)0;
  return_label: 
#line 1644 
                return __retres;
}


#line 1649  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/i40evf/i40evf.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  int __retres;
  struct timer_list *ldv_3_timer_list;
  int tmp_0;
  
#line 1656 
  tmp_0 = ldv_undef_int();
  
#line 1656 
  if (tmp_0 != 0) {
    
#line 1658 
    ldv_3_timer_list = arg0;
    
#line 1662 
    ldv_dispatch_instance_register_3_3(ldv_3_timer_list);
    
#line 1666 
    __retres = 0;
    
#line 1666 
    goto return_label;
  }
  else {
    int tmp;
    
#line 1673 
    tmp = ldv_undef_int_negative();
    
#line 1673 
    __retres = tmp;
    
#line 1673 
    goto return_label;
  }
  return_label: 
#line 1656 
                return __retres;
}


