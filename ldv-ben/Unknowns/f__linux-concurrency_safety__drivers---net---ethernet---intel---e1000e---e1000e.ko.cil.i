/* Generated by Frama-C */

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef long long __s64;

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef signed char s8;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned char u8;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned short u16;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef int s32;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned int u32;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef long long s64;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __be16;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __be32;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __wsum;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 __kernel_dev_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_dev_t dev_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned short umode_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_pid_t pid_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef _Bool bool;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_uid32_t uid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_gid32_t gid_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_loff_t loff_t;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_size_t size_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_time_t time_t;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __s32 int32_t;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u8 uint8_t;

#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 uint32_t;

#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u64 uint64_t;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long sector_t;

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long blkcnt_t;

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 dma_addr_t;

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int gfp_t;

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int fmode_t;

#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int oom_flags_t;

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 phys_addr_t;

#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef phys_addr_t resource_size_t;

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};

#line 188 
struct hlist_node;

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 cycle_t;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_9 {
   unsigned int a ;
   unsigned int b ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_10 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base1 : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) type : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) s : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) dpl : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) p : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) limit : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) avl : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) g : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base2 : 8 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
union __anonunion_8 {
   struct __anonstruct_9 __anonCompField___anonunion_8_4 ;
   struct __anonstruct_10 __anonCompField___anonunion_8_5 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_8 __anonCompField_desc_struct_6 ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pteval_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_11 {
   pteval_t pte ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_11 pte_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_12 {
   pgdval_t pgd ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_12 pgd_t;

#line 361 
struct page;

#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;

#line 372 
struct file;

#line 385 
struct seq_file;

#line 423 
struct thread_struct;

#line 425 
struct mm_struct;

#line 426 
struct task_struct;

#line 427 
struct cpumask;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/spinlock_types.h"
struct qspinlock {
   atomic_t val ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
struct qrwlock {
   atomic_t cnts ;
   arch_spinlock_t lock ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;

#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct _ddebug {
   char const *modname ;
   char const *function ;
   char const *filename ;
   char const *format ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))) lineno : 18 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) flags : 8 ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
struct device;

#line 54 
struct net_device;

#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct file_operations;

#line 432 
struct completion;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct timespec;

#line 103 
struct compat_timespec;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_futex_16 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_nanosleep_17 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_poll_18 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
union __anonunion_15 {
   struct __anonstruct_futex_16 futex ;
   struct __anonstruct_nanosleep_17 nanosleep ;
   struct __anonstruct_poll_18 poll ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_15 __anonCompField_restart_block_7 ;
};

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
union __anonunion_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_19 __anonCompField_math_emu_info_8 ;
};

#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[128U] ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/special_insns.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_29 {
   u64 rip ;
   u64 rdp ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_30 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_28 {
   struct __anonstruct_29 __anonCompField___anonunion_28_12 ;
   struct __anonstruct_30 __anonCompField___anonunion_28_13 ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_31 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_28 __anonCompField_fxregs_state_14 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_31 __anonCompField_fxregs_state_15 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 __reserved[464U] ;
};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned char fpstate_active ;
   unsigned char fpregs_active ;
   unsigned char counter ;
   union fpregs_state state ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct seq_operations;

#line 369 
struct perf_event;

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   struct fpu fpu ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
struct lockdep_map;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const *name ;
   int cpu ;
   unsigned long ip ;
};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))) class_idx : 13 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_context : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) trylock : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) read : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) check : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hardirqs_off : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(12))) references : 12 ;
   unsigned int pin_count ;
};

#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct __anonstruct_35 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
union __anonunion_34 {
   struct raw_spinlock rlock ;
   struct __anonstruct_35 __anonCompField___anonunion_34_17 ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_34 __anonCompField_spinlock_18 ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_36 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_36 rwlock_t;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct mutex;

#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_45 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_45 seqlock_t;

#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};

#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
typedef union ktime ktime_t;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debugobjects.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(unsigned long ) ;
   unsigned long data ;
   u32 flags ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};

#line 238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct hrtimer;

#line 239 
enum hrtimer_restart;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;

#line 1170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};

#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct notifier_block;

#line 1120  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};

#line 837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/sysctl.h"
struct ctl_table;

#line 838 
struct nsproxy;

#line 839 
struct ctl_table_root;

#line 840 
struct ctl_table_header;

#line 841 
struct ctl_dir;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);

#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table {
   char const *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct __anonstruct_47 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
union __anonunion_46 {
   struct __anonstruct_47 __anonCompField___anonunion_46_19 ;
   struct callback_head rcu ;
};

#line 122 
struct ctl_table_set;

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_46 __anonCompField_ctl_table_header_20 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};

#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};

#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *, struct nsproxy *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};

#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct workqueue_struct;

#line 260 
struct work_struct;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};

#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/iomap.h"
struct pci_dev;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/xen/features.h"
struct bio_vec;

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/prefetch.h"
struct vm_area_struct;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmdebug.h"
struct llist_node;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_message {
   int event ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
typedef struct pm_message pm_message_t;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};

#line 320 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};

#line 327 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};

#line 335 
struct wakeup_source;

#line 336 
struct wake_irq;

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};

#line 553 
struct dev_pm_qos;

#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) can_wakeup : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) async_suspend : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_prepared : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_noirq_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_late_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_children : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) early_init : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) direct_complete : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_path : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) disable_depth : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) idle_notification : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) request_pending : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) deferred_resume : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) run_wake : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_auto : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_callbacks : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_safe : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) use_autosuspend : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) timer_autosuspends : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};

#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_134 {
   unsigned long bits[16U] ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_134 nodemask_t;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/topology.h"
struct pci_bus;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   void *magic ;
   struct lockdep_map dep_map ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct ldt_struct;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_135 {
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   atomic_t perf_rdpmc_allowed ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_135 mm_context_t;

#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist.h"
union __anonunion_144 {
   unsigned long bitmap[4U] ;
   struct callback_head callback_head ;
};

#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist.h"
struct idr_layer {
   int prefix ;
   int layer ;
   struct idr_layer *ary[256U] ;
   int count ;
   union __anonunion_144 __anonCompField_idr_layer_31 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   int layers ;
   int cur ;
   spinlock_t lock ;
   int id_free_cnt ;
   struct idr_layer *id_free ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};

#line 185 
struct dentry;

#line 186 
struct iattr;

#line 187 
struct super_block;

#line 188 
struct file_system_type;

#line 189 
struct kernfs_open_node;

#line 190 
struct kernfs_iattrs;

#line 213 
struct kernfs_root;

#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};

#line 89 
struct kernfs_ops;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops const *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
union __anonunion_149 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const *name ;
   struct rb_node rb ;
   void const *ns ;
   unsigned int hash ;
   union __anonunion_149 __anonCompField_kernfs_node_32 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root *, int *, char *) ;
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char const *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char const *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};

#line 171 
struct vm_operations_struct;

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct const *vm_ops ;
};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};

#line 281 
struct inode;

#line 478 
struct kobject;

#line 479 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};

#line 485  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const *(*netlink_ns)(struct sock *) ;
   void const *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highuid.h"
struct user_namespace;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kuid_t_150 {
   uid_t val ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_150 kuid_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kgid_t_151 {
   gid_t val ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_151 kgid_t;

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct bin_attribute;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct attribute {
   char const *name ;
   umode_t mode ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct attribute_group {
   char const *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char const *, size_t ) ;
};

#line 509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset;

#line 52 
struct kobj_type;

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobject {
   char const *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_initialized : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_in_sysfs : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_add_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_remove_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) uevent_suppress : 1 ;
};

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops const *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations const *(*child_ns_type)(struct kobject *) ;
   void const *(*namespace)(struct kobject *) ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const filter)(struct kset *, struct kobject *) ;
   char const *(* const name)(struct kset *, struct kobject *) ;
   int (* const uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops const *uevent_ops ;
};

#line 223 
struct klist_node;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};

#line 67 
struct path;

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations const *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};

#line 222 
struct pinctrl;

#line 223 
struct pinctrl_state;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};

#line 796  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct rw_semaphore;

#line 797  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct rw_semaphore {
   long count ;
   struct list_head wait_list ;
   raw_spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct task_struct *owner ;
   struct lockdep_map dep_map ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};

#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/notifier.h"
struct blocking_notifier_head {
   struct rw_semaphore rwsem ;
   struct notifier_block *head ;
};

#line 428  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
struct dma_map_ops;

#line 428  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/device.h"
struct device_driver;

#line 16 
struct driver_private;

#line 17 
struct class;

#line 18 
struct subsys_private;

#line 19 
struct bus_type;

#line 20 
struct device_node;

#line 21 
struct fwnode_handle;

#line 22 
struct iommu_ops;

#line 23 
struct iommu_group;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct bus_type {
   char const *name ;
   char const *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group const **bus_groups ;
   struct attribute_group const **dev_groups ;
   struct attribute_group const **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct iommu_ops const *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};

#line 139 
struct device_type;

#line 197 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};

#line 203 
struct of_device_id;

#line 203 
struct acpi_device_id;

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_driver {
   char const *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id const *of_match_table ;
   struct acpi_device_id const *acpi_match_table ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group const **groups ;
   struct dev_pm_ops const *pm ;
   struct driver_private *p ;
};

#line 353 
struct class_attribute;

#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class {
   char const *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group const **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct kobj_ns_type_operations const *ns_type ;
   void const *(*namespace)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct subsys_private *p ;
};

#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *, struct class_attribute *, char *) ;
   ssize_t (*store)(struct class *, struct class_attribute *, char const *, size_t ) ;
};

#line 514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_type {
   char const *name ;
   struct attribute_group const **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops const *pm ;
};

#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char const *, size_t ) ;
};

#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};

#line 684 
struct dma_coherent_mem;

#line 684 
struct cma;

#line 684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const *init_name ;
   struct device_type const *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group const **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline_disabled : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline : 1 ;
};

#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct wakeup_source {
   char const *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) active : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) autosleep_enabled : 1 ;
};

#line 1272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
union __anonunion_152 {
   struct iovec const *iov ;
   struct kvec const *kvec ;
   struct bio_vec const *bvec ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct iov_iter {
   int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_152 __anonCompField_iov_iter_33 ;
   unsigned long nr_segs ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};

#line 66 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_158 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_159 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
union __anonunion_157 {
   struct __anonstruct_158 __anonCompField___anonunion_157_36 ;
   struct __anonstruct_159 __anonCompField___anonunion_157_37 ;
};

#line 73 
struct uprobe;

#line 73 
struct return_instance;

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_157 __anonCompField_uprobe_task_38 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct xol_area;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};

#line 133 
struct address_space;

#line 134 
struct mem_cgroup;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
typedef void compound_page_dtor(struct page *);

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_160 {
   struct address_space *mapping ;
   void *s_mem ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_162 {
   unsigned long index ;
   void *freelist ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_166 {
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) inuse : 16 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(15))) objects : 15 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) frozen : 1 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_165 {
   atomic_t _mapcount ;
   struct __anonstruct_166 __anonCompField___anonunion_165_41 ;
   int units ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_164 {
   union __anonunion_165 __anonCompField___anonstruct_164_42 ;
   atomic_t _count ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_163 {
   unsigned long counters ;
   struct __anonstruct_164 __anonCompField___anonunion_163_43 ;
   unsigned int active ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_161 {
   union __anonunion_162 __anonCompField___anonstruct_161_40 ;
   union __anonunion_163 __anonCompField___anonstruct_161_44 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_168 {
   struct page *next ;
   int pages ;
   int pobjects ;
};

#line 32 
struct slab;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_169 {
   compound_page_dtor *compound_dtor ;
   unsigned long compound_order ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_167 {
   struct list_head lru ;
   struct __anonstruct_168 __anonCompField___anonunion_167_46 ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   struct __anonstruct_169 __anonCompField___anonunion_167_47 ;
   pgtable_t pmd_huge_pte ;
};

#line 32 
struct kmem_cache;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_170 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_160 __anonCompField_page_39 ;
   struct __anonstruct_161 __anonCompField_page_45 ;
   union __anonunion_167 __anonCompField_page_48 ;
   union __anonunion_170 __anonCompField_page_49 ;
   struct mem_cgroup *mem_cgroup ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_shared_171 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};

#line 257 
struct anon_vma;

#line 257 
struct mempolicy;

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_171 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct const *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};

#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};

#line 357 
struct kioctx_table;

#line 358 
struct linux_binfmt;

#line 358 
struct mmu_notifier_mm;

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u32 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   atomic_long_t nr_pmds ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
   void *bd_addr ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   int nid ;
   struct mem_cgroup *memcg ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page_ext.h"
struct file_ra_state;

#line 65 
struct user_struct;

#line 66 
struct writeback_control;

#line 67 
struct bdi_writeback;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *cow_page ;
   struct page *page ;
   unsigned long max_pgoff ;
   pte_t *pte ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*fault)(struct vm_area_struct *, struct vm_fault *) ;
   void (*map_pages)(struct vm_area_struct *, struct vm_fault *) ;
   int (*page_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*pfn_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char const *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};

#line 2291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};

#line 1182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sem_undo_list;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

#line 18 
struct pid;

#line 19 
struct cred;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};

#line 38 
struct kiocb;

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_174 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_174 sync_serial_settings;

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_175 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_175 te1_settings;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_176 {
   unsigned short encoding ;
   unsigned short parity ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_176 raw_hdlc_proto;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_177 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_177 fr_proto;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_178 {
   unsigned int dlci ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_178 fr_proto_pvc;

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_179 {
   unsigned int dlci ;
   char master[16U] ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_179 fr_proto_pvc_info;

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_180 {
   unsigned int interval ;
   unsigned int timeout ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_180 cisco_proto;

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_181 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_181 ifs_ifsu ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_182 {
   char ifrn_name[16U] ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_183 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_182 ifr_ifrn ;
   union __anonunion_ifr_ifru_183 ifr_ifru ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_node;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct __anonstruct_188 {
   spinlock_t lock ;
   int count ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
union __anonunion_187 {
   struct __anonstruct_188 __anonCompField___anonunion_187_50 ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion_187 __anonCompField_lockref_51 ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct vfsmount;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct __anonstruct_190 {
   u32 hash ;
   u32 len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
union __anonunion_189 {
   struct __anonstruct_190 __anonCompField___anonunion_189_52 ;
   u64 hash_len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct qstr {
   union __anonunion_189 __anonCompField_qstr_53 ;
   unsigned char const *name ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
union __anonunion_d_u_191 {
   struct hlist_node d_alias ;
   struct callback_head d_rcu ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations const *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_191 d_u ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry const *, struct qstr *) ;
   int (*d_compare)(struct dentry const *, struct dentry const *, unsigned int , char const *, struct qstr const *) ;
   int (*d_delete)(struct dentry const *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct dentry *, bool ) ;
   struct inode *(*d_select_inode)(struct dentry *, unsigned int ) ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/path.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_memcg {
   struct list_lru_one *lru[0U] ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
};

#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct __anonstruct_195 {
   struct radix_tree_node *parent ;
   void *private_data ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
union __anonunion_194 {
   struct __anonstruct_195 __anonCompField___anonunion_194_54 ;
   struct callback_head callback_head ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_node {
   unsigned int path ;
   unsigned int count ;
   union __anonunion_194 __anonCompField_radix_tree_node_55 ;
   struct list_head private_list ;
   void *slots[64U] ;
   unsigned long tags[3U][1U] ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};

#line 428 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
};

#line 435 
struct pid_namespace;

#line 435  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct block_device;

#line 31 
struct io_context;

#line 32 
struct cgroup_subsys_state;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fs.h"
struct backing_dev_info;

#line 61 
struct export_operations;

#line 63 
struct pipe_inode_info;

#line 65 
struct kstatfs;

#line 66 
struct swap_info_struct;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};

#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dqblk_xfs.h"
struct dquot;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
struct __anonstruct_kprojid_t_200 {
   projid_t val ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_200 kprojid_t;

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
typedef long long qsize_t;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
union __anonunion_201 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kqid {
   union __anonunion_201 __anonCompField_kqid_57 ;
   enum quota_type type ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};

#line 206 
struct quota_format_type;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};

#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};

#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
};

#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};

#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};

#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};

#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};

#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};

#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops const *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};

#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops const *ops[3U] ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
};

#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *, loff_t ) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};

#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   atomic_t i_mmap_writable ;
   struct rb_root i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrshadows ;
   unsigned long writeback_index ;
   struct address_space_operations const *a_ops ;
   unsigned long flags ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};

#line 443 
struct request_queue;

#line 444 
struct hd_struct;

#line 444 
struct gendisk;

#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};

#line 560 
struct posix_acl;

#line 561 
struct inode_operations;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_204 {
   unsigned int const i_nlink ;
   unsigned int __i_nlink ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_205 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};

#line 561 
struct file_lock_context;

#line 561 
struct cdev;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_206 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations const *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_204 __anonCompField_inode_58 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_205 __anonCompField_inode_59 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   struct file_operations const *i_fop ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_206 __anonCompField_inode_60 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   void *i_private ;
};

#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};

#line 815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_f_u_207 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file {
   union __anonunion_f_u_207 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations const *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred const *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
};

#line 923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
typedef void *fl_owner_t;

#line 924 
struct file_lock;

#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};

#line 931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock *, struct file_lock *) ;
   unsigned long (*lm_owner_key)(struct file_lock *) ;
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};

#line 947 
struct net;

#line 952 
struct nlm_lockowner;

#line 953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};

#line 19 
struct fasync_struct;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_209 {
   struct list_head link ;
   int state ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_208 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_209 afs ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations const *fl_ops ;
   struct lock_manager_operations const *fl_lmops ;
   union __anonunion_fl_u_208 fl_u ;
};

#line 1005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};

#line 1061 
struct files_struct;

#line 1221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};

#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};

#line 1287 
struct super_operations;

#line 1287 
struct xattr_handler;

#line 1287 
struct mtd_info;

#line 1287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations const *s_op ;
   struct dquot_operations const *dq_op ;
   struct quotactl_ops const *s_qcop ;
   struct export_operations const *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler const **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations const *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   int s_stack_depth ;
};

#line 1526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};

#line 1540 
struct dir_context;

#line 1565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char const *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};

#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char const *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   unsigned int (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*mremap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*aio_fsync)(struct kiocb *, int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
};

#line 1633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char const *(*follow_link)(struct dentry *, void **) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   void (*put_link)(struct inode *, void *) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char const *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *) ;
   int (*rename2)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct vfsmount *, struct dentry *, struct kstat *) ;
   int (*setxattr)(struct dentry *, char const *, void const *, size_t , int ) ;
   ssize_t (*getxattr)(struct dentry *, char const *, void *, size_t ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*removexattr)(struct dentry *, char const *) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t , int *) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
};

#line 1687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char const *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};

#line 1926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_system_type {
   char const *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type *, int , char const *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct plist_head {
   struct list_head node_list ;
};

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};

#line 4  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_210 {
   unsigned long sig[1U] ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_210 sigset_t;

#line 25 
struct siginfo;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int );

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};

#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_212 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_213 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_214 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_215 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_217 {
   void *_lower ;
   void *_upper ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_216 {
   void *_addr ;
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_217 _addr_bnd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_218 {
   long _band ;
   int _fd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_219 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_211 {
   int _pad[28U] ;
   struct __anonstruct__kill_212 _kill ;
   struct __anonstruct__timer_213 _timer ;
   struct __anonstruct__rt_214 _rt ;
   struct __anonstruct__sigchld_215 _sigchld ;
   struct __anonstruct__sigfault_216 _sigfault ;
   struct __anonstruct__sigpoll_218 _sigpoll ;
   struct __anonstruct__sigsys_219 _sigsys ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_211 _sifields ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};

#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp_filter;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct rt_mutex_waiter;

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};

#line 50 
struct hrtimer_clock_base;

#line 51 
struct hrtimer_cpu_base;

#line 60 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
};

#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   seqcount_t seq ;
   struct hrtimer *running ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   bool migration_enabled ;
   bool nohz_active ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_hrtirq : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hres_active : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hang_detected : 1 ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   unsigned int nr_events ;
   unsigned int nr_retries ;
   unsigned int nr_hangs ;
   unsigned int max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array_ptr;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef int32_t key_serial_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef uint32_t key_perm_t;

#line 35 
struct key;

#line 36 
struct signal_struct;

#line 37 
struct key_type;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct keyring_index_key {
   struct key_type *type ;
   char const *description ;
   size_t desc_len ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_222 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};

#line 123 
struct key_user;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_223 {
   time_t expiry ;
   time_t revoked_at ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct __anonstruct_225 {
   struct key_type *type ;
   char *description ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_224 {
   struct keyring_index_key index_key ;
   struct __anonstruct_225 __anonCompField___anonunion_224_63 ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_type_data_226 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_payload_228 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_227 {
   union __anonunion_payload_228 payload ;
   struct assoc_array keys ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_222 __anonCompField_key_61 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_223 __anonCompField_key_62 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion_224 __anonCompField_key_64 ;
   union __anonunion_type_data_226 type_data ;
   union __anonunion_227 __anonCompField_key_65 ;
};

#line 358 
struct audit_context;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};

#line 369 
struct percpu_ref;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref *);

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) force_atomic : 1 ;
   struct callback_head rcu ;
};

#line 327 
struct cgroup;

#line 328 
struct cgroup_root;

#line 329 
struct cgroup_subsys;

#line 330 
struct cgroup_taskset;

#line 372  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   struct list_head sibling ;
   struct list_head children ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head cgrp_links ;
   struct cgroup *dfl_cgrp ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct css_set *mg_dst_cset ;
   struct list_head e_cset_node[12U] ;
   struct callback_head callback_head ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int id ;
   int populated_cnt ;
   struct kernfs_node *kn ;
   struct kernfs_node *procs_kn ;
   struct kernfs_node *populated_kn ;
   unsigned int subtree_control ;
   unsigned int child_subsys_mask ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[12U] ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
};

#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   struct lock_class_key lockdep_key ;
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_e_css_changed)(struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct cgroup_subsys_state *, struct cgroup_subsys_state *, struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   int id ;
   char const *name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct futex_pi_state;

#line 129 
struct robust_list_head;

#line 130 
struct bio_list;

#line 131 
struct fs_struct;

#line 132 
struct perf_event_context;

#line 133 
struct blk_plug;

#line 134 
struct nameidata;

#line 188 
struct cfs_rq;

#line 189 
struct task_group;

#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};

#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};

#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};

#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};

#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};

#line 563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
   int running ;
};

#line 620 
struct autogroup;

#line 621 
struct tty_struct;

#line 621 
struct taskstats;

#line 621 
struct tty_audit_buf;

#line 621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_child_subreaper : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};

#line 802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};

#line 845 
struct reclaim_state;

#line 846  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};

#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   u64 blkio_start ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   u64 freepages_start ;
   u64 freepages_delay ;
   u32 freepages_count ;
};

#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};

#line 1172 
struct uts_namespace;

#line 1173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};

#line 1181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_avg {
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
   unsigned long utilization_avg_contrib ;
   u32 runnable_avg_sum ;
   u32 avg_period ;
   u32 running_avg_sum ;
};

#line 1206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};

#line 1241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};

#line 1273 
struct rt_rq;

#line 1273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};

#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   int dl_yielded ;
   struct hrtimer dl_timer ;
};

#line 1355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) may_oom : 1 ;
};

#line 1779 
struct sched_class;

#line 1779 
struct compat_robust_list_head;

#line 1779 
struct numa_group;

#line 1779 
struct ftrace_ret_stack;

#line 1779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_struct {
   long volatile state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class const *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   unsigned long rcu_tasks_nvcsw ;
   bool rcu_tasks_holdout ;
   struct list_head rcu_tasks_holdout_list ;
   int rcu_tasks_idle_cpu ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   u32 vmacache_seqnum ;
   struct vm_area_struct *vmacache[4U] ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_execve : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_iowait : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_reset_on_fork : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_contributes_to_load : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_migrated : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memcg_kmem_skip_account : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) brk_randomized : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred const *real_cred ;
   struct cred const *cred ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct thread_struct thread ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};

#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
struct in6_addr;

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct sk_buff;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   int (*mapping_error)(struct device *, dma_addr_t ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   int (*set_dma_mask)(struct device *, u64 ) ;
   int is_phys ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
typedef u64 netdev_features_t;

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
union __anonunion_in6_u_257 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
struct in6_addr {
   union __anonunion_in6_u_257 in6_u ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/in6.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buf_operations;

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations const *ops ;
   unsigned int flags ;
   unsigned long private ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int nrbufs ;
   unsigned int curbuf ;
   unsigned int buffers ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int waiting_writers ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int can_merge ;
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct napi_struct;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct nf_conntrack {
   atomic_t use ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
enum ldv_25023 {
    BRNF_PROTO_UNCHANGED = 0,
    BRNF_PROTO_8021Q = 1,
    BRNF_PROTO_PPPOE = 2
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_262 {
   struct net_device *physoutdev ;
   char neigh_header[8U] ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_263 {
   __be32 ipv4_daddr ;
   struct in6_addr ipv6_daddr ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   enum ldv_25023 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) orig_proto : 8 ;
   bool pkt_otherhost ;
   __u16 frag_max_size ;
   unsigned int mask ;
   struct net_device *physindev ;
   union __anonunion_262 __anonCompField_nf_bridge_info_72 ;
   union __anonunion_263 __anonCompField_nf_bridge_info_73 ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};

#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_266 {
   u32 stamp_us ;
   u32 stamp_jiffies ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_265 {
   u64 v64 ;
   struct __anonstruct_266 __anonCompField___anonunion_265_74 ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_mstamp {
   union __anonunion_265 __anonCompField_skb_mstamp_75 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_269 {
   ktime_t tstamp ;
   struct skb_mstamp skb_mstamp ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_268 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_269 __anonCompField___anonstruct_268_76 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_267 {
   struct __anonstruct_268 __anonCompField___anonunion_267_77 ;
   struct rb_node rbnode ;
};

#line 457 
struct sec_path;

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_271 {
   __u16 csum_start ;
   __u16 csum_offset ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_270 {
   __wsum csum ;
   struct __anonstruct_271 __anonCompField___anonunion_270_79 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_272 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_273 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_274 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_267 __anonCompField_sk_buff_78 ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
   struct sec_path *sp ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cloned : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nohdr : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) fclone : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) peeked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) head_frag : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) xmit_more : 1 ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pkt_type : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pfmemalloc : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_df : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) nfctinfo : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nf_trace : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ip_summed : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ooo_okay : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l4_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sw_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_fcs : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encapsulation : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encap_hdr_csum : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_complete_sw : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) csum_level : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_bad : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ndisc_nodetype : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ipvs_property : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) inner_protocol_type : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) remcsum_offload : 1 ;
   __u16 tc_index ;
   __u16 tc_verd ;
   union __anonunion_270 __anonCompField_sk_buff_80 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_272 __anonCompField_sk_buff_81 ;
   __u32 secmark ;
   union __anonunion_273 __anonCompField_sk_buff_82 ;
   union __anonunion_274 __anonCompField_sk_buff_83 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_ether.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};

#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};

#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};

#line 438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};

#line 475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};

#line 503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};

#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};

#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};

#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};

#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};

#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};

#line 748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};

#line 759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};

#line 778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};

#line 828  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};

#line 999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};

#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device *, struct ethtool_cmd *) ;
   int (*set_settings)(struct net_device *, struct ethtool_cmd *) ;
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 const *, u8 const *, u8 const ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable const *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable const *, void const *) ;
};

#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct prot_inuse;

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct u64_stats_sync {
   
};

#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[115U] ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};

#line 118 
struct proc_dir_entry;

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/packet.h"
struct netns_frags {
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct ipv4_devconf;

#line 185 
struct fib_rules_ops;

#line 186 
struct fib_table;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};

#line 29 
struct xt_table;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry const *) ;
   unsigned int (*mtu)(struct dst_entry const *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry const *, struct sk_buff *, void const *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct rt6_info;

#line 39 
struct rt6_statistics;

#line 39 
struct fib6_table;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct netns_frags frags ;
};

#line 20 
struct sctp_mib;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct nf_logger;

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger const *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct ebt_table;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};

#line 72 
struct ip_conntrack_stat;

#line 72 
struct nf_ct_event_notifier;

#line 72 
struct nf_exp_event_notifier;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   seqcount_t generation ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};

#line 114 
struct nft_af_info;

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   struct nft_af_info *netdev ;
   unsigned int base_seq ;
   u8 gencursor ;
};

#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};

#line 672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct flow_cache_percpu {
   struct hlist_head *hash_table ;
   int hash_count ;
   u32 hash_rnd ;
   int hash_rnd_recalc ;
   struct tasklet_struct flush_tasklet ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct flow_cache {
   u32 hash_shift ;
   struct flow_cache_percpu *percpu ;
   struct notifier_block hotcpu_notifier ;
   int low_watermark ;
   int high_watermark ;
   struct timer_list rnd_timer ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
   struct flow_cache flow_cache_global ;
   atomic_t flow_cache_genid ;
   struct list_head flow_cache_gc_list ;
   spinlock_t flow_cache_gc_lock ;
   struct work_struct flow_cache_gc_work ;
   struct work_struct flow_cache_flush_work ;
   struct mutex flow_flush_sem ;
};

#line 88 
struct mpls_route;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_mpls {
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct proc_ns_operations;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations const *ops ;
   unsigned int inum ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net_generic;

#line 12 
struct netns_ipvs;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   atomic64_t cookie_gen ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   spinlock_t nsid_lock ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_291 {
   struct net *net ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_291 possible_net_t;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const *data ;
};

#line 652 
enum fwnode_type {
    FWNODE_INVALID = 0,
    FWNODE_OF = 1,
    FWNODE_ACPI = 2,
    FWNODE_PDATA = 3
};

#line 659  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct fwnode_handle {
   enum fwnode_type type ;
   struct fwnode_handle *secondary ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
typedef u32 phandle;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
   struct bin_attribute attr ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct device_node {
   char const *name ;
   char const *type ;
   phandle phandle ;
   char const *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
enum ldv_27932 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_MII = 1,
    PHY_INTERFACE_MODE_GMII = 2,
    PHY_INTERFACE_MODE_SGMII = 3,
    PHY_INTERFACE_MODE_TBI = 4,
    PHY_INTERFACE_MODE_REVMII = 5,
    PHY_INTERFACE_MODE_RMII = 6,
    PHY_INTERFACE_MODE_RGMII = 7,
    PHY_INTERFACE_MODE_RGMII_ID = 8,
    PHY_INTERFACE_MODE_RGMII_RXID = 9,
    PHY_INTERFACE_MODE_RGMII_TXID = 10,
    PHY_INTERFACE_MODE_RTBI = 11,
    PHY_INTERFACE_MODE_SMII = 12,
    PHY_INTERFACE_MODE_XGMII = 13,
    PHY_INTERFACE_MODE_MOCA = 14,
    PHY_INTERFACE_MODE_QSGMII = 15,
    PHY_INTERFACE_MODE_MAX = 16
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
typedef enum ldv_27932 phy_interface_t;

#line 126 
enum ldv_27985 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};

#line 133 
struct phy_device;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct mii_bus {
   char const *name ;
   char id[17U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_27985 state ;
   struct device dev ;
   struct phy_device *phy_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int *irq ;
};

#line 214 
enum phy_state {
    PHY_DOWN = 0,
    PHY_STARTING = 1,
    PHY_READY = 2,
    PHY_PENDING = 3,
    PHY_UP = 4,
    PHY_AN = 5,
    PHY_RUNNING = 6,
    PHY_NOLINK = 7,
    PHY_FORCING = 8,
    PHY_CHANGELINK = 9,
    PHY_HALTED = 10,
    PHY_RESUMING = 11
};

#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};

#line 323 
struct phy_driver;

#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_device {
   struct phy_driver *drv ;
   struct mii_bus *bus ;
   struct device dev ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   bool is_c45 ;
   bool is_internal ;
   bool has_fixups ;
   bool suspended ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int addr ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   int link ;
   u32 interrupts ;
   u32 supported ;
   u32 advertising ;
   u32 lp_advertising ;
   int autoneg ;
   int link_timeout ;
   int irq ;
   void *priv ;
   struct work_struct phy_queue ;
   struct delayed_work state_queue ;
   atomic_t irq_disable ;
   struct mutex lock ;
   struct net_device *attached_dev ;
   void (*adjust_link)(struct net_device *) ;
};

#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_driver {
   u32 phy_id ;
   char *name ;
   unsigned int phy_id_mask ;
   u32 features ;
   u32 flags ;
   void const *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd_indirect)(struct phy_device *, int , int , int ) ;
   void (*write_mmd_indirect)(struct phy_device *, int , int , int , u32 ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   struct device_driver driver ;
};

#line 803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct fixed_phy_status {
   int link ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
enum dsa_tag_protocol {
    DSA_TAG_PROTO_NONE = 0,
    DSA_TAG_PROTO_DSA = 1,
    DSA_TAG_PROTO_TRAILER = 2,
    DSA_TAG_PROTO_EDSA = 3,
    DSA_TAG_PROTO_BRCM = 4
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
struct dsa_chip_data {
   struct device *host_dev ;
   int sw_addr ;
   int eeprom_len ;
   struct device_node *of_node ;
   char *port_names[12U] ;
   struct device_node *port_dn[12U] ;
   s8 *rtable ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   struct net_device *of_netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};

#line 84 
struct packet_type;

#line 85 
struct dsa_switch;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   int (*rcv)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   enum dsa_tag_protocol tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};

#line 123 
struct dsa_switch_driver;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   enum dsa_tag_protocol tag_protocol ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct device *master_dev ;
   char hwmon_name[24U] ;
   struct device *hwmon_dev ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   u32 phys_mii_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   enum dsa_tag_protocol tag_protocol ;
   int priv_size ;
   char *(*probe)(struct device *, int ) ;
   int (*setup)(struct dsa_switch *) ;
   int (*set_addr)(struct dsa_switch *, u8 *) ;
   u32 (*get_phy_flags)(struct dsa_switch *, int ) ;
   int (*phy_read)(struct dsa_switch *, int , int ) ;
   int (*phy_write)(struct dsa_switch *, int , int , u16 ) ;
   void (*poll_link)(struct dsa_switch *) ;
   void (*adjust_link)(struct dsa_switch *, int , struct phy_device *) ;
   void (*fixed_link_update)(struct dsa_switch *, int , struct fixed_phy_status *) ;
   void (*get_strings)(struct dsa_switch *, int , uint8_t *) ;
   void (*get_ethtool_stats)(struct dsa_switch *, int , uint64_t *) ;
   int (*get_sset_count)(struct dsa_switch *) ;
   void (*get_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*set_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*suspend)(struct dsa_switch *) ;
   int (*resume)(struct dsa_switch *) ;
   int (*port_enable)(struct dsa_switch *, int , struct phy_device *) ;
   void (*port_disable)(struct dsa_switch *, int , struct phy_device *) ;
   int (*set_eee)(struct dsa_switch *, int , struct phy_device *, struct ethtool_eee *) ;
   int (*get_eee)(struct dsa_switch *, int , struct ethtool_eee *) ;
   int (*get_temp)(struct dsa_switch *, int *) ;
   int (*get_temp_limit)(struct dsa_switch *, int *) ;
   int (*set_temp_limit)(struct dsa_switch *, int ) ;
   int (*get_temp_alarm)(struct dsa_switch *, bool *) ;
   int (*get_eeprom_len)(struct dsa_switch *) ;
   int (*get_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*get_regs_len)(struct dsa_switch *, int ) ;
   void (*get_regs)(struct dsa_switch *, int , struct ethtool_regs *, void *) ;
   int (*port_join_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_leave_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_stp_update)(struct dsa_switch *, int , u8 ) ;
   int (*fdb_add)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_del)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_getnext)(struct dsa_switch *, int , unsigned char *, bool *) ;
};

#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};

#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};

#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};

#line 1628  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct mnt_namespace;

#line 1629 
struct ipc_namespace;

#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr const *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};

#line 643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
};

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_bonding.h"
struct netpoll_info;

#line 119 
struct wireless_dev;

#line 120 
struct wpan_dev;

#line 121 
struct mpls_dev;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void const *, void const *, unsigned int ) ;
   int (*parse)(struct sk_buff const *, unsigned char *) ;
   int (*cache)(struct neighbour const *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device const *, unsigned char const *) ;
};

#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct *, int ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};

#line 340 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;

#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);

#line 537 
struct Qdisc;

#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
   unsigned long tx_maxrate ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};

#line 619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};

#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};

#line 683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};

#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};

#line 719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};

#line 730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};

#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};

#line 757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};

#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_busy_poll)(struct napi_struct *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, u8 ) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff const *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_add_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void (*ndo_del_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff *, struct net_device *, void *) ;
   int (*ndo_get_lock_subclass)(struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device const *) ;
};

#line 1243 
enum ldv_29697 {
    NETREG_UNINITIALIZED = 0,
    NETREG_REGISTERED = 1,
    NETREG_UNREGISTERING = 2,
    NETREG_UNREGISTERED = 3,
    NETREG_RELEASED = 4,
    NETREG_DUMMY = 5
};

#line 1252 
enum ldv_29698 {
    RTNL_LINK_INITIALIZED = 0,
    RTNL_LINK_INITIALIZING = 1
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_adj_list_304 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_all_adj_list_305 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257 
struct iw_handler_def;

#line 1257 
struct iw_public_data;

#line 1257 
struct switchdev_ops;

#line 1257 
struct vlan_info;

#line 1257 
struct tipc_bearer;

#line 1257 
struct in_device;

#line 1257 
struct dn_dev;

#line 1257 
struct tcf_proto;

#line 1257 
struct cpu_rmap;

#line 1257 
struct pcpu_lstats;

#line 1257 
struct pcpu_sw_netstats;

#line 1257 
struct pcpu_dstats;

#line 1257 
struct pcpu_vstats;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
union __anonunion_306 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};

#line 1257 
struct garp_port;

#line 1257 
struct mrp_port;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   atomic_t carrier_changes ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_304 adj_list ;
   struct __anonstruct_all_adj_list_305 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   struct iw_handler_def const *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops const *netdev_ops ;
   struct ethtool_ops const *ethtool_ops ;
   struct switchdev_ops const *switchdev_ops ;
   struct header_ops const *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct tcf_proto *ingress_cl_list ;
   struct netdev_queue *ingress_queue ;
   struct list_head nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   enum ldv_29697 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) reg_state : 8 ;
   bool dismantle ;
   enum ldv_29698 __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) rtnl_link_state : 16 ;
   void (*destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_306 __anonCompField_net_device_93 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group const *sysfs_groups[4U] ;
   struct attribute_group const *sysfs_rx_queue_group ;
   struct rtnl_link_ops const *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   u16 gso_min_segs ;
   struct dcbnl_rtnl_ops const *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
};

#line 1978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct packet_type {
   __be16 type ;
   struct net_device *dev ;
   int (*func)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   bool (*id_match)(struct packet_type *, struct sock *) ;
   void *af_packet_priv ;
   struct list_head list ;
};

#line 2025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct hotplug_slot;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef int pci_power_t;

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

#line 138 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;

#line 249 
struct pcie_link_state;

#line 250 
struct pci_vpd;

#line 251 
struct pci_sriov;

#line 252 
struct pci_ats;

#line 253 
struct pci_driver;

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
union __anonunion_311 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   u8 dma_alias_devfn ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   u8 pm_cap ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) pme_support : 5 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_interrupt : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_poll : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d1_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d2_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d1d2 : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d3cold_allowed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) mmio_always_on : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_prepared : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_hotplug : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) transparent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) multifunction : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_busmaster : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_64bit_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) block_cfg_access : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_parity_status : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_reroute_variant : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msi_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msix_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ari_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_freset : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_saved : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_physfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_virtfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) reset_fn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_hotplug_bridge : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first_valid : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_intx_masking : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) io_window_1k : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_secondary_link : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct attribute_group const **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_311 __anonCompField_pci_dev_94 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
};

#line 442 
struct pci_ops;

#line 442 
struct msi_controller;

#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
};

#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_ops {
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};

#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_notify)(struct pci_dev *, bool ) ;
   void (*resume)(struct pci_dev *) ;
};

#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char const *name ;
   struct pci_device_id const *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id const *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*suspend_late)(struct pci_dev *, pm_message_t ) ;
   int (*resume_early)(struct pci_dev *) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers const *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmapool.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};

#line 646  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct cyclecounter {
   cycle_t (*read)(struct cyclecounter const *) ;
   cycle_t mask ;
   u32 mult ;
   u32 shift ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timecounter.h"
struct timecounter {
   struct cyclecounter const *cc ;
   cycle_t cycle_last ;
   u64 nsec ;
   u64 mask ;
   u64 frac ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timecounter.h"
struct hwtstamp_config {
   int flags ;
   int tx_type ;
   int rx_filter ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/pps.h"
struct cdev {
   struct kobject kobj ;
   struct module *owner ;
   struct file_operations const *ops ;
   struct list_head list ;
   dev_t dev ;
   unsigned int count ;
};

#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pps_kernel.h"
struct ptp_clock_time {
   __s64 sec ;
   __u32 nsec ;
   __u32 reserved ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ptp_clock.h"
struct ptp_extts_request {
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[2U] ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ptp_clock.h"
struct ptp_perout_request {
   struct ptp_clock_time start ;
   struct ptp_clock_time period ;
   unsigned int index ;
   unsigned int flags ;
   unsigned int rsv[4U] ;
};

#line 83 
enum ptp_pin_function {
    PTP_PF_NONE = 0,
    PTP_PF_EXTTS = 1,
    PTP_PF_PEROUT = 2,
    PTP_PF_PHYSYNC = 3
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ptp_clock.h"
struct ptp_pin_desc {
   char name[64U] ;
   unsigned int index ;
   unsigned int func ;
   unsigned int chan ;
   unsigned int rsv[5U] ;
};

#line 134 
enum ldv_32513 {
    PTP_CLK_REQ_EXTTS = 0,
    PTP_CLK_REQ_PEROUT = 1,
    PTP_CLK_REQ_PPS = 2
};

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ptp_clock.h"
union __anonunion_320 {
   struct ptp_extts_request extts ;
   struct ptp_perout_request perout ;
};

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ptp_clock.h"
struct ptp_clock_request {
   enum ldv_32513 type ;
   union __anonunion_320 __anonCompField_ptp_clock_request_95 ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ptp_clock_kernel.h"
struct ptp_clock_info {
   struct module *owner ;
   char name[16U] ;
   s32 max_adj ;
   int n_alarm ;
   int n_ext_ts ;
   int n_per_out ;
   int n_pins ;
   int pps ;
   struct ptp_pin_desc *pin_config ;
   int (*adjfreq)(struct ptp_clock_info *, s32 ) ;
   int (*adjtime)(struct ptp_clock_info *, s64 ) ;
   int (*gettime64)(struct ptp_clock_info *, struct timespec *) ;
   int (*settime64)(struct ptp_clock_info *, struct timespec const *) ;
   int (*enable)(struct ptp_clock_info *, struct ptp_clock_request *, int ) ;
   int (*verify)(struct ptp_clock_info *, unsigned int , enum ptp_pin_function , unsigned int ) ;
};

#line 113 
struct ptp_clock;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/miscdevice.h"
struct pm_qos_request {
   struct plist_node node ;
   int pm_qos_class ;
   struct delayed_work work ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_qos.h"
struct pm_qos_flags_request {
   struct list_head node ;
   s32 flags ;
};

#line 55 
enum dev_pm_qos_req_type {
    DEV_PM_QOS_RESUME_LATENCY = 1,
    DEV_PM_QOS_LATENCY_TOLERANCE = 2,
    DEV_PM_QOS_FLAGS = 3
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_qos.h"
union __anonunion_data_322 {
   struct plist_node pnode ;
   struct pm_qos_flags_request flr ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_qos.h"
struct dev_pm_qos_request {
   enum dev_pm_qos_req_type type ;
   union __anonunion_data_322 data ;
   struct device *dev ;
};

#line 70 
enum pm_qos_type {
    PM_QOS_UNITIALIZED = 0,
    PM_QOS_MAX = 1,
    PM_QOS_MIN = 2,
    PM_QOS_SUM = 3
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_qos.h"
struct pm_qos_constraints {
   struct plist_head list ;
   s32 target_value ;
   s32 default_value ;
   s32 no_constraint_value ;
   enum pm_qos_type type ;
   struct blocking_notifier_head *notifiers ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_qos.h"
struct pm_qos_flags {
   struct list_head list ;
   s32 effective_flags ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_qos.h"
struct dev_pm_qos {
   struct pm_qos_constraints resume_latency ;
   struct pm_qos_constraints latency_tolerance ;
   struct pm_qos_flags flags ;
   struct dev_pm_qos_request *resume_latency_req ;
   struct dev_pm_qos_request *latency_tolerance_req ;
   struct dev_pm_qos_request *flags_req ;
};

#line 174 
struct e1000_hw;

#line 175 
enum e1000_mac_type {
    e1000_82571 = 0,
    e1000_82572 = 1,
    e1000_82573 = 2,
    e1000_82574 = 3,
    e1000_82583 = 4,
    e1000_80003es2lan = 5,
    e1000_ich8lan = 6,
    e1000_ich9lan = 7,
    e1000_ich10lan = 8,
    e1000_pchlan = 9,
    e1000_pch2lan = 10,
    e1000_pch_lpt = 11,
    e1000_pch_spt = 12
};

#line 191 
enum e1000_media_type {
    e1000_media_type_unknown = 0,
    e1000_media_type_copper = 1,
    e1000_media_type_fiber = 2,
    e1000_media_type_internal_serdes = 3,
    e1000_num_media_types = 4
};

#line 199 
enum e1000_nvm_type {
    e1000_nvm_unknown = 0,
    e1000_nvm_none = 1,
    e1000_nvm_eeprom_spi = 2,
    e1000_nvm_flash_hw = 3,
    e1000_nvm_flash_sw = 4
};

#line 207 
enum e1000_nvm_override {
    e1000_nvm_override_none = 0,
    e1000_nvm_override_spi_small = 1,
    e1000_nvm_override_spi_large = 2
};

#line 213 
enum e1000_phy_type {
    e1000_phy_unknown = 0,
    e1000_phy_none = 1,
    e1000_phy_m88 = 2,
    e1000_phy_igp = 3,
    e1000_phy_igp_2 = 4,
    e1000_phy_gg82563 = 5,
    e1000_phy_igp_3 = 6,
    e1000_phy_ife = 7,
    e1000_phy_bm = 8,
    e1000_phy_82578 = 9,
    e1000_phy_82577 = 10,
    e1000_phy_82579 = 11,
    e1000_phy_i217 = 12
};

#line 229 
enum e1000_bus_width {
    e1000_bus_width_unknown = 0,
    e1000_bus_width_pcie_x1 = 1,
    e1000_bus_width_pcie_x2 = 2,
    e1000_bus_width_pcie_x4 = 4,
    e1000_bus_width_pcie_x8 = 8,
    e1000_bus_width_32 = 9,
    e1000_bus_width_64 = 10,
    e1000_bus_width_reserved = 11
};

#line 240 
enum e1000_1000t_rx_status {
    e1000_1000t_rx_status_not_ok = 0,
    e1000_1000t_rx_status_ok = 1,
    e1000_1000t_rx_status_undefined = 255
};

#line 246 
enum e1000_rev_polarity {
    e1000_rev_polarity_normal = 0,
    e1000_rev_polarity_reversed = 1,
    e1000_rev_polarity_undefined = 255
};

#line 252 
enum e1000_fc_mode {
    e1000_fc_none = 0,
    e1000_fc_rx_pause = 1,
    e1000_fc_tx_pause = 2,
    e1000_fc_full = 3,
    e1000_fc_default = 255
};

#line 260 
enum e1000_ms_type {
    e1000_ms_hw_default = 0,
    e1000_ms_force_master = 1,
    e1000_ms_force_slave = 2,
    e1000_ms_auto = 3
};

#line 267 
enum e1000_smart_speed {
    e1000_smart_speed_default = 0,
    e1000_smart_speed_on = 1,
    e1000_smart_speed_off = 2
};

#line 273 
enum e1000_serdes_link_state {
    e1000_serdes_link_down = 0,
    e1000_serdes_link_autoneg_progress = 1,
    e1000_serdes_link_autoneg_complete = 2,
    e1000_serdes_link_forced_up = 3
};

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_hw_stats {
   u64 crcerrs ;
   u64 algnerrc ;
   u64 symerrs ;
   u64 rxerrc ;
   u64 mpc ;
   u64 scc ;
   u64 ecol ;
   u64 mcc ;
   u64 latecol ;
   u64 colc ;
   u64 dc ;
   u64 tncrs ;
   u64 sec ;
   u64 cexterr ;
   u64 rlec ;
   u64 xonrxc ;
   u64 xontxc ;
   u64 xoffrxc ;
   u64 xofftxc ;
   u64 fcruc ;
   u64 prc64 ;
   u64 prc127 ;
   u64 prc255 ;
   u64 prc511 ;
   u64 prc1023 ;
   u64 prc1522 ;
   u64 gprc ;
   u64 bprc ;
   u64 mprc ;
   u64 gptc ;
   u64 gorc ;
   u64 gotc ;
   u64 rnbc ;
   u64 ruc ;
   u64 rfc ;
   u64 roc ;
   u64 rjc ;
   u64 mgprc ;
   u64 mgpdc ;
   u64 mgptc ;
   u64 tor ;
   u64 tot ;
   u64 tpr ;
   u64 tpt ;
   u64 ptc64 ;
   u64 ptc127 ;
   u64 ptc255 ;
   u64 ptc511 ;
   u64 ptc1023 ;
   u64 ptc1522 ;
   u64 mptc ;
   u64 bptc ;
   u64 tsctc ;
   u64 tsctfc ;
   u64 iac ;
   u64 icrxptc ;
   u64 icrxatc ;
   u64 ictxptc ;
   u64 ictxatc ;
   u64 ictxqec ;
   u64 ictxqmtc ;
   u64 icrxdmtc ;
   u64 icrxoc ;
};

#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_phy_stats {
   u32 idle_errors ;
   u32 receive_errors ;
};

#line 410  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_host_mng_dhcp_cookie {
   u32 signature ;
   u8 status ;
   u8 reserved0 ;
   u16 vlan_id ;
   u32 reserved1 ;
   u16 reserved2 ;
   u8 reserved3 ;
   u8 checksum ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/manage.h"
struct e1000_mac_operations {
   s32 (*id_led_init)(struct e1000_hw *) ;
   s32 (*blink_led)(struct e1000_hw *) ;
   bool (*check_mng_mode)(struct e1000_hw *) ;
   s32 (*check_for_link)(struct e1000_hw *) ;
   s32 (*cleanup_led)(struct e1000_hw *) ;
   void (*clear_hw_cntrs)(struct e1000_hw *) ;
   void (*clear_vfta)(struct e1000_hw *) ;
   s32 (*get_bus_info)(struct e1000_hw *) ;
   void (*set_lan_id)(struct e1000_hw *) ;
   s32 (*get_link_up_info)(struct e1000_hw *, u16 *, u16 *) ;
   s32 (*led_on)(struct e1000_hw *) ;
   s32 (*led_off)(struct e1000_hw *) ;
   void (*update_mc_addr_list)(struct e1000_hw *, u8 *, u32 ) ;
   s32 (*reset_hw)(struct e1000_hw *) ;
   s32 (*init_hw)(struct e1000_hw *) ;
   s32 (*setup_link)(struct e1000_hw *) ;
   s32 (*setup_physical_interface)(struct e1000_hw *) ;
   s32 (*setup_led)(struct e1000_hw *) ;
   void (*write_vfta)(struct e1000_hw *, u32 , u32 ) ;
   void (*config_collision_dist)(struct e1000_hw *) ;
   int (*rar_set)(struct e1000_hw *, u8 *, u32 ) ;
   s32 (*read_mac_addr)(struct e1000_hw *) ;
   u32 (*rar_get_count)(struct e1000_hw *) ;
};

#line 482  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_phy_operations {
   s32 (*acquire)(struct e1000_hw *) ;
   s32 (*cfg_on_link_up)(struct e1000_hw *) ;
   s32 (*check_polarity)(struct e1000_hw *) ;
   s32 (*check_reset_block)(struct e1000_hw *) ;
   s32 (*commit)(struct e1000_hw *) ;
   s32 (*force_speed_duplex)(struct e1000_hw *) ;
   s32 (*get_cfg_done)(struct e1000_hw *) ;
   s32 (*get_cable_length)(struct e1000_hw *) ;
   s32 (*get_info)(struct e1000_hw *) ;
   s32 (*set_page)(struct e1000_hw *, u16 ) ;
   s32 (*read_reg)(struct e1000_hw *, u32 , u16 *) ;
   s32 (*read_reg_locked)(struct e1000_hw *, u32 , u16 *) ;
   s32 (*read_reg_page)(struct e1000_hw *, u32 , u16 *) ;
   void (*release)(struct e1000_hw *) ;
   s32 (*reset)(struct e1000_hw *) ;
   s32 (*set_d0_lplu_state)(struct e1000_hw *, bool ) ;
   s32 (*set_d3_lplu_state)(struct e1000_hw *, bool ) ;
   s32 (*write_reg)(struct e1000_hw *, u32 , u16 ) ;
   s32 (*write_reg_locked)(struct e1000_hw *, u32 , u16 ) ;
   s32 (*write_reg_page)(struct e1000_hw *, u32 , u16 ) ;
   void (*power_up)(struct e1000_hw *) ;
   void (*power_down)(struct e1000_hw *) ;
};

#line 521  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_nvm_operations {
   s32 (*acquire)(struct e1000_hw *) ;
   s32 (*read)(struct e1000_hw *, u16 , u16 , u16 *) ;
   void (*release)(struct e1000_hw *) ;
   void (*reload)(struct e1000_hw *) ;
   s32 (*update)(struct e1000_hw *) ;
   s32 (*valid_led_default)(struct e1000_hw *, u16 *) ;
   s32 (*validate)(struct e1000_hw *) ;
   s32 (*write)(struct e1000_hw *, u16 , u16 , u16 *) ;
};

#line 533  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_mac_info {
   struct e1000_mac_operations ops ;
   u8 addr[6U] ;
   u8 perm_addr[6U] ;
   enum e1000_mac_type type ;
   u32 collision_delta ;
   u32 ledctl_default ;
   u32 ledctl_mode1 ;
   u32 ledctl_mode2 ;
   u32 mc_filter_type ;
   u32 tx_packet_delta ;
   u32 txcw ;
   u16 current_ifs_val ;
   u16 ifs_max_val ;
   u16 ifs_min_val ;
   u16 ifs_ratio ;
   u16 ifs_step_size ;
   u16 mta_reg_count ;
   u32 mta_shadow[128U] ;
   u16 rar_entry_count ;
   u8 forced_speed_duplex ;
   bool adaptive_ifs ;
   bool has_fwsm ;
   bool arc_subsystem_valid ;
   bool autoneg ;
   bool autoneg_failed ;
   bool get_link_status ;
   bool in_ifs_mode ;
   bool serdes_has_link ;
   bool tx_pkt_filtering ;
   enum e1000_serdes_link_state serdes_link_state ;
};

#line 574  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_phy_info {
   struct e1000_phy_operations ops ;
   enum e1000_phy_type type ;
   enum e1000_1000t_rx_status local_rx ;
   enum e1000_1000t_rx_status remote_rx ;
   enum e1000_ms_type ms_type ;
   enum e1000_ms_type original_ms_type ;
   enum e1000_rev_polarity cable_polarity ;
   enum e1000_smart_speed smart_speed ;
   u32 addr ;
   u32 id ;
   u32 reset_delay_us ;
   u32 revision ;
   enum e1000_media_type media_type ;
   u16 autoneg_advertised ;
   u16 autoneg_mask ;
   u16 cable_length ;
   u16 max_cable_length ;
   u16 min_cable_length ;
   u8 mdix ;
   bool disable_polarity_correction ;
   bool is_mdix ;
   bool polarity_correction ;
   bool speed_downgraded ;
   bool autoneg_wait_to_complete ;
};

#line 608  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_nvm_info {
   struct e1000_nvm_operations ops ;
   enum e1000_nvm_type type ;
   enum e1000_nvm_override override ;
   u32 flash_bank_size ;
   u32 flash_base_addr ;
   u16 word_size ;
   u16 delay_usec ;
   u16 address_bits ;
   u16 opcode_bits ;
   u16 page_size ;
};

#line 624  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_bus_info {
   enum e1000_bus_width width ;
   u16 func ;
};

#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_fc_info {
   u32 high_water ;
   u32 low_water ;
   u16 pause_time ;
   u16 refresh_time ;
   bool send_xon ;
   bool strict_ieee ;
   enum e1000_fc_mode current_mode ;
   enum e1000_fc_mode requested_mode ;
};

#line 641  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_dev_spec_82571 {
   bool laa_is_present ;
   u32 smb_counter ;
};

#line 646  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_dev_spec_80003es2lan {
   bool mdic_wa_enable ;
};

#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_shadow_ram {
   u16 value ;
   bool modified ;
};

#line 655 
enum e1000_ulp_state {
    e1000_ulp_state_unknown = 0,
    e1000_ulp_state_off = 1,
    e1000_ulp_state_on = 2
};

#line 661  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_dev_spec_ich8lan {
   bool kmrn_lock_loss_workaround_enabled ;
   struct e1000_shadow_ram shadow_ram[2048U] ;
   bool nvm_k1_enabled ;
   bool eee_disable ;
   u16 eee_lp_ability ;
   enum e1000_ulp_state ulp_state ;
};

#line 673 
struct e1000_adapter;

#line 673  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
union __anonunion_dev_spec_350 {
   struct e1000_dev_spec_82571 e82571 ;
   struct e1000_dev_spec_80003es2lan e80003es2lan ;
   struct e1000_dev_spec_ich8lan ich8lan ;
};

#line 673  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_hw {
   struct e1000_adapter *adapter ;
   void *hw_addr ;
   void *flash_address ;
   struct e1000_mac_info mac ;
   struct e1000_fc_info fc ;
   struct e1000_phy_info phy ;
   struct e1000_nvm_info nvm ;
   struct e1000_bus_info bus ;
   struct e1000_host_mng_dhcp_cookie mng_cookie ;
   union __anonunion_dev_spec_350 dev_spec ;
};

#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.h"
struct e1000_info;

#line 327  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.h"
struct e1000_ps_page {
   struct page *page ;
   u64 dma ;
};

#line 145  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
struct __anonstruct_352 {
   unsigned long time_stamp ;
   u16 length ;
   u16 next_to_watch ;
   unsigned int segs ;
   unsigned int bytecount ;
   u16 mapped_as_page ;
};

#line 145  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
struct __anonstruct_353 {
   struct e1000_ps_page *ps_pages ;
   struct page *page ;
};

#line 145  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
union __anonunion_351 {
   struct __anonstruct_352 __anonCompField___anonunion_351_97 ;
   struct __anonstruct_353 __anonCompField___anonunion_351_98 ;
};

#line 145  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
struct e1000_buffer {
   dma_addr_t dma ;
   struct sk_buff *skb ;
   union __anonunion_351 __anonCompField_e1000_buffer_99 ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
struct e1000_ring {
   struct e1000_adapter *adapter ;
   void *desc ;
   dma_addr_t dma ;
   unsigned int size ;
   unsigned int count ;
   u16 next_to_use ;
   u16 next_to_clean ;
   void *head ;
   void *tail ;
   struct e1000_buffer *buffer_info ;
   char name[21U] ;
   u32 ims_val ;
   u32 itr_val ;
   void *itr_register ;
   int set_itr ;
   struct sk_buff *rx_skb_top ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
struct e1000_phy_regs {
   u16 bmcr ;
   u16 bmsr ;
   u16 advertise ;
   u16 lpa ;
   u16 expansion ;
   u16 ctrl1000 ;
   u16 stat1000 ;
   u16 estatus ;
};

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
struct e1000_adapter {
   struct timer_list watchdog_timer ;
   struct timer_list phy_info_timer ;
   struct timer_list blink_timer ;
   struct work_struct reset_task ;
   struct work_struct watchdog_task ;
   struct e1000_info const *ei ;
   unsigned long active_vlans[64U] ;
   u32 bd_number ;
   u32 rx_buffer_len ;
   u16 mng_vlan_id ;
   u16 link_speed ;
   u16 link_duplex ;
   u16 eeprom_vers ;
   unsigned long state ;
   u32 itr ;
   u32 itr_setting ;
   u16 tx_itr ;
   u16 rx_itr ;
   struct e1000_ring *tx_ring ;
   u32 tx_fifo_limit ;
   struct napi_struct napi ;
   unsigned int uncorr_errors ;
   unsigned int corr_errors ;
   unsigned int restart_queue ;
   u32 txd_cmd ;
   bool detect_tx_hung ;
   bool tx_hang_recheck ;
   u8 tx_timeout_factor ;
   u32 tx_int_delay ;
   u32 tx_abs_int_delay ;
   unsigned int total_tx_bytes ;
   unsigned int total_tx_packets ;
   unsigned int total_rx_bytes ;
   unsigned int total_rx_packets ;
   u64 tpt_old ;
   u64 colc_old ;
   u32 gotc ;
   u64 gotc_old ;
   u32 tx_timeout_count ;
   u32 tx_fifo_head ;
   u32 tx_head_addr ;
   u32 tx_fifo_size ;
   u32 tx_dma_failed ;
   u32 tx_hwtstamp_timeouts ;
   bool (*clean_rx)(struct e1000_ring *, int *, int ) ;
   void (*alloc_rx_buf)(struct e1000_ring *, int , gfp_t ) ;
   struct e1000_ring *rx_ring ;
   u32 rx_int_delay ;
   u32 rx_abs_int_delay ;
   u64 hw_csum_err ;
   u64 hw_csum_good ;
   u64 rx_hdr_split ;
   u32 gorc ;
   u64 gorc_old ;
   u32 alloc_rx_buff_failed ;
   u32 rx_dma_failed ;
   u32 rx_hwtstamp_cleared ;
   unsigned int rx_ps_pages ;
   u16 rx_ps_bsize0 ;
   u32 max_frame_size ;
   u32 min_frame_size ;
   struct net_device *netdev ;
   struct pci_dev *pdev ;
   struct e1000_hw hw ;
   spinlock_t stats64_lock ;
   struct e1000_hw_stats stats ;
   struct e1000_phy_info phy_info ;
   struct e1000_phy_stats phy_stats ;
   struct e1000_phy_regs phy_regs ;
   struct e1000_ring test_tx_ring ;
   struct e1000_ring test_rx_ring ;
   u32 test_icr ;
   u32 msg_enable ;
   unsigned int num_vectors ;
   struct msix_entry *msix_entries ;
   int int_mode ;
   u32 eiac_mask ;
   u32 eeprom_wol ;
   u32 wol ;
   u32 pba ;
   u32 max_hw_frame_size ;
   bool fc_autoneg ;
   unsigned int flags ;
   unsigned int flags2 ;
   struct work_struct downshift_task ;
   struct work_struct update_phy_task ;
   struct work_struct print_hang_task ;
   int phy_hang_count ;
   u16 tx_ring_count ;
   u16 rx_ring_count ;
   struct hwtstamp_config hwtstamp_config ;
   struct delayed_work systim_overflow_work ;
   struct sk_buff *tx_hwtstamp_skb ;
   unsigned long tx_hwtstamp_start ;
   struct work_struct tx_hwtstamp_work ;
   spinlock_t systim_lock ;
   struct cyclecounter cc ;
   struct timecounter tc ;
   struct ptp_clock *ptp_clock ;
   struct ptp_clock_info ptp_clock_info ;
   struct pm_qos_request pm_qos_req ;
   u16 eee_advert ;
};

#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
struct e1000_info {
   enum e1000_mac_type mac ;
   unsigned int flags ;
   unsigned int flags2 ;
   u32 pba ;
   u32 max_hw_frame_size ;
   s32 (*get_variants)(struct e1000_adapter *) ;
   struct e1000_mac_operations const *mac_ops ;
   struct e1000_phy_operations const *phy_ops ;
   struct e1000_nvm_operations const *nvm_ops ;
};

#line 590  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
struct ich8_hsfsts {
   u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) flcdone : 1 ;
   u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) flcerr : 1 ;
   u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) dael : 1 ;
   u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) berasesz : 2 ;
   u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) flcinprog : 1 ;
   u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) reserved1 : 2 ;
   u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(6))) reserved2 : 6 ;
   u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) fldesvalid : 1 ;
   u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) flockdn : 1 ;
};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
union ich8_hws_flash_status {
   struct ich8_hsfsts hsf_status ;
   u16 regval ;
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct ich8_hsflctl {
   u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) flcgo : 1 ;
   u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) flcycle : 2 ;
   u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) reserved : 5 ;
   u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) fldbcount : 2 ;
   u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(6))) flockdn : 6 ;
};

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
union ich8_hws_flash_ctrl {
   struct ich8_hsflctl hsf_ctrl ;
   u16 regval ;
};

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct ich8_pr {
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))) base : 13 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) reserved1 : 2 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) rpe : 1 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))) limit : 13 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) reserved2 : 2 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wpe : 1 ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
union ich8_flash_protected_range {
   struct ich8_pr range ;
   u32 regval ;
};

#line 14  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_param.c.aux"
struct kernel_symbol {
   unsigned long value ;
   char const *name ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/init.h"
typedef void (*ctor_fn_t)(void);

#line 555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jump_label.h"
struct jump_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;

#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
struct kernel_param;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const *, struct kernel_param const *) ;
   int (*get)(char *, struct kernel_param const *) ;
   void (*free)(void *) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string;

#line 62 
struct kparam_array;

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
union __anonunion_668 {
   void *arg ;
   struct kparam_string const *str ;
   struct kparam_array const *arr ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kernel_param {
   char const *name ;
   struct module *mod ;
   struct kernel_param_ops const *ops ;
   u16 const perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_668 __anonCompField_kernel_param_94 ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops const *ops ;
   void *elem ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree_latch.h"
struct mod_arch_specific {
   
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_param_attrs;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char const *, size_t ) ;
   void (*setup)(struct module *, char const *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};

#line 290 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};

#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};

#line 304 
struct module_sect_attrs;

#line 304 
struct module_notes_attrs;

#line 304 
struct tracepoint;

#line 304 
struct trace_event_call;

#line 304 
struct trace_enum_map;

#line 304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const *version ;
   char const *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol const *syms ;
   unsigned long const *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol const *gpl_syms ;
   unsigned long const *gpl_crcs ;
   struct kernel_symbol const *unused_syms ;
   unsigned long const *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol const *unused_gpl_syms ;
   unsigned long const *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol const *gpl_future_syms ;
   unsigned long const *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_tree_node mtn_core ;
   struct mod_tree_node mtn_init ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_enum_map **trace_enums ;
   unsigned int num_trace_enums ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp_alive ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};

#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
enum ldv_34154 {
    enable_option = 0,
    range_option = 1,
    list_option = 2
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
struct e1000_opt_list {
   int i ;
   char *str ;
};

#line 169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
struct __anonstruct_r_719 {
   int min ;
   int max ;
};

#line 169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
struct __anonstruct_l_720 {
   int nr ;
   struct e1000_opt_list *p ;
};

#line 169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
union __anonunion_arg_718 {
   struct __anonstruct_r_719 r ;
   struct __anonstruct_l_720 l ;
};

#line 169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
struct e1000_option {
   enum ldv_34154 type ;
   char const *name ;
   char const *err ;
   int def ;
   union __anonunion_arg_718 arg ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11277 {
    WORK_STRUCT_PENDING_BIT = 0,
    WORK_STRUCT_DELAYED_BIT = 1,
    WORK_STRUCT_PWQ_BIT = 2,
    WORK_STRUCT_LINKED_BIT = 3,
    WORK_STRUCT_STATIC_BIT = 4,
    WORK_STRUCT_COLOR_SHIFT = 5,
    WORK_STRUCT_COLOR_BITS = 4,
    WORK_STRUCT_PENDING = 1,
    WORK_STRUCT_DELAYED = 2,
    WORK_STRUCT_PWQ = 4,
    WORK_STRUCT_LINKED = 8,
    WORK_STRUCT_STATIC = 16,
    WORK_NR_COLORS = 15,
    WORK_NO_COLOR = 15,
    WORK_CPU_UNBOUND = 8192,
    WORK_STRUCT_FLAG_BITS = 9,
    WORK_OFFQ_FLAG_BASE = 5,
    __WORK_OFFQ_CANCELING = 5,
    WORK_OFFQ_CANCELING = 32,
    WORK_OFFQ_FLAG_BITS = 1,
    WORK_OFFQ_POOL_SHIFT = 6,
    WORK_OFFQ_LEFT = 58,
    WORK_OFFQ_POOL_BITS = 31,
    WORK_OFFQ_POOL_NONE = 2147483647,
    WORK_STRUCT_FLAG_MASK = 511,
    WORK_STRUCT_WQ_DATA_MASK = -512,
    WORK_STRUCT_NO_POOL = 137438953408,
    WORK_BUSY_PENDING = 1,
    WORK_BUSY_RUNNING = 2,
    WORKER_DESC_LEN = 24
};

#line 435  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_host_mng_command_header {
   u8 command_id ;
   u8 checksum ;
   u16 reserved1 ;
   u16 reserved2 ;
   u16 command_length ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __le16;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __le32;

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u64 __le64;

#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/xfrm.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_qos.h"
struct __anonstruct_read_1749 {
   __le64 buffer_addr ;
   __le64 reserved ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_qos.h"
struct __anonstruct_csum_ip_1753 {
   __le16 ip_id ;
   __le16 csum ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_qos.h"
union __anonunion_hi_dword_1752 {
   __le32 rss ;
   struct __anonstruct_csum_ip_1753 csum_ip ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_qos.h"
struct __anonstruct_lower_1751 {
   __le32 mrq ;
   union __anonunion_hi_dword_1752 hi_dword ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_qos.h"
struct __anonstruct_upper_1754 {
   __le32 status_error ;
   __le16 length ;
   __le16 vlan ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_qos.h"
struct __anonstruct_wb_1750 {
   struct __anonstruct_lower_1751 lower ;
   struct __anonstruct_upper_1754 upper ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_qos.h"
union e1000_rx_desc_extended {
   struct __anonstruct_read_1749 read ;
   struct __anonstruct_wb_1750 wb ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_flags_1763 {
   __le16 length ;
   u8 cso ;
   u8 cmd ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
union __anonunion_lower_1762 {
   __le32 data ;
   struct __anonstruct_flags_1763 flags ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_fields_1765 {
   u8 status ;
   u8 css ;
   __le16 special ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
union __anonunion_upper_1764 {
   __le32 data ;
   struct __anonstruct_fields_1765 fields ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_tx_desc {
   __le64 buffer_addr ;
   union __anonunion_lower_1762 lower ;
   union __anonunion_upper_1764 upper ;
};

#line 595  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
struct e1000_stats {
   char stat_string[32U] ;
   int type ;
   int sizeof_stat ;
   int stat_offset ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __sum16;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
typedef int pao_T__;

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timekeeping.h"
enum tk_offsets {
    TK_OFFS_REAL = 0,
    TK_OFFS_BOOT = 1,
    TK_OFFS_TAI = 2,
    TK_OFFS_MAX = 3
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_11770 {
    WORK_STRUCT_PENDING_BIT_0 = 0,
    WORK_STRUCT_DELAYED_BIT_0 = 1,
    WORK_STRUCT_PWQ_BIT_0 = 2,
    WORK_STRUCT_LINKED_BIT_0 = 3,
    WORK_STRUCT_STATIC_BIT_0 = 4,
    WORK_STRUCT_COLOR_SHIFT_0 = 5,
    WORK_STRUCT_COLOR_BITS_0 = 4,
    WORK_STRUCT_PENDING_0 = 1,
    WORK_STRUCT_DELAYED_0 = 2,
    WORK_STRUCT_PWQ_0 = 4,
    WORK_STRUCT_LINKED_0 = 8,
    WORK_STRUCT_STATIC_0 = 16,
    WORK_NR_COLORS_0 = 15,
    WORK_NO_COLOR_0 = 15,
    WORK_CPU_UNBOUND_0 = 8192,
    WORK_STRUCT_FLAG_BITS_0 = 9,
    WORK_OFFQ_FLAG_BASE_0 = 5,
    __WORK_OFFQ_CANCELING_0 = 5,
    WORK_OFFQ_CANCELING_0 = 32,
    WORK_OFFQ_FLAG_BITS_0 = 1,
    WORK_OFFQ_POOL_SHIFT_0 = 6,
    WORK_OFFQ_LEFT_0 = 58,
    WORK_OFFQ_POOL_BITS_0 = 31,
    WORK_OFFQ_POOL_NONE_0 = 2147483647,
    WORK_STRUCT_FLAG_MASK_0 = 511,
    WORK_STRUCT_WQ_DATA_MASK_0 = -512,
    WORK_STRUCT_NO_POOL_0 = 137438953408,
    WORK_BUSY_PENDING_0 = 1,
    WORK_BUSY_RUNNING_0 = 2,
    WORKER_DESC_LEN_0 = 24
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/random.h"
enum ldv_27471 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
typedef enum ldv_27471 socket_state;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops;

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops const *ops ;
};

#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int ) ;
   int (*getname)(struct socket *, struct sockaddr *, int *, int ) ;
   unsigned int (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
};

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef struct skb_frag_struct skb_frag_t;

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_page_3487 {
   struct page *p ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct {
   struct __anonstruct_page_3487 page ;
   __u32 page_offset ;
   __u32 size ;
};

#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};

#line 319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_info {
   unsigned char nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   unsigned short gso_type ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   u32 tskey ;
   __be32 ip6_frag_id ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};

#line 767 
struct rtable;

#line 890 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};

#line 1084  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct mii_ioctl_data {
   __u16 phy_id ;
   __u16 reg_num ;
   __u16 val_in ;
   __u16 val_out ;
};

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct xfrm_policy;

#line 98 
struct xfrm_state;

#line 114 
struct request_sock;

#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};

#line 331 
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;

#line 2893 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct page_counter {
   atomic_long_t count ;
   unsigned long limit ;
   struct page_counter *parent ;
   unsigned long watermark ;
   unsigned long failcnt ;
};

#line 580  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/memcontrol.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/filter.h"
struct bpf_insn {
   __u8 code ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) dst_reg : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4
};

#line 273 
struct bpf_prog_aux;

#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
union __anonunion_3529 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   bool jited ;
   bool gpl_compatible ;
   u32 len ;
   enum bpf_prog_type type ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(struct sk_buff const *, struct bpf_insn const *) ;
   union __anonunion_3529 __anonCompField_bpf_prog_100 ;
};

#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   unsigned long _key ;
};

#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   int maxtype ;
   struct nla_policy const *policy ;
   int (*validate)(struct nlattr **, struct nlattr **) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device const *) ;
   int (*fill_info)(struct sk_buff *, struct net_device const *) ;
   size_t (*get_xstats_size)(struct net_device const *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device const *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   int slave_maxtype ;
   struct nla_policy const *slave_policy ;
   int (*slave_validate)(struct nlattr **, struct nlattr **) ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **) ;
   size_t (*get_slave_size)(struct net_device const *, struct net_device const *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device const *, struct net_device const *) ;
   struct net *(*get_link_net)(struct net_device const *) ;
};

#line 171 
struct neigh_table;

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   void (*neigh_cleanup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};

#line 129 
struct neigh_ops;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops const *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_table {
   int family ;
   int entry_size ;
   int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void const *, struct net_device const *, __u32 *) ;
   bool (*key_eq)(struct neighbour const *, void const *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};

#line 519 
struct dn_route;

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
union __anonunion_3540 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};

#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct dst_entry *from ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_3540 __anonCompField_dst_entry_101 ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_socket_lock_t_3541 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_3541 socket_lock_t;

#line 124 
struct proto;

#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u32 __portpair;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u64 __addrpair;

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_3543 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_3542 {
   __addrpair skc_addrpair ;
   struct __anonstruct_3543 __anonCompField___anonunion_3542_102 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_3544 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_3546 {
   __be16 skc_dport ;
   __u16 skc_num ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_3545 {
   __portpair skc_portpair ;
   struct __anonstruct_3546 __anonCompField___anonunion_3545_105 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_3547 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_3548 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock_common {
   union __anonunion_3542 __anonCompField_sock_common_103 ;
   union __anonunion_3544 __anonCompField_sock_common_104 ;
   union __anonunion_3545 __anonCompField_sock_common_106 ;
   unsigned short skc_family ;
   unsigned char volatile skc_state ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) skc_reuse : 4 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_reuseport : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_ipv6only : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_3547 __anonCompField_sock_common_107 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_3548 __anonCompField_sock_common_108 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};

#line 219 
struct cg_proto;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_sk_backlog_3549 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_3549 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   u16 sk_incoming_cpu ;
   __u32 sk_txhash ;
   unsigned int sk_napi_id ;
   unsigned int sk_ll_usec ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) sk_shutdown : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_tx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_rx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) sk_userlocks : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) sk_protocol : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) sk_type : 16 ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   u32 sk_pacing_rate ;
   u32 sk_max_pacing_rate ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred const *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u32 sk_tskey ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
};

#line 914 
struct request_sock_ops;

#line 915 
struct timewait_sock_ops;

#line 916 
struct inet_hashinfo;

#line 917 
struct raw_hashinfo;

#line 932 
struct udp_table;

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_h_3552 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   void (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   void (*clear_sk)(struct sock *, int ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock const *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_3552 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup *, struct cgroup_subsys *) ;
   void (*destroy_cgroup)(struct mem_cgroup *) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup *) ;
};

#line 1054  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct cg_proto {
   struct page_counter memory_allocated ;
   struct percpu_counter sockets_allocated ;
   int memory_pressure ;
   long sysctl_mem[3U] ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock const *) ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   struct sock *rsk_listener ;
   u16 mss ;
   u8 num_retrans ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cookie_ts : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))) num_timeout : 7 ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops const *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};

#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_timewait_sock.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) res1 : 4 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) doff : 4 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) fin : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syn : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) rst : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) psh : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ack : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) urg : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ece : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) priority : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   struct ipv6_stable_secret stable_secret ;
   void *sysctl ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/icmpv6.h"
struct udphdr {
   __be16 source ;
   __be16 dest ;
   __be16 len ;
   __sum16 check ;
};

#line 302  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
struct iphdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) ihl : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};

#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};

#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __u8 rs_probes ;
   __u8 addr_gen_mode ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};

#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/ipv6.h"
union __anonunion_3572 {
   __be32 a4 ;
   __be32 a6[4U] ;
   struct in6_addr in6 ;
};

#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/ipv6.h"
struct inetpeer_addr_base {
   union __anonunion_3572 __anonCompField_inetpeer_addr_base_110 ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
union __anonunion_3573 {
   struct list_head gc_list ;
   struct callback_head gc_rcu ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct __anonstruct_3575 {
   atomic_t rid ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
union __anonunion_3574 {
   struct __anonstruct_3575 __anonCompField___anonunion_3574_112 ;
   struct callback_head rcu ;
   struct inet_peer *gc_next ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[16U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   union __anonunion_3573 __anonCompField_inet_peer_111 ;
   union __anonunion_3574 __anonCompField_inet_peer_113 ;
   __u32 dtime ;
   atomic_t refcnt ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inet_peer_base {
   struct inet_peer *root ;
   seqlock_t lock ;
   int total ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/route.h"
struct uncached_list;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   __be32 rt_gateway ;
   u32 rt_pmtu ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};

#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_vlan.h"
struct vlan_hdr {
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};

#line 231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_read_3591 {
   __le64 buffer_addr[4U] ;
};

#line 231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_csum_ip_3595 {
   __le16 ip_id ;
   __le16 csum ;
};

#line 231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
union __anonunion_hi_dword_3594 {
   __le32 rss ;
   struct __anonstruct_csum_ip_3595 csum_ip ;
};

#line 231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_lower_3593 {
   __le32 mrq ;
   union __anonunion_hi_dword_3594 hi_dword ;
};

#line 231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_middle_3596 {
   __le32 status_error ;
   __le16 length0 ;
   __le16 vlan ;
};

#line 231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_upper_3597 {
   __le16 header_status ;
   __le16 length[3U] ;
};

#line 231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_wb_3592 {
   struct __anonstruct_lower_3593 lower ;
   struct __anonstruct_middle_3596 middle ;
   struct __anonstruct_upper_3597 upper ;
   __le64 reserved ;
};

#line 231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
union e1000_rx_desc_packet_split {
   struct __anonstruct_read_3591 read ;
   struct __anonstruct_wb_3592 wb ;
};

#line 288  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_ip_fields_3603 {
   u8 ipcss ;
   u8 ipcso ;
   __le16 ipcse ;
};

#line 288  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
union __anonunion_lower_setup_3602 {
   __le32 ip_config ;
   struct __anonstruct_ip_fields_3603 ip_fields ;
};

#line 288  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_tcp_fields_3605 {
   u8 tucss ;
   u8 tucso ;
   __le16 tucse ;
};

#line 288  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
union __anonunion_upper_setup_3604 {
   __le32 tcp_config ;
   struct __anonstruct_tcp_fields_3605 tcp_fields ;
};

#line 288  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct __anonstruct_fields_3607 {
   u8 status ;
   u8 hdr_len ;
   __le16 mss ;
};

#line 288  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
union __anonunion_tcp_seg_setup_3606 {
   __le32 data ;
   struct __anonstruct_fields_3607 fields ;
};

#line 288  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/hw.h"
struct e1000_context_desc {
   union __anonunion_lower_setup_3602 lower_setup ;
   union __anonunion_upper_setup_3604 upper_setup ;
   __le32 cmd_and_length ;
   union __anonunion_tcp_seg_setup_3606 tcp_seg_setup ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
struct e1000_reg_info {
   u32 ofs ;
   char *name ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
struct my_u0 {
   __le64 a ;
   __le64 b ;
};

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
struct my_u1 {
   __le64 a ;
   __le64 b ;
   __le64 c ;
   __le64 d ;
};

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
struct ldv_list_element {
   void *data ;
   struct ldv_list_element *next ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
typedef struct ldv_list_element *ldv_list_ptr;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef short s16;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_chan;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};

#line 151 
struct spi_message;

#line 152 
struct spi_transfer;

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_master *) ;
   int (*transfer_one_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_master *) ;
   int (*prepare_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_master *, struct spi_message *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_master *, struct spi_message *) ;
   int *cs_gpios ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
};

#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_transfer {
   void const *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cs_change : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) tx_nbits : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};

#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef unsigned long pthread_t;

#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};

#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct ldv_struct_free_irq_6 {
   int arg0 ;
   int signal_pending ;
};

#line 19  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_interrupt_scenario_15 {
   enum irqreturn (*arg2)(int , void *) ;
   enum irqreturn (*arg1)(int , void *) ;
   void *arg3 ;
   int arg0 ;
   int signal_pending ;
};

#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_pci_scenario_14 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};

#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_random_allocationless_scenario_21 {
   struct net_device *arg0 ;
   int signal_pending ;
};

#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_timer_scenario_16 {
   struct timer_list *arg0 ;
   int signal_pending ;
};

#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/fvtp/.tmp_ich8lan.c"
void ldv_inline_asm(void);


#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(long nr, unsigned long volatile *addr)
{
  
#line 112 
  if (0 != 0) 
#line 114 
              ldv_inline_asm(); else 
#line 117 
                                     ldv_inline_asm();
  
#line 118 
  return;
}


#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(long nr, unsigned long volatile *addr)
{
  int __retres;
  
#line 206 
  ldv_inline_asm();
  
#line 207 
  ldv_inline_asm();
  
#line 206 
  __retres = 0;
  
#line 206 
  goto return_label;
  cc_label: 
#line 206 
  ;
  
#line 206 
  __retres = 1;
  return_label: 
#line 206 
                return __retres;
}


#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device const *, char const * , ...);


#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ich8lan.c.aux"
static void ldv_mutex_lock_72(struct mutex *ldv_func_arg1);


#line 43 
void ldv_mutex_model_lock(struct mutex *, char *);


#line 45 
void ldv_mutex_model_unlock(struct mutex *, char *);


#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned short readw(void const volatile *addr)
{
  unsigned short ret;
  
#line 58 
  ldv_inline_asm();
  
#line 57 
  return ret;
}


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void const volatile *addr)
{
  unsigned int ret;
  
#line 59 
  ldv_inline_asm();
  
#line 58 
  return ret;
}


#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writew(unsigned short val, void volatile *addr)
{
  
#line 67 
  ldv_inline_asm();
  
#line 68 
  return;
}


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void volatile *addr)
{
  
#line 68 
  ldv_inline_asm();
  
#line 69 
  return;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/delay.h"
void __const_udelay(unsigned long);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
void msleep(unsigned int);


#line 48 
void usleep_range(unsigned long, unsigned long);


#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
static void ldv_mutex_unlock_73(struct mutex *ldv_func_arg1);


#line 3828  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void netdev_err(struct net_device const *, char const * , ...);


#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pci_bus_read_config_word(struct pci_bus *, unsigned int, int, u16 *);


#line 887  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_read_config_word(struct pci_dev const *dev, int where, u16 *val)
{
  int tmp;
  
#line 889 
  tmp = pci_bus_read_config_word(dev->bus,dev->devfn,where,val);
  
#line 889 
  return tmp;
}


#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/crc32.h"
u32 crc32_le(u32, unsigned char const *, size_t);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.h"
s32 e1000e_blink_led_generic(struct e1000_hw *hw);


#line 30 
s32 e1000e_config_fc_after_link_up(struct e1000_hw *hw);


#line 31 
s32 e1000e_disable_pcie_master(struct e1000_hw *hw);


#line 33 
s32 e1000e_get_auto_rd_done(struct e1000_hw *hw);


#line 34 
s32 e1000e_get_bus_info_pcie(struct e1000_hw *hw);


#line 35 
void e1000_set_lan_id_single_port(struct e1000_hw *hw);


#line 37 
s32 e1000e_get_speed_and_duplex_copper(struct e1000_hw *hw, u16 *speed, u16 *duplex);


#line 41 
s32 e1000e_id_led_init_generic(struct e1000_hw *hw);


#line 44 
void e1000e_update_mc_addr_list_generic(struct e1000_hw *hw, u8 *mc_addr_list, u32 mc_addr_count);


#line 46 
s32 e1000e_set_fc_watermarks(struct e1000_hw *hw);


#line 48 
s32 e1000e_setup_led_generic(struct e1000_hw *hw);


#line 53 
void e1000e_clear_hw_cntrs_base(struct e1000_hw *hw);


#line 55 
void e1000e_init_rx_addrs(struct e1000_hw *hw, u16 rar_count);


#line 59 
void e1000e_set_pcie_no_snoop(struct e1000_hw *hw, u32 no_snoop);


#line 64 
u32 e1000e_rar_get_count_generic(struct e1000_hw *hw);


#line 65 
int e1000e_rar_set_generic(struct e1000_hw *hw, u8 *addr, u32 index);


#line 66 
void e1000e_config_collision_dist_generic(struct e1000_hw *hw);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.h"
s32 e1000e_check_downshift(struct e1000_hw *hw);


#line 26 
s32 e1000_check_polarity_m88(struct e1000_hw *hw);


#line 27 
s32 e1000_check_polarity_igp(struct e1000_hw *hw);


#line 28 
s32 e1000_check_polarity_ife(struct e1000_hw *hw);


#line 30 
s32 e1000e_copper_link_setup_igp(struct e1000_hw *hw);


#line 31 
s32 e1000e_copper_link_setup_m88(struct e1000_hw *hw);


#line 32 
s32 e1000e_phy_force_speed_duplex_igp(struct e1000_hw *hw);


#line 33 
s32 e1000e_phy_force_speed_duplex_m88(struct e1000_hw *hw);


#line 34 
s32 e1000_phy_force_speed_duplex_ife(struct e1000_hw *hw);


#line 35 
s32 e1000e_get_cable_length_m88(struct e1000_hw *hw);


#line 36 
s32 e1000e_get_cable_length_igp_2(struct e1000_hw *hw);


#line 37 
s32 e1000e_get_cfg_done_generic(struct e1000_hw *hw);


#line 38 
s32 e1000e_get_phy_id(struct e1000_hw *hw);


#line 39 
s32 e1000e_get_phy_info_igp(struct e1000_hw *hw);


#line 40 
s32 e1000e_get_phy_info_m88(struct e1000_hw *hw);


#line 41 
s32 e1000_get_phy_info_ife(struct e1000_hw *hw);


#line 42 
s32 e1000e_phy_sw_reset(struct e1000_hw *hw);


#line 44 
s32 e1000e_phy_hw_reset_generic(struct e1000_hw *hw);


#line 46 
s32 e1000e_read_kmrn_reg(struct e1000_hw *hw, u32 offset, u16 *data);


#line 47 
s32 e1000e_read_kmrn_reg_locked(struct e1000_hw *hw, u32 offset, u16 *data);


#line 48 
s32 e1000_set_page_igp(struct e1000_hw *hw, u16 page);


#line 49 
s32 e1000e_read_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 *data);


#line 50 
s32 e1000e_read_phy_reg_igp_locked(struct e1000_hw *hw, u32 offset, u16 *data);


#line 53 
s32 e1000e_setup_copper_link(struct e1000_hw *hw);


#line 54 
s32 e1000e_write_kmrn_reg(struct e1000_hw *hw, u32 offset, u16 data);


#line 55 
s32 e1000e_write_kmrn_reg_locked(struct e1000_hw *hw, u32 offset, u16 data);


#line 56 
s32 e1000e_write_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 data);


#line 57 
s32 e1000e_write_phy_reg_igp_locked(struct e1000_hw *hw, u32 offset, u16 data);


#line 59 
s32 e1000e_phy_has_link_generic(struct e1000_hw *hw, u32 iterations, u32 usec_interval, bool *success);


#line 61 
s32 e1000e_phy_init_script_igp3(struct e1000_hw *hw);


#line 62 
enum e1000_phy_type e1000e_get_phy_type_from_id(u32 phy_id);


#line 63 
s32 e1000e_determine_phy_address(struct e1000_hw *hw);


#line 64 
s32 e1000e_write_phy_reg_bm(struct e1000_hw *hw, u32 offset, u16 data);


#line 65 
s32 e1000e_read_phy_reg_bm(struct e1000_hw *hw, u32 offset, u16 *data);


#line 66 
s32 e1000_enable_phy_wakeup_reg_access_bm(struct e1000_hw *hw, u16 *phy_reg);


#line 67 
s32 e1000_disable_phy_wakeup_reg_access_bm(struct e1000_hw *hw, u16 *phy_reg);


#line 70 
void e1000_power_up_phy_copper(struct e1000_hw *hw);


#line 71 
void e1000_power_down_phy_copper(struct e1000_hw *hw);


#line 73 
s32 e1000e_write_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 data);


#line 74 
s32 e1000_read_phy_reg_hv(struct e1000_hw *hw, u32 offset, u16 *data);


#line 75 
s32 e1000_read_phy_reg_hv_locked(struct e1000_hw *hw, u32 offset, u16 *data);


#line 76 
s32 e1000_read_phy_reg_page_hv(struct e1000_hw *hw, u32 offset, u16 *data);


#line 77 
s32 e1000_write_phy_reg_hv(struct e1000_hw *hw, u32 offset, u16 data);


#line 78 
s32 e1000_write_phy_reg_hv_locked(struct e1000_hw *hw, u32 offset, u16 data);


#line 79 
s32 e1000_write_phy_reg_page_hv(struct e1000_hw *hw, u32 offset, u16 data);


#line 80 
s32 e1000_link_stall_workaround_hv(struct e1000_hw *hw);


#line 81 
s32 e1000_copper_link_setup_82577(struct e1000_hw *hw);


#line 82 
s32 e1000_check_polarity_82577(struct e1000_hw *hw);


#line 83 
s32 e1000_get_phy_info_82577(struct e1000_hw *hw);


#line 84 
s32 e1000_phy_force_speed_duplex_82577(struct e1000_hw *hw);


#line 85 
s32 e1000_get_cable_length_82577(struct e1000_hw *hw);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.h"
s32 e1000e_validate_nvm_checksum_generic(struct e1000_hw *hw);


#line 35 
s32 e1000e_update_nvm_checksum_generic(struct e1000_hw *hw);


#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.h"
void e1000e_write_protect_nvm_ich8lan(struct e1000_hw *hw);


#line 297 
void e1000e_set_kmrn_lock_loss_workaround_ich8lan(struct e1000_hw *hw, bool state);


#line 299 
void e1000e_igp3_phy_powerdown_workaround_ich8lan(struct e1000_hw *hw);


#line 300 
void e1000e_gig_downshift_workaround_ich8lan(struct e1000_hw *hw);


#line 301 
void e1000_suspend_workarounds_ich8lan(struct e1000_hw *hw);


#line 302 
void e1000_resume_workarounds_pchlan(struct e1000_hw *hw);


#line 303 
s32 e1000_configure_k1_ich8lan(struct e1000_hw *hw, bool k1_enable);


#line 304 
void e1000_copy_rx_addrs_to_phy_ich8lan(struct e1000_hw *hw);


#line 305 
s32 e1000_lv_jumbo_workaround_ich8lan(struct e1000_hw *hw, bool enable);


#line 306 
s32 e1000_read_emi_reg_locked(struct e1000_hw *hw, u16 addr, u16 *data);


#line 307 
s32 e1000_write_emi_reg_locked(struct e1000_hw *hw, u16 addr, u16 data);


#line 308 
s32 e1000_set_eee_pchlan(struct e1000_hw *hw);


#line 309 
s32 e1000_enable_ulp_lpt_lp(struct e1000_hw *hw, bool to_sx);


#line 507  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
struct e1000_info const e1000_ich8_info;


#line 508 
struct e1000_info const e1000_ich9_info;


#line 509 
struct e1000_info const e1000_ich10_info;


#line 510 
struct e1000_info const e1000_pch_info;


#line 511 
struct e1000_info const e1000_pch2_info;


#line 512 
struct e1000_info const e1000_pch_lpt_info;


#line 513 
struct e1000_info const e1000_pch_spt_info;


#line 519  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1000_phy_hw_reset(struct e1000_hw *hw)
{
  s32 tmp;
  
#line 521 
  tmp = (*(hw->phy.ops.reset))(hw);
  
#line 521 
  return tmp;
}


#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1e_rphy(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 tmp;
  
#line 526 
  tmp = (*(hw->phy.ops.read_reg))(hw,offset,data);
  
#line 526 
  return tmp;
}


#line 529  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1e_rphy_locked(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 tmp;
  
#line 531 
  tmp = (*(hw->phy.ops.read_reg_locked))(hw,offset,data);
  
#line 531 
  return tmp;
}


#line 534  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1e_wphy(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 tmp;
  
#line 536 
  tmp = (*(hw->phy.ops.write_reg))(hw,offset,(unsigned short)((int)data));
  
#line 536 
  return tmp;
}


#line 539  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1e_wphy_locked(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 tmp;
  
#line 541 
  tmp = (*(hw->phy.ops.write_reg_locked))(hw,offset,(unsigned short)((int)data));
  
#line 541 
  return tmp;
}


#line 544 
void e1000e_reload_nvm_generic(struct e1000_hw *hw);


#line 559  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1000e_update_nvm_checksum(struct e1000_hw *hw)
{
  s32 tmp;
  
#line 561 
  tmp = (*(hw->nvm.ops.update))(hw);
  
#line 561 
  return tmp;
}


#line 564  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1000_read_nvm(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 tmp;
  
#line 567 
  tmp = (*(hw->nvm.ops.read))(hw,(unsigned short)((int)offset),(unsigned short)((int)words),data);
  
#line 567 
  return tmp;
}


#line 570  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1000_write_nvm(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 tmp;
  
#line 573 
  tmp = (*(hw->nvm.ops.write))(hw,(unsigned short)((int)offset),(unsigned short)((int)words),data);
  
#line 573 
  return tmp;
}


#line 581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static u32 __er32(struct e1000_hw *hw, unsigned long reg)
{
  u32 tmp;
  
#line 583 
  tmp = readl((void const volatile *)(hw->hw_addr + reg));
  
#line 583 
  return tmp;
}


#line 589 
void __ew32(struct e1000_hw *hw, unsigned long reg, u32 val);


#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_clear_hw_cntrs_ich8lan(struct e1000_hw *hw);


#line 116 
static void e1000_initialize_hw_bits_ich8lan(struct e1000_hw *hw);


#line 117 
static s32 e1000_erase_flash_bank_ich8lan(struct e1000_hw *hw, u32 bank);


#line 118 
static s32 e1000_retry_write_flash_byte_ich8lan(struct e1000_hw *hw, u32 offset, u8 byte);


#line 120 
static s32 e1000_read_flash_byte_ich8lan(struct e1000_hw *hw, u32 offset, u8 *data);


#line 122 
static s32 e1000_read_flash_word_ich8lan(struct e1000_hw *hw, u32 offset, u16 *data);


#line 124 
static s32 e1000_read_flash_data_ich8lan(struct e1000_hw *hw, u32 offset, u8 size, u16 *data);


#line 126 
static s32 e1000_read_flash_data32_ich8lan(struct e1000_hw *hw, u32 offset, u32 *data);


#line 128 
static s32 e1000_read_flash_dword_ich8lan(struct e1000_hw *hw, u32 offset, u32 *data);


#line 130 
static s32 e1000_write_flash_data32_ich8lan(struct e1000_hw *hw, u32 offset, u32 data);


#line 132 
static s32 e1000_retry_write_flash_dword_ich8lan(struct e1000_hw *hw, u32 offset, u32 dword);


#line 134 
static s32 e1000_kmrn_lock_loss_workaround_ich8lan(struct e1000_hw *hw);


#line 135 
static s32 e1000_cleanup_led_ich8lan(struct e1000_hw *hw);


#line 136 
static s32 e1000_led_on_ich8lan(struct e1000_hw *hw);


#line 137 
static s32 e1000_led_off_ich8lan(struct e1000_hw *hw);


#line 138 
static s32 e1000_id_led_init_pchlan(struct e1000_hw *hw);


#line 139 
static s32 e1000_setup_led_pchlan(struct e1000_hw *hw);


#line 140 
static s32 e1000_cleanup_led_pchlan(struct e1000_hw *hw);


#line 141 
static s32 e1000_led_on_pchlan(struct e1000_hw *hw);


#line 142 
static s32 e1000_led_off_pchlan(struct e1000_hw *hw);


#line 143 
static s32 e1000_set_lplu_state_pchlan(struct e1000_hw *hw, bool active);


#line 144 
static void e1000_power_down_phy_copper_ich8lan(struct e1000_hw *hw);


#line 145 
static void e1000_lan_init_done_ich8lan(struct e1000_hw *hw);


#line 146 
static s32 e1000_k1_gig_workaround_hv(struct e1000_hw *hw, bool link);


#line 147 
static s32 e1000_set_mdio_slow_mode_hv(struct e1000_hw *hw);


#line 148 
static bool e1000_check_mng_mode_ich8lan(struct e1000_hw *hw);


#line 149 
static bool e1000_check_mng_mode_pchlan(struct e1000_hw *hw);


#line 150 
static int e1000_rar_set_pch2lan(struct e1000_hw *hw, u8 *addr, u32 index);


#line 151 
static int e1000_rar_set_pch_lpt(struct e1000_hw *hw, u8 *addr, u32 index);


#line 152 
static u32 e1000_rar_get_count_pch_lpt(struct e1000_hw *hw);


#line 153 
static s32 e1000_k1_workaround_lv(struct e1000_hw *hw);


#line 154 
static void e1000_gate_hw_phy_config_ich8lan(struct e1000_hw *hw, bool gate);


#line 155 
static s32 e1000_disable_ulp_lpt_lp(struct e1000_hw *hw, bool force);


#line 156 
static s32 e1000_setup_copper_link_pch_lpt(struct e1000_hw *hw);


#line 157 
static s32 e1000_oem_bits_config_ich8lan(struct e1000_hw *hw, bool d0_state);


#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
__inline static u16 __er16flash(struct e1000_hw *hw, unsigned long reg)
{
  u16 tmp;
  
#line 161 
  tmp = readw((void const volatile *)(hw->flash_address + reg));
  
#line 161 
  return tmp;
}


#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
__inline static u32 __er32flash(struct e1000_hw *hw, unsigned long reg)
{
  u32 tmp;
  
#line 166 
  tmp = readl((void const volatile *)(hw->flash_address + reg));
  
#line 166 
  return tmp;
}


#line 169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
__inline static void __ew16flash(struct e1000_hw *hw, unsigned long reg, u16 val)
{
  
#line 171 
  writew((unsigned short)((int)val),(void volatile *)(hw->flash_address + reg));
  
#line 172 
  return;
}


#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
__inline static void __ew32flash(struct e1000_hw *hw, unsigned long reg, u32 val)
{
  
#line 176 
  writel(val,(void volatile *)(hw->flash_address + reg));
  
#line 177 
  return;
}


#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static bool e1000_phy_is_accessible_pchlan(struct e1000_hw *hw)
{
  bool __retres;
  u16 retry_count;
  
#line 196 
  u16 phy_reg = (unsigned short)0U;
  
#line 197 
  u32 phy_id = 0U;
  
#line 198 
  s32 ret_val = 0;
  
#line 200 
  u32 mac_reg = 0U;
  
#line 202 
  retry_count = (unsigned short)0U;
  
#line 202 
  goto ldv_47700;
  ldv_47699: 
#line 203 
  ;
  
#line 203 
  ret_val = e1e_rphy_locked(hw,2U,& phy_reg);
  
#line 204 
  if (ret_val != 0 || (unsigned int)phy_reg == 65535U) 
#line 205 
                                                       goto ldv_47697; else ;
  
#line 206 
  phy_id = (unsigned int)((int)phy_reg << 16);
  
#line 208 
  ret_val = e1e_rphy_locked(hw,3U,& phy_reg);
  
#line 209 
  if (ret_val != 0 || (unsigned int)phy_reg == 65535U) {
    
#line 210 
    phy_id = 0U;
    
#line 211 
    goto ldv_47697;
  }
  else ;
  
#line 213 
  phy_id = ((unsigned int)phy_reg & 4294967280U) | phy_id;
  
#line 214 
  goto ldv_47698;
  ldv_47697: 
#line 215 
  ;
  
#line 202 
  retry_count = (u16)((int)retry_count + 1);
  ldv_47700: 
#line 203 
  ;
  
#line 202 
  if ((unsigned int)retry_count <= 1U) 
#line 204 
                                       goto ldv_47699; else 
#line 207 
                                                            goto ldv_47698;
  ldv_47698: 
#line 208 
  ;
  
#line 217 
  if (hw->phy.id != 0U) {
    
#line 218 
    if (hw->phy.id == phy_id) 
#line 219 
                              goto out; else ;
  }
  else 
    
#line 220 
    if (phy_id != 0U) {
      
#line 221 
      hw->phy.id = phy_id;
      
#line 222 
      hw->phy.revision = (unsigned int)phy_reg & 15U;
      
#line 223 
      goto out;
    }
    else ;
  
#line 229 
  if (hw->mac.type <= (unsigned int)e1000_pch2lan) {
    
#line 230 
    (*(hw->phy.ops.release))(hw);
    
#line 231 
    ret_val = e1000_set_mdio_slow_mode_hv(hw);
    
#line 232 
    if (ret_val == 0) 
#line 233 
                      ret_val = e1000e_get_phy_id(hw); else ;
    
#line 234 
    (*(hw->phy.ops.acquire))(hw);
  }
  else ;
  
#line 237 
  if (ret_val != 0) {
    
#line 238 
    __retres = (_Bool)0;
    
#line 238 
    goto return_label;
  }
  else ;
  out: 
#line 239 
  ;
  
#line 240 
  if ((unsigned int)hw->mac.type + 4294967285U <= 1U) {
    u32 tmp;
    
#line 242 
    tmp = __er32(hw,23380UL);
    
#line 242 
    if ((tmp & 32768U) == 0U) {
      
#line 244 
      e1e_rphy_locked(hw,24631U,& phy_reg);
      
#line 245 
      phy_reg = (unsigned short)((unsigned int)phy_reg & 65534U);
      
#line 246 
      e1e_wphy_locked(hw,24631U,(unsigned short)((int)phy_reg));
      
#line 249 
      mac_reg = __er32(hw,24UL);
      
#line 250 
      mac_reg &= 4294965247U;
      
#line 251 
      __ew32(hw,24UL,mac_reg);
    }
    else ;
  }
  else ;
  
#line 255 
  __retres = (_Bool)1;
  return_label: 
#line 255 
                return __retres;
}


#line 265  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_toggle_lanphypc_pch_lpt(struct e1000_hw *hw)
{
  u32 mac_reg;
  
#line 270 
  mac_reg = __er32(hw,60UL);
  
#line 271 
  mac_reg &= 4093640703U;
  
#line 272 
  mac_reg |= 134217728U;
  
#line 273 
  __ew32(hw,60UL,mac_reg);
  
#line 276 
  mac_reg = __er32(hw,0UL);
  
#line 277 
  mac_reg |= 65536U;
  
#line 278 
  mac_reg &= 4294836223U;
  
#line 279 
  __ew32(hw,0UL,mac_reg);
  
#line 280 
  __er32(hw,8UL);
  
#line 281 
  usleep_range(10UL,20UL);
  
#line 282 
  mac_reg &= 4294901759U;
  
#line 283 
  __ew32(hw,0UL,mac_reg);
  
#line 284 
  __er32(hw,8UL);
  
#line 286 
  if (hw->mac.type <= (unsigned int)e1000_pch2lan) 
#line 287 
                                                   msleep(50U);
  else {
    u32 tmp;
    
#line 289 
    u16 count = (unsigned short)20U;
    ldv_47707: 
#line 290 
    ;
    
#line 292 
    usleep_range(5000UL,10000UL);
    
#line 293 
    tmp = __er32(hw,24UL);
    
#line 293 
    if ((tmp & 4U) == 0U) {
      u16 tmp_0;
      
#line 293 
      tmp_0 = count;
      
#line 293 
      count = (u16)((int)count - 1);
      
#line 293 
      ;
      
#line 293 
      if ((unsigned int)tmp_0 != 0U) 
#line 295 
                                     goto ldv_47707; else 
#line 298 
                                                          goto ldv_47708;
    }
    else 
#line 298 
         goto ldv_47708;
    ldv_47708: 
#line 299 
    ;
    
#line 295 
    msleep(30U);
  }
  
#line 297 
  return;
}


#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_init_phy_workarounds_pchlan(struct e1000_hw *hw)
{
  u32 mac_reg;
  s32 ret_val;
  
#line 308 
  struct e1000_adapter *adapter = hw->adapter;
  
#line 309 
  u32 fwsm = __er32(hw,23380UL);
  
#line 315 
  e1000_gate_hw_phy_config_ich8lan(hw,(_Bool)1);
  
#line 320 
  hw->dev_spec.ich8lan.ulp_state = e1000_ulp_state_unknown;
  
#line 321 
  e1000_disable_ulp_lpt_lp(hw,(_Bool)1);
  
#line 323 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 324 
  if (ret_val != 0) {
    {
      
#line 325 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_init_phy_workarounds_pchlan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Failed to initialize PHY flow\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))325U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 325 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 325 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Failed to initialize PHY flow\n"); else ;
    }
    
#line 326 
    goto out;
  }
  else ;
  
#line 333 
  switch ((unsigned int)hw->mac.type) {
    bool tmp_0;
    bool tmp_1;
    s32 tmp_2;
    case (unsigned int)11: 
#line 334 
    ;
    case (unsigned int)12: 
#line 335 
    ;
    
#line 336 
    tmp_0 = e1000_phy_is_accessible_pchlan(hw);
    
#line 336 
    if ((int)tmp_0 != 0) 
#line 337 
                         goto ldv_47721; else ;
    
#line 342 
    mac_reg = __er32(hw,24UL);
    
#line 343 
    mac_reg |= 2048U;
    
#line 344 
    __ew32(hw,24UL,mac_reg);
    
#line 350 
    msleep(50U);
    case (unsigned int)10: 
#line 353 
    ;
    
#line 354 
    tmp_1 = e1000_phy_is_accessible_pchlan(hw);
    
#line 354 
    if ((int)tmp_1 != 0) 
#line 355 
                         goto ldv_47721; else ;
    case (unsigned int)9: 
#line 358 
    ;
    
#line 359 
    if (hw->mac.type == (unsigned int)e1000_pchlan && (fwsm & 32768U) != 0U) 
      
#line 361 
      goto ldv_47721; else ;
    
#line 363 
    tmp_2 = (*(hw->phy.ops.check_reset_block))(hw);
    
#line 363 
    if (tmp_2 != 0) {
      {
        
#line 364 
        struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_init_phy_workarounds_pchlan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Required LANPHYPC toggle blocked by ME\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))364U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 364 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 364 
                                                              __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Required LANPHYPC toggle blocked by ME\n"); else ;
      }
      
#line 365 
      ret_val = -2;
      
#line 366 
      goto ldv_47721;
    }
    else ;
    
#line 370 
    e1000_toggle_lanphypc_pch_lpt(hw);
    
#line 371 
    if (hw->mac.type > (unsigned int)e1000_pch2lan) {
      bool tmp_3;
      bool tmp_4;
      
#line 372 
      tmp_3 = e1000_phy_is_accessible_pchlan(hw);
      
#line 372 
      if ((int)tmp_3 != 0) 
#line 373 
                           goto ldv_47721; else ;
      
#line 378 
      mac_reg = __er32(hw,24UL);
      
#line 379 
      mac_reg &= 4294965247U;
      
#line 380 
      __ew32(hw,24UL,mac_reg);
      
#line 382 
      tmp_4 = e1000_phy_is_accessible_pchlan(hw);
      
#line 382 
      if ((int)tmp_4 != 0) 
#line 383 
                           goto ldv_47721; else ;
      
#line 385 
      ret_val = -2;
    }
    else ;
    
#line 387 
    goto ldv_47721;
    default: 
#line 388 
    ;
    
#line 389 
    goto ldv_47721;
  }
  ldv_47721: 
#line 392 
  ;
  
#line 392 
  (*(hw->phy.ops.release))(hw);
  
#line 393 
  if (ret_val == 0) {
    s32 tmp_5;
    
#line 396 
    tmp_5 = (*(hw->phy.ops.check_reset_block))(hw);
    
#line 396 
    if (tmp_5 != 0) {
      
#line 397 
      netdev_err((struct net_device const *)adapter->netdev,"Reset blocked by ME\n");
      
#line 398 
      goto out;
    }
    else ;
    
#line 406 
    ret_val = e1000e_phy_hw_reset_generic(hw);
    
#line 407 
    if (ret_val != 0) 
#line 408 
                      goto out; else ;
    
#line 416 
    ret_val = (*(hw->phy.ops.check_reset_block))(hw);
    
#line 417 
    if (ret_val != 0) 
#line 418 
                      netdev_err((struct net_device const *)adapter->netdev,"ME blocked access to PHY after reset\n"); else ;
  }
  else ;
  out: 
#line 421 
  ;
  
#line 423 
  if (hw->mac.type == (unsigned int)e1000_pch2lan && (fwsm & 32768U) == 0U) {
    
#line 425 
    usleep_range(10000UL,20000UL);
    
#line 426 
    e1000_gate_hw_phy_config_ich8lan(hw,(_Bool)0);
  }
  else ;
  
#line 429 
  return ret_val;
}


#line 438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_init_phy_params_pchlan(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  
#line 440 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 443 
  phy->addr = 1U;
  
#line 444 
  phy->reset_delay_us = 100U;
  
#line 446 
  phy->ops.set_page = & e1000_set_page_igp;
  
#line 447 
  phy->ops.read_reg = & e1000_read_phy_reg_hv;
  
#line 448 
  phy->ops.read_reg_locked = & e1000_read_phy_reg_hv_locked;
  
#line 449 
  phy->ops.read_reg_page = & e1000_read_phy_reg_page_hv;
  
#line 450 
  phy->ops.set_d0_lplu_state = & e1000_set_lplu_state_pchlan;
  
#line 451 
  phy->ops.set_d3_lplu_state = & e1000_set_lplu_state_pchlan;
  
#line 452 
  phy->ops.write_reg = & e1000_write_phy_reg_hv;
  
#line 453 
  phy->ops.write_reg_locked = & e1000_write_phy_reg_hv_locked;
  
#line 454 
  phy->ops.write_reg_page = & e1000_write_phy_reg_page_hv;
  
#line 455 
  phy->ops.power_up = & e1000_power_up_phy_copper;
  
#line 456 
  phy->ops.power_down = & e1000_power_down_phy_copper_ich8lan;
  
#line 457 
  phy->autoneg_mask = (unsigned short)47U;
  
#line 459 
  phy->id = 0U;
  
#line 461 
  ret_val = e1000_init_phy_workarounds_pchlan(hw);
  
#line 462 
  if (ret_val != 0) {
    
#line 463 
    __retres = ret_val;
    
#line 463 
    goto return_label;
  }
  else ;
  
#line 465 
  if (phy->id == 0U) {
    
#line 466 
    switch ((unsigned int)hw->mac.type) {
      default: 
#line 467 
      ;
      
#line 468 
      ret_val = e1000e_get_phy_id(hw);
      
#line 469 
      if (ret_val != 0) {
        
#line 470 
        __retres = ret_val;
        
#line 470 
        goto return_label;
      }
      else ;
      
#line 471 
      if (phy->id != 0U && phy->id != 4294967280U) 
#line 472 
                                                   goto ldv_47732; else ;
      case (unsigned int)10: 
#line 474 
      ;
      case (unsigned int)11: 
#line 475 
      ;
      case (unsigned int)12: 
#line 476 
      ;
      
#line 480 
      ret_val = e1000_set_mdio_slow_mode_hv(hw);
      
#line 481 
      if (ret_val != 0) {
        
#line 482 
        __retres = ret_val;
        
#line 482 
        goto return_label;
      }
      else ;
      
#line 483 
      ret_val = e1000e_get_phy_id(hw);
      
#line 484 
      if (ret_val != 0) {
        
#line 485 
        __retres = ret_val;
        
#line 485 
        goto return_label;
      }
      else ;
      
#line 486 
      goto ldv_47732;
    }
    ldv_47732: 
#line 488 
    ;
  }
  else ;
  
#line 488 
  phy->type = e1000e_get_phy_type_from_id(phy->id);
  
#line 490 
  switch ((unsigned int)phy->type) {
    case (unsigned int)10: 
#line 491 
    ;
    case (unsigned int)11: 
#line 492 
    ;
    case (unsigned int)12: 
#line 493 
    ;
    
#line 494 
    phy->ops.check_polarity = & e1000_check_polarity_82577;
    
#line 495 
    phy->ops.force_speed_duplex = & e1000_phy_force_speed_duplex_82577;
    
#line 497 
    phy->ops.get_cable_length = & e1000_get_cable_length_82577;
    
#line 498 
    phy->ops.get_info = & e1000_get_phy_info_82577;
    
#line 499 
    phy->ops.commit = & e1000e_phy_sw_reset;
    
#line 500 
    goto ldv_47739;
    case (unsigned int)9: 
#line 501 
    ;
    
#line 502 
    phy->ops.check_polarity = & e1000_check_polarity_m88;
    
#line 503 
    phy->ops.force_speed_duplex = & e1000e_phy_force_speed_duplex_m88;
    
#line 504 
    phy->ops.get_cable_length = & e1000e_get_cable_length_m88;
    
#line 505 
    phy->ops.get_info = & e1000e_get_phy_info_m88;
    
#line 506 
    goto ldv_47739;
    default: 
#line 507 
    ;
    
#line 508 
    ret_val = -2;
    
#line 509 
    goto ldv_47739;
  }
  ldv_47739: 
#line 512 
  ;
  
#line 512 
  __retres = ret_val;
  return_label: 
#line 512 
                return __retres;
}


#line 521  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_init_phy_params_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  enum e1000_phy_type tmp;
  
#line 523 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 525 
  u16 i = (unsigned short)0U;
  
#line 527 
  phy->addr = 1U;
  
#line 528 
  phy->reset_delay_us = 100U;
  
#line 530 
  phy->ops.power_up = & e1000_power_up_phy_copper;
  
#line 531 
  phy->ops.power_down = & e1000_power_down_phy_copper_ich8lan;
  
#line 536 
  ret_val = e1000e_determine_phy_address(hw);
  
#line 537 
  if (ret_val != 0) {
    
#line 538 
    phy->ops.write_reg = & e1000e_write_phy_reg_bm;
    
#line 539 
    phy->ops.read_reg = & e1000e_read_phy_reg_bm;
    
#line 540 
    ret_val = e1000e_determine_phy_address(hw);
    
#line 541 
    if (ret_val != 0) {
      {
        
#line 542 
        struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_init_phy_params_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Cannot determine PHY addr. Erroring out\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))542U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 542 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 542 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Cannot determine PHY addr. Erroring out\n"); else ;
      }
      
#line 543 
      __retres = ret_val;
      
#line 543 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 547 
  phy->id = 0U;
  
#line 548 
  goto ldv_47751;
  ldv_47750: 
#line 549 
  ;
  
#line 550 
  usleep_range(1000UL,2000UL);
  
#line 551 
  ret_val = e1000e_get_phy_id(hw);
  
#line 552 
  if (ret_val != 0) {
    
#line 553 
    __retres = ret_val;
    
#line 553 
    goto return_label;
  }
  else ;
  ldv_47751: 
#line 554 
  ;
  
#line 548 
  tmp = e1000e_get_phy_type_from_id(phy->id);
  
#line 548 
  if (tmp == (unsigned int)e1000_phy_unknown) {
    u16 tmp_0;
    
#line 548 
    tmp_0 = i;
    
#line 548 
    i = (u16)((int)i + 1);
    
#line 548 
    ;
    
#line 548 
    if ((unsigned int)tmp_0 <= 99U) 
#line 551 
                                    goto ldv_47750; else 
#line 554 
                                                         goto ldv_47752;
  }
  else 
#line 554 
       goto ldv_47752;
  ldv_47752: 
#line 555 
  ;
  
#line 557 
  switch (phy->id) {
    case (u32)44565392: 
#line 558 
    ;
    
#line 559 
    phy->type = e1000_phy_igp_3;
    
#line 560 
    phy->autoneg_mask = (unsigned short)47U;
    
#line 561 
    phy->ops.read_reg_locked = & e1000e_read_phy_reg_igp_locked;
    
#line 562 
    phy->ops.write_reg_locked = & e1000e_write_phy_reg_igp_locked;
    
#line 563 
    phy->ops.get_info = & e1000e_get_phy_info_igp;
    
#line 564 
    phy->ops.check_polarity = & e1000_check_polarity_igp;
    
#line 565 
    phy->ops.force_speed_duplex = & e1000e_phy_force_speed_duplex_igp;
    
#line 566 
    goto ldv_47754;
    case (u32)44565296: 
#line 567 
    ;
    case (u32)44565280: 
#line 568 
    ;
    case (u32)44565264: 
#line 569 
    ;
    
#line 570 
    phy->type = e1000_phy_ife;
    
#line 571 
    phy->autoneg_mask = (unsigned short)15U;
    
#line 572 
    phy->ops.get_info = & e1000_get_phy_info_ife;
    
#line 573 
    phy->ops.check_polarity = & e1000_check_polarity_ife;
    
#line 574 
    phy->ops.force_speed_duplex = & e1000_phy_force_speed_duplex_ife;
    
#line 575 
    goto ldv_47754;
    case (u32)21040304: 
#line 576 
    ;
    
#line 577 
    phy->type = e1000_phy_bm;
    
#line 578 
    phy->autoneg_mask = (unsigned short)47U;
    
#line 579 
    phy->ops.read_reg = & e1000e_read_phy_reg_bm;
    
#line 580 
    phy->ops.write_reg = & e1000e_write_phy_reg_bm;
    
#line 581 
    phy->ops.commit = & e1000e_phy_sw_reset;
    
#line 582 
    phy->ops.get_info = & e1000e_get_phy_info_m88;
    
#line 583 
    phy->ops.check_polarity = & e1000_check_polarity_m88;
    
#line 584 
    phy->ops.force_speed_duplex = & e1000e_phy_force_speed_duplex_m88;
    
#line 585 
    goto ldv_47754;
    default: 
#line 586 
    ;
    
#line 587 
    __retres = -2;
    
#line 587 
    goto return_label;
  }
  ldv_47754: 
#line 590 
  ;
  
#line 590 
  __retres = 0;
  return_label: 
#line 590 
                return __retres;
}


#line 600  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_init_nvm_params_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  u32 gfpreg;
  u32 sector_base_addr;
  u32 sector_end_addr;
  u16 i;
  u32 nvm_size;
  
#line 602 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 603 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  
#line 608 
  nvm->type = e1000_nvm_flash_sw;
  
#line 610 
  if (hw->mac.type == (unsigned int)e1000_pch_spt) {
    u32 tmp;
    
#line 617 
    nvm->flash_base_addr = 0U;
    
#line 618 
    tmp = __er32(hw,12UL);
    
#line 618 
    nvm_size = (((tmp >> 1) & 31U) + 1U) * 4096U;
    
#line 620 
    nvm->flash_bank_size = nvm_size / 2U;
    
#line 622 
    nvm->flash_bank_size /= 2U;
    
#line 624 
    hw->flash_address = hw->hw_addr + 57344U;
  }
  else {
    
#line 627 
    if (hw->flash_address == (void *)0) {
      {
        
#line 628 
        struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_init_nvm_params_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "ERROR: Flash registers not mapped\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))628U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 628 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 628 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"ERROR: Flash registers not mapped\n"); else ;
      }
      
#line 629 
      __retres = -3;
      
#line 629 
      goto return_label;
    }
    else ;
    
#line 632 
    gfpreg = __er32flash(hw,0UL);
    
#line 638 
    sector_base_addr = gfpreg & 8191U;
    
#line 639 
    sector_end_addr = ((gfpreg >> 16) & 8191U) + 1U;
    
#line 642 
    nvm->flash_base_addr = sector_base_addr << 12;
    
#line 648 
    nvm->flash_bank_size = (sector_end_addr - sector_base_addr) << 12;
    
#line 650 
    nvm->flash_bank_size /= 2U;
    
#line 652 
    nvm->flash_bank_size /= 2U;
  }
  
#line 655 
  nvm->word_size = (unsigned short)2048U;
  
#line 658 
  i = (unsigned short)0U;
  
#line 658 
  goto ldv_47773;
  ldv_47772: 
#line 659 
  ;
  
#line 659 
  dev_spec->shadow_ram[(int)i].modified = (_Bool)0;
  
#line 660 
  dev_spec->shadow_ram[(int)i].value = (unsigned short)65535U;
  
#line 658 
  i = (u16)((int)i + 1);
  ldv_47773: 
#line 659 
  ;
  
#line 658 
  if ((int)nvm->word_size > (int)i) 
#line 660 
                                    goto ldv_47772; else 
#line 663 
                                                         goto ldv_47774;
  ldv_47774: 
#line 664 
  ;
  
#line 663 
  __retres = 0;
  return_label: 
#line 663 
                return __retres;
}


#line 673  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_init_mac_params_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  
#line 675 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 678 
  hw->phy.media_type = e1000_media_type_copper;
  
#line 681 
  mac->mta_reg_count = (unsigned short)32U;
  
#line 683 
  mac->rar_entry_count = (unsigned short)7U;
  
#line 684 
  if (mac->type == (unsigned int)e1000_ich8lan) 
#line 685 
                                                mac->rar_entry_count = (u16)((int)mac->rar_entry_count - 1); else ;
  
#line 687 
  mac->has_fwsm = (_Bool)1;
  
#line 689 
  mac->arc_subsystem_valid = (_Bool)0;
  
#line 691 
  mac->adaptive_ifs = (_Bool)1;
  
#line 694 
  switch ((unsigned int)mac->type) {
    case (unsigned int)6: 
#line 695 
    ;
    case (unsigned int)7: 
#line 696 
    ;
    case (unsigned int)8: 
#line 697 
    ;
    
#line 699 
    mac->ops.check_mng_mode = & e1000_check_mng_mode_ich8lan;
    
#line 701 
    mac->ops.id_led_init = & e1000e_id_led_init_generic;
    
#line 703 
    mac->ops.blink_led = & e1000e_blink_led_generic;
    
#line 705 
    mac->ops.setup_led = & e1000e_setup_led_generic;
    
#line 707 
    mac->ops.cleanup_led = & e1000_cleanup_led_ich8lan;
    
#line 709 
    mac->ops.led_on = & e1000_led_on_ich8lan;
    
#line 710 
    mac->ops.led_off = & e1000_led_off_ich8lan;
    
#line 711 
    goto ldv_47782;
    case (unsigned int)10: 
#line 712 
    ;
    
#line 713 
    mac->rar_entry_count = (unsigned short)5U;
    
#line 714 
    mac->ops.rar_set = & e1000_rar_set_pch2lan;
    case (unsigned int)11: 
#line 716 
    ;
    case (unsigned int)12: 
#line 717 
    ;
    case (unsigned int)9: 
#line 718 
    ;
    
#line 720 
    mac->ops.check_mng_mode = & e1000_check_mng_mode_pchlan;
    
#line 722 
    mac->ops.id_led_init = & e1000_id_led_init_pchlan;
    
#line 724 
    mac->ops.setup_led = & e1000_setup_led_pchlan;
    
#line 726 
    mac->ops.cleanup_led = & e1000_cleanup_led_pchlan;
    
#line 728 
    mac->ops.led_on = & e1000_led_on_pchlan;
    
#line 729 
    mac->ops.led_off = & e1000_led_off_pchlan;
    
#line 730 
    goto ldv_47782;
    default: 
#line 731 
    ;
    
#line 732 
    goto ldv_47782;
  }
  ldv_47782: 
#line 735 
  ;
  
#line 735 
  if ((unsigned int)mac->type + 4294967285U <= 1U) {
    
#line 736 
    mac->rar_entry_count = (unsigned short)12U;
    
#line 737 
    mac->ops.rar_set = & e1000_rar_set_pch_lpt;
    
#line 738 
    mac->ops.setup_physical_interface = & e1000_setup_copper_link_pch_lpt;
    
#line 740 
    mac->ops.rar_get_count = & e1000_rar_get_count_pch_lpt;
  }
  else ;
  
#line 744 
  if (mac->type == (unsigned int)e1000_ich8lan) 
#line 745 
                                                e1000e_set_kmrn_lock_loss_workaround_ich8lan(hw,(_Bool)1); else ;
  
#line 747 
  __retres = 0;
  
#line 747 
  return __retres;
}


#line 759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 __e1000_access_emi_reg_locked(struct e1000_hw *hw, u16 address, u16 *data, bool read)
{
  s32 __retres;
  s32 ret_val;
  
#line 764 
  ret_val = e1e_wphy_locked(hw,16U,(unsigned short)((int)address));
  
#line 765 
  if (ret_val != 0) {
    
#line 766 
    __retres = ret_val;
    
#line 766 
    goto return_label;
  }
  else ;
  
#line 768 
  if ((int)read != 0) 
#line 769 
                      ret_val = e1e_rphy_locked(hw,17U,data); else 
#line 771 
                                                                   ret_val = e1e_wphy_locked(hw,17U,(unsigned short)((int)*data));
  
#line 773 
  __retres = ret_val;
  return_label: 
#line 773 
                return __retres;
}


#line 784  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_read_emi_reg_locked(struct e1000_hw *hw, u16 addr, u16 *data)
{
  s32 tmp;
  
#line 786 
  tmp = __e1000_access_emi_reg_locked(hw,(unsigned short)((int)addr),data,(_Bool)1);
  
#line 786 
  return tmp;
}


#line 797  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_write_emi_reg_locked(struct e1000_hw *hw, u16 addr, u16 data)
{
  s32 tmp;
  
#line 799 
  tmp = __e1000_access_emi_reg_locked(hw,(unsigned short)((int)addr),& data,(_Bool)0);
  
#line 799 
  return tmp;
}


#line 816  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_set_eee_pchlan(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 lpa;
  u16 pcs_status;
  u16 adv;
  u16 adv_addr;
  u16 lpi_ctrl;
  u16 data;
  
#line 818 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  
#line 822 
  switch ((unsigned int)hw->phy.type) {
    case (unsigned int)11: 
#line 823 
    ;
    
#line 824 
    lpa = (unsigned short)1039U;
    
#line 825 
    pcs_status = (unsigned short)6190U;
    
#line 826 
    adv_addr = (unsigned short)1038U;
    
#line 827 
    goto ldv_47817;
    case (unsigned int)12: 
#line 828 
    ;
    
#line 829 
    lpa = (unsigned short)32770U;
    
#line 830 
    pcs_status = (unsigned short)37889U;
    
#line 831 
    adv_addr = (unsigned short)32769U;
    
#line 832 
    goto ldv_47817;
    default: 
#line 833 
    ;
    
#line 834 
    __retres = 0;
    
#line 834 
    goto return_label;
  }
  ldv_47817: 
#line 837 
  ;
  
#line 837 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 838 
  if (ret_val != 0) {
    
#line 839 
    __retres = ret_val;
    
#line 839 
    goto return_label;
  }
  else ;
  
#line 841 
  ret_val = e1e_rphy_locked(hw,24724U,& lpi_ctrl);
  
#line 842 
  if (ret_val != 0) 
#line 843 
                    goto release; else ;
  
#line 846 
  lpi_ctrl = (unsigned short)((unsigned int)lpi_ctrl & 40959U);
  
#line 849 
  if (! dev_spec->eee_disable) {
    
#line 851 
    ret_val = e1000_read_emi_reg_locked(hw,(unsigned short)((int)lpa),& dev_spec->eee_lp_ability);
    
#line 853 
    if (ret_val != 0) 
#line 854 
                      goto release; else ;
    
#line 857 
    ret_val = e1000_read_emi_reg_locked(hw,(unsigned short)((int)adv_addr),& adv);
    
#line 858 
    if (ret_val != 0) 
#line 859 
                      goto release; else ;
    
#line 864 
    if ((((int)dev_spec->eee_lp_ability & (int)adv) & 4) != 0) 
#line 865 
                                                               lpi_ctrl = (unsigned short)((unsigned int)lpi_ctrl | 16384U); else ;
    
#line 867 
    if ((((int)dev_spec->eee_lp_ability & (int)adv) & 2) != 0) {
      
#line 868 
      e1e_rphy_locked(hw,5U,& data);
      
#line 869 
      if (((int)data & 256) != 0) 
#line 870 
                                  lpi_ctrl = (unsigned short)((unsigned int)lpi_ctrl | 8192U); else 
                                                                    
#line 876 
                                                                    dev_spec->eee_lp_ability = (unsigned short)((unsigned int)dev_spec->eee_lp_ability & 65533U);
    }
    else ;
  }
  else ;
  
#line 881 
  if (hw->phy.type == (unsigned int)e1000_phy_82579) {
    
#line 882 
    ret_val = e1000_read_emi_reg_locked(hw,(unsigned short)17426,& data);
    
#line 884 
    if (ret_val != 0) 
#line 885 
                      goto release; else ;
    
#line 887 
    data = (unsigned short)((unsigned int)data & 65531U);
    
#line 888 
    ret_val = e1000_write_emi_reg_locked(hw,(unsigned short)17426,(unsigned short)((int)data));
  }
  else ;
  
#line 893 
  ret_val = e1000_read_emi_reg_locked(hw,(unsigned short)((int)pcs_status),& data);
  
#line 894 
  if (ret_val != 0) 
#line 895 
                    goto release; else ;
  
#line 897 
  ret_val = e1e_wphy_locked(hw,24724U,(unsigned short)((int)lpi_ctrl));
  release: 
#line 898 
  ;
  
#line 899 
  (*(hw->phy.ops.release))(hw);
  
#line 901 
  __retres = ret_val;
  return_label: 
#line 901 
                return __retres;
}


#line 915  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_k1_workaround_lpt_lp(struct e1000_hw *hw, bool link)
{
  s32 __retres;
  u16 reg;
  
#line 917 
  u32 fextnvm6 = __er32(hw,16UL);
  
#line 918 
  u32 status = __er32(hw,8UL);
  
#line 919 
  s32 ret_val = 0;
  
#line 922 
  if ((int)link != 0 && (status & 128U) != 0U) {
    
#line 923 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    
#line 924 
    if (ret_val != 0) {
      
#line 925 
      __retres = ret_val;
      
#line 925 
      goto return_label;
    }
    else ;
    
#line 927 
    ret_val = e1000e_read_kmrn_reg_locked(hw,7U,& reg);
    
#line 930 
    if (ret_val != 0) 
#line 931 
                      goto release; else ;
    
#line 933 
    ret_val = e1000e_write_kmrn_reg_locked(hw,7U,(unsigned short)((int)reg & 65533));
    
#line 938 
    if (ret_val != 0) 
#line 939 
                      goto release; else ;
    
#line 941 
    usleep_range(10UL,20UL);
    
#line 943 
    __ew32(hw,16UL,fextnvm6 | 256U);
    
#line 945 
    ret_val = e1000e_write_kmrn_reg_locked(hw,7U,(unsigned short)((int)reg));
    release: 
#line 949 
    ;
    
#line 950 
    (*(hw->phy.ops.release))(hw);
  }
  else {
    
#line 953 
    fextnvm6 &= 4294967039U;
    
#line 955 
    if ((hw->phy.revision > 5U || ! link) || ((status & 64U) != 0U && (status & 1U) != 0U)) 
      
#line 958 
      goto update_fextnvm6; else ;
    
#line 960 
    ret_val = e1e_rphy(hw,24658U,& reg);
    
#line 961 
    if (ret_val != 0) {
      
#line 962 
      __retres = ret_val;
      
#line 962 
      goto return_label;
    }
    else ;
    
#line 965 
    reg = (unsigned short)((unsigned int)reg & 49407U);
    
#line 967 
    if ((status & 64U) != 0U) {
      
#line 969 
      reg = (unsigned short)((unsigned int)reg | 1280U);
      
#line 972 
      fextnvm6 &= 4294966783U;
    }
    else {
      
#line 975 
      reg = (unsigned short)((unsigned int)reg | 12800U);
      
#line 979 
      fextnvm6 |= 512U;
    }
    
#line 982 
    ret_val = e1e_wphy(hw,24658U,(unsigned short)((int)reg));
    
#line 983 
    if (ret_val != 0) {
      
#line 984 
      __retres = ret_val;
      
#line 984 
      goto return_label;
    }
    else ;
    update_fextnvm6: 
#line 986 
    ;
    
#line 987 
    __ew32(hw,16UL,fextnvm6);
  }
  
#line 990 
  __retres = ret_val;
  return_label: 
#line 990 
                return __retres;
}


#line 1009  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_platform_pm_pch_lpt(struct e1000_hw *hw, bool link)
{
  s32 __retres;
  
#line 1011 
  u32 reg = (unsigned int)((((int)link << 31) | ((int)link << 15)) | 1073741824);
  
#line 1013 
  u16 lat_enc = (unsigned short)0U;
  
#line 1015 
  if ((int)link != 0) {
    u16 speed;
    u16 duplex;
    u16 max_snoop;
    u16 max_nosnoop;
    u16 max_ltr_enc;
    u64 value;
    u32 rxa;
    u32 tmp;
    u32 tmp_0;
    int tmp_2;
    
#line 1016 
    u16 scale = (unsigned short)0U;
    
#line 1022 
    if ((hw->adapter)->max_frame_size == 0U) {
      {
        
#line 1023 
        struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_platform_pm_pch_lpt", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "max_frame_size not set.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1023U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1023 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1023 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"max_frame_size not set.\n"); else ;
      }
      
#line 1024 
      __retres = -3;
      
#line 1024 
      goto return_label;
    }
    else ;
    
#line 1027 
    (*(hw->mac.ops.get_link_up_info))(hw,& speed,& duplex);
    
#line 1028 
    if ((unsigned int)speed == 0U) {
      {
        
#line 1029 
        struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_platform_pm_pch_lpt", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Speed not set.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1029U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1029 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1029 
                                                              __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Speed not set.\n"); else ;
      }
      
#line 1030 
      __retres = -3;
      
#line 1030 
      goto return_label;
    }
    else ;
    
#line 1034 
    tmp = __er32(hw,4096UL);
    
#line 1034 
    rxa = tmp & 65535U;
    
#line 1044 
    rxa *= 512U;
    
#line 1046 
    if ((hw->adapter)->max_frame_size < rxa) 
#line 1046 
                                             tmp_0 = (rxa - (hw->adapter)->max_frame_size) * (unsigned int)(16000 / (int)speed); else 
                                                                    
#line 1046 
                                                                    tmp_0 = 0U;
    
#line 1045 
    value = (unsigned long long)tmp_0;
    
#line 1049 
    goto ldv_47849;
    ldv_47848: 
#line 1050 
    ;
    
#line 1050 
    scale = (u16)((int)scale + 1);
    
#line 1051 
    value = (value + 31ULL) / 32ULL;
    ldv_47849: 
#line 1052 
    ;
    
#line 1049 
    if (value > 1023ULL) 
#line 1051 
                         goto ldv_47848; else 
#line 1054 
                                              goto ldv_47850;
    ldv_47850: 
#line 1055 
    ;
    
#line 1053 
    if ((unsigned int)scale > 5U) {
      {
        
#line 1054 
        struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_platform_pm_pch_lpt", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Invalid LTR latency scale %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1054U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1054 
        if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 1054 
                                                              __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Invalid LTR latency scale %d\n",(int)scale); else ;
      }
      
#line 1055 
      __retres = -3;
      
#line 1055 
      goto return_label;
    }
    else ;
    
#line 1057 
    lat_enc = (unsigned short)(((int)scale << 10U) | (int)((unsigned short)value));
    
#line 1060 
    pci_read_config_word((struct pci_dev const *)(hw->adapter)->pdev,168,& max_snoop);
    
#line 1062 
    pci_read_config_word((struct pci_dev const *)(hw->adapter)->pdev,170,& max_nosnoop);
    {
      int tmp_1;
      
#line 1064 
      u16 __max1 = max_snoop;
      
#line 1064 
      u16 __max2 = max_nosnoop;
      
#line 1064 
      if ((int)__max1 > (int)__max2) 
#line 1064 
                                     tmp_1 = (int)__max1; else 
#line 1064 
                                                               tmp_1 = (int)__max2;
      
#line 1064 
      tmp_2 = tmp_1;
    }
    
#line 1064 
    max_ltr_enc = (unsigned short)tmp_2;
    
#line 1066 
    if ((int)lat_enc > (int)max_ltr_enc) 
#line 1067 
                                         lat_enc = max_ltr_enc; else ;
  }
  else ;
  
#line 1071 
  reg = (unsigned int)((int)lat_enc | ((int)lat_enc << 16)) | reg;
  
#line 1072 
  __ew32(hw,248UL,reg);
  
#line 1074 
  __retres = 0;
  return_label: 
#line 1074 
                return __retres;
}


#line 1087  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_enable_ulp_lpt_lp(struct e1000_hw *hw, bool to_sx)
{
  s32 __retres;
  u32 mac_reg;
  u16 phy_reg;
  u32 tmp;
  
#line 1090 
  s32 ret_val = 0;
  
#line 1092 
  u16 oem_reg = (unsigned short)0U;
  
#line 1094 
  if (((((hw->mac.type <= (unsigned int)e1000_pch2lan || (unsigned int)((hw->adapter)->pdev)->device == 5434U) || (unsigned int)((hw->adapter)->pdev)->device == 5435U) || (unsigned int)((hw->adapter)->pdev)->device == 5536U) || (unsigned int)((hw->adapter)->pdev)->device == 5537U) || hw->dev_spec.ich8lan.ulp_state == (unsigned int)e1000_ulp_state_on) {
    
#line 1100 
    __retres = 0;
    
#line 1100 
    goto return_label;
  }
  else ;
  
#line 1102 
  tmp = __er32(hw,23380UL);
  
#line 1102 
  if ((tmp & 32768U) != 0U) {
    
#line 1104 
    mac_reg = __er32(hw,23376UL);
    
#line 1105 
    mac_reg |= 6144U;
    
#line 1106 
    __ew32(hw,23376UL,mac_reg);
    
#line 1108 
    goto out;
  }
  else ;
  
#line 1111 
  if (! to_sx) {
    u32 tmp_0;
    int tmp_1;
    u32 tmp_2;
    
#line 1112 
    int i = 0;
    
#line 1115 
    goto ldv_47867;
    ldv_47866: 
#line 1116 
    ;
    
#line 1117 
    tmp_0 = __er32(hw,8UL);
    
#line 1117 
    if ((tmp_0 & 2U) != 0U) {
      
#line 1118 
      __retres = -2;
      
#line 1118 
      goto return_label;
    }
    else ;
    
#line 1120 
    tmp_1 = i;
    
#line 1120 
    i += 1;
    
#line 1120 
    ;
    
#line 1120 
    if (tmp_1 == 100) 
#line 1121 
                      goto ldv_47865; else ;
    
#line 1123 
    msleep(50U);
    ldv_47867: 
#line 1124 
    ;
    
#line 1115 
    tmp_2 = __er32(hw,44UL);
    
#line 1115 
    if ((tmp_2 & 4U) == 0U) 
#line 1117 
                            goto ldv_47866; else 
#line 1120 
                                                 goto ldv_47865;
    ldv_47865: 
#line 1121 
    ;
    {
      
#line 1125 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_enable_ulp_lpt_lp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "CABLE_DISCONNECTED %s set after %dmsec\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1127U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1125 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        char *tmp_4;
        u32 tmp_3;
        
#line 1125 
        ;
        
#line 1125 
        tmp_3 = __er32(hw,44UL);
        
#line 1125 
        if ((tmp_3 & 4U) != 0U) 
#line 1125 
                                tmp_4 = (char *)""; else 
#line 1125 
                                                         tmp_4 = (char *)"not";
        
#line 1125 
        ;
        
#line 1125 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"CABLE_DISCONNECTED %s set after %dmsec\n",tmp_4,i * 50);
      }
      else ;
    }
  }
  else ;
  
#line 1130 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 1131 
  if (ret_val != 0) 
#line 1132 
                    goto out; else ;
  
#line 1135 
  ret_val = e1000_read_phy_reg_hv_locked(hw,24631U,& phy_reg);
  
#line 1136 
  if (ret_val != 0) 
#line 1137 
                    goto release; else ;
  
#line 1138 
  phy_reg = (unsigned short)((unsigned int)phy_reg | 1U);
  
#line 1139 
  e1000_write_phy_reg_hv_locked(hw,24631U,(unsigned short)((int)phy_reg));
  
#line 1142 
  mac_reg = __er32(hw,24UL);
  
#line 1143 
  mac_reg |= 2048U;
  
#line 1144 
  __ew32(hw,24UL,mac_reg);
  
#line 1149 
  if (hw->phy.type == (unsigned int)e1000_phy_i217 && hw->phy.revision == 6U) {
    
#line 1150 
    ret_val = e1000_read_phy_reg_hv_locked(hw,24601U,& oem_reg);
    
#line 1152 
    if (ret_val != 0) 
#line 1153 
                      goto release; else ;
    
#line 1155 
    phy_reg = oem_reg;
    
#line 1156 
    phy_reg = (unsigned short)((unsigned int)phy_reg | 68U);
    
#line 1158 
    ret_val = e1000_write_phy_reg_hv_locked(hw,24601U,(unsigned short)((int)phy_reg));
    
#line 1161 
    if (ret_val != 0) 
#line 1162 
                      goto release; else ;
  }
  else ;
  
#line 1168 
  ret_val = e1000_read_phy_reg_hv_locked(hw,24944U,& phy_reg);
  
#line 1169 
  if (ret_val != 0) 
#line 1170 
                    goto release; else ;
  
#line 1171 
  phy_reg = (unsigned short)((unsigned int)phy_reg | 4352U);
  
#line 1173 
  if ((int)to_sx != 0) {
    u32 tmp_5;
    
#line 1174 
    tmp_5 = __er32(hw,22536UL);
    
#line 1174 
    if ((tmp_5 & 1U) != 0U) 
#line 1175 
                            phy_reg = (unsigned short)((unsigned int)phy_reg | 64U); else 
                                                                    
#line 1177 
                                                                    phy_reg = (unsigned short)((unsigned int)phy_reg & 65471U);
    
#line 1179 
    phy_reg = (unsigned short)((unsigned int)phy_reg | 16U);
    
#line 1180 
    phy_reg = (unsigned short)((unsigned int)phy_reg & 65503U);
  }
  else {
    
#line 1182 
    phy_reg = (unsigned short)((unsigned int)phy_reg | 32U);
    
#line 1183 
    phy_reg = (unsigned short)((unsigned int)phy_reg & 65519U);
    
#line 1184 
    phy_reg = (unsigned short)((unsigned int)phy_reg & 65471U);
  }
  
#line 1186 
  e1000_write_phy_reg_hv_locked(hw,24944U,(unsigned short)((int)phy_reg));
  
#line 1189 
  mac_reg = __er32(hw,228UL);
  
#line 1190 
  mac_reg |= 32U;
  
#line 1191 
  __ew32(hw,228UL,mac_reg);
  
#line 1194 
  phy_reg = (unsigned short)((unsigned int)phy_reg | 1U);
  
#line 1195 
  e1000_write_phy_reg_hv_locked(hw,24944U,(unsigned short)((int)phy_reg));
  
#line 1197 
  if ((hw->phy.type == (unsigned int)e1000_phy_i217 && hw->phy.revision == 6U) && (int)to_sx != 0) {
    u32 tmp_6;
    
#line 1198 
    tmp_6 = __er32(hw,8UL);
    
#line 1198 
    if ((tmp_6 & 2U) != 0U) {
      
#line 1199 
      ret_val = e1000_write_phy_reg_hv_locked(hw,24601U,(unsigned short)((int)oem_reg));
      
#line 1201 
      if (ret_val != 0) 
#line 1202 
                        goto release; else ;
    }
    else ;
  }
  else ;
  release: 
#line 1205 
  ;
  
#line 1206 
  (*(hw->phy.ops.release))(hw);
  out: 
#line 1207 
  ;
  
#line 1208 
  if (ret_val != 0) {
    
#line 1209 
    struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_enable_ulp_lpt_lp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Error in ULP enable flow: %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1209U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1209 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1209 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Error in ULP enable flow: %d\n",ret_val); else ;
  }
  else 
#line 1211 
       hw->dev_spec.ich8lan.ulp_state = e1000_ulp_state_on;
  
#line 1213 
  __retres = ret_val;
  return_label: 
#line 1213 
                return __retres;
}


#line 1231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_disable_ulp_lpt_lp(struct e1000_hw *hw, bool force)
{
  s32 __retres;
  u32 mac_reg;
  u16 phy_reg;
  u32 tmp_1;
  
#line 1233 
  s32 ret_val = 0;
  
#line 1236 
  int i = 0;
  
#line 1238 
  if (((((hw->mac.type <= (unsigned int)e1000_pch2lan || (unsigned int)((hw->adapter)->pdev)->device == 5434U) || (unsigned int)((hw->adapter)->pdev)->device == 5435U) || (unsigned int)((hw->adapter)->pdev)->device == 5536U) || (unsigned int)((hw->adapter)->pdev)->device == 5537U) || hw->dev_spec.ich8lan.ulp_state == (unsigned int)e1000_ulp_state_off) {
    
#line 1244 
    __retres = 0;
    
#line 1244 
    goto return_label;
  }
  else ;
  
#line 1246 
  tmp_1 = __er32(hw,23380UL);
  
#line 1246 
  if ((tmp_1 & 32768U) != 0U) {
    int tmp;
    u32 tmp_0;
    
#line 1247 
    if ((int)force != 0) {
      
#line 1249 
      mac_reg = __er32(hw,23376UL);
      
#line 1250 
      mac_reg &= 4294965247U;
      
#line 1251 
      mac_reg |= 4096U;
      
#line 1252 
      __ew32(hw,23376UL,mac_reg);
    }
    else ;
    
#line 1256 
    goto ldv_47882;
    ldv_47881: 
#line 1257 
    ;
    
#line 1257 
    tmp = i;
    
#line 1257 
    i += 1;
    
#line 1257 
    ;
    
#line 1257 
    if (tmp == 10) {
      
#line 1258 
      ret_val = -2;
      
#line 1259 
      goto out;
    }
    else ;
    
#line 1262 
    usleep_range(10000UL,20000UL);
    ldv_47882: 
#line 1263 
    ;
    
#line 1256 
    tmp_0 = __er32(hw,23380UL);
    
#line 1256 
    if ((tmp_0 & 1024U) != 0U) 
#line 1258 
                               goto ldv_47881; else 
#line 1261 
                                                    goto ldv_47883;
    ldv_47883: 
#line 1262 
    ;
    {
      
#line 1264 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_disable_ulp_lpt_lp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "ULP_CONFIG_DONE cleared after %dmsec\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1264U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1264 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1264 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"ULP_CONFIG_DONE cleared after %dmsec\n",i * 10); else ;
    }
    
#line 1266 
    if ((int)force != 0) {
      
#line 1267 
      mac_reg = __er32(hw,23376UL);
      
#line 1268 
      mac_reg &= 4294963199U;
      
#line 1269 
      __ew32(hw,23376UL,mac_reg);
    }
    else {
      
#line 1272 
      mac_reg = __er32(hw,23376UL);
      
#line 1273 
      mac_reg &= 4294965247U;
      
#line 1274 
      __ew32(hw,23376UL,mac_reg);
    }
    
#line 1277 
    goto out;
  }
  else ;
  
#line 1280 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 1281 
  if (ret_val != 0) 
#line 1282 
                    goto out; else ;
  
#line 1284 
  if ((int)force != 0) 
#line 1286 
                       e1000_toggle_lanphypc_pch_lpt(hw); else ;
  
#line 1289 
  ret_val = e1000_read_phy_reg_hv_locked(hw,24631U,& phy_reg);
  
#line 1290 
  if (ret_val != 0) {
    
#line 1294 
    mac_reg = __er32(hw,24UL);
    
#line 1295 
    mac_reg |= 2048U;
    
#line 1296 
    __ew32(hw,24UL,mac_reg);
    
#line 1298 
    msleep(50U);
    
#line 1300 
    ret_val = e1000_read_phy_reg_hv_locked(hw,24631U,& phy_reg);
    
#line 1302 
    if (ret_val != 0) 
#line 1303 
                      goto release; else ;
  }
  else ;
  
#line 1305 
  phy_reg = (unsigned short)((unsigned int)phy_reg & 65534U);
  
#line 1306 
  e1000_write_phy_reg_hv_locked(hw,24631U,(unsigned short)((int)phy_reg));
  
#line 1309 
  mac_reg = __er32(hw,24UL);
  
#line 1310 
  mac_reg &= 4294965247U;
  
#line 1311 
  __ew32(hw,24UL,mac_reg);
  
#line 1316 
  ret_val = e1000_read_phy_reg_hv_locked(hw,24657U,& phy_reg);
  
#line 1317 
  if (ret_val != 0) 
#line 1318 
                    goto release; else ;
  
#line 1319 
  phy_reg = (unsigned short)((unsigned int)phy_reg | 16384U);
  
#line 1320 
  e1000_write_phy_reg_hv_locked(hw,24657U,(unsigned short)((int)phy_reg));
  
#line 1323 
  ret_val = e1000_read_phy_reg_hv_locked(hw,24944U,& phy_reg);
  
#line 1324 
  if (ret_val != 0) 
#line 1325 
                    goto release; else ;
  
#line 1326 
  phy_reg = (unsigned short)((unsigned int)phy_reg & 61067U);
  
#line 1332 
  e1000_write_phy_reg_hv_locked(hw,24944U,(unsigned short)((int)phy_reg));
  
#line 1335 
  phy_reg = (unsigned short)((unsigned int)phy_reg | 1U);
  
#line 1336 
  e1000_write_phy_reg_hv_locked(hw,24944U,(unsigned short)((int)phy_reg));
  
#line 1339 
  mac_reg = __er32(hw,228UL);
  
#line 1340 
  mac_reg &= 4294967263U;
  
#line 1341 
  __ew32(hw,228UL,mac_reg);
  release: 
#line 1343 
  ;
  
#line 1344 
  (*(hw->phy.ops.release))(hw);
  
#line 1345 
  if ((int)force != 0) {
    
#line 1346 
    e1000_phy_hw_reset(hw);
    
#line 1347 
    msleep(50U);
  }
  else ;
  out: 
#line 1349 
  ;
  
#line 1350 
  if (ret_val != 0) {
    
#line 1351 
    struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_disable_ulp_lpt_lp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Error in ULP disable flow: %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1351U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1351 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1351 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Error in ULP disable flow: %d\n",ret_val); else ;
  }
  else 
#line 1353 
       hw->dev_spec.ich8lan.ulp_state = e1000_ulp_state_off;
  
#line 1355 
  __retres = ret_val;
  return_label: 
#line 1355 
                return __retres;
}


#line 1366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_check_for_copper_link_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 emi_addr;
  bool link;
  u16 phy_reg;
  
#line 1368 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 1369 
  s32 tipg_reg = 0;
  
#line 1370 
  u16 emi_val = (unsigned short)0U;
  
#line 1379 
  if (! mac->get_link_status) {
    
#line 1380 
    __retres = 0;
    
#line 1380 
    goto return_label;
  }
  else ;
  
#line 1386 
  ret_val = e1000e_phy_has_link_generic(hw,1U,0U,& link);
  
#line 1387 
  if (ret_val != 0) {
    
#line 1388 
    __retres = ret_val;
    
#line 1388 
    goto return_label;
  }
  else ;
  
#line 1390 
  if (hw->mac.type == (unsigned int)e1000_pchlan) {
    
#line 1391 
    ret_val = e1000_k1_gig_workaround_hv(hw,(_Bool)((bool)((int)link) != 0));
    
#line 1392 
    if (ret_val != 0) {
      
#line 1393 
      __retres = ret_val;
      
#line 1393 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1401 
  if ((unsigned int)hw->mac.type + 4294967286U <= 2U && (int)link != 0) {
    u16 speed;
    u16 duplex;
    u32 tmp;
    
#line 1405 
    e1000e_get_speed_and_duplex_copper(hw,& speed,& duplex);
    
#line 1406 
    tmp = __er32(hw,1040UL);
    
#line 1406 
    tipg_reg = (int)tmp;
    
#line 1407 
    tipg_reg &= -1024;
    
#line 1409 
    if ((unsigned int)duplex == 1U && (unsigned int)speed == 10U) {
      
#line 1410 
      tipg_reg |= 255;
      
#line 1412 
      emi_val = (unsigned short)0U;
    }
    else 
      
#line 1413 
      if ((hw->mac.type == (unsigned int)e1000_pch_spt && (unsigned int)duplex == 2U) && (unsigned int)speed != 1000U) {
        
#line 1415 
        tipg_reg |= 12;
        
#line 1416 
        emi_val = (unsigned short)1U;
      }
      else {
        
#line 1420 
        tipg_reg |= 8;
        
#line 1421 
        emi_val = (unsigned short)1U;
      }
    
#line 1424 
    __ew32(hw,1040UL,(unsigned int)tipg_reg);
    
#line 1426 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    
#line 1427 
    if (ret_val != 0) {
      
#line 1428 
      __retres = ret_val;
      
#line 1428 
      goto return_label;
    }
    else ;
    
#line 1430 
    if (hw->mac.type == (unsigned int)e1000_pch2lan) 
#line 1431 
                                                     emi_addr = (unsigned short)13330U; else 
                                                                    
#line 1433 
                                                                    emi_addr = (unsigned short)45580U;
    
#line 1434 
    ret_val = e1000_write_emi_reg_locked(hw,(unsigned short)((int)emi_addr),(unsigned short)((int)emi_val));
    
#line 1436 
    (*(hw->phy.ops.release))(hw);
    
#line 1438 
    if (ret_val != 0) {
      
#line 1439 
      __retres = ret_val;
      
#line 1439 
      goto return_label;
    }
    else ;
    
#line 1441 
    if (hw->mac.type == (unsigned int)e1000_pch_spt) {
      u16 data;
      u16 ptr_gap;
      
#line 1445 
      if ((unsigned int)speed == 1000U) {
        
#line 1446 
        ret_val = (*(hw->phy.ops.acquire))(hw);
        
#line 1447 
        if (ret_val != 0) {
          
#line 1448 
          __retres = ret_val;
          
#line 1448 
          goto return_label;
        }
        else ;
        
#line 1450 
        ret_val = e1e_rphy_locked(hw,24852U,& data);
        
#line 1453 
        if (ret_val != 0) {
          
#line 1454 
          (*(hw->phy.ops.release))(hw);
          
#line 1455 
          __retres = ret_val;
          
#line 1455 
          goto return_label;
        }
        else ;
        
#line 1458 
        ptr_gap = (unsigned short)((unsigned int)((unsigned short)((int)data >> 2)) & 1023U);
        
#line 1459 
        if ((unsigned int)ptr_gap <= 23U) {
          
#line 1460 
          data = (unsigned short)((unsigned int)data & 61443U);
          
#line 1461 
          data = (unsigned short)((unsigned int)data | 96U);
          
#line 1462 
          ret_val = e1e_wphy_locked(hw,24852U,(unsigned short)((int)data));
        }
        else ;
        
#line 1467 
        (*(hw->phy.ops.release))(hw);
        
#line 1468 
        if (ret_val != 0) {
          
#line 1469 
          __retres = ret_val;
          
#line 1469 
          goto return_label;
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 1479 
  if ((unsigned int)hw->mac.type + 4294967285U <= 1U) {
    u32 mac_reg;
    
#line 1482 
    mac_reg = __er32(hw,36UL);
    
#line 1483 
    mac_reg &= 4294967288U;
    
#line 1484 
    mac_reg |= 7U;
    
#line 1485 
    __ew32(hw,36UL,mac_reg);
  }
  else ;
  
#line 1489 
  if (((unsigned int)((hw->adapter)->pdev)->device + 60071U <= 1U || (unsigned int)((hw->adapter)->pdev)->device == 5538U) || (unsigned int)((hw->adapter)->pdev)->device == 5539U) {
    
#line 1493 
    ret_val = e1000_k1_workaround_lpt_lp(hw,(_Bool)((bool)((int)link) != 0));
    
#line 1494 
    if (ret_val != 0) {
      
#line 1495 
      __retres = ret_val;
      
#line 1495 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1497 
  if ((unsigned int)hw->mac.type + 4294967285U <= 1U) {
    
#line 1502 
    ret_val = e1000_platform_pm_pch_lpt(hw,(_Bool)((bool)((int)link) != 0));
    
#line 1503 
    if (ret_val != 0) {
      
#line 1504 
      __retres = ret_val;
      
#line 1504 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1508 
  hw->dev_spec.ich8lan.eee_lp_ability = (unsigned short)0U;
  
#line 1511 
  if (hw->mac.type == (unsigned int)e1000_pch_spt) {
    
#line 1512 
    u32 pcieanacfg = __er32(hw,3864UL);
    
#line 1513 
    u32 fextnvm6 = __er32(hw,16UL);
    
#line 1515 
    if (pcieanacfg < (u32)0) 
#line 1516 
                             fextnvm6 |= 2147483648U; else 
#line 1518 
                                                           fextnvm6 &= 2147483647U;
    
#line 1520 
    __ew32(hw,16UL,fextnvm6);
  }
  else ;
  
#line 1523 
  if (! link) {
    
#line 1524 
    __retres = 0;
    
#line 1524 
    goto return_label;
  }
  else ;
  
#line 1526 
  mac->get_link_status = (_Bool)0;
  
#line 1528 
  switch ((unsigned int)hw->mac.type) {
    u32 tmp_2;
    case (unsigned int)10: 
#line 1529 
    ;
    
#line 1530 
    ret_val = e1000_k1_workaround_lv(hw);
    
#line 1531 
    if (ret_val != 0) {
      
#line 1532 
      __retres = ret_val;
      
#line 1532 
      goto return_label;
    }
    else ;
    case (unsigned int)9: 
#line 1534 
    ;
    
#line 1535 
    if (hw->phy.type == (unsigned int)e1000_phy_82578) {
      
#line 1536 
      ret_val = e1000_link_stall_workaround_hv(hw);
      
#line 1537 
      if (ret_val != 0) {
        
#line 1538 
        __retres = ret_val;
        
#line 1538 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 1546 
    e1e_rphy(hw,24656U,& phy_reg);
    
#line 1547 
    phy_reg = (unsigned short)((unsigned int)phy_reg & 36863U);
    
#line 1549 
    tmp_2 = __er32(hw,8UL);
    
#line 1549 
    if ((tmp_2 & 1U) != 1U) 
#line 1550 
                            phy_reg = (unsigned short)((unsigned int)phy_reg | 4096U); else ;
    
#line 1552 
    e1e_wphy(hw,24656U,(unsigned short)((int)phy_reg));
    
#line 1553 
    goto ldv_47907;
    default: 
#line 1554 
    ;
    
#line 1555 
    goto ldv_47907;
  }
  ldv_47907: 
#line 1561 
  ;
  
#line 1561 
  e1000e_check_downshift(hw);
  
#line 1564 
  if (hw->phy.type > (unsigned int)e1000_phy_82579) {
    
#line 1565 
    ret_val = e1000_set_eee_pchlan(hw);
    
#line 1566 
    if (ret_val != 0) {
      
#line 1567 
      __retres = ret_val;
      
#line 1567 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1573 
  if (! mac->autoneg) {
    
#line 1574 
    __retres = -3;
    
#line 1574 
    goto return_label;
  }
  else ;
  
#line 1580 
  (*(mac->ops.config_collision_dist))(hw);
  
#line 1587 
  ret_val = e1000e_config_fc_after_link_up(hw);
  
#line 1588 
  if (ret_val != 0) {
    
#line 1589 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_check_for_copper_link_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Error configuring flow control\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1589U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1589 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1589 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Error configuring flow control\n"); else ;
  }
  else ;
  
#line 1591 
  __retres = ret_val;
  return_label: 
#line 1591 
                return __retres;
}


#line 1594  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_get_variants_ich8lan(struct e1000_adapter *adapter)
{
  s32 __retres;
  s32 rc;
  
#line 1596 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1599 
  rc = e1000_init_mac_params_ich8lan(hw);
  
#line 1600 
  if (rc != 0) {
    
#line 1601 
    __retres = rc;
    
#line 1601 
    goto return_label;
  }
  else ;
  
#line 1603 
  rc = e1000_init_nvm_params_ich8lan(hw);
  
#line 1604 
  if (rc != 0) {
    
#line 1605 
    __retres = rc;
    
#line 1605 
    goto return_label;
  }
  else ;
  
#line 1607 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)6: 
#line 1608 
    ;
    case (unsigned int)7: 
#line 1609 
    ;
    case (unsigned int)8: 
#line 1610 
    ;
    
#line 1611 
    rc = e1000_init_phy_params_ich8lan(hw);
    
#line 1612 
    goto ldv_47919;
    case (unsigned int)9: 
#line 1613 
    ;
    case (unsigned int)10: 
#line 1614 
    ;
    case (unsigned int)11: 
#line 1615 
    ;
    case (unsigned int)12: 
#line 1616 
    ;
    
#line 1617 
    rc = e1000_init_phy_params_pchlan(hw);
    
#line 1618 
    goto ldv_47919;
    default: 
#line 1619 
    ;
    
#line 1620 
    goto ldv_47919;
  }
  ldv_47919: 
#line 1622 
  ;
  
#line 1622 
  if (rc != 0) {
    
#line 1623 
    __retres = rc;
    
#line 1623 
    goto return_label;
  }
  else ;
  
#line 1628 
  if (adapter->hw.phy.type == (unsigned int)e1000_phy_ife) 
#line 1628 
                                                           goto _LOR;
  else 
    
#line 1628 
    if (adapter->hw.mac.type > (unsigned int)e1000_pchlan) {
      u32 tmp;
      
#line 1629 
      tmp = __er32(hw,24UL);
      
#line 1629 
      if ((tmp & 4096U) == 0U) {
        _LOR: {
                
#line 1631 
                adapter->flags &= 4294967167U;
                
#line 1632 
                adapter->max_hw_frame_size = 1522U;
                
#line 1634 
                hw->mac.ops.blink_led = (s32 (*)(struct e1000_hw *))0;
              }
      }
      else ;
    }
    else ;
  
#line 1637 
  if (adapter->hw.mac.type == (unsigned int)e1000_ich8lan && adapter->hw.phy.type != (unsigned int)e1000_phy_ife) 
    
#line 1639 
    adapter->flags |= 33554432U; else ;
  
#line 1642 
  if (adapter->hw.mac.type == (unsigned int)e1000_pch2lan) {
    u32 tmp_0;
    
#line 1642 
    tmp_0 = __er32(hw,23380UL);
    
#line 1642 
    if ((tmp_0 & 32768U) != 0U) 
#line 1644 
                                adapter->flags2 |= 2048U; else ;
  }
  else ;
  
#line 1646 
  __retres = 0;
  return_label: 
#line 1646 
                return __retres;
}


#line 1649  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static struct mutex nvm_mutex = {.count = {.counter = 1}, .wait_lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "nvm_mutex.wait_lock", .cpu = 0, .ip = 0UL}}}}, .wait_list = {.next = & nvm_mutex.wait_list, .prev = & nvm_mutex.wait_list}, .owner = (struct task_struct *)0, .magic = (void *)(& nvm_mutex), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "nvm_mutex", .cpu = 0, .ip = 0UL}};

#line 1657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_acquire_nvm_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  
#line 1659 
  ldv_mutex_lock_72(& nvm_mutex);
  
#line 1661 
  __retres = 0;
  
#line 1661 
  return __retres;
}


#line 1670  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_release_nvm_ich8lan(struct e1000_hw *hw)
{
  
#line 1672 
  ldv_mutex_unlock_73(& nvm_mutex);
  
#line 1673 
  return;
}


#line 1682  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_acquire_swflag_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  u32 extcnf_ctrl;
  int tmp;
  
#line 1684 
  u32 timeout = 100U;
  
#line 1685 
  s32 ret_val = 0;
  
#line 1687 
  tmp = test_and_set_bit(2L,(unsigned long volatile *)(& (hw->adapter)->state));
  
#line 1687 
  if (tmp != 0) {
    {
      
#line 1689 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_acquire_swflag_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "contention for Phy access\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1689U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1689 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1689 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"contention for Phy access\n"); else ;
    }
    
#line 1690 
    __retres = -2;
    
#line 1690 
    goto return_label;
  }
  else ;
  
#line 1693 
  goto ldv_47947;
  ldv_47946: 
#line 1694 
  ;
  
#line 1694 
  extcnf_ctrl = __er32(hw,3840UL);
  
#line 1695 
  if ((extcnf_ctrl & 32U) == 0U) 
#line 1696 
                                 goto ldv_47941; else ;
  
#line 1698 
  if (1) 
#line 1698 
         __const_udelay(4295000UL);
  else {
    
#line 1698 
    unsigned long __ms = 1UL;
    {
      unsigned long tmp_0;
      
#line 1698 
      goto ldv_47944;
      ldv_47943: 
#line 1699 
      ;
      
#line 1698 
      __const_udelay(4295000UL);
      ldv_47944: 
#line 1700 
      ;
      
#line 1698 
      tmp_0 = __ms;
      
#line 1698 
      __ms -= 1UL;
      
#line 1698 
      ;
      
#line 1698 
      if (tmp_0 != 0UL) 
#line 1700 
                        goto ldv_47943; else 
#line 1703 
                                             goto ldv_47945;
      ldv_47945: 
#line 1704 
      ;
    }
  }
  
#line 1699 
  timeout -= 1U;
  ldv_47947: 
#line 1700 
  ;
  
#line 1693 
  if (timeout != 0U) 
#line 1695 
                     goto ldv_47946; else 
#line 1698 
                                          goto ldv_47941;
  ldv_47941: 
#line 1699 
  ;
  
#line 1702 
  if (timeout == 0U) {
    {
      
#line 1703 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_acquire_swflag_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "SW has already locked the resource.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1703U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1703 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1703 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"SW has already locked the resource.\n"); else ;
    }
    
#line 1704 
    ret_val = -3;
    
#line 1705 
    goto out;
  }
  else ;
  
#line 1708 
  timeout = 1000U;
  
#line 1710 
  extcnf_ctrl |= 32U;
  
#line 1711 
  __ew32(hw,3840UL,extcnf_ctrl);
  
#line 1713 
  goto ldv_47956;
  ldv_47955: 
#line 1714 
  ;
  
#line 1714 
  extcnf_ctrl = __er32(hw,3840UL);
  
#line 1715 
  if ((extcnf_ctrl & 32U) != 0U) 
#line 1716 
                                 goto ldv_47950; else ;
  
#line 1718 
  if (1) 
#line 1718 
         __const_udelay(4295000UL);
  else {
    
#line 1718 
    unsigned long __ms_0 = 1UL;
    {
      unsigned long tmp_1;
      
#line 1718 
      goto ldv_47953;
      ldv_47952: 
#line 1719 
      ;
      
#line 1718 
      __const_udelay(4295000UL);
      ldv_47953: 
#line 1720 
      ;
      
#line 1718 
      tmp_1 = __ms_0;
      
#line 1718 
      __ms_0 -= 1UL;
      
#line 1718 
      ;
      
#line 1718 
      if (tmp_1 != 0UL) 
#line 1720 
                        goto ldv_47952; else 
#line 1723 
                                             goto ldv_47954;
      ldv_47954: 
#line 1724 
      ;
    }
  }
  
#line 1719 
  timeout -= 1U;
  ldv_47956: 
#line 1720 
  ;
  
#line 1713 
  if (timeout != 0U) 
#line 1715 
                     goto ldv_47955; else 
#line 1718 
                                          goto ldv_47950;
  ldv_47950: 
#line 1719 
  ;
  
#line 1722 
  if (timeout == 0U) {
    {
      
#line 1723 
      struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_acquire_swflag_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Failed to acquire the semaphore, FW or HW has it: FWSM=0x%8.8x EXTCNF_CTRL=0x%8.8x)\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1724U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1723 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) {
        u32 tmp_2;
        
#line 1723 
        ;
        
#line 1723 
        tmp_2 = __er32(hw,23380UL);
        
#line 1723 
        ;
        
#line 1723 
        __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Failed to acquire the semaphore, FW or HW has it: FWSM=0x%8.8x EXTCNF_CTRL=0x%8.8x)\n",tmp_2,extcnf_ctrl);
      }
      else ;
    }
    
#line 1725 
    extcnf_ctrl &= 4294967263U;
    
#line 1726 
    __ew32(hw,3840UL,extcnf_ctrl);
    
#line 1727 
    ret_val = -3;
    
#line 1728 
    goto out;
  }
  else ;
  out: 
#line 1731 
  ;
  
#line 1732 
  if (ret_val != 0) 
#line 1733 
                    clear_bit(2L,(unsigned long volatile *)(& (hw->adapter)->state)); else ;
  
#line 1735 
  __retres = ret_val;
  return_label: 
#line 1735 
                return __retres;
}


#line 1745  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_release_swflag_ich8lan(struct e1000_hw *hw)
{
  u32 extcnf_ctrl;
  
#line 1749 
  extcnf_ctrl = __er32(hw,3840UL);
  
#line 1751 
  if ((extcnf_ctrl & 32U) != 0U) {
    
#line 1752 
    extcnf_ctrl &= 4294967263U;
    
#line 1753 
    __ew32(hw,3840UL,extcnf_ctrl);
  }
  else {
    
#line 1755 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_release_swflag_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Semaphore unexpectedly released by sw/fw/hw\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1755U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1755 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1755 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Semaphore unexpectedly released by sw/fw/hw\n"); else ;
  }
  
#line 1758 
  clear_bit(2L,(unsigned long volatile *)(& (hw->adapter)->state));
  
#line 1759 
  return;
}


#line 1769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static bool e1000_check_mng_mode_ich8lan(struct e1000_hw *hw)
{
  bool __retres;
  u32 fwsm;
  
#line 1773 
  fwsm = __er32(hw,23380UL);
  
#line 1774 
  __retres = (_Bool)(((fwsm & 32768U) != 0U && (fwsm & 14U) == 4U) != 0);
  
#line 1774 
  return __retres;
}


#line 1787  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static bool e1000_check_mng_mode_pchlan(struct e1000_hw *hw)
{
  bool __retres;
  u32 fwsm;
  
#line 1791 
  fwsm = __er32(hw,23380UL);
  
#line 1792 
  __retres = (_Bool)(((fwsm & 32768U) != 0U && (fwsm & 4U) != 0U) != 0);
  
#line 1792 
  return __retres;
}


#line 1807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static int e1000_rar_set_pch2lan(struct e1000_hw *hw, u8 *addr, u32 index)
{
  int __retres;
  u32 rar_low;
  u32 rar_high;
  
#line 1814 
  rar_low = (((unsigned int)*addr | ((unsigned int)*(addr + 1U) << 8)) | ((unsigned int)*(addr + 2U) << 16)) | ((unsigned int)*(addr + 3U) << 24);
  
#line 1818 
  rar_high = (unsigned int)*(addr + 4U) | ((unsigned int)*(addr + 5U) << 8);
  
#line 1821 
  if (rar_low != 0U || rar_high != 0U) 
#line 1822 
                                       rar_high |= 2147483648U; else ;
  
#line 1824 
  if (index == 0U) {
    u32 tmp;
    u32 tmp_0;
    
#line 1825 
    ;
    
#line 1825 
    if (index <= 15U) 
#line 1825 
                      tmp = (index + 2688U) * 8U; else 
#line 1825 
                                                       tmp = (index + 2700U) * 8U;
    
#line 1825 
    ;
    
#line 1825 
    __ew32(hw,(unsigned long)tmp,rar_low);
    
#line 1826 
    __er32(hw,8UL);
    
#line 1827 
    ;
    
#line 1827 
    if (index <= 15U) 
#line 1827 
                      tmp_0 = index * 8U + 21508U; else 
#line 1827 
                                                        tmp_0 = (index + 536870896U) * 8U + 21732U;
    
#line 1827 
    ;
    
#line 1827 
    __ew32(hw,(unsigned long)tmp_0,rar_high);
    
#line 1828 
    __er32(hw,8UL);
    
#line 1829 
    __retres = 0;
    
#line 1829 
    goto return_label;
  }
  else ;
  
#line 1835 
  if ((unsigned int)hw->mac.rar_entry_count > index) {
    s32 ret_val;
    u32 tmp_1;
    
#line 1838 
    ret_val = e1000_acquire_swflag_ich8lan(hw);
    
#line 1839 
    if (ret_val != 0) 
#line 1840 
                      goto out; else ;
    
#line 1842 
    __ew32(hw,(unsigned long)((index + 2694U) * 8U),rar_low);
    
#line 1843 
    __er32(hw,8UL);
    
#line 1844 
    __ew32(hw,(unsigned long)((index + 536870911U) * 8U + 21564U),rar_high);
    
#line 1845 
    __er32(hw,8UL);
    
#line 1847 
    e1000_release_swflag_ich8lan(hw);
    
#line 1850 
    tmp_1 = __er32(hw,(unsigned long)((index + 2694U) * 8U));
    
#line 1850 
    ;
    
#line 1850 
    if (tmp_1 == rar_low) {
      u32 tmp_2;
      
#line 1850 
      tmp_2 = __er32(hw,(unsigned long)((index + 536870911U) * 8U + 21564U));
      
#line 1850 
      ;
      
#line 1850 
      if (tmp_2 == rar_high) {
        
#line 1852 
        __retres = 0;
        
#line 1852 
        goto return_label;
      }
      else ;
    }
    else ;
    {
      
#line 1854 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_rar_set_pch2lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "SHRA[%d] might be locked by ME - FWSM=0x%8.8x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1855U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1854 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
        u32 tmp_3;
        
#line 1854 
        tmp_3 = __er32(hw,23380UL);
        
#line 1854 
        ;
        
#line 1854 
        ;
        
#line 1854 
        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"SHRA[%d] might be locked by ME - FWSM=0x%8.8x\n",index + 4294967295U,tmp_3);
      }
      else ;
    }
  }
  else ;
  out: 
#line 1858 
  ;
  {
    
#line 1859 
    struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_rar_set_pch2lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Failed to write receive address at index %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1859U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1859 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1859 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Failed to write receive address at index %d\n",index); else ;
  }
  
#line 1860 
  __retres = -3;
  return_label: 
#line 1860 
                return __retres;
}


#line 1873  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static u32 e1000_rar_get_count_pch_lpt(struct e1000_hw *hw)
{
  u32 wlock_mac;
  u32 num_entries;
  u32 tmp;
  
#line 1878 
  tmp = __er32(hw,23380UL);
  
#line 1878 
  wlock_mac = tmp & 896U;
  
#line 1879 
  wlock_mac >>= 7;
  
#line 1881 
  switch (wlock_mac) {
    case (u32)0: 
#line 1882 
    ;
    
#line 1884 
    num_entries = (unsigned int)hw->mac.rar_entry_count;
    
#line 1885 
    goto ldv_47990;
    case (u32)1: 
#line 1886 
    ;
    
#line 1888 
    num_entries = 1U;
    
#line 1889 
    goto ldv_47990;
    default: 
#line 1890 
    ;
    
#line 1892 
    num_entries = wlock_mac + 1U;
    
#line 1893 
    goto ldv_47990;
  }
  ldv_47990: 
#line 1896 
  ;
  
#line 1896 
  return num_entries;
}


#line 1910  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static int e1000_rar_set_pch_lpt(struct e1000_hw *hw, u8 *addr, u32 index)
{
  int __retres;
  u32 rar_low;
  u32 rar_high;
  u32 wlock_mac;
  
#line 1918 
  rar_low = (((unsigned int)*addr | ((unsigned int)*(addr + 1U) << 8)) | ((unsigned int)*(addr + 2U) << 16)) | ((unsigned int)*(addr + 3U) << 24);
  
#line 1921 
  rar_high = (unsigned int)*(addr + 4U) | ((unsigned int)*(addr + 5U) << 8);
  
#line 1924 
  if (rar_low != 0U || rar_high != 0U) 
#line 1925 
                                       rar_high |= 2147483648U; else ;
  
#line 1927 
  if (index == 0U) {
    u32 tmp;
    u32 tmp_0;
    
#line 1928 
    ;
    
#line 1928 
    if (index <= 15U) 
#line 1928 
                      tmp = (index + 2688U) * 8U; else 
#line 1928 
                                                       tmp = (index + 2700U) * 8U;
    
#line 1928 
    ;
    
#line 1928 
    __ew32(hw,(unsigned long)tmp,rar_low);
    
#line 1929 
    __er32(hw,8UL);
    
#line 1930 
    ;
    
#line 1930 
    if (index <= 15U) 
#line 1930 
                      tmp_0 = index * 8U + 21508U; else 
#line 1930 
                                                        tmp_0 = (index + 536870896U) * 8U + 21732U;
    
#line 1930 
    ;
    
#line 1930 
    __ew32(hw,(unsigned long)tmp_0,rar_high);
    
#line 1931 
    __er32(hw,8UL);
    
#line 1932 
    __retres = 0;
    
#line 1932 
    goto return_label;
  }
  else ;
  
#line 1938 
  if ((unsigned int)hw->mac.rar_entry_count > index) {
    u32 tmp_1;
    
#line 1939 
    tmp_1 = __er32(hw,23380UL);
    
#line 1939 
    wlock_mac = tmp_1 & 896U;
    
#line 1940 
    wlock_mac >>= 7;
    
#line 1943 
    if (wlock_mac == 1U) 
#line 1944 
                         goto out; else ;
    
#line 1946 
    if (wlock_mac == 0U || index <= wlock_mac) {
      s32 ret_val;
      u32 tmp_2;
      
#line 1949 
      ret_val = e1000_acquire_swflag_ich8lan(hw);
      
#line 1951 
      if (ret_val != 0) 
#line 1952 
                        goto out; else ;
      
#line 1954 
      __ew32(hw,(unsigned long)((index + 2688U) * 8U),rar_low);
      
#line 1955 
      __er32(hw,8UL);
      
#line 1956 
      __ew32(hw,(unsigned long)((index + 536870911U) * 8U + 21516U),rar_high);
      
#line 1957 
      __er32(hw,8UL);
      
#line 1959 
      e1000_release_swflag_ich8lan(hw);
      
#line 1962 
      tmp_2 = __er32(hw,(unsigned long)((index + 2688U) * 8U));
      
#line 1962 
      ;
      
#line 1962 
      if (tmp_2 == rar_low) {
        u32 tmp_3;
        
#line 1962 
        tmp_3 = __er32(hw,(unsigned long)((index + 536870911U) * 8U + 21516U));
        
#line 1962 
        ;
        
#line 1962 
        if (tmp_3 == rar_high) {
          
#line 1964 
          __retres = 0;
          
#line 1964 
          goto return_label;
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else ;
  out: 
#line 1968 
  ;
  {
    
#line 1969 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_rar_set_pch_lpt", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Failed to write receive address at index %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1969U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1969 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1969 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Failed to write receive address at index %d\n",index); else ;
  }
  
#line 1970 
  __retres = -3;
  return_label: 
#line 1970 
                return __retres;
}


#line 1981  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_check_reset_block_ich8lan(struct e1000_hw *hw)
{
  u32 tmp;
  int tmp_1;
  
#line 1983 
  bool blocked = (_Bool)0;
  
#line 1984 
  int i = 0;
  
#line 1986 
  goto ldv_48011;
  ldv_48010: 
#line 1987 
  ;
  
#line 1988 
  usleep_range(10000UL,20000UL);
  ldv_48011: 
#line 1989 
  ;
  
#line 1986 
  tmp = __er32(hw,23380UL);
  
#line 1986 
  blocked = (_Bool)((tmp & 64U) == 0U);
  
#line 1986 
  if ((int)blocked != 0) {
    int tmp_0;
    
#line 1986 
    tmp_0 = i;
    
#line 1986 
    i += 1;
    
#line 1986 
    ;
    
#line 1986 
    if (tmp_0 <= 9) 
#line 1989 
                    goto ldv_48010; else 
#line 1992 
                                         goto ldv_48012;
  }
  else 
#line 1992 
       goto ldv_48012;
  ldv_48012: 
#line 1993 
  ;
  
#line 1989 
  if ((int)blocked != 0) 
#line 1989 
                         tmp_1 = 12; else 
#line 1989 
                                          tmp_1 = 0;
  
#line 1989 
  return tmp_1;
}


#line 1999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_write_smbus_addr(struct e1000_hw *hw)
{
  s32 __retres;
  u16 phy_data;
  s32 ret_val;
  s32 tmp_1;
  
#line 2002 
  u32 strap = __er32(hw,12UL);
  
#line 2003 
  u32 freq = (strap >> 12) & 3U;
  
#line 2007 
  strap &= 16646144U;
  
#line 2009 
  ret_val = e1000_read_phy_reg_hv_locked(hw,24602U,& phy_data);
  
#line 2010 
  if (ret_val != 0) {
    
#line 2011 
    __retres = ret_val;
    
#line 2011 
    goto return_label;
  }
  else ;
  
#line 2013 
  phy_data = (unsigned short)((unsigned int)phy_data & 65408U);
  
#line 2014 
  phy_data = (unsigned short)((int)((unsigned short)(strap >> 17)) | (int)phy_data);
  
#line 2015 
  phy_data = (unsigned short)((unsigned int)phy_data | 640U);
  
#line 2017 
  if (hw->phy.type == (unsigned int)e1000_phy_i217) {
    u32 tmp_0;
    
#line 2019 
    tmp_0 = freq;
    
#line 2019 
    freq -= 1U;
    
#line 2019 
    ;
    
#line 2019 
    if (tmp_0 != 0U) {
      
#line 2020 
      phy_data = (unsigned short)((unsigned int)phy_data & 61183U);
      
#line 2021 
      phy_data = (unsigned short)(((unsigned int)((int)((unsigned short)freq) << 8U) & 256U) | (unsigned int)phy_data);
      
#line 2023 
      phy_data = (unsigned short)(((unsigned int)((int)((unsigned short)freq) << 11U) & 4096U) | (unsigned int)phy_data);
    }
    else {
      
#line 2026 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_write_smbus_addr", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Unsupported SMB frequency in PHY\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2026U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2026 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2026 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Unsupported SMB frequency in PHY\n"); else ;
    }
  }
  else ;
  
#line 2030 
  tmp_1 = e1000_write_phy_reg_hv_locked(hw,24602U,(unsigned short)((int)phy_data));
  
#line 2030 
  __retres = tmp_1;
  return_label: 
#line 2030 
                return __retres;
}


#line 2040  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_sw_lcd_config_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  u32 i;
  u32 data;
  u32 cnf_size;
  u32 cnf_base_addr;
  u32 sw_cfg_mask;
  u16 word_addr;
  u16 reg_data;
  u16 reg_addr;
  
#line 2042 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 2044 
  s32 ret_val = 0;
  
#line 2045 
  u16 phy_page = (unsigned short)0U;
  
#line 2053 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)6: 
#line 2054 
    ;
    
#line 2055 
    if (phy->type != (unsigned int)e1000_phy_igp_3) {
      
#line 2056 
      __retres = ret_val;
      
#line 2056 
      goto return_label;
    }
    else ;
    
#line 2058 
    if ((unsigned int)((hw->adapter)->pdev)->device + 61366U <= 1U) {
      
#line 2060 
      sw_cfg_mask = 1U;
      
#line 2061 
      goto ldv_48037;
    }
    else ;
    case (unsigned int)9: 
#line 2064 
    ;
    case (unsigned int)10: 
#line 2065 
    ;
    case (unsigned int)11: 
#line 2066 
    ;
    case (unsigned int)12: 
#line 2067 
    ;
    
#line 2068 
    sw_cfg_mask = 134217728U;
    
#line 2069 
    goto ldv_48037;
    default: 
#line 2070 
    ;
    
#line 2071 
    __retres = ret_val;
    
#line 2071 
    goto return_label;
  }
  ldv_48037: 
#line 2074 
  ;
  
#line 2074 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 2075 
  if (ret_val != 0) {
    
#line 2076 
    __retres = ret_val;
    
#line 2076 
    goto return_label;
  }
  else ;
  
#line 2078 
  data = __er32(hw,40UL);
  
#line 2079 
  if ((data & sw_cfg_mask) == 0U) 
#line 2080 
                                  goto release; else ;
  
#line 2085 
  data = __er32(hw,3840UL);
  
#line 2086 
  if (hw->mac.type <= (unsigned int)e1000_pchlan && (data & 1U) != 0U) 
    
#line 2088 
    goto release; else ;
  
#line 2090 
  cnf_size = __er32(hw,3848UL);
  
#line 2091 
  cnf_size &= 16711680U;
  
#line 2092 
  cnf_size >>= 16;
  
#line 2093 
  if (cnf_size == 0U) 
#line 2094 
                      goto release; else ;
  
#line 2096 
  cnf_base_addr = data & 268369920U;
  
#line 2097 
  cnf_base_addr >>= 16;
  
#line 2099 
  if ((hw->mac.type == (unsigned int)e1000_pchlan && (data & 8U) == 0U) || hw->mac.type > (unsigned int)e1000_pchlan) {
    
#line 2107 
    ret_val = e1000_write_smbus_addr(hw);
    
#line 2108 
    if (ret_val != 0) 
#line 2109 
                      goto release; else ;
    
#line 2111 
    data = __er32(hw,3584UL);
    
#line 2112 
    ret_val = e1000_write_phy_reg_hv_locked(hw,24606U,(unsigned short)((int)((unsigned short)data)));
    
#line 2114 
    if (ret_val != 0) 
#line 2115 
                      goto release; else ;
  }
  else ;
  
#line 2121 
  word_addr = (unsigned short)((int)((unsigned short)cnf_base_addr) << 1U);
  
#line 2123 
  i = 0U;
  
#line 2123 
  goto ldv_48046;
  ldv_48045: 
#line 2124 
  ;
  
#line 2124 
  ret_val = e1000_read_nvm(hw,(unsigned short)((int)((unsigned int)((unsigned short)i) * 2U + (unsigned int)word_addr)),(unsigned short)1,& reg_data);
  
#line 2125 
  if (ret_val != 0) 
#line 2126 
                    goto release; else ;
  
#line 2128 
  ret_val = e1000_read_nvm(hw,(unsigned short)((int)(((unsigned int)((unsigned short)i) * 2U + (unsigned int)word_addr) + 1U)),(unsigned short)1,& reg_addr);
  
#line 2130 
  if (ret_val != 0) 
#line 2131 
                    goto release; else ;
  
#line 2134 
  if ((unsigned int)reg_addr == 31U) {
    
#line 2135 
    phy_page = reg_data;
    
#line 2136 
    goto ldv_48044;
  }
  else ;
  
#line 2139 
  reg_addr = (unsigned short)((unsigned int)reg_addr & 31U);
  
#line 2140 
  reg_addr = (unsigned short)((int)reg_addr | (int)phy_page);
  
#line 2142 
  ret_val = e1e_wphy_locked(hw,(unsigned int)reg_addr,(unsigned short)((int)reg_data));
  
#line 2143 
  if (ret_val != 0) 
#line 2144 
                    goto release; else ;
  ldv_48044: 
#line 2145 
  ;
  
#line 2123 
  i += 1U;
  ldv_48046: 
#line 2124 
  ;
  
#line 2123 
  if (i < cnf_size) 
#line 2125 
                    goto ldv_48045; else 
#line 2128 
                                         goto ldv_48047;
  ldv_48047: 
#line 2129 
  ;
  release: 
#line 2147 
  ;
  
#line 2148 
  (*(hw->phy.ops.release))(hw);
  
#line 2149 
  __retres = ret_val;
  return_label: 
#line 2149 
                return __retres;
}


#line 2162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_k1_gig_workaround_hv(struct e1000_hw *hw, bool link)
{
  s32 __retres;
  
#line 2164 
  s32 ret_val = 0;
  
#line 2165 
  u16 status_reg = (unsigned short)0U;
  
#line 2166 
  bool k1_enable = hw->dev_spec.ich8lan.nvm_k1_enabled;
  
#line 2168 
  if (hw->mac.type != (unsigned int)e1000_pchlan) {
    
#line 2169 
    __retres = 0;
    
#line 2169 
    goto return_label;
  }
  else ;
  
#line 2172 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 2173 
  if (ret_val != 0) {
    
#line 2174 
    __retres = ret_val;
    
#line 2174 
    goto return_label;
  }
  else ;
  
#line 2177 
  if ((int)link != 0) {
    
#line 2178 
    if (hw->phy.type == (unsigned int)e1000_phy_82578) {
      
#line 2179 
      ret_val = e1e_rphy_locked(hw,17U,& status_reg);
      
#line 2181 
      if (ret_val != 0) 
#line 2182 
                        goto release; else ;
      
#line 2184 
      status_reg = (unsigned short)((unsigned int)status_reg & 52224U);
      
#line 2188 
      if ((unsigned int)status_reg == 35840U) 
#line 2191 
                                              k1_enable = (_Bool)0; else ;
    }
    else ;
    
#line 2194 
    if (hw->phy.type == (unsigned int)e1000_phy_82577) {
      
#line 2195 
      ret_val = e1e_rphy_locked(hw,26U,& status_reg);
      
#line 2196 
      if (ret_val != 0) 
#line 2197 
                        goto release; else ;
      
#line 2199 
      status_reg = (unsigned short)((unsigned int)status_reg & 4928U);
      
#line 2203 
      if ((unsigned int)status_reg == 4672U) 
#line 2206 
                                             k1_enable = (_Bool)0; else ;
    }
    else ;
    
#line 2210 
    ret_val = e1e_wphy_locked(hw,24659U,(unsigned short)256);
    
#line 2211 
    if (ret_val != 0) 
#line 2212 
                      goto release; else ;
  }
  else {
    
#line 2216 
    ret_val = e1e_wphy_locked(hw,24659U,(unsigned short)16640);
    
#line 2217 
    if (ret_val != 0) 
#line 2218 
                      goto release; else ;
  }
  
#line 2221 
  ret_val = e1000_configure_k1_ich8lan(hw,(_Bool)((bool)((int)k1_enable) != 0));
  release: 
#line 2223 
  ;
  
#line 2224 
  (*(hw->phy.ops.release))(hw);
  
#line 2226 
  __retres = ret_val;
  return_label: 
#line 2226 
                return __retres;
}


#line 2239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_configure_k1_ich8lan(struct e1000_hw *hw, bool k1_enable)
{
  s32 __retres;
  s32 ret_val;
  
#line 2242 
  u32 ctrl_reg = 0U;
  
#line 2243 
  u32 ctrl_ext = 0U;
  
#line 2244 
  u32 reg = 0U;
  
#line 2245 
  u16 kmrn_reg = (unsigned short)0U;
  
#line 2247 
  ret_val = e1000e_read_kmrn_reg_locked(hw,7U,& kmrn_reg);
  
#line 2249 
  if (ret_val != 0) {
    
#line 2250 
    __retres = ret_val;
    
#line 2250 
    goto return_label;
  }
  else ;
  
#line 2252 
  if ((int)k1_enable != 0) 
#line 2253 
                           kmrn_reg = (unsigned short)((unsigned int)kmrn_reg | 2U); else 
                                                                    
#line 2255 
                                                                    kmrn_reg = (unsigned short)((unsigned int)kmrn_reg & 65533U);
  
#line 2257 
  ret_val = e1000e_write_kmrn_reg_locked(hw,7U,(unsigned short)((int)kmrn_reg));
  
#line 2259 
  if (ret_val != 0) {
    
#line 2260 
    __retres = ret_val;
    
#line 2260 
    goto return_label;
  }
  else ;
  
#line 2262 
  usleep_range(20UL,40UL);
  
#line 2263 
  ctrl_ext = __er32(hw,24UL);
  
#line 2264 
  ctrl_reg = __er32(hw,0UL);
  
#line 2266 
  reg = ctrl_reg & 4294966527U;
  
#line 2267 
  reg |= 2048U;
  
#line 2268 
  __ew32(hw,0UL,reg);
  
#line 2270 
  __ew32(hw,24UL,ctrl_ext | 32768U);
  
#line 2271 
  __er32(hw,8UL);
  
#line 2272 
  usleep_range(20UL,40UL);
  
#line 2273 
  __ew32(hw,0UL,ctrl_reg);
  
#line 2274 
  __ew32(hw,24UL,ctrl_ext);
  
#line 2275 
  __er32(hw,8UL);
  
#line 2276 
  usleep_range(20UL,40UL);
  
#line 2278 
  __retres = 0;
  return_label: 
#line 2278 
                return __retres;
}


#line 2290  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_oem_bits_config_ich8lan(struct e1000_hw *hw, bool d0_state)
{
  s32 __retres;
  u32 mac_reg;
  u16 oem_reg;
  
#line 2292 
  s32 ret_val = 0;
  
#line 2296 
  if (hw->mac.type <= (unsigned int)e1000_ich10lan) {
    
#line 2297 
    __retres = ret_val;
    
#line 2297 
    goto return_label;
  }
  else ;
  
#line 2299 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 2300 
  if (ret_val != 0) {
    
#line 2301 
    __retres = ret_val;
    
#line 2301 
    goto return_label;
  }
  else ;
  
#line 2303 
  if (hw->mac.type == (unsigned int)e1000_pchlan) {
    
#line 2304 
    mac_reg = __er32(hw,3840UL);
    
#line 2305 
    if ((mac_reg & 8U) != 0U) 
#line 2306 
                              goto release; else ;
  }
  else ;
  
#line 2309 
  mac_reg = __er32(hw,40UL);
  
#line 2310 
  if ((mac_reg & 134217728U) == 0U) 
#line 2311 
                                    goto release; else ;
  
#line 2313 
  mac_reg = __er32(hw,3856UL);
  
#line 2315 
  ret_val = e1e_rphy_locked(hw,24601U,& oem_reg);
  
#line 2316 
  if (ret_val != 0) 
#line 2317 
                    goto release; else ;
  
#line 2319 
  oem_reg = (unsigned short)((unsigned int)oem_reg & 65467U);
  
#line 2321 
  if ((int)d0_state != 0) {
    
#line 2322 
    if ((mac_reg & 64U) != 0U) 
#line 2323 
                               oem_reg = (unsigned short)((unsigned int)oem_reg | 64U); else ;
    
#line 2325 
    if ((mac_reg & 2U) != 0U) 
#line 2326 
                              oem_reg = (unsigned short)((unsigned int)oem_reg | 4U); else ;
  }
  else {
    
#line 2328 
    if ((mac_reg & 72U) != 0U) 
#line 2330 
                               oem_reg = (unsigned short)((unsigned int)oem_reg | 64U); else ;
    
#line 2332 
    if ((mac_reg & 6U) != 0U) 
#line 2334 
                              oem_reg = (unsigned short)((unsigned int)oem_reg | 4U); else ;
  }
  
#line 2338 
  if ((int)d0_state != 0 || hw->mac.type != (unsigned int)e1000_pchlan) {
    s32 tmp;
    
#line 2338 
    tmp = (*(hw->phy.ops.check_reset_block))(hw);
    
#line 2338 
    if (tmp == 0) 
#line 2340 
                  oem_reg = (unsigned short)((unsigned int)oem_reg | 1024U); else ;
  }
  else ;
  
#line 2342 
  ret_val = e1e_wphy_locked(hw,24601U,(unsigned short)((int)oem_reg));
  release: 
#line 2344 
  ;
  
#line 2345 
  (*(hw->phy.ops.release))(hw);
  
#line 2347 
  __retres = ret_val;
  return_label: 
#line 2347 
                return __retres;
}


#line 2354  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_set_mdio_slow_mode_hv(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 data;
  
#line 2359 
  ret_val = e1e_rphy(hw,24624U,& data);
  
#line 2360 
  if (ret_val != 0) {
    
#line 2361 
    __retres = ret_val;
    
#line 2361 
    goto return_label;
  }
  else ;
  
#line 2363 
  data = (unsigned short)((unsigned int)data | 1024U);
  
#line 2365 
  ret_val = e1e_wphy(hw,24624U,(unsigned short)((int)data));
  
#line 2367 
  __retres = ret_val;
  return_label: 
#line 2367 
                return __retres;
}


#line 2374  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_hv_phy_workarounds_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  u16 phy_data;
  
#line 2376 
  s32 ret_val = 0;
  
#line 2379 
  if (hw->mac.type != (unsigned int)e1000_pchlan) {
    
#line 2380 
    __retres = 0;
    
#line 2380 
    goto return_label;
  }
  else ;
  
#line 2383 
  if (hw->phy.type == (unsigned int)e1000_phy_82577) {
    
#line 2384 
    ret_val = e1000_set_mdio_slow_mode_hv(hw);
    
#line 2385 
    if (ret_val != 0) {
      
#line 2386 
      __retres = ret_val;
      
#line 2386 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2389 
  if ((hw->phy.type == (unsigned int)e1000_phy_82577 && hw->phy.revision + 4294967295U <= 1U) || (hw->phy.type == (unsigned int)e1000_phy_82578 && hw->phy.revision == 1U)) {
    
#line 2393 
    ret_val = e1e_wphy(hw,24633U,(unsigned short)17457);
    
#line 2394 
    if (ret_val != 0) {
      
#line 2395 
      __retres = ret_val;
      
#line 2395 
      goto return_label;
    }
    else ;
    
#line 2398 
    ret_val = e1e_wphy(hw,24656U,(unsigned short)41476);
    
#line 2399 
    if (ret_val != 0) {
      
#line 2400 
      __retres = ret_val;
      
#line 2400 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2403 
  if (hw->phy.type == (unsigned int)e1000_phy_82578) {
    
#line 2407 
    if (hw->phy.revision <= 1U) {
      
#line 2408 
      e1000e_phy_sw_reset(hw);
      
#line 2409 
      ret_val = e1e_wphy(hw,0U,(unsigned short)12608);
    }
    else ;
  }
  else ;
  
#line 2414 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 2415 
  if (ret_val != 0) {
    
#line 2416 
    __retres = ret_val;
    
#line 2416 
    goto return_label;
  }
  else ;
  
#line 2418 
  hw->phy.addr = 1U;
  
#line 2419 
  ret_val = e1000e_write_phy_reg_mdic(hw,31U,(unsigned short)0);
  
#line 2420 
  (*(hw->phy.ops.release))(hw);
  
#line 2421 
  if (ret_val != 0) {
    
#line 2422 
    __retres = ret_val;
    
#line 2422 
    goto return_label;
  }
  else ;
  
#line 2427 
  ret_val = e1000_k1_gig_workaround_hv(hw,(_Bool)1);
  
#line 2428 
  if (ret_val != 0) {
    
#line 2429 
    __retres = ret_val;
    
#line 2429 
    goto return_label;
  }
  else ;
  
#line 2432 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 2433 
  if (ret_val != 0) {
    
#line 2434 
    __retres = ret_val;
    
#line 2434 
    goto return_label;
  }
  else ;
  
#line 2435 
  ret_val = e1e_rphy_locked(hw,24625U,& phy_data);
  
#line 2436 
  if (ret_val != 0) 
#line 2437 
                    goto release; else ;
  
#line 2438 
  ret_val = e1e_wphy_locked(hw,24625U,(unsigned short)((int)phy_data & 255));
  
#line 2439 
  if (ret_val != 0) 
#line 2440 
                    goto release; else ;
  
#line 2443 
  ret_val = e1000_write_emi_reg_locked(hw,(unsigned short)2183,(unsigned short)52);
  release: 
#line 2444 
  ;
  
#line 2445 
  (*(hw->phy.ops.release))(hw);
  
#line 2447 
  __retres = ret_val;
  return_label: 
#line 2447 
                return __retres;
}


#line 2454  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000_copy_rx_addrs_to_phy_ich8lan(struct e1000_hw *hw)
{
  u32 mac_reg;
  u16 i;
  s32 ret_val;
  int tmp;
  int tmp_0;
  
#line 2457 
  u16 phy_reg = (unsigned short)0U;
  
#line 2460 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 2461 
  if (ret_val != 0) 
#line 2462 
                    goto return_label; else ;
  
#line 2463 
  ret_val = e1000_enable_phy_wakeup_reg_access_bm(hw,& phy_reg);
  
#line 2464 
  if (ret_val != 0) 
#line 2465 
                    goto release; else ;
  
#line 2468 
  i = (unsigned short)0U;
  
#line 2468 
  goto ldv_48093;
  ldv_48092: 
#line 2469 
  ;
  
#line 2469 
  if ((unsigned int)i <= 15U) 
#line 2469 
                              tmp = ((int)i + 2688) * 8; else 
#line 2469 
                                                              tmp = ((int)i + 2700) * 8;
  
#line 2469 
  ;
  
#line 2469 
  mac_reg = __er32(hw,(unsigned long)tmp);
  
#line 2470 
  (*(hw->phy.ops.write_reg_page))(hw,(unsigned int)((((((int)i << 2) + 16) & 31) | 25600) | (((((int)i << 2) + 16) << 16) & -2097152)),(unsigned short)((int)((unsigned short)mac_reg)));
  
#line 2472 
  (*(hw->phy.ops.write_reg_page))(hw,(unsigned int)((((((int)i << 2) + 17) & 31) | 25600) | (((((int)i << 2) + 17) << 16) & -2097152)),(unsigned short)((int)((unsigned short)(mac_reg >> 16))));
  
#line 2475 
  if ((unsigned int)i <= 15U) 
#line 2475 
                              tmp_0 = (int)i * 8 + 21508; else 
#line 2475 
                                                               tmp_0 = ((int)i + -16) * 8 + 21732;
  
#line 2475 
  ;
  
#line 2475 
  mac_reg = __er32(hw,(unsigned long)tmp_0);
  
#line 2476 
  (*(hw->phy.ops.write_reg_page))(hw,(unsigned int)((((((int)i << 2) + 18) & 31) | 25600) | (((((int)i << 2) + 18) << 16) & -2097152)),(unsigned short)((int)((unsigned short)mac_reg)));
  
#line 2478 
  (*(hw->phy.ops.write_reg_page))(hw,(unsigned int)((((((int)i << 2) + 19) & 31) | 25600) | (((((int)i << 2) + 19) << 16) & -2097152)),(unsigned short)((int)((unsigned short)(mac_reg >> 16)) & 32768));
  
#line 2468 
  i = (u16)((int)i + 1);
  ldv_48093: 
#line 2469 
  ;
  
#line 2468 
  if ((int)hw->mac.rar_entry_count > (int)i) 
#line 2470 
                                             goto ldv_48092; else 
#line 2473 
                                                                  goto ldv_48094;
  ldv_48094: 
#line 2474 
  ;
  
#line 2483 
  e1000_disable_phy_wakeup_reg_access_bm(hw,& phy_reg);
  release: 
#line 2485 
  ;
  
#line 2486 
  (*(hw->phy.ops.release))(hw);
  return_label: 
#line 2487 
                return;
}


#line 2495  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
s32 e1000_lv_jumbo_workaround_ich8lan(struct e1000_hw *hw, bool enable)
{
  s32 __retres;
  u16 phy_reg;
  u16 data;
  u32 mac_reg;
  u16 i;
  s32 tmp_2;
  
#line 2497 
  s32 ret_val = 0;
  
#line 2502 
  if (hw->mac.type <= (unsigned int)e1000_pchlan) {
    
#line 2503 
    __retres = 0;
    
#line 2503 
    goto return_label;
  }
  else ;
  
#line 2506 
  e1e_rphy(hw,24628U,& phy_reg);
  
#line 2507 
  ret_val = e1e_wphy(hw,24628U,(unsigned short)((int)((unsigned int)phy_reg | 16384U)));
  
#line 2508 
  if (ret_val != 0) {
    
#line 2509 
    __retres = ret_val;
    
#line 2509 
    goto return_label;
  }
  else ;
  
#line 2511 
  if ((int)enable != 0) {
    
#line 2515 
    i = (unsigned short)0U;
    
#line 2515 
    goto ldv_48109;
    ldv_48108: 
#line 2516 
    ;
    {
      u32 addr_high;
      u32 addr_low;
      int tmp;
      int tmp_0;
      u32 tmp_1;
      
#line 2516 
      u8 mac_addr[6U] = {(unsigned char)0U};
      
#line 2519 
      if ((unsigned int)i <= 15U) 
#line 2519 
                                  tmp = (int)i * 8 + 21508; else 
#line 2519 
                                                                 tmp = ((int)i + -16) * 8 + 21732;
      
#line 2519 
      ;
      
#line 2519 
      addr_high = __er32(hw,(unsigned long)tmp);
      
#line 2520 
      if (addr_high >= (u32)0) 
#line 2521 
                               goto ldv_48107; else ;
      
#line 2522 
      if ((unsigned int)i <= 15U) 
#line 2522 
                                  tmp_0 = ((int)i + 2688) * 8; else 
#line 2522 
                                                                    tmp_0 = ((int)i + 2700) * 8;
      
#line 2522 
      ;
      
#line 2522 
      addr_low = __er32(hw,(unsigned long)tmp_0);
      
#line 2523 
      mac_addr[0] = (unsigned char)addr_low;
      
#line 2524 
      mac_addr[1] = (unsigned char)(addr_low >> 8);
      
#line 2525 
      mac_addr[2] = (unsigned char)(addr_low >> 16);
      
#line 2526 
      mac_addr[3] = (unsigned char)(addr_low >> 24);
      
#line 2527 
      mac_addr[4] = (unsigned char)addr_high;
      
#line 2528 
      mac_addr[5] = (unsigned char)(addr_high >> 8);
      
#line 2530 
      tmp_1 = crc32_le(4294967295U,(unsigned char const *)(& mac_addr),6UL);
      
#line 2530 
      ;
      
#line 2530 
      ;
      
#line 2530 
      __ew32(hw,(unsigned long)(((int)i + 6100) * 4),~ tmp_1);
    }
    ldv_48107: 
#line 2532 
    ;
    
#line 2515 
    i = (u16)((int)i + 1);
    ldv_48109: 
#line 2516 
    ;
    
#line 2515 
    if ((int)hw->mac.rar_entry_count > (int)i) 
#line 2517 
                                               goto ldv_48108; else 
#line 2520 
                                                                    goto ldv_48110;
    ldv_48110: 
#line 2521 
    ;
    
#line 2534 
    e1000_copy_rx_addrs_to_phy_ich8lan(hw);
    
#line 2537 
    mac_reg = __er32(hw,24324UL);
    
#line 2538 
    mac_reg &= 4294950911U;
    
#line 2539 
    mac_reg |= 229376U;
    
#line 2540 
    __ew32(hw,24324UL,mac_reg);
    
#line 2542 
    mac_reg = __er32(hw,256UL);
    
#line 2543 
    mac_reg |= 67108864U;
    
#line 2544 
    __ew32(hw,256UL,mac_reg);
    
#line 2546 
    ret_val = e1000e_read_kmrn_reg(hw,1U,& data);
    
#line 2549 
    if (ret_val != 0) {
      
#line 2550 
      __retres = ret_val;
      
#line 2550 
      goto return_label;
    }
    else ;
    
#line 2551 
    ret_val = e1000e_write_kmrn_reg(hw,1U,(unsigned short)((int)((unsigned int)data | 1U)));
    
#line 2554 
    if (ret_val != 0) {
      
#line 2555 
      __retres = ret_val;
      
#line 2555 
      goto return_label;
    }
    else ;
    
#line 2556 
    ret_val = e1000e_read_kmrn_reg(hw,16U,& data);
    
#line 2559 
    if (ret_val != 0) {
      
#line 2560 
      __retres = ret_val;
      
#line 2560 
      goto return_label;
    }
    else ;
    
#line 2561 
    data = (unsigned short)((unsigned int)data & 61695U);
    
#line 2562 
    data = (unsigned short)((unsigned int)data | 2816U);
    
#line 2563 
    ret_val = e1000e_write_kmrn_reg(hw,16U,(unsigned short)((int)data));
    
#line 2566 
    if (ret_val != 0) {
      
#line 2567 
      __retres = ret_val;
      
#line 2567 
      goto return_label;
    }
    else ;
    
#line 2570 
    e1e_rphy(hw,24631U,& data);
    
#line 2571 
    data = (unsigned short)((unsigned int)data & 61471U);
    
#line 2572 
    data = (unsigned short)((unsigned int)data | 1760U);
    
#line 2573 
    ret_val = e1e_wphy(hw,24631U,(unsigned short)((int)data));
    
#line 2574 
    if (ret_val != 0) {
      
#line 2575 
      __retres = ret_val;
      
#line 2575 
      goto return_label;
    }
    else ;
    
#line 2576 
    e1e_rphy(hw,24624U,& data);
    
#line 2577 
    data = (unsigned short)((unsigned int)data & 57343U);
    
#line 2578 
    ret_val = e1e_wphy(hw,24624U,(unsigned short)((int)data));
    
#line 2579 
    if (ret_val != 0) {
      
#line 2580 
      __retres = ret_val;
      
#line 2580 
      goto return_label;
    }
    else ;
    
#line 2581 
    e1e_rphy(hw,24852U,& data);
    
#line 2582 
    data = (unsigned short)((unsigned int)data & 61443U);
    
#line 2583 
    data = (unsigned short)((unsigned int)data | 124U);
    
#line 2584 
    ret_val = e1e_wphy(hw,24852U,(unsigned short)((int)data));
    
#line 2585 
    if (ret_val != 0) {
      
#line 2586 
      __retres = ret_val;
      
#line 2586 
      goto return_label;
    }
    else ;
    
#line 2587 
    ret_val = e1e_wphy(hw,24855U,(unsigned short)61696);
    
#line 2588 
    if (ret_val != 0) {
      
#line 2589 
      __retres = ret_val;
      
#line 2589 
      goto return_label;
    }
    else ;
    
#line 2590 
    e1e_rphy(hw,24657U,& data);
    
#line 2591 
    ret_val = e1e_wphy(hw,24657U,(unsigned short)((int)((unsigned int)data | 1024U)));
    
#line 2592 
    if (ret_val != 0) {
      
#line 2593 
      __retres = ret_val;
      
#line 2593 
      goto return_label;
    }
    else ;
  }
  else {
    
#line 2596 
    mac_reg = __er32(hw,24324UL);
    
#line 2597 
    mac_reg &= 4294721535U;
    
#line 2598 
    __ew32(hw,24324UL,mac_reg);
    
#line 2600 
    mac_reg = __er32(hw,256UL);
    
#line 2601 
    mac_reg &= 4227858431U;
    
#line 2602 
    __ew32(hw,256UL,mac_reg);
    
#line 2604 
    ret_val = e1000e_read_kmrn_reg(hw,1U,& data);
    
#line 2607 
    if (ret_val != 0) {
      
#line 2608 
      __retres = ret_val;
      
#line 2608 
      goto return_label;
    }
    else ;
    
#line 2609 
    ret_val = e1000e_write_kmrn_reg(hw,1U,(unsigned short)((int)data & 65534));
    
#line 2612 
    if (ret_val != 0) {
      
#line 2613 
      __retres = ret_val;
      
#line 2613 
      goto return_label;
    }
    else ;
    
#line 2614 
    ret_val = e1000e_read_kmrn_reg(hw,16U,& data);
    
#line 2617 
    if (ret_val != 0) {
      
#line 2618 
      __retres = ret_val;
      
#line 2618 
      goto return_label;
    }
    else ;
    
#line 2619 
    data = (unsigned short)((unsigned int)data & 61695U);
    
#line 2620 
    data = (unsigned short)((unsigned int)data | 2816U);
    
#line 2621 
    ret_val = e1000e_write_kmrn_reg(hw,16U,(unsigned short)((int)data));
    
#line 2624 
    if (ret_val != 0) {
      
#line 2625 
      __retres = ret_val;
      
#line 2625 
      goto return_label;
    }
    else ;
    
#line 2628 
    e1e_rphy(hw,24631U,& data);
    
#line 2629 
    data = (unsigned short)((unsigned int)data & 61471U);
    
#line 2630 
    ret_val = e1e_wphy(hw,24631U,(unsigned short)((int)data));
    
#line 2631 
    if (ret_val != 0) {
      
#line 2632 
      __retres = ret_val;
      
#line 2632 
      goto return_label;
    }
    else ;
    
#line 2633 
    e1e_rphy(hw,24624U,& data);
    
#line 2634 
    data = (unsigned short)((unsigned int)data | 8192U);
    
#line 2635 
    ret_val = e1e_wphy(hw,24624U,(unsigned short)((int)data));
    
#line 2636 
    if (ret_val != 0) {
      
#line 2637 
      __retres = ret_val;
      
#line 2637 
      goto return_label;
    }
    else ;
    
#line 2638 
    e1e_rphy(hw,24852U,& data);
    
#line 2639 
    data = (unsigned short)((unsigned int)data & 61443U);
    
#line 2640 
    data = (unsigned short)((unsigned int)data | 32U);
    
#line 2641 
    ret_val = e1e_wphy(hw,24852U,(unsigned short)((int)data));
    
#line 2642 
    if (ret_val != 0) {
      
#line 2643 
      __retres = ret_val;
      
#line 2643 
      goto return_label;
    }
    else ;
    
#line 2644 
    ret_val = e1e_wphy(hw,24855U,(unsigned short)32256);
    
#line 2645 
    if (ret_val != 0) {
      
#line 2646 
      __retres = ret_val;
      
#line 2646 
      goto return_label;
    }
    else ;
    
#line 2647 
    e1e_rphy(hw,24657U,& data);
    
#line 2648 
    ret_val = e1e_wphy(hw,24657U,(unsigned short)((int)data & 64511));
    
#line 2649 
    if (ret_val != 0) {
      
#line 2650 
      __retres = ret_val;
      
#line 2650 
      goto return_label;
    }
    else ;
  }
  
#line 2654 
  tmp_2 = e1e_wphy(hw,24628U,(unsigned short)((int)phy_reg & 49151));
  
#line 2654 
  __retres = tmp_2;
  return_label: 
#line 2654 
                return __retres;
}


#line 2661  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_lv_phy_workarounds_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  
#line 2663 
  s32 ret_val = 0;
  
#line 2665 
  if (hw->mac.type != (unsigned int)e1000_pch2lan) {
    
#line 2666 
    __retres = 0;
    
#line 2666 
    goto return_label;
  }
  else ;
  
#line 2669 
  ret_val = e1000_set_mdio_slow_mode_hv(hw);
  
#line 2670 
  if (ret_val != 0) {
    
#line 2671 
    __retres = ret_val;
    
#line 2671 
    goto return_label;
  }
  else ;
  
#line 2673 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 2674 
  if (ret_val != 0) {
    
#line 2675 
    __retres = ret_val;
    
#line 2675 
    goto return_label;
  }
  else ;
  
#line 2677 
  ret_val = e1000_write_emi_reg_locked(hw,(unsigned short)2127,(unsigned short)52);
  
#line 2678 
  if (ret_val != 0) 
#line 2679 
                    goto release; else ;
  
#line 2681 
  ret_val = e1000_write_emi_reg_locked(hw,(unsigned short)9233,(unsigned short)5);
  release: 
#line 2682 
  ;
  
#line 2683 
  (*(hw->phy.ops.release))(hw);
  
#line 2685 
  __retres = ret_val;
  return_label: 
#line 2685 
                return __retres;
}


#line 2695  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_k1_workaround_lv(struct e1000_hw *hw)
{
  s32 __retres;
  
#line 2697 
  s32 ret_val = 0;
  
#line 2698 
  u16 status_reg = (unsigned short)0U;
  
#line 2700 
  if (hw->mac.type != (unsigned int)e1000_pch2lan) {
    
#line 2701 
    __retres = 0;
    
#line 2701 
    goto return_label;
  }
  else ;
  
#line 2704 
  ret_val = e1e_rphy(hw,26U,& status_reg);
  
#line 2705 
  if (ret_val != 0) {
    
#line 2706 
    __retres = ret_val;
    
#line 2706 
    goto return_label;
  }
  else ;
  
#line 2708 
  if (((int)status_reg & 4160) == 4160) 
    
#line 2710 
    if (((int)status_reg & 768) != 0) {
      u16 pm_phy_reg;
      
#line 2715 
      ret_val = e1e_rphy(hw,24657U,& pm_phy_reg);
      
#line 2716 
      if (ret_val != 0) {
        
#line 2717 
        __retres = ret_val;
        
#line 2717 
        goto return_label;
      }
      else ;
      
#line 2718 
      pm_phy_reg = (unsigned short)((unsigned int)pm_phy_reg & 49151U);
      
#line 2719 
      ret_val = e1e_wphy(hw,24657U,(unsigned short)((int)pm_phy_reg));
      
#line 2720 
      if (ret_val != 0) {
        
#line 2721 
        __retres = ret_val;
        
#line 2721 
        goto return_label;
      }
      else ;
    }
    else {
      u32 mac_reg;
      
#line 2725 
      mac_reg = __er32(hw,36UL);
      
#line 2726 
      mac_reg &= 4294967288U;
      
#line 2727 
      mac_reg |= 3U;
      
#line 2728 
      __ew32(hw,36UL,mac_reg);
    }
  else ;
  
#line 2732 
  __retres = ret_val;
  return_label: 
#line 2732 
                return __retres;
}


#line 2743  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_gate_hw_phy_config_ich8lan(struct e1000_hw *hw, bool gate)
{
  u32 extcnf_ctrl;
  
#line 2747 
  if (hw->mac.type <= (unsigned int)e1000_pchlan) 
#line 2748 
                                                  goto return_label; else ;
  
#line 2750 
  extcnf_ctrl = __er32(hw,3840UL);
  
#line 2752 
  if ((int)gate != 0) 
#line 2753 
                      extcnf_ctrl |= 128U; else 
#line 2755 
                                                extcnf_ctrl &= 4294967167U;
  
#line 2757 
  __ew32(hw,3840UL,extcnf_ctrl);
  return_label: 
#line 2758 
                return;
}


#line 2767  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_lan_init_done_ich8lan(struct e1000_hw *hw)
{
  u32 data;
  
#line 2769 
  u32 loop = 1500U;
  ldv_48133: 
#line 2770 
  ;
  
#line 2773 
  data = __er32(hw,8UL);
  
#line 2774 
  data &= 512U;
  
#line 2775 
  usleep_range(100UL,200UL);
  
#line 2776 
  if (data == 0U) {
    
#line 2776 
    loop -= 1U;
    
#line 2776 
    if (loop != 0U) 
#line 2778 
                    goto ldv_48133; else 
#line 2781 
                                         goto ldv_48134;
  }
  else 
#line 2781 
       goto ldv_48134;
  ldv_48134: 
#line 2782 
  ;
  
#line 2782 
  if (loop == 0U) {
    
#line 2783 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_lan_init_done_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "LAN_INIT_DONE not set, increase timeout\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2783U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2783 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2783 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"LAN_INIT_DONE not set, increase timeout\n"); else ;
  }
  else ;
  
#line 2786 
  data = __er32(hw,8UL);
  
#line 2787 
  data &= 4294966783U;
  
#line 2788 
  __ew32(hw,8UL,data);
  
#line 2789 
  return;
}


#line 2795  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_post_phy_reset_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  u16 reg;
  s32 tmp;
  
#line 2797 
  s32 ret_val = 0;
  
#line 2800 
  tmp = (*(hw->phy.ops.check_reset_block))(hw);
  
#line 2800 
  if (tmp != 0) {
    
#line 2801 
    __retres = 0;
    
#line 2801 
    goto return_label;
  }
  else ;
  
#line 2804 
  usleep_range(10000UL,20000UL);
  
#line 2807 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)9: 
#line 2808 
    ;
    
#line 2809 
    ret_val = e1000_hv_phy_workarounds_ich8lan(hw);
    
#line 2810 
    if (ret_val != 0) {
      
#line 2811 
      __retres = ret_val;
      
#line 2811 
      goto return_label;
    }
    else ;
    
#line 2812 
    goto ldv_48143;
    case (unsigned int)10: 
#line 2813 
    ;
    
#line 2814 
    ret_val = e1000_lv_phy_workarounds_ich8lan(hw);
    
#line 2815 
    if (ret_val != 0) {
      
#line 2816 
      __retres = ret_val;
      
#line 2816 
      goto return_label;
    }
    else ;
    
#line 2817 
    goto ldv_48143;
    default: 
#line 2818 
    ;
    
#line 2819 
    goto ldv_48143;
  }
  ldv_48143: 
#line 2823 
  ;
  
#line 2823 
  if (hw->mac.type > (unsigned int)e1000_ich10lan) {
    
#line 2824 
    e1e_rphy(hw,24625U,& reg);
    
#line 2825 
    reg = (unsigned short)((unsigned int)reg & 65519U);
    
#line 2826 
    e1e_wphy(hw,24625U,(unsigned short)((int)reg));
  }
  else ;
  
#line 2830 
  ret_val = e1000_sw_lcd_config_ich8lan(hw);
  
#line 2831 
  if (ret_val != 0) {
    
#line 2832 
    __retres = ret_val;
    
#line 2832 
    goto return_label;
  }
  else ;
  
#line 2835 
  ret_val = e1000_oem_bits_config_ich8lan(hw,(_Bool)1);
  
#line 2837 
  if (hw->mac.type == (unsigned int)e1000_pch2lan) {
    u32 tmp_0;
    
#line 2839 
    tmp_0 = __er32(hw,23380UL);
    
#line 2839 
    if ((tmp_0 & 32768U) == 0U) {
      
#line 2840 
      usleep_range(10000UL,20000UL);
      
#line 2841 
      e1000_gate_hw_phy_config_ich8lan(hw,(_Bool)0);
    }
    else ;
    
#line 2845 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    
#line 2846 
    if (ret_val != 0) {
      
#line 2847 
      __retres = ret_val;
      
#line 2847 
      goto return_label;
    }
    else ;
    
#line 2848 
    ret_val = e1000_write_emi_reg_locked(hw,(unsigned short)18437,(unsigned short)4999);
    
#line 2851 
    (*(hw->phy.ops.release))(hw);
  }
  else ;
  
#line 2854 
  __retres = ret_val;
  return_label: 
#line 2854 
                return __retres;
}


#line 2865  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_phy_hw_reset_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  s32 tmp_0;
  
#line 2867 
  s32 ret_val = 0;
  
#line 2870 
  if (hw->mac.type == (unsigned int)e1000_pch2lan) {
    u32 tmp;
    
#line 2870 
    tmp = __er32(hw,23380UL);
    
#line 2870 
    if ((tmp & 32768U) == 0U) 
#line 2872 
                              e1000_gate_hw_phy_config_ich8lan(hw,(_Bool)1); else ;
  }
  else ;
  
#line 2874 
  ret_val = e1000e_phy_hw_reset_generic(hw);
  
#line 2875 
  if (ret_val != 0) {
    
#line 2876 
    __retres = ret_val;
    
#line 2876 
    goto return_label;
  }
  else ;
  
#line 2878 
  tmp_0 = e1000_post_phy_reset_ich8lan(hw);
  
#line 2878 
  __retres = tmp_0;
  return_label: 
#line 2878 
                return __retres;
}


#line 2892  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_set_lplu_state_pchlan(struct e1000_hw *hw, bool active)
{
  s32 __retres;
  s32 ret_val;
  u16 oem_reg;
  s32 tmp;
  s32 tmp_0;
  
#line 2897 
  ret_val = e1e_rphy(hw,24601U,& oem_reg);
  
#line 2898 
  if (ret_val != 0) {
    
#line 2899 
    __retres = ret_val;
    
#line 2899 
    goto return_label;
  }
  else ;
  
#line 2901 
  if ((int)active != 0) 
#line 2902 
                        oem_reg = (unsigned short)((unsigned int)oem_reg | 4U); else 
                                                                    
#line 2904 
                                                                    oem_reg = (unsigned short)((unsigned int)oem_reg & 65531U);
  
#line 2906 
  tmp = (*(hw->phy.ops.check_reset_block))(hw);
  
#line 2906 
  if (tmp == 0) 
#line 2907 
                oem_reg = (unsigned short)((unsigned int)oem_reg | 1024U); else ;
  
#line 2909 
  tmp_0 = e1e_wphy(hw,24601U,(unsigned short)((int)oem_reg));
  
#line 2909 
  __retres = tmp_0;
  return_label: 
#line 2909 
                return __retres;
}


#line 2925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_set_d0_lplu_state_ich8lan(struct e1000_hw *hw, bool active)
{
  s32 __retres;
  u32 phy_ctrl;
  u16 data;
  
#line 2927 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 2929 
  s32 ret_val = 0;
  
#line 2932 
  if (phy->type == (unsigned int)e1000_phy_ife) {
    
#line 2933 
    __retres = 0;
    
#line 2933 
    goto return_label;
  }
  else ;
  
#line 2935 
  phy_ctrl = __er32(hw,3856UL);
  
#line 2937 
  if ((int)active != 0) {
    
#line 2938 
    phy_ctrl |= 2U;
    
#line 2939 
    __ew32(hw,3856UL,phy_ctrl);
    
#line 2941 
    if (phy->type != (unsigned int)e1000_phy_igp_3) {
      
#line 2942 
      __retres = 0;
      
#line 2942 
      goto return_label;
    }
    else ;
    
#line 2947 
    if (hw->mac.type == (unsigned int)e1000_ich8lan) 
#line 2948 
                                                     e1000e_gig_downshift_workaround_ich8lan(hw); else ;
    
#line 2951 
    ret_val = e1e_rphy(hw,16U,& data);
    
#line 2952 
    if (ret_val != 0) {
      
#line 2953 
      __retres = ret_val;
      
#line 2953 
      goto return_label;
    }
    else ;
    
#line 2954 
    data = (unsigned short)((unsigned int)data & 65407U);
    
#line 2955 
    ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
    
#line 2956 
    if (ret_val != 0) {
      
#line 2957 
      __retres = ret_val;
      
#line 2957 
      goto return_label;
    }
    else ;
  }
  else {
    
#line 2959 
    phy_ctrl &= 4294967293U;
    
#line 2960 
    __ew32(hw,3856UL,phy_ctrl);
    
#line 2962 
    if (phy->type != (unsigned int)e1000_phy_igp_3) {
      
#line 2963 
      __retres = 0;
      
#line 2963 
      goto return_label;
    }
    else ;
    
#line 2970 
    if (phy->smart_speed == (unsigned int)e1000_smart_speed_on) {
      
#line 2971 
      ret_val = e1e_rphy(hw,16U,& data);
      
#line 2973 
      if (ret_val != 0) {
        
#line 2974 
        __retres = ret_val;
        
#line 2974 
        goto return_label;
      }
      else ;
      
#line 2976 
      data = (unsigned short)((unsigned int)data | 128U);
      
#line 2977 
      ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
      
#line 2979 
      if (ret_val != 0) {
        
#line 2980 
        __retres = ret_val;
        
#line 2980 
        goto return_label;
      }
      else ;
    }
    else 
      
#line 2981 
      if (phy->smart_speed == (unsigned int)e1000_smart_speed_off) {
        
#line 2982 
        ret_val = e1e_rphy(hw,16U,& data);
        
#line 2984 
        if (ret_val != 0) {
          
#line 2985 
          __retres = ret_val;
          
#line 2985 
          goto return_label;
        }
        else ;
        
#line 2987 
        data = (unsigned short)((unsigned int)data & 65407U);
        
#line 2988 
        ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
        
#line 2990 
        if (ret_val != 0) {
          
#line 2991 
          __retres = ret_val;
          
#line 2991 
          goto return_label;
        }
        else ;
      }
      else ;
  }
  
#line 2995 
  __retres = 0;
  return_label: 
#line 2995 
                return __retres;
}


#line 3011  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_set_d3_lplu_state_ich8lan(struct e1000_hw *hw, bool active)
{
  s32 __retres;
  u32 phy_ctrl;
  u16 data;
  
#line 3013 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 3015 
  s32 ret_val = 0;
  
#line 3018 
  phy_ctrl = __er32(hw,3856UL);
  
#line 3020 
  if (! active) {
    
#line 3021 
    phy_ctrl &= 4294967291U;
    
#line 3022 
    __ew32(hw,3856UL,phy_ctrl);
    
#line 3024 
    if (phy->type != (unsigned int)e1000_phy_igp_3) {
      
#line 3025 
      __retres = 0;
      
#line 3025 
      goto return_label;
    }
    else ;
    
#line 3032 
    if (phy->smart_speed == (unsigned int)e1000_smart_speed_on) {
      
#line 3033 
      ret_val = e1e_rphy(hw,16U,& data);
      
#line 3035 
      if (ret_val != 0) {
        
#line 3036 
        __retres = ret_val;
        
#line 3036 
        goto return_label;
      }
      else ;
      
#line 3038 
      data = (unsigned short)((unsigned int)data | 128U);
      
#line 3039 
      ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
      
#line 3041 
      if (ret_val != 0) {
        
#line 3042 
        __retres = ret_val;
        
#line 3042 
        goto return_label;
      }
      else ;
    }
    else 
      
#line 3043 
      if (phy->smart_speed == (unsigned int)e1000_smart_speed_off) {
        
#line 3044 
        ret_val = e1e_rphy(hw,16U,& data);
        
#line 3046 
        if (ret_val != 0) {
          
#line 3047 
          __retres = ret_val;
          
#line 3047 
          goto return_label;
        }
        else ;
        
#line 3049 
        data = (unsigned short)((unsigned int)data & 65407U);
        
#line 3050 
        ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
        
#line 3052 
        if (ret_val != 0) {
          
#line 3053 
          __retres = ret_val;
          
#line 3053 
          goto return_label;
        }
        else ;
      }
      else ;
  }
  else 
    
#line 3055 
    if (((unsigned int)phy->autoneg_advertised == 47U || (unsigned int)phy->autoneg_advertised == 15U) || (unsigned int)phy->autoneg_advertised == 3U) {
      
#line 3058 
      phy_ctrl |= 4U;
      
#line 3059 
      __ew32(hw,3856UL,phy_ctrl);
      
#line 3061 
      if (phy->type != (unsigned int)e1000_phy_igp_3) {
        
#line 3062 
        __retres = 0;
        
#line 3062 
        goto return_label;
      }
      else ;
      
#line 3067 
      if (hw->mac.type == (unsigned int)e1000_ich8lan) 
#line 3068 
                                                       e1000e_gig_downshift_workaround_ich8lan(hw); else ;
      
#line 3071 
      ret_val = e1e_rphy(hw,16U,& data);
      
#line 3072 
      if (ret_val != 0) {
        
#line 3073 
        __retres = ret_val;
        
#line 3073 
        goto return_label;
      }
      else ;
      
#line 3075 
      data = (unsigned short)((unsigned int)data & 65407U);
      
#line 3076 
      ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
    }
    else ;
  
#line 3079 
  __retres = ret_val;
  return_label: 
#line 3079 
                return __retres;
}


#line 3090  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_valid_nvm_bank_detect_ich8lan(struct e1000_hw *hw, u32 *bank)
{
  s32 __retres;
  u32 eecd;
  s32 ret_val;
  
#line 3093 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 3094 
  u32 bank1_offset = nvm->flash_bank_size * 2U;
  
#line 3095 
  u32 act_offset = 39U;
  
#line 3096 
  u8 sig_byte = (unsigned char)0U;
  
#line 3099 
  switch ((unsigned int)hw->mac.type) {
    u32 tmp;
    case (unsigned int)12: 
#line 3103 
    ;
    
#line 3104 
    tmp = __er32(hw,24UL);
    
#line 3104 
    *bank = tmp & 3U;
    
#line 3106 
    if (*bank <= 1U) {
      {
        
#line 3107 
        struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_valid_nvm_bank_detect_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "ERROR: No valid NVM bank present\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3107U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 3107 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3107 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"ERROR: No valid NVM bank present\n"); else ;
      }
      
#line 3108 
      __retres = -1;
      
#line 3108 
      goto return_label;
    }
    else {
      
#line 3110 
      *bank += 4294967294U;
      
#line 3111 
      __retres = 0;
      
#line 3111 
      goto return_label;
    }
    case (unsigned int)6: 
#line 3114 
    ;
    case (unsigned int)7: 
#line 3115 
    ;
    
#line 3116 
    eecd = __er32(hw,16UL);
    
#line 3117 
    if ((eecd & 768U) == 768U) {
      
#line 3119 
      if ((eecd & 4194304U) != 0U) 
#line 3120 
                                   *bank = 1U; else 
#line 3122 
                                                    *bank = 0U;
      
#line 3124 
      __retres = 0;
      
#line 3124 
      goto return_label;
    }
    else ;
    {
      
#line 3126 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_valid_nvm_bank_detect_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Unable to determine valid NVM bank via EEC - reading flash signature\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3126U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3126 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 3126 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Unable to determine valid NVM bank via EEC - reading flash signature\n"); else ;
    }
    default: 
#line 3128 
    ;
    
#line 3130 
    *bank = 0U;
    
#line 3133 
    ret_val = e1000_read_flash_byte_ich8lan(hw,act_offset,& sig_byte);
    
#line 3135 
    if (ret_val != 0) {
      
#line 3136 
      __retres = ret_val;
      
#line 3136 
      goto return_label;
    }
    else ;
    
#line 3137 
    if (((int)sig_byte & 192) == 128) {
      
#line 3139 
      *bank = 0U;
      
#line 3140 
      __retres = 0;
      
#line 3140 
      goto return_label;
    }
    else ;
    
#line 3144 
    ret_val = e1000_read_flash_byte_ich8lan(hw,act_offset + bank1_offset,& sig_byte);
    
#line 3147 
    if (ret_val != 0) {
      
#line 3148 
      __retres = ret_val;
      
#line 3148 
      goto return_label;
    }
    else ;
    
#line 3149 
    if (((int)sig_byte & 192) == 128) {
      
#line 3151 
      *bank = 1U;
      
#line 3152 
      __retres = 0;
      
#line 3152 
      goto return_label;
    }
    else ;
    {
      
#line 3155 
      struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_valid_nvm_bank_detect_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "ERROR: No valid NVM bank present\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3155U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3155 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 3155 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"ERROR: No valid NVM bank present\n"); else ;
    }
    
#line 3156 
    __retres = -1;
    
#line 3156 
    goto return_label;
  }
  return_label: 
#line 3099 
                return __retres;
}


#line 3169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_read_nvm_spt(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  u32 act_offset;
  u16 offset_to_read;
  u16 i;
  
#line 3172 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 3173 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  
#line 3175 
  s32 ret_val = 0;
  
#line 3176 
  u32 bank = 0U;
  
#line 3177 
  u32 dword = 0U;
  
#line 3181 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      
#line 3183 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_read_nvm_spt", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "nvm parameter(s) out of bounds\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3183U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3183 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3183 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"nvm parameter(s) out of bounds\n"); else ;
    }
    
#line 3184 
    ret_val = -1;
    
#line 3185 
    goto out;
  }
  else ;
  
#line 3188 
  (*(nvm->ops.acquire))(hw);
  
#line 3190 
  ret_val = e1000_valid_nvm_bank_detect_ich8lan(hw,& bank);
  
#line 3191 
  if (ret_val != 0) {
    {
      
#line 3192 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_read_nvm_spt", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Could not detect valid bank, assuming bank 0\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3192U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3192 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 3192 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Could not detect valid bank, assuming bank 0\n"); else ;
    }
    
#line 3193 
    bank = 0U;
  }
  else ;
  
#line 3196 
  if (bank != 0U) 
#line 3196 
                  act_offset = nvm->flash_bank_size; else 
#line 3196 
                                                          act_offset = 0U;
  
#line 3197 
  act_offset = (unsigned int)offset + act_offset;
  
#line 3199 
  ret_val = 0;
  
#line 3201 
  i = (unsigned short)0U;
  
#line 3201 
  goto ldv_48210;
  ldv_48209: 
#line 3202 
  ;
  
#line 3202 
  if ((int)words - (int)i == 1) 
    
#line 3203 
    if ((int)dev_spec->shadow_ram[(int)offset + (int)i].modified != 0) 
      
#line 3204 
      *(data + (int)i) = dev_spec->shadow_ram[(int)offset + (int)i].value;
    else {
      
#line 3207 
      offset_to_read = (unsigned short)((unsigned int)((int)((unsigned short)act_offset) + (int)i) & 65534U);
      
#line 3209 
      ret_val = e1000_read_flash_dword_ich8lan(hw,(unsigned int)offset_to_read,& dword);
      
#line 3213 
      if (ret_val != 0) 
#line 3214 
                        goto ldv_48208; else ;
      
#line 3215 
      if ((((unsigned int)i + act_offset) & 1U) == 0U) 
#line 3216 
                                                       *(data + (int)i) = (unsigned short)dword; else 
                                                                    
#line 3218 
                                                                    *(data + (int)i) = (unsigned short)(dword >> 16);
    }
  else {
    
#line 3221 
    offset_to_read = (unsigned short)((int)((unsigned short)act_offset) + (int)i);
    
#line 3222 
    if (! dev_spec->shadow_ram[(int)offset + (int)i].modified || ! dev_spec->shadow_ram[((int)offset + (int)i) + 1].modified) {
      
#line 3224 
      ret_val = e1000_read_flash_dword_ich8lan(hw,(unsigned int)offset_to_read,& dword);
      
#line 3228 
      if (ret_val != 0) 
#line 3229 
                        goto ldv_48208; else ;
    }
    else ;
    
#line 3231 
    if ((int)dev_spec->shadow_ram[(int)offset + (int)i].modified != 0) 
      
#line 3232 
      *(data + (int)i) = dev_spec->shadow_ram[(int)offset + (int)i].value; else 
                                                                    
#line 3235 
                                                                    *(data + (int)i) = (unsigned short)dword;
    
#line 3236 
    if ((int)dev_spec->shadow_ram[(int)offset + (int)i].modified != 0) 
      
#line 3237 
      *(data + ((unsigned int)i + 1U)) = dev_spec->shadow_ram[((int)offset + (int)i) + 1].value; else 
                                                                    
#line 3240 
                                                                    *(data + ((unsigned int)i + 1U)) = (unsigned short)(dword >> 16);
  }
  
#line 3201 
  i = (unsigned short)((unsigned int)i + 2U);
  ldv_48210: 
#line 3202 
  ;
  
#line 3201 
  if ((int)i < (int)words) 
#line 3203 
                           goto ldv_48209; else 
#line 3206 
                                                goto ldv_48208;
  ldv_48208: 
#line 3207 
  ;
  
#line 3244 
  (*(nvm->ops.release))(hw);
  out: 
#line 3246 
  ;
  
#line 3247 
  if (ret_val != 0) {
    
#line 3248 
    struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_read_nvm_spt", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "NVM read error: %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3248U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 3248 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 3248 
                                                          __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"NVM read error: %d\n",ret_val); else ;
  }
  else ;
  
#line 3250 
  return ret_val;
}


#line 3262  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_read_nvm_ich8lan(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  u32 act_offset;
  u16 i;
  u16 word;
  
#line 3265 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 3266 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  
#line 3268 
  s32 ret_val = 0;
  
#line 3269 
  u32 bank = 0U;
  
#line 3272 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      
#line 3274 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_read_nvm_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "nvm parameter(s) out of bounds\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3274U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3274 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3274 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"nvm parameter(s) out of bounds\n"); else ;
    }
    
#line 3275 
    ret_val = -1;
    
#line 3276 
    goto out;
  }
  else ;
  
#line 3279 
  (*(nvm->ops.acquire))(hw);
  
#line 3281 
  ret_val = e1000_valid_nvm_bank_detect_ich8lan(hw,& bank);
  
#line 3282 
  if (ret_val != 0) {
    {
      
#line 3283 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_read_nvm_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Could not detect valid bank, assuming bank 0\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3283U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3283 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 3283 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Could not detect valid bank, assuming bank 0\n"); else ;
    }
    
#line 3284 
    bank = 0U;
  }
  else ;
  
#line 3287 
  if (bank != 0U) 
#line 3287 
                  act_offset = nvm->flash_bank_size; else 
#line 3287 
                                                          act_offset = 0U;
  
#line 3288 
  act_offset = (unsigned int)offset + act_offset;
  
#line 3290 
  ret_val = 0;
  
#line 3291 
  i = (unsigned short)0U;
  
#line 3291 
  goto ldv_48231;
  ldv_48230: 
#line 3292 
  ;
  
#line 3292 
  if ((int)dev_spec->shadow_ram[(int)offset + (int)i].modified != 0) 
    
#line 3293 
    *(data + (int)i) = dev_spec->shadow_ram[(int)offset + (int)i].value;
  else {
    
#line 3295 
    ret_val = e1000_read_flash_word_ich8lan(hw,(unsigned int)i + act_offset,& word);
    
#line 3298 
    if (ret_val != 0) 
#line 3299 
                      goto ldv_48229; else ;
    
#line 3300 
    *(data + (int)i) = word;
  }
  
#line 3291 
  i = (u16)((int)i + 1);
  ldv_48231: 
#line 3292 
  ;
  
#line 3291 
  if ((int)i < (int)words) 
#line 3293 
                           goto ldv_48230; else 
#line 3296 
                                                goto ldv_48229;
  ldv_48229: 
#line 3297 
  ;
  
#line 3304 
  (*(nvm->ops.release))(hw);
  out: 
#line 3306 
  ;
  
#line 3307 
  if (ret_val != 0) {
    
#line 3308 
    struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_read_nvm_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "NVM read error: %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3308U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 3308 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 3308 
                                                          __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"NVM read error: %d\n",ret_val); else ;
  }
  else ;
  
#line 3310 
  return ret_val;
}


#line 3320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_flash_cycle_init_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  union ich8_hws_flash_status hsfsts;
  
#line 3323 
  s32 ret_val = -1;
  
#line 3325 
  hsfsts.regval = __er16flash(hw,4UL);
  
#line 3328 
  if ((unsigned int)*((unsigned char *)(& hsfsts.hsf_status) + 1UL) == 0U) {
    {
      
#line 3329 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_flash_cycle_init_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Flash descriptor invalid.  SW Sequencing must be used.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3329U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3329 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3329 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Flash descriptor invalid.  SW Sequencing must be used.\n"); else ;
    }
    
#line 3330 
    __retres = -1;
    
#line 3330 
    goto return_label;
  }
  else ;
  
#line 3334 
  hsfsts.hsf_status.flcerr = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
  
#line 3335 
  hsfsts.hsf_status.dael = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
  
#line 3336 
  if (hw->mac.type == (unsigned int)e1000_pch_spt) 
#line 3337 
                                                   __ew32flash(hw,4UL,(unsigned int)hsfsts.regval); else 
                                                                    
#line 3339 
                                                                    __ew16flash(hw,4UL,(unsigned short)((int)hsfsts.regval));
  
#line 3349 
  if ((unsigned int)*((unsigned char *)(& hsfsts.hsf_status) + 0UL) == 0U) {
    
#line 3354 
    hsfsts.hsf_status.flcdone = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
    
#line 3355 
    if (hw->mac.type == (unsigned int)e1000_pch_spt) 
#line 3356 
                                                     __ew32flash(hw,4UL,(unsigned int)hsfsts.regval); else 
                                                                    
#line 3358 
                                                                    __ew16flash(hw,4UL,(unsigned short)((int)hsfsts.regval));
    
#line 3359 
    ret_val = 0;
  }
  else {
    s32 i;
    
#line 3366 
    i = 0;
    
#line 3366 
    goto ldv_48243;
    ldv_48242: 
#line 3367 
    ;
    
#line 3367 
    hsfsts.regval = __er16flash(hw,4UL);
    
#line 3368 
    if ((unsigned int)*((unsigned char *)(& hsfsts.hsf_status) + 0UL) == 0U) {
      
#line 3369 
      ret_val = 0;
      
#line 3370 
      goto ldv_48241;
    }
    else ;
    
#line 3372 
    __const_udelay(4295UL);
    
#line 3366 
    i += 1;
    ldv_48243: 
#line 3367 
    ;
    
#line 3366 
    if (i <= 9999999) 
#line 3368 
                      goto ldv_48242; else 
#line 3371 
                                           goto ldv_48241;
    ldv_48241: 
#line 3372 
    ;
    
#line 3374 
    if (ret_val == 0) {
      
#line 3378 
      hsfsts.hsf_status.flcdone = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
      
#line 3379 
      if (hw->mac.type == (unsigned int)e1000_pch_spt) 
#line 3380 
                                                       __ew32flash(hw,4UL,(unsigned int)hsfsts.regval); else 
                                                                    
#line 3383 
                                                                    __ew16flash(hw,4UL,(unsigned short)((int)hsfsts.regval));
    }
    else {
      
#line 3385 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_flash_cycle_init_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Flash controller busy, cannot get access\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3385U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3385 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 3385 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Flash controller busy, cannot get access\n"); else ;
    }
  }
  
#line 3389 
  __retres = ret_val;
  return_label: 
#line 3389 
                return __retres;
}


#line 3399  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_flash_cycle_ich8lan(struct e1000_hw *hw, u32 timeout)
{
  s32 __retres;
  union ich8_hws_flash_ctrl hsflctl;
  union ich8_hws_flash_status hsfsts;
  u32 tmp_0;
  
#line 3403 
  u32 i = 0U;
  
#line 3406 
  if (hw->mac.type == (unsigned int)e1000_pch_spt) {
    u32 tmp;
    
#line 3407 
    tmp = __er32flash(hw,4UL);
    
#line 3407 
    hsflctl.regval = (unsigned short)(tmp >> 16);
  }
  else 
#line 3409 
       hsflctl.regval = __er16flash(hw,6UL);
  
#line 3410 
  hsflctl.hsf_ctrl.flcgo = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
  
#line 3412 
  if (hw->mac.type == (unsigned int)e1000_pch_spt) 
#line 3413 
                                                   __ew32flash(hw,4UL,(unsigned int)((int)hsflctl.regval << 16)); else 
                                                                    
#line 3415 
                                                                    __ew16flash(hw,6UL,(unsigned short)((int)hsflctl.regval));
  ldv_48253: 
#line 3416 
  ;
  
#line 3419 
  hsfsts.regval = __er16flash(hw,4UL);
  
#line 3420 
  if ((unsigned int)*((unsigned char *)(& hsfsts.hsf_status) + 0UL) != 0U) 
    
#line 3421 
    goto ldv_48252; else ;
  
#line 3422 
  __const_udelay(4295UL);
  
#line 3423 
  tmp_0 = i;
  
#line 3423 
  i += 1U;
  
#line 3423 
  ;
  
#line 3423 
  if (tmp_0 < timeout) 
#line 3425 
                       goto ldv_48253; else 
#line 3428 
                                            goto ldv_48252;
  ldv_48252: 
#line 3429 
  ;
  
#line 3425 
  if ((unsigned int)*((unsigned char *)(& hsfsts.hsf_status) + 0UL) != 0U && (unsigned int)*((unsigned char *)(& hsfsts.hsf_status) + 0UL) == 0U) {
    
#line 3426 
    __retres = 0;
    
#line 3426 
    goto return_label;
  }
  else ;
  
#line 3428 
  __retres = -1;
  return_label: 
#line 3428 
                return __retres;
}


#line 3440  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_read_flash_dword_ich8lan(struct e1000_hw *hw, u32 offset, u32 *data)
{
  s32 tmp;
  
#line 3444 
  offset <<= 1;
  
#line 3445 
  tmp = e1000_read_flash_data32_ich8lan(hw,offset,data);
  
#line 3445 
  return tmp;
}


#line 3457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_read_flash_word_ich8lan(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 tmp;
  
#line 3461 
  offset <<= 1;
  
#line 3463 
  tmp = e1000_read_flash_data_ich8lan(hw,offset,(unsigned char)2,data);
  
#line 3463 
  return tmp;
}


#line 3474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_read_flash_byte_ich8lan(struct e1000_hw *hw, u32 offset, u8 *data)
{
  s32 __retres;
  s32 ret_val;
  
#line 3478 
  u16 word = (unsigned short)0U;
  
#line 3483 
  if (hw->mac.type == (unsigned int)e1000_pch_spt) {
    
#line 3484 
    __retres = -1;
    
#line 3484 
    goto return_label;
  }
  else 
#line 3486 
       ret_val = e1000_read_flash_data_ich8lan(hw,offset,(unsigned char)1,& word);
  
#line 3488 
  if (ret_val != 0) {
    
#line 3489 
    __retres = ret_val;
    
#line 3489 
    goto return_label;
  }
  else ;
  
#line 3491 
  *data = (unsigned char)word;
  
#line 3493 
  __retres = 0;
  return_label: 
#line 3493 
                return __retres;
}


#line 3505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_read_flash_data_ich8lan(struct e1000_hw *hw, u32 offset, u8 size, u16 *data)
{
  s32 __retres;
  union ich8_hws_flash_status hsfsts;
  union ich8_hws_flash_ctrl hsflctl;
  u32 flash_linear_addr;
  u8 tmp;
  
#line 3511 
  u32 flash_data = 0U;
  
#line 3512 
  s32 ret_val = -1;
  
#line 3513 
  u8 count = (unsigned char)0U;
  
#line 3515 
  if ((unsigned int)size + 255U > 1U || offset > 16777215U) {
    
#line 3516 
    __retres = -1;
    
#line 3516 
    goto return_label;
  }
  else ;
  
#line 3518 
  flash_linear_addr = (offset & 16777215U) + hw->nvm.flash_base_addr;
  ldv_48287: 
#line 3520 
  ;
  
#line 3522 
  __const_udelay(4295UL);
  
#line 3524 
  ret_val = e1000_flash_cycle_init_ich8lan(hw);
  
#line 3525 
  if (ret_val != 0) 
#line 3526 
                    goto ldv_48283; else ;
  
#line 3528 
  hsflctl.regval = __er16flash(hw,6UL);
  
#line 3530 
  hsflctl.hsf_ctrl.fldbcount = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))((unsigned int)size + 255U);
  
#line 3531 
  hsflctl.hsf_ctrl.flcycle = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U;
  
#line 3532 
  __ew16flash(hw,6UL,(unsigned short)((int)hsflctl.regval));
  
#line 3534 
  __ew32flash(hw,8UL,flash_linear_addr);
  
#line 3536 
  ret_val = e1000_flash_cycle_ich8lan(hw,10000000U);
  
#line 3545 
  if (ret_val == 0) {
    
#line 3546 
    flash_data = __er32flash(hw,16UL);
    
#line 3547 
    if ((unsigned int)size == 1U) 
#line 3548 
                                  *data = (unsigned short)((unsigned char)flash_data);
    else 
      
#line 3549 
      if ((unsigned int)size == 2U) 
#line 3550 
                                    *data = (unsigned short)flash_data; else ;
    
#line 3551 
    goto ldv_48283;
  }
  else {
    
#line 3558 
    hsfsts.regval = __er16flash(hw,4UL);
    
#line 3559 
    if ((unsigned int)*((unsigned char *)(& hsfsts.hsf_status) + 0UL) != 0U) 
      
#line 3561 
      goto ldv_48284;
    else 
      
#line 3562 
      if ((unsigned int)*((unsigned char *)(& hsfsts.hsf_status) + 0UL) == 0U) {
        {
          
#line 3563 
          struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_read_flash_data_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Timeout error - flash cycle did not complete.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3563U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 3563 
          if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3563 
                                                              __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Timeout error - flash cycle did not complete.\n"); else ;
        }
        
#line 3564 
        goto ldv_48283;
      }
      else ;
  }
  ldv_48284: 
#line 3567 
  ;
  
#line 3567 
  tmp = count;
  
#line 3567 
  count = (u8)((int)count + 1);
  
#line 3567 
  ;
  
#line 3567 
  if ((unsigned int)tmp <= 9U) 
#line 3569 
                               goto ldv_48287; else 
#line 3572 
                                                    goto ldv_48283;
  ldv_48283: 
#line 3573 
  ;
  
#line 3569 
  __retres = ret_val;
  return_label: 
#line 3569 
                return __retres;
}


#line 3581  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_read_flash_data32_ich8lan(struct e1000_hw *hw, u32 offset, u32 *data)
{
  s32 __retres;
  union ich8_hws_flash_status hsfsts;
  union ich8_hws_flash_ctrl hsflctl;
  u32 flash_linear_addr;
  u32 tmp;
  u8 tmp_0;
  
#line 3587 
  s32 ret_val = -1;
  
#line 3588 
  u8 count = (unsigned char)0U;
  
#line 3590 
  if (offset > 16777215U || hw->mac.type != (unsigned int)e1000_pch_spt) {
    
#line 3592 
    __retres = -1;
    
#line 3592 
    goto return_label;
  }
  else ;
  
#line 3593 
  flash_linear_addr = (offset & 16777215U) + hw->nvm.flash_base_addr;
  ldv_48302: 
#line 3595 
  ;
  
#line 3597 
  __const_udelay(4295UL);
  
#line 3599 
  ret_val = e1000_flash_cycle_init_ich8lan(hw);
  
#line 3600 
  if (ret_val != 0) 
#line 3601 
                    goto ldv_48298; else ;
  
#line 3605 
  tmp = __er32flash(hw,4UL);
  
#line 3605 
  hsflctl.regval = (unsigned short)(tmp >> 16);
  
#line 3608 
  hsflctl.hsf_ctrl.fldbcount = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))3U;
  
#line 3609 
  hsflctl.hsf_ctrl.flcycle = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))0U;
  
#line 3613 
  __ew32flash(hw,4UL,(unsigned int)hsflctl.regval << 16);
  
#line 3614 
  __ew32flash(hw,8UL,flash_linear_addr);
  
#line 3616 
  ret_val = e1000_flash_cycle_ich8lan(hw,10000000U);
  
#line 3625 
  if (ret_val == 0) {
    
#line 3626 
    *data = __er32flash(hw,16UL);
    
#line 3627 
    goto ldv_48298;
  }
  else {
    
#line 3634 
    hsfsts.regval = __er16flash(hw,4UL);
    
#line 3635 
    if ((unsigned int)*((unsigned char *)(& hsfsts.hsf_status) + 0UL) != 0U) 
      
#line 3637 
      goto ldv_48299;
    else 
      
#line 3638 
      if ((unsigned int)*((unsigned char *)(& hsfsts.hsf_status) + 0UL) == 0U) {
        {
          
#line 3639 
          struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_read_flash_data32_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Timeout error - flash cycle did not complete.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3639U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 3639 
          if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3639 
                                                              __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Timeout error - flash cycle did not complete.\n"); else ;
        }
        
#line 3640 
        goto ldv_48298;
      }
      else ;
  }
  ldv_48299: 
#line 3643 
  ;
  
#line 3643 
  tmp_0 = count;
  
#line 3643 
  count = (u8)((int)count + 1);
  
#line 3643 
  ;
  
#line 3643 
  if ((unsigned int)tmp_0 <= 9U) 
#line 3645 
                                 goto ldv_48302; else 
#line 3648 
                                                      goto ldv_48298;
  ldv_48298: 
#line 3649 
  ;
  
#line 3645 
  __retres = ret_val;
  return_label: 
#line 3645 
                return __retres;
}


#line 3657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_write_nvm_ich8lan(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 __retres;
  u16 i;
  
#line 3660 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 3661 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  
#line 3664 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      
#line 3666 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_write_nvm_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "nvm parameter(s) out of bounds\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3666U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3666 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3666 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"nvm parameter(s) out of bounds\n"); else ;
    }
    
#line 3667 
    __retres = -1;
    
#line 3667 
    goto return_label;
  }
  else ;
  
#line 3670 
  (*(nvm->ops.acquire))(hw);
  
#line 3672 
  i = (unsigned short)0U;
  
#line 3672 
  goto ldv_48315;
  ldv_48314: 
#line 3673 
  ;
  
#line 3673 
  dev_spec->shadow_ram[(int)offset + (int)i].modified = (_Bool)1;
  
#line 3674 
  dev_spec->shadow_ram[(int)offset + (int)i].value = *(data + (int)i);
  
#line 3672 
  i = (u16)((int)i + 1);
  ldv_48315: 
#line 3673 
  ;
  
#line 3672 
  if ((int)i < (int)words) 
#line 3674 
                           goto ldv_48314; else 
#line 3677 
                                                goto ldv_48316;
  ldv_48316: 
#line 3678 
  ;
  
#line 3677 
  (*(nvm->ops.release))(hw);
  
#line 3679 
  __retres = 0;
  return_label: 
#line 3679 
                return __retres;
}


#line 3693  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_update_nvm_checksum_spt(struct e1000_hw *hw)
{
  u32 i;
  u32 act_offset;
  u32 new_bank_offset;
  u32 old_bank_offset;
  u32 bank;
  s32 ret_val;
  
#line 3695 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 3696 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  
#line 3699 
  u32 dword = 0U;
  
#line 3701 
  ret_val = e1000e_update_nvm_checksum_generic(hw);
  
#line 3702 
  if (ret_val != 0) 
#line 3703 
                    goto out; else ;
  
#line 3705 
  if (nvm->type != (unsigned int)e1000_nvm_flash_sw) 
#line 3706 
                                                     goto out; else ;
  
#line 3708 
  (*(nvm->ops.acquire))(hw);
  
#line 3714 
  ret_val = e1000_valid_nvm_bank_detect_ich8lan(hw,& bank);
  
#line 3715 
  if (ret_val != 0) {
    {
      
#line 3716 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_update_nvm_checksum_spt", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Could not detect valid bank, assuming bank 0\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3716U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3716 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3716 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Could not detect valid bank, assuming bank 0\n"); else ;
    }
    
#line 3717 
    bank = 0U;
  }
  else ;
  
#line 3720 
  if (bank == 0U) {
    
#line 3721 
    new_bank_offset = nvm->flash_bank_size;
    
#line 3722 
    old_bank_offset = 0U;
    
#line 3723 
    ret_val = e1000_erase_flash_bank_ich8lan(hw,1U);
    
#line 3724 
    if (ret_val != 0) 
#line 3725 
                      goto release; else ;
  }
  else {
    
#line 3727 
    old_bank_offset = nvm->flash_bank_size;
    
#line 3728 
    new_bank_offset = 0U;
    
#line 3729 
    ret_val = e1000_erase_flash_bank_ich8lan(hw,0U);
    
#line 3730 
    if (ret_val != 0) 
#line 3731 
                      goto release; else ;
  }
  
#line 3733 
  i = 0U;
  
#line 3733 
  goto ldv_48335;
  ldv_48334: 
#line 3734 
  ;
  
#line 3738 
  ret_val = e1000_read_flash_dword_ich8lan(hw,i + old_bank_offset,& dword);
  
#line 3742 
  if ((int)dev_spec->shadow_ram[i].modified != 0) {
    
#line 3743 
    dword &= 4294901760U;
    
#line 3744 
    dword = (unsigned int)dev_spec->shadow_ram[i].value | dword;
  }
  else ;
  
#line 3746 
  if ((int)dev_spec->shadow_ram[i + 1U].modified != 0) {
    
#line 3747 
    dword &= 65535U;
    
#line 3748 
    dword = (unsigned int)((int)dev_spec->shadow_ram[i + 1U].value << 16) | dword;
  }
  else ;
  
#line 3751 
  if (ret_val != 0) 
#line 3752 
                    goto ldv_48333; else ;
  
#line 3761 
  if (i == 18U) 
#line 3762 
                dword |= 3221225472U; else ;
  
#line 3765 
  act_offset = (i + new_bank_offset) << 1;
  
#line 3767 
  usleep_range(100UL,200UL);
  
#line 3770 
  act_offset = i + new_bank_offset;
  
#line 3771 
  ret_val = e1000_retry_write_flash_dword_ich8lan(hw,act_offset,dword);
  
#line 3773 
  if (ret_val != 0) 
#line 3774 
                    goto ldv_48333; else ;
  
#line 3733 
  i += 2U;
  ldv_48335: 
#line 3734 
  ;
  
#line 3733 
  if (i <= 2047U) 
#line 3735 
                  goto ldv_48334; else 
#line 3738 
                                       goto ldv_48333;
  ldv_48333: 
#line 3739 
  ;
  
#line 3780 
  if (ret_val != 0) {
    {
      
#line 3782 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_update_nvm_checksum_spt", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Flash commit failed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3782U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3782 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 3782 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Flash commit failed.\n"); else ;
    }
    
#line 3783 
    goto release;
  }
  else ;
  
#line 3791 
  act_offset = new_bank_offset + 19U;
  
#line 3794 
  act_offset -= 1U;
  
#line 3795 
  ret_val = e1000_read_flash_dword_ich8lan(hw,act_offset,& dword);
  
#line 3797 
  if (ret_val != 0) 
#line 3798 
                    goto release; else ;
  
#line 3800 
  dword &= 3221225471U;
  
#line 3801 
  ret_val = e1000_retry_write_flash_dword_ich8lan(hw,act_offset,dword);
  
#line 3803 
  if (ret_val != 0) 
#line 3804 
                    goto release; else ;
  
#line 3811 
  act_offset = (old_bank_offset + 19U) * 2U + 1U;
  
#line 3814 
  act_offset = old_bank_offset + 18U;
  
#line 3815 
  ret_val = e1000_read_flash_dword_ich8lan(hw,act_offset,& dword);
  
#line 3817 
  if (ret_val != 0) 
#line 3818 
                    goto release; else ;
  
#line 3820 
  dword &= 16777215U;
  
#line 3821 
  ret_val = e1000_retry_write_flash_dword_ich8lan(hw,act_offset,dword);
  
#line 3823 
  if (ret_val != 0) 
#line 3824 
                    goto release; else ;
  
#line 3827 
  i = 0U;
  
#line 3827 
  goto ldv_48338;
  ldv_48337: 
#line 3828 
  ;
  
#line 3828 
  dev_spec->shadow_ram[i].modified = (_Bool)0;
  
#line 3829 
  dev_spec->shadow_ram[i].value = (unsigned short)65535U;
  
#line 3827 
  i += 1U;
  ldv_48338: 
#line 3828 
  ;
  
#line 3827 
  if (i <= 2047U) 
#line 3829 
                  goto ldv_48337; else 
#line 3832 
                                       goto ldv_48339;
  ldv_48339: 
#line 3833 
  ;
  release: 
#line 3832 
  ;
  
#line 3833 
  (*(nvm->ops.release))(hw);
  
#line 3838 
  if (ret_val == 0) {
    
#line 3839 
    (*(nvm->ops.reload))(hw);
    
#line 3840 
    usleep_range(10000UL,20000UL);
  }
  else ;
  out: 
#line 3843 
  ;
  
#line 3844 
  if (ret_val != 0) {
    
#line 3845 
    struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_update_nvm_checksum_spt", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "NVM update error: %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3845U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 3845 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 3845 
                                                          __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"NVM update error: %d\n",ret_val); else ;
  }
  else ;
  
#line 3847 
  return ret_val;
}


#line 3861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_update_nvm_checksum_ich8lan(struct e1000_hw *hw)
{
  u32 i;
  u32 act_offset;
  u32 new_bank_offset;
  u32 old_bank_offset;
  u32 bank;
  s32 ret_val;
  
#line 3863 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 3864 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  
#line 3867 
  u16 data = (unsigned short)0U;
  
#line 3869 
  ret_val = e1000e_update_nvm_checksum_generic(hw);
  
#line 3870 
  if (ret_val != 0) 
#line 3871 
                    goto out; else ;
  
#line 3873 
  if (nvm->type != (unsigned int)e1000_nvm_flash_sw) 
#line 3874 
                                                     goto out; else ;
  
#line 3876 
  (*(nvm->ops.acquire))(hw);
  
#line 3882 
  ret_val = e1000_valid_nvm_bank_detect_ich8lan(hw,& bank);
  
#line 3883 
  if (ret_val != 0) {
    {
      
#line 3884 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_update_nvm_checksum_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Could not detect valid bank, assuming bank 0\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3884U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3884 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3884 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Could not detect valid bank, assuming bank 0\n"); else ;
    }
    
#line 3885 
    bank = 0U;
  }
  else ;
  
#line 3888 
  if (bank == 0U) {
    
#line 3889 
    new_bank_offset = nvm->flash_bank_size;
    
#line 3890 
    old_bank_offset = 0U;
    
#line 3891 
    ret_val = e1000_erase_flash_bank_ich8lan(hw,1U);
    
#line 3892 
    if (ret_val != 0) 
#line 3893 
                      goto release; else ;
  }
  else {
    
#line 3895 
    old_bank_offset = nvm->flash_bank_size;
    
#line 3896 
    new_bank_offset = 0U;
    
#line 3897 
    ret_val = e1000_erase_flash_bank_ich8lan(hw,0U);
    
#line 3898 
    if (ret_val != 0) 
#line 3899 
                      goto release; else ;
  }
  
#line 3901 
  i = 0U;
  
#line 3901 
  goto ldv_48359;
  ldv_48358: 
#line 3902 
  ;
  
#line 3902 
  if ((int)dev_spec->shadow_ram[i].modified != 0) 
#line 3903 
                                                  data = dev_spec->shadow_ram[i].value;
  else {
    
#line 3905 
    ret_val = e1000_read_flash_word_ich8lan(hw,i + old_bank_offset,& data);
    
#line 3908 
    if (ret_val != 0) 
#line 3909 
                      goto ldv_48357; else ;
  }
  
#line 3919 
  if (i == 19U) 
#line 3920 
                data = (unsigned short)((unsigned int)data | 49152U); else ;
  
#line 3923 
  act_offset = (i + new_bank_offset) << 1;
  
#line 3925 
  usleep_range(100UL,200UL);
  
#line 3927 
  ret_val = e1000_retry_write_flash_byte_ich8lan(hw,act_offset,(unsigned char)((int)((unsigned char)data)));
  
#line 3930 
  if (ret_val != 0) 
#line 3931 
                    goto ldv_48357; else ;
  
#line 3933 
  usleep_range(100UL,200UL);
  
#line 3934 
  ret_val = e1000_retry_write_flash_byte_ich8lan(hw,act_offset + 1U,(unsigned char)((int)((unsigned char)((int)data >> 8))));
  
#line 3937 
  if (ret_val != 0) 
#line 3938 
                    goto ldv_48357; else ;
  
#line 3901 
  i += 1U;
  ldv_48359: 
#line 3902 
  ;
  
#line 3901 
  if (i <= 2047U) 
#line 3903 
                  goto ldv_48358; else 
#line 3906 
                                       goto ldv_48357;
  ldv_48357: 
#line 3907 
  ;
  
#line 3944 
  if (ret_val != 0) {
    {
      
#line 3946 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_update_nvm_checksum_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Flash commit failed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3946U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3946 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 3946 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Flash commit failed.\n"); else ;
    }
    
#line 3947 
    goto release;
  }
  else ;
  
#line 3955 
  act_offset = new_bank_offset + 19U;
  
#line 3956 
  ret_val = e1000_read_flash_word_ich8lan(hw,act_offset,& data);
  
#line 3957 
  if (ret_val != 0) 
#line 3958 
                    goto release; else ;
  
#line 3960 
  data = (unsigned short)((unsigned int)data & 49151U);
  
#line 3961 
  ret_val = e1000_retry_write_flash_byte_ich8lan(hw,act_offset * 2U + 1U,(unsigned char)((int)((unsigned char)((int)data >> 8))));
  
#line 3964 
  if (ret_val != 0) 
#line 3965 
                    goto release; else ;
  
#line 3972 
  act_offset = (old_bank_offset + 19U) * 2U + 1U;
  
#line 3973 
  ret_val = e1000_retry_write_flash_byte_ich8lan(hw,act_offset,(unsigned char)0);
  
#line 3974 
  if (ret_val != 0) 
#line 3975 
                    goto release; else ;
  
#line 3978 
  i = 0U;
  
#line 3978 
  goto ldv_48362;
  ldv_48361: 
#line 3979 
  ;
  
#line 3979 
  dev_spec->shadow_ram[i].modified = (_Bool)0;
  
#line 3980 
  dev_spec->shadow_ram[i].value = (unsigned short)65535U;
  
#line 3978 
  i += 1U;
  ldv_48362: 
#line 3979 
  ;
  
#line 3978 
  if (i <= 2047U) 
#line 3980 
                  goto ldv_48361; else 
#line 3983 
                                       goto ldv_48363;
  ldv_48363: 
#line 3984 
  ;
  release: 
#line 3983 
  ;
  
#line 3984 
  (*(nvm->ops.release))(hw);
  
#line 3989 
  if (ret_val == 0) {
    
#line 3990 
    (*(nvm->ops.reload))(hw);
    
#line 3991 
    usleep_range(10000UL,20000UL);
  }
  else ;
  out: 
#line 3994 
  ;
  
#line 3995 
  if (ret_val != 0) {
    
#line 3996 
    struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_update_nvm_checksum_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "NVM update error: %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3996U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 3996 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 3996 
                                                          __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"NVM update error: %d\n",ret_val); else ;
  }
  else ;
  
#line 3998 
  return ret_val;
}


#line 4009  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_validate_nvm_checksum_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 data;
  u16 word;
  u16 valid_csum_mask;
  s32 tmp;
  
#line 4021 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)11: 
#line 4022 
    ;
    case (unsigned int)12: 
#line 4023 
    ;
    
#line 4024 
    word = (unsigned short)3U;
    
#line 4025 
    valid_csum_mask = (unsigned short)1U;
    
#line 4026 
    goto ldv_48374;
    default: 
#line 4027 
    ;
    
#line 4028 
    word = (unsigned short)25U;
    
#line 4029 
    valid_csum_mask = (unsigned short)64U;
    
#line 4030 
    goto ldv_48374;
  }
  ldv_48374: 
#line 4033 
  ;
  
#line 4033 
  ret_val = e1000_read_nvm(hw,(unsigned short)((int)word),(unsigned short)1,& data);
  
#line 4034 
  if (ret_val != 0) {
    
#line 4035 
    __retres = ret_val;
    
#line 4035 
    goto return_label;
  }
  else ;
  
#line 4037 
  if ((unsigned int)((int)data & (int)valid_csum_mask) == 0U) {
    
#line 4038 
    data = (unsigned short)((int)data | (int)valid_csum_mask);
    
#line 4039 
    ret_val = e1000_write_nvm(hw,(unsigned short)((int)word),(unsigned short)1,& data);
    
#line 4040 
    if (ret_val != 0) {
      
#line 4041 
      __retres = ret_val;
      
#line 4041 
      goto return_label;
    }
    else ;
    
#line 4042 
    ret_val = e1000e_update_nvm_checksum(hw);
    
#line 4043 
    if (ret_val != 0) {
      
#line 4044 
      __retres = ret_val;
      
#line 4044 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 4047 
  tmp = e1000e_validate_nvm_checksum_generic(hw);
  
#line 4047 
  __retres = tmp;
  return_label: 
#line 4047 
                return __retres;
}


#line 4060  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000e_write_protect_nvm_ich8lan(struct e1000_hw *hw)
{
  union ich8_flash_protected_range pr0;
  union ich8_hws_flash_status hsfsts;
  u32 gfpreg;
  
#line 4062 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 4067 
  (*(nvm->ops.acquire))(hw);
  
#line 4069 
  gfpreg = __er32flash(hw,0UL);
  
#line 4072 
  pr0.regval = __er32flash(hw,116UL);
  
#line 4073 
  pr0.range.base = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))))gfpreg;
  
#line 4074 
  pr0.range.limit = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))))(gfpreg >> 16);
  
#line 4075 
  pr0.range.wpe = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
  
#line 4076 
  __ew32flash(hw,116UL,pr0.regval);
  
#line 4083 
  hsfsts.regval = __er16flash(hw,4UL);
  
#line 4084 
  hsfsts.hsf_status.flockdn = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
  
#line 4085 
  __ew32flash(hw,4UL,(unsigned int)hsfsts.regval);
  
#line 4087 
  (*(nvm->ops.release))(hw);
  
#line 4088 
  return;
}


#line 4099  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_write_flash_data_ich8lan(struct e1000_hw *hw, u32 offset, u8 size, u16 data)
{
  s32 __retres;
  union ich8_hws_flash_status hsfsts;
  union ich8_hws_flash_ctrl hsflctl;
  u32 flash_linear_addr;
  s32 ret_val;
  u8 tmp_0;
  
#line 4105 
  u32 flash_data = 0U;
  
#line 4107 
  u8 count = (unsigned char)0U;
  
#line 4109 
  if (hw->mac.type == (unsigned int)e1000_pch_spt) {
    
#line 4110 
    if ((unsigned int)size != 4U || offset > 16777215U) {
      
#line 4111 
      __retres = -1;
      
#line 4111 
      goto return_label;
    }
    else ;
  }
  else 
    
#line 4113 
    if ((unsigned int)size + 255U > 1U || offset > 16777215U) {
      
#line 4114 
      __retres = -1;
      
#line 4114 
      goto return_label;
    }
    else ;
  
#line 4117 
  flash_linear_addr = (offset & 16777215U) + hw->nvm.flash_base_addr;
  ldv_48399: 
#line 4119 
  ;
  
#line 4121 
  __const_udelay(4295UL);
  
#line 4123 
  ret_val = e1000_flash_cycle_init_ich8lan(hw);
  
#line 4124 
  if (ret_val != 0) 
#line 4125 
                    goto ldv_48395; else ;
  
#line 4129 
  if (hw->mac.type == (unsigned int)e1000_pch_spt) {
    u32 tmp;
    
#line 4130 
    tmp = __er32flash(hw,4UL);
    
#line 4130 
    hsflctl.regval = (unsigned short)(tmp >> 16);
  }
  else 
#line 4132 
       hsflctl.regval = __er16flash(hw,6UL);
  
#line 4135 
  hsflctl.hsf_ctrl.fldbcount = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))((unsigned int)size + 255U);
  
#line 4136 
  hsflctl.hsf_ctrl.flcycle = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U;
  
#line 4141 
  if (hw->mac.type == (unsigned int)e1000_pch_spt) 
#line 4142 
                                                   __ew32flash(hw,4UL,(unsigned int)((int)hsflctl.regval << 16)); else 
                                                                    
#line 4144 
                                                                    __ew16flash(hw,6UL,(unsigned short)((int)hsflctl.regval));
  
#line 4146 
  __ew32flash(hw,8UL,flash_linear_addr);
  
#line 4148 
  if ((unsigned int)size == 1U) 
#line 4149 
                                flash_data = (unsigned int)data & 255U; else 
                                                                    
#line 4151 
                                                                    flash_data = (unsigned int)data;
  
#line 4153 
  __ew32flash(hw,16UL,flash_data);
  
#line 4158 
  ret_val = e1000_flash_cycle_ich8lan(hw,10000000U);
  
#line 4161 
  if (ret_val == 0) 
#line 4162 
                    goto ldv_48395; else ;
  
#line 4169 
  hsfsts.regval = __er16flash(hw,4UL);
  
#line 4170 
  if ((unsigned int)*((unsigned char *)(& hsfsts.hsf_status) + 0UL) != 0U) 
    
#line 4172 
    goto ldv_48396; else ;
  
#line 4173 
  if ((unsigned int)*((unsigned char *)(& hsfsts.hsf_status) + 0UL) == 0U) {
    {
      
#line 4174 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_write_flash_data_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Timeout error - flash cycle did not complete.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))4174U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 4174 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 4174 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Timeout error - flash cycle did not complete.\n"); else ;
    }
    
#line 4175 
    goto ldv_48395;
  }
  else ;
  ldv_48396: 
#line 4177 
  ;
  
#line 4177 
  tmp_0 = count;
  
#line 4177 
  count = (u8)((int)count + 1);
  
#line 4177 
  ;
  
#line 4177 
  if ((unsigned int)tmp_0 <= 9U) 
#line 4179 
                                 goto ldv_48399; else 
#line 4182 
                                                      goto ldv_48395;
  ldv_48395: 
#line 4183 
  ;
  
#line 4179 
  __retres = ret_val;
  return_label: 
#line 4179 
                return __retres;
}


#line 4190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_write_flash_data32_ich8lan(struct e1000_hw *hw, u32 offset, u32 data)
{
  s32 __retres;
  union ich8_hws_flash_status hsfsts;
  union ich8_hws_flash_ctrl hsflctl;
  u32 flash_linear_addr;
  s32 ret_val;
  u8 tmp_0;
  
#line 4197 
  u8 count = (unsigned char)0U;
  
#line 4199 
  if (hw->mac.type == (unsigned int)e1000_pch_spt) {
    
#line 4200 
    if (offset > 16777215U) {
      
#line 4201 
      __retres = -1;
      
#line 4201 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 4203 
  flash_linear_addr = (offset & 16777215U) + hw->nvm.flash_base_addr;
  ldv_48414: 
#line 4205 
  ;
  
#line 4206 
  __const_udelay(4295UL);
  
#line 4208 
  ret_val = e1000_flash_cycle_init_ich8lan(hw);
  
#line 4209 
  if (ret_val != 0) 
#line 4210 
                    goto ldv_48410; else ;
  
#line 4215 
  if (hw->mac.type == (unsigned int)e1000_pch_spt) {
    u32 tmp;
    
#line 4216 
    tmp = __er32flash(hw,4UL);
    
#line 4216 
    hsflctl.regval = (unsigned short)(tmp >> 16);
  }
  else 
#line 4219 
       hsflctl.regval = __er16flash(hw,6UL);
  
#line 4221 
  hsflctl.hsf_ctrl.fldbcount = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))3U;
  
#line 4222 
  hsflctl.hsf_ctrl.flcycle = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U;
  
#line 4228 
  if (hw->mac.type == (unsigned int)e1000_pch_spt) 
#line 4229 
                                                   __ew32flash(hw,4UL,(unsigned int)((int)hsflctl.regval << 16)); else 
                                                                    
#line 4231 
                                                                    __ew16flash(hw,6UL,(unsigned short)((int)hsflctl.regval));
  
#line 4233 
  __ew32flash(hw,8UL,flash_linear_addr);
  
#line 4235 
  __ew32flash(hw,16UL,data);
  
#line 4240 
  ret_val = e1000_flash_cycle_ich8lan(hw,10000000U);
  
#line 4244 
  if (ret_val == 0) 
#line 4245 
                    goto ldv_48410; else ;
  
#line 4252 
  hsfsts.regval = __er16flash(hw,4UL);
  
#line 4254 
  if ((unsigned int)*((unsigned char *)(& hsfsts.hsf_status) + 0UL) != 0U) 
    
#line 4256 
    goto ldv_48411; else ;
  
#line 4257 
  if ((unsigned int)*((unsigned char *)(& hsfsts.hsf_status) + 0UL) == 0U) {
    {
      
#line 4258 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_write_flash_data32_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Timeout error - flash cycle did not complete.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))4258U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 4258 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 4258 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Timeout error - flash cycle did not complete.\n"); else ;
    }
    
#line 4259 
    goto ldv_48410;
  }
  else ;
  ldv_48411: 
#line 4261 
  ;
  
#line 4261 
  tmp_0 = count;
  
#line 4261 
  count = (u8)((int)count + 1);
  
#line 4261 
  ;
  
#line 4261 
  if ((unsigned int)tmp_0 <= 9U) 
#line 4263 
                                 goto ldv_48414; else 
#line 4266 
                                                      goto ldv_48410;
  ldv_48410: 
#line 4267 
  ;
  
#line 4263 
  __retres = ret_val;
  return_label: 
#line 4263 
                return __retres;
}


#line 4274  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_write_flash_byte_ich8lan(struct e1000_hw *hw, u32 offset, u8 data)
{
  s32 tmp;
  
#line 4277 
  u16 word = (unsigned short)data;
  
#line 4279 
  tmp = e1000_write_flash_data_ich8lan(hw,offset,(unsigned char)1,(unsigned short)((int)word));
  
#line 4279 
  return tmp;
}


#line 4291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_retry_write_flash_dword_ich8lan(struct e1000_hw *hw, u32 offset, u32 dword)
{
  s32 __retres;
  s32 ret_val;
  u16 program_retries;
  
#line 4298 
  offset <<= 1;
  
#line 4299 
  ret_val = e1000_write_flash_data32_ich8lan(hw,offset,dword);
  
#line 4301 
  if (ret_val == 0) {
    
#line 4302 
    __retres = ret_val;
    
#line 4302 
    goto return_label;
  }
  else ;
  
#line 4303 
  program_retries = (unsigned short)0U;
  
#line 4303 
  goto ldv_48432;
  ldv_48431: 
#line 4304 
  ;
  {
    
#line 4304 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_retry_write_flash_dword_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Retrying Byte %8.8X at offset %u\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))4304U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 4304 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 4304 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Retrying Byte %8.8X at offset %u\n",dword,offset); else ;
  }
  
#line 4305 
  usleep_range(100UL,200UL);
  
#line 4306 
  ret_val = e1000_write_flash_data32_ich8lan(hw,offset,dword);
  
#line 4307 
  if (ret_val == 0) 
#line 4308 
                    goto ldv_48430; else ;
  
#line 4303 
  program_retries = (u16)((int)program_retries + 1);
  ldv_48432: 
#line 4304 
  ;
  
#line 4303 
  if ((unsigned int)program_retries <= 99U) 
#line 4305 
                                            goto ldv_48431; else 
#line 4308 
                                                                 goto ldv_48430;
  ldv_48430: 
#line 4309 
  ;
  
#line 4310 
  if ((unsigned int)program_retries == 100U) {
    
#line 4311 
    __retres = -1;
    
#line 4311 
    goto return_label;
  }
  else ;
  
#line 4313 
  __retres = 0;
  return_label: 
#line 4313 
                return __retres;
}


#line 4325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_retry_write_flash_byte_ich8lan(struct e1000_hw *hw, u32 offset, u8 byte)
{
  s32 __retres;
  s32 ret_val;
  u16 program_retries;
  
#line 4331 
  ret_val = e1000_write_flash_byte_ich8lan(hw,offset,(unsigned char)((int)byte));
  
#line 4332 
  if (ret_val == 0) {
    
#line 4333 
    __retres = ret_val;
    
#line 4333 
    goto return_label;
  }
  else ;
  
#line 4335 
  program_retries = (unsigned short)0U;
  
#line 4335 
  goto ldv_48444;
  ldv_48443: 
#line 4336 
  ;
  {
    
#line 4336 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_retry_write_flash_byte_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Retrying Byte %2.2X at offset %u\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))4336U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 4336 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 4336 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Retrying Byte %2.2X at offset %u\n",(int)byte,offset); else ;
  }
  
#line 4337 
  usleep_range(100UL,200UL);
  
#line 4338 
  ret_val = e1000_write_flash_byte_ich8lan(hw,offset,(unsigned char)((int)byte));
  
#line 4339 
  if (ret_val == 0) 
#line 4340 
                    goto ldv_48442; else ;
  
#line 4335 
  program_retries = (u16)((int)program_retries + 1);
  ldv_48444: 
#line 4336 
  ;
  
#line 4335 
  if ((unsigned int)program_retries <= 99U) 
#line 4337 
                                            goto ldv_48443; else 
#line 4340 
                                                                 goto ldv_48442;
  ldv_48442: 
#line 4341 
  ;
  
#line 4342 
  if ((unsigned int)program_retries == 100U) {
    
#line 4343 
    __retres = -1;
    
#line 4343 
    goto return_label;
  }
  else ;
  
#line 4345 
  __retres = 0;
  return_label: 
#line 4345 
                return __retres;
}


#line 4356  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_erase_flash_bank_ich8lan(struct e1000_hw *hw, u32 bank)
{
  s32 __retres;
  union ich8_hws_flash_status hsfsts;
  union ich8_hws_flash_ctrl hsflctl;
  u32 flash_linear_addr;
  s32 ret_val;
  s32 j;
  s32 iteration;
  s32 sector_size;
  u32 tmp;
  
#line 4358 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 4363 
  u32 flash_bank_size = nvm->flash_bank_size * 2U;
  
#line 4365 
  s32 count = 0;
  
#line 4368 
  hsfsts.regval = __er16flash(hw,4UL);
  
#line 4382 
  switch ((int)hsfsts.hsf_status.berasesz) {
    case 0: 
#line 4383 
    ;
    
#line 4385 
    sector_size = 256;
    
#line 4386 
    iteration = (int)(flash_bank_size / 256U);
    
#line 4387 
    goto ldv_48460;
    case 1: 
#line 4388 
    ;
    
#line 4389 
    sector_size = 4096;
    
#line 4390 
    iteration = 1;
    
#line 4391 
    goto ldv_48460;
    case 2: 
#line 4392 
    ;
    
#line 4393 
    sector_size = 8192;
    
#line 4394 
    iteration = 1;
    
#line 4395 
    goto ldv_48460;
    case 3: 
#line 4396 
    ;
    
#line 4397 
    sector_size = 65536;
    
#line 4398 
    iteration = 1;
    
#line 4399 
    goto ldv_48460;
    default: 
#line 4400 
    ;
    
#line 4401 
    __retres = -1;
    
#line 4401 
    goto return_label;
  }
  ldv_48460: 
#line 4405 
  ;
  
#line 4405 
  flash_linear_addr = hw->nvm.flash_base_addr;
  
#line 4406 
  if (bank != 0U) 
#line 4406 
                  tmp = flash_bank_size; else 
#line 4406 
                                              tmp = 0U;
  
#line 4406 
  flash_linear_addr = tmp + flash_linear_addr;
  
#line 4408 
  j = 0;
  
#line 4408 
  goto ldv_48470;
  ldv_48469: 
#line 4409 
  ;
  ldv_48468: 
#line 4410 
  ;
  {
    
#line 4410 
    u32 timeout = 10000000U;
    
#line 4413 
    ret_val = e1000_flash_cycle_init_ich8lan(hw);
    
#line 4414 
    if (ret_val != 0) {
      
#line 4415 
      __retres = ret_val;
      
#line 4415 
      goto return_label;
    }
    else ;
    
#line 4420 
    if (hw->mac.type == (unsigned int)e1000_pch_spt) {
      u32 tmp_0;
      
#line 4421 
      tmp_0 = __er32flash(hw,4UL);
      
#line 4421 
      hsflctl.regval = (unsigned short)(tmp_0 >> 16);
    }
    else 
#line 4424 
         hsflctl.regval = __er16flash(hw,6UL);
    
#line 4426 
    hsflctl.hsf_ctrl.flcycle = (unsigned short __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))3U;
    
#line 4427 
    if (hw->mac.type == (unsigned int)e1000_pch_spt) 
#line 4428 
                                                     __ew32flash(hw,4UL,(unsigned int)((int)hsflctl.regval << 16)); else 
                                                                    
#line 4431 
                                                                    __ew16flash(hw,6UL,(unsigned short)((int)hsflctl.regval));
    
#line 4437 
    flash_linear_addr = (unsigned int)(j * sector_size) + flash_linear_addr;
    
#line 4438 
    __ew32flash(hw,8UL,flash_linear_addr);
    
#line 4440 
    ret_val = e1000_flash_cycle_ich8lan(hw,timeout);
    
#line 4441 
    if (ret_val == 0) 
#line 4442 
                      goto ldv_48466; else ;
    
#line 4448 
    hsfsts.regval = __er16flash(hw,4UL);
    
#line 4449 
    if ((unsigned int)*((unsigned char *)(& hsfsts.hsf_status) + 0UL) != 0U) 
      
#line 4451 
      goto ldv_48467;
    else 
      
#line 4452 
      if ((unsigned int)*((unsigned char *)(& hsfsts.hsf_status) + 0UL) == 0U) {
        
#line 4453 
        __retres = ret_val;
        
#line 4453 
        goto return_label;
      }
      else ;
  }
  ldv_48467: 
#line 4455 
  ;
  
#line 4454 
  count += 1;
  
#line 4454 
  if (count <= 9) 
#line 4456 
                  goto ldv_48468; else 
#line 4459 
                                       goto ldv_48466;
  ldv_48466: 
#line 4460 
  ;
  
#line 4408 
  j += 1;
  ldv_48470: 
#line 4409 
  ;
  
#line 4408 
  if (j < iteration) 
#line 4410 
                     goto ldv_48469; else 
#line 4413 
                                          goto ldv_48471;
  ldv_48471: 
#line 4414 
  ;
  
#line 4457 
  __retres = 0;
  return_label: 
#line 4457 
                return __retres;
}


#line 4469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_valid_led_default_ich8lan(struct e1000_hw *hw, u16 *data)
{
  s32 __retres;
  s32 ret_val;
  
#line 4473 
  ret_val = e1000_read_nvm(hw,(unsigned short)4,(unsigned short)1,data);
  
#line 4474 
  if (ret_val != 0) {
    {
      
#line 4475 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_valid_led_default_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))4475U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 4475 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 4475 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"NVM Read Error\n"); else ;
    }
    
#line 4476 
    __retres = ret_val;
    
#line 4476 
    goto return_label;
  }
  else ;
  
#line 4479 
  if ((unsigned int)*data + 65535U > 65533U) 
#line 4480 
                                             *data = (unsigned short)6529U; else ;
  
#line 4482 
  __retres = 0;
  return_label: 
#line 4482 
                return __retres;
}


#line 4498  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_id_led_init_pchlan(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 data;
  u16 i;
  u16 temp;
  u16 shift;
  
#line 4500 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 4502 
  u32 const ledctl_on = 2U;
  
#line 4503 
  u32 const ledctl_off = 10U;
  
#line 4507 
  ret_val = (*(hw->nvm.ops.valid_led_default))(hw,& data);
  
#line 4508 
  if (ret_val != 0) {
    
#line 4509 
    __retres = ret_val;
    
#line 4509 
    goto return_label;
  }
  else ;
  
#line 4511 
  mac->ledctl_default = __er32(hw,3584UL);
  
#line 4512 
  mac->ledctl_mode1 = mac->ledctl_default;
  
#line 4513 
  mac->ledctl_mode2 = mac->ledctl_default;
  
#line 4515 
  i = (unsigned short)0U;
  
#line 4515 
  goto ldv_48507;
  ldv_48506: 
#line 4516 
  ;
  
#line 4516 
  temp = (unsigned short)((unsigned int)((unsigned short)((int)data >> ((int)i << 2))) & 15U);
  
#line 4517 
  shift = (unsigned short)((unsigned int)i * 5U);
  
#line 4518 
  switch ((int)temp) {
    case 4: 
#line 4519 
    ;
    case 5: 
#line 4520 
    ;
    case 6: 
#line 4521 
    ;
    
#line 4522 
    mac->ledctl_mode1 &= (unsigned int)(~ (31 << (int)shift));
    
#line 4523 
    mac->ledctl_mode1 |= 2U << (int)shift;
    
#line 4524 
    goto ldv_48493;
    case 7: 
#line 4525 
    ;
    case 8: 
#line 4526 
    ;
    case 9: 
#line 4527 
    ;
    
#line 4528 
    mac->ledctl_mode1 &= (unsigned int)(~ (31 << (int)shift));
    
#line 4529 
    mac->ledctl_mode1 |= 10U << (int)shift;
    
#line 4530 
    goto ldv_48493;
    default: 
#line 4531 
    ;
    
#line 4533 
    goto ldv_48493;
  }
  ldv_48493: 
#line 4535 
  ;
  
#line 4535 
  switch ((int)temp) {
    case 2: 
#line 4536 
    ;
    case 5: 
#line 4537 
    ;
    case 8: 
#line 4538 
    ;
    
#line 4539 
    mac->ledctl_mode2 &= (unsigned int)(~ (31 << (int)shift));
    
#line 4540 
    mac->ledctl_mode2 |= 2U << (int)shift;
    
#line 4541 
    goto ldv_48501;
    case 3: 
#line 4542 
    ;
    case 6: 
#line 4543 
    ;
    case 9: 
#line 4544 
    ;
    
#line 4545 
    mac->ledctl_mode2 &= (unsigned int)(~ (31 << (int)shift));
    
#line 4546 
    mac->ledctl_mode2 |= 10U << (int)shift;
    
#line 4547 
    goto ldv_48501;
    default: 
#line 4548 
    ;
    
#line 4550 
    goto ldv_48501;
  }
  ldv_48501: 
#line 4552 
  ;
  
#line 4515 
  i = (u16)((int)i + 1);
  ldv_48507: 
#line 4516 
  ;
  
#line 4515 
  if ((unsigned int)i <= 3U) 
#line 4517 
                             goto ldv_48506; else 
#line 4520 
                                                  goto ldv_48508;
  ldv_48508: 
#line 4521 
  ;
  
#line 4554 
  __retres = 0;
  return_label: 
#line 4554 
                return __retres;
}


#line 4564  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_get_bus_info_ich8lan(struct e1000_hw *hw)
{
  s32 ret_val;
  
#line 4566 
  struct e1000_bus_info *bus = & hw->bus;
  
#line 4569 
  ret_val = e1000e_get_bus_info_pcie(hw);
  
#line 4576 
  if (bus->width == (unsigned int)e1000_bus_width_unknown) 
#line 4577 
                                                           bus->width = e1000_bus_width_pcie_x1; else ;
  
#line 4579 
  return ret_val;
}


#line 4589  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_reset_hw_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  u16 kum_cfg;
  u32 ctrl;
  u32 reg;
  s32 ret_val;
  s32 tmp_0;
  
#line 4591 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  
#line 4599 
  ret_val = e1000e_disable_pcie_master(hw);
  
#line 4600 
  if (ret_val != 0) {
    
#line 4601 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_reset_hw_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "PCI-E Master disable polling has failed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))4601U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 4601 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 4601 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"PCI-E Master disable polling has failed.\n"); else ;
  }
  else ;
  {
    
#line 4603 
    struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_reset_hw_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Masking off all interrupts\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))4603U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 4603 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 4603 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Masking off all interrupts\n"); else ;
  }
  
#line 4604 
  __ew32(hw,216UL,4294967295U);
  
#line 4610 
  __ew32(hw,256UL,0U);
  
#line 4611 
  __ew32(hw,1024UL,8U);
  
#line 4612 
  __er32(hw,8UL);
  
#line 4614 
  usleep_range(10000UL,20000UL);
  
#line 4617 
  if (hw->mac.type == (unsigned int)e1000_ich8lan) {
    
#line 4619 
    __ew32(hw,4096UL,8U);
    
#line 4621 
    __ew32(hw,4104UL,16U);
  }
  else ;
  
#line 4624 
  if (hw->mac.type == (unsigned int)e1000_pchlan) {
    
#line 4626 
    ret_val = e1000_read_nvm(hw,(unsigned short)27,(unsigned short)1,& kum_cfg);
    
#line 4627 
    if (ret_val != 0) {
      
#line 4628 
      __retres = ret_val;
      
#line 4628 
      goto return_label;
    }
    else ;
    
#line 4630 
    if (((int)kum_cfg & 1) != 0) 
#line 4631 
                                 dev_spec->nvm_k1_enabled = (_Bool)1; else 
                                                                    
#line 4633 
                                                                    dev_spec->nvm_k1_enabled = (_Bool)0;
  }
  else ;
  
#line 4636 
  ctrl = __er32(hw,0UL);
  
#line 4638 
  tmp_0 = (*(hw->phy.ops.check_reset_block))(hw);
  
#line 4638 
  if (tmp_0 == 0) {
    
#line 4643 
    ctrl |= 2147483648U;
    
#line 4648 
    if (hw->mac.type == (unsigned int)e1000_pch2lan) {
      u32 tmp;
      
#line 4648 
      tmp = __er32(hw,23380UL);
      
#line 4648 
      if ((tmp & 32768U) == 0U) 
#line 4650 
                                e1000_gate_hw_phy_config_ich8lan(hw,(_Bool)1); else ;
    }
    else ;
  }
  else ;
  
#line 4652 
  ret_val = e1000_acquire_swflag_ich8lan(hw);
  {
    
#line 4653 
    struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_reset_hw_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Issuing a global reset to ich8lan\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))4653U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 4653 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 4653 
                                                          __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Issuing a global reset to ich8lan\n"); else ;
  }
  
#line 4654 
  __ew32(hw,0UL,ctrl | 67108864U);
  
#line 4656 
  msleep(20U);
  
#line 4659 
  if (hw->mac.type == (unsigned int)e1000_pch2lan) {
    
#line 4660 
    reg = __er32(hw,60UL);
    
#line 4661 
    reg &= 4093640703U;
    
#line 4662 
    reg |= 134217728U;
    
#line 4663 
    __ew32(hw,60UL,reg);
  }
  else ;
  
#line 4666 
  if (ret_val == 0) 
#line 4667 
                    clear_bit(2L,(unsigned long volatile *)(& (hw->adapter)->state)); else ;
  
#line 4669 
  if (ctrl < (u32)0) {
    
#line 4670 
    ret_val = (*(hw->phy.ops.get_cfg_done))(hw);
    
#line 4671 
    if (ret_val != 0) {
      
#line 4672 
      __retres = ret_val;
      
#line 4672 
      goto return_label;
    }
    else ;
    
#line 4674 
    ret_val = e1000_post_phy_reset_ich8lan(hw);
    
#line 4675 
    if (ret_val != 0) {
      
#line 4676 
      __retres = ret_val;
      
#line 4676 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 4683 
  if (hw->mac.type == (unsigned int)e1000_pchlan) 
#line 4684 
                                                  __ew32(hw,24400UL,1701143909U); else ;
  
#line 4686 
  __ew32(hw,216UL,4294967295U);
  
#line 4687 
  __er32(hw,192UL);
  
#line 4689 
  reg = __er32(hw,12292UL);
  
#line 4690 
  reg |= 327680U;
  
#line 4691 
  __ew32(hw,12292UL,reg);
  
#line 4693 
  __retres = 0;
  return_label: 
#line 4693 
                return __retres;
}


#line 4708  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_init_hw_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  u32 ctrl_ext;
  u32 txdctl;
  u32 snoop;
  s32 ret_val;
  u16 i;
  
#line 4710 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 4715 
  e1000_initialize_hw_bits_ich8lan(hw);
  
#line 4718 
  ret_val = (*(mac->ops.id_led_init))(hw);
  
#line 4720 
  if (ret_val != 0) {
    
#line 4721 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_init_hw_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Error initializing identification LED\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))4721U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 4721 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 4721 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Error initializing identification LED\n"); else ;
  }
  else ;
  
#line 4724 
  e1000e_init_rx_addrs(hw,(unsigned short)((int)mac->rar_entry_count));
  {
    
#line 4727 
    struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_init_hw_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Zeroing the MTA\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))4727U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 4727 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 4727 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Zeroing the MTA\n"); else ;
  }
  
#line 4728 
  i = (unsigned short)0U;
  
#line 4728 
  goto ldv_48539;
  ldv_48538: 
#line 4729 
  ;
  
#line 4729 
  __ew32(hw,(unsigned long)(((int)i << 2) + 20992),0U);
  
#line 4728 
  i = (u16)((int)i + 1);
  ldv_48539: 
#line 4729 
  ;
  
#line 4728 
  if ((int)mac->mta_reg_count > (int)i) 
#line 4730 
                                        goto ldv_48538; else 
#line 4733 
                                                             goto ldv_48540;
  ldv_48540: 
#line 4734 
  ;
  
#line 4735 
  if (hw->phy.type == (unsigned int)e1000_phy_82578) {
    
#line 4736 
    e1e_rphy(hw,24625U,& i);
    
#line 4737 
    i = (unsigned short)((unsigned int)i & 65519U);
    
#line 4738 
    e1e_wphy(hw,24625U,(unsigned short)((int)i));
    
#line 4739 
    ret_val = e1000_phy_hw_reset_ich8lan(hw);
    
#line 4740 
    if (ret_val != 0) {
      
#line 4741 
      __retres = ret_val;
      
#line 4741 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 4745 
  ret_val = (*(mac->ops.setup_link))(hw);
  
#line 4748 
  txdctl = __er32(hw,14376UL);
  
#line 4749 
  txdctl = (txdctl & 4274061311U) | 16842752U;
  
#line 4751 
  txdctl = (txdctl & 4278190016U) | 16777247U;
  
#line 4753 
  __ew32(hw,14376UL,txdctl);
  
#line 4754 
  txdctl = __er32(hw,14632UL);
  
#line 4755 
  txdctl = (txdctl & 4274061311U) | 16842752U;
  
#line 4757 
  txdctl = (txdctl & 4278190016U) | 16777247U;
  
#line 4759 
  __ew32(hw,14632UL,txdctl);
  
#line 4764 
  if (mac->type == (unsigned int)e1000_ich8lan) 
#line 4765 
                                                snoop = 63U; else 
#line 4767 
                                                                  snoop = 4294967232U;
  
#line 4768 
  e1000e_set_pcie_no_snoop(hw,snoop);
  
#line 4770 
  ctrl_ext = __er32(hw,24UL);
  
#line 4771 
  ctrl_ext |= 131072U;
  
#line 4772 
  __ew32(hw,24UL,ctrl_ext);
  
#line 4779 
  e1000_clear_hw_cntrs_ich8lan(hw);
  
#line 4781 
  __retres = ret_val;
  return_label: 
#line 4781 
                return __retres;
}


#line 4791  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_initialize_hw_bits_ich8lan(struct e1000_hw *hw)
{
  u32 reg;
  u32 tmp;
  
#line 4796 
  reg = __er32(hw,24UL);
  
#line 4797 
  reg |= 4194304U;
  
#line 4799 
  if (hw->mac.type > (unsigned int)e1000_ich10lan) 
#line 4800 
                                                   reg |= 1048576U; else ;
  
#line 4801 
  __ew32(hw,24UL,reg);
  
#line 4804 
  reg = __er32(hw,14376UL);
  
#line 4805 
  reg |= 4194304U;
  
#line 4806 
  __ew32(hw,14376UL,reg);
  
#line 4809 
  reg = __er32(hw,14632UL);
  
#line 4810 
  reg |= 4194304U;
  
#line 4811 
  __ew32(hw,14632UL,reg);
  
#line 4814 
  reg = __er32(hw,14400UL);
  
#line 4815 
  if (hw->mac.type == (unsigned int)e1000_ich8lan) 
#line 4816 
                                                   reg |= 805306368U; else ;
  
#line 4817 
  reg |= 226492416U;
  
#line 4818 
  __ew32(hw,14400UL,reg);
  
#line 4821 
  reg = __er32(hw,14656UL);
  
#line 4822 
  tmp = __er32(hw,1024UL);
  
#line 4822 
  if ((tmp & 268435456U) != 0U) 
#line 4823 
                                reg &= 4026531839U; else 
#line 4825 
                                                         reg |= 268435456U;
  
#line 4826 
  reg |= 1157627904U;
  
#line 4827 
  __ew32(hw,14656UL,reg);
  
#line 4830 
  if (hw->mac.type == (unsigned int)e1000_ich8lan) {
    
#line 4831 
    reg = __er32(hw,8UL);
    
#line 4832 
    reg &= 2147483647U;
    
#line 4833 
    __ew32(hw,8UL,reg);
  }
  else ;
  
#line 4839 
  reg = __er32(hw,20488UL);
  
#line 4840 
  reg |= 192U;
  
#line 4845 
  if (hw->mac.type == (unsigned int)e1000_ich8lan) 
#line 4846 
                                                   reg |= 196608U; else ;
  
#line 4847 
  __ew32(hw,20488UL,reg);
  
#line 4850 
  if ((unsigned int)hw->mac.type + 4294967285U <= 1U) {
    
#line 4852 
    reg = __er32(hw,4108UL);
    
#line 4853 
    reg |= 65536U;
    
#line 4854 
    __ew32(hw,4108UL,reg);
    
#line 4856 
    reg = __er32(hw,0UL);
    
#line 4857 
    reg |= 524288U;
    
#line 4858 
    __ew32(hw,0UL,reg);
  }
  else ;
  
#line 4860 
  return;
}


#line 4872  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_setup_link_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  s32 tmp;
  s32 tmp_0;
  
#line 4876 
  tmp = (*(hw->phy.ops.check_reset_block))(hw);
  
#line 4876 
  if (tmp != 0) {
    
#line 4877 
    __retres = 0;
    
#line 4877 
    goto return_label;
  }
  else ;
  
#line 4883 
  if (hw->fc.requested_mode == (unsigned int)e1000_fc_default) 
    
#line 4885 
    if (hw->mac.type == (unsigned int)e1000_pchlan) 
#line 4886 
                                                    hw->fc.requested_mode = e1000_fc_rx_pause; else 
                                                                    
#line 4888 
                                                                    hw->fc.requested_mode = e1000_fc_full;
  else ;
  
#line 4894 
  hw->fc.current_mode = hw->fc.requested_mode;
  {
    
#line 4896 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_setup_link_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "After fix-ups FlowControl is now = %x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))4896U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 4896 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 4896 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"After fix-ups FlowControl is now = %x\n",(unsigned int)hw->fc.current_mode); else ;
  }
  
#line 4899 
  ret_val = (*(hw->mac.ops.setup_physical_interface))(hw);
  
#line 4900 
  if (ret_val != 0) {
    
#line 4901 
    __retres = ret_val;
    
#line 4901 
    goto return_label;
  }
  else ;
  
#line 4903 
  __ew32(hw,368UL,(unsigned int)hw->fc.pause_time);
  
#line 4904 
  if (((hw->phy.type == (unsigned int)e1000_phy_82578 || hw->phy.type == (unsigned int)e1000_phy_82579) || hw->phy.type == (unsigned int)e1000_phy_i217) || hw->phy.type == (unsigned int)e1000_phy_82577) {
    
#line 4908 
    __ew32(hw,24384UL,(unsigned int)hw->fc.refresh_time);
    
#line 4910 
    ret_val = e1e_wphy(hw,24635U,(unsigned short)((int)hw->fc.pause_time));
    
#line 4912 
    if (ret_val != 0) {
      
#line 4913 
      __retres = ret_val;
      
#line 4913 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 4916 
  tmp_0 = e1000e_set_fc_watermarks(hw);
  
#line 4916 
  __retres = tmp_0;
  return_label: 
#line 4916 
                return __retres;
}


#line 4927  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_setup_copper_link_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  u32 ctrl;
  s32 ret_val;
  u16 reg_data;
  s32 tmp;
  
#line 4933 
  ctrl = __er32(hw,0UL);
  
#line 4934 
  ctrl |= 64U;
  
#line 4935 
  ctrl &= 4294961151U;
  
#line 4936 
  __ew32(hw,0UL,ctrl);
  
#line 4942 
  ret_val = e1000e_write_kmrn_reg(hw,4U,(unsigned short)65535);
  
#line 4943 
  if (ret_val != 0) {
    
#line 4944 
    __retres = ret_val;
    
#line 4944 
    goto return_label;
  }
  else ;
  
#line 4945 
  ret_val = e1000e_read_kmrn_reg(hw,9U,& reg_data);
  
#line 4947 
  if (ret_val != 0) {
    
#line 4948 
    __retres = ret_val;
    
#line 4948 
    goto return_label;
  }
  else ;
  
#line 4949 
  reg_data = (unsigned short)((unsigned int)reg_data | 63U);
  
#line 4950 
  ret_val = e1000e_write_kmrn_reg(hw,9U,(unsigned short)((int)reg_data));
  
#line 4952 
  if (ret_val != 0) {
    
#line 4953 
    __retres = ret_val;
    
#line 4953 
    goto return_label;
  }
  else ;
  
#line 4955 
  switch ((unsigned int)hw->phy.type) {
    case (unsigned int)6: 
#line 4956 
    ;
    
#line 4957 
    ret_val = e1000e_copper_link_setup_igp(hw);
    
#line 4958 
    if (ret_val != 0) {
      
#line 4959 
      __retres = ret_val;
      
#line 4959 
      goto return_label;
    }
    else ;
    
#line 4960 
    goto ldv_48558;
    case (unsigned int)8: 
#line 4961 
    ;
    case (unsigned int)9: 
#line 4962 
    ;
    
#line 4963 
    ret_val = e1000e_copper_link_setup_m88(hw);
    
#line 4964 
    if (ret_val != 0) {
      
#line 4965 
      __retres = ret_val;
      
#line 4965 
      goto return_label;
    }
    else ;
    
#line 4966 
    goto ldv_48558;
    case (unsigned int)10: 
#line 4967 
    ;
    case (unsigned int)11: 
#line 4968 
    ;
    
#line 4969 
    ret_val = e1000_copper_link_setup_82577(hw);
    
#line 4970 
    if (ret_val != 0) {
      
#line 4971 
      __retres = ret_val;
      
#line 4971 
      goto return_label;
    }
    else ;
    
#line 4972 
    goto ldv_48558;
    case (unsigned int)7: 
#line 4973 
    ;
    
#line 4974 
    ret_val = e1e_rphy(hw,28U,& reg_data);
    
#line 4975 
    if (ret_val != 0) {
      
#line 4976 
      __retres = ret_val;
      
#line 4976 
      goto return_label;
    }
    else ;
    
#line 4978 
    reg_data = (unsigned short)((unsigned int)reg_data & 65407U);
    
#line 4980 
    switch ((int)hw->phy.mdix) {
      case 1: 
#line 4981 
      ;
      
#line 4982 
      reg_data = (unsigned short)((unsigned int)reg_data & 65471U);
      
#line 4983 
      goto ldv_48565;
      case 2: 
#line 4984 
      ;
      
#line 4985 
      reg_data = (unsigned short)((unsigned int)reg_data | 64U);
      
#line 4986 
      goto ldv_48565;
      case 0: 
#line 4987 
      ;
      default: 
#line 4988 
      ;
      
#line 4989 
      reg_data = (unsigned short)((unsigned int)reg_data | 128U);
      
#line 4990 
      goto ldv_48565;
    }
    ldv_48565: 
#line 4992 
    ;
    
#line 4992 
    ret_val = e1e_wphy(hw,28U,(unsigned short)((int)reg_data));
    
#line 4993 
    if (ret_val != 0) {
      
#line 4994 
      __retres = ret_val;
      
#line 4994 
      goto return_label;
    }
    else ;
    
#line 4995 
    goto ldv_48558;
    default: 
#line 4996 
    ;
    
#line 4997 
    goto ldv_48558;
  }
  ldv_48558: 
#line 5000 
  ;
  
#line 5000 
  tmp = e1000e_setup_copper_link(hw);
  
#line 5000 
  __retres = tmp;
  return_label: 
#line 5000 
                return __retres;
}


#line 5011  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_setup_copper_link_pch_lpt(struct e1000_hw *hw)
{
  s32 __retres;
  u32 ctrl;
  s32 ret_val;
  s32 tmp;
  
#line 5016 
  ctrl = __er32(hw,0UL);
  
#line 5017 
  ctrl |= 64U;
  
#line 5018 
  ctrl &= 4294961151U;
  
#line 5019 
  __ew32(hw,0UL,ctrl);
  
#line 5021 
  ret_val = e1000_copper_link_setup_82577(hw);
  
#line 5022 
  if (ret_val != 0) {
    
#line 5023 
    __retres = ret_val;
    
#line 5023 
    goto return_label;
  }
  else ;
  
#line 5025 
  tmp = e1000e_setup_copper_link(hw);
  
#line 5025 
  __retres = tmp;
  return_label: 
#line 5025 
                return __retres;
}


#line 5038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_get_link_up_info_ich8lan(struct e1000_hw *hw, u16 *speed, u16 *duplex)
{
  s32 __retres;
  s32 ret_val;
  
#line 5043 
  ret_val = e1000e_get_speed_and_duplex_copper(hw,speed,duplex);
  
#line 5044 
  if (ret_val != 0) {
    
#line 5045 
    __retres = ret_val;
    
#line 5045 
    goto return_label;
  }
  else ;
  
#line 5047 
  if ((hw->mac.type == (unsigned int)e1000_ich8lan && hw->phy.type == (unsigned int)e1000_phy_igp_3) && (unsigned int)*speed == 1000U) 
    
#line 5049 
    ret_val = e1000_kmrn_lock_loss_workaround_ich8lan(hw); else ;
  
#line 5052 
  __retres = ret_val;
  return_label: 
#line 5052 
                return __retres;
}


#line 5070  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_kmrn_lock_loss_workaround_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  u32 phy_ctrl;
  s32 ret_val;
  u16 i;
  u16 data;
  bool link;
  
#line 5072 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  
#line 5078 
  if (! dev_spec->kmrn_lock_loss_workaround_enabled) {
    
#line 5079 
    __retres = 0;
    
#line 5079 
    goto return_label;
  }
  else ;
  
#line 5085 
  ret_val = e1000e_phy_has_link_generic(hw,1U,0U,& link);
  
#line 5086 
  if (! link) {
    
#line 5087 
    __retres = 0;
    
#line 5087 
    goto return_label;
  }
  else ;
  
#line 5089 
  i = (unsigned short)0U;
  
#line 5089 
  goto ldv_48595;
  ldv_48594: 
#line 5090 
  ;
  
#line 5091 
  ret_val = e1e_rphy(hw,24659U,& data);
  
#line 5092 
  if (ret_val != 0) {
    
#line 5093 
    __retres = ret_val;
    
#line 5093 
    goto return_label;
  }
  else ;
  
#line 5095 
  ret_val = e1e_rphy(hw,24659U,& data);
  
#line 5096 
  if (ret_val != 0) {
    
#line 5097 
    __retres = ret_val;
    
#line 5097 
    goto return_label;
  }
  else ;
  
#line 5100 
  if (((int)data & 2) == 0) {
    
#line 5101 
    __retres = 0;
    
#line 5101 
    goto return_label;
  }
  else ;
  
#line 5104 
  e1000_phy_hw_reset(hw);
  
#line 5105 
  if (1) 
#line 5105 
         __const_udelay(21475000UL);
  else {
    
#line 5105 
    unsigned long __ms = 5UL;
    {
      unsigned long tmp;
      
#line 5105 
      goto ldv_48592;
      ldv_48591: 
#line 5106 
      ;
      
#line 5105 
      __const_udelay(4295000UL);
      ldv_48592: 
#line 5107 
      ;
      
#line 5105 
      tmp = __ms;
      
#line 5105 
      __ms -= 1UL;
      
#line 5105 
      ;
      
#line 5105 
      if (tmp != 0UL) 
#line 5107 
                      goto ldv_48591; else 
#line 5110 
                                           goto ldv_48593;
      ldv_48593: 
#line 5111 
      ;
    }
  }
  
#line 5089 
  i = (u16)((int)i + 1);
  ldv_48595: 
#line 5090 
  ;
  
#line 5089 
  if ((unsigned int)i <= 9U) 
#line 5091 
                             goto ldv_48594; else 
#line 5094 
                                                  goto ldv_48596;
  ldv_48596: 
#line 5095 
  ;
  
#line 5108 
  phy_ctrl = __er32(hw,3856UL);
  
#line 5109 
  phy_ctrl |= 72U;
  
#line 5111 
  __ew32(hw,3856UL,phy_ctrl);
  
#line 5116 
  e1000e_gig_downshift_workaround_ich8lan(hw);
  
#line 5119 
  __retres = -2;
  return_label: 
#line 5119 
                return __retres;
}


#line 5130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000e_set_kmrn_lock_loss_workaround_ich8lan(struct e1000_hw *hw, bool state)
{
  
#line 5133 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  
#line 5135 
  if (hw->mac.type != (unsigned int)e1000_ich8lan) {
    {
      
#line 5136 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_set_kmrn_lock_loss_workaround_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Workaround applies to ICH8 only.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))5136U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 5136 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 5136 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Workaround applies to ICH8 only.\n"); else ;
    }
    
#line 5137 
    goto return_label;
  }
  else ;
  
#line 5140 
  dev_spec->kmrn_lock_loss_workaround_enabled = state;
  return_label: 
#line 5141 
                return;
}


#line 5153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000e_igp3_phy_powerdown_workaround_ich8lan(struct e1000_hw *hw)
{
  u32 reg;
  u16 data;
  
#line 5157 
  u8 retry = (unsigned char)0U;
  
#line 5159 
  if (hw->phy.type != (unsigned int)e1000_phy_igp_3) 
#line 5160 
                                                     goto return_label; else ;
  ldv_48611: 
#line 5161 
  ;
  
#line 5165 
  reg = __er32(hw,3856UL);
  
#line 5166 
  reg |= 72U;
  
#line 5168 
  __ew32(hw,3856UL,reg);
  
#line 5173 
  if (hw->mac.type == (unsigned int)e1000_ich8lan) 
#line 5174 
                                                   e1000e_gig_downshift_workaround_ich8lan(hw); else ;
  
#line 5177 
  e1e_rphy(hw,24850U,& data);
  
#line 5178 
  data = (unsigned short)((unsigned int)data & 64767U);
  
#line 5179 
  e1e_wphy(hw,24850U,(unsigned short)((int)((unsigned int)data | 512U)));
  
#line 5182 
  e1e_rphy(hw,24850U,& data);
  
#line 5183 
  data = (unsigned short)((unsigned int)data & 768U);
  
#line 5184 
  if ((unsigned int)data == 512U || (unsigned int)retry != 0U) 
#line 5185 
                                                               goto ldv_48610; else ;
  
#line 5188 
  reg = __er32(hw,0UL);
  
#line 5189 
  __ew32(hw,0UL,reg | 2147483648U);
  
#line 5190 
  retry = (u8)((int)retry + 1);
  
#line 5191 
  if ((unsigned int)retry != 0U) 
#line 5193 
                                 goto ldv_48611; else 
#line 5196 
                                                      goto ldv_48610;
  ldv_48610: 
#line 5197 
  ;
  return_label: 
#line 5198 
                return;
}


#line 5204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000e_gig_downshift_workaround_ich8lan(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 reg_data;
  
#line 5209 
  if (hw->mac.type != (unsigned int)e1000_ich8lan || hw->phy.type == (unsigned int)e1000_phy_ife) 
    
#line 5210 
    goto return_label; else ;
  
#line 5212 
  ret_val = e1000e_read_kmrn_reg(hw,3U,& reg_data);
  
#line 5214 
  if (ret_val != 0) 
#line 5215 
                    goto return_label; else ;
  
#line 5216 
  reg_data = (unsigned short)((unsigned int)reg_data | 4096U);
  
#line 5217 
  ret_val = e1000e_write_kmrn_reg(hw,3U,(unsigned short)((int)reg_data));
  
#line 5219 
  if (ret_val != 0) 
#line 5220 
                    goto return_label; else ;
  
#line 5221 
  reg_data = (unsigned short)((unsigned int)reg_data & 61439U);
  
#line 5222 
  e1000e_write_kmrn_reg(hw,3U,(unsigned short)((int)reg_data));
  return_label: 
#line 5223 
                return;
}


#line 5239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000_suspend_workarounds_ich8lan(struct e1000_hw *hw)
{
  u32 phy_ctrl;
  s32 ret_val;
  
#line 5241 
  struct e1000_dev_spec_ich8lan *dev_spec = & hw->dev_spec.ich8lan;
  
#line 5245 
  phy_ctrl = __er32(hw,3856UL);
  
#line 5246 
  phy_ctrl |= 64U;
  
#line 5248 
  if (hw->phy.type == (unsigned int)e1000_phy_i217) {
    u16 phy_reg;
    u32 tmp_0;
    
#line 5249 
    u16 device_id = ((hw->adapter)->pdev)->device;
    
#line 5251 
    if ((((unsigned int)device_id + 60071U <= 1U || (unsigned int)device_id == 5538U) || (unsigned int)device_id == 5539U) || hw->mac.type == (unsigned int)e1000_pch_spt) {
      
#line 5256 
      u32 fextnvm6 = __er32(hw,16UL);
      
#line 5258 
      __ew32(hw,16UL,fextnvm6 & 4294967039U);
    }
    else ;
    
#line 5261 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    
#line 5262 
    if (ret_val != 0) 
#line 5263 
                      goto out; else ;
    
#line 5265 
    if (! dev_spec->eee_disable) {
      u16 eee_advert;
      
#line 5268 
      ret_val = e1000_read_emi_reg_locked(hw,(unsigned short)32769,& eee_advert);
      
#line 5272 
      if (ret_val != 0) 
#line 5273 
                        goto release; else ;
      
#line 5280 
      if ((((int)eee_advert & 2) != 0 && ((int)dev_spec->eee_lp_ability & 2) != 0) && ((int)hw->phy.autoneg_advertised & 8) != 0) {
        
#line 5284 
        phy_ctrl &= 4294967289U;
        
#line 5288 
        e1e_rphy_locked(hw,24722U,& phy_reg);
        
#line 5290 
        phy_reg = (unsigned short)((unsigned int)phy_reg | 2048U);
        
#line 5291 
        e1e_wphy_locked(hw,24722U,(unsigned short)((int)phy_reg));
      }
      else ;
    }
    else ;
    
#line 5303 
    tmp_0 = __er32(hw,23380UL);
    
#line 5303 
    if ((tmp_0 & 32768U) == 0U) {
      
#line 5305 
      e1e_rphy_locked(hw,4219910U,& phy_reg);
      
#line 5306 
      phy_reg = (unsigned short)((unsigned int)phy_reg | 128U);
      
#line 5307 
      e1e_wphy_locked(hw,4219910U,(unsigned short)((int)phy_reg));
      
#line 5312 
      e1e_rphy_locked(hw,24636U,& phy_reg);
      
#line 5313 
      phy_reg = (unsigned short)((unsigned int)phy_reg | 4096U);
      
#line 5314 
      e1e_wphy_locked(hw,24636U,(unsigned short)((int)phy_reg));
      
#line 5317 
      e1e_rphy_locked(hw,24730U,& phy_reg);
      
#line 5318 
      phy_reg = (unsigned short)((unsigned int)phy_reg & 65519U);
      
#line 5319 
      e1e_wphy_locked(hw,24730U,(unsigned short)((int)phy_reg));
    }
    else ;
    
#line 5325 
    e1e_rphy_locked(hw,24733U,& phy_reg);
    
#line 5326 
    phy_reg = (unsigned short)((unsigned int)phy_reg | 2U);
    
#line 5327 
    e1e_wphy_locked(hw,24733U,(unsigned short)((int)phy_reg));
    release: 
#line 5329 
    ;
    
#line 5330 
    (*(hw->phy.ops.release))(hw);
  }
  else ;
  out: 
#line 5332 
  ;
  
#line 5333 
  __ew32(hw,3856UL,phy_ctrl);
  
#line 5335 
  if (hw->mac.type == (unsigned int)e1000_ich8lan) 
#line 5336 
                                                   e1000e_gig_downshift_workaround_ich8lan(hw); else ;
  
#line 5338 
  if (hw->mac.type > (unsigned int)e1000_ich10lan) {
    
#line 5339 
    e1000_oem_bits_config_ich8lan(hw,(_Bool)0);
    
#line 5342 
    if (hw->mac.type == (unsigned int)e1000_pchlan) 
#line 5343 
                                                    e1000e_phy_hw_reset_generic(hw); else ;
    
#line 5345 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    
#line 5346 
    if (ret_val != 0) 
#line 5347 
                      goto return_label; else ;
    
#line 5348 
    e1000_write_smbus_addr(hw);
    
#line 5349 
    (*(hw->phy.ops.release))(hw);
  }
  else ;
  return_label: 
#line 5351 
                return;
}


#line 5363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
void e1000_resume_workarounds_pchlan(struct e1000_hw *hw)
{
  s32 ret_val;
  
#line 5367 
  if (hw->mac.type <= (unsigned int)e1000_pchlan) 
#line 5368 
                                                  goto return_label; else ;
  
#line 5370 
  ret_val = e1000_init_phy_workarounds_pchlan(hw);
  
#line 5371 
  if (ret_val != 0) {
    {
      
#line 5372 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_resume_workarounds_pchlan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Failed to init PHY flow ret_val=%d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))5372U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 5372 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 5372 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Failed to init PHY flow ret_val=%d\n",ret_val); else ;
    }
    
#line 5373 
    goto return_label;
  }
  else ;
  
#line 5381 
  if (hw->phy.type == (unsigned int)e1000_phy_i217) {
    u16 phy_reg;
    u32 tmp;
    
#line 5384 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    
#line 5385 
    if (ret_val != 0) {
      {
        
#line 5386 
        struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_resume_workarounds_pchlan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Failed to setup iRST\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))5386U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 5386 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 5386 
                                                              __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Failed to setup iRST\n"); else ;
      }
      
#line 5387 
      goto return_label;
    }
    else ;
    
#line 5391 
    e1e_rphy_locked(hw,24722U,& phy_reg);
    
#line 5392 
    phy_reg = (unsigned short)((unsigned int)phy_reg & 63487U);
    
#line 5393 
    e1e_wphy_locked(hw,24722U,(unsigned short)((int)phy_reg));
    
#line 5395 
    tmp = __er32(hw,23380UL);
    
#line 5395 
    if ((tmp & 32768U) == 0U) {
      
#line 5399 
      ret_val = e1e_rphy_locked(hw,24730U,& phy_reg);
      
#line 5400 
      if (ret_val != 0) 
#line 5401 
                        goto release; else ;
      
#line 5402 
      phy_reg = (unsigned short)((unsigned int)phy_reg | 16U);
      
#line 5403 
      e1e_wphy_locked(hw,24730U,(unsigned short)((int)phy_reg));
      
#line 5406 
      e1e_wphy_locked(hw,4219910U,(unsigned short)0);
    }
    else ;
    
#line 5409 
    ret_val = e1e_rphy_locked(hw,24733U,& phy_reg);
    
#line 5410 
    if (ret_val != 0) 
#line 5411 
                      goto release; else ;
    
#line 5412 
    phy_reg = (unsigned short)((unsigned int)phy_reg & 65533U);
    
#line 5413 
    e1e_wphy_locked(hw,24733U,(unsigned short)((int)phy_reg));
    release: 
#line 5414 
    ;
    
#line 5415 
    if (ret_val != 0) {
      
#line 5416 
      struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_resume_workarounds_pchlan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Error %d in resume workarounds\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))5416U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 5416 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 5416 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Error %d in resume workarounds\n",ret_val); else ;
    }
    else ;
    
#line 5417 
    (*(hw->phy.ops.release))(hw);
  }
  else ;
  return_label: 
#line 5419 
                return;
}


#line 5427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_cleanup_led_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  
#line 5429 
  if (hw->phy.type == (unsigned int)e1000_phy_ife) {
    s32 tmp;
    
#line 5430 
    tmp = e1e_wphy(hw,27U,(unsigned short)0);
    
#line 5430 
    __retres = tmp;
    
#line 5430 
    goto return_label;
  }
  else ;
  
#line 5432 
  __ew32(hw,3584UL,hw->mac.ledctl_default);
  
#line 5433 
  __retres = 0;
  return_label: 
#line 5433 
                return __retres;
}


#line 5442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_led_on_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  
#line 5444 
  if (hw->phy.type == (unsigned int)e1000_phy_ife) {
    s32 tmp;
    
#line 5445 
    tmp = e1e_wphy(hw,27U,(unsigned short)39);
    
#line 5445 
    __retres = tmp;
    
#line 5445 
    goto return_label;
  }
  else ;
  
#line 5448 
  __ew32(hw,3584UL,hw->mac.ledctl_mode2);
  
#line 5449 
  __retres = 0;
  return_label: 
#line 5449 
                return __retres;
}


#line 5458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_led_off_ich8lan(struct e1000_hw *hw)
{
  s32 __retres;
  
#line 5460 
  if (hw->phy.type == (unsigned int)e1000_phy_ife) {
    s32 tmp;
    
#line 5461 
    tmp = e1e_wphy(hw,27U,(unsigned short)38);
    
#line 5461 
    __retres = tmp;
    
#line 5461 
    goto return_label;
  }
  else ;
  
#line 5465 
  __ew32(hw,3584UL,hw->mac.ledctl_mode1);
  
#line 5466 
  __retres = 0;
  return_label: 
#line 5466 
                return __retres;
}


#line 5475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_setup_led_pchlan(struct e1000_hw *hw)
{
  s32 tmp;
  
#line 5477 
  tmp = e1e_wphy(hw,24606U,(unsigned short)((int)((unsigned short)hw->mac.ledctl_mode1)));
  
#line 5477 
  return tmp;
}


#line 5486  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_cleanup_led_pchlan(struct e1000_hw *hw)
{
  s32 tmp;
  
#line 5488 
  tmp = e1e_wphy(hw,24606U,(unsigned short)((int)((unsigned short)hw->mac.ledctl_default)));
  
#line 5488 
  return tmp;
}


#line 5497  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_led_on_pchlan(struct e1000_hw *hw)
{
  u32 i;
  u32 led;
  u32 tmp;
  s32 tmp_0;
  
#line 5499 
  u16 data = (unsigned short)hw->mac.ledctl_mode2;
  
#line 5505 
  tmp = __er32(hw,8UL);
  
#line 5505 
  if ((tmp & 2U) == 0U) {
    
#line 5506 
    i = 0U;
    
#line 5506 
    goto ldv_48662;
    ldv_48661: 
#line 5507 
    ;
    
#line 5507 
    led = (unsigned int)((int)data >> i * 5U) & 31U;
    
#line 5508 
    if ((led & 7U) != 2U) 
#line 5510 
                          goto ldv_48660; else ;
    
#line 5511 
    if ((led & 8U) != 0U) 
#line 5512 
                          data = (unsigned short)(~ (8 << i * 5U) & (int)data); else 
                                                                    
#line 5514 
                                                                    data = (unsigned short)((8 << i * 5U) | (int)data);
    ldv_48660: 
#line 5515 
    ;
    
#line 5506 
    i += 1U;
    ldv_48662: 
#line 5507 
    ;
    
#line 5506 
    if (i <= 2U) 
#line 5508 
                 goto ldv_48661; else 
#line 5511 
                                      goto ldv_48663;
    ldv_48663: 
#line 5512 
    ;
  }
  else ;
  
#line 5518 
  tmp_0 = e1e_wphy(hw,24606U,(unsigned short)((int)data));
  
#line 5518 
  return tmp_0;
}


#line 5527  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_led_off_pchlan(struct e1000_hw *hw)
{
  u32 i;
  u32 led;
  u32 tmp;
  s32 tmp_0;
  
#line 5529 
  u16 data = (unsigned short)hw->mac.ledctl_mode1;
  
#line 5535 
  tmp = __er32(hw,8UL);
  
#line 5535 
  if ((tmp & 2U) == 0U) {
    
#line 5536 
    i = 0U;
    
#line 5536 
    goto ldv_48672;
    ldv_48671: 
#line 5537 
    ;
    
#line 5537 
    led = (unsigned int)((int)data >> i * 5U) & 31U;
    
#line 5538 
    if ((led & 7U) != 2U) 
#line 5540 
                          goto ldv_48670; else ;
    
#line 5541 
    if ((led & 8U) != 0U) 
#line 5542 
                          data = (unsigned short)(~ (8 << i * 5U) & (int)data); else 
                                                                    
#line 5544 
                                                                    data = (unsigned short)((8 << i * 5U) | (int)data);
    ldv_48670: 
#line 5545 
    ;
    
#line 5536 
    i += 1U;
    ldv_48672: 
#line 5537 
    ;
    
#line 5536 
    if (i <= 2U) 
#line 5538 
                 goto ldv_48671; else 
#line 5541 
                                      goto ldv_48673;
    ldv_48673: 
#line 5542 
    ;
  }
  else ;
  
#line 5548 
  tmp_0 = e1e_wphy(hw,24606U,(unsigned short)((int)data));
  
#line 5548 
  return tmp_0;
}


#line 5563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static s32 e1000_get_cfg_done_ich8lan(struct e1000_hw *hw)
{
  u32 status;
  
#line 5565 
  s32 ret_val = 0;
  
#line 5566 
  u32 bank = 0U;
  
#line 5569 
  e1000e_get_cfg_done_generic(hw);
  
#line 5572 
  if (hw->mac.type > (unsigned int)e1000_ich9lan) 
#line 5573 
                                                  e1000_lan_init_done_ich8lan(hw);
  else {
    
#line 5575 
    ret_val = e1000e_get_auto_rd_done(hw);
    
#line 5576 
    if (ret_val != 0) {
      {
        
#line 5581 
        struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_get_cfg_done_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "Auto Read Done did not complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))5581U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 5581 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 5581 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Auto Read Done did not complete\n"); else ;
      }
      
#line 5582 
      ret_val = 0;
    }
    else ;
  }
  
#line 5587 
  status = __er32(hw,8UL);
  
#line 5588 
  if ((status & 1024U) != 0U) 
#line 5589 
                              __ew32(hw,8UL,status & 4294966271U);
  else {
    
#line 5591 
    struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_get_cfg_done_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "PHY Reset Asserted not set - needs delay\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))5591U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 5591 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 5591 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"PHY Reset Asserted not set - needs delay\n"); else ;
  }
  
#line 5594 
  if (hw->mac.type <= (unsigned int)e1000_ich9lan) {
    u32 tmp;
    
#line 5595 
    tmp = __er32(hw,16UL);
    
#line 5595 
    if ((tmp & 256U) == 0U) {
      
#line 5595 
      if (hw->phy.type == (unsigned int)e1000_phy_igp_3) 
#line 5597 
                                                         e1000e_phy_init_script_igp3(hw); else ;
    }
    else ;
  }
  else {
    s32 tmp_0;
    
#line 5600 
    tmp_0 = e1000_valid_nvm_bank_detect_ich8lan(hw,& bank);
    
#line 5600 
    if (tmp_0 != 0) {
      {
        
#line 5602 
        struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_get_cfg_done_ich8lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c", .format = "EEPROM not present\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))5602U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 5602 
        if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 5602 
                                                              __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"EEPROM not present\n"); else ;
      }
      
#line 5603 
      ret_val = -3;
    }
    else ;
  }
  
#line 5607 
  return ret_val;
}


#line 5617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_power_down_phy_copper_ich8lan(struct e1000_hw *hw)
{
  int tmp_0;
  bool tmp;
  
#line 5620 
  tmp = (*(hw->mac.ops.check_mng_mode))(hw);
  
#line 5620 
  if (tmp) 
#line 5620 
           tmp_0 = 0; else 
#line 5620 
                           tmp_0 = 1;
  
#line 5620 
  if (tmp_0) {
    s32 tmp_1;
    
#line 5620 
    tmp_1 = (*(hw->phy.ops.check_reset_block))(hw);
    
#line 5620 
    if (tmp_1 == 0) 
#line 5622 
                    e1000_power_down_phy_copper(hw); else ;
  }
  else ;
  
#line 5623 
  return;
}


#line 5632  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static void e1000_clear_hw_cntrs_ich8lan(struct e1000_hw *hw)
{
  u16 phy_data;
  s32 ret_val;
  
#line 5637 
  e1000e_clear_hw_cntrs_base(hw);
  
#line 5639 
  __er32(hw,16388UL);
  
#line 5640 
  __er32(hw,16396UL);
  
#line 5641 
  __er32(hw,16436UL);
  
#line 5642 
  __er32(hw,16444UL);
  
#line 5643 
  __er32(hw,16632UL);
  
#line 5644 
  __er32(hw,16636UL);
  
#line 5646 
  __er32(hw,16564UL);
  
#line 5647 
  __er32(hw,16568UL);
  
#line 5648 
  __er32(hw,16572UL);
  
#line 5650 
  __er32(hw,16640UL);
  
#line 5651 
  __er32(hw,16676UL);
  
#line 5654 
  if (((hw->phy.type == (unsigned int)e1000_phy_82578 || hw->phy.type == (unsigned int)e1000_phy_82579) || hw->phy.type == (unsigned int)e1000_phy_i217) || hw->phy.type == (unsigned int)e1000_phy_82577) {
    
#line 5658 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    
#line 5659 
    if (ret_val != 0) 
#line 5660 
                      goto return_label; else ;
    
#line 5661 
    ret_val = (*(hw->phy.ops.set_page))(hw,(unsigned short)24896);
    
#line 5663 
    if (ret_val != 0) 
#line 5664 
                      goto release; else ;
    
#line 5665 
    (*(hw->phy.ops.read_reg_page))(hw,24912U,& phy_data);
    
#line 5666 
    (*(hw->phy.ops.read_reg_page))(hw,24913U,& phy_data);
    
#line 5667 
    (*(hw->phy.ops.read_reg_page))(hw,24914U,& phy_data);
    
#line 5668 
    (*(hw->phy.ops.read_reg_page))(hw,24915U,& phy_data);
    
#line 5669 
    (*(hw->phy.ops.read_reg_page))(hw,24916U,& phy_data);
    
#line 5670 
    (*(hw->phy.ops.read_reg_page))(hw,24917U,& phy_data);
    
#line 5671 
    (*(hw->phy.ops.read_reg_page))(hw,24919U,& phy_data);
    
#line 5672 
    (*(hw->phy.ops.read_reg_page))(hw,24920U,& phy_data);
    
#line 5673 
    (*(hw->phy.ops.read_reg_page))(hw,24921U,& phy_data);
    
#line 5674 
    (*(hw->phy.ops.read_reg_page))(hw,24922U,& phy_data);
    
#line 5675 
    (*(hw->phy.ops.read_reg_page))(hw,24923U,& phy_data);
    
#line 5676 
    (*(hw->phy.ops.read_reg_page))(hw,24924U,& phy_data);
    
#line 5677 
    (*(hw->phy.ops.read_reg_page))(hw,24925U,& phy_data);
    
#line 5678 
    (*(hw->phy.ops.read_reg_page))(hw,24926U,& phy_data);
    release: 
#line 5679 
    ;
    
#line 5680 
    (*(hw->phy.ops.release))(hw);
  }
  else ;
  return_label: 
#line 5682 
                return;
}


#line 5684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static struct e1000_mac_operations const ich8_mac_ops = {.id_led_init = (s32 (*)(struct e1000_hw *))0, .blink_led = (s32 (*)(struct e1000_hw *))0, .check_mng_mode = (bool (*)(struct e1000_hw *))0, .check_for_link = & e1000_check_for_copper_link_ich8lan, .cleanup_led = (s32 (*)(struct e1000_hw *))0, .clear_hw_cntrs = & e1000_clear_hw_cntrs_ich8lan, .clear_vfta = (void (*)(struct e1000_hw *))0, .get_bus_info = & e1000_get_bus_info_ich8lan, .set_lan_id = & e1000_set_lan_id_single_port, .get_link_up_info = & e1000_get_link_up_info_ich8lan, .led_on = (s32 (*)(struct e1000_hw *))0, .led_off = (s32 (*)(struct e1000_hw *))0, .update_mc_addr_list = & e1000e_update_mc_addr_list_generic, .reset_hw = & e1000_reset_hw_ich8lan, .init_hw = & e1000_init_hw_ich8lan, .setup_link = & e1000_setup_link_ich8lan, .setup_physical_interface = & e1000_setup_copper_link_ich8lan, .setup_led = (s32 (*)(struct e1000_hw *))0, .write_vfta = (void (*)(struct e1000_hw *, u32 , u32 ))0, .config_collision_dist = & e1000e_config_collision_dist_generic, .rar_set = & e1000e_rar_set_generic, .read_mac_addr = (s32 (*)(struct e1000_hw *))0, .rar_get_count = & e1000e_rar_get_count_generic};

#line 5705  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static struct e1000_phy_operations const ich8_phy_ops = {.acquire = & e1000_acquire_swflag_ich8lan, .cfg_on_link_up = (s32 (*)(struct e1000_hw *))0, .check_polarity = (s32 (*)(struct e1000_hw *))0, .check_reset_block = & e1000_check_reset_block_ich8lan, .commit = (s32 (*)(struct e1000_hw *))0, .force_speed_duplex = (s32 (*)(struct e1000_hw *))0, .get_cfg_done = & e1000_get_cfg_done_ich8lan, .get_cable_length = & e1000e_get_cable_length_igp_2, .get_info = (s32 (*)(struct e1000_hw *))0, .set_page = (s32 (*)(struct e1000_hw *, u16 ))0, .read_reg = & e1000e_read_phy_reg_igp, .read_reg_locked = (s32 (*)(struct e1000_hw *, u32 , u16 *))0, .read_reg_page = (s32 (*)(struct e1000_hw *, u32 , u16 *))0, .release = & e1000_release_swflag_ich8lan, .reset = & e1000_phy_hw_reset_ich8lan, .set_d0_lplu_state = & e1000_set_d0_lplu_state_ich8lan, .set_d3_lplu_state = & e1000_set_d3_lplu_state_ich8lan, .write_reg = & e1000e_write_phy_reg_igp, .write_reg_locked = (s32 (*)(struct e1000_hw *, u32 , u16 ))0, .write_reg_page = (s32 (*)(struct e1000_hw *, u32 , u16 ))0, .power_up = (void (*)(struct e1000_hw *))0, .power_down = (void (*)(struct e1000_hw *))0};

#line 5719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static struct e1000_nvm_operations const ich8_nvm_ops = {.acquire = & e1000_acquire_nvm_ich8lan, .read = & e1000_read_nvm_ich8lan, .release = & e1000_release_nvm_ich8lan, .reload = & e1000e_reload_nvm_generic, .update = & e1000_update_nvm_checksum_ich8lan, .valid_led_default = & e1000_valid_led_default_ich8lan, .validate = & e1000_validate_nvm_checksum_ich8lan, .write = & e1000_write_nvm_ich8lan};

#line 5730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
static struct e1000_nvm_operations const spt_nvm_ops = {.acquire = & e1000_acquire_nvm_ich8lan, .read = & e1000_read_nvm_spt, .release = & e1000_release_nvm_ich8lan, .reload = & e1000e_reload_nvm_generic, .update = & e1000_update_nvm_checksum_spt, .valid_led_default = & e1000_valid_led_default_ich8lan, .validate = & e1000_validate_nvm_checksum_ich8lan, .write = & e1000_write_nvm_ich8lan};

#line 5741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info const e1000_ich8_info = {.mac = e1000_ich8lan, .flags = 33323U, .flags2 = 0U, .pba = 8U, .max_hw_frame_size = 1522U, .get_variants = & e1000_get_variants_ich8lan, .mac_ops = & ich8_mac_ops, .phy_ops = & ich8_phy_ops, .nvm_ops = & ich8_nvm_ops};

#line 5757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info const e1000_ich9_info = {.mac = e1000_ich9lan, .flags = 33451U, .flags2 = 0U, .pba = 18U, .max_hw_frame_size = 9234U, .get_variants = & e1000_get_variants_ich8lan, .mac_ops = & ich8_mac_ops, .phy_ops = & ich8_phy_ops, .nvm_ops = & ich8_nvm_ops};

#line 5774  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info const e1000_ich10_info = {.mac = e1000_ich10lan, .flags = 33451U, .flags2 = 0U, .pba = 18U, .max_hw_frame_size = 9234U, .get_variants = & e1000_get_variants_ich8lan, .mac_ops = & ich8_mac_ops, .phy_ops = & ich8_phy_ops, .nvm_ops = & ich8_nvm_ops};

#line 5791  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info const e1000_pch_info = {.mac = e1000_pchlan, .flags = 295595U, .flags2 = 16U, .pba = 26U, .max_hw_frame_size = 4096U, .get_variants = & e1000_get_variants_ich8lan, .mac_ops = & ich8_mac_ops, .phy_ops = & ich8_phy_ops, .nvm_ops = & ich8_nvm_ops};

#line 5810  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info const e1000_pch2_info = {.mac = e1000_pch2lan, .flags = 49835U, .flags2 = 48U, .pba = 26U, .max_hw_frame_size = 9022U, .get_variants = & e1000_get_variants_ich8lan, .mac_ops = & ich8_mac_ops, .phy_ops = & ich8_phy_ops, .nvm_ops = & ich8_nvm_ops};

#line 5830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info const e1000_pch_lpt_info = {.mac = e1000_pch_lpt, .flags = 49835U, .flags2 = 48U, .pba = 26U, .max_hw_frame_size = 9022U, .get_variants = & e1000_get_variants_ich8lan, .mac_ops = & ich8_mac_ops, .phy_ops = & ich8_phy_ops, .nvm_ops = & ich8_nvm_ops};

#line 5850  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ich8lan.c"
struct e1000_info const e1000_pch_spt_info = {.mac = e1000_pch_spt, .flags = 49835U, .flags2 = 48U, .pba = 26U, .max_hw_frame_size = 9022U, .get_variants = & e1000_get_variants_ich8lan, .mac_ops = & ich8_mac_ops, .phy_ops = & ich8_phy_ops, .nvm_ops = & spt_nvm_ops};

#line 740  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ich8lan.c.aux"
static void ldv_mutex_lock_72(struct mutex *ldv_func_arg1)
{
  
#line 744 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"nvm_mutex");
  
#line 745 
  return;
}


#line 748  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ich8lan.c.aux"
static void ldv_mutex_unlock_73(struct mutex *ldv_func_arg1)
{
  
#line 752 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"nvm_mutex");
  
#line 753 
  return;
}

void __builtin_unreachable(void);


#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
char *kstrdup(char const *, gfp_t);


#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
void dev_err(struct device const *, char const * , ...);


#line 1087 
void dev_notice(struct device const *, char const * , ...);


#line 1089 
void _dev_info(struct device const *, char const * , ...);


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
void kfree(void const *);


#line 480  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
void e1000e_check_options(struct e1000_adapter *adapter);


#line 500 
unsigned int copybreak;


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
unsigned int copybreak = 256U;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static int TxIntDelay[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_TxIntDelay;

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static int TxAbsIntDelay[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_TxAbsIntDelay;

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static int RxIntDelay[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_RxIntDelay;

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static int RxAbsIntDelay[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_RxAbsIntDelay;

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static int InterruptThrottleRate[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_InterruptThrottleRate;

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static int IntMode[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_IntMode;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static int SmartPowerDownEnable[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_SmartPowerDownEnable;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static int KumeranLockLoss[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_KumeranLockLoss;

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static int WriteProtectNVM[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_WriteProtectNVM;

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static int CrcStripping[33U] = {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static unsigned int num_CrcStripping;

#line 173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
static int e1000_validate_option(unsigned int *value, struct e1000_option const *opt, struct e1000_adapter *adapter)
{
  int __retres;
  
#line 177 
  if (*value == 4294967295U) {
    
#line 178 
    *value = (unsigned int)opt->def;
    
#line 179 
    __retres = 0;
    
#line 179 
    goto return_label;
  }
  else ;
  
#line 182 
  switch ((unsigned int)opt->type) {
    case (unsigned int)0: 
#line 183 
    ;
    
#line 184 
    switch (*value) {
      case (unsigned int)1: 
#line 185 
      ;
      
#line 186 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s Enabled\n",opt->name);
      
#line 188 
      __retres = 0;
      
#line 188 
      goto return_label;
      case (unsigned int)0: 
#line 189 
      ;
      
#line 190 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s Disabled\n",opt->name);
      
#line 192 
      __retres = 0;
      
#line 192 
      goto return_label;
    }
    
#line 194 
    goto ldv_48787;
    case (unsigned int)1: 
#line 195 
    ;
    
#line 196 
    if (*value >= (unsigned int)opt->arg.r.min && *value <= (unsigned int)opt->arg.r.max) {
      
#line 197 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s set to %i\n",opt->name,*value);
      
#line 199 
      __retres = 0;
      
#line 199 
      goto return_label;
    }
    else ;
    
#line 201 
    goto ldv_48787;
    case (unsigned int)2: 
#line 202 
    ;
    {
      int i;
      struct e1000_opt_list *ent;
      
#line 206 
      i = 0;
      
#line 206 
      goto ldv_48793;
      ldv_48792: 
#line 207 
      ;
      
#line 207 
      ent = opt->arg.l.p + i;
      
#line 208 
      if (*value == (unsigned int)ent->i) {
        
#line 209 
        if ((int)*(ent->str) != 0) 
#line 210 
                                   _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s\n",ent->str); else ;
        
#line 212 
        __retres = 0;
        
#line 212 
        goto return_label;
      }
      else ;
      
#line 206 
      i += 1;
      ldv_48793: 
#line 207 
      ;
      
#line 206 
      if (opt->arg.l.nr > i) 
#line 208 
                             goto ldv_48792; else 
#line 211 
                                                  goto ldv_48794;
      ldv_48794: 
#line 212 
      ;
    }
    
#line 216 
    goto ldv_48787;
    default: 
#line 217 
    ;
    
#line 218 
    ldv_inline_asm();
    
#line 218 
    ;
  }
  ldv_48787: 
#line 221 
  ;
  
#line 221 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Invalid %s value specified (%i) %s\n",opt->name,*value,opt->err);
  
#line 223 
  *value = (unsigned int)opt->def;
  
#line 224 
  __retres = -1;
  return_label: 
#line 224 
                return __retres;
}


#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/param.c"
void e1000e_check_options(struct e1000_adapter *adapter)
{
  
#line 238 
  struct e1000_hw *hw = & adapter->hw;
  
#line 239 
  int bd = (int)adapter->bd_number;
  
#line 241 
  if (bd > 31) {
    
#line 242 
    dev_notice((struct device const *)(& (adapter->pdev)->dev),"Warning: no configuration for board #%i\n",bd);
    
#line 244 
    dev_notice((struct device const *)(& (adapter->pdev)->dev),"Using defaults for all values\n");
  }
  else ;
  {
    
#line 250 
    struct e1000_option const opt = {.type = range_option, .name = "Transmit Interrupt Delay", .err = "using default of ", .def = 8, .arg = {.r = {.min = 0, .max = 65535}}};
    
#line 260 
    if (num_TxIntDelay > (unsigned int)bd) {
      
#line 261 
      adapter->tx_int_delay = (unsigned int)TxIntDelay[bd];
      
#line 262 
      e1000_validate_option(& adapter->tx_int_delay,& opt,adapter);
    }
    else 
#line 265 
         adapter->tx_int_delay = (unsigned int)opt.def;
  }
  {
    
#line 270 
    struct e1000_option const opt_0 = {.type = range_option, .name = "Transmit Absolute Interrupt Delay", .err = "using default of ", .def = 32, .arg = {.r = {.min = 0, .max = 65535}}};
    
#line 280 
    if (num_TxAbsIntDelay > (unsigned int)bd) {
      
#line 281 
      adapter->tx_abs_int_delay = (unsigned int)TxAbsIntDelay[bd];
      
#line 282 
      e1000_validate_option(& adapter->tx_abs_int_delay,& opt_0,adapter);
    }
    else 
#line 285 
         adapter->tx_abs_int_delay = (unsigned int)opt_0.def;
  }
  {
    
#line 290 
    struct e1000_option opt_1 = {.type = range_option, .name = "Receive Interrupt Delay", .err = "using default of ", .def = 0, .arg = {.r = {.min = 0, .max = 65535}}};
    
#line 300 
    if (num_RxIntDelay > (unsigned int)bd) {
      
#line 301 
      adapter->rx_int_delay = (unsigned int)RxIntDelay[bd];
      
#line 302 
      e1000_validate_option(& adapter->rx_int_delay,(struct e1000_option const *)(& opt_1),adapter);
    }
    else 
#line 305 
         adapter->rx_int_delay = (unsigned int)opt_1.def;
  }
  {
    
#line 310 
    struct e1000_option const opt_2 = {.type = range_option, .name = "Receive Absolute Interrupt Delay", .err = "using default of ", .def = 8, .arg = {.r = {.min = 0, .max = 65535}}};
    
#line 320 
    if (num_RxAbsIntDelay > (unsigned int)bd) {
      
#line 321 
      adapter->rx_abs_int_delay = (unsigned int)RxAbsIntDelay[bd];
      
#line 322 
      e1000_validate_option(& adapter->rx_abs_int_delay,& opt_2,adapter);
    }
    else 
#line 325 
         adapter->rx_abs_int_delay = (unsigned int)opt_2.def;
  }
  {
    
#line 330 
    struct e1000_option const opt_3 = {.type = range_option, .name = "Interrupt Throttling Rate (ints/sec)", .err = "using default of ", .def = 3, .arg = {.r = {.min = 100, .max = 100000}}};
    
#line 340 
    if (num_InterruptThrottleRate > (unsigned int)bd) {
      
#line 341 
      adapter->itr = (unsigned int)InterruptThrottleRate[bd];
      
#line 348 
      if (adapter->itr > 4U) {
        int tmp;
        
#line 348 
        tmp = e1000_validate_option(& adapter->itr,& opt_3,adapter);
        
#line 348 
        if (tmp != 0) 
#line 350 
                      adapter->itr = (unsigned int)opt_3.def; else ;
      }
      else ;
    }
    else {
      
#line 355 
      adapter->itr = (unsigned int)opt_3.def;
      
#line 360 
      if (adapter->itr > 4U) 
#line 361 
                             _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s set to default %d\n",opt_3.name,adapter->itr); else ;
    }
    
#line 366 
    adapter->itr_setting = adapter->itr;
    
#line 367 
    switch (adapter->itr) {
      case (u32)0: 
#line 368 
      ;
      
#line 369 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s turned off\n",opt_3.name);
      
#line 371 
      goto ldv_48807;
      case (u32)1: 
#line 372 
      ;
      
#line 373 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s set to dynamic mode\n",opt_3.name);
      
#line 375 
      adapter->itr = 20000U;
      
#line 376 
      goto ldv_48807;
      case (u32)2: 
#line 377 
      ;
      
#line 378 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s Invalid mode - setting default\n",opt_3.name);
      
#line 381 
      adapter->itr_setting = (unsigned int)opt_3.def;
      case (u32)3: 
#line 383 
      ;
      
#line 384 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s set to dynamic conservative mode\n",opt_3.name);
      
#line 387 
      adapter->itr = 20000U;
      
#line 388 
      goto ldv_48807;
      case (u32)4: 
#line 389 
      ;
      
#line 390 
      _dev_info((struct device const *)(& (adapter->pdev)->dev),"%s set to simplified (2000-8000 ints) mode\n",opt_3.name);
      
#line 393 
      goto ldv_48807;
      default: 
#line 394 
      ;
      
#line 401 
      adapter->itr_setting &= 4294967292U;
      
#line 402 
      goto ldv_48807;
    }
    ldv_48807: 
#line 404 
    ;
  }
  {
    
#line 407 
    struct e1000_option opt_4 = {.type = range_option, .name = "Interrupt Mode", .err = (char const *)0, .def = 0, .arg = {.r = {.min = 0, .max = 0}}};
    
#line 419 
    if ((adapter->flags & 1024U) != 0U) {
      
#line 420 
      opt_4.err = (char const *)kstrdup("defaulting to 2 (MSI-X)",208U);
      
#line 422 
      opt_4.def = 2;
      
#line 423 
      opt_4.arg.r.max = 2;
    }
    else {
      
#line 425 
      opt_4.err = (char const *)kstrdup("defaulting to 1 (MSI)",208U);
      
#line 426 
      opt_4.def = 1;
      
#line 427 
      opt_4.arg.r.max = 1;
    }
    
#line 430 
    if (opt_4.err == (char const *)0) {
      
#line 431 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"Failed to allocate memory\n");
      
#line 433 
      goto return_label;
    }
    else ;
    
#line 437 
    if (num_IntMode > (unsigned int)bd) {
      
#line 438 
      unsigned int int_mode = (unsigned int)IntMode[bd];
      
#line 440 
      e1000_validate_option(& int_mode,(struct e1000_option const *)(& opt_4),adapter);
      
#line 441 
      adapter->int_mode = (int)int_mode;
    }
    else 
#line 443 
         adapter->int_mode = opt_4.def;
    
#line 447 
    kfree((void const *)opt_4.err);
  }
  {
    
#line 452 
    struct e1000_option const opt_5 = {.type = enable_option, .name = "PHY Smart Power Down", .err = "defaulting to Disabled", .def = 0, .arg = {.r = {.min = 0, .max = 0}}};
    
#line 459 
    if (num_SmartPowerDownEnable > (unsigned int)bd) {
      
#line 460 
      unsigned int spd = (unsigned int)SmartPowerDownEnable[bd];
      
#line 462 
      e1000_validate_option(& spd,& opt_5,adapter);
      
#line 463 
      if ((adapter->flags & 2048U) != 0U && spd != 0U) 
#line 464 
                                                       adapter->flags |= 67108864U; else ;
    }
    else ;
  }
  {
    
#line 469 
    struct e1000_option const opt_6 = {.type = enable_option, .name = "CRC Stripping", .err = "defaulting to Enabled", .def = 1, .arg = {.r = {.min = 0, .max = 0}}};
    
#line 476 
    if (num_CrcStripping > (unsigned int)bd) {
      
#line 477 
      unsigned int crc_stripping = (unsigned int)CrcStripping[bd];
      
#line 479 
      e1000_validate_option(& crc_stripping,& opt_6,adapter);
      
#line 480 
      if (crc_stripping == 1U) {
        
#line 481 
        adapter->flags2 |= 1U;
        
#line 482 
        adapter->flags2 |= 4096U;
      }
      else ;
    }
    else {
      
#line 485 
      adapter->flags2 |= 1U;
      
#line 486 
      adapter->flags2 |= 4096U;
    }
  }
  {
    
#line 491 
    struct e1000_option const opt_7 = {.type = enable_option, .name = "Kumeran Lock Loss Workaround", .err = "defaulting to Enabled", .def = 1, .arg = {.r = {.min = 0, .max = 0}}};
    
#line 497 
    bool enabled = (_Bool)(opt_7.def != 0);
    
#line 499 
    if (num_KumeranLockLoss > (unsigned int)bd) {
      
#line 500 
      unsigned int kmrn_lock_loss = (unsigned int)KumeranLockLoss[bd];
      
#line 502 
      e1000_validate_option(& kmrn_lock_loss,& opt_7,adapter);
      
#line 503 
      enabled = (_Bool)(kmrn_lock_loss != 0U);
    }
    else ;
    
#line 506 
    if (hw->mac.type == (unsigned int)e1000_ich8lan) 
#line 507 
                                                     e1000e_set_kmrn_lock_loss_workaround_ich8lan(hw,(_Bool)((bool)((int)enabled) != 0)); else ;
  }
  {
    
#line 512 
    struct e1000_option const opt_8 = {.type = enable_option, .name = "Write-protect NVM", .err = "defaulting to Enabled", .def = 1, .arg = {.r = {.min = 0, .max = 0}}};
    
#line 519 
    if ((adapter->flags & 512U) != 0U) {
      
#line 520 
      if (num_WriteProtectNVM > (unsigned int)bd) {
        
#line 521 
        unsigned int write_protect_nvm = (unsigned int)WriteProtectNVM[bd];
        
#line 523 
        e1000_validate_option(& write_protect_nvm,& opt_8,adapter);
        
#line 525 
        if (write_protect_nvm != 0U) 
#line 526 
                                     adapter->flags |= 256U; else ;
      }
      else 
        
#line 528 
        if (opt_8.def != 0) 
#line 529 
                            adapter->flags |= 256U; else ;
    }
    else ;
  }
  return_label: 
#line 531 
                return;
}


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
extern struct module __this_module;


#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
int snprintf(char *, size_t, char const * , ...);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list)
{
  
#line 27 
  list->next = list;
  
#line 28 
  list->prev = list;
  
#line 29 
  return;
}


#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/math64.h"
__inline static u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)
{
  u64 __retres;
  
#line 20 
  *remainder = (unsigned int)(dividend % (unsigned long long)divisor);
  
#line 21 
  __retres = dividend / (unsigned long long)divisor;
  
#line 21 
  return __retres;
}


#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/math64.h"
__inline static u64 div_u64(u64 dividend, u32 divisor)
{
  u32 remainder;
  u64 tmp;
  
#line 100 
  tmp = div_u64_rem(dividend,divisor,& remainder);
  
#line 100 
  return tmp;
}


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
static bool IS_ERR(void const *ptr);


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
void lockdep_init_map(struct lockdep_map *, char const *, struct lock_class_key *, int);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);


#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 444 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 445 
  return;
}


#line 474 
static void ldv_spin_unlock_irqrestore_73(spinlock_t *lock, unsigned long flags);


#line 478 
static void ldv_spin_unlock_irqrestore_75(spinlock_t *lock, unsigned long flags);


#line 482 
static void ldv_spin_unlock_irqrestore_77(spinlock_t *lock, unsigned long flags);


#line 486 
static void ldv_spin_unlock_irqrestore_79(spinlock_t *lock, unsigned long flags);


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ptp.c.aux"
void __ldv_spin_lock(spinlock_t *);


#line 70 
static void ldv___ldv_spin_lock_72(spinlock_t *ldv_func_arg1);


#line 74 
static void ldv___ldv_spin_lock_74(spinlock_t *ldv_func_arg1);


#line 78 
static void ldv___ldv_spin_lock_76(spinlock_t *ldv_func_arg1);


#line 82 
static void ldv___ldv_spin_lock_78(spinlock_t *ldv_func_arg1);


#line 90 
void ldv_spin_model_lock(char *);


#line 91 
void ldv_spin_model_unlock(char *);


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err(void const *ptr);


#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/time.h"
__inline static s64 timespec_to_ns(struct timespec const *ts)
{
  s64 __retres;
  
#line 193 
  __retres = (long long)ts->tv_sec * 1000000000LL + (long long)ts->tv_nsec;
  
#line 193 
  return __retres;
}


#line 215 
struct timespec ns_to_timespec(s64 const);


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
void init_timer_key(struct timer_list *, unsigned int, char const *, struct lock_class_key *);


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void delayed_work_timer_fn(unsigned long);


#line 181 
void __init_work(struct work_struct *, int);


#line 448 
bool cancel_delayed_work_sync(struct delayed_work *);


#line 597 
static bool ldv_schedule_delayed_work_80(struct delayed_work *dwork, unsigned long delay);


#line 601 
static bool ldv_schedule_delayed_work_81(struct delayed_work *dwork, unsigned long delay);


#line 3834  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void netdev_info(struct net_device const *, char const * , ...);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timecounter.h"
__inline static void timecounter_adjtime(struct timecounter *tc, s64 delta)
{
  
#line 95 
  tc->nsec += (unsigned long long)delta;
  
#line 96 
  return;
}


#line 108 
void timecounter_init(struct timecounter *, struct cyclecounter const *, u64);


#line 120 
u64 timecounter_read(struct timecounter *);


#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ptp_clock_kernel.h"
struct ptp_clock *ptp_clock_register(struct ptp_clock_info *, struct device *);


#line 133 
int ptp_clock_unregister(struct ptp_clock *);


#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
s32 e1000e_get_base_timinca(struct e1000_adapter *adapter, u32 *timinca);


#line 516 
void e1000e_ptp_init(struct e1000_adapter *adapter);


#line 517 
void e1000e_ptp_remove(struct e1000_adapter *adapter);


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ptp.c"
static int e1000e_phc_adjfreq(struct ptp_clock_info *ptp, s32 delta)
{
  int __retres;
  struct e1000_adapter *tmp;
  unsigned long flags;
  u64 adjustment;
  u32 timinca;
  u32 incvalue;
  s32 ret_val;
  {
    
#line 39 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 39 
    tmp = (struct e1000_adapter *)__mptr + 18446744073709538640U;
  }
  
#line 39 
  struct e1000_adapter *adapter = tmp;
  
#line 41 
  struct e1000_hw *hw = & adapter->hw;
  
#line 42 
  bool neg_adj = (_Bool)0;
  
#line 48 
  if (ptp->max_adj < delta || delta < -999999999) {
    
#line 49 
    __retres = -22;
    
#line 49 
    goto return_label;
  }
  else ;
  
#line 51 
  if (delta < 0) {
    
#line 52 
    neg_adj = (_Bool)1;
    
#line 53 
    delta = - delta;
  }
  else ;
  
#line 57 
  ret_val = e1000e_get_base_timinca(adapter,& timinca);
  
#line 58 
  if (ret_val != 0) {
    
#line 59 
    __retres = ret_val;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  ldv___ldv_spin_lock_72(& adapter->systim_lock);
  
#line 63 
  incvalue = timinca & 16777215U;
  
#line 65 
  adjustment = (unsigned long long)incvalue;
  
#line 66 
  adjustment = (unsigned long long)delta * adjustment;
  
#line 67 
  adjustment = div_u64(adjustment,1000000000U);
  
#line 69 
  if ((int)neg_adj != 0) 
#line 69 
                         incvalue -= (unsigned int)adjustment; else 
#line 69 
                                                                    incvalue = (unsigned int)adjustment + incvalue;
  
#line 71 
  timinca &= 4278190080U;
  
#line 72 
  timinca |= incvalue;
  
#line 74 
  __ew32(hw,46600UL,timinca);
  
#line 76 
  ldv_spin_unlock_irqrestore_73(& adapter->systim_lock,flags);
  
#line 78 
  __retres = 0;
  return_label: 
#line 78 
                return __retres;
}


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ptp.c"
static int e1000e_phc_adjtime(struct ptp_clock_info *ptp, s64 delta)
{
  int __retres;
  struct e1000_adapter *tmp;
  unsigned long flags;
  {
    
#line 90 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 90 
    tmp = (struct e1000_adapter *)__mptr + 18446744073709538640U;
  }
  
#line 90 
  struct e1000_adapter *adapter = tmp;
  
#line 94 
  ldv___ldv_spin_lock_74(& adapter->systim_lock);
  
#line 95 
  timecounter_adjtime(& adapter->tc,delta);
  
#line 96 
  ldv_spin_unlock_irqrestore_75(& adapter->systim_lock,flags);
  
#line 98 
  __retres = 0;
  
#line 98 
  return __retres;
}


#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ptp.c"
static int e1000e_phc_gettime(struct ptp_clock_info *ptp, struct timespec *ts)
{
  int __retres;
  struct e1000_adapter *tmp;
  unsigned long flags;
  u64 ns;
  {
    
#line 111 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 111 
    tmp = (struct e1000_adapter *)__mptr + 18446744073709538640U;
  }
  
#line 111 
  struct e1000_adapter *adapter = tmp;
  
#line 116 
  ldv___ldv_spin_lock_76(& adapter->systim_lock);
  
#line 117 
  ns = timecounter_read(& adapter->tc);
  
#line 118 
  ldv_spin_unlock_irqrestore_77(& adapter->systim_lock,flags);
  
#line 120 
  *ts = ns_to_timespec((long long)ns);
  
#line 122 
  __retres = 0;
  
#line 122 
  return __retres;
}


#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ptp.c"
static int e1000e_phc_settime(struct ptp_clock_info *ptp, struct timespec const *ts)
{
  int __retres;
  struct e1000_adapter *tmp;
  unsigned long flags;
  u64 ns;
  s64 tmp_0;
  {
    
#line 136 
    struct ptp_clock_info const *__mptr = (struct ptp_clock_info const *)ptp;
    
#line 136 
    tmp = (struct e1000_adapter *)__mptr + 18446744073709538640U;
  }
  
#line 136 
  struct e1000_adapter *adapter = tmp;
  
#line 141 
  tmp_0 = timespec_to_ns(ts);
  
#line 141 
  ns = (unsigned long long)tmp_0;
  
#line 144 
  ldv___ldv_spin_lock_78(& adapter->systim_lock);
  
#line 145 
  timecounter_init(& adapter->tc,(struct cyclecounter const *)(& adapter->cc),ns);
  
#line 146 
  ldv_spin_unlock_irqrestore_79(& adapter->systim_lock,flags);
  
#line 148 
  __retres = 0;
  
#line 148 
  return __retres;
}


#line 160  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ptp.c"
static int e1000e_phc_enable(struct ptp_clock_info *ptp, struct ptp_clock_request *request, int on)
{
  int __retres;
  
#line 164 
  __retres = -95;
  
#line 164 
  return __retres;
}


#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ptp.c"
static void e1000e_systim_overflow_work(struct work_struct *work)
{
  struct e1000_adapter *tmp;
  struct timespec ts;
  {
    
#line 169 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 169 
    tmp = (struct e1000_adapter *)__mptr + 18446744073709539104U;
  }
  
#line 169 
  struct e1000_adapter *adapter = tmp;
  
#line 171 
  struct e1000_hw *hw = & adapter->hw;
  
#line 174 
  (*(adapter->ptp_clock_info.gettime64))(& adapter->ptp_clock_info,& ts);
  {
    
#line 176 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_systim_overflow_work", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ptp.c", .format = "SYSTIM overflow check at %lld.%09lu\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))177U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 176 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 176 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"SYSTIM overflow check at %lld.%09lu\n",(long long)ts.tv_sec,ts.tv_nsec); else ;
  }
  
#line 179 
  ldv_schedule_delayed_work_80(& adapter->systim_overflow_work,3600000UL);
  
#line 180 
  return;
}


#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ptp.c"
static struct ptp_clock_info const e1000e_ptp_clock_info = {.owner = & __this_module, .name = {(char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0, (char)0}, .max_adj = 0, .n_alarm = 0, .n_ext_ts = 0, .n_per_out = 0, .n_pins = 0, .pps = 0, .pin_config = (struct ptp_pin_desc *)0, .adjfreq = & e1000e_phc_adjfreq, .adjtime = & e1000e_phc_adjtime, .gettime64 = & e1000e_phc_gettime, .settime64 = & e1000e_phc_settime, .enable = & e1000e_phc_enable, .verify = (int (*)(struct ptp_clock_info *, unsigned int , enum ptp_pin_function , unsigned int ))0};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ptp.c"
void e1000e_ptp_init(struct e1000_adapter *adapter)
{
  bool tmp_0;
  
#line 207 
  struct e1000_hw *hw = & adapter->hw;
  
#line 209 
  adapter->ptp_clock = (struct ptp_clock *)0;
  
#line 211 
  if ((adapter->flags & 16384U) == 0U) 
#line 212 
                                       goto return_label; else ;
  
#line 214 
  adapter->ptp_clock_info = e1000e_ptp_clock_info;
  
#line 216 
  snprintf((char *)(& adapter->ptp_clock_info.name),16UL,"%pm",(unsigned char *)(& (adapter->netdev)->perm_addr));
  
#line 220 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)10: 
#line 221 
    ;
    case (unsigned int)11: 
#line 222 
    ;
    case (unsigned int)12: 
#line 223 
    ;
    
#line 224 
    if ((unsigned int)hw->mac.type + 4294967285U > 1U) 
#line 224 
                                                       goto _LOR;
    else {
      u32 tmp;
      
#line 225 
      tmp = __er32(hw,46624UL);
      
#line 225 
      if ((tmp & 32U) != 0U) {
        _LOR: {
                
#line 227 
                adapter->ptp_clock_info.max_adj = 23999999;
                
#line 228 
                goto ldv_47649;
              }
      }
      else ;
    }
    case (unsigned int)3: 
#line 231 
    ;
    case (unsigned int)4: 
#line 232 
    ;
    
#line 233 
    adapter->ptp_clock_info.max_adj = 599999999;
    
#line 234 
    goto ldv_47649;
    default: 
#line 235 
    ;
    
#line 236 
    goto ldv_47649;
  }
  ldv_47649: 
#line 239 
  ;
  {
    struct lock_class_key __key;
    
#line 239 
    __init_work(& adapter->systim_overflow_work.work,0);
    
#line 239 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 239 
    adapter->systim_overflow_work.work.data = __constr_expr_37;
    
#line 239 
    lockdep_init_map(& adapter->systim_overflow_work.work.lockdep_map,"(&(&adapter->systim_overflow_work)->work)",& __key,0);
    
#line 239 
    INIT_LIST_HEAD(& adapter->systim_overflow_work.work.entry);
    
#line 239 
    adapter->systim_overflow_work.work.func = & e1000e_systim_overflow_work;
  }
  {
    struct lock_class_key __key_0;
    
#line 239 
    init_timer_key(& adapter->systim_overflow_work.timer,2097152U,"(&(&adapter->systim_overflow_work)->timer)",& __key_0);
  }
  
#line 239 
  adapter->systim_overflow_work.timer.function = & delayed_work_timer_fn;
  
#line 239 
  adapter->systim_overflow_work.timer.data = (unsigned long)(& adapter->systim_overflow_work);
  
#line 242 
  ldv_schedule_delayed_work_81(& adapter->systim_overflow_work,3600000UL);
  
#line 245 
  adapter->ptp_clock = ptp_clock_register(& adapter->ptp_clock_info,& (adapter->pdev)->dev);
  
#line 247 
  tmp_0 = IS_ERR((void const *)adapter->ptp_clock);
  
#line 247 
  if ((int)tmp_0 != 0) {
    
#line 248 
    adapter->ptp_clock = (struct ptp_clock *)0;
    
#line 249 
    netdev_err((struct net_device const *)adapter->netdev,"ptp_clock_register failed\n");
  }
  else 
#line 251 
       netdev_info((struct net_device const *)adapter->netdev,"registered PHC clock\n");
  return_label: 
#line 252 
                return;
}


#line 261  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ptp.c"
void e1000e_ptp_remove(struct e1000_adapter *adapter)
{
  
#line 263 
  if ((adapter->flags & 16384U) == 0U) 
#line 264 
                                       goto return_label; else ;
  
#line 266 
  cancel_delayed_work_sync(& adapter->systim_overflow_work);
  
#line 268 
  if (adapter->ptp_clock != (struct ptp_clock *)0) {
    
#line 269 
    ptp_clock_unregister(adapter->ptp_clock);
    
#line 270 
    adapter->ptp_clock = (struct ptp_clock *)0;
    
#line 271 
    netdev_info((struct net_device const *)adapter->netdev,"removed PHC\n");
  }
  else ;
  return_label: 
#line 273 
                return;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ptp.c.aux"
_Bool ldv_emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1);


#line 84  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ptp.c.aux"
static bool IS_ERR(void const *ptr)
{
  bool __retres;
  long ret;
  
#line 88 
  ret = ldv_is_err(ptr);
  
#line 89 
  __retres = (_Bool)(ret != 0L);
  
#line 89 
  return __retres;
}


#line 740  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ptp.c.aux"
static void ldv___ldv_spin_lock_72(spinlock_t *ldv_func_arg1)
{
  
#line 744 
  ldv_spin_model_lock((char *)"systim_lock_of_e1000_adapter");
  
#line 746 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 747 
  return;
}


#line 750  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_73(spinlock_t *lock, unsigned long flags)
{
  
#line 754 
  ldv_spin_model_unlock((char *)"systim_lock_of_e1000_adapter");
  
#line 756 
  spin_unlock_irqrestore(lock,flags);
  
#line 757 
  return;
}


#line 760  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ptp.c.aux"
static void ldv___ldv_spin_lock_74(spinlock_t *ldv_func_arg1)
{
  
#line 764 
  ldv_spin_model_lock((char *)"systim_lock_of_e1000_adapter");
  
#line 766 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 767 
  return;
}


#line 770  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_75(spinlock_t *lock, unsigned long flags)
{
  
#line 774 
  ldv_spin_model_unlock((char *)"systim_lock_of_e1000_adapter");
  
#line 776 
  spin_unlock_irqrestore(lock,flags);
  
#line 777 
  return;
}


#line 780  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ptp.c.aux"
static void ldv___ldv_spin_lock_76(spinlock_t *ldv_func_arg1)
{
  
#line 784 
  ldv_spin_model_lock((char *)"systim_lock_of_e1000_adapter");
  
#line 786 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 787 
  return;
}


#line 790  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_77(spinlock_t *lock, unsigned long flags)
{
  
#line 794 
  ldv_spin_model_unlock((char *)"systim_lock_of_e1000_adapter");
  
#line 796 
  spin_unlock_irqrestore(lock,flags);
  
#line 797 
  return;
}


#line 800  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ptp.c.aux"
static void ldv___ldv_spin_lock_78(spinlock_t *ldv_func_arg1)
{
  
#line 804 
  ldv_spin_model_lock((char *)"systim_lock_of_e1000_adapter");
  
#line 806 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 807 
  return;
}


#line 810  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ptp.c.aux"
static void ldv_spin_unlock_irqrestore_79(spinlock_t *lock, unsigned long flags)
{
  
#line 814 
  ldv_spin_model_unlock((char *)"systim_lock_of_e1000_adapter");
  
#line 816 
  spin_unlock_irqrestore(lock,flags);
  
#line 817 
  return;
}


#line 820  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ptp.c.aux"
static bool ldv_schedule_delayed_work_80(struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 824 
  tmp = ldv_emg_schedule_delayed_work(dwork,delay);
  
#line 824 
  __retres = tmp != 0;
  
#line 824 
  return __retres;
}


#line 828  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ptp.c.aux"
static bool ldv_schedule_delayed_work_81(struct delayed_work *dwork, unsigned long delay)
{
  bool __retres;
  bool tmp;
  
#line 832 
  tmp = ldv_emg_schedule_delayed_work(dwork,delay);
  
#line 832 
  __retres = tmp != 0;
  
#line 832 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/manage.h"
bool e1000e_check_mng_mode_generic(struct e1000_hw *hw);


#line 26 
bool e1000e_enable_tx_pkt_filtering(struct e1000_hw *hw);


#line 27 
s32 e1000e_mng_write_dhcp_info(struct e1000_hw *hw, u8 *buffer, u16 length);


#line 28 
bool e1000e_enable_mng_pass_thru(struct e1000_hw *hw);


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/manage.c"
static u8 e1000_calculate_checksum(u8 *buffer, u32 length)
{
  u8 __retres;
  u32 i;
  
#line 35 
  u8 sum = (unsigned char)0U;
  
#line 37 
  if (buffer == (u8 *)0U) {
    
#line 38 
    __retres = (unsigned char)0U;
    
#line 38 
    goto return_label;
  }
  else ;
  
#line 40 
  i = 0U;
  
#line 40 
  goto ldv_47529;
  ldv_47528: 
#line 41 
  ;
  
#line 41 
  sum = (unsigned char)((int)*(buffer + i) + (int)sum);
  
#line 40 
  i += 1U;
  ldv_47529: 
#line 41 
  ;
  
#line 40 
  if (i < length) 
#line 42 
                  goto ldv_47528; else 
#line 45 
                                       goto ldv_47530;
  ldv_47530: 
#line 46 
  ;
  
#line 43 
  __retres = (unsigned char)(- ((int)sum));
  return_label: 
#line 43 
                return __retres;
}


#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/manage.c"
static s32 e1000_mng_enable_host_if(struct e1000_hw *hw)
{
  s32 __retres;
  u32 hicr;
  u8 i;
  
#line 61 
  if (! hw->mac.arc_subsystem_valid) {
    {
      
#line 62 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_mng_enable_host_if", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/manage.c", .format = "ARC subsystem not valid.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))62U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 62 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 62 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"ARC subsystem not valid.\n"); else ;
    }
    
#line 63 
    __retres = -11;
    
#line 63 
    goto return_label;
  }
  else ;
  
#line 67 
  hicr = __er32(hw,36608UL);
  
#line 68 
  if ((hicr & 1U) == 0U) {
    {
      
#line 69 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_mng_enable_host_if", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/manage.c", .format = "E1000_HOST_EN bit disabled.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))69U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 69 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 69 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"E1000_HOST_EN bit disabled.\n"); else ;
    }
    
#line 70 
    __retres = -11;
    
#line 70 
    goto return_label;
  }
  else ;
  
#line 73 
  i = (unsigned char)0U;
  
#line 73 
  goto ldv_47545;
  ldv_47544: 
#line 74 
  ;
  
#line 74 
  hicr = __er32(hw,36608UL);
  
#line 75 
  if ((hicr & 2U) == 0U) 
#line 76 
                         goto ldv_47539; else ;
  
#line 77 
  if (1) 
#line 77 
         __const_udelay(4295000UL);
  else {
    
#line 77 
    unsigned long __ms = 1UL;
    {
      unsigned long tmp;
      
#line 77 
      goto ldv_47542;
      ldv_47541: 
#line 78 
      ;
      
#line 77 
      __const_udelay(4295000UL);
      ldv_47542: 
#line 79 
      ;
      
#line 77 
      tmp = __ms;
      
#line 77 
      __ms -= 1UL;
      
#line 77 
      ;
      
#line 77 
      if (tmp != 0UL) 
#line 79 
                      goto ldv_47541; else 
#line 82 
                                           goto ldv_47543;
      ldv_47543: 
#line 83 
      ;
    }
  }
  
#line 73 
  i = (u8)((int)i + 1);
  ldv_47545: 
#line 74 
  ;
  
#line 73 
  if ((unsigned int)i <= 9U) 
#line 75 
                             goto ldv_47544; else 
#line 78 
                                                  goto ldv_47539;
  ldv_47539: 
#line 79 
  ;
  
#line 80 
  if ((unsigned int)i == 10U) {
    {
      
#line 81 
      struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_mng_enable_host_if", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/manage.c", .format = "Previous command timeout failed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))81U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 81 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 81 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Previous command timeout failed.\n"); else ;
    }
    
#line 82 
    __retres = -11;
    
#line 82 
    goto return_label;
  }
  else ;
  
#line 85 
  __retres = 0;
  return_label: 
#line 85 
                return __retres;
}


#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/manage.c"
bool e1000e_check_mng_mode_generic(struct e1000_hw *hw)
{
  bool __retres;
  
#line 97 
  u32 fwsm = __er32(hw,23380UL);
  
#line 99 
  __retres = (_Bool)((fwsm & 14U) == 6U);
  
#line 99 
  return __retres;
}


#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/manage.c"
bool e1000e_enable_tx_pkt_filtering(struct e1000_hw *hw)
{
  bool __retres;
  u32 offset;
  s32 ret_val;
  s32 hdr_csum;
  s32 csum;
  u8 i;
  u8 len;
  int tmp_0;
  bool tmp;
  u8 tmp_1;
  
#line 112 
  struct e1000_host_mng_dhcp_cookie *hdr = & hw->mng_cookie;
  
#line 113 
  u32 *buffer = (u32 *)(& hw->mng_cookie);
  
#line 118 
  hw->mac.tx_pkt_filtering = (_Bool)1;
  
#line 121 
  tmp = (*(hw->mac.ops.check_mng_mode))(hw);
  
#line 121 
  if (tmp) 
#line 121 
           tmp_0 = 0; else 
#line 121 
                           tmp_0 = 1;
  
#line 121 
  if (tmp_0) {
    
#line 122 
    hw->mac.tx_pkt_filtering = (_Bool)0;
    
#line 123 
    __retres = hw->mac.tx_pkt_filtering;
    
#line 123 
    goto return_label;
  }
  else ;
  
#line 129 
  ret_val = e1000_mng_enable_host_if(hw);
  
#line 130 
  if (ret_val != 0) {
    
#line 131 
    hw->mac.tx_pkt_filtering = (_Bool)0;
    
#line 132 
    __retres = hw->mac.tx_pkt_filtering;
    
#line 132 
    goto return_label;
  }
  else ;
  
#line 136 
  len = (unsigned char)4U;
  
#line 137 
  offset = 444U;
  
#line 138 
  i = (unsigned char)0U;
  
#line 138 
  goto ldv_47563;
  ldv_47562: 
#line 139 
  ;
  
#line 139 
  *(buffer + (int)i) = readl((void const volatile *)(hw->hw_addr + ((((unsigned int)i + offset) << 2) + 34816U)));
  
#line 138 
  i = (u8)((int)i + 1);
  ldv_47563: 
#line 139 
  ;
  
#line 138 
  if ((int)i < (int)len) 
#line 140 
                         goto ldv_47562; else 
#line 143 
                                              goto ldv_47564;
  ldv_47564: 
#line 144 
  ;
  
#line 141 
  hdr_csum = (int)hdr->checksum;
  
#line 142 
  hdr->checksum = (unsigned char)0U;
  
#line 143 
  tmp_1 = e1000_calculate_checksum((u8 *)hdr,16U);
  
#line 143 
  csum = (int)tmp_1;
  
#line 149 
  if (hdr_csum != csum || hdr->signature != 1414349129U) {
    
#line 150 
    hw->mac.tx_pkt_filtering = (_Bool)1;
    
#line 151 
    __retres = hw->mac.tx_pkt_filtering;
    
#line 151 
    goto return_label;
  }
  else ;
  
#line 155 
  if (((int)hdr->status & 1) == 0) 
#line 156 
                                   hw->mac.tx_pkt_filtering = (_Bool)0; else ;
  
#line 158 
  __retres = hw->mac.tx_pkt_filtering;
  return_label: 
#line 158 
                return __retres;
}


#line 168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/manage.c"
static s32 e1000_mng_write_cmd_header(struct e1000_hw *hw, struct e1000_host_mng_command_header *hdr)
{
  s32 __retres;
  u16 i;
  
#line 171 
  u16 length = (unsigned short)8U;
  
#line 175 
  hdr->checksum = e1000_calculate_checksum((u8 *)hdr,(unsigned int)length);
  
#line 177 
  length = (unsigned short)((int)length >> 2);
  
#line 179 
  i = (unsigned short)0U;
  
#line 179 
  goto ldv_47572;
  ldv_47571: 
#line 180 
  ;
  
#line 180 
  __ew32(hw,(unsigned long)(((int)i << 2) + 34816),*((u32 *)hdr + (int)i));
  
#line 181 
  __er32(hw,8UL);
  
#line 179 
  i = (u16)((int)i + 1);
  ldv_47572: 
#line 180 
  ;
  
#line 179 
  if ((int)i < (int)length) 
#line 181 
                            goto ldv_47571; else 
#line 184 
                                                 goto ldv_47573;
  ldv_47573: 
#line 185 
  ;
  
#line 184 
  __retres = 0;
  
#line 184 
  return __retres;
}


#line 199  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/manage.c"
static s32 e1000_mng_host_if_write(struct e1000_hw *hw, u8 *buffer, u16 length, u16 offset, u8 *sum)
{
  s32 __retres;
  u8 *tmp;
  u16 remaining;
  u16 i;
  u16 j;
  u16 prev_bytes;
  u8 *tmp_1;
  
#line 203 
  u8 *bufptr = buffer;
  
#line 204 
  u32 data = 0U;
  
#line 209 
  if ((unsigned int)length == 0U || (int)offset + (int)length > 1784) {
    
#line 210 
    __retres = -4;
    
#line 210 
    goto return_label;
  }
  else ;
  
#line 212 
  tmp = (u8 *)(& data);
  
#line 213 
  prev_bytes = (unsigned short)((unsigned int)offset & 3U);
  
#line 214 
  offset = (unsigned short)((int)offset >> 2);
  
#line 216 
  if ((unsigned int)prev_bytes != 0U) {
    u8 *tmp_0;
    
#line 217 
    data = readl((void const volatile *)(hw->hw_addr + ((unsigned int)((int)offset << 2) + 34816U)));
    
#line 218 
    j = prev_bytes;
    
#line 218 
    goto ldv_47589;
    ldv_47588: 
#line 219 
    ;
    
#line 219 
    tmp_0 = bufptr;
    
#line 219 
    bufptr += 1;
    
#line 219 
    *(tmp + (int)j) = *tmp_0;
    
#line 220 
    *sum = (unsigned char)((int)*sum + (int)*(tmp + (int)j));
    
#line 218 
    j = (u16)((int)j + 1);
    ldv_47589: 
#line 219 
    ;
    
#line 218 
    if ((unsigned int)j <= 3U) 
#line 220 
                               goto ldv_47588; else 
#line 223 
                                                    goto ldv_47590;
    ldv_47590: 
#line 224 
    ;
    
#line 222 
    __ew32(hw,(unsigned long)(((int)offset << 2) + 34816),data);
    
#line 223 
    length = (unsigned short)(((int)prev_bytes - (int)j) + (int)length);
    
#line 224 
    offset = (u16)((int)offset + 1);
  }
  else ;
  
#line 227 
  remaining = (unsigned short)((unsigned int)length & 3U);
  
#line 228 
  length = (unsigned short)((int)length - (int)remaining);
  
#line 231 
  length = (unsigned short)((int)length >> 2);
  
#line 236 
  i = (unsigned short)0U;
  
#line 236 
  goto ldv_47595;
  ldv_47594: 
#line 237 
  ;
  
#line 237 
  j = (unsigned short)0U;
  
#line 237 
  goto ldv_47592;
  ldv_47591: 
#line 238 
  ;
  
#line 238 
  tmp_1 = bufptr;
  
#line 238 
  bufptr += 1;
  
#line 238 
  *(tmp + (int)j) = *tmp_1;
  
#line 239 
  *sum = (unsigned char)((int)*sum + (int)*(tmp + (int)j));
  
#line 237 
  j = (u16)((int)j + 1);
  ldv_47592: 
#line 238 
  ;
  
#line 237 
  if ((unsigned int)j <= 3U) 
#line 239 
                             goto ldv_47591; else 
#line 242 
                                                  goto ldv_47593;
  ldv_47593: 
#line 243 
  ;
  
#line 242 
  __ew32(hw,(unsigned long)((((int)offset + (int)i) << 2) + 34816),data);
  
#line 236 
  i = (u16)((int)i + 1);
  ldv_47595: 
#line 237 
  ;
  
#line 236 
  if ((int)i < (int)length) 
#line 238 
                            goto ldv_47594; else 
#line 241 
                                                 goto ldv_47596;
  ldv_47596: 
#line 242 
  ;
  
#line 244 
  if ((unsigned int)remaining != 0U) {
    
#line 245 
    j = (unsigned short)0U;
    
#line 245 
    goto ldv_47598;
    ldv_47597: 
#line 246 
    ;
    
#line 246 
    if ((int)j < (int)remaining) {
      u8 *tmp_2;
      
#line 247 
      tmp_2 = bufptr;
      
#line 247 
      bufptr += 1;
      
#line 247 
      *(tmp + (int)j) = *tmp_2;
    }
    else 
#line 249 
         *(tmp + (int)j) = (unsigned char)0U;
    
#line 251 
    *sum = (unsigned char)((int)*sum + (int)*(tmp + (int)j));
    
#line 245 
    j = (u16)((int)j + 1);
    ldv_47598: 
#line 246 
    ;
    
#line 245 
    if ((unsigned int)j <= 3U) 
#line 247 
                               goto ldv_47597; else 
#line 250 
                                                    goto ldv_47599;
    ldv_47599: 
#line 251 
    ;
    
#line 253 
    __ew32(hw,(unsigned long)((((int)offset + (int)i) << 2) + 34816),data);
  }
  else ;
  
#line 256 
  __retres = 0;
  return_label: 
#line 256 
                return __retres;
}


#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/manage.c"
s32 e1000e_mng_write_dhcp_info(struct e1000_hw *hw, u8 *buffer, u16 length)
{
  s32 __retres;
  struct e1000_host_mng_command_header hdr;
  s32 ret_val;
  u32 hicr;
  
#line 273 
  hdr.command_id = (unsigned char)64U;
  
#line 274 
  hdr.command_length = length;
  
#line 275 
  hdr.reserved1 = (unsigned short)0U;
  
#line 276 
  hdr.reserved2 = (unsigned short)0U;
  
#line 277 
  hdr.checksum = (unsigned char)0U;
  
#line 280 
  ret_val = e1000_mng_enable_host_if(hw);
  
#line 281 
  if (ret_val != 0) {
    
#line 282 
    __retres = ret_val;
    
#line 282 
    goto return_label;
  }
  else ;
  
#line 285 
  ret_val = e1000_mng_host_if_write(hw,buffer,(unsigned short)((int)length),(unsigned short)8,& hdr.checksum);
  
#line 287 
  if (ret_val != 0) {
    
#line 288 
    __retres = ret_val;
    
#line 288 
    goto return_label;
  }
  else ;
  
#line 291 
  ret_val = e1000_mng_write_cmd_header(hw,& hdr);
  
#line 292 
  if (ret_val != 0) {
    
#line 293 
    __retres = ret_val;
    
#line 293 
    goto return_label;
  }
  else ;
  
#line 296 
  hicr = __er32(hw,36608UL);
  
#line 297 
  __ew32(hw,36608UL,hicr | 2U);
  
#line 299 
  __retres = 0;
  return_label: 
#line 299 
                return __retres;
}


#line 309  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/manage.c"
bool e1000e_enable_mng_pass_thru(struct e1000_hw *hw)
{
  bool __retres;
  u32 manc;
  u32 fwsm;
  u32 factps;
  
#line 314 
  manc = __er32(hw,22560UL);
  
#line 316 
  if ((manc & 131072U) == 0U) {
    
#line 317 
    __retres = (_Bool)0;
    
#line 317 
    goto return_label;
  }
  else ;
  
#line 319 
  if ((int)hw->mac.has_fwsm != 0) {
    
#line 320 
    fwsm = __er32(hw,23380UL);
    
#line 321 
    factps = __er32(hw,23344UL);
    
#line 323 
    if ((factps & 536870912U) == 0U && (fwsm & 14U) == 4U) {
      
#line 326 
      __retres = (_Bool)1;
      
#line 326 
      goto return_label;
    }
    else ;
  }
  else 
    
#line 327 
    if ((unsigned int)hw->mac.type + 4294967293U <= 1U) {
      u16 data;
      s32 ret_val;
      
#line 332 
      factps = __er32(hw,23344UL);
      
#line 333 
      ret_val = e1000_read_nvm(hw,(unsigned short)15,(unsigned short)1,& data);
      
#line 334 
      if (ret_val != 0) {
        
#line 335 
        __retres = (_Bool)0;
        
#line 335 
        goto return_label;
      }
      else ;
      
#line 337 
      if ((factps & 536870912U) == 0U && ((int)data & 24576) == 16384) {
        
#line 340 
        __retres = (_Bool)1;
        
#line 340 
        goto return_label;
      }
      else ;
    }
    else 
      
#line 341 
      if ((manc & 1U) != 0U && (manc & 2U) == 0U) {
        
#line 343 
        __retres = (_Bool)1;
        
#line 343 
        goto return_label;
      }
      else ;
  
#line 346 
  __retres = (_Bool)0;
  return_label: 
#line 346 
                return __retres;
}


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(long nr, unsigned long const volatile *addr)
{
  int __retres;
  
#line 311 
  __retres = ((*(addr + (nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL;
  
#line 311 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_64.h"
unsigned long __phys_addr(unsigned long);


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memcpy(void *, void const *, size_t);


#line 56 
void *memset(void *, int, size_t);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
size_t strlcpy(char *, char const *, size_t);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kmalloc(size_t size, gfp_t flags);


#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
extern unsigned long volatile jiffies;


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
unsigned long msleep_interruptible(unsigned int);


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
__inline static char const *kobject_name(struct kobject const *kobj)
{
  char const *__retres;
  
#line 89 
  __retres = kobj->name;
  
#line 89 
  return __retres;
}


#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_wakeup.h"
__inline static bool device_can_wakeup(struct device *dev)
{
  bool __retres;
  
#line 83 
  __retres = (_Bool)((int)dev->power.can_wakeup != 0);
  
#line 83 
  return __retres;
}


#line 104 
int device_set_wakeup_enable(struct device *, bool);


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static char const *dev_name(struct device const *dev)
{
  char const *__retres;
  char const *tmp;
  
#line 836 
  if (dev->init_name != (char const *)0) {
    
#line 837 
    __retres = dev->init_name;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  tmp = kobject_name(& dev->kobj);
  
#line 839 
  __retres = tmp;
  return_label: 
#line 839 
                return __retres;
}


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemcheck.h"
__inline static void kmemcheck_mark_initialized(void *address, unsigned int n)
{
  
#line 133 
  return;
}


#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kmalloc(size_t size, gfp_t flags);


#line 542 
static void *kcalloc(size_t n, size_t size, gfp_t flags);


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  int __retres;
  
#line 76 
  __retres = (unsigned int)dma_direction <= 2U;
  
#line 76 
  return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-debug.h"
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t, bool);


#line 42 
void debug_dma_mapping_error(struct device *, dma_addr_t);


#line 44 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int, bool);


#line 59 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);


#line 63 
void debug_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, int);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
extern struct dma_map_ops *dma_ops;


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  struct dma_map_ops *__retres;
  
#line 37 
  if ((long)(dev == (struct device *)0) != 0L || dev->archdata.dma_ops == (struct dma_map_ops *)0) {
    
#line 38 
    __retres = dma_ops;
    
#line 38 
    goto return_label;
  }
  else {
    
#line 40 
    __retres = dev->archdata.dma_ops;
    
#line 40 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  dma_addr_t addr;
  int tmp_0;
  unsigned long tmp_1;
  unsigned long tmp_2;
  
#line 15 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 18 
  kmemcheck_mark_initialized(ptr,(unsigned int)size);
  
#line 19 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 19 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 21 
    ldv_inline_asm();
    
#line 19 
    ;
  }
  else ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  tmp_1 = __phys_addr((unsigned long)ptr);
  
#line 20 
  ;
  
#line 20 
  addr = (*(ops->map_page))(dev,(struct page *)(-24189255811072) + (tmp_1 >> 12),(unsigned long)ptr & 4095UL,size,dir,attrs);
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  tmp_2 = __phys_addr((unsigned long)ptr);
  
#line 23 
  ;
  
#line 23 
  debug_dma_map_page(dev,(struct page *)(-24189255811072) + (tmp_2 >> 12),(unsigned long)ptr & 4095UL,size,(int)dir,addr,(_Bool)1);
  
#line 26 
  return addr;
}


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  int tmp_0;
  
#line 34 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 36 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 36 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 38 
    ldv_inline_asm();
    
#line 36 
    ;
  }
  else ;
  
#line 37 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 38 
    (*(ops->unmap_page))(dev,addr,size,dir,attrs); else ;
  
#line 39 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)1);
  
#line 40 
  return;
}


#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 106 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 108 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 108 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 110 
    ldv_inline_asm();
    
#line 108 
    ;
  }
  else ;
  
#line 109 
  if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 110 
    (*(ops->sync_single_for_cpu))(dev,addr,size,dir); else ;
  
#line 111 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  
#line 112 
  return;
}


#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_for_device(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 118 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 120 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 120 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 122 
    ldv_inline_asm();
    
#line 120 
    ;
  }
  else ;
  
#line 121 
  if (ops->sync_single_for_device != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 122 
    (*(ops->sync_single_for_device))(dev,addr,size,dir); else ;
  
#line 123 
  debug_dma_sync_single_for_device(dev,addr,size,(int)dir);
  
#line 124 
  return;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  int __retres;
  
#line 49 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 50 
  debug_dma_mapping_error(dev,dma_addr);
  
#line 51 
  if (ops->mapping_error != (int (*)(struct device *, dma_addr_t ))0) {
    int tmp_0;
    
#line 52 
    tmp_0 = (*(ops->mapping_error))(dev,dma_addr);
    
#line 52 
    __retres = tmp_0;
    
#line 52 
    goto return_label;
  }
  else ;
  
#line 54 
  __retres = dma_addr == 0ULL;
  return_label: 
#line 54 
                return __retres;
}


#line 131 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, struct dma_attrs *);


#line 136 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, struct dma_attrs *);


#line 775  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
void consume_skb(struct sk_buff *);


#line 783 
struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);


#line 787  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size, gfp_t priority)
{
  struct sk_buff *tmp;
  
#line 790 
  tmp = __alloc_skb(size,priority,0,-1);
  
#line 790 
  return tmp;
}


#line 1688 
unsigned char *skb_put(struct sk_buff *, unsigned int);


#line 1789  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_reserve(struct sk_buff *skb, int len)
{
  
#line 1791 
  skb->data += len;
  
#line 1792 
  skb->tail += (unsigned int)len;
  
#line 1793 
  return;
}


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static void ethtool_cmd_speed_set(struct ethtool_cmd *ep, __u32 speed)
{
  
#line 117 
  ep->speed = (unsigned short)speed;
  
#line 118 
  ep->speed_hi = (unsigned short)(speed >> 16);
  
#line 119 
  return;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static __u32 ethtool_cmd_speed(struct ethtool_cmd const *ep)
{
  __u32 __retres;
  
#line 123 
  __retres = (unsigned int)(((int)ep->speed_hi << 16) | (int)ep->speed);
  
#line 123 
  return __retres;
}


#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
u32 ethtool_op_get_link(struct net_device *);


#line 86 
int ethtool_op_get_ts_info(struct net_device *, struct ethtool_ts_info *);


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_72(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 145 
static int ldv_request_irq_73(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 157 
static void ldv_free_irq_74(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device const *dev)
{
  void *__retres;
  
#line 1882 
  __retres = (void *)dev + 3008U;
  
#line 1882 
  return __retres;
}


#line 2182 
int dev_open(struct net_device *);


#line 2183 
int dev_close(struct net_device *);


#line 2769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 2771 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev->state));
  
#line 2771 
  __retres = (_Bool)(tmp != 0);
  
#line 2771 
  return __retres;
}


#line 3038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 3040 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& dev->state));
  
#line 3040 
  __retres = (_Bool)(tmp == 0);
  
#line 3040 
  return __retres;
}


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static char const *pci_name(struct pci_dev const *pdev)
{
  char const *tmp;
  
#line 1486 
  tmp = dev_name(& pdev->dev);
  
#line 1486 
  return tmp;
}


#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
void *vmalloc(unsigned long);


#line 83 
void vfree(void const *);


#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
int __pm_runtime_idle(struct device *, int);


#line 41 
int __pm_runtime_resume(struct device *, int);


#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
__inline static bool pm_runtime_suspended(struct device *dev)
{
  bool __retres;
  
#line 87 
  __retres = (_Bool)((dev->power.runtime_status == (unsigned int)RPM_SUSPENDED && (unsigned int)*((unsigned char *)(& dev->power) + 528UL) == 0U) != 0);
  
#line 87 
  return __retres;
}


#line 227  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
__inline static int pm_runtime_get_sync(struct device *dev)
{
  int tmp;
  
#line 229 
  tmp = __pm_runtime_resume(dev,4);
  
#line 229 
  return tmp;
}


#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
__inline static int pm_runtime_put_sync(struct device *dev)
{
  int tmp;
  
#line 245 
  tmp = __pm_runtime_idle(dev,4);
  
#line 245 
  return tmp;
}


#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ptp_clock_kernel.h"
int ptp_clock_index(struct ptp_clock *);


#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mdio.h"
__inline static u32 mmd_eee_cap_to_ethtool_sup_t(u16 eee_cap)
{
  
#line 102 
  u32 supported = 0U;
  
#line 104 
  if (((int)eee_cap & 2) != 0) 
#line 105 
                               supported |= 8U; else ;
  
#line 106 
  if (((int)eee_cap & 4) != 0) 
#line 107 
                               supported |= 32U; else ;
  
#line 108 
  if (((int)eee_cap & 8) != 0) 
#line 109 
                               supported |= 4096U; else ;
  
#line 110 
  if (((int)eee_cap & 16) != 0) 
#line 111 
                                supported |= 131072U; else ;
  
#line 112 
  if (((int)eee_cap & 32) != 0) 
#line 113 
                                supported |= 262144U; else ;
  
#line 114 
  if (((int)eee_cap & 64) != 0) 
#line 115 
                                supported |= 524288U; else ;
  
#line 117 
  return supported;
}


#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mdio.h"
__inline static u16 ethtool_adv_to_mmd_eee_adv_t(u32 adv)
{
  
#line 158 
  u16 reg = (unsigned short)0U;
  
#line 160 
  if ((adv & 8U) != 0U) 
#line 161 
                        reg = (unsigned short)((unsigned int)reg | 2U); else ;
  
#line 162 
  if ((adv & 32U) != 0U) 
#line 163 
                         reg = (unsigned short)((unsigned int)reg | 4U); else ;
  
#line 164 
  if ((adv & 4096U) != 0U) 
#line 165 
                           reg = (unsigned short)((unsigned int)reg | 8U); else ;
  
#line 166 
  if ((adv & 131072U) != 0U) 
#line 167 
                             reg = (unsigned short)((unsigned int)reg | 16U); else ;
  
#line 168 
  if ((adv & 262144U) != 0U) 
#line 169 
                             reg = (unsigned short)((unsigned int)reg | 32U); else ;
  
#line 170 
  if ((adv & 524288U) != 0U) 
#line 171 
                             reg = (unsigned short)((unsigned int)reg | 64U); else ;
  
#line 173 
  return reg;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.h"
s32 e1000e_force_mac_fc(struct e1000_hw *hw);


#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
char e1000e_driver_name[7U];


#line 478 
char const e1000e_driver_version[8U];


#line 481 
void e1000e_set_ethtool_ops(struct net_device *netdev);


#line 483 
int e1000e_up(struct e1000_adapter *adapter);


#line 484 
void e1000e_down(struct e1000_adapter *adapter, bool reset);


#line 485 
void e1000e_reinit_locked(struct e1000_adapter *adapter);


#line 486 
void e1000e_reset(struct e1000_adapter *adapter);


#line 487 
void e1000e_power_up_phy(struct e1000_adapter *adapter);


#line 488 
int e1000e_setup_rx_resources(struct e1000_ring *rx_ring);


#line 489 
int e1000e_setup_tx_resources(struct e1000_ring *tx_ring);


#line 490 
void e1000e_free_rx_resources(struct e1000_ring *rx_ring);


#line 491 
void e1000e_free_tx_resources(struct e1000_ring *tx_ring);


#line 492 
struct rtnl_link_stats64 *e1000e_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats);


#line 494 
void e1000e_set_interrupt_capability(struct e1000_adapter *adapter);


#line 495 
void e1000e_reset_interrupt_capability(struct e1000_adapter *adapter);


#line 496 
void e1000e_get_hw_control(struct e1000_adapter *adapter);


#line 497 
void e1000e_release_hw_control(struct e1000_adapter *adapter);


#line 498 
void e1000e_write_itr(struct e1000_adapter *adapter, u32 itr);


#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static struct e1000_stats const e1000_gstrings_stats[52U] = {{.stat_string = {(char)'r', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11384}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11408}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11416}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'y', (char)'t', (char)'e', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11424}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11392}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'b', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11584}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11400}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11576}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 32}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 40}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 56}, {.stat_string = {(char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11400}, {.stat_string = {(char)'c', (char)'o', (char)'l', (char)'l', (char)'i', (char)'s', (char)'i', (char)'o', (char)'n', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11248}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 80}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'o', (char)'v', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 88}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'r', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11176}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 104}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'n', (char)'o', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'e', (char)'r', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11432}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'m', (char)'i', (char)'s', (char)'s', (char)'e', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11208}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'e', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11224}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'c', (char)'a', (char)'r', (char)'r', (char)'i', (char)'e', (char)'r', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11264}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 144}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'e', (char)'a', (char)'r', (char)'t', (char)'b', (char)'e', (char)'a', (char)'t', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 0, .sizeof_stat = 8, .stat_offset = 152}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'w', (char)'i', (char)'n', (char)'d', (char)'o', (char)'w', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11240}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'a', (char)'b', (char)'o', (char)'r', (char)'t', (char)'_', (char)'l', (char)'a', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11240}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)'r', (char)'e', (char)'d', (char)'_', (char)'o', (char)'k', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11256}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'i', (char)'n', (char)'g', (char)'l', (char)'e', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'_', (char)'o', (char)'k', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11216}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'m', (char)'u', (char)'l', (char)'t', (char)'i', (char)'_', (char)'c', (char)'o', (char)'l', (char)'l', (char)'_', (char)'o', (char)'k', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11232}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'\000'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1528}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'r', (char)'e', (char)'s', (char)'t', (char)'a', (char)'r', (char)'t', (char)'_', (char)'q', (char)'u', (char)'e', (char)'u', (char)'e', (char)'\000'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1456}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'l', (char)'o', (char)'n', (char)'g', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11456}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'h', (char)'o', (char)'r', (char)'t', (char)'_', (char)'l', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11440}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11184}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'s', (char)'e', (char)'g', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11592}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'s', (char)'e', (char)'g', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11600}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'n', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11296}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11312}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'n', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11304}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'f', (char)'l', (char)'o', (char)'w', (char)'_', (char)'c', (char)'o', (char)'n', (char)'t', (char)'r', (char)'o', (char)'l', (char)'_', (char)'x', (char)'o', (char)'f', (char)'f', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11320}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)'_', (char)'g', (char)'o', (char)'o', (char)'d', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1640}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'c', (char)'s', (char)'u', (char)'m', (char)'_', (char)'o', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1632}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'e', (char)'a', (char)'d', (char)'e', (char)'r', (char)'_', (char)'s', (char)'p', (char)'l', (char)'i', (char)'t', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 1648}, {.stat_string = {(char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'r', (char)'x', (char)'_', (char)'b', (char)'u', (char)'f', (char)'f', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d', (char)'\000'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1672}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11488}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11472}, {.stat_string = {(char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)'_', (char)'s', (char)'m', (char)'b', (char)'u', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 8, .stat_offset = 11480}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'d', (char)'m', (char)'a', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d', (char)'\000'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1676}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'d', (char)'m', (char)'a', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)'e', (char)'d', (char)'\000'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1544}, {.stat_string = {(char)'r', (char)'x', (char)'_', (char)'h', (char)'w', (char)'t', (char)'s', (char)'t', (char)'a', (char)'m', (char)'p', (char)'_', (char)'c', (char)'l', (char)'e', (char)'a', (char)'r', (char)'e', (char)'d', (char)'\000'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1680}, {.stat_string = {(char)'u', (char)'n', (char)'c', (char)'o', (char)'r', (char)'r', (char)'_', (char)'e', (char)'c', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1448}, {.stat_string = {(char)'c', (char)'o', (char)'r', (char)'r', (char)'_', (char)'e', (char)'c', (char)'c', (char)'_', (char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1452}, {.stat_string = {(char)'t', (char)'x', (char)'_', (char)'h', (char)'w', (char)'t', (char)'s', (char)'t', (char)'a', (char)'m', (char)'p', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'o', (char)'u', (char)'t', (char)'s', (char)'\000'}, .type = 1, .sizeof_stat = 4, .stat_offset = 1548}};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static char const e1000_gstrings_test[5U][32U] = {{(char)'R', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}, {(char)'E', (char)'e', (char)'p', (char)'r', (char)'o', (char)'m', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}, {(char)'I', (char)'n', (char)'t', (char)'e', (char)'r', (char)'r', (char)'u', (char)'p', (char)'t', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}, {(char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)'(', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}, {(char)'L', (char)'i', (char)'n', (char)'k', (char)' ', (char)'t', (char)'e', (char)'s', (char)'t', (char)' ', (char)' ', (char)' ', (char)'(', (char)'o', (char)'n', (char)'/', (char)'o', (char)'f', (char)'f', (char)'l', (char)'i', (char)'n', (char)'e', (char)')', (char)'\000'}};

#line 120  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_get_settings(struct net_device *netdev, struct ethtool_cmd *ecmd)
{
  int __retres;
  u32 speed;
  bool tmp_4;
  
#line 123 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 124 
  struct e1000_hw *hw = & adapter->hw;
  
#line 127 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
    
#line 128 
    ecmd->supported = 239U;
    
#line 135 
    if (hw->phy.type == (unsigned int)e1000_phy_ife) 
#line 136 
                                                     ecmd->supported &= 4294967263U; else ;
    
#line 137 
    ecmd->advertising = 128U;
    
#line 139 
    if ((int)hw->mac.autoneg == 1) {
      
#line 140 
      ecmd->advertising |= 64U;
      
#line 142 
      ecmd->advertising |= (unsigned int)hw->phy.autoneg_advertised;
    }
    else ;
    
#line 145 
    ecmd->port = (unsigned char)0U;
    
#line 146 
    ecmd->phy_address = (unsigned char)hw->phy.addr;
    
#line 147 
    ecmd->transceiver = (unsigned char)0U;
  }
  else {
    
#line 150 
    ecmd->supported = 1120U;
    
#line 154 
    ecmd->advertising = 1120U;
    
#line 158 
    ecmd->port = (unsigned char)3U;
    
#line 159 
    ecmd->transceiver = (unsigned char)1U;
  }
  
#line 162 
  speed = 4294967295U;
  
#line 163 
  ecmd->duplex = (unsigned char)255U;
  
#line 165 
  tmp_4 = netif_running((struct net_device const *)netdev);
  
#line 165 
  if ((int)tmp_4 != 0) {
    bool tmp_0;
    
#line 166 
    tmp_0 = netif_carrier_ok((struct net_device const *)netdev);
    
#line 166 
    if ((int)tmp_0 != 0) {
      
#line 167 
      speed = (unsigned int)adapter->link_speed;
      
#line 168 
      ecmd->duplex = (unsigned char)((unsigned int)((unsigned char)adapter->link_duplex) + 255U);
    }
    else ;
  }
  else {
    int tmp_3;
    bool tmp_2;
    
#line 170 
    tmp_2 = pm_runtime_suspended(netdev->dev.parent);
    
#line 170 
    if (tmp_2) 
#line 170 
               tmp_3 = 0; else 
#line 170 
                               tmp_3 = 1;
    
#line 170 
    if (tmp_3) {
      
#line 171 
      u32 status = __er32(hw,8UL);
      
#line 173 
      if ((status & 2U) != 0U) {
        
#line 174 
        if ((status & 128U) != 0U) 
#line 175 
                                   speed = 1000U;
        else 
          
#line 176 
          if ((status & 64U) != 0U) 
#line 177 
                                    speed = 100U; else 
#line 179 
                                                       speed = 10U;
        
#line 181 
        if ((status & 1U) != 0U) 
#line 182 
                                 ecmd->duplex = (unsigned char)1U; else 
                                                                    
#line 184 
                                                                    ecmd->duplex = (unsigned char)0U;
      }
      else ;
    }
    else ;
  }
  
#line 188 
  ethtool_cmd_speed_set(ecmd,speed);
  
#line 189 
  ecmd->autoneg = (unsigned char)((hw->phy.media_type == (unsigned int)e1000_media_type_fiber || (int)hw->mac.autoneg != 0) != 0);
  
#line 193 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
    bool tmp_5;
    
#line 193 
    tmp_5 = netif_carrier_ok((struct net_device const *)netdev);
    
#line 193 
    if ((int)tmp_5 != 0) 
      
#line 195 
      if ((int)hw->phy.is_mdix != 0) 
#line 195 
                                     ecmd->eth_tp_mdix = (unsigned char)2U; else 
                                                                    
#line 195 
                                                                    ecmd->eth_tp_mdix = (unsigned char)1U;
    else 
#line 197 
         ecmd->eth_tp_mdix = (unsigned char)0U;
  }
  else 
#line 197 
       ecmd->eth_tp_mdix = (unsigned char)0U;
  
#line 199 
  if ((unsigned int)hw->phy.mdix == 0U) 
#line 200 
                                        ecmd->eth_tp_mdix_ctrl = (unsigned char)3U; else 
                                                                    
#line 202 
                                                                    ecmd->eth_tp_mdix_ctrl = hw->phy.mdix;
  
#line 204 
  __retres = 0;
  
#line 204 
  return __retres;
}


#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_spd_dplx(struct e1000_adapter *adapter, u32 spd, u8 dplx)
{
  int __retres;
  
#line 209 
  struct e1000_mac_info *mac = & adapter->hw.mac;
  
#line 211 
  mac->autoneg = (_Bool)0;
  
#line 216 
  if ((spd & 1U) != 0U || ((int)dplx & -2) != 0) 
#line 217 
                                                 goto err_inval; else ;
  
#line 220 
  if (adapter->hw.phy.media_type == (unsigned int)e1000_media_type_fiber && (spd != 1000U && (unsigned int)dplx != 1U)) 
    
#line 222 
    goto err_inval; else ;
  
#line 225 
  switch ((unsigned int)dplx + spd) {
    case (unsigned int)10: 
#line 226 
    ;
    
#line 227 
    mac->forced_speed_duplex = (unsigned char)1U;
    
#line 228 
    goto ldv_47904;
    case (unsigned int)11: 
#line 229 
    ;
    
#line 230 
    mac->forced_speed_duplex = (unsigned char)2U;
    
#line 231 
    goto ldv_47904;
    case (unsigned int)100: 
#line 232 
    ;
    
#line 233 
    mac->forced_speed_duplex = (unsigned char)4U;
    
#line 234 
    goto ldv_47904;
    case (unsigned int)101: 
#line 235 
    ;
    
#line 236 
    mac->forced_speed_duplex = (unsigned char)8U;
    
#line 237 
    goto ldv_47904;
    case (unsigned int)1001: 
#line 238 
    ;
    
#line 239 
    mac->autoneg = (_Bool)1;
    
#line 240 
    adapter->hw.phy.autoneg_advertised = (unsigned short)32U;
    
#line 241 
    goto ldv_47904;
    case (unsigned int)1000: 
#line 242 
    ;
    default: 
#line 243 
    ;
    
#line 244 
    goto err_inval;
  }
  ldv_47904: 
#line 248 
  ;
  
#line 248 
  adapter->hw.phy.mdix = (unsigned char)0U;
  
#line 250 
  __retres = 0;
  
#line 250 
  goto return_label;
  err_inval: 
#line 252 
  ;
  
#line 253 
  netdev_err((struct net_device const *)adapter->netdev,"Unsupported Speed/Duplex configuration\n");
  
#line 254 
  __retres = -22;
  return_label: 
#line 254 
                return __retres;
}


#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_settings(struct net_device *netdev, struct ethtool_cmd *ecmd)
{
  int tmp_1;
  bool tmp_4;
  
#line 260 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 261 
  struct e1000_hw *hw = & adapter->hw;
  
#line 262 
  int ret_val = 0;
  
#line 264 
  pm_runtime_get_sync(netdev->dev.parent);
  
#line 269 
  if (hw->phy.ops.check_reset_block != (s32 (*)(struct e1000_hw *))0) {
    s32 tmp_0;
    
#line 269 
    tmp_0 = (*(hw->phy.ops.check_reset_block))(hw);
    
#line 269 
    if (tmp_0 != 0) {
      
#line 271 
      netdev_err((struct net_device const *)adapter->netdev,"Cannot change link characteristics when SoL/IDER is active.\n");
      
#line 272 
      ret_val = -22;
      
#line 273 
      goto out;
    }
    else ;
  }
  else ;
  
#line 280 
  if ((unsigned int)ecmd->eth_tp_mdix_ctrl != 0U) {
    
#line 281 
    if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) {
      
#line 282 
      ret_val = -95;
      
#line 283 
      goto out;
    }
    else ;
    
#line 286 
    if ((unsigned int)ecmd->eth_tp_mdix_ctrl != 3U && (unsigned int)ecmd->autoneg != 1U) {
      
#line 288 
      netdev_err((struct net_device const *)adapter->netdev,"forcing MDI/MDI-X state is not supported when link speed and/or duplex are forced\n");
      
#line 289 
      ret_val = -22;
      
#line 290 
      goto out;
    }
    else ;
  }
  else ;
  
#line 294 
  goto ldv_47920;
  ldv_47919: 
#line 295 
  ;
  
#line 295 
  usleep_range(1000UL,2000UL);
  ldv_47920: 
#line 296 
  ;
  
#line 294 
  tmp_1 = test_and_set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 294 
  if (tmp_1 != 0) 
#line 296 
                  goto ldv_47919; else 
#line 299 
                                       goto ldv_47921;
  ldv_47921: 
#line 300 
  ;
  
#line 297 
  if ((unsigned int)ecmd->autoneg == 1U) {
    
#line 298 
    hw->mac.autoneg = (_Bool)1;
    
#line 299 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_fiber) 
#line 300 
                                                                    hw->phy.autoneg_advertised = (unsigned short)1120U; else 
                                                                    
#line 303 
                                                                    hw->phy.autoneg_advertised = (unsigned short)((unsigned int)((unsigned short)ecmd->advertising) | 192U);
    
#line 305 
    ecmd->advertising = (unsigned int)hw->phy.autoneg_advertised;
    
#line 306 
    if ((int)adapter->fc_autoneg != 0) 
#line 307 
                                       hw->fc.requested_mode = e1000_fc_default; else ;
  }
  else {
    int tmp_3;
    
#line 309 
    u32 speed = ethtool_cmd_speed((struct ethtool_cmd const *)ecmd);
    
#line 311 
    tmp_3 = e1000_set_spd_dplx(adapter,speed,(unsigned char)((int)ecmd->duplex));
    
#line 311 
    if (tmp_3 != 0) {
      
#line 312 
      ret_val = -22;
      
#line 313 
      goto out;
    }
    else ;
  }
  
#line 318 
  if ((unsigned int)ecmd->eth_tp_mdix_ctrl != 0U) 
    
#line 322 
    if ((unsigned int)ecmd->eth_tp_mdix_ctrl == 3U) 
#line 323 
                                                    hw->phy.mdix = (unsigned char)0U; else 
                                                                    
#line 325 
                                                                    hw->phy.mdix = ecmd->eth_tp_mdix_ctrl;
  else ;
  
#line 329 
  tmp_4 = netif_running((struct net_device const *)adapter->netdev);
  
#line 329 
  if ((int)tmp_4 != 0) {
    
#line 330 
    e1000e_down(adapter,(_Bool)1);
    
#line 331 
    e1000e_up(adapter);
  }
  else 
#line 333 
       e1000e_reset(adapter);
  out: 
#line 336 
  ;
  
#line 337 
  pm_runtime_put_sync(netdev->dev.parent);
  
#line 338 
  clear_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 339 
  return ret_val;
}


#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_get_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  
#line 345 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 346 
  struct e1000_hw *hw = & adapter->hw;
  
#line 348 
  pause->autoneg = (unsigned int)((int)adapter->fc_autoneg != 0);
  
#line 351 
  if (hw->fc.current_mode == (unsigned int)e1000_fc_rx_pause) 
#line 352 
                                                              pause->rx_pause = 1U;
  else 
    
#line 353 
    if (hw->fc.current_mode == (unsigned int)e1000_fc_tx_pause) 
#line 354 
                                                                pause->tx_pause = 1U;
    else 
      
#line 355 
      if (hw->fc.current_mode == (unsigned int)e1000_fc_full) {
        
#line 356 
        pause->rx_pause = 1U;
        
#line 357 
        pause->tx_pause = 1U;
      }
      else ;
  
#line 359 
  return;
}


#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_pauseparam(struct net_device *netdev, struct ethtool_pauseparam *pause)
{
  int tmp_0;
  
#line 364 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 365 
  struct e1000_hw *hw = & adapter->hw;
  
#line 366 
  int retval = 0;
  
#line 368 
  adapter->fc_autoneg = (_Bool)(pause->autoneg != 0U);
  
#line 370 
  goto ldv_47937;
  ldv_47936: 
#line 371 
  ;
  
#line 371 
  usleep_range(1000UL,2000UL);
  ldv_47937: 
#line 372 
  ;
  
#line 370 
  tmp_0 = test_and_set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 370 
  if (tmp_0 != 0) 
#line 372 
                  goto ldv_47936; else 
#line 375 
                                       goto ldv_47938;
  ldv_47938: 
#line 376 
  ;
  
#line 373 
  pm_runtime_get_sync(netdev->dev.parent);
  
#line 375 
  if ((int)adapter->fc_autoneg == 1) {
    bool tmp_1;
    
#line 376 
    hw->fc.requested_mode = e1000_fc_default;
    
#line 377 
    tmp_1 = netif_running((struct net_device const *)adapter->netdev);
    
#line 377 
    if ((int)tmp_1 != 0) {
      
#line 378 
      e1000e_down(adapter,(_Bool)1);
      
#line 379 
      e1000e_up(adapter);
    }
    else 
#line 381 
         e1000e_reset(adapter);
  }
  else {
    
#line 384 
    if (pause->rx_pause != 0U && pause->tx_pause != 0U) 
#line 385 
                                                        hw->fc.requested_mode = e1000_fc_full;
    else 
      
#line 386 
      if (pause->rx_pause != 0U && pause->tx_pause == 0U) 
#line 387 
                                                          hw->fc.requested_mode = e1000_fc_rx_pause;
      else 
        
#line 388 
        if (pause->rx_pause == 0U && pause->tx_pause != 0U) 
#line 389 
                                                            hw->fc.requested_mode = e1000_fc_tx_pause;
        else 
          
#line 390 
          if (pause->rx_pause == 0U && pause->tx_pause == 0U) 
#line 391 
                                                              hw->fc.requested_mode = e1000_fc_none; else ;
    
#line 393 
    hw->fc.current_mode = hw->fc.requested_mode;
    
#line 395 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_fiber) 
#line 396 
                                                                    retval = (*(hw->mac.ops.setup_link))(hw);
    else {
      
#line 399 
      retval = e1000e_force_mac_fc(hw);
      
#line 400 
      if (retval != 0) 
#line 401 
                       goto out; else ;
      
#line 402 
      e1000e_set_fc_watermarks(hw);
    }
  }
  out: 
#line 406 
  ;
  
#line 407 
  pm_runtime_put_sync(netdev->dev.parent);
  
#line 408 
  clear_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 409 
  return retval;
}


#line 412  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static u32 e1000_get_msglevel(struct net_device *netdev)
{
  u32 __retres;
  
#line 414 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 415 
  __retres = adapter->msg_enable;
  
#line 415 
  return __retres;
}


#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_set_msglevel(struct net_device *netdev, u32 data)
{
  
#line 420 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 421 
  adapter->msg_enable = data;
  
#line 422 
  return;
}


#line 424  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_get_regs_len(struct net_device *netdev)
{
  int __retres;
  
#line 427 
  __retres = 128;
  
#line 427 
  return __retres;
}


#line 430  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_get_regs(struct net_device *netdev, struct ethtool_regs *regs, void *p)
{
  u16 phy_data;
  
#line 433 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 434 
  struct e1000_hw *hw = & adapter->hw;
  
#line 435 
  u32 *regs_buff = (u32 *)p;
  
#line 438 
  pm_runtime_get_sync(netdev->dev.parent);
  
#line 440 
  memset(p,0,128UL);
  
#line 442 
  regs->version = (unsigned int)((((int)(adapter->pdev)->revision << 16) | 16777216) | (int)(adapter->pdev)->device);
  
#line 445 
  *regs_buff = __er32(hw,0UL);
  
#line 446 
  *(regs_buff + 1U) = __er32(hw,8UL);
  
#line 448 
  *(regs_buff + 2U) = __er32(hw,256UL);
  
#line 449 
  *(regs_buff + 3U) = __er32(hw,10248UL);
  
#line 450 
  *(regs_buff + 4U) = __er32(hw,10256UL);
  
#line 451 
  *(regs_buff + 5U) = __er32(hw,10264UL);
  
#line 452 
  *(regs_buff + 6U) = __er32(hw,10272UL);
  
#line 454 
  *(regs_buff + 7U) = __er32(hw,1024UL);
  
#line 455 
  *(regs_buff + 8U) = __er32(hw,14344UL);
  
#line 456 
  *(regs_buff + 9U) = __er32(hw,14352UL);
  
#line 457 
  *(regs_buff + 10U) = __er32(hw,14360UL);
  
#line 458 
  *(regs_buff + 11U) = __er32(hw,14368UL);
  
#line 460 
  *(regs_buff + 12U) = (unsigned int)adapter->hw.phy.type;
  
#line 465 
  if (hw->phy.type == (unsigned int)e1000_phy_m88) {
    
#line 466 
    e1e_rphy(hw,17U,& phy_data);
    
#line 467 
    *(regs_buff + 13U) = (unsigned int)phy_data;
    
#line 468 
    *(regs_buff + 14U) = 0U;
    
#line 469 
    *(regs_buff + 15U) = 0U;
    
#line 470 
    *(regs_buff + 16U) = 0U;
    
#line 471 
    e1e_rphy(hw,16U,& phy_data);
    
#line 472 
    *(regs_buff + 17U) = (unsigned int)phy_data;
    
#line 473 
    *(regs_buff + 18U) = *(regs_buff + 13U);
    
#line 474 
    *(regs_buff + 19U) = 0U;
    
#line 475 
    *(regs_buff + 20U) = *(regs_buff + 17U);
    
#line 477 
    *(regs_buff + 22U) = adapter->phy_stats.receive_errors;
    
#line 478 
    *(regs_buff + 23U) = *(regs_buff + 13U);
  }
  else ;
  
#line 480 
  *(regs_buff + 21U) = 0U;
  
#line 481 
  e1e_rphy(hw,10U,& phy_data);
  
#line 482 
  *(regs_buff + 24U) = (unsigned int)phy_data;
  
#line 483 
  *(regs_buff + 25U) = *(regs_buff + 24U);
  
#line 485 
  pm_runtime_put_sync(netdev->dev.parent);
  
#line 486 
  return;
}


#line 488  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_get_eeprom_len(struct net_device *netdev)
{
  int __retres;
  
#line 490 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 491 
  __retres = (int)adapter->hw.nvm.word_size * 2;
  
#line 491 
  return __retres;
}


#line 494  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_get_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  int __retres;
  u16 *eeprom_buff;
  int first_word;
  int last_word;
  u16 i;
  
#line 497 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 498 
  struct e1000_hw *hw = & adapter->hw;
  
#line 502 
  int ret_val = 0;
  
#line 505 
  if (eeprom->len == 0U) {
    
#line 506 
    __retres = -22;
    
#line 506 
    goto return_label;
  }
  else ;
  
#line 508 
  eeprom->magic = (unsigned int)((int)(adapter->pdev)->vendor | ((int)(adapter->pdev)->device << 16));
  
#line 510 
  first_word = (int)(eeprom->offset >> 1);
  
#line 511 
  last_word = (int)(((eeprom->offset + eeprom->len) + 4294967295U) >> 1);
  
#line 513 
  eeprom_buff = (u16 *)kmalloc((unsigned long)((last_word - first_word) + 1) * 2UL,208U);
  
#line 515 
  if (eeprom_buff == (u16 *)0U) {
    
#line 516 
    __retres = -12;
    
#line 516 
    goto return_label;
  }
  else ;
  
#line 518 
  pm_runtime_get_sync(netdev->dev.parent);
  
#line 520 
  if (hw->nvm.type == (unsigned int)e1000_nvm_eeprom_spi) 
#line 521 
                                                          ret_val = e1000_read_nvm(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)((int)((unsigned int)((int)((unsigned short)last_word) - (int)((unsigned short)first_word)) + 1U)),eeprom_buff);
  else {
    
#line 525 
    i = (unsigned short)0U;
    
#line 525 
    goto ldv_47979;
    ldv_47978: 
#line 526 
    ;
    
#line 526 
    ret_val = e1000_read_nvm(hw,(unsigned short)((int)((unsigned short)first_word) + (int)i),(unsigned short)1,eeprom_buff + (int)i);
    
#line 528 
    if (ret_val != 0) 
#line 529 
                      goto ldv_47977; else ;
    
#line 525 
    i = (u16)((int)i + 1);
    ldv_47979: 
#line 526 
    ;
    
#line 525 
    if ((int)i < (last_word - first_word) + 1) 
#line 527 
                                               goto ldv_47978; else 
#line 530 
                                                                    goto ldv_47977;
    ldv_47977: 
#line 531 
    ;
  }
  
#line 533 
  pm_runtime_put_sync(netdev->dev.parent);
  
#line 535 
  if (ret_val != 0) 
#line 537 
                    memset((void *)eeprom_buff,255,(unsigned long)((last_word - first_word) + 1) * 2UL);
  else {
    
#line 541 
    i = (unsigned short)0U;
    
#line 541 
    goto ldv_47981;
    ldv_47980: 
#line 542 
    ;
    
#line 542 
    u16 *tmp_2 = eeprom_buff + (int)i;
    
#line 541 
    i = (u16)((int)i + 1);
    ldv_47981: 
#line 542 
    ;
    
#line 541 
    if ((int)i < (last_word - first_word) + 1) 
#line 543 
                                               goto ldv_47980; else 
#line 546 
                                                                    goto ldv_47982;
    ldv_47982: 
#line 547 
    ;
  }
  
#line 545 
  memcpy((void *)bytes,(void const *)eeprom_buff + (eeprom->offset & 1U),(unsigned long)eeprom->len);
  
#line 546 
  kfree((void const *)eeprom_buff);
  
#line 548 
  __retres = ret_val;
  return_label: 
#line 548 
                return __retres;
}


#line 551  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_eeprom(struct net_device *netdev, struct ethtool_eeprom *eeprom, u8 *bytes)
{
  int __retres;
  u16 *eeprom_buff;
  void *ptr;
  int max_len;
  int first_word;
  int last_word;
  u16 i;
  
#line 554 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 555 
  struct e1000_hw *hw = & adapter->hw;
  
#line 561 
  int ret_val = 0;
  
#line 564 
  if (eeprom->len == 0U) {
    
#line 565 
    __retres = -95;
    
#line 565 
    goto return_label;
  }
  else ;
  
#line 567 
  if (eeprom->magic != (unsigned int)((int)(adapter->pdev)->vendor | ((int)(adapter->pdev)->device << 16))) {
    
#line 569 
    __retres = -14;
    
#line 569 
    goto return_label;
  }
  else ;
  
#line 571 
  if ((adapter->flags & 256U) != 0U) {
    
#line 572 
    __retres = -22;
    
#line 572 
    goto return_label;
  }
  else ;
  
#line 574 
  max_len = (int)hw->nvm.word_size * 2;
  
#line 576 
  first_word = (int)(eeprom->offset >> 1);
  
#line 577 
  last_word = (int)(((eeprom->offset + eeprom->len) + 4294967295U) >> 1);
  
#line 578 
  eeprom_buff = (u16 *)kmalloc((unsigned long)max_len,208U);
  
#line 579 
  if (eeprom_buff == (u16 *)0U) {
    
#line 580 
    __retres = -12;
    
#line 580 
    goto return_label;
  }
  else ;
  
#line 582 
  ptr = (void *)eeprom_buff;
  
#line 584 
  pm_runtime_get_sync(netdev->dev.parent);
  
#line 586 
  if ((eeprom->offset & 1U) != 0U) {
    
#line 589 
    ret_val = e1000_read_nvm(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)1,eeprom_buff);
    
#line 590 
    ptr += 1;
  }
  else ;
  
#line 592 
  if (((eeprom->offset + eeprom->len) & 1U) != 0U && ret_val == 0) 
#line 595 
                                                                   ret_val = e1000_read_nvm(hw,(unsigned short)((int)((unsigned short)last_word)),(unsigned short)1,eeprom_buff + (last_word - first_word)); else ;
  
#line 598 
  if (ret_val != 0) 
#line 599 
                    goto out; else ;
  
#line 602 
  i = (unsigned short)0U;
  
#line 602 
  goto ldv_47999;
  ldv_47998: 
#line 603 
  ;
  
#line 603 
  u16 *tmp_2 = eeprom_buff + (int)i;
  
#line 602 
  i = (u16)((int)i + 1);
  ldv_47999: 
#line 603 
  ;
  
#line 602 
  if ((int)i < (last_word - first_word) + 1) 
#line 604 
                                             goto ldv_47998; else 
#line 607 
                                                                  goto ldv_48000;
  ldv_48000: 
#line 608 
  ;
  
#line 605 
  memcpy(ptr,(void const *)bytes,(unsigned long)eeprom->len);
  
#line 607 
  i = (unsigned short)0U;
  
#line 607 
  goto ldv_48002;
  ldv_48001: 
#line 608 
  ;
  
#line 608 
  u16 *tmp_4 = eeprom_buff + (int)i;
  
#line 607 
  i = (u16)((int)i + 1);
  ldv_48002: 
#line 608 
  ;
  
#line 607 
  if ((int)i < (last_word - first_word) + 1) 
#line 609 
                                             goto ldv_48001; else 
#line 612 
                                                                  goto ldv_48003;
  ldv_48003: 
#line 613 
  ;
  
#line 610 
  ret_val = e1000_write_nvm(hw,(unsigned short)((int)((unsigned short)first_word)),(unsigned short)((int)((unsigned int)((int)((unsigned short)last_word) - (int)((unsigned short)first_word)) + 1U)),eeprom_buff);
  
#line 613 
  if (ret_val != 0) 
#line 614 
                    goto out; else ;
  
#line 619 
  if (((first_word <= 63 || hw->mac.type == (unsigned int)e1000_82583) || hw->mac.type == (unsigned int)e1000_82574) || hw->mac.type == (unsigned int)e1000_82573) 
    
#line 623 
    ret_val = e1000e_update_nvm_checksum(hw); else ;
  out: 
#line 625 
  ;
  
#line 626 
  pm_runtime_put_sync(netdev->dev.parent);
  
#line 627 
  kfree((void const *)eeprom_buff);
  
#line 628 
  __retres = ret_val;
  return_label: 
#line 628 
                return __retres;
}


#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_get_drvinfo(struct net_device *netdev, struct ethtool_drvinfo *drvinfo)
{
  char const *tmp_0;
  int tmp_1;
  int tmp_2;
  
#line 634 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 636 
  strlcpy((char *)(& drvinfo->driver),(char const *)(& e1000e_driver_name),32UL);
  
#line 637 
  strlcpy((char *)(& drvinfo->version),(char const *)(& e1000e_driver_version),32UL);
  
#line 643 
  snprintf((char *)(& drvinfo->fw_version),32UL,"%d.%d-%d",(int)adapter->eeprom_vers >> 12,((int)adapter->eeprom_vers >> 4) & 255,(int)adapter->eeprom_vers & 15);
  
#line 649 
  tmp_0 = pci_name((struct pci_dev const *)adapter->pdev);
  
#line 649 
  ;
  
#line 649 
  strlcpy((char *)(& drvinfo->bus_info),tmp_0,32UL);
  
#line 651 
  tmp_1 = e1000_get_regs_len(netdev);
  
#line 651 
  drvinfo->regdump_len = (unsigned int)tmp_1;
  
#line 652 
  tmp_2 = e1000_get_eeprom_len(netdev);
  
#line 652 
  drvinfo->eedump_len = (unsigned int)tmp_2;
  
#line 653 
  return;
}


#line 655  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_get_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  
#line 658 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 660 
  ring->rx_max_pending = 4096U;
  
#line 661 
  ring->tx_max_pending = 4096U;
  
#line 662 
  ring->rx_pending = (unsigned int)adapter->rx_ring_count;
  
#line 663 
  ring->tx_pending = (unsigned int)adapter->tx_ring_count;
  
#line 664 
  return;
}


#line 666  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_ringparam(struct net_device *netdev, struct ethtool_ringparam *ring)
{
  int __retres;
  u16 new_rx_count;
  u16 new_tx_count;
  u32 tmp_3;
  u32 tmp_7;
  int tmp_8;
  int tmp_10;
  bool tmp_9;
  
#line 669 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 670 
  struct e1000_ring *temp_tx = (struct e1000_ring *)0;
  
#line 670 
  struct e1000_ring *temp_rx = (struct e1000_ring *)0;
  
#line 671 
  int err = 0;
  
#line 671 
  int size = 120;
  
#line 672 
  bool set_tx = (_Bool)0;
  
#line 672 
  bool set_rx = (_Bool)0;
  
#line 675 
  if (ring->rx_mini_pending != 0U || ring->rx_jumbo_pending != 0U) {
    
#line 676 
    __retres = -22;
    
#line 676 
    goto return_label;
  }
  else ;
  {
    u32 tmp_1;
    u32 tmp_2;
    {
      u32 tmp_0;
      
#line 678 
      u32 __max1 = ring->rx_pending;
      
#line 678 
      u32 __max2 = 64U;
      
#line 678 
      if (__max1 > __max2) 
#line 678 
                           tmp_0 = __max1; else 
#line 678 
                                                tmp_0 = __max2;
      
#line 678 
      tmp_1 = tmp_0;
    }
    
#line 678 
    u32 __min1 = tmp_1;
    
#line 678 
    u32 __min2 = 4096U;
    
#line 678 
    if (__min1 < __min2) 
#line 678 
                         tmp_2 = __min1; else 
#line 678 
                                              tmp_2 = __min2;
    
#line 678 
    tmp_3 = tmp_2;
  }
  
#line 678 
  new_rx_count = (unsigned short)tmp_3;
  
#line 680 
  new_rx_count = (unsigned short)((unsigned int)((unsigned short)((unsigned int)new_rx_count + 7U)) & 65528U);
  {
    u32 tmp_5;
    u32 tmp_6;
    {
      u32 tmp_4;
      
#line 682 
      u32 __max1_0 = ring->tx_pending;
      
#line 682 
      u32 __max2_0 = 64U;
      
#line 682 
      if (__max1_0 > __max2_0) 
#line 682 
                               tmp_4 = __max1_0; else 
#line 682 
                                                      tmp_4 = __max2_0;
      
#line 682 
      tmp_5 = tmp_4;
    }
    
#line 682 
    u32 __min1_0 = tmp_5;
    
#line 682 
    u32 __min2_0 = 4096U;
    
#line 682 
    if (__min1_0 < __min2_0) 
#line 682 
                             tmp_6 = __min1_0; else 
#line 682 
                                                    tmp_6 = __min2_0;
    
#line 682 
    tmp_7 = tmp_6;
  }
  
#line 682 
  new_tx_count = (unsigned short)tmp_7;
  
#line 684 
  new_tx_count = (unsigned short)((unsigned int)((unsigned short)((unsigned int)new_tx_count + 7U)) & 65528U);
  
#line 686 
  if ((int)adapter->tx_ring_count == (int)new_tx_count && (int)adapter->rx_ring_count == (int)new_rx_count) {
    
#line 689 
    __retres = 0;
    
#line 689 
    goto return_label;
  }
  else ;
  
#line 691 
  goto ldv_48040;
  ldv_48039: 
#line 692 
  ;
  
#line 692 
  usleep_range(1000UL,2000UL);
  ldv_48040: 
#line 693 
  ;
  
#line 691 
  tmp_8 = test_and_set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 691 
  if (tmp_8 != 0) 
#line 693 
                  goto ldv_48039; else 
#line 696 
                                       goto ldv_48041;
  ldv_48041: 
#line 697 
  ;
  
#line 694 
  tmp_9 = netif_running((struct net_device const *)adapter->netdev);
  
#line 694 
  if (tmp_9) 
#line 694 
             tmp_10 = 0; else 
#line 694 
                              tmp_10 = 1;
  
#line 694 
  if (tmp_10) {
    
#line 696 
    (adapter->tx_ring)->count = (unsigned int)new_tx_count;
    
#line 697 
    (adapter->rx_ring)->count = (unsigned int)new_rx_count;
    
#line 698 
    adapter->tx_ring_count = new_tx_count;
    
#line 699 
    adapter->rx_ring_count = new_rx_count;
    
#line 700 
    goto clear_reset;
  }
  else ;
  
#line 703 
  set_tx = (_Bool)((int)adapter->tx_ring_count != (int)new_tx_count);
  
#line 704 
  set_rx = (_Bool)((int)adapter->rx_ring_count != (int)new_rx_count);
  
#line 707 
  if ((int)set_tx != 0) {
    
#line 708 
    temp_tx = (struct e1000_ring *)vmalloc((unsigned long)size);
    
#line 709 
    if (temp_tx == (struct e1000_ring *)0) {
      
#line 710 
      err = -12;
      
#line 711 
      goto free_temp;
    }
    else ;
  }
  else ;
  
#line 714 
  if ((int)set_rx != 0) {
    
#line 715 
    temp_rx = (struct e1000_ring *)vmalloc((unsigned long)size);
    
#line 716 
    if (temp_rx == (struct e1000_ring *)0) {
      
#line 717 
      err = -12;
      
#line 718 
      goto free_temp;
    }
    else ;
  }
  else ;
  
#line 722 
  pm_runtime_get_sync(netdev->dev.parent);
  
#line 724 
  e1000e_down(adapter,(_Bool)1);
  
#line 730 
  if ((int)set_tx != 0) {
    
#line 731 
    memcpy((void *)temp_tx,(void const *)adapter->tx_ring,(unsigned long)size);
    
#line 732 
    temp_tx->count = (unsigned int)new_tx_count;
    
#line 733 
    err = e1000e_setup_tx_resources(temp_tx);
    
#line 734 
    if (err != 0) 
#line 735 
                  goto err_setup; else ;
  }
  else ;
  
#line 737 
  if ((int)set_rx != 0) {
    
#line 738 
    memcpy((void *)temp_rx,(void const *)adapter->rx_ring,(unsigned long)size);
    
#line 739 
    temp_rx->count = (unsigned int)new_rx_count;
    
#line 740 
    err = e1000e_setup_rx_resources(temp_rx);
    
#line 741 
    if (err != 0) 
#line 742 
                  goto err_setup_rx; else ;
  }
  else ;
  
#line 746 
  if ((int)set_tx != 0) {
    
#line 747 
    e1000e_free_tx_resources(adapter->tx_ring);
    
#line 748 
    memcpy((void *)adapter->tx_ring,(void const *)temp_tx,(unsigned long)size);
    
#line 749 
    adapter->tx_ring_count = new_tx_count;
  }
  else ;
  
#line 751 
  if ((int)set_rx != 0) {
    
#line 752 
    e1000e_free_rx_resources(adapter->rx_ring);
    
#line 753 
    memcpy((void *)adapter->rx_ring,(void const *)temp_rx,(unsigned long)size);
    
#line 754 
    adapter->rx_ring_count = new_rx_count;
  }
  else ;
  err_setup_rx: 
#line 757 
  ;
  
#line 758 
  if (err != 0 && (int)set_tx != 0) 
#line 759 
                                    e1000e_free_tx_resources(temp_tx); else ;
  err_setup: 
#line 760 
  ;
  
#line 761 
  e1000e_up(adapter);
  
#line 762 
  pm_runtime_put_sync(netdev->dev.parent);
  free_temp: 
#line 763 
  ;
  
#line 764 
  vfree((void const *)temp_tx);
  
#line 765 
  vfree((void const *)temp_rx);
  clear_reset: 
#line 766 
  ;
  
#line 767 
  clear_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 768 
  __retres = err;
  return_label: 
#line 768 
                return __retres;
}


#line 771  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static bool reg_pattern_test(struct e1000_adapter *adapter, u64 *data, int reg, int offset, u32 mask, u32 write)
{
  bool __retres;
  u32 pat;
  u32 val;
  
#line 775 
  u32 const test[4U] = {1515870810U, 2779096485U, 0U, 4294967295U};
  
#line 778 
  pat = 0U;
  
#line 778 
  goto ldv_48061;
  ldv_48060: 
#line 779 
  ;
  
#line 779 
  __ew32(& adapter->hw,(unsigned long)((offset << 2) + reg),test[pat] & write);
  
#line 781 
  val = readl((void const volatile *)(adapter->hw.hw_addr + (reg + (offset << 2))));
  
#line 782 
  if (((test[pat] & write) & mask) != val) {
    
#line 783 
    netdev_err((struct net_device const *)adapter->netdev,"pattern test failed (reg 0x%05X): got 0x%08X expected 0x%08X\n",(offset << 2) + reg,val,(test[pat] & write) & mask);
    
#line 786 
    *data = (unsigned long long)reg;
    
#line 787 
    __retres = (_Bool)1;
    
#line 787 
    goto return_label;
  }
  else ;
  
#line 778 
  pat += 1U;
  ldv_48061: 
#line 779 
  ;
  
#line 778 
  if (pat <= 3U) 
#line 780 
                 goto ldv_48060; else 
#line 783 
                                      goto ldv_48062;
  ldv_48062: 
#line 784 
  ;
  
#line 790 
  __retres = (_Bool)0;
  return_label: 
#line 790 
                return __retres;
}


#line 793  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static bool reg_set_and_check(struct e1000_adapter *adapter, u64 *data, int reg, u32 mask, u32 write)
{
  bool __retres;
  u32 val;
  
#line 798 
  __ew32(& adapter->hw,(unsigned long)reg,write & mask);
  
#line 799 
  val = __er32(& adapter->hw,(unsigned long)reg);
  
#line 800 
  if (((write ^ val) & mask) != 0U) {
    
#line 801 
    netdev_err((struct net_device const *)adapter->netdev,"set/check test failed (reg 0x%05X): got 0x%08X expected 0x%08X\n",reg,val & mask,write & mask);
    
#line 803 
    *data = (unsigned long long)reg;
    
#line 804 
    __retres = (_Bool)1;
    
#line 804 
    goto return_label;
  }
  else ;
  
#line 806 
  __retres = (_Bool)0;
  return_label: 
#line 806 
                return __retres;
}


#line 823  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_reg_test(struct e1000_adapter *adapter, u64 *data)
{
  int __retres;
  u32 value;
  u32 before;
  u32 after;
  u32 i;
  u32 toggle;
  u32 mask;
  u32 tmp;
  u32 tmp_0;
  bool tmp_5;
  bool tmp_6;
  bool tmp_7;
  bool tmp_8;
  bool tmp_9;
  bool tmp_10;
  bool tmp_11;
  bool tmp_12;
  bool tmp_13;
  bool tmp_14;
  bool tmp_15;
  int tmp_16;
  bool tmp_17;
  bool tmp_18;
  bool tmp_19;
  bool tmp_20;
  bool tmp_22;
  bool tmp_23;
  bool tmp_25;
  bool tmp_26;
  
#line 825 
  struct e1000_hw *hw = & adapter->hw;
  
#line 826 
  struct e1000_mac_info *mac = & adapter->hw.mac;
  
#line 833 
  u32 wlock_mac = 0U;
  
#line 839 
  switch ((unsigned int)mac->type) {
    case (unsigned int)0: 
#line 840 
    ;
    case (unsigned int)1: 
#line 841 
    ;
    case (unsigned int)5: 
#line 842 
    ;
    
#line 843 
    toggle = 2147480575U;
    
#line 844 
    goto ldv_48087;
    default: 
#line 845 
    ;
    
#line 846 
    toggle = 2147479603U;
    
#line 847 
    goto ldv_48087;
  }
  ldv_48087: 
#line 850 
  ;
  
#line 850 
  before = __er32(hw,8UL);
  
#line 851 
  tmp = __er32(hw,8UL);
  
#line 851 
  value = tmp & toggle;
  
#line 852 
  __ew32(hw,8UL,toggle);
  
#line 853 
  tmp_0 = __er32(hw,8UL);
  
#line 853 
  after = tmp_0 & toggle;
  
#line 854 
  if (value != after) {
    
#line 855 
    netdev_err((struct net_device const *)adapter->netdev,"failed STATUS register test got: 0x%08X expected: 0x%08X\n",after,value);
    
#line 857 
    *data = 1ULL;
    
#line 858 
    __retres = 1;
    
#line 858 
    goto return_label;
  }
  else ;
  
#line 861 
  __ew32(hw,8UL,before);
  
#line 863 
  if ((adapter->flags & 512U) == 0U) {
    bool tmp_1;
    bool tmp_2;
    bool tmp_3;
    bool tmp_4;
    
#line 864 
    tmp_1 = reg_pattern_test(adapter,data,40,0,4294967295U,4294967295U);
    
#line 864 
    if ((int)tmp_1 != 0) {
      
#line 864 
      __retres = 1;
      
#line 864 
      goto return_label;
    }
    else ;
    
#line 865 
    tmp_2 = reg_pattern_test(adapter,data,44,0,65535U,4294967295U);
    
#line 865 
    if ((int)tmp_2 != 0) {
      
#line 865 
      __retres = 1;
      
#line 865 
      goto return_label;
    }
    else ;
    
#line 866 
    tmp_3 = reg_pattern_test(adapter,data,48,0,65535U,4294967295U);
    
#line 866 
    if ((int)tmp_3 != 0) {
      
#line 866 
      __retres = 1;
      
#line 866 
      goto return_label;
    }
    else ;
    
#line 867 
    tmp_4 = reg_pattern_test(adapter,data,56,0,65535U,4294967295U);
    
#line 867 
    if ((int)tmp_4 != 0) {
      
#line 867 
      __retres = 1;
      
#line 867 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 870 
  tmp_5 = reg_pattern_test(adapter,data,10272,0,65535U,4294967295U);
  
#line 870 
  if ((int)tmp_5 != 0) {
    
#line 870 
    __retres = 1;
    
#line 870 
    goto return_label;
  }
  else ;
  
#line 871 
  tmp_6 = reg_pattern_test(adapter,data,10244,0,4294967295U,4294967295U);
  
#line 871 
  if ((int)tmp_6 != 0) {
    
#line 871 
    __retres = 1;
    
#line 871 
    goto return_label;
  }
  else ;
  
#line 872 
  tmp_7 = reg_pattern_test(adapter,data,10248,0,1048448U,1048575U);
  
#line 872 
  if ((int)tmp_7 != 0) {
    
#line 872 
    __retres = 1;
    
#line 872 
    goto return_label;
  }
  else ;
  
#line 873 
  tmp_8 = reg_pattern_test(adapter,data,10256,0,65535U,65535U);
  
#line 873 
  if ((int)tmp_8 != 0) {
    
#line 873 
    __retres = 1;
    
#line 873 
    goto return_label;
  }
  else ;
  
#line 874 
  tmp_9 = reg_pattern_test(adapter,data,10264,0,65535U,65535U);
  
#line 874 
  if ((int)tmp_9 != 0) {
    
#line 874 
    __retres = 1;
    
#line 874 
    goto return_label;
  }
  else ;
  
#line 875 
  tmp_10 = reg_pattern_test(adapter,data,8552,0,65528U,65528U);
  
#line 875 
  if ((int)tmp_10 != 0) {
    
#line 875 
    __retres = 1;
    
#line 875 
    goto return_label;
  }
  else ;
  
#line 876 
  tmp_11 = reg_pattern_test(adapter,data,368,0,65535U,65535U);
  
#line 876 
  if ((int)tmp_11 != 0) {
    
#line 876 
    __retres = 1;
    
#line 876 
    goto return_label;
  }
  else ;
  
#line 877 
  tmp_12 = reg_pattern_test(adapter,data,1040,0,1073741823U,1073741823U);
  
#line 877 
  if ((int)tmp_12 != 0) {
    
#line 877 
    __retres = 1;
    
#line 877 
    goto return_label;
  }
  else ;
  
#line 878 
  tmp_13 = reg_pattern_test(adapter,data,14340,0,4294967295U,4294967295U);
  
#line 878 
  if ((int)tmp_13 != 0) {
    
#line 878 
    __retres = 1;
    
#line 878 
    goto return_label;
  }
  else ;
  
#line 879 
  tmp_14 = reg_pattern_test(adapter,data,14344,0,1048448U,1048575U);
  
#line 879 
  if ((int)tmp_14 != 0) {
    
#line 879 
    __retres = 1;
    
#line 879 
    goto return_label;
  }
  else ;
  
#line 881 
  tmp_15 = reg_set_and_check(adapter,data,256,4294967295U,0U);
  
#line 881 
  if ((int)tmp_15 != 0) {
    
#line 881 
    __retres = 1;
    
#line 881 
    goto return_label;
  }
  else ;
  
#line 883 
  if ((adapter->flags & 512U) != 0U) 
#line 883 
                                     tmp_16 = 113488702; else 
#line 883 
                                                              tmp_16 = 115323902;
  
#line 883 
  before = (unsigned int)tmp_16;
  
#line 884 
  tmp_17 = reg_set_and_check(adapter,data,256,before,4194299U);
  
#line 884 
  if ((int)tmp_17 != 0) {
    
#line 884 
    __retres = 1;
    
#line 884 
    goto return_label;
  }
  else ;
  
#line 885 
  tmp_18 = reg_set_and_check(adapter,data,1024,4294967295U,0U);
  
#line 885 
  if ((int)tmp_18 != 0) {
    
#line 885 
    __retres = 1;
    
#line 885 
    goto return_label;
  }
  else ;
  
#line 887 
  tmp_19 = reg_set_and_check(adapter,data,256,before,4294967295U);
  
#line 887 
  if ((int)tmp_19 != 0) {
    
#line 887 
    __retres = 1;
    
#line 887 
    goto return_label;
  }
  else ;
  
#line 888 
  tmp_20 = reg_pattern_test(adapter,data,10240,0,4294967280U,4294967295U);
  
#line 888 
  if ((int)tmp_20 != 0) {
    
#line 888 
    __retres = 1;
    
#line 888 
    goto return_label;
  }
  else ;
  
#line 889 
  if ((adapter->flags & 512U) == 0U) {
    bool tmp_21;
    
#line 890 
    tmp_21 = reg_pattern_test(adapter,data,376,0,3221291007U,65535U);
    
#line 890 
    if ((int)tmp_21 != 0) {
      
#line 890 
      __retres = 1;
      
#line 890 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 891 
  tmp_22 = reg_pattern_test(adapter,data,14336,0,4294967280U,4294967295U);
  
#line 891 
  if ((int)tmp_22 != 0) {
    
#line 891 
    __retres = 1;
    
#line 891 
    goto return_label;
  }
  else ;
  
#line 892 
  tmp_23 = reg_pattern_test(adapter,data,14368,0,65535U,65535U);
  
#line 892 
  if ((int)tmp_23 != 0) {
    
#line 892 
    __retres = 1;
    
#line 892 
    goto return_label;
  }
  else ;
  
#line 893 
  mask = 2147745791U;
  
#line 894 
  switch ((unsigned int)mac->type) {
    case (unsigned int)8: 
#line 895 
    ;
    case (unsigned int)9: 
#line 896 
    ;
    case (unsigned int)10: 
#line 897 
    ;
    case (unsigned int)11: 
#line 898 
    ;
    case (unsigned int)12: 
#line 899 
    ;
    
#line 900 
    mask |= 262144U;
    
#line 901 
    goto ldv_48094;
    default: 
#line 902 
    ;
    
#line 903 
    goto ldv_48094;
  }
  ldv_48094: 
#line 906 
  ;
  
#line 906 
  if ((unsigned int)mac->type + 4294967285U <= 1U) {
    u32 tmp_24;
    
#line 907 
    tmp_24 = __er32(hw,23380UL);
    
#line 907 
    wlock_mac = (tmp_24 >> 7) & 7U;
  }
  else ;
  
#line 910 
  i = 0U;
  
#line 910 
  goto ldv_48098;
  ldv_48097: 
#line 911 
  ;
  
#line 911 
  if ((unsigned int)mac->type + 4294967285U <= 1U) {
    
#line 914 
    if (wlock_mac == 1U || (wlock_mac != 0U && i > wlock_mac)) 
#line 915 
                                                               goto ldv_48096; else ;
    
#line 918 
    if (i == 10U) 
#line 919 
                  mask |= 1073741824U; else 
#line 921 
                                            mask &= 3221225471U;
  }
  else ;
  
#line 923 
  if (mac->type == (unsigned int)e1000_pch2lan) {
    
#line 925 
    if (i == 1U) 
#line 926 
                 mask &= 4294246399U; else ;
    
#line 928 
    if (i == 4U) 
#line 929 
                 mask |= 1073741824U; else ;
    
#line 931 
    if (i != 0U) 
#line 932 
                 i += 6U; else ;
  }
  else ;
  
#line 935 
  tmp_25 = reg_pattern_test(adapter,data,21504,(int)((i << 1) + 1U),mask,4294967295U);
  
#line 935 
  if ((int)tmp_25 != 0) {
    
#line 935 
    __retres = 1;
    
#line 935 
    goto return_label;
  }
  else ;
  
#line 938 
  if (mac->type == (unsigned int)e1000_pch2lan && i > 6U) 
#line 939 
                                                          i += 4294967290U; else ;
  ldv_48096: 
#line 940 
  ;
  
#line 910 
  i += 1U;
  ldv_48098: 
#line 911 
  ;
  
#line 910 
  if ((unsigned int)mac->rar_entry_count > i) 
#line 912 
                                              goto ldv_48097; else 
#line 915 
                                                                   goto ldv_48099;
  ldv_48099: 
#line 916 
  ;
  
#line 942 
  i = 0U;
  
#line 942 
  goto ldv_48101;
  ldv_48100: 
#line 943 
  ;
  
#line 943 
  tmp_26 = reg_pattern_test(adapter,data,20992,(int)i,4294967295U,4294967295U);
  
#line 943 
  if ((int)tmp_26 != 0) {
    
#line 943 
    __retres = 1;
    
#line 943 
    goto return_label;
  }
  else ;
  
#line 942 
  i += 1U;
  ldv_48101: 
#line 943 
  ;
  
#line 942 
  if ((unsigned int)mac->mta_reg_count > i) 
#line 944 
                                            goto ldv_48100; else 
#line 947 
                                                                 goto ldv_48102;
  ldv_48102: 
#line 948 
  ;
  
#line 945 
  *data = 0ULL;
  
#line 947 
  __retres = 0;
  return_label: 
#line 947 
                return __retres;
}


#line 950  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_eeprom_test(struct e1000_adapter *adapter, u64 *data)
{
  int __retres;
  u16 temp;
  u16 i;
  s32 tmp;
  
#line 953 
  u16 checksum = (unsigned short)0U;
  
#line 956 
  *data = 0ULL;
  
#line 958 
  i = (unsigned short)0U;
  
#line 958 
  goto ldv_48111;
  ldv_48110: 
#line 959 
  ;
  
#line 959 
  tmp = e1000_read_nvm(& adapter->hw,(unsigned short)((int)i),(unsigned short)1,& temp);
  
#line 959 
  if (tmp < 0) {
    
#line 960 
    *data = 1ULL;
    
#line 961 
    __retres = (int)*data;
    
#line 961 
    goto return_label;
  }
  else ;
  
#line 963 
  checksum = (unsigned short)((int)checksum + (int)temp);
  
#line 958 
  i = (u16)((int)i + 1);
  ldv_48111: 
#line 959 
  ;
  
#line 958 
  if ((unsigned int)i <= 63U) 
#line 960 
                              goto ldv_48110; else 
#line 963 
                                                   goto ldv_48112;
  ldv_48112: 
#line 964 
  ;
  
#line 967 
  if ((unsigned int)checksum != 47802U && *data == 0ULL) 
#line 968 
                                                         *data = 2ULL; else ;
  
#line 970 
  __retres = (int)*data;
  return_label: 
#line 970 
                return __retres;
}


#line 973  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static irqreturn_t e1000_test_intr(int irq, void *data)
{
  irqreturn_t __retres;
  u32 tmp_0;
  
#line 975 
  struct net_device *netdev = (struct net_device *)data;
  
#line 976 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 977 
  struct e1000_hw *hw = & adapter->hw;
  
#line 979 
  tmp_0 = __er32(hw,192UL);
  
#line 979 
  adapter->test_icr |= tmp_0;
  
#line 981 
  __retres = IRQ_HANDLED;
  
#line 981 
  return __retres;
}


#line 984  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_intr_test(struct e1000_adapter *adapter, u64 *data)
{
  u32 mask;
  int i;
  int tmp_0;
  char *tmp_1;
  
#line 986 
  struct net_device *netdev = adapter->netdev;
  
#line 987 
  struct e1000_hw *hw = & adapter->hw;
  
#line 989 
  u32 shared_int = 1U;
  
#line 990 
  u32 irq = (adapter->pdev)->irq;
  
#line 992 
  int ret_val = 0;
  
#line 993 
  int int_mode = 0;
  
#line 995 
  *data = 0ULL;
  
#line 998 
  if (adapter->int_mode == 2) {
    
#line 999 
    int_mode = adapter->int_mode;
    
#line 1000 
    e1000e_reset_interrupt_capability(adapter);
    
#line 1001 
    adapter->int_mode = 0;
    
#line 1002 
    e1000e_set_interrupt_capability(adapter);
  }
  else ;
  
#line 1005 
  tmp_0 = ldv_request_irq_72(irq,& e1000_test_intr,256UL,(char const *)(& netdev->name),(void *)netdev);
  
#line 1005 
  if (tmp_0 == 0) 
#line 1007 
                  shared_int = 0U;
  else {
    int tmp;
    
#line 1008 
    tmp = ldv_request_irq_73(irq,& e1000_test_intr,128UL,(char const *)(& netdev->name),(void *)netdev);
    
#line 1008 
    if (tmp != 0) {
      
#line 1010 
      *data = 1ULL;
      
#line 1011 
      ret_val = -1;
      
#line 1012 
      goto out;
    }
    else ;
  }
  
#line 1014 
  if (shared_int != 0U) 
#line 1014 
                        tmp_1 = (char *)"shared"; else 
#line 1014 
                                                       tmp_1 = (char *)"unshared";
  
#line 1014 
  ;
  
#line 1014 
  netdev_info((struct net_device const *)adapter->netdev,"testing %s interrupt\n",tmp_1);
  
#line 1017 
  __ew32(hw,216UL,4294967295U);
  
#line 1018 
  __er32(hw,8UL);
  
#line 1019 
  usleep_range(10000UL,20000UL);
  
#line 1022 
  i = 0;
  
#line 1022 
  goto ldv_48140;
  ldv_48139: 
#line 1023 
  ;
  
#line 1024 
  mask = (unsigned int)(1 << i);
  
#line 1026 
  if ((adapter->flags & 512U) != 0U) {
    
#line 1027 
    switch (mask) {
      case (u32)8: 
#line 1028 
      ;
      
#line 1029 
      goto ldv_48134;
      case (u32)256: 
#line 1030 
      ;
      
#line 1031 
      if ((unsigned int)adapter->hw.mac.type + 4294967290U <= 1U) 
#line 1033 
                                                                  goto ldv_48134; else ;
      
#line 1034 
      goto ldv_48136;
      default: 
#line 1035 
      ;
      
#line 1036 
      goto ldv_48136;
    }
    ldv_48136: 
#line 1038 
    ;
  }
  else ;
  
#line 1040 
  if (shared_int == 0U) {
    
#line 1047 
    adapter->test_icr = 0U;
    
#line 1048 
    __ew32(hw,216UL,mask);
    
#line 1049 
    __ew32(hw,200UL,mask);
    
#line 1050 
    __er32(hw,8UL);
    
#line 1051 
    usleep_range(10000UL,20000UL);
    
#line 1053 
    if ((adapter->test_icr & mask) != 0U) {
      
#line 1054 
      *data = 3ULL;
      
#line 1055 
      goto ldv_48138;
    }
    else ;
  }
  else ;
  
#line 1065 
  adapter->test_icr = 0U;
  
#line 1066 
  __ew32(hw,208UL,mask);
  
#line 1067 
  __ew32(hw,200UL,mask);
  
#line 1068 
  __er32(hw,8UL);
  
#line 1069 
  usleep_range(10000UL,20000UL);
  
#line 1071 
  if ((adapter->test_icr & mask) == 0U) {
    
#line 1072 
    *data = 4ULL;
    
#line 1073 
    goto ldv_48138;
  }
  else ;
  
#line 1076 
  if (shared_int == 0U) {
    
#line 1083 
    adapter->test_icr = 0U;
    
#line 1084 
    __ew32(hw,216UL,~ mask & 32767U);
    
#line 1085 
    __ew32(hw,200UL,~ mask & 32767U);
    
#line 1086 
    __er32(hw,8UL);
    
#line 1087 
    usleep_range(10000UL,20000UL);
    
#line 1089 
    if (adapter->test_icr != 0U) {
      
#line 1090 
      *data = 5ULL;
      
#line 1091 
      goto ldv_48138;
    }
    else ;
  }
  else ;
  ldv_48134: 
#line 1094 
  ;
  
#line 1022 
  i += 1;
  ldv_48140: 
#line 1023 
  ;
  
#line 1022 
  if (i <= 9) 
#line 1024 
              goto ldv_48139; else 
#line 1027 
                                   goto ldv_48138;
  ldv_48138: 
#line 1028 
  ;
  
#line 1097 
  __ew32(hw,216UL,4294967295U);
  
#line 1098 
  __er32(hw,8UL);
  
#line 1099 
  usleep_range(10000UL,20000UL);
  
#line 1102 
  ldv_free_irq_74(irq,(void *)netdev);
  out: 
#line 1104 
  ;
  
#line 1105 
  if (int_mode == 2) {
    
#line 1106 
    e1000e_reset_interrupt_capability(adapter);
    
#line 1107 
    adapter->int_mode = int_mode;
    
#line 1108 
    e1000e_set_interrupt_capability(adapter);
  }
  else ;
  
#line 1111 
  return ret_val;
}


#line 1114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_free_desc_rings(struct e1000_adapter *adapter)
{
  struct e1000_buffer *buffer_info;
  int i;
  
#line 1116 
  struct e1000_ring *tx_ring = & adapter->test_tx_ring;
  
#line 1117 
  struct e1000_ring *rx_ring = & adapter->test_rx_ring;
  
#line 1118 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1122 
  if (tx_ring->desc != (void *)0 && tx_ring->buffer_info != (struct e1000_buffer *)0) {
    
#line 1123 
    i = 0;
    
#line 1123 
    goto ldv_48150;
    ldv_48149: 
#line 1124 
    ;
    
#line 1124 
    buffer_info = tx_ring->buffer_info + i;
    
#line 1126 
    if (buffer_info->dma != 0ULL) 
#line 1127 
                                  dma_unmap_single_attrs(& pdev->dev,buffer_info->dma,(unsigned long)buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.length,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0); else ;
    
#line 1131 
    if (buffer_info->skb != (struct sk_buff *)0) 
#line 1132 
                                                 consume_skb(buffer_info->skb); else ;
    
#line 1123 
    i += 1;
    ldv_48150: 
#line 1124 
    ;
    
#line 1123 
    if (tx_ring->count > (unsigned int)i) 
#line 1125 
                                          goto ldv_48149; else 
#line 1128 
                                                               goto ldv_48151;
    ldv_48151: 
#line 1129 
    ;
  }
  else ;
  
#line 1136 
  if (rx_ring->desc != (void *)0 && rx_ring->buffer_info != (struct e1000_buffer *)0) {
    
#line 1137 
    i = 0;
    
#line 1137 
    goto ldv_48153;
    ldv_48152: 
#line 1138 
    ;
    
#line 1138 
    buffer_info = rx_ring->buffer_info + i;
    
#line 1140 
    if (buffer_info->dma != 0ULL) 
#line 1141 
                                  dma_unmap_single_attrs(& pdev->dev,buffer_info->dma,2048UL,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0); else ;
    
#line 1144 
    if (buffer_info->skb != (struct sk_buff *)0) 
#line 1145 
                                                 consume_skb(buffer_info->skb); else ;
    
#line 1137 
    i += 1;
    ldv_48153: 
#line 1138 
    ;
    
#line 1137 
    if (rx_ring->count > (unsigned int)i) 
#line 1139 
                                          goto ldv_48152; else 
#line 1142 
                                                               goto ldv_48154;
    ldv_48154: 
#line 1143 
    ;
  }
  else ;
  
#line 1149 
  if (tx_ring->desc != (void *)0) {
    
#line 1150 
    dma_free_attrs(& pdev->dev,(unsigned long)tx_ring->size,tx_ring->desc,tx_ring->dma,(struct dma_attrs *)0);
    
#line 1152 
    tx_ring->desc = (void *)0;
  }
  else ;
  
#line 1154 
  if (rx_ring->desc != (void *)0) {
    
#line 1155 
    dma_free_attrs(& pdev->dev,(unsigned long)rx_ring->size,rx_ring->desc,rx_ring->dma,(struct dma_attrs *)0);
    
#line 1157 
    rx_ring->desc = (void *)0;
  }
  else ;
  
#line 1160 
  kfree((void const *)tx_ring->buffer_info);
  
#line 1161 
  tx_ring->buffer_info = (struct e1000_buffer *)0;
  
#line 1162 
  kfree((void const *)rx_ring->buffer_info);
  
#line 1163 
  rx_ring->buffer_info = (struct e1000_buffer *)0;
  
#line 1164 
  return;
}


#line 1166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_setup_desc_rings(struct e1000_adapter *adapter)
{
  int __retres;
  u32 rctl;
  int i;
  int ret_val;
  
#line 1168 
  struct e1000_ring *tx_ring = & adapter->test_tx_ring;
  
#line 1169 
  struct e1000_ring *rx_ring = & adapter->test_rx_ring;
  
#line 1170 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1171 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1178 
  if (tx_ring->count == 0U) 
#line 1179 
                            tx_ring->count = 256U; else ;
  
#line 1181 
  tx_ring->buffer_info = (struct e1000_buffer *)kcalloc((unsigned long)tx_ring->count,40UL,208U);
  
#line 1183 
  if (tx_ring->buffer_info == (struct e1000_buffer *)0) {
    
#line 1184 
    ret_val = 1;
    
#line 1185 
    goto err_nomem;
  }
  else ;
  
#line 1188 
  tx_ring->size = tx_ring->count * 16U;
  
#line 1189 
  tx_ring->size = (tx_ring->size + 4095U) & 4294963200U;
  
#line 1190 
  tx_ring->desc = dma_alloc_attrs(& pdev->dev,(unsigned long)tx_ring->size,& tx_ring->dma,208U,(struct dma_attrs *)0);
  
#line 1192 
  if (tx_ring->desc == (void *)0) {
    
#line 1193 
    ret_val = 2;
    
#line 1194 
    goto err_nomem;
  }
  else ;
  
#line 1196 
  tx_ring->next_to_use = (unsigned short)0U;
  
#line 1197 
  tx_ring->next_to_clean = (unsigned short)0U;
  
#line 1199 
  __ew32(hw,14336UL,(unsigned int)tx_ring->dma);
  
#line 1200 
  __ew32(hw,14340UL,(unsigned int)(tx_ring->dma >> 32));
  
#line 1201 
  __ew32(hw,14344UL,tx_ring->count * 16U);
  
#line 1202 
  __ew32(hw,14352UL,0U);
  
#line 1203 
  __ew32(hw,14360UL,0U);
  
#line 1204 
  __ew32(hw,1024UL,268693754U);
  
#line 1208 
  i = 0;
  
#line 1208 
  goto ldv_48170;
  ldv_48169: 
#line 1209 
  ;
  {
    struct sk_buff *skb;
    int tmp_0;
    
#line 1209 
    struct e1000_tx_desc *tx_desc = (struct e1000_tx_desc *)tx_ring->desc + i;
    
#line 1211 
    unsigned int skb_size = 1024U;
    
#line 1213 
    skb = alloc_skb(skb_size,208U);
    
#line 1214 
    if (skb == (struct sk_buff *)0) {
      
#line 1215 
      ret_val = 3;
      
#line 1216 
      goto err_nomem;
    }
    else ;
    
#line 1218 
    skb_put(skb,skb_size);
    
#line 1219 
    (tx_ring->buffer_info + i)->skb = skb;
    
#line 1220 
    (tx_ring->buffer_info + i)->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.length = (unsigned short)skb->len;
    
#line 1221 
    (tx_ring->buffer_info + i)->dma = dma_map_single_attrs(& pdev->dev,(void *)skb->data,(unsigned long)skb->len,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
    
#line 1224 
    tmp_0 = dma_mapping_error(& pdev->dev,(tx_ring->buffer_info + i)->dma);
    
#line 1224 
    if (tmp_0 != 0) {
      
#line 1226 
      ret_val = 4;
      
#line 1227 
      goto err_nomem;
    }
    else ;
    
#line 1229 
    tx_desc->buffer_addr = (tx_ring->buffer_info + i)->dma;
    
#line 1230 
    tx_desc->lower.data = skb->len;
    
#line 1231 
    tx_desc->lower.data |= 184549376U;
    
#line 1234 
    tx_desc->upper.data = 0U;
  }
  
#line 1208 
  i += 1;
  ldv_48170: 
#line 1209 
  ;
  
#line 1208 
  if (tx_ring->count > (unsigned int)i) 
#line 1210 
                                        goto ldv_48169; else 
#line 1213 
                                                             goto ldv_48171;
  ldv_48171: 
#line 1214 
  ;
  
#line 1239 
  if (rx_ring->count == 0U) 
#line 1240 
                            rx_ring->count = 256U; else ;
  
#line 1242 
  rx_ring->buffer_info = (struct e1000_buffer *)kcalloc((unsigned long)rx_ring->count,40UL,208U);
  
#line 1244 
  if (rx_ring->buffer_info == (struct e1000_buffer *)0) {
    
#line 1245 
    ret_val = 5;
    
#line 1246 
    goto err_nomem;
  }
  else ;
  
#line 1249 
  rx_ring->size = rx_ring->count * 16U;
  
#line 1250 
  rx_ring->desc = dma_alloc_attrs(& pdev->dev,(unsigned long)rx_ring->size,& rx_ring->dma,208U,(struct dma_attrs *)0);
  
#line 1252 
  if (rx_ring->desc == (void *)0) {
    
#line 1253 
    ret_val = 6;
    
#line 1254 
    goto err_nomem;
  }
  else ;
  
#line 1256 
  rx_ring->next_to_use = (unsigned short)0U;
  
#line 1257 
  rx_ring->next_to_clean = (unsigned short)0U;
  
#line 1259 
  rctl = __er32(hw,256UL);
  
#line 1260 
  if ((adapter->flags2 & 1024U) == 0U) 
#line 1261 
                                       __ew32(hw,256UL,rctl & 4294967293U); else ;
  
#line 1262 
  __ew32(hw,10240UL,(unsigned int)rx_ring->dma);
  
#line 1263 
  __ew32(hw,10244UL,(unsigned int)(rx_ring->dma >> 32));
  
#line 1264 
  __ew32(hw,10248UL,rx_ring->size);
  
#line 1265 
  __ew32(hw,10256UL,0U);
  
#line 1266 
  __ew32(hw,10264UL,0U);
  
#line 1267 
  rctl = (adapter->hw.mac.mc_filter_type << 12) | 67141694U;
  
#line 1272 
  __ew32(hw,256UL,rctl);
  
#line 1274 
  i = 0;
  
#line 1274 
  goto ldv_48175;
  ldv_48174: 
#line 1275 
  ;
  {
    union e1000_rx_desc_extended *rx_desc;
    struct sk_buff *skb_0;
    int tmp_2;
    
#line 1278 
    skb_0 = alloc_skb(2048U,208U);
    
#line 1279 
    if (skb_0 == (struct sk_buff *)0) {
      
#line 1280 
      ret_val = 7;
      
#line 1281 
      goto err_nomem;
    }
    else ;
    
#line 1283 
    skb_reserve(skb_0,0);
    
#line 1284 
    (rx_ring->buffer_info + i)->skb = skb_0;
    
#line 1285 
    (rx_ring->buffer_info + i)->dma = dma_map_single_attrs(& pdev->dev,(void *)skb_0->data,2048UL,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0);
    
#line 1288 
    tmp_2 = dma_mapping_error(& pdev->dev,(rx_ring->buffer_info + i)->dma);
    
#line 1288 
    if (tmp_2 != 0) {
      
#line 1290 
      ret_val = 8;
      
#line 1291 
      goto err_nomem;
    }
    else ;
    
#line 1293 
    rx_desc = (union e1000_rx_desc_extended *)rx_ring->desc + i;
    
#line 1294 
    rx_desc->read.buffer_addr = (rx_ring->buffer_info + i)->dma;
    
#line 1296 
    memset((void *)skb_0->data,0,(unsigned long)skb_0->len);
  }
  
#line 1274 
  i += 1;
  ldv_48175: 
#line 1275 
  ;
  
#line 1274 
  if (rx_ring->count > (unsigned int)i) 
#line 1276 
                                        goto ldv_48174; else 
#line 1279 
                                                             goto ldv_48176;
  ldv_48176: 
#line 1280 
  ;
  
#line 1299 
  __retres = 0;
  
#line 1299 
  goto return_label;
  err_nomem: 
#line 1301 
  ;
  
#line 1302 
  e1000_free_desc_rings(adapter);
  
#line 1303 
  __retres = ret_val;
  return_label: 
#line 1303 
                return __retres;
}


#line 1306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_phy_disable_receiver(struct e1000_adapter *adapter)
{
  
#line 1309 
  e1e_wphy(& adapter->hw,29U,(unsigned short)31);
  
#line 1310 
  e1e_wphy(& adapter->hw,30U,(unsigned short)36860);
  
#line 1311 
  e1e_wphy(& adapter->hw,29U,(unsigned short)26);
  
#line 1312 
  e1e_wphy(& adapter->hw,30U,(unsigned short)36848);
  
#line 1313 
  return;
}


#line 1315  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_integrated_phy_loopback(struct e1000_adapter *adapter)
{
  int __retres;
  
#line 1317 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1318 
  u32 ctrl_reg = 0U;
  
#line 1319 
  u16 phy_reg = (unsigned short)0U;
  
#line 1320 
  s32 ret_val = 0;
  
#line 1322 
  hw->mac.autoneg = (_Bool)0;
  
#line 1324 
  if (hw->phy.type == (unsigned int)e1000_phy_ife) {
    
#line 1326 
    e1e_wphy(hw,0U,(unsigned short)24832);
    
#line 1329 
    ctrl_reg = __er32(hw,0UL);
    
#line 1330 
    ctrl_reg &= 4294966527U;
    
#line 1331 
    ctrl_reg |= 6401U;
    
#line 1336 
    __ew32(hw,0UL,ctrl_reg);
    
#line 1337 
    __er32(hw,8UL);
    
#line 1338 
    usleep_range(500UL,1000UL);
    
#line 1340 
    __retres = 0;
    
#line 1340 
    goto return_label;
  }
  else ;
  
#line 1344 
  switch ((unsigned int)hw->phy.type) {
    case (unsigned int)2: 
#line 1345 
    ;
    
#line 1347 
    e1e_wphy(hw,16U,(unsigned short)2056);
    
#line 1349 
    e1e_wphy(hw,0U,(unsigned short)37184);
    
#line 1351 
    e1e_wphy(hw,0U,(unsigned short)33088);
    
#line 1352 
    goto ldv_48188;
    case (unsigned int)5: 
#line 1353 
    ;
    
#line 1354 
    e1e_wphy(hw,6192U,(unsigned short)460);
    
#line 1355 
    goto ldv_48188;
    case (unsigned int)8: 
#line 1356 
    ;
    
#line 1358 
    e1e_rphy(hw,85U,& phy_reg);
    
#line 1359 
    phy_reg = (unsigned short)((unsigned int)phy_reg & 65528U);
    
#line 1360 
    phy_reg = (unsigned short)((unsigned int)phy_reg | 6U);
    
#line 1361 
    e1e_wphy(hw,85U,(unsigned short)((int)phy_reg));
    
#line 1363 
    (*(hw->phy.ops.commit))(hw);
    
#line 1364 
    usleep_range(1000UL,2000UL);
    
#line 1366 
    e1e_rphy(hw,24624U,& phy_reg);
    
#line 1367 
    e1e_wphy(hw,24624U,(unsigned short)((int)((unsigned int)phy_reg | 12U)));
    
#line 1369 
    e1e_rphy(hw,24848U,& phy_reg);
    
#line 1370 
    e1e_wphy(hw,24848U,(unsigned short)((int)((unsigned int)phy_reg | 64U)));
    
#line 1372 
    e1e_rphy(hw,24624U,& phy_reg);
    
#line 1373 
    e1e_wphy(hw,24624U,(unsigned short)((int)((unsigned int)phy_reg | 64U)));
    
#line 1375 
    e1e_rphy(hw,24628U,& phy_reg);
    
#line 1376 
    e1e_wphy(hw,24628U,(unsigned short)((int)((unsigned int)phy_reg | 1024U)));
    
#line 1377 
    goto ldv_48188;
    case (unsigned int)10: 
#line 1378 
    ;
    case (unsigned int)9: 
#line 1379 
    ;
    
#line 1381 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    
#line 1382 
    if (ret_val != 0) {
      
#line 1383 
      netdev_err((struct net_device const *)adapter->netdev,"Cannot setup 1Gbps loopback.\n");
      
#line 1384 
      __retres = ret_val;
      
#line 1384 
      goto return_label;
    }
    else ;
    
#line 1386 
    e1000_configure_k1_ich8lan(hw,(_Bool)0);
    
#line 1387 
    (*(hw->phy.ops.release))(hw);
    
#line 1388 
    goto ldv_48188;
    case (unsigned int)11: 
#line 1389 
    ;
    
#line 1391 
    e1e_rphy(hw,21U,& phy_reg);
    
#line 1392 
    e1e_wphy(hw,21U,(unsigned short)((int)phy_reg & 65527));
    
#line 1394 
    e1e_rphy(hw,24850U,& phy_reg);
    
#line 1395 
    e1e_wphy(hw,24850U,(unsigned short)((int)((unsigned int)phy_reg | 1U)));
    
#line 1397 
    e1e_wphy(hw,19U,(unsigned short)32769);
    
#line 1398 
    goto ldv_48188;
    default: 
#line 1399 
    ;
    
#line 1400 
    goto ldv_48188;
  }
  ldv_48188: 
#line 1404 
  ;
  
#line 1404 
  e1e_wphy(hw,0U,(unsigned short)16704);
  
#line 1405 
  msleep(250U);
  
#line 1408 
  ctrl_reg = __er32(hw,0UL);
  
#line 1409 
  ctrl_reg &= 4294966527U;
  
#line 1410 
  ctrl_reg |= 6657U;
  
#line 1415 
  if ((adapter->flags & 512U) != 0U) 
#line 1416 
                                     ctrl_reg |= 64U; else ;
  
#line 1418 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper && hw->phy.type == (unsigned int)e1000_phy_m88) 
    
#line 1420 
    ctrl_reg |= 128U;
  else {
    u32 tmp;
    
#line 1425 
    tmp = __er32(hw,8UL);
    
#line 1425 
    if ((tmp & 1U) == 0U) 
#line 1426 
                          ctrl_reg |= 192U; else ;
  }
  
#line 1429 
  __ew32(hw,0UL,ctrl_reg);
  
#line 1434 
  if (hw->phy.type == (unsigned int)e1000_phy_m88) 
#line 1435 
                                                   e1000_phy_disable_receiver(adapter); else ;
  
#line 1437 
  usleep_range(500UL,1000UL);
  
#line 1439 
  __retres = 0;
  return_label: 
#line 1439 
                return __retres;
}


#line 1442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_82571_fiber_loopback(struct e1000_adapter *adapter)
{
  int __retres;
  int link;
  u32 tmp_0;
  
#line 1444 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1445 
  u32 ctrl = __er32(hw,0UL);
  
#line 1453 
  ctrl |= 64U;
  
#line 1454 
  __ew32(hw,0UL,ctrl);
  
#line 1457 
  ctrl = __er32(hw,376UL);
  
#line 1458 
  ctrl &= 2147483647U;
  
#line 1459 
  __ew32(hw,376UL,ctrl);
  
#line 1461 
  tmp_0 = __er32(hw,8UL);
  
#line 1461 
  link = (int)tmp_0 & 2;
  
#line 1463 
  if (link == 0) {
    
#line 1465 
    ctrl = __er32(hw,0UL);
    
#line 1466 
    ctrl |= 128U;
    
#line 1467 
    __ew32(hw,0UL,ctrl);
  }
  else ;
  
#line 1473 
  __ew32(hw,36UL,1040U);
  
#line 1474 
  __er32(hw,8UL);
  
#line 1475 
  usleep_range(10000UL,20000UL);
  
#line 1477 
  __retres = 0;
  
#line 1477 
  return __retres;
}


#line 1481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_es2lan_mac_loopback(struct e1000_adapter *adapter)
{
  int __retres;
  
#line 1483 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1484 
  u32 ctrlext = __er32(hw,24UL);
  
#line 1485 
  u32 ctrl = __er32(hw,0UL);
  
#line 1490 
  adapter->tx_fifo_head = ctrlext;
  
#line 1493 
  ctrlext &= 4282384383U;
  
#line 1494 
  __ew32(hw,24UL,ctrlext);
  
#line 1497 
  ctrl &= 4294966527U;
  
#line 1498 
  ctrl |= 6721U;
  
#line 1500 
  __ew32(hw,0UL,ctrl);
  
#line 1503 
  ctrl = __er32(hw,256UL);
  
#line 1504 
  ctrl |= 64U;
  
#line 1505 
  __ew32(hw,256UL,ctrl);
  
#line 1510 
  __ew32(hw,52UL,2033026U);
  
#line 1513 
  __retres = 0;
  
#line 1513 
  return __retres;
}


#line 1516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_setup_loopback_test(struct e1000_adapter *adapter)
{
  int __retres;
  u32 rctl;
  u32 fext_nvm11;
  u32 tarc0;
  
#line 1518 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1521 
  if (hw->mac.type == (unsigned int)e1000_pch_spt) {
    
#line 1522 
    fext_nvm11 = __er32(hw,23484UL);
    
#line 1523 
    fext_nvm11 |= 8192U;
    
#line 1524 
    __ew32(hw,23484UL,fext_nvm11);
    
#line 1525 
    tarc0 = __er32(hw,14400UL);
    
#line 1527 
    tarc0 &= 3489660927U;
    
#line 1529 
    tarc0 |= 536870912U;
    
#line 1530 
    __ew32(hw,14400UL,tarc0);
  }
  else ;
  
#line 1532 
  if ((unsigned int)hw->phy.media_type + 4294967294U <= 1U) 
    
#line 1534 
    switch ((unsigned int)hw->mac.type) {
      int tmp;
      int tmp_0;
      case (unsigned int)5: 
#line 1535 
      ;
      
#line 1536 
      tmp = e1000_set_es2lan_mac_loopback(adapter);
      
#line 1536 
      __retres = tmp;
      
#line 1536 
      goto return_label;
      case (unsigned int)0: 
#line 1537 
      ;
      case (unsigned int)1: 
#line 1538 
      ;
      
#line 1539 
      tmp_0 = e1000_set_82571_fiber_loopback(adapter);
      
#line 1539 
      __retres = tmp_0;
      
#line 1539 
      goto return_label;
      default: 
#line 1540 
      ;
      
#line 1541 
      rctl = __er32(hw,256UL);
      
#line 1542 
      rctl |= 192U;
      
#line 1543 
      __ew32(hw,256UL,rctl);
      
#line 1544 
      __retres = 0;
      
#line 1544 
      goto return_label;
    }
  else 
    
#line 1546 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
      int tmp_1;
      
#line 1547 
      tmp_1 = e1000_integrated_phy_loopback(adapter);
      
#line 1547 
      __retres = tmp_1;
      
#line 1547 
      goto return_label;
    }
    else ;
  
#line 1550 
  __retres = 7;
  return_label: 
#line 1550 
                return __retres;
}


#line 1553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_loopback_cleanup(struct e1000_adapter *adapter)
{
  u32 rctl;
  u32 fext_nvm11;
  u32 tarc0;
  u16 phy_reg;
  
#line 1555 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1559 
  rctl = __er32(hw,256UL);
  
#line 1560 
  rctl &= 4294967103U;
  
#line 1561 
  __ew32(hw,256UL,rctl);
  
#line 1563 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)12: 
#line 1564 
    ;
    
#line 1565 
    fext_nvm11 = __er32(hw,23484UL);
    
#line 1566 
    fext_nvm11 &= 4294959103U;
    
#line 1567 
    __ew32(hw,23484UL,fext_nvm11);
    
#line 1568 
    tarc0 = __er32(hw,14400UL);
    
#line 1571 
    tarc0 &= 3489660927U;
    
#line 1572 
    __ew32(hw,14400UL,tarc0);
    case (unsigned int)5: 
#line 1574 
    ;
    
#line 1575 
    if ((unsigned int)hw->phy.media_type + 4294967294U <= 1U) {
      
#line 1578 
      __ew32(hw,24UL,adapter->tx_fifo_head);
      
#line 1579 
      adapter->tx_fifo_head = 0U;
    }
    else ;
    case (unsigned int)0: 
#line 1582 
    ;
    case (unsigned int)1: 
#line 1583 
    ;
    
#line 1584 
    if ((unsigned int)hw->phy.media_type + 4294967294U <= 1U) {
      
#line 1586 
      __ew32(hw,36UL,1024U);
      
#line 1587 
      __er32(hw,8UL);
      
#line 1588 
      usleep_range(10000UL,20000UL);
      
#line 1589 
      goto ldv_48230;
    }
    else ;
    default: 
#line 1592 
    ;
    
#line 1593 
    hw->mac.autoneg = (_Bool)1;
    
#line 1594 
    if (hw->phy.type == (unsigned int)e1000_phy_gg82563) 
#line 1595 
                                                         e1e_wphy(hw,6192U,(unsigned short)384); else ;
    
#line 1596 
    e1e_rphy(hw,0U,& phy_reg);
    
#line 1597 
    if (((int)phy_reg & 16384) != 0) {
      
#line 1598 
      phy_reg = (unsigned short)((unsigned int)phy_reg & 49151U);
      
#line 1599 
      e1e_wphy(hw,0U,(unsigned short)((int)phy_reg));
      
#line 1600 
      if (hw->phy.ops.commit != (s32 (*)(struct e1000_hw *))0) 
#line 1601 
                                                               (*(hw->phy.ops.commit))(hw); else ;
    }
    else ;
    
#line 1603 
    goto ldv_48230;
  }
  ldv_48230: 
#line 1605 
  ;
  
#line 1606 
  return;
}


#line 1607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_create_lbtest_frame(struct sk_buff *skb, unsigned int frame_size)
{
  
#line 1610 
  memset((void *)skb->data,255,(unsigned long)frame_size);
  
#line 1611 
  frame_size &= 4294967294U;
  
#line 1612 
  memset((void *)(skb->data + frame_size / 2U),170,(unsigned long)(frame_size / 2U + 4294967295U));
  
#line 1613 
  memset((void *)(skb->data + (frame_size / 2U + 10U)),190,1UL);
  
#line 1614 
  memset((void *)(skb->data + (frame_size / 2U + 12U)),175,1UL);
  
#line 1615 
  return;
}


#line 1617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_check_lbtest_frame(struct sk_buff *skb, unsigned int frame_size)
{
  int __retres;
  
#line 1620 
  frame_size &= 4294967294U;
  
#line 1621 
  if ((unsigned int)*(skb->data + 3U) == 255U) {
    
#line 1622 
    if ((unsigned int)*(skb->data + (frame_size / 2U + 10U)) == 190U && (unsigned int)*(skb->data + (frame_size / 2U + 12U)) == 175U) {
      
#line 1624 
      __retres = 0;
      
#line 1624 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1625 
  __retres = 13;
  return_label: 
#line 1625 
                return __retres;
}


#line 1628  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_run_loopback_test(struct e1000_adapter *adapter)
{
  struct e1000_buffer *buffer_info;
  int i;
  int j;
  int k;
  int l;
  int lc;
  int good_cnt;
  unsigned long time;
  int tmp_1;
  
#line 1630 
  struct e1000_ring *tx_ring = & adapter->test_tx_ring;
  
#line 1631 
  struct e1000_ring *rx_ring = & adapter->test_rx_ring;
  
#line 1632 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1633 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1638 
  int ret_val = 0;
  
#line 1641 
  __ew32(hw,10264UL,rx_ring->count + 4294967295U);
  
#line 1648 
  if (rx_ring->count <= tx_ring->count) 
#line 1649 
                                        lc = (int)((tx_ring->count / 64U) * 2U + 1U); else 
                                                                    
#line 1651 
                                                                    lc = (int)((rx_ring->count / 64U) * 2U + 1U);
  
#line 1653 
  k = 0;
  
#line 1654 
  l = 0;
  
#line 1656 
  j = 0;
  
#line 1656 
  goto ldv_48275;
  ldv_48274: 
#line 1657 
  ;
  
#line 1658 
  i = 0;
  
#line 1658 
  goto ldv_48257;
  ldv_48256: 
#line 1659 
  ;
  
#line 1659 
  buffer_info = tx_ring->buffer_info + k;
  
#line 1661 
  e1000_create_lbtest_frame(buffer_info->skb,1024U);
  
#line 1662 
  dma_sync_single_for_device(& pdev->dev,buffer_info->dma,(unsigned long)buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.length,(enum dma_data_direction)DMA_TO_DEVICE);
  
#line 1666 
  k += 1;
  
#line 1667 
  if (tx_ring->count == (unsigned int)k) 
#line 1668 
                                         k = 0; else ;
  
#line 1658 
  i += 1;
  ldv_48257: 
#line 1659 
  ;
  
#line 1658 
  if (i <= 63) 
#line 1660 
               goto ldv_48256; else 
#line 1663 
                                    goto ldv_48258;
  ldv_48258: 
#line 1664 
  ;
  
#line 1670 
  __ew32(hw,14360UL,(unsigned int)k);
  
#line 1671 
  __er32(hw,8UL);
  
#line 1672 
  msleep(200U);
  
#line 1673 
  time = jiffies;
  
#line 1674 
  good_cnt = 0;
  ldv_48265: 
#line 1675 
  ;
  
#line 1677 
  buffer_info = rx_ring->buffer_info + l;
  
#line 1679 
  dma_sync_single_for_cpu(& pdev->dev,buffer_info->dma,2048UL,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 1683 
  ret_val = e1000_check_lbtest_frame(buffer_info->skb,1024U);
  
#line 1685 
  if (ret_val == 0) 
#line 1686 
                    good_cnt += 1; else ;
  
#line 1687 
  l += 1;
  
#line 1688 
  if (rx_ring->count == (unsigned int)l) 
#line 1689 
                                         l = 0; else ;
  
#line 1694 
  if (good_cnt <= 63) {
    int tmp;
    {
      unsigned long __dummy;
      unsigned long volatile __dummy2;
      
#line 1694 
      tmp = 1;
    }
    
#line 1694 
    if (tmp == 0) 
#line 1694 
                  goto _LOR;
    else {
      int tmp_0;
      {
        unsigned long __dummy_0;
        unsigned long __dummy2_0;
        
#line 1694 
        tmp_0 = 1;
      }
      
#line 1694 
      if (tmp_0 == 0) 
#line 1694 
                      goto _LOR;
      else 
        
#line 1694 
        if ((long)((time - jiffies) + 20UL) >= 0L) _LOR: 
#line 1696 
                                                         goto ldv_48265; else 
                                                                    
#line 1699 
                                                                    goto ldv_48266;
    }
  }
  else 
#line 1699 
       goto ldv_48266;
  ldv_48266: 
#line 1700 
  ;
  
#line 1695 
  if (good_cnt != 64) {
    
#line 1696 
    ret_val = 13;
    
#line 1697 
    goto ldv_48267;
  }
  else ;
  {
    unsigned long __dummy_1;
    unsigned long volatile __dummy2_1;
    
#line 1699 
    tmp_1 = 1;
  }
  
#line 1699 
  if (tmp_1 != 0) {
    int tmp_2;
    {
      unsigned long __dummy_2;
      unsigned long __dummy2_2;
      
#line 1699 
      tmp_2 = 1;
    }
    
#line 1699 
    if (tmp_2 != 0) {
      
#line 1699 
      if ((long)((time - jiffies) + 20UL) < 0L) {
        
#line 1700 
        ret_val = 14;
        
#line 1701 
        goto ldv_48267;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 1656 
  j += 1;
  ldv_48275: 
#line 1657 
  ;
  
#line 1656 
  if (j <= lc) 
#line 1658 
               goto ldv_48274; else 
#line 1661 
                                    goto ldv_48267;
  ldv_48267: 
#line 1662 
  ;
  
#line 1704 
  return ret_val;
}


#line 1707  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_loopback_test(struct e1000_adapter *adapter, u64 *data)
{
  int __retres;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  
#line 1709 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1712 
  if (hw->phy.ops.check_reset_block != (s32 (*)(struct e1000_hw *))0) {
    s32 tmp;
    
#line 1712 
    tmp = (*(hw->phy.ops.check_reset_block))(hw);
    
#line 1712 
    if (tmp != 0) {
      
#line 1714 
      netdev_err((struct net_device const *)adapter->netdev,"Cannot do PHY loopback test when SoL/IDER is active.\n");
      
#line 1715 
      *data = 0ULL;
      
#line 1716 
      goto out;
    }
    else ;
  }
  else ;
  
#line 1719 
  tmp_0 = e1000_setup_desc_rings(adapter);
  
#line 1719 
  *data = (unsigned long long)tmp_0;
  
#line 1720 
  if (*data != 0ULL) 
#line 1721 
                     goto out; else ;
  
#line 1723 
  tmp_1 = e1000_setup_loopback_test(adapter);
  
#line 1723 
  *data = (unsigned long long)tmp_1;
  
#line 1724 
  if (*data != 0ULL) 
#line 1725 
                     goto err_loopback; else ;
  
#line 1727 
  tmp_2 = e1000_run_loopback_test(adapter);
  
#line 1727 
  *data = (unsigned long long)tmp_2;
  
#line 1728 
  e1000_loopback_cleanup(adapter);
  err_loopback: 
#line 1730 
  ;
  
#line 1731 
  e1000_free_desc_rings(adapter);
  out: 
#line 1732 
  ;
  
#line 1733 
  __retres = (int)*data;
  
#line 1733 
  return __retres;
}


#line 1736  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_link_test(struct e1000_adapter *adapter, u64 *data)
{
  int __retres;
  
#line 1738 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1740 
  *data = 0ULL;
  
#line 1741 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_internal_serdes) {
    int tmp;
    
#line 1742 
    int i = 0;
    
#line 1744 
    hw->mac.serdes_has_link = (_Bool)0;
    ldv_48289: 
#line 1745 
    ;
    
#line 1750 
    (*(hw->mac.ops.check_for_link))(hw);
    
#line 1751 
    if ((int)hw->mac.serdes_has_link != 0) {
      
#line 1752 
      __retres = (int)*data;
      
#line 1752 
      goto return_label;
    }
    else ;
    
#line 1753 
    msleep(20U);
    
#line 1754 
    tmp = i;
    
#line 1754 
    i += 1;
    
#line 1754 
    ;
    
#line 1754 
    if (tmp <= 3749) 
#line 1756 
                     goto ldv_48289; else 
#line 1759 
                                          goto ldv_48290;
    ldv_48290: 
#line 1760 
    ;
    
#line 1756 
    *data = 1ULL;
  }
  else {
    u32 tmp_0;
    
#line 1758 
    (*(hw->mac.ops.check_for_link))(hw);
    
#line 1759 
    if ((int)hw->mac.autoneg != 0) 
#line 1763 
                                   msleep_interruptible(5000U); else ;
    
#line 1765 
    tmp_0 = __er32(hw,8UL);
    
#line 1765 
    if ((tmp_0 & 2U) == 0U) 
#line 1766 
                            *data = 1ULL; else ;
  }
  
#line 1768 
  __retres = (int)*data;
  return_label: 
#line 1768 
                return __retres;
}


#line 1771  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000e_get_sset_count(struct net_device *netdev, int sset)
{
  int __retres;
  
#line 1774 
  switch (sset) {
    case 0: 
#line 1775 
    ;
    
#line 1776 
    __retres = 5;
    
#line 1776 
    goto return_label;
    case 1: 
#line 1777 
    ;
    
#line 1778 
    __retres = 52;
    
#line 1778 
    goto return_label;
    default: 
#line 1779 
    ;
    
#line 1780 
    __retres = -95;
    
#line 1780 
    goto return_label;
  }
  return_label: 
#line 1774 
                return __retres;
}


#line 1784  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_diag_test(struct net_device *netdev, struct ethtool_test *eth_test, u64 *data)
{
  u16 autoneg_advertised;
  u8 forced_speed_duplex;
  u8 autoneg;
  
#line 1787 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1791 
  bool if_running = netif_running((struct net_device const *)netdev);
  
#line 1793 
  pm_runtime_get_sync(netdev->dev.parent);
  
#line 1795 
  clear_bit(0L,(unsigned long volatile *)(& adapter->state));
  
#line 1797 
  if (! if_running) {
    
#line 1799 
    if ((adapter->flags & 1U) != 0U) 
#line 1800 
                                     e1000e_get_hw_control(adapter); else ;
    
#line 1802 
    e1000e_power_up_phy(adapter);
    
#line 1804 
    adapter->hw.phy.autoneg_wait_to_complete = (_Bool)1;
    
#line 1805 
    e1000e_reset(adapter);
    
#line 1806 
    adapter->hw.phy.autoneg_wait_to_complete = (_Bool)0;
  }
  else ;
  
#line 1809 
  if (eth_test->flags == 1U) {
    int tmp_1;
    int tmp_2;
    int tmp_3;
    int tmp_4;
    int tmp_5;
    
#line 1813 
    autoneg_advertised = adapter->hw.phy.autoneg_advertised;
    
#line 1814 
    forced_speed_duplex = adapter->hw.mac.forced_speed_duplex;
    
#line 1815 
    autoneg = (unsigned char)adapter->hw.mac.autoneg;
    
#line 1817 
    netdev_info((struct net_device const *)adapter->netdev,"offline testing starting\n");
    
#line 1819 
    if ((int)if_running != 0) 
#line 1821 
                              dev_close(netdev); else ;
    
#line 1823 
    tmp_1 = e1000_reg_test(adapter,data);
    
#line 1823 
    if (tmp_1 != 0) 
#line 1824 
                    eth_test->flags |= 2U; else ;
    
#line 1826 
    e1000e_reset(adapter);
    
#line 1827 
    tmp_2 = e1000_eeprom_test(adapter,data + 1U);
    
#line 1827 
    if (tmp_2 != 0) 
#line 1828 
                    eth_test->flags |= 2U; else ;
    
#line 1830 
    e1000e_reset(adapter);
    
#line 1831 
    tmp_3 = e1000_intr_test(adapter,data + 2U);
    
#line 1831 
    if (tmp_3 != 0) 
#line 1832 
                    eth_test->flags |= 2U; else ;
    
#line 1834 
    e1000e_reset(adapter);
    
#line 1835 
    tmp_4 = e1000_loopback_test(adapter,data + 3U);
    
#line 1835 
    if (tmp_4 != 0) 
#line 1836 
                    eth_test->flags |= 2U; else ;
    
#line 1839 
    adapter->hw.phy.autoneg_wait_to_complete = (_Bool)1;
    
#line 1840 
    e1000e_reset(adapter);
    
#line 1841 
    adapter->hw.phy.autoneg_wait_to_complete = (_Bool)0;
    
#line 1843 
    tmp_5 = e1000_link_test(adapter,data + 4U);
    
#line 1843 
    if (tmp_5 != 0) 
#line 1844 
                    eth_test->flags |= 2U; else ;
    
#line 1847 
    adapter->hw.phy.autoneg_advertised = autoneg_advertised;
    
#line 1848 
    adapter->hw.mac.forced_speed_duplex = forced_speed_duplex;
    
#line 1849 
    adapter->hw.mac.autoneg = (_Bool)((unsigned int)autoneg != 0U);
    
#line 1850 
    e1000e_reset(adapter);
    
#line 1852 
    clear_bit(0L,(unsigned long volatile *)(& adapter->state));
    
#line 1853 
    if ((int)if_running != 0) 
#line 1854 
                              dev_open(netdev); else ;
  }
  else {
    int tmp_6;
    
#line 1858 
    netdev_info((struct net_device const *)adapter->netdev,"online testing starting\n");
    
#line 1861 
    *data = 0ULL;
    
#line 1862 
    *(data + 1U) = 0ULL;
    
#line 1863 
    *(data + 2U) = 0ULL;
    
#line 1864 
    *(data + 3U) = 0ULL;
    
#line 1866 
    tmp_6 = e1000_link_test(adapter,data + 4U);
    
#line 1866 
    if (tmp_6 != 0) 
#line 1867 
                    eth_test->flags |= 2U; else ;
    
#line 1869 
    clear_bit(0L,(unsigned long volatile *)(& adapter->state));
  }
  
#line 1872 
  if (! if_running) {
    
#line 1873 
    e1000e_reset(adapter);
    
#line 1875 
    if ((adapter->flags & 1U) != 0U) 
#line 1876 
                                     e1000e_release_hw_control(adapter); else ;
  }
  else ;
  
#line 1879 
  msleep_interruptible(4000U);
  
#line 1881 
  pm_runtime_put_sync(netdev->dev.parent);
  
#line 1882 
  return;
}


#line 1884  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_get_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  
#line 1887 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1889 
  wol->supported = 0U;
  
#line 1890 
  wol->wolopts = 0U;
  
#line 1892 
  if ((adapter->flags & 8U) == 0U) 
#line 1894 
                                   goto return_label;
  else {
    int tmp_1;
    bool tmp_0;
    
#line 1893 
    tmp_0 = device_can_wakeup(& (adapter->pdev)->dev);
    
#line 1893 
    if (tmp_0) 
#line 1893 
               tmp_1 = 0; else 
#line 1893 
                               tmp_1 = 1;
    
#line 1893 
    if (tmp_1) 
#line 1894 
               goto return_label; else ;
  }
  
#line 1896 
  wol->supported = 47U;
  
#line 1900 
  if ((adapter->flags & 524288U) != 0U) {
    
#line 1901 
    wol->supported &= 4294967293U;
    
#line 1903 
    if ((adapter->wol & 4U) != 0U) 
#line 1904 
                                   netdev_err((struct net_device const *)adapter->netdev,"Interface does not support directed (unicast) frame wake-up packets\n"); else ;
  }
  else ;
  
#line 1907 
  if ((adapter->wol & 4U) != 0U) 
#line 1908 
                                 wol->wolopts |= 2U; else ;
  
#line 1909 
  if ((adapter->wol & 8U) != 0U) 
#line 1910 
                                 wol->wolopts |= 4U; else ;
  
#line 1911 
  if ((adapter->wol & 16U) != 0U) 
#line 1912 
                                  wol->wolopts |= 8U; else ;
  
#line 1913 
  if ((adapter->wol & 2U) != 0U) 
#line 1914 
                                 wol->wolopts |= 32U; else ;
  
#line 1915 
  if ((adapter->wol & 1U) != 0U) 
#line 1916 
                                 wol->wolopts |= 1U; else ;
  return_label: 
#line 1917 
                return;
}


#line 1919  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_wol(struct net_device *netdev, struct ethtool_wolinfo *wol)
{
  int __retres;
  
#line 1921 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1923 
  if ((adapter->flags & 8U) == 0U) {
    
#line 1927 
    __retres = -95;
    
#line 1927 
    goto return_label;
  }
  else {
    int tmp_1;
    bool tmp_0;
    
#line 1924 
    tmp_0 = device_can_wakeup(& (adapter->pdev)->dev);
    
#line 1924 
    if (tmp_0) 
#line 1924 
               tmp_1 = 0; else 
#line 1924 
                               tmp_1 = 1;
    
#line 1924 
    if (tmp_1) {
      
#line 1927 
      __retres = -95;
      
#line 1927 
      goto return_label;
    }
    else 
      
#line 1924 
      if ((wol->wolopts & 4294967248U) != 0U) {
        
#line 1927 
        __retres = -95;
        
#line 1927 
        goto return_label;
      }
      else ;
  }
  
#line 1930 
  adapter->wol = 0U;
  
#line 1932 
  if ((wol->wolopts & 2U) != 0U) 
#line 1933 
                                 adapter->wol |= 4U; else ;
  
#line 1934 
  if ((wol->wolopts & 4U) != 0U) 
#line 1935 
                                 adapter->wol |= 8U; else ;
  
#line 1936 
  if ((wol->wolopts & 8U) != 0U) 
#line 1937 
                                 adapter->wol |= 16U; else ;
  
#line 1938 
  if ((wol->wolopts & 32U) != 0U) 
#line 1939 
                                  adapter->wol |= 2U; else ;
  
#line 1940 
  if ((wol->wolopts & 1U) != 0U) 
#line 1941 
                                 adapter->wol |= 1U; else ;
  
#line 1943 
  device_set_wakeup_enable(& (adapter->pdev)->dev,(_Bool)(adapter->wol != 0U));
  
#line 1945 
  __retres = 0;
  return_label: 
#line 1945 
                return __retres;
}


#line 1948  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_phys_id(struct net_device *netdev, enum ethtool_phys_id_state state)
{
  int __retres;
  
#line 1951 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1952 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1954 
  switch ((unsigned int)state) {
    case (unsigned int)1: 
#line 1955 
    ;
    
#line 1956 
    pm_runtime_get_sync(netdev->dev.parent);
    
#line 1958 
    if (hw->mac.ops.blink_led == (s32 (*)(struct e1000_hw *))0) {
      
#line 1959 
      __retres = 2;
      
#line 1959 
      goto return_label;
    }
    else ;
    
#line 1961 
    (*(hw->mac.ops.blink_led))(hw);
    
#line 1962 
    goto ldv_48331;
    case (unsigned int)0: 
#line 1964 
    ;
    
#line 1965 
    if (hw->phy.type == (unsigned int)e1000_phy_ife) 
#line 1966 
                                                     e1e_wphy(hw,27U,(unsigned short)0); else ;
    
#line 1967 
    (*(hw->mac.ops.led_off))(hw);
    
#line 1968 
    (*(hw->mac.ops.cleanup_led))(hw);
    
#line 1969 
    pm_runtime_put_sync(netdev->dev.parent);
    
#line 1970 
    goto ldv_48331;
    case (unsigned int)2: 
#line 1972 
    ;
    
#line 1973 
    (*(hw->mac.ops.led_on))(hw);
    
#line 1974 
    goto ldv_48331;
    case (unsigned int)3: 
#line 1976 
    ;
    
#line 1977 
    (*(hw->mac.ops.led_off))(hw);
    
#line 1978 
    goto ldv_48331;
  }
  ldv_48331: 
#line 1981 
  ;
  
#line 1981 
  __retres = 0;
  return_label: 
#line 1981 
                return __retres;
}


#line 1984  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_get_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  int __retres;
  
#line 1987 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1989 
  if (adapter->itr_setting <= 4U) 
#line 1990 
                                  ec->rx_coalesce_usecs = adapter->itr_setting; else 
                                                                    
#line 1992 
                                                                    ec->rx_coalesce_usecs = 1000000U / adapter->itr_setting;
  
#line 1994 
  __retres = 0;
  
#line 1994 
  return __retres;
}


#line 1997  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_set_coalesce(struct net_device *netdev, struct ethtool_coalesce *ec)
{
  int __retres;
  
#line 2000 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2002 
  if ((ec->rx_coalesce_usecs > 10000U || ec->rx_coalesce_usecs + 4294967291U <= 4U) || ec->rx_coalesce_usecs == 2U) {
    
#line 2006 
    __retres = -22;
    
#line 2006 
    goto return_label;
  }
  else ;
  
#line 2008 
  if (ec->rx_coalesce_usecs == 4U) {
    
#line 2009 
    adapter->itr_setting = 4U;
    
#line 2010 
    adapter->itr = adapter->itr_setting;
  }
  else 
    
#line 2011 
    if (ec->rx_coalesce_usecs <= 3U) {
      
#line 2012 
      adapter->itr = 20000U;
      
#line 2013 
      adapter->itr_setting = ec->rx_coalesce_usecs;
    }
    else {
      
#line 2015 
      adapter->itr = 1000000U / ec->rx_coalesce_usecs;
      
#line 2016 
      adapter->itr_setting = adapter->itr & 4294967292U;
    }
  
#line 2019 
  pm_runtime_get_sync(netdev->dev.parent);
  
#line 2021 
  if (adapter->itr_setting != 0U) 
#line 2022 
                                  e1000e_write_itr(adapter,adapter->itr); else 
                                                                    
#line 2024 
                                                                    e1000e_write_itr(adapter,0U);
  
#line 2026 
  pm_runtime_put_sync(netdev->dev.parent);
  
#line 2028 
  __retres = 0;
  return_label: 
#line 2028 
                return __retres;
}


#line 2031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_nway_reset(struct net_device *netdev)
{
  int __retres;
  int tmp_1;
  bool tmp_0;
  
#line 2033 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2035 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 2035 
  if (tmp_0) 
#line 2035 
             tmp_1 = 0; else 
#line 2035 
                             tmp_1 = 1;
  
#line 2035 
  if (tmp_1) {
    
#line 2036 
    __retres = -11;
    
#line 2036 
    goto return_label;
  }
  else ;
  
#line 2038 
  if (! adapter->hw.mac.autoneg) {
    
#line 2039 
    __retres = -22;
    
#line 2039 
    goto return_label;
  }
  else ;
  
#line 2041 
  pm_runtime_get_sync(netdev->dev.parent);
  
#line 2042 
  e1000e_reinit_locked(adapter);
  
#line 2043 
  pm_runtime_put_sync(netdev->dev.parent);
  
#line 2045 
  __retres = 0;
  return_label: 
#line 2045 
                return __retres;
}


#line 2048  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_get_ethtool_stats(struct net_device *netdev, struct ethtool_stats *stats, u64 *data)
{
  struct rtnl_link_stats64 net_stats;
  int i;
  
#line 2052 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2055 
  char *p = (char *)0;
  
#line 2057 
  pm_runtime_get_sync(netdev->dev.parent);
  
#line 2059 
  e1000e_get_stats64(netdev,& net_stats);
  
#line 2061 
  pm_runtime_put_sync(netdev->dev.parent);
  
#line 2063 
  i = 0;
  
#line 2063 
  goto ldv_48367;
  ldv_48366: 
#line 2064 
  ;
  
#line 2064 
  switch (e1000_gstrings_stats[i].type) {
    case 0: 
#line 2065 
    ;
    
#line 2066 
    p = (char *)(& net_stats) + e1000_gstrings_stats[i].stat_offset;
    
#line 2068 
    goto ldv_48362;
    case 1: 
#line 2069 
    ;
    
#line 2070 
    p = (char *)adapter + e1000_gstrings_stats[i].stat_offset;
    
#line 2072 
    goto ldv_48362;
    default: 
#line 2073 
    ;
    
#line 2074 
    *(data + i) = 0ULL;
    
#line 2075 
    goto ldv_48365;
  }
  ldv_48362: 
#line 2078 
  ;
  
#line 2078 
  if (e1000_gstrings_stats[i].sizeof_stat == 8) 
#line 2078 
                                                *(data + i) = *((u64 *)p); else 
                                                                    
#line 2078 
                                                                    *(data + i) = (unsigned long long)*((u32 *)p);
  ldv_48365: 
#line 2080 
  ;
  
#line 2063 
  i += 1;
  ldv_48367: 
#line 2064 
  ;
  
#line 2063 
  if ((unsigned int)i <= 51U) 
#line 2065 
                              goto ldv_48366; else 
#line 2068 
                                                   goto ldv_48368;
  ldv_48368: 
#line 2069 
  ;
  
#line 2070 
  return;
}


#line 2083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static void e1000_get_strings(struct net_device *netdev, u32 stringset, u8 *data)
{
  int i;
  
#line 2086 
  u8 *p = data;
  
#line 2089 
  switch (stringset) {
    case (u32)0: 
#line 2090 
    ;
    
#line 2091 
    memcpy((void *)data,(void const *)(& e1000_gstrings_test),160UL);
    
#line 2092 
    goto ldv_48377;
    case (u32)1: 
#line 2093 
    ;
    
#line 2094 
    i = 0;
    
#line 2094 
    goto ldv_48383;
    ldv_48382: 
#line 2095 
    ;
    
#line 2095 
    memcpy((void *)p,(void const *)(& e1000_gstrings_stats[i].stat_string),32UL);
    
#line 2097 
    p += 32U;
    
#line 2094 
    i += 1;
    ldv_48383: 
#line 2095 
    ;
    
#line 2094 
    if ((unsigned int)i <= 51U) 
#line 2096 
                                goto ldv_48382; else 
#line 2099 
                                                     goto ldv_48384;
    ldv_48384: 
#line 2100 
    ;
    
#line 2099 
    goto ldv_48377;
  }
  ldv_48377: 
#line 2101 
  ;
  
#line 2102 
  return;
}


#line 2103  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000_get_rxnfc(struct net_device *netdev, struct ethtool_rxnfc *info, u32 *rule_locs)
{
  int __retres;
  
#line 2107 
  info->data = 0ULL;
  
#line 2109 
  switch (info->cmd) {
    case (__u32)41: 
#line 2110 
    ;
    {
      u32 mrqc;
      
#line 2111 
      struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
      
#line 2112 
      struct e1000_hw *hw = & adapter->hw;
      
#line 2115 
      pm_runtime_get_sync(netdev->dev.parent);
      
#line 2116 
      mrqc = __er32(hw,22552UL);
      
#line 2117 
      pm_runtime_put_sync(netdev->dev.parent);
      
#line 2119 
      if ((mrqc & 4294901760U) == 0U) {
        
#line 2120 
        __retres = 0;
        
#line 2120 
        goto return_label;
      }
      else ;
      
#line 2122 
      switch (info->flow_type) {
        case (__u32)1: 
#line 2123 
        ;
        
#line 2124 
        if ((mrqc & 65536U) != 0U) 
#line 2125 
                                   info->data |= 192ULL; else ;
        case (__u32)2: 
#line 2127 
        ;
        case (__u32)3: 
#line 2128 
        ;
        case (__u32)4: 
#line 2129 
        ;
        case (__u32)16: 
#line 2130 
        ;
        
#line 2131 
        if ((mrqc & 131072U) != 0U) 
#line 2132 
                                    info->data |= 48ULL; else ;
        
#line 2133 
        goto ldv_48399;
        case (__u32)5: 
#line 2134 
        ;
        
#line 2135 
        if ((mrqc & 2097152U) != 0U) 
#line 2136 
                                     info->data |= 192ULL; else ;
        case (__u32)6: 
#line 2138 
        ;
        case (__u32)7: 
#line 2139 
        ;
        case (__u32)8: 
#line 2140 
        ;
        case (__u32)17: 
#line 2141 
        ;
        
#line 2142 
        if ((mrqc & 1048576U) != 0U) 
#line 2143 
                                     info->data |= 48ULL; else ;
        
#line 2144 
        goto ldv_48399;
        default: 
#line 2145 
        ;
        
#line 2146 
        goto ldv_48399;
      }
      ldv_48399: 
#line 2148 
      ;
      
#line 2148 
      __retres = 0;
      
#line 2148 
      goto return_label;
    }
    default: 
#line 2150 
    ;
    
#line 2151 
    __retres = -95;
    
#line 2151 
    goto return_label;
  }
  return_label: 
#line 2109 
                return __retres;
}


#line 2155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000e_get_eee(struct net_device *netdev, struct ethtool_eee *edata)
{
  int __retres;
  u16 cap_addr;
  u16 lpa_addr;
  u16 pcs_stat_addr;
  u16 phy_data;
  u32 ret_val;
  s32 tmp_0;
  s32 tmp_1;
  s32 tmp_2;
  s32 tmp_3;
  u32 tmp_4;
  
#line 2157 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2158 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2162 
  if ((adapter->flags2 & 32U) == 0U) {
    
#line 2163 
    __retres = -95;
    
#line 2163 
    goto return_label;
  }
  else ;
  
#line 2165 
  switch ((unsigned int)hw->phy.type) {
    case (unsigned int)11: 
#line 2166 
    ;
    
#line 2167 
    cap_addr = (unsigned short)1040U;
    
#line 2168 
    lpa_addr = (unsigned short)1039U;
    
#line 2169 
    pcs_stat_addr = (unsigned short)6190U;
    
#line 2170 
    goto ldv_48419;
    case (unsigned int)12: 
#line 2171 
    ;
    
#line 2172 
    cap_addr = (unsigned short)32768U;
    
#line 2173 
    lpa_addr = (unsigned short)32770U;
    
#line 2174 
    pcs_stat_addr = (unsigned short)37889U;
    
#line 2175 
    goto ldv_48419;
    default: 
#line 2176 
    ;
    
#line 2177 
    __retres = -95;
    
#line 2177 
    goto return_label;
  }
  ldv_48419: 
#line 2180 
  ;
  
#line 2180 
  pm_runtime_get_sync(netdev->dev.parent);
  
#line 2182 
  tmp_0 = (*(hw->phy.ops.acquire))(hw);
  
#line 2182 
  ret_val = (unsigned int)tmp_0;
  
#line 2183 
  if (ret_val != 0U) {
    
#line 2184 
    pm_runtime_put_sync(netdev->dev.parent);
    
#line 2185 
    __retres = -16;
    
#line 2185 
    goto return_label;
  }
  else ;
  
#line 2189 
  tmp_1 = e1000_read_emi_reg_locked(hw,(unsigned short)((int)cap_addr),& phy_data);
  
#line 2189 
  ret_val = (unsigned int)tmp_1;
  
#line 2190 
  if (ret_val != 0U) 
#line 2191 
                     goto release; else ;
  
#line 2192 
  edata->supported = mmd_eee_cap_to_ethtool_sup_t((unsigned short)((int)phy_data));
  
#line 2195 
  edata->advertised = mmd_eee_cap_to_ethtool_sup_t((unsigned short)((int)adapter->eee_advert));
  
#line 2198 
  tmp_2 = e1000_read_emi_reg_locked(hw,(unsigned short)((int)lpa_addr),& phy_data);
  
#line 2198 
  ret_val = (unsigned int)tmp_2;
  
#line 2199 
  if (ret_val != 0U) 
#line 2200 
                     goto release; else ;
  
#line 2201 
  edata->lp_advertised = mmd_eee_cap_to_ethtool_sup_t((unsigned short)((int)phy_data));
  
#line 2204 
  tmp_3 = e1000_read_emi_reg_locked(hw,(unsigned short)((int)pcs_stat_addr),& phy_data);
  
#line 2204 
  ret_val = (unsigned int)tmp_3;
  
#line 2205 
  if (ret_val != 0U) 
#line 2206 
                     goto release; else ;
  
#line 2207 
  if (hw->phy.type == (unsigned int)e1000_phy_82579) 
#line 2208 
                                                     phy_data = (unsigned short)((int)phy_data << 8U); else ;
  
#line 2214 
  if (((int)phy_data & 3072) != 0) 
#line 2215 
                                   edata->eee_active = 1U; else ;
  
#line 2217 
  edata->eee_enabled = (unsigned int)(! hw->dev_spec.ich8lan.eee_disable);
  
#line 2218 
  edata->tx_lpi_enabled = 1U;
  
#line 2219 
  tmp_4 = __er32(hw,252UL);
  
#line 2219 
  edata->tx_lpi_timer = tmp_4 >> 24;
  release: 
#line 2221 
  ;
  
#line 2222 
  (*(hw->phy.ops.release))(hw);
  
#line 2223 
  if (ret_val != 0U) 
#line 2224 
                     ret_val = 4294967235U; else ;
  
#line 2226 
  pm_runtime_put_sync(netdev->dev.parent);
  
#line 2228 
  __retres = (int)ret_val;
  return_label: 
#line 2228 
                return __retres;
}


#line 2231  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000e_set_eee(struct net_device *netdev, struct ethtool_eee *edata)
{
  int __retres;
  struct ethtool_eee eee_curr;
  s32 ret_val;
  bool tmp_0;
  
#line 2233 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2234 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2238 
  ret_val = e1000e_get_eee(netdev,& eee_curr);
  
#line 2239 
  if (ret_val != 0) {
    
#line 2240 
    __retres = ret_val;
    
#line 2240 
    goto return_label;
  }
  else ;
  
#line 2242 
  if (eee_curr.tx_lpi_enabled != edata->tx_lpi_enabled) {
    
#line 2243 
    netdev_err((struct net_device const *)adapter->netdev,"Setting EEE tx-lpi is not supported\n");
    
#line 2244 
    __retres = -22;
    
#line 2244 
    goto return_label;
  }
  else ;
  
#line 2247 
  if (eee_curr.tx_lpi_timer != edata->tx_lpi_timer) {
    
#line 2248 
    netdev_err((struct net_device const *)adapter->netdev,"Setting EEE Tx LPI timer is not supported\n");
    
#line 2249 
    __retres = -22;
    
#line 2249 
    goto return_label;
  }
  else ;
  
#line 2252 
  if ((edata->advertised & 4294967255U) != 0U) {
    
#line 2253 
    netdev_err((struct net_device const *)adapter->netdev,"EEE advertisement supports only 100TX and/or 1000T full-duplex\n");
    
#line 2254 
    __retres = -22;
    
#line 2254 
    goto return_label;
  }
  else ;
  
#line 2257 
  adapter->eee_advert = ethtool_adv_to_mmd_eee_adv_t(edata->advertised);
  
#line 2259 
  hw->dev_spec.ich8lan.eee_disable = (_Bool)(edata->eee_enabled == 0U);
  
#line 2261 
  pm_runtime_get_sync(netdev->dev.parent);
  
#line 2264 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 2264 
  if ((int)tmp_0 != 0) 
#line 2265 
                       e1000e_reinit_locked(adapter); else 
#line 2267 
                                                           e1000e_reset(adapter);
  
#line 2269 
  pm_runtime_put_sync(netdev->dev.parent);
  
#line 2271 
  __retres = 0;
  return_label: 
#line 2271 
                return __retres;
}


#line 2274  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static int e1000e_get_ts_info(struct net_device *netdev, struct ethtool_ts_info *info)
{
  int __retres;
  
#line 2277 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2279 
  ethtool_op_get_ts_info(netdev,info);
  
#line 2281 
  if ((adapter->flags & 16384U) == 0U) {
    
#line 2282 
    __retres = 0;
    
#line 2282 
    goto return_label;
  }
  else ;
  
#line 2284 
  info->so_timestamping |= 69U;
  
#line 2288 
  info->tx_types = 3U;
  
#line 2290 
  info->rx_filters = 32179U;
  
#line 2302 
  if (adapter->ptp_clock != (struct ptp_clock *)0) 
#line 2303 
                                                   info->phc_index = ptp_clock_index(adapter->ptp_clock); else ;
  
#line 2305 
  __retres = 0;
  return_label: 
#line 2305 
                return __retres;
}


#line 2308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
static struct ethtool_ops const e1000_ethtool_ops = {.get_settings = & e1000_get_settings, .set_settings = & e1000_set_settings, .get_drvinfo = & e1000_get_drvinfo, .get_regs_len = & e1000_get_regs_len, .get_regs = & e1000_get_regs, .get_wol = & e1000_get_wol, .set_wol = & e1000_set_wol, .get_msglevel = & e1000_get_msglevel, .set_msglevel = & e1000_set_msglevel, .nway_reset = & e1000_nway_reset, .get_link = & ethtool_op_get_link, .get_eeprom_len = & e1000_get_eeprom_len, .get_eeprom = & e1000_get_eeprom, .set_eeprom = & e1000_set_eeprom, .get_coalesce = & e1000_get_coalesce, .set_coalesce = & e1000_set_coalesce, .get_ringparam = & e1000_get_ringparam, .set_ringparam = & e1000_set_ringparam, .get_pauseparam = & e1000_get_pauseparam, .set_pauseparam = & e1000_set_pauseparam, .self_test = & e1000_diag_test, .get_strings = & e1000_get_strings, .set_phys_id = & e1000_set_phys_id, .get_ethtool_stats = & e1000_get_ethtool_stats, .begin = (int (*)(struct net_device *))0, .complete = (void (*)(struct net_device *))0, .get_priv_flags = (u32 (*)(struct net_device *))0, .set_priv_flags = (int (*)(struct net_device *, u32 ))0, .get_sset_count = & e1000e_get_sset_count, .get_rxnfc = & e1000_get_rxnfc, .set_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *))0, .flash_device = (int (*)(struct net_device *, struct ethtool_flash *))0, .reset = (int (*)(struct net_device *, u32 *))0, .get_rxfh_key_size = (u32 (*)(struct net_device *))0, .get_rxfh_indir_size = (u32 (*)(struct net_device *))0, .get_rxfh = (int (*)(struct net_device *, u32 *, u8 *, u8 *))0, .set_rxfh = (int (*)(struct net_device *, u32 const *, u8 const *, u8 const ))0, .get_channels = (void (*)(struct net_device *, struct ethtool_channels *))0, .set_channels = (int (*)(struct net_device *, struct ethtool_channels *))0, .get_dump_flag = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_dump_data = (int (*)(struct net_device *, struct ethtool_dump *, void *))0, .set_dump = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_ts_info = & e1000e_get_ts_info, .get_module_info = (int (*)(struct net_device *, struct ethtool_modinfo *))0, .get_module_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_eee = & e1000e_get_eee, .set_eee = & e1000e_set_eee, .get_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void *))0, .set_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void const *))0};

#line 2340  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/ethtool.c"
void e1000e_set_ethtool_ops(struct net_device *netdev)
{
  
#line 2342 
  netdev->ethtool_ops = & e1000_ethtool_ops;
  
#line 2343 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
unsigned int (*ldv_emg_alias_ethtool_op_get_link_11)(struct net_device *) = & ethtool_op_get_link;

#line 66 
void ldv_emg_free_irq(unsigned int arg0, void *arg1);


#line 70 
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000_set_pauseparam_39(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  int tmp;
  
#line 75 
  tmp = e1000_set_pauseparam(arg0,arg1);
  
#line 75 
  return tmp;
}


#line 79  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
void ldv_emg_wrapper_e1000_diag_test_24(struct net_device *arg0, struct ethtool_test *arg1, unsigned long long *arg2)
{
  
#line 80 
  e1000_diag_test(arg0,arg1,arg2);
  
#line 81 
  return;
}


#line 84  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000_get_eeprom_len_42(struct net_device *arg0)
{
  int tmp;
  
#line 85 
  tmp = e1000_get_eeprom_len(arg0);
  
#line 85 
  return tmp;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000e_set_eee_15(struct net_device *arg0, struct ethtool_eee *arg1)
{
  int tmp;
  
#line 90 
  tmp = e1000e_set_eee(arg0,arg1);
  
#line 90 
  return tmp;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
void ldv_emg_wrapper_e1000_get_strings_25(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  
#line 95 
  e1000_get_strings(arg0,arg1,arg2);
  
#line 96 
  return;
}


#line 99  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000_get_coalesce_36(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 100 
  tmp = e1000_get_coalesce(arg0,arg1);
  
#line 100 
  return tmp;
}


#line 104  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000_get_rxnfc_33(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  int tmp;
  
#line 105 
  tmp = e1000_get_rxnfc(arg0,arg1,arg2);
  
#line 105 
  return tmp;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000_get_eeprom_3(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  int tmp;
  
#line 110 
  tmp = e1000_get_eeprom(arg0,arg1,arg2);
  
#line 110 
  return tmp;
}


#line 114  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
void ldv_emg_wrapper_e1000_get_wol_26(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  
#line 115 
  e1000_get_wol(arg0,arg1);
  
#line 116 
  return;
}


#line 119  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000e_get_eee_16(struct net_device *arg0, struct ethtool_eee *arg1)
{
  int tmp;
  
#line 120 
  tmp = e1000e_get_eee(arg0,arg1);
  
#line 120 
  return tmp;
}


#line 124  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
void ldv_emg_wrapper_e1000_get_pauseparam_2(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  
#line 125 
  e1000_get_pauseparam(arg0,arg1);
  
#line 126 
  return;
}


#line 129  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
void ldv_emg_wrapper_e1000_set_msglevel_6(struct net_device *arg0, unsigned int arg1)
{
  
#line 130 
  e1000_set_msglevel(arg0,arg1);
  
#line 131 
  return;
}


#line 134  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000_set_ringparam_18(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  int tmp;
  
#line 135 
  tmp = e1000_set_ringparam(arg0,arg1);
  
#line 135 
  return tmp;
}


#line 139  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000_get_settings_22(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 140 
  tmp = e1000_get_settings(arg0,arg1);
  
#line 140 
  return tmp;
}


#line 144  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
unsigned int ldv_emg_wrapper_e1000_get_msglevel_19(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 145 
  tmp = e1000_get_msglevel(arg0);
  
#line 145 
  return tmp;
}


#line 149  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
void ldv_emg_wrapper_e1000_get_ringparam_8(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  
#line 150 
  e1000_get_ringparam(arg0,arg1);
  
#line 151 
  return;
}


#line 154  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000_set_phys_id_5(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  int tmp;
  
#line 155 
  tmp = e1000_set_phys_id(arg0,arg1);
  
#line 155 
  return tmp;
}


#line 159  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000e_get_sset_count_32(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 160 
  tmp = e1000e_get_sset_count(arg0,arg1);
  
#line 160 
  return tmp;
}


#line 164  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000_set_eeprom_17(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  int tmp;
  
#line 165 
  tmp = e1000_set_eeprom(arg0,arg1,arg2);
  
#line 165 
  return tmp;
}


#line 169  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000_nway_reset_34(struct net_device *arg0)
{
  int tmp;
  
#line 170 
  tmp = e1000_nway_reset(arg0);
  
#line 170 
  return tmp;
}


#line 174  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000_set_settings_4(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 175 
  tmp = e1000_set_settings(arg0,arg1);
  
#line 175 
  return tmp;
}


#line 179  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
void ldv_emg_wrapper_e1000_get_regs_31(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  
#line 180 
  e1000_get_regs(arg0,arg1,arg2);
  
#line 181 
  return;
}


#line 184  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
enum irqreturn ldv_emg_wrapper_e1000_test_intr_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 185 
  tmp = e1000_test_intr(arg0,arg1);
  
#line 185 
  return tmp;
}


#line 189  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000_set_coalesce_38(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 190 
  tmp = e1000_set_coalesce(arg0,arg1);
  
#line 190 
  return tmp;
}


#line 194  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
void ldv_emg_wrapper_e1000_get_ethtool_stats_9(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  
#line 195 
  e1000_get_ethtool_stats(arg0,arg1,arg2);
  
#line 196 
  return;
}


#line 199  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000e_get_ts_info_35(struct net_device *arg0, struct ethtool_ts_info *arg1)
{
  int tmp;
  
#line 200 
  tmp = e1000e_get_ts_info(arg0,arg1);
  
#line 200 
  return tmp;
}


#line 204  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000_set_wol_30(struct net_device *arg0, struct ethtool_wolinfo *arg1)
{
  int tmp;
  
#line 205 
  tmp = e1000_set_wol(arg0,arg1);
  
#line 205 
  return tmp;
}


#line 209  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
int ldv_emg_wrapper_e1000_get_regs_len_37(struct net_device *arg0)
{
  int tmp;
  
#line 210 
  tmp = e1000_get_regs_len(arg0);
  
#line 210 
  return tmp;
}


#line 214  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
void ldv_emg_wrapper_e1000_get_drvinfo_13(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  
#line 215 
  e1000_get_drvinfo(arg0,arg1);
  
#line 216 
  return;
}


#line 729  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 732 
  tmp = ldv_kmalloc(size,flags);
  
#line 732 
  return tmp;
}


#line 743  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 746 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 746 
  return tmp;
}


#line 890  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
static int ldv_request_irq_72(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 894 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 894 
  return tmp;
}


#line 898  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
static int ldv_request_irq_73(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 902 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 902 
  return tmp;
}


#line 906  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_ethtool.c.aux"
static void ldv_free_irq_74(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 910 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 911 
  return;
}


#line 5  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/delay.h"
void __bad_udelay(void);


#line 8 
void __udelay(unsigned long);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.h"
s32 e1000e_acquire_nvm(struct e1000_hw *hw);


#line 27 
s32 e1000e_poll_eerd_eewr_done(struct e1000_hw *hw, int ee_reg);


#line 28 
s32 e1000_read_mac_addr_generic(struct e1000_hw *hw);


#line 29 
s32 e1000_read_pba_string_generic(struct e1000_hw *hw, u8 *pba_num, u32 pba_num_size);


#line 31 
s32 e1000e_read_nvm_eerd(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);


#line 34 
s32 e1000e_write_nvm_spi(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);


#line 36 
void e1000e_release_nvm(struct e1000_hw *hw);


#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
static void e1000_raise_eec_clk(struct e1000_hw *hw, u32 *eecd)
{
  
#line 33 
  *eecd |= 1U;
  
#line 34 
  __ew32(hw,16UL,*eecd);
  
#line 35 
  __er32(hw,8UL);
  
#line 36 
  if (0 != 0) 
    
#line 36 
    if ((unsigned int)hw->nvm.delay_usec > 19999U) 
#line 36 
                                                   __bad_udelay(); else 
                                                                    
#line 36 
                                                                    __const_udelay((unsigned long)hw->nvm.delay_usec * 4295UL);
  else 
#line 36 
       __udelay((unsigned long)hw->nvm.delay_usec);
  
#line 38 
  return;
}


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
static void e1000_lower_eec_clk(struct e1000_hw *hw, u32 *eecd)
{
  
#line 48 
  *eecd &= 4294967294U;
  
#line 49 
  __ew32(hw,16UL,*eecd);
  
#line 50 
  __er32(hw,8UL);
  
#line 51 
  if (0 != 0) 
    
#line 51 
    if ((unsigned int)hw->nvm.delay_usec > 19999U) 
#line 51 
                                                   __bad_udelay(); else 
                                                                    
#line 51 
                                                                    __const_udelay((unsigned long)hw->nvm.delay_usec * 4295UL);
  else 
#line 51 
       __udelay((unsigned long)hw->nvm.delay_usec);
  
#line 53 
  return;
}


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
static void e1000_shift_out_eec_bits(struct e1000_hw *hw, u16 data, u16 count)
{
  u32 mask;
  
#line 66 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 67 
  u32 eecd = __er32(hw,16UL);
  
#line 70 
  mask = (unsigned int)(1 << ((int)count + -1));
  
#line 71 
  if (nvm->type == (unsigned int)e1000_nvm_eeprom_spi) 
#line 72 
                                                       eecd |= 8U; else ;
  ldv_47538: 
#line 73 
  ;
  
#line 75 
  eecd &= 4294967291U;
  
#line 77 
  if (((unsigned int)data & mask) != 0U) 
#line 78 
                                         eecd |= 4U; else ;
  
#line 80 
  __ew32(hw,16UL,eecd);
  
#line 81 
  __er32(hw,8UL);
  
#line 83 
  if (0 != 0) 
    
#line 83 
    if ((unsigned int)nvm->delay_usec > 19999U) 
#line 83 
                                                __bad_udelay(); else 
                                                                  
#line 83 
                                                                  __const_udelay((unsigned long)nvm->delay_usec * 4295UL);
  else 
#line 83 
       __udelay((unsigned long)nvm->delay_usec);
  
#line 85 
  e1000_raise_eec_clk(hw,& eecd);
  
#line 86 
  e1000_lower_eec_clk(hw,& eecd);
  
#line 88 
  mask >>= 1;
  
#line 89 
  if (mask != 0U) 
#line 91 
                  goto ldv_47538; else 
#line 94 
                                       goto ldv_47539;
  ldv_47539: 
#line 95 
  ;
  
#line 91 
  eecd &= 4294967291U;
  
#line 92 
  __ew32(hw,16UL,eecd);
  
#line 93 
  return;
}


#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
static u16 e1000_shift_in_eec_bits(struct e1000_hw *hw, u16 count)
{
  u32 eecd;
  u32 i;
  u16 data;
  
#line 112 
  eecd = __er32(hw,16UL);
  
#line 113 
  eecd &= 4294967283U;
  
#line 114 
  data = (unsigned short)0U;
  
#line 116 
  i = 0U;
  
#line 116 
  goto ldv_47548;
  ldv_47547: 
#line 117 
  ;
  
#line 117 
  data = (unsigned short)((int)data << 1U);
  
#line 118 
  e1000_raise_eec_clk(hw,& eecd);
  
#line 120 
  eecd = __er32(hw,16UL);
  
#line 122 
  eecd &= 4294967291U;
  
#line 123 
  if ((eecd & 8U) != 0U) 
#line 124 
                         data = (unsigned short)((unsigned int)data | 1U); else ;
  
#line 126 
  e1000_lower_eec_clk(hw,& eecd);
  
#line 116 
  i += 1U;
  ldv_47548: 
#line 117 
  ;
  
#line 116 
  if ((unsigned int)count > i) 
#line 118 
                               goto ldv_47547; else 
#line 121 
                                                    goto ldv_47549;
  ldv_47549: 
#line 122 
  ;
  
#line 129 
  return data;
}


#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
s32 e1000e_poll_eerd_eewr_done(struct e1000_hw *hw, int ee_reg)
{
  s32 __retres;
  u32 i;
  
#line 142 
  u32 attempts = 100000U;
  
#line 143 
  u32 reg = 0U;
  
#line 145 
  i = 0U;
  
#line 145 
  goto ldv_47558;
  ldv_47557: 
#line 146 
  ;
  
#line 146 
  if (ee_reg == 0) 
#line 147 
                   reg = __er32(hw,20UL); else 
#line 149 
                                               reg = __er32(hw,4140UL);
  
#line 151 
  if ((reg & 2U) != 0U) {
    
#line 152 
    __retres = 0;
    
#line 152 
    goto return_label;
  }
  else ;
  
#line 154 
  __const_udelay(21475UL);
  
#line 145 
  i += 1U;
  ldv_47558: 
#line 146 
  ;
  
#line 145 
  if (i < attempts) 
#line 147 
                    goto ldv_47557; else 
#line 150 
                                         goto ldv_47559;
  ldv_47559: 
#line 151 
  ;
  
#line 157 
  __retres = -1;
  return_label: 
#line 157 
                return __retres;
}


#line 168  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
s32 e1000e_acquire_nvm(struct e1000_hw *hw)
{
  s32 __retres;
  
#line 170 
  u32 eecd = __er32(hw,16UL);
  
#line 171 
  s32 timeout = 1000;
  
#line 173 
  __ew32(hw,16UL,eecd | 64U);
  
#line 174 
  eecd = __er32(hw,16UL);
  
#line 176 
  goto ldv_47567;
  ldv_47566: 
#line 177 
  ;
  
#line 177 
  if ((eecd & 128U) != 0U) 
#line 178 
                           goto ldv_47565; else ;
  
#line 179 
  __const_udelay(21475UL);
  
#line 180 
  eecd = __er32(hw,16UL);
  
#line 181 
  timeout -= 1;
  ldv_47567: 
#line 182 
  ;
  
#line 176 
  if (timeout != 0) 
#line 178 
                    goto ldv_47566; else 
#line 181 
                                         goto ldv_47565;
  ldv_47565: 
#line 182 
  ;
  
#line 184 
  if (timeout == 0) {
    
#line 185 
    eecd &= 4294967231U;
    
#line 186 
    __ew32(hw,16UL,eecd);
    {
      
#line 187 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_acquire_nvm", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "Could not acquire NVM grant\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))187U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 187 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 187 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Could not acquire NVM grant\n"); else ;
    }
    
#line 188 
    __retres = -1;
    
#line 188 
    goto return_label;
  }
  else ;
  
#line 191 
  __retres = 0;
  return_label: 
#line 191 
                return __retres;
}


#line 200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
static void e1000_standby_nvm(struct e1000_hw *hw)
{
  
#line 202 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 203 
  u32 eecd = __er32(hw,16UL);
  
#line 205 
  if (nvm->type == (unsigned int)e1000_nvm_eeprom_spi) {
    
#line 207 
    eecd |= 2U;
    
#line 208 
    __ew32(hw,16UL,eecd);
    
#line 209 
    __er32(hw,8UL);
    
#line 210 
    if (0 != 0) 
      
#line 210 
      if ((unsigned int)nvm->delay_usec > 19999U) 
#line 210 
                                                  __bad_udelay(); else 
                                                                    
#line 210 
                                                                    __const_udelay((unsigned long)nvm->delay_usec * 4295UL);
    else 
#line 210 
         __udelay((unsigned long)nvm->delay_usec);
    
#line 211 
    eecd &= 4294967293U;
    
#line 212 
    __ew32(hw,16UL,eecd);
    
#line 213 
    __er32(hw,8UL);
    
#line 214 
    if (0 != 0) 
      
#line 214 
      if ((unsigned int)nvm->delay_usec > 19999U) 
#line 214 
                                                  __bad_udelay(); else 
                                                                    
#line 214 
                                                                    __const_udelay((unsigned long)nvm->delay_usec * 4295UL);
    else 
#line 214 
         __udelay((unsigned long)nvm->delay_usec);
  }
  else ;
  
#line 217 
  return;
}


#line 224  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
static void e1000_stop_nvm(struct e1000_hw *hw)
{
  u32 eecd;
  
#line 228 
  eecd = __er32(hw,16UL);
  
#line 229 
  if (hw->nvm.type == (unsigned int)e1000_nvm_eeprom_spi) {
    
#line 231 
    eecd |= 2U;
    
#line 232 
    e1000_lower_eec_clk(hw,& eecd);
  }
  else ;
  
#line 234 
  return;
}


#line 242  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
void e1000e_release_nvm(struct e1000_hw *hw)
{
  u32 eecd;
  
#line 246 
  e1000_stop_nvm(hw);
  
#line 248 
  eecd = __er32(hw,16UL);
  
#line 249 
  eecd &= 4294967231U;
  
#line 250 
  __ew32(hw,16UL,eecd);
  
#line 251 
  return;
}


#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
static s32 e1000_ready_nvm_eeprom(struct e1000_hw *hw)
{
  s32 __retres;
  u8 spi_stat_reg;
  
#line 261 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 262 
  u32 eecd = __er32(hw,16UL);
  
#line 265 
  if (nvm->type == (unsigned int)e1000_nvm_eeprom_spi) {
    u16 tmp_0;
    
#line 266 
    u16 timeout = (unsigned short)5000U;
    
#line 269 
    eecd &= 4294967292U;
    
#line 270 
    __ew32(hw,16UL,eecd);
    
#line 271 
    __er32(hw,8UL);
    
#line 272 
    __const_udelay(4295UL);
    
#line 279 
    goto ldv_47592;
    ldv_47591: 
#line 280 
    ;
    
#line 280 
    e1000_shift_out_eec_bits(hw,(unsigned short)5,(unsigned short)((int)hw->nvm.opcode_bits));
    
#line 282 
    tmp_0 = e1000_shift_in_eec_bits(hw,(unsigned short)8);
    
#line 282 
    spi_stat_reg = (unsigned char)tmp_0;
    
#line 283 
    if (((int)spi_stat_reg & 1) == 0) 
#line 284 
                                      goto ldv_47590; else ;
    
#line 286 
    __const_udelay(21475UL);
    
#line 287 
    e1000_standby_nvm(hw);
    
#line 288 
    timeout = (u16)((int)timeout - 1);
    ldv_47592: 
#line 289 
    ;
    
#line 279 
    if ((unsigned int)timeout != 0U) 
#line 281 
                                     goto ldv_47591; else 
#line 284 
                                                          goto ldv_47590;
    ldv_47590: 
#line 285 
    ;
    
#line 291 
    if ((unsigned int)timeout == 0U) {
      {
        
#line 292 
        struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_ready_nvm_eeprom", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "SPI NVM Status error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))292U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 292 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 292 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"SPI NVM Status error\n"); else ;
      }
      
#line 293 
      __retres = -1;
      
#line 293 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 297 
  __retres = 0;
  return_label: 
#line 297 
                return __retres;
}


#line 309  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
s32 e1000e_read_nvm_eerd(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 __retres;
  u32 i;
  u32 tmp;
  
#line 311 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 312 
  u32 eerd = 0U;
  
#line 313 
  s32 ret_val = 0;
  
#line 318 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      
#line 320 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_read_nvm_eerd", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "nvm parameter(s) out of bounds\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))320U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 320 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 320 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"nvm parameter(s) out of bounds\n"); else ;
    }
    
#line 321 
    __retres = -1;
    
#line 321 
    goto return_label;
  }
  else ;
  
#line 324 
  i = 0U;
  
#line 324 
  goto ldv_47610;
  ldv_47609: 
#line 325 
  ;
  
#line 325 
  eerd = (((unsigned int)offset + i) << 2) + 1U;
  
#line 328 
  __ew32(hw,20UL,eerd);
  
#line 329 
  ret_val = e1000e_poll_eerd_eewr_done(hw,0);
  
#line 330 
  if (ret_val != 0) {
    {
      
#line 331 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_read_nvm_eerd", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "NVM read error: %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))331U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 331 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 331 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"NVM read error: %d\n",ret_val); else ;
    }
    
#line 332 
    goto ldv_47608;
  }
  else ;
  
#line 335 
  tmp = __er32(hw,20UL);
  
#line 335 
  *(data + i) = (unsigned short)(tmp >> 16);
  
#line 324 
  i += 1U;
  ldv_47610: 
#line 325 
  ;
  
#line 324 
  if ((unsigned int)words > i) 
#line 326 
                               goto ldv_47609; else 
#line 329 
                                                    goto ldv_47608;
  ldv_47608: 
#line 330 
  ;
  
#line 338 
  __retres = ret_val;
  return_label: 
#line 338 
                return __retres;
}


#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
s32 e1000e_write_nvm_spi(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 __retres;
  
#line 355 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 356 
  s32 ret_val = -1;
  
#line 357 
  u16 widx = (unsigned short)0U;
  
#line 362 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      
#line 364 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_write_nvm_spi", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "nvm parameter(s) out of bounds\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))364U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 364 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 364 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"nvm parameter(s) out of bounds\n"); else ;
    }
    
#line 365 
    __retres = -1;
    
#line 365 
    goto return_label;
  }
  else ;
  
#line 368 
  goto ldv_47628;
  ldv_47627: 
#line 369 
  ;
  {
    
#line 369 
    u8 write_opcode = (unsigned char)2U;
    
#line 371 
    ret_val = (*(nvm->ops.acquire))(hw);
    
#line 372 
    if (ret_val != 0) {
      
#line 373 
      __retres = ret_val;
      
#line 373 
      goto return_label;
    }
    else ;
    
#line 375 
    ret_val = e1000_ready_nvm_eeprom(hw);
    
#line 376 
    if (ret_val != 0) {
      
#line 377 
      (*(nvm->ops.release))(hw);
      
#line 378 
      __retres = ret_val;
      
#line 378 
      goto return_label;
    }
    else ;
    
#line 381 
    e1000_standby_nvm(hw);
    
#line 384 
    e1000_shift_out_eec_bits(hw,(unsigned short)6,(unsigned short)((int)nvm->opcode_bits));
    
#line 387 
    e1000_standby_nvm(hw);
    
#line 392 
    if ((unsigned int)nvm->address_bits == 8U && (unsigned int)offset > 127U) 
      
#line 393 
      write_opcode = (unsigned char)((unsigned int)write_opcode | 8U); else ;
    
#line 396 
    e1000_shift_out_eec_bits(hw,(unsigned short)((int)write_opcode),(unsigned short)((int)nvm->opcode_bits));
    
#line 397 
    e1000_shift_out_eec_bits(hw,(unsigned short)((int)((unsigned int)((int)offset + (int)widx) * 2U)),(unsigned short)((int)nvm->address_bits));
    
#line 401 
    goto ldv_47626;
    ldv_47625: 
#line 402 
    ;
    {
      
#line 402 
      u16 word_out = *(data + (int)widx);
      
#line 404 
      word_out = (unsigned short)(((int)word_out >> 8) | ((int)word_out << 8));
      
#line 405 
      e1000_shift_out_eec_bits(hw,(unsigned short)((int)word_out),(unsigned short)16);
      
#line 406 
      widx = (u16)((int)widx + 1);
      
#line 408 
      if ((((int)offset + (int)widx) * 2) % (int)nvm->page_size == 0) {
        
#line 409 
        e1000_standby_nvm(hw);
        
#line 410 
        goto ldv_47624;
      }
      else ;
    }
    ldv_47626: 
#line 413 
    ;
    
#line 401 
    if ((int)widx < (int)words) 
#line 403 
                                goto ldv_47625; else 
#line 406 
                                                     goto ldv_47624;
    ldv_47624: 
#line 407 
    ;
    
#line 413 
    usleep_range(10000UL,20000UL);
    
#line 414 
    (*(nvm->ops.release))(hw);
  }
  ldv_47628: 
#line 416 
  ;
  
#line 368 
  if ((int)widx < (int)words) 
#line 370 
                              goto ldv_47627; else 
#line 373 
                                                   goto ldv_47629;
  ldv_47629: 
#line 374 
  ;
  
#line 417 
  __retres = ret_val;
  return_label: 
#line 417 
                return __retres;
}


#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
s32 e1000_read_pba_string_generic(struct e1000_hw *hw, u8 *pba_num, u32 pba_num_size)
{
  s32 __retres;
  s32 ret_val;
  u16 nvm_data;
  u16 pba_ptr;
  u16 offset;
  u16 length;
  
#line 438 
  if (pba_num == (u8 *)0U) {
    {
      
#line 439 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "PBA string buffer was null\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))439U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 439 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 439 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"PBA string buffer was null\n"); else ;
    }
    
#line 440 
    __retres = -16;
    
#line 440 
    goto return_label;
  }
  else ;
  
#line 443 
  ret_val = e1000_read_nvm(hw,(unsigned short)8,(unsigned short)1,& nvm_data);
  
#line 444 
  if (ret_val != 0) {
    {
      
#line 445 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))445U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 445 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 445 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"NVM Read Error\n"); else ;
    }
    
#line 446 
    __retres = ret_val;
    
#line 446 
    goto return_label;
  }
  else ;
  
#line 449 
  ret_val = e1000_read_nvm(hw,(unsigned short)9,(unsigned short)1,& pba_ptr);
  
#line 450 
  if (ret_val != 0) {
    {
      
#line 451 
      struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))451U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 451 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 451 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"NVM Read Error\n"); else ;
    }
    
#line 452 
    __retres = ret_val;
    
#line 452 
    goto return_label;
  }
  else ;
  
#line 459 
  if ((unsigned int)nvm_data != 64250U) {
    {
      
#line 460 
      struct _ddebug descriptor_2 = {.modname = "e1000e", .function = "e1000_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "NVM PBA number is not stored as string\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))460U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 460 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 460 
                                                            __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)(hw->adapter)->netdev,"NVM PBA number is not stored as string\n"); else ;
    }
    
#line 463 
    if (pba_num_size <= 10U) {
      {
        
#line 464 
        struct _ddebug descriptor_3 = {.modname = "e1000e", .function = "e1000_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "PBA string buffer too small\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))464U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 464 
        if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) 
#line 464 
                                                              __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)(hw->adapter)->netdev,"PBA string buffer too small\n"); else ;
      }
      
#line 465 
      __retres = 17;
      
#line 465 
      goto return_label;
    }
    else ;
    
#line 469 
    *pba_num = (unsigned char)((unsigned int)((unsigned char)((int)nvm_data >> 12)) & 15U);
    
#line 470 
    *(pba_num + 1U) = (unsigned char)((unsigned int)((unsigned char)((int)nvm_data >> 8)) & 15U);
    
#line 471 
    *(pba_num + 2U) = (unsigned char)((unsigned int)((unsigned char)((int)nvm_data >> 4)) & 15U);
    
#line 472 
    *(pba_num + 3U) = (unsigned char)((unsigned int)((unsigned char)nvm_data) & 15U);
    
#line 473 
    *(pba_num + 4U) = (unsigned char)((unsigned int)((unsigned char)((int)pba_ptr >> 12)) & 15U);
    
#line 474 
    *(pba_num + 5U) = (unsigned char)((unsigned int)((unsigned char)((int)pba_ptr >> 8)) & 15U);
    
#line 475 
    *(pba_num + 6U) = (unsigned char)45U;
    
#line 476 
    *(pba_num + 7U) = (unsigned char)0U;
    
#line 477 
    *(pba_num + 8U) = (unsigned char)((unsigned int)((unsigned char)((int)pba_ptr >> 4)) & 15U);
    
#line 478 
    *(pba_num + 9U) = (unsigned char)((unsigned int)((unsigned char)pba_ptr) & 15U);
    
#line 481 
    *(pba_num + 10U) = (unsigned char)0U;
    
#line 484 
    offset = (unsigned short)0U;
    
#line 484 
    goto ldv_47647;
    ldv_47646: 
#line 485 
    ;
    
#line 485 
    if ((unsigned int)*(pba_num + (int)offset) <= 9U) 
#line 486 
                                                      *(pba_num + (int)offset) = (unsigned char)((unsigned int)*(pba_num + (int)offset) + 48U);
    else 
      
#line 487 
      if ((unsigned int)*(pba_num + (int)offset) <= 15U) 
#line 488 
                                                         *(pba_num + (int)offset) = (unsigned char)((unsigned int)*(pba_num + (int)offset) + 55U); else ;
    
#line 484 
    offset = (u16)((int)offset + 1);
    ldv_47647: 
#line 485 
    ;
    
#line 484 
    if ((unsigned int)offset <= 9U) 
#line 486 
                                    goto ldv_47646; else 
#line 489 
                                                         goto ldv_47648;
    ldv_47648: 
#line 490 
    ;
    
#line 491 
    __retres = 0;
    
#line 491 
    goto return_label;
  }
  else ;
  
#line 494 
  ret_val = e1000_read_nvm(hw,(unsigned short)((int)pba_ptr),(unsigned short)1,& length);
  
#line 495 
  if (ret_val != 0) {
    {
      
#line 496 
      struct _ddebug descriptor_4 = {.modname = "e1000e", .function = "e1000_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))496U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 496 
      if ((long)(((int)descriptor_4.flags & 1) != 0) != 0L) 
#line 496 
                                                            __dynamic_netdev_dbg(& descriptor_4,(struct net_device const *)(hw->adapter)->netdev,"NVM Read Error\n"); else ;
    }
    
#line 497 
    __retres = ret_val;
    
#line 497 
    goto return_label;
  }
  else ;
  
#line 500 
  if ((unsigned int)length + 65535U > 65533U) {
    {
      
#line 501 
      struct _ddebug descriptor_5 = {.modname = "e1000e", .function = "e1000_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "NVM PBA number section invalid length\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))501U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 501 
      if ((long)(((int)descriptor_5.flags & 1) != 0) != 0L) 
#line 501 
                                                            __dynamic_netdev_dbg(& descriptor_5,(struct net_device const *)(hw->adapter)->netdev,"NVM PBA number section invalid length\n"); else ;
    }
    
#line 502 
    __retres = -18;
    
#line 502 
    goto return_label;
  }
  else ;
  
#line 505 
  if ((unsigned int)length * 2U + 4294967295U > pba_num_size) {
    {
      
#line 506 
      struct _ddebug descriptor_6 = {.modname = "e1000e", .function = "e1000_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "PBA string buffer too small\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))506U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 506 
      if ((long)(((int)descriptor_6.flags & 1) != 0) != 0L) 
#line 506 
                                                            __dynamic_netdev_dbg(& descriptor_6,(struct net_device const *)(hw->adapter)->netdev,"PBA string buffer too small\n"); else ;
    }
    
#line 507 
    __retres = -17;
    
#line 507 
    goto return_label;
  }
  else ;
  
#line 511 
  pba_ptr = (u16)((int)pba_ptr + 1);
  
#line 512 
  length = (u16)((int)length - 1);
  
#line 514 
  offset = (unsigned short)0U;
  
#line 514 
  goto ldv_47654;
  ldv_47653: 
#line 515 
  ;
  
#line 515 
  ret_val = e1000_read_nvm(hw,(unsigned short)((int)pba_ptr + (int)offset),(unsigned short)1,& nvm_data);
  
#line 516 
  if (ret_val != 0) {
    {
      
#line 517 
      struct _ddebug descriptor_7 = {.modname = "e1000e", .function = "e1000_read_pba_string_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))517U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 517 
      if ((long)(((int)descriptor_7.flags & 1) != 0) != 0L) 
#line 517 
                                                            __dynamic_netdev_dbg(& descriptor_7,(struct net_device const *)(hw->adapter)->netdev,"NVM Read Error\n"); else ;
    }
    
#line 518 
    __retres = ret_val;
    
#line 518 
    goto return_label;
  }
  else ;
  
#line 520 
  *(pba_num + (int)offset * 2) = (unsigned char)((int)nvm_data >> 8);
  
#line 521 
  *(pba_num + ((unsigned int)((int)offset * 2) + 1U)) = (unsigned char)nvm_data;
  
#line 514 
  offset = (u16)((int)offset + 1);
  ldv_47654: 
#line 515 
  ;
  
#line 514 
  if ((int)offset < (int)length) 
#line 516 
                                 goto ldv_47653; else 
#line 519 
                                                      goto ldv_47655;
  ldv_47655: 
#line 520 
  ;
  
#line 523 
  *(pba_num + (int)offset * 2) = (unsigned char)0U;
  
#line 525 
  __retres = 0;
  return_label: 
#line 525 
                return __retres;
}


#line 536  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
s32 e1000_read_mac_addr_generic(struct e1000_hw *hw)
{
  s32 __retres;
  u32 rar_high;
  u32 rar_low;
  u16 i;
  
#line 542 
  rar_high = __er32(hw,21508UL);
  
#line 543 
  rar_low = __er32(hw,21504UL);
  
#line 545 
  i = (unsigned short)0U;
  
#line 545 
  goto ldv_47663;
  ldv_47662: 
#line 546 
  ;
  
#line 546 
  hw->mac.perm_addr[(int)i] = (unsigned char)(rar_low >> (int)i * 8);
  
#line 545 
  i = (u16)((int)i + 1);
  ldv_47663: 
#line 546 
  ;
  
#line 545 
  if ((unsigned int)i <= 3U) 
#line 547 
                             goto ldv_47662; else 
#line 550 
                                                  goto ldv_47664;
  ldv_47664: 
#line 551 
  ;
  
#line 548 
  i = (unsigned short)0U;
  
#line 548 
  goto ldv_47666;
  ldv_47665: 
#line 549 
  ;
  
#line 549 
  hw->mac.perm_addr[(int)i + 4] = (unsigned char)(rar_high >> (int)i * 8);
  
#line 548 
  i = (u16)((int)i + 1);
  ldv_47666: 
#line 549 
  ;
  
#line 548 
  if ((unsigned int)i <= 1U) 
#line 550 
                             goto ldv_47665; else 
#line 553 
                                                  goto ldv_47667;
  ldv_47667: 
#line 554 
  ;
  
#line 551 
  i = (unsigned short)0U;
  
#line 551 
  goto ldv_47669;
  ldv_47668: 
#line 552 
  ;
  
#line 552 
  hw->mac.addr[(int)i] = hw->mac.perm_addr[(int)i];
  
#line 551 
  i = (u16)((int)i + 1);
  ldv_47669: 
#line 552 
  ;
  
#line 551 
  if ((unsigned int)i <= 5U) 
#line 553 
                             goto ldv_47668; else 
#line 556 
                                                  goto ldv_47670;
  ldv_47670: 
#line 557 
  ;
  
#line 554 
  __retres = 0;
  
#line 554 
  return __retres;
}


#line 564  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
s32 e1000e_validate_nvm_checksum_generic(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 i;
  u16 nvm_data;
  
#line 567 
  u16 checksum = (unsigned short)0U;
  
#line 570 
  i = (unsigned short)0U;
  
#line 570 
  goto ldv_47681;
  ldv_47680: 
#line 571 
  ;
  
#line 571 
  ret_val = e1000_read_nvm(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
  
#line 572 
  if (ret_val != 0) {
    {
      
#line 573 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_validate_nvm_checksum_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))573U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 573 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 573 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"NVM Read Error\n"); else ;
    }
    
#line 574 
    __retres = ret_val;
    
#line 574 
    goto return_label;
  }
  else ;
  
#line 576 
  checksum = (unsigned short)((int)checksum + (int)nvm_data);
  
#line 570 
  i = (u16)((int)i + 1);
  ldv_47681: 
#line 571 
  ;
  
#line 570 
  if ((unsigned int)i <= 63U) 
#line 572 
                              goto ldv_47680; else 
#line 575 
                                                   goto ldv_47682;
  ldv_47682: 
#line 576 
  ;
  
#line 579 
  if ((unsigned int)checksum != 47802U) {
    {
      
#line 580 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_validate_nvm_checksum_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "NVM Checksum Invalid\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))580U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 580 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 580 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"NVM Checksum Invalid\n"); else ;
    }
    
#line 581 
    __retres = -1;
    
#line 581 
    goto return_label;
  }
  else ;
  
#line 584 
  __retres = 0;
  return_label: 
#line 584 
                return __retres;
}


#line 595  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
s32 e1000e_update_nvm_checksum_generic(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 i;
  u16 nvm_data;
  
#line 598 
  u16 checksum = (unsigned short)0U;
  
#line 601 
  i = (unsigned short)0U;
  
#line 601 
  goto ldv_47694;
  ldv_47693: 
#line 602 
  ;
  
#line 602 
  ret_val = e1000_read_nvm(hw,(unsigned short)((int)i),(unsigned short)1,& nvm_data);
  
#line 603 
  if (ret_val != 0) {
    {
      
#line 604 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_update_nvm_checksum_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "NVM Read Error while updating checksum.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))604U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 604 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 604 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"NVM Read Error while updating checksum.\n"); else ;
    }
    
#line 605 
    __retres = ret_val;
    
#line 605 
    goto return_label;
  }
  else ;
  
#line 607 
  checksum = (unsigned short)((int)checksum + (int)nvm_data);
  
#line 601 
  i = (u16)((int)i + 1);
  ldv_47694: 
#line 602 
  ;
  
#line 601 
  if ((unsigned int)i <= 62U) 
#line 603 
                              goto ldv_47693; else 
#line 606 
                                                   goto ldv_47695;
  ldv_47695: 
#line 607 
  ;
  
#line 609 
  checksum = (unsigned short)(47802U - (unsigned int)checksum);
  
#line 610 
  ret_val = e1000_write_nvm(hw,(unsigned short)63,(unsigned short)1,& checksum);
  
#line 611 
  if (ret_val != 0) {
    
#line 612 
    struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_update_nvm_checksum_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c", .format = "NVM Write Error while updating checksum.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))612U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 612 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 612 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"NVM Write Error while updating checksum.\n"); else ;
  }
  else ;
  
#line 614 
  __retres = ret_val;
  return_label: 
#line 614 
                return __retres;
}


#line 624  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.c"
void e1000e_reload_nvm_generic(struct e1000_hw *hw)
{
  u32 ctrl_ext;
  
#line 628 
  usleep_range(10UL,20UL);
  
#line 629 
  ctrl_ext = __er32(hw,24UL);
  
#line 630 
  ctrl_ext |= 8192U;
  
#line 631 
  __ew32(hw,24UL,ctrl_ext);
  
#line 632 
  __er32(hw,8UL);
  
#line 633 
  return;
}


#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_82571.c.aux"
static void ldv_mutex_lock_72_0(struct mutex *ldv_func_arg1);


#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
static void ldv_mutex_unlock_73_0(struct mutex *ldv_func_arg1);


#line 197 
static void ldv_mutex_unlock_74(struct mutex *ldv_func_arg1);


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.h"
s32 e1000e_check_for_copper_link(struct e1000_hw *hw);


#line 27 
s32 e1000e_check_for_fiber_link(struct e1000_hw *hw);


#line 29 
s32 e1000e_cleanup_led_generic(struct e1000_hw *hw);


#line 39 
s32 e1000e_get_speed_and_duplex_fiber_serdes(struct e1000_hw *hw, u16 *speed, u16 *duplex);


#line 42 
s32 e1000e_led_on_generic(struct e1000_hw *hw);


#line 43 
s32 e1000e_led_off_generic(struct e1000_hw *hw);


#line 47 
s32 e1000e_setup_fiber_serdes_link(struct e1000_hw *hw);


#line 49 
s32 e1000e_setup_link_generic(struct e1000_hw *hw);


#line 57 
s32 e1000_check_alt_mac_addr_generic(struct e1000_hw *hw);


#line 61 
void e1000_write_vfta_generic(struct e1000_hw *hw, u32 offset, u32 value);


#line 63 
void e1000_set_lan_id_multi_port_pcie(struct e1000_hw *hw);


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.h"
s32 e1000e_check_reset_block_generic(struct e1000_hw *hw);


#line 51 
s32 e1000e_read_phy_reg_m88(struct e1000_hw *hw, u32 offset, u16 *data);


#line 52 
s32 e1000e_set_d3_lplu_state(struct e1000_hw *hw, bool active);


#line 58 
s32 e1000e_write_phy_reg_m88(struct e1000_hw *hw, u32 offset, u16 data);


#line 68 
s32 e1000e_read_phy_reg_bm2(struct e1000_hw *hw, u32 offset, u16 *data);


#line 69 
s32 e1000e_write_phy_reg_bm2(struct e1000_hw *hw, u32 offset, u16 data);


#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.h"
bool e1000_check_phy_82574(struct e1000_hw *hw);


#line 50 
bool e1000e_get_laa_state_82571(struct e1000_hw *hw);


#line 51 
void e1000e_set_laa_state_82571(struct e1000_hw *hw, bool state);


#line 502  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
struct e1000_info const e1000_82571_info;


#line 503 
struct e1000_info const e1000_82572_info;


#line 504 
struct e1000_info const e1000_82573_info;


#line 505 
struct e1000_info const e1000_82574_info;


#line 506 
struct e1000_info const e1000_82583_info;


#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_get_phy_id_82571(struct e1000_hw *hw);


#line 41 
static s32 e1000_setup_copper_link_82571(struct e1000_hw *hw);


#line 42 
static s32 e1000_setup_fiber_serdes_link_82571(struct e1000_hw *hw);


#line 43 
static s32 e1000_check_for_serdes_link_82571(struct e1000_hw *hw);


#line 44 
static s32 e1000_write_nvm_eewr_82571(struct e1000_hw *hw, u16 offset, u16 words, u16 *data);


#line 46 
static s32 e1000_fix_nvm_checksum_82571(struct e1000_hw *hw);


#line 47 
static void e1000_initialize_hw_bits_82571(struct e1000_hw *hw);


#line 48 
static void e1000_clear_hw_cntrs_82571(struct e1000_hw *hw);


#line 49 
static bool e1000_check_mng_mode_82574(struct e1000_hw *hw);


#line 50 
static s32 e1000_led_on_82574(struct e1000_hw *hw);


#line 51 
static void e1000_put_hw_semaphore_82571(struct e1000_hw *hw);


#line 52 
static void e1000_power_down_phy_copper_82571(struct e1000_hw *hw);


#line 53 
static void e1000_put_hw_semaphore_82573(struct e1000_hw *hw);


#line 54 
static s32 e1000_get_hw_semaphore_82574(struct e1000_hw *hw);


#line 55 
static void e1000_put_hw_semaphore_82574(struct e1000_hw *hw);


#line 56 
static s32 e1000_set_d0_lplu_state_82574(struct e1000_hw *hw, bool active);


#line 57 
static s32 e1000_set_d3_lplu_state_82574(struct e1000_hw *hw, bool active);


#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_init_phy_params_82571(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  
#line 65 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 68 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) {
    
#line 69 
    phy->type = e1000_phy_none;
    
#line 70 
    __retres = 0;
    
#line 70 
    goto return_label;
  }
  else ;
  
#line 73 
  phy->addr = 1U;
  
#line 74 
  phy->autoneg_mask = (unsigned short)47U;
  
#line 75 
  phy->reset_delay_us = 100U;
  
#line 77 
  phy->ops.power_up = & e1000_power_up_phy_copper;
  
#line 78 
  phy->ops.power_down = & e1000_power_down_phy_copper_82571;
  
#line 80 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)0: 
#line 81 
    ;
    case (unsigned int)1: 
#line 82 
    ;
    
#line 83 
    phy->type = e1000_phy_igp_2;
    
#line 84 
    goto ldv_47580;
    case (unsigned int)2: 
#line 85 
    ;
    
#line 86 
    phy->type = e1000_phy_m88;
    
#line 87 
    goto ldv_47580;
    case (unsigned int)3: 
#line 88 
    ;
    case (unsigned int)4: 
#line 89 
    ;
    
#line 90 
    phy->type = e1000_phy_bm;
    
#line 91 
    phy->ops.acquire = & e1000_get_hw_semaphore_82574;
    
#line 92 
    phy->ops.release = & e1000_put_hw_semaphore_82574;
    
#line 93 
    phy->ops.set_d0_lplu_state = & e1000_set_d0_lplu_state_82574;
    
#line 94 
    phy->ops.set_d3_lplu_state = & e1000_set_d3_lplu_state_82574;
    
#line 95 
    goto ldv_47580;
    default: 
#line 96 
    ;
    
#line 97 
    __retres = -2;
    
#line 97 
    goto return_label;
  }
  ldv_47580: 
#line 101 
  ;
  
#line 101 
  ret_val = e1000_get_phy_id_82571(hw);
  
#line 102 
  if (ret_val != 0) {
    {
      
#line 103 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_init_phy_params_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "Error getting PHY ID\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))103U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 103 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 103 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Error getting PHY ID\n"); else ;
    }
    
#line 104 
    __retres = ret_val;
    
#line 104 
    goto return_label;
  }
  else ;
  
#line 108 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)0: 
#line 109 
    ;
    case (unsigned int)1: 
#line 110 
    ;
    
#line 111 
    if (phy->id != 44565376U) 
#line 112 
                              ret_val = -2; else ;
    
#line 113 
    goto ldv_47589;
    case (unsigned int)2: 
#line 114 
    ;
    
#line 115 
    if (phy->id != 21040320U) 
#line 116 
                              ret_val = -2; else ;
    
#line 117 
    goto ldv_47589;
    case (unsigned int)3: 
#line 118 
    ;
    case (unsigned int)4: 
#line 119 
    ;
    
#line 120 
    if (phy->id != 21040305U) 
#line 121 
                              ret_val = -2; else ;
    
#line 122 
    goto ldv_47589;
    default: 
#line 123 
    ;
    
#line 124 
    ret_val = -2;
    
#line 125 
    goto ldv_47589;
  }
  ldv_47589: 
#line 128 
  ;
  
#line 128 
  if (ret_val != 0) {
    
#line 129 
    struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_init_phy_params_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "PHY ID unknown: type = 0x%08x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))129U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 129 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 129 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"PHY ID unknown: type = 0x%08x\n",phy->id); else ;
  }
  else ;
  
#line 131 
  __retres = ret_val;
  return_label: 
#line 131 
                return __retres;
}


#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_init_nvm_params_82571(struct e1000_hw *hw)
{
  s32 __retres;
  u16 size;
  
#line 140 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 141 
  u32 eecd = __er32(hw,16UL);
  
#line 144 
  nvm->opcode_bits = (unsigned short)8U;
  
#line 145 
  nvm->delay_usec = (unsigned short)1U;
  
#line 146 
  switch ((unsigned int)nvm->override) {
    case (unsigned int)2: 
#line 147 
    ;
    
#line 148 
    nvm->page_size = (unsigned short)32U;
    
#line 149 
    nvm->address_bits = (unsigned short)16U;
    
#line 150 
    goto ldv_47602;
    case (unsigned int)1: 
#line 151 
    ;
    
#line 152 
    nvm->page_size = (unsigned short)8U;
    
#line 153 
    nvm->address_bits = (unsigned short)8U;
    
#line 154 
    goto ldv_47602;
    default: 
#line 155 
    ;
    
#line 156 
    if ((eecd & 1024U) != 0U) 
#line 156 
                              nvm->page_size = (unsigned short)32U; else 
                                                                    
#line 156 
                                                                    nvm->page_size = (unsigned short)8U;
    
#line 157 
    if ((eecd & 1024U) != 0U) 
#line 157 
                              nvm->address_bits = (unsigned short)16U; else 
                                                                    
#line 157 
                                                                    nvm->address_bits = (unsigned short)8U;
    
#line 158 
    goto ldv_47602;
  }
  ldv_47602: 
#line 161 
  ;
  
#line 161 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 162 
    ;
    case (unsigned int)3: 
#line 163 
    ;
    case (unsigned int)4: 
#line 164 
    ;
    
#line 165 
    if (((eecd >> 15) & 3U) == 3U) {
      
#line 166 
      nvm->type = e1000_nvm_flash_hw;
      
#line 167 
      nvm->word_size = (unsigned short)2048U;
      
#line 171 
      eecd &= 4293918719U;
      
#line 172 
      __ew32(hw,16UL,eecd);
      
#line 173 
      goto ldv_47608;
    }
    else ;
    default: 
#line 176 
    ;
    
#line 177 
    nvm->type = e1000_nvm_eeprom_spi;
    
#line 178 
    size = (unsigned short)((unsigned int)((unsigned short)(eecd >> 11)) & 15U);
    
#line 183 
    size = (unsigned short)((unsigned int)size + 6U);
    
#line 186 
    if ((unsigned int)size > 14U) 
#line 187 
                                  size = (unsigned short)14U; else ;
    
#line 188 
    nvm->word_size = (unsigned short)(1 << (int)size);
    
#line 189 
    goto ldv_47608;
  }
  ldv_47608: 
#line 193 
  ;
  
#line 193 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)3: 
#line 194 
    ;
    case (unsigned int)4: 
#line 195 
    ;
    
#line 196 
    nvm->ops.acquire = & e1000_get_hw_semaphore_82574;
    
#line 197 
    nvm->ops.release = & e1000_put_hw_semaphore_82574;
    
#line 198 
    goto ldv_47612;
    default: 
#line 199 
    ;
    
#line 200 
    goto ldv_47612;
  }
  ldv_47612: 
#line 203 
  ;
  
#line 203 
  __retres = 0;
  
#line 203 
  return __retres;
}


#line 210  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_init_mac_params_82571(struct e1000_hw *hw)
{
  s32 __retres;
  
#line 212 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 213 
  u32 swsm = 0U;
  
#line 214 
  u32 swsm2 = 0U;
  
#line 215 
  bool force_clear_smbi = (_Bool)0;
  
#line 218 
  switch ((int)((hw->adapter)->pdev)->device) {
    case 4191: 
#line 219 
    ;
    case 4222: 
#line 220 
    ;
    case 4261: 
#line 221 
    ;
    
#line 222 
    hw->phy.media_type = e1000_media_type_fiber;
    
#line 223 
    mac->ops.setup_physical_interface = & e1000_setup_fiber_serdes_link_82571;
    
#line 225 
    mac->ops.check_for_link = & e1000e_check_for_fiber_link;
    
#line 226 
    mac->ops.get_link_up_info = & e1000e_get_speed_and_duplex_fiber_serdes;
    
#line 228 
    goto ldv_47624;
    case 4192: 
#line 229 
    ;
    case 4313: 
#line 230 
    ;
    case 4314: 
#line 231 
    ;
    case 4223: 
#line 232 
    ;
    
#line 233 
    hw->phy.media_type = e1000_media_type_internal_serdes;
    
#line 234 
    mac->ops.setup_physical_interface = & e1000_setup_fiber_serdes_link_82571;
    
#line 236 
    mac->ops.check_for_link = & e1000_check_for_serdes_link_82571;
    
#line 237 
    mac->ops.get_link_up_info = & e1000e_get_speed_and_duplex_fiber_serdes;
    
#line 239 
    goto ldv_47624;
    default: 
#line 240 
    ;
    
#line 241 
    hw->phy.media_type = e1000_media_type_copper;
    
#line 242 
    mac->ops.setup_physical_interface = & e1000_setup_copper_link_82571;
    
#line 244 
    mac->ops.check_for_link = & e1000e_check_for_copper_link;
    
#line 245 
    mac->ops.get_link_up_info = & e1000e_get_speed_and_duplex_copper;
    
#line 246 
    goto ldv_47624;
  }
  ldv_47624: 
#line 250 
  ;
  
#line 250 
  mac->mta_reg_count = (unsigned short)128U;
  
#line 252 
  mac->rar_entry_count = (unsigned short)15U;
  
#line 254 
  mac->adaptive_ifs = (_Bool)1;
  
#line 257 
  switch ((unsigned int)hw->mac.type) {
    u32 tmp;
    case (unsigned int)2: 
#line 258 
    ;
    
#line 259 
    mac->ops.set_lan_id = & e1000_set_lan_id_single_port;
    
#line 260 
    mac->ops.check_mng_mode = & e1000e_check_mng_mode_generic;
    
#line 261 
    mac->ops.led_on = & e1000e_led_on_generic;
    
#line 262 
    mac->ops.blink_led = & e1000e_blink_led_generic;
    
#line 265 
    mac->has_fwsm = (_Bool)1;
    
#line 269 
    tmp = __er32(hw,23380UL);
    
#line 269 
    mac->arc_subsystem_valid = (_Bool)((tmp & 14U) != 0U);
    
#line 271 
    goto ldv_47631;
    case (unsigned int)3: 
#line 272 
    ;
    case (unsigned int)4: 
#line 273 
    ;
    
#line 274 
    mac->ops.set_lan_id = & e1000_set_lan_id_single_port;
    
#line 275 
    mac->ops.check_mng_mode = & e1000_check_mng_mode_82574;
    
#line 276 
    mac->ops.led_on = & e1000_led_on_82574;
    
#line 277 
    goto ldv_47631;
    default: 
#line 278 
    ;
    
#line 279 
    mac->ops.check_mng_mode = & e1000e_check_mng_mode_generic;
    
#line 280 
    mac->ops.led_on = & e1000e_led_on_generic;
    
#line 281 
    mac->ops.blink_led = & e1000e_blink_led_generic;
    
#line 284 
    mac->has_fwsm = (_Bool)1;
    
#line 285 
    goto ldv_47631;
  }
  ldv_47631: 
#line 294 
  ;
  
#line 294 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)0: 
#line 295 
    ;
    case (unsigned int)1: 
#line 296 
    ;
    
#line 297 
    swsm2 = __er32(hw,23384UL);
    
#line 299 
    if ((swsm2 & 2U) == 0U) {
      
#line 301 
      __ew32(hw,23384UL,swsm2 | 2U);
      
#line 302 
      force_clear_smbi = (_Bool)1;
    }
    else 
#line 304 
         force_clear_smbi = (_Bool)0;
    
#line 306 
    goto ldv_47637;
    default: 
#line 307 
    ;
    
#line 308 
    force_clear_smbi = (_Bool)1;
    
#line 309 
    goto ldv_47637;
  }
  ldv_47637: 
#line 312 
  ;
  
#line 312 
  if ((int)force_clear_smbi != 0) {
    
#line 314 
    swsm = __er32(hw,23376UL);
    
#line 315 
    if ((swsm & 1U) != 0U) {
      
#line 320 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_init_mac_params_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "Please update your 82571 Bootagent\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))320U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 320 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 320 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Please update your 82571 Bootagent\n"); else ;
    }
    else ;
    
#line 322 
    __ew32(hw,23376UL,swsm & 4294967294U);
  }
  else ;
  
#line 326 
  hw->dev_spec.e82571.smb_counter = 0U;
  
#line 328 
  __retres = 0;
  
#line 328 
  return __retres;
}


#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_get_variants_82571(struct e1000_adapter *adapter)
{
  s32 __retres;
  int global_quad_port_a;
  u32 tmp;
  s32 rc;
  
#line 333 
  struct e1000_hw *hw = & adapter->hw;
  
#line 335 
  struct pci_dev *pdev = adapter->pdev;
  
#line 336 
  tmp = __er32(hw,8UL);
  
#line 336 
  int is_port_b = (int)tmp & 4;
  
#line 339 
  rc = e1000_init_mac_params_82571(hw);
  
#line 340 
  if (rc != 0) {
    
#line 341 
    __retres = rc;
    
#line 341 
    goto return_label;
  }
  else ;
  
#line 343 
  rc = e1000_init_nvm_params_82571(hw);
  
#line 344 
  if (rc != 0) {
    
#line 345 
    __retres = rc;
    
#line 345 
    goto return_label;
  }
  else ;
  
#line 347 
  rc = e1000_init_phy_params_82571(hw);
  
#line 348 
  if (rc != 0) {
    
#line 349 
    __retres = rc;
    
#line 349 
    goto return_label;
  }
  else ;
  
#line 352 
  switch ((int)pdev->device) {
    case 4260: 
#line 353 
    ;
    case 4261: 
#line 354 
    ;
    case 4284: 
#line 355 
    ;
    case 4309: 
#line 356 
    ;
    
#line 357 
    adapter->flags |= 8192U;
    
#line 359 
    if (global_quad_port_a == 0) 
#line 360 
                                 adapter->flags |= 4096U; else ;
    
#line 362 
    global_quad_port_a += 1;
    
#line 363 
    if (global_quad_port_a == 4) 
#line 364 
                                 global_quad_port_a = 0; else ;
    
#line 365 
    goto ldv_47653;
    default: 
#line 366 
    ;
    
#line 367 
    goto ldv_47653;
  }
  ldv_47653: 
#line 370 
  ;
  
#line 370 
  switch ((unsigned int)adapter->hw.mac.type) {
    case (unsigned int)0: 
#line 371 
    ;
    
#line 373 
    if ((unsigned int)pdev->device + 61346U <= 2U && is_port_b != 0) 
      
#line 377 
      adapter->flags &= 4294967287U; else ;
    
#line 379 
    if ((adapter->flags & 8192U) != 0U && (adapter->flags & 4096U) == 0U) 
      
#line 381 
      adapter->flags &= 4294967287U; else ;
    
#line 383 
    if ((unsigned int)pdev->device == 4314U) 
#line 384 
                                             adapter->flags &= 4294967287U; else ;
    
#line 385 
    goto ldv_47656;
    case (unsigned int)2: 
#line 386 
    ;
    
#line 387 
    if ((unsigned int)pdev->device == 4250U) {
      
#line 388 
      adapter->flags |= 128U;
      
#line 389 
      adapter->max_hw_frame_size = 9234U;
    }
    else ;
    
#line 391 
    goto ldv_47656;
    default: 
#line 392 
    ;
    
#line 393 
    goto ldv_47656;
  }
  ldv_47656: 
#line 396 
  ;
  
#line 396 
  __retres = 0;
  return_label: 
#line 396 
                return __retres;
}


#line 406  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_get_phy_id_82571(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  
#line 408 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 410 
  u16 phy_id = (unsigned short)0U;
  
#line 412 
  switch ((unsigned int)hw->mac.type) {
    s32 tmp;
    case (unsigned int)0: 
#line 413 
    ;
    case (unsigned int)1: 
#line 414 
    ;
    
#line 420 
    phy->id = 44565376U;
    
#line 421 
    goto ldv_47667;
    case (unsigned int)2: 
#line 422 
    ;
    
#line 423 
    tmp = e1000e_get_phy_id(hw);
    
#line 423 
    __retres = tmp;
    
#line 423 
    goto return_label;
    case (unsigned int)3: 
#line 424 
    ;
    case (unsigned int)4: 
#line 425 
    ;
    
#line 426 
    ret_val = e1e_rphy(hw,2U,& phy_id);
    
#line 427 
    if (ret_val != 0) {
      
#line 428 
      __retres = ret_val;
      
#line 428 
      goto return_label;
    }
    else ;
    
#line 430 
    phy->id = (unsigned int)((int)phy_id << 16);
    
#line 431 
    usleep_range(20UL,40UL);
    
#line 432 
    ret_val = e1e_rphy(hw,3U,& phy_id);
    
#line 433 
    if (ret_val != 0) {
      
#line 434 
      __retres = ret_val;
      
#line 434 
      goto return_label;
    }
    else ;
    
#line 436 
    phy->id |= (unsigned int)phy_id;
    
#line 437 
    phy->revision = (unsigned int)phy_id & 15U;
    
#line 438 
    goto ldv_47667;
    default: 
#line 439 
    ;
    
#line 440 
    __retres = -2;
    
#line 440 
    goto return_label;
  }
  ldv_47667: 
#line 443 
  ;
  
#line 443 
  __retres = 0;
  return_label: 
#line 443 
                return __retres;
}


#line 452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_get_hw_semaphore_82571(struct e1000_hw *hw)
{
  s32 __retres;
  u32 swsm;
  u32 tmp;
  
#line 455 
  s32 sw_timeout = (int)hw->nvm.word_size + 1;
  
#line 456 
  s32 fw_timeout = (int)hw->nvm.word_size + 1;
  
#line 457 
  s32 i = 0;
  
#line 466 
  if (hw->dev_spec.e82571.smb_counter > 2U) 
#line 467 
                                            sw_timeout = 1; else ;
  
#line 470 
  goto ldv_47681;
  ldv_47680: 
#line 471 
  ;
  
#line 471 
  swsm = __er32(hw,23376UL);
  
#line 472 
  if ((swsm & 1U) == 0U) 
#line 473 
                         goto ldv_47679; else ;
  
#line 475 
  usleep_range(50UL,100UL);
  
#line 476 
  i += 1;
  ldv_47681: 
#line 477 
  ;
  
#line 470 
  if (i < sw_timeout) 
#line 472 
                      goto ldv_47680; else 
#line 475 
                                           goto ldv_47679;
  ldv_47679: 
#line 476 
  ;
  
#line 479 
  if (i == sw_timeout) {
    {
      
#line 480 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_get_hw_semaphore_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "Driver can\'t access device - SMBI bit is set.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))480U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 480 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 480 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Driver can\'t access device - SMBI bit is set.\n"); else ;
    }
    
#line 481 
    hw->dev_spec.e82571.smb_counter += 1U;
  }
  else ;
  
#line 484 
  i = 0;
  
#line 484 
  goto ldv_47686;
  ldv_47685: 
#line 485 
  ;
  
#line 485 
  swsm = __er32(hw,23376UL);
  
#line 486 
  __ew32(hw,23376UL,swsm | 2U);
  
#line 489 
  tmp = __er32(hw,23376UL);
  
#line 489 
  if ((tmp & 2U) != 0U) 
#line 490 
                        goto ldv_47684; else ;
  
#line 492 
  usleep_range(50UL,100UL);
  
#line 484 
  i += 1;
  ldv_47686: 
#line 485 
  ;
  
#line 484 
  if (i < fw_timeout) 
#line 486 
                      goto ldv_47685; else 
#line 489 
                                           goto ldv_47684;
  ldv_47684: 
#line 490 
  ;
  
#line 495 
  if (i == fw_timeout) {
    
#line 497 
    e1000_put_hw_semaphore_82571(hw);
    {
      
#line 498 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_get_hw_semaphore_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "Driver can\'t access the NVM\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))498U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 498 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 498 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Driver can\'t access the NVM\n"); else ;
    }
    
#line 499 
    __retres = -1;
    
#line 499 
    goto return_label;
  }
  else ;
  
#line 502 
  __retres = 0;
  return_label: 
#line 502 
                return __retres;
}


#line 511  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static void e1000_put_hw_semaphore_82571(struct e1000_hw *hw)
{
  u32 swsm;
  
#line 515 
  swsm = __er32(hw,23376UL);
  
#line 516 
  swsm &= 4294967292U;
  
#line 517 
  __ew32(hw,23376UL,swsm);
  
#line 518 
  return;
}


#line 527  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_get_hw_semaphore_82573(struct e1000_hw *hw)
{
  s32 __retres;
  u32 extcnf_ctrl;
  
#line 530 
  s32 i = 0;
  
#line 532 
  extcnf_ctrl = __er32(hw,3840UL);
  ldv_47698: 
#line 533 
  ;
  
#line 534 
  extcnf_ctrl |= 32U;
  
#line 535 
  __ew32(hw,3840UL,extcnf_ctrl);
  
#line 536 
  extcnf_ctrl = __er32(hw,3840UL);
  
#line 538 
  if ((extcnf_ctrl & 32U) != 0U) 
#line 539 
                                 goto ldv_47697; else ;
  
#line 541 
  usleep_range(2000UL,4000UL);
  
#line 542 
  i += 1;
  
#line 543 
  if (i <= 9) 
#line 545 
              goto ldv_47698; else 
#line 548 
                                   goto ldv_47697;
  ldv_47697: 
#line 549 
  ;
  
#line 545 
  if (i == 10) {
    
#line 547 
    e1000_put_hw_semaphore_82573(hw);
    {
      
#line 548 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_get_hw_semaphore_82573", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "Driver can\'t access the PHY\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))548U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 548 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 548 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Driver can\'t access the PHY\n"); else ;
    }
    
#line 549 
    __retres = -2;
    
#line 549 
    goto return_label;
  }
  else ;
  
#line 552 
  __retres = 0;
  return_label: 
#line 552 
                return __retres;
}


#line 562  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static void e1000_put_hw_semaphore_82573(struct e1000_hw *hw)
{
  u32 extcnf_ctrl;
  
#line 566 
  extcnf_ctrl = __er32(hw,3840UL);
  
#line 567 
  extcnf_ctrl &= 4294967263U;
  
#line 568 
  __ew32(hw,3840UL,extcnf_ctrl);
  
#line 569 
  return;
}


#line 571  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static struct mutex swflag_mutex = {.count = {.counter = 1}, .wait_lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "swflag_mutex.wait_lock", .cpu = 0, .ip = 0UL}}}}, .wait_list = {.next = & swflag_mutex.wait_list, .prev = & swflag_mutex.wait_list}, .owner = (struct task_struct *)0, .magic = (void *)(& swflag_mutex), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "swflag_mutex", .cpu = 0, .ip = 0UL}};

#line 580  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_get_hw_semaphore_82574(struct e1000_hw *hw)
{
  s32 ret_val;
  
#line 584 
  ldv_mutex_lock_72_0(& swflag_mutex);
  
#line 585 
  ret_val = e1000_get_hw_semaphore_82573(hw);
  
#line 586 
  if (ret_val != 0) 
#line 587 
                    ldv_mutex_unlock_73_0(& swflag_mutex); else ;
  
#line 588 
  return ret_val;
}


#line 598  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static void e1000_put_hw_semaphore_82574(struct e1000_hw *hw)
{
  
#line 600 
  e1000_put_hw_semaphore_82573(hw);
  
#line 601 
  ldv_mutex_unlock_74(& swflag_mutex);
  
#line 602 
  return;
}


#line 616  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_set_d0_lplu_state_82574(struct e1000_hw *hw, bool active)
{
  s32 __retres;
  
#line 618 
  u32 data = __er32(hw,3856UL);
  
#line 620 
  if ((int)active != 0) 
#line 621 
                        data |= 2U; else 
#line 623 
                                         data &= 4294967293U;
  
#line 625 
  __ew32(hw,3856UL,data);
  
#line 626 
  __retres = 0;
  
#line 626 
  return __retres;
}


#line 640  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_set_d3_lplu_state_82574(struct e1000_hw *hw, bool active)
{
  s32 __retres;
  
#line 642 
  u32 data = __er32(hw,3856UL);
  
#line 644 
  if (! active) 
#line 645 
                data &= 4294967291U;
  else 
    
#line 646 
    if (((unsigned int)hw->phy.autoneg_advertised == 47U || (unsigned int)hw->phy.autoneg_advertised == 15U) || (unsigned int)hw->phy.autoneg_advertised == 3U) 
      
#line 649 
      data |= 4U; else ;
  
#line 652 
  __ew32(hw,3856UL,data);
  
#line 653 
  __retres = 0;
  
#line 653 
  return __retres;
}


#line 665  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_acquire_nvm_82571(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  
#line 669 
  ret_val = e1000_get_hw_semaphore_82571(hw);
  
#line 670 
  if (ret_val != 0) {
    
#line 671 
    __retres = ret_val;
    
#line 671 
    goto return_label;
  }
  else ;
  
#line 673 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 674 
    ;
    
#line 675 
    goto ldv_47729;
    default: 
#line 676 
    ;
    
#line 677 
    ret_val = e1000e_acquire_nvm(hw);
    
#line 678 
    goto ldv_47729;
  }
  ldv_47729: 
#line 681 
  ;
  
#line 681 
  if (ret_val != 0) 
#line 682 
                    e1000_put_hw_semaphore_82571(hw); else ;
  
#line 684 
  __retres = ret_val;
  return_label: 
#line 684 
                return __retres;
}


#line 693  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static void e1000_release_nvm_82571(struct e1000_hw *hw)
{
  
#line 695 
  e1000e_release_nvm(hw);
  
#line 696 
  e1000_put_hw_semaphore_82571(hw);
  
#line 697 
  return;
}


#line 711  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_write_nvm_82571(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 ret_val;
  
#line 716 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 717 
    ;
    case (unsigned int)3: 
#line 718 
    ;
    case (unsigned int)4: 
#line 719 
    ;
    
#line 720 
    ret_val = e1000_write_nvm_eewr_82571(hw,(unsigned short)((int)offset),(unsigned short)((int)words),data);
    
#line 721 
    goto ldv_47744;
    case (unsigned int)0: 
#line 722 
    ;
    case (unsigned int)1: 
#line 723 
    ;
    
#line 724 
    ret_val = e1000e_write_nvm_spi(hw,(unsigned short)((int)offset),(unsigned short)((int)words),data);
    
#line 725 
    goto ldv_47744;
    default: 
#line 726 
    ;
    
#line 727 
    ret_val = -1;
    
#line 728 
    goto ldv_47744;
  }
  ldv_47744: 
#line 731 
  ;
  
#line 731 
  return ret_val;
}


#line 742  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_update_nvm_checksum_82571(struct e1000_hw *hw)
{
  s32 __retres;
  u32 eecd;
  s32 ret_val;
  u16 i;
  u32 tmp;
  u32 tmp_0;
  u32 tmp_1;
  u32 tmp_2;
  
#line 748 
  ret_val = e1000e_update_nvm_checksum_generic(hw);
  
#line 749 
  if (ret_val != 0) {
    
#line 750 
    __retres = ret_val;
    
#line 750 
    goto return_label;
  }
  else ;
  
#line 755 
  if (hw->nvm.type != (unsigned int)e1000_nvm_flash_hw) {
    
#line 756 
    __retres = 0;
    
#line 756 
    goto return_label;
  }
  else ;
  
#line 759 
  i = (unsigned short)0U;
  
#line 759 
  goto ldv_47756;
  ldv_47755: 
#line 760 
  ;
  
#line 760 
  usleep_range(1000UL,2000UL);
  
#line 761 
  tmp = __er32(hw,16UL);
  
#line 761 
  if ((tmp & 524288U) == 0U) 
#line 762 
                             goto ldv_47754; else ;
  
#line 759 
  i = (u16)((int)i + 1);
  ldv_47756: 
#line 760 
  ;
  
#line 759 
  if ((unsigned int)i <= 1999U) 
#line 761 
                                goto ldv_47755; else 
#line 764 
                                                     goto ldv_47754;
  ldv_47754: 
#line 765 
  ;
  
#line 765 
  if ((unsigned int)i == 2000U) {
    
#line 766 
    __retres = -1;
    
#line 766 
    goto return_label;
  }
  else ;
  
#line 769 
  tmp_0 = __er32(hw,4156UL);
  
#line 769 
  if ((tmp_0 & 65280U) == 56064U) {
    
#line 773 
    __ew32(hw,36608UL,64U);
    
#line 774 
    __er32(hw,8UL);
    
#line 775 
    __ew32(hw,36608UL,128U);
  }
  else ;
  
#line 779 
  tmp_1 = __er32(hw,16UL);
  
#line 779 
  eecd = tmp_1 | 524288U;
  
#line 780 
  __ew32(hw,16UL,eecd);
  
#line 782 
  i = (unsigned short)0U;
  
#line 782 
  goto ldv_47759;
  ldv_47758: 
#line 783 
  ;
  
#line 783 
  usleep_range(1000UL,2000UL);
  
#line 784 
  tmp_2 = __er32(hw,16UL);
  
#line 784 
  if ((tmp_2 & 524288U) == 0U) 
#line 785 
                               goto ldv_47757; else ;
  
#line 782 
  i = (u16)((int)i + 1);
  ldv_47759: 
#line 783 
  ;
  
#line 782 
  if ((unsigned int)i <= 1999U) 
#line 784 
                                goto ldv_47758; else 
#line 787 
                                                     goto ldv_47757;
  ldv_47757: 
#line 788 
  ;
  
#line 788 
  if ((unsigned int)i == 2000U) {
    
#line 789 
    __retres = -1;
    
#line 789 
    goto return_label;
  }
  else ;
  
#line 791 
  __retres = 0;
  return_label: 
#line 791 
                return __retres;
}


#line 801  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_validate_nvm_checksum_82571(struct e1000_hw *hw)
{
  s32 tmp;
  
#line 803 
  if (hw->nvm.type == (unsigned int)e1000_nvm_flash_hw) 
#line 804 
                                                        e1000_fix_nvm_checksum_82571(hw); else ;
  
#line 806 
  tmp = e1000e_validate_nvm_checksum_generic(hw);
  
#line 806 
  return tmp;
}


#line 823  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_write_nvm_eewr_82571(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 __retres;
  u32 i;
  
#line 826 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 827 
  u32 eewr = 0U;
  
#line 828 
  s32 ret_val = 0;
  
#line 833 
  if (((int)nvm->word_size <= (int)offset || (int)words > (int)nvm->word_size - (int)offset) || (unsigned int)words == 0U) {
    {
      
#line 835 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_write_nvm_eewr_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "nvm parameter(s) out of bounds\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))835U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 835 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 835 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"nvm parameter(s) out of bounds\n"); else ;
    }
    
#line 836 
    __retres = -1;
    
#line 836 
    goto return_label;
  }
  else ;
  
#line 839 
  i = 0U;
  
#line 839 
  goto ldv_47777;
  ldv_47776: 
#line 840 
  ;
  
#line 840 
  eewr = ((unsigned int)((int)*(data + i) << 16) | (((unsigned int)offset + i) << 2)) | 1U;
  
#line 844 
  ret_val = e1000e_poll_eerd_eewr_done(hw,1);
  
#line 845 
  if (ret_val != 0) 
#line 846 
                    goto ldv_47775; else ;
  
#line 848 
  __ew32(hw,4140UL,eewr);
  
#line 850 
  ret_val = e1000e_poll_eerd_eewr_done(hw,1);
  
#line 851 
  if (ret_val != 0) 
#line 852 
                    goto ldv_47775; else ;
  
#line 839 
  i += 1U;
  ldv_47777: 
#line 840 
  ;
  
#line 839 
  if ((unsigned int)words > i) 
#line 841 
                               goto ldv_47776; else 
#line 844 
                                                    goto ldv_47775;
  ldv_47775: 
#line 845 
  ;
  
#line 855 
  __retres = ret_val;
  return_label: 
#line 855 
                return __retres;
}


#line 864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_get_cfg_done_82571(struct e1000_hw *hw)
{
  s32 __retres;
  u32 tmp;
  
#line 866 
  s32 timeout = 100;
  
#line 868 
  goto ldv_47784;
  ldv_47783: 
#line 869 
  ;
  
#line 869 
  tmp = __er32(hw,4112UL);
  
#line 869 
  if ((tmp & 262144U) != 0U) 
#line 870 
                             goto ldv_47782; else ;
  
#line 871 
  usleep_range(1000UL,2000UL);
  
#line 872 
  timeout -= 1;
  ldv_47784: 
#line 873 
  ;
  
#line 868 
  if (timeout != 0) 
#line 870 
                    goto ldv_47783; else 
#line 873 
                                         goto ldv_47782;
  ldv_47782: 
#line 874 
  ;
  
#line 874 
  if (timeout == 0) {
    {
      
#line 875 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_get_cfg_done_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "MNG configuration cycle has not completed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))875U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 875 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 875 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"MNG configuration cycle has not completed.\n"); else ;
    }
    
#line 876 
    __retres = -9;
    
#line 876 
    goto return_label;
  }
  else ;
  
#line 879 
  __retres = 0;
  return_label: 
#line 879 
                return __retres;
}


#line 893  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_set_d0_lplu_state_82571(struct e1000_hw *hw, bool active)
{
  s32 __retres;
  s32 ret_val;
  u16 data;
  
#line 895 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 899 
  ret_val = e1e_rphy(hw,25U,& data);
  
#line 900 
  if (ret_val != 0) {
    
#line 901 
    __retres = ret_val;
    
#line 901 
    goto return_label;
  }
  else ;
  
#line 903 
  if ((int)active != 0) {
    
#line 904 
    data = (unsigned short)((unsigned int)data | 2U);
    
#line 905 
    ret_val = e1e_wphy(hw,25U,(unsigned short)((int)data));
    
#line 906 
    if (ret_val != 0) {
      
#line 907 
      __retres = ret_val;
      
#line 907 
      goto return_label;
    }
    else ;
    
#line 910 
    ret_val = e1e_rphy(hw,16U,& data);
    
#line 911 
    if (ret_val != 0) {
      
#line 912 
      __retres = ret_val;
      
#line 912 
      goto return_label;
    }
    else ;
    
#line 913 
    data = (unsigned short)((unsigned int)data & 65407U);
    
#line 914 
    ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
    
#line 915 
    if (ret_val != 0) {
      
#line 916 
      __retres = ret_val;
      
#line 916 
      goto return_label;
    }
    else ;
  }
  else {
    
#line 918 
    data = (unsigned short)((unsigned int)data & 65533U);
    
#line 919 
    ret_val = e1e_wphy(hw,25U,(unsigned short)((int)data));
    
#line 925 
    if (phy->smart_speed == (unsigned int)e1000_smart_speed_on) {
      
#line 926 
      ret_val = e1e_rphy(hw,16U,& data);
      
#line 928 
      if (ret_val != 0) {
        
#line 929 
        __retres = ret_val;
        
#line 929 
        goto return_label;
      }
      else ;
      
#line 931 
      data = (unsigned short)((unsigned int)data | 128U);
      
#line 932 
      ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
      
#line 934 
      if (ret_val != 0) {
        
#line 935 
        __retres = ret_val;
        
#line 935 
        goto return_label;
      }
      else ;
    }
    else 
      
#line 936 
      if (phy->smart_speed == (unsigned int)e1000_smart_speed_off) {
        
#line 937 
        ret_val = e1e_rphy(hw,16U,& data);
        
#line 939 
        if (ret_val != 0) {
          
#line 940 
          __retres = ret_val;
          
#line 940 
          goto return_label;
        }
        else ;
        
#line 942 
        data = (unsigned short)((unsigned int)data & 65407U);
        
#line 943 
        ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
        
#line 945 
        if (ret_val != 0) {
          
#line 946 
          __retres = ret_val;
          
#line 946 
          goto return_label;
        }
        else ;
      }
      else ;
  }
  
#line 950 
  __retres = 0;
  return_label: 
#line 950 
                return __retres;
}


#line 959  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_reset_hw_82571(struct e1000_hw *hw)
{
  s32 __retres;
  u32 ctrl;
  u32 ctrl_ext;
  u32 eecd;
  u32 tctl;
  s32 ret_val;
  
#line 967 
  ret_val = e1000e_disable_pcie_master(hw);
  
#line 968 
  if (ret_val != 0) {
    
#line 969 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_reset_hw_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "PCI-E Master disable polling has failed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))969U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 969 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 969 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"PCI-E Master disable polling has failed.\n"); else ;
  }
  else ;
  {
    
#line 971 
    struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_reset_hw_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "Masking off all interrupts\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))971U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 971 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 971 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Masking off all interrupts\n"); else ;
  }
  
#line 972 
  __ew32(hw,216UL,4294967295U);
  
#line 974 
  __ew32(hw,256UL,0U);
  
#line 975 
  tctl = __er32(hw,1024UL);
  
#line 976 
  tctl &= 4294967293U;
  
#line 977 
  __ew32(hw,1024UL,tctl);
  
#line 978 
  __er32(hw,8UL);
  
#line 980 
  usleep_range(10000UL,20000UL);
  
#line 985 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 986 
    ;
    
#line 987 
    ret_val = e1000_get_hw_semaphore_82573(hw);
    
#line 988 
    goto ldv_47806;
    case (unsigned int)3: 
#line 989 
    ;
    case (unsigned int)4: 
#line 990 
    ;
    
#line 991 
    ret_val = e1000_get_hw_semaphore_82574(hw);
    
#line 992 
    goto ldv_47806;
    default: 
#line 993 
    ;
    
#line 994 
    goto ldv_47806;
  }
  ldv_47806: 
#line 997 
  ;
  
#line 997 
  ctrl = __er32(hw,0UL);
  {
    
#line 999 
    struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_reset_hw_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "Issuing a global reset to MAC\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))999U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 999 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 999 
                                                          __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Issuing a global reset to MAC\n"); else ;
  }
  
#line 1000 
  __ew32(hw,0UL,ctrl | 67108864U);
  
#line 1003 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 1004 
    ;
    
#line 1006 
    if (ret_val == 0) 
#line 1007 
                      e1000_put_hw_semaphore_82573(hw); else ;
    
#line 1008 
    goto ldv_47812;
    case (unsigned int)3: 
#line 1009 
    ;
    case (unsigned int)4: 
#line 1010 
    ;
    
#line 1012 
    if (ret_val == 0) 
#line 1013 
                      e1000_put_hw_semaphore_82574(hw); else ;
    
#line 1014 
    goto ldv_47812;
    default: 
#line 1015 
    ;
    
#line 1016 
    goto ldv_47812;
  }
  ldv_47812: 
#line 1019 
  ;
  
#line 1019 
  if (hw->nvm.type == (unsigned int)e1000_nvm_flash_hw) {
    
#line 1020 
    usleep_range(10UL,20UL);
    
#line 1021 
    ctrl_ext = __er32(hw,24UL);
    
#line 1022 
    ctrl_ext |= 8192U;
    
#line 1023 
    __ew32(hw,24UL,ctrl_ext);
    
#line 1024 
    __er32(hw,8UL);
  }
  else ;
  
#line 1027 
  ret_val = e1000e_get_auto_rd_done(hw);
  
#line 1028 
  if (ret_val != 0) {
    
#line 1030 
    __retres = ret_val;
    
#line 1030 
    goto return_label;
  }
  else ;
  
#line 1037 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)0: 
#line 1038 
    ;
    case (unsigned int)1: 
#line 1039 
    ;
    
#line 1043 
    eecd = __er32(hw,16UL);
    
#line 1044 
    eecd &= 4294967103U;
    
#line 1045 
    __ew32(hw,16UL,eecd);
    
#line 1046 
    goto ldv_47818;
    case (unsigned int)2: 
#line 1047 
    ;
    case (unsigned int)3: 
#line 1048 
    ;
    case (unsigned int)4: 
#line 1049 
    ;
    
#line 1050 
    msleep(25U);
    
#line 1051 
    goto ldv_47818;
    default: 
#line 1052 
    ;
    
#line 1053 
    goto ldv_47818;
  }
  ldv_47818: 
#line 1057 
  ;
  
#line 1057 
  __ew32(hw,216UL,4294967295U);
  
#line 1058 
  __er32(hw,192UL);
  
#line 1060 
  if (hw->mac.type == (unsigned int)e1000_82571) {
    
#line 1062 
    ret_val = e1000_check_alt_mac_addr_generic(hw);
    
#line 1063 
    if (ret_val != 0) {
      
#line 1064 
      __retres = ret_val;
      
#line 1064 
      goto return_label;
    }
    else ;
    
#line 1066 
    e1000e_set_laa_state_82571(hw,(_Bool)1);
  }
  else ;
  
#line 1070 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_internal_serdes) 
    
#line 1071 
    hw->mac.serdes_link_state = e1000_serdes_link_down; else ;
  
#line 1073 
  __retres = 0;
  return_label: 
#line 1073 
                return __retres;
}


#line 1082  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_init_hw_82571(struct e1000_hw *hw)
{
  u32 reg_data;
  s32 ret_val;
  u16 i;
  bool tmp;
  
#line 1084 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 1087 
  u16 rar_count = mac->rar_entry_count;
  
#line 1089 
  e1000_initialize_hw_bits_82571(hw);
  
#line 1092 
  ret_val = (*(mac->ops.id_led_init))(hw);
  
#line 1094 
  if (ret_val != 0) {
    
#line 1095 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_init_hw_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "Error initializing identification LED\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1095U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1095 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1095 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Error initializing identification LED\n"); else ;
  }
  else ;
  {
    
#line 1098 
    struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_init_hw_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "Initializing the IEEE VLAN\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1098U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1098 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1098 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Initializing the IEEE VLAN\n"); else ;
  }
  
#line 1099 
  (*(mac->ops.clear_vfta))(hw);
  
#line 1106 
  tmp = e1000e_get_laa_state_82571(hw);
  
#line 1106 
  if ((int)tmp != 0) 
#line 1107 
                     rar_count = (u16)((int)rar_count - 1); else ;
  
#line 1108 
  e1000e_init_rx_addrs(hw,(unsigned short)((int)rar_count));
  {
    
#line 1111 
    struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_init_hw_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "Zeroing the MTA\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1111U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1111 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 1111 
                                                          __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Zeroing the MTA\n"); else ;
  }
  
#line 1112 
  i = (unsigned short)0U;
  
#line 1112 
  goto ldv_47836;
  ldv_47835: 
#line 1113 
  ;
  
#line 1113 
  __ew32(hw,(unsigned long)(((int)i << 2) + 20992),0U);
  
#line 1112 
  i = (u16)((int)i + 1);
  ldv_47836: 
#line 1113 
  ;
  
#line 1112 
  if ((int)mac->mta_reg_count > (int)i) 
#line 1114 
                                        goto ldv_47835; else 
#line 1117 
                                                             goto ldv_47837;
  ldv_47837: 
#line 1118 
  ;
  
#line 1116 
  ret_val = (*(mac->ops.setup_link))(hw);
  
#line 1119 
  reg_data = __er32(hw,14376UL);
  
#line 1120 
  reg_data = (reg_data & 4269867007U) | 21037056U;
  
#line 1122 
  __ew32(hw,14376UL,reg_data);
  
#line 1125 
  switch ((unsigned int)mac->type) {
    case (unsigned int)2: 
#line 1126 
    ;
    
#line 1127 
    e1000e_enable_tx_pkt_filtering(hw);
    case (unsigned int)3: 
#line 1129 
    ;
    case (unsigned int)4: 
#line 1130 
    ;
    
#line 1131 
    reg_data = __er32(hw,23296UL);
    
#line 1132 
    reg_data |= 134217728U;
    
#line 1133 
    __ew32(hw,23296UL,reg_data);
    
#line 1134 
    goto ldv_47841;
    default: 
#line 1135 
    ;
    
#line 1136 
    reg_data = __er32(hw,14632UL);
    
#line 1137 
    reg_data = (reg_data & 4269867007U) | 21037056U;
    
#line 1140 
    __ew32(hw,14632UL,reg_data);
    
#line 1141 
    goto ldv_47841;
  }
  ldv_47841: 
#line 1149 
  ;
  
#line 1149 
  e1000_clear_hw_cntrs_82571(hw);
  
#line 1151 
  return ret_val;
}


#line 1160  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static void e1000_initialize_hw_bits_82571(struct e1000_hw *hw)
{
  u32 reg;
  
#line 1165 
  reg = __er32(hw,14376UL);
  
#line 1166 
  reg |= 4194304U;
  
#line 1167 
  __ew32(hw,14376UL,reg);
  
#line 1170 
  reg = __er32(hw,14632UL);
  
#line 1171 
  reg |= 4194304U;
  
#line 1172 
  __ew32(hw,14632UL,reg);
  
#line 1175 
  reg = __er32(hw,14400UL);
  
#line 1176 
  reg &= 2281701375U;
  
#line 1177 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)0: 
#line 1178 
    ;
    case (unsigned int)1: 
#line 1179 
    ;
    
#line 1180 
    reg |= 125829120U;
    
#line 1181 
    goto ldv_47849;
    case (unsigned int)3: 
#line 1182 
    ;
    case (unsigned int)4: 
#line 1183 
    ;
    
#line 1184 
    reg |= 67108864U;
    
#line 1185 
    goto ldv_47849;
    default: 
#line 1186 
    ;
    
#line 1187 
    goto ldv_47849;
  }
  ldv_47849: 
#line 1189 
  ;
  
#line 1189 
  __ew32(hw,14400UL,reg);
  
#line 1192 
  reg = __er32(hw,14656UL);
  
#line 1193 
  switch ((unsigned int)hw->mac.type) {
    u32 tmp;
    case (unsigned int)0: 
#line 1194 
    ;
    case (unsigned int)1: 
#line 1195 
    ;
    
#line 1196 
    reg &= 2684354559U;
    
#line 1197 
    reg |= 121634816U;
    
#line 1198 
    tmp = __er32(hw,1024UL);
    
#line 1198 
    if ((tmp & 268435456U) != 0U) 
#line 1199 
                                  reg &= 4026531839U; else 
#line 1201 
                                                           reg |= 268435456U;
    
#line 1202 
    __ew32(hw,14656UL,reg);
    
#line 1203 
    goto ldv_47855;
    default: 
#line 1204 
    ;
    
#line 1205 
    goto ldv_47855;
  }
  ldv_47855: 
#line 1209 
  ;
  
#line 1209 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 1210 
    ;
    case (unsigned int)3: 
#line 1211 
    ;
    case (unsigned int)4: 
#line 1212 
    ;
    
#line 1213 
    reg = __er32(hw,0UL);
    
#line 1214 
    reg &= 3758096383U;
    
#line 1215 
    __ew32(hw,0UL,reg);
    
#line 1216 
    goto ldv_47860;
    default: 
#line 1217 
    ;
    
#line 1218 
    goto ldv_47860;
  }
  ldv_47860: 
#line 1222 
  ;
  
#line 1222 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 1223 
    ;
    case (unsigned int)3: 
#line 1224 
    ;
    case (unsigned int)4: 
#line 1225 
    ;
    
#line 1226 
    reg = __er32(hw,24UL);
    
#line 1227 
    reg &= 4286578687U;
    
#line 1228 
    reg |= 4194304U;
    
#line 1229 
    __ew32(hw,24UL,reg);
    
#line 1230 
    goto ldv_47865;
    default: 
#line 1231 
    ;
    
#line 1232 
    goto ldv_47865;
  }
  ldv_47865: 
#line 1235 
  ;
  
#line 1235 
  if (hw->mac.type == (unsigned int)e1000_82571) {
    
#line 1236 
    reg = __er32(hw,4352UL);
    
#line 1237 
    reg |= 1U;
    
#line 1238 
    __ew32(hw,4352UL,reg);
  }
  else ;
  
#line 1244 
  if (hw->mac.type <= (unsigned int)e1000_82572) {
    
#line 1245 
    reg = __er32(hw,24UL);
    
#line 1246 
    reg &= 4294443007U;
    
#line 1247 
    __ew32(hw,24UL,reg);
  }
  else ;
  
#line 1253 
  if (hw->mac.type <= (unsigned int)e1000_82573) {
    
#line 1254 
    reg = __er32(hw,20488UL);
    
#line 1255 
    reg |= 196608U;
    
#line 1256 
    __ew32(hw,20488UL,reg);
  }
  else ;
  
#line 1260 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)3: 
#line 1261 
    ;
    case (unsigned int)4: 
#line 1262 
    ;
    
#line 1263 
    reg = __er32(hw,23296UL);
    
#line 1264 
    reg |= 4194304U;
    
#line 1265 
    __ew32(hw,23296UL,reg);
    
#line 1273 
    reg = __er32(hw,23396UL);
    
#line 1274 
    reg |= 1U;
    
#line 1275 
    __ew32(hw,23396UL,reg);
    
#line 1276 
    goto ldv_47869;
    default: 
#line 1277 
    ;
    
#line 1278 
    goto ldv_47869;
  }
  ldv_47869: 
#line 1280 
  ;
  
#line 1281 
  return;
}


#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static void e1000_clear_vfta_82571(struct e1000_hw *hw)
{
  u32 offset;
  
#line 1292 
  u32 vfta_value = 0U;
  
#line 1293 
  u32 vfta_offset = 0U;
  
#line 1294 
  u32 vfta_bit_in_reg = 0U;
  
#line 1296 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 1297 
    ;
    case (unsigned int)3: 
#line 1298 
    ;
    case (unsigned int)4: 
#line 1299 
    ;
    
#line 1300 
    if ((unsigned int)hw->mng_cookie.vlan_id != 0U) {
      
#line 1307 
      vfta_offset = (unsigned int)((int)hw->mng_cookie.vlan_id >> 5) & 127U;
      
#line 1310 
      vfta_bit_in_reg = (unsigned int)(1 << ((int)hw->mng_cookie.vlan_id & 31));
    }
    else ;
    
#line 1314 
    goto ldv_47881;
    default: 
#line 1315 
    ;
    
#line 1316 
    goto ldv_47881;
  }
  ldv_47881: 
#line 1318 
  ;
  
#line 1318 
  offset = 0U;
  
#line 1318 
  goto ldv_47884;
  ldv_47883: 
#line 1319 
  ;
  
#line 1323 
  if (offset == vfta_offset) 
#line 1323 
                             vfta_value = vfta_bit_in_reg; else 
#line 1323 
                                                                vfta_value = 0U;
  
#line 1324 
  __ew32(hw,(unsigned long)((offset << 2) + 22016U),vfta_value);
  
#line 1325 
  __er32(hw,8UL);
  
#line 1318 
  offset += 1U;
  ldv_47884: 
#line 1319 
  ;
  
#line 1318 
  if (offset <= 127U) 
#line 1320 
                      goto ldv_47883; else 
#line 1323 
                                           goto ldv_47885;
  ldv_47885: 
#line 1324 
  ;
  
#line 1325 
  return;
}


#line 1336  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static bool e1000_check_mng_mode_82574(struct e1000_hw *hw)
{
  bool __retres;
  u16 data;
  
#line 1340 
  e1000_read_nvm(hw,(unsigned short)15,(unsigned short)1,& data);
  
#line 1341 
  __retres = (_Bool)(((int)data & 24576) != 0);
  
#line 1341 
  return __retres;
}


#line 1350  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_led_on_82574(struct e1000_hw *hw)
{
  s32 __retres;
  u32 ctrl;
  u32 i;
  u32 tmp;
  
#line 1355 
  ctrl = hw->mac.ledctl_mode2;
  
#line 1356 
  tmp = __er32(hw,8UL);
  
#line 1356 
  if ((tmp & 2U) == 0U) {
    
#line 1360 
    i = 0U;
    
#line 1360 
    goto ldv_47896;
    ldv_47895: 
#line 1361 
    ;
    
#line 1361 
    if (((hw->mac.ledctl_mode2 >> i * 8U) & 255U) == 14U) 
#line 1363 
                                                          ctrl = (unsigned int)(64 << i * 8U) | ctrl; else ;
    
#line 1360 
    i += 1U;
    ldv_47896: 
#line 1361 
    ;
    
#line 1360 
    if (i <= 3U) 
#line 1362 
                 goto ldv_47895; else 
#line 1365 
                                      goto ldv_47897;
    ldv_47897: 
#line 1366 
    ;
  }
  else ;
  
#line 1365 
  __ew32(hw,3584UL,ctrl);
  
#line 1367 
  __retres = 0;
  
#line 1367 
  return __retres;
}


#line 1376  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
bool e1000_check_phy_82574(struct e1000_hw *hw)
{
  bool __retres;
  s32 ret_val;
  
#line 1378 
  u16 status_1kbt = (unsigned short)0U;
  
#line 1379 
  u16 receive_errors = (unsigned short)0U;
  
#line 1385 
  ret_val = e1e_rphy(hw,21U,& receive_errors);
  
#line 1386 
  if (ret_val != 0) {
    
#line 1387 
    __retres = (_Bool)0;
    
#line 1387 
    goto return_label;
  }
  else ;
  
#line 1388 
  if ((unsigned int)receive_errors == 65535U) {
    
#line 1389 
    ret_val = e1e_rphy(hw,10U,& status_1kbt);
    
#line 1390 
    if (ret_val != 0) {
      
#line 1391 
      __retres = (_Bool)0;
      
#line 1391 
      goto return_label;
    }
    else ;
    
#line 1392 
    if (((int)status_1kbt & 255) == 255) {
      
#line 1394 
      __retres = (_Bool)1;
      
#line 1394 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1397 
  __retres = (_Bool)0;
  return_label: 
#line 1397 
                return __retres;
}


#line 1410  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_setup_link_82571(struct e1000_hw *hw)
{
  s32 tmp;
  
#line 1416 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 1417 
    ;
    case (unsigned int)3: 
#line 1418 
    ;
    case (unsigned int)4: 
#line 1419 
    ;
    
#line 1420 
    if (hw->fc.requested_mode == (unsigned int)e1000_fc_default) 
#line 1421 
                                                                 hw->fc.requested_mode = e1000_fc_full; else ;
    
#line 1422 
    goto ldv_47910;
    default: 
#line 1423 
    ;
    
#line 1424 
    goto ldv_47910;
  }
  ldv_47910: 
#line 1427 
  ;
  
#line 1427 
  tmp = e1000e_setup_link_generic(hw);
  
#line 1427 
  return tmp;
}


#line 1438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_setup_copper_link_82571(struct e1000_hw *hw)
{
  s32 __retres;
  u32 ctrl;
  s32 ret_val;
  s32 tmp;
  
#line 1443 
  ctrl = __er32(hw,0UL);
  
#line 1444 
  ctrl |= 64U;
  
#line 1445 
  ctrl &= 4294961151U;
  
#line 1446 
  __ew32(hw,0UL,ctrl);
  
#line 1448 
  switch ((unsigned int)hw->phy.type) {
    case (unsigned int)2: 
#line 1449 
    ;
    case (unsigned int)8: 
#line 1450 
    ;
    
#line 1451 
    ret_val = e1000e_copper_link_setup_m88(hw);
    
#line 1452 
    goto ldv_47919;
    case (unsigned int)4: 
#line 1453 
    ;
    
#line 1454 
    ret_val = e1000e_copper_link_setup_igp(hw);
    
#line 1455 
    goto ldv_47919;
    default: 
#line 1456 
    ;
    
#line 1457 
    __retres = -2;
    
#line 1457 
    goto return_label;
  }
  ldv_47919: 
#line 1460 
  ;
  
#line 1460 
  if (ret_val != 0) {
    
#line 1461 
    __retres = ret_val;
    
#line 1461 
    goto return_label;
  }
  else ;
  
#line 1463 
  tmp = e1000e_setup_copper_link(hw);
  
#line 1463 
  __retres = tmp;
  return_label: 
#line 1463 
                return __retres;
}


#line 1473  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_setup_fiber_serdes_link_82571(struct e1000_hw *hw)
{
  s32 tmp;
  
#line 1475 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)0: 
#line 1476 
    ;
    case (unsigned int)1: 
#line 1477 
    ;
    
#line 1484 
    __ew32(hw,36UL,1024U);
    
#line 1485 
    goto ldv_47927;
    default: 
#line 1486 
    ;
    
#line 1487 
    goto ldv_47927;
  }
  ldv_47927: 
#line 1490 
  ;
  
#line 1490 
  tmp = e1000e_setup_fiber_serdes_link(hw);
  
#line 1490 
  return tmp;
}


#line 1512  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_check_for_serdes_link_82571(struct e1000_hw *hw)
{
  u32 rxcw;
  u32 ctrl;
  u32 status;
  u32 txcw;
  u32 i;
  
#line 1514 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 1520 
  s32 ret_val = 0;
  
#line 1522 
  ctrl = __er32(hw,0UL);
  
#line 1523 
  status = __er32(hw,8UL);
  
#line 1524 
  __er32(hw,384UL);
  
#line 1526 
  usleep_range(10UL,20UL);
  
#line 1527 
  rxcw = __er32(hw,384UL);
  
#line 1529 
  if ((rxcw & 1073741824U) != 0U && (rxcw & 134217728U) == 0U) {
    
#line 1531 
    switch ((unsigned int)mac->serdes_link_state) {
      case (unsigned int)2: 
#line 1532 
      ;
      
#line 1533 
      if ((status & 2U) == 0U) {
        
#line 1537 
        mac->serdes_link_state = e1000_serdes_link_autoneg_progress;
        
#line 1539 
        mac->serdes_has_link = (_Bool)0;
        {
          
#line 1540 
          struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_check_for_serdes_link_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "AN_UP     -> AN_PROG\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1540U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1540 
          if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1540 
                                                              __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"AN_UP     -> AN_PROG\n"); else ;
        }
      }
      else 
#line 1542 
           mac->serdes_has_link = (_Bool)1;
      
#line 1544 
      goto ldv_47942;
      case (unsigned int)3: 
#line 1546 
      ;
      
#line 1552 
      if ((rxcw & 536870912U) != 0U) {
        
#line 1554 
        __ew32(hw,376UL,mac->txcw);
        
#line 1555 
        __ew32(hw,0UL,ctrl & 4294967231U);
        
#line 1556 
        mac->serdes_link_state = e1000_serdes_link_autoneg_progress;
        
#line 1558 
        mac->serdes_has_link = (_Bool)0;
        {
          
#line 1559 
          struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_check_for_serdes_link_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "FORCED_UP -> AN_PROG\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1559U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1559 
          if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1559 
                                                                __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"FORCED_UP -> AN_PROG\n"); else ;
        }
      }
      else 
#line 1561 
           mac->serdes_has_link = (_Bool)1;
      
#line 1563 
      goto ldv_47942;
      case (unsigned int)1: 
#line 1565 
      ;
      
#line 1566 
      if ((rxcw & 536870912U) != 0U) 
        
#line 1571 
        if ((status & 2U) != 0U) {
          
#line 1572 
          mac->serdes_link_state = e1000_serdes_link_autoneg_complete;
          {
            
#line 1574 
            struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_check_for_serdes_link_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "AN_PROG   -> AN_UP\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1574U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
            
#line 1574 
            if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 1574 
                                                                  __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"AN_PROG   -> AN_UP\n"); else ;
          }
          
#line 1575 
          mac->serdes_has_link = (_Bool)1;
        }
        else {
          
#line 1578 
          mac->serdes_link_state = e1000_serdes_link_down;
          {
            
#line 1580 
            struct _ddebug descriptor_2 = {.modname = "e1000e", .function = "e1000_check_for_serdes_link_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "AN_PROG   -> DOWN\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1580U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
            
#line 1580 
            if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 1580 
                                                                  __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)(hw->adapter)->netdev,"AN_PROG   -> DOWN\n"); else ;
          }
        }
      else {
        
#line 1587 
        __ew32(hw,376UL,mac->txcw & 2147483647U);
        
#line 1588 
        ctrl |= 65U;
        
#line 1589 
        __ew32(hw,0UL,ctrl);
        
#line 1592 
        ret_val = e1000e_config_fc_after_link_up(hw);
        
#line 1593 
        if (ret_val != 0) {
          {
            
#line 1594 
            struct _ddebug descriptor_3 = {.modname = "e1000e", .function = "e1000_check_for_serdes_link_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "Error config flow control\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1594U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
            
#line 1594 
            if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) 
#line 1594 
                                                                  __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)(hw->adapter)->netdev,"Error config flow control\n"); else ;
          }
          
#line 1595 
          goto ldv_47942;
        }
        else ;
        
#line 1597 
        mac->serdes_link_state = e1000_serdes_link_forced_up;
        
#line 1599 
        mac->serdes_has_link = (_Bool)1;
        {
          
#line 1600 
          struct _ddebug descriptor_4 = {.modname = "e1000e", .function = "e1000_check_for_serdes_link_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "AN_PROG   -> FORCED_UP\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1600U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1600 
          if ((long)(((int)descriptor_4.flags & 1) != 0) != 0L) 
#line 1600 
                                                                __dynamic_netdev_dbg(& descriptor_4,(struct net_device const *)(hw->adapter)->netdev,"AN_PROG   -> FORCED_UP\n"); else ;
        }
      }
      
#line 1602 
      goto ldv_47942;
      case (unsigned int)0: 
#line 1604 
      ;
      default: 
#line 1605 
      ;
      
#line 1610 
      __ew32(hw,376UL,mac->txcw);
      
#line 1611 
      __ew32(hw,0UL,ctrl & 4294967231U);
      
#line 1612 
      mac->serdes_link_state = e1000_serdes_link_autoneg_progress;
      
#line 1614 
      mac->serdes_has_link = (_Bool)0;
      {
        
#line 1615 
        struct _ddebug descriptor_5 = {.modname = "e1000e", .function = "e1000_check_for_serdes_link_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "DOWN      -> AN_PROG\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1615U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1615 
        if ((long)(((int)descriptor_5.flags & 1) != 0) != 0L) 
#line 1615 
                                                              __dynamic_netdev_dbg(& descriptor_5,(struct net_device const *)(hw->adapter)->netdev,"DOWN      -> AN_PROG\n"); else ;
      }
      
#line 1616 
      goto ldv_47942;
    }
    ldv_47942: 
#line 1618 
    ;
  }
  else 
    
#line 1619 
    if ((rxcw & 1073741824U) == 0U) {
      
#line 1620 
      mac->serdes_has_link = (_Bool)0;
      
#line 1621 
      mac->serdes_link_state = e1000_serdes_link_down;
      {
        
#line 1622 
        struct _ddebug descriptor_6 = {.modname = "e1000e", .function = "e1000_check_for_serdes_link_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "ANYSTATE  -> DOWN\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1622U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1622 
        if ((long)(((int)descriptor_6.flags & 1) != 0) != 0L) 
#line 1622 
                                                              __dynamic_netdev_dbg(& descriptor_6,(struct net_device const *)(hw->adapter)->netdev,"ANYSTATE  -> DOWN\n"); else ;
      }
    }
    else {
      
#line 1628 
      i = 0U;
      
#line 1628 
      goto ldv_47958;
      ldv_47957: 
#line 1629 
      ;
      
#line 1629 
      usleep_range(10UL,20UL);
      
#line 1630 
      rxcw = __er32(hw,384UL);
      
#line 1631 
      if ((rxcw & 1073741824U) != 0U && (rxcw & 536870912U) != 0U) 
#line 1633 
                                                                   goto ldv_47954; else ;
      
#line 1635 
      if ((rxcw & 134217728U) != 0U) {
        
#line 1636 
        mac->serdes_has_link = (_Bool)0;
        
#line 1637 
        mac->serdes_link_state = e1000_serdes_link_down;
        {
          
#line 1639 
          struct _ddebug descriptor_7 = {.modname = "e1000e", .function = "e1000_check_for_serdes_link_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "ANYSTATE  -> DOWN\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1639U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1639 
          if ((long)(((int)descriptor_7.flags & 1) != 0) != 0L) 
#line 1639 
                                                                __dynamic_netdev_dbg(& descriptor_7,(struct net_device const *)(hw->adapter)->netdev,"ANYSTATE  -> DOWN\n"); else ;
        }
        
#line 1640 
        goto ldv_47956;
      }
      else ;
      ldv_47954: 
#line 1642 
      ;
      
#line 1628 
      i += 1U;
      ldv_47958: 
#line 1629 
      ;
      
#line 1628 
      if (i <= 4U) 
#line 1630 
                   goto ldv_47957; else 
#line 1633 
                                        goto ldv_47956;
      ldv_47956: 
#line 1634 
      ;
      
#line 1644 
      if (i == 5U) {
        
#line 1645 
        txcw = __er32(hw,376UL);
        
#line 1646 
        txcw |= 2147483648U;
        
#line 1647 
        __ew32(hw,376UL,txcw);
        
#line 1648 
        mac->serdes_link_state = e1000_serdes_link_autoneg_progress;
        
#line 1650 
        mac->serdes_has_link = (_Bool)0;
        {
          
#line 1651 
          struct _ddebug descriptor_8 = {.modname = "e1000e", .function = "e1000_check_for_serdes_link_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "ANYSTATE  -> AN_PROG\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1651U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1651 
          if ((long)(((int)descriptor_8.flags & 1) != 0) != 0L) 
#line 1651 
                                                                __dynamic_netdev_dbg(& descriptor_8,(struct net_device const *)(hw->adapter)->netdev,"ANYSTATE  -> AN_PROG\n"); else ;
        }
      }
      else ;
    }
  
#line 1656 
  return ret_val;
}


#line 1667  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_valid_led_default_82571(struct e1000_hw *hw, u16 *data)
{
  s32 __retres;
  s32 ret_val;
  
#line 1671 
  ret_val = e1000_read_nvm(hw,(unsigned short)4,(unsigned short)1,data);
  
#line 1672 
  if (ret_val != 0) {
    {
      
#line 1673 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_valid_led_default_82571", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1673U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1673 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1673 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"NVM Read Error\n"); else ;
    }
    
#line 1674 
    __retres = ret_val;
    
#line 1674 
    goto return_label;
  }
  else ;
  
#line 1677 
  switch ((unsigned int)hw->mac.type) {
    case (unsigned int)2: 
#line 1678 
    ;
    case (unsigned int)3: 
#line 1679 
    ;
    case (unsigned int)4: 
#line 1680 
    ;
    
#line 1681 
    if ((unsigned int)*data == 63302U) 
#line 1682 
                                       *data = (unsigned short)6161U; else ;
    
#line 1683 
    goto ldv_47970;
    default: 
#line 1684 
    ;
    
#line 1685 
    if ((unsigned int)*data + 65535U > 65533U) 
#line 1687 
                                               *data = (unsigned short)35089U; else ;
    
#line 1688 
    goto ldv_47970;
  }
  ldv_47970: 
#line 1691 
  ;
  
#line 1691 
  __retres = 0;
  return_label: 
#line 1691 
                return __retres;
}


#line 1700  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
bool e1000e_get_laa_state_82571(struct e1000_hw *hw)
{
  bool __retres;
  
#line 1702 
  if (hw->mac.type != (unsigned int)e1000_82571) {
    
#line 1703 
    __retres = (_Bool)0;
    
#line 1703 
    goto return_label;
  }
  else ;
  
#line 1705 
  __retres = hw->dev_spec.e82571.laa_is_present;
  return_label: 
#line 1705 
                return __retres;
}


#line 1715  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
void e1000e_set_laa_state_82571(struct e1000_hw *hw, bool state)
{
  
#line 1717 
  if (hw->mac.type != (unsigned int)e1000_82571) 
#line 1718 
                                                 goto return_label; else ;
  
#line 1720 
  hw->dev_spec.e82571.laa_is_present = state;
  
#line 1723 
  if ((int)state != 0) 
#line 1730 
                       (*(hw->mac.ops.rar_set))(hw,(u8 *)(& hw->mac.addr),(unsigned int)((int)hw->mac.rar_entry_count + -1)); else ;
  return_label: 
#line 1732 
                return;
}


#line 1744  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_fix_nvm_checksum_82571(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 data;
  
#line 1746 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 1750 
  if (nvm->type != (unsigned int)e1000_nvm_flash_hw) {
    
#line 1751 
    __retres = 0;
    
#line 1751 
    goto return_label;
  }
  else ;
  
#line 1756 
  ret_val = e1000_read_nvm(hw,(unsigned short)16,(unsigned short)1,& data);
  
#line 1757 
  if (ret_val != 0) {
    
#line 1758 
    __retres = ret_val;
    
#line 1758 
    goto return_label;
  }
  else ;
  
#line 1760 
  if (((int)data & 16) == 0) {
    
#line 1768 
    ret_val = e1000_read_nvm(hw,(unsigned short)35,(unsigned short)1,& data);
    
#line 1769 
    if (ret_val != 0) {
      
#line 1770 
      __retres = ret_val;
      
#line 1770 
      goto return_label;
    }
    else ;
    
#line 1772 
    if ((int)data >= 0) {
      
#line 1773 
      data = (unsigned short)((unsigned int)data | 32768U);
      
#line 1774 
      ret_val = e1000_write_nvm(hw,(unsigned short)35,(unsigned short)1,& data);
      
#line 1775 
      if (ret_val != 0) {
        
#line 1776 
        __retres = ret_val;
        
#line 1776 
        goto return_label;
      }
      else ;
      
#line 1777 
      ret_val = e1000e_update_nvm_checksum(hw);
      
#line 1778 
      if (ret_val != 0) {
        
#line 1779 
        __retres = ret_val;
        
#line 1779 
        goto return_label;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 1783 
  __retres = 0;
  return_label: 
#line 1783 
                return __retres;
}


#line 1790  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static s32 e1000_read_mac_addr_82571(struct e1000_hw *hw)
{
  s32 __retres;
  s32 tmp;
  
#line 1792 
  if (hw->mac.type == (unsigned int)e1000_82571) {
    s32 ret_val;
    
#line 1799 
    ret_val = e1000_check_alt_mac_addr_generic(hw);
    
#line 1800 
    if (ret_val != 0) {
      
#line 1801 
      __retres = ret_val;
      
#line 1801 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1804 
  tmp = e1000_read_mac_addr_generic(hw);
  
#line 1804 
  __retres = tmp;
  return_label: 
#line 1804 
                return __retres;
}


#line 1814  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static void e1000_power_down_phy_copper_82571(struct e1000_hw *hw)
{
  int tmp_0;
  bool tmp;
  
#line 1816 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1817 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 1819 
  if (phy->ops.check_reset_block == (s32 (*)(struct e1000_hw *))0) 
#line 1820 
                                                                   goto return_label; else ;
  
#line 1823 
  tmp = (*(mac->ops.check_mng_mode))(hw);
  
#line 1823 
  if (tmp) 
#line 1823 
           tmp_0 = 0; else 
#line 1823 
                           tmp_0 = 1;
  
#line 1823 
  if (tmp_0) {
    s32 tmp_1;
    
#line 1823 
    tmp_1 = (*(phy->ops.check_reset_block))(hw);
    
#line 1823 
    if (tmp_1 == 0) 
#line 1824 
                    e1000_power_down_phy_copper(hw); else ;
  }
  else ;
  return_label: 
#line 1825 
                return;
}


#line 1833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static void e1000_clear_hw_cntrs_82571(struct e1000_hw *hw)
{
  
#line 1835 
  e1000e_clear_hw_cntrs_base(hw);
  
#line 1837 
  __er32(hw,16476UL);
  
#line 1838 
  __er32(hw,16480UL);
  
#line 1839 
  __er32(hw,16484UL);
  
#line 1840 
  __er32(hw,16488UL);
  
#line 1841 
  __er32(hw,16492UL);
  
#line 1842 
  __er32(hw,16496UL);
  
#line 1843 
  __er32(hw,16600UL);
  
#line 1844 
  __er32(hw,16604UL);
  
#line 1845 
  __er32(hw,16608UL);
  
#line 1846 
  __er32(hw,16612UL);
  
#line 1847 
  __er32(hw,16616UL);
  
#line 1848 
  __er32(hw,16620UL);
  
#line 1850 
  __er32(hw,16388UL);
  
#line 1851 
  __er32(hw,16396UL);
  
#line 1852 
  __er32(hw,16436UL);
  
#line 1853 
  __er32(hw,16444UL);
  
#line 1854 
  __er32(hw,16632UL);
  
#line 1855 
  __er32(hw,16636UL);
  
#line 1857 
  __er32(hw,16564UL);
  
#line 1858 
  __er32(hw,16568UL);
  
#line 1859 
  __er32(hw,16572UL);
  
#line 1861 
  __er32(hw,16640UL);
  
#line 1862 
  __er32(hw,16676UL);
  
#line 1864 
  __er32(hw,16644UL);
  
#line 1865 
  __er32(hw,16648UL);
  
#line 1866 
  __er32(hw,16652UL);
  
#line 1867 
  __er32(hw,16656UL);
  
#line 1868 
  __er32(hw,16664UL);
  
#line 1869 
  __er32(hw,16668UL);
  
#line 1870 
  __er32(hw,16672UL);
  
#line 1871 
  return;
}


#line 1873  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static struct e1000_mac_operations const e82571_mac_ops = {.id_led_init = & e1000e_id_led_init_generic, .blink_led = (s32 (*)(struct e1000_hw *))0, .check_mng_mode = (bool (*)(struct e1000_hw *))0, .check_for_link = (s32 (*)(struct e1000_hw *))0, .cleanup_led = & e1000e_cleanup_led_generic, .clear_hw_cntrs = & e1000_clear_hw_cntrs_82571, .clear_vfta = & e1000_clear_vfta_82571, .get_bus_info = & e1000e_get_bus_info_pcie, .set_lan_id = & e1000_set_lan_id_multi_port_pcie, .get_link_up_info = (s32 (*)(struct e1000_hw *, u16 *, u16 *))0, .led_on = (s32 (*)(struct e1000_hw *))0, .led_off = & e1000e_led_off_generic, .update_mc_addr_list = & e1000e_update_mc_addr_list_generic, .reset_hw = & e1000_reset_hw_82571, .init_hw = & e1000_init_hw_82571, .setup_link = & e1000_setup_link_82571, .setup_physical_interface = (s32 (*)(struct e1000_hw *))0, .setup_led = & e1000e_setup_led_generic, .write_vfta = & e1000_write_vfta_generic, .config_collision_dist = & e1000e_config_collision_dist_generic, .rar_set = & e1000e_rar_set_generic, .read_mac_addr = & e1000_read_mac_addr_82571, .rar_get_count = & e1000e_rar_get_count_generic};

#line 1898  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static struct e1000_phy_operations const e82_phy_ops_igp = {.acquire = & e1000_get_hw_semaphore_82571, .cfg_on_link_up = (s32 (*)(struct e1000_hw *))0, .check_polarity = & e1000_check_polarity_igp, .check_reset_block = & e1000e_check_reset_block_generic, .commit = (s32 (*)(struct e1000_hw *))0, .force_speed_duplex = & e1000e_phy_force_speed_duplex_igp, .get_cfg_done = & e1000_get_cfg_done_82571, .get_cable_length = & e1000e_get_cable_length_igp_2, .get_info = & e1000e_get_phy_info_igp, .set_page = (s32 (*)(struct e1000_hw *, u16 ))0, .read_reg = & e1000e_read_phy_reg_igp, .read_reg_locked = (s32 (*)(struct e1000_hw *, u32 , u16 *))0, .read_reg_page = (s32 (*)(struct e1000_hw *, u32 , u16 *))0, .release = & e1000_put_hw_semaphore_82571, .reset = & e1000e_phy_hw_reset_generic, .set_d0_lplu_state = & e1000_set_d0_lplu_state_82571, .set_d3_lplu_state = & e1000e_set_d3_lplu_state, .write_reg = & e1000e_write_phy_reg_igp, .write_reg_locked = (s32 (*)(struct e1000_hw *, u32 , u16 ))0, .write_reg_page = (s32 (*)(struct e1000_hw *, u32 , u16 ))0, .power_up = (void (*)(struct e1000_hw *))0, .power_down = (void (*)(struct e1000_hw *))0};

#line 1916  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static struct e1000_phy_operations const e82_phy_ops_m88 = {.acquire = & e1000_get_hw_semaphore_82571, .cfg_on_link_up = (s32 (*)(struct e1000_hw *))0, .check_polarity = & e1000_check_polarity_m88, .check_reset_block = & e1000e_check_reset_block_generic, .commit = & e1000e_phy_sw_reset, .force_speed_duplex = & e1000e_phy_force_speed_duplex_m88, .get_cfg_done = & e1000e_get_cfg_done_generic, .get_cable_length = & e1000e_get_cable_length_m88, .get_info = & e1000e_get_phy_info_m88, .set_page = (s32 (*)(struct e1000_hw *, u16 ))0, .read_reg = & e1000e_read_phy_reg_m88, .read_reg_locked = (s32 (*)(struct e1000_hw *, u32 , u16 *))0, .read_reg_page = (s32 (*)(struct e1000_hw *, u32 , u16 *))0, .release = & e1000_put_hw_semaphore_82571, .reset = & e1000e_phy_hw_reset_generic, .set_d0_lplu_state = & e1000_set_d0_lplu_state_82571, .set_d3_lplu_state = & e1000e_set_d3_lplu_state, .write_reg = & e1000e_write_phy_reg_m88, .write_reg_locked = (s32 (*)(struct e1000_hw *, u32 , u16 ))0, .write_reg_page = (s32 (*)(struct e1000_hw *, u32 , u16 ))0, .power_up = (void (*)(struct e1000_hw *))0, .power_down = (void (*)(struct e1000_hw *))0};

#line 1934  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static struct e1000_phy_operations const e82_phy_ops_bm = {.acquire = & e1000_get_hw_semaphore_82571, .cfg_on_link_up = (s32 (*)(struct e1000_hw *))0, .check_polarity = & e1000_check_polarity_m88, .check_reset_block = & e1000e_check_reset_block_generic, .commit = & e1000e_phy_sw_reset, .force_speed_duplex = & e1000e_phy_force_speed_duplex_m88, .get_cfg_done = & e1000e_get_cfg_done_generic, .get_cable_length = & e1000e_get_cable_length_m88, .get_info = & e1000e_get_phy_info_m88, .set_page = (s32 (*)(struct e1000_hw *, u16 ))0, .read_reg = & e1000e_read_phy_reg_bm2, .read_reg_locked = (s32 (*)(struct e1000_hw *, u32 , u16 *))0, .read_reg_page = (s32 (*)(struct e1000_hw *, u32 , u16 *))0, .release = & e1000_put_hw_semaphore_82571, .reset = & e1000e_phy_hw_reset_generic, .set_d0_lplu_state = & e1000_set_d0_lplu_state_82571, .set_d3_lplu_state = & e1000e_set_d3_lplu_state, .write_reg = & e1000e_write_phy_reg_bm2, .write_reg_locked = (s32 (*)(struct e1000_hw *, u32 , u16 ))0, .write_reg_page = (s32 (*)(struct e1000_hw *, u32 , u16 ))0, .power_up = (void (*)(struct e1000_hw *))0, .power_down = (void (*)(struct e1000_hw *))0};

#line 1952  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
static struct e1000_nvm_operations const e82571_nvm_ops = {.acquire = & e1000_acquire_nvm_82571, .read = & e1000e_read_nvm_eerd, .release = & e1000_release_nvm_82571, .reload = & e1000e_reload_nvm_generic, .update = & e1000_update_nvm_checksum_82571, .valid_led_default = & e1000_valid_led_default_82571, .validate = & e1000_validate_nvm_checksum_82571, .write = & e1000_write_nvm_82571};

#line 1963  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
struct e1000_info const e1000_82571_info = {.mac = e1000_82571, .flags = 6490284U, .flags2 = 72U, .pba = 38U, .max_hw_frame_size = 9234U, .get_variants = & e1000_get_variants_82571, .mac_ops = & e82571_mac_ops, .phy_ops = & e82_phy_ops_igp, .nvm_ops = & e82571_nvm_ops};

#line 1984  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
struct e1000_info const e1000_82572_info = {.mac = e1000_82572, .flags = 4260012U, .flags2 = 72U, .pba = 38U, .max_hw_frame_size = 9234U, .get_variants = & e1000_get_variants_82571, .mac_ops = & e82571_mac_ops, .phy_ops = & e82_phy_ops_igp, .nvm_ops = & e82571_nvm_ops};

#line 2002  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
struct e1000_info const e1000_82573_info = {.mac = e1000_82573, .flags = 67661U, .flags2 = 136U, .pba = 20U, .max_hw_frame_size = 1522U, .get_variants = & e1000_get_variants_82571, .mac_ops = & e82571_mac_ops, .phy_ops = & e82_phy_ops_m88, .nvm_ops = & e82571_nvm_ops};

#line 2020  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
struct e1000_info const e1000_82574_info = {.mac = e1000_82574, .flags = 85165U, .flags2 = 1736U, .pba = 32U, .max_hw_frame_size = 9234U, .get_variants = & e1000_get_variants_82571, .mac_ops = & e82571_mac_ops, .phy_ops = & e82_phy_ops_bm, .nvm_ops = & e82571_nvm_ops};

#line 2044  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/82571.c"
struct e1000_info const e1000_82583_info = {.mac = e1000_82583, .flags = 84141U, .flags2 = 1160U, .pba = 32U, .max_hw_frame_size = 9234U, .get_variants = & e1000_get_variants_82571, .mac_ops = & e82571_mac_ops, .phy_ops = & e82_phy_ops_bm, .nvm_ops = & e82571_nvm_ops};

#line 740  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_82571.c.aux"
static void ldv_mutex_lock_72_0(struct mutex *ldv_func_arg1)
{
  
#line 744 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"swflag_mutex");
  
#line 745 
  return;
}


#line 748  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_82571.c.aux"
static void ldv_mutex_unlock_73_0(struct mutex *ldv_func_arg1)
{
  
#line 752 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"swflag_mutex");
  
#line 753 
  return;
}


#line 756  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_82571.c.aux"
static void ldv_mutex_unlock_74(struct mutex *ldv_func_arg1)
{
  
#line 760 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"swflag_mutex");
  
#line 761 
  return;
}


#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.h"
s32 e1000e_check_for_serdes_link(struct e1000_hw *hw);


#line 36 
s32 e1000e_get_hw_semaphore(struct e1000_hw *hw);


#line 54 
void e1000_clear_vfta_generic(struct e1000_hw *hw);


#line 56 
void e1000e_put_hw_semaphore(struct e1000_hw *hw);


#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.h"
void e1000e_phy_force_speed_duplex_setup(struct e1000_hw *hw, u16 *phy_ctrl);


#line 45 
s32 e1000e_phy_reset_dsp(struct e1000_hw *hw);


#line 72 
s32 e1000e_read_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 *data);


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/nvm.h"
s32 e1000e_valid_led_default(struct e1000_hw *hw, u16 *data);


#line 514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
struct e1000_info const e1000_es2_info;


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static u16 const e1000_gg82563_cable_length_table[11U] = {(unsigned short)0U, (unsigned short)60U, (unsigned short)115U, (unsigned short)150U, (unsigned short)150U, (unsigned short)60U, (unsigned short)115U, (unsigned short)150U, (unsigned short)180U, (unsigned short)180U, (unsigned short)255U};

#line 39 
static s32 e1000_setup_copper_link_80003es2lan(struct e1000_hw *hw);


#line 40 
static s32 e1000_acquire_swfw_sync_80003es2lan(struct e1000_hw *hw, u16 mask);


#line 41 
static void e1000_release_swfw_sync_80003es2lan(struct e1000_hw *hw, u16 mask);


#line 42 
static void e1000_initialize_hw_bits_80003es2lan(struct e1000_hw *hw);


#line 43 
static void e1000_clear_hw_cntrs_80003es2lan(struct e1000_hw *hw);


#line 44 
static s32 e1000_cfg_kmrn_1000_80003es2lan(struct e1000_hw *hw);


#line 45 
static s32 e1000_cfg_kmrn_10_100_80003es2lan(struct e1000_hw *hw, u16 duplex);


#line 46 
static s32 e1000_read_kmrn_reg_80003es2lan(struct e1000_hw *hw, u32 offset, u16 *data);


#line 48 
static s32 e1000_write_kmrn_reg_80003es2lan(struct e1000_hw *hw, u32 offset, u16 data);


#line 50 
static void e1000_power_down_phy_copper_80003es2lan(struct e1000_hw *hw);


#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_init_phy_params_80003es2lan(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  
#line 58 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 61 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) {
    
#line 62 
    phy->type = e1000_phy_none;
    
#line 63 
    __retres = 0;
    
#line 63 
    goto return_label;
  }
  else {
    
#line 65 
    phy->ops.power_up = & e1000_power_up_phy_copper;
    
#line 66 
    phy->ops.power_down = & e1000_power_down_phy_copper_80003es2lan;
  }
  
#line 69 
  phy->addr = 1U;
  
#line 70 
  phy->autoneg_mask = (unsigned short)47U;
  
#line 71 
  phy->reset_delay_us = 100U;
  
#line 72 
  phy->type = e1000_phy_gg82563;
  
#line 75 
  ret_val = e1000e_get_phy_id(hw);
  
#line 78 
  if (phy->id != 21040288U) {
    
#line 79 
    __retres = -2;
    
#line 79 
    goto return_label;
  }
  else ;
  
#line 81 
  __retres = ret_val;
  return_label: 
#line 81 
                return __retres;
}


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_init_nvm_params_80003es2lan(struct e1000_hw *hw)
{
  s32 __retres;
  u16 size;
  
#line 90 
  struct e1000_nvm_info *nvm = & hw->nvm;
  
#line 91 
  u32 eecd = __er32(hw,16UL);
  
#line 94 
  nvm->opcode_bits = (unsigned short)8U;
  
#line 95 
  nvm->delay_usec = (unsigned short)1U;
  
#line 96 
  switch ((unsigned int)nvm->override) {
    case (unsigned int)2: 
#line 97 
    ;
    
#line 98 
    nvm->page_size = (unsigned short)32U;
    
#line 99 
    nvm->address_bits = (unsigned short)16U;
    
#line 100 
    goto ldv_47562;
    case (unsigned int)1: 
#line 101 
    ;
    
#line 102 
    nvm->page_size = (unsigned short)8U;
    
#line 103 
    nvm->address_bits = (unsigned short)8U;
    
#line 104 
    goto ldv_47562;
    default: 
#line 105 
    ;
    
#line 106 
    if ((eecd & 1024U) != 0U) 
#line 106 
                              nvm->page_size = (unsigned short)32U; else 
                                                                    
#line 106 
                                                                    nvm->page_size = (unsigned short)8U;
    
#line 107 
    if ((eecd & 1024U) != 0U) 
#line 107 
                              nvm->address_bits = (unsigned short)16U; else 
                                                                    
#line 107 
                                                                    nvm->address_bits = (unsigned short)8U;
    
#line 108 
    goto ldv_47562;
  }
  ldv_47562: 
#line 111 
  ;
  
#line 111 
  nvm->type = e1000_nvm_eeprom_spi;
  
#line 113 
  size = (unsigned short)((unsigned int)((unsigned short)(eecd >> 11)) & 15U);
  
#line 119 
  size = (unsigned short)((unsigned int)size + 6U);
  
#line 122 
  if ((unsigned int)size > 14U) 
#line 123 
                                size = (unsigned short)14U; else ;
  
#line 124 
  nvm->word_size = (unsigned short)(1 << (int)size);
  
#line 126 
  __retres = 0;
  
#line 126 
  return __retres;
}


#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_init_mac_params_80003es2lan(struct e1000_hw *hw)
{
  s32 __retres;
  u32 tmp;
  
#line 135 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 138 
  switch ((int)((hw->adapter)->pdev)->device) {
    case 4248: 
#line 139 
    ;
    
#line 140 
    hw->phy.media_type = e1000_media_type_internal_serdes;
    
#line 141 
    mac->ops.check_for_link = & e1000e_check_for_serdes_link;
    
#line 142 
    mac->ops.setup_physical_interface = & e1000e_setup_fiber_serdes_link;
    
#line 144 
    goto ldv_47570;
    default: 
#line 145 
    ;
    
#line 146 
    hw->phy.media_type = e1000_media_type_copper;
    
#line 147 
    mac->ops.check_for_link = & e1000e_check_for_copper_link;
    
#line 148 
    mac->ops.setup_physical_interface = & e1000_setup_copper_link_80003es2lan;
    
#line 150 
    goto ldv_47570;
  }
  ldv_47570: 
#line 154 
  ;
  
#line 154 
  mac->mta_reg_count = (unsigned short)128U;
  
#line 156 
  mac->rar_entry_count = (unsigned short)15U;
  
#line 158 
  mac->has_fwsm = (_Bool)1;
  
#line 160 
  tmp = __er32(hw,23380UL);
  
#line 160 
  mac->arc_subsystem_valid = (_Bool)((tmp & 14U) != 0U);
  
#line 162 
  mac->adaptive_ifs = (_Bool)0;
  
#line 165 
  (*(hw->mac.ops.set_lan_id))(hw);
  
#line 167 
  __retres = 0;
  
#line 167 
  return __retres;
}


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_get_variants_80003es2lan(struct e1000_adapter *adapter)
{
  s32 __retres;
  s32 rc;
  
#line 172 
  struct e1000_hw *hw = & adapter->hw;
  
#line 175 
  rc = e1000_init_mac_params_80003es2lan(hw);
  
#line 176 
  if (rc != 0) {
    
#line 177 
    __retres = rc;
    
#line 177 
    goto return_label;
  }
  else ;
  
#line 179 
  rc = e1000_init_nvm_params_80003es2lan(hw);
  
#line 180 
  if (rc != 0) {
    
#line 181 
    __retres = rc;
    
#line 181 
    goto return_label;
  }
  else ;
  
#line 183 
  rc = e1000_init_phy_params_80003es2lan(hw);
  
#line 184 
  if (rc != 0) {
    
#line 185 
    __retres = rc;
    
#line 185 
    goto return_label;
  }
  else ;
  
#line 187 
  __retres = 0;
  return_label: 
#line 187 
                return __retres;
}


#line 196  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_acquire_phy_80003es2lan(struct e1000_hw *hw)
{
  u16 mask;
  s32 tmp;
  
#line 200 
  if ((unsigned int)hw->bus.func != 0U) 
#line 200 
                                        mask = (unsigned short)4U; else 
                                                                    
#line 200 
                                                                    mask = (unsigned short)2U;
  
#line 201 
  tmp = e1000_acquire_swfw_sync_80003es2lan(hw,(unsigned short)((int)mask));
  
#line 201 
  return tmp;
}


#line 210  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static void e1000_release_phy_80003es2lan(struct e1000_hw *hw)
{
  u16 mask;
  
#line 214 
  if ((unsigned int)hw->bus.func != 0U) 
#line 214 
                                        mask = (unsigned short)4U; else 
                                                                    
#line 214 
                                                                    mask = (unsigned short)2U;
  
#line 215 
  e1000_release_swfw_sync_80003es2lan(hw,(unsigned short)((int)mask));
  
#line 216 
  return;
}


#line 225  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_acquire_mac_csr_80003es2lan(struct e1000_hw *hw)
{
  u16 mask;
  s32 tmp;
  
#line 229 
  mask = (unsigned short)8U;
  
#line 231 
  tmp = e1000_acquire_swfw_sync_80003es2lan(hw,(unsigned short)((int)mask));
  
#line 231 
  return tmp;
}


#line 240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static void e1000_release_mac_csr_80003es2lan(struct e1000_hw *hw)
{
  u16 mask;
  
#line 244 
  mask = (unsigned short)8U;
  
#line 246 
  e1000_release_swfw_sync_80003es2lan(hw,(unsigned short)((int)mask));
  
#line 247 
  return;
}


#line 255  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_acquire_nvm_80003es2lan(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  
#line 259 
  ret_val = e1000_acquire_swfw_sync_80003es2lan(hw,(unsigned short)1);
  
#line 260 
  if (ret_val != 0) {
    
#line 261 
    __retres = ret_val;
    
#line 261 
    goto return_label;
  }
  else ;
  
#line 263 
  ret_val = e1000e_acquire_nvm(hw);
  
#line 265 
  if (ret_val != 0) 
#line 266 
                    e1000_release_swfw_sync_80003es2lan(hw,(unsigned short)1); else ;
  
#line 268 
  __retres = ret_val;
  return_label: 
#line 268 
                return __retres;
}


#line 277  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static void e1000_release_nvm_80003es2lan(struct e1000_hw *hw)
{
  
#line 279 
  e1000e_release_nvm(hw);
  
#line 280 
  e1000_release_swfw_sync_80003es2lan(hw,(unsigned short)1);
  
#line 281 
  return;
}


#line 291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_acquire_swfw_sync_80003es2lan(struct e1000_hw *hw, u16 mask)
{
  s32 __retres;
  u32 swfw_sync;
  s32 tmp;
  
#line 294 
  u32 swmask = (unsigned int)mask;
  
#line 295 
  u32 fwmask = (unsigned int)((int)mask << 16);
  
#line 296 
  s32 i = 0;
  
#line 297 
  s32 timeout = 50;
  
#line 299 
  goto ldv_47615;
  ldv_47614: 
#line 300 
  ;
  
#line 300 
  tmp = e1000e_get_hw_semaphore(hw);
  
#line 300 
  if (tmp != 0) {
    
#line 301 
    __retres = -13;
    
#line 301 
    goto return_label;
  }
  else ;
  
#line 303 
  swfw_sync = __er32(hw,23388UL);
  
#line 304 
  if (((fwmask | swmask) & swfw_sync) == 0U) 
#line 305 
                                             goto ldv_47609; else ;
  
#line 310 
  e1000e_put_hw_semaphore(hw);
  
#line 311 
  if (1) 
#line 311 
         __const_udelay(21475000UL);
  else {
    
#line 311 
    unsigned long __ms = 5UL;
    {
      unsigned long tmp_0;
      
#line 311 
      goto ldv_47612;
      ldv_47611: 
#line 312 
      ;
      
#line 311 
      __const_udelay(4295000UL);
      ldv_47612: 
#line 313 
      ;
      
#line 311 
      tmp_0 = __ms;
      
#line 311 
      __ms -= 1UL;
      
#line 311 
      ;
      
#line 311 
      if (tmp_0 != 0UL) 
#line 313 
                        goto ldv_47611; else 
#line 316 
                                             goto ldv_47613;
      ldv_47613: 
#line 317 
      ;
    }
  }
  
#line 312 
  i += 1;
  ldv_47615: 
#line 313 
  ;
  
#line 299 
  if (i < timeout) 
#line 301 
                   goto ldv_47614; else 
#line 304 
                                        goto ldv_47609;
  ldv_47609: 
#line 305 
  ;
  
#line 315 
  if (i == timeout) {
    {
      
#line 316 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_acquire_swfw_sync_80003es2lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = "Driver can\'t access resource, SW_FW_SYNC timeout.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))316U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 316 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 316 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Driver can\'t access resource, SW_FW_SYNC timeout.\n"); else ;
    }
    
#line 317 
    __retres = -13;
    
#line 317 
    goto return_label;
  }
  else ;
  
#line 320 
  swfw_sync |= swmask;
  
#line 321 
  __ew32(hw,23388UL,swfw_sync);
  
#line 323 
  e1000e_put_hw_semaphore(hw);
  
#line 325 
  __retres = 0;
  return_label: 
#line 325 
                return __retres;
}


#line 336  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static void e1000_release_swfw_sync_80003es2lan(struct e1000_hw *hw, u16 mask)
{
  u32 swfw_sync;
  s32 tmp;
  
#line 340 
  goto ldv_47624;
  ldv_47623: 
#line 341 
  ;
  ldv_47624: 
#line 342 
  ;
  
#line 340 
  tmp = e1000e_get_hw_semaphore(hw);
  
#line 340 
  if (tmp != 0) 
#line 342 
                goto ldv_47623; else 
#line 345 
                                     goto ldv_47625;
  ldv_47625: 
#line 346 
  ;
  
#line 343 
  swfw_sync = __er32(hw,23388UL);
  
#line 344 
  swfw_sync = (unsigned int)(~ ((int)mask)) & swfw_sync;
  
#line 345 
  __ew32(hw,23388UL,swfw_sync);
  
#line 347 
  e1000e_put_hw_semaphore(hw);
  
#line 348 
  return;
}


#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_read_phy_reg_gg82563_80003es2lan(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 __retres;
  s32 ret_val;
  u32 page_select;
  u16 temp;
  
#line 365 
  ret_val = e1000_acquire_phy_80003es2lan(hw);
  
#line 366 
  if (ret_val != 0) {
    
#line 367 
    __retres = ret_val;
    
#line 367 
    goto return_label;
  }
  else ;
  
#line 370 
  if ((offset & 31U) <= 29U) 
#line 371 
                             page_select = 22U; else 
#line 376 
                                                     page_select = 29U;
  
#line 379 
  temp = (unsigned short)((int)((unsigned short)offset) >> 5);
  
#line 380 
  ret_val = e1000e_write_phy_reg_mdic(hw,page_select,(unsigned short)((int)temp));
  
#line 381 
  if (ret_val != 0) {
    
#line 382 
    e1000_release_phy_80003es2lan(hw);
    
#line 383 
    __retres = ret_val;
    
#line 383 
    goto return_label;
  }
  else ;
  
#line 386 
  if ((int)hw->dev_spec.e80003es2lan.mdic_wa_enable != 0) {
    
#line 391 
    usleep_range(200UL,400UL);
    
#line 394 
    ret_val = e1000e_read_phy_reg_mdic(hw,page_select,& temp);
    
#line 396 
    if ((int)((unsigned short)offset) >> 5 != (int)temp) {
      
#line 397 
      e1000_release_phy_80003es2lan(hw);
      
#line 398 
      __retres = -2;
      
#line 398 
      goto return_label;
    }
    else ;
    
#line 401 
    usleep_range(200UL,400UL);
    
#line 403 
    ret_val = e1000e_read_phy_reg_mdic(hw,offset & 31U,data);
    
#line 407 
    usleep_range(200UL,400UL);
  }
  else 
#line 409 
       ret_val = e1000e_read_phy_reg_mdic(hw,offset & 31U,data);
  
#line 414 
  e1000_release_phy_80003es2lan(hw);
  
#line 416 
  __retres = ret_val;
  return_label: 
#line 416 
                return __retres;
}


#line 427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_write_phy_reg_gg82563_80003es2lan(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 __retres;
  s32 ret_val;
  u32 page_select;
  u16 temp;
  
#line 434 
  ret_val = e1000_acquire_phy_80003es2lan(hw);
  
#line 435 
  if (ret_val != 0) {
    
#line 436 
    __retres = ret_val;
    
#line 436 
    goto return_label;
  }
  else ;
  
#line 439 
  if ((offset & 31U) <= 29U) 
#line 440 
                             page_select = 22U; else 
#line 445 
                                                     page_select = 29U;
  
#line 448 
  temp = (unsigned short)((int)((unsigned short)offset) >> 5);
  
#line 449 
  ret_val = e1000e_write_phy_reg_mdic(hw,page_select,(unsigned short)((int)temp));
  
#line 450 
  if (ret_val != 0) {
    
#line 451 
    e1000_release_phy_80003es2lan(hw);
    
#line 452 
    __retres = ret_val;
    
#line 452 
    goto return_label;
  }
  else ;
  
#line 455 
  if ((int)hw->dev_spec.e80003es2lan.mdic_wa_enable != 0) {
    
#line 460 
    usleep_range(200UL,400UL);
    
#line 463 
    ret_val = e1000e_read_phy_reg_mdic(hw,page_select,& temp);
    
#line 465 
    if ((int)((unsigned short)offset) >> 5 != (int)temp) {
      
#line 466 
      e1000_release_phy_80003es2lan(hw);
      
#line 467 
      __retres = -2;
      
#line 467 
      goto return_label;
    }
    else ;
    
#line 470 
    usleep_range(200UL,400UL);
    
#line 472 
    ret_val = e1000e_write_phy_reg_mdic(hw,offset & 31U,(unsigned short)((int)data));
    
#line 476 
    usleep_range(200UL,400UL);
  }
  else 
#line 478 
       ret_val = e1000e_write_phy_reg_mdic(hw,offset & 31U,(unsigned short)((int)data));
  
#line 483 
  e1000_release_phy_80003es2lan(hw);
  
#line 485 
  __retres = ret_val;
  return_label: 
#line 485 
                return __retres;
}


#line 497  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_write_nvm_80003es2lan(struct e1000_hw *hw, u16 offset, u16 words, u16 *data)
{
  s32 tmp;
  
#line 500 
  tmp = e1000e_write_nvm_spi(hw,(unsigned short)((int)offset),(unsigned short)((int)words),data);
  
#line 500 
  return tmp;
}


#line 510  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_get_cfg_done_80003es2lan(struct e1000_hw *hw)
{
  s32 __retres;
  u32 tmp;
  
#line 512 
  s32 timeout = 100;
  
#line 513 
  u32 mask = 262144U;
  
#line 515 
  if ((unsigned int)hw->bus.func == 1U) 
#line 516 
                                        mask = 524288U; else ;
  
#line 518 
  goto ldv_47655;
  ldv_47654: 
#line 519 
  ;
  
#line 519 
  tmp = __er32(hw,4112UL);
  
#line 519 
  ;
  
#line 519 
  if ((tmp & mask) != 0U) 
#line 520 
                          goto ldv_47653; else ;
  
#line 521 
  usleep_range(1000UL,2000UL);
  
#line 522 
  timeout -= 1;
  ldv_47655: 
#line 523 
  ;
  
#line 518 
  if (timeout != 0) 
#line 520 
                    goto ldv_47654; else 
#line 523 
                                         goto ldv_47653;
  ldv_47653: 
#line 524 
  ;
  
#line 524 
  if (timeout == 0) {
    {
      
#line 525 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_get_cfg_done_80003es2lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = "MNG configuration cycle has not completed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))525U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 525 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 525 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"MNG configuration cycle has not completed.\n"); else ;
    }
    
#line 526 
    __retres = -9;
    
#line 526 
    goto return_label;
  }
  else ;
  
#line 529 
  __retres = 0;
  return_label: 
#line 529 
                return __retres;
}


#line 539  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_phy_force_speed_duplex_80003es2lan(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_data;
  bool link;
  
#line 548 
  ret_val = e1e_rphy(hw,16U,& phy_data);
  
#line 549 
  if (ret_val != 0) {
    
#line 550 
    __retres = ret_val;
    
#line 550 
    goto return_label;
  }
  else ;
  
#line 552 
  phy_data = (unsigned short)((unsigned int)phy_data & 65439U);
  
#line 553 
  ret_val = e1e_wphy(hw,16U,(unsigned short)((int)phy_data));
  
#line 554 
  if (ret_val != 0) {
    
#line 555 
    __retres = ret_val;
    
#line 555 
    goto return_label;
  }
  else ;
  {
    
#line 557 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_phy_force_speed_duplex_80003es2lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = "GG82563 PSCR: %X\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))557U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 557 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 557 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"GG82563 PSCR: %X\n",(int)phy_data); else ;
  }
  
#line 559 
  ret_val = e1e_rphy(hw,0U,& phy_data);
  
#line 560 
  if (ret_val != 0) {
    
#line 561 
    __retres = ret_val;
    
#line 561 
    goto return_label;
  }
  else ;
  
#line 563 
  e1000e_phy_force_speed_duplex_setup(hw,& phy_data);
  
#line 566 
  phy_data = (unsigned short)((unsigned int)phy_data | 32768U);
  
#line 568 
  ret_val = e1e_wphy(hw,0U,(unsigned short)((int)phy_data));
  
#line 569 
  if (ret_val != 0) {
    
#line 570 
    __retres = ret_val;
    
#line 570 
    goto return_label;
  }
  else ;
  
#line 572 
  __const_udelay(4295UL);
  
#line 574 
  if ((int)hw->phy.autoneg_wait_to_complete != 0) {
    {
      
#line 575 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_phy_force_speed_duplex_80003es2lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = "Waiting for forced speed/duplex link on GG82563 phy.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))575U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 575 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 575 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Waiting for forced speed/duplex link on GG82563 phy.\n"); else ;
    }
    
#line 577 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
    
#line 579 
    if (ret_val != 0) {
      
#line 580 
      __retres = ret_val;
      
#line 580 
      goto return_label;
    }
    else ;
    
#line 582 
    if (! link) {
      
#line 586 
      ret_val = e1000e_phy_reset_dsp(hw);
      
#line 587 
      if (ret_val != 0) {
        
#line 588 
        __retres = ret_val;
        
#line 588 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 592 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
    
#line 594 
    if (ret_val != 0) {
      
#line 595 
      __retres = ret_val;
      
#line 595 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 598 
  ret_val = e1e_rphy(hw,85U,& phy_data);
  
#line 599 
  if (ret_val != 0) {
    
#line 600 
    __retres = ret_val;
    
#line 600 
    goto return_label;
  }
  else ;
  
#line 605 
  phy_data = (unsigned short)((unsigned int)phy_data & 65528U);
  
#line 606 
  if (((int)hw->mac.forced_speed_duplex & 3) != 0) 
#line 607 
                                                   phy_data = (unsigned short)((unsigned int)phy_data | 4U); else 
                                                                    
#line 609 
                                                                    phy_data = (unsigned short)((unsigned int)phy_data | 5U);
  
#line 614 
  phy_data = (unsigned short)((unsigned int)phy_data | 16U);
  
#line 615 
  ret_val = e1e_wphy(hw,85U,(unsigned short)((int)phy_data));
  
#line 617 
  __retres = ret_val;
  return_label: 
#line 617 
                return __retres;
}


#line 627  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_get_cable_length_80003es2lan(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_data;
  u16 index;
  
#line 629 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 633 
  ret_val = e1e_rphy(hw,186U,& phy_data);
  
#line 634 
  if (ret_val != 0) {
    
#line 635 
    __retres = ret_val;
    
#line 635 
    goto return_label;
  }
  else ;
  
#line 637 
  index = (unsigned short)((unsigned int)phy_data & 7U);
  
#line 639 
  if ((unsigned int)index > 5U) {
    
#line 640 
    __retres = -2;
    
#line 640 
    goto return_label;
  }
  else ;
  
#line 642 
  phy->min_cable_length = e1000_gg82563_cable_length_table[(int)index];
  
#line 643 
  phy->max_cable_length = e1000_gg82563_cable_length_table[(int)index + 5];
  
#line 645 
  phy->cable_length = (unsigned short)(((int)phy->min_cable_length + (int)phy->max_cable_length) / 2);
  
#line 647 
  __retres = 0;
  return_label: 
#line 647 
                return __retres;
}


#line 658  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_get_link_up_info_80003es2lan(struct e1000_hw *hw, u16 *speed, u16 *duplex)
{
  s32 ret_val;
  
#line 663 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
    
#line 664 
    ret_val = e1000e_get_speed_and_duplex_copper(hw,speed,duplex);
    
#line 665 
    (*(hw->phy.ops.cfg_on_link_up))(hw);
  }
  else 
#line 667 
       ret_val = e1000e_get_speed_and_duplex_fiber_serdes(hw,speed,duplex);
  
#line 672 
  return ret_val;
}


#line 681  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_reset_hw_80003es2lan(struct e1000_hw *hw)
{
  s32 __retres;
  u32 ctrl;
  s32 ret_val;
  u16 kum_reg_data;
  s32 tmp;
  
#line 690 
  ret_val = e1000e_disable_pcie_master(hw);
  
#line 691 
  if (ret_val != 0) {
    
#line 692 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_reset_hw_80003es2lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = "PCI-E Master disable polling has failed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))692U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 692 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 692 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"PCI-E Master disable polling has failed.\n"); else ;
  }
  else ;
  {
    
#line 694 
    struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_reset_hw_80003es2lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = "Masking off all interrupts\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))694U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 694 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 694 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Masking off all interrupts\n"); else ;
  }
  
#line 695 
  __ew32(hw,216UL,4294967295U);
  
#line 697 
  __ew32(hw,256UL,0U);
  
#line 698 
  __ew32(hw,1024UL,8U);
  
#line 699 
  __er32(hw,8UL);
  
#line 701 
  usleep_range(10000UL,20000UL);
  
#line 703 
  ctrl = __er32(hw,0UL);
  
#line 705 
  ret_val = e1000_acquire_phy_80003es2lan(hw);
  
#line 706 
  if (ret_val != 0) {
    
#line 707 
    __retres = ret_val;
    
#line 707 
    goto return_label;
  }
  else ;
  {
    
#line 709 
    struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_reset_hw_80003es2lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = "Issuing a global reset to MAC\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))709U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 709 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 709 
                                                          __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Issuing a global reset to MAC\n"); else ;
  }
  
#line 710 
  __ew32(hw,0UL,ctrl | 67108864U);
  
#line 711 
  e1000_release_phy_80003es2lan(hw);
  
#line 714 
  ret_val = e1000_read_kmrn_reg_80003es2lan(hw,9U,& kum_reg_data);
  
#line 717 
  if (ret_val != 0) {
    
#line 718 
    __retres = ret_val;
    
#line 718 
    goto return_label;
  }
  else ;
  
#line 719 
  kum_reg_data = (unsigned short)((unsigned int)kum_reg_data | 512U);
  
#line 720 
  e1000_write_kmrn_reg_80003es2lan(hw,9U,(unsigned short)((int)kum_reg_data));
  
#line 723 
  ret_val = e1000e_get_auto_rd_done(hw);
  
#line 724 
  if (ret_val != 0) {
    
#line 726 
    __retres = ret_val;
    
#line 726 
    goto return_label;
  }
  else ;
  
#line 729 
  __ew32(hw,216UL,4294967295U);
  
#line 730 
  __er32(hw,192UL);
  
#line 732 
  tmp = e1000_check_alt_mac_addr_generic(hw);
  
#line 732 
  __retres = tmp;
  return_label: 
#line 732 
                return __retres;
}


#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_init_hw_80003es2lan(struct e1000_hw *hw)
{
  s32 __retres;
  u32 reg_data;
  s32 ret_val;
  u16 kum_reg_data;
  u16 i;
  
#line 743 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 749 
  e1000_initialize_hw_bits_80003es2lan(hw);
  
#line 752 
  ret_val = (*(mac->ops.id_led_init))(hw);
  
#line 754 
  if (ret_val != 0) {
    
#line 755 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_init_hw_80003es2lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = "Error initializing identification LED\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))755U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 755 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 755 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Error initializing identification LED\n"); else ;
  }
  else ;
  {
    
#line 758 
    struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_init_hw_80003es2lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = "Initializing the IEEE VLAN\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))758U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 758 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 758 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Initializing the IEEE VLAN\n"); else ;
  }
  
#line 759 
  (*(mac->ops.clear_vfta))(hw);
  
#line 762 
  e1000e_init_rx_addrs(hw,(unsigned short)((int)mac->rar_entry_count));
  {
    
#line 765 
    struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_init_hw_80003es2lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = "Zeroing the MTA\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))765U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 765 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 765 
                                                          __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Zeroing the MTA\n"); else ;
  }
  
#line 766 
  i = (unsigned short)0U;
  
#line 766 
  goto ldv_47706;
  ldv_47705: 
#line 767 
  ;
  
#line 767 
  __ew32(hw,(unsigned long)(((int)i << 2) + 20992),0U);
  
#line 766 
  i = (u16)((int)i + 1);
  ldv_47706: 
#line 767 
  ;
  
#line 766 
  if ((int)mac->mta_reg_count > (int)i) 
#line 768 
                                        goto ldv_47705; else 
#line 771 
                                                             goto ldv_47707;
  ldv_47707: 
#line 772 
  ;
  
#line 770 
  ret_val = (*(mac->ops.setup_link))(hw);
  
#line 771 
  if (ret_val != 0) {
    
#line 772 
    __retres = ret_val;
    
#line 772 
    goto return_label;
  }
  else ;
  
#line 775 
  e1000_read_kmrn_reg_80003es2lan(hw,9U,& kum_reg_data);
  
#line 777 
  kum_reg_data = (unsigned short)((unsigned int)kum_reg_data | 512U);
  
#line 778 
  e1000_write_kmrn_reg_80003es2lan(hw,9U,(unsigned short)((int)kum_reg_data));
  
#line 782 
  reg_data = __er32(hw,14376UL);
  
#line 783 
  reg_data = (reg_data & 4269867007U) | 21037056U;
  
#line 785 
  __ew32(hw,14376UL,reg_data);
  
#line 788 
  reg_data = __er32(hw,14632UL);
  
#line 789 
  reg_data = (reg_data & 4269867007U) | 21037056U;
  
#line 791 
  __ew32(hw,14632UL,reg_data);
  
#line 794 
  reg_data = __er32(hw,1024UL);
  
#line 795 
  reg_data |= 16777216U;
  
#line 796 
  __ew32(hw,1024UL,reg_data);
  
#line 799 
  reg_data = __er32(hw,1028UL);
  
#line 800 
  reg_data &= 4293919743U;
  
#line 801 
  reg_data |= 65536U;
  
#line 802 
  __ew32(hw,1028UL,reg_data);
  
#line 805 
  reg_data = __er32(hw,1040UL);
  
#line 806 
  reg_data &= 4294966272U;
  
#line 807 
  reg_data |= 8U;
  
#line 808 
  __ew32(hw,1040UL,reg_data);
  
#line 810 
  reg_data = readl((void const volatile *)(hw->hw_addr + 24324U));
  
#line 811 
  reg_data &= 4293918719U;
  
#line 812 
  __ew32(hw,24324UL,reg_data);
  
#line 815 
  hw->dev_spec.e80003es2lan.mdic_wa_enable = (_Bool)1;
  
#line 817 
  ret_val = e1000_read_kmrn_reg_80003es2lan(hw,31U,& i);
  
#line 820 
  if (ret_val == 0) {
    
#line 821 
    if (((int)i & 12) == 4) 
#line 823 
                            hw->dev_spec.e80003es2lan.mdic_wa_enable = (_Bool)0; else ;
  }
  else ;
  
#line 831 
  e1000_clear_hw_cntrs_80003es2lan(hw);
  
#line 833 
  __retres = ret_val;
  return_label: 
#line 833 
                return __retres;
}


#line 842  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static void e1000_initialize_hw_bits_80003es2lan(struct e1000_hw *hw)
{
  u32 reg;
  u32 tmp;
  
#line 847 
  reg = __er32(hw,14376UL);
  
#line 848 
  reg |= 4194304U;
  
#line 849 
  __ew32(hw,14376UL,reg);
  
#line 852 
  reg = __er32(hw,14632UL);
  
#line 853 
  reg |= 4194304U;
  
#line 854 
  __ew32(hw,14632UL,reg);
  
#line 857 
  reg = __er32(hw,14400UL);
  
#line 858 
  reg &= 2281701375U;
  
#line 859 
  if (hw->phy.media_type != (unsigned int)e1000_media_type_copper) 
#line 860 
                                                                   reg &= 4293918719U; else ;
  
#line 861 
  __ew32(hw,14400UL,reg);
  
#line 864 
  reg = __er32(hw,14656UL);
  
#line 865 
  tmp = __er32(hw,1024UL);
  
#line 865 
  if ((tmp & 268435456U) != 0U) 
#line 866 
                                reg &= 4026531839U; else 
#line 868 
                                                         reg |= 268435456U;
  
#line 869 
  __ew32(hw,14656UL,reg);
  
#line 874 
  reg = __er32(hw,20488UL);
  
#line 875 
  reg |= 196608U;
  
#line 876 
  __ew32(hw,20488UL,reg);
  
#line 877 
  return;
}


#line 885  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_copper_link_setup_gg82563_80003es2lan(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u32 reg;
  u16 data;
  int tmp_0;
  bool tmp;
  
#line 887 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 892 
  ret_val = e1e_rphy(hw,85U,& data);
  
#line 893 
  if (ret_val != 0) {
    
#line 894 
    __retres = ret_val;
    
#line 894 
    goto return_label;
  }
  else ;
  
#line 896 
  data = (unsigned short)((unsigned int)data | 16U);
  
#line 898 
  data = (unsigned short)((unsigned int)data | 7U);
  
#line 900 
  ret_val = e1e_wphy(hw,85U,(unsigned short)((int)data));
  
#line 901 
  if (ret_val != 0) {
    
#line 902 
    __retres = ret_val;
    
#line 902 
    goto return_label;
  }
  else ;
  
#line 911 
  ret_val = e1e_rphy(hw,16U,& data);
  
#line 912 
  if (ret_val != 0) {
    
#line 913 
    __retres = ret_val;
    
#line 913 
    goto return_label;
  }
  else ;
  
#line 915 
  data = (unsigned short)((unsigned int)data & 65439U);
  
#line 917 
  switch ((int)phy->mdix) {
    case 1: 
#line 918 
    ;
    
#line 919 
    data = data;
    
#line 920 
    goto ldv_47720;
    case 2: 
#line 921 
    ;
    
#line 922 
    data = (unsigned short)((unsigned int)data | 32U);
    
#line 923 
    goto ldv_47720;
    case 0: 
#line 924 
    ;
    default: 
#line 925 
    ;
    
#line 926 
    data = (unsigned short)((unsigned int)data | 96U);
    
#line 927 
    goto ldv_47720;
  }
  ldv_47720: 
#line 936 
  ;
  
#line 936 
  data = (unsigned short)((unsigned int)data & 65533U);
  
#line 937 
  if ((int)phy->disable_polarity_correction != 0) 
#line 938 
                                                  data = (unsigned short)((unsigned int)data | 2U); else ;
  
#line 940 
  ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
  
#line 941 
  if (ret_val != 0) {
    
#line 942 
    __retres = ret_val;
    
#line 942 
    goto return_label;
  }
  else ;
  
#line 945 
  ret_val = (*(hw->phy.ops.commit))(hw);
  
#line 946 
  if (ret_val != 0) {
    {
      
#line 947 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_copper_link_setup_gg82563_80003es2lan", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c", .format = "Error Resetting the PHY\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))947U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 947 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 947 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Error Resetting the PHY\n"); else ;
    }
    
#line 948 
    __retres = ret_val;
    
#line 948 
    goto return_label;
  }
  else ;
  
#line 952 
  reg = 0U;
  
#line 953 
  data = (unsigned short)2056U;
  
#line 955 
  ret_val = e1000_write_kmrn_reg_80003es2lan(hw,reg,(unsigned short)((int)data));
  
#line 956 
  if (ret_val != 0) {
    
#line 957 
    __retres = ret_val;
    
#line 957 
    goto return_label;
  }
  else ;
  
#line 959 
  reg = 31U;
  
#line 960 
  ret_val = e1000_read_kmrn_reg_80003es2lan(hw,reg,& data);
  
#line 961 
  if (ret_val != 0) {
    
#line 962 
    __retres = ret_val;
    
#line 962 
    goto return_label;
  }
  else ;
  
#line 963 
  data = (unsigned short)((unsigned int)data | 8192U);
  
#line 964 
  ret_val = e1000_write_kmrn_reg_80003es2lan(hw,reg,(unsigned short)((int)data));
  
#line 965 
  if (ret_val != 0) {
    
#line 966 
    __retres = ret_val;
    
#line 966 
    goto return_label;
  }
  else ;
  
#line 968 
  ret_val = e1e_rphy(hw,26U,& data);
  
#line 969 
  if (ret_val != 0) {
    
#line 970 
    __retres = ret_val;
    
#line 970 
    goto return_label;
  }
  else ;
  
#line 972 
  data = (unsigned short)((unsigned int)data & 57343U);
  
#line 973 
  ret_val = e1e_wphy(hw,26U,(unsigned short)((int)data));
  
#line 974 
  if (ret_val != 0) {
    
#line 975 
    __retres = ret_val;
    
#line 975 
    goto return_label;
  }
  else ;
  
#line 977 
  reg = __er32(hw,24UL);
  
#line 978 
  reg &= 4282384383U;
  
#line 979 
  __ew32(hw,24UL,reg);
  
#line 981 
  ret_val = e1e_rphy(hw,6196U,& data);
  
#line 982 
  if (ret_val != 0) {
    
#line 983 
    __retres = ret_val;
    
#line 983 
    goto return_label;
  }
  else ;
  
#line 989 
  tmp = (*(hw->mac.ops.check_mng_mode))(hw);
  
#line 989 
  if (tmp) 
#line 989 
           tmp_0 = 0; else 
#line 989 
                           tmp_0 = 1;
  
#line 989 
  if (tmp_0) {
    
#line 991 
    data = (unsigned short)((unsigned int)data | 1U);
    
#line 992 
    ret_val = e1e_wphy(hw,6196U,(unsigned short)((int)data));
    
#line 993 
    if (ret_val != 0) {
      
#line 994 
      __retres = ret_val;
      
#line 994 
      goto return_label;
    }
    else ;
    
#line 996 
    ret_val = e1e_rphy(hw,6192U,& data);
    
#line 997 
    if (ret_val != 0) {
      
#line 998 
      __retres = ret_val;
      
#line 998 
      goto return_label;
    }
    else ;
    
#line 1000 
    data = (unsigned short)((unsigned int)data & 63487U);
    
#line 1001 
    ret_val = e1e_wphy(hw,6192U,(unsigned short)((int)data));
    
#line 1002 
    if (ret_val != 0) {
      
#line 1003 
      __retres = ret_val;
      
#line 1003 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1009 
  ret_val = e1e_rphy(hw,6226U,& data);
  
#line 1010 
  if (ret_val != 0) {
    
#line 1011 
    __retres = ret_val;
    
#line 1011 
    goto return_label;
  }
  else ;
  
#line 1013 
  data = (unsigned short)((unsigned int)data | 16U);
  
#line 1014 
  ret_val = e1e_wphy(hw,6226U,(unsigned short)((int)data));
  
#line 1015 
  if (ret_val != 0) {
    
#line 1016 
    __retres = ret_val;
    
#line 1016 
    goto return_label;
  }
  else ;
  
#line 1018 
  __retres = 0;
  return_label: 
#line 1018 
                return __retres;
}


#line 1028  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_setup_copper_link_80003es2lan(struct e1000_hw *hw)
{
  s32 __retres;
  u32 ctrl;
  s32 ret_val;
  u16 reg_data;
  s32 tmp;
  
#line 1034 
  ctrl = __er32(hw,0UL);
  
#line 1035 
  ctrl |= 64U;
  
#line 1036 
  ctrl &= 4294961151U;
  
#line 1037 
  __ew32(hw,0UL,ctrl);
  
#line 1043 
  ret_val = e1000_write_kmrn_reg_80003es2lan(hw,1668U,(unsigned short)65535);
  
#line 1045 
  if (ret_val != 0) {
    
#line 1046 
    __retres = ret_val;
    
#line 1046 
    goto return_label;
  }
  else ;
  
#line 1047 
  ret_val = e1000_read_kmrn_reg_80003es2lan(hw,1673U,& reg_data);
  
#line 1049 
  if (ret_val != 0) {
    
#line 1050 
    __retres = ret_val;
    
#line 1050 
    goto return_label;
  }
  else ;
  
#line 1051 
  reg_data = (unsigned short)((unsigned int)reg_data | 63U);
  
#line 1052 
  ret_val = e1000_write_kmrn_reg_80003es2lan(hw,1673U,(unsigned short)((int)reg_data));
  
#line 1054 
  if (ret_val != 0) {
    
#line 1055 
    __retres = ret_val;
    
#line 1055 
    goto return_label;
  }
  else ;
  
#line 1056 
  ret_val = e1000_read_kmrn_reg_80003es2lan(hw,2U,& reg_data);
  
#line 1060 
  if (ret_val != 0) {
    
#line 1061 
    __retres = ret_val;
    
#line 1061 
    goto return_label;
  }
  else ;
  
#line 1062 
  reg_data = (unsigned short)((unsigned int)reg_data | 16U);
  
#line 1063 
  ret_val = e1000_write_kmrn_reg_80003es2lan(hw,2U,(unsigned short)((int)reg_data));
  
#line 1067 
  if (ret_val != 0) {
    
#line 1068 
    __retres = ret_val;
    
#line 1068 
    goto return_label;
  }
  else ;
  
#line 1070 
  ret_val = e1000_copper_link_setup_gg82563_80003es2lan(hw);
  
#line 1071 
  if (ret_val != 0) {
    
#line 1072 
    __retres = ret_val;
    
#line 1072 
    goto return_label;
  }
  else ;
  
#line 1074 
  tmp = e1000e_setup_copper_link(hw);
  
#line 1074 
  __retres = tmp;
  return_label: 
#line 1074 
                return __retres;
}


#line 1085  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_cfg_on_link_up_80003es2lan(struct e1000_hw *hw)
{
  s32 __retres;
  u16 speed;
  u16 duplex;
  
#line 1087 
  s32 ret_val = 0;
  
#line 1091 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) {
    
#line 1092 
    ret_val = e1000e_get_speed_and_duplex_copper(hw,& speed,& duplex);
    
#line 1094 
    if (ret_val != 0) {
      
#line 1095 
      __retres = ret_val;
      
#line 1095 
      goto return_label;
    }
    else ;
    
#line 1097 
    if ((unsigned int)speed == 1000U) 
#line 1098 
                                      ret_val = e1000_cfg_kmrn_1000_80003es2lan(hw); else 
                                                                    
#line 1100 
                                                                    ret_val = e1000_cfg_kmrn_10_100_80003es2lan(hw,(unsigned short)((int)duplex));
  }
  else ;
  
#line 1103 
  __retres = ret_val;
  return_label: 
#line 1103 
                return __retres;
}


#line 1114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_cfg_kmrn_10_100_80003es2lan(struct e1000_hw *hw, u16 duplex)
{
  s32 __retres;
  s32 ret_val;
  u32 tipg;
  u16 reg_data;
  u16 reg_data2;
  s32 tmp;
  
#line 1118 
  u32 i = 0U;
  
#line 1121 
  reg_data = (unsigned short)4U;
  
#line 1122 
  ret_val = e1000_write_kmrn_reg_80003es2lan(hw,16U,(unsigned short)((int)reg_data));
  
#line 1126 
  if (ret_val != 0) {
    
#line 1127 
    __retres = ret_val;
    
#line 1127 
    goto return_label;
  }
  else ;
  
#line 1130 
  tipg = __er32(hw,1040UL);
  
#line 1131 
  tipg &= 4294966272U;
  
#line 1132 
  tipg |= 9U;
  
#line 1133 
  __ew32(hw,1040UL,tipg);
  ldv_47747: 
#line 1134 
  ;
  
#line 1136 
  ret_val = e1e_rphy(hw,6192U,& reg_data);
  
#line 1137 
  if (ret_val != 0) {
    
#line 1138 
    __retres = ret_val;
    
#line 1138 
    goto return_label;
  }
  else ;
  
#line 1140 
  ret_val = e1e_rphy(hw,6192U,& reg_data2);
  
#line 1141 
  if (ret_val != 0) {
    
#line 1142 
    __retres = ret_val;
    
#line 1142 
    goto return_label;
  }
  else ;
  
#line 1143 
  i += 1U;
  
#line 1144 
  if ((int)reg_data != (int)reg_data2 && i <= 4U) 
#line 1146 
                                                  goto ldv_47747; else 
                                                                    
#line 1149 
                                                                    goto ldv_47748;
  ldv_47748: 
#line 1150 
  ;
  
#line 1146 
  if ((unsigned int)duplex == 1U) 
#line 1147 
                                  reg_data = (unsigned short)((unsigned int)reg_data | 2048U); else 
                                                                    
#line 1149 
                                                                    reg_data = (unsigned short)((unsigned int)reg_data & 63487U);
  
#line 1151 
  tmp = e1e_wphy(hw,6192U,(unsigned short)((int)reg_data));
  
#line 1151 
  __retres = tmp;
  return_label: 
#line 1151 
                return __retres;
}


#line 1161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_cfg_kmrn_1000_80003es2lan(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 reg_data;
  u16 reg_data2;
  u32 tipg;
  s32 tmp;
  
#line 1166 
  u32 i = 0U;
  
#line 1168 
  reg_data = (unsigned short)0U;
  
#line 1169 
  ret_val = e1000_write_kmrn_reg_80003es2lan(hw,16U,(unsigned short)((int)reg_data));
  
#line 1173 
  if (ret_val != 0) {
    
#line 1174 
    __retres = ret_val;
    
#line 1174 
    goto return_label;
  }
  else ;
  
#line 1177 
  tipg = __er32(hw,1040UL);
  
#line 1178 
  tipg &= 4294966272U;
  
#line 1179 
  tipg |= 8U;
  
#line 1180 
  __ew32(hw,1040UL,tipg);
  ldv_47757: 
#line 1181 
  ;
  
#line 1183 
  ret_val = e1e_rphy(hw,6192U,& reg_data);
  
#line 1184 
  if (ret_val != 0) {
    
#line 1185 
    __retres = ret_val;
    
#line 1185 
    goto return_label;
  }
  else ;
  
#line 1187 
  ret_val = e1e_rphy(hw,6192U,& reg_data2);
  
#line 1188 
  if (ret_val != 0) {
    
#line 1189 
    __retres = ret_val;
    
#line 1189 
    goto return_label;
  }
  else ;
  
#line 1190 
  i += 1U;
  
#line 1191 
  if ((int)reg_data != (int)reg_data2 && i <= 4U) 
#line 1193 
                                                  goto ldv_47757; else 
                                                                    
#line 1196 
                                                                    goto ldv_47758;
  ldv_47758: 
#line 1197 
  ;
  
#line 1193 
  reg_data = (unsigned short)((unsigned int)reg_data & 63487U);
  
#line 1195 
  tmp = e1e_wphy(hw,6192U,(unsigned short)((int)reg_data));
  
#line 1195 
  __retres = tmp;
  return_label: 
#line 1195 
                return __retres;
}


#line 1208  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_read_kmrn_reg_80003es2lan(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 __retres;
  u32 kmrnctrlsta;
  s32 ret_val;
  
#line 1214 
  ret_val = e1000_acquire_mac_csr_80003es2lan(hw);
  
#line 1215 
  if (ret_val != 0) {
    
#line 1216 
    __retres = ret_val;
    
#line 1216 
    goto return_label;
  }
  else ;
  
#line 1218 
  kmrnctrlsta = ((offset << 16) & 2031616U) | 2097152U;
  
#line 1220 
  __ew32(hw,52UL,kmrnctrlsta);
  
#line 1221 
  __er32(hw,8UL);
  
#line 1223 
  __const_udelay(8590UL);
  
#line 1225 
  kmrnctrlsta = __er32(hw,52UL);
  
#line 1226 
  *data = (unsigned short)kmrnctrlsta;
  
#line 1228 
  e1000_release_mac_csr_80003es2lan(hw);
  
#line 1230 
  __retres = ret_val;
  return_label: 
#line 1230 
                return __retres;
}


#line 1243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_write_kmrn_reg_80003es2lan(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 __retres;
  u32 kmrnctrlsta;
  s32 ret_val;
  
#line 1249 
  ret_val = e1000_acquire_mac_csr_80003es2lan(hw);
  
#line 1250 
  if (ret_val != 0) {
    
#line 1251 
    __retres = ret_val;
    
#line 1251 
    goto return_label;
  }
  else ;
  
#line 1253 
  kmrnctrlsta = ((offset << 16) & 2031616U) | (unsigned int)data;
  
#line 1255 
  __ew32(hw,52UL,kmrnctrlsta);
  
#line 1256 
  __er32(hw,8UL);
  
#line 1258 
  __const_udelay(8590UL);
  
#line 1260 
  e1000_release_mac_csr_80003es2lan(hw);
  
#line 1262 
  __retres = ret_val;
  return_label: 
#line 1262 
                return __retres;
}


#line 1269  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static s32 e1000_read_mac_addr_80003es2lan(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  s32 tmp;
  
#line 1277 
  ret_val = e1000_check_alt_mac_addr_generic(hw);
  
#line 1278 
  if (ret_val != 0) {
    
#line 1279 
    __retres = ret_val;
    
#line 1279 
    goto return_label;
  }
  else ;
  
#line 1281 
  tmp = e1000_read_mac_addr_generic(hw);
  
#line 1281 
  __retres = tmp;
  return_label: 
#line 1281 
                return __retres;
}


#line 1291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static void e1000_power_down_phy_copper_80003es2lan(struct e1000_hw *hw)
{
  int tmp_0;
  bool tmp;
  
#line 1294 
  tmp = (*(hw->mac.ops.check_mng_mode))(hw);
  
#line 1294 
  if (tmp) 
#line 1294 
           tmp_0 = 0; else 
#line 1294 
                           tmp_0 = 1;
  
#line 1294 
  if (tmp_0) {
    s32 tmp_1;
    
#line 1294 
    tmp_1 = (*(hw->phy.ops.check_reset_block))(hw);
    
#line 1294 
    if (tmp_1 == 0) 
#line 1296 
                    e1000_power_down_phy_copper(hw); else ;
  }
  else ;
  
#line 1297 
  return;
}


#line 1305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static void e1000_clear_hw_cntrs_80003es2lan(struct e1000_hw *hw)
{
  
#line 1307 
  e1000e_clear_hw_cntrs_base(hw);
  
#line 1309 
  __er32(hw,16476UL);
  
#line 1310 
  __er32(hw,16480UL);
  
#line 1311 
  __er32(hw,16484UL);
  
#line 1312 
  __er32(hw,16488UL);
  
#line 1313 
  __er32(hw,16492UL);
  
#line 1314 
  __er32(hw,16496UL);
  
#line 1315 
  __er32(hw,16600UL);
  
#line 1316 
  __er32(hw,16604UL);
  
#line 1317 
  __er32(hw,16608UL);
  
#line 1318 
  __er32(hw,16612UL);
  
#line 1319 
  __er32(hw,16616UL);
  
#line 1320 
  __er32(hw,16620UL);
  
#line 1322 
  __er32(hw,16388UL);
  
#line 1323 
  __er32(hw,16396UL);
  
#line 1324 
  __er32(hw,16436UL);
  
#line 1325 
  __er32(hw,16444UL);
  
#line 1326 
  __er32(hw,16632UL);
  
#line 1327 
  __er32(hw,16636UL);
  
#line 1329 
  __er32(hw,16564UL);
  
#line 1330 
  __er32(hw,16568UL);
  
#line 1331 
  __er32(hw,16572UL);
  
#line 1333 
  __er32(hw,16640UL);
  
#line 1334 
  __er32(hw,16676UL);
  
#line 1336 
  __er32(hw,16644UL);
  
#line 1337 
  __er32(hw,16648UL);
  
#line 1338 
  __er32(hw,16652UL);
  
#line 1339 
  __er32(hw,16656UL);
  
#line 1340 
  __er32(hw,16664UL);
  
#line 1341 
  __er32(hw,16668UL);
  
#line 1342 
  __er32(hw,16672UL);
  
#line 1343 
  return;
}


#line 1345  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static struct e1000_mac_operations const es2_mac_ops = {.id_led_init = & e1000e_id_led_init_generic, .blink_led = & e1000e_blink_led_generic, .check_mng_mode = & e1000e_check_mng_mode_generic, .check_for_link = (s32 (*)(struct e1000_hw *))0, .cleanup_led = & e1000e_cleanup_led_generic, .clear_hw_cntrs = & e1000_clear_hw_cntrs_80003es2lan, .clear_vfta = & e1000_clear_vfta_generic, .get_bus_info = & e1000e_get_bus_info_pcie, .set_lan_id = & e1000_set_lan_id_multi_port_pcie, .get_link_up_info = & e1000_get_link_up_info_80003es2lan, .led_on = & e1000e_led_on_generic, .led_off = & e1000e_led_off_generic, .update_mc_addr_list = & e1000e_update_mc_addr_list_generic, .reset_hw = & e1000_reset_hw_80003es2lan, .init_hw = & e1000_init_hw_80003es2lan, .setup_link = & e1000e_setup_link_generic, .setup_physical_interface = (s32 (*)(struct e1000_hw *))0, .setup_led = & e1000e_setup_led_generic, .write_vfta = & e1000_write_vfta_generic, .config_collision_dist = & e1000e_config_collision_dist_generic, .rar_set = & e1000e_rar_set_generic, .read_mac_addr = & e1000_read_mac_addr_80003es2lan, .rar_get_count = & e1000e_rar_get_count_generic};

#line 1371  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static struct e1000_phy_operations const es2_phy_ops = {.acquire = & e1000_acquire_phy_80003es2lan, .cfg_on_link_up = & e1000_cfg_on_link_up_80003es2lan, .check_polarity = & e1000_check_polarity_m88, .check_reset_block = & e1000e_check_reset_block_generic, .commit = & e1000e_phy_sw_reset, .force_speed_duplex = & e1000_phy_force_speed_duplex_80003es2lan, .get_cfg_done = & e1000_get_cfg_done_80003es2lan, .get_cable_length = & e1000_get_cable_length_80003es2lan, .get_info = & e1000e_get_phy_info_m88, .set_page = (s32 (*)(struct e1000_hw *, u16 ))0, .read_reg = & e1000_read_phy_reg_gg82563_80003es2lan, .read_reg_locked = (s32 (*)(struct e1000_hw *, u32 , u16 *))0, .read_reg_page = (s32 (*)(struct e1000_hw *, u32 , u16 *))0, .release = & e1000_release_phy_80003es2lan, .reset = & e1000e_phy_hw_reset_generic, .set_d0_lplu_state = (s32 (*)(struct e1000_hw *, bool ))0, .set_d3_lplu_state = & e1000e_set_d3_lplu_state, .write_reg = & e1000_write_phy_reg_gg82563_80003es2lan, .write_reg_locked = (s32 (*)(struct e1000_hw *, u32 , u16 ))0, .write_reg_page = (s32 (*)(struct e1000_hw *, u32 , u16 ))0, .power_up = (void (*)(struct e1000_hw *))0, .power_down = (void (*)(struct e1000_hw *))0};

#line 1389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
static struct e1000_nvm_operations const es2_nvm_ops = {.acquire = & e1000_acquire_nvm_80003es2lan, .read = & e1000e_read_nvm_eerd, .release = & e1000_release_nvm_80003es2lan, .reload = & e1000e_reload_nvm_generic, .update = & e1000e_update_nvm_checksum_generic, .valid_led_default = & e1000e_valid_led_default, .validate = & e1000e_validate_nvm_checksum_generic, .write = & e1000_write_nvm_80003es2lan};

#line 1400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/80003es2lan.c"
struct e1000_info const e1000_es2_info = {.mac = e1000_80003es2lan, .flags = 25624748U, .flags2 = 64U, .pba = 38U, .max_hw_frame_size = 9234U, .get_variants = & e1000_get_variants_80003es2lan, .mac_ops = & es2_mac_ops, .phy_ops = & es2_phy_ops, .nvm_ops = & es2_nvm_ops};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 e1000_wait_autoneg(struct e1000_hw *hw);


#line 25 
static s32 e1000_access_phy_wakeup_reg_bm(struct e1000_hw *hw, u32 offset, u16 *data, bool read, bool page_set);


#line 27 
static u32 e1000_get_phy_addr_for_hv_page(u32 page);


#line 28 
static s32 e1000_access_phy_debug_regs_hv(struct e1000_hw *hw, u32 offset, u16 *data, bool read);


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static u16 const e1000_m88_cable_length_table[7U] = {(unsigned short)0U, (unsigned short)50U, (unsigned short)80U, (unsigned short)110U, (unsigned short)140U, (unsigned short)140U, (unsigned short)255U};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static u16 const e1000_igp_2_cable_length_table[113U] = {(unsigned short)0U, (unsigned short)0U, (unsigned short)0U, (unsigned short)0U, (unsigned short)0U, (unsigned short)0U, (unsigned short)0U, (unsigned short)0U, (unsigned short)3U, (unsigned short)5U, (unsigned short)8U, (unsigned short)11U, (unsigned short)13U, (unsigned short)16U, (unsigned short)18U, (unsigned short)21U, (unsigned short)0U, (unsigned short)0U, (unsigned short)0U, (unsigned short)3U, (unsigned short)6U, (unsigned short)10U, (unsigned short)13U, (unsigned short)16U, (unsigned short)19U, (unsigned short)23U, (unsigned short)26U, (unsigned short)29U, (unsigned short)32U, (unsigned short)35U, (unsigned short)38U, (unsigned short)41U, (unsigned short)6U, (unsigned short)10U, (unsigned short)14U, (unsigned short)18U, (unsigned short)22U, (unsigned short)26U, (unsigned short)30U, (unsigned short)33U, (unsigned short)37U, (unsigned short)41U, (unsigned short)44U, (unsigned short)48U, (unsigned short)51U, (unsigned short)54U, (unsigned short)58U, (unsigned short)61U, (unsigned short)21U, (unsigned short)26U, (unsigned short)31U, (unsigned short)35U, (unsigned short)40U, (unsigned short)44U, (unsigned short)49U, (unsigned short)53U, (unsigned short)57U, (unsigned short)61U, (unsigned short)65U, (unsigned short)68U, (unsigned short)72U, (unsigned short)75U, (unsigned short)79U, (unsigned short)82U, (unsigned short)40U, (unsigned short)45U, (unsigned short)51U, (unsigned short)56U, (unsigned short)61U, (unsigned short)66U, (unsigned short)70U, (unsigned short)75U, (unsigned short)79U, (unsigned short)83U, (unsigned short)87U, (unsigned short)91U, (unsigned short)94U, (unsigned short)98U, (unsigned short)101U, (unsigned short)104U, (unsigned short)60U, (unsigned short)66U, (unsigned short)72U, (unsigned short)77U, (unsigned short)82U, (unsigned short)87U, (unsigned short)92U, (unsigned short)96U, (unsigned short)100U, (unsigned short)104U, (unsigned short)108U, (unsigned short)111U, (unsigned short)114U, (unsigned short)117U, (unsigned short)119U, (unsigned short)121U, (unsigned short)83U, (unsigned short)89U, (unsigned short)95U, (unsigned short)100U, (unsigned short)105U, (unsigned short)109U, (unsigned short)113U, (unsigned short)116U, (unsigned short)119U, (unsigned short)122U, (unsigned short)124U, (unsigned short)104U, (unsigned short)109U, (unsigned short)114U, (unsigned short)118U, (unsigned short)121U, (unsigned short)124U};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_check_reset_block_generic(struct e1000_hw *hw)
{
  u32 manc;
  int tmp;
  
#line 65 
  manc = __er32(hw,22560UL);
  
#line 67 
  if ((manc & 262144U) != 0U) 
#line 67 
                              tmp = 12; else 
#line 67 
                                             tmp = 0;
  
#line 67 
  return tmp;
}


#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_get_phy_id(struct e1000_hw *hw)
{
  s32 __retres;
  u16 phy_id;
  
#line 79 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 80 
  s32 ret_val = 0;
  
#line 82 
  u16 retry_count = (unsigned short)0U;
  
#line 84 
  if (phy->ops.read_reg == (s32 (*)(struct e1000_hw *, u32 , u16 *))0) {
    
#line 85 
    __retres = 0;
    
#line 85 
    goto return_label;
  }
  else ;
  
#line 87 
  goto ldv_47551;
  ldv_47550: 
#line 88 
  ;
  
#line 88 
  ret_val = e1e_rphy(hw,2U,& phy_id);
  
#line 89 
  if (ret_val != 0) {
    
#line 90 
    __retres = ret_val;
    
#line 90 
    goto return_label;
  }
  else ;
  
#line 92 
  phy->id = (unsigned int)((int)phy_id << 16);
  
#line 93 
  usleep_range(20UL,40UL);
  
#line 94 
  ret_val = e1e_rphy(hw,3U,& phy_id);
  
#line 95 
  if (ret_val != 0) {
    
#line 96 
    __retres = ret_val;
    
#line 96 
    goto return_label;
  }
  else ;
  
#line 98 
  phy->id |= (unsigned int)phy_id & 4294967280U;
  
#line 99 
  phy->revision = (unsigned int)phy_id & 15U;
  
#line 101 
  if (phy->id != 0U && phy->id != 4294967280U) {
    
#line 102 
    __retres = 0;
    
#line 102 
    goto return_label;
  }
  else ;
  
#line 104 
  retry_count = (u16)((int)retry_count + 1);
  ldv_47551: 
#line 105 
  ;
  
#line 87 
  if ((unsigned int)retry_count <= 1U) 
#line 89 
                                       goto ldv_47550; else 
#line 92 
                                                            goto ldv_47552;
  ldv_47552: 
#line 93 
  ;
  
#line 107 
  __retres = 0;
  return_label: 
#line 107 
                return __retres;
}


#line 116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_phy_reset_dsp(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  s32 tmp;
  
#line 120 
  ret_val = e1e_wphy(hw,30U,(unsigned short)193);
  
#line 121 
  if (ret_val != 0) {
    
#line 122 
    __retres = ret_val;
    
#line 122 
    goto return_label;
  }
  else ;
  
#line 124 
  tmp = e1e_wphy(hw,30U,(unsigned short)0);
  
#line 124 
  __retres = tmp;
  return_label: 
#line 124 
                return __retres;
}


#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_read_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 __retres;
  u32 i;
  
#line 138 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 139 
  u32 mdic = 0U;
  
#line 141 
  if (offset > 31U) {
    {
      
#line 142 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_read_phy_reg_mdic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "PHY Address %d is out of range\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))142U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 142 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 142 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"PHY Address %d is out of range\n",offset); else ;
    }
    
#line 143 
    __retres = -4;
    
#line 143 
    goto return_label;
  }
  else ;
  
#line 150 
  mdic = ((offset << 16) | (phy->addr << 21)) | 134217728U;
  
#line 154 
  __ew32(hw,32UL,mdic);
  
#line 160 
  i = 0U;
  
#line 160 
  goto ldv_47569;
  ldv_47568: 
#line 161 
  ;
  
#line 161 
  __const_udelay(214750UL);
  
#line 162 
  mdic = __er32(hw,32UL);
  
#line 163 
  if ((mdic & 268435456U) != 0U) 
#line 164 
                                 goto ldv_47567; else ;
  
#line 160 
  i += 1U;
  ldv_47569: 
#line 161 
  ;
  
#line 160 
  if (i <= 1919U) 
#line 162 
                  goto ldv_47568; else 
#line 165 
                                       goto ldv_47567;
  ldv_47567: 
#line 166 
  ;
  
#line 166 
  if ((mdic & 268435456U) == 0U) {
    {
      
#line 167 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_read_phy_reg_mdic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "MDI Read did not complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))167U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 167 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 167 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"MDI Read did not complete\n"); else ;
    }
    
#line 168 
    __retres = -2;
    
#line 168 
    goto return_label;
  }
  else ;
  
#line 170 
  if ((mdic & 1073741824U) != 0U) {
    {
      
#line 171 
      struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000e_read_phy_reg_mdic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "MDI Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))171U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 171 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 171 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"MDI Error\n"); else ;
    }
    
#line 172 
    __retres = -2;
    
#line 172 
    goto return_label;
  }
  else ;
  
#line 174 
  if (((mdic >> 16) & 31U) != offset) {
    {
      
#line 175 
      struct _ddebug descriptor_2 = {.modname = "e1000e", .function = "e1000e_read_phy_reg_mdic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "MDI Read offset error - requested %d, returned %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))177U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 175 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 175 
                                                            __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)(hw->adapter)->netdev,"MDI Read offset error - requested %d, returned %d\n",offset,(mdic >> 16) & 31U); else ;
    }
    
#line 178 
    __retres = -2;
    
#line 178 
    goto return_label;
  }
  else ;
  
#line 180 
  *data = (unsigned short)mdic;
  
#line 185 
  if (hw->mac.type == (unsigned int)e1000_pch2lan) 
#line 186 
                                                   __const_udelay(429500UL); else ;
  
#line 188 
  __retres = 0;
  return_label: 
#line 188 
                return __retres;
}


#line 199  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_write_phy_reg_mdic(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 __retres;
  u32 i;
  
#line 201 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 202 
  u32 mdic = 0U;
  
#line 204 
  if (offset > 31U) {
    {
      
#line 205 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_write_phy_reg_mdic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "PHY Address %d is out of range\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))205U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 205 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 205 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"PHY Address %d is out of range\n",offset); else ;
    }
    
#line 206 
    __retres = -4;
    
#line 206 
    goto return_label;
  }
  else ;
  
#line 213 
  mdic = (((unsigned int)data | (offset << 16)) | (phy->addr << 21)) | 67108864U;
  
#line 218 
  __ew32(hw,32UL,mdic);
  
#line 224 
  i = 0U;
  
#line 224 
  goto ldv_47585;
  ldv_47584: 
#line 225 
  ;
  
#line 225 
  __const_udelay(214750UL);
  
#line 226 
  mdic = __er32(hw,32UL);
  
#line 227 
  if ((mdic & 268435456U) != 0U) 
#line 228 
                                 goto ldv_47583; else ;
  
#line 224 
  i += 1U;
  ldv_47585: 
#line 225 
  ;
  
#line 224 
  if (i <= 1919U) 
#line 226 
                  goto ldv_47584; else 
#line 229 
                                       goto ldv_47583;
  ldv_47583: 
#line 230 
  ;
  
#line 230 
  if ((mdic & 268435456U) == 0U) {
    {
      
#line 231 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_write_phy_reg_mdic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "MDI Write did not complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))231U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 231 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 231 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"MDI Write did not complete\n"); else ;
    }
    
#line 232 
    __retres = -2;
    
#line 232 
    goto return_label;
  }
  else ;
  
#line 234 
  if ((mdic & 1073741824U) != 0U) {
    {
      
#line 235 
      struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000e_write_phy_reg_mdic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "MDI Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))235U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 235 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 235 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"MDI Error\n"); else ;
    }
    
#line 236 
    __retres = -2;
    
#line 236 
    goto return_label;
  }
  else ;
  
#line 238 
  if (((mdic >> 16) & 31U) != offset) {
    {
      
#line 239 
      struct _ddebug descriptor_2 = {.modname = "e1000e", .function = "e1000e_write_phy_reg_mdic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "MDI Write offset error - requested %d, returned %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))241U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 239 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 239 
                                                            __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)(hw->adapter)->netdev,"MDI Write offset error - requested %d, returned %d\n",offset,(mdic >> 16) & 31U); else ;
    }
    
#line 242 
    __retres = -2;
    
#line 242 
    goto return_label;
  }
  else ;
  
#line 248 
  if (hw->mac.type == (unsigned int)e1000_pch2lan) 
#line 249 
                                                   __const_udelay(429500UL); else ;
  
#line 251 
  __retres = 0;
  return_label: 
#line 251 
                return __retres;
}


#line 264  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_read_phy_reg_m88(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 __retres;
  s32 ret_val;
  
#line 268 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 269 
  if (ret_val != 0) {
    
#line 270 
    __retres = ret_val;
    
#line 270 
    goto return_label;
  }
  else ;
  
#line 272 
  ret_val = e1000e_read_phy_reg_mdic(hw,offset & 31U,data);
  
#line 275 
  (*(hw->phy.ops.release))(hw);
  
#line 277 
  __retres = ret_val;
  return_label: 
#line 277 
                return __retres;
}


#line 289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_write_phy_reg_m88(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 __retres;
  s32 ret_val;
  
#line 293 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 294 
  if (ret_val != 0) {
    
#line 295 
    __retres = ret_val;
    
#line 295 
    goto return_label;
  }
  else ;
  
#line 297 
  ret_val = e1000e_write_phy_reg_mdic(hw,offset & 31U,(unsigned short)((int)data));
  
#line 300 
  (*(hw->phy.ops.release))(hw);
  
#line 302 
  __retres = ret_val;
  return_label: 
#line 302 
                return __retres;
}


#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_set_page_igp(struct e1000_hw *hw, u16 page)
{
  s32 tmp;
  {
    
#line 316 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_set_page_igp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Setting page 0x%x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))316U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 316 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 316 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Setting page 0x%x\n",(int)page); else ;
  }
  
#line 318 
  hw->phy.addr = 1U;
  
#line 320 
  tmp = e1000e_write_phy_reg_mdic(hw,31U,(unsigned short)((int)page));
  
#line 320 
  return tmp;
}


#line 334  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 __e1000e_read_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 *data, bool locked)
{
  s32 __retres;
  
#line 337 
  s32 ret_val = 0;
  
#line 339 
  if (! locked) {
    
#line 340 
    if (hw->phy.ops.acquire == (s32 (*)(struct e1000_hw *))0) {
      
#line 341 
      __retres = 0;
      
#line 341 
      goto return_label;
    }
    else ;
    
#line 343 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    
#line 344 
    if (ret_val != 0) {
      
#line 345 
      __retres = ret_val;
      
#line 345 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 348 
  if (offset > 15U) 
#line 349 
                    ret_val = e1000e_write_phy_reg_mdic(hw,31U,(unsigned short)((int)((unsigned short)offset))); else ;
  
#line 352 
  if (ret_val == 0) 
#line 353 
                    ret_val = e1000e_read_phy_reg_mdic(hw,offset & 31U,data); else ;
  
#line 356 
  if (! locked) 
#line 357 
                (*(hw->phy.ops.release))(hw); else ;
  
#line 359 
  __retres = ret_val;
  return_label: 
#line 359 
                return __retres;
}


#line 372  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_read_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 tmp;
  
#line 374 
  tmp = __e1000e_read_phy_reg_igp(hw,offset,data,(_Bool)0);
  
#line 374 
  return tmp;
}


#line 386  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_read_phy_reg_igp_locked(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 tmp;
  
#line 388 
  tmp = __e1000e_read_phy_reg_igp(hw,offset,data,(_Bool)1);
  
#line 388 
  return tmp;
}


#line 401  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 __e1000e_write_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 data, bool locked)
{
  s32 __retres;
  
#line 404 
  s32 ret_val = 0;
  
#line 406 
  if (! locked) {
    
#line 407 
    if (hw->phy.ops.acquire == (s32 (*)(struct e1000_hw *))0) {
      
#line 408 
      __retres = 0;
      
#line 408 
      goto return_label;
    }
    else ;
    
#line 410 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    
#line 411 
    if (ret_val != 0) {
      
#line 412 
      __retres = ret_val;
      
#line 412 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 415 
  if (offset > 15U) 
#line 416 
                    ret_val = e1000e_write_phy_reg_mdic(hw,31U,(unsigned short)((int)((unsigned short)offset))); else ;
  
#line 419 
  if (ret_val == 0) 
#line 420 
                    ret_val = e1000e_write_phy_reg_mdic(hw,offset & 31U,(unsigned short)((int)data)); else ;
  
#line 422 
  if (! locked) 
#line 423 
                (*(hw->phy.ops.release))(hw); else ;
  
#line 425 
  __retres = ret_val;
  return_label: 
#line 425 
                return __retres;
}


#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_write_phy_reg_igp(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 tmp;
  
#line 439 
  tmp = __e1000e_write_phy_reg_igp(hw,offset,(unsigned short)((int)data),(_Bool)0);
  
#line 439 
  return tmp;
}


#line 451  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_write_phy_reg_igp_locked(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 tmp;
  
#line 453 
  tmp = __e1000e_write_phy_reg_igp(hw,offset,(unsigned short)((int)data),(_Bool)1);
  
#line 453 
  return tmp;
}


#line 467  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 __e1000_read_kmrn_reg(struct e1000_hw *hw, u32 offset, u16 *data, bool locked)
{
  s32 __retres;
  u32 kmrnctrlsta;
  
#line 472 
  if (! locked) {
    
#line 473 
    s32 ret_val = 0;
    
#line 475 
    if (hw->phy.ops.acquire == (s32 (*)(struct e1000_hw *))0) {
      
#line 476 
      __retres = 0;
      
#line 476 
      goto return_label;
    }
    else ;
    
#line 478 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    
#line 479 
    if (ret_val != 0) {
      
#line 480 
      __retres = ret_val;
      
#line 480 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 483 
  kmrnctrlsta = ((offset << 16) & 2031616U) | 2097152U;
  
#line 485 
  __ew32(hw,52UL,kmrnctrlsta);
  
#line 486 
  __er32(hw,8UL);
  
#line 488 
  __const_udelay(8590UL);
  
#line 490 
  kmrnctrlsta = __er32(hw,52UL);
  
#line 491 
  *data = (unsigned short)kmrnctrlsta;
  
#line 493 
  if (! locked) 
#line 494 
                (*(hw->phy.ops.release))(hw); else ;
  
#line 496 
  __retres = 0;
  return_label: 
#line 496 
                return __retres;
}


#line 509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_read_kmrn_reg(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 tmp;
  
#line 511 
  tmp = __e1000_read_kmrn_reg(hw,offset,data,(_Bool)0);
  
#line 511 
  return tmp;
}


#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_read_kmrn_reg_locked(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 tmp;
  
#line 526 
  tmp = __e1000_read_kmrn_reg(hw,offset,data,(_Bool)1);
  
#line 526 
  return tmp;
}


#line 540  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 __e1000_write_kmrn_reg(struct e1000_hw *hw, u32 offset, u16 data, bool locked)
{
  s32 __retres;
  u32 kmrnctrlsta;
  
#line 545 
  if (! locked) {
    
#line 546 
    s32 ret_val = 0;
    
#line 548 
    if (hw->phy.ops.acquire == (s32 (*)(struct e1000_hw *))0) {
      
#line 549 
      __retres = 0;
      
#line 549 
      goto return_label;
    }
    else ;
    
#line 551 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    
#line 552 
    if (ret_val != 0) {
      
#line 553 
      __retres = ret_val;
      
#line 553 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 556 
  kmrnctrlsta = ((offset << 16) & 2031616U) | (unsigned int)data;
  
#line 558 
  __ew32(hw,52UL,kmrnctrlsta);
  
#line 559 
  __er32(hw,8UL);
  
#line 561 
  __const_udelay(8590UL);
  
#line 563 
  if (! locked) 
#line 564 
                (*(hw->phy.ops.release))(hw); else ;
  
#line 566 
  __retres = 0;
  return_label: 
#line 566 
                return __retres;
}


#line 578  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_write_kmrn_reg(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 tmp;
  
#line 580 
  tmp = __e1000_write_kmrn_reg(hw,offset,(unsigned short)((int)data),(_Bool)0);
  
#line 580 
  return tmp;
}


#line 592  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_write_kmrn_reg_locked(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 tmp;
  
#line 594 
  tmp = __e1000_write_kmrn_reg(hw,offset,(unsigned short)((int)data),(_Bool)1);
  
#line 594 
  return tmp;
}


#line 603  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 e1000_set_master_slave_mode(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_data;
  int tmp_0;
  s32 tmp_1;
  
#line 609 
  ret_val = e1e_rphy(hw,9U,& phy_data);
  
#line 610 
  if (ret_val != 0) {
    
#line 611 
    __retres = ret_val;
    
#line 611 
    goto return_label;
  }
  else ;
  
#line 616 
  if (((int)phy_data & 4096) != 0) {
    int tmp;
    
#line 614 
    if (((int)phy_data & 2048) != 0) 
#line 614 
                                     tmp = 1; else 
#line 614 
                                                   tmp = 2;
    
#line 616 
    tmp_0 = tmp;
  }
  else 
#line 616 
       tmp_0 = 3;
  
#line 614 
  hw->phy.original_ms_type = (enum e1000_ms_type)tmp_0;
  
#line 618 
  switch ((unsigned int)hw->phy.ms_type) {
    case (unsigned int)1: 
#line 619 
    ;
    
#line 620 
    phy_data = (unsigned short)((unsigned int)phy_data | 6144U);
    
#line 621 
    goto ldv_47683;
    case (unsigned int)2: 
#line 622 
    ;
    
#line 623 
    phy_data = (unsigned short)((unsigned int)phy_data | 4096U);
    
#line 624 
    phy_data = (unsigned short)((unsigned int)phy_data & 63487U);
    
#line 625 
    goto ldv_47683;
    case (unsigned int)3: 
#line 626 
    ;
    
#line 627 
    phy_data = (unsigned short)((unsigned int)phy_data & 61439U);
    default: 
#line 629 
    ;
    
#line 630 
    goto ldv_47683;
  }
  ldv_47683: 
#line 633 
  ;
  
#line 633 
  tmp_1 = e1e_wphy(hw,9U,(unsigned short)((int)phy_data));
  
#line 633 
  __retres = tmp_1;
  return_label: 
#line 633 
                return __retres;
}


#line 642  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_copper_link_setup_82577(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_data;
  s32 tmp;
  
#line 648 
  ret_val = e1e_rphy(hw,22U,& phy_data);
  
#line 649 
  if (ret_val != 0) {
    
#line 650 
    __retres = ret_val;
    
#line 650 
    goto return_label;
  }
  else ;
  
#line 652 
  phy_data = (unsigned short)((unsigned int)phy_data | 32768U);
  
#line 655 
  phy_data = (unsigned short)((unsigned int)phy_data | 3072U);
  
#line 657 
  ret_val = e1e_wphy(hw,22U,(unsigned short)((int)phy_data));
  
#line 658 
  if (ret_val != 0) {
    
#line 659 
    __retres = ret_val;
    
#line 659 
    goto return_label;
  }
  else ;
  
#line 662 
  ret_val = e1e_rphy(hw,18U,& phy_data);
  
#line 663 
  if (ret_val != 0) {
    
#line 664 
    __retres = ret_val;
    
#line 664 
    goto return_label;
  }
  else ;
  
#line 665 
  phy_data = (unsigned short)((unsigned int)phy_data & 63999U);
  
#line 671 
  switch ((int)hw->phy.mdix) {
    case 1: 
#line 672 
    ;
    
#line 673 
    goto ldv_47693;
    case 2: 
#line 674 
    ;
    
#line 675 
    phy_data = (unsigned short)((unsigned int)phy_data | 512U);
    
#line 676 
    goto ldv_47693;
    case 0: 
#line 677 
    ;
    default: 
#line 678 
    ;
    
#line 679 
    phy_data = (unsigned short)((unsigned int)phy_data | 1024U);
    
#line 680 
    goto ldv_47693;
  }
  ldv_47693: 
#line 682 
  ;
  
#line 682 
  ret_val = e1e_wphy(hw,18U,(unsigned short)((int)phy_data));
  
#line 683 
  if (ret_val != 0) {
    
#line 684 
    __retres = ret_val;
    
#line 684 
    goto return_label;
  }
  else ;
  
#line 686 
  tmp = e1000_set_master_slave_mode(hw);
  
#line 686 
  __retres = tmp;
  return_label: 
#line 686 
                return __retres;
}


#line 696  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_copper_link_setup_m88(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_data;
  
#line 698 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 703 
  ret_val = e1e_rphy(hw,16U,& phy_data);
  
#line 704 
  if (ret_val != 0) {
    
#line 705 
    __retres = ret_val;
    
#line 705 
    goto return_label;
  }
  else ;
  
#line 708 
  if (phy->type != (unsigned int)e1000_phy_bm) 
#line 709 
                                               phy_data = (unsigned short)((unsigned int)phy_data | 2048U); else ;
  
#line 718 
  phy_data = (unsigned short)((unsigned int)phy_data & 65439U);
  
#line 720 
  switch ((int)phy->mdix) {
    case 1: 
#line 721 
    ;
    
#line 722 
    phy_data = phy_data;
    
#line 723 
    goto ldv_47704;
    case 2: 
#line 724 
    ;
    
#line 725 
    phy_data = (unsigned short)((unsigned int)phy_data | 32U);
    
#line 726 
    goto ldv_47704;
    case 3: 
#line 727 
    ;
    
#line 728 
    phy_data = (unsigned short)((unsigned int)phy_data | 64U);
    
#line 729 
    goto ldv_47704;
    case 0: 
#line 730 
    ;
    default: 
#line 731 
    ;
    
#line 732 
    phy_data = (unsigned short)((unsigned int)phy_data | 96U);
    
#line 733 
    goto ldv_47704;
  }
  ldv_47704: 
#line 742 
  ;
  
#line 742 
  phy_data = (unsigned short)((unsigned int)phy_data & 65533U);
  
#line 743 
  if ((int)phy->disable_polarity_correction != 0) 
#line 744 
                                                  phy_data = (unsigned short)((unsigned int)phy_data | 2U); else ;
  
#line 747 
  if (phy->type == (unsigned int)e1000_phy_bm) {
    
#line 749 
    if (phy->id == 21040305U) {
      
#line 750 
      phy_data = (unsigned short)((unsigned int)phy_data & 63487U);
      
#line 751 
      ret_val = e1e_wphy(hw,16U,(unsigned short)((int)phy_data));
      
#line 753 
      if (ret_val != 0) {
        
#line 754 
        __retres = ret_val;
        
#line 754 
        goto return_label;
      }
      else ;
      
#line 756 
      ret_val = (*(phy->ops.commit))(hw);
      
#line 757 
      if (ret_val != 0) {
        {
          
#line 758 
          struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_copper_link_setup_m88", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Error committing the PHY changes\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))758U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 758 
          if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 758 
                                                              __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Error committing the PHY changes\n"); else ;
        }
        
#line 759 
        __retres = ret_val;
        
#line 759 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 763 
    phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
  }
  else ;
  
#line 766 
  ret_val = e1e_wphy(hw,16U,(unsigned short)((int)phy_data));
  
#line 767 
  if (ret_val != 0) {
    
#line 768 
    __retres = ret_val;
    
#line 768 
    goto return_label;
  }
  else ;
  
#line 770 
  if ((phy->type == (unsigned int)e1000_phy_m88 && phy->revision <= 3U) && phy->id != 21040305U) {
    
#line 776 
    ret_val = e1e_rphy(hw,20U,& phy_data);
    
#line 777 
    if (ret_val != 0) {
      
#line 778 
      __retres = ret_val;
      
#line 778 
      goto return_label;
    }
    else ;
    
#line 780 
    phy_data = (unsigned short)((unsigned int)phy_data | 112U);
    
#line 782 
    if (phy->revision == 2U && phy->id == 21040320U) {
      
#line 784 
      phy_data = (unsigned short)((unsigned int)phy_data & 61951U);
      
#line 785 
      phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
    }
    else {
      
#line 788 
      phy_data = (unsigned short)((unsigned int)phy_data & 61695U);
      
#line 790 
      phy_data = (unsigned short)((unsigned int)phy_data | 256U);
    }
    
#line 793 
    ret_val = e1e_wphy(hw,20U,(unsigned short)((int)phy_data));
    
#line 794 
    if (ret_val != 0) {
      
#line 795 
      __retres = ret_val;
      
#line 795 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 798 
  if (phy->type == (unsigned int)e1000_phy_bm && phy->id == 21040305U) {
    
#line 800 
    ret_val = e1e_wphy(hw,29U,(unsigned short)3);
    
#line 801 
    if (ret_val != 0) {
      
#line 802 
      __retres = ret_val;
      
#line 802 
      goto return_label;
    }
    else ;
    
#line 805 
    ret_val = e1e_wphy(hw,30U,(unsigned short)0);
    
#line 806 
    if (ret_val != 0) {
      
#line 807 
      __retres = ret_val;
      
#line 807 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 811 
  if (phy->ops.commit != (s32 (*)(struct e1000_hw *))0) {
    
#line 812 
    ret_val = (*(phy->ops.commit))(hw);
    
#line 813 
    if (ret_val != 0) {
      {
        
#line 814 
        struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_copper_link_setup_m88", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Error committing the PHY changes\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))814U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 814 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 814 
                                                              __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Error committing the PHY changes\n"); else ;
      }
      
#line 815 
      __retres = ret_val;
      
#line 815 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 819 
  if (phy->type == (unsigned int)e1000_phy_82578) {
    
#line 820 
    ret_val = e1e_rphy(hw,20U,& phy_data);
    
#line 821 
    if (ret_val != 0) {
      
#line 822 
      __retres = ret_val;
      
#line 822 
      goto return_label;
    }
    else ;
    
#line 825 
    phy_data = (unsigned short)((unsigned int)phy_data | 32U);
    
#line 826 
    phy_data = (unsigned short)((unsigned int)phy_data & 65507U);
    
#line 827 
    ret_val = e1e_wphy(hw,20U,(unsigned short)((int)phy_data));
    
#line 828 
    if (ret_val != 0) {
      
#line 829 
      __retres = ret_val;
      
#line 829 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 832 
  __retres = 0;
  return_label: 
#line 832 
                return __retres;
}


#line 842  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_copper_link_setup_igp(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 data;
  
#line 844 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 848 
  ret_val = e1000_phy_hw_reset(hw);
  
#line 849 
  if (ret_val != 0) {
    {
      
#line 850 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_copper_link_setup_igp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Error resetting the PHY.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))850U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 850 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 850 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Error resetting the PHY.\n"); else ;
    }
    
#line 851 
    __retres = ret_val;
    
#line 851 
    goto return_label;
  }
  else ;
  
#line 857 
  msleep(100U);
  
#line 860 
  if (hw->phy.ops.set_d0_lplu_state != (s32 (*)(struct e1000_hw *, bool ))0) {
    
#line 861 
    ret_val = (*(hw->phy.ops.set_d0_lplu_state))(hw,(_Bool)0);
    
#line 862 
    if (ret_val != 0) {
      {
        
#line 863 
        struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_copper_link_setup_igp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Error Disabling LPLU D0\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))863U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 863 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 863 
                                                              __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Error Disabling LPLU D0\n"); else ;
      }
      
#line 864 
      __retres = ret_val;
      
#line 864 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 868 
  ret_val = e1e_rphy(hw,18U,& data);
  
#line 869 
  if (ret_val != 0) {
    
#line 870 
    __retres = ret_val;
    
#line 870 
    goto return_label;
  }
  else ;
  
#line 872 
  data = (unsigned short)((unsigned int)data & 61439U);
  
#line 874 
  switch ((int)phy->mdix) {
    case 1: 
#line 875 
    ;
    
#line 876 
    data = (unsigned short)((unsigned int)data & 57343U);
    
#line 877 
    goto ldv_47722;
    case 2: 
#line 878 
    ;
    
#line 879 
    data = (unsigned short)((unsigned int)data | 8192U);
    
#line 880 
    goto ldv_47722;
    case 0: 
#line 881 
    ;
    default: 
#line 882 
    ;
    
#line 883 
    data = (unsigned short)((unsigned int)data | 4096U);
    
#line 884 
    goto ldv_47722;
  }
  ldv_47722: 
#line 886 
  ;
  
#line 886 
  ret_val = e1e_wphy(hw,18U,(unsigned short)((int)data));
  
#line 887 
  if (ret_val != 0) {
    
#line 888 
    __retres = ret_val;
    
#line 888 
    goto return_label;
  }
  else ;
  
#line 891 
  if ((int)hw->mac.autoneg != 0) {
    
#line 896 
    if ((unsigned int)phy->autoneg_advertised == 32U) {
      
#line 898 
      ret_val = e1e_rphy(hw,16U,& data);
      
#line 900 
      if (ret_val != 0) {
        
#line 901 
        __retres = ret_val;
        
#line 901 
        goto return_label;
      }
      else ;
      
#line 903 
      data = (unsigned short)((unsigned int)data & 65407U);
      
#line 904 
      ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
      
#line 906 
      if (ret_val != 0) {
        
#line 907 
        __retres = ret_val;
        
#line 907 
        goto return_label;
      }
      else ;
      
#line 910 
      ret_val = e1e_rphy(hw,9U,& data);
      
#line 911 
      if (ret_val != 0) {
        
#line 912 
        __retres = ret_val;
        
#line 912 
        goto return_label;
      }
      else ;
      
#line 914 
      data = (unsigned short)((unsigned int)data & 61439U);
      
#line 915 
      ret_val = e1e_wphy(hw,9U,(unsigned short)((int)data));
      
#line 916 
      if (ret_val != 0) {
        
#line 917 
        __retres = ret_val;
        
#line 917 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 920 
    ret_val = e1000_set_master_slave_mode(hw);
  }
  else ;
  
#line 923 
  __retres = ret_val;
  return_label: 
#line 923 
                return __retres;
}


#line 935  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 e1000_phy_setup_autoneg(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 mii_autoneg_adv_reg;
  
#line 937 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 940 
  u16 mii_1000t_ctrl_reg = (unsigned short)0U;
  
#line 942 
  phy->autoneg_advertised = (unsigned short)((int)phy->autoneg_advertised & (int)phy->autoneg_mask);
  
#line 945 
  ret_val = e1e_rphy(hw,4U,& mii_autoneg_adv_reg);
  
#line 946 
  if (ret_val != 0) {
    
#line 947 
    __retres = ret_val;
    
#line 947 
    goto return_label;
  }
  else ;
  
#line 949 
  if (((int)phy->autoneg_mask & 32) != 0) {
    
#line 951 
    ret_val = e1e_rphy(hw,9U,& mii_1000t_ctrl_reg);
    
#line 952 
    if (ret_val != 0) {
      
#line 953 
      __retres = ret_val;
      
#line 953 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 967 
  mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 65055U);
  
#line 970 
  mii_1000t_ctrl_reg = (unsigned short)((unsigned int)mii_1000t_ctrl_reg & 64767U);
  {
    
#line 972 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "autoneg_advertised %x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))972U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 972 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 972 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"autoneg_advertised %x\n",(int)phy->autoneg_advertised); else ;
  }
  
#line 975 
  if (((int)phy->autoneg_advertised & 1) != 0) {
    {
      
#line 976 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Advertise 10mb Half duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))976U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 976 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 976 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Advertise 10mb Half duplex\n"); else ;
    }
    
#line 977 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 32U);
  }
  else ;
  
#line 981 
  if (((int)phy->autoneg_advertised & 2) != 0) {
    {
      
#line 982 
      struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Advertise 10mb Full duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))982U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 982 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 982 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Advertise 10mb Full duplex\n"); else ;
    }
    
#line 983 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 64U);
  }
  else ;
  
#line 987 
  if (((int)phy->autoneg_advertised & 4) != 0) {
    {
      
#line 988 
      struct _ddebug descriptor_2 = {.modname = "e1000e", .function = "e1000_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Advertise 100mb Half duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))988U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 988 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 988 
                                                            __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)(hw->adapter)->netdev,"Advertise 100mb Half duplex\n"); else ;
    }
    
#line 989 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 128U);
  }
  else ;
  
#line 993 
  if (((int)phy->autoneg_advertised & 8) != 0) {
    {
      
#line 994 
      struct _ddebug descriptor_3 = {.modname = "e1000e", .function = "e1000_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Advertise 100mb Full duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))994U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 994 
      if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) 
#line 994 
                                                            __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)(hw->adapter)->netdev,"Advertise 100mb Full duplex\n"); else ;
    }
    
#line 995 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 256U);
  }
  else ;
  
#line 999 
  if (((int)phy->autoneg_advertised & 16) != 0) {
    
#line 1000 
    struct _ddebug descriptor_4 = {.modname = "e1000e", .function = "e1000_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Advertise 1000mb Half duplex request denied!\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1000U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1000 
    if ((long)(((int)descriptor_4.flags & 1) != 0) != 0L) 
#line 1000 
                                                          __dynamic_netdev_dbg(& descriptor_4,(struct net_device const *)(hw->adapter)->netdev,"Advertise 1000mb Half duplex request denied!\n"); else ;
  }
  else ;
  
#line 1003 
  if (((int)phy->autoneg_advertised & 32) != 0) {
    {
      
#line 1004 
      struct _ddebug descriptor_5 = {.modname = "e1000e", .function = "e1000_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Advertise 1000mb Full duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1004U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1004 
      if ((long)(((int)descriptor_5.flags & 1) != 0) != 0L) 
#line 1004 
                                                            __dynamic_netdev_dbg(& descriptor_5,(struct net_device const *)(hw->adapter)->netdev,"Advertise 1000mb Full duplex\n"); else ;
    }
    
#line 1005 
    mii_1000t_ctrl_reg = (unsigned short)((unsigned int)mii_1000t_ctrl_reg | 512U);
  }
  else ;
  
#line 1025 
  switch ((unsigned int)hw->fc.current_mode) {
    case (unsigned int)0: 
#line 1026 
    ;
    
#line 1030 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 62463U);
    
#line 1032 
    goto ldv_47742;
    case (unsigned int)1: 
#line 1033 
    ;
    
#line 1043 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 3072U);
    
#line 1045 
    goto ldv_47742;
    case (unsigned int)2: 
#line 1046 
    ;
    
#line 1050 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 2048U);
    
#line 1051 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg & 64511U);
    
#line 1052 
    goto ldv_47742;
    case (unsigned int)3: 
#line 1053 
    ;
    
#line 1057 
    mii_autoneg_adv_reg = (unsigned short)((unsigned int)mii_autoneg_adv_reg | 3072U);
    
#line 1059 
    goto ldv_47742;
    default: 
#line 1060 
    ;
    {
      
#line 1061 
      struct _ddebug descriptor_6 = {.modname = "e1000e", .function = "e1000_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Flow control param set incorrectly\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1061U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1061 
      if ((long)(((int)descriptor_6.flags & 1) != 0) != 0L) 
#line 1061 
                                                            __dynamic_netdev_dbg(& descriptor_6,(struct net_device const *)(hw->adapter)->netdev,"Flow control param set incorrectly\n"); else ;
    }
    
#line 1062 
    __retres = -3;
    
#line 1062 
    goto return_label;
  }
  ldv_47742: 
#line 1065 
  ;
  
#line 1065 
  ret_val = e1e_wphy(hw,4U,(unsigned short)((int)mii_autoneg_adv_reg));
  
#line 1066 
  if (ret_val != 0) {
    
#line 1067 
    __retres = ret_val;
    
#line 1067 
    goto return_label;
  }
  else ;
  {
    
#line 1069 
    struct _ddebug descriptor_7 = {.modname = "e1000e", .function = "e1000_phy_setup_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Auto-Neg Advertising %x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1069U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1069 
    if ((long)(((int)descriptor_7.flags & 1) != 0) != 0L) 
#line 1069 
                                                          __dynamic_netdev_dbg(& descriptor_7,(struct net_device const *)(hw->adapter)->netdev,"Auto-Neg Advertising %x\n",(int)mii_autoneg_adv_reg); else ;
  }
  
#line 1071 
  if (((int)phy->autoneg_mask & 32) != 0) 
#line 1072 
                                          ret_val = e1e_wphy(hw,9U,(unsigned short)((int)mii_1000t_ctrl_reg)); else ;
  
#line 1074 
  __retres = ret_val;
  return_label: 
#line 1074 
                return __retres;
}


#line 1086  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 e1000_copper_link_autoneg(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_ctrl;
  
#line 1088 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1095 
  phy->autoneg_advertised = (unsigned short)((int)phy->autoneg_advertised & (int)phy->autoneg_mask);
  
#line 1100 
  if ((unsigned int)phy->autoneg_advertised == 0U) 
#line 1101 
                                                   phy->autoneg_advertised = phy->autoneg_mask; else ;
  {
    
#line 1103 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_copper_link_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Reconfiguring auto-neg advertisement params\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1103U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1103 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1103 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Reconfiguring auto-neg advertisement params\n"); else ;
  }
  
#line 1104 
  ret_val = e1000_phy_setup_autoneg(hw);
  
#line 1105 
  if (ret_val != 0) {
    {
      
#line 1106 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_copper_link_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Error Setting up Auto-Negotiation\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1106U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1106 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1106 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Error Setting up Auto-Negotiation\n"); else ;
    }
    
#line 1107 
    __retres = ret_val;
    
#line 1107 
    goto return_label;
  }
  else ;
  {
    
#line 1109 
    struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_copper_link_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Restarting Auto-Neg\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1109U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1109 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 1109 
                                                          __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Restarting Auto-Neg\n"); else ;
  }
  
#line 1114 
  ret_val = e1e_rphy(hw,0U,& phy_ctrl);
  
#line 1115 
  if (ret_val != 0) {
    
#line 1116 
    __retres = ret_val;
    
#line 1116 
    goto return_label;
  }
  else ;
  
#line 1118 
  phy_ctrl = (unsigned short)((unsigned int)phy_ctrl | 4608U);
  
#line 1119 
  ret_val = e1e_wphy(hw,0U,(unsigned short)((int)phy_ctrl));
  
#line 1120 
  if (ret_val != 0) {
    
#line 1121 
    __retres = ret_val;
    
#line 1121 
    goto return_label;
  }
  else ;
  
#line 1126 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    
#line 1127 
    ret_val = e1000_wait_autoneg(hw);
    
#line 1128 
    if (ret_val != 0) {
      {
        
#line 1129 
        struct _ddebug descriptor_2 = {.modname = "e1000e", .function = "e1000_copper_link_autoneg", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Error while waiting for autoneg to complete\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1129U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1129 
        if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 1129 
                                                              __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)(hw->adapter)->netdev,"Error while waiting for autoneg to complete\n"); else ;
      }
      
#line 1130 
      __retres = ret_val;
      
#line 1130 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1134 
  hw->mac.get_link_status = (_Bool)1;
  
#line 1136 
  __retres = ret_val;
  return_label: 
#line 1136 
                return __retres;
}


#line 1148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_setup_copper_link(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  bool link;
  
#line 1153 
  if ((int)hw->mac.autoneg != 0) {
    
#line 1157 
    ret_val = e1000_copper_link_autoneg(hw);
    
#line 1158 
    if (ret_val != 0) {
      
#line 1159 
      __retres = ret_val;
      
#line 1159 
      goto return_label;
    }
    else ;
  }
  else {
    {
      
#line 1164 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_setup_copper_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Forcing Speed and Duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1164U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1164 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1164 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Forcing Speed and Duplex\n"); else ;
    }
    
#line 1165 
    ret_val = (*(hw->phy.ops.force_speed_duplex))(hw);
    
#line 1166 
    if (ret_val != 0) {
      {
        
#line 1167 
        struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_setup_copper_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Error Forcing Speed and Duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1167U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1167 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1167 
                                                              __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Error Forcing Speed and Duplex\n"); else ;
      }
      
#line 1168 
      __retres = ret_val;
      
#line 1168 
      goto return_label;
    }
    else ;
  }
  
#line 1175 
  ret_val = e1000e_phy_has_link_generic(hw,10U,10U,& link);
  
#line 1177 
  if (ret_val != 0) {
    
#line 1178 
    __retres = ret_val;
    
#line 1178 
    goto return_label;
  }
  else ;
  
#line 1180 
  if ((int)link != 0) {
    {
      
#line 1181 
      struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000e_setup_copper_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Valid link established!!!\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1181U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1181 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 1181 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Valid link established!!!\n"); else ;
    }
    
#line 1182 
    (*(hw->mac.ops.config_collision_dist))(hw);
    
#line 1183 
    ret_val = e1000e_config_fc_after_link_up(hw);
  }
  else {
    
#line 1185 
    struct _ddebug descriptor_2 = {.modname = "e1000e", .function = "e1000e_setup_copper_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Unable to establish link!!!\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1185U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1185 
    if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 1185 
                                                          __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)(hw->adapter)->netdev,"Unable to establish link!!!\n"); else ;
  }
  
#line 1188 
  __retres = ret_val;
  return_label: 
#line 1188 
                return __retres;
}


#line 1199  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_phy_force_speed_duplex_igp(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_data;
  bool link;
  
#line 1201 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1206 
  ret_val = e1e_rphy(hw,0U,& phy_data);
  
#line 1207 
  if (ret_val != 0) {
    
#line 1208 
    __retres = ret_val;
    
#line 1208 
    goto return_label;
  }
  else ;
  
#line 1210 
  e1000e_phy_force_speed_duplex_setup(hw,& phy_data);
  
#line 1212 
  ret_val = e1e_wphy(hw,0U,(unsigned short)((int)phy_data));
  
#line 1213 
  if (ret_val != 0) {
    
#line 1214 
    __retres = ret_val;
    
#line 1214 
    goto return_label;
  }
  else ;
  
#line 1219 
  ret_val = e1e_rphy(hw,18U,& phy_data);
  
#line 1220 
  if (ret_val != 0) {
    
#line 1221 
    __retres = ret_val;
    
#line 1221 
    goto return_label;
  }
  else ;
  
#line 1223 
  phy_data = (unsigned short)((unsigned int)phy_data & 61439U);
  
#line 1224 
  phy_data = (unsigned short)((unsigned int)phy_data & 57343U);
  
#line 1226 
  ret_val = e1e_wphy(hw,18U,(unsigned short)((int)phy_data));
  
#line 1227 
  if (ret_val != 0) {
    
#line 1228 
    __retres = ret_val;
    
#line 1228 
    goto return_label;
  }
  else ;
  {
    
#line 1230 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_phy_force_speed_duplex_igp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "IGP PSCR: %X\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1230U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1230 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1230 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"IGP PSCR: %X\n",(int)phy_data); else ;
  }
  
#line 1232 
  __const_udelay(4295UL);
  
#line 1234 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    {
      
#line 1235 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_phy_force_speed_duplex_igp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Waiting for forced speed/duplex link on IGP phy.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1235U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1235 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1235 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Waiting for forced speed/duplex link on IGP phy.\n"); else ;
    }
    
#line 1237 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
    
#line 1239 
    if (ret_val != 0) {
      
#line 1240 
      __retres = ret_val;
      
#line 1240 
      goto return_label;
    }
    else ;
    
#line 1242 
    if (! link) {
      
#line 1243 
      struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000e_phy_force_speed_duplex_igp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Link taking longer than expected.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1243U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1243 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 1243 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Link taking longer than expected.\n"); else ;
    }
    else ;
    
#line 1246 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
  }
  else ;
  
#line 1250 
  __retres = ret_val;
  return_label: 
#line 1250 
                return __retres;
}


#line 1263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_phy_force_speed_duplex_m88(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_data;
  bool link;
  
#line 1265 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1273 
  ret_val = e1e_rphy(hw,16U,& phy_data);
  
#line 1274 
  if (ret_val != 0) {
    
#line 1275 
    __retres = ret_val;
    
#line 1275 
    goto return_label;
  }
  else ;
  
#line 1277 
  phy_data = (unsigned short)((unsigned int)phy_data & 65439U);
  
#line 1278 
  ret_val = e1e_wphy(hw,16U,(unsigned short)((int)phy_data));
  
#line 1279 
  if (ret_val != 0) {
    
#line 1280 
    __retres = ret_val;
    
#line 1280 
    goto return_label;
  }
  else ;
  {
    
#line 1282 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_phy_force_speed_duplex_m88", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "M88E1000 PSCR: %X\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1282U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1282 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1282 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"M88E1000 PSCR: %X\n",(int)phy_data); else ;
  }
  
#line 1284 
  ret_val = e1e_rphy(hw,0U,& phy_data);
  
#line 1285 
  if (ret_val != 0) {
    
#line 1286 
    __retres = ret_val;
    
#line 1286 
    goto return_label;
  }
  else ;
  
#line 1288 
  e1000e_phy_force_speed_duplex_setup(hw,& phy_data);
  
#line 1290 
  ret_val = e1e_wphy(hw,0U,(unsigned short)((int)phy_data));
  
#line 1291 
  if (ret_val != 0) {
    
#line 1292 
    __retres = ret_val;
    
#line 1292 
    goto return_label;
  }
  else ;
  
#line 1295 
  if (hw->phy.ops.commit != (s32 (*)(struct e1000_hw *))0) {
    
#line 1296 
    ret_val = (*(hw->phy.ops.commit))(hw);
    
#line 1297 
    if (ret_val != 0) {
      
#line 1298 
      __retres = ret_val;
      
#line 1298 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1301 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    {
      
#line 1302 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_phy_force_speed_duplex_m88", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Waiting for forced speed/duplex link on M88 phy.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1302U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1302 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1302 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Waiting for forced speed/duplex link on M88 phy.\n"); else ;
    }
    
#line 1304 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
    
#line 1306 
    if (ret_val != 0) {
      
#line 1307 
      __retres = ret_val;
      
#line 1307 
      goto return_label;
    }
    else ;
    
#line 1309 
    if (! link) 
      
#line 1310 
      if (hw->phy.type != (unsigned int)e1000_phy_m88) {
        
#line 1311 
        struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000e_phy_force_speed_duplex_m88", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Link taking longer than expected.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1311U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1311 
        if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 1311 
                                                              __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Link taking longer than expected.\n"); else ;
      }
      else {
        
#line 1316 
        ret_val = e1e_wphy(hw,29U,(unsigned short)29);
        
#line 1318 
        if (ret_val != 0) {
          
#line 1319 
          __retres = ret_val;
          
#line 1319 
          goto return_label;
        }
        else ;
        
#line 1320 
        ret_val = e1000e_phy_reset_dsp(hw);
        
#line 1321 
        if (ret_val != 0) {
          
#line 1322 
          __retres = ret_val;
          
#line 1322 
          goto return_label;
        }
        else ;
      }
    else ;
    
#line 1327 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
    
#line 1329 
    if (ret_val != 0) {
      
#line 1330 
      __retres = ret_val;
      
#line 1330 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1333 
  if (hw->phy.type != (unsigned int)e1000_phy_m88) {
    
#line 1334 
    __retres = 0;
    
#line 1334 
    goto return_label;
  }
  else ;
  
#line 1336 
  ret_val = e1e_rphy(hw,20U,& phy_data);
  
#line 1337 
  if (ret_val != 0) {
    
#line 1338 
    __retres = ret_val;
    
#line 1338 
    goto return_label;
  }
  else ;
  
#line 1344 
  phy_data = (unsigned short)((unsigned int)phy_data | 112U);
  
#line 1345 
  ret_val = e1e_wphy(hw,20U,(unsigned short)((int)phy_data));
  
#line 1346 
  if (ret_val != 0) {
    
#line 1347 
    __retres = ret_val;
    
#line 1347 
    goto return_label;
  }
  else ;
  
#line 1352 
  ret_val = e1e_rphy(hw,16U,& phy_data);
  
#line 1353 
  if (ret_val != 0) {
    
#line 1354 
    __retres = ret_val;
    
#line 1354 
    goto return_label;
  }
  else ;
  
#line 1356 
  phy_data = (unsigned short)((unsigned int)phy_data | 2048U);
  
#line 1357 
  ret_val = e1e_wphy(hw,16U,(unsigned short)((int)phy_data));
  
#line 1359 
  __retres = ret_val;
  return_label: 
#line 1359 
                return __retres;
}


#line 1370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_phy_force_speed_duplex_ife(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 data;
  bool link;
  
#line 1372 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1377 
  ret_val = e1e_rphy(hw,0U,& data);
  
#line 1378 
  if (ret_val != 0) {
    
#line 1379 
    __retres = ret_val;
    
#line 1379 
    goto return_label;
  }
  else ;
  
#line 1381 
  e1000e_phy_force_speed_duplex_setup(hw,& data);
  
#line 1383 
  ret_val = e1e_wphy(hw,0U,(unsigned short)((int)data));
  
#line 1384 
  if (ret_val != 0) {
    
#line 1385 
    __retres = ret_val;
    
#line 1385 
    goto return_label;
  }
  else ;
  
#line 1388 
  ret_val = e1e_rphy(hw,28U,& data);
  
#line 1389 
  if (ret_val != 0) {
    
#line 1390 
    __retres = ret_val;
    
#line 1390 
    goto return_label;
  }
  else ;
  
#line 1392 
  data = (unsigned short)((unsigned int)data & 65407U);
  
#line 1393 
  data = (unsigned short)((unsigned int)data & 65471U);
  
#line 1395 
  ret_val = e1e_wphy(hw,28U,(unsigned short)((int)data));
  
#line 1396 
  if (ret_val != 0) {
    
#line 1397 
    __retres = ret_val;
    
#line 1397 
    goto return_label;
  }
  else ;
  {
    
#line 1399 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_phy_force_speed_duplex_ife", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "IFE PMC: %X\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1399U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1399 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1399 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"IFE PMC: %X\n",(int)data); else ;
  }
  
#line 1401 
  __const_udelay(4295UL);
  
#line 1403 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    {
      
#line 1404 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_phy_force_speed_duplex_ife", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Waiting for forced speed/duplex link on IFE phy.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1404U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1404 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1404 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Waiting for forced speed/duplex link on IFE phy.\n"); else ;
    }
    
#line 1406 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
    
#line 1408 
    if (ret_val != 0) {
      
#line 1409 
      __retres = ret_val;
      
#line 1409 
      goto return_label;
    }
    else ;
    
#line 1411 
    if (! link) {
      
#line 1412 
      struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_phy_force_speed_duplex_ife", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Link taking longer than expected.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1412U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1412 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 1412 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Link taking longer than expected.\n"); else ;
    }
    else ;
    
#line 1415 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
    
#line 1417 
    if (ret_val != 0) {
      
#line 1418 
      __retres = ret_val;
      
#line 1418 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1421 
  __retres = 0;
  return_label: 
#line 1421 
                return __retres;
}


#line 1436  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
void e1000e_phy_force_speed_duplex_setup(struct e1000_hw *hw, u16 *phy_ctrl)
{
  u32 ctrl;
  
#line 1438 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 1442 
  hw->fc.current_mode = e1000_fc_none;
  
#line 1445 
  ctrl = __er32(hw,0UL);
  
#line 1446 
  ctrl |= 6144U;
  
#line 1447 
  ctrl &= 4294966527U;
  
#line 1450 
  ctrl &= 4294967263U;
  
#line 1453 
  *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl & 61439U);
  
#line 1456 
  if (((int)mac->forced_speed_duplex & 5) != 0) {
    
#line 1457 
    ctrl &= 4294967294U;
    
#line 1458 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl & 65279U);
    {
      
#line 1459 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_phy_force_speed_duplex_setup", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Half Duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1459U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1459 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1459 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Half Duplex\n"); else ;
    }
  }
  else {
    
#line 1461 
    ctrl |= 1U;
    
#line 1462 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl | 256U);
    {
      
#line 1463 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_phy_force_speed_duplex_setup", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Full Duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1463U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1463 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1463 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Full Duplex\n"); else ;
    }
  }
  
#line 1467 
  if (((int)mac->forced_speed_duplex & 12) != 0) {
    
#line 1468 
    ctrl |= 256U;
    
#line 1469 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl | 8192U);
    
#line 1470 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl & 65471U);
    {
      
#line 1471 
      struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000e_phy_force_speed_duplex_setup", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Forcing 100mb\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1471U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1471 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 1471 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Forcing 100mb\n"); else ;
    }
  }
  else {
    
#line 1473 
    ctrl &= 4294966527U;
    
#line 1474 
    *phy_ctrl = (unsigned short)((unsigned int)*phy_ctrl & 57279U);
    {
      
#line 1475 
      struct _ddebug descriptor_2 = {.modname = "e1000e", .function = "e1000e_phy_force_speed_duplex_setup", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Forcing 10mb\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1475U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1475 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 1475 
                                                            __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)(hw->adapter)->netdev,"Forcing 10mb\n"); else ;
    }
  }
  
#line 1478 
  (*(hw->mac.ops.config_collision_dist))(hw);
  
#line 1480 
  __ew32(hw,0UL,ctrl);
  
#line 1481 
  return;
}


#line 1497  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_set_d3_lplu_state(struct e1000_hw *hw, bool active)
{
  s32 __retres;
  s32 ret_val;
  u16 data;
  
#line 1499 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1503 
  ret_val = e1e_rphy(hw,25U,& data);
  
#line 1504 
  if (ret_val != 0) {
    
#line 1505 
    __retres = ret_val;
    
#line 1505 
    goto return_label;
  }
  else ;
  
#line 1507 
  if (! active) {
    
#line 1508 
    data = (unsigned short)((unsigned int)data & 65531U);
    
#line 1509 
    ret_val = e1e_wphy(hw,25U,(unsigned short)((int)data));
    
#line 1510 
    if (ret_val != 0) {
      
#line 1511 
      __retres = ret_val;
      
#line 1511 
      goto return_label;
    }
    else ;
    
#line 1517 
    if (phy->smart_speed == (unsigned int)e1000_smart_speed_on) {
      
#line 1518 
      ret_val = e1e_rphy(hw,16U,& data);
      
#line 1520 
      if (ret_val != 0) {
        
#line 1521 
        __retres = ret_val;
        
#line 1521 
        goto return_label;
      }
      else ;
      
#line 1523 
      data = (unsigned short)((unsigned int)data | 128U);
      
#line 1524 
      ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
      
#line 1526 
      if (ret_val != 0) {
        
#line 1527 
        __retres = ret_val;
        
#line 1527 
        goto return_label;
      }
      else ;
    }
    else 
      
#line 1528 
      if (phy->smart_speed == (unsigned int)e1000_smart_speed_off) {
        
#line 1529 
        ret_val = e1e_rphy(hw,16U,& data);
        
#line 1531 
        if (ret_val != 0) {
          
#line 1532 
          __retres = ret_val;
          
#line 1532 
          goto return_label;
        }
        else ;
        
#line 1534 
        data = (unsigned short)((unsigned int)data & 65407U);
        
#line 1535 
        ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
        
#line 1537 
        if (ret_val != 0) {
          
#line 1538 
          __retres = ret_val;
          
#line 1538 
          goto return_label;
        }
        else ;
      }
      else ;
  }
  else 
    
#line 1540 
    if (((unsigned int)phy->autoneg_advertised == 47U || (unsigned int)phy->autoneg_advertised == 15U) || (unsigned int)phy->autoneg_advertised == 3U) {
      
#line 1543 
      data = (unsigned short)((unsigned int)data | 4U);
      
#line 1544 
      ret_val = e1e_wphy(hw,25U,(unsigned short)((int)data));
      
#line 1545 
      if (ret_val != 0) {
        
#line 1546 
        __retres = ret_val;
        
#line 1546 
        goto return_label;
      }
      else ;
      
#line 1549 
      ret_val = e1e_rphy(hw,16U,& data);
      
#line 1550 
      if (ret_val != 0) {
        
#line 1551 
        __retres = ret_val;
        
#line 1551 
        goto return_label;
      }
      else ;
      
#line 1553 
      data = (unsigned short)((unsigned int)data & 65407U);
      
#line 1554 
      ret_val = e1e_wphy(hw,16U,(unsigned short)((int)data));
    }
    else ;
  
#line 1557 
  __retres = ret_val;
  return_label: 
#line 1557 
                return __retres;
}


#line 1568  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_check_downshift(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_data;
  u16 offset;
  u16 mask;
  
#line 1570 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1574 
  switch ((unsigned int)phy->type) {
    case (unsigned int)2: 
#line 1575 
    ;
    case (unsigned int)5: 
#line 1576 
    ;
    case (unsigned int)8: 
#line 1577 
    ;
    case (unsigned int)9: 
#line 1578 
    ;
    
#line 1579 
    offset = (unsigned short)17U;
    
#line 1580 
    mask = (unsigned short)32U;
    
#line 1581 
    goto ldv_47833;
    case (unsigned int)4: 
#line 1582 
    ;
    case (unsigned int)6: 
#line 1583 
    ;
    
#line 1584 
    offset = (unsigned short)19U;
    
#line 1585 
    mask = (unsigned short)32768U;
    
#line 1586 
    goto ldv_47833;
    default: 
#line 1587 
    ;
    
#line 1589 
    phy->speed_downgraded = (_Bool)0;
    
#line 1590 
    __retres = 0;
    
#line 1590 
    goto return_label;
  }
  ldv_47833: 
#line 1593 
  ;
  
#line 1593 
  ret_val = e1e_rphy(hw,(unsigned int)offset,& phy_data);
  
#line 1595 
  if (ret_val == 0) 
#line 1596 
                    phy->speed_downgraded = (_Bool)((unsigned int)((int)phy_data & (int)mask) != 0U); else ;
  
#line 1598 
  __retres = ret_val;
  return_label: 
#line 1598 
                return __retres;
}


#line 1609  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_check_polarity_m88(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 data;
  
#line 1611 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1615 
  ret_val = e1e_rphy(hw,17U,& data);
  
#line 1617 
  if (ret_val == 0) 
#line 1618 
                    phy->cable_polarity = (enum e1000_rev_polarity)(((int)data >> 1) & 1); else ;
  
#line 1622 
  return ret_val;
}


#line 1634  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_check_polarity_igp(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 data;
  u16 offset;
  u16 mask;
  
#line 1636 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1643 
  ret_val = e1e_rphy(hw,17U,& data);
  
#line 1644 
  if (ret_val != 0) {
    
#line 1645 
    __retres = ret_val;
    
#line 1645 
    goto return_label;
  }
  else ;
  
#line 1647 
  if (((int)data & 49152) == 49152) {
    
#line 1649 
    offset = (unsigned short)180U;
    
#line 1650 
    mask = (unsigned short)120U;
  }
  else {
    
#line 1655 
    offset = (unsigned short)17U;
    
#line 1656 
    mask = (unsigned short)2U;
  }
  
#line 1659 
  ret_val = e1e_rphy(hw,(unsigned int)offset,& data);
  
#line 1661 
  if (ret_val == 0) 
#line 1662 
                    phy->cable_polarity = (enum e1000_rev_polarity)((unsigned int)((int)data & (int)mask) != 0U); else ;
  
#line 1666 
  __retres = ret_val;
  return_label: 
#line 1666 
                return __retres;
}


#line 1675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_check_polarity_ife(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 phy_data;
  u16 offset;
  u16 mask;
  
#line 1677 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1683 
  if ((int)phy->polarity_correction != 0) {
    
#line 1684 
    offset = (unsigned short)16U;
    
#line 1685 
    mask = (unsigned short)256U;
  }
  else {
    
#line 1687 
    offset = (unsigned short)17U;
    
#line 1688 
    mask = (unsigned short)32U;
  }
  
#line 1691 
  ret_val = e1e_rphy(hw,(unsigned int)offset,& phy_data);
  
#line 1693 
  if (ret_val == 0) 
#line 1694 
                    phy->cable_polarity = (enum e1000_rev_polarity)((unsigned int)((int)phy_data & (int)mask) != 0U); else ;
  
#line 1698 
  return ret_val;
}


#line 1708  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 e1000_wait_autoneg(struct e1000_hw *hw)
{
  u16 i;
  u16 phy_status;
  
#line 1710 
  s32 ret_val = 0;
  
#line 1714 
  i = (unsigned short)45U;
  
#line 1714 
  goto ldv_47867;
  ldv_47866: 
#line 1715 
  ;
  
#line 1715 
  ret_val = e1e_rphy(hw,1U,& phy_status);
  
#line 1716 
  if (ret_val != 0) 
#line 1717 
                    goto ldv_47865; else ;
  
#line 1718 
  ret_val = e1e_rphy(hw,1U,& phy_status);
  
#line 1719 
  if (ret_val != 0) 
#line 1720 
                    goto ldv_47865; else ;
  
#line 1721 
  if (((int)phy_status & 32) != 0) 
#line 1722 
                                   goto ldv_47865; else ;
  
#line 1723 
  msleep(100U);
  
#line 1714 
  i = (u16)((int)i - 1);
  ldv_47867: 
#line 1715 
  ;
  
#line 1714 
  if ((unsigned int)i != 0U) 
#line 1716 
                             goto ldv_47866; else 
#line 1719 
                                                  goto ldv_47865;
  ldv_47865: 
#line 1720 
  ;
  
#line 1729 
  return ret_val;
}


#line 1741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_phy_has_link_generic(struct e1000_hw *hw, u32 iterations, u32 usec_interval, bool *success)
{
  u16 i;
  u16 phy_status;
  
#line 1744 
  s32 ret_val = 0;
  
#line 1747 
  i = (unsigned short)0U;
  
#line 1747 
  goto ldv_47879;
  ldv_47878: 
#line 1748 
  ;
  
#line 1752 
  ret_val = e1e_rphy(hw,1U,& phy_status);
  
#line 1753 
  if (ret_val != 0) 
    
#line 1758 
    if (usec_interval > 999U) 
#line 1759 
                              msleep(usec_interval / 1000U);
    else 
      
#line 1761 
      if (0 != 0) 
        
#line 1761 
        if (usec_interval > 19999U) 
#line 1761 
                                    __bad_udelay(); else 
#line 1761 
                                                         __const_udelay((unsigned long)usec_interval * 4295UL);
      else 
#line 1761 
           __udelay((unsigned long)usec_interval);
  else ;
  
#line 1763 
  ret_val = e1e_rphy(hw,1U,& phy_status);
  
#line 1764 
  if (ret_val != 0) 
#line 1765 
                    goto ldv_47877; else ;
  
#line 1766 
  if (((int)phy_status & 4) != 0) 
#line 1767 
                                  goto ldv_47877; else ;
  
#line 1768 
  if (usec_interval > 999U) 
#line 1769 
                            msleep(usec_interval / 1000U);
  else 
    
#line 1771 
    if (0 != 0) 
      
#line 1771 
      if (usec_interval > 19999U) 
#line 1771 
                                  __bad_udelay(); else 
#line 1771 
                                                       __const_udelay((unsigned long)usec_interval * 4295UL);
    else 
#line 1771 
         __udelay((unsigned long)usec_interval);
  
#line 1747 
  i = (u16)((int)i + 1);
  ldv_47879: 
#line 1748 
  ;
  
#line 1747 
  if ((unsigned int)i < iterations) 
#line 1749 
                                    goto ldv_47878; else 
#line 1752 
                                                         goto ldv_47877;
  ldv_47877: 
#line 1753 
  ;
  
#line 1774 
  *success = (_Bool)((unsigned int)i < iterations);
  
#line 1776 
  return ret_val;
}


#line 1794  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_get_cable_length_m88(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_data;
  u16 index;
  
#line 1796 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1800 
  ret_val = e1e_rphy(hw,17U,& phy_data);
  
#line 1801 
  if (ret_val != 0) {
    
#line 1802 
    __retres = ret_val;
    
#line 1802 
    goto return_label;
  }
  else ;
  
#line 1804 
  index = (unsigned short)((unsigned int)((unsigned short)((int)phy_data >> 7)) & 7U);
  
#line 1807 
  if ((unsigned int)index > 5U) {
    
#line 1808 
    __retres = -2;
    
#line 1808 
    goto return_label;
  }
  else ;
  
#line 1810 
  phy->min_cable_length = e1000_m88_cable_length_table[(int)index];
  
#line 1811 
  phy->max_cable_length = e1000_m88_cable_length_table[(int)index + 1];
  
#line 1813 
  phy->cable_length = (unsigned short)(((int)phy->min_cable_length + (int)phy->max_cable_length) / 2);
  
#line 1815 
  __retres = 0;
  return_label: 
#line 1815 
                return __retres;
}


#line 1829  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_get_cable_length_igp_2(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_data;
  u16 i;
  u16 cur_agc_index;
  int tmp;
  
#line 1831 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1833 
  u16 agc_value = (unsigned short)0U;
  
#line 1834 
  u16 max_agc_index = (unsigned short)0U;
  
#line 1835 
  u16 min_agc_index = (unsigned short)112U;
  
#line 1836 
  u16 const agc_reg_array[4U] = {(unsigned short)4529U, (unsigned short)4785U, (unsigned short)5297U, (unsigned short)6321U};
  
#line 1844 
  i = (unsigned short)0U;
  
#line 1844 
  goto ldv_47909;
  ldv_47908: 
#line 1845 
  ;
  
#line 1845 
  ret_val = e1e_rphy(hw,(unsigned int)agc_reg_array[(int)i],& phy_data);
  
#line 1846 
  if (ret_val != 0) {
    
#line 1847 
    __retres = ret_val;
    
#line 1847 
    goto return_label;
  }
  else ;
  
#line 1854 
  cur_agc_index = (unsigned short)((int)phy_data >> 9);
  
#line 1858 
  if ((unsigned int)cur_agc_index + 65535U > 111U) {
    
#line 1860 
    __retres = -2;
    
#line 1860 
    goto return_label;
  }
  else ;
  
#line 1863 
  if ((int)e1000_igp_2_cable_length_table[(int)min_agc_index] > (int)e1000_igp_2_cable_length_table[(int)cur_agc_index]) 
    
#line 1865 
    min_agc_index = cur_agc_index; else ;
  
#line 1866 
  if ((int)e1000_igp_2_cable_length_table[(int)max_agc_index] < (int)e1000_igp_2_cable_length_table[(int)cur_agc_index]) 
    
#line 1868 
    max_agc_index = cur_agc_index; else ;
  
#line 1870 
  agc_value = (unsigned short)((int)e1000_igp_2_cable_length_table[(int)cur_agc_index] + (int)agc_value);
  
#line 1844 
  i = (u16)((int)i + 1);
  ldv_47909: 
#line 1845 
  ;
  
#line 1844 
  if ((unsigned int)i <= 3U) 
#line 1846 
                             goto ldv_47908; else 
#line 1849 
                                                  goto ldv_47910;
  ldv_47910: 
#line 1850 
  ;
  
#line 1873 
  agc_value = (unsigned short)((int)agc_value - ((int)e1000_igp_2_cable_length_table[(int)min_agc_index] + (int)e1000_igp_2_cable_length_table[(int)max_agc_index]));
  
#line 1875 
  agc_value = (unsigned short)((unsigned int)agc_value / 2U);
  
#line 1878 
  if (0 > (int)agc_value + -15) 
#line 1878 
                                tmp = 0; else 
#line 1878 
                                              tmp = (int)agc_value + -15;
  
#line 1878 
  phy->min_cable_length = (unsigned short)tmp;
  
#line 1880 
  phy->max_cable_length = (unsigned short)((unsigned int)agc_value + 15U);
  
#line 1882 
  phy->cable_length = (unsigned short)(((int)phy->min_cable_length + (int)phy->max_cable_length) / 2);
  
#line 1884 
  __retres = 0;
  return_label: 
#line 1884 
                return __retres;
}


#line 1897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_get_phy_info_m88(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_data;
  bool link;
  
#line 1899 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1904 
  if (phy->media_type != (unsigned int)e1000_media_type_copper) {
    {
      
#line 1905 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_get_phy_info_m88", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Phy info is only valid for copper media\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1905U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1905 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1905 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Phy info is only valid for copper media\n"); else ;
    }
    
#line 1906 
    __retres = -3;
    
#line 1906 
    goto return_label;
  }
  else ;
  
#line 1909 
  ret_val = e1000e_phy_has_link_generic(hw,1U,0U,& link);
  
#line 1910 
  if (ret_val != 0) {
    
#line 1911 
    __retres = ret_val;
    
#line 1911 
    goto return_label;
  }
  else ;
  
#line 1913 
  if (! link) {
    {
      
#line 1914 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_get_phy_info_m88", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Phy info is only valid if link is up\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1914U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1914 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1914 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Phy info is only valid if link is up\n"); else ;
    }
    
#line 1915 
    __retres = -3;
    
#line 1915 
    goto return_label;
  }
  else ;
  
#line 1918 
  ret_val = e1e_rphy(hw,16U,& phy_data);
  
#line 1919 
  if (ret_val != 0) {
    
#line 1920 
    __retres = ret_val;
    
#line 1920 
    goto return_label;
  }
  else ;
  
#line 1922 
  phy->polarity_correction = (_Bool)(((int)phy_data & 2) != 0);
  
#line 1925 
  ret_val = e1000_check_polarity_m88(hw);
  
#line 1926 
  if (ret_val != 0) {
    
#line 1927 
    __retres = ret_val;
    
#line 1927 
    goto return_label;
  }
  else ;
  
#line 1929 
  ret_val = e1e_rphy(hw,17U,& phy_data);
  
#line 1930 
  if (ret_val != 0) {
    
#line 1931 
    __retres = ret_val;
    
#line 1931 
    goto return_label;
  }
  else ;
  
#line 1933 
  phy->is_mdix = (_Bool)(((int)phy_data & 64) != 0);
  
#line 1935 
  if (((int)phy_data & 49152) == 32768) {
    
#line 1936 
    ret_val = (*(hw->phy.ops.get_cable_length))(hw);
    
#line 1937 
    if (ret_val != 0) {
      
#line 1938 
      __retres = ret_val;
      
#line 1938 
      goto return_label;
    }
    else ;
    
#line 1940 
    ret_val = e1e_rphy(hw,10U,& phy_data);
    
#line 1941 
    if (ret_val != 0) {
      
#line 1942 
      __retres = ret_val;
      
#line 1942 
      goto return_label;
    }
    else ;
    
#line 1944 
    phy->local_rx = (enum e1000_1000t_rx_status)(((int)phy_data >> 13) & 1);
    
#line 1947 
    phy->remote_rx = (enum e1000_1000t_rx_status)(((int)phy_data >> 12) & 1);
  }
  else {
    
#line 1951 
    phy->cable_length = (unsigned short)255U;
    
#line 1952 
    phy->local_rx = e1000_1000t_rx_status_undefined;
    
#line 1953 
    phy->remote_rx = e1000_1000t_rx_status_undefined;
  }
  
#line 1956 
  __retres = ret_val;
  return_label: 
#line 1956 
                return __retres;
}


#line 1968  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_get_phy_info_igp(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 data;
  bool link;
  
#line 1970 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 1975 
  ret_val = e1000e_phy_has_link_generic(hw,1U,0U,& link);
  
#line 1976 
  if (ret_val != 0) {
    
#line 1977 
    __retres = ret_val;
    
#line 1977 
    goto return_label;
  }
  else ;
  
#line 1979 
  if (! link) {
    {
      
#line 1980 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_get_phy_info_igp", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Phy info is only valid if link is up\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1980U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1980 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1980 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Phy info is only valid if link is up\n"); else ;
    }
    
#line 1981 
    __retres = -3;
    
#line 1981 
    goto return_label;
  }
  else ;
  
#line 1984 
  phy->polarity_correction = (_Bool)1;
  
#line 1986 
  ret_val = e1000_check_polarity_igp(hw);
  
#line 1987 
  if (ret_val != 0) {
    
#line 1988 
    __retres = ret_val;
    
#line 1988 
    goto return_label;
  }
  else ;
  
#line 1990 
  ret_val = e1e_rphy(hw,17U,& data);
  
#line 1991 
  if (ret_val != 0) {
    
#line 1992 
    __retres = ret_val;
    
#line 1992 
    goto return_label;
  }
  else ;
  
#line 1994 
  phy->is_mdix = (_Bool)(((int)data & 2048) != 0);
  
#line 1996 
  if (((int)data & 49152) == 49152) {
    
#line 1998 
    ret_val = (*(phy->ops.get_cable_length))(hw);
    
#line 1999 
    if (ret_val != 0) {
      
#line 2000 
      __retres = ret_val;
      
#line 2000 
      goto return_label;
    }
    else ;
    
#line 2002 
    ret_val = e1e_rphy(hw,10U,& data);
    
#line 2003 
    if (ret_val != 0) {
      
#line 2004 
      __retres = ret_val;
      
#line 2004 
      goto return_label;
    }
    else ;
    
#line 2006 
    phy->local_rx = (enum e1000_1000t_rx_status)(((int)data >> 13) & 1);
    
#line 2009 
    phy->remote_rx = (enum e1000_1000t_rx_status)(((int)data >> 12) & 1);
  }
  else {
    
#line 2012 
    phy->cable_length = (unsigned short)255U;
    
#line 2013 
    phy->local_rx = e1000_1000t_rx_status_undefined;
    
#line 2014 
    phy->remote_rx = e1000_1000t_rx_status_undefined;
  }
  
#line 2017 
  __retres = ret_val;
  return_label: 
#line 2017 
                return __retres;
}


#line 2026  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_get_phy_info_ife(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 data;
  bool link;
  
#line 2028 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 2033 
  ret_val = e1000e_phy_has_link_generic(hw,1U,0U,& link);
  
#line 2034 
  if (ret_val != 0) {
    
#line 2035 
    __retres = ret_val;
    
#line 2035 
    goto return_label;
  }
  else ;
  
#line 2037 
  if (! link) {
    {
      
#line 2038 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_get_phy_info_ife", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Phy info is only valid if link is up\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2038U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2038 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2038 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Phy info is only valid if link is up\n"); else ;
    }
    
#line 2039 
    __retres = -3;
    
#line 2039 
    goto return_label;
  }
  else ;
  
#line 2042 
  ret_val = e1e_rphy(hw,17U,& data);
  
#line 2043 
  if (ret_val != 0) {
    
#line 2044 
    __retres = ret_val;
    
#line 2044 
    goto return_label;
  }
  else ;
  
#line 2045 
  phy->polarity_correction = (_Bool)(((int)data & 16) == 0);
  
#line 2047 
  if ((int)phy->polarity_correction != 0) {
    
#line 2048 
    ret_val = e1000_check_polarity_ife(hw);
    
#line 2049 
    if (ret_val != 0) {
      
#line 2050 
      __retres = ret_val;
      
#line 2050 
      goto return_label;
    }
    else ;
  }
  else 
#line 2053 
       phy->cable_polarity = (enum e1000_rev_polarity)(((int)data >> 5) & 1);
  
#line 2058 
  ret_val = e1e_rphy(hw,28U,& data);
  
#line 2059 
  if (ret_val != 0) {
    
#line 2060 
    __retres = ret_val;
    
#line 2060 
    goto return_label;
  }
  else ;
  
#line 2062 
  phy->is_mdix = (_Bool)(((int)data & 32) != 0);
  
#line 2065 
  phy->cable_length = (unsigned short)255U;
  
#line 2066 
  phy->local_rx = e1000_1000t_rx_status_undefined;
  
#line 2067 
  phy->remote_rx = e1000_1000t_rx_status_undefined;
  
#line 2069 
  __retres = 0;
  return_label: 
#line 2069 
                return __retres;
}


#line 2079  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_phy_sw_reset(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_ctrl;
  
#line 2084 
  ret_val = e1e_rphy(hw,0U,& phy_ctrl);
  
#line 2085 
  if (ret_val != 0) {
    
#line 2086 
    __retres = ret_val;
    
#line 2086 
    goto return_label;
  }
  else ;
  
#line 2088 
  phy_ctrl = (unsigned short)((unsigned int)phy_ctrl | 32768U);
  
#line 2089 
  ret_val = e1e_wphy(hw,0U,(unsigned short)((int)phy_ctrl));
  
#line 2090 
  if (ret_val != 0) {
    
#line 2091 
    __retres = ret_val;
    
#line 2091 
    goto return_label;
  }
  else ;
  
#line 2093 
  __const_udelay(4295UL);
  
#line 2095 
  __retres = ret_val;
  return_label: 
#line 2095 
                return __retres;
}


#line 2107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_phy_hw_reset_generic(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u32 ctrl;
  s32 tmp;
  
#line 2109 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 2113 
  if (phy->ops.check_reset_block != (s32 (*)(struct e1000_hw *))0) {
    
#line 2114 
    ret_val = (*(phy->ops.check_reset_block))(hw);
    
#line 2115 
    if (ret_val != 0) {
      
#line 2116 
      __retres = 0;
      
#line 2116 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2119 
  ret_val = (*(phy->ops.acquire))(hw);
  
#line 2120 
  if (ret_val != 0) {
    
#line 2121 
    __retres = ret_val;
    
#line 2121 
    goto return_label;
  }
  else ;
  
#line 2123 
  ctrl = __er32(hw,0UL);
  
#line 2124 
  __ew32(hw,0UL,ctrl | 2147483648U);
  
#line 2125 
  __er32(hw,8UL);
  
#line 2127 
  if (0 != 0) 
    
#line 2127 
    if (phy->reset_delay_us > 19999U) 
#line 2127 
                                      __bad_udelay(); else 
#line 2127 
                                                           __const_udelay((unsigned long)phy->reset_delay_us * 4295UL);
  else 
#line 2127 
       __udelay((unsigned long)phy->reset_delay_us);
  
#line 2129 
  __ew32(hw,0UL,ctrl);
  
#line 2130 
  __er32(hw,8UL);
  
#line 2132 
  usleep_range(150UL,300UL);
  
#line 2134 
  (*(phy->ops.release))(hw);
  
#line 2136 
  tmp = (*(phy->ops.get_cfg_done))(hw);
  
#line 2136 
  __retres = tmp;
  return_label: 
#line 2136 
                return __retres;
}


#line 2146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_get_cfg_done_generic(struct e1000_hw *hw)
{
  s32 __retres;
  {
    
#line 2148 
    unsigned long __ms = 10UL;
    {
      unsigned long tmp;
      
#line 2148 
      goto ldv_47955;
      ldv_47954: 
#line 2149 
      ;
      
#line 2148 
      __const_udelay(4295000UL);
      ldv_47955: 
#line 2150 
      ;
      
#line 2148 
      tmp = __ms;
      
#line 2148 
      __ms -= 1UL;
      
#line 2148 
      ;
      
#line 2148 
      if (tmp != 0UL) 
#line 2150 
                      goto ldv_47954; else 
#line 2153 
                                           goto ldv_47956;
      ldv_47956: 
#line 2154 
      ;
    }
  }
  
#line 2150 
  __retres = 0;
  
#line 2150 
  return __retres;
}


#line 2159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_phy_init_script_igp3(struct e1000_hw *hw)
{
  s32 __retres;
  {
    
#line 2161 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_phy_init_script_igp3", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Running IGP 3 PHY init script\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2161U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2161 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2161 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Running IGP 3 PHY init script\n"); else ;
  }
  
#line 2165 
  e1e_wphy(hw,12123U,(unsigned short)36888);
  
#line 2167 
  e1e_wphy(hw,12114U,(unsigned short)0);
  
#line 2169 
  e1e_wphy(hw,12209U,(unsigned short)35620);
  
#line 2171 
  e1e_wphy(hw,12210U,(unsigned short)63728);
  
#line 2173 
  e1e_wphy(hw,8208U,(unsigned short)4272);
  
#line 2175 
  e1e_wphy(hw,8209U,(unsigned short)0);
  
#line 2177 
  e1e_wphy(hw,8413U,(unsigned short)9370);
  
#line 2179 
  e1e_wphy(hw,8414U,(unsigned short)211);
  
#line 2181 
  e1e_wphy(hw,10420U,(unsigned short)1230);
  
#line 2183 
  e1e_wphy(hw,12144U,(unsigned short)10724);
  
#line 2185 
  e1e_wphy(hw,0U,(unsigned short)320);
  
#line 2187 
  e1e_wphy(hw,7984U,(unsigned short)5638);
  
#line 2189 
  e1e_wphy(hw,7985U,(unsigned short)47124);
  
#line 2191 
  e1e_wphy(hw,7989U,(unsigned short)42);
  
#line 2193 
  e1e_wphy(hw,7998U,(unsigned short)103);
  
#line 2195 
  e1e_wphy(hw,8020U,(unsigned short)101);
  
#line 2197 
  e1e_wphy(hw,8021U,(unsigned short)42);
  
#line 2199 
  e1e_wphy(hw,8022U,(unsigned short)42);
  
#line 2201 
  e1e_wphy(hw,8050U,(unsigned short)16304);
  
#line 2203 
  e1e_wphy(hw,8054U,(unsigned short)49407);
  
#line 2205 
  e1e_wphy(hw,8055U,(unsigned short)7660);
  
#line 2207 
  e1e_wphy(hw,8056U,(unsigned short)63983);
  
#line 2209 
  e1e_wphy(hw,8057U,(unsigned short)528);
  
#line 2211 
  e1e_wphy(hw,6293U,(unsigned short)3);
  
#line 2213 
  e1e_wphy(hw,6038U,(unsigned short)8);
  
#line 2215 
  e1e_wphy(hw,6040U,(unsigned short)53256);
  
#line 2219 
  e1e_wphy(hw,6296U,(unsigned short)55576);
  
#line 2221 
  e1e_wphy(hw,6266U,(unsigned short)2048);
  
#line 2225 
  e1e_wphy(hw,25U,(unsigned short)141);
  
#line 2227 
  e1e_wphy(hw,27U,(unsigned short)8320);
  
#line 2229 
  e1e_wphy(hw,20U,(unsigned short)69);
  
#line 2231 
  e1e_wphy(hw,0U,(unsigned short)4928);
  
#line 2233 
  __retres = 0;
  
#line 2233 
  return __retres;
}


#line 2242  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
enum e1000_phy_type e1000e_get_phy_type_from_id(u32 phy_id)
{
  
#line 2244 
  enum e1000_phy_type phy_type = e1000_phy_unknown;
  
#line 2246 
  switch (phy_id) {
    case (u32)21040176: 
#line 2247 
    ;
    case (u32)21040208: 
#line 2248 
    ;
    case (u32)21040320: 
#line 2249 
    ;
    case (u32)21040160: 
#line 2250 
    ;
    
#line 2251 
    phy_type = e1000_phy_m88;
    
#line 2252 
    goto ldv_47970;
    case (u32)44565376: 
#line 2253 
    ;
    
#line 2254 
    phy_type = e1000_phy_igp_2;
    
#line 2255 
    goto ldv_47970;
    case (u32)21040288: 
#line 2256 
    ;
    
#line 2257 
    phy_type = e1000_phy_gg82563;
    
#line 2258 
    goto ldv_47970;
    case (u32)44565392: 
#line 2259 
    ;
    
#line 2260 
    phy_type = e1000_phy_igp_3;
    
#line 2261 
    goto ldv_47970;
    case (u32)44565296: 
#line 2262 
    ;
    case (u32)44565280: 
#line 2263 
    ;
    case (u32)44565264: 
#line 2264 
    ;
    
#line 2265 
    phy_type = e1000_phy_ife;
    
#line 2266 
    goto ldv_47970;
    case (u32)21040304: 
#line 2267 
    ;
    case (u32)21040305: 
#line 2268 
    ;
    
#line 2269 
    phy_type = e1000_phy_bm;
    
#line 2270 
    goto ldv_47970;
    case (u32)5099584: 
#line 2271 
    ;
    
#line 2272 
    phy_type = e1000_phy_82578;
    
#line 2273 
    goto ldv_47970;
    case (u32)22282320: 
#line 2274 
    ;
    
#line 2275 
    phy_type = e1000_phy_82577;
    
#line 2276 
    goto ldv_47970;
    case (u32)22282384: 
#line 2277 
    ;
    
#line 2278 
    phy_type = e1000_phy_82579;
    
#line 2279 
    goto ldv_47970;
    case (u32)22282400: 
#line 2280 
    ;
    
#line 2281 
    phy_type = e1000_phy_i217;
    
#line 2282 
    goto ldv_47970;
    default: 
#line 2283 
    ;
    
#line 2284 
    phy_type = e1000_phy_unknown;
    
#line 2285 
    goto ldv_47970;
  }
  ldv_47970: 
#line 2287 
  ;
  
#line 2287 
  return phy_type;
}


#line 2298  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_determine_phy_address(struct e1000_hw *hw)
{
  s32 __retres;
  u32 i;
  
#line 2300 
  u32 phy_addr = 0U;
  
#line 2302 
  enum e1000_phy_type phy_type = e1000_phy_unknown;
  
#line 2304 
  hw->phy.id = (unsigned int)phy_type;
  
#line 2306 
  phy_addr = 0U;
  
#line 2306 
  goto ldv_47993;
  ldv_47992: 
#line 2307 
  ;
  
#line 2307 
  hw->phy.addr = phy_addr;
  
#line 2308 
  i = 0U;
  ldv_47990: 
#line 2309 
  ;
  
#line 2311 
  e1000e_get_phy_id(hw);
  
#line 2312 
  phy_type = e1000e_get_phy_type_from_id(hw->phy.id);
  
#line 2317 
  if (phy_type != (unsigned int)e1000_phy_unknown) {
    
#line 2318 
    __retres = 0;
    
#line 2318 
    goto return_label;
  }
  else ;
  
#line 2320 
  usleep_range(1000UL,2000UL);
  
#line 2321 
  i += 1U;
  
#line 2322 
  if (i <= 9U) 
#line 2324 
               goto ldv_47990; else 
#line 2327 
                                    goto ldv_47991;
  ldv_47991: 
#line 2328 
  ;
  
#line 2306 
  phy_addr += 1U;
  ldv_47993: 
#line 2307 
  ;
  
#line 2306 
  if (phy_addr <= 7U) 
#line 2308 
                      goto ldv_47992; else 
#line 2311 
                                           goto ldv_47994;
  ldv_47994: 
#line 2312 
  ;
  
#line 2325 
  __retres = -6;
  return_label: 
#line 2325 
                return __retres;
}


#line 2334  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static u32 e1000_get_phy_addr_for_bm_page(u32 page, u32 reg)
{
  
#line 2336 
  u32 phy_addr = 2U;
  
#line 2338 
  if ((page > 767U || (page == 0U && reg == 25U)) || reg == 31U) 
#line 2339 
                                                                 phy_addr = 1U; else ;
  
#line 2341 
  return phy_addr;
}


#line 2353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_write_phy_reg_bm(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 __retres;
  s32 ret_val;
  
#line 2356 
  u32 page = offset >> 5;
  
#line 2358 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 2359 
  if (ret_val != 0) {
    
#line 2360 
    __retres = ret_val;
    
#line 2360 
    goto return_label;
  }
  else ;
  
#line 2363 
  if (page == 800U) {
    
#line 2364 
    ret_val = e1000_access_phy_wakeup_reg_bm(hw,offset,& data,(_Bool)0,(_Bool)0);
    
#line 2366 
    goto release;
  }
  else ;
  
#line 2369 
  hw->phy.addr = e1000_get_phy_addr_for_bm_page(page,offset);
  
#line 2371 
  if (offset > 15U) {
    u32 page_shift;
    u32 page_select;
    
#line 2378 
    if (hw->phy.addr == 1U) {
      
#line 2379 
      page_shift = 5U;
      
#line 2380 
      page_select = 31U;
    }
    else {
      
#line 2382 
      page_shift = 0U;
      
#line 2383 
      page_select = 22U;
    }
    
#line 2387 
    ret_val = e1000e_write_phy_reg_mdic(hw,page_select,(unsigned short)((int)((unsigned short)(page << page_shift))));
    
#line 2389 
    if (ret_val != 0) 
#line 2390 
                      goto release; else ;
  }
  else ;
  
#line 2393 
  ret_val = e1000e_write_phy_reg_mdic(hw,offset & 31U,(unsigned short)((int)data));
  release: 
#line 2396 
  ;
  
#line 2397 
  (*(hw->phy.ops.release))(hw);
  
#line 2398 
  __retres = ret_val;
  return_label: 
#line 2398 
                return __retres;
}


#line 2411  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_read_phy_reg_bm(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 __retres;
  s32 ret_val;
  
#line 2414 
  u32 page = offset >> 5;
  
#line 2416 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 2417 
  if (ret_val != 0) {
    
#line 2418 
    __retres = ret_val;
    
#line 2418 
    goto return_label;
  }
  else ;
  
#line 2421 
  if (page == 800U) {
    
#line 2422 
    ret_val = e1000_access_phy_wakeup_reg_bm(hw,offset,data,(_Bool)1,(_Bool)0);
    
#line 2424 
    goto release;
  }
  else ;
  
#line 2427 
  hw->phy.addr = e1000_get_phy_addr_for_bm_page(page,offset);
  
#line 2429 
  if (offset > 15U) {
    u32 page_shift;
    u32 page_select;
    
#line 2436 
    if (hw->phy.addr == 1U) {
      
#line 2437 
      page_shift = 5U;
      
#line 2438 
      page_select = 31U;
    }
    else {
      
#line 2440 
      page_shift = 0U;
      
#line 2441 
      page_select = 22U;
    }
    
#line 2445 
    ret_val = e1000e_write_phy_reg_mdic(hw,page_select,(unsigned short)((int)((unsigned short)(page << page_shift))));
    
#line 2447 
    if (ret_val != 0) 
#line 2448 
                      goto release; else ;
  }
  else ;
  
#line 2451 
  ret_val = e1000e_read_phy_reg_mdic(hw,offset & 31U,data);
  release: 
#line 2453 
  ;
  
#line 2454 
  (*(hw->phy.ops.release))(hw);
  
#line 2455 
  __retres = ret_val;
  return_label: 
#line 2455 
                return __retres;
}


#line 2468  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_read_phy_reg_bm2(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 __retres;
  s32 ret_val;
  
#line 2471 
  u16 page = (unsigned short)(offset >> 5);
  
#line 2473 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 2474 
  if (ret_val != 0) {
    
#line 2475 
    __retres = ret_val;
    
#line 2475 
    goto return_label;
  }
  else ;
  
#line 2478 
  if ((unsigned int)page == 800U) {
    
#line 2479 
    ret_val = e1000_access_phy_wakeup_reg_bm(hw,offset,data,(_Bool)1,(_Bool)0);
    
#line 2481 
    goto release;
  }
  else ;
  
#line 2484 
  hw->phy.addr = 1U;
  
#line 2486 
  if (offset > 15U) {
    
#line 2488 
    ret_val = e1000e_write_phy_reg_mdic(hw,22U,(unsigned short)((int)page));
    
#line 2491 
    if (ret_val != 0) 
#line 2492 
                      goto release; else ;
  }
  else ;
  
#line 2495 
  ret_val = e1000e_read_phy_reg_mdic(hw,offset & 31U,data);
  release: 
#line 2497 
  ;
  
#line 2498 
  (*(hw->phy.ops.release))(hw);
  
#line 2499 
  __retres = ret_val;
  return_label: 
#line 2499 
                return __retres;
}


#line 2511  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000e_write_phy_reg_bm2(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 __retres;
  s32 ret_val;
  
#line 2514 
  u16 page = (unsigned short)(offset >> 5);
  
#line 2516 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 2517 
  if (ret_val != 0) {
    
#line 2518 
    __retres = ret_val;
    
#line 2518 
    goto return_label;
  }
  else ;
  
#line 2521 
  if ((unsigned int)page == 800U) {
    
#line 2522 
    ret_val = e1000_access_phy_wakeup_reg_bm(hw,offset,& data,(_Bool)0,(_Bool)0);
    
#line 2524 
    goto release;
  }
  else ;
  
#line 2527 
  hw->phy.addr = 1U;
  
#line 2529 
  if (offset > 15U) {
    
#line 2531 
    ret_val = e1000e_write_phy_reg_mdic(hw,22U,(unsigned short)((int)page));
    
#line 2534 
    if (ret_val != 0) 
#line 2535 
                      goto release; else ;
  }
  else ;
  
#line 2538 
  ret_val = e1000e_write_phy_reg_mdic(hw,offset & 31U,(unsigned short)((int)data));
  release: 
#line 2541 
  ;
  
#line 2542 
  (*(hw->phy.ops.release))(hw);
  
#line 2543 
  __retres = ret_val;
  return_label: 
#line 2543 
                return __retres;
}


#line 2554  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_enable_phy_wakeup_reg_access_bm(struct e1000_hw *hw, u16 *phy_reg)
{
  s32 __retres;
  s32 ret_val;
  u16 temp;
  s32 tmp;
  
#line 2560 
  hw->phy.addr = 1U;
  
#line 2563 
  ret_val = e1000_set_page_igp(hw,(unsigned short)24608);
  
#line 2564 
  if (ret_val != 0) {
    {
      
#line 2565 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_enable_phy_wakeup_reg_access_bm", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Could not set Port Control page\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2565U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2565 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2565 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Could not set Port Control page\n"); else ;
    }
    
#line 2566 
    __retres = ret_val;
    
#line 2566 
    goto return_label;
  }
  else ;
  
#line 2569 
  ret_val = e1000e_read_phy_reg_mdic(hw,17U,phy_reg);
  
#line 2570 
  if (ret_val != 0) {
    {
      
#line 2571 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_enable_phy_wakeup_reg_access_bm", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Could not read PHY register %d.%d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2572U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2571 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 2571 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Could not read PHY register %d.%d\n",769,17); else ;
    }
    
#line 2573 
    __retres = ret_val;
    
#line 2573 
    goto return_label;
  }
  else ;
  
#line 2579 
  temp = *phy_reg;
  
#line 2580 
  temp = (unsigned short)((unsigned int)temp | 4U);
  
#line 2581 
  temp = (unsigned short)((unsigned int)temp & 65487U);
  
#line 2583 
  ret_val = e1000e_write_phy_reg_mdic(hw,17U,(unsigned short)((int)temp));
  
#line 2584 
  if (ret_val != 0) {
    {
      
#line 2585 
      struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_enable_phy_wakeup_reg_access_bm", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Could not write PHY register %d.%d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2586U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2585 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 2585 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Could not write PHY register %d.%d\n",769,17); else ;
    }
    
#line 2587 
    __retres = ret_val;
    
#line 2587 
    goto return_label;
  }
  else ;
  
#line 2593 
  tmp = e1000_set_page_igp(hw,(unsigned short)25600);
  
#line 2593 
  __retres = tmp;
  return_label: 
#line 2593 
                return __retres;
}


#line 2607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_disable_phy_wakeup_reg_access_bm(struct e1000_hw *hw, u16 *phy_reg)
{
  s32 __retres;
  s32 ret_val;
  
#line 2612 
  ret_val = e1000_set_page_igp(hw,(unsigned short)24608);
  
#line 2613 
  if (ret_val != 0) {
    {
      
#line 2614 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_disable_phy_wakeup_reg_access_bm", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Could not set Port Control page\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2614U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2614 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2614 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Could not set Port Control page\n"); else ;
    }
    
#line 2615 
    __retres = ret_val;
    
#line 2615 
    goto return_label;
  }
  else ;
  
#line 2619 
  ret_val = e1000e_write_phy_reg_mdic(hw,17U,(unsigned short)((int)*phy_reg));
  
#line 2620 
  if (ret_val != 0) {
    
#line 2621 
    struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_disable_phy_wakeup_reg_access_bm", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Could not restore PHY register %d.%d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2622U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2621 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 2621 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Could not restore PHY register %d.%d\n",769,17); else ;
  }
  else ;
  
#line 2624 
  __retres = ret_val;
  return_label: 
#line 2624 
                return __retres;
}


#line 2652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 e1000_access_phy_wakeup_reg_bm(struct e1000_hw *hw, u32 offset, u16 *data, bool read, bool page_set)
{
  s32 __retres;
  s32 ret_val;
  
#line 2656 
  u16 reg = (unsigned short)(((unsigned int)((unsigned short)offset) & 31U) | ((unsigned int)((unsigned short)(offset >> 16)) & 65504U));
  
#line 2657 
  u16 page = (unsigned short)(offset >> 5);
  
#line 2658 
  u16 phy_reg = (unsigned short)0U;
  
#line 2661 
  if (hw->mac.type == (unsigned int)e1000_pchlan) {
    u32 tmp;
    
#line 2661 
    tmp = __er32(hw,3856UL);
    
#line 2661 
    if ((tmp & 64U) == 0U) {
      
#line 2663 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_access_phy_wakeup_reg_bm", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Attempting to access page %d while gig enabled.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2664U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2663 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2663 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Attempting to access page %d while gig enabled.\n",(int)page); else ;
    }
    else ;
  }
  else ;
  
#line 2666 
  if (! page_set) {
    
#line 2668 
    ret_val = e1000_enable_phy_wakeup_reg_access_bm(hw,& phy_reg);
    
#line 2669 
    if (ret_val != 0) {
      {
        
#line 2670 
        struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_access_phy_wakeup_reg_bm", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Could not enable PHY wakeup reg access\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2670U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 2670 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 2670 
                                                              __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Could not enable PHY wakeup reg access\n"); else ;
      }
      
#line 2671 
      __retres = ret_val;
      
#line 2671 
      goto return_label;
    }
    else ;
  }
  else ;
  {
    
#line 2675 
    struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_access_phy_wakeup_reg_bm", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Accessing PHY page %d reg 0x%x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2675U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2675 
    if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 2675 
                                                          __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Accessing PHY page %d reg 0x%x\n",(int)page,(int)reg); else ;
  }
  
#line 2678 
  ret_val = e1000e_write_phy_reg_mdic(hw,17U,(unsigned short)((int)reg));
  
#line 2679 
  if (ret_val != 0) {
    {
      
#line 2680 
      struct _ddebug descriptor_2 = {.modname = "e1000e", .function = "e1000_access_phy_wakeup_reg_bm", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Could not write address opcode to page %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2680U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2680 
      if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 2680 
                                                            __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)(hw->adapter)->netdev,"Could not write address opcode to page %d\n",(int)page); else ;
    }
    
#line 2681 
    __retres = ret_val;
    
#line 2681 
    goto return_label;
  }
  else ;
  
#line 2684 
  if ((int)read != 0) 
#line 2686 
                      ret_val = e1000e_read_phy_reg_mdic(hw,18U,data); else 
                                                                    
#line 2690 
                                                                    ret_val = e1000e_write_phy_reg_mdic(hw,18U,(unsigned short)((int)*data));
  
#line 2694 
  if (ret_val != 0) {
    {
      
#line 2695 
      struct _ddebug descriptor_3 = {.modname = "e1000e", .function = "e1000_access_phy_wakeup_reg_bm", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Could not access PHY reg %d.%d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2695U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 2695 
      if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) 
#line 2695 
                                                            __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)(hw->adapter)->netdev,"Could not access PHY reg %d.%d\n",(int)page,(int)reg); else ;
    }
    
#line 2696 
    __retres = ret_val;
    
#line 2696 
    goto return_label;
  }
  else ;
  
#line 2699 
  if (! page_set) 
#line 2700 
                  ret_val = e1000_disable_phy_wakeup_reg_access_bm(hw,& phy_reg); else ;
  
#line 2702 
  __retres = ret_val;
  return_label: 
#line 2702 
                return __retres;
}


#line 2713  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
void e1000_power_up_phy_copper(struct e1000_hw *hw)
{
  
#line 2715 
  u16 mii_reg = (unsigned short)0U;
  
#line 2718 
  e1e_rphy(hw,0U,& mii_reg);
  
#line 2719 
  mii_reg = (unsigned short)((unsigned int)mii_reg & 63487U);
  
#line 2720 
  e1e_wphy(hw,0U,(unsigned short)((int)mii_reg));
  
#line 2721 
  return;
}


#line 2731  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
void e1000_power_down_phy_copper(struct e1000_hw *hw)
{
  
#line 2733 
  u16 mii_reg = (unsigned short)0U;
  
#line 2736 
  e1e_rphy(hw,0U,& mii_reg);
  
#line 2737 
  mii_reg = (unsigned short)((unsigned int)mii_reg | 2048U);
  
#line 2738 
  e1e_wphy(hw,0U,(unsigned short)((int)mii_reg));
  
#line 2739 
  usleep_range(1000UL,2000UL);
  
#line 2740 
  return;
}


#line 2753  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 __e1000_read_phy_reg_hv(struct e1000_hw *hw, u32 offset, u16 *data, bool locked, bool page_set)
{
  s32 __retres;
  s32 ret_val;
  u32 tmp;
  
#line 2757 
  u16 page = (unsigned short)(offset >> 5);
  
#line 2758 
  u16 reg = (unsigned short)(((unsigned int)((unsigned short)offset) & 31U) | ((unsigned int)((unsigned short)(offset >> 16)) & 65504U));
  
#line 2759 
  tmp = e1000_get_phy_addr_for_hv_page((unsigned int)page);
  
#line 2759 
  hw->phy.addr = tmp;
  
#line 2759 
  u32 phy_addr = tmp;
  
#line 2761 
  if (! locked) {
    
#line 2762 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    
#line 2763 
    if (ret_val != 0) {
      
#line 2764 
      __retres = ret_val;
      
#line 2764 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2768 
  if ((unsigned int)page == 800U) {
    
#line 2769 
    ret_val = e1000_access_phy_wakeup_reg_bm(hw,offset,data,(_Bool)1,(_Bool)((bool)((int)page_set) != 0));
    
#line 2771 
    goto out;
  }
  else ;
  
#line 2774 
  if ((unsigned int)page + 65535U <= 766U) {
    
#line 2775 
    ret_val = e1000_access_phy_debug_regs_hv(hw,offset,data,(_Bool)1);
    
#line 2777 
    goto out;
  }
  else ;
  
#line 2780 
  if (! page_set) {
    
#line 2781 
    if ((unsigned int)page == 768U) 
#line 2782 
                                    page = (unsigned short)0U; else ;
    
#line 2784 
    if ((unsigned int)reg > 15U) {
      
#line 2786 
      ret_val = e1000_set_page_igp(hw,(unsigned short)((int)page << 5U));
      
#line 2789 
      hw->phy.addr = phy_addr;
      
#line 2791 
      if (ret_val != 0) 
#line 2792 
                        goto out; else ;
    }
    else ;
  }
  else ;
  {
    
#line 2796 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "__e1000_read_phy_reg_hv", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "reading PHY page %d (or 0x%x shifted) reg 0x%x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2797U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2796 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2796 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"reading PHY page %d (or 0x%x shifted) reg 0x%x\n",(int)page,(int)page << 5,(int)reg); else ;
  }
  
#line 2799 
  ret_val = e1000e_read_phy_reg_mdic(hw,(unsigned int)reg & 31U,data);
  out: 
#line 2800 
  ;
  
#line 2801 
  if (! locked) 
#line 2802 
                (*(hw->phy.ops.release))(hw); else ;
  
#line 2804 
  __retres = ret_val;
  return_label: 
#line 2804 
                return __retres;
}


#line 2817  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_read_phy_reg_hv(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 tmp;
  
#line 2819 
  tmp = __e1000_read_phy_reg_hv(hw,offset,data,(_Bool)0,(_Bool)0);
  
#line 2819 
  return tmp;
}


#line 2831  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_read_phy_reg_hv_locked(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 tmp;
  
#line 2833 
  tmp = __e1000_read_phy_reg_hv(hw,offset,data,(_Bool)1,(_Bool)0);
  
#line 2833 
  return tmp;
}


#line 2845  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_read_phy_reg_page_hv(struct e1000_hw *hw, u32 offset, u16 *data)
{
  s32 tmp;
  
#line 2847 
  tmp = __e1000_read_phy_reg_hv(hw,offset,data,(_Bool)1,(_Bool)1);
  
#line 2847 
  return tmp;
}


#line 2860  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 __e1000_write_phy_reg_hv(struct e1000_hw *hw, u32 offset, u16 data, bool locked, bool page_set)
{
  s32 __retres;
  s32 ret_val;
  u32 tmp;
  
#line 2864 
  u16 page = (unsigned short)(offset >> 5);
  
#line 2865 
  u16 reg = (unsigned short)(((unsigned int)((unsigned short)offset) & 31U) | ((unsigned int)((unsigned short)(offset >> 16)) & 65504U));
  
#line 2866 
  tmp = e1000_get_phy_addr_for_hv_page((unsigned int)page);
  
#line 2866 
  hw->phy.addr = tmp;
  
#line 2866 
  u32 phy_addr = tmp;
  
#line 2868 
  if (! locked) {
    
#line 2869 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    
#line 2870 
    if (ret_val != 0) {
      
#line 2871 
      __retres = ret_val;
      
#line 2871 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2875 
  if ((unsigned int)page == 800U) {
    
#line 2876 
    ret_val = e1000_access_phy_wakeup_reg_bm(hw,offset,& data,(_Bool)0,(_Bool)((bool)((int)page_set) != 0));
    
#line 2878 
    goto out;
  }
  else ;
  
#line 2881 
  if ((unsigned int)page + 65535U <= 766U) {
    
#line 2882 
    ret_val = e1000_access_phy_debug_regs_hv(hw,offset,& data,(_Bool)0);
    
#line 2884 
    goto out;
  }
  else ;
  
#line 2887 
  if (! page_set) {
    
#line 2888 
    if ((unsigned int)page == 768U) 
#line 2889 
                                    page = (unsigned short)0U; else ;
    
#line 2894 
    if ((((hw->phy.type == (unsigned int)e1000_phy_82578 && hw->phy.revision != 0U) && hw->phy.addr == 2U) && ((unsigned int)reg & 31U) == 0U) && ((int)data & 2048) != 0) {
      
#line 2898 
      u16 data2 = (unsigned short)32511U;
      
#line 2900 
      ret_val = e1000_access_phy_debug_regs_hv(hw,67U,& data2,(_Bool)0);
      
#line 2903 
      if (ret_val != 0) 
#line 2904 
                        goto out; else ;
    }
    else ;
    
#line 2907 
    if ((unsigned int)reg > 15U) {
      
#line 2909 
      ret_val = e1000_set_page_igp(hw,(unsigned short)((int)page << 5U));
      
#line 2912 
      hw->phy.addr = phy_addr;
      
#line 2914 
      if (ret_val != 0) 
#line 2915 
                        goto out; else ;
    }
    else ;
  }
  else ;
  {
    
#line 2919 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "__e1000_write_phy_reg_hv", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "writing PHY page %d (or 0x%x shifted) reg 0x%x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))2920U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 2919 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 2919 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"writing PHY page %d (or 0x%x shifted) reg 0x%x\n",(int)page,(int)page << 5,(int)reg); else ;
  }
  
#line 2922 
  ret_val = e1000e_write_phy_reg_mdic(hw,(unsigned int)reg & 31U,(unsigned short)((int)data));
  out: 
#line 2925 
  ;
  
#line 2926 
  if (! locked) 
#line 2927 
                (*(hw->phy.ops.release))(hw); else ;
  
#line 2929 
  __retres = ret_val;
  return_label: 
#line 2929 
                return __retres;
}


#line 2941  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_write_phy_reg_hv(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 tmp;
  
#line 2943 
  tmp = __e1000_write_phy_reg_hv(hw,offset,(unsigned short)((int)data),(_Bool)0,(_Bool)0);
  
#line 2943 
  return tmp;
}


#line 2955  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_write_phy_reg_hv_locked(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 tmp;
  
#line 2957 
  tmp = __e1000_write_phy_reg_hv(hw,offset,(unsigned short)((int)data),(_Bool)1,(_Bool)0);
  
#line 2957 
  return tmp;
}


#line 2969  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_write_phy_reg_page_hv(struct e1000_hw *hw, u32 offset, u16 data)
{
  s32 tmp;
  
#line 2971 
  tmp = __e1000_write_phy_reg_hv(hw,offset,(unsigned short)((int)data),(_Bool)1,(_Bool)1);
  
#line 2971 
  return tmp;
}


#line 2978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static u32 e1000_get_phy_addr_for_hv_page(u32 page)
{
  
#line 2980 
  u32 phy_addr = 2U;
  
#line 2982 
  if (page > 767U) 
#line 2983 
                   phy_addr = 1U; else ;
  
#line 2985 
  return phy_addr;
}


#line 3000  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
static s32 e1000_access_phy_debug_regs_hv(struct e1000_hw *hw, u32 offset, u16 *data, bool read)
{
  s32 __retres;
  s32 ret_val;
  u32 addr_reg;
  u32 data_reg;
  int tmp;
  
#line 3009 
  if (hw->phy.type == (unsigned int)e1000_phy_82578) 
#line 3009 
                                                     tmp = 29; else 
#line 3009 
                                                                    tmp = 16;
  
#line 3008 
  addr_reg = (unsigned int)tmp;
  
#line 3010 
  data_reg = addr_reg + 1U;
  
#line 3013 
  hw->phy.addr = 2U;
  
#line 3016 
  ret_val = e1000e_write_phy_reg_mdic(hw,addr_reg,(unsigned short)((int)((unsigned short)offset) & 63));
  
#line 3017 
  if (ret_val != 0) {
    {
      
#line 3018 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_access_phy_debug_regs_hv", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Could not write the Address Offset port register\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3018U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3018 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3018 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Could not write the Address Offset port register\n"); else ;
    }
    
#line 3019 
    __retres = ret_val;
    
#line 3019 
    goto return_label;
  }
  else ;
  
#line 3023 
  if ((int)read != 0) 
#line 3024 
                      ret_val = e1000e_read_phy_reg_mdic(hw,data_reg,data); else 
                                                                    
#line 3026 
                                                                    ret_val = e1000e_write_phy_reg_mdic(hw,data_reg,(unsigned short)((int)*data));
  
#line 3028 
  if (ret_val != 0) {
    
#line 3029 
    struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_access_phy_debug_regs_hv", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Could not access the Data port register\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3029U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 3029 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 3029 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Could not access the Data port register\n"); else ;
  }
  else ;
  
#line 3031 
  __retres = ret_val;
  return_label: 
#line 3031 
                return __retres;
}


#line 3045  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_link_stall_workaround_hv(struct e1000_hw *hw)
{
  s32 __retres;
  u16 data;
  s32 tmp;
  
#line 3047 
  s32 ret_val = 0;
  
#line 3050 
  if (hw->phy.type != (unsigned int)e1000_phy_82578) {
    
#line 3051 
    __retres = 0;
    
#line 3051 
    goto return_label;
  }
  else ;
  
#line 3054 
  e1e_rphy(hw,0U,& data);
  
#line 3055 
  if (((int)data & 16384) != 0) {
    
#line 3056 
    __retres = 0;
    
#line 3056 
    goto return_label;
  }
  else ;
  
#line 3059 
  ret_val = e1e_rphy(hw,17U,& data);
  
#line 3060 
  if (ret_val != 0) {
    
#line 3061 
    __retres = ret_val;
    
#line 3061 
    goto return_label;
  }
  else ;
  
#line 3063 
  data = (unsigned short)((unsigned int)data & 52224U);
  
#line 3066 
  if ((unsigned int)data != 35840U) {
    
#line 3068 
    __retres = 0;
    
#line 3068 
    goto return_label;
  }
  else ;
  
#line 3070 
  msleep(200U);
  
#line 3073 
  ret_val = e1e_wphy(hw,24848U,(unsigned short)1028);
  
#line 3076 
  if (ret_val != 0) {
    
#line 3077 
    __retres = ret_val;
    
#line 3077 
    goto return_label;
  }
  else ;
  
#line 3079 
  tmp = e1e_wphy(hw,24848U,(unsigned short)1024);
  
#line 3079 
  __retres = tmp;
  return_label: 
#line 3079 
                return __retres;
}


#line 3090  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_check_polarity_82577(struct e1000_hw *hw)
{
  s32 ret_val;
  u16 data;
  
#line 3092 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 3096 
  ret_val = e1e_rphy(hw,26U,& data);
  
#line 3098 
  if (ret_val == 0) 
#line 3099 
                    phy->cable_polarity = (enum e1000_rev_polarity)(((int)data >> 10) & 1); else ;
  
#line 3103 
  return ret_val;
}


#line 3112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_phy_force_speed_duplex_82577(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_data;
  bool link;
  
#line 3114 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 3119 
  ret_val = e1e_rphy(hw,0U,& phy_data);
  
#line 3120 
  if (ret_val != 0) {
    
#line 3121 
    __retres = ret_val;
    
#line 3121 
    goto return_label;
  }
  else ;
  
#line 3123 
  e1000e_phy_force_speed_duplex_setup(hw,& phy_data);
  
#line 3125 
  ret_val = e1e_wphy(hw,0U,(unsigned short)((int)phy_data));
  
#line 3126 
  if (ret_val != 0) {
    
#line 3127 
    __retres = ret_val;
    
#line 3127 
    goto return_label;
  }
  else ;
  
#line 3129 
  __const_udelay(4295UL);
  
#line 3131 
  if ((int)phy->autoneg_wait_to_complete != 0) {
    {
      
#line 3132 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_phy_force_speed_duplex_82577", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Waiting for forced speed/duplex link on 82577 phy\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3132U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3132 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3132 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Waiting for forced speed/duplex link on 82577 phy\n"); else ;
    }
    
#line 3134 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
    
#line 3136 
    if (ret_val != 0) {
      
#line 3137 
      __retres = ret_val;
      
#line 3137 
      goto return_label;
    }
    else ;
    
#line 3139 
    if (! link) {
      
#line 3140 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_phy_force_speed_duplex_82577", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Link taking longer than expected.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3140U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3140 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 3140 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Link taking longer than expected.\n"); else ;
    }
    else ;
    
#line 3143 
    ret_val = e1000e_phy_has_link_generic(hw,20U,100000U,& link);
  }
  else ;
  
#line 3147 
  __retres = ret_val;
  return_label: 
#line 3147 
                return __retres;
}


#line 3159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_get_phy_info_82577(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 data;
  bool link;
  
#line 3161 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 3166 
  ret_val = e1000e_phy_has_link_generic(hw,1U,0U,& link);
  
#line 3167 
  if (ret_val != 0) {
    
#line 3168 
    __retres = ret_val;
    
#line 3168 
    goto return_label;
  }
  else ;
  
#line 3170 
  if (! link) {
    {
      
#line 3171 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_get_phy_info_82577", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c", .format = "Phy info is only valid if link is up\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3171U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3171 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3171 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Phy info is only valid if link is up\n"); else ;
    }
    
#line 3172 
    __retres = -3;
    
#line 3172 
    goto return_label;
  }
  else ;
  
#line 3175 
  phy->polarity_correction = (_Bool)1;
  
#line 3177 
  ret_val = e1000_check_polarity_82577(hw);
  
#line 3178 
  if (ret_val != 0) {
    
#line 3179 
    __retres = ret_val;
    
#line 3179 
    goto return_label;
  }
  else ;
  
#line 3181 
  ret_val = e1e_rphy(hw,26U,& data);
  
#line 3182 
  if (ret_val != 0) {
    
#line 3183 
    __retres = ret_val;
    
#line 3183 
    goto return_label;
  }
  else ;
  
#line 3185 
  phy->is_mdix = (_Bool)(((int)data & 2048) != 0);
  
#line 3187 
  if (((int)data & 768) == 512) {
    
#line 3189 
    ret_val = (*(hw->phy.ops.get_cable_length))(hw);
    
#line 3190 
    if (ret_val != 0) {
      
#line 3191 
      __retres = ret_val;
      
#line 3191 
      goto return_label;
    }
    else ;
    
#line 3193 
    ret_val = e1e_rphy(hw,10U,& data);
    
#line 3194 
    if (ret_val != 0) {
      
#line 3195 
      __retres = ret_val;
      
#line 3195 
      goto return_label;
    }
    else ;
    
#line 3197 
    phy->local_rx = (enum e1000_1000t_rx_status)(((int)data >> 13) & 1);
    
#line 3200 
    phy->remote_rx = (enum e1000_1000t_rx_status)(((int)data >> 12) & 1);
  }
  else {
    
#line 3203 
    phy->cable_length = (unsigned short)255U;
    
#line 3204 
    phy->local_rx = e1000_1000t_rx_status_undefined;
    
#line 3205 
    phy->remote_rx = e1000_1000t_rx_status_undefined;
  }
  
#line 3208 
  __retres = 0;
  return_label: 
#line 3208 
                return __retres;
}


#line 3218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/phy.c"
s32 e1000_get_cable_length_82577(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 phy_data;
  u16 length;
  
#line 3220 
  struct e1000_phy_info *phy = & hw->phy;
  
#line 3224 
  ret_val = e1e_rphy(hw,31U,& phy_data);
  
#line 3225 
  if (ret_val != 0) {
    
#line 3226 
    __retres = ret_val;
    
#line 3226 
    goto return_label;
  }
  else ;
  
#line 3228 
  length = (unsigned short)((unsigned int)((unsigned short)((int)phy_data >> 2)) & 255U);
  
#line 3231 
  if ((unsigned int)length == 255U) {
    
#line 3232 
    __retres = -2;
    
#line 3232 
    goto return_label;
  }
  else ;
  
#line 3234 
  phy->cable_length = length;
  
#line 3236 
  __retres = 0;
  return_label: 
#line 3236 
                return __retres;
}

unsigned short __builtin_bswap16(unsigned short);

void __builtin_prefetch(void const * , ...);


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
void ldv_atomic_inc(atomic_t *v);


#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bitops/find.h"
unsigned long find_next_bit(unsigned long const *, unsigned long, unsigned long);


#line 42 
unsigned long find_first_bit(unsigned long const *, unsigned long);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val)
{
  __u16 tmp;
  
#line 49 
  tmp = __builtin_bswap16((unsigned short)((int)val));
  
#line 49 
  return tmp;
}


#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u16 __swab16p(__u16 const *p)
{
  __u16 __retres;
  int tmp_0;
  
#line 159 
  if (0 != 0) 
#line 159 
              tmp_0 = (int)((unsigned short)(((int)*p << 8) | ((int)*p >> 8)));
  else {
    __u16 tmp;
    
#line 159 
    tmp = __fswab16((unsigned short)((int)*p));
    
#line 159 
    tmp_0 = (int)tmp;
  }
  
#line 159 
  __retres = (unsigned short)tmp_0;
  
#line 159 
  return __retres;
}


#line 223  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static void __swab16s(__u16 *p)
{
  
#line 228 
  *p = __swab16p((__u16 const *)p);
  
#line 229 
  return;
}


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
int printk(char const * , ...);


#line 431 
void print_hex_dump(char const *, char const *, int, int, int, void const *, size_t, bool);


#line 178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
void __might_sleep(char const *, int, int);


#line 248 
void __might_fault(char const *, int);


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
void __bad_percpu_size(void);


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bug.h"
void warn_slowpath_null(char const *, int const);


#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void)
{
  struct task_struct *tmp;
  {
    struct task_struct *pfo_ret__;
    
#line 14 
    switch (8UL) {
      case (unsigned long)1: 
#line 14 
      ;
      
#line 15 
      ldv_inline_asm();
      
#line 14 
      goto ldv_3477;
      case (unsigned long)2: 
#line 14 
      ;
      
#line 15 
      ldv_inline_asm();
      
#line 14 
      goto ldv_3477;
      case (unsigned long)4: 
#line 14 
      ;
      
#line 15 
      ldv_inline_asm();
      
#line 14 
      goto ldv_3477;
      case (unsigned long)8: 
#line 14 
      ;
      
#line 15 
      ldv_inline_asm();
      
#line 14 
      goto ldv_3477;
      default: 
#line 14 
      ;
      
#line 14 
      __bad_percpu_size();
    }
    ldv_3477: 
#line 14 
    ;
    
#line 14 
    tmp = pfo_ret__;
  }
  
#line 14 
  return tmp;
}


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
size_t strlen(char const *);


#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/cmpxchg.h"
void __cmpxchg_wrong_size(void);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const *v)
{
  int __retres;
  int const volatile *tmp;
  {
    
#line 27 
    int const __var = 0;
    
#line 27 
    tmp = (int const volatile *)(& v->counter);
  }
  
#line 27 
  __retres = *tmp;
  
#line 27 
  return __retres;
}


#line 98 
static void atomic_inc(atomic_t *v);


#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int atomic_cmpxchg(atomic_t *v, int old, int new)
{
  int tmp;
  {
    int __ret;
    
#line 181 
    int __old = old;
    
#line 181 
    int __new = new;
    
#line 181 
    switch (4UL) {
      case (unsigned long)1: 
#line 181 
      ;
      {
        
#line 181 
        u8 volatile *__ptr = (u8 volatile *)(& v->counter);
        
#line 182 
        ldv_inline_asm();
        
#line 181 
        goto ldv_5991;
      }
      case (unsigned long)2: 
#line 181 
      ;
      {
        
#line 181 
        u16 volatile *__ptr_0 = (u16 volatile *)(& v->counter);
        
#line 182 
        ldv_inline_asm();
        
#line 181 
        goto ldv_5991;
      }
      case (unsigned long)4: 
#line 181 
      ;
      {
        
#line 181 
        u32 volatile *__ptr_1 = (u32 volatile *)(& v->counter);
        
#line 182 
        ldv_inline_asm();
        
#line 181 
        goto ldv_5991;
      }
      case (unsigned long)8: 
#line 181 
      ;
      {
        
#line 181 
        u64 volatile *__ptr_2 = (u64 volatile *)(& v->counter);
        
#line 182 
        ldv_inline_asm();
        
#line 181 
        goto ldv_5991;
      }
      default: 
#line 181 
      ;
      
#line 181 
      __cmpxchg_wrong_size();
    }
    ldv_5991: 
#line 181 
    ;
    
#line 181 
    tmp = __ret;
  }
  
#line 181 
  return tmp;
}


#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int __atomic_add_unless(atomic_t *v, int a, int u)
{
  int c;
  int old;
  
#line 197 
  c = atomic_read((atomic_t const *)v);
  ldv_6020: 
#line 198 
  ;
  
#line 199 
  if ((long)(c == u) != 0L) 
#line 200 
                            goto ldv_6019; else ;
  
#line 201 
  old = atomic_cmpxchg(v,c,c + a);
  
#line 202 
  if ((long)(old == c) != 0L) 
#line 203 
                              goto ldv_6019; else ;
  
#line 204 
  c = old;
  
#line 199 
  goto ldv_6020;
  ldv_6019: 
#line 200 
  ;
  
#line 206 
  return c;
}


#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/atomic.h"
__inline static int atomic_add_unless(atomic_t *v, int a, int u)
{
  int __retres;
  int tmp;
  
#line 17 
  tmp = __atomic_add_unless(v,a,u);
  
#line 17 
  ;
  
#line 17 
  __retres = tmp != u;
  
#line 17 
  return __retres;
}


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  int tmp;
  
#line 72 
  if (0 != 0 && (val == 1 || val == -1)) 
#line 72 
                                         tmp = val; else 
#line 72 
                                                         tmp = 0;
  
#line 72 
  int const pao_ID__ = tmp;
  
#line 72 
  switch (4UL) {
    case (unsigned long)1: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)2: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)4: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)8: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    default: 
#line 72 
    ;
    
#line 72 
    __bad_percpu_size();
  }
  ldv_6377: 
#line 72 
  ;
  
#line 74 
  return;
}


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  int tmp;
  
#line 77 
  if (0 != 0 && (- val == 1 || - val == -1)) 
#line 77 
                                             tmp = - val; else 
#line 77 
                                                               tmp = 0;
  
#line 77 
  int const pao_ID__ = tmp;
  
#line 77 
  switch (4UL) {
    case (unsigned long)1: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)2: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)4: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)8: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    default: 
#line 77 
    ;
    
#line 77 
    __bad_percpu_size();
  }
  ldv_6389: 
#line 77 
  ;
  
#line 79 
  return;
}


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
void __raw_spin_lock_init(raw_spinlock_t *, char const *, struct lock_class_key *);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock(raw_spinlock_t *);


#line 41 
void _raw_spin_unlock(raw_spinlock_t *);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  raw_spinlock_t *__retres;
  
#line 301 
  __retres = & lock->__anonCompField_spinlock_18.rlock;
  
#line 301 
  return __retres;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 358 
static void ldv_spin_lock_97(spinlock_t *lock);


#line 362 
static void ldv_spin_lock_106(spinlock_t *lock);


#line 366 
static void ldv_spin_lock_112(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 407 
static void ldv_spin_unlock_98(spinlock_t *lock);


#line 411 
static void ldv_spin_unlock_107(spinlock_t *lock);


#line 415 
static void ldv_spin_unlock_113(spinlock_t *lock);


#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 460 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 461 
  return;
}


#line 490 
static void ldv_spin_unlock_irqrestore_74(spinlock_t *lock, unsigned long flags);


#line 70  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv___ldv_spin_lock_73(spinlock_t *ldv_func_arg1);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size, gfp_t flags);


#line 283  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
__inline static ktime_t ns_to_ktime(u64 ns)
{
  
#line 285 
  ktime_t const ktime_zero = {.tv64 = 0LL};
  
#line 287 
  ktime_t __constr_expr_17 = {.tv64 = (long long)((unsigned long long)ktime_zero.tv64 + ns)};
  
#line 287 
  return __constr_expr_17;
}


#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timekeeping.h"
ktime_t ktime_get_with_offset(enum tk_offsets);


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timekeeping.h"
__inline static ktime_t ktime_get_real(void)
{
  ktime_t tmp;
  
#line 172 
  tmp = ktime_get_with_offset((enum tk_offsets)TK_OFFS_REAL);
  
#line 172 
  return tmp;
}


#line 173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
static int ldv_mod_timer_80(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 177 
static int ldv_mod_timer_83(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 181 
static int ldv_mod_timer_85(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 185 
static int ldv_mod_timer_104(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 189 
static int ldv_mod_timer_105(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 193 
static int ldv_mod_timer_109(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 232 
static int ldv_del_timer_sync_95(struct timer_list *ldv_func_arg1);


#line 236 
static int ldv_del_timer_sync_96(struct timer_list *ldv_func_arg1);


#line 240 
static int ldv_del_timer_sync_117(struct timer_list *ldv_func_arg1);


#line 244 
static int ldv_del_timer_sync_118(struct timer_list *ldv_func_arg1);


#line 252 
unsigned long round_jiffies(unsigned long);


#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
bool cancel_work_sync(struct work_struct *);


#line 560 
static bool ldv_schedule_work_75(struct work_struct *work);


#line 564 
static bool ldv_schedule_work_76(struct work_struct *work);


#line 568 
static bool ldv_schedule_work_77(struct work_struct *work);


#line 572 
static bool ldv_schedule_work_78(struct work_struct *work);


#line 576 
static bool ldv_schedule_work_79(struct work_struct *work);


#line 580 
static bool ldv_schedule_work_81(struct work_struct *work);


#line 584 
static bool ldv_schedule_work_82(struct work_struct *work);


#line 588 
static bool ldv_schedule_work_84(struct work_struct *work);


#line 592 
static bool ldv_schedule_work_101(struct work_struct *work);


#line 596 
static bool ldv_schedule_work_102(struct work_struct *work);


#line 600 
static bool ldv_schedule_work_103(struct work_struct *work);


#line 604 
static bool ldv_schedule_work_108(struct work_struct *work);


#line 608 
static bool ldv_schedule_work_110(struct work_struct *work);


#line 612 
static bool ldv_schedule_work_111(struct work_struct *work);


#line 181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
void *ioremap_nocache(resource_size_t, unsigned long);


#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void *ioremap(resource_size_t offset, unsigned long size)
{
  void *tmp;
  
#line 192 
  tmp = ioremap_nocache(offset,size);
  
#line 192 
  return tmp;
}


#line 195 
void iounmap(void volatile *);


#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
struct page *alloc_pages_current(gfp_t, unsigned int);


#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct page *alloc_pages(gfp_t gfp_mask, unsigned int order)
{
  struct page *tmp;
  
#line 327 
  tmp = alloc_pages_current(gfp_mask,order);
  
#line 327 
  return tmp;
}


#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_wakeup.h"
int device_wakeup_enable(struct device *);


#line 864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 866 
  __retres = dev->driver_data;
  
#line 866 
  return __retres;
}


#line 869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  
#line 871 
  dev->driver_data = data;
  
#line 872 
  return;
}


#line 1085 
void dev_warn(struct device const *, char const * , ...);


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc(size_t size, gfp_t flags);


#line 401  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_channel_offline(struct pci_dev *pdev)
{
  int __retres;
  
#line 403 
  __retres = pdev->error_state != 1U;
  
#line 403 
  return __retres;
}


#line 867 
int pci_bus_write_config_word(struct pci_bus *, unsigned int, int, u16);


#line 900  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_write_config_word(struct pci_dev const *dev, int where, u16 val)
{
  int tmp;
  
#line 902 
  tmp = pci_bus_write_config_word(dev->bus,dev->devfn,where,(unsigned short)((int)val));
  
#line 902 
  return tmp;
}


#line 910 
int pcie_capability_read_word(struct pci_dev *, int, u16 *);


#line 912 
int pcie_capability_write_word(struct pci_dev *, int, u16);


#line 914 
int pcie_capability_clear_and_set_word(struct pci_dev *, int, u16, u16);


#line 931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pcie_capability_clear_word(struct pci_dev *dev, int pos, u16 clear)
{
  int tmp;
  
#line 934 
  tmp = pcie_capability_clear_and_set_word(dev,pos,(unsigned short)((int)clear),(unsigned short)0);
  
#line 934 
  return tmp;
}


#line 953 
int pci_enable_device_mem(struct pci_dev *);


#line 968 
void pci_disable_device(struct pci_dev *);


#line 971 
void pci_set_master(struct pci_dev *);


#line 972 
void pci_clear_master(struct pci_dev *);


#line 1013 
int pci_select_bars(struct pci_dev *, unsigned long);


#line 1026 
int pci_save_state(struct pci_dev *);


#line 1027 
void pci_restore_state(struct pci_dev *);


#line 1044 
int __pci_enable_wake(struct pci_dev *, pci_power_t, bool, bool);


#line 1047 
int pci_prepare_to_sleep(struct pci_dev *);


#line 1049 
bool pci_dev_run_wake(struct pci_dev *);


#line 1053  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_enable_wake(struct pci_dev *dev, pci_power_t state, bool enable)
{
  int tmp;
  
#line 1056 
  tmp = __pci_enable_wake(dev,state,(_Bool)0,(_Bool)((bool)((int)enable) != 0));
  
#line 1056 
  return tmp;
}


#line 1101 
int pci_request_selected_regions_exclusive(struct pci_dev *, int, char const *);


#line 1102 
void pci_release_selected_regions(struct pci_dev *, int);


#line 1146 
static int ldv___pci_register_driver_121(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3);


#line 1158 
static void ldv_pci_unregister_driver_122(struct pci_driver *ldv_func_arg1);


#line 400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page-flags.h"
__inline static int PageTail(struct page const *page)
{
  int tmp;
  
#line 400 
  tmp = constant_test_bit(15L,(unsigned long const volatile *)(& page->flags));
  
#line 400 
  return tmp;
}


#line 440  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static struct page *compound_head_by_tail(struct page *tail)
{
  struct page *__retres;
  int tmp;
  
#line 442 
  struct page *head = tail->__anonCompField_page_49.first_page;
  
#line 443 
  ldv_inline_asm();
  
#line 450 
  tmp = PageTail((struct page const *)tail);
  
#line 450 
  if ((long)(tmp != 0) != 0L) {
    
#line 451 
    __retres = head;
    
#line 451 
    goto return_label;
  }
  else ;
  
#line 452 
  __retres = tail;
  return_label: 
#line 452 
                return __retres;
}


#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static struct page *compound_head(struct page *page)
{
  struct page *__retres;
  int tmp_0;
  
#line 463 
  tmp_0 = PageTail((struct page const *)page);
  
#line 463 
  if ((long)(tmp_0 != 0) != 0L) {
    struct page *tmp;
    
#line 464 
    tmp = compound_head_by_tail(page);
    
#line 464 
    __retres = tmp;
    
#line 464 
    goto return_label;
  }
  else ;
  
#line 465 
  __retres = page;
  return_label: 
#line 465 
                return __retres;
}


#line 569 
void put_page(struct page *);


#line 945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page const *page)
{
  void *__retres;
  
#line 947 
  __retres = (void *)((unsigned long)((unsigned long long)(((long)page + 24189255811072L) / 64L) << 12) + 18446612132314218496UL);
  
#line 947 
  return __retres;
}


#line 1031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  bool __retres;
  
#line 1037 
  __retres = (_Bool)(page->__anonCompField_page_45.__anonCompField___anonstruct_161_40.index == 18446744073709551615UL);
  
#line 1037 
  return __retres;
}


#line 1212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
void pci_disable_msi(struct pci_dev *);


#line 1216 
void pci_disable_msix(struct pci_dev *);


#line 1219 
int pci_enable_msi_range(struct pci_dev *, int, int);


#line 1220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_enable_msi_exact(struct pci_dev *dev, int nvec)
{
  int __retres;
  
#line 1222 
  int rc = pci_enable_msi_range(dev,nvec,nvec);
  
#line 1223 
  if (rc < 0) {
    
#line 1224 
    __retres = rc;
    
#line 1224 
    goto return_label;
  }
  else ;
  
#line 1225 
  __retres = 0;
  return_label: 
#line 1225 
                return __retres;
}


#line 1227 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_page(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t addr;
  void *tmp_0;
  int tmp_1;
  
#line 80 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 83 
  ;
  
#line 83 
  tmp_0 = lowmem_page_address((struct page const *)page);
  
#line 83 
  ;
  
#line 83 
  kmemcheck_mark_initialized(tmp_0 + offset,(unsigned int)size);
  
#line 84 
  tmp_1 = valid_dma_direction((int)dir);
  
#line 84 
  if ((long)(tmp_1 == 0) != 0L) {
    
#line 86 
    ldv_inline_asm();
    
#line 84 
    ;
  }
  else ;
  
#line 85 
  addr = (*(ops->map_page))(dev,page,offset,size,dir,(struct dma_attrs *)0);
  
#line 86 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr,(_Bool)0);
  
#line 88 
  return addr;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_page(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 94 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 96 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 96 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 98 
    ldv_inline_asm();
    
#line 96 
    ;
  }
  else ;
  
#line 97 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 98 
    (*(ops->unmap_page))(dev,addr,size,dir,(struct dma_attrs *)0); else ;
  
#line 99 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)0);
  
#line 100 
  return;
}


#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
int dma_supported(struct device *, u64);


#line 61 
int dma_set_mask(struct device *, u64);


#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_coherent_mask(struct device *dev, u64 mask)
{
  int __retres;
  int tmp;
  
#line 103 
  tmp = dma_supported(dev,mask);
  
#line 103 
  if (tmp == 0) {
    
#line 104 
    __retres = -5;
    
#line 104 
    goto return_label;
  }
  else ;
  
#line 105 
  dev->coherent_dma_mask = mask;
  
#line 106 
  __retres = 0;
  return_label: 
#line 106 
                return __retres;
}


#line 116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_mask_and_coherent(struct device *dev, u64 mask)
{
  
#line 118 
  int rc = dma_set_mask(dev,mask);
  
#line 119 
  if (rc == 0) 
#line 120 
               dma_set_coherent_mask(dev,mask); else ;
  
#line 121 
  return rc;
}


#line 1471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  void *tmp;
  
#line 1473 
  tmp = dev_get_drvdata((struct device const *)(& pdev->dev));
  
#line 1473 
  return tmp;
}


#line 1476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  
#line 1478 
  dev_set_drvdata(& pdev->dev,data);
  
#line 1479 
  return;
}


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
void *vzalloc(unsigned long);


#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
unsigned long _copy_from_user(void *, void const *, unsigned int);


#line 652 
unsigned long _copy_to_user(void *, void const *, unsigned int);


#line 662 
void copy_from_user_overflow(void);


#line 664 
void copy_to_user_overflow(void);


#line 672 
void __copy_from_user_overflow(void);


#line 677 
void __copy_to_user_overflow(void);


#line 693  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void const *from, unsigned long n)
{
  
#line 695 
  int sz = -1;
  
#line 697 
  __might_fault("./arch/x86/include/asm/uaccess.h",697);
  
#line 717 
  if ((long)(sz < 0) != 0L || (long)((unsigned long)sz >= n) != 0L) 
#line 718 
                                                                    n = _copy_from_user(to,from,(unsigned int)n);
  else 
    
#line 719 
    if (0 != 0) 
#line 720 
                copy_from_user_overflow(); else 
#line 722 
                                                __copy_from_user_overflow();
  
#line 724 
  return n;
}


#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void const *from, unsigned long n)
{
  
#line 730 
  int sz = -1;
  
#line 732 
  __might_fault("./arch/x86/include/asm/uaccess.h",732);
  
#line 735 
  if ((long)(sz < 0) != 0L || (long)((unsigned long)sz >= n) != 0L) 
#line 736 
                                                                    n = _copy_to_user(to,from,(unsigned int)n);
  else 
    
#line 737 
    if (0 != 0) 
#line 738 
                copy_to_user_overflow(); else 
#line 740 
                                              __copy_to_user_overflow();
  
#line 742 
  return n;
}


#line 7  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uaccess.h"
__inline static void pagefault_disabled_inc(void)
{
  struct task_struct *tmp;
  
#line 9 
  tmp = get_current();
  
#line 9 
  tmp->pagefault_disabled += 1;
  
#line 10 
  return;
}


#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uaccess.h"
__inline static void pagefault_disabled_dec(void)
{
  struct task_struct *tmp;
  
#line 14 
  tmp = get_current();
  
#line 14 
  tmp->pagefault_disabled -= 1;
  {
    struct task_struct *tmp_0;
    
#line 15 
    tmp_0 = get_current();
    
#line 15 
    int __ret_warn_on = tmp_0->pagefault_disabled < 0;
    
#line 15 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 15 
                                          warn_slowpath_null("include/linux/uaccess.h",15); else ;
    
#line 15 
    long tmp_2 = (long)(__ret_warn_on != 0);
  }
  
#line 17 
  return;
}


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uaccess.h"
__inline static void pagefault_disable(void)
{
  
#line 27 
  pagefault_disabled_inc();
  
#line 28 
  ldv_inline_asm();
  
#line 29 
  return;
}


#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uaccess.h"
__inline static void pagefault_enable(void)
{
  
#line 37 
  ldv_inline_asm();
  
#line 42 
  pagefault_disabled_dec();
  
#line 43 
  return;
}


#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hardirq.h"
void synchronize_irq(unsigned int);


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highmem.h"
__inline static void *kmap_atomic(struct page *page)
{
  void *tmp;
  
#line 68 
  __preempt_count_add(1);
  
#line 69 
  ldv_inline_asm();
  
#line 69 
  pagefault_disable();
  
#line 70 
  tmp = lowmem_page_address((struct page const *)page);
  
#line 70 
  return tmp;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/highmem.h"
__inline static void __kunmap_atomic(void *addr)
{
  
#line 76 
  pagefault_enable();
  
#line 77 
  ldv_inline_asm();
  
#line 77 
  __preempt_count_sub(1);
  
#line 78 
  return;
}


#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_queue_limits.h"
__inline static void dql_queued(struct dql *dql, unsigned int count)
{
  
#line 74 
  if ((long)(count > 268435455U) != 0L) {
    
#line 76 
    ldv_inline_asm();
    
#line 74 
    ;
  }
  else ;
  
#line 76 
  dql->last_obj_cnt = count;
  
#line 77 
  ldv_inline_asm();
  
#line 85 
  dql->num_queued += count;
  
#line 86 
  return;
}


#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_queue_limits.h"
__inline static int dql_avail(struct dql const *dql)
{
  int __retres;
  unsigned int const volatile *tmp;
  unsigned int const volatile *tmp_0;
  {
    
#line 91 
    unsigned int const __var = 0U;
    
#line 91 
    tmp = (unsigned int const volatile *)(& dql->adj_limit);
  }
  {
    
#line 91 
    unsigned int const __var_0 = 0U;
    
#line 91 
    tmp_0 = (unsigned int const volatile *)(& dql->num_queued);
  }
  
#line 91 
  ;
  
#line 91 
  __retres = (int)(*tmp - *tmp_0);
  
#line 91 
  return __retres;
}


#line 95 
void dql_completed(struct dql *, unsigned int);


#line 98 
void dql_reset(struct dql *);


#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
int net_ratelimit(void);


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_fold(__wsum sum)
{
  __sum16 __retres;
  
#line 24 
  ldv_inline_asm();
  
#line 29 
  __retres = (unsigned short)(~ sum >> 16);
  
#line 29 
  return __retres;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __wsum csum_tcpudp_nofold(__be32 saddr, __be32 daddr, unsigned short len, unsigned short proto, __wsum sum)
{
  
#line 89 
  ldv_inline_asm();
  
#line 97 
  return sum;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
__inline static __sum16 csum_tcpudp_magic(__be32 saddr, __be32 daddr, unsigned short len, unsigned short proto, __wsum sum)
{
  __sum16 tmp_0;
  __wsum tmp;
  
#line 116 
  tmp = csum_tcpudp_nofold(saddr,daddr,(unsigned short)((int)len),(unsigned short)((int)proto),sum);
  
#line 116 
  tmp_0 = csum_fold(tmp);
  
#line 116 
  return tmp_0;
}


#line 179 
__sum16 csum_ipv6_magic(struct in6_addr const *, struct in6_addr const *, __u32, unsigned short, __wsum);


#line 230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t const *frag)
{
  unsigned int __retres;
  
#line 232 
  __retres = frag->size;
  
#line 232 
  return __retres;
}


#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  
#line 237 
  frag->size = size;
  
#line 238 
  return;
}


#line 852 
int pskb_expand_head(struct sk_buff *, int, int, gfp_t);


#line 862 
int skb_pad(struct sk_buff *, int);


#line 926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  
#line 928 
  skb->l4_hash = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))(type == (unsigned int)PKT_HASH_TYPE_L4);
  
#line 929 
  skb->sw_hash = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
  
#line 930 
  skb->hash = hash;
  
#line 931 
  return;
}


#line 976  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 978 
  __retres = skb->head + skb->end;
  
#line 978 
  return __retres;
}


#line 1000  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct skb_shared_hwtstamps *skb_hwtstamps(struct sk_buff *skb)
{
  struct skb_shared_hwtstamps *__retres;
  unsigned char *tmp;
  
#line 1002 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1002 
  __retres = & ((struct skb_shared_info *)tmp)->hwtstamps;
  
#line 1002 
  return __retres;
}


#line 1085  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *skb_get(struct sk_buff *skb)
{
  
#line 1087 
  atomic_inc(& skb->users);
  
#line 1088 
  return skb;
}


#line 1127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_header_cloned(struct sk_buff const *skb)
{
  int __retres;
  int dataref;
  unsigned char *tmp;
  
#line 1131 
  if ((unsigned int)*((unsigned char *)skb + 142UL) == 0U) {
    
#line 1132 
    __retres = 0;
    
#line 1132 
    goto return_label;
  }
  else ;
  
#line 1134 
  tmp = skb_end_pointer(skb);
  
#line 1134 
  dataref = atomic_read((atomic_t const *)(& ((struct skb_shared_info *)tmp)->dataref));
  
#line 1135 
  dataref = (dataref & 65535) - (dataref >> 16);
  
#line 1136 
  __retres = dataref != 1;
  return_label: 
#line 1136 
                return __retres;
}


#line 1567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff const *skb)
{
  bool __retres;
  
#line 1569 
  __retres = (_Bool)(skb->data_len != 0U);
  
#line 1569 
  return __retres;
}


#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1574 
  __retres = skb->len - skb->data_len;
  
#line 1574 
  return __retres;
}


#line 1599  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  unsigned char *tmp;
  bool tmp_0;
  
#line 1602 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1602 
  skb_frag_t *frag = & ((struct skb_shared_info *)tmp)->frags[i];
  
#line 1609 
  frag->page.p = page;
  
#line 1610 
  frag->page_offset = (unsigned int)off;
  
#line 1611 
  skb_frag_size_set(frag,(unsigned int)size);
  
#line 1613 
  page = compound_head(page);
  
#line 1614 
  tmp_0 = page_is_pfmemalloc(page);
  
#line 1614 
  if ((int)tmp_0 != 0) 
#line 1615 
                       skb->pfmemalloc = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U; else ;
  
#line 1616 
  return;
}


#line 1632  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  unsigned char *tmp;
  
#line 1635 
  __skb_fill_page_desc(skb,i,page,off,size);
  
#line 1636 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1636 
  ((struct skb_shared_info *)tmp)->nr_frags = (unsigned char)((unsigned int)((unsigned char)i) + 1U);
  
#line 1637 
  return;
}


#line 1650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1652 
  __retres = skb->head + skb->tail;
  
#line 1652 
  return __retres;
}


#line 1655  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_reset_tail_pointer(struct sk_buff *skb)
{
  
#line 1657 
  skb->tail = (unsigned int)((long)skb->data - (long)skb->head);
  
#line 1658 
  return;
}


#line 1660  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_set_tail_pointer(struct sk_buff *skb, int const offset)
{
  
#line 1662 
  skb_reset_tail_pointer(skb);
  
#line 1663 
  skb->tail += (unsigned int)offset;
  
#line 1664 
  return;
}


#line 1689  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *__skb_put(struct sk_buff *skb, unsigned int len)
{
  bool tmp_1;
  
#line 1691 
  unsigned char *tmp = skb_tail_pointer((struct sk_buff const *)skb);
  
#line 1692 
  tmp_1 = skb_is_nonlinear((struct sk_buff const *)skb);
  
#line 1692 
  if ((long)((int)tmp_1 != 0) != 0L) {
    
#line 1694 
    ldv_inline_asm();
    
#line 1692 
    ;
  }
  else ;
  
#line 1693 
  skb->tail += len;
  
#line 1694 
  skb->len += len;
  
#line 1695 
  return tmp;
}


#line 1719 
unsigned char *__pskb_pull_tail(struct sk_buff *, int);


#line 1735  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int pskb_may_pull(struct sk_buff *skb, unsigned int len)
{
  int __retres;
  unsigned int tmp;
  unsigned char *tmp_1;
  unsigned int tmp_0;
  
#line 1737 
  tmp = skb_headlen((struct sk_buff const *)skb);
  
#line 1737 
  ;
  
#line 1737 
  if ((long)(tmp >= len) != 0L) {
    
#line 1738 
    __retres = 1;
    
#line 1738 
    goto return_label;
  }
  else ;
  
#line 1739 
  if ((long)(skb->len < len) != 0L) {
    
#line 1740 
    __retres = 0;
    
#line 1740 
    goto return_label;
  }
  else ;
  
#line 1741 
  tmp_0 = skb_headlen((struct sk_buff const *)skb);
  
#line 1741 
  ;
  
#line 1741 
  ;
  
#line 1741 
  tmp_1 = __pskb_pull_tail(skb,(int)(len - tmp_0));
  
#line 1741 
  __retres = tmp_1 != (unsigned char *)0U;
  return_label: 
#line 1741 
                return __retres;
}


#line 1750  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headroom(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1752 
  __retres = (unsigned int)((long)skb->data - (long)skb->head);
  
#line 1752 
  return __retres;
}


#line 1761  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_tailroom(struct sk_buff const *skb)
{
  int __retres;
  unsigned int tmp_0;
  bool tmp;
  
#line 1763 
  tmp = skb_is_nonlinear(skb);
  
#line 1763 
  if ((int)tmp == 0) 
#line 1763 
                     tmp_0 = skb->end - skb->tail; else 
#line 1763 
                                                        tmp_0 = 0U;
  
#line 1763 
  __retres = (int)tmp_0;
  
#line 1763 
  return __retres;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1882 
  __retres = skb->head + (int)skb->transport_header;
  
#line 1882 
  return __retres;
}


#line 1897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1899 
  __retres = skb->head + (int)skb->network_header;
  
#line 1899 
  return __retres;
}


#line 1962  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_checksum_start_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned int tmp;
  
#line 1964 
  tmp = skb_headroom(skb);
  
#line 1964 
  ;
  
#line 1964 
  __retres = (int)((unsigned int)skb->__anonCompField_sk_buff_80.__anonCompField___anonunion_270_79.csum_start - tmp);
  
#line 1964 
  return __retres;
}


#line 1967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1969 
  tmp = skb_transport_header(skb);
  
#line 1969 
  ;
  
#line 1969 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1969 
  return __retres;
}


#line 1982  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1984 
  tmp = skb_network_header(skb);
  
#line 1984 
  ;
  
#line 1984 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1984 
  return __retres;
}


#line 2045 
int ___pskb_trim(struct sk_buff *, unsigned int);


#line 2047  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __skb_trim(struct sk_buff *skb, unsigned int len)
{
  bool tmp_0;
  
#line 2049 
  tmp_0 = skb_is_nonlinear((struct sk_buff const *)skb);
  
#line 2049 
  if ((long)((int)tmp_0 != 0) != 0L) {
    {
      
#line 2050 
      int __ret_warn_on = 1;
      
#line 2050 
      if ((long)(__ret_warn_on != 0) != 0L) 
#line 2050 
                                            warn_slowpath_null("include/linux/skbuff.h",2050); else ;
      
#line 2050 
      long tmp = (long)(__ret_warn_on != 0);
    }
    
#line 2051 
    goto return_label;
  }
  else ;
  
#line 2053 
  skb->len = len;
  
#line 2054 
  skb_set_tail_pointer(skb,(int)len);
  return_label: 
#line 2055 
                return;
}


#line 2057 
void skb_trim(struct sk_buff *, unsigned int);


#line 2059  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int __pskb_trim(struct sk_buff *skb, unsigned int len)
{
  int __retres;
  
#line 2061 
  if (skb->data_len != 0U) {
    int tmp;
    
#line 2062 
    tmp = ___pskb_trim(skb,len);
    
#line 2062 
    __retres = tmp;
    
#line 2062 
    goto return_label;
  }
  else ;
  
#line 2063 
  __skb_trim(skb,len);
  
#line 2064 
  __retres = 0;
  return_label: 
#line 2064 
                return __retres;
}


#line 2067  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int pskb_trim(struct sk_buff *skb, unsigned int len)
{
  int tmp_0;
  
#line 2069 
  if (skb->len > len) 
#line 2069 
                      tmp_0 = __pskb_trim(skb,len); else 
#line 2069 
                                                         tmp_0 = 0;
  
#line 2069 
  return tmp_0;
}


#line 2140 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);


#line 2176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *__netdev_alloc_skb_ip_align(struct net_device *dev, unsigned int length, gfp_t gfp)
{
  
#line 2179 
  struct sk_buff *skb = __netdev_alloc_skb(dev,length,gfp);
  
#line 2183 
  return skb;
}


#line 2198 
struct sk_buff *__napi_alloc_skb(struct napi_struct *, unsigned int, gfp_t);


#line 2200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *napi_alloc_skb(struct napi_struct *napi, unsigned int length)
{
  struct sk_buff *tmp;
  
#line 2203 
  tmp = __napi_alloc_skb(napi,length,32U);
  
#line 2203 
  return tmp;
}


#line 2272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t const *frag)
{
  struct page *__retres;
  
#line 2274 
  __retres = frag->page.p;
  
#line 2274 
  return __retres;
}


#line 2390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t const *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t tmp_0;
  struct page *tmp;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  tmp = skb_frag_page(frag);
  
#line 2395 
  ;
  
#line 2395 
  tmp_0 = dma_map_page(dev,tmp,(unsigned long)frag->page_offset + offset,size,dir);
  
#line 2395 
  return tmp_0;
}


#line 2427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int __skb_cow(struct sk_buff *skb, unsigned int headroom, int cloned)
{
  int __retres;
  unsigned int tmp_0;
  
#line 2430 
  int delta = 0;
  
#line 2432 
  tmp_0 = skb_headroom((struct sk_buff const *)skb);
  
#line 2432 
  ;
  
#line 2432 
  if (tmp_0 < headroom) {
    unsigned int tmp;
    
#line 2433 
    tmp = skb_headroom((struct sk_buff const *)skb);
    
#line 2433 
    delta = (int)(headroom - tmp);
  }
  else ;
  
#line 2435 
  if (delta != 0 || cloned != 0) {
    int tmp_5;
    int tmp_2;
    int tmp_4;
    {
      int tmp_1;
      
#line 2436 
      int _max1 = 32;
      
#line 2436 
      int _max2 = 64;
      
#line 2436 
      if (_max1 > _max2) 
#line 2436 
                         tmp_1 = _max1; else 
#line 2436 
                                             tmp_1 = _max2;
      
#line 2436 
      tmp_2 = tmp_1;
    }
    {
      int tmp_3;
      
#line 2436 
      int _max1_0 = 32;
      
#line 2436 
      int _max2_0 = 64;
      
#line 2436 
      if (_max1_0 > _max2_0) 
#line 2436 
                             tmp_3 = _max1_0; else 
#line 2436 
                                                   tmp_3 = _max2_0;
      
#line 2436 
      tmp_4 = tmp_3;
    }
    
#line 2436 
    ;
    
#line 2436 
    ;
    
#line 2436 
    tmp_5 = pskb_expand_head(skb,((tmp_2 + -1) + delta) & ~ (tmp_4 + -1),0,32U);
    
#line 2436 
    __retres = tmp_5;
    
#line 2436 
    goto return_label;
  }
  else ;
  
#line 2438 
  __retres = 0;
  return_label: 
#line 2438 
                return __retres;
}


#line 2468  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_cow_head(struct sk_buff *skb, unsigned int headroom)
{
  int tmp_0;
  int tmp;
  
#line 2470 
  tmp = skb_header_cloned((struct sk_buff const *)skb);
  
#line 2470 
  ;
  
#line 2470 
  ;
  
#line 2470 
  tmp_0 = __skb_cow(skb,headroom,tmp);
  
#line 2470 
  return tmp_0;
}


#line 2501  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_put_padto(struct sk_buff *skb, unsigned int len)
{
  int __retres;
  
#line 2503 
  unsigned int size = skb->len;
  
#line 2505 
  if ((long)(size < len) != 0L) {
    int tmp;
    
#line 2506 
    len -= size;
    
#line 2507 
    tmp = skb_pad(skb,(int)len);
    
#line 2507 
    if (tmp != 0) {
      
#line 2508 
      __retres = -12;
      
#line 2508 
      goto return_label;
    }
    else ;
    
#line 2509 
    __skb_put(skb,len);
  }
  else ;
  
#line 2511 
  __retres = 0;
  return_label: 
#line 2511 
                return __retres;
}


#line 2810  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data_offset(struct sk_buff *skb, int const offset, void const *from, unsigned int const len)
{
  
#line 2815 
  memcpy((void *)(skb->data + offset),from,(unsigned long)len);
  
#line 2816 
  return;
}


#line 2865 
void skb_clone_tx_timestamp(struct sk_buff *);


#line 2911 
void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);


#line 2914  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void sw_tx_timestamp(struct sk_buff *skb)
{
  unsigned char *tmp;
  
#line 2916 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 2916 
  ;
  
#line 2916 
  if (((int)((struct skb_shared_info *)tmp)->tx_flags & 2) != 0) {
    unsigned char *tmp_0;
    
#line 2917 
    tmp_0 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 2916 
    ;
    
#line 2916 
    if (((int)((struct skb_shared_info *)tmp_0)->tx_flags & 4) == 0) 
      
#line 2918 
      skb_tstamp_tx(skb,(struct skb_shared_hwtstamps *)0); else ;
  }
  else ;
  
#line 2919 
  return;
}


#line 2933  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_tx_timestamp(struct sk_buff *skb)
{
  
#line 2935 
  skb_clone_tx_timestamp(skb);
  
#line 2936 
  sw_tx_timestamp(skb);
  
#line 2937 
  return;
}


#line 3384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_gso(struct sk_buff const *skb)
{
  bool __retres;
  unsigned char *tmp;
  
#line 3386 
  tmp = skb_end_pointer(skb);
  
#line 3386 
  ;
  
#line 3386 
  __retres = (_Bool)((unsigned int)((struct skb_shared_info *)tmp)->gso_size != 0U);
  
#line 3386 
  return __retres;
}


#line 3390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_gso_v6(struct sk_buff const *skb)
{
  bool __retres;
  unsigned char *tmp;
  
#line 3392 
  tmp = skb_end_pointer(skb);
  
#line 3392 
  ;
  
#line 3392 
  __retres = (_Bool)(((int)((struct skb_shared_info *)tmp)->gso_type & 16) != 0);
  
#line 3392 
  return __retres;
}


#line 3426  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff const *skb)
{
  
#line 3428 
  return;
}


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_86(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 145 
static int ldv_request_irq_87(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 149 
static int ldv_request_irq_88(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 153 
static int ldv_request_irq_89(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 157 
static int ldv_request_irq_90(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 161 
static int ldv_request_irq_99(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 173 
static void ldv_free_irq_91(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 177 
static void ldv_free_irq_92(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 181 
static void ldv_free_irq_93(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 185 
static void ldv_free_irq_94(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 189 
static void ldv_free_irq_100(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 192 
void disable_irq(unsigned int);


#line 194 
void enable_irq(unsigned int);


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
__inline static struct mii_ioctl_data *if_mii(struct ifreq *rq)
{
  struct mii_ioctl_data *__retres;
  
#line 47 
  __retres = (struct mii_ioctl_data *)(& rq->ifr_ifru);
  
#line 47 
  return __retres;
}


#line 391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void __napi_schedule(struct napi_struct *);


#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_disable_pending(struct napi_struct *n)
{
  bool __retres;
  int tmp;
  
#line 396 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& n->state));
  
#line 396 
  __retres = (_Bool)(tmp != 0);
  
#line 396 
  return __retres;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_schedule_prep(struct napi_struct *n)
{
  bool __retres;
  int tmp_2;
  int tmp_0;
  bool tmp;
  
#line 410 
  tmp = napi_disable_pending(n);
  
#line 410 
  if (tmp) 
#line 410 
           tmp_0 = 0; else 
#line 410 
                           tmp_0 = 1;
  
#line 410 
  if (tmp_0) {
    int tmp_1;
    
#line 410 
    tmp_1 = test_and_set_bit(0L,(unsigned long volatile *)(& n->state));
    
#line 410 
    if (tmp_1 == 0) 
#line 410 
                    tmp_2 = 1; else 
#line 410 
                                    tmp_2 = 0;
  }
  else 
#line 410 
       tmp_2 = 0;
  
#line 410 
  __retres = (_Bool)(tmp_2 != 0);
  
#line 410 
  return __retres;
}


#line 450 
void napi_complete_done(struct napi_struct *, int);


#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_complete(struct napi_struct *n)
{
  
#line 460 
  napi_complete_done(n,0);
  
#line 461 
  return;
}


#line 496 
void napi_disable(struct napi_struct *);


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  int tmp;
  
#line 507 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 507 
  if ((long)(tmp == 0) != 0L) {
    
#line 509 
    ldv_inline_asm();
    
#line 507 
    ;
  }
  else ;
  
#line 509 
  ldv_inline_asm();
  
#line 509 
  clear_bit(0L,(unsigned long volatile *)(& n->state));
  
#line 510 
  return;
}


#line 521  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_synchronize(struct napi_struct const *n)
{
  int tmp;
  
#line 523 
  goto ldv_44743;
  ldv_44742: 
#line 524 
  ;
  
#line 524 
  msleep(1U);
  ldv_44743: 
#line 525 
  ;
  
#line 523 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 523 
  if (tmp != 0) 
#line 525 
                goto ldv_44742; else 
#line 528 
                                     goto ldv_44744;
  ldv_44744: 
#line 529 
  ;
  
#line 530 
  return;
}


#line 1822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device const *dev, unsigned int index)
{
  struct netdev_queue *__retres;
  
#line 1825 
  __retres = dev->_tx + index;
  
#line 1825 
  return __retres;
}


#line 1911 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);


#line 2205 
static void ldv_free_netdev_116(struct net_device *ldv_func_arg1);


#line 2209 
static void ldv_free_netdev_120(struct net_device *ldv_func_arg1);


#line 2505 
void netif_schedule_queue(struct netdev_queue *);


#line 2515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  
#line 2517 
  clear_bit(0L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2518 
  return;
}


#line 2526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_start_queue(struct net_device *dev)
{
  struct netdev_queue *tmp;
  
#line 2528 
  tmp = netdev_get_tx_queue((struct net_device const *)dev,0U);
  
#line 2528 
  netif_tx_start_queue(tmp);
  
#line 2529 
  return;
}


#line 2541 
void netif_tx_wake_queue(struct netdev_queue *);


#line 2550  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_wake_queue(struct net_device *dev)
{
  struct netdev_queue *tmp;
  
#line 2552 
  tmp = netdev_get_tx_queue((struct net_device const *)dev,0U);
  
#line 2552 
  netif_tx_wake_queue(tmp);
  
#line 2553 
  return;
}


#line 2584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_tx_queue_stopped(struct netdev_queue const *dev_queue)
{
  bool __retres;
  int tmp;
  
#line 2586 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev_queue->state));
  
#line 2586 
  __retres = (_Bool)(tmp != 0);
  
#line 2586 
  return __retres;
}


#line 2595  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_queue_stopped(struct net_device const *dev)
{
  bool tmp_0;
  struct netdev_queue *tmp;
  
#line 2597 
  tmp = netdev_get_tx_queue(dev,0U);
  
#line 2597 
  tmp_0 = netif_tx_queue_stopped((struct netdev_queue const *)tmp);
  
#line 2597 
  return tmp_0;
}


#line 2600  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_xmit_stopped(struct netdev_queue const *dev_queue)
{
  bool __retres;
  
#line 2602 
  __retres = (_Bool)((dev_queue->state & 3UL) != 0UL);
  
#line 2602 
  return __retres;
}


#line 2645  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_sent_queue(struct netdev_queue *dev_queue, unsigned int bytes)
{
  int tmp;
  int tmp_0;
  
#line 2649 
  dql_queued(& dev_queue->dql,bytes);
  
#line 2651 
  tmp = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2651 
  if ((long)(tmp >= 0) != 0L) 
#line 2652 
                              goto return_label; else ;
  
#line 2654 
  clear_bit(1L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2655 
  ldv_inline_asm();
  
#line 2664 
  tmp_0 = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2664 
  if ((long)(tmp_0 >= 0) != 0L) 
#line 2665 
                                clear_bit(1L,(unsigned long volatile *)(& dev_queue->state)); else ;
  return_label: 
#line 2666 
                return;
}


#line 2678  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_sent_queue(struct net_device *dev, unsigned int bytes)
{
  struct netdev_queue *tmp;
  
#line 2680 
  ;
  
#line 2680 
  tmp = netdev_get_tx_queue((struct net_device const *)dev,0U);
  
#line 2680 
  netdev_tx_sent_queue(tmp,bytes);
  
#line 2681 
  return;
}


#line 2683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_completed_queue(struct netdev_queue *dev_queue, unsigned int pkts, unsigned int bytes)
{
  int tmp;
  int tmp_0;
  
#line 2687 
  if ((long)(bytes == 0U) != 0L) 
#line 2688 
                                 goto return_label; else ;
  
#line 2690 
  dql_completed(& dev_queue->dql,bytes);
  
#line 2691 
  ldv_inline_asm();
  
#line 2699 
  tmp = dql_avail((struct dql const *)(& dev_queue->dql));
  
#line 2699 
  if (tmp < 0) 
#line 2700 
               goto return_label; else ;
  
#line 2702 
  tmp_0 = test_and_set_bit(1L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2702 
  if (tmp_0 != 0) 
#line 2703 
                  netif_schedule_queue(dev_queue); else ;
  return_label: 
#line 2704 
                return;
}


#line 2717  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_completed_queue(struct net_device *dev, unsigned int pkts, unsigned int bytes)
{
  struct netdev_queue *tmp;
  
#line 2720 
  ;
  
#line 2720 
  ;
  
#line 2720 
  tmp = netdev_get_tx_queue((struct net_device const *)dev,0U);
  
#line 2720 
  netdev_tx_completed_queue(tmp,pkts,bytes);
  
#line 2721 
  return;
}


#line 2723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_tx_reset_queue(struct netdev_queue *q)
{
  
#line 2726 
  clear_bit(1L,(unsigned long volatile *)(& q->state));
  
#line 2727 
  dql_reset(& q->dql);
  
#line 2728 
  return;
}


#line 2738  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netdev_reset_queue(struct net_device *dev_queue)
{
  struct netdev_queue *tmp;
  
#line 2740 
  tmp = netdev_get_tx_queue((struct net_device const *)dev_queue,0U);
  
#line 2740 
  netdev_tx_reset_queue(tmp);
  
#line 2741 
  return;
}


#line 2899 
void __dev_kfree_skb_irq(struct sk_buff *, enum skb_free_reason);


#line 2900 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);


#line 2921  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_kfree_skb_irq(struct sk_buff *skb)
{
  
#line 2923 
  __dev_kfree_skb_irq(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  
#line 2924 
  return;
}


#line 2931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  
#line 2933 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  
#line 2934 
  return;
}


#line 2948 
gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);


#line 3047 
void netif_carrier_on(struct net_device *);


#line 3049 
void netif_carrier_off(struct net_device *);


#line 3117 
void netif_device_detach(struct net_device *);


#line 3119 
void netif_device_attach(struct net_device *);


#line 3159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static u32 netif_msg_init(int debug_value, int default_msg_enable_bits)
{
  u32 __retres;
  
#line 3162 
  if ((unsigned int)debug_value > 31U) {
    
#line 3163 
    __retres = (unsigned int)default_msg_enable_bits;
    
#line 3163 
    goto return_label;
  }
  else ;
  
#line 3164 
  if (debug_value == 0) {
    
#line 3165 
    __retres = 0U;
    
#line 3165 
    goto return_label;
  }
  else ;
  
#line 3167 
  __retres = (unsigned int)((1 << debug_value) + -1);
  return_label: 
#line 3167 
                return __retres;
}


#line 3355 
static int ldv_register_netdev_115(struct net_device *ldv_func_arg1);


#line 3360 
static void ldv_unregister_netdev_119(struct net_device *ldv_func_arg1);


#line 3549 
void netdev_rss_key_fill(void *, size_t);


#line 3830 
void netdev_warn(struct net_device const *, char const * , ...);


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff const *skb)
{
  struct tcphdr *tmp;
  
#line 29 
  tmp = (struct tcphdr *)skb_transport_header(skb);
  
#line 29 
  return tmp;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static unsigned int tcp_hdrlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  struct tcphdr *tmp;
  
#line 34 
  tmp = tcp_hdr(skb);
  
#line 34 
  ;
  
#line 34 
  __retres = (unsigned int)((int)tmp->doff * 4);
  
#line 34 
  return __retres;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
__inline static struct ipv6hdr *ipv6_hdr(struct sk_buff const *skb)
{
  struct ipv6hdr *tmp;
  
#line 76 
  tmp = (struct ipv6hdr *)skb_network_header(skb);
  
#line 76 
  return tmp;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff const *skb)
{
  struct iphdr *tmp;
  
#line 25 
  tmp = (struct iphdr *)skb_network_header(skb);
  
#line 25 
  return tmp;
}


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__be16 eth_type_trans(struct sk_buff *, struct net_device *);


#line 47 
int eth_validate_addr(struct net_device *);


#line 53 
static struct net_device *ldv_alloc_etherdev_mqs_114(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 96 
  __retres = (_Bool)((*((u32 const *)addr) | (unsigned int)*((u16 const *)(addr + 4U))) == 0U);
  
#line 96 
  return __retres;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 114 
  u32 a = *((u32 const *)addr);
  
#line 121 
  __retres = (_Bool)((a & 1U) != 0U);
  
#line 121 
  return __retres;
}


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_3;
  int tmp_0;
  bool tmp;
  
#line 190 
  tmp = is_multicast_ether_addr(addr);
  
#line 190 
  if (tmp) 
#line 190 
           tmp_0 = 0; else 
#line 190 
                           tmp_0 = 1;
  
#line 190 
  if (tmp_0) {
    int tmp_2;
    bool tmp_1;
    
#line 190 
    tmp_1 = is_zero_ether_addr(addr);
    
#line 190 
    if (tmp_1) 
#line 190 
               tmp_2 = 0; else 
#line 190 
                               tmp_2 = 1;
    
#line 190 
    if (tmp_2) 
#line 190 
               tmp_3 = 1; else 
#line 190 
                               tmp_3 = 0;
  }
  else 
#line 190 
       tmp_3 = 0;
  
#line 190 
  __retres = (_Bool)(tmp_3 != 0);
  
#line 190 
  return __retres;
}


#line 409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  
#line 412 
  skb->vlan_proto = vlan_proto;
  
#line 413 
  skb->vlan_tci = (unsigned short)((unsigned int)vlan_tci | 4096U);
  
#line 414 
  return;
}


#line 481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static __be16 __vlan_get_protocol(struct sk_buff *skb, __be16 type, int *depth)
{
  __be16 __retres;
  
#line 484 
  unsigned int vlan_depth = (unsigned int)skb->mac_len;
  
#line 490 
  if ((unsigned int)type == 129U || (unsigned int)type == 43144U) {
    
#line 491 
    if (vlan_depth != 0U) {
      int tmp;
      {
        
#line 492 
        int __ret_warn_on = vlan_depth <= 3U;
        
#line 492 
        if ((long)(__ret_warn_on != 0) != 0L) 
#line 492 
                                              warn_slowpath_null("include/linux/if_vlan.h",492); else ;
        
#line 492 
        tmp = (long)(__ret_warn_on != 0);
      }
      
#line 492 
      if ((long)tmp != 0L) {
        
#line 493 
        __retres = (unsigned short)0U;
        
#line 493 
        goto return_label;
      }
      else ;
      
#line 494 
      vlan_depth += 4294967292U;
    }
    else 
#line 496 
         vlan_depth = 14U;
    ldv_54099: 
#line 497 
    ;
    {
      struct vlan_hdr *vh;
      int tmp_0;
      
#line 501 
      tmp_0 = pskb_may_pull(skb,vlan_depth + 4U);
      
#line 501 
      if ((long)(tmp_0 == 0) != 0L) {
        
#line 503 
        __retres = (unsigned short)0U;
        
#line 503 
        goto return_label;
      }
      else ;
      
#line 505 
      vh = (struct vlan_hdr *)(skb->data + vlan_depth);
      
#line 506 
      type = vh->h_vlan_encapsulated_proto;
      
#line 507 
      vlan_depth += 4U;
    }
    
#line 509 
    if ((unsigned int)type == 129U || (unsigned int)type == 43144U) 
#line 511 
                                                                    goto ldv_54099; else 
                                                                    
#line 514 
                                                                    goto ldv_54100;
    ldv_54100: 
#line 515 
    ;
  }
  else ;
  
#line 512 
  if (depth != (int *)0) 
#line 513 
                         *depth = (int)vlan_depth; else ;
  
#line 515 
  __retres = type;
  return_label: 
#line 515 
                return __retres;
}


#line 525  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static __be16 vlan_get_protocol(struct sk_buff *skb)
{
  __be16 tmp;
  
#line 527 
  tmp = __vlan_get_protocol(skb,(unsigned short)((int)skb->protocol),(int *)0);
  
#line 527 
  return tmp;
}


#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_qos.h"
void pm_qos_add_request(struct pm_qos_request *, int, s32);


#line 125 
void pm_qos_update_request(struct pm_qos_request *, s32);


#line 129 
void pm_qos_remove_request(struct pm_qos_request *);


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
int pm_schedule_suspend(struct device *, unsigned int);


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
__inline static void pm_runtime_get_noresume(struct device *dev)
{
  
#line 66 
  atomic_inc(& dev->power.usage_count);
  
#line 67 
  return;
}


#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
__inline static void pm_runtime_put_noidle(struct device *dev)
{
  
#line 71 
  atomic_add_unless(& dev->power.usage_count,-1,0);
  
#line 72 
  return;
}


#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
__inline static int pm_runtime_resume(struct device *dev)
{
  int tmp;
  
#line 204 
  tmp = __pm_runtime_resume(dev,0);
  
#line 204 
  return tmp;
}


#line 232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm_runtime.h"
__inline static int pm_runtime_put(struct device *dev)
{
  int tmp;
  
#line 234 
  tmp = __pm_runtime_idle(dev,5);
  
#line 234 
  return tmp;
}


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/aer.h"
int pci_enable_pcie_error_reporting(struct pci_dev *);


#line 43 
int pci_disable_pcie_error_reporting(struct pci_dev *);


#line 44 
int pci_cleanup_aer_uncorrect_error_status(struct pci_dev *);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci-aspm.h"
void pci_disable_link_state(struct pci_dev *, int);


#line 31 
void pci_disable_link_state_locked(struct pci_dev *, int);


#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timecounter.h"
u64 timecounter_cyc2time(struct timecounter *, cycle_t);


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.h"
void e1000e_reset_adaptive(struct e1000_hw *hw);


#line 60 
void e1000e_update_adaptive(struct e1000_hw *hw);


#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1000e_read_mac_addr(struct e1000_hw *hw)
{
  s32 __retres;
  s32 tmp_0;
  
#line 548 
  if (hw->mac.ops.read_mac_addr != (s32 (*)(struct e1000_hw *))0) {
    s32 tmp;
    
#line 549 
    tmp = (*(hw->mac.ops.read_mac_addr))(hw);
    
#line 549 
    __retres = tmp;
    
#line 549 
    goto return_label;
  }
  else ;
  
#line 551 
  tmp_0 = e1000_read_mac_addr_generic(hw);
  
#line 551 
  __retres = tmp_0;
  return_label: 
#line 551 
                return __retres;
}


#line 554  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1000_validate_nvm_checksum(struct e1000_hw *hw)
{
  s32 tmp;
  
#line 556 
  tmp = (*(hw->nvm.ops.validate))(hw);
  
#line 556 
  return tmp;
}


#line 576  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/e1000.h"
__inline static s32 e1000_get_phy_info(struct e1000_hw *hw)
{
  s32 tmp;
  
#line 578 
  tmp = (*(hw->phy.ops.get_info))(hw);
  
#line 578 
  return tmp;
}


#line 588 
s32 __ew32_prepare(struct e1000_hw *hw);


#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
char e1000e_driver_name[7U] = {(char)'e', (char)'1', (char)'0', (char)'0', (char)'0', (char)'e', (char)'\000'};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
char const e1000e_driver_version[8U] = {(char)'3', (char)'.', (char)'2', (char)'.', (char)'5', (char)'\000'};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int debug = -1;

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static struct e1000_info const *e1000_info_tbl[13U] = {& e1000_82571_info, & e1000_82572_info, & e1000_82573_info, & e1000_82574_info, & e1000_82583_info, & e1000_es2_info, & e1000_ich8_info, & e1000_ich9_info, & e1000_ich10_info, & e1000_pch_info, & e1000_pch2_info, & e1000_pch_lpt_info, & e1000_pch_spt_info};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static struct e1000_reg_info const e1000_reg_info_tbl[34U] = {{.ofs = 0U, .name = (char *)"CTRL"}, {.ofs = 8U, .name = (char *)"STATUS"}, {.ofs = 24U, .name = (char *)"CTRL_EXT"}, {.ofs = 192U, .name = (char *)"ICR"}, {.ofs = 256U, .name = (char *)"RCTL"}, {.ofs = 10248U, .name = (char *)"RDLEN"}, {.ofs = 10256U, .name = (char *)"RDH"}, {.ofs = 10264U, .name = (char *)"RDT"}, {.ofs = 10272U, .name = (char *)"RDTR"}, {.ofs = 10280U, .name = (char *)"RXDCTL"}, {.ofs = 8200U, .name = (char *)"ERT"}, {.ofs = 10240U, .name = (char *)"RDBAL"}, {.ofs = 10244U, .name = (char *)"RDBAH"}, {.ofs = 9232U, .name = (char *)"RDFH"}, {.ofs = 9240U, .name = (char *)"RDFT"}, {.ofs = 9248U, .name = (char *)"RDFHS"}, {.ofs = 9256U, .name = (char *)"RDFTS"}, {.ofs = 9264U, .name = (char *)"RDFPC"}, {.ofs = 1024U, .name = (char *)"TCTL"}, {.ofs = 14336U, .name = (char *)"TDBAL"}, {.ofs = 14340U, .name = (char *)"TDBAH"}, {.ofs = 14344U, .name = (char *)"TDLEN"}, {.ofs = 14352U, .name = (char *)"TDH"}, {.ofs = 14360U, .name = (char *)"TDT"}, {.ofs = 14368U, .name = (char *)"TIDV"}, {.ofs = 14376U, .name = (char *)"TXDCTL"}, {.ofs = 14380U, .name = (char *)"TADV"}, {.ofs = 14400U, .name = (char *)"TARC"}, {.ofs = 13328U, .name = (char *)"TDFH"}, {.ofs = 13336U, .name = (char *)"TDFT"}, {.ofs = 13344U, .name = (char *)"TDFHS"}, {.ofs = 13352U, .name = (char *)"TDFTS"}, {.ofs = 13360U, .name = (char *)"TDFPC"}, {.ofs = 0U, .name = (char *)0}};

#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
s32 __ew32_prepare(struct e1000_hw *hw)
{
  u32 tmp;
  
#line 141 
  s32 i = 2000;
  
#line 143 
  goto ldv_56235;
  ldv_56234: 
#line 144 
  ;
  
#line 144 
  __const_udelay(214750UL);
  ldv_56235: 
#line 146 
  ;
  
#line 143 
  tmp = __er32(hw,23380UL);
  
#line 143 
  if ((tmp & 16777216U) != 0U) {
    
#line 143 
    i -= 1;
    
#line 143 
    if (i != 0) 
#line 145 
                goto ldv_56234; else 
#line 148 
                                     goto ldv_56236;
  }
  else 
#line 148 
       goto ldv_56236;
  ldv_56236: 
#line 149 
  ;
  
#line 146 
  return i;
}


#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
void __ew32(struct e1000_hw *hw, unsigned long reg, u32 val)
{
  
#line 151 
  if (((hw->adapter)->flags2 & 2048U) != 0U) 
#line 152 
                                             __ew32_prepare(hw); else ;
  
#line 154 
  writel(val,(void volatile *)(hw->hw_addr + reg));
  
#line 155 
  return;
}


#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_regdump(struct e1000_hw *hw, struct e1000_reg_info *reginfo)
{
  char rname[16U];
  u32 regs[8U];
  
#line 164 
  int n = 0;
  
#line 168 
  switch (reginfo->ofs) {
    int tmp;
    int tmp_0;
    u32 tmp_1;
    case (u32)10280: 
#line 169 
    ;
    
#line 170 
    n = 0;
    
#line 170 
    goto ldv_56251;
    ldv_56250: 
#line 171 
    ;
    
#line 171 
    if (n <= 3) 
#line 171 
                tmp = n * 256 + 10280; else 
#line 171 
                                            tmp = n * 64 + 49192;
    
#line 171 
    ;
    
#line 171 
    regs[n] = __er32(hw,(unsigned long)tmp);
    
#line 170 
    n += 1;
    ldv_56251: 
#line 171 
    ;
    
#line 170 
    if (n <= 1) 
#line 172 
                goto ldv_56250; else 
#line 175 
                                     goto ldv_56252;
    ldv_56252: 
#line 176 
    ;
    
#line 172 
    goto ldv_56253;
    case (u32)14376: 
#line 173 
    ;
    
#line 174 
    n = 0;
    
#line 174 
    goto ldv_56256;
    ldv_56255: 
#line 175 
    ;
    
#line 175 
    if (n <= 3) 
#line 175 
                tmp_0 = n * 256 + 14376; else 
#line 175 
                                              tmp_0 = n * 64 + 57384;
    
#line 175 
    ;
    
#line 175 
    regs[n] = __er32(hw,(unsigned long)tmp_0);
    
#line 174 
    n += 1;
    ldv_56256: 
#line 175 
    ;
    
#line 174 
    if (n <= 1) 
#line 176 
                goto ldv_56255; else 
#line 179 
                                     goto ldv_56257;
    ldv_56257: 
#line 180 
    ;
    
#line 176 
    goto ldv_56253;
    case (u32)14400: 
#line 177 
    ;
    
#line 178 
    n = 0;
    
#line 178 
    goto ldv_56260;
    ldv_56259: 
#line 179 
    ;
    
#line 179 
    regs[n] = __er32(hw,(unsigned long)(n * 256 + 14400));
    
#line 178 
    n += 1;
    ldv_56260: 
#line 179 
    ;
    
#line 178 
    if (n <= 1) 
#line 180 
                goto ldv_56259; else 
#line 183 
                                     goto ldv_56261;
    ldv_56261: 
#line 184 
    ;
    
#line 180 
    goto ldv_56253;
    default: 
#line 181 
    ;
    
#line 182 
    tmp_1 = __er32(hw,(unsigned long)reginfo->ofs);
    
#line 182 
    ;
    
#line 182 
    printk("\001",reginfo->name,tmp_1);
    
#line 184 
    goto return_label;
  }
  ldv_56253: 
#line 187 
  ;
  
#line 187 
  snprintf((char *)(& rname),16UL,"%s%s",reginfo->name,(char *)"[0-1]");
  
#line 188 
  printk("\001",(char *)(& rname),regs[0],regs[1]);
  return_label: 
#line 189 
                return;
}


#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_dump_ps_pages(struct e1000_adapter *adapter, struct e1000_buffer *bi)
{
  int i;
  struct e1000_ps_page *ps_page;
  
#line 197 
  i = 0;
  
#line 197 
  goto ldv_56270;
  ldv_56269: 
#line 198 
  ;
  
#line 198 
  ps_page = bi->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.ps_pages + i;
  
#line 200 
  if (ps_page->page != (struct page *)0) {
    void *tmp;
    
#line 201 
    printk("\001",i);
    
#line 203 
    tmp = lowmem_page_address((struct page const *)ps_page->page);
    
#line 202 
    print_hex_dump("\001","",1,16,1,(void const *)tmp,4096UL,(_Bool)1);
  }
  else ;
  
#line 197 
  i += 1;
  ldv_56270: 
#line 198 
  ;
  
#line 197 
  if (adapter->rx_ps_pages > (unsigned int)i) 
#line 199 
                                              goto ldv_56269; else 
#line 202 
                                                                   goto ldv_56271;
  ldv_56271: 
#line 203 
  ;
  
#line 204 
  return;
}


#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_dump(struct e1000_adapter *adapter)
{
  struct e1000_reg_info *reginfo;
  struct e1000_tx_desc *tx_desc;
  struct my_u0 *u0;
  struct e1000_buffer *buffer_info;
  union e1000_rx_desc_packet_split *rx_desc_ps;
  union e1000_rx_desc_extended *rx_desc;
  struct my_u1 *u1;
  u32 staterr;
  
#line 215 
  struct net_device *netdev = adapter->netdev;
  
#line 216 
  struct e1000_hw *hw = & adapter->hw;
  
#line 218 
  struct e1000_ring *tx_ring = adapter->tx_ring;
  
#line 225 
  struct e1000_ring *rx_ring = adapter->rx_ring;
  
#line 235 
  int i = 0;
  
#line 237 
  if ((adapter->msg_enable & 8192U) == 0U) 
#line 238 
                                           goto return_label; else ;
  
#line 241 
  if (netdev != (struct net_device *)0) {
    
#line 242 
    _dev_info((struct device const *)(& (adapter->pdev)->dev),"Net device Info\n");
    
#line 243 
    printk("\001");
    
#line 244 
    printk("\001",(char *)(& netdev->name),netdev->state,netdev->trans_start,netdev->last_rx);
  }
  else ;
  
#line 249 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Register Dump\n");
  
#line 250 
  printk("\001");
  
#line 251 
  reginfo = (struct e1000_reg_info *)(& e1000_reg_info_tbl);
  
#line 251 
  goto ldv_56297;
  ldv_56296: 
#line 252 
  ;
  
#line 253 
  e1000_regdump(hw,reginfo);
  
#line 252 
  reginfo += 1;
  ldv_56297: 
#line 253 
  ;
  
#line 251 
  if (reginfo->name != (char *)0) 
#line 254 
                                  goto ldv_56296; else 
#line 257 
                                                       goto ldv_56298;
  ldv_56298: 
#line 258 
  ;
  
#line 257 
  if (netdev == (struct net_device *)0) 
#line 258 
                                        goto return_label;
  else {
    int tmp_0;
    bool tmp;
    
#line 257 
    tmp = netif_running((struct net_device const *)netdev);
    
#line 257 
    if (tmp) 
#line 257 
             tmp_0 = 0; else 
#line 257 
                             tmp_0 = 1;
    
#line 257 
    if (tmp_0) 
#line 258 
               goto return_label; else ;
  }
  
#line 260 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Tx Ring Summary\n");
  
#line 261 
  printk("\001");
  
#line 262 
  buffer_info = tx_ring->buffer_info + (int)tx_ring->next_to_clean;
  
#line 263 
  printk("\001",0,(int)tx_ring->next_to_use,(int)tx_ring->next_to_clean,buffer_info->dma,(int)buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.length,(int)buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.next_to_watch,(unsigned long long)buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.time_stamp);
  
#line 271 
  if ((adapter->msg_enable & 1024U) == 0U) 
#line 272 
                                           goto rx_ring_summary; else ;
  
#line 274 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Tx Ring Dump\n");
  
#line 303 
  printk("\001");
  
#line 304 
  printk("\001");
  
#line 305 
  printk("\001");
  
#line 306 
  i = 0;
  
#line 306 
  goto ldv_56302;
  ldv_56301: 
#line 307 
  ;
  {
    char const *next_desc;
    int tmp_2;
    
#line 308 
    tx_desc = (struct e1000_tx_desc *)tx_ring->desc + i;
    
#line 309 
    buffer_info = tx_ring->buffer_info + i;
    
#line 310 
    u0 = (struct my_u0 *)tx_desc;
    
#line 311 
    if ((int)tx_ring->next_to_use == i && (int)tx_ring->next_to_clean == i) 
      
#line 312 
      next_desc = " NTC/U";
    else 
      
#line 313 
      if ((int)tx_ring->next_to_use == i) 
#line 314 
                                          next_desc = " NTU";
      else 
        
#line 315 
        if ((int)tx_ring->next_to_clean == i) 
#line 316 
                                              next_desc = " NTC"; else 
                                                                    
#line 318 
                                                                    next_desc = "";
    
#line 319 
    ;
    
#line 319 
    ;
    
#line 319 
    ;
    
#line 319 
    ;
    
#line 319 
    ;
    
#line 319 
    ;
    
#line 319 
    ;
    
#line 319 
    ;
    
#line 319 
    ;
    
#line 319 
    if ((u0->b & 536870912ULL) != 0ULL) {
      int tmp_1;
      
#line 319 
      if ((u0->b & 1048576ULL) != 0ULL) 
#line 319 
                                        tmp_1 = 100; else 
#line 319 
                                                          tmp_1 = 99;
      
#line 319 
      tmp_2 = tmp_1;
    }
    else 
#line 319 
         tmp_2 = 108;
    
#line 319 
    printk("\001",tmp_2,i,u0->a,u0->b,buffer_info->dma,(int)buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.length,(int)buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.next_to_watch,(unsigned long long)buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.time_stamp,buffer_info->skb,next_desc);
    
#line 330 
    if ((adapter->msg_enable & 4096U) != 0U && buffer_info->skb != (struct sk_buff *)0) 
      
#line 331 
      print_hex_dump("\001","",1,16,1,(void const *)(buffer_info->skb)->data,(unsigned long)(buffer_info->skb)->len,(_Bool)1); else ;
  }
  
#line 306 
  i += 1;
  ldv_56302: 
#line 307 
  ;
  
#line 306 
  if (tx_ring->desc != (void *)0 && tx_ring->count > (unsigned int)i) 
    
#line 308 
    goto ldv_56301; else 
#line 311 
                         goto ldv_56303;
  ldv_56303: 
#line 312 
  ;
  rx_ring_summary: 
#line 337 
  ;
  
#line 338 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Rx Ring Summary\n");
  
#line 339 
  printk("\001");
  
#line 340 
  printk("\001",0,(int)rx_ring->next_to_use,(int)rx_ring->next_to_clean);
  
#line 344 
  if ((adapter->msg_enable & 2048U) == 0U) 
#line 345 
                                           goto return_label; else ;
  
#line 347 
  _dev_info((struct device const *)(& (adapter->pdev)->dev),"Rx Ring Dump\n");
  
#line 348 
  switch (adapter->rx_ps_pages) {
    case (unsigned int)1: 
#line 349 
    ;
    case (unsigned int)2: 
#line 350 
    ;
    case (unsigned int)3: 
#line 351 
    ;
    
#line 364 
    printk("\001");
    
#line 376 
    printk("\001");
    
#line 377 
    i = 0;
    
#line 377 
    goto ldv_56309;
    ldv_56308: 
#line 378 
    ;
    {
      char const *next_desc_0;
      
#line 379 
      buffer_info = rx_ring->buffer_info + i;
      
#line 380 
      rx_desc_ps = (union e1000_rx_desc_packet_split *)rx_ring->desc + i;
      
#line 381 
      u1 = (struct my_u1 *)rx_desc_ps;
      
#line 382 
      staterr = rx_desc_ps->wb.middle.status_error;
      
#line 385 
      if ((int)rx_ring->next_to_use == i) 
#line 386 
                                          next_desc_0 = " NTU";
      else 
        
#line 387 
        if ((int)rx_ring->next_to_clean == i) 
#line 388 
                                              next_desc_0 = " NTC"; else 
                                                                    
#line 390 
                                                                    next_desc_0 = "";
      
#line 392 
      if ((staterr & 1U) != 0U) 
#line 394 
                                printk("\001",(char *)"RWB",i,u1->a,u1->b,u1->c,u1->d,buffer_info->skb,next_desc_0);
      else {
        
#line 402 
        printk("\001",(char *)"R  ",i,u1->a,u1->b,u1->c,u1->d,buffer_info->dma,buffer_info->skb,next_desc_0);
        
#line 411 
        if ((adapter->msg_enable & 4096U) != 0U) 
#line 412 
                                                 e1000e_dump_ps_pages(adapter,buffer_info); else ;
      }
    }
    
#line 377 
    i += 1;
    ldv_56309: 
#line 378 
    ;
    
#line 377 
    if (rx_ring->count > (unsigned int)i) 
#line 379 
                                          goto ldv_56308; else 
#line 382 
                                                               goto ldv_56310;
    ldv_56310: 
#line 383 
    ;
    
#line 416 
    goto ldv_56311;
    default: 
#line 417 
    ;
    case (unsigned int)0: 
#line 418 
    ;
    
#line 427 
    printk("\001");
    
#line 441 
    printk("\001");
    
#line 443 
    i = 0;
    
#line 443 
    goto ldv_56316;
    ldv_56315: 
#line 444 
    ;
    {
      char const *next_desc_1;
      
#line 446 
      buffer_info = rx_ring->buffer_info + i;
      
#line 447 
      rx_desc = (union e1000_rx_desc_extended *)rx_ring->desc + i;
      
#line 448 
      u1 = (struct my_u1 *)rx_desc;
      
#line 449 
      staterr = rx_desc->wb.upper.status_error;
      
#line 451 
      if ((int)rx_ring->next_to_use == i) 
#line 452 
                                          next_desc_1 = " NTU";
      else 
        
#line 453 
        if ((int)rx_ring->next_to_clean == i) 
#line 454 
                                              next_desc_1 = " NTC"; else 
                                                                    
#line 456 
                                                                    next_desc_1 = "";
      
#line 458 
      if ((staterr & 1U) != 0U) 
#line 460 
                                printk("\001",(char *)"RWB",i,u1->a,u1->b,buffer_info->skb,next_desc_1);
      else {
        
#line 466 
        printk("\001",(char *)"R  ",i,u1->a,u1->b,buffer_info->dma,buffer_info->skb,next_desc_1);
        
#line 473 
        if ((adapter->msg_enable & 4096U) != 0U && buffer_info->skb != (struct sk_buff *)0) 
          
#line 475 
          print_hex_dump("\001","",1,16,1,(void const *)(buffer_info->skb)->data,(unsigned long)adapter->rx_buffer_len,(_Bool)1); else ;
      }
    }
    
#line 443 
    i += 1;
    ldv_56316: 
#line 444 
    ;
    
#line 443 
    if (rx_ring->count > (unsigned int)i) 
#line 445 
                                          goto ldv_56315; else 
#line 448 
                                                               goto ldv_56317;
    ldv_56317: 
#line 449 
    ;
  }
  ldv_56311: 
#line 484 
  ;
  return_label: 
#line 485 
                return;
}


#line 489  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_desc_unused(struct e1000_ring *ring)
{
  int __retres;
  
#line 491 
  if ((int)ring->next_to_clean > (int)ring->next_to_use) {
    
#line 492 
    __retres = ((int)ring->next_to_clean - (int)ring->next_to_use) + -1;
    
#line 492 
    goto return_label;
  }
  else ;
  
#line 494 
  __retres = (int)(((ring->count + (unsigned int)ring->next_to_clean) - (unsigned int)ring->next_to_use) + 4294967295U);
  return_label: 
#line 494 
                return __retres;
}


#line 511  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_systim_to_hwtstamp(struct e1000_adapter *adapter, struct skb_shared_hwtstamps *hwtstamps, u64 systim)
{
  u64 ns;
  unsigned long flags;
  
#line 518 
  ldv___ldv_spin_lock_73(& adapter->systim_lock);
  
#line 519 
  ns = timecounter_cyc2time(& adapter->tc,systim);
  
#line 520 
  ldv_spin_unlock_irqrestore_74(& adapter->systim_lock,flags);
  
#line 522 
  memset((void *)hwtstamps,0,8UL);
  
#line 523 
  hwtstamps->hwtstamp = ns_to_ktime(ns);
  
#line 524 
  return;
}


#line 536  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_rx_hwtstamp(struct e1000_adapter *adapter, u32 status, struct sk_buff *skb)
{
  u64 rxstmp;
  u32 tmp_0;
  u32 tmp_1;
  struct skb_shared_hwtstamps *tmp_2;
  
#line 539 
  struct e1000_hw *hw = & adapter->hw;
  
#line 542 
  if ((adapter->flags & 16384U) == 0U || (status & 256U) == 0U) 
#line 545 
                                                                goto return_label;
  else {
    u32 tmp;
    
#line 543 
    tmp = __er32(hw,46624UL);
    
#line 543 
    if ((tmp & 1U) == 0U) 
#line 545 
                          goto return_label; else ;
  }
  
#line 554 
  tmp_0 = __er32(hw,46628UL);
  
#line 554 
  rxstmp = (unsigned long long)tmp_0;
  
#line 555 
  tmp_1 = __er32(hw,46632UL);
  
#line 555 
  rxstmp = ((unsigned long long)tmp_1 << 32) | rxstmp;
  
#line 556 
  ;
  
#line 556 
  tmp_2 = skb_hwtstamps(skb);
  
#line 556 
  ;
  
#line 556 
  e1000e_systim_to_hwtstamp(adapter,tmp_2,rxstmp);
  
#line 558 
  adapter->flags2 &= 4294959103U;
  return_label: 
#line 559 
                return;
}


#line 568  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_receive_skb(struct e1000_adapter *adapter, struct net_device *netdev, struct sk_buff *skb, u32 staterr, __le16 vlan)
{
  
#line 572 
  u16 tag = vlan;
  
#line 574 
  e1000e_rx_hwtstamp(adapter,staterr,skb);
  
#line 576 
  skb->protocol = eth_type_trans(skb,netdev);
  
#line 578 
  if ((staterr & 8U) != 0U) 
#line 579 
                            __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)((int)tag)); else ;
  
#line 581 
  napi_gro_receive(& adapter->napi,skb);
  
#line 582 
  return;
}


#line 591  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_rx_checksum(struct e1000_adapter *adapter, u32 status_err, struct sk_buff *skb)
{
  
#line 594 
  u16 status = (unsigned short)status_err;
  
#line 595 
  u8 errors = (unsigned char)(status_err >> 24);
  
#line 597 
  skb_checksum_none_assert((struct sk_buff const *)skb);
  
#line 600 
  if (((adapter->netdev)->features & 17179869184ULL) == 0ULL) 
#line 601 
                                                              goto return_label; else ;
  
#line 604 
  if (((int)status & 4) != 0) 
#line 605 
                              goto return_label; else ;
  
#line 608 
  if (((int)errors & 96) != 0) {
    
#line 610 
    adapter->hw_csum_err += 1ULL;
    
#line 611 
    goto return_label;
  }
  else ;
  
#line 615 
  if (((int)status & 48) == 0) 
#line 616 
                               goto return_label; else ;
  
#line 619 
  skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
  
#line 620 
  adapter->hw_csum_good += 1ULL;
  return_label: 
#line 621 
                return;
}


#line 623  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_update_rdt_wa(struct e1000_ring *rx_ring, unsigned int i)
{
  
#line 625 
  struct e1000_adapter *adapter = rx_ring->adapter;
  
#line 626 
  struct e1000_hw *hw = & adapter->hw;
  
#line 627 
  s32 ret_val = __ew32_prepare(hw);
  
#line 629 
  writel(i,(void volatile *)rx_ring->tail);
  
#line 631 
  if ((long)(ret_val == 0) != 0L) {
    unsigned int tmp_1;
    
#line 631 
    tmp_1 = readl((void const volatile *)rx_ring->tail);
    
#line 631 
    ;
    
#line 631 
    if ((long)(tmp_1 != i) != 0L) {
      
#line 632 
      u32 rctl = __er32(hw,256UL);
      
#line 634 
      __ew32(hw,256UL,rctl & 4294967293U);
      
#line 635 
      netdev_err((struct net_device const *)adapter->netdev,"ME firmware caused invalid RDT - resetting\n");
      
#line 636 
      ldv_schedule_work_75(& adapter->reset_task);
    }
    else ;
  }
  else ;
  
#line 638 
  return;
}


#line 640  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_update_tdt_wa(struct e1000_ring *tx_ring, unsigned int i)
{
  
#line 642 
  struct e1000_adapter *adapter = tx_ring->adapter;
  
#line 643 
  struct e1000_hw *hw = & adapter->hw;
  
#line 644 
  s32 ret_val = __ew32_prepare(hw);
  
#line 646 
  writel(i,(void volatile *)tx_ring->tail);
  
#line 648 
  if ((long)(ret_val == 0) != 0L) {
    unsigned int tmp_1;
    
#line 648 
    tmp_1 = readl((void const volatile *)tx_ring->tail);
    
#line 648 
    ;
    
#line 648 
    if ((long)(tmp_1 != i) != 0L) {
      
#line 649 
      u32 tctl = __er32(hw,1024UL);
      
#line 651 
      __ew32(hw,1024UL,tctl & 4294967293U);
      
#line 652 
      netdev_err((struct net_device const *)adapter->netdev,"ME firmware caused invalid TDT - resetting\n");
      
#line 653 
      ldv_schedule_work_76(& adapter->reset_task);
    }
    else ;
  }
  else ;
  
#line 655 
  return;
}


#line 661  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_alloc_rx_buffers(struct e1000_ring *rx_ring, int cleaned_count, gfp_t gfp)
{
  union e1000_rx_desc_extended *rx_desc;
  struct e1000_buffer *buffer_info;
  struct sk_buff *skb;
  unsigned int i;
  int tmp;
  int tmp_0;
  
#line 664 
  struct e1000_adapter *adapter = rx_ring->adapter;
  
#line 665 
  struct net_device *netdev = adapter->netdev;
  
#line 666 
  struct pci_dev *pdev = adapter->pdev;
  
#line 671 
  unsigned int bufsz = adapter->rx_buffer_len;
  
#line 673 
  i = (unsigned int)rx_ring->next_to_use;
  
#line 674 
  buffer_info = rx_ring->buffer_info + i;
  
#line 676 
  goto ldv_56382;
  ldv_56381: 
#line 677 
  ;
  
#line 677 
  skb = buffer_info->skb;
  
#line 678 
  if (skb != (struct sk_buff *)0) {
    
#line 679 
    skb_trim(skb,0U);
    
#line 680 
    goto map_skb;
  }
  else ;
  
#line 683 
  skb = __netdev_alloc_skb_ip_align(netdev,bufsz,gfp);
  
#line 684 
  if (skb == (struct sk_buff *)0) {
    
#line 686 
    adapter->alloc_rx_buff_failed += 1U;
    
#line 687 
    goto ldv_56380;
  }
  else ;
  
#line 690 
  buffer_info->skb = skb;
  map_skb: 
#line 691 
  ;
  
#line 692 
  buffer_info->dma = dma_map_single_attrs(& pdev->dev,(void *)skb->data,(unsigned long)adapter->rx_buffer_len,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0);
  
#line 695 
  tmp = dma_mapping_error(& pdev->dev,buffer_info->dma);
  
#line 695 
  if (tmp != 0) {
    
#line 696 
    dev_err((struct device const *)(& pdev->dev),"Rx DMA map failed\n");
    
#line 697 
    adapter->rx_dma_failed += 1U;
    
#line 698 
    goto ldv_56380;
  }
  else ;
  
#line 701 
  rx_desc = (union e1000_rx_desc_extended *)rx_ring->desc + i;
  
#line 702 
  rx_desc->read.buffer_addr = buffer_info->dma;
  
#line 704 
  if ((long)((i & 15U) == 0U) != 0L) {
    
#line 706 
    ldv_inline_asm();
    
#line 711 
    if ((adapter->flags2 & 2048U) != 0U) 
#line 712 
                                         e1000e_update_rdt_wa(rx_ring,i); else 
                                                                    
#line 714 
                                                                    writel(i,(void volatile *)rx_ring->tail);
  }
  else ;
  
#line 716 
  i += 1U;
  
#line 717 
  if (rx_ring->count == i) 
#line 718 
                           i = 0U; else ;
  
#line 719 
  buffer_info = rx_ring->buffer_info + i;
  ldv_56382: 
#line 720 
  ;
  
#line 676 
  tmp_0 = cleaned_count;
  
#line 676 
  cleaned_count -= 1;
  
#line 676 
  ;
  
#line 676 
  if (tmp_0 != 0) 
#line 678 
                  goto ldv_56381; else 
#line 681 
                                       goto ldv_56380;
  ldv_56380: 
#line 682 
  ;
  
#line 722 
  rx_ring->next_to_use = (unsigned short)i;
  
#line 723 
  return;
}


#line 729  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_alloc_rx_buffers_ps(struct e1000_ring *rx_ring, int cleaned_count, gfp_t gfp)
{
  union e1000_rx_desc_packet_split *rx_desc;
  struct e1000_buffer *buffer_info;
  struct e1000_ps_page *ps_page;
  struct sk_buff *skb;
  unsigned int i;
  unsigned int j;
  int tmp_0;
  int tmp_1;
  
#line 732 
  struct e1000_adapter *adapter = rx_ring->adapter;
  
#line 733 
  struct net_device *netdev = adapter->netdev;
  
#line 734 
  struct pci_dev *pdev = adapter->pdev;
  
#line 741 
  i = (unsigned int)rx_ring->next_to_use;
  
#line 742 
  buffer_info = rx_ring->buffer_info + i;
  
#line 744 
  goto ldv_56404;
  ldv_56403: 
#line 745 
  ;
  
#line 745 
  rx_desc = (union e1000_rx_desc_packet_split *)rx_ring->desc + i;
  
#line 747 
  j = 0U;
  
#line 747 
  goto ldv_56400;
  ldv_56399: 
#line 748 
  ;
  
#line 748 
  ps_page = buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.ps_pages + j;
  
#line 749 
  if (adapter->rx_ps_pages <= j) {
    
#line 751 
    rx_desc->read.buffer_addr[j + 1U] = 18446744073709551615ULL;
    
#line 753 
    goto ldv_56397;
  }
  else ;
  
#line 755 
  if (ps_page->page == (struct page *)0) {
    int tmp;
    
#line 756 
    ps_page->page = alloc_pages(gfp,0U);
    
#line 757 
    if (ps_page->page == (struct page *)0) {
      
#line 758 
      adapter->alloc_rx_buff_failed += 1U;
      
#line 759 
      goto no_buffers;
    }
    else ;
    
#line 761 
    ps_page->dma = dma_map_page(& pdev->dev,ps_page->page,0UL,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
    
#line 765 
    tmp = dma_mapping_error(& pdev->dev,ps_page->dma);
    
#line 765 
    if (tmp != 0) {
      
#line 767 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"Rx DMA page map failed\n");
      
#line 769 
      adapter->rx_dma_failed += 1U;
      
#line 770 
      goto no_buffers;
    }
    else ;
  }
  else ;
  
#line 777 
  rx_desc->read.buffer_addr[j + 1U] = ps_page->dma;
  ldv_56397: 
#line 779 
  ;
  
#line 747 
  j += 1U;
  ldv_56400: 
#line 748 
  ;
  
#line 747 
  if (j <= 2U) 
#line 749 
               goto ldv_56399; else 
#line 752 
                                    goto ldv_56401;
  ldv_56401: 
#line 753 
  ;
  
#line 781 
  skb = __netdev_alloc_skb_ip_align(netdev,(unsigned int)adapter->rx_ps_bsize0,gfp);
  
#line 784 
  if (skb == (struct sk_buff *)0) {
    
#line 785 
    adapter->alloc_rx_buff_failed += 1U;
    
#line 786 
    goto ldv_56402;
  }
  else ;
  
#line 789 
  buffer_info->skb = skb;
  
#line 790 
  buffer_info->dma = dma_map_single_attrs(& pdev->dev,(void *)skb->data,(unsigned long)adapter->rx_ps_bsize0,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0);
  
#line 793 
  tmp_0 = dma_mapping_error(& pdev->dev,buffer_info->dma);
  
#line 793 
  if (tmp_0 != 0) {
    
#line 794 
    dev_err((struct device const *)(& pdev->dev),"Rx DMA map failed\n");
    
#line 795 
    adapter->rx_dma_failed += 1U;
    
#line 797 
    dev_kfree_skb_any(skb);
    
#line 798 
    buffer_info->skb = (struct sk_buff *)0;
    
#line 799 
    goto ldv_56402;
  }
  else ;
  
#line 802 
  rx_desc->read.buffer_addr[0] = buffer_info->dma;
  
#line 804 
  if ((long)((i & 15U) == 0U) != 0L) {
    
#line 806 
    ldv_inline_asm();
    
#line 811 
    if ((adapter->flags2 & 2048U) != 0U) 
#line 812 
                                         e1000e_update_rdt_wa(rx_ring,i << 1); else 
                                                                    
#line 814 
                                                                    writel(i << 1,(void volatile *)rx_ring->tail);
  }
  else ;
  
#line 817 
  i += 1U;
  
#line 818 
  if (rx_ring->count == i) 
#line 819 
                           i = 0U; else ;
  
#line 820 
  buffer_info = rx_ring->buffer_info + i;
  ldv_56404: 
#line 821 
  ;
  
#line 744 
  tmp_1 = cleaned_count;
  
#line 744 
  cleaned_count -= 1;
  
#line 744 
  ;
  
#line 744 
  if (tmp_1 != 0) 
#line 746 
                  goto ldv_56403; else 
#line 749 
                                       goto ldv_56402;
  ldv_56402: 
#line 750 
  ;
  no_buffers: 
#line 823 
  ;
  
#line 824 
  rx_ring->next_to_use = (unsigned short)i;
  
#line 825 
  return;
}


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_alloc_jumbo_rx_buffers(struct e1000_ring *rx_ring, int cleaned_count, gfp_t gfp)
{
  union e1000_rx_desc_extended *rx_desc;
  struct e1000_buffer *buffer_info;
  struct sk_buff *skb;
  unsigned int i;
  int tmp_0;
  
#line 836 
  struct e1000_adapter *adapter = rx_ring->adapter;
  
#line 837 
  struct net_device *netdev = adapter->netdev;
  
#line 838 
  struct pci_dev *pdev = adapter->pdev;
  
#line 843 
  unsigned int bufsz = 240U;
  
#line 845 
  i = (unsigned int)rx_ring->next_to_use;
  
#line 846 
  buffer_info = rx_ring->buffer_info + i;
  
#line 848 
  goto ldv_56421;
  ldv_56420: 
#line 849 
  ;
  
#line 849 
  skb = buffer_info->skb;
  
#line 850 
  if (skb != (struct sk_buff *)0) {
    
#line 851 
    skb_trim(skb,0U);
    
#line 852 
    goto check_page;
  }
  else ;
  
#line 855 
  skb = __netdev_alloc_skb_ip_align(netdev,bufsz,gfp);
  
#line 856 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    
#line 858 
    adapter->alloc_rx_buff_failed += 1U;
    
#line 859 
    goto ldv_56419;
  }
  else ;
  
#line 862 
  buffer_info->skb = skb;
  check_page: 
#line 863 
  ;
  
#line 865 
  if (buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.page == (struct page *)0) {
    
#line 866 
    buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.page = alloc_pages(gfp,0U);
    
#line 867 
    if ((long)(buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.page == (struct page *)0) != 0L) {
      
#line 868 
      adapter->alloc_rx_buff_failed += 1U;
      
#line 869 
      goto ldv_56419;
    }
    else ;
  }
  else ;
  
#line 873 
  if (buffer_info->dma == 0ULL) {
    int tmp;
    
#line 874 
    buffer_info->dma = dma_map_page(& pdev->dev,buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.page,0UL,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
    
#line 878 
    tmp = dma_mapping_error(& pdev->dev,buffer_info->dma);
    
#line 878 
    if (tmp != 0) {
      
#line 879 
      adapter->alloc_rx_buff_failed += 1U;
      
#line 880 
      goto ldv_56419;
    }
    else ;
  }
  else ;
  
#line 884 
  rx_desc = (union e1000_rx_desc_extended *)rx_ring->desc + i;
  
#line 885 
  rx_desc->read.buffer_addr = buffer_info->dma;
  
#line 887 
  i += 1U;
  
#line 887 
  ;
  
#line 887 
  if ((long)(i == rx_ring->count) != 0L) 
#line 888 
                                         i = 0U; else ;
  
#line 889 
  buffer_info = rx_ring->buffer_info + i;
  ldv_56421: 
#line 890 
  ;
  
#line 848 
  tmp_0 = cleaned_count;
  
#line 848 
  cleaned_count -= 1;
  
#line 848 
  ;
  
#line 848 
  if (tmp_0 != 0) 
#line 850 
                  goto ldv_56420; else 
#line 853 
                                       goto ldv_56419;
  ldv_56419: 
#line 854 
  ;
  
#line 892 
  if ((long)((unsigned int)rx_ring->next_to_use != i) != 0L) {
    unsigned int tmp_1;
    
#line 893 
    rx_ring->next_to_use = (unsigned short)i;
    
#line 894 
    tmp_1 = i;
    
#line 894 
    i -= 1U;
    
#line 894 
    ;
    
#line 894 
    if ((long)(tmp_1 == 0U) != 0L) 
#line 895 
                                   i = rx_ring->count + 4294967295U; else ;
    
#line 896 
    ldv_inline_asm();
    
#line 903 
    if ((adapter->flags2 & 2048U) != 0U) 
#line 904 
                                         e1000e_update_rdt_wa(rx_ring,i); else 
                                                                    
#line 906 
                                                                    writel(i,(void volatile *)rx_ring->tail);
  }
  else ;
  
#line 908 
  return;
}


#line 910  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
__inline static void e1000_rx_hash(struct net_device *netdev, __le32 rss, struct sk_buff *skb)
{
  
#line 913 
  if ((netdev->features & 8589934592ULL) != 0ULL) 
#line 914 
                                                  skb_set_hash(skb,rss,(enum pkt_hash_types)PKT_HASH_TYPE_L3); else ;
  
#line 915 
  return;
}


#line 924  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static bool e1000_clean_rx_irq(struct e1000_ring *rx_ring, int *work_done, int work_to_do)
{
  union e1000_rx_desc_extended *rx_desc;
  union e1000_rx_desc_extended *next_rxd;
  struct e1000_buffer *buffer_info;
  struct e1000_buffer *next_buffer;
  u32 length;
  u32 staterr;
  unsigned int i;
  
#line 927 
  struct e1000_adapter *adapter = rx_ring->adapter;
  
#line 928 
  struct net_device *netdev = adapter->netdev;
  
#line 929 
  struct pci_dev *pdev = adapter->pdev;
  
#line 930 
  struct e1000_hw *hw = & adapter->hw;
  
#line 935 
  int cleaned_count = 0;
  
#line 936 
  bool cleaned = (_Bool)0;
  
#line 937 
  unsigned int total_rx_bytes = 0U;
  
#line 937 
  unsigned int total_rx_packets = 0U;
  
#line 939 
  i = (unsigned int)rx_ring->next_to_clean;
  
#line 940 
  rx_desc = (union e1000_rx_desc_extended *)rx_ring->desc + i;
  
#line 941 
  staterr = rx_desc->wb.upper.status_error;
  
#line 942 
  buffer_info = rx_ring->buffer_info + i;
  
#line 944 
  goto ldv_56454;
  ldv_56453: 
#line 945 
  ;
  {
    struct sk_buff *skb;
    
#line 947 
    if (*work_done >= work_to_do) 
#line 948 
                                  goto ldv_56448; else ;
    
#line 949 
    *work_done += 1;
    
#line 950 
    ldv_inline_asm();
    
#line 952 
    skb = buffer_info->skb;
    
#line 953 
    buffer_info->skb = (struct sk_buff *)0;
    
#line 955 
    __builtin_prefetch((void const *)skb->data);
    
#line 957 
    i += 1U;
    
#line 958 
    if (rx_ring->count == i) 
#line 959 
                             i = 0U; else ;
    
#line 960 
    next_rxd = (union e1000_rx_desc_extended *)rx_ring->desc + i;
    
#line 961 
    __builtin_prefetch((void const *)next_rxd);
    
#line 963 
    next_buffer = rx_ring->buffer_info + i;
    
#line 965 
    cleaned = (_Bool)1;
    
#line 966 
    cleaned_count += 1;
    
#line 967 
    dma_unmap_single_attrs(& pdev->dev,buffer_info->dma,(unsigned long)adapter->rx_buffer_len,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0);
    
#line 969 
    buffer_info->dma = 0ULL;
    
#line 971 
    length = (unsigned int)rx_desc->wb.upper.length;
    
#line 979 
    if ((long)((staterr & 2U) == 0U) != 0L) 
#line 980 
                                            adapter->flags2 |= 4U; else ;
    
#line 982 
    if ((adapter->flags2 & 4U) != 0U) {
      {
        
#line 984 
        struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_clean_rx_irq", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c", .format = "Receive packet consumed multiple buffers\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))984U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 984 
        if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 984 
                                                            __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Receive packet consumed multiple buffers\n"); else ;
      }
      
#line 986 
      buffer_info->skb = skb;
      
#line 987 
      if ((staterr & 2U) != 0U) 
#line 988 
                                adapter->flags2 &= 4294967291U; else ;
      
#line 989 
      goto next_desc;
    }
    else ;
    
#line 992 
    if ((long)((staterr & 2533359616U) != 0U) != 0L && (long)((netdev->features & 274877906944ULL) == 0ULL) != 0L) {
      
#line 995 
      buffer_info->skb = skb;
      
#line 996 
      goto next_desc;
    }
    else ;
    
#line 1000 
    if ((adapter->flags2 & 1U) == 0U) 
      
#line 1005 
      if ((netdev->features & 137438953472ULL) != 0ULL) 
#line 1006 
                                                        total_rx_bytes += 4294967292U; else 
                                                                    
#line 1008 
                                                                    length += 4294967292U;
    else ;
    
#line 1011 
    total_rx_bytes += length;
    
#line 1012 
    total_rx_packets += 1U;
    
#line 1018 
    if (length < copybreak) {
      
#line 1019 
      struct sk_buff *new_skb = napi_alloc_skb(& adapter->napi,length);
      
#line 1021 
      if (new_skb != (struct sk_buff *)0) {
        
#line 1022 
        skb_copy_to_linear_data_offset(new_skb,0,(void const *)skb->data,length);
        
#line 1029 
        buffer_info->skb = skb;
        
#line 1030 
        skb = new_skb;
      }
      else ;
    }
    else ;
    
#line 1035 
    skb_put(skb,length);
    
#line 1038 
    e1000_rx_checksum(adapter,staterr,skb);
    
#line 1040 
    e1000_rx_hash(netdev,rx_desc->wb.lower.hi_dword.rss,skb);
    
#line 1042 
    e1000_receive_skb(adapter,netdev,skb,staterr,(unsigned short)((int)rx_desc->wb.upper.vlan));
    next_desc: 
#line 1045 
    ;
    
#line 1046 
    rx_desc->wb.upper.status_error &= 4294967040U;
    
#line 1049 
    if (cleaned_count > 15) {
      
#line 1050 
      (*(adapter->alloc_rx_buf))(rx_ring,cleaned_count,32U);
      
#line 1052 
      cleaned_count = 0;
    }
    else ;
    
#line 1056 
    rx_desc = next_rxd;
    
#line 1057 
    buffer_info = next_buffer;
    
#line 1059 
    staterr = rx_desc->wb.upper.status_error;
  }
  ldv_56454: 
#line 1061 
  ;
  
#line 944 
  if ((staterr & 1U) != 0U) 
#line 946 
                            goto ldv_56453; else 
#line 949 
                                                 goto ldv_56448;
  ldv_56448: 
#line 950 
  ;
  
#line 1061 
  rx_ring->next_to_clean = (unsigned short)i;
  
#line 1063 
  cleaned_count = e1000_desc_unused(rx_ring);
  
#line 1064 
  if (cleaned_count != 0) 
#line 1065 
                          (*(adapter->alloc_rx_buf))(rx_ring,cleaned_count,32U); else ;
  
#line 1067 
  adapter->total_rx_bytes += total_rx_bytes;
  
#line 1068 
  adapter->total_rx_packets += total_rx_packets;
  
#line 1069 
  return cleaned;
}


#line 1072  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_put_txbuf(struct e1000_ring *tx_ring, struct e1000_buffer *buffer_info)
{
  
#line 1075 
  struct e1000_adapter *adapter = tx_ring->adapter;
  
#line 1077 
  if (buffer_info->dma != 0ULL) {
    
#line 1078 
    if ((unsigned int)buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.mapped_as_page != 0U) 
      
#line 1079 
      dma_unmap_page(& (adapter->pdev)->dev,buffer_info->dma,(unsigned long)buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.length,(enum dma_data_direction)DMA_TO_DEVICE); else 
                                                                    
#line 1082 
                                                                    dma_unmap_single_attrs(& (adapter->pdev)->dev,buffer_info->dma,(unsigned long)buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.length,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
    
#line 1084 
    buffer_info->dma = 0ULL;
  }
  else ;
  
#line 1086 
  if (buffer_info->skb != (struct sk_buff *)0) {
    
#line 1087 
    dev_kfree_skb_any(buffer_info->skb);
    
#line 1088 
    buffer_info->skb = (struct sk_buff *)0;
  }
  else ;
  
#line 1090 
  buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.time_stamp = 0UL;
  
#line 1091 
  return;
}


#line 1093  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_print_hw_hang(struct work_struct *work)
{
  struct e1000_adapter *tmp;
  u16 phy_status;
  u16 phy_1000t_status;
  u16 phy_ext_status;
  u16 pci_status;
  int tmp_0;
  u32 tmp_1;
  u32 tmp_2;
  u32 tmp_3;
  unsigned int tmp_4;
  unsigned int tmp_5;
  {
    
#line 1095 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1095 
    tmp = (struct e1000_adapter *)__mptr + 18446744073709539208U;
  }
  
#line 1095 
  struct e1000_adapter *adapter = tmp;
  
#line 1098 
  struct net_device *netdev = adapter->netdev;
  
#line 1099 
  struct e1000_ring *tx_ring = adapter->tx_ring;
  
#line 1100 
  unsigned int i = (unsigned int)tx_ring->next_to_clean;
  
#line 1101 
  unsigned int eop = (unsigned int)(tx_ring->buffer_info + i)->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.next_to_watch;
  
#line 1102 
  struct e1000_tx_desc *eop_desc = (struct e1000_tx_desc *)tx_ring->desc + eop;
  
#line 1103 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1107 
  tmp_0 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
  
#line 1107 
  if (tmp_0 != 0) 
#line 1108 
                  goto return_label; else ;
  
#line 1110 
  if (! adapter->tx_hang_recheck && (adapter->flags2 & 64U) != 0U) {
    
#line 1114 
    __ew32(hw,14368UL,adapter->tx_int_delay | 2147483648U);
    
#line 1116 
    __er32(hw,8UL);
    
#line 1120 
    __ew32(hw,14368UL,adapter->tx_int_delay | 2147483648U);
    
#line 1122 
    __er32(hw,8UL);
    
#line 1123 
    adapter->tx_hang_recheck = (_Bool)1;
    
#line 1124 
    goto return_label;
  }
  else ;
  
#line 1126 
  adapter->tx_hang_recheck = (_Bool)0;
  
#line 1128 
  tmp_1 = __er32(hw,14352UL);
  
#line 1128 
  tmp_2 = __er32(hw,14360UL);
  
#line 1128 
  if (tmp_1 == tmp_2) {
    {
      
#line 1129 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_print_hw_hang", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c", .format = "false hang detected, ignoring\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1129U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1129 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1129 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"false hang detected, ignoring\n"); else ;
    }
    
#line 1130 
    goto return_label;
  }
  else ;
  
#line 1134 
  netif_start_queue(netdev);
  
#line 1136 
  e1e_rphy(hw,1U,& phy_status);
  
#line 1137 
  e1e_rphy(hw,10U,& phy_1000t_status);
  
#line 1138 
  e1e_rphy(hw,15U,& phy_ext_status);
  
#line 1140 
  pci_read_config_word((struct pci_dev const *)adapter->pdev,6,& pci_status);
  
#line 1143 
  ;
  
#line 1143 
  ;
  
#line 1143 
  ;
  
#line 1143 
  ;
  
#line 1143 
  tmp_3 = __er32(hw,8UL);
  
#line 1143 
  ;
  
#line 1143 
  ;
  
#line 1143 
  ;
  
#line 1143 
  ;
  
#line 1143 
  ;
  
#line 1143 
  ;
  
#line 1143 
  tmp_4 = readl((void const volatile *)tx_ring->tail);
  
#line 1143 
  tmp_5 = readl((void const volatile *)tx_ring->head);
  
#line 1143 
  ;
  
#line 1143 
  netdev_err((struct net_device const *)adapter->netdev,"Detected Hardware Unit Hang:\n",tmp_5,tmp_4,(int)tx_ring->next_to_use,(int)tx_ring->next_to_clean,(tx_ring->buffer_info + eop)->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.time_stamp,eop,jiffies,(int)eop_desc->upper.fields.status,tmp_3,(int)phy_status,(int)phy_1000t_status,(int)phy_ext_status,(int)pci_status);
  
#line 1163 
  e1000e_dump(adapter);
  
#line 1166 
  if (hw->mac.type == (unsigned int)e1000_pchlan) {
    u32 tmp_6;
    
#line 1166 
    tmp_6 = __er32(hw,0UL);
    
#line 1166 
    if ((tmp_6 & 268435456U) != 0U) 
#line 1167 
                                    netdev_err((struct net_device const *)adapter->netdev,"Try turning off Tx pause (flow control) via ethtool\n"); else ;
  }
  else ;
  return_label: 
#line 1168 
                return;
}


#line 1178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_tx_hwtstamp_work(struct work_struct *work)
{
  struct e1000_adapter *tmp;
  u32 tmp_4;
  {
    
#line 1180 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1180 
    tmp = (struct e1000_adapter *)__mptr + 18446744073709538864U;
  }
  
#line 1180 
  struct e1000_adapter *adapter = tmp;
  
#line 1182 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1184 
  tmp_4 = __er32(hw,46612UL);
  
#line 1184 
  if ((tmp_4 & 1U) != 0U) {
    struct skb_shared_hwtstamps shhwtstamps;
    u64 txstmp;
    u32 tmp_0;
    u32 tmp_1;
    
#line 1188 
    tmp_0 = __er32(hw,46616UL);
    
#line 1188 
    txstmp = (unsigned long long)tmp_0;
    
#line 1189 
    tmp_1 = __er32(hw,46620UL);
    
#line 1189 
    txstmp = ((unsigned long long)tmp_1 << 32) | txstmp;
    
#line 1191 
    e1000e_systim_to_hwtstamp(adapter,& shhwtstamps,txstmp);
    
#line 1193 
    skb_tstamp_tx(adapter->tx_hwtstamp_skb,& shhwtstamps);
    
#line 1194 
    dev_kfree_skb_any(adapter->tx_hwtstamp_skb);
    
#line 1195 
    adapter->tx_hwtstamp_skb = (struct sk_buff *)0;
  }
  else {
    int tmp_2;
    {
      unsigned long __dummy;
      unsigned long volatile __dummy2;
      
#line 1196 
      tmp_2 = 1;
    }
    
#line 1196 
    if (tmp_2 != 0) {
      int tmp_3;
      {
        unsigned long __dummy_0;
        unsigned long __dummy2_0;
        
#line 1196 
        tmp_3 = 1;
      }
      
#line 1196 
      if (tmp_3 != 0) 
        
#line 1196 
        if ((long)((adapter->tx_hwtstamp_start + (unsigned long)((int)adapter->tx_timeout_factor * 250)) - jiffies) < 0L) {
          
#line 1198 
          dev_kfree_skb_any(adapter->tx_hwtstamp_skb);
          
#line 1199 
          adapter->tx_hwtstamp_skb = (struct sk_buff *)0;
          
#line 1200 
          adapter->tx_hwtstamp_timeouts += 1U;
          
#line 1201 
          netdev_warn((struct net_device const *)adapter->netdev,"clearing Tx timestamp hang\n");
        }
        else 
#line 1204 
             ldv_schedule_work_77(& adapter->tx_hwtstamp_work);
      else 
#line 1204 
           ldv_schedule_work_77(& adapter->tx_hwtstamp_work);
    }
    else 
#line 1204 
         ldv_schedule_work_77(& adapter->tx_hwtstamp_work);
  }
  
#line 1205 
  return;
}


#line 1215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static bool e1000_clean_tx_irq(struct e1000_ring *tx_ring)
{
  bool __retres;
  struct e1000_tx_desc *tx_desc;
  struct e1000_tx_desc *eop_desc;
  struct e1000_buffer *buffer_info;
  unsigned int i;
  unsigned int eop;
  
#line 1217 
  struct e1000_adapter *adapter = tx_ring->adapter;
  
#line 1218 
  struct net_device *netdev = adapter->netdev;
  
#line 1219 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1223 
  unsigned int count = 0U;
  
#line 1224 
  unsigned int total_tx_bytes = 0U;
  
#line 1224 
  unsigned int total_tx_packets = 0U;
  
#line 1225 
  unsigned int bytes_compl = 0U;
  
#line 1225 
  unsigned int pkts_compl = 0U;
  
#line 1227 
  i = (unsigned int)tx_ring->next_to_clean;
  
#line 1228 
  eop = (unsigned int)(tx_ring->buffer_info + i)->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.next_to_watch;
  
#line 1229 
  eop_desc = (struct e1000_tx_desc *)tx_ring->desc + eop;
  
#line 1231 
  goto ldv_56515;
  ldv_56514: 
#line 1232 
  ;
  {
    
#line 1233 
    bool cleaned = (_Bool)0;
    
#line 1234 
    ldv_inline_asm();
    
#line 1236 
    goto ldv_56511;
    ldv_56510: 
#line 1237 
    ;
    
#line 1237 
    tx_desc = (struct e1000_tx_desc *)tx_ring->desc + i;
    
#line 1238 
    buffer_info = tx_ring->buffer_info + i;
    
#line 1239 
    cleaned = (_Bool)(i == eop);
    
#line 1241 
    if ((int)cleaned != 0) {
      
#line 1242 
      total_tx_packets = buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.segs + total_tx_packets;
      
#line 1243 
      total_tx_bytes = buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.bytecount + total_tx_bytes;
      
#line 1244 
      if (buffer_info->skb != (struct sk_buff *)0) {
        
#line 1245 
        bytes_compl = (buffer_info->skb)->len + bytes_compl;
        
#line 1246 
        pkts_compl += 1U;
      }
      else ;
    }
    else ;
    
#line 1250 
    e1000_put_txbuf(tx_ring,buffer_info);
    
#line 1251 
    tx_desc->upper.data = 0U;
    
#line 1253 
    i += 1U;
    
#line 1254 
    if (tx_ring->count == i) 
#line 1255 
                             i = 0U; else ;
    
#line 1236 
    count += 1U;
    ldv_56511: 
#line 1237 
    ;
    
#line 1236 
    if (! cleaned) 
#line 1238 
                   goto ldv_56510; else 
#line 1241 
                                        goto ldv_56512;
    ldv_56512: 
#line 1242 
    ;
    
#line 1258 
    if ((unsigned int)tx_ring->next_to_use == i) 
#line 1259 
                                                 goto ldv_56513; else ;
    
#line 1260 
    eop = (unsigned int)(tx_ring->buffer_info + i)->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.next_to_watch;
    
#line 1261 
    eop_desc = (struct e1000_tx_desc *)tx_ring->desc + eop;
  }
  ldv_56515: 
#line 1263 
  ;
  
#line 1231 
  if ((eop_desc->upper.data & 1U) != 0U && tx_ring->count > count) 
#line 1234 
                                                                   goto ldv_56514; else 
                                                                    
#line 1237 
                                                                    goto ldv_56513;
  ldv_56513: 
#line 1238 
  ;
  
#line 1264 
  tx_ring->next_to_clean = (unsigned short)i;
  
#line 1266 
  netdev_completed_queue(netdev,pkts_compl,bytes_compl);
  
#line 1269 
  if (count != 0U) {
    bool tmp_1;
    
#line 1269 
    tmp_1 = netif_carrier_ok((struct net_device const *)netdev);
    
#line 1269 
    if ((int)tmp_1 != 0) {
      int tmp_2;
      
#line 1269 
      tmp_2 = e1000_desc_unused(tx_ring);
      
#line 1269 
      if (tmp_2 > 31) {
        bool tmp;
        
#line 1272 
        ldv_inline_asm();
        
#line 1276 
        tmp = netif_queue_stopped((struct net_device const *)netdev);
        
#line 1276 
        if ((int)tmp != 0) {
          int tmp_0;
          
#line 1276 
          tmp_0 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
          
#line 1276 
          if (tmp_0 == 0) {
            
#line 1278 
            netif_wake_queue(netdev);
            
#line 1279 
            adapter->restart_queue += 1U;
          }
          else ;
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 1283 
  if ((int)adapter->detect_tx_hung != 0) {
    
#line 1287 
    adapter->detect_tx_hung = (_Bool)0;
    
#line 1288 
    if ((tx_ring->buffer_info + i)->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.time_stamp != 0UL) {
      int tmp_3;
      {
        unsigned long __dummy;
        unsigned long volatile __dummy2;
        
#line 1289 
        tmp_3 = 1;
      }
      
#line 1288 
      if (tmp_3 != 0) {
        int tmp_4;
        {
          unsigned long __dummy_0;
          unsigned long __dummy2_0;
          
#line 1289 
          tmp_4 = 1;
        }
        
#line 1289 
        if (tmp_4 != 0) 
          
#line 1289 
          if ((long)(((tx_ring->buffer_info + i)->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.time_stamp + (unsigned long)((int)adapter->tx_timeout_factor * 250)) - jiffies) < 0L) {
            u32 tmp_5;
            
#line 1290 
            tmp_5 = __er32(hw,8UL);
            
#line 1290 
            if ((tmp_5 & 16U) == 0U) 
#line 1292 
                                     ldv_schedule_work_78(& adapter->print_hang_task); else 
                                                                    
#line 1294 
                                                                    adapter->tx_hang_recheck = (_Bool)0;
          }
          else 
#line 1294 
               adapter->tx_hang_recheck = (_Bool)0;
        else 
#line 1294 
             adapter->tx_hang_recheck = (_Bool)0;
      }
      else 
#line 1294 
           adapter->tx_hang_recheck = (_Bool)0;
    }
    else 
#line 1294 
         adapter->tx_hang_recheck = (_Bool)0;
  }
  else ;
  
#line 1296 
  adapter->total_tx_bytes += total_tx_bytes;
  
#line 1297 
  adapter->total_tx_packets += total_tx_packets;
  
#line 1298 
  __retres = (_Bool)(tx_ring->count > count);
  
#line 1298 
  return __retres;
}


#line 1410 
void __compiletime_assert_1410(void);


#line 1308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static bool e1000_clean_rx_irq_ps(struct e1000_ring *rx_ring, int *work_done, int work_to_do)
{
  union e1000_rx_desc_packet_split *rx_desc;
  union e1000_rx_desc_packet_split *next_rxd;
  struct e1000_buffer *buffer_info;
  struct e1000_buffer *next_buffer;
  struct e1000_ps_page *ps_page;
  struct sk_buff *skb;
  unsigned int i;
  unsigned int j;
  u32 length;
  u32 staterr;
  
#line 1311 
  struct e1000_adapter *adapter = rx_ring->adapter;
  
#line 1312 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1314 
  struct net_device *netdev = adapter->netdev;
  
#line 1315 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1321 
  int cleaned_count = 0;
  
#line 1322 
  bool cleaned = (_Bool)0;
  
#line 1323 
  unsigned int total_rx_bytes = 0U;
  
#line 1323 
  unsigned int total_rx_packets = 0U;
  
#line 1325 
  i = (unsigned int)rx_ring->next_to_clean;
  
#line 1326 
  rx_desc = (union e1000_rx_desc_packet_split *)rx_ring->desc + i;
  
#line 1327 
  staterr = rx_desc->wb.middle.status_error;
  
#line 1328 
  buffer_info = rx_ring->buffer_info + i;
  
#line 1330 
  goto ldv_56561;
  ldv_56560: 
#line 1331 
  ;
  
#line 1331 
  if (*work_done >= work_to_do) 
#line 1332 
                                goto ldv_56545; else ;
  
#line 1333 
  *work_done += 1;
  
#line 1334 
  skb = buffer_info->skb;
  
#line 1335 
  ldv_inline_asm();
  
#line 1338 
  __builtin_prefetch((void const *)skb->data);
  
#line 1340 
  i += 1U;
  
#line 1341 
  if (rx_ring->count == i) 
#line 1342 
                           i = 0U; else ;
  
#line 1343 
  next_rxd = (union e1000_rx_desc_packet_split *)rx_ring->desc + i;
  
#line 1344 
  __builtin_prefetch((void const *)next_rxd);
  
#line 1346 
  next_buffer = rx_ring->buffer_info + i;
  
#line 1348 
  cleaned = (_Bool)1;
  
#line 1349 
  cleaned_count += 1;
  
#line 1350 
  dma_unmap_single_attrs(& pdev->dev,buffer_info->dma,(unsigned long)adapter->rx_ps_bsize0,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0);
  
#line 1352 
  buffer_info->dma = 0ULL;
  
#line 1355 
  if ((staterr & 2U) == 0U) 
#line 1356 
                            adapter->flags2 |= 4U; else ;
  
#line 1358 
  if ((adapter->flags2 & 4U) != 0U) {
    {
      
#line 1359 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_clean_rx_irq_ps", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c", .format = "Packet Split buffers didn\'t pick up the full packet\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1359U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1359 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1359 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Packet Split buffers didn\'t pick up the full packet\n"); else ;
    }
    
#line 1360 
    dev_kfree_skb_irq(skb);
    
#line 1361 
    if ((staterr & 2U) != 0U) 
#line 1362 
                              adapter->flags2 &= 4294967291U; else ;
    
#line 1363 
    goto next_desc;
  }
  else ;
  
#line 1366 
  if ((long)((staterr & 2533359616U) != 0U) != 0L && (long)((netdev->features & 274877906944ULL) == 0ULL) != 0L) {
    
#line 1368 
    dev_kfree_skb_irq(skb);
    
#line 1369 
    goto next_desc;
  }
  else ;
  
#line 1372 
  length = (unsigned int)rx_desc->wb.middle.length0;
  
#line 1374 
  if (length == 0U) {
    {
      
#line 1375 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_clean_rx_irq_ps", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c", .format = "Last part of the packet spanning multiple descriptors\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1375U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1375 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1375 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Last part of the packet spanning multiple descriptors\n"); else ;
    }
    
#line 1376 
    dev_kfree_skb_irq(skb);
    
#line 1377 
    goto next_desc;
  }
  else ;
  
#line 1381 
  skb_put(skb,length);
  {
    
#line 1387 
    int l1 = (int)rx_desc->wb.upper.length[0];
    
#line 1394 
    if ((l1 != 0 && (unsigned int)l1 <= copybreak) && length + (unsigned int)l1 <= (unsigned int)adapter->rx_ps_bsize0) {
      u8 *vaddr;
      unsigned char *tmp_0;
      
#line 1398 
      ps_page = buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.ps_pages;
      
#line 1404 
      dma_sync_single_for_cpu(& pdev->dev,ps_page->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
      
#line 1408 
      vaddr = (u8 *)kmap_atomic(ps_page->page);
      
#line 1409 
      ;
      
#line 1409 
      ;
      
#line 1409 
      tmp_0 = skb_tail_pointer((struct sk_buff const *)skb);
      
#line 1409 
      memcpy((void *)tmp_0,(void const *)vaddr,(unsigned long)l1);
      {
        
#line 1410 
        bool __cond = (_Bool)0;
        
#line 1410 
        if ((int)__cond != 0) 
#line 1410 
                              __compiletime_assert_1410(); else ;
      }
      
#line 1410 
      __kunmap_atomic((void *)vaddr);
      
#line 1411 
      dma_sync_single_for_device(& pdev->dev,ps_page->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
      
#line 1417 
      if ((adapter->flags2 & 1U) == 0U) {
        
#line 1418 
        if ((netdev->features & 137438953472ULL) == 0ULL) 
#line 1419 
                                                          l1 += -4; else ;
      }
      else ;
      
#line 1422 
      skb_put(skb,(unsigned int)l1);
      
#line 1423 
      goto copydone;
    }
    else ;
  }
  
#line 1427 
  j = 0U;
  
#line 1427 
  goto ldv_56559;
  ldv_56558: 
#line 1428 
  ;
  
#line 1428 
  length = (unsigned int)rx_desc->wb.upper.length[j];
  
#line 1429 
  if (length == 0U) 
#line 1430 
                    goto ldv_56557; else ;
  
#line 1432 
  ps_page = buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.ps_pages + j;
  
#line 1433 
  dma_unmap_page(& pdev->dev,ps_page->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 1435 
  ps_page->dma = 0ULL;
  
#line 1436 
  skb_fill_page_desc(skb,(int)j,ps_page->page,0,(int)length);
  
#line 1437 
  ps_page->page = (struct page *)0;
  
#line 1438 
  skb->len += length;
  
#line 1439 
  skb->data_len += length;
  
#line 1440 
  skb->truesize += 4096U;
  
#line 1427 
  j += 1U;
  ldv_56559: 
#line 1428 
  ;
  
#line 1427 
  if (j <= 2U) 
#line 1429 
               goto ldv_56558; else 
#line 1432 
                                    goto ldv_56557;
  ldv_56557: 
#line 1433 
  ;
  
#line 1446 
  if ((adapter->flags2 & 1U) == 0U) {
    
#line 1447 
    if ((netdev->features & 137438953472ULL) == 0ULL) 
#line 1448 
                                                      pskb_trim(skb,skb->len + 4294967292U); else ;
  }
  else ;
  copydone: 
#line 1451 
  ;
  
#line 1452 
  total_rx_bytes = skb->len + total_rx_bytes;
  
#line 1453 
  total_rx_packets += 1U;
  
#line 1455 
  e1000_rx_checksum(adapter,staterr,skb);
  
#line 1457 
  e1000_rx_hash(netdev,rx_desc->wb.lower.hi_dword.rss,skb);
  
#line 1459 
  if ((int)rx_desc->wb.upper.header_status < 0) 
#line 1461 
                                                adapter->rx_hdr_split += 1ULL; else ;
  
#line 1463 
  e1000_receive_skb(adapter,netdev,skb,staterr,(unsigned short)((int)rx_desc->wb.middle.vlan));
  next_desc: 
#line 1466 
  ;
  
#line 1467 
  rx_desc->wb.middle.status_error &= 4294967040U;
  
#line 1468 
  buffer_info->skb = (struct sk_buff *)0;
  
#line 1471 
  if (cleaned_count > 15) {
    
#line 1472 
    (*(adapter->alloc_rx_buf))(rx_ring,cleaned_count,32U);
    
#line 1474 
    cleaned_count = 0;
  }
  else ;
  
#line 1478 
  rx_desc = next_rxd;
  
#line 1479 
  buffer_info = next_buffer;
  
#line 1481 
  staterr = rx_desc->wb.middle.status_error;
  ldv_56561: 
#line 1482 
  ;
  
#line 1330 
  if ((staterr & 1U) != 0U) 
#line 1332 
                            goto ldv_56560; else 
#line 1335 
                                                 goto ldv_56545;
  ldv_56545: 
#line 1336 
  ;
  
#line 1483 
  rx_ring->next_to_clean = (unsigned short)i;
  
#line 1485 
  cleaned_count = e1000_desc_unused(rx_ring);
  
#line 1486 
  if (cleaned_count != 0) 
#line 1487 
                          (*(adapter->alloc_rx_buf))(rx_ring,cleaned_count,32U); else ;
  
#line 1489 
  adapter->total_rx_bytes += total_rx_bytes;
  
#line 1490 
  adapter->total_rx_packets += total_rx_packets;
  
#line 1491 
  return cleaned;
}


#line 1497  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_consume_page(struct e1000_buffer *bi, struct sk_buff *skb, u16 length)
{
  
#line 1500 
  bi->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.page = (struct page *)0;
  
#line 1501 
  skb->len += (unsigned int)length;
  
#line 1502 
  skb->data_len += (unsigned int)length;
  
#line 1503 
  skb->truesize += 4096U;
  
#line 1504 
  return;
}


#line 1615 
void __compiletime_assert_1615(void);


#line 1513  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static bool e1000_clean_jumbo_rx_irq(struct e1000_ring *rx_ring, int *work_done, int work_to_do)
{
  union e1000_rx_desc_extended *rx_desc;
  union e1000_rx_desc_extended *next_rxd;
  struct e1000_buffer *buffer_info;
  struct e1000_buffer *next_buffer;
  u32 length;
  u32 staterr;
  unsigned int i;
  struct skb_shared_info *shinfo;
  
#line 1516 
  struct e1000_adapter *adapter = rx_ring->adapter;
  
#line 1517 
  struct net_device *netdev = adapter->netdev;
  
#line 1518 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1523 
  int cleaned_count = 0;
  
#line 1524 
  bool cleaned = (_Bool)0;
  
#line 1525 
  unsigned int total_rx_bytes = 0U;
  
#line 1525 
  unsigned int total_rx_packets = 0U;
  
#line 1528 
  i = (unsigned int)rx_ring->next_to_clean;
  
#line 1529 
  rx_desc = (union e1000_rx_desc_extended *)rx_ring->desc + i;
  
#line 1530 
  staterr = rx_desc->wb.upper.status_error;
  
#line 1531 
  buffer_info = rx_ring->buffer_info + i;
  
#line 1533 
  goto ldv_56596;
  ldv_56595: 
#line 1534 
  ;
  {
    struct sk_buff *skb;
    int tmp_4;
    
#line 1536 
    if (*work_done >= work_to_do) 
#line 1537 
                                  goto ldv_56588; else ;
    
#line 1538 
    *work_done += 1;
    
#line 1539 
    ldv_inline_asm();
    
#line 1541 
    skb = buffer_info->skb;
    
#line 1542 
    buffer_info->skb = (struct sk_buff *)0;
    
#line 1544 
    i += 1U;
    
#line 1545 
    if (rx_ring->count == i) 
#line 1546 
                             i = 0U; else ;
    
#line 1547 
    next_rxd = (union e1000_rx_desc_extended *)rx_ring->desc + i;
    
#line 1548 
    __builtin_prefetch((void const *)next_rxd);
    
#line 1550 
    next_buffer = rx_ring->buffer_info + i;
    
#line 1552 
    cleaned = (_Bool)1;
    
#line 1553 
    cleaned_count += 1;
    
#line 1554 
    dma_unmap_page(& pdev->dev,buffer_info->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
    
#line 1556 
    buffer_info->dma = 0ULL;
    
#line 1558 
    length = (unsigned int)rx_desc->wb.upper.length;
    
#line 1561 
    if ((long)((staterr & 2U) != 0U) != 0L && (((long)((staterr & 2533359616U) != 0U) != 0L && (long)((netdev->features & 274877906944ULL) == 0ULL) != 0L) != 0) != 0) {
      
#line 1565 
      buffer_info->skb = skb;
      
#line 1567 
      if (rx_ring->rx_skb_top != (struct sk_buff *)0) 
#line 1568 
                                                      dev_kfree_skb_irq(rx_ring->rx_skb_top); else ;
      
#line 1569 
      rx_ring->rx_skb_top = (struct sk_buff *)0;
      
#line 1570 
      goto next_desc;
    }
    else ;
    
#line 1573 
    if ((staterr & 2U) == 0U) {
      
#line 1575 
      if (rx_ring->rx_skb_top == (struct sk_buff *)0) {
        
#line 1577 
        rx_ring->rx_skb_top = skb;
        
#line 1578 
        skb_fill_page_desc(rx_ring->rx_skb_top,0,buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.page,0,(int)length);
      }
      else {
        
#line 1582 
        shinfo = (struct skb_shared_info *)skb_end_pointer((struct sk_buff const *)rx_ring->rx_skb_top);
        
#line 1583 
        skb_fill_page_desc(rx_ring->rx_skb_top,(int)shinfo->nr_frags,buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.page,0,(int)length);
        
#line 1587 
        buffer_info->skb = skb;
      }
      
#line 1589 
      e1000_consume_page(buffer_info,rx_ring->rx_skb_top,(unsigned short)((int)((unsigned short)length)));
      
#line 1590 
      goto next_desc;
    }
    else 
      
#line 1592 
      if (rx_ring->rx_skb_top != (struct sk_buff *)0) {
        
#line 1594 
        shinfo = (struct skb_shared_info *)skb_end_pointer((struct sk_buff const *)rx_ring->rx_skb_top);
        
#line 1595 
        skb_fill_page_desc(rx_ring->rx_skb_top,(int)shinfo->nr_frags,buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.page,0,(int)length);
        
#line 1601 
        buffer_info->skb = skb;
        
#line 1602 
        skb = rx_ring->rx_skb_top;
        
#line 1603 
        rx_ring->rx_skb_top = (struct sk_buff *)0;
        
#line 1604 
        e1000_consume_page(buffer_info,skb,(unsigned short)((int)((unsigned short)length)));
      }
      else 
        
#line 1609 
        if (length <= copybreak) {
          int tmp_3;
          
#line 1610 
          tmp_3 = skb_tailroom((struct sk_buff const *)skb);
          
#line 1610 
          ;
          
#line 1610 
          if ((unsigned int)tmp_3 >= length) {
            u8 *vaddr;
            unsigned char *tmp_2;
            
#line 1612 
            vaddr = (u8 *)kmap_atomic(buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.page);
            
#line 1613 
            ;
            
#line 1613 
            ;
            
#line 1613 
            tmp_2 = skb_tail_pointer((struct sk_buff const *)skb);
            
#line 1613 
            memcpy((void *)tmp_2,(void const *)vaddr,(unsigned long)length);
            {
              
#line 1615 
              bool __cond = (_Bool)0;
              
#line 1615 
              if ((int)__cond != 0) 
#line 1615 
                                    __compiletime_assert_1615(); else ;
            }
            
#line 1615 
            __kunmap_atomic((void *)vaddr);
            
#line 1619 
            skb_put(skb,length);
          }
          else 
#line 1609 
               goto _LAND;
        }
        else {
          _LAND: {
                   
#line 1621 
                   skb_fill_page_desc(skb,0,buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.page,0,(int)length);
                   
#line 1624 
                   e1000_consume_page(buffer_info,skb,(unsigned short)((int)((unsigned short)length)));
                 }
        }
    
#line 1631 
    e1000_rx_checksum(adapter,staterr,skb);
    
#line 1633 
    e1000_rx_hash(netdev,rx_desc->wb.lower.hi_dword.rss,skb);
    
#line 1636 
    total_rx_bytes = skb->len + total_rx_bytes;
    
#line 1637 
    total_rx_packets += 1U;
    
#line 1640 
    tmp_4 = pskb_may_pull(skb,14U);
    
#line 1640 
    if (tmp_4 == 0) {
      
#line 1641 
      netdev_err((struct net_device const *)adapter->netdev,"pskb_may_pull failed.\n");
      
#line 1642 
      dev_kfree_skb_irq(skb);
      
#line 1643 
      goto next_desc;
    }
    else ;
    
#line 1646 
    e1000_receive_skb(adapter,netdev,skb,staterr,(unsigned short)((int)rx_desc->wb.upper.vlan));
    next_desc: 
#line 1649 
    ;
    
#line 1650 
    rx_desc->wb.upper.status_error &= 4294967040U;
    
#line 1653 
    if ((long)(cleaned_count > 15) != 0L) {
      
#line 1654 
      (*(adapter->alloc_rx_buf))(rx_ring,cleaned_count,32U);
      
#line 1656 
      cleaned_count = 0;
    }
    else ;
    
#line 1660 
    rx_desc = next_rxd;
    
#line 1661 
    buffer_info = next_buffer;
    
#line 1663 
    staterr = rx_desc->wb.upper.status_error;
  }
  ldv_56596: 
#line 1665 
  ;
  
#line 1533 
  if ((staterr & 1U) != 0U) 
#line 1535 
                            goto ldv_56595; else 
#line 1538 
                                                 goto ldv_56588;
  ldv_56588: 
#line 1539 
  ;
  
#line 1665 
  rx_ring->next_to_clean = (unsigned short)i;
  
#line 1667 
  cleaned_count = e1000_desc_unused(rx_ring);
  
#line 1668 
  if (cleaned_count != 0) 
#line 1669 
                          (*(adapter->alloc_rx_buf))(rx_ring,cleaned_count,32U); else ;
  
#line 1671 
  adapter->total_rx_bytes += total_rx_bytes;
  
#line 1672 
  adapter->total_rx_packets += total_rx_packets;
  
#line 1673 
  return cleaned;
}


#line 1680  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_clean_rx_ring(struct e1000_ring *rx_ring)
{
  struct e1000_buffer *buffer_info;
  struct e1000_ps_page *ps_page;
  unsigned int i;
  unsigned int j;
  
#line 1682 
  struct e1000_adapter *adapter = rx_ring->adapter;
  
#line 1685 
  struct pci_dev *pdev = adapter->pdev;
  
#line 1689 
  i = 0U;
  
#line 1689 
  goto ldv_56610;
  ldv_56609: 
#line 1690 
  ;
  
#line 1690 
  buffer_info = rx_ring->buffer_info + i;
  
#line 1691 
  if (buffer_info->dma != 0ULL) {
    
#line 1692 
    if (adapter->clean_rx == & e1000_clean_rx_irq) 
#line 1693 
                                                   dma_unmap_single_attrs(& pdev->dev,buffer_info->dma,(unsigned long)adapter->rx_buffer_len,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0);
    else 
      
#line 1696 
      if (adapter->clean_rx == & e1000_clean_jumbo_rx_irq) 
#line 1697 
                                                           dma_unmap_page(& pdev->dev,buffer_info->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
      else 
        
#line 1699 
        if (adapter->clean_rx == & e1000_clean_rx_irq_ps) 
#line 1700 
                                                          dma_unmap_single_attrs(& pdev->dev,buffer_info->dma,(unsigned long)adapter->rx_ps_bsize0,(enum dma_data_direction)DMA_FROM_DEVICE,(struct dma_attrs *)0); else ;
    
#line 1703 
    buffer_info->dma = 0ULL;
  }
  else ;
  
#line 1706 
  if (buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.page != (struct page *)0) {
    
#line 1707 
    put_page(buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.page);
    
#line 1708 
    buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.page = (struct page *)0;
  }
  else ;
  
#line 1711 
  if (buffer_info->skb != (struct sk_buff *)0) {
    
#line 1712 
    consume_skb(buffer_info->skb);
    
#line 1713 
    buffer_info->skb = (struct sk_buff *)0;
  }
  else ;
  
#line 1716 
  j = 0U;
  
#line 1716 
  goto ldv_56608;
  ldv_56607: 
#line 1717 
  ;
  
#line 1717 
  ps_page = buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.ps_pages + j;
  
#line 1718 
  if (ps_page->page == (struct page *)0) 
#line 1719 
                                         goto ldv_56606; else ;
  
#line 1720 
  dma_unmap_page(& pdev->dev,ps_page->dma,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 1722 
  ps_page->dma = 0ULL;
  
#line 1723 
  put_page(ps_page->page);
  
#line 1724 
  ps_page->page = (struct page *)0;
  
#line 1716 
  j += 1U;
  ldv_56608: 
#line 1717 
  ;
  
#line 1716 
  if (j <= 2U) 
#line 1718 
               goto ldv_56607; else 
#line 1721 
                                    goto ldv_56606;
  ldv_56606: 
#line 1722 
  ;
  
#line 1689 
  i += 1U;
  ldv_56610: 
#line 1690 
  ;
  
#line 1689 
  if (rx_ring->count > i) 
#line 1691 
                          goto ldv_56609; else 
#line 1694 
                                               goto ldv_56611;
  ldv_56611: 
#line 1695 
  ;
  
#line 1729 
  if (rx_ring->rx_skb_top != (struct sk_buff *)0) {
    
#line 1730 
    consume_skb(rx_ring->rx_skb_top);
    
#line 1731 
    rx_ring->rx_skb_top = (struct sk_buff *)0;
  }
  else ;
  
#line 1735 
  memset(rx_ring->desc,0,(unsigned long)rx_ring->size);
  
#line 1737 
  rx_ring->next_to_clean = (unsigned short)0U;
  
#line 1738 
  rx_ring->next_to_use = (unsigned short)0U;
  
#line 1739 
  adapter->flags2 &= 4294967291U;
  
#line 1741 
  writel(0U,(void volatile *)rx_ring->head);
  
#line 1742 
  if ((adapter->flags2 & 2048U) != 0U) 
#line 1743 
                                       e1000e_update_rdt_wa(rx_ring,0U); else 
                                                                    
#line 1745 
                                                                    writel(0U,(void volatile *)rx_ring->tail);
  
#line 1746 
  return;
}


#line 1748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_downshift_workaround(struct work_struct *work)
{
  struct e1000_adapter *tmp;
  int tmp_0;
  {
    
#line 1750 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1750 
    tmp = (struct e1000_adapter *)__mptr + 18446744073709539368U;
  }
  
#line 1750 
  struct e1000_adapter *adapter = tmp;
  
#line 1754 
  tmp_0 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
  
#line 1754 
  if (tmp_0 != 0) 
#line 1755 
                  goto return_label; else ;
  
#line 1757 
  e1000e_gig_downshift_workaround_ich8lan(& adapter->hw);
  return_label: 
#line 1758 
                return;
}


#line 1765  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static irqreturn_t e1000_intr_msi(int irq, void *data)
{
  irqreturn_t __retres;
  bool tmp_6;
  
#line 1767 
  struct net_device *netdev = (struct net_device *)data;
  
#line 1768 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1769 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1770 
  u32 icr = __er32(hw,192UL);
  
#line 1773 
  if ((icr & 4U) != 0U) {
    bool tmp_3;
    int tmp_4;
    
#line 1774 
    hw->mac.get_link_status = (_Bool)1;
    
#line 1778 
    if ((adapter->flags & 33554432U) != 0U) {
      u32 tmp_1;
      
#line 1778 
      tmp_1 = __er32(hw,8UL);
      
#line 1778 
      if ((tmp_1 & 2U) == 0U) 
#line 1780 
                              ldv_schedule_work_79(& adapter->downshift_task); else ;
    }
    else ;
    
#line 1786 
    tmp_3 = netif_carrier_ok((struct net_device const *)netdev);
    
#line 1786 
    if ((int)tmp_3 != 0) {
      
#line 1786 
      if ((adapter->flags & 16777216U) != 0U) {
        
#line 1789 
        u32 rctl = __er32(hw,256UL);
        
#line 1791 
        __ew32(hw,256UL,rctl & 4294967293U);
        
#line 1792 
        adapter->flags |= 1073741824U;
      }
      else ;
    }
    else ;
    
#line 1795 
    tmp_4 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
    
#line 1795 
    if (tmp_4 == 0) 
#line 1796 
                    ldv_mod_timer_80(& adapter->watchdog_timer,jiffies + 1UL); else ;
  }
  else ;
  
#line 1800 
  if ((icr & 4194304U) != 0U && (unsigned int)hw->mac.type + 4294967285U <= 1U) {
    
#line 1802 
    u32 pbeccsts = __er32(hw,4108UL);
    
#line 1804 
    adapter->corr_errors += pbeccsts & 255U;
    
#line 1806 
    adapter->uncorr_errors += (pbeccsts >> 8) & 255U;
    
#line 1811 
    ldv_schedule_work_81(& adapter->reset_task);
    
#line 1814 
    __retres = IRQ_HANDLED;
    
#line 1814 
    goto return_label;
  }
  else ;
  
#line 1817 
  tmp_6 = napi_schedule_prep(& adapter->napi);
  
#line 1817 
  if ((int)tmp_6 != 0) {
    
#line 1818 
    adapter->total_tx_bytes = 0U;
    
#line 1819 
    adapter->total_tx_packets = 0U;
    
#line 1820 
    adapter->total_rx_bytes = 0U;
    
#line 1821 
    adapter->total_rx_packets = 0U;
    
#line 1822 
    __napi_schedule(& adapter->napi);
  }
  else ;
  
#line 1825 
  __retres = IRQ_HANDLED;
  return_label: 
#line 1825 
                return __retres;
}


#line 1833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static irqreturn_t e1000_intr(int irq, void *data)
{
  irqreturn_t __retres;
  u32 rctl;
  bool tmp_6;
  
#line 1835 
  struct net_device *netdev = (struct net_device *)data;
  
#line 1836 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1837 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1838 
  u32 icr = __er32(hw,192UL);
  
#line 1840 
  if (icr == 0U) {
    
#line 1841 
    __retres = IRQ_NONE;
    
#line 1841 
    goto return_label;
  }
  else {
    int tmp_1;
    
#line 1840 
    tmp_1 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
    
#line 1840 
    if (tmp_1 != 0) {
      
#line 1841 
      __retres = IRQ_NONE;
      
#line 1841 
      goto return_label;
    }
    else ;
  }
  
#line 1846 
  if (icr >= (u32)0) {
    
#line 1847 
    __retres = IRQ_NONE;
    
#line 1847 
    goto return_label;
  }
  else ;
  
#line 1854 
  if ((icr & 4U) != 0U) {
    bool tmp_3;
    int tmp_4;
    
#line 1855 
    hw->mac.get_link_status = (_Bool)1;
    
#line 1859 
    if ((adapter->flags & 33554432U) != 0U) {
      u32 tmp_2;
      
#line 1859 
      tmp_2 = __er32(hw,8UL);
      
#line 1859 
      if ((tmp_2 & 2U) == 0U) 
#line 1861 
                              ldv_schedule_work_82(& adapter->downshift_task); else ;
    }
    else ;
    
#line 1868 
    tmp_3 = netif_carrier_ok((struct net_device const *)netdev);
    
#line 1868 
    if ((int)tmp_3 != 0) {
      
#line 1868 
      if ((adapter->flags & 16777216U) != 0U) {
        
#line 1871 
        rctl = __er32(hw,256UL);
        
#line 1872 
        __ew32(hw,256UL,rctl & 4294967293U);
        
#line 1873 
        adapter->flags |= 1073741824U;
      }
      else ;
    }
    else ;
    
#line 1876 
    tmp_4 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
    
#line 1876 
    if (tmp_4 == 0) 
#line 1877 
                    ldv_mod_timer_83(& adapter->watchdog_timer,jiffies + 1UL); else ;
  }
  else ;
  
#line 1881 
  if ((icr & 4194304U) != 0U && (unsigned int)hw->mac.type + 4294967285U <= 1U) {
    
#line 1883 
    u32 pbeccsts = __er32(hw,4108UL);
    
#line 1885 
    adapter->corr_errors += pbeccsts & 255U;
    
#line 1887 
    adapter->uncorr_errors += (pbeccsts >> 8) & 255U;
    
#line 1892 
    ldv_schedule_work_84(& adapter->reset_task);
    
#line 1895 
    __retres = IRQ_HANDLED;
    
#line 1895 
    goto return_label;
  }
  else ;
  
#line 1898 
  tmp_6 = napi_schedule_prep(& adapter->napi);
  
#line 1898 
  if ((int)tmp_6 != 0) {
    
#line 1899 
    adapter->total_tx_bytes = 0U;
    
#line 1900 
    adapter->total_tx_packets = 0U;
    
#line 1901 
    adapter->total_rx_bytes = 0U;
    
#line 1902 
    adapter->total_rx_packets = 0U;
    
#line 1903 
    __napi_schedule(& adapter->napi);
  }
  else ;
  
#line 1906 
  __retres = IRQ_HANDLED;
  return_label: 
#line 1906 
                return __retres;
}


#line 1909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static irqreturn_t e1000_msix_other(int irq, void *data)
{
  irqreturn_t __retres;
  int tmp_3;
  
#line 1911 
  struct net_device *netdev = (struct net_device *)data;
  
#line 1912 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1913 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1914 
  u32 icr = __er32(hw,192UL);
  
#line 1916 
  if (icr >= (u32)0) {
    int tmp_1;
    
#line 1917 
    tmp_1 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
    
#line 1917 
    if (tmp_1 == 0) 
#line 1918 
                    __ew32(hw,208UL,16777216U); else ;
    
#line 1919 
    __retres = IRQ_NONE;
    
#line 1919 
    goto return_label;
  }
  else ;
  
#line 1922 
  if ((adapter->eiac_mask & icr) != 0U) 
#line 1923 
                                        __ew32(hw,200UL,adapter->eiac_mask & icr); else ;
  
#line 1925 
  if ((icr & 16777216U) != 0U) {
    int tmp_2;
    
#line 1926 
    if ((icr & 4U) == 0U) 
#line 1927 
                          goto no_link_interrupt; else ;
    
#line 1928 
    hw->mac.get_link_status = (_Bool)1;
    
#line 1930 
    tmp_2 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
    
#line 1930 
    if (tmp_2 == 0) 
#line 1931 
                    ldv_mod_timer_85(& adapter->watchdog_timer,jiffies + 1UL); else ;
  }
  else ;
  no_link_interrupt: 
#line 1934 
  ;
  
#line 1935 
  tmp_3 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
  
#line 1935 
  if (tmp_3 == 0) 
#line 1936 
                  __ew32(hw,208UL,16777220U); else ;
  
#line 1938 
  __retres = IRQ_HANDLED;
  return_label: 
#line 1938 
                return __retres;
}


#line 1941  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static irqreturn_t e1000_intr_msix_tx(int irq, void *data)
{
  irqreturn_t __retres;
  int tmp_1;
  bool tmp_0;
  
#line 1943 
  struct net_device *netdev = (struct net_device *)data;
  
#line 1944 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1945 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1946 
  struct e1000_ring *tx_ring = adapter->tx_ring;
  
#line 1948 
  adapter->total_tx_bytes = 0U;
  
#line 1949 
  adapter->total_tx_packets = 0U;
  
#line 1951 
  tmp_0 = e1000_clean_tx_irq(tx_ring);
  
#line 1951 
  if (tmp_0) 
#line 1951 
             tmp_1 = 0; else 
#line 1951 
                             tmp_1 = 1;
  
#line 1951 
  if (tmp_1) 
#line 1953 
             __ew32(hw,200UL,tx_ring->ims_val); else ;
  
#line 1955 
  __retres = IRQ_HANDLED;
  
#line 1955 
  return __retres;
}


#line 1958  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static irqreturn_t e1000_intr_msix_rx(int irq, void *data)
{
  irqreturn_t __retres;
  bool tmp_0;
  
#line 1960 
  struct net_device *netdev = (struct net_device *)data;
  
#line 1961 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 1962 
  struct e1000_ring *rx_ring = adapter->rx_ring;
  
#line 1967 
  if (rx_ring->set_itr != 0) {
    
#line 1968 
    writel(1000000000U / (rx_ring->itr_val * 256U),(void volatile *)rx_ring->itr_register);
    
#line 1970 
    rx_ring->set_itr = 0;
  }
  else ;
  
#line 1973 
  tmp_0 = napi_schedule_prep(& adapter->napi);
  
#line 1973 
  if ((int)tmp_0 != 0) {
    
#line 1974 
    adapter->total_rx_bytes = 0U;
    
#line 1975 
    adapter->total_rx_packets = 0U;
    
#line 1976 
    __napi_schedule(& adapter->napi);
  }
  else ;
  
#line 1978 
  __retres = IRQ_HANDLED;
  
#line 1978 
  return __retres;
}


#line 1987  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_configure_msix(struct e1000_adapter *adapter)
{
  u32 ctrl_ext;
  
#line 1989 
  struct e1000_hw *hw = & adapter->hw;
  
#line 1990 
  struct e1000_ring *rx_ring = adapter->rx_ring;
  
#line 1991 
  struct e1000_ring *tx_ring = adapter->tx_ring;
  
#line 1992 
  int vector = 0;
  
#line 1993 
  u32 ivar = 0U;
  
#line 1995 
  adapter->eiac_mask = 0U;
  
#line 1998 
  if (hw->mac.type == (unsigned int)e1000_82574) {
    
#line 1999 
    u32 rfctl = __er32(hw,20488UL);
    
#line 2001 
    rfctl |= 4096U;
    
#line 2002 
    __ew32(hw,20488UL,rfctl);
  }
  else ;
  
#line 2006 
  rx_ring->ims_val = 1048576U;
  
#line 2007 
  adapter->eiac_mask |= rx_ring->ims_val;
  
#line 2008 
  if (rx_ring->itr_val != 0U) 
#line 2009 
                              writel(1000000000U / (rx_ring->itr_val * 256U),(void volatile *)rx_ring->itr_register); else 
                                                                    
#line 2012 
                                                                    writel(1U,(void volatile *)rx_ring->itr_register);
  
#line 2013 
  ivar = (unsigned int)(vector | 8);
  
#line 2016 
  tx_ring->ims_val = 4194304U;
  
#line 2017 
  vector += 1;
  
#line 2018 
  if (tx_ring->itr_val != 0U) 
#line 2019 
                              writel(1000000000U / (tx_ring->itr_val * 256U),(void volatile *)tx_ring->itr_register); else 
                                                                    
#line 2022 
                                                                    writel(1U,(void volatile *)tx_ring->itr_register);
  
#line 2023 
  adapter->eiac_mask |= tx_ring->ims_val;
  
#line 2024 
  ivar = ((unsigned int)(vector << 8) | ivar) | 2048U;
  
#line 2027 
  vector += 1;
  
#line 2028 
  ivar = ((unsigned int)(vector << 16) | ivar) | 524288U;
  
#line 2029 
  if (rx_ring->itr_val != 0U) 
#line 2030 
                              writel(1000000000U / (rx_ring->itr_val * 256U),(void volatile *)(hw->hw_addr + (vector + 58) * 4)); else 
                                                                    
#line 2033 
                                                                    writel(1U,(void volatile *)(hw->hw_addr + (vector + 58) * 4));
  
#line 2036 
  ivar |= 2147483648U;
  
#line 2038 
  __ew32(hw,228UL,ivar);
  
#line 2041 
  ctrl_ext = __er32(hw,24UL);
  
#line 2042 
  ctrl_ext |= 2147483648U;
  
#line 2045 
  __ew32(hw,224UL,4279238655U);
  
#line 2046 
  ctrl_ext |= 16777216U;
  
#line 2047 
  __ew32(hw,24UL,ctrl_ext);
  
#line 2048 
  __er32(hw,8UL);
  
#line 2049 
  return;
}


#line 2051  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_reset_interrupt_capability(struct e1000_adapter *adapter)
{
  
#line 2053 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    
#line 2054 
    pci_disable_msix(adapter->pdev);
    
#line 2055 
    kfree((void const *)adapter->msix_entries);
    
#line 2056 
    adapter->msix_entries = (struct msix_entry *)0;
  }
  else 
    
#line 2057 
    if ((adapter->flags & 134217728U) != 0U) {
      
#line 2058 
      pci_disable_msi(adapter->pdev);
      
#line 2059 
      adapter->flags &= 4160749567U;
    }
    else ;
  
#line 2061 
  return;
}


#line 2069  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_set_interrupt_capability(struct e1000_adapter *adapter)
{
  int err;
  int i;
  
#line 2074 
  switch (adapter->int_mode) {
    int tmp_0;
    case 2: 
#line 2075 
    ;
    
#line 2076 
    if ((adapter->flags & 1024U) != 0U) {
      
#line 2077 
      adapter->num_vectors = 3U;
      
#line 2078 
      adapter->msix_entries = (struct msix_entry *)kcalloc_0((unsigned long)adapter->num_vectors,8UL,208U);
      
#line 2082 
      if (adapter->msix_entries != (struct msix_entry *)0) {
        
#line 2083 
        struct e1000_adapter *a = adapter;
        
#line 2085 
        i = 0;
        
#line 2085 
        goto ldv_56683;
        ldv_56682: 
#line 2086 
        ;
        
#line 2086 
        (adapter->msix_entries + i)->entry = (unsigned short)i;
        
#line 2085 
        i += 1;
        ldv_56683: 
#line 2086 
        ;
        
#line 2085 
        if (adapter->num_vectors > (unsigned int)i) 
#line 2087 
                                                    goto ldv_56682; else 
                                                                    
#line 2090 
                                                                    goto ldv_56684;
        ldv_56684: 
#line 2091 
        ;
        
#line 2088 
        err = pci_enable_msix_range(a->pdev,a->msix_entries,(int)a->num_vectors,(int)a->num_vectors);
        
#line 2092 
        if (err > 0) 
#line 2093 
                     goto return_label; else ;
      }
      else ;
      
#line 2096 
      netdev_err((struct net_device const *)adapter->netdev,"Failed to initialize MSI-X interrupts.  Falling back to MSI interrupts.\n");
      
#line 2097 
      e1000e_reset_interrupt_capability(adapter);
    }
    else ;
    
#line 2099 
    adapter->int_mode = 1;
    case 1: 
#line 2101 
    ;
    
#line 2102 
    tmp_0 = pci_enable_msi_exact(adapter->pdev,1);
    
#line 2102 
    if (tmp_0 == 0) 
#line 2103 
                    adapter->flags |= 134217728U;
    else {
      
#line 2105 
      adapter->int_mode = 0;
      
#line 2106 
      netdev_err((struct net_device const *)adapter->netdev,"Failed to initialize MSI interrupts.  Falling back to legacy interrupts.\n");
    }
    case 0: 
#line 2109 
    ;
    
#line 2111 
    goto ldv_56687;
  }
  ldv_56687: 
#line 2115 
  ;
  
#line 2115 
  adapter->num_vectors = 1U;
  return_label: 
#line 2116 
                return;
}


#line 2124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_request_msix(struct e1000_adapter *adapter)
{
  int __retres;
  size_t tmp;
  size_t tmp_0;
  
#line 2126 
  struct net_device *netdev = adapter->netdev;
  
#line 2127 
  int err = 0;
  
#line 2127 
  int vector = 0;
  
#line 2129 
  tmp = strlen((char const *)(& netdev->name));
  
#line 2129 
  if (tmp <= 10UL) 
#line 2130 
                   snprintf((char *)(& (adapter->rx_ring)->name),20UL,"%s-rx-0",(char *)(& netdev->name)); else 
                                                                    
#line 2134 
                                                                    memcpy((void *)(& (adapter->rx_ring)->name),(void const *)(& netdev->name),16UL);
  
#line 2135 
  err = ldv_request_irq_86((adapter->msix_entries + vector)->vector,& e1000_intr_msix_rx,0UL,(char const *)(& (adapter->rx_ring)->name),(void *)netdev);
  
#line 2138 
  if (err != 0) {
    
#line 2139 
    __retres = err;
    
#line 2139 
    goto return_label;
  }
  else ;
  
#line 2140 
  (adapter->rx_ring)->itr_register = adapter->hw.hw_addr + (vector + 58) * 4;
  
#line 2142 
  (adapter->rx_ring)->itr_val = adapter->itr;
  
#line 2143 
  vector += 1;
  
#line 2145 
  tmp_0 = strlen((char const *)(& netdev->name));
  
#line 2145 
  if (tmp_0 <= 10UL) 
#line 2146 
                     snprintf((char *)(& (adapter->tx_ring)->name),20UL,"%s-tx-0",(char *)(& netdev->name)); else 
                                                                    
#line 2150 
                                                                    memcpy((void *)(& (adapter->tx_ring)->name),(void const *)(& netdev->name),16UL);
  
#line 2151 
  err = ldv_request_irq_87((adapter->msix_entries + vector)->vector,& e1000_intr_msix_tx,0UL,(char const *)(& (adapter->tx_ring)->name),(void *)netdev);
  
#line 2154 
  if (err != 0) {
    
#line 2155 
    __retres = err;
    
#line 2155 
    goto return_label;
  }
  else ;
  
#line 2156 
  (adapter->tx_ring)->itr_register = adapter->hw.hw_addr + (vector + 58) * 4;
  
#line 2158 
  (adapter->tx_ring)->itr_val = adapter->itr;
  
#line 2159 
  vector += 1;
  
#line 2161 
  err = ldv_request_irq_88((adapter->msix_entries + vector)->vector,& e1000_msix_other,0UL,(char const *)(& netdev->name),(void *)netdev);
  
#line 2163 
  if (err != 0) {
    
#line 2164 
    __retres = err;
    
#line 2164 
    goto return_label;
  }
  else ;
  
#line 2166 
  e1000_configure_msix(adapter);
  
#line 2168 
  __retres = 0;
  return_label: 
#line 2168 
                return __retres;
}


#line 2177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_request_irq(struct e1000_adapter *adapter)
{
  int __retres;
  int err;
  
#line 2179 
  struct net_device *netdev = adapter->netdev;
  
#line 2182 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    
#line 2183 
    err = e1000_request_msix(adapter);
    
#line 2184 
    if (err == 0) {
      
#line 2185 
      __retres = err;
      
#line 2185 
      goto return_label;
    }
    else ;
    
#line 2187 
    e1000e_reset_interrupt_capability(adapter);
    
#line 2188 
    adapter->int_mode = 1;
    
#line 2189 
    e1000e_set_interrupt_capability(adapter);
  }
  else ;
  
#line 2191 
  if ((adapter->flags & 134217728U) != 0U) {
    
#line 2192 
    err = ldv_request_irq_89((adapter->pdev)->irq,& e1000_intr_msi,0UL,(char const *)(& netdev->name),(void *)netdev);
    
#line 2194 
    if (err == 0) {
      
#line 2195 
      __retres = err;
      
#line 2195 
      goto return_label;
    }
    else ;
    
#line 2198 
    e1000e_reset_interrupt_capability(adapter);
    
#line 2199 
    adapter->int_mode = 0;
  }
  else ;
  
#line 2202 
  err = ldv_request_irq_90((adapter->pdev)->irq,& e1000_intr,128UL,(char const *)(& netdev->name),(void *)netdev);
  
#line 2204 
  if (err != 0) 
#line 2205 
                netdev_err((struct net_device const *)adapter->netdev,"Unable to allocate interrupt, Error: %d\n",err); else ;
  
#line 2207 
  __retres = err;
  return_label: 
#line 2207 
                return __retres;
}


#line 2210  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_free_irq(struct e1000_adapter *adapter)
{
  
#line 2212 
  struct net_device *netdev = adapter->netdev;
  
#line 2214 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    
#line 2215 
    int vector = 0;
    
#line 2217 
    ldv_free_irq_91((adapter->msix_entries + vector)->vector,(void *)netdev);
    
#line 2218 
    vector += 1;
    
#line 2220 
    ldv_free_irq_92((adapter->msix_entries + vector)->vector,(void *)netdev);
    
#line 2221 
    vector += 1;
    
#line 2224 
    ldv_free_irq_93((adapter->msix_entries + vector)->vector,(void *)netdev);
    
#line 2225 
    goto return_label;
  }
  else ;
  
#line 2228 
  ldv_free_irq_94((adapter->pdev)->irq,(void *)netdev);
  return_label: 
#line 2229 
                return;
}


#line 2234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_irq_disable(struct e1000_adapter *adapter)
{
  
#line 2236 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2238 
  __ew32(hw,216UL,4294967295U);
  
#line 2239 
  if (adapter->msix_entries != (struct msix_entry *)0) 
#line 2240 
                                                       __ew32(hw,220UL,0U); else ;
  
#line 2241 
  __er32(hw,8UL);
  
#line 2243 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    int i;
    
#line 2246 
    i = 0;
    
#line 2246 
    goto ldv_56710;
    ldv_56709: 
#line 2247 
    ;
    
#line 2247 
    synchronize_irq((adapter->msix_entries + i)->vector);
    
#line 2246 
    i += 1;
    ldv_56710: 
#line 2247 
    ;
    
#line 2246 
    if (adapter->num_vectors > (unsigned int)i) 
#line 2248 
                                                goto ldv_56709; else 
                                                                  
#line 2251 
                                                                  goto ldv_56711;
    ldv_56711: 
#line 2252 
    ;
  }
  else 
#line 2249 
       synchronize_irq((adapter->pdev)->irq);
  
#line 2250 
  return;
}


#line 2256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_irq_enable(struct e1000_adapter *adapter)
{
  
#line 2258 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2260 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    
#line 2261 
    __ew32(hw,220UL,adapter->eiac_mask & 32505856U);
    
#line 2262 
    __ew32(hw,208UL,adapter->eiac_mask | 16777220U);
  }
  else 
    
#line 2263 
    if ((unsigned int)hw->mac.type + 4294967285U <= 1U) 
#line 2265 
                                                        __ew32(hw,208UL,4194461U); else 
                                                                    
#line 2267 
                                                                    __ew32(hw,208UL,157U);
  
#line 2269 
  __er32(hw,8UL);
  
#line 2270 
  return;
}


#line 2281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_get_hw_control(struct e1000_adapter *adapter)
{
  u32 ctrl_ext;
  u32 swsm;
  
#line 2283 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2288 
  if ((adapter->flags & 64U) != 0U) {
    
#line 2289 
    swsm = __er32(hw,23376UL);
    
#line 2290 
    __ew32(hw,23376UL,swsm | 8U);
  }
  else 
    
#line 2291 
    if ((adapter->flags & 32U) != 0U) {
      
#line 2292 
      ctrl_ext = __er32(hw,24UL);
      
#line 2293 
      __ew32(hw,24UL,ctrl_ext | 268435456U);
    }
    else ;
  
#line 2295 
  return;
}


#line 2307  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_release_hw_control(struct e1000_adapter *adapter)
{
  u32 ctrl_ext;
  u32 swsm;
  
#line 2309 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2314 
  if ((adapter->flags & 64U) != 0U) {
    
#line 2315 
    swsm = __er32(hw,23376UL);
    
#line 2316 
    __ew32(hw,23376UL,swsm & 4294967287U);
  }
  else 
    
#line 2317 
    if ((adapter->flags & 32U) != 0U) {
      
#line 2318 
      ctrl_ext = __er32(hw,24UL);
      
#line 2319 
      __ew32(hw,24UL,ctrl_ext & 4026531839U);
    }
    else ;
  
#line 2321 
  return;
}


#line 2326  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_alloc_ring_dma(struct e1000_adapter *adapter, struct e1000_ring *ring)
{
  int __retres;
  
#line 2329 
  struct pci_dev *pdev = adapter->pdev;
  
#line 2331 
  ring->desc = dma_alloc_attrs(& pdev->dev,(unsigned long)ring->size,& ring->dma,208U,(struct dma_attrs *)0);
  
#line 2333 
  if (ring->desc == (void *)0) {
    
#line 2334 
    __retres = -12;
    
#line 2334 
    goto return_label;
  }
  else ;
  
#line 2336 
  __retres = 0;
  return_label: 
#line 2336 
                return __retres;
}


#line 2345  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
int e1000e_setup_tx_resources(struct e1000_ring *tx_ring)
{
  int __retres;
  int size;
  
#line 2347 
  struct e1000_adapter *adapter = tx_ring->adapter;
  
#line 2348 
  int err = -12;
  
#line 2350 
  size = (int)(tx_ring->count * 40U);
  
#line 2351 
  tx_ring->buffer_info = (struct e1000_buffer *)vzalloc((unsigned long)size);
  
#line 2352 
  if (tx_ring->buffer_info == (struct e1000_buffer *)0) 
#line 2353 
                                                        goto err; else ;
  
#line 2356 
  tx_ring->size = tx_ring->count * 16U;
  
#line 2357 
  tx_ring->size = (tx_ring->size + 4095U) & 4294963200U;
  
#line 2359 
  err = e1000_alloc_ring_dma(adapter,tx_ring);
  
#line 2360 
  if (err != 0) 
#line 2361 
                goto err; else ;
  
#line 2363 
  tx_ring->next_to_use = (unsigned short)0U;
  
#line 2364 
  tx_ring->next_to_clean = (unsigned short)0U;
  
#line 2366 
  __retres = 0;
  
#line 2366 
  goto return_label;
  err: 
#line 2367 
  ;
  
#line 2368 
  vfree((void const *)tx_ring->buffer_info);
  
#line 2369 
  netdev_err((struct net_device const *)adapter->netdev,"Unable to allocate memory for the transmit descriptor ring\n");
  
#line 2370 
  __retres = err;
  return_label: 
#line 2370 
                return __retres;
}


#line 2379  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
int e1000e_setup_rx_resources(struct e1000_ring *rx_ring)
{
  int __retres;
  struct e1000_buffer *buffer_info;
  int i;
  int size;
  int desc_len;
  
#line 2381 
  struct e1000_adapter *adapter = rx_ring->adapter;
  
#line 2383 
  int err = -12;
  
#line 2385 
  size = (int)(rx_ring->count * 40U);
  
#line 2386 
  rx_ring->buffer_info = (struct e1000_buffer *)vzalloc((unsigned long)size);
  
#line 2387 
  if (rx_ring->buffer_info == (struct e1000_buffer *)0) 
#line 2388 
                                                        goto err; else ;
  
#line 2390 
  i = 0;
  
#line 2390 
  goto ldv_56752;
  ldv_56751: 
#line 2391 
  ;
  
#line 2391 
  buffer_info = rx_ring->buffer_info + i;
  
#line 2392 
  buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.ps_pages = (struct e1000_ps_page *)kcalloc_0(3UL,16UL,208U);
  
#line 2395 
  if (buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.ps_pages == (struct e1000_ps_page *)0) 
    
#line 2396 
    goto err_pages; else ;
  
#line 2390 
  i += 1;
  ldv_56752: 
#line 2391 
  ;
  
#line 2390 
  if (rx_ring->count > (unsigned int)i) 
#line 2392 
                                        goto ldv_56751; else 
#line 2395 
                                                             goto ldv_56753;
  ldv_56753: 
#line 2396 
  ;
  
#line 2399 
  desc_len = 32;
  
#line 2402 
  rx_ring->size = rx_ring->count * (unsigned int)desc_len;
  
#line 2403 
  rx_ring->size = (rx_ring->size + 4095U) & 4294963200U;
  
#line 2405 
  err = e1000_alloc_ring_dma(adapter,rx_ring);
  
#line 2406 
  if (err != 0) 
#line 2407 
                goto err_pages; else ;
  
#line 2409 
  rx_ring->next_to_clean = (unsigned short)0U;
  
#line 2410 
  rx_ring->next_to_use = (unsigned short)0U;
  
#line 2411 
  rx_ring->rx_skb_top = (struct sk_buff *)0;
  
#line 2413 
  __retres = 0;
  
#line 2413 
  goto return_label;
  err_pages: 
#line 2415 
  ;
  
#line 2416 
  i = 0;
  
#line 2416 
  goto ldv_56755;
  ldv_56754: 
#line 2417 
  ;
  
#line 2417 
  buffer_info = rx_ring->buffer_info + i;
  
#line 2418 
  kfree((void const *)buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.ps_pages);
  
#line 2416 
  i += 1;
  ldv_56755: 
#line 2417 
  ;
  
#line 2416 
  if (rx_ring->count > (unsigned int)i) 
#line 2418 
                                        goto ldv_56754; else 
#line 2421 
                                                             goto ldv_56756;
  ldv_56756: 
#line 2422 
  ;
  err: 
#line 2420 
  ;
  
#line 2421 
  vfree((void const *)rx_ring->buffer_info);
  
#line 2422 
  netdev_err((struct net_device const *)adapter->netdev,"Unable to allocate memory for the receive descriptor ring\n");
  
#line 2423 
  __retres = err;
  return_label: 
#line 2423 
                return __retres;
}


#line 2430  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_clean_tx_ring(struct e1000_ring *tx_ring)
{
  struct e1000_buffer *buffer_info;
  unsigned long size;
  unsigned int i;
  
#line 2432 
  struct e1000_adapter *adapter = tx_ring->adapter;
  
#line 2437 
  i = 0U;
  
#line 2437 
  goto ldv_56765;
  ldv_56764: 
#line 2438 
  ;
  
#line 2438 
  buffer_info = tx_ring->buffer_info + i;
  
#line 2439 
  e1000_put_txbuf(tx_ring,buffer_info);
  
#line 2437 
  i += 1U;
  ldv_56765: 
#line 2438 
  ;
  
#line 2437 
  if (tx_ring->count > i) 
#line 2439 
                          goto ldv_56764; else 
#line 2442 
                                               goto ldv_56766;
  ldv_56766: 
#line 2443 
  ;
  
#line 2442 
  netdev_reset_queue(adapter->netdev);
  
#line 2443 
  size = (unsigned long)tx_ring->count * 40UL;
  
#line 2444 
  memset((void *)tx_ring->buffer_info,0,size);
  
#line 2446 
  memset(tx_ring->desc,0,(unsigned long)tx_ring->size);
  
#line 2448 
  tx_ring->next_to_use = (unsigned short)0U;
  
#line 2449 
  tx_ring->next_to_clean = (unsigned short)0U;
  
#line 2451 
  writel(0U,(void volatile *)tx_ring->head);
  
#line 2452 
  if ((adapter->flags2 & 2048U) != 0U) 
#line 2453 
                                       e1000e_update_tdt_wa(tx_ring,0U); else 
                                                                    
#line 2455 
                                                                    writel(0U,(void volatile *)tx_ring->tail);
  
#line 2456 
  return;
}


#line 2464  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_free_tx_resources(struct e1000_ring *tx_ring)
{
  
#line 2466 
  struct e1000_adapter *adapter = tx_ring->adapter;
  
#line 2467 
  struct pci_dev *pdev = adapter->pdev;
  
#line 2469 
  e1000_clean_tx_ring(tx_ring);
  
#line 2471 
  vfree((void const *)tx_ring->buffer_info);
  
#line 2472 
  tx_ring->buffer_info = (struct e1000_buffer *)0;
  
#line 2474 
  dma_free_attrs(& pdev->dev,(unsigned long)tx_ring->size,tx_ring->desc,tx_ring->dma,(struct dma_attrs *)0);
  
#line 2476 
  tx_ring->desc = (void *)0;
  
#line 2477 
  return;
}


#line 2485  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_free_rx_resources(struct e1000_ring *rx_ring)
{
  int i;
  
#line 2487 
  struct e1000_adapter *adapter = rx_ring->adapter;
  
#line 2488 
  struct pci_dev *pdev = adapter->pdev;
  
#line 2491 
  e1000_clean_rx_ring(rx_ring);
  
#line 2493 
  i = 0;
  
#line 2493 
  goto ldv_56779;
  ldv_56778: 
#line 2494 
  ;
  
#line 2494 
  kfree((void const *)(rx_ring->buffer_info + i)->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_98.ps_pages);
  
#line 2493 
  i += 1;
  ldv_56779: 
#line 2494 
  ;
  
#line 2493 
  if (rx_ring->count > (unsigned int)i) 
#line 2495 
                                        goto ldv_56778; else 
#line 2498 
                                                             goto ldv_56780;
  ldv_56780: 
#line 2499 
  ;
  
#line 2496 
  vfree((void const *)rx_ring->buffer_info);
  
#line 2497 
  rx_ring->buffer_info = (struct e1000_buffer *)0;
  
#line 2499 
  dma_free_attrs(& pdev->dev,(unsigned long)rx_ring->size,rx_ring->desc,rx_ring->dma,(struct dma_attrs *)0);
  
#line 2501 
  rx_ring->desc = (void *)0;
  
#line 2502 
  return;
}


#line 2520  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static unsigned int e1000_update_itr(u16 itr_setting, int packets, int bytes)
{
  unsigned int __retres;
  
#line 2522 
  unsigned int retval = (unsigned int)itr_setting;
  
#line 2524 
  if (packets == 0) {
    
#line 2525 
    __retres = (unsigned int)itr_setting;
    
#line 2525 
    goto return_label;
  }
  else ;
  
#line 2527 
  switch ((int)itr_setting) {
    case 0: 
#line 2528 
    ;
    
#line 2530 
    if (bytes / packets > 8000) 
#line 2531 
                                retval = 2U;
    else 
      
#line 2532 
      if (packets <= 4 && bytes > 512) 
#line 2533 
                                       retval = 1U; else ;
    
#line 2534 
    goto ldv_56788;
    case 1: 
#line 2535 
    ;
    
#line 2536 
    if (bytes > 10000) {
      
#line 2538 
      if (bytes / packets > 8000) 
#line 2539 
                                  retval = 2U;
      else 
        
#line 2540 
        if (packets <= 9 || bytes / packets > 1200) 
#line 2541 
                                                    retval = 2U;
        else 
          
#line 2542 
          if (packets > 35) 
#line 2543 
                            retval = 0U; else ;
    }
    else 
      
#line 2544 
      if (bytes / packets > 2000) 
#line 2545 
                                  retval = 2U;
      else 
        
#line 2546 
        if (packets <= 2 && bytes <= 511) 
#line 2547 
                                          retval = 0U; else ;
    
#line 2549 
    goto ldv_56788;
    case 2: 
#line 2550 
    ;
    
#line 2551 
    if (bytes > 25000) {
      
#line 2552 
      if (packets > 35) 
#line 2553 
                        retval = 1U; else ;
    }
    else 
      
#line 2554 
      if (bytes <= 5999) 
#line 2555 
                         retval = 1U; else ;
    
#line 2557 
    goto ldv_56788;
  }
  ldv_56788: 
#line 2560 
  ;
  
#line 2560 
  __retres = retval;
  return_label: 
#line 2560 
                return __retres;
}


#line 2563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_set_itr(struct e1000_adapter *adapter)
{
  u16 current_itr;
  unsigned int tmp;
  unsigned int tmp_0;
  int tmp_2;
  
#line 2566 
  u32 new_itr = adapter->itr;
  
#line 2569 
  if ((unsigned int)adapter->link_speed != 1000U) {
    
#line 2570 
    current_itr = (unsigned short)0U;
    
#line 2571 
    new_itr = 4000U;
    
#line 2572 
    goto set_itr_now;
  }
  else ;
  
#line 2575 
  if ((adapter->flags2 & 256U) != 0U) {
    
#line 2576 
    new_itr = 0U;
    
#line 2577 
    goto set_itr_now;
  }
  else ;
  
#line 2580 
  tmp = e1000_update_itr((unsigned short)((int)adapter->tx_itr),(int)adapter->total_tx_packets,(int)adapter->total_tx_bytes);
  
#line 2580 
  adapter->tx_itr = (unsigned short)tmp;
  
#line 2584 
  if (adapter->itr_setting == 3U && (unsigned int)adapter->tx_itr == 0U) 
    
#line 2585 
    adapter->tx_itr = (unsigned short)1U; else ;
  
#line 2587 
  tmp_0 = e1000_update_itr((unsigned short)((int)adapter->rx_itr),(int)adapter->total_rx_packets,(int)adapter->total_rx_bytes);
  
#line 2587 
  adapter->rx_itr = (unsigned short)tmp_0;
  
#line 2591 
  if (adapter->itr_setting == 3U && (unsigned int)adapter->rx_itr == 0U) 
    
#line 2592 
    adapter->rx_itr = (unsigned short)1U; else ;
  {
    int tmp_1;
    
#line 2594 
    u16 _max1 = adapter->rx_itr;
    
#line 2594 
    u16 _max2 = adapter->tx_itr;
    
#line 2594 
    if ((int)_max1 > (int)_max2) 
#line 2594 
                                 tmp_1 = (int)_max1; else 
#line 2594 
                                                          tmp_1 = (int)_max2;
    
#line 2594 
    tmp_2 = tmp_1;
  }
  
#line 2594 
  current_itr = (unsigned short)tmp_2;
  
#line 2597 
  switch ((int)current_itr) {
    case 0: 
#line 2598 
    ;
    
#line 2599 
    new_itr = 70000U;
    
#line 2600 
    goto ldv_56801;
    case 1: 
#line 2601 
    ;
    
#line 2602 
    new_itr = 20000U;
    
#line 2603 
    goto ldv_56801;
    case 2: 
#line 2604 
    ;
    
#line 2605 
    new_itr = 4000U;
    
#line 2606 
    goto ldv_56801;
    default: 
#line 2607 
    ;
    
#line 2608 
    goto ldv_56801;
  }
  ldv_56801: 
#line 2611 
  ;
  set_itr_now: 
#line 2611 
  ;
  
#line 2612 
  if (adapter->itr != new_itr) {
    
#line 2617 
    if (adapter->itr < new_itr) {
      u32 tmp_4;
      {
        u32 tmp_3;
        
#line 2618 
        u32 _min1 = adapter->itr + (new_itr >> 2);
        
#line 2618 
        u32 _min2 = new_itr;
        
#line 2618 
        if (_min1 < _min2) 
#line 2618 
                           tmp_3 = _min1; else 
#line 2618 
                                               tmp_3 = _min2;
        
#line 2618 
        tmp_4 = tmp_3;
      }
      
#line 2617 
      new_itr = tmp_4;
    }
    else 
#line 2617 
         new_itr = new_itr;
    
#line 2619 
    adapter->itr = new_itr;
    
#line 2620 
    (adapter->rx_ring)->itr_val = new_itr;
    
#line 2621 
    if (adapter->msix_entries != (struct msix_entry *)0) 
#line 2622 
                                                         (adapter->rx_ring)->set_itr = 1; else 
                                                                    
#line 2624 
                                                                    e1000e_write_itr(adapter,new_itr);
  }
  else ;
  
#line 2626 
  return;
}


#line 2637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_write_itr(struct e1000_adapter *adapter, u32 itr)
{
  unsigned int tmp;
  
#line 2639 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2640 
  if (itr != 0U) 
#line 2640 
                 tmp = 1000000000U / (itr * 256U); else 
#line 2640 
                                                        tmp = 0U;
  
#line 2640 
  u32 new_itr = tmp;
  
#line 2642 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    int vector;
    
#line 2645 
    vector = 0;
    
#line 2645 
    goto ldv_56816;
    ldv_56815: 
#line 2646 
    ;
    
#line 2646 
    writel(new_itr,(void volatile *)(hw->hw_addr + (vector + 58) * 4));
    
#line 2645 
    vector += 1;
    ldv_56816: 
#line 2646 
    ;
    
#line 2645 
    if (adapter->num_vectors > (unsigned int)vector) 
#line 2647 
                                                     goto ldv_56815; else 
                                                                    
#line 2650 
                                                                    goto ldv_56817;
    ldv_56817: 
#line 2651 
    ;
  }
  else 
#line 2648 
       __ew32(hw,196UL,new_itr);
  
#line 2649 
  return;
}


#line 2656  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_alloc_queues(struct e1000_adapter *adapter)
{
  int __retres;
  
#line 2658 
  int size = 120;
  
#line 2660 
  adapter->tx_ring = (struct e1000_ring *)kzalloc((unsigned long)size,208U);
  
#line 2661 
  if (adapter->tx_ring == (struct e1000_ring *)0) 
#line 2662 
                                                  goto err; else ;
  
#line 2663 
  (adapter->tx_ring)->count = (unsigned int)adapter->tx_ring_count;
  
#line 2664 
  (adapter->tx_ring)->adapter = adapter;
  
#line 2666 
  adapter->rx_ring = (struct e1000_ring *)kzalloc((unsigned long)size,208U);
  
#line 2667 
  if (adapter->rx_ring == (struct e1000_ring *)0) 
#line 2668 
                                                  goto err; else ;
  
#line 2669 
  (adapter->rx_ring)->count = (unsigned int)adapter->rx_ring_count;
  
#line 2670 
  (adapter->rx_ring)->adapter = adapter;
  
#line 2672 
  __retres = 0;
  
#line 2672 
  goto return_label;
  err: 
#line 2673 
  ;
  
#line 2674 
  netdev_err((struct net_device const *)adapter->netdev,"Unable to allocate memory for queues\n");
  
#line 2675 
  kfree((void const *)adapter->rx_ring);
  
#line 2676 
  kfree((void const *)adapter->tx_ring);
  
#line 2677 
  __retres = -12;
  return_label: 
#line 2677 
                return __retres;
}


#line 2685  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_poll(struct napi_struct *napi, int weight)
{
  struct e1000_adapter *tmp;
  {
    
#line 2687 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 2687 
    tmp = (struct e1000_adapter *)__mptr + 18446744073709550448U;
  }
  
#line 2687 
  struct e1000_adapter *adapter = tmp;
  
#line 2689 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2690 
  struct net_device *poll_dev = adapter->netdev;
  
#line 2691 
  int tx_cleaned = 1;
  
#line 2691 
  int work_done = 0;
  
#line 2693 
  adapter = (struct e1000_adapter *)netdev_priv((struct net_device const *)poll_dev);
  
#line 2695 
  if (adapter->msix_entries == (struct msix_entry *)0 || ((adapter->rx_ring)->ims_val & (adapter->tx_ring)->ims_val) != 0U) {
    bool tmp_1;
    
#line 2697 
    tmp_1 = e1000_clean_tx_irq(adapter->tx_ring);
    
#line 2697 
    tx_cleaned = (int)tmp_1;
  }
  else ;
  
#line 2699 
  (*(adapter->clean_rx))(adapter->rx_ring,& work_done,weight);
  
#line 2701 
  if (tx_cleaned == 0) 
#line 2702 
                       work_done = weight; else ;
  
#line 2705 
  if (work_done < weight) {
    int tmp_2;
    
#line 2706 
    if ((adapter->itr_setting & 3U) != 0U) 
#line 2707 
                                           e1000_set_itr(adapter); else ;
    
#line 2708 
    napi_complete(napi);
    
#line 2709 
    tmp_2 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
    
#line 2709 
    if (tmp_2 == 0) 
      
#line 2710 
      if (adapter->msix_entries != (struct msix_entry *)0) 
#line 2711 
                                                           __ew32(hw,208UL,(adapter->rx_ring)->ims_val); else 
                                                                    
#line 2713 
                                                                    e1000_irq_enable(adapter);
    else ;
  }
  else ;
  
#line 2717 
  return work_done;
}


#line 2720  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_vlan_rx_add_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  int __retres;
  u32 vfta;
  u32 index;
  
#line 2723 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2724 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2728 
  if (((int)adapter->hw.mng_cookie.status & 2) != 0 && (int)adapter->mng_vlan_id == (int)vid) {
    
#line 2731 
    __retres = 0;
    
#line 2731 
    goto return_label;
  }
  else ;
  
#line 2734 
  if ((adapter->flags & 4U) != 0U) {
    
#line 2735 
    index = (unsigned int)((int)vid >> 5) & 127U;
    
#line 2736 
    vfta = readl((void const volatile *)(hw->hw_addr + ((index << 2) + 22016U)));
    
#line 2737 
    vfta = (unsigned int)(1 << ((int)vid & 31)) | vfta;
    
#line 2738 
    (*(hw->mac.ops.write_vfta))(hw,index,vfta);
  }
  else ;
  
#line 2741 
  clear_bit((long)vid,(unsigned long volatile *)(& adapter->active_vlans));
  
#line 2743 
  __retres = 0;
  return_label: 
#line 2743 
                return __retres;
}


#line 2746  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_vlan_rx_kill_vid(struct net_device *netdev, __be16 proto, u16 vid)
{
  int __retres;
  u32 vfta;
  u32 index;
  
#line 2749 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 2750 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2753 
  if (((int)adapter->hw.mng_cookie.status & 2) != 0 && (int)adapter->mng_vlan_id == (int)vid) {
    
#line 2757 
    e1000e_release_hw_control(adapter);
    
#line 2758 
    __retres = 0;
    
#line 2758 
    goto return_label;
  }
  else ;
  
#line 2762 
  if ((adapter->flags & 4U) != 0U) {
    
#line 2763 
    index = (unsigned int)((int)vid >> 5) & 127U;
    
#line 2764 
    vfta = readl((void const volatile *)(hw->hw_addr + ((index << 2) + 22016U)));
    
#line 2765 
    vfta = (unsigned int)(~ (1 << ((int)vid & 31))) & vfta;
    
#line 2766 
    (*(hw->mac.ops.write_vfta))(hw,index,vfta);
  }
  else ;
  
#line 2769 
  clear_bit((long)vid,(unsigned long volatile *)(& adapter->active_vlans));
  
#line 2771 
  __retres = 0;
  return_label: 
#line 2771 
                return __retres;
}


#line 2778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_vlan_filter_disable(struct e1000_adapter *adapter)
{
  u32 rctl;
  
#line 2780 
  struct net_device *netdev = adapter->netdev;
  
#line 2781 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2784 
  if ((adapter->flags & 4U) != 0U) {
    
#line 2786 
    rctl = __er32(hw,256UL);
    
#line 2787 
    rctl &= 4294180863U;
    
#line 2788 
    __ew32(hw,256UL,rctl);
    
#line 2790 
    if ((unsigned int)adapter->mng_vlan_id != 65535U) {
      
#line 2791 
      e1000_vlan_rx_kill_vid(netdev,(unsigned short)129,(unsigned short)((int)adapter->mng_vlan_id));
      
#line 2793 
      adapter->mng_vlan_id = (unsigned short)65535U;
    }
    else ;
  }
  else ;
  
#line 2796 
  return;
}


#line 2802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_vlan_filter_enable(struct e1000_adapter *adapter)
{
  u32 rctl;
  
#line 2804 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2807 
  if ((adapter->flags & 4U) != 0U) {
    
#line 2809 
    rctl = __er32(hw,256UL);
    
#line 2810 
    rctl |= 262144U;
    
#line 2811 
    rctl &= 4294443007U;
    
#line 2812 
    __ew32(hw,256UL,rctl);
  }
  else ;
  
#line 2814 
  return;
}


#line 2820  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_vlan_strip_disable(struct e1000_adapter *adapter)
{
  u32 ctrl;
  
#line 2822 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2826 
  ctrl = __er32(hw,0UL);
  
#line 2827 
  ctrl &= 3221225471U;
  
#line 2828 
  __ew32(hw,0UL,ctrl);
  
#line 2829 
  return;
}


#line 2835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_vlan_strip_enable(struct e1000_adapter *adapter)
{
  u32 ctrl;
  
#line 2837 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2841 
  ctrl = __er32(hw,0UL);
  
#line 2842 
  ctrl |= 1073741824U;
  
#line 2843 
  __ew32(hw,0UL,ctrl);
  
#line 2844 
  return;
}


#line 2846  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_update_mng_vlan(struct e1000_adapter *adapter)
{
  
#line 2848 
  struct net_device *netdev = adapter->netdev;
  
#line 2849 
  u16 vid = adapter->hw.mng_cookie.vlan_id;
  
#line 2850 
  u16 old_vid = adapter->mng_vlan_id;
  
#line 2852 
  if (((int)adapter->hw.mng_cookie.status & 2) != 0) {
    
#line 2853 
    e1000_vlan_rx_add_vid(netdev,(unsigned short)129,(unsigned short)((int)vid));
    
#line 2854 
    adapter->mng_vlan_id = vid;
  }
  else ;
  
#line 2857 
  if ((unsigned int)old_vid != 65535U && (int)vid != (int)old_vid) 
#line 2858 
                                                                   e1000_vlan_rx_kill_vid(netdev,(unsigned short)129,(unsigned short)((int)old_vid)); else ;
  
#line 2859 
  return;
}


#line 2861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_restore_vlan(struct e1000_adapter *adapter)
{
  u16 vid;
  unsigned long tmp;
  unsigned long tmp_0;
  
#line 2865 
  e1000_vlan_rx_add_vid(adapter->netdev,(unsigned short)129,(unsigned short)0);
  
#line 2867 
  tmp = find_first_bit((unsigned long const *)(& adapter->active_vlans),4096UL);
  
#line 2867 
  vid = (unsigned short)tmp;
  
#line 2867 
  goto ldv_56884;
  ldv_56883: 
#line 2868 
  ;
  
#line 2868 
  e1000_vlan_rx_add_vid(adapter->netdev,(unsigned short)129,(unsigned short)((int)vid));
  
#line 2867 
  tmp_0 = find_next_bit((unsigned long const *)(& adapter->active_vlans),4096UL,(unsigned long)((int)vid + 1));
  
#line 2867 
  vid = (unsigned short)tmp_0;
  ldv_56884: 
#line 2868 
  ;
  
#line 2867 
  if ((unsigned int)vid <= 4095U) 
#line 2869 
                                  goto ldv_56883; else 
#line 2872 
                                                       goto ldv_56885;
  ldv_56885: 
#line 2873 
  ;
  
#line 2874 
  return;
}


#line 2871  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_init_manageability_pt(struct e1000_adapter *adapter)
{
  u32 manc;
  u32 manc2h;
  u32 mdef;
  u32 i;
  u32 j;
  
#line 2873 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2876 
  if ((adapter->flags & 1048576U) == 0U) 
#line 2877 
                                         goto return_label; else ;
  
#line 2879 
  manc = __er32(hw,22560UL);
  
#line 2885 
  manc |= 2097152U;
  
#line 2886 
  manc2h = __er32(hw,22624UL);
  
#line 2888 
  switch ((unsigned int)hw->mac.type) {
    u32 tmp;
    default: 
#line 2889 
    ;
    
#line 2890 
    manc2h |= 96U;
    
#line 2891 
    goto ldv_56896;
    case (unsigned int)3: 
#line 2892 
    ;
    case (unsigned int)4: 
#line 2893 
    ;
    
#line 2897 
    i = 0U;
    
#line 2897 
    j = 0U;
    
#line 2897 
    goto ldv_56901;
    ldv_56900: 
#line 2898 
    ;
    
#line 2898 
    mdef = __er32(hw,(unsigned long)((i + 5668U) * 4U));
    
#line 2901 
    if ((mdef & 4294964223U) != 0U) 
#line 2902 
                                    goto ldv_56899; else ;
    
#line 2905 
    if (mdef != 0U) 
#line 2906 
                    manc2h = (unsigned int)(1 << i) | manc2h; else ;
    
#line 2908 
    j |= mdef;
    ldv_56899: 
#line 2909 
    ;
    
#line 2897 
    i += 1U;
    ldv_56901: 
#line 2898 
    ;
    
#line 2897 
    if (i <= 7U) 
#line 2899 
                 goto ldv_56900; else 
#line 2902 
                                      goto ldv_56902;
    ldv_56902: 
#line 2903 
    ;
    
#line 2911 
    if (j == 3072U) 
#line 2912 
                    goto ldv_56896; else ;
    
#line 2915 
    i = 0U;
    
#line 2915 
    j = 0U;
    
#line 2915 
    goto ldv_56905;
    ldv_56904: 
#line 2916 
    ;
    
#line 2916 
    tmp = __er32(hw,(unsigned long)((i + 5668U) * 4U));
    
#line 2916 
    if (tmp == 0U) {
      
#line 2917 
      __ew32(hw,(unsigned long)((i + 5668U) * 4U),3072U);
      
#line 2919 
      manc2h |= 2U;
      
#line 2920 
      j += 1U;
      
#line 2921 
      goto ldv_56903;
    }
    else ;
    
#line 2915 
    i += 1U;
    ldv_56905: 
#line 2916 
    ;
    
#line 2915 
    if (i <= 7U) 
#line 2917 
                 goto ldv_56904; else 
#line 2920 
                                      goto ldv_56903;
    ldv_56903: 
#line 2921 
    ;
    
#line 2924 
    if (j == 0U) 
#line 2925 
                 netdev_warn((struct net_device const *)adapter->netdev,"Unable to create IPMI pass-through filter\n"); else ;
    
#line 2926 
    goto ldv_56896;
  }
  ldv_56896: 
#line 2929 
  ;
  
#line 2929 
  __ew32(hw,22624UL,manc2h);
  
#line 2930 
  __ew32(hw,22560UL,manc);
  return_label: 
#line 2931 
                return;
}


#line 2939  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_configure_tx(struct e1000_adapter *adapter)
{
  u64 tdba;
  u32 tdlen;
  u32 tctl;
  u32 tarc;
  u32 tmp_0;
  
#line 2941 
  struct e1000_hw *hw = & adapter->hw;
  
#line 2942 
  struct e1000_ring *tx_ring = adapter->tx_ring;
  
#line 2947 
  tdba = tx_ring->dma;
  
#line 2948 
  tdlen = tx_ring->count * 16U;
  
#line 2949 
  __ew32(hw,14336UL,(unsigned int)tdba);
  
#line 2950 
  __ew32(hw,14340UL,(unsigned int)(tdba >> 32));
  
#line 2951 
  __ew32(hw,14344UL,tdlen);
  
#line 2952 
  __ew32(hw,14352UL,0U);
  
#line 2953 
  __ew32(hw,14360UL,0U);
  
#line 2954 
  tx_ring->head = adapter->hw.hw_addr + 14352U;
  
#line 2955 
  tx_ring->tail = adapter->hw.hw_addr + 14360U;
  
#line 2958 
  __ew32(hw,14368UL,adapter->tx_int_delay);
  
#line 2960 
  __ew32(hw,14380UL,adapter->tx_abs_int_delay);
  
#line 2962 
  if ((adapter->flags2 & 64U) != 0U) {
    
#line 2963 
    u32 txdctl = __er32(hw,14376UL);
    
#line 2965 
    txdctl &= 4290822336U;
    
#line 2976 
    txdctl |= 21037343U;
    
#line 2977 
    __ew32(hw,14376UL,txdctl);
  }
  else ;
  
#line 2980 
  tmp_0 = __er32(hw,14376UL);
  
#line 2980 
  ;
  
#line 2980 
  __ew32(hw,14632UL,tmp_0);
  
#line 2983 
  tctl = __er32(hw,1024UL);
  
#line 2984 
  tctl &= 4294963215U;
  
#line 2985 
  tctl |= 16777464U;
  
#line 2988 
  if ((adapter->flags & 4194304U) != 0U) {
    
#line 2989 
    tarc = __er32(hw,14400UL);
    
#line 2994 
    tarc |= 2097152U;
    
#line 2995 
    __ew32(hw,14400UL,tarc);
  }
  else ;
  
#line 2999 
  if ((adapter->flags & 8388608U) != 0U) {
    
#line 3000 
    tarc = __er32(hw,14400UL);
    
#line 3001 
    tarc |= 1U;
    
#line 3002 
    __ew32(hw,14400UL,tarc);
    
#line 3003 
    tarc = __er32(hw,14656UL);
    
#line 3004 
    tarc |= 1U;
    
#line 3005 
    __ew32(hw,14656UL,tarc);
  }
  else ;
  
#line 3009 
  adapter->txd_cmd = 50331648U;
  
#line 3012 
  if (adapter->tx_int_delay != 0U) 
#line 3013 
                                   adapter->txd_cmd |= 2147483648U; else ;
  
#line 3016 
  adapter->txd_cmd |= 134217728U;
  
#line 3018 
  __ew32(hw,1024UL,tctl);
  
#line 3020 
  (*(hw->mac.ops.config_collision_dist))(hw);
  
#line 3023 
  if (hw->mac.type == (unsigned int)e1000_pch_spt) {
    u32 reg_val;
    
#line 3026 
    reg_val = __er32(hw,3880UL);
    
#line 3027 
    reg_val |= 65536U;
    
#line 3028 
    __ew32(hw,3880UL,reg_val);
    
#line 3030 
    reg_val = __er32(hw,14400UL);
    
#line 3031 
    reg_val |= 805306368U;
    
#line 3032 
    __ew32(hw,14400UL,reg_val);
  }
  else ;
  
#line 3034 
  return;
}


#line 3042  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_setup_rctl(struct e1000_adapter *adapter)
{
  u32 rctl;
  u32 rfctl;
  
#line 3044 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3046 
  u32 pages = 0U;
  
#line 3052 
  if (hw->mac.type > (unsigned int)e1000_pchlan) {
    s32 ret_val;
    
#line 3055 
    if ((adapter->netdev)->mtu > 1500U) 
#line 3056 
                                        ret_val = e1000_lv_jumbo_workaround_ich8lan(hw,(_Bool)1); else 
                                                                    
#line 3058 
                                                                    ret_val = e1000_lv_jumbo_workaround_ich8lan(hw,(_Bool)0);
    
#line 3060 
    if (ret_val != 0) {
      
#line 3061 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_setup_rctl", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c", .format = "failed to enable|disable jumbo frame workaround mode\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))3061U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 3061 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 3061 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"failed to enable|disable jumbo frame workaround mode\n"); else ;
    }
    else ;
  }
  else ;
  
#line 3065 
  rctl = __er32(hw,256UL);
  
#line 3066 
  rctl &= 4294955007U;
  
#line 3067 
  rctl = ((adapter->hw.mac.mc_filter_type << 12) | rctl) | 32770U;
  
#line 3072 
  rctl &= 4294967291U;
  
#line 3075 
  if ((adapter->netdev)->mtu <= 1500U) 
#line 3076 
                                       rctl &= 4294967263U; else 
#line 3078 
                                                                 rctl |= 32U;
  
#line 3084 
  if ((adapter->flags2 & 1U) != 0U) 
#line 3085 
                                    rctl |= 67108864U; else ;
  
#line 3088 
  if (hw->phy.type == (unsigned int)e1000_phy_82577 && (rctl & 32U) != 0U) {
    u16 phy_data;
    
#line 3091 
    e1e_rphy(hw,24666U,& phy_data);
    
#line 3092 
    phy_data = (unsigned short)((unsigned int)phy_data & 65528U);
    
#line 3093 
    phy_data = (unsigned short)((unsigned int)phy_data | 4U);
    
#line 3094 
    e1e_wphy(hw,24666U,(unsigned short)((int)phy_data));
    
#line 3096 
    e1e_rphy(hw,22U,& phy_data);
    
#line 3097 
    phy_data = (unsigned short)((unsigned int)phy_data & 4095U);
    
#line 3098 
    phy_data = (unsigned short)((unsigned int)phy_data | 16384U);
    
#line 3099 
    e1e_wphy(hw,16U,(unsigned short)10275);
    
#line 3100 
    e1e_wphy(hw,17U,(unsigned short)3);
    
#line 3101 
    e1e_wphy(hw,22U,(unsigned short)((int)phy_data));
  }
  else ;
  
#line 3105 
  rctl &= 4294770687U;
  
#line 3106 
  rctl |= 33554432U;
  
#line 3107 
  switch (adapter->rx_buffer_len) {
    case (u32)2048: 
#line 3108 
    ;
    default: 
#line 3109 
    ;
    
#line 3110 
    rctl = rctl;
    
#line 3111 
    rctl &= 4261412863U;
    
#line 3112 
    goto ldv_56930;
    case (u32)4096: 
#line 3113 
    ;
    
#line 3114 
    rctl |= 196608U;
    
#line 3115 
    goto ldv_56930;
    case (u32)8192: 
#line 3116 
    ;
    
#line 3117 
    rctl |= 131072U;
    
#line 3118 
    goto ldv_56930;
    case (u32)16384: 
#line 3119 
    ;
    
#line 3120 
    rctl |= 65536U;
    
#line 3121 
    goto ldv_56930;
  }
  ldv_56930: 
#line 3125 
  ;
  
#line 3125 
  rfctl = __er32(hw,20488UL);
  
#line 3126 
  rfctl |= 32768U;
  
#line 3127 
  __ew32(hw,20488UL,rfctl);
  
#line 3143 
  pages = ((adapter->netdev)->mtu >> 12) + (unsigned int)(((unsigned long)(adapter->netdev)->mtu & 4095UL) != 0UL);
  
#line 3144 
  if (pages <= 3U && (rctl & 32U) != 0U) 
#line 3145 
                                         adapter->rx_ps_pages = pages; else 
                                                                    
#line 3147 
                                                                    adapter->rx_ps_pages = 0U;
  
#line 3149 
  if (adapter->rx_ps_pages != 0U) {
    
#line 3150 
    u32 psrctl = 0U;
    
#line 3153 
    rctl |= 1024U;
    
#line 3155 
    psrctl = (unsigned int)((int)adapter->rx_ps_bsize0 >> 7) | psrctl;
    
#line 3157 
    switch (adapter->rx_ps_pages) {
      case (unsigned int)3: 
#line 3158 
      ;
      
#line 3159 
      psrctl |= 67108864U;
      case (unsigned int)2: 
#line 3161 
      ;
      
#line 3162 
      psrctl |= 262144U;
      case (unsigned int)1: 
#line 3164 
      ;
      
#line 3165 
      psrctl |= 1024U;
      
#line 3166 
      goto ldv_56938;
    }
    ldv_56938: 
#line 3169 
    ;
    
#line 3169 
    __ew32(hw,8560UL,psrctl);
  }
  else ;
  
#line 3173 
  if (((adapter->netdev)->features & 274877906944ULL) != 0ULL) {
    
#line 3177 
    rctl |= 8421380U;
    
#line 3181 
    rctl &= 4289986559U;
  }
  else ;
  
#line 3189 
  __ew32(hw,256UL,rctl);
  
#line 3191 
  adapter->flags &= 3221225471U;
  
#line 3192 
  return;
}


#line 3200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_configure_rx(struct e1000_adapter *adapter)
{
  u64 rdba;
  u32 rdlen;
  u32 rctl;
  u32 rxcsum;
  u32 ctrl_ext;
  
#line 3202 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3203 
  struct e1000_ring *rx_ring = adapter->rx_ring;
  
#line 3207 
  if (adapter->rx_ps_pages != 0U) {
    
#line 3209 
    rdlen = rx_ring->count * 32U;
    
#line 3211 
    adapter->clean_rx = & e1000_clean_rx_irq_ps;
    
#line 3212 
    adapter->alloc_rx_buf = & e1000_alloc_rx_buffers_ps;
  }
  else 
    
#line 3213 
    if ((adapter->netdev)->mtu > 1518U) {
      
#line 3214 
      rdlen = rx_ring->count * 16U;
      
#line 3215 
      adapter->clean_rx = & e1000_clean_jumbo_rx_irq;
      
#line 3216 
      adapter->alloc_rx_buf = & e1000_alloc_jumbo_rx_buffers;
    }
    else {
      
#line 3218 
      rdlen = rx_ring->count * 16U;
      
#line 3219 
      adapter->clean_rx = & e1000_clean_rx_irq;
      
#line 3220 
      adapter->alloc_rx_buf = & e1000_alloc_rx_buffers;
    }
  
#line 3224 
  rctl = __er32(hw,256UL);
  
#line 3225 
  if ((adapter->flags2 & 1024U) == 0U) 
#line 3226 
                                       __ew32(hw,256UL,rctl & 4294967293U); else ;
  
#line 3227 
  __er32(hw,8UL);
  
#line 3228 
  usleep_range(10000UL,20000UL);
  
#line 3230 
  if ((adapter->flags2 & 64U) != 0U) {
    
#line 3239 
    __ew32(hw,10280UL,17040416U);
    
#line 3240 
    __ew32(hw,10536UL,17040416U);
    
#line 3245 
    if (adapter->rx_int_delay == 0U) 
#line 3246 
                                     adapter->rx_int_delay = 32U; else ;
    
#line 3247 
    if (adapter->rx_abs_int_delay == 8U) 
#line 3248 
                                         adapter->rx_abs_int_delay = 32U; else ;
  }
  else ;
  
#line 3252 
  __ew32(hw,10272UL,adapter->rx_int_delay);
  
#line 3255 
  __ew32(hw,10284UL,adapter->rx_abs_int_delay);
  
#line 3256 
  if (adapter->itr_setting != 0U && adapter->itr != 0U) 
#line 3257 
                                                        e1000e_write_itr(adapter,adapter->itr); else ;
  
#line 3259 
  ctrl_ext = __er32(hw,24UL);
  
#line 3261 
  ctrl_ext |= 134217728U;
  
#line 3262 
  __ew32(hw,224UL,4294967295U);
  
#line 3263 
  __ew32(hw,24UL,ctrl_ext);
  
#line 3264 
  __er32(hw,8UL);
  
#line 3269 
  rdba = rx_ring->dma;
  
#line 3270 
  __ew32(hw,10240UL,(unsigned int)rdba);
  
#line 3271 
  __ew32(hw,10244UL,(unsigned int)(rdba >> 32));
  
#line 3272 
  __ew32(hw,10248UL,rdlen);
  
#line 3273 
  __ew32(hw,10256UL,0U);
  
#line 3274 
  __ew32(hw,10264UL,0U);
  
#line 3275 
  rx_ring->head = adapter->hw.hw_addr + 10256U;
  
#line 3276 
  rx_ring->tail = adapter->hw.hw_addr + 10264U;
  
#line 3279 
  rxcsum = __er32(hw,20480UL);
  
#line 3280 
  if (((adapter->netdev)->features & 17179869184ULL) != 0ULL) 
#line 3281 
                                                              rxcsum |= 512U; else 
                                                                    
#line 3283 
                                                                    rxcsum &= 4294966783U;
  
#line 3284 
  __ew32(hw,20480UL,rxcsum);
  
#line 3289 
  if ((adapter->netdev)->mtu > 1500U) {
    u32 tmp;
    
#line 3290 
    tmp = __er32(hw,4096UL);
    
#line 3290 
    u32 lat = (((tmp & 65535U) * 1024U - adapter->max_frame_size) * 8U) / 1000U;
    
#line 3294 
    if ((adapter->flags & 512U) != 0U) {
      
#line 3295 
      u32 rxdctl = __er32(hw,10280UL);
      
#line 3297 
      __ew32(hw,10280UL,rxdctl | 3U);
    }
    else ;
    
#line 3300 
    pm_qos_update_request(& adapter->pm_qos_req,(int)lat);
  }
  else 
#line 3302 
       pm_qos_update_request(& adapter->pm_qos_req,-1);
  
#line 3307 
  __ew32(hw,256UL,rctl);
  
#line 3308 
  return;
}


#line 3319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_write_mc_addr_list(struct net_device *netdev)
{
  int __retres;
  struct netdev_hw_addr *ha;
  u8 *mta_list;
  int i;
  struct netdev_hw_addr *tmp_1;
  int tmp_2;
  struct netdev_hw_addr *tmp_3;
  
#line 3321 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3322 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3327 
  if (netdev->mc.count == 0) {
    
#line 3329 
    (*(hw->mac.ops.update_mc_addr_list))(hw,(u8 *)0U,0U);
    
#line 3330 
    __retres = 0;
    
#line 3330 
    goto return_label;
  }
  else ;
  
#line 3333 
  mta_list = (u8 *)kzalloc((unsigned long)(netdev->mc.count * 6),32U);
  
#line 3334 
  if (mta_list == (u8 *)0U) {
    
#line 3335 
    __retres = -12;
    
#line 3335 
    goto return_label;
  }
  else ;
  
#line 3338 
  i = 0;
  {
    
#line 3339 
    struct list_head const *__mptr = (struct list_head const *)netdev->mc.list.next;
    
#line 3339 
    tmp_1 = (struct netdev_hw_addr *)__mptr;
  }
  
#line 3339 
  ha = tmp_1;
  
#line 3339 
  goto ldv_56964;
  ldv_56963: 
#line 3340 
  ;
  
#line 3340 
  ;
  
#line 3340 
  tmp_2 = i;
  
#line 3340 
  i += 1;
  
#line 3340 
  ;
  
#line 3340 
  memcpy((void *)(mta_list + tmp_2 * 6),(void const *)(& ha->addr),6UL);
  {
    
#line 3339 
    struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
    
#line 3339 
    tmp_3 = (struct netdev_hw_addr *)__mptr_0;
  }
  
#line 3339 
  ha = tmp_3;
  ldv_56964: 
#line 3341 
  ;
  
#line 3339 
  if (& ha->list != & netdev->mc.list) 
#line 3341 
                                       goto ldv_56963; else 
#line 3344 
                                                            goto ldv_56965;
  ldv_56965: 
#line 3345 
  ;
  
#line 3342 
  (*(hw->mac.ops.update_mc_addr_list))(hw,mta_list,(unsigned int)i);
  
#line 3343 
  kfree((void const *)mta_list);
  
#line 3345 
  __retres = netdev->mc.count;
  return_label: 
#line 3345 
                return __retres;
}


#line 3357  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_write_uc_addr_list(struct net_device *netdev)
{
  int __retres;
  unsigned int rar_entries;
  unsigned int tmp_3;
  unsigned int tmp_4;
  
#line 3359 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3360 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3362 
  int count = 0;
  
#line 3364 
  rar_entries = (*(hw->mac.ops.rar_get_count))(hw);
  
#line 3367 
  rar_entries -= 1U;
  
#line 3370 
  if ((adapter->flags & 2097152U) != 0U) 
#line 3371 
                                         rar_entries -= 1U; else ;
  
#line 3374 
  if ((unsigned int)netdev->uc.count > rar_entries) {
    
#line 3375 
    __retres = -12;
    
#line 3375 
    goto return_label;
  }
  else ;
  
#line 3377 
  if (netdev->uc.count != 0 && rar_entries != 0U) {
    struct netdev_hw_addr *ha;
    struct netdev_hw_addr *tmp_0;
    struct netdev_hw_addr *tmp_2;
    {
      
#line 3383 
      struct list_head const *__mptr = (struct list_head const *)netdev->uc.list.next;
      
#line 3383 
      tmp_0 = (struct netdev_hw_addr *)__mptr;
    }
    
#line 3383 
    ha = tmp_0;
    
#line 3383 
    goto ldv_56981;
    ldv_56980: 
#line 3384 
    ;
    {
      int rval;
      unsigned int tmp_1;
      
#line 3386 
      if (rar_entries == 0U) 
#line 3387 
                             goto ldv_56979; else ;
      
#line 3388 
      tmp_1 = rar_entries;
      
#line 3388 
      rar_entries -= 1U;
      
#line 3388 
      ;
      
#line 3388 
      ;
      
#line 3388 
      ;
      
#line 3388 
      rval = (*(hw->mac.ops.rar_set))(hw,(u8 *)(& ha->addr),tmp_1);
      
#line 3389 
      if (rval < 0) {
        
#line 3390 
        __retres = -12;
        
#line 3390 
        goto return_label;
      }
      else ;
      
#line 3391 
      count += 1;
    }
    {
      
#line 3383 
      struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
      
#line 3383 
      tmp_2 = (struct netdev_hw_addr *)__mptr_0;
    }
    
#line 3383 
    ha = tmp_2;
    ldv_56981: 
#line 3385 
    ;
    
#line 3383 
    if (& ha->list != & netdev->uc.list) 
#line 3385 
                                         goto ldv_56980; else 
#line 3388 
                                                              goto ldv_56979;
    ldv_56979: 
#line 3389 
    ;
  }
  else ;
  
#line 3396 
  goto ldv_56983;
  ldv_56982: 
#line 3397 
  ;
  
#line 3397 
  if (rar_entries <= 15U) 
#line 3397 
                          tmp_3 = rar_entries * 8U + 21508U; else 
#line 3397 
                                                                  tmp_3 = (rar_entries + 536870896U) * 8U + 21732U;
  
#line 3397 
  ;
  
#line 3397 
  __ew32(hw,(unsigned long)tmp_3,0U);
  
#line 3398 
  if (rar_entries <= 15U) 
#line 3398 
                          tmp_4 = (rar_entries + 2688U) * 8U; else 
#line 3398 
                                                                   tmp_4 = (rar_entries + 2700U) * 8U;
  
#line 3398 
  ;
  
#line 3398 
  __ew32(hw,(unsigned long)tmp_4,0U);
  
#line 3396 
  rar_entries -= 1U;
  ldv_56983: 
#line 3397 
  ;
  
#line 3396 
  if (rar_entries != 0U) 
#line 3398 
                         goto ldv_56982; else 
#line 3401 
                                              goto ldv_56984;
  ldv_56984: 
#line 3402 
  ;
  
#line 3400 
  __er32(hw,8UL);
  
#line 3402 
  __retres = count;
  return_label: 
#line 3402 
                return __retres;
}


#line 3414  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_set_rx_mode(struct net_device *netdev)
{
  u32 rctl;
  bool tmp_0;
  
#line 3416 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 3417 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3420 
  tmp_0 = pm_runtime_suspended(netdev->dev.parent);
  
#line 3420 
  if ((int)tmp_0 != 0) 
#line 3421 
                       goto return_label; else ;
  
#line 3424 
  rctl = __er32(hw,256UL);
  
#line 3427 
  rctl &= 4294967271U;
  
#line 3429 
  if ((netdev->flags & 256U) != 0U) {
    
#line 3430 
    rctl |= 24U;
    
#line 3432 
    e1000e_vlan_filter_disable(adapter);
  }
  else {
    int count;
    
#line 3436 
    if ((netdev->flags & 512U) != 0U) 
#line 3437 
                                      rctl |= 16U;
    else {
      
#line 3443 
      count = e1000e_write_mc_addr_list(netdev);
      
#line 3444 
      if (count < 0) 
#line 3445 
                     rctl |= 16U; else ;
    }
    
#line 3447 
    e1000e_vlan_filter_enable(adapter);
    
#line 3452 
    count = e1000e_write_uc_addr_list(netdev);
    
#line 3453 
    if (count < 0) 
#line 3454 
                   rctl |= 8U; else ;
  }
  
#line 3457 
  __ew32(hw,256UL,rctl);
  
#line 3459 
  if ((netdev->features & 256ULL) != 0ULL) 
#line 3460 
                                           e1000e_vlan_strip_enable(adapter); else 
                                                                    
#line 3462 
                                                                    e1000e_vlan_strip_disable(adapter);
  return_label: 
#line 3463 
                return;
}


#line 3465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_setup_rss_hash(struct e1000_adapter *adapter)
{
  u32 mrqc;
  u32 rxcsum;
  u32 rss_key[10U];
  int i;
  
#line 3467 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3472 
  netdev_rss_key_fill((void *)(& rss_key),40UL);
  
#line 3473 
  i = 0;
  
#line 3473 
  goto ldv_57001;
  ldv_57000: 
#line 3474 
  ;
  
#line 3474 
  __ew32(hw,(unsigned long)((i + 5920) * 4),rss_key[i]);
  
#line 3473 
  i += 1;
  ldv_57001: 
#line 3474 
  ;
  
#line 3473 
  if (i <= 9) 
#line 3475 
              goto ldv_57000; else 
#line 3478 
                                   goto ldv_57002;
  ldv_57002: 
#line 3479 
  ;
  
#line 3477 
  i = 0;
  
#line 3477 
  goto ldv_57004;
  ldv_57003: 
#line 3478 
  ;
  
#line 3478 
  __ew32(hw,(unsigned long)((i + 5888) * 4),0U);
  
#line 3477 
  i += 1;
  ldv_57004: 
#line 3478 
  ;
  
#line 3477 
  if (i <= 31) 
#line 3479 
               goto ldv_57003; else 
#line 3482 
                                    goto ldv_57005;
  ldv_57005: 
#line 3483 
  ;
  
#line 3483 
  rxcsum = __er32(hw,20480UL);
  
#line 3484 
  rxcsum |= 8192U;
  
#line 3486 
  __ew32(hw,20480UL,rxcsum);
  
#line 3488 
  mrqc = 3604480U;
  
#line 3494 
  __ew32(hw,22552UL,mrqc);
  
#line 3495 
  return;
}


#line 3505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
s32 e1000e_get_base_timinca(struct e1000_adapter *adapter, u32 *timinca)
{
  s32 __retres;
  u32 incvalue;
  u32 incperiod;
  u32 shift;
  
#line 3507 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3513 
  if ((unsigned int)hw->mac.type + 4294967285U <= 1U) {
    u32 tmp_0;
    
#line 3514 
    tmp_0 = __er32(hw,46612UL);
    
#line 3514 
    if ((tmp_0 & 16U) == 0U) {
      u32 tmp_1;
      
#line 3515 
      tmp_1 = __er32(hw,46624UL);
      
#line 3515 
      if ((tmp_1 & 16U) == 0U) {
        
#line 3517 
        u32 fextnvm7 = __er32(hw,228UL);
        
#line 3519 
        if ((fextnvm7 & 1U) == 0U) {
          
#line 3520 
          __ew32(hw,228UL,fextnvm7 | 1U);
          
#line 3521 
          __er32(hw,8UL);
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 3525 
  switch ((unsigned int)hw->mac.type) {
    u32 tmp_2;
    u32 tmp_3;
    case (unsigned int)10: 
#line 3526 
    ;
    case (unsigned int)11: 
#line 3527 
    ;
    
#line 3528 
    tmp_2 = __er32(hw,46624UL);
    
#line 3528 
    if ((tmp_2 & 32U) != 0U) {
      
#line 3530 
      incperiod = 3U;
      
#line 3531 
      incvalue = 125U;
      
#line 3532 
      shift = 17U;
      
#line 3533 
      adapter->cc.shift = shift + 2U;
    }
    else {
      
#line 3536 
      incperiod = 1U;
      
#line 3537 
      incvalue = 40U;
      
#line 3538 
      shift = 18U;
      
#line 3539 
      adapter->cc.shift = shift;
    }
    
#line 3541 
    goto ldv_57017;
    case (unsigned int)12: 
#line 3542 
    ;
    
#line 3543 
    tmp_3 = __er32(hw,46624UL);
    
#line 3543 
    if ((tmp_3 & 32U) != 0U) {
      
#line 3545 
      incperiod = 3U;
      
#line 3546 
      incvalue = 125U;
      
#line 3547 
      shift = 14U;
      
#line 3548 
      adapter->cc.shift = shift;
      
#line 3549 
      goto ldv_57017;
    }
    else ;
    
#line 3551 
    __retres = -22;
    
#line 3551 
    goto return_label;
    case (unsigned int)3: 
#line 3552 
    ;
    case (unsigned int)4: 
#line 3553 
    ;
    
#line 3555 
    incperiod = 1U;
    
#line 3556 
    incvalue = 40U;
    
#line 3557 
    shift = 18U;
    
#line 3558 
    adapter->cc.shift = shift;
    
#line 3559 
    goto ldv_57017;
    default: 
#line 3560 
    ;
    
#line 3561 
    __retres = -22;
    
#line 3561 
    goto return_label;
  }
  ldv_57017: 
#line 3564 
  ;
  
#line 3564 
  *timinca = (incperiod << 24) | ((incvalue << shift) & 16777215U);
  
#line 3567 
  __retres = 0;
  return_label: 
#line 3567 
                return __retres;
}


#line 3585  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_config_hwtstamp(struct e1000_adapter *adapter, struct hwtstamp_config *config)
{
  int __retres;
  u32 regval;
  s32 ret_val;
  u32 tmp;
  u32 tmp_0;
  ktime_t tmp_1;
  
#line 3588 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3589 
  u32 tsync_tx_ctl = 16U;
  
#line 3590 
  u32 tsync_rx_ctl = 16U;
  
#line 3591 
  u32 rxmtrl = 0U;
  
#line 3592 
  u16 rxudp = (unsigned short)0U;
  
#line 3593 
  bool is_l4 = (_Bool)0;
  
#line 3594 
  bool is_l2 = (_Bool)0;
  
#line 3598 
  if ((adapter->flags & 16384U) == 0U) {
    
#line 3599 
    __retres = -22;
    
#line 3599 
    goto return_label;
  }
  else ;
  
#line 3602 
  if (config->flags != 0) {
    
#line 3603 
    __retres = -22;
    
#line 3603 
    goto return_label;
  }
  else ;
  
#line 3605 
  switch (config->tx_type) {
    case 0: 
#line 3606 
    ;
    
#line 3607 
    tsync_tx_ctl = 0U;
    
#line 3608 
    goto ldv_57036;
    case 1: 
#line 3609 
    ;
    
#line 3610 
    goto ldv_57036;
    default: 
#line 3611 
    ;
    
#line 3612 
    __retres = -34;
    
#line 3612 
    goto return_label;
  }
  ldv_57036: 
#line 3615 
  ;
  
#line 3615 
  switch (config->rx_filter) {
    case 0: 
#line 3616 
    ;
    
#line 3617 
    tsync_rx_ctl = 0U;
    
#line 3618 
    goto ldv_57040;
    case 4: 
#line 3619 
    ;
    
#line 3620 
    tsync_rx_ctl |= 2U;
    
#line 3621 
    rxmtrl = 0U;
    
#line 3622 
    is_l4 = (_Bool)1;
    
#line 3623 
    goto ldv_57040;
    case 5: 
#line 3624 
    ;
    
#line 3625 
    tsync_rx_ctl |= 2U;
    
#line 3626 
    rxmtrl = 65536U;
    
#line 3627 
    is_l4 = (_Bool)1;
    
#line 3628 
    goto ldv_57040;
    case 10: 
#line 3629 
    ;
    
#line 3631 
    tsync_rx_ctl = tsync_rx_ctl;
    
#line 3632 
    rxmtrl = 0U;
    
#line 3633 
    is_l2 = (_Bool)1;
    
#line 3634 
    goto ldv_57040;
    case 11: 
#line 3635 
    ;
    
#line 3637 
    tsync_rx_ctl = tsync_rx_ctl;
    
#line 3638 
    rxmtrl = 16777216U;
    
#line 3639 
    is_l2 = (_Bool)1;
    
#line 3640 
    goto ldv_57040;
    case 7: 
#line 3641 
    ;
    case 13: 
#line 3645 
    ;
    
#line 3647 
    tsync_rx_ctl |= 4U;
    
#line 3648 
    rxmtrl = 0U;
    
#line 3649 
    is_l2 = (_Bool)1;
    
#line 3650 
    is_l4 = (_Bool)1;
    
#line 3651 
    goto ldv_57040;
    case 8: 
#line 3652 
    ;
    case 14: 
#line 3656 
    ;
    
#line 3658 
    tsync_rx_ctl |= 4U;
    
#line 3659 
    rxmtrl = 16777216U;
    
#line 3660 
    is_l2 = (_Bool)1;
    
#line 3661 
    is_l4 = (_Bool)1;
    
#line 3662 
    goto ldv_57040;
    case 6: 
#line 3663 
    ;
    case 9: 
#line 3664 
    ;
    case 12: 
#line 3668 
    ;
    
#line 3669 
    tsync_rx_ctl |= 10U;
    
#line 3670 
    config->rx_filter = 12;
    
#line 3671 
    is_l2 = (_Bool)1;
    
#line 3672 
    is_l4 = (_Bool)1;
    
#line 3673 
    goto ldv_57040;
    case 3: 
#line 3674 
    ;
    case 1: 
#line 3679 
    ;
    
#line 3680 
    is_l2 = (_Bool)1;
    
#line 3681 
    is_l4 = (_Bool)1;
    
#line 3682 
    tsync_rx_ctl |= 8U;
    
#line 3683 
    config->rx_filter = 1;
    
#line 3684 
    goto ldv_57040;
    default: 
#line 3685 
    ;
    
#line 3686 
    __retres = -34;
    
#line 3686 
    goto return_label;
  }
  ldv_57040: 
#line 3689 
  ;
  
#line 3689 
  adapter->hwtstamp_config = *config;
  
#line 3692 
  regval = __er32(hw,46612UL);
  
#line 3693 
  regval &= 4294967279U;
  
#line 3694 
  regval |= tsync_tx_ctl;
  
#line 3695 
  __ew32(hw,46612UL,regval);
  
#line 3696 
  tmp = __er32(hw,46612UL);
  
#line 3696 
  ;
  
#line 3696 
  if (((tmp ^ regval) & 16U) != 0U) {
    
#line 3698 
    netdev_err((struct net_device const *)adapter->netdev,"Timesync Tx Control register not set as expected\n");
    
#line 3699 
    __retres = -11;
    
#line 3699 
    goto return_label;
  }
  else ;
  
#line 3703 
  regval = __er32(hw,46624UL);
  
#line 3704 
  regval &= 4294967265U;
  
#line 3705 
  regval |= tsync_rx_ctl;
  
#line 3706 
  __ew32(hw,46624UL,regval);
  
#line 3707 
  tmp_0 = __er32(hw,46624UL);
  
#line 3707 
  ;
  
#line 3707 
  if (((tmp_0 ^ regval) & 30U) != 0U) {
    
#line 3711 
    netdev_err((struct net_device const *)adapter->netdev,"Timesync Rx Control register not set as expected\n");
    
#line 3712 
    __retres = -11;
    
#line 3712 
    goto return_label;
  }
  else ;
  
#line 3716 
  if ((int)is_l2 != 0) 
#line 3717 
                       rxmtrl |= 35063U; else ;
  
#line 3720 
  __ew32(hw,46644UL,rxmtrl);
  
#line 3723 
  if ((int)is_l4 != 0) {
    
#line 3724 
    rxudp = (unsigned short)319U;
    
#line 3725 
    __swab16s(& rxudp);
  }
  else ;
  
#line 3727 
  __ew32(hw,46648UL,(unsigned int)rxudp);
  
#line 3729 
  __er32(hw,8UL);
  
#line 3732 
  __er32(hw,46632UL);
  
#line 3733 
  __er32(hw,46620UL);
  
#line 3736 
  ret_val = e1000e_get_base_timinca(adapter,& regval);
  
#line 3737 
  if (ret_val != 0) {
    
#line 3738 
    __retres = ret_val;
    
#line 3738 
    goto return_label;
  }
  else ;
  
#line 3739 
  __ew32(hw,46600UL,regval);
  
#line 3743 
  tmp_1 = ktime_get_real();
  
#line 3742 
  ;
  
#line 3742 
  ;
  
#line 3742 
  timecounter_init(& adapter->tc,(struct cyclecounter const *)(& adapter->cc),(unsigned long long)tmp_1.tv64);
  
#line 3745 
  __retres = 0;
  return_label: 
#line 3745 
                return __retres;
}


#line 3752  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_configure(struct e1000_adapter *adapter)
{
  int tmp;
  
#line 3754 
  struct e1000_ring *rx_ring = adapter->rx_ring;
  
#line 3756 
  e1000e_set_rx_mode(adapter->netdev);
  
#line 3758 
  e1000_restore_vlan(adapter);
  
#line 3759 
  e1000_init_manageability_pt(adapter);
  
#line 3761 
  e1000_configure_tx(adapter);
  
#line 3763 
  if (((adapter->netdev)->features & 8589934592ULL) != 0ULL) 
#line 3764 
                                                             e1000e_setup_rss_hash(adapter); else ;
  
#line 3765 
  e1000_setup_rctl(adapter);
  
#line 3766 
  e1000_configure_rx(adapter);
  
#line 3767 
  tmp = e1000_desc_unused(rx_ring);
  
#line 3767 
  ;
  
#line 3767 
  (*(adapter->alloc_rx_buf))(rx_ring,tmp,208U);
  
#line 3768 
  return;
}


#line 3778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_power_up_phy(struct e1000_adapter *adapter)
{
  
#line 3780 
  if (adapter->hw.phy.ops.power_up != (void (*)(struct e1000_hw *))0) 
    
#line 3781 
    (*(adapter->hw.phy.ops.power_up))(& adapter->hw); else ;
  
#line 3783 
  (*(adapter->hw.mac.ops.setup_link))(& adapter->hw);
  
#line 3784 
  return;
}


#line 3792  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_power_down_phy(struct e1000_adapter *adapter)
{
  
#line 3794 
  if (adapter->hw.phy.ops.power_down != (void (*)(struct e1000_hw *))0) 
    
#line 3795 
    (*(adapter->hw.phy.ops.power_down))(& adapter->hw); else ;
  
#line 3796 
  return;
}


#line 3806  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_flush_tx_ring(struct e1000_adapter *adapter)
{
  u32 tdt;
  u32 tctl;
  
#line 3808 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3809 
  struct e1000_ring *tx_ring = adapter->tx_ring;
  
#line 3810 
  struct e1000_tx_desc *tx_desc = (struct e1000_tx_desc *)0;
  
#line 3811 
  u32 txd_lower = 33554432U;
  
#line 3812 
  u16 size = (unsigned short)512U;
  
#line 3814 
  tctl = __er32(hw,1024UL);
  
#line 3815 
  __ew32(hw,1024UL,tctl | 2U);
  
#line 3816 
  tdt = __er32(hw,14360UL);
  
#line 3817 
  if ((long)((unsigned int)tx_ring->next_to_use != tdt) != 0L) {
    
#line 3819 
    ldv_inline_asm();
    
#line 3817 
    ;
  }
  else ;
  
#line 3818 
  tx_desc = (struct e1000_tx_desc *)tx_ring->desc + (int)tx_ring->next_to_use;
  
#line 3819 
  tx_desc->buffer_addr = tx_ring->dma;
  
#line 3821 
  tx_desc->lower.data = (unsigned int)size | txd_lower;
  
#line 3822 
  tx_desc->upper.data = 0U;
  
#line 3823 
  ldv_inline_asm();
  
#line 3825 
  tx_ring->next_to_use = (u16)((int)tx_ring->next_to_use + 1);
  
#line 3826 
  if ((unsigned int)tx_ring->next_to_use == tx_ring->count) 
#line 3827 
                                                            tx_ring->next_to_use = (unsigned short)0U; else ;
  
#line 3828 
  __ew32(hw,14360UL,(unsigned int)tx_ring->next_to_use);
  
#line 3829 
  ldv_inline_asm();
  
#line 3830 
  usleep_range(200UL,250UL);
  
#line 3831 
  return;
}


#line 3838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_flush_rx_ring(struct e1000_adapter *adapter)
{
  u32 rctl;
  u32 rxdctl;
  
#line 3841 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3843 
  rctl = __er32(hw,256UL);
  
#line 3844 
  __ew32(hw,256UL,rctl & 4294967293U);
  
#line 3845 
  __er32(hw,8UL);
  
#line 3846 
  usleep_range(100UL,150UL);
  
#line 3848 
  rxdctl = __er32(hw,10280UL);
  
#line 3850 
  rxdctl &= 4294950912U;
  
#line 3855 
  rxdctl |= 16777503U;
  
#line 3857 
  __ew32(hw,10280UL,rxdctl);
  
#line 3859 
  __ew32(hw,256UL,rctl | 2U);
  
#line 3860 
  __er32(hw,8UL);
  
#line 3861 
  usleep_range(100UL,150UL);
  
#line 3862 
  __ew32(hw,256UL,rctl & 4294967293U);
  
#line 3863 
  return;
}


#line 3876  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_flush_desc_rings(struct e1000_adapter *adapter)
{
  u16 hang_state;
  u32 fext_nvm11;
  u32 tdlen;
  
#line 3880 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3883 
  fext_nvm11 = __er32(hw,23484UL);
  
#line 3884 
  fext_nvm11 |= 8192U;
  
#line 3885 
  __ew32(hw,23484UL,fext_nvm11);
  
#line 3887 
  tdlen = __er32(hw,14344UL);
  
#line 3888 
  pci_read_config_word((struct pci_dev const *)adapter->pdev,228,& hang_state);
  
#line 3890 
  if (((int)hang_state & 256) == 0 || tdlen == 0U) 
#line 3891 
                                                   goto return_label; else ;
  
#line 3892 
  e1000_flush_tx_ring(adapter);
  
#line 3894 
  pci_read_config_word((struct pci_dev const *)adapter->pdev,228,& hang_state);
  
#line 3896 
  if (((int)hang_state & 256) != 0) 
#line 3897 
                                    e1000_flush_rx_ring(adapter); else ;
  return_label: 
#line 3898 
                return;
}


#line 3908  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_reset(struct e1000_adapter *adapter)
{
  u32 tx_space;
  u32 min_tx_space;
  u32 min_rx_space;
  u16 hwm;
  u32 tmp_3;
  s32 tmp_4;
  int tmp_7;
  bool tmp_6;
  
#line 3910 
  struct e1000_mac_info *mac = & adapter->hw.mac;
  
#line 3911 
  struct e1000_fc_info *fc = & adapter->hw.fc;
  
#line 3912 
  struct e1000_hw *hw = & adapter->hw;
  
#line 3914 
  u32 pba = adapter->pba;
  
#line 3918 
  __ew32(hw,4096UL,pba);
  
#line 3920 
  if (adapter->max_frame_size > 1522U) {
    
#line 3928 
    pba = __er32(hw,4096UL);
    
#line 3930 
    tx_space = pba >> 16;
    
#line 3932 
    pba &= 65535U;
    
#line 3936 
    min_tx_space = (adapter->max_frame_size + 12U) * 2U;
    
#line 3938 
    min_tx_space = (min_tx_space + 1023U) & 4294966272U;
    
#line 3939 
    min_tx_space >>= 10;
    
#line 3941 
    min_rx_space = adapter->max_frame_size;
    
#line 3942 
    min_rx_space = (min_rx_space + 1023U) & 4294966272U;
    
#line 3943 
    min_rx_space >>= 10;
    
#line 3949 
    if (tx_space < min_tx_space && min_tx_space - tx_space < pba) {
      
#line 3951 
      pba = (tx_space - min_tx_space) + pba;
      
#line 3956 
      if (pba < min_rx_space) 
#line 3957 
                              pba = min_rx_space; else ;
    }
    else ;
    
#line 3960 
    __ew32(hw,4096UL,pba);
  }
  else ;
  
#line 3971 
  if ((adapter->flags & 262144U) != 0U) 
#line 3972 
                                        fc->pause_time = (unsigned short)65535U; else 
                                                                    
#line 3974 
                                                                    fc->pause_time = (unsigned short)1664U;
  
#line 3975 
  fc->send_xon = (_Bool)1;
  
#line 3976 
  fc->current_mode = fc->requested_mode;
  
#line 3978 
  switch ((unsigned int)hw->mac.type) {
    u32 tmp_0;
    case (unsigned int)7: 
#line 3979 
    ;
    case (unsigned int)8: 
#line 3980 
    ;
    
#line 3981 
    if ((adapter->netdev)->mtu > 1500U) {
      
#line 3982 
      pba = 14U;
      
#line 3983 
      __ew32(hw,4096UL,pba);
      
#line 3984 
      fc->high_water = 10240U;
      
#line 3985 
      fc->low_water = fc->high_water + 4294967288U;
      
#line 3986 
      goto ldv_57101;
    }
    else ;
    default: 
#line 3989 
    ;
    {
      u32 tmp;
      
#line 3990 
      u32 _min1 = (pba * 9216U) / 10U;
      
#line 3990 
      u32 _min2 = (pba << 10) - adapter->max_frame_size;
      
#line 3990 
      if (_min1 < _min2) 
#line 3990 
                         tmp = _min1; else 
#line 3990 
                                           tmp = _min2;
      
#line 3990 
      tmp_0 = tmp;
    }
    
#line 3990 
    hwm = (unsigned short)tmp_0;
    
#line 3993 
    fc->high_water = (unsigned int)hwm & 65528U;
    
#line 3994 
    fc->low_water = fc->high_water + 4294967288U;
    
#line 3995 
    goto ldv_57101;
    case (unsigned int)9: 
#line 3996 
    ;
    
#line 4000 
    if ((adapter->netdev)->mtu > 1500U) {
      
#line 4001 
      fc->high_water = 13568U;
      
#line 4002 
      fc->low_water = 5376U;
    }
    else {
      
#line 4004 
      fc->high_water = 20480U;
      
#line 4005 
      fc->low_water = 12288U;
    }
    
#line 4007 
    fc->refresh_time = (unsigned short)4096U;
    
#line 4008 
    goto ldv_57101;
    case (unsigned int)10: 
#line 4009 
    ;
    case (unsigned int)11: 
#line 4010 
    ;
    case (unsigned int)12: 
#line 4011 
    ;
    
#line 4012 
    fc->refresh_time = (unsigned short)1024U;
    
#line 4014 
    if ((adapter->netdev)->mtu <= 1500U) {
      
#line 4015 
      fc->high_water = 23584U;
      
#line 4016 
      fc->low_water = 20552U;
      
#line 4017 
      fc->pause_time = (unsigned short)1616U;
      
#line 4018 
      goto ldv_57101;
    }
    else ;
    
#line 4021 
    pba = 14U;
    
#line 4022 
    __ew32(hw,4096UL,pba);
    
#line 4023 
    fc->high_water = (pba * 9216U) / 10U & 65528U;
    
#line 4024 
    fc->low_water = (pba * 8192U) / 10U & 65528U;
    
#line 4025 
    goto ldv_57101;
  }
  ldv_57101: 
#line 4033 
  ;
  {
    u32 tmp_1;
    u32 tmp_2;
    
#line 4033 
    tmp_1 = __er32(hw,4096UL);
    
#line 4033 
    u32 __min1 = ((tmp_1 >> 16) << 10) + 4294967200U;
    
#line 4033 
    u32 __min2 = 24576U;
    
#line 4033 
    if (__min1 < __min2) 
#line 4033 
                         tmp_2 = __min1; else 
#line 4033 
                                              tmp_2 = __min2;
    
#line 4033 
    tmp_3 = tmp_2;
  }
  
#line 4033 
  adapter->tx_fifo_limit = tmp_3;
  
#line 4039 
  if ((adapter->itr_setting & 3U) != 0U) {
    
#line 4040 
    if (adapter->max_frame_size * 2U > pba << 10) {
      
#line 4041 
      if ((adapter->flags2 & 256U) == 0U) {
        
#line 4042 
        _dev_info((struct device const *)(& (adapter->pdev)->dev),"Interrupt Throttle Rate off\n");
        
#line 4044 
        adapter->flags2 |= 256U;
        
#line 4045 
        e1000e_write_itr(adapter,0U);
      }
      else ;
    }
    else 
      
#line 4047 
      if ((adapter->flags2 & 256U) != 0U) {
        
#line 4048 
        _dev_info((struct device const *)(& (adapter->pdev)->dev),"Interrupt Throttle Rate on\n");
        
#line 4050 
        adapter->flags2 &= 4294967039U;
        
#line 4051 
        adapter->itr = 20000U;
        
#line 4052 
        e1000e_write_itr(adapter,adapter->itr);
      }
      else ;
  }
  else ;
  
#line 4056 
  if (hw->mac.type == (unsigned int)e1000_pch_spt) 
#line 4057 
                                                   e1000_flush_desc_rings(adapter); else ;
  
#line 4059 
  (*(mac->ops.reset_hw))(hw);
  
#line 4064 
  if ((adapter->flags & 1U) != 0U) 
#line 4065 
                                   e1000e_get_hw_control(adapter); else ;
  
#line 4067 
  __ew32(hw,22528UL,0U);
  
#line 4069 
  tmp_4 = (*(mac->ops.init_hw))(hw);
  
#line 4069 
  if (tmp_4 != 0) 
#line 4070 
                  netdev_err((struct net_device const *)adapter->netdev,"Hardware Error\n"); else ;
  
#line 4072 
  e1000_update_mng_vlan(adapter);
  
#line 4075 
  __ew32(hw,56UL,33024U);
  
#line 4077 
  e1000e_reset_adaptive(hw);
  
#line 4080 
  e1000e_config_hwtstamp(adapter,& adapter->hwtstamp_config);
  
#line 4083 
  if ((adapter->flags2 & 32U) != 0U) {
    s32 ret_val;
    u16 adv_addr;
    unsigned int tmp_5;
    
#line 4087 
    switch ((unsigned int)hw->phy.type) {
      case (unsigned int)11: 
#line 4088 
      ;
      
#line 4089 
      adv_addr = (unsigned short)1038U;
      
#line 4090 
      goto ldv_57116;
      case (unsigned int)12: 
#line 4091 
      ;
      
#line 4092 
      adv_addr = (unsigned short)32769U;
      
#line 4093 
      goto ldv_57116;
      default: 
#line 4094 
      ;
      
#line 4095 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"Invalid PHY type setting EEE advertisement\n");
      
#line 4097 
      goto return_label;
    }
    ldv_57116: 
#line 4100 
    ;
    
#line 4100 
    ret_val = (*(hw->phy.ops.acquire))(hw);
    
#line 4101 
    if (ret_val != 0) {
      
#line 4102 
      dev_err((struct device const *)(& (adapter->pdev)->dev),"EEE advertisement - unable to acquire PHY\n");
      
#line 4104 
      goto return_label;
    }
    else ;
    
#line 4107 
    if (hw->dev_spec.ich8lan.eee_disable) 
#line 4107 
                                          tmp_5 = 0U; else 
#line 4107 
                                                           tmp_5 = (unsigned int)adapter->eee_advert;
    
#line 4107 
    ;
    
#line 4107 
    ;
    
#line 4107 
    e1000_write_emi_reg_locked(hw,(unsigned short)((int)adv_addr),(unsigned short)((int)tmp_5));
    
#line 4111 
    (*(hw->phy.ops.release))(hw);
  }
  else ;
  
#line 4114 
  tmp_6 = netif_running((struct net_device const *)adapter->netdev);
  
#line 4114 
  if (tmp_6) 
#line 4114 
             tmp_7 = 0; else 
#line 4114 
                             tmp_7 = 1;
  
#line 4114 
  if (tmp_7) {
    int tmp_8;
    
#line 4114 
    tmp_8 = constant_test_bit(0L,(unsigned long const volatile *)(& adapter->state));
    
#line 4114 
    if (tmp_8 == 0) 
#line 4116 
                    e1000_power_down_phy(adapter); else ;
  }
  else ;
  
#line 4118 
  e1000_get_phy_info(hw);
  
#line 4120 
  if ((adapter->flags & 2048U) != 0U && (adapter->flags & 67108864U) == 0U) {
    
#line 4122 
    u16 phy_data = (unsigned short)0U;
    
#line 4127 
    e1e_rphy(hw,25U,& phy_data);
    
#line 4128 
    phy_data = (unsigned short)((unsigned int)phy_data & 65534U);
    
#line 4129 
    e1e_wphy(hw,25U,(unsigned short)((int)phy_data));
  }
  else ;
  
#line 4131 
  if (hw->mac.type == (unsigned int)e1000_pch_spt && adapter->int_mode == 0) {
    u32 reg;
    
#line 4135 
    reg = __er32(hw,228UL);
    
#line 4136 
    reg |= 4U;
    
#line 4137 
    __ew32(hw,228UL,reg);
    
#line 4139 
    reg = __er32(hw,23476UL);
    
#line 4140 
    reg |= 6144U;
    
#line 4142 
    __ew32(hw,23476UL,reg);
  }
  else ;
  return_label: 
#line 4144 
                return;
}


#line 4147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
int e1000e_up(struct e1000_adapter *adapter)
{
  int __retres;
  
#line 4149 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4152 
  e1000_configure(adapter);
  
#line 4154 
  clear_bit(3L,(unsigned long volatile *)(& adapter->state));
  
#line 4156 
  if (adapter->msix_entries != (struct msix_entry *)0) 
#line 4157 
                                                       e1000_configure_msix(adapter); else ;
  
#line 4158 
  e1000_irq_enable(adapter);
  
#line 4160 
  netif_start_queue(adapter->netdev);
  
#line 4163 
  if (adapter->msix_entries != (struct msix_entry *)0) 
#line 4164 
                                                       __ew32(hw,200UL,16777220U); else 
                                                                    
#line 4166 
                                                                    __ew32(hw,200UL,4U);
  
#line 4168 
  __retres = 0;
  
#line 4168 
  return __retres;
}


#line 4171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_flush_descriptors(struct e1000_adapter *adapter)
{
  
#line 4173 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4175 
  if ((adapter->flags2 & 64U) == 0U) 
#line 4176 
                                     goto return_label; else ;
  
#line 4179 
  __ew32(hw,14368UL,adapter->tx_int_delay | 2147483648U);
  
#line 4180 
  __ew32(hw,10272UL,adapter->rx_int_delay | 2147483648U);
  
#line 4183 
  __er32(hw,8UL);
  
#line 4188 
  __ew32(hw,14368UL,adapter->tx_int_delay | 2147483648U);
  
#line 4189 
  __ew32(hw,10272UL,adapter->rx_int_delay | 2147483648U);
  
#line 4192 
  __er32(hw,8UL);
  return_label: 
#line 4193 
                return;
}


#line 4195 
static void e1000e_update_stats(struct e1000_adapter *adapter);


#line 4202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_down(struct e1000_adapter *adapter, bool reset)
{
  u32 tctl;
  u32 rctl;
  int tmp_0;
  
#line 4204 
  struct net_device *netdev = adapter->netdev;
  
#line 4205 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4211 
  clear_bit(3L,(unsigned long volatile *)(& adapter->state));
  
#line 4213 
  netif_carrier_off(netdev);
  
#line 4216 
  rctl = __er32(hw,256UL);
  
#line 4217 
  if ((adapter->flags2 & 1024U) == 0U) 
#line 4218 
                                       __ew32(hw,256UL,rctl & 4294967293U); else ;
  
#line 4221 
  netif_start_queue(netdev);
  
#line 4224 
  tctl = __er32(hw,1024UL);
  
#line 4225 
  tctl &= 4294967293U;
  
#line 4226 
  __ew32(hw,1024UL,tctl);
  
#line 4229 
  __er32(hw,8UL);
  
#line 4230 
  usleep_range(10000UL,20000UL);
  
#line 4232 
  e1000_irq_disable(adapter);
  
#line 4234 
  napi_synchronize((struct napi_struct const *)(& adapter->napi));
  
#line 4236 
  ldv_del_timer_sync_95(& adapter->watchdog_timer);
  
#line 4237 
  ldv_del_timer_sync_96(& adapter->phy_info_timer);
  
#line 4239 
  ldv_spin_lock_97(& adapter->stats64_lock);
  
#line 4240 
  e1000e_update_stats(adapter);
  
#line 4241 
  ldv_spin_unlock_98(& adapter->stats64_lock);
  
#line 4243 
  e1000e_flush_descriptors(adapter);
  
#line 4245 
  adapter->link_speed = (unsigned short)0U;
  
#line 4246 
  adapter->link_duplex = (unsigned short)0U;
  
#line 4249 
  if (hw->mac.type > (unsigned int)e1000_pchlan && (adapter->netdev)->mtu > 1500U) {
    s32 tmp;
    
#line 4250 
    tmp = e1000_lv_jumbo_workaround_ich8lan(hw,(_Bool)0);
    
#line 4250 
    if (tmp != 0) {
      
#line 4252 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_down", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c", .format = "failed to disable jumbo frame workaround mode\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))4252U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 4252 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 4252 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"failed to disable jumbo frame workaround mode\n"); else ;
    }
    else ;
  }
  else ;
  
#line 4254 
  tmp_0 = pci_channel_offline(adapter->pdev);
  
#line 4254 
  if (tmp_0 == 0) {
    
#line 4255 
    if ((int)reset != 0) 
#line 4256 
                         e1000e_reset(adapter);
    else 
      
#line 4257 
      if (hw->mac.type == (unsigned int)e1000_pch_spt) 
#line 4258 
                                                       e1000_flush_desc_rings(adapter); else ;
  }
  else ;
  
#line 4260 
  e1000_clean_tx_ring(adapter->tx_ring);
  
#line 4261 
  e1000_clean_rx_ring(adapter->rx_ring);
  
#line 4262 
  return;
}


#line 4264  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
void e1000e_reinit_locked(struct e1000_adapter *adapter)
{
  int tmp;
  
#line 4266 
  __might_sleep("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c",4266,0);
  
#line 4267 
  goto ldv_57145;
  ldv_57144: 
#line 4268 
  ;
  
#line 4268 
  usleep_range(1000UL,2000UL);
  ldv_57145: 
#line 4269 
  ;
  
#line 4267 
  tmp = test_and_set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 4267 
  if (tmp != 0) 
#line 4269 
                goto ldv_57144; else 
#line 4272 
                                     goto ldv_57146;
  ldv_57146: 
#line 4273 
  ;
  
#line 4269 
  e1000e_down(adapter,(_Bool)1);
  
#line 4270 
  e1000e_up(adapter);
  
#line 4271 
  clear_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 4272 
  return;
}


#line 4278  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static cycle_t e1000e_cyclecounter_read(struct cyclecounter const *cc)
{
  struct e1000_adapter *tmp;
  u32 systimel_1;
  u32 systimel_2;
  u32 systimeh;
  cycle_t systim;
  cycle_t systim_next;
  {
    
#line 4280 
    struct cyclecounter const *__mptr = cc;
    
#line 4280 
    tmp = (struct e1000_adapter *)__mptr + 18446744073709538712U;
  }
  
#line 4280 
  struct e1000_adapter *adapter = tmp;
  
#line 4282 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4291 
  systimel_1 = __er32(hw,46592UL);
  
#line 4292 
  systimeh = __er32(hw,46596UL);
  
#line 4293 
  systimel_2 = __er32(hw,46592UL);
  
#line 4295 
  if (systimel_1 < systimel_2) {
    
#line 4296 
    systim = (unsigned long long)systimel_1;
    
#line 4297 
    systim = ((unsigned long long)systimeh << 32) | systim;
  }
  else {
    
#line 4302 
    systimeh = __er32(hw,46596UL);
    
#line 4303 
    systim = (unsigned long long)systimel_2;
    
#line 4304 
    systim = ((unsigned long long)systimeh << 32) | systim;
  }
  
#line 4307 
  if ((unsigned int)hw->mac.type + 4294967293U <= 1U) {
    u64 incvalue;
    u64 time_delta;
    u64 rem;
    u64 temp;
    int i;
    u32 tmp_0;
    u32 tmp_1;
    u32 tmp_2;
    uint32_t tmp_3;
    
#line 4315 
    tmp_0 = __er32(hw,46600UL);
    
#line 4315 
    incvalue = (unsigned long long)tmp_0 & 16777215ULL;
    
#line 4316 
    i = 0;
    
#line 4316 
    goto ldv_57169;
    ldv_57168: 
#line 4317 
    ;
    
#line 4318 
    tmp_1 = __er32(hw,46592UL);
    
#line 4318 
    systim_next = (unsigned long long)tmp_1;
    
#line 4319 
    tmp_2 = __er32(hw,46596UL);
    
#line 4319 
    systim_next = ((unsigned long long)tmp_2 << 32) | systim_next;
    
#line 4321 
    time_delta = systim_next - systim;
    
#line 4322 
    temp = time_delta;
    {
      uint32_t __rem;
      
#line 4323 
      uint32_t __base = (unsigned int)incvalue;
      
#line 4323 
      __rem = (unsigned int)(temp % (unsigned long long)__base);
      
#line 4323 
      temp /= (unsigned long long)__base;
      
#line 4323 
      tmp_3 = __rem;
    }
    
#line 4323 
    rem = (unsigned long long)tmp_3;
    
#line 4325 
    systim = systim_next;
    
#line 4327 
    if (time_delta <= 34359738367ULL && rem == 0ULL) 
#line 4329 
                                                     goto ldv_57167; else ;
    
#line 4316 
    i += 1;
    ldv_57169: 
#line 4317 
    ;
    
#line 4316 
    if (i <= 49) 
#line 4318 
                 goto ldv_57168; else 
#line 4321 
                                      goto ldv_57167;
    ldv_57167: 
#line 4322 
    ;
  }
  else ;
  
#line 4332 
  return systim;
}


#line 4343  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_sw_init(struct e1000_adapter *adapter)
{
  int __retres;
  int tmp;
  
#line 4345 
  struct net_device *netdev = adapter->netdev;
  
#line 4347 
  adapter->rx_buffer_len = 1522U;
  
#line 4348 
  adapter->rx_ps_bsize0 = (unsigned short)128U;
  
#line 4349 
  adapter->max_frame_size = netdev->mtu + 22U;
  
#line 4350 
  adapter->min_frame_size = 64U;
  
#line 4351 
  adapter->tx_ring_count = (unsigned short)256U;
  
#line 4352 
  adapter->rx_ring_count = (unsigned short)256U;
  
#line 4354 
  spinlock_check(& adapter->stats64_lock);
  {
    struct lock_class_key __key;
    
#line 4354 
    __raw_spin_lock_init(& adapter->stats64_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->stats64_lock)->rlock",& __key);
  }
  
#line 4356 
  e1000e_set_interrupt_capability(adapter);
  
#line 4358 
  tmp = e1000_alloc_queues(adapter);
  
#line 4358 
  if (tmp != 0) {
    
#line 4359 
    __retres = -12;
    
#line 4359 
    goto return_label;
  }
  else ;
  
#line 4362 
  if ((adapter->flags & 16384U) != 0U) {
    
#line 4363 
    adapter->cc.read = & e1000e_cyclecounter_read;
    
#line 4364 
    adapter->cc.mask = 18446744073709551615ULL;
    
#line 4365 
    adapter->cc.mult = 1U;
    
#line 4368 
    spinlock_check(& adapter->systim_lock);
    {
      struct lock_class_key __key_0;
      
#line 4368 
      __raw_spin_lock_init(& adapter->systim_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->systim_lock)->rlock",& __key_0);
    }
    {
      struct lock_class_key __key_1;
      
#line 4369 
      __init_work(& adapter->tx_hwtstamp_work,0);
      
#line 4369 
      atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL_0};
      
#line 4369 
      adapter->tx_hwtstamp_work.data = __constr_expr_37;
      
#line 4369 
      lockdep_init_map(& adapter->tx_hwtstamp_work.lockdep_map,"(&adapter->tx_hwtstamp_work)",& __key_1,0);
      
#line 4369 
      INIT_LIST_HEAD(& adapter->tx_hwtstamp_work.entry);
      
#line 4369 
      adapter->tx_hwtstamp_work.func = & e1000e_tx_hwtstamp_work;
    }
  }
  else ;
  
#line 4373 
  e1000_irq_disable(adapter);
  
#line 4375 
  clear_bit(3L,(unsigned long volatile *)(& adapter->state));
  
#line 4376 
  __retres = 0;
  return_label: 
#line 4376 
                return __retres;
}


#line 4384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static irqreturn_t e1000_intr_msi_test(int irq, void *data)
{
  irqreturn_t __retres;
  
#line 4386 
  struct net_device *netdev = (struct net_device *)data;
  
#line 4387 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 4388 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4389 
  u32 icr = __er32(hw,192UL);
  {
    
#line 4391 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_intr_msi_test", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c", .format = "icr is %08X\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))4391U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 4391 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 4391 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"icr is %08X\n",icr); else ;
  }
  
#line 4392 
  if ((icr & 8U) != 0U) {
    
#line 4393 
    adapter->flags &= 2147483647U;
    
#line 4394 
    ldv_inline_asm();
  }
  else ;
  
#line 4400 
  __retres = IRQ_HANDLED;
  
#line 4400 
  return __retres;
}


#line 4409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_test_msi_interrupt(struct e1000_adapter *adapter)
{
  int err;
  int tmp;
  
#line 4411 
  struct net_device *netdev = adapter->netdev;
  
#line 4412 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4417 
  __er32(hw,192UL);
  
#line 4420 
  e1000_free_irq(adapter);
  
#line 4421 
  e1000e_reset_interrupt_capability(adapter);
  
#line 4426 
  adapter->flags |= 2147483648U;
  
#line 4428 
  err = pci_enable_msi_exact(adapter->pdev,1);
  
#line 4429 
  if (err != 0) 
#line 4430 
                goto msi_test_failed; else ;
  
#line 4432 
  err = ldv_request_irq_99((adapter->pdev)->irq,& e1000_intr_msi_test,0UL,(char const *)(& netdev->name),(void *)netdev);
  
#line 4434 
  if (err != 0) {
    
#line 4435 
    pci_disable_msi(adapter->pdev);
    
#line 4436 
    goto msi_test_failed;
  }
  else ;
  
#line 4438 
  ldv_inline_asm();
  
#line 4444 
  e1000_irq_enable(adapter);
  
#line 4447 
  __ew32(hw,200UL,8U);
  
#line 4448 
  __er32(hw,8UL);
  
#line 4449 
  msleep(100U);
  
#line 4451 
  e1000_irq_disable(adapter);
  
#line 4452 
  ldv_inline_asm();
  
#line 4455 
  if (adapter->flags < (unsigned int)0) {
    
#line 4456 
    adapter->int_mode = 0;
    
#line 4457 
    netdev_info((struct net_device const *)adapter->netdev,"MSI interrupt test failed, using legacy interrupt.\n");
  }
  else {
    
#line 4459 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_test_msi_interrupt", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c", .format = "MSI interrupt test succeeded!\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))4459U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 4459 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 4459 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"MSI interrupt test succeeded!\n"); else ;
  }
  
#line 4462 
  ldv_free_irq_100((adapter->pdev)->irq,(void *)netdev);
  
#line 4463 
  pci_disable_msi(adapter->pdev);
  msi_test_failed: 
#line 4465 
  ;
  
#line 4466 
  e1000e_set_interrupt_capability(adapter);
  
#line 4467 
  tmp = e1000_request_irq(adapter);
  
#line 4467 
  return tmp;
}


#line 4476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_test_msi(struct e1000_adapter *adapter)
{
  int __retres;
  int err;
  u16 pci_cmd;
  
#line 4481 
  if ((adapter->flags & 134217728U) == 0U) {
    
#line 4482 
    __retres = 0;
    
#line 4482 
    goto return_label;
  }
  else ;
  
#line 4485 
  pci_read_config_word((struct pci_dev const *)adapter->pdev,4,& pci_cmd);
  
#line 4486 
  if (((int)pci_cmd & 256) != 0) 
#line 4487 
                                 pci_write_config_word((struct pci_dev const *)adapter->pdev,4,(unsigned short)((int)pci_cmd & 65279)); else ;
  
#line 4490 
  err = e1000_test_msi_interrupt(adapter);
  
#line 4493 
  if (((int)pci_cmd & 256) != 0) {
    
#line 4494 
    pci_read_config_word((struct pci_dev const *)adapter->pdev,4,& pci_cmd);
    
#line 4495 
    pci_cmd = (unsigned short)((unsigned int)pci_cmd | 256U);
    
#line 4496 
    pci_write_config_word((struct pci_dev const *)adapter->pdev,4,(unsigned short)((int)pci_cmd));
  }
  else ;
  
#line 4499 
  __retres = err;
  return_label: 
#line 4499 
                return __retres;
}


#line 4514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_open(struct net_device *netdev)
{
  int __retres;
  int err;
  int tmp_0;
  
#line 4516 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 4517 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4518 
  struct pci_dev *pdev = adapter->pdev;
  
#line 4522 
  tmp_0 = constant_test_bit(0L,(unsigned long const volatile *)(& adapter->state));
  
#line 4522 
  if (tmp_0 != 0) {
    
#line 4523 
    __retres = -16;
    
#line 4523 
    goto return_label;
  }
  else ;
  
#line 4525 
  pm_runtime_get_sync(& pdev->dev);
  
#line 4527 
  netif_carrier_off(netdev);
  
#line 4530 
  err = e1000e_setup_tx_resources(adapter->tx_ring);
  
#line 4531 
  if (err != 0) 
#line 4532 
                goto err_setup_tx; else ;
  
#line 4535 
  err = e1000e_setup_rx_resources(adapter->rx_ring);
  
#line 4536 
  if (err != 0) 
#line 4537 
                goto err_setup_rx; else ;
  
#line 4542 
  if ((adapter->flags & 1U) != 0U) {
    
#line 4543 
    e1000e_get_hw_control(adapter);
    
#line 4544 
    e1000e_reset(adapter);
  }
  else ;
  
#line 4547 
  e1000e_power_up_phy(adapter);
  
#line 4549 
  adapter->mng_vlan_id = (unsigned short)65535U;
  
#line 4550 
  if (((int)adapter->hw.mng_cookie.status & 2) != 0) 
#line 4551 
                                                     e1000_update_mng_vlan(adapter); else ;
  
#line 4554 
  pm_qos_add_request(& adapter->pm_qos_req,1,-1);
  
#line 4562 
  e1000_configure(adapter);
  
#line 4564 
  err = e1000_request_irq(adapter);
  
#line 4565 
  if (err != 0) 
#line 4566 
                goto err_req_irq; else ;
  
#line 4572 
  if (adapter->int_mode != 0) {
    
#line 4573 
    err = e1000_test_msi(adapter);
    
#line 4574 
    if (err != 0) {
      
#line 4575 
      netdev_err((struct net_device const *)adapter->netdev,"Interrupt allocation failed\n");
      
#line 4576 
      goto err_req_irq;
    }
    else ;
  }
  else ;
  
#line 4581 
  clear_bit(3L,(unsigned long volatile *)(& adapter->state));
  
#line 4583 
  napi_enable(& adapter->napi);
  
#line 4585 
  e1000_irq_enable(adapter);
  
#line 4587 
  adapter->tx_hang_recheck = (_Bool)0;
  
#line 4588 
  netif_start_queue(netdev);
  
#line 4590 
  hw->mac.get_link_status = (_Bool)1;
  
#line 4591 
  pm_runtime_put(& pdev->dev);
  
#line 4594 
  if (adapter->msix_entries != (struct msix_entry *)0) 
#line 4595 
                                                       __ew32(hw,200UL,16777220U); else 
                                                                    
#line 4597 
                                                                    __ew32(hw,200UL,4U);
  
#line 4599 
  __retres = 0;
  
#line 4599 
  goto return_label;
  err_req_irq: 
#line 4601 
  ;
  
#line 4602 
  e1000e_release_hw_control(adapter);
  
#line 4603 
  e1000_power_down_phy(adapter);
  
#line 4604 
  e1000e_free_rx_resources(adapter->rx_ring);
  err_setup_rx: 
#line 4605 
  ;
  
#line 4606 
  e1000e_free_tx_resources(adapter->tx_ring);
  err_setup_tx: 
#line 4607 
  ;
  
#line 4608 
  e1000e_reset(adapter);
  
#line 4609 
  pm_runtime_put_sync(& pdev->dev);
  
#line 4611 
  __retres = err;
  return_label: 
#line 4611 
                return __retres;
}


#line 4625  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_close(struct net_device *netdev)
{
  int __retres;
  int tmp_0;
  int tmp_3_0;
  
#line 4627 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 4628 
  struct pci_dev *pdev = adapter->pdev;
  
#line 4629 
  int count = 25;
  
#line 4631 
  goto ldv_57219;
  ldv_57218: 
#line 4632 
  ;
  
#line 4632 
  usleep_range(10000UL,20000UL);
  ldv_57219: 
#line 4633 
  ;
  
#line 4631 
  tmp_0 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
  
#line 4631 
  if (tmp_0 != 0) {
    int tmp_1;
    
#line 4631 
    tmp_1 = count;
    
#line 4631 
    count -= 1;
    
#line 4631 
    ;
    
#line 4631 
    if (tmp_1 != 0) 
#line 4633 
                    goto ldv_57218; else 
#line 4636 
                                         goto ldv_57220;
  }
  else 
#line 4636 
       goto ldv_57220;
  ldv_57220: 
#line 4637 
  ;
  {
    int tmp_2;
    
#line 4634 
    tmp_2 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
    
#line 4634 
    int __ret_warn_on = tmp_2 != 0;
    
#line 4634 
    if ((long)(__ret_warn_on != 0) != 0L) 
#line 4634 
                                          warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c",4634); else ;
    
#line 4634 
    long tmp_3 = (long)(__ret_warn_on != 0);
  }
  
#line 4636 
  pm_runtime_get_sync(& pdev->dev);
  
#line 4638 
  tmp_3_0 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
  
#line 4638 
  if (tmp_3_0 == 0) {
    
#line 4639 
    e1000e_down(adapter,(_Bool)1);
    
#line 4640 
    e1000_free_irq(adapter);
    
#line 4643 
    printk("\001",(char *)(& (adapter->netdev)->name));
  }
  else ;
  
#line 4646 
  napi_disable(& adapter->napi);
  
#line 4648 
  e1000e_free_tx_resources(adapter->tx_ring);
  
#line 4649 
  e1000e_free_rx_resources(adapter->rx_ring);
  
#line 4654 
  if (((int)adapter->hw.mng_cookie.status & 2) != 0) 
#line 4655 
                                                     e1000_vlan_rx_kill_vid(netdev,(unsigned short)129,(unsigned short)((int)adapter->mng_vlan_id)); else ;
  
#line 4661 
  if ((adapter->flags & 1U) != 0U) {
    int tmp_4;
    
#line 4661 
    tmp_4 = constant_test_bit(0L,(unsigned long const volatile *)(& adapter->state));
    
#line 4661 
    if (tmp_4 == 0) 
#line 4663 
                    e1000e_release_hw_control(adapter); else ;
  }
  else ;
  
#line 4665 
  pm_qos_remove_request(& adapter->pm_qos_req);
  
#line 4667 
  pm_runtime_put_sync(& pdev->dev);
  
#line 4669 
  __retres = 0;
  
#line 4669 
  return __retres;
}


#line 4679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_set_mac(struct net_device *netdev, void *p)
{
  int __retres;
  int tmp_1;
  bool tmp_0;
  
#line 4681 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 4682 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4683 
  struct sockaddr *addr = (struct sockaddr *)p;
  
#line 4685 
  tmp_0 = is_valid_ether_addr((u8 const *)(& addr->sa_data));
  
#line 4685 
  if (tmp_0) 
#line 4685 
             tmp_1 = 0; else 
#line 4685 
                             tmp_1 = 1;
  
#line 4685 
  if (tmp_1) {
    
#line 4686 
    __retres = -99;
    
#line 4686 
    goto return_label;
  }
  else ;
  
#line 4688 
  memcpy((void *)netdev->dev_addr,(void const *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  
#line 4689 
  memcpy((void *)(& adapter->hw.mac.addr),(void const *)(& addr->sa_data),(unsigned long)netdev->addr_len);
  
#line 4691 
  (*(hw->mac.ops.rar_set))(& adapter->hw,(u8 *)(& adapter->hw.mac.addr),0U);
  
#line 4693 
  if ((adapter->flags & 2097152U) != 0U) {
    
#line 4695 
    e1000e_set_laa_state_82571(& adapter->hw,(_Bool)1);
    
#line 4704 
    (*(hw->mac.ops.rar_set))(& adapter->hw,(u8 *)(& adapter->hw.mac.addr),(unsigned int)((int)adapter->hw.mac.rar_entry_count + -1));
  }
  else ;
  
#line 4708 
  __retres = 0;
  return_label: 
#line 4708 
                return __retres;
}


#line 4719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_update_phy_task(struct work_struct *work)
{
  struct e1000_adapter *tmp;
  int tmp_0;
  {
    
#line 4721 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 4721 
    tmp = (struct e1000_adapter *)__mptr + 18446744073709539288U;
  }
  
#line 4721 
  struct e1000_adapter *adapter = tmp;
  
#line 4724 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4726 
  tmp_0 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
  
#line 4726 
  if (tmp_0 != 0) 
#line 4727 
                  goto return_label; else ;
  
#line 4729 
  e1000_get_phy_info(hw);
  
#line 4732 
  if (hw->phy.type > (unsigned int)e1000_phy_82577) 
#line 4733 
                                                    e1000_set_eee_pchlan(hw); else ;
  return_label: 
#line 4734 
                return;
}


#line 4743  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_update_phy_info(unsigned long data)
{
  int tmp;
  
#line 4745 
  struct e1000_adapter *adapter = (struct e1000_adapter *)data;
  
#line 4747 
  tmp = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
  
#line 4747 
  if (tmp != 0) 
#line 4748 
                goto return_label; else ;
  
#line 4750 
  ldv_schedule_work_101(& adapter->update_phy_task);
  return_label: 
#line 4751 
                return;
}


#line 4759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_update_phy_stats(struct e1000_adapter *adapter)
{
  s32 ret_val;
  u16 phy_data;
  
#line 4761 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4765 
  ret_val = (*(hw->phy.ops.acquire))(hw);
  
#line 4766 
  if (ret_val != 0) 
#line 4767 
                    goto return_label; else ;
  
#line 4772 
  hw->phy.addr = 1U;
  
#line 4773 
  ret_val = e1000e_read_phy_reg_mdic(hw,31U,& phy_data);
  
#line 4775 
  if (ret_val != 0) 
#line 4776 
                    goto release; else ;
  
#line 4777 
  if ((unsigned int)phy_data != 24896U) {
    
#line 4778 
    ret_val = (*(hw->phy.ops.set_page))(hw,(unsigned short)24896);
    
#line 4780 
    if (ret_val != 0) 
#line 4781 
                      goto release; else ;
  }
  else ;
  
#line 4785 
  (*(hw->phy.ops.read_reg_page))(hw,24912U,& phy_data);
  
#line 4786 
  ret_val = (*(hw->phy.ops.read_reg_page))(hw,24913U,& phy_data);
  
#line 4787 
  if (ret_val == 0) 
#line 4788 
                    adapter->stats.scc += (unsigned long long)phy_data; else ;
  
#line 4791 
  (*(hw->phy.ops.read_reg_page))(hw,24914U,& phy_data);
  
#line 4792 
  ret_val = (*(hw->phy.ops.read_reg_page))(hw,24915U,& phy_data);
  
#line 4793 
  if (ret_val == 0) 
#line 4794 
                    adapter->stats.ecol += (unsigned long long)phy_data; else ;
  
#line 4797 
  (*(hw->phy.ops.read_reg_page))(hw,24916U,& phy_data);
  
#line 4798 
  ret_val = (*(hw->phy.ops.read_reg_page))(hw,24917U,& phy_data);
  
#line 4799 
  if (ret_val == 0) 
#line 4800 
                    adapter->stats.mcc += (unsigned long long)phy_data; else ;
  
#line 4803 
  (*(hw->phy.ops.read_reg_page))(hw,24919U,& phy_data);
  
#line 4804 
  ret_val = (*(hw->phy.ops.read_reg_page))(hw,24920U,& phy_data);
  
#line 4805 
  if (ret_val == 0) 
#line 4806 
                    adapter->stats.latecol += (unsigned long long)phy_data; else ;
  
#line 4809 
  (*(hw->phy.ops.read_reg_page))(hw,24921U,& phy_data);
  
#line 4810 
  ret_val = (*(hw->phy.ops.read_reg_page))(hw,24922U,& phy_data);
  
#line 4811 
  if (ret_val == 0) 
#line 4812 
                    hw->mac.collision_delta = (unsigned int)phy_data; else ;
  
#line 4815 
  (*(hw->phy.ops.read_reg_page))(hw,24923U,& phy_data);
  
#line 4816 
  ret_val = (*(hw->phy.ops.read_reg_page))(hw,24924U,& phy_data);
  
#line 4817 
  if (ret_val == 0) 
#line 4818 
                    adapter->stats.dc += (unsigned long long)phy_data; else ;
  
#line 4821 
  (*(hw->phy.ops.read_reg_page))(hw,24925U,& phy_data);
  
#line 4822 
  ret_val = (*(hw->phy.ops.read_reg_page))(hw,24926U,& phy_data);
  
#line 4823 
  if (ret_val == 0) 
#line 4824 
                    adapter->stats.tncrs += (unsigned long long)phy_data; else ;
  release: 
#line 4826 
  ;
  
#line 4827 
  (*(hw->phy.ops.release))(hw);
  return_label: 
#line 4828 
                return;
}


#line 4834  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_update_stats(struct e1000_adapter *adapter)
{
  int tmp;
  u32 tmp_0;
  u32 tmp_1;
  u32 tmp_2;
  u32 tmp_3;
  u32 tmp_4;
  u32 tmp_5;
  u32 tmp_6;
  u32 tmp_13;
  u32 tmp_14;
  u32 tmp_15;
  u32 tmp_16;
  u32 tmp_17;
  u32 tmp_18;
  u32 tmp_19;
  u32 tmp_20;
  u32 tmp_21;
  u32 tmp_22;
  u32 tmp_23;
  u32 tmp_24;
  u32 tmp_25;
  u32 tmp_26;
  u32 tmp_27;
  u32 tmp_28;
  u32 tmp_29;
  u32 tmp_30;
  
#line 4836 
  struct net_device *netdev = adapter->netdev;
  
#line 4837 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4838 
  struct pci_dev *pdev = adapter->pdev;
  
#line 4843 
  if ((unsigned int)adapter->link_speed == 0U) 
#line 4844 
                                               goto return_label; else ;
  
#line 4845 
  tmp = pci_channel_offline(pdev);
  
#line 4845 
  if (tmp != 0) 
#line 4846 
                goto return_label; else ;
  
#line 4848 
  tmp_0 = __er32(hw,16384UL);
  
#line 4848 
  adapter->stats.crcerrs += (unsigned long long)tmp_0;
  
#line 4849 
  tmp_1 = __er32(hw,16500UL);
  
#line 4849 
  adapter->stats.gprc += (unsigned long long)tmp_1;
  
#line 4850 
  tmp_2 = __er32(hw,16520UL);
  
#line 4850 
  adapter->stats.gorc += (unsigned long long)tmp_2;
  
#line 4851 
  __er32(hw,16524UL);
  
#line 4852 
  tmp_3 = __er32(hw,16504UL);
  
#line 4852 
  adapter->stats.bprc += (unsigned long long)tmp_3;
  
#line 4853 
  tmp_4 = __er32(hw,16508UL);
  
#line 4853 
  adapter->stats.mprc += (unsigned long long)tmp_4;
  
#line 4854 
  tmp_5 = __er32(hw,16556UL);
  
#line 4854 
  adapter->stats.roc += (unsigned long long)tmp_5;
  
#line 4856 
  tmp_6 = __er32(hw,16400UL);
  
#line 4856 
  adapter->stats.mpc += (unsigned long long)tmp_6;
  
#line 4859 
  if ((unsigned int)adapter->link_duplex == 1U) {
    
#line 4860 
    if ((adapter->flags2 & 16U) != 0U) 
#line 4861 
                                       e1000e_update_phy_stats(adapter);
    else {
      u32 tmp_7;
      u32 tmp_8;
      u32 tmp_9;
      u32 tmp_10;
      u32 tmp_11;
      
#line 4863 
      tmp_7 = __er32(hw,16404UL);
      
#line 4863 
      adapter->stats.scc += (unsigned long long)tmp_7;
      
#line 4864 
      tmp_8 = __er32(hw,16408UL);
      
#line 4864 
      adapter->stats.ecol += (unsigned long long)tmp_8;
      
#line 4865 
      tmp_9 = __er32(hw,16412UL);
      
#line 4865 
      adapter->stats.mcc += (unsigned long long)tmp_9;
      
#line 4866 
      tmp_10 = __er32(hw,16416UL);
      
#line 4866 
      adapter->stats.latecol += (unsigned long long)tmp_10;
      
#line 4867 
      tmp_11 = __er32(hw,16432UL);
      
#line 4867 
      adapter->stats.dc += (unsigned long long)tmp_11;
      
#line 4869 
      hw->mac.collision_delta = __er32(hw,16424UL);
      
#line 4871 
      if ((unsigned int)hw->mac.type + 4294967293U > 1U) {
        u32 tmp_12;
        
#line 4873 
        tmp_12 = __er32(hw,16436UL);
        
#line 4873 
        adapter->stats.tncrs += (unsigned long long)tmp_12;
      }
      else ;
    }
    
#line 4875 
    adapter->stats.colc += (unsigned long long)hw->mac.collision_delta;
  }
  else ;
  
#line 4878 
  tmp_13 = __er32(hw,16456UL);
  
#line 4878 
  adapter->stats.xonrxc += (unsigned long long)tmp_13;
  
#line 4879 
  tmp_14 = __er32(hw,16460UL);
  
#line 4879 
  adapter->stats.xontxc += (unsigned long long)tmp_14;
  
#line 4880 
  tmp_15 = __er32(hw,16464UL);
  
#line 4880 
  adapter->stats.xoffrxc += (unsigned long long)tmp_15;
  
#line 4881 
  tmp_16 = __er32(hw,16468UL);
  
#line 4881 
  adapter->stats.xofftxc += (unsigned long long)tmp_16;
  
#line 4882 
  tmp_17 = __er32(hw,16512UL);
  
#line 4882 
  adapter->stats.gptc += (unsigned long long)tmp_17;
  
#line 4883 
  tmp_18 = __er32(hw,16528UL);
  
#line 4883 
  adapter->stats.gotc += (unsigned long long)tmp_18;
  
#line 4884 
  __er32(hw,16532UL);
  
#line 4885 
  tmp_19 = __er32(hw,16544UL);
  
#line 4885 
  adapter->stats.rnbc += (unsigned long long)tmp_19;
  
#line 4886 
  tmp_20 = __er32(hw,16548UL);
  
#line 4886 
  adapter->stats.ruc += (unsigned long long)tmp_20;
  
#line 4888 
  tmp_21 = __er32(hw,16624UL);
  
#line 4888 
  adapter->stats.mptc += (unsigned long long)tmp_21;
  
#line 4889 
  tmp_22 = __er32(hw,16628UL);
  
#line 4889 
  adapter->stats.bptc += (unsigned long long)tmp_22;
  
#line 4893 
  hw->mac.tx_packet_delta = __er32(hw,16596UL);
  
#line 4894 
  adapter->stats.tpt += (unsigned long long)hw->mac.tx_packet_delta;
  
#line 4896 
  tmp_23 = __er32(hw,16388UL);
  
#line 4896 
  adapter->stats.algnerrc += (unsigned long long)tmp_23;
  
#line 4897 
  tmp_24 = __er32(hw,16396UL);
  
#line 4897 
  adapter->stats.rxerrc += (unsigned long long)tmp_24;
  
#line 4898 
  tmp_25 = __er32(hw,16444UL);
  
#line 4898 
  adapter->stats.cexterr += (unsigned long long)tmp_25;
  
#line 4899 
  tmp_26 = __er32(hw,16632UL);
  
#line 4899 
  adapter->stats.tsctc += (unsigned long long)tmp_26;
  
#line 4900 
  tmp_27 = __er32(hw,16636UL);
  
#line 4900 
  adapter->stats.tsctfc += (unsigned long long)tmp_27;
  
#line 4903 
  netdev->stats.multicast = (unsigned long)adapter->stats.mprc;
  
#line 4904 
  netdev->stats.collisions = (unsigned long)adapter->stats.colc;
  
#line 4911 
  netdev->stats.rx_errors = (unsigned long)(((((adapter->stats.rxerrc + adapter->stats.crcerrs) + adapter->stats.algnerrc) + adapter->stats.ruc) + adapter->stats.roc) + adapter->stats.cexterr);
  
#line 4914 
  netdev->stats.rx_length_errors = (unsigned long)(adapter->stats.ruc + adapter->stats.roc);
  
#line 4916 
  netdev->stats.rx_crc_errors = (unsigned long)adapter->stats.crcerrs;
  
#line 4917 
  netdev->stats.rx_frame_errors = (unsigned long)adapter->stats.algnerrc;
  
#line 4918 
  netdev->stats.rx_missed_errors = (unsigned long)adapter->stats.mpc;
  
#line 4921 
  netdev->stats.tx_errors = (unsigned long)(adapter->stats.ecol + adapter->stats.latecol);
  
#line 4922 
  netdev->stats.tx_aborted_errors = (unsigned long)adapter->stats.ecol;
  
#line 4923 
  netdev->stats.tx_window_errors = (unsigned long)adapter->stats.latecol;
  
#line 4924 
  netdev->stats.tx_carrier_errors = (unsigned long)adapter->stats.tncrs;
  
#line 4929 
  tmp_28 = __er32(hw,16572UL);
  
#line 4929 
  adapter->stats.mgptc += (unsigned long long)tmp_28;
  
#line 4930 
  tmp_29 = __er32(hw,16564UL);
  
#line 4930 
  adapter->stats.mgprc += (unsigned long long)tmp_29;
  
#line 4931 
  tmp_30 = __er32(hw,16568UL);
  
#line 4931 
  adapter->stats.mgpdc += (unsigned long long)tmp_30;
  
#line 4934 
  if ((unsigned int)hw->mac.type + 4294967285U <= 1U) {
    
#line 4936 
    u32 pbeccsts = __er32(hw,4108UL);
    
#line 4938 
    adapter->corr_errors += pbeccsts & 255U;
    
#line 4940 
    adapter->uncorr_errors += (pbeccsts >> 8) & 255U;
  }
  else ;
  return_label: 
#line 4943 
                return;
}


#line 4950  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_phy_read_status(struct e1000_adapter *adapter)
{
  int tmp_7;
  bool tmp_6;
  
#line 4952 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4953 
  struct e1000_phy_regs *phy = & adapter->phy_regs;
  
#line 4955 
  tmp_6 = pm_runtime_suspended((adapter->pdev)->dev.parent);
  
#line 4955 
  if (tmp_6) 
#line 4955 
             tmp_7 = 0; else 
#line 4955 
                             tmp_7 = 1;
  
#line 4955 
  if (tmp_7) {
    u32 tmp_8;
    
#line 4955 
    tmp_8 = __er32(hw,8UL);
    
#line 4955 
    if ((tmp_8 & 2U) != 0U) {
      
#line 4956 
      if (adapter->hw.phy.media_type == (unsigned int)e1000_media_type_copper) {
        int ret_val;
        s32 tmp;
        s32 tmp_0;
        s32 tmp_1;
        s32 tmp_2;
        s32 tmp_3;
        s32 tmp_4;
        s32 tmp_5;
        
#line 4960 
        ret_val = e1e_rphy(hw,0U,& phy->bmcr);
        
#line 4961 
        tmp = e1e_rphy(hw,1U,& phy->bmsr);
        
#line 4961 
        ret_val = tmp | ret_val;
        
#line 4962 
        tmp_0 = e1e_rphy(hw,4U,& phy->advertise);
        
#line 4962 
        ret_val = tmp_0 | ret_val;
        
#line 4963 
        tmp_1 = e1e_rphy(hw,5U,& phy->lpa);
        
#line 4963 
        ret_val = tmp_1 | ret_val;
        
#line 4964 
        tmp_2 = e1e_rphy(hw,6U,& phy->expansion);
        
#line 4964 
        ret_val = tmp_2 | ret_val;
        
#line 4965 
        tmp_3 = e1e_rphy(hw,9U,& phy->ctrl1000);
        
#line 4965 
        ret_val = tmp_3 | ret_val;
        
#line 4966 
        tmp_4 = e1e_rphy(hw,10U,& phy->stat1000);
        
#line 4966 
        ret_val = tmp_4 | ret_val;
        
#line 4967 
        tmp_5 = e1e_rphy(hw,15U,& phy->estatus);
        
#line 4967 
        ret_val = tmp_5 | ret_val;
        
#line 4968 
        if (ret_val != 0) 
#line 4969 
                          netdev_warn((struct net_device const *)adapter->netdev,"Error reading PHY register\n"); else ;
      }
      else 
#line 4955 
           goto _LAND_0;
    }
    else 
#line 4955 
         goto _LAND_0;
  }
  else {
    _LAND_0: {
               
#line 4974 
               phy->bmcr = (unsigned short)4416U;
               
#line 4975 
               phy->bmsr = (unsigned short)30985U;
               
#line 4978 
               phy->advertise = (unsigned short)3553U;
               
#line 4980 
               phy->lpa = (unsigned short)0U;
               
#line 4981 
               phy->expansion = (unsigned short)4U;
               
#line 4982 
               phy->ctrl1000 = (unsigned short)512U;
               
#line 4983 
               phy->stat1000 = (unsigned short)0U;
               
#line 4984 
               phy->estatus = (unsigned short)12288U;
             }
  }
  
#line 4986 
  return;
}


#line 4988  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_print_link_info(struct e1000_adapter *adapter)
{
  char *tmp_2;
  char *tmp_3;
  
#line 4990 
  struct e1000_hw *hw = & adapter->hw;
  
#line 4991 
  u32 ctrl = __er32(hw,0UL);
  
#line 4994 
  if ((ctrl & 268435456U) == 0U || (ctrl & 134217728U) == 0U) {
    char *tmp_1;
    
#line 4994 
    if ((ctrl & 134217728U) == 0U) {
      char *tmp_0;
      
#line 4994 
      if ((ctrl & 268435456U) != 0U) 
#line 4994 
                                     tmp_0 = (char *)"Tx"; else 
#line 4994 
                                                                tmp_0 = (char *)"None";
      
#line 4994 
      tmp_1 = tmp_0;
    }
    else 
#line 4994 
         tmp_1 = (char *)"Rx";
    
#line 4994 
    tmp_2 = tmp_1;
  }
  else 
#line 4994 
       tmp_2 = (char *)"Rx/Tx";
  
#line 4994 
  if ((unsigned int)adapter->link_duplex == 2U) 
#line 4994 
                                                tmp_3 = (char *)"Full"; else 
                                                                    
#line 4994 
                                                                    tmp_3 = (char *)"Half";
  
#line 4994 
  ;
  
#line 4994 
  ;
  
#line 4994 
  printk("\001",(char *)(& (adapter->netdev)->name),(int)adapter->link_speed,tmp_3,tmp_2);
  
#line 4995 
  return;
}


#line 5002  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static bool e1000e_has_link(struct e1000_adapter *adapter)
{
  
#line 5004 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5005 
  bool link_active = (_Bool)0;
  
#line 5006 
  s32 ret_val = 0;
  
#line 5013 
  switch ((unsigned int)hw->phy.media_type) {
    u32 tmp;
    case (unsigned int)1: 
#line 5014 
    ;
    
#line 5015 
    if ((int)hw->mac.get_link_status != 0) {
      
#line 5016 
      ret_val = (*(hw->mac.ops.check_for_link))(hw);
      
#line 5017 
      link_active = (_Bool)(! ((int)hw->mac.get_link_status != 0));
    }
    else 
#line 5019 
         link_active = (_Bool)1;
    
#line 5021 
    goto ldv_57273;
    case (unsigned int)2: 
#line 5022 
    ;
    
#line 5023 
    ret_val = (*(hw->mac.ops.check_for_link))(hw);
    
#line 5024 
    tmp = __er32(hw,8UL);
    
#line 5024 
    link_active = (_Bool)((tmp & 2U) != 0U);
    
#line 5025 
    goto ldv_57273;
    case (unsigned int)3: 
#line 5026 
    ;
    
#line 5027 
    ret_val = (*(hw->mac.ops.check_for_link))(hw);
    
#line 5028 
    link_active = adapter->hw.mac.serdes_has_link;
    
#line 5029 
    goto ldv_57273;
    default: 
#line 5030 
    ;
    case (unsigned int)0: 
#line 5031 
    ;
    
#line 5032 
    goto ldv_57273;
  }
  ldv_57273: 
#line 5035 
  ;
  
#line 5035 
  if (ret_val == 2 && hw->phy.type == (unsigned int)e1000_phy_igp_3) {
    u32 tmp_0;
    
#line 5035 
    tmp_0 = __er32(hw,0UL);
    
#line 5035 
    if ((tmp_0 & 64U) != 0U) 
#line 5038 
                             netdev_info((struct net_device const *)adapter->netdev,"Gigabit has been disabled, downgrading speed\n"); else ;
  }
  else ;
  
#line 5041 
  return link_active;
}


#line 5044  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_enable_receives(struct e1000_adapter *adapter)
{
  
#line 5047 
  if ((adapter->flags & 16777216U) != 0U && (adapter->flags & 1073741824U) != 0U) {
    
#line 5049 
    struct e1000_hw *hw = & adapter->hw;
    
#line 5050 
    u32 rctl = __er32(hw,256UL);
    
#line 5052 
    __ew32(hw,256UL,rctl | 2U);
    
#line 5053 
    adapter->flags &= 3221225471U;
  }
  else ;
  
#line 5055 
  return;
}


#line 5057  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_check_82574_phy_workaround(struct e1000_adapter *adapter)
{
  bool tmp;
  
#line 5059 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5064 
  tmp = e1000_check_phy_82574(hw);
  
#line 5064 
  if ((int)tmp != 0) 
#line 5065 
                     adapter->phy_hang_count += 1; else 
#line 5067 
                                                        adapter->phy_hang_count = 0;
  
#line 5069 
  if (adapter->phy_hang_count > 1) {
    
#line 5070 
    adapter->phy_hang_count = 0;
    {
      
#line 5071 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_check_82574_phy_workaround", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c", .format = "PHY appears hung - resetting\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))5071U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 5071 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 5071 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"PHY appears hung - resetting\n"); else ;
    }
    
#line 5072 
    ldv_schedule_work_102(& adapter->reset_task);
  }
  else ;
  
#line 5074 
  return;
}


#line 5080  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_watchdog(unsigned long data)
{
  
#line 5082 
  struct e1000_adapter *adapter = (struct e1000_adapter *)data;
  
#line 5085 
  ldv_schedule_work_103(& adapter->watchdog_task);
  
#line 5086 
  return;
}


#line 5090  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_watchdog_task(struct work_struct *work)
{
  struct e1000_adapter *tmp;
  u32 link;
  u32 tctl;
  int tmp_0;
  bool tmp_1;
  bool tmp_2;
  bool tmp_3;
  int tmp_12;
  bool tmp_11;
  bool tmp_16;
  int tmp_19;
  {
    
#line 5092 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 5092 
    tmp = (struct e1000_adapter *)__mptr + 18446744073709551152U;
  }
  
#line 5092 
  struct e1000_adapter *adapter = tmp;
  
#line 5095 
  struct net_device *netdev = adapter->netdev;
  
#line 5096 
  struct e1000_mac_info *mac = & adapter->hw.mac;
  
#line 5097 
  struct e1000_phy_info *phy = & adapter->hw.phy;
  
#line 5098 
  struct e1000_ring *tx_ring = adapter->tx_ring;
  
#line 5099 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5102 
  tmp_0 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
  
#line 5102 
  if (tmp_0 != 0) 
#line 5103 
                  goto return_label; else ;
  
#line 5105 
  tmp_1 = e1000e_has_link(adapter);
  
#line 5105 
  link = (unsigned int)tmp_1;
  
#line 5106 
  tmp_2 = netif_carrier_ok((struct net_device const *)netdev);
  
#line 5106 
  if ((int)tmp_2 != 0) {
    
#line 5106 
    if (link != 0U) {
      
#line 5108 
      pm_runtime_resume(netdev->dev.parent);
      
#line 5110 
      e1000e_enable_receives(adapter);
      
#line 5111 
      goto link_up;
    }
    else ;
  }
  else ;
  
#line 5114 
  tmp_3 = e1000e_enable_tx_pkt_filtering(hw);
  
#line 5114 
  if ((int)tmp_3 != 0) {
    
#line 5114 
    if ((int)adapter->mng_vlan_id != (int)adapter->hw.mng_cookie.vlan_id) 
      
#line 5116 
      e1000_update_mng_vlan(adapter); else ;
  }
  else ;
  
#line 5118 
  if (link != 0U) {
    int tmp_7;
    bool tmp_6;
    
#line 5119 
    tmp_6 = netif_carrier_ok((struct net_device const *)netdev);
    
#line 5119 
    if (tmp_6) 
#line 5119 
               tmp_7 = 0; else 
#line 5119 
                               tmp_7 = 1;
    
#line 5119 
    if (tmp_7) {
      int tmp_5;
      
#line 5120 
      bool txb2b = (_Bool)1;
      
#line 5123 
      pm_runtime_resume(netdev->dev.parent);
      
#line 5126 
      e1000_phy_read_status(adapter);
      
#line 5127 
      (*(mac->ops.get_link_up_info))(& adapter->hw,& adapter->link_speed,& adapter->link_duplex);
      
#line 5130 
      e1000_print_link_info(adapter);
      
#line 5133 
      e1000e_check_downshift(hw);
      
#line 5134 
      if ((int)phy->speed_downgraded != 0) 
#line 5135 
                                           netdev_warn((struct net_device const *)netdev,"Link Speed was downgraded by SmartSpeed\n"); else ;
      
#line 5141 
      if ((((hw->phy.type == (unsigned int)e1000_phy_igp_3 || hw->phy.type == (unsigned int)e1000_phy_bm) && (int)hw->mac.autoneg != 0) && ((unsigned int)adapter->link_speed == 10U || (unsigned int)adapter->link_speed == 100U)) && (unsigned int)adapter->link_duplex == 1U) {
        u16 autoneg_exp;
        
#line 5149 
        e1e_rphy(hw,6U,& autoneg_exp);
        
#line 5151 
        if (((int)autoneg_exp & 1) == 0) 
#line 5152 
                                         netdev_info((struct net_device const *)adapter->netdev,"Autonegotiated half duplex but link partner cannot autoneg.  Try forcing full duplex if link gets many collisions.\n"); else ;
      }
      else ;
      
#line 5156 
      adapter->tx_timeout_factor = (unsigned char)1U;
      
#line 5157 
      switch ((int)adapter->link_speed) {
        case 10: 
#line 5158 
        ;
        
#line 5159 
        txb2b = (_Bool)0;
        
#line 5160 
        adapter->tx_timeout_factor = (unsigned char)16U;
        
#line 5161 
        goto ldv_57310;
        case 100: 
#line 5162 
        ;
        
#line 5163 
        txb2b = (_Bool)0;
        
#line 5164 
        adapter->tx_timeout_factor = (unsigned char)10U;
        
#line 5165 
        goto ldv_57310;
      }
      ldv_57310: 
#line 5171 
      ;
      
#line 5171 
      if ((adapter->flags & 4194304U) != 0U && ! txb2b) {
        u32 tarc0;
        
#line 5175 
        tarc0 = __er32(hw,14400UL);
        
#line 5176 
        tarc0 &= 4292870143U;
        
#line 5177 
        __ew32(hw,14400UL,tarc0);
      }
      else ;
      
#line 5183 
      if ((adapter->flags & 536870912U) == 0U) {
        
#line 5184 
        switch ((int)adapter->link_speed) {
          case 10: 
#line 5185 
          ;
          case 100: 
#line 5186 
          ;
          
#line 5187 
          netdev_info((struct net_device const *)adapter->netdev,"10/100 speed: disabling TSO\n");
          
#line 5188 
          netdev->features &= 18446744073709486079ULL;
          
#line 5189 
          netdev->features &= 18446744073708503039ULL;
          
#line 5190 
          goto ldv_57315;
          case 1000: 
#line 5191 
          ;
          
#line 5192 
          netdev->features |= 65536ULL;
          
#line 5193 
          netdev->features |= 1048576ULL;
          
#line 5194 
          goto ldv_57315;
          default: 
#line 5195 
          ;
          
#line 5197 
          goto ldv_57315;
        }
        ldv_57315: 
#line 5199 
        ;
      }
      else ;
      
#line 5204 
      tctl = __er32(hw,1024UL);
      
#line 5205 
      tctl |= 2U;
      
#line 5206 
      __ew32(hw,1024UL,tctl);
      
#line 5211 
      if (phy->ops.cfg_on_link_up != (s32 (*)(struct e1000_hw *))0) 
#line 5212 
                                                                    (*(phy->ops.cfg_on_link_up))(hw); else ;
      
#line 5214 
      netif_carrier_on(netdev);
      
#line 5216 
      tmp_5 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
      
#line 5216 
      if (tmp_5 == 0) {
        unsigned long tmp_4;
        
#line 5217 
        tmp_4 = round_jiffies(jiffies + 500UL);
        
#line 5217 
        ;
        
#line 5217 
        ldv_mod_timer_104(& adapter->phy_info_timer,tmp_4);
      }
      else ;
    }
    else ;
  }
  else {
    bool tmp_10;
    
#line 5221 
    tmp_10 = netif_carrier_ok((struct net_device const *)netdev);
    
#line 5221 
    if ((int)tmp_10 != 0) {
      int tmp_9;
      
#line 5222 
      adapter->link_speed = (unsigned short)0U;
      
#line 5223 
      adapter->link_duplex = (unsigned short)0U;
      
#line 5225 
      printk("\001",(char *)(& (adapter->netdev)->name));
      
#line 5226 
      netif_carrier_off(netdev);
      
#line 5227 
      tmp_9 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
      
#line 5227 
      if (tmp_9 == 0) {
        unsigned long tmp_8;
        
#line 5228 
        tmp_8 = round_jiffies(jiffies + 500UL);
        
#line 5228 
        ;
        
#line 5228 
        ldv_mod_timer_105(& adapter->phy_info_timer,tmp_8);
      }
      else ;
      
#line 5235 
      if ((adapter->flags & 16777216U) != 0U) 
#line 5236 
                                              adapter->flags |= 1073741824U; else 
                                                                    
#line 5238 
                                                                    pm_schedule_suspend(netdev->dev.parent,100U);
    }
    else ;
  }
  link_up: 
#line 5243 
  ;
  
#line 5244 
  ldv_spin_lock_106(& adapter->stats64_lock);
  
#line 5245 
  e1000e_update_stats(adapter);
  
#line 5247 
  mac->tx_packet_delta = (unsigned int)adapter->stats.tpt - (unsigned int)adapter->tpt_old;
  
#line 5248 
  adapter->tpt_old = adapter->stats.tpt;
  
#line 5249 
  mac->collision_delta = (unsigned int)adapter->stats.colc - (unsigned int)adapter->colc_old;
  
#line 5250 
  adapter->colc_old = adapter->stats.colc;
  
#line 5252 
  adapter->gorc = (unsigned int)adapter->stats.gorc - (unsigned int)adapter->gorc_old;
  
#line 5253 
  adapter->gorc_old = adapter->stats.gorc;
  
#line 5254 
  adapter->gotc = (unsigned int)adapter->stats.gotc - (unsigned int)adapter->gotc_old;
  
#line 5255 
  adapter->gotc_old = adapter->stats.gotc;
  
#line 5256 
  ldv_spin_unlock_107(& adapter->stats64_lock);
  
#line 5262 
  tmp_11 = netif_carrier_ok((struct net_device const *)netdev);
  
#line 5262 
  if (tmp_11) 
#line 5262 
              tmp_12 = 0; else 
#line 5262 
                               tmp_12 = 1;
  
#line 5262 
  if (tmp_12) {
    int tmp_13;
    
#line 5263 
    tmp_13 = e1000_desc_unused(tx_ring);
    
#line 5263 
    ;
    
#line 5263 
    if ((unsigned int)(tmp_13 + 1) < tx_ring->count) 
#line 5264 
                                                     adapter->flags |= 1073741824U; else ;
  }
  else ;
  
#line 5267 
  if ((adapter->flags & 1073741824U) != 0U) {
    
#line 5268 
    ldv_schedule_work_108(& adapter->reset_task);
    
#line 5270 
    goto return_label;
  }
  else ;
  
#line 5273 
  e1000e_update_adaptive(& adapter->hw);
  
#line 5276 
  if (adapter->itr_setting == 4U) {
    u32 tmp_14;
    u32 tmp_15;
    
#line 5281 
    u32 goc = (adapter->gotc + adapter->gorc) / 10000U;
    
#line 5282 
    if (adapter->gotc > adapter->gorc) 
#line 5282 
                                       tmp_14 = (adapter->gotc - adapter->gorc) / 10000U; else 
                                                                    
#line 5282 
                                                                    tmp_14 = (adapter->gorc - adapter->gotc) / 10000U;
    
#line 5282 
    u32 dif = tmp_14;
    
#line 5285 
    if (goc != 0U) 
#line 5285 
                   tmp_15 = (dif * 6000U) / goc + 2000U; else 
#line 5285 
                                                              tmp_15 = 8000U;
    
#line 5285 
    u32 itr = tmp_15;
    
#line 5287 
    e1000e_write_itr(adapter,itr);
  }
  else ;
  
#line 5291 
  if (adapter->msix_entries != (struct msix_entry *)0) 
#line 5292 
                                                       __ew32(hw,200UL,(adapter->rx_ring)->ims_val); else 
                                                                    
#line 5294 
                                                                    __ew32(hw,200UL,16U);
  
#line 5297 
  e1000e_flush_descriptors(adapter);
  
#line 5300 
  adapter->detect_tx_hung = (_Bool)1;
  
#line 5305 
  tmp_16 = e1000e_get_laa_state_82571(hw);
  
#line 5305 
  if ((int)tmp_16 != 0) 
#line 5306 
                        (*(hw->mac.ops.rar_set))(hw,(u8 *)(& adapter->hw.mac.addr),0U); else ;
  
#line 5308 
  if ((adapter->flags2 & 512U) != 0U) 
#line 5309 
                                      e1000e_check_82574_phy_workaround(adapter); else ;
  
#line 5312 
  if (adapter->hwtstamp_config.rx_filter != 0) 
    
#line 5313 
    if ((adapter->flags2 & 8192U) != 0U) {
      u32 tmp_17;
      
#line 5313 
      tmp_17 = __er32(hw,46624UL);
      
#line 5313 
      if ((tmp_17 & 1U) != 0U) {
        
#line 5315 
        __er32(hw,46632UL);
        
#line 5316 
        adapter->rx_hwtstamp_cleared += 1U;
      }
      else 
#line 5318 
           adapter->flags2 |= 8192U;
    }
    else 
#line 5318 
         adapter->flags2 |= 8192U;
  else ;
  
#line 5323 
  tmp_19 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
  
#line 5323 
  if (tmp_19 == 0) {
    unsigned long tmp_18;
    
#line 5324 
    tmp_18 = round_jiffies(jiffies + 500UL);
    
#line 5324 
    ;
    
#line 5324 
    ldv_mod_timer_109(& adapter->watchdog_timer,tmp_18);
  }
  else ;
  return_label: 
#line 5326 
                return;
}


#line 5337  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_tso(struct e1000_ring *tx_ring, struct sk_buff *skb, __be16 protocol)
{
  int __retres;
  struct e1000_context_desc *context_desc;
  struct e1000_buffer *buffer_info;
  unsigned int i;
  u16 mss;
  u8 ipcss;
  u8 ipcso;
  u8 tucss;
  u8 tucso;
  u8 hdr_len;
  int err;
  int tmp_0;
  bool tmp;
  int tmp_1;
  unsigned int tmp_2;
  unsigned char *tmp_3;
  int tmp_14;
  struct iphdr *tmp_15;
  int tmp_16;
  struct tcphdr *tmp_17;
  
#line 5343 
  u32 cmd_length = 0U;
  
#line 5344 
  u16 ipcse = (unsigned short)0U;
  
#line 5348 
  tmp = skb_is_gso((struct sk_buff const *)skb);
  
#line 5348 
  if (tmp) 
#line 5348 
           tmp_0 = 0; else 
#line 5348 
                           tmp_0 = 1;
  
#line 5348 
  if (tmp_0) {
    
#line 5349 
    __retres = 0;
    
#line 5349 
    goto return_label;
  }
  else ;
  
#line 5351 
  err = skb_cow_head(skb,0U);
  
#line 5352 
  if (err < 0) {
    
#line 5353 
    __retres = err;
    
#line 5353 
    goto return_label;
  }
  else ;
  
#line 5355 
  tmp_1 = skb_transport_offset((struct sk_buff const *)skb);
  
#line 5355 
  tmp_2 = tcp_hdrlen((struct sk_buff const *)skb);
  
#line 5355 
  hdr_len = (unsigned char)((int)((unsigned char)tmp_1) + (int)((unsigned char)tmp_2));
  
#line 5356 
  tmp_3 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 5356 
  mss = ((struct skb_shared_info *)tmp_3)->gso_size;
  
#line 5357 
  if ((unsigned int)protocol == 8U) {
    struct tcphdr *tmp_5;
    __sum16 tmp_6;
    int tmp_7;
    
#line 5358 
    struct iphdr *iph = ip_hdr((struct sk_buff const *)skb);
    
#line 5359 
    iph->tot_len = (unsigned short)0U;
    
#line 5360 
    iph->check = (unsigned short)0U;
    
#line 5361 
    tmp_5 = tcp_hdr((struct sk_buff const *)skb);
    
#line 5361 
    tmp_6 = csum_tcpudp_magic(iph->saddr,iph->daddr,(unsigned short)0,(unsigned short)6,0U);
    
#line 5361 
    tmp_5->check = (unsigned short)(~ ((int)tmp_6));
    
#line 5363 
    cmd_length = 33554432U;
    
#line 5364 
    tmp_7 = skb_transport_offset((struct sk_buff const *)skb);
    
#line 5364 
    ipcse = (unsigned short)((unsigned int)((unsigned short)tmp_7) + 65535U);
  }
  else {
    bool tmp_13;
    
#line 5365 
    tmp_13 = skb_is_gso_v6((struct sk_buff const *)skb);
    
#line 5365 
    if ((int)tmp_13 != 0) {
      struct ipv6hdr *tmp_8;
      struct tcphdr *tmp_9;
      __sum16 tmp_12;
      struct ipv6hdr *tmp_10;
      struct ipv6hdr *tmp_11;
      
#line 5366 
      tmp_8 = ipv6_hdr((struct sk_buff const *)skb);
      
#line 5366 
      tmp_8->payload_len = (unsigned short)0U;
      
#line 5367 
      tmp_9 = tcp_hdr((struct sk_buff const *)skb);
      
#line 5368 
      tmp_10 = ipv6_hdr((struct sk_buff const *)skb);
      
#line 5367 
      tmp_11 = ipv6_hdr((struct sk_buff const *)skb);
      
#line 5367 
      tmp_12 = csum_ipv6_magic((struct in6_addr const *)(& tmp_11->saddr),(struct in6_addr const *)(& tmp_10->daddr),0U,(unsigned short)6,0U);
      
#line 5367 
      tmp_9->check = (unsigned short)(~ ((int)tmp_12));
      
#line 5370 
      ipcse = (unsigned short)0U;
    }
    else ;
  }
  
#line 5372 
  tmp_14 = skb_network_offset((struct sk_buff const *)skb);
  
#line 5372 
  ipcss = (unsigned char)tmp_14;
  
#line 5373 
  tmp_15 = ip_hdr((struct sk_buff const *)skb);
  
#line 5373 
  ipcso = (unsigned char)((long)(& tmp_15->check) - (long)skb->data);
  
#line 5374 
  tmp_16 = skb_transport_offset((struct sk_buff const *)skb);
  
#line 5374 
  tucss = (unsigned char)tmp_16;
  
#line 5375 
  tmp_17 = tcp_hdr((struct sk_buff const *)skb);
  
#line 5375 
  tucso = (unsigned char)((long)(& tmp_17->check) - (long)skb->data);
  
#line 5377 
  cmd_length = ((skb->len - (unsigned int)hdr_len) | cmd_length) | 620756992U;
  
#line 5380 
  i = (unsigned int)tx_ring->next_to_use;
  
#line 5381 
  context_desc = (struct e1000_context_desc *)tx_ring->desc + i;
  
#line 5382 
  buffer_info = tx_ring->buffer_info + i;
  
#line 5384 
  context_desc->lower_setup.ip_fields.ipcss = ipcss;
  
#line 5385 
  context_desc->lower_setup.ip_fields.ipcso = ipcso;
  
#line 5386 
  context_desc->lower_setup.ip_fields.ipcse = ipcse;
  
#line 5387 
  context_desc->upper_setup.tcp_fields.tucss = tucss;
  
#line 5388 
  context_desc->upper_setup.tcp_fields.tucso = tucso;
  
#line 5389 
  context_desc->upper_setup.tcp_fields.tucse = (unsigned short)0U;
  
#line 5390 
  context_desc->tcp_seg_setup.fields.mss = mss;
  
#line 5391 
  context_desc->tcp_seg_setup.fields.hdr_len = hdr_len;
  
#line 5392 
  context_desc->cmd_and_length = cmd_length;
  
#line 5394 
  buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.time_stamp = jiffies;
  
#line 5395 
  buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.next_to_watch = (unsigned short)i;
  
#line 5397 
  i += 1U;
  
#line 5398 
  if (tx_ring->count == i) 
#line 5399 
                           i = 0U; else ;
  
#line 5400 
  tx_ring->next_to_use = (unsigned short)i;
  
#line 5402 
  __retres = 1;
  return_label: 
#line 5402 
                return __retres;
}


#line 5405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static bool e1000_tx_csum(struct e1000_ring *tx_ring, struct sk_buff *skb, __be16 protocol)
{
  bool __retres;
  struct e1000_context_desc *context_desc;
  struct e1000_buffer *buffer_info;
  unsigned int i;
  u8 css;
  int tmp_4;
  
#line 5408 
  struct e1000_adapter *adapter = tx_ring->adapter;
  
#line 5413 
  u32 cmd_len = 536870912U;
  
#line 5415 
  if ((unsigned int)*((unsigned char *)skb + 145UL) != 6U) {
    
#line 5416 
    __retres = (_Bool)0;
    
#line 5416 
    goto return_label;
  }
  else ;
  
#line 5418 
  switch ((int)protocol) {
    struct iphdr *tmp;
    struct ipv6hdr *tmp_0;
    int tmp_3;
    case 8: 
#line 5419 
    ;
    
#line 5420 
    tmp = ip_hdr((struct sk_buff const *)skb);
    
#line 5420 
    ;
    
#line 5420 
    if ((unsigned int)tmp->protocol == 6U) 
#line 5421 
                                           cmd_len |= 16777216U; else ;
    
#line 5422 
    goto ldv_57351;
    case 56710: 
#line 5423 
    ;
    
#line 5425 
    tmp_0 = ipv6_hdr((struct sk_buff const *)skb);
    
#line 5425 
    ;
    
#line 5425 
    if ((unsigned int)tmp_0->nexthdr == 6U) 
#line 5426 
                                            cmd_len |= 16777216U; else ;
    
#line 5427 
    goto ldv_57351;
    default: 
#line 5428 
    ;
    
#line 5429 
    tmp_3 = net_ratelimit();
    
#line 5429 
    if ((long)(tmp_3 != 0) != 0L) {
      int tmp_2;
      
#line 5430 
      if (0 != 0) 
#line 5430 
                  tmp_2 = (int)((unsigned short)(((int)protocol << 8) | ((int)protocol >> 8)));
      else {
        __u16 tmp_1;
        
#line 5430 
        tmp_1 = __fswab16((unsigned short)((int)protocol));
        
#line 5430 
        tmp_2 = (int)tmp_1;
      }
      
#line 5430 
      ;
      
#line 5430 
      netdev_warn((struct net_device const *)adapter->netdev,"checksum_partial proto=%x!\n",tmp_2);
    }
    else ;
    
#line 5432 
    goto ldv_57351;
  }
  ldv_57351: 
#line 5435 
  ;
  
#line 5435 
  tmp_4 = skb_checksum_start_offset((struct sk_buff const *)skb);
  
#line 5435 
  css = (unsigned char)tmp_4;
  
#line 5437 
  i = (unsigned int)tx_ring->next_to_use;
  
#line 5438 
  buffer_info = tx_ring->buffer_info + i;
  
#line 5439 
  context_desc = (struct e1000_context_desc *)tx_ring->desc + i;
  
#line 5441 
  context_desc->lower_setup.ip_config = 0U;
  
#line 5442 
  context_desc->upper_setup.tcp_fields.tucss = css;
  
#line 5443 
  context_desc->upper_setup.tcp_fields.tucso = (unsigned char)((int)((unsigned char)skb->__anonCompField_sk_buff_80.__anonCompField___anonunion_270_79.csum_offset) + (int)css);
  
#line 5444 
  context_desc->upper_setup.tcp_fields.tucse = (unsigned short)0U;
  
#line 5445 
  context_desc->tcp_seg_setup.data = 0U;
  
#line 5446 
  context_desc->cmd_and_length = cmd_len;
  
#line 5448 
  buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.time_stamp = jiffies;
  
#line 5449 
  buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.next_to_watch = (unsigned short)i;
  
#line 5451 
  i += 1U;
  
#line 5452 
  if (tx_ring->count == i) 
#line 5453 
                           i = 0U; else ;
  
#line 5454 
  tx_ring->next_to_use = (unsigned short)i;
  
#line 5456 
  __retres = (_Bool)1;
  return_label: 
#line 5456 
                return __retres;
}


#line 5459  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_tx_map(struct e1000_ring *tx_ring, struct sk_buff *skb, unsigned int first, unsigned int max_per_txd, unsigned int nr_frags)
{
  int __retres;
  struct e1000_buffer *buffer_info;
  unsigned int size;
  unsigned int i;
  unsigned int f;
  unsigned int bytecount;
  unsigned int segs;
  unsigned int tmp_1;
  int tmp_2;
  int tmp_8;
  unsigned char *tmp_9;
  unsigned int tmp_10;
  unsigned int tmp_11;
  
#line 5463 
  struct e1000_adapter *adapter = tx_ring->adapter;
  
#line 5464 
  struct pci_dev *pdev = adapter->pdev;
  
#line 5466 
  unsigned int len = skb_headlen((struct sk_buff const *)skb);
  
#line 5467 
  unsigned int offset = 0U;
  
#line 5467 
  unsigned int count = 0U;
  
#line 5470 
  i = (unsigned int)tx_ring->next_to_use;
  
#line 5472 
  goto ldv_57377;
  ldv_57376: 
#line 5473 
  ;
  
#line 5473 
  buffer_info = tx_ring->buffer_info + i;
  {
    unsigned int tmp_0;
    
#line 5474 
    unsigned int _min1 = len;
    
#line 5474 
    unsigned int _min2 = max_per_txd;
    
#line 5474 
    if (_min1 < _min2) 
#line 5474 
                       tmp_0 = _min1; else 
#line 5474 
                                           tmp_0 = _min2;
    
#line 5474 
    tmp_1 = tmp_0;
  }
  
#line 5474 
  size = tmp_1;
  
#line 5476 
  buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.length = (unsigned short)size;
  
#line 5477 
  buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.time_stamp = jiffies;
  
#line 5478 
  buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.next_to_watch = (unsigned short)i;
  
#line 5479 
  buffer_info->dma = dma_map_single_attrs(& pdev->dev,(void *)(skb->data + offset),(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
  
#line 5482 
  buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.mapped_as_page = (unsigned short)0U;
  
#line 5483 
  tmp_2 = dma_mapping_error(& pdev->dev,buffer_info->dma);
  
#line 5483 
  if (tmp_2 != 0) 
#line 5484 
                  goto dma_error; else ;
  
#line 5486 
  len -= size;
  
#line 5487 
  offset += size;
  
#line 5488 
  count += 1U;
  
#line 5490 
  if (len != 0U) {
    
#line 5491 
    i += 1U;
    
#line 5492 
    if (tx_ring->count == i) 
#line 5493 
                             i = 0U; else ;
  }
  else ;
  ldv_57377: 
#line 5495 
  ;
  
#line 5472 
  if (len != 0U) 
#line 5474 
                 goto ldv_57376; else 
#line 5477 
                                      goto ldv_57378;
  ldv_57378: 
#line 5478 
  ;
  
#line 5497 
  f = 0U;
  
#line 5497 
  goto ldv_57387;
  ldv_57386: 
#line 5498 
  ;
  {
    struct skb_frag_struct const *frag;
    unsigned char *tmp_3;
    unsigned int tmp_5;
    int tmp_6;
    
#line 5500 
    tmp_3 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 5500 
    frag = (struct skb_frag_struct const *)(& ((struct skb_shared_info *)tmp_3)->frags[f]);
    
#line 5501 
    len = skb_frag_size(frag);
    
#line 5502 
    offset = 0U;
    
#line 5504 
    goto ldv_57384;
    ldv_57383: 
#line 5505 
    ;
    
#line 5505 
    i += 1U;
    
#line 5506 
    if (tx_ring->count == i) 
#line 5507 
                             i = 0U; else ;
    
#line 5509 
    buffer_info = tx_ring->buffer_info + i;
    {
      unsigned int tmp_4;
      
#line 5510 
      unsigned int _min1_0 = len;
      
#line 5510 
      unsigned int _min2_0 = max_per_txd;
      
#line 5510 
      if (_min1_0 < _min2_0) 
#line 5510 
                             tmp_4 = _min1_0; else 
#line 5510 
                                                   tmp_4 = _min2_0;
      
#line 5510 
      tmp_5 = tmp_4;
    }
    
#line 5510 
    size = tmp_5;
    
#line 5512 
    buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.length = (unsigned short)size;
    
#line 5513 
    buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.time_stamp = jiffies;
    
#line 5514 
    buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.next_to_watch = (unsigned short)i;
    
#line 5515 
    buffer_info->dma = skb_frag_dma_map(& pdev->dev,frag,(unsigned long)offset,(unsigned long)size,(enum dma_data_direction)DMA_TO_DEVICE);
    
#line 5518 
    buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.mapped_as_page = (unsigned short)1U;
    
#line 5519 
    tmp_6 = dma_mapping_error(& pdev->dev,buffer_info->dma);
    
#line 5519 
    if (tmp_6 != 0) 
#line 5520 
                    goto dma_error; else ;
    
#line 5522 
    len -= size;
    
#line 5523 
    offset += size;
    
#line 5524 
    count += 1U;
    ldv_57384: 
#line 5525 
    ;
    
#line 5504 
    if (len != 0U) 
#line 5506 
                   goto ldv_57383; else 
#line 5509 
                                        goto ldv_57385;
    ldv_57385: 
#line 5510 
    ;
  }
  
#line 5497 
  f += 1U;
  ldv_57387: 
#line 5498 
  ;
  
#line 5497 
  if (f < nr_frags) 
#line 5499 
                    goto ldv_57386; else 
#line 5502 
                                         goto ldv_57388;
  ldv_57388: 
#line 5503 
  ;
  
#line 5528 
  tmp_9 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 5528 
  tmp_8 = (int)((struct skb_shared_info *)tmp_9)->gso_segs != 0;
  
#line 5528 
  if (tmp_8) ; else 
#line 5528 
                    tmp_8 = 1;
  
#line 5528 
  segs = (unsigned int)tmp_8;
  
#line 5530 
  tmp_10 = skb_headlen((struct sk_buff const *)skb);
  
#line 5530 
  bytecount = (segs + 4294967295U) * tmp_10 + skb->len;
  
#line 5532 
  (tx_ring->buffer_info + i)->skb = skb;
  
#line 5533 
  (tx_ring->buffer_info + i)->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.segs = segs;
  
#line 5534 
  (tx_ring->buffer_info + i)->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.bytecount = bytecount;
  
#line 5535 
  (tx_ring->buffer_info + first)->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.next_to_watch = (unsigned short)i;
  
#line 5537 
  __retres = (int)count;
  
#line 5537 
  goto return_label;
  dma_error: 
#line 5539 
  ;
  
#line 5540 
  dev_err((struct device const *)(& pdev->dev),"Tx DMA map failed\n");
  
#line 5541 
  buffer_info->dma = 0ULL;
  
#line 5542 
  if (count != 0U) 
#line 5543 
                   count -= 1U; else ;
  
#line 5545 
  goto ldv_57390;
  ldv_57389: 
#line 5546 
  ;
  
#line 5546 
  if (i == 0U) 
#line 5547 
               i = tx_ring->count + i; else ;
  
#line 5548 
  i -= 1U;
  
#line 5549 
  buffer_info = tx_ring->buffer_info + i;
  
#line 5550 
  e1000_put_txbuf(tx_ring,buffer_info);
  ldv_57390: 
#line 5551 
  ;
  
#line 5545 
  tmp_11 = count;
  
#line 5545 
  count -= 1U;
  
#line 5545 
  ;
  
#line 5545 
  if (tmp_11 != 0U) 
#line 5547 
                    goto ldv_57389; else 
#line 5550 
                                         goto ldv_57391;
  ldv_57391: 
#line 5551 
  ;
  
#line 5553 
  __retres = 0;
  return_label: 
#line 5553 
                return __retres;
}


#line 5556  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_tx_queue(struct e1000_ring *tx_ring, int tx_flags, int count)
{
  struct e1000_buffer *buffer_info;
  unsigned int i;
  
#line 5558 
  struct e1000_adapter *adapter = tx_ring->adapter;
  
#line 5559 
  struct e1000_tx_desc *tx_desc = (struct e1000_tx_desc *)0;
  
#line 5561 
  u32 txd_upper = 0U;
  
#line 5561 
  u32 txd_lower = 33554432U;
  
#line 5564 
  if ((tx_flags & 4) != 0) {
    
#line 5565 
    txd_lower |= 605028352U;
    
#line 5567 
    txd_upper |= 512U;
    
#line 5569 
    if ((tx_flags & 8) != 0) 
#line 5570 
                             txd_upper |= 256U; else ;
  }
  else ;
  
#line 5573 
  if ((tx_flags & 1) != 0) {
    
#line 5574 
    txd_lower |= 537919488U;
    
#line 5575 
    txd_upper |= 512U;
  }
  else ;
  
#line 5578 
  if ((tx_flags & 2) != 0) {
    
#line 5579 
    txd_lower |= 1073741824U;
    
#line 5580 
    txd_upper = ((unsigned int)tx_flags & 4294901760U) | txd_upper;
  }
  else ;
  
#line 5583 
  if ((long)((tx_flags & 16) != 0) != 0L) 
#line 5584 
                                          txd_lower &= 4261412863U; else ;
  
#line 5586 
  if ((long)((tx_flags & 32) != 0) != 0L) {
    
#line 5587 
    txd_lower |= 537919488U;
    
#line 5588 
    txd_upper |= 16U;
  }
  else ;
  
#line 5591 
  i = (unsigned int)tx_ring->next_to_use;
  ldv_57403: 
#line 5592 
  ;
  
#line 5594 
  buffer_info = tx_ring->buffer_info + i;
  
#line 5595 
  tx_desc = (struct e1000_tx_desc *)tx_ring->desc + i;
  
#line 5596 
  tx_desc->buffer_addr = buffer_info->dma;
  
#line 5597 
  tx_desc->lower.data = (unsigned int)buffer_info->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.length | txd_lower;
  
#line 5599 
  tx_desc->upper.data = txd_upper;
  
#line 5601 
  i += 1U;
  
#line 5602 
  if (tx_ring->count == i) 
#line 5603 
                           i = 0U; else ;
  
#line 5604 
  count -= 1;
  
#line 5604 
  if (count > 0) 
#line 5606 
                 goto ldv_57403; else 
#line 5609 
                                      goto ldv_57404;
  ldv_57404: 
#line 5610 
  ;
  
#line 5606 
  tx_desc->lower.data |= adapter->txd_cmd;
  
#line 5609 
  if ((long)((tx_flags & 16) != 0) != 0L) 
#line 5610 
                                          tx_desc->lower.data &= 4261412863U; else ;
  
#line 5611 
  ldv_inline_asm();
  
#line 5619 
  tx_ring->next_to_use = (unsigned short)i;
  
#line 5620 
  return;
}


#line 5623  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_transfer_dhcp_info(struct e1000_adapter *adapter, struct sk_buff *skb)
{
  int __retres;
  u16 length;
  u16 offset;
  
#line 5626 
  struct e1000_hw *hw = & adapter->hw;
  
#line 5629 
  if (((int)skb->vlan_tci & 4096) != 0 && (((int)skb->vlan_tci & -4097) != (int)adapter->hw.mng_cookie.vlan_id || ((int)adapter->hw.mng_cookie.status & 2) == 0)) {
    
#line 5633 
    __retres = 0;
    
#line 5633 
    goto return_label;
  }
  else ;
  
#line 5635 
  if (skb->len <= 282U) {
    
#line 5636 
    __retres = 0;
    
#line 5636 
    goto return_label;
  }
  else ;
  
#line 5638 
  if ((unsigned int)((struct ethhdr *)skb->data)->h_proto != 8U) {
    
#line 5639 
    __retres = 0;
    
#line 5639 
    goto return_label;
  }
  else ;
  {
    struct udphdr *udp;
    int tmp_0;
    int tmp_1;
    
#line 5642 
    struct iphdr const *ip = (struct iphdr const *)skb->data + 14U;
    
#line 5645 
    if ((unsigned int)ip->protocol != 17U) {
      
#line 5646 
      __retres = 0;
      
#line 5646 
      goto return_label;
    }
    else ;
    
#line 5648 
    udp = (struct udphdr *)ip + ((int)ip->ihl << 2);
    
#line 5649 
    if (0 != 0) 
#line 5649 
                tmp_0 = (((int)udp->dest << 8) | ((int)udp->dest >> 8)) != 67;
    else {
      __u16 tmp;
      
#line 5649 
      tmp = __fswab16((unsigned short)((int)udp->dest));
      
#line 5649 
      tmp_0 = (unsigned int)tmp != 67U;
    }
    
#line 5649 
    if (tmp_0) {
      
#line 5650 
      __retres = 0;
      
#line 5650 
      goto return_label;
    }
    else ;
    
#line 5652 
    offset = (unsigned short)((long)((u8 *)udp + 8U) - (long)skb->data);
    
#line 5653 
    length = (unsigned short)((int)((unsigned short)skb->len) - (int)offset);
    
#line 5654 
    tmp_1 = e1000e_mng_write_dhcp_info(hw,(u8 *)udp + 8U,(unsigned short)((int)length));
    
#line 5654 
    __retres = tmp_1;
    
#line 5654 
    goto return_label;
  }
  
#line 5657 
  __retres = 0;
  return_label: 
#line 5657 
                return __retres;
}


#line 5660  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int __e1000_maybe_stop_tx(struct e1000_ring *tx_ring, int size)
{
  int __retres;
  int tmp;
  
#line 5662 
  struct e1000_adapter *adapter = tx_ring->adapter;
  
#line 5664 
  netif_start_queue(adapter->netdev);
  
#line 5665 
  ldv_inline_asm();
  
#line 5674 
  tmp = e1000_desc_unused(tx_ring);
  
#line 5674 
  ;
  
#line 5674 
  if (tmp < size) {
    
#line 5675 
    __retres = -16;
    
#line 5675 
    goto return_label;
  }
  else ;
  
#line 5678 
  netif_start_queue(adapter->netdev);
  
#line 5679 
  adapter->restart_queue += 1U;
  
#line 5680 
  __retres = 0;
  return_label: 
#line 5680 
                return __retres;
}


#line 5683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_maybe_stop_tx(struct e1000_ring *tx_ring, int size)
{
  int __retres;
  int tmp;
  int tmp_0;
  
#line 5685 
  if ((long)(tx_ring->count < (unsigned int)size) != 0L) {
    
#line 5687 
    ldv_inline_asm();
    
#line 5685 
    ;
  }
  else ;
  
#line 5687 
  tmp = e1000_desc_unused(tx_ring);
  
#line 5687 
  ;
  
#line 5687 
  if (tmp >= size) {
    
#line 5688 
    __retres = 0;
    
#line 5688 
    goto return_label;
  }
  else ;
  
#line 5689 
  tmp_0 = __e1000_maybe_stop_tx(tx_ring,size);
  
#line 5689 
  __retres = tmp_0;
  return_label: 
#line 5689 
                return __retres;
}


#line 5692  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static netdev_tx_t e1000_xmit_frame(struct sk_buff *skb, struct net_device *netdev)
{
  netdev_tx_t __retres;
  unsigned int first;
  unsigned int nr_frags;
  unsigned int mss;
  int tso;
  unsigned int f;
  int tmp_2;
  int tmp_3;
  unsigned char *tmp_4;
  unsigned char *tmp_10;
  unsigned int tmp_12;
  unsigned char *tmp_11;
  int tmp_13;
  
#line 5695 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5696 
  struct e1000_ring *tx_ring = adapter->tx_ring;
  
#line 5698 
  unsigned int tx_flags = 0U;
  
#line 5699 
  unsigned int len = skb_headlen((struct sk_buff const *)skb);
  
#line 5702 
  int count = 0;
  
#line 5705 
  __be16 protocol = vlan_get_protocol(skb);
  
#line 5707 
  tmp_2 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
  
#line 5707 
  if (tmp_2 != 0) {
    
#line 5708 
    dev_kfree_skb_any(skb);
    
#line 5709 
    __retres = NETDEV_TX_OK;
    
#line 5709 
    goto return_label;
  }
  else ;
  
#line 5712 
  if (skb->len == 0U) {
    
#line 5713 
    dev_kfree_skb_any(skb);
    
#line 5714 
    __retres = NETDEV_TX_OK;
    
#line 5714 
    goto return_label;
  }
  else ;
  
#line 5720 
  tmp_3 = skb_put_padto(skb,17U);
  
#line 5720 
  if (tmp_3 != 0) {
    
#line 5721 
    __retres = NETDEV_TX_OK;
    
#line 5721 
    goto return_label;
  }
  else ;
  
#line 5723 
  tmp_4 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 5723 
  mss = (unsigned int)((struct skb_shared_info *)tmp_4)->gso_size;
  
#line 5724 
  if (mss != 0U) {
    u8 hdr_len;
    int tmp_5;
    unsigned int tmp_6;
    
#line 5731 
    tmp_5 = skb_transport_offset((struct sk_buff const *)skb);
    
#line 5731 
    tmp_6 = tcp_hdrlen((struct sk_buff const *)skb);
    
#line 5731 
    hdr_len = (unsigned char)((int)((unsigned char)tmp_5) + (int)((unsigned char)tmp_6));
    
#line 5735 
    if (skb->data_len != 0U && (unsigned int)hdr_len == len) {
      unsigned int pull_size;
      unsigned int tmp_8;
      unsigned char *tmp_9;
      {
        unsigned int tmp_7;
        
#line 5738 
        unsigned int __min1 = 4U;
        
#line 5738 
        unsigned int __min2 = skb->data_len;
        
#line 5738 
        if (__min1 < __min2) 
#line 5738 
                             tmp_7 = __min1; else 
#line 5738 
                                                  tmp_7 = __min2;
        
#line 5738 
        tmp_8 = tmp_7;
      }
      
#line 5738 
      pull_size = tmp_8;
      
#line 5739 
      tmp_9 = __pskb_pull_tail(skb,(int)pull_size);
      
#line 5739 
      if (tmp_9 == (unsigned char *)0U) {
        
#line 5740 
        netdev_err((struct net_device const *)adapter->netdev,"__pskb_pull_tail failed.\n");
        
#line 5741 
        dev_kfree_skb_any(skb);
        
#line 5742 
        __retres = NETDEV_TX_OK;
        
#line 5742 
        goto return_label;
      }
      else ;
      
#line 5744 
      len = skb_headlen((struct sk_buff const *)skb);
    }
    else ;
  }
  else ;
  
#line 5749 
  if (mss != 0U || (unsigned int)*((unsigned char *)skb + 145UL) == 6U) 
    
#line 5750 
    count += 1; else ;
  
#line 5751 
  count += 1;
  
#line 5753 
  count = (int)(((adapter->tx_fifo_limit + len) + 4294967295U) / adapter->tx_fifo_limit + (unsigned int)count);
  
#line 5755 
  tmp_10 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 5755 
  nr_frags = (unsigned int)((struct skb_shared_info *)tmp_10)->nr_frags;
  
#line 5756 
  f = 0U;
  
#line 5756 
  goto ldv_57444;
  ldv_57443: 
#line 5757 
  ;
  
#line 5757 
  tmp_11 = skb_end_pointer((struct sk_buff const *)skb);
  
#line 5757 
  tmp_12 = skb_frag_size((skb_frag_t const *)(& ((struct skb_shared_info *)tmp_11)->frags[f]));
  
#line 5758 
  count = (int)(((tmp_12 + adapter->tx_fifo_limit) + 4294967295U) / adapter->tx_fifo_limit + (unsigned int)count);
  
#line 5756 
  f += 1U;
  ldv_57444: 
#line 5757 
  ;
  
#line 5756 
  if (f < nr_frags) 
#line 5758 
                    goto ldv_57443; else 
#line 5761 
                                         goto ldv_57445;
  ldv_57445: 
#line 5762 
  ;
  
#line 5760 
  if ((int)adapter->hw.mac.tx_pkt_filtering != 0) 
#line 5761 
                                                  e1000_transfer_dhcp_info(adapter,skb); else ;
  
#line 5766 
  tmp_13 = e1000_maybe_stop_tx(tx_ring,count + 2);
  
#line 5766 
  if (tmp_13 != 0) {
    
#line 5767 
    __retres = NETDEV_TX_BUSY;
    
#line 5767 
    goto return_label;
  }
  else ;
  
#line 5769 
  if (((int)skb->vlan_tci & 4096) != 0) {
    
#line 5770 
    tx_flags |= 2U;
    
#line 5771 
    tx_flags = ((unsigned int)((int)skb->vlan_tci << 16) & 4026466304U) | tx_flags;
  }
  else ;
  
#line 5775 
  first = (unsigned int)tx_ring->next_to_use;
  
#line 5777 
  tso = e1000_tso(tx_ring,skb,(unsigned short)((int)protocol));
  
#line 5778 
  if (tso < 0) {
    
#line 5779 
    dev_kfree_skb_any(skb);
    
#line 5780 
    __retres = NETDEV_TX_OK;
    
#line 5780 
    goto return_label;
  }
  else ;
  
#line 5783 
  if (tso != 0) 
#line 5784 
                tx_flags |= 4U;
  else {
    bool tmp_14;
    
#line 5785 
    tmp_14 = e1000_tx_csum(tx_ring,skb,(unsigned short)((int)protocol));
    
#line 5785 
    if ((int)tmp_14 != 0) 
#line 5786 
                          tx_flags |= 1U; else ;
  }
  
#line 5792 
  if ((unsigned int)protocol == 8U) 
#line 5793 
                                    tx_flags |= 8U; else ;
  
#line 5795 
  if ((long)((unsigned int)*((unsigned char *)skb + 146UL) != 0U) != 0L) 
    
#line 5796 
    tx_flags |= 16U; else ;
  
#line 5799 
  count = e1000_tx_map(tx_ring,skb,first,adapter->tx_fifo_limit,nr_frags);
  
#line 5801 
  if (count != 0) {
    unsigned char *tmp_17;
    
#line 5802 
    tmp_17 = skb_end_pointer((struct sk_buff const *)skb);
    
#line 5802 
    ;
    
#line 5802 
    if ((long)(((int)((struct skb_shared_info *)tmp_17)->tx_flags & 1) != 0) != 0L) 
      
#line 5802 
      if ((adapter->flags & 16384U) != 0U) 
        
#line 5803 
        if (adapter->tx_hwtstamp_skb == (struct sk_buff *)0) {
          unsigned char *tmp_15;
          unsigned char *tmp_16;
          
#line 5805 
          tmp_15 = skb_end_pointer((struct sk_buff const *)skb);
          
#line 5805 
          tmp_16 = skb_end_pointer((struct sk_buff const *)skb);
          
#line 5805 
          ((struct skb_shared_info *)tmp_15)->tx_flags = (unsigned char)((unsigned int)((struct skb_shared_info *)tmp_16)->tx_flags | 4U);
          
#line 5806 
          tx_flags |= 32U;
          
#line 5807 
          adapter->tx_hwtstamp_skb = skb_get(skb);
          
#line 5808 
          adapter->tx_hwtstamp_start = jiffies;
          
#line 5809 
          ldv_schedule_work_110(& adapter->tx_hwtstamp_work);
        }
        else 
#line 5811 
             skb_tx_timestamp(skb);
      else 
#line 5811 
           skb_tx_timestamp(skb);
    else 
#line 5811 
         skb_tx_timestamp(skb);
    
#line 5814 
    netdev_sent_queue(netdev,skb->len);
    
#line 5815 
    e1000_tx_queue(tx_ring,(int)tx_flags,count);
    
#line 5817 
    e1000_maybe_stop_tx(tx_ring,(int)((((unsigned long)adapter->tx_fifo_limit + 4095UL) / (unsigned long)adapter->tx_fifo_limit) * (unsigned long)17U + (unsigned long)2U));
    
#line 5822 
    if ((unsigned int)*((unsigned char *)skb + 142UL) == 0U) 
#line 5822 
                                                             goto _LOR;
    else {
      bool tmp_19;
      struct netdev_queue *tmp_18;
      
#line 5823 
      tmp_18 = netdev_get_tx_queue((struct net_device const *)netdev,0U);
      
#line 5822 
      tmp_19 = netif_xmit_stopped((struct netdev_queue const *)tmp_18);
      
#line 5822 
      if ((int)tmp_19 != 0) {
        _LOR: {
                
#line 5824 
                if ((adapter->flags2 & 2048U) != 0U) 
#line 5825 
                                                     e1000e_update_tdt_wa(tx_ring,(unsigned int)tx_ring->next_to_use); else 
                                                                    
#line 5828 
                                                                    writel((unsigned int)tx_ring->next_to_use,(void volatile *)tx_ring->tail);
                
#line 5829 
                ldv_inline_asm();
              }
      }
      else ;
    }
  }
  else {
    
#line 5837 
    dev_kfree_skb_any(skb);
    
#line 5838 
    (tx_ring->buffer_info + first)->__anonCompField_e1000_buffer_99.__anonCompField___anonunion_351_97.time_stamp = 0UL;
    
#line 5839 
    tx_ring->next_to_use = (unsigned short)first;
  }
  
#line 5842 
  __retres = NETDEV_TX_OK;
  return_label: 
#line 5842 
                return __retres;
}


#line 5849  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_tx_timeout(struct net_device *netdev)
{
  
#line 5851 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5854 
  adapter->tx_timeout_count += 1U;
  
#line 5855 
  ldv_schedule_work_111(& adapter->reset_task);
  
#line 5856 
  return;
}


#line 5858  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_reset_task(struct work_struct *work)
{
  struct e1000_adapter *adapter;
  struct e1000_adapter *tmp;
  int tmp_0;
  {
    
#line 5861 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 5861 
    tmp = (struct e1000_adapter *)__mptr + 18446744073709551232U;
  }
  
#line 5861 
  adapter = tmp;
  
#line 5864 
  tmp_0 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
  
#line 5864 
  if (tmp_0 != 0) 
#line 5865 
                  goto return_label; else ;
  
#line 5867 
  if ((adapter->flags & 1073741824U) == 0U) {
    
#line 5868 
    e1000e_dump(adapter);
    
#line 5869 
    netdev_err((struct net_device const *)adapter->netdev,"Reset adapter unexpectedly\n");
  }
  else ;
  
#line 5871 
  e1000e_reinit_locked(adapter);
  return_label: 
#line 5872 
                return;
}


#line 5881  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
struct rtnl_link_stats64 *e1000e_get_stats64(struct net_device *netdev, struct rtnl_link_stats64 *stats)
{
  
#line 5884 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5886 
  memset((void *)stats,0,184UL);
  
#line 5887 
  ldv_spin_lock_112(& adapter->stats64_lock);
  
#line 5888 
  e1000e_update_stats(adapter);
  
#line 5890 
  stats->rx_bytes = adapter->stats.gorc;
  
#line 5891 
  stats->rx_packets = adapter->stats.gprc;
  
#line 5892 
  stats->tx_bytes = adapter->stats.gotc;
  
#line 5893 
  stats->tx_packets = adapter->stats.gptc;
  
#line 5894 
  stats->multicast = adapter->stats.mprc;
  
#line 5895 
  stats->collisions = adapter->stats.colc;
  
#line 5902 
  stats->rx_errors = ((((adapter->stats.rxerrc + adapter->stats.crcerrs) + adapter->stats.algnerrc) + adapter->stats.ruc) + adapter->stats.roc) + adapter->stats.cexterr;
  
#line 5905 
  stats->rx_length_errors = adapter->stats.ruc + adapter->stats.roc;
  
#line 5906 
  stats->rx_crc_errors = adapter->stats.crcerrs;
  
#line 5907 
  stats->rx_frame_errors = adapter->stats.algnerrc;
  
#line 5908 
  stats->rx_missed_errors = adapter->stats.mpc;
  
#line 5911 
  stats->tx_errors = adapter->stats.ecol + adapter->stats.latecol;
  
#line 5912 
  stats->tx_aborted_errors = adapter->stats.ecol;
  
#line 5913 
  stats->tx_window_errors = adapter->stats.latecol;
  
#line 5914 
  stats->tx_carrier_errors = adapter->stats.tncrs;
  
#line 5918 
  ldv_spin_unlock_113(& adapter->stats64_lock);
  
#line 5919 
  return stats;
}


#line 5929  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_change_mtu(struct net_device *netdev, int new_mtu)
{
  int __retres;
  int tmp_0;
  bool tmp_1;
  bool tmp_2;
  
#line 5931 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 5932 
  int max_frame = new_mtu + 22;
  
#line 5935 
  if (max_frame > 1522 && (adapter->flags & 128U) == 0U) {
    
#line 5937 
    netdev_err((struct net_device const *)adapter->netdev,"Jumbo Frames not supported.\n");
    
#line 5938 
    __retres = -22;
    
#line 5938 
    goto return_label;
  }
  else ;
  
#line 5942 
  if (new_mtu <= 67 || adapter->max_hw_frame_size < (unsigned int)max_frame) {
    
#line 5944 
    netdev_err((struct net_device const *)adapter->netdev,"Unsupported MTU setting\n");
    
#line 5945 
    __retres = -22;
    
#line 5945 
    goto return_label;
  }
  else ;
  
#line 5949 
  if ((adapter->hw.mac.type > (unsigned int)e1000_pchlan && (adapter->flags2 & 1U) == 0U) && new_mtu > 1500) {
    
#line 5952 
    netdev_err((struct net_device const *)adapter->netdev,"Jumbo Frames not supported on this device when CRC stripping is disabled.\n");
    
#line 5953 
    __retres = -22;
    
#line 5953 
    goto return_label;
  }
  else ;
  
#line 5956 
  goto ldv_57468;
  ldv_57467: 
#line 5957 
  ;
  
#line 5957 
  usleep_range(1000UL,2000UL);
  ldv_57468: 
#line 5958 
  ;
  
#line 5956 
  tmp_0 = test_and_set_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 5956 
  if (tmp_0 != 0) 
#line 5958 
                  goto ldv_57467; else 
#line 5961 
                                       goto ldv_57469;
  ldv_57469: 
#line 5962 
  ;
  
#line 5959 
  adapter->max_frame_size = (unsigned int)max_frame;
  
#line 5960 
  netdev_info((struct net_device const *)adapter->netdev,"changing MTU from %d to %d\n",netdev->mtu,new_mtu);
  
#line 5961 
  netdev->mtu = (unsigned int)new_mtu;
  
#line 5963 
  pm_runtime_get_sync(netdev->dev.parent);
  
#line 5965 
  tmp_1 = netif_running((struct net_device const *)netdev);
  
#line 5965 
  if ((int)tmp_1 != 0) 
#line 5966 
                       e1000e_down(adapter,(_Bool)1); else ;
  
#line 5976 
  if (max_frame <= 2048) 
#line 5977 
                         adapter->rx_buffer_len = 2048U; else 
#line 5979 
                                                              adapter->rx_buffer_len = 4096U;
  
#line 5982 
  if (max_frame <= 1522) 
#line 5983 
                         adapter->rx_buffer_len = 1522U; else ;
  
#line 5985 
  tmp_2 = netif_running((struct net_device const *)netdev);
  
#line 5985 
  if ((int)tmp_2 != 0) 
#line 5986 
                       e1000e_up(adapter); else 
#line 5988 
                                                e1000e_reset(adapter);
  
#line 5990 
  pm_runtime_put_sync(netdev->dev.parent);
  
#line 5992 
  clear_bit(1L,(unsigned long volatile *)(& adapter->state));
  
#line 5994 
  __retres = 0;
  return_label: 
#line 5994 
                return __retres;
}


#line 5997  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_mii_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd)
{
  int __retres;
  
#line 6000 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6001 
  struct mii_ioctl_data *data = if_mii(ifr);
  
#line 6003 
  if (adapter->hw.phy.media_type != (unsigned int)e1000_media_type_copper) {
    
#line 6004 
    __retres = -95;
    
#line 6004 
    goto return_label;
  }
  else ;
  
#line 6006 
  switch (cmd) {
    case 35143: 
#line 6007 
    ;
    
#line 6008 
    data->phy_id = (unsigned short)adapter->hw.phy.addr;
    
#line 6009 
    goto ldv_57478;
    case 35144: 
#line 6010 
    ;
    
#line 6011 
    e1000_phy_read_status(adapter);
    
#line 6013 
    switch ((int)data->reg_num & 31) {
      case 0: 
#line 6014 
      ;
      
#line 6015 
      data->val_out = adapter->phy_regs.bmcr;
      
#line 6016 
      goto ldv_57481;
      case 1: 
#line 6017 
      ;
      
#line 6018 
      data->val_out = adapter->phy_regs.bmsr;
      
#line 6019 
      goto ldv_57481;
      case 2: 
#line 6020 
      ;
      
#line 6021 
      data->val_out = (unsigned short)(adapter->hw.phy.id >> 16);
      
#line 6022 
      goto ldv_57481;
      case 3: 
#line 6023 
      ;
      
#line 6024 
      data->val_out = (unsigned short)adapter->hw.phy.id;
      
#line 6025 
      goto ldv_57481;
      case 4: 
#line 6026 
      ;
      
#line 6027 
      data->val_out = adapter->phy_regs.advertise;
      
#line 6028 
      goto ldv_57481;
      case 5: 
#line 6029 
      ;
      
#line 6030 
      data->val_out = adapter->phy_regs.lpa;
      
#line 6031 
      goto ldv_57481;
      case 6: 
#line 6032 
      ;
      
#line 6033 
      data->val_out = adapter->phy_regs.expansion;
      
#line 6034 
      goto ldv_57481;
      case 9: 
#line 6035 
      ;
      
#line 6036 
      data->val_out = adapter->phy_regs.ctrl1000;
      
#line 6037 
      goto ldv_57481;
      case 10: 
#line 6038 
      ;
      
#line 6039 
      data->val_out = adapter->phy_regs.stat1000;
      
#line 6040 
      goto ldv_57481;
      case 15: 
#line 6041 
      ;
      
#line 6042 
      data->val_out = adapter->phy_regs.estatus;
      
#line 6043 
      goto ldv_57481;
      default: 
#line 6044 
      ;
      
#line 6045 
      __retres = -5;
      
#line 6045 
      goto return_label;
    }
    ldv_57481: 
#line 6047 
    ;
    
#line 6047 
    goto ldv_57478;
    case 35145: 
#line 6048 
    ;
    default: 
#line 6049 
    ;
    
#line 6050 
    __retres = -95;
    
#line 6050 
    goto return_label;
  }
  ldv_57478: 
#line 6052 
  ;
  
#line 6052 
  __retres = 0;
  return_label: 
#line 6052 
                return __retres;
}


#line 6071  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_hwtstamp_set(struct net_device *netdev, struct ifreq *ifr)
{
  int __retres;
  struct hwtstamp_config config;
  int ret_val;
  unsigned long tmp_0;
  int tmp_2;
  unsigned long tmp_1;
  
#line 6073 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6077 
  tmp_0 = copy_from_user((void *)(& config),(void const *)ifr->ifr_ifru.ifru_data,12UL);
  
#line 6077 
  if (tmp_0 != 0UL) {
    
#line 6078 
    __retres = -14;
    
#line 6078 
    goto return_label;
  }
  else ;
  
#line 6080 
  ret_val = e1000e_config_hwtstamp(adapter,& config);
  
#line 6081 
  if (ret_val != 0) {
    
#line 6082 
    __retres = ret_val;
    
#line 6082 
    goto return_label;
  }
  else ;
  
#line 6084 
  switch (config.rx_filter) {
    case 7: 
#line 6085 
    ;
    case 10: 
#line 6086 
    ;
    case 13: 
#line 6087 
    ;
    case 8: 
#line 6088 
    ;
    case 11: 
#line 6089 
    ;
    case 14: 
#line 6090 
    ;
    
#line 6096 
    config.rx_filter = 2;
    
#line 6097 
    goto ldv_57507;
    default: 
#line 6098 
    ;
    
#line 6099 
    goto ldv_57507;
  }
  ldv_57507: 
#line 6102 
  ;
  
#line 6103 
  tmp_1 = copy_to_user(ifr->ifr_ifru.ifru_data,(void const *)(& config),12UL);
  
#line 6103 
  if (tmp_1 != 0UL) 
#line 6103 
                    tmp_2 = -14; else 
#line 6103 
                                      tmp_2 = 0;
  
#line 6103 
  __retres = tmp_2;
  return_label: 
#line 6103 
                return __retres;
}


#line 6106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_hwtstamp_get(struct net_device *netdev, struct ifreq *ifr)
{
  int tmp_1;
  unsigned long tmp_0;
  
#line 6108 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6111 
  tmp_0 = copy_to_user(ifr->ifr_ifru.ifru_data,(void const *)(& adapter->hwtstamp_config),12UL);
  
#line 6111 
  if (tmp_0 != 0UL) 
#line 6111 
                    tmp_1 = -14; else 
#line 6111 
                                      tmp_1 = 0;
  
#line 6111 
  return tmp_1;
}


#line 6114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_ioctl(struct net_device *netdev, struct ifreq *ifr, int cmd)
{
  int __retres;
  
#line 6116 
  switch (cmd) {
    int tmp;
    int tmp_0;
    int tmp_1;
    case 35143: 
#line 6117 
    ;
    case 35144: 
#line 6118 
    ;
    case 35145: 
#line 6119 
    ;
    
#line 6120 
    tmp = e1000_mii_ioctl(netdev,ifr,cmd);
    
#line 6120 
    __retres = tmp;
    
#line 6120 
    goto return_label;
    case 35248: 
#line 6121 
    ;
    
#line 6122 
    tmp_0 = e1000e_hwtstamp_set(netdev,ifr);
    
#line 6122 
    __retres = tmp_0;
    
#line 6122 
    goto return_label;
    case 35249: 
#line 6123 
    ;
    
#line 6124 
    tmp_1 = e1000e_hwtstamp_get(netdev,ifr);
    
#line 6124 
    __retres = tmp_1;
    
#line 6124 
    goto return_label;
    default: 
#line 6125 
    ;
    
#line 6126 
    __retres = -95;
    
#line 6126 
    goto return_label;
  }
  return_label: 
#line 6116 
                return __retres;
}


#line 6130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_init_phy_wakeup(struct e1000_adapter *adapter, u32 wufc)
{
  int __retres;
  u32 i;
  u32 mac_reg;
  u32 wuc;
  u16 phy_reg;
  u16 wuc_enable;
  int retval;
  
#line 6132 
  struct e1000_hw *hw = & adapter->hw;
  
#line 6138 
  e1000_copy_rx_addrs_to_phy_ich8lan(hw);
  
#line 6140 
  retval = (*(hw->phy.ops.acquire))(hw);
  
#line 6141 
  if (retval != 0) {
    
#line 6142 
    netdev_err((struct net_device const *)adapter->netdev,"Could not acquire PHY\n");
    
#line 6143 
    __retres = retval;
    
#line 6143 
    goto return_label;
  }
  else ;
  
#line 6147 
  retval = e1000_enable_phy_wakeup_reg_access_bm(hw,& wuc_enable);
  
#line 6148 
  if (retval != 0) 
#line 6149 
                   goto release; else ;
  
#line 6152 
  i = 0U;
  
#line 6152 
  goto ldv_57538;
  ldv_57537: 
#line 6153 
  ;
  
#line 6153 
  mac_reg = readl((void const volatile *)(hw->hw_addr + ((i << 2) + 20992U)));
  
#line 6154 
  (*(hw->phy.ops.write_reg_page))(hw,(((i << 1) & 31U) | ((((i << 1) + 128U) << 16) & 4292870144U)) | 25600U,(unsigned short)((int)((unsigned short)mac_reg)));
  
#line 6156 
  (*(hw->phy.ops.write_reg_page))(hw,((((i << 1) & 31U) | ((((i << 1) + 128U) << 16) & 4292870144U)) | 25600U) + 1U,(unsigned short)((int)((unsigned short)(mac_reg >> 16))));
  
#line 6152 
  i += 1U;
  ldv_57538: 
#line 6153 
  ;
  
#line 6152 
  if ((unsigned int)adapter->hw.mac.mta_reg_count > i) 
#line 6154 
                                                       goto ldv_57537; else 
                                                                    
#line 6157 
                                                                    goto ldv_57539;
  ldv_57539: 
#line 6158 
  ;
  
#line 6161 
  (*(hw->phy.ops.read_reg_page))(& adapter->hw,25600U,& phy_reg);
  
#line 6162 
  mac_reg = __er32(hw,256UL);
  
#line 6163 
  if ((mac_reg & 8U) != 0U) 
#line 6164 
                            phy_reg = (unsigned short)((unsigned int)phy_reg | 1U); else ;
  
#line 6165 
  if ((mac_reg & 16U) != 0U) 
#line 6166 
                             phy_reg = (unsigned short)((unsigned int)phy_reg | 2U); else ;
  
#line 6167 
  phy_reg = (unsigned short)((unsigned int)phy_reg & 65511U);
  
#line 6168 
  if ((mac_reg & 12288U) != 0U) 
#line 6169 
                                phy_reg = (unsigned short)(((unsigned int)((int)((unsigned short)(mac_reg >> 12)) << 3U) & 24U) | (unsigned int)phy_reg); else ;
  
#line 6171 
  if ((mac_reg & 32768U) != 0U) 
#line 6172 
                                phy_reg = (unsigned short)((unsigned int)phy_reg | 32U); else ;
  
#line 6173 
  if ((mac_reg & 8388608U) != 0U) 
#line 6174 
                                  phy_reg = (unsigned short)((unsigned int)phy_reg | 64U); else ;
  
#line 6175 
  mac_reg = __er32(hw,0UL);
  
#line 6176 
  if ((mac_reg & 134217728U) != 0U) 
#line 6177 
                                    phy_reg = (unsigned short)((unsigned int)phy_reg | 128U); else ;
  
#line 6178 
  (*(hw->phy.ops.write_reg_page))(& adapter->hw,25600U,(unsigned short)((int)phy_reg));
  
#line 6180 
  wuc = 2U;
  
#line 6181 
  if ((wufc & 3U) != 0U) 
#line 6182 
                         wuc |= 1U; else ;
  
#line 6185 
  __ew32(hw,22536UL,wufc);
  
#line 6186 
  __ew32(hw,22528UL,wuc | 268U);
  
#line 6190 
  (*(hw->phy.ops.write_reg_page))(& adapter->hw,25602U,(unsigned short)((int)((unsigned short)wufc)));
  
#line 6191 
  (*(hw->phy.ops.write_reg_page))(& adapter->hw,25601U,(unsigned short)((int)((unsigned short)wuc)));
  
#line 6194 
  wuc_enable = (unsigned short)((unsigned int)wuc_enable | 20U);
  
#line 6195 
  retval = e1000_disable_phy_wakeup_reg_access_bm(hw,& wuc_enable);
  
#line 6196 
  if (retval != 0) 
#line 6197 
                   netdev_err((struct net_device const *)adapter->netdev,"Could not set PHY Host Wakeup bit\n"); else ;
  release: 
#line 6198 
  ;
  
#line 6199 
  (*(hw->phy.ops.release))(hw);
  
#line 6201 
  __retres = retval;
  return_label: 
#line 6201 
                return __retres;
}


#line 6204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_flush_lpic(struct pci_dev *pdev)
{
  u32 ret_val;
  s32 tmp_1;
  u32 tmp_2;
  
#line 6206 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 6207 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6208 
  struct e1000_hw *hw = & adapter->hw;
  
#line 6211 
  pm_runtime_get_sync(netdev->dev.parent);
  
#line 6213 
  tmp_1 = (*(hw->phy.ops.acquire))(hw);
  
#line 6213 
  ret_val = (unsigned int)tmp_1;
  
#line 6214 
  if (ret_val != 0U) 
#line 6215 
                     goto fl_out; else ;
  
#line 6217 
  tmp_2 = __er32(hw,252UL);
  
#line 6217 
  printk("\001",tmp_2 >> 24);
  
#line 6220 
  (*(hw->phy.ops.release))(hw);
  fl_out: 
#line 6222 
  ;
  
#line 6223 
  pm_runtime_put_sync(netdev->dev.parent);
  
#line 6224 
  return;
}


#line 6226  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_pm_freeze(struct device *dev)
{
  int __retres;
  struct net_device *tmp_0;
  struct pci_dev *tmp;
  bool tmp_5_0;
  {
    
#line 6228 
    struct device const *__mptr = (struct device const *)dev;
    
#line 6228 
    tmp = (struct pci_dev *)__mptr + 18446744073709551464U;
  }
  
#line 6228 
  tmp_0 = (struct net_device *)pci_get_drvdata(tmp);
  
#line 6228 
  struct net_device *netdev = tmp_0;
  
#line 6229 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6231 
  netif_device_detach(netdev);
  
#line 6233 
  tmp_5_0 = netif_running((struct net_device const *)netdev);
  
#line 6233 
  if ((int)tmp_5_0 != 0) {
    int tmp_2;
    
#line 6234 
    int count = 25;
    
#line 6236 
    goto ldv_57557;
    ldv_57556: 
#line 6237 
    ;
    
#line 6237 
    usleep_range(10000UL,20000UL);
    ldv_57557: 
#line 6238 
    ;
    
#line 6236 
    tmp_2 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
    
#line 6236 
    if (tmp_2 != 0) {
      int tmp_3;
      
#line 6236 
      tmp_3 = count;
      
#line 6236 
      count -= 1;
      
#line 6236 
      ;
      
#line 6236 
      if (tmp_3 != 0) 
#line 6238 
                      goto ldv_57556; else 
#line 6241 
                                           goto ldv_57558;
    }
    else 
#line 6241 
         goto ldv_57558;
    ldv_57558: 
#line 6242 
    ;
    {
      int tmp_4;
      
#line 6239 
      tmp_4 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
      
#line 6239 
      int __ret_warn_on = tmp_4 != 0;
      
#line 6239 
      if ((long)(__ret_warn_on != 0) != 0L) 
#line 6239 
                                            warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c",6239); else ;
      
#line 6239 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    
#line 6242 
    e1000e_down(adapter,(_Bool)0);
    
#line 6243 
    e1000_free_irq(adapter);
  }
  else ;
  
#line 6245 
  e1000e_reset_interrupt_capability(adapter);
  
#line 6248 
  e1000e_disable_pcie_master(& adapter->hw);
  
#line 6250 
  __retres = 0;
  
#line 6250 
  return __retres;
}


#line 6253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int __e1000_shutdown(struct pci_dev *pdev, bool runtime)
{
  int __retres;
  u32 ctrl;
  u32 ctrl_ext;
  u32 rctl;
  u32 status;
  unsigned int tmp_1;
  
#line 6255 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 6256 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6257 
  struct e1000_hw *hw = & adapter->hw;
  
#line 6260 
  if (runtime) 
#line 6260 
               tmp_1 = 1U; else 
#line 6260 
                                tmp_1 = adapter->wol;
  
#line 6260 
  u32 wufc = tmp_1;
  
#line 6261 
  int retval = 0;
  
#line 6263 
  status = __er32(hw,8UL);
  
#line 6264 
  if ((status & 2U) != 0U) 
#line 6265 
                           wufc &= 4294967294U; else ;
  
#line 6267 
  if (wufc != 0U) {
    
#line 6268 
    e1000_setup_rctl(adapter);
    
#line 6269 
    e1000e_set_rx_mode(netdev);
    
#line 6272 
    if ((wufc & 8U) != 0U) {
      
#line 6273 
      rctl = __er32(hw,256UL);
      
#line 6274 
      rctl |= 16U;
      
#line 6275 
      __ew32(hw,256UL,rctl);
    }
    else ;
    
#line 6278 
    ctrl = __er32(hw,0UL);
    
#line 6279 
    ctrl |= 1048576U;
    
#line 6280 
    if ((adapter->flags2 & 2U) == 0U) 
#line 6281 
                                      ctrl |= 2097152U; else ;
    
#line 6282 
    __ew32(hw,0UL,ctrl);
    
#line 6284 
    if ((unsigned int)adapter->hw.phy.media_type + 4294967294U <= 1U) {
      
#line 6288 
      ctrl_ext = __er32(hw,24UL);
      
#line 6289 
      ctrl_ext |= 128U;
      
#line 6290 
      __ew32(hw,24UL,ctrl_ext);
    }
    else ;
    
#line 6293 
    if (! runtime) 
#line 6294 
                   e1000e_power_up_phy(adapter); else ;
    
#line 6296 
    if ((adapter->flags & 512U) != 0U) 
#line 6297 
                                       e1000_suspend_workarounds_ich8lan(& adapter->hw); else ;
    
#line 6299 
    if ((adapter->flags2 & 2U) != 0U) {
      
#line 6301 
      retval = e1000_init_phy_wakeup(adapter,wufc);
      
#line 6302 
      if (retval != 0) {
        
#line 6303 
        __retres = retval;
        
#line 6303 
        goto return_label;
      }
      else ;
    }
    else {
      
#line 6306 
      __ew32(hw,22536UL,wufc);
      
#line 6307 
      __ew32(hw,22528UL,2U);
    }
  }
  else {
    
#line 6310 
    __ew32(hw,22528UL,0U);
    
#line 6311 
    __ew32(hw,22536UL,0U);
    
#line 6313 
    e1000_power_down_phy(adapter);
  }
  
#line 6316 
  if (adapter->hw.phy.type == (unsigned int)e1000_phy_igp_3) 
#line 6317 
                                                             e1000e_igp3_phy_powerdown_workaround_ich8lan(& adapter->hw);
  else 
    
#line 6318 
    if ((unsigned int)hw->mac.type + 4294967285U <= 1U) {
      
#line 6320 
      if ((wufc & 28U) == 0U) 
#line 6324 
                              retval = e1000_enable_ulp_lpt_lp(hw,(_Bool)((int)((_Bool)(! ((int)runtime != 0))))); else ;
      
#line 6326 
      if (retval != 0) {
        
#line 6327 
        __retres = retval;
        
#line 6327 
        goto return_label;
      }
      else ;
    }
    else ;
  
#line 6334 
  e1000e_release_hw_control(adapter);
  
#line 6336 
  pci_clear_master(pdev);
  
#line 6347 
  if ((adapter->flags & 8192U) != 0U) {
    u16 devctl;
    
#line 6348 
    struct pci_dev *us_dev = (pdev->bus)->self;
    
#line 6351 
    if (us_dev == (struct pci_dev *)0) {
      
#line 6352 
      __retres = 0;
      
#line 6352 
      goto return_label;
    }
    else ;
    
#line 6354 
    pcie_capability_read_word(us_dev,8,& devctl);
    
#line 6355 
    pcie_capability_write_word(us_dev,8,(unsigned short)((int)devctl & 65534));
    
#line 6358 
    pci_save_state(pdev);
    
#line 6359 
    pci_prepare_to_sleep(pdev);
    
#line 6361 
    pcie_capability_write_word(us_dev,8,(unsigned short)((int)devctl));
  }
  else ;
  
#line 6364 
  __retres = 0;
  return_label: 
#line 6364 
                return __retres;
}


#line 6375  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void __e1000e_disable_aspm(struct pci_dev *pdev, u16 state, int locked)
{
  u16 pdev_aspmc;
  u16 parent_aspmc;
  char *tmp;
  char *tmp_0;
  
#line 6377 
  struct pci_dev *parent = (pdev->bus)->self;
  
#line 6378 
  u16 aspm_dis_mask = (unsigned short)0U;
  
#line 6381 
  switch ((int)state) {
    case 1: 
#line 6382 
    ;
    case 3: 
#line 6383 
    ;
    
#line 6384 
    aspm_dis_mask = (unsigned short)((unsigned int)aspm_dis_mask | 1U);
    case 2: 
#line 6386 
    ;
    
#line 6387 
    aspm_dis_mask = (unsigned short)((unsigned int)aspm_dis_mask | 2U);
    
#line 6388 
    goto ldv_57588;
    default: 
#line 6389 
    ;
    
#line 6390 
    goto return_label;
  }
  ldv_57588: 
#line 6393 
  ;
  
#line 6393 
  pcie_capability_read_word(pdev,16,& pdev_aspmc);
  
#line 6394 
  pdev_aspmc = (unsigned short)((unsigned int)pdev_aspmc & 3U);
  
#line 6396 
  if (parent != (struct pci_dev *)0) {
    
#line 6397 
    pcie_capability_read_word(parent,16,& parent_aspmc);
    
#line 6399 
    parent_aspmc = (unsigned short)((unsigned int)parent_aspmc & 3U);
  }
  else ;
  
#line 6403 
  if ((unsigned int)((int)pdev_aspmc & (int)aspm_dis_mask) == 0U && (parent == (struct pci_dev *)0 || (unsigned int)((int)parent_aspmc & (int)aspm_dis_mask) == 0U)) 
    
#line 6405 
    goto return_label; else ;
  
#line 6407 
  if ((((int)aspm_dis_mask & (int)pdev_aspmc) & 2) != 0) 
#line 6407 
                                                         tmp = (char *)"L1"; else 
                                                                    
#line 6407 
                                                                    tmp = (char *)"";
  
#line 6407 
  if ((((int)aspm_dis_mask & (int)pdev_aspmc) & 1) != 0) 
#line 6407 
                                                         tmp_0 = (char *)"L0s"; else 
                                                                    
#line 6407 
                                                                    tmp_0 = (char *)"";
  
#line 6407 
  ;
  
#line 6407 
  _dev_info((struct device const *)(& pdev->dev),"Disabling ASPM %s %s\n",tmp_0,tmp);
  
#line 6414 
  if (locked != 0) 
#line 6415 
                   pci_disable_link_state_locked(pdev,(int)state); else 
                                                                    
#line 6417 
                                                                    pci_disable_link_state(pdev,(int)state);
  
#line 6423 
  pcie_capability_read_word(pdev,16,& pdev_aspmc);
  
#line 6424 
  pdev_aspmc = (unsigned short)((unsigned int)pdev_aspmc & 3U);
  
#line 6426 
  if ((unsigned int)((int)aspm_dis_mask & (int)pdev_aspmc) == 0U) 
#line 6427 
                                                                  goto return_label; else ;
  
#line 6433 
  pcie_capability_clear_word(pdev,16,(unsigned short)((int)aspm_dis_mask));
  
#line 6435 
  if (parent != (struct pci_dev *)0) 
#line 6436 
                                     pcie_capability_clear_word(parent,16,(unsigned short)((int)aspm_dis_mask)); else ;
  return_label: 
#line 6437 
                return;
}


#line 6448  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_disable_aspm(struct pci_dev *pdev, u16 state)
{
  
#line 6450 
  __e1000e_disable_aspm(pdev,(unsigned short)((int)state),0);
  
#line 6451 
  return;
}


#line 6461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000e_disable_aspm_locked(struct pci_dev *pdev, u16 state)
{
  
#line 6463 
  __e1000e_disable_aspm(pdev,(unsigned short)((int)state),1);
  
#line 6464 
  return;
}


#line 6467  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int __e1000_resume(struct pci_dev *pdev)
{
  int __retres;
  
#line 6469 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 6470 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6471 
  struct e1000_hw *hw = & adapter->hw;
  
#line 6472 
  u16 aspm_disable_flag = (unsigned short)0U;
  
#line 6474 
  if ((adapter->flags2 & 128U) != 0U) 
#line 6475 
                                      aspm_disable_flag = (unsigned short)1U; else ;
  
#line 6476 
  if ((adapter->flags2 & 8U) != 0U) 
#line 6477 
                                    aspm_disable_flag = (unsigned short)((unsigned int)aspm_disable_flag | 2U); else ;
  
#line 6478 
  if ((unsigned int)aspm_disable_flag != 0U) 
#line 6479 
                                             e1000e_disable_aspm_locked(pdev,(unsigned short)((int)aspm_disable_flag)); else ;
  
#line 6481 
  pci_set_master(pdev);
  
#line 6483 
  if (hw->mac.type > (unsigned int)e1000_pchlan) 
#line 6484 
                                                 e1000_resume_workarounds_pchlan(& adapter->hw); else ;
  
#line 6486 
  e1000e_power_up_phy(adapter);
  
#line 6489 
  if ((adapter->flags2 & 2U) != 0U) {
    u16 phy_data;
    
#line 6492 
    e1e_rphy(& adapter->hw,25603U,& phy_data);
    
#line 6493 
    if ((unsigned int)phy_data != 0U) {
      char *tmp_5;
      
#line 6494 
      if (((int)phy_data & 4) == 0) {
        char *tmp_4;
        
#line 6494 
        if (((int)phy_data & 8) == 0) {
          char *tmp_3;
          
#line 6494 
          if (((int)phy_data & 16) == 0) {
            char *tmp_2;
            
#line 6494 
            if (((int)phy_data & 2) == 0) {
              char *tmp_1;
              
#line 6494 
              if (((int)phy_data & 1) != 0) 
#line 6494 
                                            tmp_1 = (char *)"Link Status Change"; else 
                                                                    
#line 6494 
                                                                    tmp_1 = (char *)"other";
              
#line 6494 
              tmp_2 = tmp_1;
            }
            else 
#line 6494 
                 tmp_2 = (char *)"Magic Packet";
            
#line 6494 
            tmp_3 = tmp_2;
          }
          else 
#line 6494 
               tmp_3 = (char *)"Broadcast Packet";
          
#line 6494 
          tmp_4 = tmp_3;
        }
        else 
#line 6494 
             tmp_4 = (char *)"Multicast Packet";
        
#line 6494 
        tmp_5 = tmp_4;
      }
      else 
#line 6494 
           tmp_5 = (char *)"Unicast Packet";
      
#line 6494 
      ;
      
#line 6494 
      netdev_info((struct net_device const *)adapter->netdev,"PHY Wakeup cause - %s\n",tmp_5);
    }
    else ;
    
#line 6502 
    e1e_wphy(& adapter->hw,25603U,(unsigned short)65535);
  }
  else {
    
#line 6504 
    u32 wus = __er32(hw,22544UL);
    
#line 6506 
    if (wus != 0U) {
      char *tmp_11;
      
#line 6507 
      if ((wus & 4U) == 0U) {
        char *tmp_10;
        
#line 6507 
        if ((wus & 8U) == 0U) {
          char *tmp_9;
          
#line 6507 
          if ((wus & 16U) == 0U) {
            char *tmp_8;
            
#line 6507 
            if ((wus & 2U) == 0U) {
              char *tmp_7;
              
#line 6507 
              if ((wus & 1U) != 0U) 
#line 6507 
                                    tmp_7 = (char *)"Link Status Change"; else 
                                                                    
#line 6507 
                                                                    tmp_7 = (char *)"other";
              
#line 6507 
              tmp_8 = tmp_7;
            }
            else 
#line 6507 
                 tmp_8 = (char *)"Magic Packet";
            
#line 6507 
            tmp_9 = tmp_8;
          }
          else 
#line 6507 
               tmp_9 = (char *)"Broadcast Packet";
          
#line 6507 
          tmp_10 = tmp_9;
        }
        else 
#line 6507 
             tmp_10 = (char *)"Multicast Packet";
        
#line 6507 
        tmp_11 = tmp_10;
      }
      else 
#line 6507 
           tmp_11 = (char *)"Unicast Packet";
      
#line 6507 
      ;
      
#line 6507 
      netdev_info((struct net_device const *)adapter->netdev,"MAC Wakeup cause - %s\n",tmp_11);
    }
    else ;
    
#line 6515 
    __ew32(hw,22544UL,4294967295U);
  }
  
#line 6518 
  e1000e_reset(adapter);
  
#line 6520 
  e1000_init_manageability_pt(adapter);
  
#line 6526 
  if ((adapter->flags & 1U) == 0U) 
#line 6527 
                                   e1000e_get_hw_control(adapter); else ;
  
#line 6529 
  __retres = 0;
  
#line 6529 
  return __retres;
}


#line 6533  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_pm_thaw(struct device *dev)
{
  int __retres;
  struct net_device *tmp_0;
  struct pci_dev *tmp;
  bool tmp_3;
  {
    
#line 6535 
    struct device const *__mptr = (struct device const *)dev;
    
#line 6535 
    tmp = (struct pci_dev *)__mptr + 18446744073709551464U;
  }
  
#line 6535 
  tmp_0 = (struct net_device *)pci_get_drvdata(tmp);
  
#line 6535 
  struct net_device *netdev = tmp_0;
  
#line 6536 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6538 
  e1000e_set_interrupt_capability(adapter);
  
#line 6539 
  tmp_3 = netif_running((struct net_device const *)netdev);
  
#line 6539 
  if ((int)tmp_3 != 0) {
    int tmp_2;
    
#line 6540 
    tmp_2 = e1000_request_irq(adapter);
    
#line 6540 
    u32 err = (unsigned int)tmp_2;
    
#line 6542 
    if (err != 0U) {
      
#line 6543 
      __retres = (int)err;
      
#line 6543 
      goto return_label;
    }
    else ;
    
#line 6545 
    e1000e_up(adapter);
  }
  else ;
  
#line 6548 
  netif_device_attach(netdev);
  
#line 6550 
  __retres = 0;
  return_label: 
#line 6550 
                return __retres;
}


#line 6553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_pm_suspend(struct device *dev)
{
  struct pci_dev *tmp;
  int tmp_0;
  {
    
#line 6555 
    struct device const *__mptr = (struct device const *)dev;
    
#line 6555 
    tmp = (struct pci_dev *)__mptr + 18446744073709551464U;
  }
  
#line 6555 
  struct pci_dev *pdev = tmp;
  
#line 6557 
  e1000e_flush_lpic(pdev);
  
#line 6559 
  e1000e_pm_freeze(dev);
  
#line 6561 
  tmp_0 = __e1000_shutdown(pdev,(_Bool)0);
  
#line 6561 
  return tmp_0;
}


#line 6564  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_pm_resume(struct device *dev)
{
  int __retres;
  struct pci_dev *tmp;
  int rc;
  int tmp_0;
  {
    
#line 6566 
    struct device const *__mptr = (struct device const *)dev;
    
#line 6566 
    tmp = (struct pci_dev *)__mptr + 18446744073709551464U;
  }
  
#line 6566 
  struct pci_dev *pdev = tmp;
  
#line 6569 
  rc = __e1000_resume(pdev);
  
#line 6570 
  if (rc != 0) {
    
#line 6571 
    __retres = rc;
    
#line 6571 
    goto return_label;
  }
  else ;
  
#line 6573 
  tmp_0 = e1000e_pm_thaw(dev);
  
#line 6573 
  __retres = tmp_0;
  return_label: 
#line 6573 
                return __retres;
}


#line 6577  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_pm_runtime_idle(struct device *dev)
{
  int __retres;
  struct pci_dev *tmp;
  u16 eee_lp;
  int tmp_3;
  bool tmp_2;
  {
    
#line 6579 
    struct device const *__mptr = (struct device const *)dev;
    
#line 6579 
    tmp = (struct pci_dev *)__mptr + 18446744073709551464U;
  }
  
#line 6579 
  struct pci_dev *pdev = tmp;
  
#line 6580 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 6581 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6584 
  eee_lp = adapter->hw.dev_spec.ich8lan.eee_lp_ability;
  
#line 6586 
  tmp_2 = e1000e_has_link(adapter);
  
#line 6586 
  if (tmp_2) 
#line 6586 
             tmp_3 = 0; else 
#line 6586 
                             tmp_3 = 1;
  
#line 6586 
  if (tmp_3) {
    
#line 6587 
    adapter->hw.dev_spec.ich8lan.eee_lp_ability = eee_lp;
    
#line 6588 
    pm_schedule_suspend(dev,5000U);
  }
  else ;
  
#line 6591 
  __retres = -16;
  
#line 6591 
  return __retres;
}


#line 6594  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_pm_runtime_resume(struct device *dev)
{
  int __retres;
  struct pci_dev *tmp;
  int rc;
  {
    
#line 6596 
    struct device const *__mptr = (struct device const *)dev;
    
#line 6596 
    tmp = (struct pci_dev *)__mptr + 18446744073709551464U;
  }
  
#line 6596 
  struct pci_dev *pdev = tmp;
  
#line 6597 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 6598 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6601 
  rc = __e1000_resume(pdev);
  
#line 6602 
  if (rc != 0) {
    
#line 6603 
    __retres = rc;
    
#line 6603 
    goto return_label;
  }
  else ;
  
#line 6605 
  if ((netdev->flags & 1U) != 0U) 
#line 6606 
                                  rc = e1000e_up(adapter); else ;
  
#line 6608 
  __retres = rc;
  return_label: 
#line 6608 
                return __retres;
}


#line 6611  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000e_pm_runtime_suspend(struct device *dev)
{
  int __retres;
  struct pci_dev *tmp;
  int tmp_5_0;
  {
    
#line 6613 
    struct device const *__mptr = (struct device const *)dev;
    
#line 6613 
    tmp = (struct pci_dev *)__mptr + 18446744073709551464U;
  }
  
#line 6613 
  struct pci_dev *pdev = tmp;
  
#line 6614 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 6615 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6617 
  if ((netdev->flags & 1U) != 0U) {
    int tmp_2;
    
#line 6618 
    int count = 25;
    
#line 6620 
    goto ldv_57656;
    ldv_57655: 
#line 6621 
    ;
    
#line 6621 
    usleep_range(10000UL,20000UL);
    ldv_57656: 
#line 6622 
    ;
    
#line 6620 
    tmp_2 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
    
#line 6620 
    if (tmp_2 != 0) {
      int tmp_3;
      
#line 6620 
      tmp_3 = count;
      
#line 6620 
      count -= 1;
      
#line 6620 
      ;
      
#line 6620 
      if (tmp_3 != 0) 
#line 6622 
                      goto ldv_57655; else 
#line 6625 
                                           goto ldv_57657;
    }
    else 
#line 6625 
         goto ldv_57657;
    ldv_57657: 
#line 6626 
    ;
    {
      int tmp_4;
      
#line 6623 
      tmp_4 = constant_test_bit(1L,(unsigned long const volatile *)(& adapter->state));
      
#line 6623 
      int __ret_warn_on = tmp_4 != 0;
      
#line 6623 
      if ((long)(__ret_warn_on != 0) != 0L) 
#line 6623 
                                            warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c",6623); else ;
      
#line 6623 
      long tmp_5 = (long)(__ret_warn_on != 0);
    }
    
#line 6626 
    e1000e_down(adapter,(_Bool)0);
  }
  else ;
  
#line 6629 
  tmp_5_0 = __e1000_shutdown(pdev,(_Bool)1);
  
#line 6629 
  if (tmp_5_0 != 0) {
    
#line 6630 
    e1000e_pm_runtime_resume(dev);
    
#line 6631 
    __retres = -16;
    
#line 6631 
    goto return_label;
  }
  else ;
  
#line 6634 
  __retres = 0;
  return_label: 
#line 6634 
                return __retres;
}


#line 6638  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_shutdown(struct pci_dev *pdev)
{
  
#line 6640 
  e1000e_flush_lpic(pdev);
  
#line 6642 
  e1000e_pm_freeze(& pdev->dev);
  
#line 6644 
  __e1000_shutdown(pdev,(_Bool)0);
  
#line 6645 
  return;
}


#line 6649  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static irqreturn_t e1000_intr_msix(int irq, void *data)
{
  irqreturn_t __retres;
  
#line 6651 
  struct net_device *netdev = (struct net_device *)data;
  
#line 6652 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6654 
  if (adapter->msix_entries != (struct msix_entry *)0) {
    int vector;
    int msix_irq;
    
#line 6657 
    vector = 0;
    
#line 6658 
    msix_irq = (int)(adapter->msix_entries + vector)->vector;
    
#line 6659 
    disable_irq((unsigned int)msix_irq);
    
#line 6660 
    e1000_intr_msix_rx(msix_irq,(void *)netdev);
    
#line 6661 
    enable_irq((unsigned int)msix_irq);
    
#line 6663 
    vector += 1;
    
#line 6664 
    msix_irq = (int)(adapter->msix_entries + vector)->vector;
    
#line 6665 
    disable_irq((unsigned int)msix_irq);
    
#line 6666 
    e1000_intr_msix_tx(msix_irq,(void *)netdev);
    
#line 6667 
    enable_irq((unsigned int)msix_irq);
    
#line 6669 
    vector += 1;
    
#line 6670 
    msix_irq = (int)(adapter->msix_entries + vector)->vector;
    
#line 6671 
    disable_irq((unsigned int)msix_irq);
    
#line 6672 
    e1000_msix_other(msix_irq,(void *)netdev);
    
#line 6673 
    enable_irq((unsigned int)msix_irq);
  }
  else ;
  
#line 6676 
  __retres = IRQ_HANDLED;
  
#line 6676 
  return __retres;
}


#line 6687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_netpoll(struct net_device *netdev)
{
  
#line 6689 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6691 
  switch (adapter->int_mode) {
    case 2: 
#line 6692 
    ;
    
#line 6693 
    e1000_intr_msix((int)(adapter->pdev)->irq,(void *)netdev);
    
#line 6694 
    goto ldv_57676;
    case 1: 
#line 6695 
    ;
    
#line 6696 
    disable_irq((adapter->pdev)->irq);
    
#line 6697 
    e1000_intr_msi((int)(adapter->pdev)->irq,(void *)netdev);
    
#line 6698 
    enable_irq((adapter->pdev)->irq);
    
#line 6699 
    goto ldv_57676;
    default: 
#line 6700 
    ;
    
#line 6701 
    disable_irq((adapter->pdev)->irq);
    
#line 6702 
    e1000_intr((int)(adapter->pdev)->irq,(void *)netdev);
    
#line 6703 
    enable_irq((adapter->pdev)->irq);
    
#line 6704 
    goto ldv_57676;
  }
  ldv_57676: 
#line 6706 
  ;
  
#line 6707 
  return;
}


#line 6717  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static pci_ers_result_t e1000_io_error_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  pci_ers_result_t __retres;
  bool tmp_1;
  
#line 6720 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 6721 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6723 
  netif_device_detach(netdev);
  
#line 6725 
  if (state == 3U) {
    
#line 6726 
    __retres = 4U;
    
#line 6726 
    goto return_label;
  }
  else ;
  
#line 6728 
  tmp_1 = netif_running((struct net_device const *)netdev);
  
#line 6728 
  if ((int)tmp_1 != 0) 
#line 6729 
                       e1000e_down(adapter,(_Bool)1); else ;
  
#line 6730 
  pci_disable_device(pdev);
  
#line 6733 
  __retres = 3U;
  return_label: 
#line 6733 
                return __retres;
}


#line 6743  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static pci_ers_result_t e1000_io_slot_reset(struct pci_dev *pdev)
{
  int err;
  pci_ers_result_t result;
  
#line 6745 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 6746 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6747 
  struct e1000_hw *hw = & adapter->hw;
  
#line 6748 
  u16 aspm_disable_flag = (unsigned short)0U;
  
#line 6752 
  if ((adapter->flags2 & 128U) != 0U) 
#line 6753 
                                      aspm_disable_flag = (unsigned short)1U; else ;
  
#line 6754 
  if ((adapter->flags2 & 8U) != 0U) 
#line 6755 
                                    aspm_disable_flag = (unsigned short)((unsigned int)aspm_disable_flag | 2U); else ;
  
#line 6756 
  if ((unsigned int)aspm_disable_flag != 0U) 
#line 6757 
                                             e1000e_disable_aspm(pdev,(unsigned short)((int)aspm_disable_flag)); else ;
  
#line 6759 
  err = pci_enable_device_mem(pdev);
  
#line 6760 
  if (err != 0) {
    
#line 6761 
    dev_err((struct device const *)(& pdev->dev),"Cannot re-enable PCI device after reset.\n");
    
#line 6763 
    result = 4U;
  }
  else {
    
#line 6765 
    pdev->state_saved = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
    
#line 6766 
    pci_restore_state(pdev);
    
#line 6767 
    pci_set_master(pdev);
    
#line 6769 
    pci_enable_wake(pdev,3,(_Bool)0);
    
#line 6770 
    pci_enable_wake(pdev,4,(_Bool)0);
    
#line 6772 
    e1000e_reset(adapter);
    
#line 6773 
    __ew32(hw,22544UL,4294967295U);
    
#line 6774 
    result = 5U;
  }
  
#line 6777 
  pci_cleanup_aer_uncorrect_error_status(pdev);
  
#line 6779 
  return result;
}


#line 6790  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_io_resume(struct pci_dev *pdev)
{
  bool tmp_2;
  
#line 6792 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 6793 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6795 
  e1000_init_manageability_pt(adapter);
  
#line 6797 
  tmp_2 = netif_running((struct net_device const *)netdev);
  
#line 6797 
  if ((int)tmp_2 != 0) {
    int tmp_1;
    
#line 6798 
    tmp_1 = e1000e_up(adapter);
    
#line 6798 
    if (tmp_1 != 0) {
      
#line 6799 
      dev_err((struct device const *)(& pdev->dev),"can\'t bring device back up after reset\n");
      
#line 6801 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 6805 
  netif_device_attach(netdev);
  
#line 6811 
  if ((adapter->flags & 1U) == 0U) 
#line 6812 
                                   e1000e_get_hw_control(adapter); else ;
  return_label: 
#line 6813 
                return;
}


#line 6815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_print_device_info(struct e1000_adapter *adapter)
{
  u32 ret_val;
  u8 pba_str[11U];
  char *tmp;
  char *tmp_0;
  s32 tmp_1;
  
#line 6817 
  struct e1000_hw *hw = & adapter->hw;
  
#line 6818 
  struct net_device *netdev = adapter->netdev;
  
#line 6823 
  ;
  
#line 6823 
  if (hw->bus.width == (unsigned int)e1000_bus_width_pcie_x4) 
#line 6823 
                                                              tmp = (char *)"Width x4"; else 
                                                                    
#line 6823 
                                                                    tmp = (char *)"Width x1";
  
#line 6823 
  ;
  
#line 6823 
  netdev_info((struct net_device const *)adapter->netdev,"(PCI Express:2.5GT/s:%s) %pM\n",tmp,netdev->dev_addr);
  
#line 6829 
  if (hw->phy.type == (unsigned int)e1000_phy_ife) 
#line 6829 
                                                   tmp_0 = (char *)"10/100"; else 
                                                                    
#line 6829 
                                                                    tmp_0 = (char *)"1000";
  
#line 6829 
  ;
  
#line 6829 
  netdev_info((struct net_device const *)adapter->netdev,"Intel(R) PRO/%s Network Connection\n",tmp_0);
  
#line 6831 
  tmp_1 = e1000_read_pba_string_generic(hw,(u8 *)(& pba_str),11U);
  
#line 6831 
  ret_val = (unsigned int)tmp_1;
  
#line 6833 
  if (ret_val != 0U) 
#line 6834 
                     strlcpy((char *)(& pba_str),"Unknown",11UL); else ;
  
#line 6835 
  netdev_info((struct net_device const *)adapter->netdev,"MAC: %d, PHY: %d, PBA No: %s\n",(unsigned int)hw->mac.type,(unsigned int)hw->phy.type,(u8 *)(& pba_str));
  
#line 6836 
  return;
}


#line 6839  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_eeprom_checks(struct e1000_adapter *adapter)
{
  int ret_val;
  
#line 6841 
  struct e1000_hw *hw = & adapter->hw;
  
#line 6843 
  u16 buf = (unsigned short)0U;
  
#line 6845 
  if (hw->mac.type != (unsigned int)e1000_82573) 
#line 6846 
                                                 goto return_label; else ;
  
#line 6848 
  ret_val = e1000_read_nvm(hw,(unsigned short)15,(unsigned short)1,& buf);
  
#line 6849 
  u16 *tmp = & buf;
  
#line 6850 
  if (ret_val == 0 && ((int)buf & 1) == 0) 
#line 6852 
                                           dev_warn((struct device const *)(& (adapter->pdev)->dev),"Warning: detected DSPD enabled in EEPROM\n"); else ;
  return_label: 
#line 6854 
                return;
}


#line 6857  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static netdev_features_t e1000_fix_features(struct net_device *netdev, netdev_features_t features)
{
  
#line 6860 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6861 
  struct e1000_hw *hw = & adapter->hw;
  
#line 6864 
  if (hw->mac.type > (unsigned int)e1000_pchlan && netdev->mtu > 1500U) 
    
#line 6865 
    features &= 18446743936270598143ULL; else ;
  
#line 6867 
  return features;
}


#line 6870  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_set_features(struct net_device *netdev, netdev_features_t features)
{
  int __retres;
  bool tmp_0;
  
#line 6873 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 6874 
  netdev_features_t changed = netdev->features ^ features;
  
#line 6876 
  if ((changed & 1114112ULL) != 0ULL) 
#line 6877 
                                      adapter->flags |= 536870912U; else ;
  
#line 6879 
  if ((changed & 438086664576ULL) == 0ULL) {
    
#line 6882 
    __retres = 0;
    
#line 6882 
    goto return_label;
  }
  else ;
  
#line 6884 
  if ((changed & 137438953472ULL) != 0ULL) 
    
#line 6885 
    if ((features & 137438953472ULL) != 0ULL) 
#line 6886 
                                              adapter->flags2 &= 4294967294U;
    else 
      
#line 6891 
      if ((adapter->flags2 & 4096U) != 0U) 
#line 6892 
                                           adapter->flags2 |= 1U; else 
                                                                    
#line 6894 
                                                                    adapter->flags2 &= 4294967294U;
  else ;
  
#line 6898 
  netdev->features = features;
  
#line 6900 
  tmp_0 = netif_running((struct net_device const *)netdev);
  
#line 6900 
  if ((int)tmp_0 != 0) 
#line 6901 
                       e1000e_reinit_locked(adapter); else 
#line 6903 
                                                           e1000e_reset(adapter);
  
#line 6905 
  __retres = 0;
  return_label: 
#line 6905 
                return __retres;
}


#line 6908  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static struct net_device_ops const e1000e_netdev_ops = {.ndo_init = (int (*)(struct net_device *))0, .ndo_uninit = (void (*)(struct net_device *))0, .ndo_open = & e1000_open, .ndo_stop = & e1000_close, .ndo_start_xmit = & e1000_xmit_frame, .ndo_select_queue = (u16 (*)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)))0, .ndo_change_rx_flags = (void (*)(struct net_device *, int ))0, .ndo_set_rx_mode = & e1000e_set_rx_mode, .ndo_set_mac_address = & e1000_set_mac, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & e1000_ioctl, .ndo_set_config = (int (*)(struct net_device *, struct ifmap *))0, .ndo_change_mtu = & e1000_change_mtu, .ndo_neigh_setup = (int (*)(struct net_device *, struct neigh_parms *))0, .ndo_tx_timeout = & e1000_tx_timeout, .ndo_get_stats64 = & e1000e_get_stats64, .ndo_get_stats = (struct net_device_stats *(*)(struct net_device *))0, .ndo_vlan_rx_add_vid = & e1000_vlan_rx_add_vid, .ndo_vlan_rx_kill_vid = & e1000_vlan_rx_kill_vid, .ndo_poll_controller = & e1000_netpoll, .ndo_netpoll_setup = (int (*)(struct net_device *, struct netpoll_info *))0, .ndo_netpoll_cleanup = (void (*)(struct net_device *))0, .ndo_busy_poll = (int (*)(struct napi_struct *))0, .ndo_set_vf_mac = (int (*)(struct net_device *, int , u8 *))0, .ndo_set_vf_vlan = (int (*)(struct net_device *, int , u16 , u8 ))0, .ndo_set_vf_rate = (int (*)(struct net_device *, int , int , int ))0, .ndo_set_vf_spoofchk = (int (*)(struct net_device *, int , bool ))0, .ndo_get_vf_config = (int (*)(struct net_device *, int , struct ifla_vf_info *))0, .ndo_set_vf_link_state = (int (*)(struct net_device *, int , int ))0, .ndo_get_vf_stats = (int (*)(struct net_device *, int , struct ifla_vf_stats *))0, .ndo_set_vf_port = (int (*)(struct net_device *, int , struct nlattr **))0, .ndo_get_vf_port = (int (*)(struct net_device *, int , struct sk_buff *))0, .ndo_set_vf_rss_query_en = (int (*)(struct net_device *, int , bool ))0, .ndo_setup_tc = (int (*)(struct net_device *, u8 ))0, .ndo_fcoe_enable = (int (*)(struct net_device *))0, .ndo_fcoe_disable = (int (*)(struct net_device *))0, .ndo_fcoe_ddp_setup = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_ddp_done = (int (*)(struct net_device *, u16 ))0, .ndo_fcoe_ddp_target = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_get_hbainfo = (int (*)(struct net_device *, struct netdev_fcoe_hbainfo *))0, .ndo_fcoe_get_wwn = (int (*)(struct net_device *, u64 *, int ))0, .ndo_rx_flow_steer = (int (*)(struct net_device *, struct sk_buff const *, u16 , u32 ))0, .ndo_add_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_del_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_fix_features = & e1000_fix_features, .ndo_set_features = & e1000_set_features, .ndo_neigh_construct = (int (*)(struct neighbour *))0, .ndo_neigh_destroy = (void (*)(struct neighbour *))0, .ndo_fdb_add = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ))0, .ndo_fdb_del = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ))0, .ndo_fdb_dump = (int (*)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ))0, .ndo_bridge_setlink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_bridge_getlink = (int (*)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ))0, .ndo_bridge_dellink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_change_carrier = (int (*)(struct net_device *, bool ))0, .ndo_get_phys_port_id = (int (*)(struct net_device *, struct netdev_phys_item_id *))0, .ndo_get_phys_port_name = (int (*)(struct net_device *, char *, size_t ))0, .ndo_add_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_del_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_dfwd_add_station = (void *(*)(struct net_device *, struct net_device *))0, .ndo_dfwd_del_station = (void (*)(struct net_device *, void *))0, .ndo_dfwd_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *, void *))0, .ndo_get_lock_subclass = (int (*)(struct net_device *))0, .ndo_features_check = (netdev_features_t (*)(struct sk_buff *, struct net_device *, netdev_features_t ))0, .ndo_set_tx_maxrate = (int (*)(struct net_device *, int , u32 ))0, .ndo_get_iflink = (int (*)(struct net_device const *))0};

#line 6940  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_probe(struct pci_dev *pdev, struct pci_device_id const *ent)
{
  int __retres;
  struct net_device *netdev;
  struct e1000_adapter *adapter;
  struct e1000_hw *hw;
  resource_size_t mmio_start;
  resource_size_t mmio_len;
  resource_size_t flash_start;
  resource_size_t flash_len;
  int cards_found;
  int bars;
  int i;
  int err;
  int pci_using_dac;
  char const *tmp_0;
  int tmp_1;
  bool tmp_3;
  s32 tmp_4;
  s32 tmp_5;
  int tmp_7;
  bool tmp_6;
  bool tmp_10;
  int tmp_12;
  
#line 6945 
  struct e1000_info const *ei = e1000_info_tbl[ent->driver_data];
  
#line 6949 
  u16 aspm_disable_flag = (unsigned short)0U;
  
#line 6951 
  u16 eeprom_data = (unsigned short)0U;
  
#line 6952 
  u16 eeprom_apme_mask = (unsigned short)1024U;
  
#line 6953 
  s32 rval = 0;
  
#line 6955 
  if ((ei->flags2 & 128U) != 0U) 
#line 6956 
                                 aspm_disable_flag = (unsigned short)1U; else ;
  
#line 6957 
  if ((ei->flags2 & 8U) != 0U) 
#line 6958 
                               aspm_disable_flag = (unsigned short)((unsigned int)aspm_disable_flag | 2U); else ;
  
#line 6959 
  if ((unsigned int)aspm_disable_flag != 0U) 
#line 6960 
                                             e1000e_disable_aspm(pdev,(unsigned short)((int)aspm_disable_flag)); else ;
  
#line 6962 
  err = pci_enable_device_mem(pdev);
  
#line 6963 
  if (err != 0) {
    
#line 6964 
    __retres = err;
    
#line 6964 
    goto return_label;
  }
  else ;
  
#line 6966 
  pci_using_dac = 0;
  
#line 6967 
  err = dma_set_mask_and_coherent(& pdev->dev,18446744073709551615ULL);
  
#line 6968 
  if (err == 0) 
#line 6969 
                pci_using_dac = 1;
  else {
    
#line 6971 
    err = dma_set_mask_and_coherent(& pdev->dev,4294967295ULL);
    
#line 6972 
    if (err != 0) {
      
#line 6973 
      dev_err((struct device const *)(& pdev->dev),"No usable DMA configuration, aborting\n");
      
#line 6975 
      goto err_dma;
    }
    else ;
  }
  
#line 6979 
  bars = pci_select_bars(pdev,512UL);
  
#line 6980 
  err = pci_request_selected_regions_exclusive(pdev,bars,(char const *)(& e1000e_driver_name));
  
#line 6982 
  if (err != 0) 
#line 6983 
                goto err_pci_reg; else ;
  
#line 6986 
  pci_enable_pcie_error_reporting(pdev);
  
#line 6988 
  pci_set_master(pdev);
  
#line 6990 
  err = pci_save_state(pdev);
  
#line 6991 
  if (err != 0) 
#line 6992 
                goto err_alloc_etherdev; else ;
  
#line 6994 
  err = -12;
  
#line 6995 
  netdev = ldv_alloc_etherdev_mqs_114(13376,1U,1U);
  
#line 6996 
  if (netdev == (struct net_device *)0) 
#line 6997 
                                        goto err_alloc_etherdev; else ;
  
#line 6999 
  netdev->dev.parent = & pdev->dev;
  
#line 7001 
  netdev->irq = (int)pdev->irq;
  
#line 7003 
  pci_set_drvdata(pdev,(void *)netdev);
  
#line 7004 
  adapter = (struct e1000_adapter *)netdev_priv((struct net_device const *)netdev);
  
#line 7005 
  hw = & adapter->hw;
  
#line 7006 
  adapter->netdev = netdev;
  
#line 7007 
  adapter->pdev = pdev;
  
#line 7008 
  adapter->ei = ei;
  
#line 7009 
  adapter->pba = ei->pba;
  
#line 7010 
  adapter->flags = ei->flags;
  
#line 7011 
  adapter->flags2 = ei->flags2;
  
#line 7012 
  adapter->hw.adapter = adapter;
  
#line 7013 
  adapter->hw.mac.type = ei->mac;
  
#line 7014 
  adapter->max_hw_frame_size = ei->max_hw_frame_size;
  
#line 7015 
  adapter->msg_enable = netif_msg_init(debug,7);
  
#line 7017 
  mmio_start = pdev->resource[0].start;
  
#line 7018 
  if (pdev->resource[0].start != 0ULL || pdev->resource[0].end != pdev->resource[0].start) 
    
#line 7018 
    mmio_len = (pdev->resource[0].end - pdev->resource[0].start) + 1ULL; else 
                                                                    
#line 7018 
                                                                    mmio_len = 0ULL;
  
#line 7020 
  err = -5;
  
#line 7021 
  adapter->hw.hw_addr = ioremap(mmio_start,(unsigned long)mmio_len);
  
#line 7022 
  if (adapter->hw.hw_addr == (void *)0) 
#line 7023 
                                        goto err_ioremap; else ;
  
#line 7025 
  if (((adapter->flags & 2U) != 0U && (pdev->resource[1].flags & 512UL) != 0UL) && hw->mac.type <= (unsigned int)e1000_pch_lpt) {
    
#line 7028 
    flash_start = pdev->resource[1].start;
    
#line 7029 
    if (pdev->resource[1].start != 0ULL || pdev->resource[1].end != pdev->resource[1].start) 
      
#line 7029 
      flash_len = (pdev->resource[1].end - pdev->resource[1].start) + 1ULL; else 
                                                                    
#line 7029 
                                                                    flash_len = 0ULL;
    
#line 7030 
    adapter->hw.flash_address = ioremap(flash_start,(unsigned long)flash_len);
    
#line 7031 
    if (adapter->hw.flash_address == (void *)0) 
#line 7032 
                                                goto err_flashmap; else ;
  }
  else ;
  
#line 7036 
  if ((adapter->flags2 & 32U) != 0U) 
#line 7037 
                                     adapter->eee_advert = (unsigned short)6U; else ;
  
#line 7040 
  netdev->netdev_ops = & e1000e_netdev_ops;
  
#line 7041 
  e1000e_set_ethtool_ops(netdev);
  
#line 7042 
  netdev->watchdog_timeo = 1250;
  
#line 7043 
  netif_napi_add(netdev,& adapter->napi,& e1000e_poll,64);
  
#line 7044 
  tmp_0 = pci_name((struct pci_dev const *)pdev);
  
#line 7044 
  ;
  
#line 7044 
  strlcpy((char *)(& netdev->name),tmp_0,16UL);
  
#line 7046 
  netdev->mem_start = (unsigned long)mmio_start;
  
#line 7047 
  netdev->mem_end = (unsigned long)(mmio_start + mmio_len);
  
#line 7049 
  tmp_1 = cards_found;
  
#line 7049 
  cards_found += 1;
  
#line 7049 
  adapter->bd_number = (unsigned int)tmp_1;
  
#line 7051 
  e1000e_check_options(adapter);
  
#line 7054 
  err = e1000_sw_init(adapter);
  
#line 7055 
  if (err != 0) 
#line 7056 
                goto err_sw_init; else ;
  
#line 7058 
  memcpy((void *)(& hw->mac.ops),(void const *)ei->mac_ops,184UL);
  
#line 7059 
  memcpy((void *)(& hw->nvm.ops),(void const *)ei->nvm_ops,64UL);
  
#line 7060 
  memcpy((void *)(& hw->phy.ops),(void const *)ei->phy_ops,176UL);
  
#line 7062 
  err = (*(ei->get_variants))(adapter);
  
#line 7063 
  if (err != 0) 
#line 7064 
                goto err_hw_init; else ;
  
#line 7066 
  if (((adapter->flags & 512U) != 0U && (adapter->flags & 256U) != 0U) && hw->mac.type <= (unsigned int)e1000_pch_lpt) 
    
#line 7069 
    e1000e_write_protect_nvm_ich8lan(& adapter->hw); else ;
  
#line 7071 
  (*(hw->mac.ops.get_bus_info))(& adapter->hw);
  
#line 7073 
  adapter->hw.phy.autoneg_wait_to_complete = (_Bool)0;
  
#line 7076 
  if (adapter->hw.phy.media_type == (unsigned int)e1000_media_type_copper) {
    
#line 7077 
    adapter->hw.phy.mdix = (unsigned char)0U;
    
#line 7078 
    adapter->hw.phy.disable_polarity_correction = (_Bool)0;
    
#line 7079 
    adapter->hw.phy.ms_type = e1000_ms_hw_default;
  }
  else ;
  
#line 7082 
  if (hw->phy.ops.check_reset_block != (s32 (*)(struct e1000_hw *))0) {
    s32 tmp_2;
    
#line 7082 
    tmp_2 = (*(hw->phy.ops.check_reset_block))(hw);
    
#line 7082 
    if (tmp_2 != 0) 
#line 7083 
                    _dev_info((struct device const *)(& pdev->dev),"PHY reset is blocked due to SOL/IDER session.\n"); else ;
  }
  else ;
  
#line 7087 
  netdev->features = 25770918281ULL;
  
#line 7097 
  netdev->hw_features = netdev->features;
  
#line 7098 
  netdev->hw_features |= 137438953472ULL;
  
#line 7099 
  netdev->priv_flags |= 524288U;
  
#line 7100 
  netdev->hw_features |= 274877906944ULL;
  
#line 7102 
  if ((adapter->flags & 4U) != 0U) 
#line 7103 
                                   netdev->features |= 512ULL; else ;
  
#line 7105 
  netdev->vlan_features |= 1114121ULL;
  
#line 7110 
  netdev->priv_flags |= 131072U;
  
#line 7112 
  if (pci_using_dac != 0) {
    
#line 7113 
    netdev->features |= 32ULL;
    
#line 7114 
    netdev->vlan_features |= 32ULL;
  }
  else ;
  
#line 7117 
  tmp_3 = e1000e_enable_mng_pass_thru(& adapter->hw);
  
#line 7117 
  if ((int)tmp_3 != 0) 
#line 7118 
                       adapter->flags |= 1048576U; else ;
  
#line 7123 
  (*(adapter->hw.mac.ops.reset_hw))(& adapter->hw);
  
#line 7128 
  i = 0;
  ldv_57755: 
#line 7129 
  ;
  
#line 7129 
  tmp_4 = e1000_validate_nvm_checksum(& adapter->hw);
  
#line 7129 
  if (tmp_4 >= 0) 
#line 7130 
                  goto ldv_57753; else ;
  
#line 7131 
  if (i == 2) {
    
#line 7132 
    dev_err((struct device const *)(& pdev->dev),"The NVM Checksum Is Not Valid\n");
    
#line 7133 
    err = -5;
    
#line 7134 
    goto err_eeprom;
  }
  else ;
  
#line 7128 
  i += 1;
  
#line 7129 
  goto ldv_57755;
  ldv_57753: 
#line 7130 
  ;
  
#line 7138 
  e1000_eeprom_checks(adapter);
  
#line 7141 
  tmp_5 = e1000e_read_mac_addr(& adapter->hw);
  
#line 7141 
  if (tmp_5 != 0) 
#line 7142 
                  dev_err((struct device const *)(& pdev->dev),"NVM Read Error while reading MAC address\n"); else ;
  
#line 7145 
  memcpy((void *)netdev->dev_addr,(void const *)(& adapter->hw.mac.addr),(unsigned long)netdev->addr_len);
  
#line 7147 
  tmp_6 = is_valid_ether_addr((u8 const *)netdev->dev_addr);
  
#line 7147 
  if (tmp_6) 
#line 7147 
             tmp_7 = 0; else 
#line 7147 
                             tmp_7 = 1;
  
#line 7147 
  if (tmp_7) {
    
#line 7148 
    dev_err((struct device const *)(& pdev->dev),"Invalid MAC Address: %pM\n",netdev->dev_addr);
    
#line 7150 
    err = -5;
    
#line 7151 
    goto err_eeprom;
  }
  else ;
  {
    struct lock_class_key __key;
    
#line 7154 
    init_timer_key(& adapter->watchdog_timer,0U,"(&adapter->watchdog_timer)",& __key);
  }
  
#line 7155 
  adapter->watchdog_timer.function = & e1000_watchdog;
  
#line 7156 
  adapter->watchdog_timer.data = (unsigned long)adapter;
  {
    struct lock_class_key __key_0;
    
#line 7158 
    init_timer_key(& adapter->phy_info_timer,0U,"(&adapter->phy_info_timer)",& __key_0);
  }
  
#line 7159 
  adapter->phy_info_timer.function = & e1000_update_phy_info;
  
#line 7160 
  adapter->phy_info_timer.data = (unsigned long)adapter;
  {
    struct lock_class_key __key_1;
    
#line 7162 
    __init_work(& adapter->reset_task,0);
    
#line 7162 
    atomic_long_t __constr_expr_38 = {.counter = WORK_STRUCT_NO_POOL_0};
    
#line 7162 
    adapter->reset_task.data = __constr_expr_38;
    
#line 7162 
    lockdep_init_map(& adapter->reset_task.lockdep_map,"(&adapter->reset_task)",& __key_1,0);
    
#line 7162 
    INIT_LIST_HEAD(& adapter->reset_task.entry);
    
#line 7162 
    adapter->reset_task.func = & e1000_reset_task;
  }
  {
    struct lock_class_key __key_2;
    
#line 7163 
    __init_work(& adapter->watchdog_task,0);
    
#line 7163 
    atomic_long_t __constr_expr_39 = {.counter = WORK_STRUCT_NO_POOL_0};
    
#line 7163 
    adapter->watchdog_task.data = __constr_expr_39;
    
#line 7163 
    lockdep_init_map(& adapter->watchdog_task.lockdep_map,"(&adapter->watchdog_task)",& __key_2,0);
    
#line 7163 
    INIT_LIST_HEAD(& adapter->watchdog_task.entry);
    
#line 7163 
    adapter->watchdog_task.func = & e1000_watchdog_task;
  }
  {
    struct lock_class_key __key_3;
    
#line 7164 
    __init_work(& adapter->downshift_task,0);
    
#line 7164 
    atomic_long_t __constr_expr_40 = {.counter = WORK_STRUCT_NO_POOL_0};
    
#line 7164 
    adapter->downshift_task.data = __constr_expr_40;
    
#line 7164 
    lockdep_init_map(& adapter->downshift_task.lockdep_map,"(&adapter->downshift_task)",& __key_3,0);
    
#line 7164 
    INIT_LIST_HEAD(& adapter->downshift_task.entry);
    
#line 7164 
    adapter->downshift_task.func = & e1000e_downshift_workaround;
  }
  {
    struct lock_class_key __key_4;
    
#line 7165 
    __init_work(& adapter->update_phy_task,0);
    
#line 7165 
    atomic_long_t __constr_expr_41 = {.counter = WORK_STRUCT_NO_POOL_0};
    
#line 7165 
    adapter->update_phy_task.data = __constr_expr_41;
    
#line 7165 
    lockdep_init_map(& adapter->update_phy_task.lockdep_map,"(&adapter->update_phy_task)",& __key_4,0);
    
#line 7165 
    INIT_LIST_HEAD(& adapter->update_phy_task.entry);
    
#line 7165 
    adapter->update_phy_task.func = & e1000e_update_phy_task;
  }
  {
    struct lock_class_key __key_5;
    
#line 7166 
    __init_work(& adapter->print_hang_task,0);
    
#line 7166 
    atomic_long_t __constr_expr_42 = {.counter = WORK_STRUCT_NO_POOL_0};
    
#line 7166 
    adapter->print_hang_task.data = __constr_expr_42;
    
#line 7166 
    lockdep_init_map(& adapter->print_hang_task.lockdep_map,"(&adapter->print_hang_task)",& __key_5,0);
    
#line 7166 
    INIT_LIST_HEAD(& adapter->print_hang_task.entry);
    
#line 7166 
    adapter->print_hang_task.func = & e1000_print_hw_hang;
  }
  
#line 7169 
  adapter->hw.mac.autoneg = (_Bool)1;
  
#line 7170 
  adapter->fc_autoneg = (_Bool)1;
  
#line 7171 
  adapter->hw.fc.requested_mode = e1000_fc_default;
  
#line 7172 
  adapter->hw.fc.current_mode = e1000_fc_default;
  
#line 7173 
  adapter->hw.phy.autoneg_advertised = (unsigned short)47U;
  
#line 7178 
  if ((adapter->flags & 32768U) != 0U) {
    u32 tmp_8;
    
#line 7180 
    tmp_8 = __er32(hw,22528UL);
    
#line 7180 
    eeprom_data = (unsigned short)tmp_8;
    
#line 7181 
    eeprom_apme_mask = (unsigned short)1U;
    
#line 7182 
    if (hw->mac.type > (unsigned int)e1000_ich10lan && ((int)eeprom_data & 256) != 0) 
      
#line 7184 
      adapter->flags2 |= 2U; else ;
  }
  else 
    
#line 7185 
    if ((adapter->flags & 65536U) != 0U) 
      
#line 7186 
      if ((adapter->flags & 131072U) != 0U && (unsigned int)adapter->hw.bus.func == 1U) 
        
#line 7188 
        rval = e1000_read_nvm(& adapter->hw,(unsigned short)20,(unsigned short)1,& eeprom_data); else 
                                                                    
#line 7192 
                                                                    rval = e1000_read_nvm(& adapter->hw,(unsigned short)36,(unsigned short)1,& eeprom_data);
    else ;
  
#line 7198 
  if (rval != 0) {
    
#line 7199 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_probe", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c", .format = "NVM read error getting WoL initial values: %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))7199U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 7199 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 7199 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"NVM read error getting WoL initial values: %d\n",rval); else ;
  }
  else 
    
#line 7200 
    if ((unsigned int)((int)eeprom_data & (int)eeprom_apme_mask) != 0U) 
      
#line 7201 
      adapter->eeprom_wol |= 2U; else ;
  
#line 7207 
  if ((adapter->flags & 8U) == 0U) 
#line 7208 
                                   adapter->eeprom_wol = 0U; else ;
  
#line 7211 
  adapter->wol = adapter->eeprom_wol;
  
#line 7214 
  if (adapter->wol != 0U || (adapter->flags & 1048576U) != 0U) 
#line 7216 
                                                               device_wakeup_enable(& pdev->dev);
  else {
    bool tmp_9;
    
#line 7214 
    tmp_9 = (*(hw->mac.ops.check_mng_mode))(hw);
    
#line 7214 
    if ((int)tmp_9 != 0) 
#line 7216 
                         device_wakeup_enable(& pdev->dev); else ;
  }
  
#line 7219 
  rval = e1000_read_nvm(& adapter->hw,(unsigned short)5,(unsigned short)1,& adapter->eeprom_vers);
  
#line 7221 
  if (rval != 0) {
    {
      
#line 7222 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_probe", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c", .format = "NVM read error getting EEPROM version: %d\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))7222U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 7222 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 7222 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"NVM read error getting EEPROM version: %d\n",rval); else ;
    }
    
#line 7223 
    adapter->eeprom_vers = (unsigned short)0U;
  }
  else ;
  
#line 7227 
  e1000e_reset(adapter);
  
#line 7233 
  if ((adapter->flags & 1U) == 0U) 
#line 7234 
                                   e1000e_get_hw_control(adapter); else ;
  
#line 7236 
  strlcpy((char *)(& netdev->name),"eth%d",16UL);
  
#line 7237 
  err = ldv_register_netdev_115(netdev);
  
#line 7238 
  if (err != 0) 
#line 7239 
                goto err_register; else ;
  
#line 7242 
  netif_carrier_off(netdev);
  
#line 7245 
  e1000e_ptp_init(adapter);
  
#line 7247 
  e1000_print_device_info(adapter);
  
#line 7249 
  tmp_10 = pci_dev_run_wake(pdev);
  
#line 7249 
  if ((int)tmp_10 != 0) 
#line 7250 
                        pm_runtime_put_noidle(& pdev->dev); else ;
  
#line 7252 
  __retres = 0;
  
#line 7252 
  goto return_label;
  err_register: 
#line 7254 
  ;
  
#line 7255 
  if ((adapter->flags & 1U) == 0U) 
#line 7256 
                                   e1000e_release_hw_control(adapter); else ;
  err_eeprom: 
#line 7257 
  ;
  
#line 7258 
  if (hw->phy.ops.check_reset_block != (s32 (*)(struct e1000_hw *))0) {
    s32 tmp_11;
    
#line 7258 
    tmp_11 = (*(hw->phy.ops.check_reset_block))(hw);
    
#line 7258 
    if (tmp_11 == 0) 
#line 7259 
                     e1000_phy_hw_reset(& adapter->hw); else ;
  }
  else ;
  err_hw_init: 
#line 7260 
  ;
  
#line 7261 
  kfree((void const *)adapter->tx_ring);
  
#line 7262 
  kfree((void const *)adapter->rx_ring);
  err_sw_init: 
#line 7263 
  ;
  
#line 7264 
  if (adapter->hw.flash_address != (void *)0 && hw->mac.type <= (unsigned int)e1000_pch_lpt) 
    
#line 7265 
    iounmap((void volatile *)adapter->hw.flash_address); else ;
  
#line 7266 
  e1000e_reset_interrupt_capability(adapter);
  err_flashmap: 
#line 7267 
  ;
  
#line 7268 
  iounmap((void volatile *)adapter->hw.hw_addr);
  err_ioremap: 
#line 7269 
  ;
  
#line 7270 
  ldv_free_netdev_116(netdev);
  err_alloc_etherdev: 
#line 7271 
  ;
  
#line 7272 
  tmp_12 = pci_select_bars(pdev,512UL);
  
#line 7272 
  ;
  
#line 7272 
  pci_release_selected_regions(pdev,tmp_12);
  err_pci_reg: 
#line 7274 
  ;
  err_dma: 
#line 7275 
  ;
  
#line 7276 
  pci_disable_device(pdev);
  
#line 7277 
  __retres = err;
  return_label: 
#line 7277 
                return __retres;
}


#line 7289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_remove(struct pci_dev *pdev)
{
  int tmp_1;
  bool tmp_2;
  int tmp_3;
  
#line 7291 
  struct net_device *netdev = pci_get_drvdata(pdev);
  
#line 7292 
  struct e1000_adapter *adapter = netdev_priv((struct net_device const *)netdev);
  
#line 7293 
  tmp_1 = constant_test_bit(3L,(unsigned long const volatile *)(& adapter->state));
  
#line 7293 
  bool down_0 = (_Bool)(tmp_1 != 0);
  
#line 7295 
  e1000e_ptp_remove(adapter);
  
#line 7300 
  if (! down_0) 
#line 7301 
                clear_bit(3L,(unsigned long volatile *)(& adapter->state)); else ;
  
#line 7302 
  ldv_del_timer_sync_117(& adapter->watchdog_timer);
  
#line 7303 
  ldv_del_timer_sync_118(& adapter->phy_info_timer);
  
#line 7305 
  cancel_work_sync(& adapter->reset_task);
  
#line 7306 
  cancel_work_sync(& adapter->watchdog_task);
  
#line 7307 
  cancel_work_sync(& adapter->downshift_task);
  
#line 7308 
  cancel_work_sync(& adapter->update_phy_task);
  
#line 7309 
  cancel_work_sync(& adapter->print_hang_task);
  
#line 7311 
  if ((adapter->flags & 16384U) != 0U) {
    
#line 7312 
    cancel_work_sync(& adapter->tx_hwtstamp_work);
    
#line 7313 
    if (adapter->tx_hwtstamp_skb != (struct sk_buff *)0) {
      
#line 7314 
      dev_kfree_skb_any(adapter->tx_hwtstamp_skb);
      
#line 7315 
      adapter->tx_hwtstamp_skb = (struct sk_buff *)0;
    }
    else ;
  }
  else ;
  
#line 7320 
  if (! down_0) 
#line 7321 
                clear_bit(3L,(unsigned long volatile *)(& adapter->state)); else ;
  
#line 7322 
  ldv_unregister_netdev_119(netdev);
  
#line 7324 
  tmp_2 = pci_dev_run_wake(pdev);
  
#line 7324 
  if ((int)tmp_2 != 0) 
#line 7325 
                       pm_runtime_get_noresume(& pdev->dev); else ;
  
#line 7330 
  e1000e_release_hw_control(adapter);
  
#line 7332 
  e1000e_reset_interrupt_capability(adapter);
  
#line 7333 
  kfree((void const *)adapter->tx_ring);
  
#line 7334 
  kfree((void const *)adapter->rx_ring);
  
#line 7336 
  iounmap((void volatile *)adapter->hw.hw_addr);
  
#line 7337 
  if (adapter->hw.flash_address != (void *)0 && adapter->hw.mac.type <= (unsigned int)e1000_pch_lpt) 
    
#line 7339 
    iounmap((void volatile *)adapter->hw.flash_address); else ;
  
#line 7340 
  tmp_3 = pci_select_bars(pdev,512UL);
  
#line 7340 
  ;
  
#line 7340 
  pci_release_selected_regions(pdev,tmp_3);
  
#line 7343 
  ldv_free_netdev_120(netdev);
  
#line 7346 
  pci_disable_pcie_error_reporting(pdev);
  
#line 7348 
  pci_disable_device(pdev);
  
#line 7349 
  return;
}


#line 7352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static struct pci_error_handlers const e1000_err_handler = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& e1000_io_error_detected), .mmio_enabled = (pci_ers_result_t (*)(struct pci_dev *))0, .link_reset = (pci_ers_result_t (*)(struct pci_dev *))0, .slot_reset = & e1000_io_slot_reset, .reset_notify = (void (*)(struct pci_dev *, bool ))0, .resume = & e1000_io_resume};

#line 7358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static struct pci_device_id const e1000_pci_tbl[65U] = {{.vendor = 32902U, .device = 4190U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4191U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4260U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4284U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4261U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4192U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4313U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4314U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4309U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}, {.vendor = 32902U, .device = 4281U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 4221U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 4222U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 4223U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 1UL}, {.vendor = 32902U, .device = 4235U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 2UL}, {.vendor = 32902U, .device = 4236U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 2UL}, {.vendor = 32902U, .device = 4250U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 2UL}, {.vendor = 32902U, .device = 4307U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 3UL}, {.vendor = 32902U, .device = 4342U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 3UL}, {.vendor = 32902U, .device = 5388U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 32902U, .device = 4246U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 5UL}, {.vendor = 32902U, .device = 4282U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 5UL}, {.vendor = 32902U, .device = 4248U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 5UL}, {.vendor = 32902U, .device = 4283U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 5UL}, {.vendor = 32902U, .device = 4172U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 6UL}, {.vendor = 32902U, .device = 4293U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 6UL}, {.vendor = 32902U, .device = 4292U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 6UL}, {.vendor = 32902U, .device = 4170U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 6UL}, {.vendor = 32902U, .device = 4171U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 6UL}, {.vendor = 32902U, .device = 4173U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 6UL}, {.vendor = 32902U, .device = 4169U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 6UL}, {.vendor = 32902U, .device = 5377U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 6UL}, {.vendor = 32902U, .device = 4288U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4290U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4291U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4285U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 7UL}, {.vendor = 32902U, .device = 10572U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4325U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4287U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4341U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4299U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4300U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4301U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4302U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 7UL}, {.vendor = 32902U, .device = 4318U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 8UL}, {.vendor = 32902U, .device = 4319U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 8UL}, {.vendor = 32902U, .device = 5413U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 8UL}, {.vendor = 32902U, .device = 4330U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 9UL}, {.vendor = 32902U, .device = 4331U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 9UL}, {.vendor = 32902U, .device = 4335U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 9UL}, {.vendor = 32902U, .device = 4336U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 9UL}, {.vendor = 32902U, .device = 5378U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 32902U, .device = 5379U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 10UL}, {.vendor = 32902U, .device = 5434U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 11UL}, {.vendor = 32902U, .device = 5435U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 11UL}, {.vendor = 32902U, .device = 5466U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 11UL}, {.vendor = 32902U, .device = 5465U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 11UL}, {.vendor = 32902U, .device = 5536U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 11UL}, {.vendor = 32902U, .device = 5537U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 11UL}, {.vendor = 32902U, .device = 5538U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 11UL}, {.vendor = 32902U, .device = 5539U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 11UL}, {.vendor = 32902U, .device = 5487U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 12UL}, {.vendor = 32902U, .device = 5488U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 12UL}, {.vendor = 32902U, .device = 5559U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 12UL}, {.vendor = 32902U, .device = 5560U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 12UL}, {.vendor = 0U, .device = 0U, .subvendor = 0U, .subdevice = 0U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}};

#line 7442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
struct pci_device_id const __mod_pci__e1000_pci_tbl_device_table[65U];

#line 7444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static struct dev_pm_ops const e1000_pm_ops = {.prepare = (int (*)(struct device *))0, .complete = (void (*)(struct device *))0, .suspend = & e1000e_pm_suspend, .resume = & e1000e_pm_resume, .freeze = & e1000e_pm_freeze, .thaw = & e1000e_pm_thaw, .poweroff = & e1000e_pm_suspend, .restore = & e1000e_pm_resume, .suspend_late = (int (*)(struct device *))0, .resume_early = (int (*)(struct device *))0, .freeze_late = (int (*)(struct device *))0, .thaw_early = (int (*)(struct device *))0, .poweroff_late = (int (*)(struct device *))0, .restore_early = (int (*)(struct device *))0, .suspend_noirq = (int (*)(struct device *))0, .resume_noirq = (int (*)(struct device *))0, .freeze_noirq = (int (*)(struct device *))0, .thaw_noirq = (int (*)(struct device *))0, .poweroff_noirq = (int (*)(struct device *))0, .restore_noirq = (int (*)(struct device *))0, .runtime_suspend = & e1000e_pm_runtime_suspend, .runtime_resume = & e1000e_pm_runtime_resume, .runtime_idle = & e1000e_pm_runtime_idle};

#line 7458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static struct pci_driver e1000_driver = {.node = {.next = (struct list_head *)0, .prev = (struct list_head *)0}, .name = (char const *)(& e1000e_driver_name), .id_table = (struct pci_device_id const *)(& e1000_pci_tbl), .probe = & e1000_probe, .remove = & e1000_remove, .suspend = (int (*)(struct pci_dev *, pm_message_t ))0, .suspend_late = (int (*)(struct pci_dev *, pm_message_t ))0, .resume_early = (int (*)(struct pci_dev *))0, .resume = (int (*)(struct pci_dev *))0, .shutdown = & e1000_shutdown, .sriov_configure = (int (*)(struct pci_dev *, int ))0, .err_handler = & e1000_err_handler, .driver = {.name = (char const *)0, .bus = (struct bus_type *)0, .owner = (struct module *)0, .mod_name = (char const *)0, .suppress_bind_attrs = (_Bool)0, .probe_type = 0, .of_match_table = (struct of_device_id const *)0, .acpi_match_table = (struct acpi_device_id const *)0, .probe = (int (*)(struct device *))0, .remove = (int (*)(struct device *))0, .shutdown = (void (*)(struct device *))0, .suspend = (int (*)(struct device *, pm_message_t ))0, .resume = (int (*)(struct device *))0, .groups = (struct attribute_group const **)0, .pm = & e1000_pm_ops, .p = (struct driver_private *)0}, .dynids = {.lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 0U, .owner_cpu = 0U, .owner = (void *)0, .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char const *)0, .cpu = 0, .ip = 0UL}}}}, .list = {.next = (struct list_head *)0, .prev = (struct list_head *)0}}};

#line 7476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static int e1000_init_module(void)
{
  int ret;
  
#line 7480 
  printk("\001",(char const *)(& e1000e_driver_version));
  
#line 7482 
  printk("\001");
  
#line 7483 
  ret = ldv___pci_register_driver_121(& e1000_driver,& __this_module,"e1000e");
  
#line 7485 
  return ret;
}


#line 7495  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/netdev.c"
static void e1000_exit_module(void)
{
  
#line 7497 
  ldv_pci_unregister_driver_122(& e1000_driver);
  
#line 7498 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int (*ldv_emg_alias_eth_validate_addr_29)(struct net_device *) = & eth_validate_addr;

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
struct pci_driver *ldv_emg_alias_e1000_driver_2 = & e1000_driver;

#line 58  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
struct dev_pm_ops *ldv_emg_alias_e1000_pm_ops_5 = (struct dev_pm_ops *)(& e1000_pm_ops);

#line 61 
int ldv_emg_del_timer_sync(struct timer_list *arg0);


#line 63 
void ldv_emg_free_netdev(struct net_device *arg0);


#line 64 
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);


#line 65 
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0);


#line 66 
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);


#line 67 
void ldv_emg_unregister_netdev(struct net_device *arg0);


#line 69 
int ldv_emg_register_netdev(struct net_device *arg0);


#line 70 
_Bool ldv_emg_schedule_work(struct work_struct *arg0);


#line 71 
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1);


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
enum irqreturn ldv_emg_wrapper_e1000_intr_msi_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 77 
  tmp = e1000_intr_msi(arg0,arg1);
  
#line 77 
  return tmp;
}


#line 81  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_e1000_init_module(void)
{
  int tmp;
  
#line 82 
  tmp = e1000_init_module();
  
#line 82 
  return tmp;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_wrapper_e1000e_pm_runtime_suspend_8(struct device *arg0)
{
  int tmp;
  
#line 86 
  tmp = e1000e_pm_runtime_suspend(arg0);
  
#line 86 
  return tmp;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_wrapper_e1000_vlan_rx_add_vid_27(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  int tmp;
  
#line 91 
  tmp = e1000_vlan_rx_add_vid(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 91 
  return tmp;
}


#line 95  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
enum netdev_tx ldv_emg_wrapper_e1000_xmit_frame_20(struct sk_buff *arg0, struct net_device *arg1)
{
  enum netdev_tx tmp;
  
#line 96 
  tmp = e1000_xmit_frame(arg0,arg1);
  
#line 96 
  return tmp;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_wrapper_e1000_close_2(struct net_device *arg0)
{
  int tmp;
  
#line 101 
  tmp = e1000_close(arg0);
  
#line 101 
  return tmp;
}


#line 105  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_wrapper_e1000e_pm_runtime_idle_4(struct device *arg0)
{
  int tmp;
  
#line 106 
  tmp = e1000e_pm_runtime_idle(arg0);
  
#line 106 
  return tmp;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
void ldv_emg_wrapper_e1000_remove_4(struct pci_dev *arg0)
{
  
#line 111 
  e1000_remove(arg0);
  
#line 112 
  return;
}


#line 115  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
enum irqreturn ldv_emg_wrapper_e1000_intr_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 116 
  tmp = e1000_intr(arg0,arg1);
  
#line 116 
  return tmp;
}


#line 120  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_wrapper_e1000e_pm_thaw_7(struct device *arg0)
{
  int tmp;
  
#line 121 
  tmp = e1000e_pm_thaw(arg0);
  
#line 121 
  return tmp;
}


#line 125  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_wrapper_e1000e_pm_resume_6(struct device *arg0)
{
  int tmp;
  
#line 126 
  tmp = e1000e_pm_resume(arg0);
  
#line 126 
  return tmp;
}


#line 130  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
unsigned long long ldv_emg_wrapper_e1000_fix_features_14(struct net_device *arg0, unsigned long long arg1)
{
  unsigned long long tmp;
  
#line 131 
  tmp = e1000_fix_features(arg0,arg1);
  
#line 131 
  return tmp;
}


#line 135  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
enum irqreturn ldv_emg_wrapper_e1000_intr_msi_test_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 136 
  tmp = e1000_intr_msi_test(arg0,arg1);
  
#line 136 
  return tmp;
}


#line 140  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
void ldv_emg_wrapper_e1000_netpoll_41(struct net_device *arg0)
{
  
#line 141 
  e1000_netpoll(arg0);
  
#line 142 
  return;
}


#line 145  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
void ldv_emg_wrapper_e1000e_set_rx_mode_7(struct net_device *arg0)
{
  
#line 146 
  e1000e_set_rx_mode(arg0);
  
#line 147 
  return;
}


#line 150  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_wrapper_e1000_probe_3(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  int tmp;
  
#line 151 
  tmp = e1000_probe(arg0,(struct pci_device_id const *)arg1);
  
#line 151 
  return tmp;
}


#line 155  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
enum irqreturn ldv_emg_wrapper_e1000_msix_other_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 156 
  tmp = e1000_msix_other(arg0,arg1);
  
#line 156 
  return tmp;
}


#line 160  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_wrapper_e1000e_pm_freeze_3(struct device *arg0)
{
  int tmp;
  
#line 161 
  tmp = e1000e_pm_freeze(arg0);
  
#line 161 
  return tmp;
}


#line 165  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_wrapper_e1000e_pm_suspend_2(struct device *arg0)
{
  int tmp;
  
#line 166 
  tmp = e1000e_pm_suspend(arg0);
  
#line 166 
  return tmp;
}


#line 170  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
void ldv_emg_wrapper_e1000_shutdown_2(struct pci_dev *arg0)
{
  
#line 171 
  e1000_shutdown(arg0);
  
#line 172 
  return;
}


#line 175  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_wrapper_e1000e_pm_runtime_resume_9(struct device *arg0)
{
  int tmp;
  
#line 176 
  tmp = e1000e_pm_runtime_resume(arg0);
  
#line 176 
  return tmp;
}


#line 180  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_wrapper_e1000_open_2(struct net_device *arg0)
{
  int tmp;
  
#line 181 
  tmp = e1000_open(arg0);
  
#line 181 
  return tmp;
}


#line 185  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
enum irqreturn ldv_emg_wrapper_e1000_intr_msix_tx_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 186 
  tmp = e1000_intr_msix_tx(arg0,arg1);
  
#line 186 
  return tmp;
}


#line 190  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_wrapper_e1000_ioctl_28(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  int tmp;
  
#line 191 
  tmp = e1000_ioctl(arg0,arg1,arg2);
  
#line 191 
  return tmp;
}


#line 195  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
enum irqreturn ldv_emg_wrapper_e1000_intr_msix_rx_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 196 
  tmp = e1000_intr_msix_rx(arg0,arg1);
  
#line 196 
  return tmp;
}


#line 200  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
void ldv_emg_e1000_exit_module(void)
{
  
#line 201 
  e1000_exit_module();
  
#line 202 
  return;
}


#line 204  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_wrapper_e1000_vlan_rx_kill_vid_40(struct net_device *arg0, unsigned short arg1, unsigned short arg2)
{
  int tmp;
  
#line 205 
  tmp = e1000_vlan_rx_kill_vid(arg0,(unsigned short)((int)arg1),(unsigned short)((int)arg2));
  
#line 205 
  return tmp;
}


#line 209  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_wrapper_e1000_change_mtu_10(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 210 
  tmp = e1000_change_mtu(arg0,arg1);
  
#line 210 
  return tmp;
}


#line 214  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_wrapper_e1000_set_features_12(struct net_device *arg0, unsigned long long arg1)
{
  int tmp;
  
#line 215 
  tmp = e1000_set_features(arg0,arg1);
  
#line 215 
  return tmp;
}


#line 219  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
void ldv_emg_wrapper_e1000_tx_timeout_23(struct net_device *arg0)
{
  
#line 220 
  e1000_tx_timeout(arg0);
  
#line 221 
  return;
}


#line 224  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
int ldv_emg_wrapper_e1000_set_mac_21(struct net_device *arg0, void *arg1)
{
  int tmp;
  
#line 225 
  tmp = e1000_set_mac(arg0,arg1);
  
#line 225 
  return tmp;
}


#line 283  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void atomic_inc(atomic_t *v)
{
  
#line 286 
  ldv_atomic_inc(v);
  
#line 287 
  return;
}


#line 647  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 650 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 650 
  return tmp;
}


#line 654  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 657 
  tmp = ldv_kzalloc(size,flags);
  
#line 657 
  return tmp;
}


#line 910  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv___ldv_spin_lock_73(spinlock_t *ldv_func_arg1)
{
  
#line 914 
  ldv_spin_model_lock((char *)"systim_lock_of_e1000_adapter");
  
#line 916 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 917 
  return;
}


#line 920  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv_spin_unlock_irqrestore_74(spinlock_t *lock, unsigned long flags)
{
  
#line 924 
  ldv_spin_model_unlock((char *)"systim_lock_of_e1000_adapter");
  
#line 926 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 927 
  return;
}


#line 930  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static bool ldv_schedule_work_75(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 934 
  tmp = ldv_emg_schedule_work(work);
  
#line 934 
  __retres = tmp != 0;
  
#line 934 
  return __retres;
}


#line 938  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static bool ldv_schedule_work_76(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 942 
  tmp = ldv_emg_schedule_work(work);
  
#line 942 
  __retres = tmp != 0;
  
#line 942 
  return __retres;
}


#line 946  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static bool ldv_schedule_work_77(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 950 
  tmp = ldv_emg_schedule_work(work);
  
#line 950 
  __retres = tmp != 0;
  
#line 950 
  return __retres;
}


#line 954  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static bool ldv_schedule_work_78(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 958 
  tmp = ldv_emg_schedule_work(work);
  
#line 958 
  __retres = tmp != 0;
  
#line 958 
  return __retres;
}


#line 962  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static bool ldv_schedule_work_79(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 966 
  tmp = ldv_emg_schedule_work(work);
  
#line 966 
  __retres = tmp != 0;
  
#line 966 
  return __retres;
}


#line 970  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_mod_timer_80(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 974 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 974 
  return tmp;
}


#line 978  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static bool ldv_schedule_work_81(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 982 
  tmp = ldv_emg_schedule_work(work);
  
#line 982 
  __retres = tmp != 0;
  
#line 982 
  return __retres;
}


#line 986  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static bool ldv_schedule_work_82(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 990 
  tmp = ldv_emg_schedule_work(work);
  
#line 990 
  __retres = tmp != 0;
  
#line 990 
  return __retres;
}


#line 994  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_mod_timer_83(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 998 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 998 
  return tmp;
}


#line 1002  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static bool ldv_schedule_work_84(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1006 
  tmp = ldv_emg_schedule_work(work);
  
#line 1006 
  __retres = tmp != 0;
  
#line 1006 
  return __retres;
}


#line 1010  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_mod_timer_85(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1014 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1014 
  return tmp;
}


#line 1018  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_request_irq_86(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1022 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1022 
  return tmp;
}


#line 1026  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_request_irq_87(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1030 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1030 
  return tmp;
}


#line 1034  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_request_irq_88(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1038 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1038 
  return tmp;
}


#line 1042  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_request_irq_89(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1046 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1046 
  return tmp;
}


#line 1050  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_request_irq_90(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1054 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1054 
  return tmp;
}


#line 1058  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv_free_irq_91(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1062 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1063 
  return;
}


#line 1066  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv_free_irq_92(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1070 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1071 
  return;
}


#line 1074  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv_free_irq_93(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1078 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1079 
  return;
}


#line 1082  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv_free_irq_94(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1086 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1087 
  return;
}


#line 1090  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_del_timer_sync_95(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1094 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1094 
  return tmp;
}


#line 1098  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_del_timer_sync_96(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1102 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1102 
  return tmp;
}


#line 1106  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv_spin_lock_97(spinlock_t *lock)
{
  
#line 1110 
  ldv_spin_model_lock((char *)"stats64_lock_of_e1000_adapter");
  
#line 1112 
  spin_lock(lock);
  
#line 1113 
  return;
}


#line 1116  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv_spin_unlock_98(spinlock_t *lock)
{
  
#line 1120 
  ldv_spin_model_unlock((char *)"stats64_lock_of_e1000_adapter");
  
#line 1122 
  spin_unlock(lock);
  
#line 1123 
  return;
}


#line 1126  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_request_irq_99(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1130 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1130 
  return tmp;
}


#line 1134  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv_free_irq_100(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1138 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1139 
  return;
}


#line 1142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static bool ldv_schedule_work_101(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1146 
  tmp = ldv_emg_schedule_work(work);
  
#line 1146 
  __retres = tmp != 0;
  
#line 1146 
  return __retres;
}


#line 1150  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static bool ldv_schedule_work_102(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1154 
  tmp = ldv_emg_schedule_work(work);
  
#line 1154 
  __retres = tmp != 0;
  
#line 1154 
  return __retres;
}


#line 1158  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static bool ldv_schedule_work_103(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1162 
  tmp = ldv_emg_schedule_work(work);
  
#line 1162 
  __retres = tmp != 0;
  
#line 1162 
  return __retres;
}


#line 1166  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_mod_timer_104(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1170 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1170 
  return tmp;
}


#line 1174  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_mod_timer_105(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1178 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1178 
  return tmp;
}


#line 1182  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv_spin_lock_106(spinlock_t *lock)
{
  
#line 1186 
  ldv_spin_model_lock((char *)"stats64_lock_of_e1000_adapter");
  
#line 1188 
  spin_lock(lock);
  
#line 1189 
  return;
}


#line 1192  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv_spin_unlock_107(spinlock_t *lock)
{
  
#line 1196 
  ldv_spin_model_unlock((char *)"stats64_lock_of_e1000_adapter");
  
#line 1198 
  spin_unlock(lock);
  
#line 1199 
  return;
}


#line 1202  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static bool ldv_schedule_work_108(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1206 
  tmp = ldv_emg_schedule_work(work);
  
#line 1206 
  __retres = tmp != 0;
  
#line 1206 
  return __retres;
}


#line 1210  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_mod_timer_109(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1214 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1214 
  return tmp;
}


#line 1218  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static bool ldv_schedule_work_110(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1222 
  tmp = ldv_emg_schedule_work(work);
  
#line 1222 
  __retres = tmp != 0;
  
#line 1222 
  return __retres;
}


#line 1226  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static bool ldv_schedule_work_111(struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1230 
  tmp = ldv_emg_schedule_work(work);
  
#line 1230 
  __retres = tmp != 0;
  
#line 1230 
  return __retres;
}


#line 1234  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv_spin_lock_112(spinlock_t *lock)
{
  
#line 1238 
  ldv_spin_model_lock((char *)"stats64_lock_of_e1000_adapter");
  
#line 1240 
  spin_lock(lock);
  
#line 1241 
  return;
}


#line 1244  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv_spin_unlock_113(spinlock_t *lock)
{
  
#line 1248 
  ldv_spin_model_unlock((char *)"stats64_lock_of_e1000_adapter");
  
#line 1250 
  spin_unlock(lock);
  
#line 1251 
  return;
}


#line 1254  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static struct net_device *ldv_alloc_etherdev_mqs_114(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3)
{
  struct net_device *tmp;
  
#line 1258 
  tmp = ldv_emg_alloc_etherdev_mqs(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
  
#line 1258 
  return tmp;
}


#line 1262  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_register_netdev_115(struct net_device *ldv_func_arg1)
{
  int tmp;
  
#line 1266 
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  
#line 1266 
  return tmp;
}


#line 1270  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv_free_netdev_116(struct net_device *ldv_func_arg1)
{
  
#line 1274 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1275 
  return;
}


#line 1278  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_del_timer_sync_117(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1282 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1282 
  return tmp;
}


#line 1286  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv_del_timer_sync_118(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1290 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1290 
  return tmp;
}


#line 1294  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv_unregister_netdev_119(struct net_device *ldv_func_arg1)
{
  
#line 1298 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 1299 
  return;
}


#line 1302  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv_free_netdev_120(struct net_device *ldv_func_arg1)
{
  
#line 1306 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1307 
  return;
}


#line 1310  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static int ldv___pci_register_driver_121(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3)
{
  int tmp;
  
#line 1314 
  tmp = ldv_emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,(char *)ldv_func_arg3);
  
#line 1314 
  return tmp;
}


#line 1318  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/weaver/.tmp_netdev.c.aux"
static void ldv_pci_unregister_driver_122(struct pci_driver *ldv_func_arg1)
{
  
#line 1322 
  ldv_emg_pci_unregister_driver(ldv_func_arg1);
  
#line 1323 
  return;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_get_bus_info_pcie(struct e1000_hw *hw)
{
  s32 __retres;
  u16 pcie_link_status;
  u16 cap_offset;
  
#line 34 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 35 
  struct e1000_bus_info *bus = & hw->bus;
  
#line 36 
  struct e1000_adapter *adapter = hw->adapter;
  
#line 39 
  cap_offset = (unsigned short)(adapter->pdev)->pcie_cap;
  
#line 40 
  if ((unsigned int)cap_offset == 0U) 
#line 41 
                                      bus->width = e1000_bus_width_unknown;
  else {
    
#line 43 
    pci_read_config_word((struct pci_dev const *)adapter->pdev,(int)cap_offset + 18,& pcie_link_status);
    
#line 46 
    bus->width = (enum e1000_bus_width)(((int)pcie_link_status >> 4) & 63);
  }
  
#line 51 
  (*(mac->ops.set_lan_id))(hw);
  
#line 53 
  __retres = 0;
  
#line 53 
  return __retres;
}


#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000_set_lan_id_multi_port_pcie(struct e1000_hw *hw)
{
  u32 reg;
  
#line 66 
  struct e1000_bus_info *bus = & hw->bus;
  
#line 72 
  reg = __er32(hw,8UL);
  
#line 73 
  bus->func = (unsigned short)((unsigned int)((unsigned short)(reg >> 2)) & 3U);
  
#line 74 
  return;
}


#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000_set_lan_id_single_port(struct e1000_hw *hw)
{
  
#line 84 
  struct e1000_bus_info *bus = & hw->bus;
  
#line 86 
  bus->func = (unsigned short)0U;
  
#line 87 
  return;
}


#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000_clear_vfta_generic(struct e1000_hw *hw)
{
  u32 offset;
  
#line 100 
  offset = 0U;
  
#line 100 
  goto ldv_47544;
  ldv_47543: 
#line 101 
  ;
  
#line 101 
  __ew32(hw,(unsigned long)((offset << 2) + 22016U),0U);
  
#line 102 
  __er32(hw,8UL);
  
#line 100 
  offset += 1U;
  ldv_47544: 
#line 101 
  ;
  
#line 100 
  if (offset <= 127U) 
#line 102 
                      goto ldv_47543; else 
#line 105 
                                           goto ldv_47545;
  ldv_47545: 
#line 106 
  ;
  
#line 107 
  return;
}


#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000_write_vfta_generic(struct e1000_hw *hw, u32 offset, u32 value)
{
  
#line 117 
  __ew32(hw,(unsigned long)((offset << 2) + 22016U),value);
  
#line 118 
  __er32(hw,8UL);
  
#line 119 
  return;
}


#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000e_init_rx_addrs(struct e1000_hw *hw, u16 rar_count)
{
  u32 i;
  
#line 133 
  u8 mac_addr[6U] = {(unsigned char)0U};
  {
    
#line 136 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_init_rx_addrs", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Programming MAC Address into RAR[0]\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))136U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 136 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 136 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Programming MAC Address into RAR[0]\n"); else ;
  }
  
#line 138 
  (*(hw->mac.ops.rar_set))(hw,(u8 *)(& hw->mac.addr),0U);
  {
    
#line 141 
    struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_init_rx_addrs", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Clearing RAR[1-%u]\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))141U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 141 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 141 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Clearing RAR[1-%u]\n",(int)rar_count + -1); else ;
  }
  
#line 142 
  i = 1U;
  
#line 142 
  goto ldv_47561;
  ldv_47560: 
#line 143 
  ;
  
#line 143 
  (*(hw->mac.ops.rar_set))(hw,(u8 *)(& mac_addr),i);
  
#line 142 
  i += 1U;
  ldv_47561: 
#line 143 
  ;
  
#line 142 
  if ((unsigned int)rar_count > i) 
#line 144 
                                   goto ldv_47560; else 
#line 147 
                                                        goto ldv_47562;
  ldv_47562: 
#line 148 
  ;
  
#line 149 
  return;
}


#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000_check_alt_mac_addr_generic(struct e1000_hw *hw)
{
  s32 __retres;
  u32 i;
  s32 ret_val;
  u16 offset;
  u16 nvm_alt_mac_addr_offset;
  u16 nvm_data;
  u8 alt_mac_addr[6U];
  bool tmp;
  
#line 165 
  ret_val = e1000_read_nvm(hw,(unsigned short)3,(unsigned short)1,& nvm_data);
  
#line 166 
  if (ret_val != 0) {
    
#line 167 
    __retres = ret_val;
    
#line 167 
    goto return_label;
  }
  else ;
  
#line 170 
  if (hw->mac.type == (unsigned int)e1000_82573) {
    
#line 171 
    __retres = 0;
    
#line 171 
    goto return_label;
  }
  else ;
  
#line 173 
  ret_val = e1000_read_nvm(hw,(unsigned short)55,(unsigned short)1,& nvm_alt_mac_addr_offset);
  
#line 175 
  if (ret_val != 0) {
    {
      
#line 176 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_check_alt_mac_addr_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))176U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 176 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 176 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"NVM Read Error\n"); else ;
    }
    
#line 177 
    __retres = ret_val;
    
#line 177 
    goto return_label;
  }
  else ;
  
#line 180 
  if ((unsigned int)nvm_alt_mac_addr_offset + 65535U > 65533U) {
    
#line 183 
    __retres = 0;
    
#line 183 
    goto return_label;
  }
  else ;
  
#line 185 
  if ((unsigned int)hw->bus.func == 1U) 
#line 186 
                                        nvm_alt_mac_addr_offset = (unsigned short)((unsigned int)nvm_alt_mac_addr_offset + 3U); else ;
  
#line 187 
  i = 0U;
  
#line 187 
  goto ldv_47576;
  ldv_47575: 
#line 188 
  ;
  
#line 188 
  offset = (unsigned short)((int)((unsigned short)(i >> 1)) + (int)nvm_alt_mac_addr_offset);
  
#line 189 
  ret_val = e1000_read_nvm(hw,(unsigned short)((int)offset),(unsigned short)1,& nvm_data);
  
#line 190 
  if (ret_val != 0) {
    {
      
#line 191 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_check_alt_mac_addr_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))191U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 191 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 191 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"NVM Read Error\n"); else ;
    }
    
#line 192 
    __retres = ret_val;
    
#line 192 
    goto return_label;
  }
  else ;
  
#line 195 
  alt_mac_addr[i] = (unsigned char)nvm_data;
  
#line 196 
  alt_mac_addr[i + 1U] = (unsigned char)((int)nvm_data >> 8);
  
#line 187 
  i += 2U;
  ldv_47576: 
#line 188 
  ;
  
#line 187 
  if (i <= 5U) 
#line 189 
               goto ldv_47575; else 
#line 192 
                                    goto ldv_47577;
  ldv_47577: 
#line 193 
  ;
  
#line 200 
  tmp = is_multicast_ether_addr((u8 const *)(& alt_mac_addr));
  
#line 200 
  if ((int)tmp != 0) {
    {
      
#line 201 
      struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_check_alt_mac_addr_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Ignoring Alternate Mac Address with MC bit set\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))201U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 201 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 201 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Ignoring Alternate Mac Address with MC bit set\n"); else ;
    }
    
#line 202 
    __retres = 0;
    
#line 202 
    goto return_label;
  }
  else ;
  
#line 209 
  (*(hw->mac.ops.rar_set))(hw,(u8 *)(& alt_mac_addr),0U);
  
#line 211 
  __retres = 0;
  return_label: 
#line 211 
                return __retres;
}


#line 214  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
u32 e1000e_rar_get_count_generic(struct e1000_hw *hw)
{
  u32 __retres;
  
#line 216 
  __retres = (unsigned int)hw->mac.rar_entry_count;
  
#line 216 
  return __retres;
}


#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
int e1000e_rar_set_generic(struct e1000_hw *hw, u8 *addr, u32 index)
{
  int __retres;
  u32 rar_low;
  u32 rar_high;
  u32 tmp;
  u32 tmp_0;
  
#line 235 
  rar_low = (((unsigned int)*addr | ((unsigned int)*(addr + 1U) << 8)) | ((unsigned int)*(addr + 2U) << 16)) | ((unsigned int)*(addr + 3U) << 24);
  
#line 238 
  rar_high = (unsigned int)*(addr + 4U) | ((unsigned int)*(addr + 5U) << 8);
  
#line 241 
  if (rar_low != 0U || rar_high != 0U) 
#line 242 
                                       rar_high |= 2147483648U; else ;
  
#line 248 
  ;
  
#line 248 
  if (index <= 15U) 
#line 248 
                    tmp = (index + 2688U) * 8U; else 
#line 248 
                                                     tmp = (index + 2700U) * 8U;
  
#line 248 
  ;
  
#line 248 
  __ew32(hw,(unsigned long)tmp,rar_low);
  
#line 249 
  __er32(hw,8UL);
  
#line 250 
  ;
  
#line 250 
  if (index <= 15U) 
#line 250 
                    tmp_0 = index * 8U + 21508U; else 
#line 250 
                                                      tmp_0 = (index + 536870896U) * 8U + 21732U;
  
#line 250 
  ;
  
#line 250 
  __ew32(hw,(unsigned long)tmp_0,rar_high);
  
#line 251 
  __er32(hw,8UL);
  
#line 253 
  __retres = 0;
  
#line 253 
  return __retres;
}


#line 264  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
static u32 e1000_hash_mc_addr(struct e1000_hw *hw, u8 *mc_addr)
{
  u32 hash_value;
  u32 hash_mask;
  
#line 267 
  u8 bit_shift = (unsigned char)0U;
  
#line 270 
  hash_mask = (unsigned int)((int)hw->mac.mta_reg_count * 32 + -1);
  
#line 275 
  goto ldv_47597;
  ldv_47596: 
#line 276 
  ;
  
#line 276 
  bit_shift = (u8)((int)bit_shift + 1);
  ldv_47597: 
#line 277 
  ;
  
#line 275 
  if (hash_mask >> (int)bit_shift != 255U) 
#line 277 
                                           goto ldv_47596; else 
#line 280 
                                                                goto ldv_47598;
  ldv_47598: 
#line 281 
  ;
  
#line 303 
  switch (hw->mac.mc_filter_type) {
    default: 
#line 304 
    ;
    case (u32)0: 
#line 305 
    ;
    
#line 306 
    goto ldv_47601;
    case (u32)1: 
#line 307 
    ;
    
#line 308 
    bit_shift = (unsigned char)((unsigned int)bit_shift + 1U);
    
#line 309 
    goto ldv_47601;
    case (u32)2: 
#line 310 
    ;
    
#line 311 
    bit_shift = (unsigned char)((unsigned int)bit_shift + 2U);
    
#line 312 
    goto ldv_47601;
    case (u32)3: 
#line 313 
    ;
    
#line 314 
    bit_shift = (unsigned char)((unsigned int)bit_shift + 4U);
    
#line 315 
    goto ldv_47601;
  }
  ldv_47601: 
#line 318 
  ;
  
#line 318 
  hash_value = (unsigned int)(((int)*(mc_addr + 4U) >> (8 - (int)bit_shift)) | ((int)*(mc_addr + 5U) << (int)bit_shift)) & hash_mask;
  
#line 321 
  return hash_value;
}


#line 333  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000e_update_mc_addr_list_generic(struct e1000_hw *hw, u8 *mc_addr_list, u32 mc_addr_count)
{
  u32 hash_value;
  u32 hash_bit;
  u32 hash_reg;
  int i;
  
#line 340 
  memset((void *)(& hw->mac.mta_shadow),0,512UL);
  
#line 343 
  i = 0;
  
#line 343 
  goto ldv_47615;
  ldv_47614: 
#line 344 
  ;
  
#line 344 
  hash_value = e1000_hash_mc_addr(hw,mc_addr_list);
  
#line 346 
  hash_reg = (hash_value >> 5) & (unsigned int)((int)hw->mac.mta_reg_count + -1);
  
#line 347 
  hash_bit = hash_value & 31U;
  
#line 349 
  hw->mac.mta_shadow[hash_reg] |= (unsigned int)(1 << hash_bit);
  
#line 350 
  mc_addr_list += 6U;
  
#line 343 
  i += 1;
  ldv_47615: 
#line 344 
  ;
  
#line 343 
  if ((unsigned int)i < mc_addr_count) 
#line 345 
                                       goto ldv_47614; else 
#line 348 
                                                            goto ldv_47616;
  ldv_47616: 
#line 349 
  ;
  
#line 354 
  i = (int)hw->mac.mta_reg_count + -1;
  
#line 354 
  goto ldv_47618;
  ldv_47617: 
#line 355 
  ;
  
#line 355 
  __ew32(hw,(unsigned long)((i << 2) + 20992),hw->mac.mta_shadow[i]);
  
#line 354 
  i -= 1;
  ldv_47618: 
#line 355 
  ;
  
#line 354 
  if (i >= 0) 
#line 356 
              goto ldv_47617; else 
#line 359 
                                   goto ldv_47619;
  ldv_47619: 
#line 360 
  ;
  
#line 356 
  __er32(hw,8UL);
  
#line 357 
  return;
}


#line 365  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000e_clear_hw_cntrs_base(struct e1000_hw *hw)
{
  
#line 367 
  __er32(hw,16384UL);
  
#line 368 
  __er32(hw,16392UL);
  
#line 369 
  __er32(hw,16400UL);
  
#line 370 
  __er32(hw,16404UL);
  
#line 371 
  __er32(hw,16408UL);
  
#line 372 
  __er32(hw,16412UL);
  
#line 373 
  __er32(hw,16416UL);
  
#line 374 
  __er32(hw,16424UL);
  
#line 375 
  __er32(hw,16432UL);
  
#line 376 
  __er32(hw,16440UL);
  
#line 377 
  __er32(hw,16448UL);
  
#line 378 
  __er32(hw,16456UL);
  
#line 379 
  __er32(hw,16460UL);
  
#line 380 
  __er32(hw,16464UL);
  
#line 381 
  __er32(hw,16468UL);
  
#line 382 
  __er32(hw,16472UL);
  
#line 383 
  __er32(hw,16500UL);
  
#line 384 
  __er32(hw,16504UL);
  
#line 385 
  __er32(hw,16508UL);
  
#line 386 
  __er32(hw,16512UL);
  
#line 387 
  __er32(hw,16520UL);
  
#line 388 
  __er32(hw,16524UL);
  
#line 389 
  __er32(hw,16528UL);
  
#line 390 
  __er32(hw,16532UL);
  
#line 391 
  __er32(hw,16544UL);
  
#line 392 
  __er32(hw,16548UL);
  
#line 393 
  __er32(hw,16552UL);
  
#line 394 
  __er32(hw,16556UL);
  
#line 395 
  __er32(hw,16560UL);
  
#line 396 
  __er32(hw,16576UL);
  
#line 397 
  __er32(hw,16580UL);
  
#line 398 
  __er32(hw,16584UL);
  
#line 399 
  __er32(hw,16588UL);
  
#line 400 
  __er32(hw,16592UL);
  
#line 401 
  __er32(hw,16596UL);
  
#line 402 
  __er32(hw,16624UL);
  
#line 403 
  __er32(hw,16628UL);
  
#line 404 
  return;
}


#line 414  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_check_for_copper_link(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  bool link;
  
#line 416 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 425 
  if (! mac->get_link_status) {
    
#line 426 
    __retres = 0;
    
#line 426 
    goto return_label;
  }
  else ;
  
#line 432 
  ret_val = e1000e_phy_has_link_generic(hw,1U,0U,& link);
  
#line 433 
  if (ret_val != 0) {
    
#line 434 
    __retres = ret_val;
    
#line 434 
    goto return_label;
  }
  else ;
  
#line 436 
  if (! link) {
    
#line 437 
    __retres = 0;
    
#line 437 
    goto return_label;
  }
  else ;
  
#line 439 
  mac->get_link_status = (_Bool)0;
  
#line 444 
  e1000e_check_downshift(hw);
  
#line 449 
  if (! mac->autoneg) {
    
#line 450 
    __retres = -3;
    
#line 450 
    goto return_label;
  }
  else ;
  
#line 456 
  (*(mac->ops.config_collision_dist))(hw);
  
#line 463 
  ret_val = e1000e_config_fc_after_link_up(hw);
  
#line 464 
  if (ret_val != 0) {
    
#line 465 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_check_for_copper_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Error configuring flow control\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))465U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 465 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 465 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Error configuring flow control\n"); else ;
  }
  else ;
  
#line 467 
  __retres = ret_val;
  return_label: 
#line 467 
                return __retres;
}


#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_check_for_fiber_link(struct e1000_hw *hw)
{
  s32 __retres;
  u32 rxcw;
  u32 ctrl;
  u32 status;
  s32 ret_val;
  
#line 479 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 485 
  ctrl = __er32(hw,0UL);
  
#line 486 
  status = __er32(hw,8UL);
  
#line 487 
  rxcw = __er32(hw,384UL);
  
#line 497 
  if (((ctrl & 524288U) != 0U && (status & 2U) == 0U) && (rxcw & 536870912U) == 0U) {
    
#line 499 
    if (! mac->autoneg_failed) {
      
#line 500 
      mac->autoneg_failed = (_Bool)1;
      
#line 501 
      __retres = 0;
      
#line 501 
      goto return_label;
    }
    else ;
    {
      
#line 503 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_check_for_fiber_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "NOT Rx\'ing /C/, disable AutoNeg and force link.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))503U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 503 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 503 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"NOT Rx\'ing /C/, disable AutoNeg and force link.\n"); else ;
    }
    
#line 506 
    __ew32(hw,376UL,mac->txcw & 2147483647U);
    
#line 509 
    ctrl = __er32(hw,0UL);
    
#line 510 
    ctrl |= 65U;
    
#line 511 
    __ew32(hw,0UL,ctrl);
    
#line 514 
    ret_val = e1000e_config_fc_after_link_up(hw);
    
#line 515 
    if (ret_val != 0) {
      {
        
#line 516 
        struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_check_for_fiber_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Error configuring flow control\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))516U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 516 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 516 
                                                              __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Error configuring flow control\n"); else ;
      }
      
#line 517 
      __retres = ret_val;
      
#line 517 
      goto return_label;
    }
    else ;
  }
  else 
    
#line 519 
    if ((ctrl & 64U) != 0U && (rxcw & 536870912U) != 0U) {
      {
        
#line 525 
        struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000e_check_for_fiber_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Rx\'ing /C/, enable AutoNeg and stop forcing link.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))525U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 525 
        if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 525 
                                                              __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Rx\'ing /C/, enable AutoNeg and stop forcing link.\n"); else ;
      }
      
#line 526 
      __ew32(hw,376UL,mac->txcw);
      
#line 527 
      __ew32(hw,0UL,ctrl & 4294967231U);
      
#line 529 
      mac->serdes_has_link = (_Bool)1;
    }
    else ;
  
#line 532 
  __retres = 0;
  return_label: 
#line 532 
                return __retres;
}


#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_check_for_serdes_link(struct e1000_hw *hw)
{
  s32 __retres;
  u32 rxcw;
  u32 ctrl;
  u32 status;
  s32 ret_val;
  u32 tmp_0;
  
#line 544 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 550 
  ctrl = __er32(hw,0UL);
  
#line 551 
  status = __er32(hw,8UL);
  
#line 552 
  rxcw = __er32(hw,384UL);
  
#line 561 
  if ((status & 2U) == 0U && (rxcw & 536870912U) == 0U) {
    
#line 562 
    if (! mac->autoneg_failed) {
      
#line 563 
      mac->autoneg_failed = (_Bool)1;
      
#line 564 
      __retres = 0;
      
#line 564 
      goto return_label;
    }
    else ;
    {
      
#line 566 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_check_for_serdes_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "NOT Rx\'ing /C/, disable AutoNeg and force link.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))566U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 566 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 566 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"NOT Rx\'ing /C/, disable AutoNeg and force link.\n"); else ;
    }
    
#line 569 
    __ew32(hw,376UL,mac->txcw & 2147483647U);
    
#line 572 
    ctrl = __er32(hw,0UL);
    
#line 573 
    ctrl |= 65U;
    
#line 574 
    __ew32(hw,0UL,ctrl);
    
#line 577 
    ret_val = e1000e_config_fc_after_link_up(hw);
    
#line 578 
    if (ret_val != 0) {
      {
        
#line 579 
        struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_check_for_serdes_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Error configuring flow control\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))579U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 579 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 579 
                                                              __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Error configuring flow control\n"); else ;
      }
      
#line 580 
      __retres = ret_val;
      
#line 580 
      goto return_label;
    }
    else ;
  }
  else 
    
#line 582 
    if ((ctrl & 64U) != 0U && (rxcw & 536870912U) != 0U) {
      {
        
#line 588 
        struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000e_check_for_serdes_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Rx\'ing /C/, enable AutoNeg and stop forcing link.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))588U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 588 
        if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 588 
                                                              __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Rx\'ing /C/, enable AutoNeg and stop forcing link.\n"); else ;
      }
      
#line 589 
      __ew32(hw,376UL,mac->txcw);
      
#line 590 
      __ew32(hw,0UL,ctrl & 4294967231U);
      
#line 592 
      mac->serdes_has_link = (_Bool)1;
    }
    else {
      u32 tmp;
      
#line 593 
      tmp = __er32(hw,376UL);
      
#line 593 
      if (tmp >= (u32)0) {
        
#line 599 
        usleep_range(10UL,20UL);
        
#line 600 
        rxcw = __er32(hw,384UL);
        
#line 601 
        if ((rxcw & 1073741824U) != 0U) {
          
#line 602 
          if ((rxcw & 134217728U) == 0U) {
            
#line 603 
            mac->serdes_has_link = (_Bool)1;
            {
              
#line 604 
              struct _ddebug descriptor_2 = {.modname = "e1000e", .function = "e1000e_check_for_serdes_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "SERDES: Link up - forced.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))604U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
              
#line 604 
              if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 604 
                                                                    __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)(hw->adapter)->netdev,"SERDES: Link up - forced.\n"); else ;
            }
          }
          else ;
        }
        else {
          
#line 607 
          mac->serdes_has_link = (_Bool)0;
          {
            
#line 608 
            struct _ddebug descriptor_3 = {.modname = "e1000e", .function = "e1000e_check_for_serdes_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "SERDES: Link down - force failed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))608U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
            
#line 608 
            if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) 
#line 608 
                                                                  __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)(hw->adapter)->netdev,"SERDES: Link down - force failed.\n"); else ;
          }
        }
      }
      else ;
    }
  
#line 612 
  tmp_0 = __er32(hw,376UL);
  
#line 612 
  if (tmp_0 < (u32)0) {
    
#line 613 
    status = __er32(hw,8UL);
    
#line 614 
    if ((status & 2U) != 0U) {
      
#line 616 
      usleep_range(10UL,20UL);
      
#line 617 
      rxcw = __er32(hw,384UL);
      
#line 618 
      if ((rxcw & 1073741824U) != 0U) 
        
#line 619 
        if ((rxcw & 134217728U) == 0U) {
          
#line 620 
          mac->serdes_has_link = (_Bool)1;
          {
            
#line 621 
            struct _ddebug descriptor_4 = {.modname = "e1000e", .function = "e1000e_check_for_serdes_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "SERDES: Link up - autoneg completed successfully.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))621U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
            
#line 621 
            if ((long)(((int)descriptor_4.flags & 1) != 0) != 0L) 
#line 621 
                                                                  __dynamic_netdev_dbg(& descriptor_4,(struct net_device const *)(hw->adapter)->netdev,"SERDES: Link up - autoneg completed successfully.\n"); else ;
          }
        }
        else {
          
#line 623 
          mac->serdes_has_link = (_Bool)0;
          {
            
#line 624 
            struct _ddebug descriptor_5 = {.modname = "e1000e", .function = "e1000e_check_for_serdes_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "SERDES: Link down - invalid codewords detected in autoneg.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))624U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
            
#line 624 
            if ((long)(((int)descriptor_5.flags & 1) != 0) != 0L) 
#line 624 
                                                                  __dynamic_netdev_dbg(& descriptor_5,(struct net_device const *)(hw->adapter)->netdev,"SERDES: Link down - invalid codewords detected in autoneg.\n"); else ;
          }
        }
      else {
        
#line 627 
        mac->serdes_has_link = (_Bool)0;
        {
          
#line 628 
          struct _ddebug descriptor_6 = {.modname = "e1000e", .function = "e1000e_check_for_serdes_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "SERDES: Link down - no sync.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))628U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 628 
          if ((long)(((int)descriptor_6.flags & 1) != 0) != 0L) 
#line 628 
                                                                __dynamic_netdev_dbg(& descriptor_6,(struct net_device const *)(hw->adapter)->netdev,"SERDES: Link down - no sync.\n"); else ;
        }
      }
    }
    else {
      
#line 631 
      mac->serdes_has_link = (_Bool)0;
      {
        
#line 632 
        struct _ddebug descriptor_7 = {.modname = "e1000e", .function = "e1000e_check_for_serdes_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "SERDES: Link down - autoneg failed\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))632U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 632 
        if ((long)(((int)descriptor_7.flags & 1) != 0) != 0L) 
#line 632 
                                                              __dynamic_netdev_dbg(& descriptor_7,(struct net_device const *)(hw->adapter)->netdev,"SERDES: Link down - autoneg failed\n"); else ;
      }
    }
  }
  else ;
  
#line 636 
  __retres = 0;
  return_label: 
#line 636 
                return __retres;
}


#line 646  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
static s32 e1000_set_default_fc_generic(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 nvm_data;
  
#line 659 
  ret_val = e1000_read_nvm(hw,(unsigned short)15,(unsigned short)1,& nvm_data);
  
#line 661 
  if (ret_val != 0) {
    {
      
#line 662 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_set_default_fc_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))662U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 662 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 662 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"NVM Read Error\n"); else ;
    }
    
#line 663 
    __retres = ret_val;
    
#line 663 
    goto return_label;
  }
  else ;
  
#line 666 
  if (((int)nvm_data & 12288) == 0) 
#line 667 
                                    hw->fc.requested_mode = e1000_fc_none;
  else 
    
#line 668 
    if (((int)nvm_data & 12288) == 8192) 
#line 669 
                                         hw->fc.requested_mode = e1000_fc_tx_pause; else 
                                                                    
#line 671 
                                                                    hw->fc.requested_mode = e1000_fc_full;
  
#line 673 
  __retres = 0;
  return_label: 
#line 673 
                return __retres;
}


#line 686  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_setup_link_generic(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  s32 tmp_0;
  
#line 693 
  if (hw->phy.ops.check_reset_block != (s32 (*)(struct e1000_hw *))0) {
    s32 tmp;
    
#line 693 
    tmp = (*(hw->phy.ops.check_reset_block))(hw);
    
#line 693 
    if (tmp != 0) {
      
#line 694 
      __retres = 0;
      
#line 694 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 699 
  if (hw->fc.requested_mode == (unsigned int)e1000_fc_default) {
    
#line 700 
    ret_val = e1000_set_default_fc_generic(hw);
    
#line 701 
    if (ret_val != 0) {
      
#line 702 
      __retres = ret_val;
      
#line 702 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 708 
  hw->fc.current_mode = hw->fc.requested_mode;
  {
    
#line 710 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_setup_link_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "After fix-ups FlowControl is now = %x\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))710U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 710 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 710 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"After fix-ups FlowControl is now = %x\n",(unsigned int)hw->fc.current_mode); else ;
  }
  
#line 713 
  ret_val = (*(hw->mac.ops.setup_physical_interface))(hw);
  
#line 714 
  if (ret_val != 0) {
    
#line 715 
    __retres = ret_val;
    
#line 715 
    goto return_label;
  }
  else ;
  {
    
#line 722 
    struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_setup_link_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Initializing the Flow Control address, type and timer regs\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))722U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 722 
    if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 722 
                                                          __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Initializing the Flow Control address, type and timer regs\n"); else ;
  }
  
#line 723 
  __ew32(hw,48UL,34824U);
  
#line 724 
  __ew32(hw,44UL,256U);
  
#line 725 
  __ew32(hw,40UL,12746753U);
  
#line 727 
  __ew32(hw,368UL,(unsigned int)hw->fc.pause_time);
  
#line 729 
  tmp_0 = e1000e_set_fc_watermarks(hw);
  
#line 729 
  __retres = tmp_0;
  return_label: 
#line 729 
                return __retres;
}


#line 739  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
static s32 e1000_commit_fc_settings_generic(struct e1000_hw *hw)
{
  s32 __retres;
  u32 txcw;
  
#line 741 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 760 
  switch ((unsigned int)hw->fc.current_mode) {
    case (unsigned int)0: 
#line 761 
    ;
    
#line 763 
    txcw = 2147483680U;
    
#line 764 
    goto ldv_47681;
    case (unsigned int)1: 
#line 765 
    ;
    
#line 773 
    txcw = 2147484064U;
    
#line 774 
    goto ldv_47681;
    case (unsigned int)2: 
#line 775 
    ;
    
#line 779 
    txcw = 2147483936U;
    
#line 780 
    goto ldv_47681;
    case (unsigned int)3: 
#line 781 
    ;
    
#line 785 
    txcw = 2147484064U;
    
#line 786 
    goto ldv_47681;
    default: 
#line 787 
    ;
    {
      
#line 788 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_commit_fc_settings_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Flow control param set incorrectly\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))788U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 788 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 788 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Flow control param set incorrectly\n"); else ;
    }
    
#line 789 
    __retres = -3;
    
#line 789 
    goto return_label;
  }
  ldv_47681: 
#line 792 
  ;
  
#line 792 
  __ew32(hw,376UL,txcw);
  
#line 793 
  mac->txcw = txcw;
  
#line 795 
  __retres = 0;
  return_label: 
#line 795 
                return __retres;
}


#line 805  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
static s32 e1000_poll_fiber_serdes_link_generic(struct e1000_hw *hw)
{
  s32 __retres;
  u32 i;
  u32 status;
  s32 ret_val;
  
#line 807 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 817 
  i = 0U;
  
#line 817 
  goto ldv_47697;
  ldv_47696: 
#line 818 
  ;
  
#line 818 
  usleep_range(10000UL,20000UL);
  
#line 819 
  status = __er32(hw,8UL);
  
#line 820 
  if ((status & 2U) != 0U) 
#line 821 
                           goto ldv_47695; else ;
  
#line 817 
  i += 1U;
  ldv_47697: 
#line 818 
  ;
  
#line 817 
  if (i <= 49U) 
#line 819 
                goto ldv_47696; else 
#line 822 
                                     goto ldv_47695;
  ldv_47695: 
#line 823 
  ;
  
#line 823 
  if (i == 50U) {
    {
      
#line 824 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000_poll_fiber_serdes_link_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Never got a valid link from auto-neg!!!\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))824U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 824 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 824 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Never got a valid link from auto-neg!!!\n"); else ;
    }
    
#line 825 
    mac->autoneg_failed = (_Bool)1;
    
#line 831 
    ret_val = (*(mac->ops.check_for_link))(hw);
    
#line 832 
    if (ret_val != 0) {
      {
        
#line 833 
        struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000_poll_fiber_serdes_link_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Error while checking for link\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))833U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 833 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 833 
                                                              __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Error while checking for link\n"); else ;
      }
      
#line 834 
      __retres = ret_val;
      
#line 834 
      goto return_label;
    }
    else ;
    
#line 836 
    mac->autoneg_failed = (_Bool)0;
  }
  else {
    
#line 838 
    mac->autoneg_failed = (_Bool)0;
    {
      
#line 839 
      struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000_poll_fiber_serdes_link_generic", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Valid Link Found\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))839U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 839 
      if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 839 
                                                            __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Valid Link Found\n"); else ;
    }
  }
  
#line 842 
  __retres = 0;
  return_label: 
#line 842 
                return __retres;
}


#line 852  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_setup_fiber_serdes_link(struct e1000_hw *hw)
{
  s32 __retres;
  u32 ctrl;
  s32 ret_val;
  
#line 857 
  ctrl = __er32(hw,0UL);
  
#line 860 
  ctrl &= 4294967287U;
  
#line 862 
  (*(hw->mac.ops.config_collision_dist))(hw);
  
#line 864 
  ret_val = e1000_commit_fc_settings_generic(hw);
  
#line 865 
  if (ret_val != 0) {
    
#line 866 
    __retres = ret_val;
    
#line 866 
    goto return_label;
  }
  else ;
  {
    
#line 874 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_setup_fiber_serdes_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Auto-negotiation enabled\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))874U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 874 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 874 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Auto-negotiation enabled\n"); else ;
  }
  
#line 876 
  __ew32(hw,0UL,ctrl);
  
#line 877 
  __er32(hw,8UL);
  
#line 878 
  usleep_range(1000UL,2000UL);
  
#line 884 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_internal_serdes) 
    
#line 884 
    goto _LOR;
  else {
    u32 tmp;
    
#line 884 
    tmp = __er32(hw,0UL);
    
#line 884 
    if ((tmp & 524288U) != 0U) _LOR: 
#line 886 
                                     ret_val = e1000_poll_fiber_serdes_link_generic(hw);
    else {
      
#line 888 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_setup_fiber_serdes_link", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "No signal detected\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))888U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 888 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 888 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"No signal detected\n"); else ;
    }
  }
  
#line 891 
  __retres = ret_val;
  return_label: 
#line 891 
                return __retres;
}


#line 901  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000e_config_collision_dist_generic(struct e1000_hw *hw)
{
  u32 tctl;
  
#line 905 
  tctl = __er32(hw,1024UL);
  
#line 907 
  tctl &= 4290777087U;
  
#line 908 
  tctl |= 258048U;
  
#line 910 
  __ew32(hw,1024UL,tctl);
  
#line 911 
  __er32(hw,8UL);
  
#line 912 
  return;
}


#line 922  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_set_fc_watermarks(struct e1000_hw *hw)
{
  s32 __retres;
  
#line 924 
  u32 fcrtl = 0U;
  
#line 924 
  u32 fcrth = 0U;
  
#line 932 
  if (((unsigned int)hw->fc.current_mode & 2U) != 0U) {
    
#line 937 
    fcrtl = hw->fc.low_water;
    
#line 938 
    if ((int)hw->fc.send_xon != 0) 
#line 939 
                                   fcrtl |= 2147483648U; else ;
    
#line 941 
    fcrth = hw->fc.high_water;
  }
  else ;
  
#line 943 
  __ew32(hw,8544UL,fcrtl);
  
#line 944 
  __ew32(hw,8552UL,fcrth);
  
#line 946 
  __retres = 0;
  
#line 946 
  return __retres;
}


#line 959  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_force_mac_fc(struct e1000_hw *hw)
{
  s32 __retres;
  u32 ctrl;
  
#line 963 
  ctrl = __er32(hw,0UL);
  {
    
#line 982 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_force_mac_fc", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "hw->fc.current_mode = %u\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))982U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 982 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 982 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"hw->fc.current_mode = %u\n",(unsigned int)hw->fc.current_mode); else ;
  }
  
#line 984 
  switch ((unsigned int)hw->fc.current_mode) {
    case (unsigned int)0: 
#line 985 
    ;
    
#line 986 
    ctrl &= 3892314111U;
    
#line 987 
    goto ldv_47726;
    case (unsigned int)1: 
#line 988 
    ;
    
#line 989 
    ctrl &= 4026531839U;
    
#line 990 
    ctrl |= 134217728U;
    
#line 991 
    goto ldv_47726;
    case (unsigned int)2: 
#line 992 
    ;
    
#line 993 
    ctrl &= 4160749567U;
    
#line 994 
    ctrl |= 268435456U;
    
#line 995 
    goto ldv_47726;
    case (unsigned int)3: 
#line 996 
    ;
    
#line 997 
    ctrl |= 402653184U;
    
#line 998 
    goto ldv_47726;
    default: 
#line 999 
    ;
    {
      
#line 1000 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_force_mac_fc", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Flow control param set incorrectly\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1000U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1000 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1000 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Flow control param set incorrectly\n"); else ;
    }
    
#line 1001 
    __retres = -3;
    
#line 1001 
    goto return_label;
  }
  ldv_47726: 
#line 1004 
  ;
  
#line 1004 
  __ew32(hw,0UL,ctrl);
  
#line 1006 
  __retres = 0;
  return_label: 
#line 1006 
                return __retres;
}


#line 1019  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_config_fc_after_link_up(struct e1000_hw *hw)
{
  s32 __retres;
  u32 pcs_status_reg;
  u32 pcs_adv_reg;
  u32 pcs_lp_ability_reg;
  u32 pcs_ctrl_reg;
  u16 mii_status_reg;
  u16 mii_nway_adv_reg;
  u16 mii_nway_lp_ability_reg;
  u16 speed;
  u16 duplex;
  
#line 1021 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 1022 
  s32 ret_val = 0;
  
#line 1031 
  if ((int)mac->autoneg_failed != 0) {
    
#line 1032 
    if ((unsigned int)hw->phy.media_type + 4294967294U <= 1U) 
#line 1034 
                                                              ret_val = e1000e_force_mac_fc(hw); else ;
  }
  else 
    
#line 1036 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) 
      
#line 1037 
      ret_val = e1000e_force_mac_fc(hw); else ;
  
#line 1040 
  if (ret_val != 0) {
    {
      
#line 1041 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Error forcing flow control settings\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1041U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1041 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1041 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Error forcing flow control settings\n"); else ;
    }
    
#line 1042 
    __retres = ret_val;
    
#line 1042 
    goto return_label;
  }
  else ;
  
#line 1050 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_copper && (int)mac->autoneg != 0) {
    
#line 1055 
    ret_val = e1e_rphy(hw,1U,& mii_status_reg);
    
#line 1056 
    if (ret_val != 0) {
      
#line 1057 
      __retres = ret_val;
      
#line 1057 
      goto return_label;
    }
    else ;
    
#line 1058 
    ret_val = e1e_rphy(hw,1U,& mii_status_reg);
    
#line 1059 
    if (ret_val != 0) {
      
#line 1060 
      __retres = ret_val;
      
#line 1060 
      goto return_label;
    }
    else ;
    
#line 1062 
    if (((int)mii_status_reg & 32) == 0) {
      {
        
#line 1063 
        struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Copper PHY and Auto Neg has not completed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1063U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1063 
        if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1063 
                                                              __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Copper PHY and Auto Neg has not completed.\n"); else ;
      }
      
#line 1064 
      __retres = ret_val;
      
#line 1064 
      goto return_label;
    }
    else ;
    
#line 1073 
    ret_val = e1e_rphy(hw,4U,& mii_nway_adv_reg);
    
#line 1074 
    if (ret_val != 0) {
      
#line 1075 
      __retres = ret_val;
      
#line 1075 
      goto return_label;
    }
    else ;
    
#line 1076 
    ret_val = e1e_rphy(hw,5U,& mii_nway_lp_ability_reg);
    
#line 1077 
    if (ret_val != 0) {
      
#line 1078 
      __retres = ret_val;
      
#line 1078 
      goto return_label;
    }
    else ;
    
#line 1113 
    if (((int)mii_nway_adv_reg & 1024) != 0 && ((int)mii_nway_lp_ability_reg & 1024) != 0) 
      
#line 1121 
      if (hw->fc.requested_mode == (unsigned int)e1000_fc_full) {
        
#line 1122 
        hw->fc.current_mode = e1000_fc_full;
        {
          
#line 1123 
          struct _ddebug descriptor_1 = {.modname = "e1000e", .function = "e1000e_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Flow Control = FULL.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1123U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1123 
          if ((long)(((int)descriptor_1.flags & 1) != 0) != 0L) 
#line 1123 
                                                                __dynamic_netdev_dbg(& descriptor_1,(struct net_device const *)(hw->adapter)->netdev,"Flow Control = FULL.\n"); else ;
        }
      }
      else {
        
#line 1125 
        hw->fc.current_mode = e1000_fc_rx_pause;
        {
          
#line 1126 
          struct _ddebug descriptor_2 = {.modname = "e1000e", .function = "e1000e_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Flow Control = Rx PAUSE frames only.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1126U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1126 
          if ((long)(((int)descriptor_2.flags & 1) != 0) != 0L) 
#line 1126 
                                                                __dynamic_netdev_dbg(& descriptor_2,(struct net_device const *)(hw->adapter)->netdev,"Flow Control = Rx PAUSE frames only.\n"); else ;
        }
      }
    else 
      
#line 1136 
      if (((((int)mii_nway_adv_reg & 1024) == 0 && ((int)mii_nway_adv_reg & 2048) != 0) && ((int)mii_nway_lp_ability_reg & 1024) != 0) && ((int)mii_nway_lp_ability_reg & 2048) != 0) {
        
#line 1140 
        hw->fc.current_mode = e1000_fc_tx_pause;
        {
          
#line 1141 
          struct _ddebug descriptor_3 = {.modname = "e1000e", .function = "e1000e_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Flow Control = Tx PAUSE frames only.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1141U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1141 
          if ((long)(((int)descriptor_3.flags & 1) != 0) != 0L) 
#line 1141 
                                                                __dynamic_netdev_dbg(& descriptor_3,(struct net_device const *)(hw->adapter)->netdev,"Flow Control = Tx PAUSE frames only.\n"); else ;
        }
      }
      else 
        
#line 1150 
        if (((((int)mii_nway_adv_reg & 1024) != 0 && ((int)mii_nway_adv_reg & 2048) != 0) && ((int)mii_nway_lp_ability_reg & 1024) == 0) && ((int)mii_nway_lp_ability_reg & 2048) != 0) {
          
#line 1154 
          hw->fc.current_mode = e1000_fc_rx_pause;
          {
            
#line 1155 
            struct _ddebug descriptor_4 = {.modname = "e1000e", .function = "e1000e_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Flow Control = Rx PAUSE frames only.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1155U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
            
#line 1155 
            if ((long)(((int)descriptor_4.flags & 1) != 0) != 0L) 
#line 1155 
                                                                  __dynamic_netdev_dbg(& descriptor_4,(struct net_device const *)(hw->adapter)->netdev,"Flow Control = Rx PAUSE frames only.\n"); else ;
          }
        }
        else {
          
#line 1160 
          hw->fc.current_mode = e1000_fc_none;
          {
            
#line 1161 
            struct _ddebug descriptor_5 = {.modname = "e1000e", .function = "e1000e_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Flow Control = NONE.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1161U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
            
#line 1161 
            if ((long)(((int)descriptor_5.flags & 1) != 0) != 0L) 
#line 1161 
                                                                  __dynamic_netdev_dbg(& descriptor_5,(struct net_device const *)(hw->adapter)->netdev,"Flow Control = NONE.\n"); else ;
          }
        }
    
#line 1168 
    ret_val = (*(mac->ops.get_link_up_info))(hw,& speed,& duplex);
    
#line 1169 
    if (ret_val != 0) {
      {
        
#line 1170 
        struct _ddebug descriptor_6 = {.modname = "e1000e", .function = "e1000e_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Error getting link speed and duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1170U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1170 
        if ((long)(((int)descriptor_6.flags & 1) != 0) != 0L) 
#line 1170 
                                                              __dynamic_netdev_dbg(& descriptor_6,(struct net_device const *)(hw->adapter)->netdev,"Error getting link speed and duplex\n"); else ;
      }
      
#line 1171 
      __retres = ret_val;
      
#line 1171 
      goto return_label;
    }
    else ;
    
#line 1174 
    if ((unsigned int)duplex == 1U) 
#line 1175 
                                    hw->fc.current_mode = e1000_fc_none; else ;
    
#line 1180 
    ret_val = e1000e_force_mac_fc(hw);
    
#line 1181 
    if (ret_val != 0) {
      {
        
#line 1182 
        struct _ddebug descriptor_7 = {.modname = "e1000e", .function = "e1000e_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Error forcing flow control settings\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1182U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1182 
        if ((long)(((int)descriptor_7.flags & 1) != 0) != 0L) 
#line 1182 
                                                              __dynamic_netdev_dbg(& descriptor_7,(struct net_device const *)(hw->adapter)->netdev,"Error forcing flow control settings\n"); else ;
      }
      
#line 1183 
      __retres = ret_val;
      
#line 1183 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1192 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_internal_serdes && (int)mac->autoneg != 0) {
    
#line 1197 
    pcs_status_reg = __er32(hw,16908UL);
    
#line 1199 
    if ((pcs_status_reg & 65536U) == 0U) {
      {
        
#line 1200 
        struct _ddebug descriptor_8 = {.modname = "e1000e", .function = "e1000e_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "PCS Auto Neg has not completed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1200U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1200 
        if ((long)(((int)descriptor_8.flags & 1) != 0) != 0L) 
#line 1200 
                                                              __dynamic_netdev_dbg(& descriptor_8,(struct net_device const *)(hw->adapter)->netdev,"PCS Auto Neg has not completed.\n"); else ;
      }
      
#line 1201 
      __retres = ret_val;
      
#line 1201 
      goto return_label;
    }
    else ;
    
#line 1210 
    pcs_adv_reg = __er32(hw,16920UL);
    
#line 1211 
    pcs_lp_ability_reg = __er32(hw,16924UL);
    
#line 1246 
    if ((pcs_adv_reg & 128U) != 0U && (pcs_lp_ability_reg & 128U) != 0U) 
      
#line 1254 
      if (hw->fc.requested_mode == (unsigned int)e1000_fc_full) {
        
#line 1255 
        hw->fc.current_mode = e1000_fc_full;
        {
          
#line 1256 
          struct _ddebug descriptor_9 = {.modname = "e1000e", .function = "e1000e_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Flow Control = FULL.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1256U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1256 
          if ((long)(((int)descriptor_9.flags & 1) != 0) != 0L) 
#line 1256 
                                                                __dynamic_netdev_dbg(& descriptor_9,(struct net_device const *)(hw->adapter)->netdev,"Flow Control = FULL.\n"); else ;
        }
      }
      else {
        
#line 1258 
        hw->fc.current_mode = e1000_fc_rx_pause;
        {
          
#line 1259 
          struct _ddebug descriptor_10 = {.modname = "e1000e", .function = "e1000e_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Flow Control = Rx PAUSE frames only.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1259U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1259 
          if ((long)(((int)descriptor_10.flags & 1) != 0) != 0L) 
#line 1259 
                                                                 __dynamic_netdev_dbg(& descriptor_10,(struct net_device const *)(hw->adapter)->netdev,"Flow Control = Rx PAUSE frames only.\n"); else ;
        }
      }
    else 
      
#line 1269 
      if ((((pcs_adv_reg & 128U) == 0U && (pcs_adv_reg & 256U) != 0U) && (pcs_lp_ability_reg & 128U) != 0U) && (pcs_lp_ability_reg & 256U) != 0U) {
        
#line 1273 
        hw->fc.current_mode = e1000_fc_tx_pause;
        {
          
#line 1274 
          struct _ddebug descriptor_11 = {.modname = "e1000e", .function = "e1000e_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Flow Control = Tx PAUSE frames only.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1274U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
          
#line 1274 
          if ((long)(((int)descriptor_11.flags & 1) != 0) != 0L) 
#line 1274 
                                                                 __dynamic_netdev_dbg(& descriptor_11,(struct net_device const *)(hw->adapter)->netdev,"Flow Control = Tx PAUSE frames only.\n"); else ;
        }
      }
      else 
        
#line 1283 
        if ((((pcs_adv_reg & 128U) != 0U && (pcs_adv_reg & 256U) != 0U) && (pcs_lp_ability_reg & 128U) == 0U) && (pcs_lp_ability_reg & 256U) != 0U) {
          
#line 1287 
          hw->fc.current_mode = e1000_fc_rx_pause;
          {
            
#line 1288 
            struct _ddebug descriptor_12 = {.modname = "e1000e", .function = "e1000e_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Flow Control = Rx PAUSE frames only.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1288U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
            
#line 1288 
            if ((long)(((int)descriptor_12.flags & 1) != 0) != 0L) 
#line 1288 
                                                                   __dynamic_netdev_dbg(& descriptor_12,(struct net_device const *)(hw->adapter)->netdev,"Flow Control = Rx PAUSE frames only.\n"); else ;
          }
        }
        else {
          
#line 1293 
          hw->fc.current_mode = e1000_fc_none;
          {
            
#line 1294 
            struct _ddebug descriptor_13 = {.modname = "e1000e", .function = "e1000e_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Flow Control = NONE.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1294U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
            
#line 1294 
            if ((long)(((int)descriptor_13.flags & 1) != 0) != 0L) 
#line 1294 
                                                                   __dynamic_netdev_dbg(& descriptor_13,(struct net_device const *)(hw->adapter)->netdev,"Flow Control = NONE.\n"); else ;
          }
        }
    
#line 1300 
    pcs_ctrl_reg = __er32(hw,16904UL);
    
#line 1301 
    pcs_ctrl_reg |= 128U;
    
#line 1302 
    __ew32(hw,16904UL,pcs_ctrl_reg);
    
#line 1304 
    ret_val = e1000e_force_mac_fc(hw);
    
#line 1305 
    if (ret_val != 0) {
      {
        
#line 1306 
        struct _ddebug descriptor_14 = {.modname = "e1000e", .function = "e1000e_config_fc_after_link_up", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Error forcing flow control settings\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1306U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
        
#line 1306 
        if ((long)(((int)descriptor_14.flags & 1) != 0) != 0L) 
#line 1306 
                                                               __dynamic_netdev_dbg(& descriptor_14,(struct net_device const *)(hw->adapter)->netdev,"Error forcing flow control settings\n"); else ;
      }
      
#line 1307 
      __retres = ret_val;
      
#line 1307 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1311 
  __retres = 0;
  return_label: 
#line 1311 
                return __retres;
}


#line 1323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_get_speed_and_duplex_copper(struct e1000_hw *hw, u16 *speed, u16 *duplex)
{
  s32 __retres;
  u32 status;
  
#line 1328 
  status = __er32(hw,8UL);
  
#line 1329 
  if ((status & 128U) != 0U) 
#line 1330 
                             *speed = (unsigned short)1000U;
  else 
    
#line 1331 
    if ((status & 64U) != 0U) 
#line 1332 
                              *speed = (unsigned short)100U; else 
#line 1334 
                                                                  *speed = (unsigned short)10U;
  
#line 1336 
  if ((status & 1U) != 0U) 
#line 1337 
                           *duplex = (unsigned short)2U; else 
#line 1339 
                                                              *duplex = (unsigned short)1U;
  {
    
#line 1341 
    struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_get_speed_and_duplex_copper", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "%u Mbps, %s Duplex\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1343U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 1341 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) {
      char *tmp;
      int tmp_1;
      
#line 1341 
      if ((unsigned int)*duplex == 2U) 
#line 1341 
                                       tmp = (char *)"Full"; else 
#line 1341 
                                                                  tmp = (char *)"Half";
      
#line 1341 
      if ((unsigned int)*speed != 1000U) {
        int tmp_0;
        
#line 1341 
        if ((unsigned int)*speed == 100U) 
#line 1341 
                                          tmp_0 = 100; else 
#line 1341 
                                                            tmp_0 = 10;
        
#line 1341 
        tmp_1 = tmp_0;
      }
      else 
#line 1341 
           tmp_1 = 1000;
      
#line 1341 
      ;
      
#line 1341 
      __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"%u Mbps, %s Duplex\n",tmp_1,tmp);
    }
    else ;
  }
  
#line 1345 
  __retres = 0;
  
#line 1345 
  return __retres;
}


#line 1357  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_get_speed_and_duplex_fiber_serdes(struct e1000_hw *hw, u16 *speed, u16 *duplex)
{
  s32 __retres;
  
#line 1360 
  *speed = (unsigned short)1000U;
  
#line 1361 
  *duplex = (unsigned short)2U;
  
#line 1363 
  __retres = 0;
  
#line 1363 
  return __retres;
}


#line 1372  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_get_hw_semaphore(struct e1000_hw *hw)
{
  s32 __retres;
  u32 swsm;
  u32 tmp;
  
#line 1375 
  s32 timeout = (int)hw->nvm.word_size + 1;
  
#line 1376 
  s32 i = 0;
  
#line 1379 
  goto ldv_47784;
  ldv_47783: 
#line 1380 
  ;
  
#line 1380 
  swsm = __er32(hw,23376UL);
  
#line 1381 
  if ((swsm & 1U) == 0U) 
#line 1382 
                         goto ldv_47782; else ;
  
#line 1384 
  usleep_range(50UL,100UL);
  
#line 1385 
  i += 1;
  ldv_47784: 
#line 1386 
  ;
  
#line 1379 
  if (i < timeout) 
#line 1381 
                   goto ldv_47783; else 
#line 1384 
                                        goto ldv_47782;
  ldv_47782: 
#line 1385 
  ;
  
#line 1388 
  if (i == timeout) {
    {
      
#line 1389 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_get_hw_semaphore", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Driver can\'t access device - SMBI bit is set.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1389U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1389 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1389 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Driver can\'t access device - SMBI bit is set.\n"); else ;
    }
    
#line 1390 
    __retres = -1;
    
#line 1390 
    goto return_label;
  }
  else ;
  
#line 1394 
  i = 0;
  
#line 1394 
  goto ldv_47789;
  ldv_47788: 
#line 1395 
  ;
  
#line 1395 
  swsm = __er32(hw,23376UL);
  
#line 1396 
  __ew32(hw,23376UL,swsm | 2U);
  
#line 1399 
  tmp = __er32(hw,23376UL);
  
#line 1399 
  if ((tmp & 2U) != 0U) 
#line 1400 
                        goto ldv_47787; else ;
  
#line 1402 
  usleep_range(50UL,100UL);
  
#line 1394 
  i += 1;
  ldv_47789: 
#line 1395 
  ;
  
#line 1394 
  if (i < timeout) 
#line 1396 
                   goto ldv_47788; else 
#line 1399 
                                        goto ldv_47787;
  ldv_47787: 
#line 1400 
  ;
  
#line 1405 
  if (i == timeout) {
    
#line 1407 
    e1000e_put_hw_semaphore(hw);
    {
      
#line 1408 
      struct _ddebug descriptor_0 = {.modname = "e1000e", .function = "e1000e_get_hw_semaphore", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Driver can\'t access the NVM\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1408U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1408 
      if ((long)(((int)descriptor_0.flags & 1) != 0) != 0L) 
#line 1408 
                                                            __dynamic_netdev_dbg(& descriptor_0,(struct net_device const *)(hw->adapter)->netdev,"Driver can\'t access the NVM\n"); else ;
    }
    
#line 1409 
    __retres = -1;
    
#line 1409 
    goto return_label;
  }
  else ;
  
#line 1412 
  __retres = 0;
  return_label: 
#line 1412 
                return __retres;
}


#line 1421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000e_put_hw_semaphore(struct e1000_hw *hw)
{
  u32 swsm;
  
#line 1425 
  swsm = __er32(hw,23376UL);
  
#line 1426 
  swsm &= 4294967292U;
  
#line 1427 
  __ew32(hw,23376UL,swsm);
  
#line 1428 
  return;
}


#line 1436  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_get_auto_rd_done(struct e1000_hw *hw)
{
  s32 __retres;
  u32 tmp;
  
#line 1438 
  s32 i = 0;
  
#line 1440 
  goto ldv_47801;
  ldv_47800: 
#line 1441 
  ;
  
#line 1441 
  tmp = __er32(hw,16UL);
  
#line 1441 
  if ((tmp & 512U) != 0U) 
#line 1442 
                          goto ldv_47799; else ;
  
#line 1443 
  usleep_range(1000UL,2000UL);
  
#line 1444 
  i += 1;
  ldv_47801: 
#line 1445 
  ;
  
#line 1440 
  if (i <= 9) 
#line 1442 
              goto ldv_47800; else 
#line 1445 
                                   goto ldv_47799;
  ldv_47799: 
#line 1446 
  ;
  
#line 1447 
  if (i == 10) {
    {
      
#line 1448 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_get_auto_rd_done", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Auto read by HW from NVM has not completed.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1448U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1448 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1448 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Auto read by HW from NVM has not completed.\n"); else ;
    }
    
#line 1449 
    __retres = -9;
    
#line 1449 
    goto return_label;
  }
  else ;
  
#line 1452 
  __retres = 0;
  return_label: 
#line 1452 
                return __retres;
}


#line 1463  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_valid_led_default(struct e1000_hw *hw, u16 *data)
{
  s32 __retres;
  s32 ret_val;
  
#line 1467 
  ret_val = e1000_read_nvm(hw,(unsigned short)4,(unsigned short)1,data);
  
#line 1468 
  if (ret_val != 0) {
    {
      
#line 1469 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_valid_led_default", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "NVM Read Error\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1469U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1469 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1469 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"NVM Read Error\n"); else ;
    }
    
#line 1470 
    __retres = ret_val;
    
#line 1470 
    goto return_label;
  }
  else ;
  
#line 1473 
  if ((unsigned int)*data + 65535U > 65533U) 
#line 1474 
                                             *data = (unsigned short)35089U; else ;
  
#line 1476 
  __retres = 0;
  return_label: 
#line 1476 
                return __retres;
}


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_id_led_init_generic(struct e1000_hw *hw)
{
  s32 __retres;
  s32 ret_val;
  u16 data;
  u16 i;
  u16 temp;
  
#line 1486 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 1488 
  u32 const ledctl_mask = 255U;
  
#line 1489 
  u32 const ledctl_on = 14U;
  
#line 1490 
  u32 const ledctl_off = 15U;
  
#line 1492 
  u16 const led_mask = (unsigned short)15U;
  
#line 1494 
  ret_val = (*(hw->nvm.ops.valid_led_default))(hw,& data);
  
#line 1495 
  if (ret_val != 0) {
    
#line 1496 
    __retres = ret_val;
    
#line 1496 
    goto return_label;
  }
  else ;
  
#line 1498 
  mac->ledctl_default = __er32(hw,3584UL);
  
#line 1499 
  mac->ledctl_mode1 = mac->ledctl_default;
  
#line 1500 
  mac->ledctl_mode2 = mac->ledctl_default;
  
#line 1502 
  i = (unsigned short)0U;
  
#line 1502 
  goto ldv_47840;
  ldv_47839: 
#line 1503 
  ;
  
#line 1503 
  temp = (unsigned short)((unsigned int)((unsigned short)((int)data >> ((int)i << 2))) & 15U);
  
#line 1504 
  switch ((int)temp) {
    case 4: 
#line 1505 
    ;
    case 5: 
#line 1506 
    ;
    case 6: 
#line 1507 
    ;
    
#line 1508 
    mac->ledctl_mode1 &= ~ (255U << ((int)i << 3));
    
#line 1509 
    mac->ledctl_mode1 |= 14U << ((int)i << 3);
    
#line 1510 
    goto ldv_47826;
    case 7: 
#line 1511 
    ;
    case 8: 
#line 1512 
    ;
    case 9: 
#line 1513 
    ;
    
#line 1514 
    mac->ledctl_mode1 &= ~ (255U << ((int)i << 3));
    
#line 1515 
    mac->ledctl_mode1 |= 15U << ((int)i << 3);
    
#line 1516 
    goto ldv_47826;
    default: 
#line 1517 
    ;
    
#line 1519 
    goto ldv_47826;
  }
  ldv_47826: 
#line 1521 
  ;
  
#line 1521 
  switch ((int)temp) {
    case 2: 
#line 1522 
    ;
    case 5: 
#line 1523 
    ;
    case 8: 
#line 1524 
    ;
    
#line 1525 
    mac->ledctl_mode2 &= ~ (255U << ((int)i << 3));
    
#line 1526 
    mac->ledctl_mode2 |= 14U << ((int)i << 3);
    
#line 1527 
    goto ldv_47834;
    case 3: 
#line 1528 
    ;
    case 6: 
#line 1529 
    ;
    case 9: 
#line 1530 
    ;
    
#line 1531 
    mac->ledctl_mode2 &= ~ (255U << ((int)i << 3));
    
#line 1532 
    mac->ledctl_mode2 |= 15U << ((int)i << 3);
    
#line 1533 
    goto ldv_47834;
    default: 
#line 1534 
    ;
    
#line 1536 
    goto ldv_47834;
  }
  ldv_47834: 
#line 1538 
  ;
  
#line 1502 
  i = (u16)((int)i + 1);
  ldv_47840: 
#line 1503 
  ;
  
#line 1502 
  if ((unsigned int)i <= 3U) 
#line 1504 
                             goto ldv_47839; else 
#line 1507 
                                                  goto ldv_47841;
  ldv_47841: 
#line 1508 
  ;
  
#line 1540 
  __retres = 0;
  return_label: 
#line 1540 
                return __retres;
}


#line 1550  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_setup_led_generic(struct e1000_hw *hw)
{
  s32 __retres;
  u32 ledctl;
  
#line 1554 
  if (hw->mac.ops.setup_led != & e1000e_setup_led_generic) {
    
#line 1555 
    __retres = -3;
    
#line 1555 
    goto return_label;
  }
  else ;
  
#line 1557 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_fiber) {
    
#line 1558 
    ledctl = __er32(hw,3584UL);
    
#line 1559 
    hw->mac.ledctl_default = ledctl;
    
#line 1561 
    ledctl &= 4294967088U;
    
#line 1563 
    ledctl |= 15U;
    
#line 1565 
    __ew32(hw,3584UL,ledctl);
  }
  else 
    
#line 1566 
    if (hw->phy.media_type == (unsigned int)e1000_media_type_copper) 
      
#line 1567 
      __ew32(hw,3584UL,hw->mac.ledctl_mode1); else ;
  
#line 1570 
  __retres = 0;
  return_label: 
#line 1570 
                return __retres;
}


#line 1580  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_cleanup_led_generic(struct e1000_hw *hw)
{
  s32 __retres;
  
#line 1582 
  __ew32(hw,3584UL,hw->mac.ledctl_default);
  
#line 1583 
  __retres = 0;
  
#line 1583 
  return __retres;
}


#line 1592  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_blink_led_generic(struct e1000_hw *hw)
{
  s32 __retres;
  u32 i;
  
#line 1594 
  u32 ledctl_blink = 0U;
  
#line 1597 
  if (hw->phy.media_type == (unsigned int)e1000_media_type_fiber) 
#line 1599 
                                                                  ledctl_blink = 142U;
  else {
    
#line 1608 
    ledctl_blink = hw->mac.ledctl_mode2;
    
#line 1609 
    i = 0U;
    
#line 1609 
    goto ldv_47857;
    ldv_47856: 
#line 1610 
    ;
    {
      
#line 1610 
      u32 mode = (hw->mac.ledctl_mode2 >> i) & 15U;
      
#line 1612 
      u32 led_default = hw->mac.ledctl_default >> i;
      
#line 1614 
      if (((led_default & 64U) == 0U && mode == 14U) || ((led_default & 64U) != 0U && mode == 15U)) {
        
#line 1618 
        ledctl_blink = (unsigned int)(~ (15 << i)) & ledctl_blink;
        
#line 1620 
        ledctl_blink = (unsigned int)(142 << i) | ledctl_blink;
      }
      else ;
    }
    
#line 1609 
    i += 8U;
    ldv_47857: 
#line 1610 
    ;
    
#line 1609 
    if (i <= 31U) 
#line 1611 
                  goto ldv_47856; else 
#line 1614 
                                       goto ldv_47858;
    ldv_47858: 
#line 1615 
    ;
  }
  
#line 1626 
  __ew32(hw,3584UL,ledctl_blink);
  
#line 1628 
  __retres = 0;
  
#line 1628 
  return __retres;
}


#line 1637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_led_on_generic(struct e1000_hw *hw)
{
  s32 __retres;
  u32 ctrl;
  
#line 1641 
  switch ((unsigned int)hw->phy.media_type) {
    case (unsigned int)2: 
#line 1642 
    ;
    
#line 1643 
    ctrl = __er32(hw,0UL);
    
#line 1644 
    ctrl &= 4294705151U;
    
#line 1645 
    ctrl |= 4194304U;
    
#line 1646 
    __ew32(hw,0UL,ctrl);
    
#line 1647 
    goto ldv_47864;
    case (unsigned int)1: 
#line 1648 
    ;
    
#line 1649 
    __ew32(hw,3584UL,hw->mac.ledctl_mode2);
    
#line 1650 
    goto ldv_47864;
    default: 
#line 1651 
    ;
    
#line 1652 
    goto ldv_47864;
  }
  ldv_47864: 
#line 1655 
  ;
  
#line 1655 
  __retres = 0;
  
#line 1655 
  return __retres;
}


#line 1664  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_led_off_generic(struct e1000_hw *hw)
{
  s32 __retres;
  u32 ctrl;
  
#line 1668 
  switch ((unsigned int)hw->phy.media_type) {
    case (unsigned int)2: 
#line 1669 
    ;
    
#line 1670 
    ctrl = __er32(hw,0UL);
    
#line 1671 
    ctrl |= 262144U;
    
#line 1672 
    ctrl |= 4194304U;
    
#line 1673 
    __ew32(hw,0UL,ctrl);
    
#line 1674 
    goto ldv_47872;
    case (unsigned int)1: 
#line 1675 
    ;
    
#line 1676 
    __ew32(hw,3584UL,hw->mac.ledctl_mode1);
    
#line 1677 
    goto ldv_47872;
    default: 
#line 1678 
    ;
    
#line 1679 
    goto ldv_47872;
  }
  ldv_47872: 
#line 1682 
  ;
  
#line 1682 
  __retres = 0;
  
#line 1682 
  return __retres;
}


#line 1692  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000e_set_pcie_no_snoop(struct e1000_hw *hw, u32 no_snoop)
{
  u32 gcr;
  
#line 1696 
  if (no_snoop != 0U) {
    
#line 1697 
    gcr = __er32(hw,23296UL);
    
#line 1698 
    gcr &= 4294967232U;
    
#line 1699 
    gcr |= no_snoop;
    
#line 1700 
    __ew32(hw,23296UL,gcr);
  }
  else ;
  
#line 1702 
  return;
}


#line 1715  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
s32 e1000e_disable_pcie_master(struct e1000_hw *hw)
{
  s32 __retres;
  u32 ctrl;
  u32 tmp;
  
#line 1718 
  s32 timeout = 800;
  
#line 1720 
  ctrl = __er32(hw,0UL);
  
#line 1721 
  ctrl |= 4U;
  
#line 1722 
  __ew32(hw,0UL,ctrl);
  
#line 1724 
  goto ldv_47887;
  ldv_47886: 
#line 1725 
  ;
  
#line 1725 
  tmp = __er32(hw,8UL);
  
#line 1725 
  if ((tmp & 524288U) == 0U) 
#line 1726 
                             goto ldv_47885; else ;
  
#line 1727 
  usleep_range(100UL,200UL);
  
#line 1728 
  timeout -= 1;
  ldv_47887: 
#line 1729 
  ;
  
#line 1724 
  if (timeout != 0) 
#line 1726 
                    goto ldv_47886; else 
#line 1729 
                                         goto ldv_47885;
  ldv_47885: 
#line 1730 
  ;
  
#line 1731 
  if (timeout == 0) {
    {
      
#line 1732 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_disable_pcie_master", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Master requests are pending.\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1732U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1732 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1732 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Master requests are pending.\n"); else ;
    }
    
#line 1733 
    __retres = -10;
    
#line 1733 
    goto return_label;
  }
  else ;
  
#line 1736 
  __retres = 0;
  return_label: 
#line 1736 
                return __retres;
}


#line 1745  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000e_reset_adaptive(struct e1000_hw *hw)
{
  
#line 1747 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 1749 
  if (! mac->adaptive_ifs) {
    {
      
#line 1750 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_reset_adaptive", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Not in Adaptive IFS mode!\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1750U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1750 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1750 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Not in Adaptive IFS mode!\n"); else ;
    }
    
#line 1751 
    goto return_label;
  }
  else ;
  
#line 1754 
  mac->current_ifs_val = (unsigned short)0U;
  
#line 1755 
  mac->ifs_min_val = (unsigned short)40U;
  
#line 1756 
  mac->ifs_max_val = (unsigned short)80U;
  
#line 1757 
  mac->ifs_step_size = (unsigned short)10U;
  
#line 1758 
  mac->ifs_ratio = (unsigned short)4U;
  
#line 1760 
  mac->in_ifs_mode = (_Bool)0;
  
#line 1761 
  __ew32(hw,1112UL,0U);
  return_label: 
#line 1762 
                return;
}


#line 1771  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c"
void e1000e_update_adaptive(struct e1000_hw *hw)
{
  
#line 1773 
  struct e1000_mac_info *mac = & hw->mac;
  
#line 1775 
  if (! mac->adaptive_ifs) {
    {
      
#line 1776 
      struct _ddebug descriptor = {.modname = "e1000e", .function = "e1000e_update_adaptive", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/intel/e1000e/mac.c", .format = "Not in Adaptive IFS mode!\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))1776U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
      
#line 1776 
      if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 1776 
                                                          __dynamic_netdev_dbg(& descriptor,(struct net_device const *)(hw->adapter)->netdev,"Not in Adaptive IFS mode!\n"); else ;
    }
    
#line 1777 
    goto return_label;
  }
  else ;
  
#line 1780 
  if (mac->collision_delta * (unsigned int)mac->ifs_ratio > mac->tx_packet_delta) {
    
#line 1781 
    if (mac->tx_packet_delta > 1000U) {
      
#line 1782 
      mac->in_ifs_mode = (_Bool)1;
      
#line 1783 
      if ((int)mac->current_ifs_val < (int)mac->ifs_max_val) {
        
#line 1784 
        if ((unsigned int)mac->current_ifs_val == 0U) 
#line 1785 
                                                      mac->current_ifs_val = mac->ifs_min_val; else 
                                                                    
#line 1787 
                                                                    mac->current_ifs_val = (unsigned short)((int)mac->current_ifs_val + (int)mac->ifs_step_size);
        
#line 1789 
        __ew32(hw,1112UL,(unsigned int)mac->current_ifs_val);
      }
      else ;
    }
    else ;
  }
  else 
    
#line 1793 
    if ((int)mac->in_ifs_mode != 0 && mac->tx_packet_delta <= 1000U) {
      
#line 1795 
      mac->current_ifs_val = (unsigned short)0U;
      
#line 1796 
      mac->in_ifs_mode = (_Bool)0;
      
#line 1797 
      __ew32(hw,1112UL,0U);
    }
    else ;
  return_label: 
#line 1799 
                return;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  
#line 23 
  v->counter += i;
  
#line 24 
  return;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  
#line 29 
  v->counter -= i;
  
#line 30 
  return;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  int __retres;
  
#line 35 
  v->counter -= i;
  
#line 36 
  if (v->counter != 0) {
    
#line 37 
    __retres = 0;
    
#line 37 
    goto return_label;
  }
  else ;
  
#line 39 
  __retres = 1;
  return_label: 
#line 39 
                return __retres;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  
#line 45 
  v->counter += 1;
  
#line 46 
  return;
}


#line 49  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  
#line 51 
  v->counter -= 1;
  
#line 52 
  return;
}


#line 55  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  int __retres;
  
#line 57 
  v->counter -= 1;
  
#line 58 
  if (v->counter != 0) {
    
#line 59 
    __retres = 0;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  __retres = 1;
  return_label: 
#line 61 
                return __retres;
}


#line 65  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  int __retres;
  
#line 67 
  v->counter += 1;
  
#line 68 
  if (v->counter != 0) {
    
#line 69 
    __retres = 0;
    
#line 69 
    goto return_label;
  }
  else ;
  
#line 71 
  __retres = 1;
  return_label: 
#line 71 
                return __retres;
}


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  int __retres;
  
#line 77 
  v->counter += i;
  
#line 78 
  __retres = v->counter;
  
#line 78 
  return __retres;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  int __retres;
  
#line 84 
  v->counter += i;
  
#line 85 
  __retres = v->counter < 0;
  
#line 85 
  return __retres;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  int __retres;
  
#line 91 
  *v = (short)((unsigned int)*v + 1U);
  
#line 92 
  __retres = (int)*v;
  
#line 92 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device const *dev);


#line 24 
int ldv_dev_set_drvdata(struct device *dev, void *data);


#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_xmalloc(size_t size);


#line 31 
void *ldv_xzalloc(size_t size);


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
struct ldv_list_element global_list = {.data = (void *)0, .next = (struct ldv_list_element *)0};

#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static ldv_list_ptr ldv_list_create(void *data)
{
  
#line 35 
  ldv_list_ptr list = (struct ldv_list_element *)0;
  
#line 37 
  list = (ldv_list_ptr)ldv_xmalloc(16UL);
  
#line 39 
  list->data = data;
  
#line 40 
  list->next = (struct ldv_list_element *)0;
  
#line 42 
  return list;
}


#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static void ldv_save_pointer(void *data)
{
  ldv_list_ptr element;
  ldv_list_ptr cached;
  
#line 50 
  if (global_list.data == (void *)0) {
    
#line 51 
    element = & global_list;
    
#line 52 
    element->data = data;
  }
  else {
    
#line 54 
    element = ldv_list_create(data);
    
#line 55 
    cached = global_list.next;
    
#line 56 
    global_list.next = element;
    
#line 57 
    element->next = cached;
  }
  
#line 60 
  return;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 30 
  if (dev != (struct device const *)0 && dev->p != (struct device_private *)0) {
    
#line 31 
    __retres = (dev->p)->driver_data;
    
#line 31 
    goto return_label;
  }
  else ;
  
#line 33 
  __retres = (void *)0;
  return_label: 
#line 33 
                return __retres;
}


#line 42  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  int __retres;
  
#line 44 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  
#line 45 
  ldv_save_pointer((void *)dev->p);
  
#line 46 
  (dev->p)->driver_data = data;
  
#line 48 
  __retres = 0;
  
#line 48 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_zalloc(size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  struct spi_master *__retres;
  struct spi_master *master;
  
#line 27 
  master = (struct spi_master *)ldv_zalloc((unsigned long)size + 2192UL);
  
#line 29 
  if (master == (struct spi_master *)0) {
    
#line 30 
    __retres = (struct spi_master *)0;
    
#line 30 
    goto return_label;
  }
  else ;
  
#line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  
#line 34 
  __retres = master;
  return_label: 
#line 34 
                return __retres;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err_or_null(void const *ptr);


#line 29 
void *ldv_err_ptr(long error);


#line 30 
long ldv_ptr_err(void const *ptr);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_assume(int);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err(void const *ptr)
{
  long __retres;
  
#line 23 
  __retres = (long)((unsigned long)ptr > 4294967295UL);
  
#line 23 
  return __retres;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  void *__retres;
  
#line 28 
  __VERIFIER_assume(error < 0L);
  
#line 29 
  __retres = (void *)(4294967295L - error);
  
#line 29 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void const *ptr)
{
  long __retres;
  
#line 34 
  __VERIFIER_assume((unsigned long)ptr > 4294967295UL);
  
#line 35 
  __retres = (long)(4294967295UL - (unsigned long)ptr);
  
#line 35 
  return __retres;
}


#line 38  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err_or_null(void const *ptr)
{
  long __retres;
  int tmp_0;
  
#line 40 
  if (ptr == (void const *)0) 
#line 40 
                              tmp_0 = 1;
  else {
    long tmp;
    
#line 40 
    tmp = ldv_is_err(ptr);
    
#line 40 
    if (tmp != 0L) 
#line 40 
                   tmp_0 = 1; else 
#line 40 
                                   tmp_0 = 0;
  }
  
#line 40 
  __retres = (long)tmp_0;
  
#line 40 
  return __retres;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/panic.h"
void ldv_panic(void);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  
#line 23 
  __VERIFIER_assume(0);
  
#line 24 
  return;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void);


#line 42 
void ldv_switch_to_process_context(void);


#line 50 
bool ldv_in_interrupt_context(void);


#line 112 
int ldv_post_init(int init_ret_val);


#line 132 
int ldv_post_probe(int probe_ret_val);


#line 133 
void ldv_check_return_value_probe(int);


#line 141 
int ldv_filter_err_code(int ret_val);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;

#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void)
{
  
#line 30 
  __ldv_in_interrupt_context = (_Bool)1;
  
#line 31 
  return;
}


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_process_context(void)
{
  
#line 36 
  __ldv_in_interrupt_context = (_Bool)0;
  
#line 37 
  return;
}


#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
bool ldv_in_interrupt_context(void)
{
  
#line 41 
  return __ldv_in_interrupt_context;
}


#line 44  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static int ldv_filter_positive_int(int val)
{
  
#line 46 
  __VERIFIER_assume(val <= 0);
  
#line 47 
  return val;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_init(int init_ret_val)
{
  int tmp;
  
#line 56 
  tmp = ldv_filter_positive_int(init_ret_val);
  
#line 56 
  return tmp;
}


#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val)
{
  int tmp;
  
#line 62 
  ldv_check_return_value_probe(probe_ret_val);
  
#line 63 
  tmp = ldv_filter_positive_int(probe_ret_val);
  
#line 63 
  return tmp;
}


#line 67  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val)
{
  int tmp;
  
#line 69 
  tmp = ldv_filter_positive_int(ret_val);
  
#line 69 
  return tmp;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);


#line 28 
void ldv_check_alloc_flags(gfp_t);


#line 29 
void ldv_after_alloc(void *);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_malloc(size_t size);


#line 24 
void *ldv_calloc(size_t nmemb, size_t size);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 25 
  ldv_check_alloc_flags(flags);
  
#line 26 
  res = ldv_malloc(size);
  
#line 27 
  ldv_after_alloc(res);
  
#line 29 
  return res;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 36 
  ldv_check_alloc_flags(flags);
  
#line 37 
  res = ldv_calloc(n,size);
  
#line 38 
  ldv_after_alloc(res);
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 47 
  ldv_check_alloc_flags(flags);
  
#line 48 
  res = ldv_zalloc(size);
  
#line 49 
  ldv_after_alloc(res);
  
#line 51 
  return res;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 58 
  ldv_check_alloc_flags(flags);
  
#line 59 
  res = ldv_malloc(n * size);
  
#line 60 
  ldv_after_alloc(res);
  
#line 62 
  return res;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void ldv_free(void *s);


#line 35 
void *ldv_malloc_unknown_size(void);


#line 36 
void *ldv_calloc_unknown_size(void);


#line 37 
void *ldv_zalloc_unknown_size(void);


#line 40 
void *ldv_reference_malloc(size_t size);


#line 41 
void *ldv_reference_calloc(size_t nmemb, size_t size);


#line 42 
void *ldv_reference_zalloc(size_t size);


#line 43 
void ldv_reference_free(void *s);


#line 47 
void *ldv_reference_xmalloc(size_t size);


#line 48 
void *ldv_reference_xzalloc(size_t size);


#line 52 
void *ldv_reference_malloc_unknown_size(void);


#line 53 
void *ldv_reference_calloc_unknown_size(void);


#line 54 
void *ldv_reference_zalloc_unknown_size(void);


#line 61 
void *ldv_xmalloc_unknown_size(size_t size);


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  void *res;
  
#line 37 
  res = ldv_reference_malloc(size);
  
#line 38 
  if (res != (void *)0) {
    long tmp;
    
#line 39 
    tmp = ldv_is_err((void const *)res);
    
#line 39 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  void *res;
  
#line 46 
  res = ldv_reference_calloc(nmemb,size);
  
#line 47 
  if (res != (void *)0) {
    long tmp;
    
#line 48 
    tmp = ldv_is_err((void const *)res);
    
#line 48 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 49 
  return res;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  void *res;
  
#line 55 
  res = ldv_reference_zalloc(size);
  
#line 56 
  if (res != (void *)0) {
    long tmp;
    
#line 57 
    tmp = ldv_is_err((void const *)res);
    
#line 57 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 58 
  return res;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  
#line 63 
  ldv_reference_free(s);
  
#line 64 
  return;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 69 
  res = ldv_reference_xmalloc(size);
  
#line 70 
  tmp = ldv_is_err((void const *)res);
  
#line 70 
  __VERIFIER_assume(tmp == 0L);
  
#line 71 
  return res;
}


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 77 
  res = ldv_reference_xzalloc(size);
  
#line 78 
  tmp = ldv_is_err((void const *)res);
  
#line 78 
  __VERIFIER_assume(tmp == 0L);
  
#line 79 
  return res;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  void *res;
  
#line 85 
  res = ldv_reference_malloc_unknown_size();
  
#line 86 
  if (res != (void *)0) {
    long tmp;
    
#line 87 
    tmp = ldv_is_err((void const *)res);
    
#line 87 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 88 
  return res;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  void *res;
  
#line 94 
  res = ldv_reference_calloc_unknown_size();
  
#line 95 
  if (res != (void *)0) {
    long tmp;
    
#line 96 
    tmp = ldv_is_err((void const *)res);
    
#line 96 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  void *res;
  
#line 103 
  res = ldv_reference_zalloc_unknown_size();
  
#line 104 
  if (res != (void *)0) {
    long tmp;
    
#line 105 
    tmp = ldv_is_err((void const *)res);
    
#line 105 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 106 
  return res;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  void *res;
  long tmp;
  
#line 112 
  res = ldv_reference_xmalloc_unknown_size(size);
  
#line 113 
  tmp = ldv_is_err((void const *)res);
  
#line 113 
  __VERIFIER_assume(tmp == 0L);
  
#line 114 
  return res;
}

long __builtin_expect(long exp, long c);


#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_error(void);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
long __builtin_expect(long exp, long c)
{
  
#line 26 
  return exp;
}


#line 35  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  
#line 37 
  __VERIFIER_error();
  
#line 38 
  return;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_int(void);


#line 24 
int ldv_undef_long(void);


#line 25 
unsigned int ldv_undef_uint(void);


#line 26 
unsigned long ldv_undef_ulong(void);


#line 27 
unsigned long long ldv_undef_ulonglong(void);


#line 28 
void *ldv_undef_ptr(void);


#line 31 
int ldv_undef_int_positive(void);


#line 34 
int ldv_undef_int_negative(void);


#line 37 
int ldv_undef_int_nonpositive(void);


#line 40 
void *ldv_undef_ptr_non_null(void);


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __VERIFIER_nondet_int(void);


#line 31 
long __VERIFIER_nondet_long(void);


#line 38 
unsigned int __VERIFIER_nondet_uint(void);


#line 41 
unsigned long __VERIFIER_nondet_ulong(void);


#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);


#line 43 
void *__VERIFIER_nondet_pointer(void);


#line 46  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  int tmp;
  
#line 48 
  tmp = __VERIFIER_nondet_int();
  
#line 48 
  return tmp;
}


#line 51  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_long(void)
{
  int __retres;
  long tmp;
  
#line 53 
  tmp = __VERIFIER_nondet_long();
  
#line 53 
  __retres = (int)tmp;
  
#line 53 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  unsigned int tmp;
  
#line 58 
  tmp = __VERIFIER_nondet_uint();
  
#line 58 
  return tmp;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  void *tmp;
  
#line 63 
  tmp = __VERIFIER_nondet_pointer();
  
#line 63 
  return tmp;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  unsigned long tmp;
  
#line 68 
  tmp = __VERIFIER_nondet_ulong();
  
#line 68 
  return tmp;
}


#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  unsigned long long tmp;
  
#line 73 
  tmp = __VERIFIER_nondet_ulonglong();
  
#line 73 
  return tmp;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  
#line 78 
  int ret = ldv_undef_int();
  
#line 80 
  __VERIFIER_assume(ret > 0);
  
#line 82 
  return ret;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  
#line 87 
  int ret = ldv_undef_int();
  
#line 89 
  __VERIFIER_assume(ret < 0);
  
#line 91 
  return ret;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  
#line 96 
  int ret = ldv_undef_int();
  
#line 98 
  __VERIFIER_assume(ret <= 0);
  
#line 100 
  return ret;
}


#line 103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  
#line 105 
  void *ret = ldv_undef_ptr();
  
#line 107 
  __VERIFIER_assume(ret != (void *)0);
  
#line 109 
  return ret;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *external_allocated_data(void);


#line 45 
void *ldv_reference_realloc(void *ptr, size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *malloc(size_t);


#line 24 
void *calloc(size_t, size_t);


#line 25 
void free(void *);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 37 
  tmp = ldv_undef_int();
  
#line 37 
  if (tmp != 0) {
    
#line 39 
    res = malloc(size);
    
#line 40 
    __VERIFIER_assume(res != (void *)0);
    
#line 41 
    __retres = res;
    
#line 41 
    goto return_label;
  }
  else {
    
#line 44 
    __retres = (void *)0;
    
#line 44 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 47  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  void *tmp;
  
#line 49 
  tmp = calloc(nmemb,size);
  
#line 49 
  return tmp;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  void *tmp;
  
#line 54 
  tmp = calloc(1UL,size);
  
#line 54 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  
#line 59 
  free(s);
  
#line 60 
  return;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 66 
  if (ptr != (void *)0 && size == 0UL) {
    
#line 67 
    free(ptr);
    
#line 68 
    __retres = (void *)0;
    
#line 68 
    goto return_label;
  }
  else ;
  
#line 71 
  if (ptr == (void *)0) {
    
#line 72 
    res = malloc(size);
    
#line 73 
    __retres = res;
    
#line 73 
    goto return_label;
  }
  else ;
  
#line 76 
  tmp = ldv_undef_int();
  
#line 76 
  if (tmp != 0) {
    
#line 78 
    res = malloc(size);
    
#line 79 
    __VERIFIER_assume(res != (void *)0);
    
#line 81 
    memcpy(res,(void const *)ptr,size);
    
#line 82 
    free(ptr);
    
#line 84 
    __retres = res;
    
#line 84 
    goto return_label;
  }
  else {
    
#line 87 
    __retres = (void *)0;
    
#line 87 
    goto return_label;
  }
  return_label: 
#line 76 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  void *res;
  
#line 94 
  res = malloc(size);
  
#line 95 
  __VERIFIER_assume(res != (void *)0);
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  void *res;
  
#line 104 
  res = calloc(1UL,size);
  
#line 105 
  __VERIFIER_assume(res != (void *)0);
  
#line 107 
  return res;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 114 
  tmp = ldv_undef_int();
  
#line 114 
  if (tmp != 0) {
    
#line 115 
    res = external_allocated_data();
    
#line 116 
    __VERIFIER_assume(res != (void *)0);
    
#line 117 
    __retres = res;
    
#line 117 
    goto return_label;
  }
  else {
    
#line 120 
    __retres = (void *)0;
    
#line 120 
    goto return_label;
  }
  return_label: 
#line 114 
                return __retres;
}


#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 127 
  tmp = ldv_undef_int();
  
#line 127 
  if (tmp != 0) {
    
#line 128 
    res = external_allocated_data();
    
#line 129 
    memset(res,0,8UL);
    
#line 130 
    __VERIFIER_assume(res != (void *)0);
    
#line 131 
    __retres = res;
    
#line 131 
    goto return_label;
  }
  else {
    
#line 134 
    __retres = (void *)0;
    
#line 134 
    goto return_label;
  }
  return_label: 
#line 127 
                return __retres;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  void *tmp;
  
#line 139 
  tmp = ldv_reference_calloc_unknown_size();
  
#line 139 
  return tmp;
}


#line 142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  void *res;
  
#line 146 
  res = external_allocated_data();
  
#line 147 
  __VERIFIER_assume(res != (void *)0);
  
#line 149 
  return res;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_initialize(void);


#line 97 
void ldv_failed_register_netdev(void);


#line 123 
void ldv_pre_probe(void);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
int pthread_create(pthread_t *, pthread_attr_t const *, void *(*)(void *), void *);


#line 37 
int pthread_join(pthread_t, void **);


#line 112  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_5_1(struct net_device *arg0);


#line 114 
void *ldv_interrupt_scenario_18(void *arg0);


#line 115 
void *ldv_interrupt_scenario_20(void *arg0);


#line 117 
int main(void);


#line 118 
void *ldv_interrupt_scenario_22(void *arg0);


#line 120 
void ldv_dispatch_register_10_3(struct pci_driver *arg0);


#line 121 
void *ldv_interrupt_scenario_17(void *arg0);


#line 122 
void *ldv_interrupt_scenario_23(void *arg0);


#line 123 
void ldv_dispatch_register_9_4(struct net_device *arg0);


#line 125 
void *ldv_pci_scenario_14(void *arg0);


#line 126 
void *ldv_random_allocationless_scenario_21(void *arg0);


#line 127 
void *ldv_interrupt_scenario_24(void *arg0);


#line 128 
void ldv_dispatch_irq_register_13_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);


#line 131 
void ldv_dispatch_deregister_8_1(struct pci_driver *arg0);


#line 132 
void *ldv_pm_ops_scenario_19(void *arg0);


#line 133 
void *ldv_timer_scenario_16(void *arg0);


#line 134 
void *ldv_interrupt_scenario_15(void *arg0);


#line 136 
void ldv_dispatch_instance_register_3_3(struct timer_list *arg0);


#line 137 
void ldv_dispatch_irq_deregister_6_1(int arg0);


#line 138 
void *ldv_initialization_1(void *arg0);


#line 141 
void ldv_dispatch_instance_deregister_12_1(struct timer_list *arg0);


#line 147  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_17;

#line 148  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_15;

#line 149  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_21;

#line 150  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_16;

#line 151  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_14;

#line 152  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_24;

#line 153  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_19;

#line 154  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_22;

#line 155  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_18;

#line 156  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_20;

#line 157  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_23;

#line 161  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_5_1(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_21 *cf_arg_21;
  int tmp;
  
#line 164 
  tmp = ldv_undef_int();
  
#line 164 
  switch (tmp) {
    case 0: 
#line 165 
    ;
    
#line 166 
    ret = pthread_join(ldv_thread_21,(void **)0);
    
#line 167 
    __VERIFIER_assume(ret == 0);
    
#line 168 
    goto ldv_44836;
    default: 
#line 170 
    ;
    
#line 170 
    __VERIFIER_assume(0);
  }
  ldv_44836: 
#line 171 
  ;
  
#line 172 
  return;
}


#line 176  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_schedule_delayed_work(struct delayed_work *arg0, unsigned long arg1)
{
  _Bool __retres;
  struct work_struct *ldv_7_ldv_param_0_2;
  struct delayed_work *ldv_7_delayed_work;
  int tmp_0;
  
#line 184 
  tmp_0 = ldv_undef_int();
  
#line 184 
  if (tmp_0 != 0) {
    
#line 186 
    ldv_7_delayed_work = arg0;
    
#line 190 
    ldv_7_ldv_param_0_2 = (struct work_struct *)ldv_xmalloc_unknown_size(0UL);
    
#line 194 
    if (ldv_7_delayed_work->work.func != (void (*)(struct work_struct *))0) 
      
#line 196 
      (*(ldv_7_delayed_work->work.func))(ldv_7_ldv_param_0_2); else ;
    
#line 201 
    ldv_free((void *)ldv_7_ldv_param_0_2);
    
#line 205 
    __retres = (_Bool)1;
    
#line 205 
    goto return_label;
  }
  else {
    
#line 212 
    __retres = (_Bool)0;
    
#line 212 
    goto return_label;
  }
  return_label: 
#line 184 
                return __retres;
}


#line 222  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_18(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_18_ret_val;
  int ldv_18_line;
  void *ldv_18_data;
  enum irqreturn (*ldv_18_thread)(int , void *);
  int tmp;
  
#line 228 
  enum irqreturn (*ldv_18_callback)(int , void *) = & ldv_emg_wrapper_e1000_intr_msi_test_2;
  
#line 231 
  struct ldv_struct_interrupt_scenario_15 *data = (struct ldv_struct_interrupt_scenario_15 *)arg0;
  
#line 236 
  if (data != (struct ldv_struct_interrupt_scenario_15 *)0) {
    
#line 237 
    ldv_18_line = data->arg0;
    
#line 238 
    ldv_18_callback = data->arg1;
    
#line 239 
    ldv_18_thread = data->arg2;
    
#line 240 
    ldv_18_data = data->arg3;
    
#line 241 
    ldv_free((void *)data);
  }
  else ;
  
#line 247 
  ldv_switch_to_interrupt_context();
  
#line 249 
  ldv_18_ret_val = ldv_emg_wrapper_e1000_intr_msi_test_2(ldv_18_line,ldv_18_data);
  
#line 251 
  ldv_switch_to_process_context();
  
#line 254 
  tmp = ldv_undef_int();
  
#line 254 
  if (tmp != 0) {
    
#line 256 
    __VERIFIER_assume(ldv_18_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 260 
    if (ldv_18_thread != (enum irqreturn (*)(int , void *))0) 
#line 262 
                                                              (*ldv_18_thread)(ldv_18_line,ldv_18_data); else ;
  }
  else 
#line 269 
       __VERIFIER_assume(ldv_18_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 278 
  __retres = (void *)0;
  
#line 278 
  goto return_label;
  
#line 280 
  __retres = (void *)0;
  return_label: 
#line 280 
                return __retres;
}


#line 285  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_9_4(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_21 *cf_arg_21;
  int tmp;
  
#line 288 
  tmp = ldv_undef_int();
  
#line 288 
  switch (tmp) {
    case 0: 
#line 289 
    ;
    
#line 290 
    cf_arg_21 = (struct ldv_struct_random_allocationless_scenario_21 *)ldv_xmalloc(16UL);
    
#line 291 
    cf_arg_21->arg0 = arg0;
    
#line 292 
    ret = pthread_create(& ldv_thread_21,(pthread_attr_t const *)0,& ldv_random_allocationless_scenario_21,(void *)cf_arg_21);
    
#line 293 
    __VERIFIER_assume(ret == 0);
    
#line 294 
    goto ldv_44863;
    default: 
#line 296 
    ;
    
#line 296 
    __VERIFIER_assume(0);
  }
  ldv_44863: 
#line 297 
  ;
  
#line 298 
  return;
}


#line 302  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  int __retres;
  int tmp_0;
  
#line 305 
  struct pci_driver *ldv_10_pci_driver = ldv_emg_alias_e1000_driver_2;
  
#line 309 
  tmp_0 = ldv_undef_int();
  
#line 309 
  if (tmp_0 != 0) {
    
#line 311 
    ldv_10_pci_driver = arg0;
    
#line 315 
    ldv_dispatch_register_10_3(ldv_10_pci_driver);
    
#line 319 
    __retres = 0;
    
#line 319 
    goto return_label;
  }
  else {
    int tmp;
    
#line 326 
    tmp = ldv_undef_int_negative();
    
#line 326 
    __retres = tmp;
    
#line 326 
    goto return_label;
  }
  return_label: 
#line 309 
                return __retres;
}


#line 336  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
int main(void)
{
  int __retres;
  
#line 339 
  ldv_initialize();
  
#line 342 
  ldv_initialization_1((void *)0);
  
#line 344 
  __retres = 0;
  
#line 344 
  return __retres;
}


#line 349  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_22(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_22_ret_val;
  int ldv_22_line;
  void *ldv_22_data;
  enum irqreturn (*ldv_22_thread)(int , void *);
  int tmp;
  
#line 355 
  enum irqreturn (*ldv_22_callback)(int , void *) = & ldv_emg_wrapper_e1000_intr_msix_tx_2;
  
#line 358 
  struct ldv_struct_interrupt_scenario_15 *data = (struct ldv_struct_interrupt_scenario_15 *)arg0;
  
#line 363 
  if (data != (struct ldv_struct_interrupt_scenario_15 *)0) {
    
#line 364 
    ldv_22_line = data->arg0;
    
#line 365 
    ldv_22_callback = data->arg1;
    
#line 366 
    ldv_22_thread = data->arg2;
    
#line 367 
    ldv_22_data = data->arg3;
    
#line 368 
    ldv_free((void *)data);
  }
  else ;
  
#line 374 
  ldv_switch_to_interrupt_context();
  
#line 376 
  ldv_22_ret_val = ldv_emg_wrapper_e1000_intr_msix_tx_2(ldv_22_line,ldv_22_data);
  
#line 378 
  ldv_switch_to_process_context();
  
#line 381 
  tmp = ldv_undef_int();
  
#line 381 
  if (tmp != 0) {
    
#line 383 
    __VERIFIER_assume(ldv_22_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 387 
    if (ldv_22_thread != (enum irqreturn (*)(int , void *))0) 
#line 389 
                                                              (*ldv_22_thread)(ldv_22_line,ldv_22_data); else ;
  }
  else 
#line 396 
       __VERIFIER_assume(ldv_22_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 405 
  __retres = (void *)0;
  
#line 405 
  goto return_label;
  
#line 407 
  __retres = (void *)0;
  return_label: 
#line 407 
                return __retres;
}


#line 412  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  struct net_device *__retres;
  struct net_device *ldv_4_netdev;
  int tmp_0;
  
#line 419 
  tmp_0 = ldv_undef_int();
  
#line 419 
  if (tmp_0 != 0) {
    
#line 421 
    ldv_4_netdev = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    
#line 425 
    __retres = ldv_4_netdev;
    
#line 425 
    goto return_label;
  }
  else {
    
#line 432 
    __retres = (struct net_device *)0;
    
#line 432 
    goto return_label;
  }
  return_label: 
#line 419 
                return __retres;
}


#line 442  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_10_3(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_14 *cf_arg_14;
  int tmp;
  
#line 445 
  tmp = ldv_undef_int();
  
#line 445 
  switch (tmp) {
    case 0: 
#line 446 
    ;
    
#line 447 
    cf_arg_14 = (struct ldv_struct_pci_scenario_14 *)ldv_xmalloc(16UL);
    
#line 448 
    cf_arg_14->arg0 = arg0;
    
#line 449 
    ret = pthread_create(& ldv_thread_14,(pthread_attr_t const *)0,& ldv_pci_scenario_14,(void *)cf_arg_14);
    
#line 450 
    __VERIFIER_assume(ret == 0);
    
#line 451 
    goto ldv_44899;
    default: 
#line 453 
    ;
    
#line 453 
    __VERIFIER_assume(0);
  }
  ldv_44899: 
#line 454 
  ;
  
#line 455 
  return;
}


#line 459  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_17(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_17_ret_val;
  int ldv_17_line;
  void *ldv_17_data;
  enum irqreturn (*ldv_17_thread)(int , void *);
  int tmp;
  
#line 465 
  enum irqreturn (*ldv_17_callback)(int , void *) = & ldv_emg_wrapper_e1000_intr_msi_2;
  
#line 468 
  struct ldv_struct_interrupt_scenario_15 *data = (struct ldv_struct_interrupt_scenario_15 *)arg0;
  
#line 473 
  if (data != (struct ldv_struct_interrupt_scenario_15 *)0) {
    
#line 474 
    ldv_17_line = data->arg0;
    
#line 475 
    ldv_17_callback = data->arg1;
    
#line 476 
    ldv_17_thread = data->arg2;
    
#line 477 
    ldv_17_data = data->arg3;
    
#line 478 
    ldv_free((void *)data);
  }
  else ;
  
#line 484 
  ldv_switch_to_interrupt_context();
  
#line 486 
  ldv_17_ret_val = ldv_emg_wrapper_e1000_intr_msi_2(ldv_17_line,ldv_17_data);
  
#line 488 
  ldv_switch_to_process_context();
  
#line 491 
  tmp = ldv_undef_int();
  
#line 491 
  if (tmp != 0) {
    
#line 493 
    __VERIFIER_assume(ldv_17_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 497 
    if (ldv_17_thread != (enum irqreturn (*)(int , void *))0) 
#line 499 
                                                              (*ldv_17_thread)(ldv_17_line,ldv_17_data); else ;
  }
  else 
#line 506 
       __VERIFIER_assume(ldv_17_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 515 
  __retres = (void *)0;
  
#line 515 
  goto return_label;
  
#line 517 
  __retres = (void *)0;
  return_label: 
#line 517 
                return __retres;
}


#line 522  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_23(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_23_ret_val;
  int ldv_23_line;
  void *ldv_23_data;
  enum irqreturn (*ldv_23_thread)(int , void *);
  int tmp;
  
#line 528 
  enum irqreturn (*ldv_23_callback)(int , void *) = & ldv_emg_wrapper_e1000_intr_2;
  
#line 531 
  struct ldv_struct_interrupt_scenario_15 *data = (struct ldv_struct_interrupt_scenario_15 *)arg0;
  
#line 536 
  if (data != (struct ldv_struct_interrupt_scenario_15 *)0) {
    
#line 537 
    ldv_23_line = data->arg0;
    
#line 538 
    ldv_23_callback = data->arg1;
    
#line 539 
    ldv_23_thread = data->arg2;
    
#line 540 
    ldv_23_data = data->arg3;
    
#line 541 
    ldv_free((void *)data);
  }
  else ;
  
#line 547 
  ldv_switch_to_interrupt_context();
  
#line 549 
  ldv_23_ret_val = ldv_emg_wrapper_e1000_intr_2(ldv_23_line,ldv_23_data);
  
#line 551 
  ldv_switch_to_process_context();
  
#line 554 
  tmp = ldv_undef_int();
  
#line 554 
  if (tmp != 0) {
    
#line 556 
    __VERIFIER_assume(ldv_23_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 560 
    if (ldv_23_thread != (enum irqreturn (*)(int , void *))0) 
#line 562 
                                                              (*ldv_23_thread)(ldv_23_line,ldv_23_data); else ;
  }
  else 
#line 569 
       __VERIFIER_assume(ldv_23_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 578 
  __retres = (void *)0;
  
#line 578 
  goto return_label;
  
#line 580 
  __retres = (void *)0;
  return_label: 
#line 580 
                return __retres;
}


#line 585  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_20(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_20_ret_val;
  int ldv_20_line;
  void *ldv_20_data;
  enum irqreturn (*ldv_20_thread)(int , void *);
  int tmp;
  
#line 591 
  enum irqreturn (*ldv_20_callback)(int , void *) = & ldv_emg_wrapper_e1000_intr_msix_rx_2;
  
#line 594 
  struct ldv_struct_interrupt_scenario_15 *data = (struct ldv_struct_interrupt_scenario_15 *)arg0;
  
#line 599 
  if (data != (struct ldv_struct_interrupt_scenario_15 *)0) {
    
#line 600 
    ldv_20_line = data->arg0;
    
#line 601 
    ldv_20_callback = data->arg1;
    
#line 602 
    ldv_20_thread = data->arg2;
    
#line 603 
    ldv_20_data = data->arg3;
    
#line 604 
    ldv_free((void *)data);
  }
  else ;
  
#line 610 
  ldv_switch_to_interrupt_context();
  
#line 612 
  ldv_20_ret_val = ldv_emg_wrapper_e1000_intr_msix_rx_2(ldv_20_line,ldv_20_data);
  
#line 614 
  ldv_switch_to_process_context();
  
#line 617 
  tmp = ldv_undef_int();
  
#line 617 
  if (tmp != 0) {
    
#line 619 
    __VERIFIER_assume(ldv_20_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 623 
    if (ldv_20_thread != (enum irqreturn (*)(int , void *))0) 
#line 625 
                                                              (*ldv_20_thread)(ldv_20_line,ldv_20_data); else ;
  }
  else 
#line 632 
       __VERIFIER_assume(ldv_20_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 641 
  __retres = (void *)0;
  
#line 641 
  goto return_label;
  
#line 643 
  __retres = (void *)0;
  return_label: 
#line 643 
                return __retres;
}


#line 648  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  int __retres;
  int ldv_13_line;
  void *ldv_13_data;
  enum irqreturn (*ldv_13_thread)(int , void *);
  int tmp_0;
  
#line 653 
  enum irqreturn (*ldv_13_callback)(int , void *) = & ldv_emg_wrapper_e1000_test_intr_2;
  
#line 658 
  tmp_0 = ldv_undef_int();
  
#line 658 
  if (tmp_0 != 0) {
    
#line 660 
    ldv_13_line = (int)arg0;
    
#line 661 
    ldv_13_callback = arg1;
    
#line 662 
    ldv_13_thread = (enum irqreturn (*)(int , void *))0;
    
#line 663 
    ldv_13_data = arg4;
    
#line 667 
    ldv_dispatch_irq_register_13_3(ldv_13_line,ldv_13_callback,ldv_13_thread,ldv_13_data);
    
#line 671 
    __retres = 0;
    
#line 671 
    goto return_label;
  }
  else {
    int tmp;
    
#line 678 
    tmp = ldv_undef_int_negative();
    
#line 678 
    __retres = tmp;
    
#line 678 
    goto return_label;
  }
  return_label: 
#line 658 
                return __retres;
}


#line 688  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pci_scenario_14(void *arg0)
{
  void *__retres;
  struct pci_dev *ldv_14_resource_1;
  struct pci_device_id *ldv_14_ldv_param_1_2;
  struct pm_message ldv_14_resource_0;
  int tmp_2;
  int tmp_3;
  
#line 693 
  struct pci_driver *ldv_14_container = ldv_emg_alias_e1000_driver_2;
  
#line 694 
  int ldv_14_ret = ldv_undef_int();
  
#line 697 
  struct ldv_struct_pci_scenario_14 *data = (struct ldv_struct_pci_scenario_14 *)arg0;
  
#line 701 
  ldv_14_ret = ldv_undef_int();
  
#line 704 
  if (data != (struct ldv_struct_pci_scenario_14 *)0) {
    
#line 705 
    ldv_14_container = data->arg0;
    
#line 706 
    ldv_free((void *)data);
  }
  else ;
  
#line 717 
  goto ldv_main_14;
  
#line 719 
  __retres = (void *)0;
  
#line 719 
  goto return_label;
  ldv_main_14: 
#line 722 
  ;
  
#line 725 
  tmp_2 = ldv_undef_int();
  
#line 725 
  if (tmp_2 != 0) {
    int tmp_1;
    
#line 727 
    ldv_14_ldv_param_1_2 = (struct pci_device_id *)ldv_xmalloc_unknown_size(0UL);
    
#line 732 
    ldv_pre_probe();
    
#line 734 
    ldv_14_ret = ldv_emg_wrapper_e1000_probe_3(ldv_14_resource_1,ldv_14_ldv_param_1_2);
    
#line 736 
    ldv_14_ret = ldv_post_probe(ldv_14_ret);
    
#line 740 
    ldv_free((void *)ldv_14_ldv_param_1_2);
    
#line 743 
    tmp_1 = ldv_undef_int();
    
#line 743 
    if (tmp_1 != 0) {
      
#line 745 
      __VERIFIER_assume(ldv_14_ret == 0);
      
#line 752 
      goto ldv_call_14;
    }
    else {
      
#line 756 
      __VERIFIER_assume(ldv_14_ret != 0);
      
#line 763 
      goto ldv_main_14;
    }
  }
  else {
    
#line 775 
    __retres = (void *)0;
    
#line 775 
    goto return_label;
  }
  
#line 778 
  __retres = (void *)0;
  
#line 778 
  goto return_label;
  ldv_call_14: 
#line 781 
  ;
  
#line 784 
  tmp_3 = ldv_undef_int();
  
#line 784 
  switch (tmp_3) {
    case 1: 
#line 785 
    ;
    
#line 794 
    goto ldv_call_14;
    case 2: 
#line 797 
    ;
    
#line 799 
    if (ldv_14_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 801 
      ldv_14_ret = (*(ldv_14_container->suspend))(ldv_14_resource_1,ldv_14_resource_0);
      
#line 803 
      ldv_14_ret = ldv_filter_err_code(ldv_14_ret);
    }
    else 
#line 805 
         ldv_14_ret = ldv_undef_int();
    
#line 810 
    if (ldv_14_container->suspend_late != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 812 
      ldv_14_ret = (*(ldv_14_container->suspend_late))(ldv_14_resource_1,ldv_14_resource_0);
      
#line 814 
      ldv_14_ret = ldv_filter_err_code(ldv_14_ret);
    }
    else 
#line 816 
         ldv_14_ret = ldv_undef_int();
    
#line 821 
    if (ldv_14_container->resume_early != (int (*)(struct pci_dev *))0) 
      
#line 823 
      (*(ldv_14_container->resume_early))(ldv_14_resource_1); else ;
    
#line 828 
    if (ldv_14_container->resume != (int (*)(struct pci_dev *))0) 
#line 830 
                                                                  (*(ldv_14_container->resume))(ldv_14_resource_1); else ;
    
#line 838 
    goto ldv_call_14;
    case 3: 
#line 841 
    ;
    
#line 844 
    ldv_emg_wrapper_e1000_shutdown_2(ldv_14_resource_1);
    
#line 849 
    ldv_emg_wrapper_e1000_remove_4(ldv_14_resource_1);
    
#line 856 
    goto ldv_main_14;
    default: 
#line 859 
    ;
    
#line 859 
    __VERIFIER_assume(0);
  }
  
#line 862 
  __retres = (void *)0;
  return_label: 
#line 862 
                return __retres;
}


#line 867  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_random_allocationless_scenario_21(void *arg0)
{
  void *__retres;
  struct ethtool_coalesce *ldv_21_ldv_param_1_40;
  unsigned long long *ldv_21_ldv_param_2_26;
  unsigned short ldv_21_ldv_param_2_30;
  struct ethtool_test *ldv_21_ldv_param_1_25;
  unsigned long long ldv_21_ldv_param_1_14;
  unsigned short ldv_21_ldv_param_1_29;
  struct ethtool_ringparam *ldv_21_ldv_param_1_19;
  unsigned long long ldv_21_ldv_param_1_12;
  struct ethtool_eee *ldv_21_ldv_param_1_16;
  struct sk_buff *ldv_21_ldv_param_0_20;
  struct ethtool_wolinfo *ldv_21_ldv_param_1_33;
  void *ldv_21_ldv_param_1_21;
  struct ethtool_eeprom *ldv_21_ldv_param_1_17;
  int ldv_21_ldv_param_1_24;
  struct ethtool_rxnfc *ldv_21_ldv_param_1_36;
  struct net_device *ldv_21_container;
  unsigned char *ldv_21_ldv_param_2_39;
  unsigned char *ldv_21_ldv_param_2_18;
  struct ethtool_wolinfo *ldv_21_ldv_param_1_28;
  struct ethtool_cmd *ldv_21_ldv_param_1_3;
  struct ethtool_cmd *ldv_21_ldv_param_1_4;
  struct ethtool_drvinfo *ldv_21_ldv_param_1_13;
  unsigned long long *ldv_21_ldv_param_2_10;
  struct ethtool_eee *ldv_21_ldv_param_1_15;
  struct ethtool_regs *ldv_21_ldv_param_1_34;
  unsigned char *ldv_21_ldv_param_2_23;
  struct ethtool_ringparam *ldv_21_ldv_param_1_8;
  struct ethtool_pauseparam *ldv_21_ldv_param_1_42;
  struct ethtool_pauseparam *ldv_21_ldv_param_1_2;
  unsigned short ldv_21_ldv_param_2_44;
  enum ethtool_phys_id_state *ldv_21_ldv_param_1_5;
  int ldv_21_ldv_param_1_11;
  unsigned short ldv_21_ldv_param_1_43;
  unsigned int ldv_21_ldv_param_1_38;
  unsigned int *ldv_21_ldv_param_2_37;
  unsigned int ldv_21_ldv_param_1_27;
  struct ethtool_coalesce *ldv_21_ldv_param_1_41;
  struct rtnl_link_stats64 *ldv_21_ldv_param_1_7;
  struct ethtool_ts_info *ldv_21_ldv_param_1_6;
  struct ifreq *ldv_21_ldv_param_1_31;
  struct ethtool_stats *ldv_21_ldv_param_1_9;
  void *ldv_21_ldv_param_2_35;
  int ldv_21_ldv_param_2_32;
  struct ethtool_eeprom *ldv_21_ldv_param_1_22;
  int tmp_30;
  
#line 915 
  struct ldv_struct_random_allocationless_scenario_21 *data = (struct ldv_struct_random_allocationless_scenario_21 *)arg0;
  
#line 920 
  if (data != (struct ldv_struct_random_allocationless_scenario_21 *)0) {
    
#line 921 
    ldv_21_container = data->arg0;
    
#line 922 
    ldv_free((void *)data);
  }
  else ;
  
#line 930 
  goto ldv_call_21;
  
#line 932 
  __retres = (void *)0;
  
#line 932 
  goto return_label;
  ldv_call_21: 
#line 935 
  ;
  
#line 938 
  tmp_30 = ldv_undef_int();
  
#line 938 
  if (tmp_30 != 0) {
    int tmp_0;
    
#line 940 
    ldv_21_ldv_param_1_2 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    
#line 943 
    tmp_0 = ldv_undef_int();
    
#line 943 
    switch (tmp_0) {
      case 1: 
#line 944 
      ;
      
#line 947 
      ldv_emg_wrapper_e1000_get_pauseparam_2(ldv_21_container,ldv_21_ldv_param_1_2);
      
#line 950 
      goto ldv_45022;
      case 2: 
#line 952 
      ;
      
#line 955 
      ldv_emg_wrapper_e1000e_set_rx_mode_7(ldv_21_container);
      
#line 958 
      goto ldv_45022;
      case 3: 
#line 960 
      ;
      
#line 963 
      ldv_emg_wrapper_e1000_nway_reset_34(ldv_21_container);
      
#line 966 
      goto ldv_45022;
      case 4: 
#line 968 
      ;
      
#line 974 
      ldv_emg_wrapper_e1000_vlan_rx_kill_vid_40(ldv_21_container,(unsigned short)((int)ldv_21_ldv_param_1_43),(unsigned short)((int)ldv_21_ldv_param_2_44));
      
#line 980 
      goto ldv_45022;
      case 5: 
#line 982 
      ;
      
#line 984 
      ldv_21_ldv_param_1_42 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 989 
      ldv_emg_wrapper_e1000_set_pauseparam_39(ldv_21_container,ldv_21_ldv_param_1_42);
      
#line 993 
      ldv_free((void *)ldv_21_ldv_param_1_42);
      
#line 996 
      goto ldv_45022;
      case 6: 
#line 998 
      ;
      
#line 1000 
      ldv_21_ldv_param_1_41 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 1005 
      ldv_emg_wrapper_e1000_set_coalesce_38(ldv_21_container,ldv_21_ldv_param_1_41);
      
#line 1009 
      ldv_free((void *)ldv_21_ldv_param_1_41);
      
#line 1012 
      goto ldv_45022;
      case 7: 
#line 1014 
      ;
      
#line 1017 
      ldv_emg_wrapper_e1000_get_regs_len_37(ldv_21_container);
      
#line 1020 
      goto ldv_45022;
      case 8: 
#line 1022 
      ;
      
#line 1024 
      ldv_21_ldv_param_1_40 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 1029 
      ldv_emg_wrapper_e1000_get_coalesce_36(ldv_21_container,ldv_21_ldv_param_1_40);
      
#line 1033 
      ldv_free((void *)ldv_21_ldv_param_1_40);
      
#line 1036 
      goto ldv_45022;
      case 9: 
#line 1038 
      ;
      
#line 1040 
      ldv_21_ldv_param_2_39 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1045 
      ldv_emg_wrapper_e1000_get_strings_25(ldv_21_container,ldv_21_ldv_param_1_38,ldv_21_ldv_param_2_39);
      
#line 1049 
      ldv_free((void *)ldv_21_ldv_param_2_39);
      
#line 1052 
      goto ldv_45022;
      case 10: 
#line 1054 
      ;
      
#line 1057 
      ldv_emg_wrapper_e1000_netpoll_41(ldv_21_container);
      
#line 1060 
      goto ldv_45022;
      case 11: 
#line 1062 
      ;
      
#line 1064 
      ldv_21_ldv_param_1_36 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
      
#line 1065 
      ldv_21_ldv_param_2_37 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
      
#line 1070 
      ldv_emg_wrapper_e1000_get_rxnfc_33(ldv_21_container,ldv_21_ldv_param_1_36,ldv_21_ldv_param_2_37);
      
#line 1074 
      ldv_free((void *)ldv_21_ldv_param_1_36);
      
#line 1075 
      ldv_free((void *)ldv_21_ldv_param_2_37);
      
#line 1078 
      goto ldv_45022;
      case 12: 
#line 1080 
      ;
      
#line 1083 
      ldv_emg_wrapper_e1000_tx_timeout_23(ldv_21_container);
      
#line 1086 
      goto ldv_45022;
      case 13: 
#line 1088 
      ;
      
#line 1090 
      ldv_21_ldv_param_1_34 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
      
#line 1091 
      ldv_21_ldv_param_2_35 = ldv_xmalloc_unknown_size(0UL);
      
#line 1096 
      ldv_emg_wrapper_e1000_get_regs_31(ldv_21_container,ldv_21_ldv_param_1_34,ldv_21_ldv_param_2_35);
      
#line 1100 
      ldv_free((void *)ldv_21_ldv_param_1_34);
      
#line 1101 
      ldv_free(ldv_21_ldv_param_2_35);
      
#line 1104 
      goto ldv_45022;
      case 14: 
#line 1106 
      ;
      
#line 1108 
      ldv_21_ldv_param_1_33 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1113 
      ldv_emg_wrapper_e1000_set_wol_30(ldv_21_container,ldv_21_ldv_param_1_33);
      
#line 1117 
      ldv_free((void *)ldv_21_ldv_param_1_33);
      
#line 1120 
      goto ldv_45022;
      case 15: 
#line 1122 
      ;
      
#line 1125 
      (*ldv_emg_alias_eth_validate_addr_29)(ldv_21_container);
      
#line 1128 
      goto ldv_45022;
      case 16: 
#line 1130 
      ;
      
#line 1132 
      ldv_21_ldv_param_1_31 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
      
#line 1137 
      ldv_emg_wrapper_e1000_ioctl_28(ldv_21_container,ldv_21_ldv_param_1_31,ldv_21_ldv_param_2_32);
      
#line 1141 
      ldv_free((void *)ldv_21_ldv_param_1_31);
      
#line 1144 
      goto ldv_45022;
      case 17: 
#line 1146 
      ;
      
#line 1152 
      ldv_emg_wrapper_e1000_vlan_rx_add_vid_27(ldv_21_container,(unsigned short)((int)ldv_21_ldv_param_1_29),(unsigned short)((int)ldv_21_ldv_param_2_30));
      
#line 1158 
      goto ldv_45022;
      case 18: 
#line 1160 
      ;
      
#line 1162 
      ldv_21_ldv_param_1_28 = (struct ethtool_wolinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1167 
      ldv_emg_wrapper_e1000_get_wol_26(ldv_21_container,ldv_21_ldv_param_1_28);
      
#line 1171 
      ldv_free((void *)ldv_21_ldv_param_1_28);
      
#line 1174 
      goto ldv_45022;
      case 19: 
#line 1176 
      ;
      
#line 1182 
      ldv_emg_wrapper_e1000_set_msglevel_6(ldv_21_container,ldv_21_ldv_param_1_27);
      
#line 1188 
      goto ldv_45022;
      case 20: 
#line 1190 
      ;
      
#line 1192 
      ldv_21_ldv_param_2_26 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1193 
      ldv_21_ldv_param_1_25 = (struct ethtool_test *)ldv_xmalloc_unknown_size(0UL);
      
#line 1198 
      ldv_emg_wrapper_e1000_diag_test_24(ldv_21_container,ldv_21_ldv_param_1_25,ldv_21_ldv_param_2_26);
      
#line 1202 
      ldv_free((void *)ldv_21_ldv_param_2_26);
      
#line 1203 
      ldv_free((void *)ldv_21_ldv_param_1_25);
      
#line 1206 
      goto ldv_45022;
      case 21: 
#line 1208 
      ;
      
#line 1214 
      ldv_emg_wrapper_e1000e_get_sset_count_32(ldv_21_container,ldv_21_ldv_param_1_24);
      
#line 1220 
      goto ldv_45022;
      case 22: 
#line 1222 
      ;
      
#line 1224 
      ldv_21_ldv_param_1_22 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
      
#line 1225 
      ldv_21_ldv_param_2_23 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1230 
      ldv_emg_wrapper_e1000_get_eeprom_3(ldv_21_container,ldv_21_ldv_param_1_22,ldv_21_ldv_param_2_23);
      
#line 1234 
      ldv_free((void *)ldv_21_ldv_param_1_22);
      
#line 1235 
      ldv_free((void *)ldv_21_ldv_param_2_23);
      
#line 1238 
      goto ldv_45022;
      case 23: 
#line 1240 
      ;
      
#line 1242 
      ldv_21_ldv_param_1_21 = ldv_xmalloc_unknown_size(0UL);
      
#line 1247 
      ldv_emg_wrapper_e1000_set_mac_21(ldv_21_container,ldv_21_ldv_param_1_21);
      
#line 1251 
      ldv_free(ldv_21_ldv_param_1_21);
      
#line 1254 
      goto ldv_45022;
      case 24: 
#line 1256 
      ;
      
#line 1258 
      ldv_21_ldv_param_0_20 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 1263 
      ldv_emg_wrapper_e1000_xmit_frame_20(ldv_21_ldv_param_0_20,ldv_21_container);
      
#line 1267 
      ldv_free((void *)ldv_21_ldv_param_0_20);
      
#line 1270 
      goto ldv_45022;
      case 25: 
#line 1272 
      ;
      
#line 1275 
      ldv_emg_wrapper_e1000_get_msglevel_19(ldv_21_container);
      
#line 1278 
      goto ldv_45022;
      case 26: 
#line 1280 
      ;
      
#line 1282 
      ldv_21_ldv_param_1_19 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1287 
      ldv_emg_wrapper_e1000_set_ringparam_18(ldv_21_container,ldv_21_ldv_param_1_19);
      
#line 1291 
      ldv_free((void *)ldv_21_ldv_param_1_19);
      
#line 1294 
      goto ldv_45022;
      case 27: 
#line 1296 
      ;
      
#line 1298 
      ldv_21_ldv_param_1_17 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
      
#line 1299 
      ldv_21_ldv_param_2_18 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1304 
      ldv_emg_wrapper_e1000_set_eeprom_17(ldv_21_container,ldv_21_ldv_param_1_17,ldv_21_ldv_param_2_18);
      
#line 1308 
      ldv_free((void *)ldv_21_ldv_param_1_17);
      
#line 1309 
      ldv_free((void *)ldv_21_ldv_param_2_18);
      
#line 1312 
      goto ldv_45022;
      case 28: 
#line 1314 
      ;
      
#line 1316 
      ldv_21_ldv_param_1_16 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
      
#line 1321 
      ldv_emg_wrapper_e1000e_get_eee_16(ldv_21_container,ldv_21_ldv_param_1_16);
      
#line 1325 
      ldv_free((void *)ldv_21_ldv_param_1_16);
      
#line 1328 
      goto ldv_45022;
      case 29: 
#line 1330 
      ;
      
#line 1332 
      ldv_21_ldv_param_1_15 = (struct ethtool_eee *)ldv_xmalloc_unknown_size(0UL);
      
#line 1337 
      ldv_emg_wrapper_e1000e_set_eee_15(ldv_21_container,ldv_21_ldv_param_1_15);
      
#line 1341 
      ldv_free((void *)ldv_21_ldv_param_1_15);
      
#line 1344 
      goto ldv_45022;
      case 30: 
#line 1346 
      ;
      
#line 1352 
      ldv_emg_wrapper_e1000_fix_features_14(ldv_21_container,ldv_21_ldv_param_1_14);
      
#line 1358 
      goto ldv_45022;
      case 31: 
#line 1360 
      ;
      
#line 1362 
      ldv_21_ldv_param_1_13 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 1367 
      ldv_emg_wrapper_e1000_get_drvinfo_13(ldv_21_container,ldv_21_ldv_param_1_13);
      
#line 1371 
      ldv_free((void *)ldv_21_ldv_param_1_13);
      
#line 1374 
      goto ldv_45022;
      case 32: 
#line 1376 
      ;
      
#line 1382 
      ldv_emg_wrapper_e1000_set_features_12(ldv_21_container,ldv_21_ldv_param_1_12);
      
#line 1388 
      goto ldv_45022;
      case 33: 
#line 1390 
      ;
      
#line 1393 
      (*ldv_emg_alias_ethtool_op_get_link_11)(ldv_21_container);
      
#line 1396 
      goto ldv_45022;
      case 34: 
#line 1398 
      ;
      
#line 1404 
      ldv_emg_wrapper_e1000_change_mtu_10(ldv_21_container,ldv_21_ldv_param_1_11);
      
#line 1410 
      goto ldv_45022;
      case 35: 
#line 1412 
      ;
      
#line 1415 
      ldv_emg_wrapper_e1000_get_eeprom_len_42(ldv_21_container);
      
#line 1418 
      goto ldv_45022;
      case 36: 
#line 1420 
      ;
      
#line 1422 
      ldv_21_ldv_param_1_9 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
      
#line 1423 
      ldv_21_ldv_param_2_10 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1428 
      ldv_emg_wrapper_e1000_get_ethtool_stats_9(ldv_21_container,ldv_21_ldv_param_1_9,ldv_21_ldv_param_2_10);
      
#line 1432 
      ldv_free((void *)ldv_21_ldv_param_1_9);
      
#line 1433 
      ldv_free((void *)ldv_21_ldv_param_2_10);
      
#line 1436 
      goto ldv_45022;
      case 37: 
#line 1438 
      ;
      
#line 1440 
      ldv_21_ldv_param_1_8 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 1445 
      ldv_emg_wrapper_e1000_get_ringparam_8(ldv_21_container,ldv_21_ldv_param_1_8);
      
#line 1449 
      ldv_free((void *)ldv_21_ldv_param_1_8);
      
#line 1452 
      goto ldv_45022;
      case 38: 
#line 1454 
      ;
      
#line 1456 
      ldv_21_ldv_param_1_7 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
      
#line 1461 
      e1000e_get_stats64(ldv_21_container,ldv_21_ldv_param_1_7);
      
#line 1465 
      ldv_free((void *)ldv_21_ldv_param_1_7);
      
#line 1468 
      goto ldv_45022;
      case 39: 
#line 1470 
      ;
      
#line 1472 
      ldv_21_ldv_param_1_6 = (struct ethtool_ts_info *)ldv_xmalloc_unknown_size(0UL);
      
#line 1477 
      ldv_emg_wrapper_e1000e_get_ts_info_35(ldv_21_container,ldv_21_ldv_param_1_6);
      
#line 1481 
      ldv_free((void *)ldv_21_ldv_param_1_6);
      
#line 1484 
      goto ldv_45022;
      case 40: 
#line 1486 
      ;
      
#line 1488 
      ldv_21_ldv_param_1_5 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
      
#line 1493 
      ldv_emg_wrapper_e1000_set_phys_id_5(ldv_21_container,*ldv_21_ldv_param_1_5);
      
#line 1497 
      ldv_free((void *)ldv_21_ldv_param_1_5);
      
#line 1500 
      goto ldv_45022;
      case 41: 
#line 1502 
      ;
      
#line 1504 
      ldv_21_ldv_param_1_4 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
      
#line 1509 
      ldv_emg_wrapper_e1000_set_settings_4(ldv_21_container,ldv_21_ldv_param_1_4);
      
#line 1513 
      ldv_free((void *)ldv_21_ldv_param_1_4);
      
#line 1516 
      goto ldv_45022;
      case 42: 
#line 1518 
      ;
      
#line 1520 
      ldv_21_ldv_param_1_3 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
      
#line 1525 
      ldv_emg_wrapper_e1000_get_settings_22(ldv_21_container,ldv_21_ldv_param_1_3);
      
#line 1529 
      ldv_free((void *)ldv_21_ldv_param_1_3);
      
#line 1532 
      goto ldv_45022;
      default: 
#line 1534 
      ;
      
#line 1534 
      __VERIFIER_assume(0);
    }
    ldv_45022: 
#line 1537 
    ;
    
#line 1537 
    ldv_free((void *)ldv_21_ldv_param_1_2);
    
#line 1544 
    goto ldv_call_21;
  }
  else {
    
#line 1552 
    __retres = (void *)0;
    
#line 1552 
    goto return_label;
  }
  
#line 1555 
  __retres = (void *)0;
  return_label: 
#line 1555 
                return __retres;
}


#line 1560  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_24(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_24_ret_val;
  int ldv_24_line;
  void *ldv_24_data;
  enum irqreturn (*ldv_24_thread)(int , void *);
  int tmp;
  
#line 1566 
  enum irqreturn (*ldv_24_callback)(int , void *) = & ldv_emg_wrapper_e1000_test_intr_2;
  
#line 1569 
  struct ldv_struct_interrupt_scenario_15 *data = (struct ldv_struct_interrupt_scenario_15 *)arg0;
  
#line 1574 
  if (data != (struct ldv_struct_interrupt_scenario_15 *)0) {
    
#line 1575 
    ldv_24_line = data->arg0;
    
#line 1576 
    ldv_24_callback = data->arg1;
    
#line 1577 
    ldv_24_thread = data->arg2;
    
#line 1578 
    ldv_24_data = data->arg3;
    
#line 1579 
    ldv_free((void *)data);
  }
  else ;
  
#line 1585 
  ldv_switch_to_interrupt_context();
  
#line 1587 
  ldv_24_ret_val = ldv_emg_wrapper_e1000_test_intr_2(ldv_24_line,ldv_24_data);
  
#line 1589 
  ldv_switch_to_process_context();
  
#line 1592 
  tmp = ldv_undef_int();
  
#line 1592 
  if (tmp != 0) {
    
#line 1594 
    __VERIFIER_assume(ldv_24_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 1598 
    if (ldv_24_thread != (enum irqreturn (*)(int , void *))0) 
#line 1600 
                                                              (*ldv_24_thread)(ldv_24_line,ldv_24_data); else ;
  }
  else 
#line 1607 
       __VERIFIER_assume(ldv_24_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 1616 
  __retres = (void *)0;
  
#line 1616 
  goto return_label;
  
#line 1618 
  __retres = (void *)0;
  return_label: 
#line 1618 
                return __retres;
}


#line 1623  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_register_13_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  int ret;
  struct ldv_struct_interrupt_scenario_15 *cf_arg_17;
  struct ldv_struct_interrupt_scenario_15 *cf_arg_18;
  struct ldv_struct_interrupt_scenario_15 *cf_arg_20;
  struct ldv_struct_interrupt_scenario_15 *cf_arg_22;
  struct ldv_struct_interrupt_scenario_15 *cf_arg_23;
  struct ldv_struct_interrupt_scenario_15 *cf_arg_24;
  struct ldv_struct_interrupt_scenario_15 *cf_arg_15;
  int tmp;
  
#line 1632 
  tmp = ldv_undef_int();
  
#line 1632 
  switch (tmp) {
    case 0: 
#line 1633 
    ;
    
#line 1634 
    cf_arg_17 = (struct ldv_struct_interrupt_scenario_15 *)ldv_xmalloc(32UL);
    
#line 1635 
    cf_arg_17->arg0 = arg0;
    
#line 1636 
    cf_arg_17->arg1 = arg1;
    
#line 1637 
    cf_arg_17->arg2 = arg2;
    
#line 1638 
    cf_arg_17->arg3 = arg3;
    
#line 1639 
    ret = pthread_create(& ldv_thread_17,(pthread_attr_t const *)0,& ldv_interrupt_scenario_17,(void *)cf_arg_17);
    
#line 1640 
    __VERIFIER_assume(ret == 0);
    
#line 1641 
    goto ldv_45097;
    case 1: 
#line 1643 
    ;
    
#line 1644 
    cf_arg_18 = (struct ldv_struct_interrupt_scenario_15 *)ldv_xmalloc(32UL);
    
#line 1645 
    cf_arg_18->arg0 = arg0;
    
#line 1646 
    cf_arg_18->arg1 = arg1;
    
#line 1647 
    cf_arg_18->arg2 = arg2;
    
#line 1648 
    cf_arg_18->arg3 = arg3;
    
#line 1649 
    ret = pthread_create(& ldv_thread_18,(pthread_attr_t const *)0,& ldv_interrupt_scenario_18,(void *)cf_arg_18);
    
#line 1650 
    __VERIFIER_assume(ret == 0);
    
#line 1651 
    goto ldv_45097;
    case 2: 
#line 1653 
    ;
    
#line 1654 
    cf_arg_20 = (struct ldv_struct_interrupt_scenario_15 *)ldv_xmalloc(32UL);
    
#line 1655 
    cf_arg_20->arg0 = arg0;
    
#line 1656 
    cf_arg_20->arg1 = arg1;
    
#line 1657 
    cf_arg_20->arg2 = arg2;
    
#line 1658 
    cf_arg_20->arg3 = arg3;
    
#line 1659 
    ret = pthread_create(& ldv_thread_20,(pthread_attr_t const *)0,& ldv_interrupt_scenario_20,(void *)cf_arg_20);
    
#line 1660 
    __VERIFIER_assume(ret == 0);
    
#line 1661 
    goto ldv_45097;
    case 3: 
#line 1663 
    ;
    
#line 1664 
    cf_arg_22 = (struct ldv_struct_interrupt_scenario_15 *)ldv_xmalloc(32UL);
    
#line 1665 
    cf_arg_22->arg0 = arg0;
    
#line 1666 
    cf_arg_22->arg1 = arg1;
    
#line 1667 
    cf_arg_22->arg2 = arg2;
    
#line 1668 
    cf_arg_22->arg3 = arg3;
    
#line 1669 
    ret = pthread_create(& ldv_thread_22,(pthread_attr_t const *)0,& ldv_interrupt_scenario_22,(void *)cf_arg_22);
    
#line 1670 
    __VERIFIER_assume(ret == 0);
    
#line 1671 
    goto ldv_45097;
    case 4: 
#line 1673 
    ;
    
#line 1674 
    cf_arg_23 = (struct ldv_struct_interrupt_scenario_15 *)ldv_xmalloc(32UL);
    
#line 1675 
    cf_arg_23->arg0 = arg0;
    
#line 1676 
    cf_arg_23->arg1 = arg1;
    
#line 1677 
    cf_arg_23->arg2 = arg2;
    
#line 1678 
    cf_arg_23->arg3 = arg3;
    
#line 1679 
    ret = pthread_create(& ldv_thread_23,(pthread_attr_t const *)0,& ldv_interrupt_scenario_23,(void *)cf_arg_23);
    
#line 1680 
    __VERIFIER_assume(ret == 0);
    
#line 1681 
    goto ldv_45097;
    case 5: 
#line 1683 
    ;
    
#line 1684 
    cf_arg_24 = (struct ldv_struct_interrupt_scenario_15 *)ldv_xmalloc(32UL);
    
#line 1685 
    cf_arg_24->arg0 = arg0;
    
#line 1686 
    cf_arg_24->arg1 = arg1;
    
#line 1687 
    cf_arg_24->arg2 = arg2;
    
#line 1688 
    cf_arg_24->arg3 = arg3;
    
#line 1689 
    ret = pthread_create(& ldv_thread_24,(pthread_attr_t const *)0,& ldv_interrupt_scenario_24,(void *)cf_arg_24);
    
#line 1690 
    __VERIFIER_assume(ret == 0);
    
#line 1691 
    goto ldv_45097;
    case 6: 
#line 1693 
    ;
    
#line 1694 
    cf_arg_15 = (struct ldv_struct_interrupt_scenario_15 *)ldv_xmalloc(32UL);
    
#line 1695 
    cf_arg_15->arg0 = arg0;
    
#line 1696 
    cf_arg_15->arg1 = arg1;
    
#line 1697 
    cf_arg_15->arg2 = arg2;
    
#line 1698 
    cf_arg_15->arg3 = arg3;
    
#line 1699 
    ret = pthread_create(& ldv_thread_15,(pthread_attr_t const *)0,& ldv_interrupt_scenario_15,(void *)cf_arg_15);
    
#line 1700 
    __VERIFIER_assume(ret == 0);
    
#line 1701 
    goto ldv_45097;
    default: 
#line 1703 
    ;
    
#line 1703 
    __VERIFIER_assume(0);
  }
  ldv_45097: 
#line 1704 
  ;
  
#line 1705 
  return;
}


#line 1709  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_del_timer_sync(struct timer_list *arg0)
{
  int __retres;
  struct timer_list *ldv_12_timer_list;
  
#line 1715 
  ldv_12_timer_list = arg0;
  
#line 1719 
  ldv_dispatch_instance_deregister_12_1(ldv_12_timer_list);
  
#line 1720 
  ;
  
#line 1720 
  __retres = 0;
  
#line 1720 
  return __retres;
}


#line 1728  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_schedule_work(struct work_struct *arg0)
{
  _Bool __retres;
  struct work_struct *ldv_11_work_struct;
  int tmp;
  
#line 1735 
  tmp = ldv_undef_int();
  
#line 1735 
  if (tmp != 0) {
    
#line 1737 
    ldv_11_work_struct = arg0;
    
#line 1741 
    if (ldv_11_work_struct->func != (void (*)(struct work_struct *))0) 
      
#line 1743 
      (*(ldv_11_work_struct->func))(ldv_11_work_struct); else ;
    
#line 1748 
    __retres = (_Bool)1;
    
#line 1748 
    goto return_label;
  }
  else {
    
#line 1755 
    __retres = (_Bool)0;
    
#line 1755 
    goto return_label;
  }
  return_label: 
#line 1735 
                return __retres;
}


#line 1765  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_8_1(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_14 *cf_arg_14;
  int tmp;
  
#line 1768 
  tmp = ldv_undef_int();
  
#line 1768 
  switch (tmp) {
    case 0: 
#line 1769 
    ;
    
#line 1770 
    ret = pthread_join(ldv_thread_14,(void **)0);
    
#line 1771 
    __VERIFIER_assume(ret == 0);
    
#line 1772 
    goto ldv_45119;
    default: 
#line 1774 
    ;
    
#line 1774 
    __VERIFIER_assume(0);
  }
  ldv_45119: 
#line 1775 
  ;
  
#line 1776 
  return;
}


#line 1780  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pm_ops_scenario_19(void *arg0)
{
  void *__retres;
  struct device *ldv_19_device;
  int tmp;
  
#line 1783 
  struct dev_pm_ops *ldv_19_pm_ops = ldv_emg_alias_e1000_pm_ops_5;
  
#line 1794 
  goto ldv_do_19;
  
#line 1796 
  __retres = (void *)0;
  
#line 1796 
  goto return_label;
  ldv_do_19: 
#line 1799 
  ;
  
#line 1802 
  tmp = ldv_undef_int();
  
#line 1802 
  switch (tmp) {
    int tmp_0;
    case 1: 
#line 1803 
    ;
    
#line 1806 
    ldv_emg_wrapper_e1000e_pm_runtime_idle_4(ldv_19_device);
    
#line 1813 
    goto ldv_do_19;
    case 2: 
#line 1816 
    ;
    
#line 1819 
    ldv_emg_wrapper_e1000e_pm_runtime_suspend_8(ldv_19_device);
    
#line 1824 
    ldv_emg_wrapper_e1000e_pm_runtime_resume_9(ldv_19_device);
    
#line 1831 
    goto ldv_do_19;
    case 3: 
#line 1834 
    ;
    
#line 1836 
    if (ldv_19_pm_ops->prepare != (int (*)(struct device *))0) 
#line 1838 
                                                               (*(ldv_19_pm_ops->prepare))(ldv_19_device); else ;
    
#line 1842 
    tmp_0 = ldv_undef_int();
    
#line 1842 
    switch (tmp_0) {
      int tmp_1;
      int tmp_2;
      int tmp_3;
      case 1: 
#line 1843 
      ;
      
#line 1846 
      ldv_emg_wrapper_e1000e_pm_suspend_2(ldv_19_device);
      
#line 1849 
      tmp_1 = ldv_undef_int();
      
#line 1849 
      if (tmp_1 != 0) {
        
#line 1851 
        if (ldv_19_pm_ops->suspend_noirq != (int (*)(struct device *))0) 
          
#line 1853 
          (*(ldv_19_pm_ops->suspend_noirq))(ldv_19_device); else ;
        
#line 1858 
        if (ldv_19_pm_ops->resume_noirq != (int (*)(struct device *))0) 
          
#line 1860 
          (*(ldv_19_pm_ops->resume_noirq))(ldv_19_device); else ;
      }
      else {
        
#line 1867 
        if (ldv_19_pm_ops->suspend_late != (int (*)(struct device *))0) 
          
#line 1869 
          (*(ldv_19_pm_ops->suspend_late))(ldv_19_device); else ;
        
#line 1874 
        if (ldv_19_pm_ops->resume_early != (int (*)(struct device *))0) 
          
#line 1876 
          (*(ldv_19_pm_ops->resume_early))(ldv_19_device); else ;
      }
      
#line 1883 
      ldv_emg_wrapper_e1000e_pm_resume_6(ldv_19_device);
      
#line 1886 
      goto ldv_45131;
      case 2: 
#line 1888 
      ;
      
#line 1891 
      ldv_emg_wrapper_e1000e_pm_freeze_3(ldv_19_device);
      
#line 1894 
      tmp_2 = ldv_undef_int();
      
#line 1894 
      if (tmp_2 != 0) {
        
#line 1896 
        if (ldv_19_pm_ops->freeze_late != (int (*)(struct device *))0) 
          
#line 1898 
          (*(ldv_19_pm_ops->freeze_late))(ldv_19_device); else ;
        
#line 1903 
        if (ldv_19_pm_ops->thaw_early != (int (*)(struct device *))0) 
          
#line 1905 
          (*(ldv_19_pm_ops->thaw_early))(ldv_19_device); else ;
      }
      else {
        
#line 1912 
        if (ldv_19_pm_ops->freeze_noirq != (int (*)(struct device *))0) 
          
#line 1914 
          (*(ldv_19_pm_ops->freeze_noirq))(ldv_19_device); else ;
        
#line 1919 
        if (ldv_19_pm_ops->thaw_noirq != (int (*)(struct device *))0) 
          
#line 1921 
          (*(ldv_19_pm_ops->thaw_noirq))(ldv_19_device); else ;
      }
      
#line 1928 
      ldv_emg_wrapper_e1000e_pm_thaw_7(ldv_19_device);
      
#line 1931 
      goto ldv_45131;
      case 3: 
#line 1933 
      ;
      
#line 1936 
      ldv_emg_wrapper_e1000e_pm_suspend_2(ldv_19_device);
      
#line 1939 
      tmp_3 = ldv_undef_int();
      
#line 1939 
      if (tmp_3 != 0) {
        
#line 1941 
        if (ldv_19_pm_ops->poweroff_late != (int (*)(struct device *))0) 
          
#line 1943 
          (*(ldv_19_pm_ops->poweroff_late))(ldv_19_device); else ;
        
#line 1948 
        if (ldv_19_pm_ops->restore_early != (int (*)(struct device *))0) 
          
#line 1950 
          (*(ldv_19_pm_ops->restore_early))(ldv_19_device); else ;
      }
      else {
        
#line 1957 
        if (ldv_19_pm_ops->poweroff_noirq != (int (*)(struct device *))0) 
          
#line 1959 
          (*(ldv_19_pm_ops->poweroff_noirq))(ldv_19_device); else ;
        
#line 1964 
        if (ldv_19_pm_ops->restore_noirq != (int (*)(struct device *))0) 
          
#line 1966 
          (*(ldv_19_pm_ops->restore_noirq))(ldv_19_device); else ;
      }
      
#line 1973 
      ldv_emg_wrapper_e1000e_pm_resume_6(ldv_19_device);
      
#line 1976 
      goto ldv_45131;
      default: 
#line 1978 
      ;
      
#line 1978 
      __VERIFIER_assume(0);
    }
    ldv_45131: 
#line 1981 
    ;
    
#line 1981 
    if (ldv_19_pm_ops->complete != (void (*)(struct device *))0) 
#line 1983 
                                                                 (*(ldv_19_pm_ops->complete))(ldv_19_device); else ;
    
#line 1991 
    goto ldv_do_19;
    case 4: 
#line 1994 
    ;
    
#line 2000 
    __retres = (void *)0;
    
#line 2000 
    goto return_label;
    default: 
#line 2003 
    ;
    
#line 2003 
    __VERIFIER_assume(0);
  }
  
#line 2006 
  __retres = (void *)0;
  return_label: 
#line 2006 
                return __retres;
}


#line 2011  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_timer_scenario_16(void *arg0)
{
  void *__retres;
  struct timer_list *ldv_16_container;
  
#line 2016 
  struct ldv_struct_timer_scenario_16 *data = (struct ldv_struct_timer_scenario_16 *)arg0;
  
#line 2021 
  if (data != (struct ldv_struct_timer_scenario_16 *)0) {
    
#line 2022 
    ldv_16_container = data->arg0;
    
#line 2023 
    ldv_free((void *)data);
  }
  else ;
  
#line 2028 
  if (ldv_16_container->function != (void (*)(unsigned long ))0) {
    
#line 2030 
    ldv_switch_to_interrupt_context();
    
#line 2032 
    (*(ldv_16_container->function))(ldv_16_container->data);
    
#line 2034 
    ldv_switch_to_process_context();
  }
  else ;
  
#line 2043 
  __retres = (void *)0;
  
#line 2043 
  goto return_label;
  
#line 2045 
  __retres = (void *)0;
  return_label: 
#line 2045 
                return __retres;
}


#line 2050  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_15(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_15_ret_val;
  int ldv_15_line;
  void *ldv_15_data;
  enum irqreturn (*ldv_15_thread)(int , void *);
  int tmp;
  
#line 2056 
  enum irqreturn (*ldv_15_callback)(int , void *) = & ldv_emg_wrapper_e1000_msix_other_2;
  
#line 2059 
  struct ldv_struct_interrupt_scenario_15 *data = (struct ldv_struct_interrupt_scenario_15 *)arg0;
  
#line 2064 
  if (data != (struct ldv_struct_interrupt_scenario_15 *)0) {
    
#line 2065 
    ldv_15_line = data->arg0;
    
#line 2066 
    ldv_15_callback = data->arg1;
    
#line 2067 
    ldv_15_thread = data->arg2;
    
#line 2068 
    ldv_15_data = data->arg3;
    
#line 2069 
    ldv_free((void *)data);
  }
  else ;
  
#line 2075 
  ldv_switch_to_interrupt_context();
  
#line 2077 
  ldv_15_ret_val = ldv_emg_wrapper_e1000_msix_other_2(ldv_15_line,ldv_15_data);
  
#line 2079 
  ldv_switch_to_process_context();
  
#line 2082 
  tmp = ldv_undef_int();
  
#line 2082 
  if (tmp != 0) {
    
#line 2084 
    __VERIFIER_assume(ldv_15_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 2088 
    if (ldv_15_thread != (enum irqreturn (*)(int , void *))0) 
#line 2090 
                                                              (*ldv_15_thread)(ldv_15_line,ldv_15_data); else ;
  }
  else 
#line 2097 
       __VERIFIER_assume(ldv_15_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 2106 
  __retres = (void *)0;
  
#line 2106 
  goto return_label;
  
#line 2108 
  __retres = (void *)0;
  return_label: 
#line 2108 
                return __retres;
}


#line 2113  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0)
{
  
#line 2116 
  struct pci_driver *ldv_8_pci_driver = ldv_emg_alias_e1000_driver_2;
  
#line 2119 
  ldv_8_pci_driver = arg0;
  
#line 2123 
  ldv_dispatch_deregister_8_1(ldv_8_pci_driver);
  
#line 2127 
  goto return_label;
  return_label: 
#line 2129 
                return;
}


#line 2134  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_register_3_3(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_16 *cf_arg_16;
  int tmp;
  
#line 2137 
  tmp = ldv_undef_int();
  
#line 2137 
  switch (tmp) {
    case 0: 
#line 2138 
    ;
    
#line 2139 
    cf_arg_16 = (struct ldv_struct_timer_scenario_16 *)ldv_xmalloc(16UL);
    
#line 2140 
    cf_arg_16->arg0 = arg0;
    
#line 2141 
    ret = pthread_create(& ldv_thread_16,(pthread_attr_t const *)0,& ldv_timer_scenario_16,(void *)cf_arg_16);
    
#line 2142 
    __VERIFIER_assume(ret == 0);
    
#line 2143 
    goto ldv_45165;
    default: 
#line 2145 
    ;
    
#line 2145 
    __VERIFIER_assume(0);
  }
  ldv_45165: 
#line 2146 
  ;
  
#line 2147 
  return;
}


#line 2151  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_deregister_6_1(int arg0)
{
  int ret;
  struct ldv_struct_free_irq_6 *cf_arg_17;
  struct ldv_struct_free_irq_6 *cf_arg_18;
  struct ldv_struct_free_irq_6 *cf_arg_20;
  struct ldv_struct_free_irq_6 *cf_arg_22;
  struct ldv_struct_free_irq_6 *cf_arg_23;
  struct ldv_struct_free_irq_6 *cf_arg_24;
  struct ldv_struct_free_irq_6 *cf_arg_15;
  int tmp;
  
#line 2160 
  tmp = ldv_undef_int();
  
#line 2160 
  switch (tmp) {
    case 0: 
#line 2161 
    ;
    
#line 2162 
    ret = pthread_join(ldv_thread_17,(void **)0);
    
#line 2163 
    __VERIFIER_assume(ret == 0);
    
#line 2164 
    goto ldv_45179;
    case 1: 
#line 2166 
    ;
    
#line 2167 
    ret = pthread_join(ldv_thread_18,(void **)0);
    
#line 2168 
    __VERIFIER_assume(ret == 0);
    
#line 2169 
    goto ldv_45179;
    case 2: 
#line 2171 
    ;
    
#line 2172 
    ret = pthread_join(ldv_thread_20,(void **)0);
    
#line 2173 
    __VERIFIER_assume(ret == 0);
    
#line 2174 
    goto ldv_45179;
    case 3: 
#line 2176 
    ;
    
#line 2177 
    ret = pthread_join(ldv_thread_22,(void **)0);
    
#line 2178 
    __VERIFIER_assume(ret == 0);
    
#line 2179 
    goto ldv_45179;
    case 4: 
#line 2181 
    ;
    
#line 2182 
    ret = pthread_join(ldv_thread_23,(void **)0);
    
#line 2183 
    __VERIFIER_assume(ret == 0);
    
#line 2184 
    goto ldv_45179;
    case 5: 
#line 2186 
    ;
    
#line 2187 
    ret = pthread_join(ldv_thread_24,(void **)0);
    
#line 2188 
    __VERIFIER_assume(ret == 0);
    
#line 2189 
    goto ldv_45179;
    case 6: 
#line 2191 
    ;
    
#line 2192 
    ret = pthread_join(ldv_thread_15,(void **)0);
    
#line 2193 
    __VERIFIER_assume(ret == 0);
    
#line 2194 
    goto ldv_45179;
    default: 
#line 2196 
    ;
    
#line 2196 
    __VERIFIER_assume(0);
  }
  ldv_45179: 
#line 2197 
  ;
  
#line 2198 
  return;
}


#line 2202  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_initialization_1(void *arg0)
{
  void *__retres;
  int ldv_1_ret;
  int tmp;
  
#line 2209 
  ldv_1_ret = ldv_emg_e1000_init_module();
  
#line 2210 
  ldv_1_ret = ldv_post_init(ldv_1_ret);
  
#line 2213 
  tmp = ldv_undef_int();
  
#line 2213 
  if (tmp != 0) {
    
#line 2215 
    __VERIFIER_assume(ldv_1_ret != 0);
    
#line 2219 
    __retres = (void *)0;
    
#line 2219 
    goto return_label;
  }
  else {
    
#line 2223 
    __VERIFIER_assume(ldv_1_ret == 0);
    
#line 2228 
    ldv_emg_e1000_exit_module();
    
#line 2232 
    __retres = (void *)0;
    
#line 2232 
    goto return_label;
  }
  
#line 2235 
  __retres = (void *)0;
  return_label: 
#line 2235 
                return __retres;
}


#line 2240  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_unregister_netdev(struct net_device *arg0)
{
  struct net_device *ldv_5_netdev;
  
#line 2246 
  ldv_5_netdev = arg0;
  
#line 2251 
  ldv_emg_wrapper_e1000_close_2(ldv_5_netdev);
  
#line 2255 
  ldv_dispatch_deregister_5_1(ldv_5_netdev);
  
#line 2259 
  goto return_label;
  return_label: 
#line 2261 
                return;
}


#line 2266  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_irq(unsigned int arg0, void *arg1)
{
  int ldv_6_line;
  
#line 2272 
  ldv_6_line = (int)arg0;
  
#line 2276 
  ldv_dispatch_irq_deregister_6_1(ldv_6_line);
  
#line 2280 
  goto return_label;
  return_label: 
#line 2282 
                return;
}


#line 2287  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_deregister_12_1(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_16 *cf_arg_16;
  int tmp;
  
#line 2290 
  tmp = ldv_undef_int();
  
#line 2290 
  switch (tmp) {
    case 0: 
#line 2291 
    ;
    
#line 2292 
    ret = pthread_join(ldv_thread_16,(void **)0);
    
#line 2293 
    __VERIFIER_assume(ret == 0);
    
#line 2294 
    goto ldv_45206;
    default: 
#line 2296 
    ;
    
#line 2296 
    __VERIFIER_assume(0);
  }
  ldv_45206: 
#line 2297 
  ;
  
#line 2298 
  return;
}


#line 2302  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_register_netdev(struct net_device *arg0)
{
  int __retres;
  struct net_device *ldv_9_netdev;
  int tmp_3;
  
#line 2306 
  int ldv_9_ret = ldv_undef_int();
  
#line 2309 
  ldv_9_ret = ldv_undef_int();
  
#line 2312 
  tmp_3 = ldv_undef_int();
  
#line 2312 
  if (tmp_3 != 0) {
    int tmp_1;
    
#line 2314 
    ldv_9_netdev = arg0;
    
#line 2319 
    ldv_9_ret = ldv_emg_wrapper_e1000_open_2(ldv_9_netdev);
    
#line 2322 
    tmp_1 = ldv_undef_int();
    
#line 2322 
    if (tmp_1 != 0) {
      
#line 2324 
      __VERIFIER_assume(ldv_9_ret == 0);
      
#line 2328 
      ldv_dispatch_register_9_4(ldv_9_netdev);
      
#line 2332 
      __retres = 0;
      
#line 2332 
      goto return_label;
    }
    else {
      int tmp_0;
      
#line 2339 
      __VERIFIER_assume(ldv_9_ret != 0);
      
#line 2340 
      ldv_failed_register_netdev();
      
#line 2341 
      tmp_0 = ldv_undef_int_negative();
      
#line 2341 
      __retres = tmp_0;
      
#line 2341 
      goto return_label;
    }
  }
  else {
    int tmp_2;
    
#line 2349 
    ldv_failed_register_netdev();
    
#line 2350 
    tmp_2 = ldv_undef_int_negative();
    
#line 2350 
    __retres = tmp_2;
    
#line 2350 
    goto return_label;
  }
  return_label: 
#line 2312 
                return __retres;
}


#line 2360  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_netdev(struct net_device *arg0)
{
  struct net_device *ldv_2_netdev;
  
#line 2366 
  ldv_2_netdev = arg0;
  
#line 2367 
  ldv_free((void *)ldv_2_netdev);
  
#line 2371 
  goto return_label;
  return_label: 
#line 2373 
                return;
}


#line 2378  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/intel/e1000e/e1000e.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  int __retres;
  struct timer_list *ldv_3_timer_list;
  int tmp_0;
  
#line 2385 
  tmp_0 = ldv_undef_int();
  
#line 2385 
  if (tmp_0 != 0) {
    
#line 2387 
    ldv_3_timer_list = arg0;
    
#line 2391 
    ldv_dispatch_instance_register_3_3(ldv_3_timer_list);
    
#line 2395 
    __retres = 0;
    
#line 2395 
    goto return_label;
  }
  else {
    int tmp;
    
#line 2402 
    tmp = ldv_undef_int_negative();
    
#line 2402 
    __retres = tmp;
    
#line 2402 
    goto return_label;
  }
  return_label: 
#line 2385 
                return __retres;
}


