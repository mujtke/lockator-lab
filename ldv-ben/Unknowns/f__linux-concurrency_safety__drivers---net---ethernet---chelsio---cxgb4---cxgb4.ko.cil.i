/* Generated by Frama-C */

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned char __u8;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned short __u16;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef int __s32;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned int __u32;

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef unsigned long long __u64;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef signed char s8;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned char u8;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef short s16;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned short u16;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef int s32;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned int u32;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef long long s64;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/int-ll64.h"
typedef unsigned long long u64;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long __kernel_long_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned long __kernel_ulong_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_pid_t;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_uid32_t;

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef unsigned int __kernel_gid32_t;

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_ulong_t __kernel_size_t;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_ssize_t;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef long long __kernel_loff_t;

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_time_t;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef __kernel_long_t __kernel_clock_t;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_timer_t;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/posix_types.h"
typedef int __kernel_clockid_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __be16;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __be32;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u64 __be64;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u32 __wsum;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 __kernel_dev_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_dev_t dev_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned short umode_t;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_pid_t pid_t;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_clockid_t clockid_t;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef _Bool bool;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_uid32_t uid_t;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_gid32_t gid_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_loff_t loff_t;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_size_t size_t;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_ssize_t ssize_t;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __kernel_time_t time_t;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __s32 int32_t;

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u8 uint8_t;

#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u32 uint32_t;

#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u64 uint64_t;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long sector_t;

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned long blkcnt_t;

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 dma_addr_t;

#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int gfp_t;

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int fmode_t;

#line 159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef unsigned int oom_flags_t;

#line 162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef u64 phys_addr_t;

#line 167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef phys_addr_t resource_size_t;

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic_t_6 {
   int counter ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic_t_6 atomic_t;

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct __anonstruct_atomic64_t_7 {
   long counter ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef struct __anonstruct_atomic64_t_7 atomic64_t;

#line 183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct list_head {
   struct list_head *next ;
   struct list_head *prev ;
};

#line 188 
struct hlist_node;

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_head {
   struct hlist_node *first ;
};

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct hlist_node {
   struct hlist_node *next ;
   struct hlist_node **pprev ;
};

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
struct callback_head {
   struct callback_head *next ;
   void (*func)(struct callback_head *) ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_types.h"
struct pt_regs {
   unsigned long r15 ;
   unsigned long r14 ;
   unsigned long r13 ;
   unsigned long r12 ;
   unsigned long bp ;
   unsigned long bx ;
   unsigned long r11 ;
   unsigned long r10 ;
   unsigned long r9 ;
   unsigned long r8 ;
   unsigned long ax ;
   unsigned long cx ;
   unsigned long dx ;
   unsigned long si ;
   unsigned long di ;
   unsigned long orig_ax ;
   unsigned long ip ;
   unsigned long cs ;
   unsigned long flags ;
   unsigned long sp ;
   unsigned long ss ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_9 {
   unsigned int a ;
   unsigned int b ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct __anonstruct_10 {
   u16 limit0 ;
   u16 base0 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base1 : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) type : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) s : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) dpl : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) p : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) limit : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) avl : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) g : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) base2 : 8 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
union __anonunion_8 {
   struct __anonstruct_9 __anonCompField___anonunion_8_4 ;
   struct __anonstruct_10 __anonCompField___anonunion_8_5 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/ptrace.h"
struct desc_struct {
   union __anonunion_8 __anonCompField_desc_struct_6 ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pteval_t;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgdval_t;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef unsigned long pgprotval_t;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct __anonstruct_pte_t_11 {
   pteval_t pte ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
typedef struct __anonstruct_pte_t_11 pte_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_64_types.h"
struct pgprot {
   pgprotval_t pgprot ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct pgprot pgprot_t;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
struct __anonstruct_pgd_t_12 {
   pgdval_t pgd ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct __anonstruct_pgd_t_12 pgd_t;

#line 361 
struct page;

#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/pgtable_types.h"
typedef struct page *pgtable_t;

#line 372 
struct file;

#line 385 
struct seq_file;

#line 423 
struct thread_struct;

#line 425 
struct mm_struct;

#line 426 
struct task_struct;

#line 427 
struct cpumask;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/spinlock_types.h"
struct qspinlock {
   atomic_t val ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
typedef struct qspinlock arch_spinlock_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qspinlock_types.h"
struct qrwlock {
   atomic_t cnts ;
   arch_spinlock_t lock ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/qrwlock_types.h"
typedef struct qrwlock arch_rwlock_t;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
struct device;

#line 54 
struct net_device;

#line 420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct file_operations;

#line 432 
struct completion;

#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct timespec;

#line 103 
struct compat_timespec;

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_futex_16 {
   u32 *uaddr ;
   u32 val ;
   u32 flags ;
   u32 bitset ;
   u64 time ;
   u32 *uaddr2 ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_nanosleep_17 {
   clockid_t clockid ;
   struct timespec *rmtp ;
   struct compat_timespec *compat_rmtp ;
   u64 expires ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct __anonstruct_poll_18 {
   struct pollfd *ufds ;
   int nfds ;
   int has_timeout ;
   unsigned long tv_sec ;
   unsigned long tv_nsec ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
union __anonunion_15 {
   struct __anonstruct_futex_16 futex ;
   struct __anonstruct_nanosleep_17 nanosleep ;
   struct __anonstruct_poll_18 poll ;
};

#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bug.h"
struct restart_block {
   long (*fn)(struct restart_block *) ;
   union __anonunion_15 __anonCompField_restart_block_7 ;
};

#line 127  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/vm86.h"
struct kernel_vm86_regs {
   struct pt_regs pt ;
   unsigned short es ;
   unsigned short __esh ;
   unsigned short ds ;
   unsigned short __dsh ;
   unsigned short fs ;
   unsigned short __fsh ;
   unsigned short gs ;
   unsigned short __gsh ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
union __anonunion_19 {
   struct pt_regs *regs ;
   struct kernel_vm86_regs *vm86 ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/vm86.h"
struct math_emu_info {
   long ___orig_eip ;
   union __anonunion_19 __anonCompField_math_emu_info_8 ;
};

#line 328  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
struct cpumask {
   unsigned long bits[128U] ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask cpumask_t;

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
typedef struct cpumask *cpumask_var_t;

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/special_insns.h"
struct fregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u32 status ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_29 {
   u64 rip ;
   u64 rdp ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct __anonstruct_30 {
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_28 {
   struct __anonstruct_29 __anonCompField___anonunion_28_12 ;
   struct __anonstruct_30 __anonCompField___anonunion_28_13 ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union __anonunion_31 {
   u32 padding1[12U] ;
   u32 sw_reserved[12U] ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fxregs_state {
   u16 cwd ;
   u16 swd ;
   u16 twd ;
   u16 fop ;
   union __anonunion_28 __anonCompField_fxregs_state_14 ;
   u32 mxcsr ;
   u32 mxcsr_mask ;
   u32 st_space[32U] ;
   u32 xmm_space[64U] ;
   u32 padding[12U] ;
   union __anonunion_31 __anonCompField_fxregs_state_15 ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct swregs_state {
   u32 cwd ;
   u32 swd ;
   u32 twd ;
   u32 fip ;
   u32 fcs ;
   u32 foo ;
   u32 fos ;
   u32 st_space[20U] ;
   u8 ftop ;
   u8 changed ;
   u8 lookahead ;
   u8 no_update ;
   u8 rm ;
   u8 alimit ;
   struct math_emu_info *info ;
   u32 entry_eip ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xstate_header {
   u64 xfeatures ;
   u64 xcomp_bv ;
   u64 reserved[6U] ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct xregs_state {
   struct fxregs_state i387 ;
   struct xstate_header header ;
   u8 __reserved[464U] ;
};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
union fpregs_state {
   struct fregs_state fsave ;
   struct fxregs_state fxsave ;
   struct swregs_state soft ;
   struct xregs_state xsave ;
   u8 __padding[4096U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/fpu/types.h"
struct fpu {
   unsigned int last_cpu ;
   unsigned char fpstate_active ;
   unsigned char fpregs_active ;
   unsigned char counter ;
   union fpregs_state state ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct seq_operations;

#line 369 
struct perf_event;

#line 370  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/processor.h"
struct thread_struct {
   struct desc_struct tls_array[3U] ;
   unsigned long sp0 ;
   unsigned long sp ;
   unsigned short es ;
   unsigned short ds ;
   unsigned short fsindex ;
   unsigned short gsindex ;
   unsigned long fs ;
   unsigned long gs ;
   struct perf_event *ptrace_bps[4U] ;
   unsigned long debugreg6 ;
   unsigned long ptrace_dr7 ;
   unsigned long cr2 ;
   unsigned long trap_nr ;
   unsigned long error_code ;
   unsigned long *io_bitmap_ptr ;
   unsigned long iopl ;
   unsigned int io_bitmap_max ;
   struct fpu fpu ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/atomic-long.h"
typedef atomic64_t atomic_long_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
struct lockdep_map;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debug_locks.h"
struct stack_trace {
   unsigned int nr_entries ;
   unsigned int max_entries ;
   unsigned long *entries ;
   int skip ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stacktrace.h"
struct lockdep_subclass_key {
   char __one_byte ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class_key {
   struct lockdep_subclass_key subkeys[8U] ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lock_class {
   struct list_head hash_entry ;
   struct list_head lock_entry ;
   struct lockdep_subclass_key *key ;
   unsigned int subclass ;
   unsigned int dep_gen_id ;
   unsigned long usage_mask ;
   struct stack_trace usage_traces[13U] ;
   struct list_head locks_after ;
   struct list_head locks_before ;
   unsigned int version ;
   unsigned long ops ;
   char const *name ;
   int name_version ;
   unsigned long contention_point[4U] ;
   unsigned long contending_point[4U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct lockdep_map {
   struct lock_class_key *key ;
   struct lock_class *class_cache[2U] ;
   char const *name ;
   int cpu ;
   unsigned long ip ;
};

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct held_lock {
   u64 prev_chain_key ;
   unsigned long acquire_ip ;
   struct lockdep_map *instance ;
   struct lockdep_map *nest_lock ;
   u64 waittime_stamp ;
   u64 holdtime_stamp ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(13))) class_idx : 13 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_context : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) trylock : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) read : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) check : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hardirqs_off : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(12))) references : 12 ;
   unsigned int pin_count ;
};

#line 546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
struct raw_spinlock {
   arch_spinlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct raw_spinlock raw_spinlock_t;

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct __anonstruct_35 {
   u8 __padding[24U] ;
   struct lockdep_map dep_map ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
union __anonunion_34 {
   struct raw_spinlock rlock ;
   struct __anonstruct_35 __anonCompField___anonunion_34_17 ;
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
struct spinlock {
   union __anonunion_34 __anonCompField_spinlock_18 ;
};

#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_types.h"
typedef struct spinlock spinlock_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
struct __anonstruct_rwlock_t_36 {
   arch_rwlock_t raw_lock ;
   unsigned int magic ;
   unsigned int owner_cpu ;
   void *owner ;
   struct lockdep_map dep_map ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_types.h"
typedef struct __anonstruct_rwlock_t_36 rwlock_t;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct mutex;

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/scsi/fc/fc_fs.h"
struct seqcount {
   unsigned int sequence ;
   struct lockdep_map dep_map ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct seqcount seqcount_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
struct __anonstruct_seqlock_t_45 {
   struct seqcount seqcount ;
   spinlock_t lock ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seqlock.h"
typedef struct __anonstruct_seqlock_t_45 seqlock_t;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct __wait_queue_head {
   spinlock_t lock ;
   struct list_head task_list ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
typedef struct __wait_queue_head wait_queue_head_t;

#line 1170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/wait.h"
struct completion {
   unsigned int done ;
   wait_queue_head_t wait ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debugobjects.h"
struct timespec {
   __kernel_time_t tv_sec ;
   long tv_nsec ;
};

#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
union ktime {
   s64 tv64 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ktime.h"
typedef union ktime ktime_t;

#line 296  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct notifier_block;

#line 1120  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
struct rb_node {
   unsigned long __rb_parent_color ;
   struct rb_node *rb_right ;
   struct rb_node *rb_left ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree.h"
struct rb_root {
   struct rb_node *rb_node ;
};

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct optimistic_spin_queue {
   atomic_t tail ;
};

#line 39 
struct rw_semaphore;

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/osq_lock.h"
struct rw_semaphore {
   long count ;
   struct list_head wait_list ;
   raw_spinlock_t wait_lock ;
   struct optimistic_spin_queue osq ;
   struct task_struct *owner ;
   struct lockdep_map dep_map ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwsem.h"
struct vm_area_struct;

#line 173 
struct inode;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct mutex {
   atomic_t count ;
   spinlock_t wait_lock ;
   struct list_head wait_list ;
   struct task_struct *owner ;
   void *magic ;
   struct lockdep_map dep_map ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct mutex_waiter {
   struct list_head list ;
   struct task_struct *task ;
   void *magic ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
struct timer_list {
   struct hlist_node entry ;
   unsigned long expires ;
   void (*function)(unsigned long ) ;
   unsigned long data ;
   u32 flags ;
   int slack ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
   struct lockdep_map lockdep_map ;
};

#line 238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct hrtimer;

#line 239 
enum hrtimer_restart;

#line 837  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/sysctl.h"
struct ctl_table;

#line 838 
struct nsproxy;

#line 839 
struct ctl_table_root;

#line 840 
struct ctl_table_header;

#line 841 
struct ctl_dir;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
typedef int proc_handler(struct ctl_table *, int , void *, size_t *, loff_t *);

#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_poll {
   atomic_t event ;
   wait_queue_head_t wait ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table {
   char const *procname ;
   void *data ;
   int maxlen ;
   umode_t mode ;
   struct ctl_table *child ;
   proc_handler *proc_handler ;
   struct ctl_table_poll *poll ;
   void *extra1 ;
   void *extra2 ;
};

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_node {
   struct rb_node node ;
   struct ctl_table_header *header ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct __anonstruct_47 {
   struct ctl_table *ctl_table ;
   int used ;
   int count ;
   int nreg ;
};

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
union __anonunion_46 {
   struct __anonstruct_47 __anonCompField___anonunion_46_19 ;
   struct callback_head rcu ;
};

#line 122 
struct ctl_table_set;

#line 122  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_header {
   union __anonunion_46 __anonCompField_ctl_table_header_20 ;
   struct completion *unregistering ;
   struct ctl_table *ctl_table_arg ;
   struct ctl_table_root *root ;
   struct ctl_table_set *set ;
   struct ctl_dir *parent ;
   struct ctl_node *node ;
};

#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_dir {
   struct ctl_table_header header ;
   struct rb_root root ;
};

#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_set {
   int (*is_seen)(struct ctl_table_set *) ;
   struct ctl_dir dir ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysctl.h"
struct ctl_table_root {
   struct ctl_table_set default_set ;
   struct ctl_table_set *(*lookup)(struct ctl_table_root *, struct nsproxy *) ;
   int (*permissions)(struct ctl_table_header *, struct ctl_table *) ;
};

#line 259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
struct workqueue_struct;

#line 260 
struct work_struct;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct work_struct {
   atomic_long_t data ;
   struct list_head entry ;
   void (*func)(struct work_struct *) ;
   struct lockdep_map lockdep_map ;
};

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
struct delayed_work {
   struct work_struct work ;
   struct timer_list timer ;
   struct workqueue_struct *wq ;
   int cpu ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/notifier.h"
struct notifier_block {
   int (*notifier_call)(struct notifier_block *, unsigned long , void *) ;
   struct notifier_block *next ;
   int priority ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct arch_uprobe_task {
   unsigned long saved_scratch_register ;
   unsigned int saved_trap_nr ;
   unsigned int saved_tf ;
};

#line 66 
enum uprobe_task_state {
    UTASK_RUNNING = 0,
    UTASK_SSTEP = 1,
    UTASK_SSTEP_ACK = 2,
    UTASK_SSTEP_TRAPPED = 3
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_53 {
   struct arch_uprobe_task autask ;
   unsigned long vaddr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct __anonstruct_54 {
   struct callback_head dup_xol_work ;
   unsigned long dup_xol_addr ;
};

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
union __anonunion_52 {
   struct __anonstruct_53 __anonCompField___anonunion_52_23 ;
   struct __anonstruct_54 __anonCompField___anonunion_52_24 ;
};

#line 73 
struct uprobe;

#line 73 
struct return_instance;

#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uprobes.h"
struct uprobe_task {
   enum uprobe_task_state state ;
   union __anonunion_52 __anonCompField_uprobe_task_25 ;
   struct uprobe *active_uprobe ;
   unsigned long xol_vaddr ;
   struct return_instance *return_instances ;
   unsigned int depth ;
};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct xol_area;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uprobes.h"
struct uprobes_state {
   struct xol_area *xol_area ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct ldt_struct;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
struct __anonstruct_mm_context_t_55 {
   struct ldt_struct *ldt ;
   unsigned short ia32_compat ;
   struct mutex lock ;
   void *vdso ;
   atomic_t perf_rdpmc_allowed ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/mmu.h"
typedef struct __anonstruct_mm_context_t_55 mm_context_t;

#line 27 
struct address_space;

#line 28 
struct mem_cgroup;

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
typedef void compound_page_dtor(struct page *);

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_56 {
   struct address_space *mapping ;
   void *s_mem ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_58 {
   unsigned long index ;
   void *freelist ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_62 {
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) inuse : 16 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(15))) objects : 15 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) frozen : 1 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_61 {
   atomic_t _mapcount ;
   struct __anonstruct_62 __anonCompField___anonunion_61_28 ;
   int units ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_60 {
   union __anonunion_61 __anonCompField___anonstruct_60_29 ;
   atomic_t _count ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_59 {
   unsigned long counters ;
   struct __anonstruct_60 __anonCompField___anonunion_59_30 ;
   unsigned int active ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_57 {
   union __anonunion_58 __anonCompField___anonstruct_57_27 ;
   union __anonunion_59 __anonCompField___anonstruct_57_31 ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_64 {
   struct page *next ;
   int pages ;
   int pobjects ;
};

#line 32 
struct slab;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_65 {
   compound_page_dtor *compound_dtor ;
   unsigned long compound_order ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_63 {
   struct list_head lru ;
   struct __anonstruct_64 __anonCompField___anonunion_63_33 ;
   struct slab *slab_page ;
   struct callback_head callback_head ;
   struct __anonstruct_65 __anonCompField___anonunion_63_34 ;
   pgtable_t pmd_huge_pte ;
};

#line 32 
struct kmem_cache;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
union __anonunion_66 {
   unsigned long private ;
   spinlock_t *ptl ;
   struct kmem_cache *slab_cache ;
   struct page *first_page ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page {
   unsigned long flags ;
   union __anonunion_56 __anonCompField_page_26 ;
   struct __anonstruct_57 __anonCompField_page_32 ;
   union __anonunion_63 __anonCompField_page_35 ;
   union __anonunion_66 __anonCompField_page_36 ;
   struct mem_cgroup *mem_cgroup ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct page_frag {
   struct page *page ;
   __u32 offset ;
   __u32 size ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct __anonstruct_shared_67 {
   struct rb_node rb ;
   unsigned long rb_subtree_last ;
};

#line 257 
struct anon_vma;

#line 257 
struct vm_operations_struct;

#line 257 
struct mempolicy;

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct vm_area_struct {
   unsigned long vm_start ;
   unsigned long vm_end ;
   struct vm_area_struct *vm_next ;
   struct vm_area_struct *vm_prev ;
   struct rb_node vm_rb ;
   unsigned long rb_subtree_gap ;
   struct mm_struct *vm_mm ;
   pgprot_t vm_page_prot ;
   unsigned long vm_flags ;
   struct __anonstruct_shared_67 shared ;
   struct list_head anon_vma_chain ;
   struct anon_vma *anon_vma ;
   struct vm_operations_struct const *vm_ops ;
   unsigned long vm_pgoff ;
   struct file *vm_file ;
   void *vm_private_data ;
   struct mempolicy *vm_policy ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_thread {
   struct task_struct *task ;
   struct core_thread *next ;
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct core_state {
   atomic_t nr_threads ;
   struct core_thread dumper ;
   struct completion startup ;
};

#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct task_rss_stat {
   int events ;
   int count[3U] ;
};

#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_rss_stat {
   atomic_long_t count[3U] ;
};

#line 357 
struct kioctx_table;

#line 358 
struct linux_binfmt;

#line 358 
struct mmu_notifier_mm;

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm_types.h"
struct mm_struct {
   struct vm_area_struct *mmap ;
   struct rb_root mm_rb ;
   u32 vmacache_seqnum ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   unsigned long mmap_base ;
   unsigned long mmap_legacy_base ;
   unsigned long task_size ;
   unsigned long highest_vm_end ;
   pgd_t *pgd ;
   atomic_t mm_users ;
   atomic_t mm_count ;
   atomic_long_t nr_ptes ;
   atomic_long_t nr_pmds ;
   int map_count ;
   spinlock_t page_table_lock ;
   struct rw_semaphore mmap_sem ;
   struct list_head mmlist ;
   unsigned long hiwater_rss ;
   unsigned long hiwater_vm ;
   unsigned long total_vm ;
   unsigned long locked_vm ;
   unsigned long pinned_vm ;
   unsigned long shared_vm ;
   unsigned long exec_vm ;
   unsigned long stack_vm ;
   unsigned long def_flags ;
   unsigned long start_code ;
   unsigned long end_code ;
   unsigned long start_data ;
   unsigned long end_data ;
   unsigned long start_brk ;
   unsigned long brk ;
   unsigned long start_stack ;
   unsigned long arg_start ;
   unsigned long arg_end ;
   unsigned long env_start ;
   unsigned long env_end ;
   unsigned long saved_auxv[46U] ;
   struct mm_rss_stat rss_stat ;
   struct linux_binfmt *binfmt ;
   cpumask_var_t cpu_vm_mask_var ;
   mm_context_t context ;
   unsigned long flags ;
   struct core_state *core_state ;
   spinlock_t ioctx_lock ;
   struct kioctx_table *ioctx_table ;
   struct task_struct *owner ;
   struct file *exe_file ;
   struct mmu_notifier_mm *mmu_notifier_mm ;
   struct cpumask cpumask_allocation ;
   unsigned long numa_next_scan ;
   unsigned long numa_scan_offset ;
   int numa_scan_seq ;
   bool tlb_flush_pending ;
   struct uprobes_state uprobes_state ;
   void *bd_addr ;
};

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemcheck.h"
struct iovec {
   void *iov_base ;
   __kernel_size_t iov_len ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/uio.h"
struct kvec {
   void *iov_base ;
   size_t iov_len ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct bio_vec;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
union __anonunion_69 {
   struct iovec const *iov ;
   struct kvec const *kvec ;
   struct bio_vec const *bvec ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uio.h"
struct iov_iter {
   int type ;
   size_t iov_offset ;
   size_t count ;
   union __anonunion_69 __anonCompField_iov_iter_37 ;
   unsigned long nr_segs ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/socket.h"
typedef unsigned short __kernel_sa_family_t;

#line 18 
struct pid;

#line 19 
struct cred;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
typedef __kernel_sa_family_t sa_family_t;

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct sockaddr {
   sa_family_t sa_family ;
   char sa_data[14U] ;
};

#line 38 
struct kiocb;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
struct pipe_inode_info;

#line 56 
struct net;

#line 73 
struct fasync_struct;

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
struct __anonstruct_nodemask_t_70 {
   unsigned long bits[16U] ;
};

#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nodemask.h"
typedef struct __anonstruct_nodemask_t_70 nodemask_t;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/e820.h"
struct resource {
   resource_size_t start ;
   resource_size_t end ;
   char const *name ;
   unsigned long flags ;
   struct resource *parent ;
   struct resource *sibling ;
   struct resource *child ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/x86_init.h"
struct pci_dev;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_message {
   int event ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
typedef struct pm_message pm_message_t;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_ops {
   int (*prepare)(struct device *) ;
   void (*complete)(struct device *) ;
   int (*suspend)(struct device *) ;
   int (*resume)(struct device *) ;
   int (*freeze)(struct device *) ;
   int (*thaw)(struct device *) ;
   int (*poweroff)(struct device *) ;
   int (*restore)(struct device *) ;
   int (*suspend_late)(struct device *) ;
   int (*resume_early)(struct device *) ;
   int (*freeze_late)(struct device *) ;
   int (*thaw_early)(struct device *) ;
   int (*poweroff_late)(struct device *) ;
   int (*restore_early)(struct device *) ;
   int (*suspend_noirq)(struct device *) ;
   int (*resume_noirq)(struct device *) ;
   int (*freeze_noirq)(struct device *) ;
   int (*thaw_noirq)(struct device *) ;
   int (*poweroff_noirq)(struct device *) ;
   int (*restore_noirq)(struct device *) ;
   int (*runtime_suspend)(struct device *) ;
   int (*runtime_resume)(struct device *) ;
   int (*runtime_idle)(struct device *) ;
};

#line 320 
enum rpm_status {
    RPM_ACTIVE = 0,
    RPM_RESUMING = 1,
    RPM_SUSPENDED = 2,
    RPM_SUSPENDING = 3
};

#line 327 
enum rpm_request {
    RPM_REQ_NONE = 0,
    RPM_REQ_IDLE = 1,
    RPM_REQ_SUSPEND = 2,
    RPM_REQ_AUTOSUSPEND = 3,
    RPM_REQ_RESUME = 4
};

#line 335 
struct wakeup_source;

#line 336 
struct wake_irq;

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct pm_subsys_data {
   spinlock_t lock ;
   unsigned int refcount ;
   struct list_head clock_list ;
};

#line 553 
struct dev_pm_qos;

#line 553  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_info {
   pm_message_t power_state ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) can_wakeup : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) async_suspend : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_prepared : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_noirq_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_late_suspended : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_children : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) early_init : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) direct_complete : 1 ;
   spinlock_t lock ;
   struct list_head entry ;
   struct completion completion ;
   struct wakeup_source *wakeup ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_path : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syscore : 1 ;
   struct timer_list suspend_timer ;
   unsigned long timer_expires ;
   struct work_struct work ;
   wait_queue_head_t wait_queue ;
   struct wake_irq *wakeirq ;
   atomic_t usage_count ;
   atomic_t child_count ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) disable_depth : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) idle_notification : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) request_pending : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) deferred_resume : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) run_wake : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_auto : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_callbacks : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_safe : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) use_autosuspend : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) timer_autosuspends : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memalloc_noio : 1 ;
   enum rpm_request request ;
   enum rpm_status runtime_status ;
   int runtime_error ;
   int autosuspend_delay ;
   unsigned long last_busy ;
   unsigned long active_jiffies ;
   unsigned long suspended_jiffies ;
   unsigned long accounting_timestamp ;
   struct pm_subsys_data *subsys_data ;
   void (*set_latency_tolerance)(struct device *, s32 ) ;
   struct dev_pm_qos *qos ;
};

#line 615  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pm.h"
struct dev_pm_domain {
   struct dev_pm_ops ops ;
   void (*detach)(struct device *, bool ) ;
   int (*activate)(struct device *) ;
   void (*sync)(struct device *) ;
   void (*dismiss)(struct device *) ;
};

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/topology.h"
struct pci_bus;

#line 1281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct llist_node;

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/llist.h"
struct llist_node {
   struct llist_node *next ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/smp.h"
struct call_single_data {
   struct llist_node llist ;
   void (*func)(void *) ;
   void *info ;
   unsigned int flags ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
struct kernel_cap_struct {
   __u32 cap[2U] ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
typedef struct kernel_cap_struct kernel_cap_t;

#line 33 
struct dentry;

#line 34 
struct user_namespace;

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/plist.h"
struct plist_node {
   int prio ;
   struct list_head prio_list ;
   struct list_head node_list ;
};

#line 4  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/cputime_jiffies.h"
typedef unsigned long cputime_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kuid_t_162 {
   uid_t val ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kuid_t_162 kuid_t;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
struct __anonstruct_kgid_t_163 {
   gid_t val ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uidgid.h"
typedef struct __anonstruct_kgid_t_163 kgid_t;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sem_undo_list;

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sem.h"
struct sysv_sem {
   struct sem_undo_list *undo_list ;
};

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/shm.h"
struct user_struct;

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shm.h"
struct sysv_shm {
   struct list_head shm_clist ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
struct __anonstruct_sigset_t_164 {
   unsigned long sig[1U] ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
typedef struct __anonstruct_sigset_t_164 sigset_t;

#line 25 
struct siginfo;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __signalfn_t(int );

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __signalfn_t *__sighandler_t;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef void __restorefn_t(void);

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/signal-defs.h"
typedef __restorefn_t *__sigrestore_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/signal.h"
union sigval {
   int sival_int ;
   void *sival_ptr ;
};

#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef union sigval sigval_t;

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__kill_166 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__timer_167 {
   __kernel_timer_t _tid ;
   int _overrun ;
   char _pad[0U] ;
   sigval_t _sigval ;
   int _sys_private ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__rt_168 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   sigval_t _sigval ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigchld_169 {
   __kernel_pid_t _pid ;
   __kernel_uid32_t _uid ;
   int _status ;
   __kernel_clock_t _utime ;
   __kernel_clock_t _stime ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__addr_bnd_171 {
   void *_lower ;
   void *_upper ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigfault_170 {
   void *_addr ;
   short _addr_lsb ;
   struct __anonstruct__addr_bnd_171 _addr_bnd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigpoll_172 {
   long _band ;
   int _fd ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct __anonstruct__sigsys_173 {
   void *_call_addr ;
   int _syscall ;
   unsigned int _arch ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
union __anonunion__sifields_165 {
   int _pad[28U] ;
   struct __anonstruct__kill_166 _kill ;
   struct __anonstruct__timer_167 _timer ;
   struct __anonstruct__rt_168 _rt ;
   struct __anonstruct__sigchld_169 _sigchld ;
   struct __anonstruct__sigfault_170 _sigfault ;
   struct __anonstruct__sigpoll_172 _sigpoll ;
   struct __anonstruct__sigsys_173 _sigsys ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
struct siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   union __anonunion__sifields_165 _sifields ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/siginfo.h"
typedef struct siginfo siginfo_t;

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigpending {
   struct list_head list ;
   sigset_t signal ;
};

#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct sigaction {
   __sighandler_t sa_handler ;
   unsigned long sa_flags ;
   __sigrestore_t sa_restorer ;
   sigset_t sa_mask ;
};

#line 257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct k_sigaction {
   struct sigaction sa ;
};

#line 443 
enum pid_type {
    PIDTYPE_PID = 0,
    PIDTYPE_PGID = 1,
    PIDTYPE_SID = 2,
    PIDTYPE_MAX = 3
};

#line 450 
struct pid_namespace;

#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/signal.h"
struct upid {
   int nr ;
   struct pid_namespace *ns ;
   struct hlist_node pid_chain ;
};

#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid {
   atomic_t count ;
   unsigned int level ;
   struct hlist_head tasks[3U] ;
   struct callback_head rcu ;
   struct upid numbers[1U] ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct pid_link {
   struct hlist_node node ;
   struct pid *pid ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pid.h"
struct percpu_counter {
   raw_spinlock_t lock ;
   s64 count ;
   struct list_head list ;
   s32 *counters ;
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp_filter;

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/seccomp.h"
struct seccomp {
   int mode ;
   struct seccomp_filter *filter ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtmutex.h"
struct rt_mutex_waiter;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/resource.h"
struct rlimit {
   __kernel_ulong_t rlim_cur ;
   __kernel_ulong_t rlim_max ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource.h"
struct timerqueue_node {
   struct rb_node node ;
   ktime_t expires ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct timerqueue_head {
   struct rb_root head ;
   struct timerqueue_node *next ;
};

#line 50 
struct hrtimer_clock_base;

#line 51 
struct hrtimer_cpu_base;

#line 60 
enum hrtimer_restart {
    HRTIMER_NORESTART = 0,
    HRTIMER_RESTART = 1
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timerqueue.h"
struct hrtimer {
   struct timerqueue_node node ;
   ktime_t _softexpires ;
   enum hrtimer_restart (*function)(struct hrtimer *) ;
   struct hrtimer_clock_base *base ;
   unsigned long state ;
   int start_pid ;
   void *start_site ;
   char start_comm[16U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_clock_base {
   struct hrtimer_cpu_base *cpu_base ;
   int index ;
   clockid_t clockid ;
   struct timerqueue_head active ;
   ktime_t (*get_time)(void) ;
   ktime_t offset ;
};

#line 156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct hrtimer_cpu_base {
   raw_spinlock_t lock ;
   seqcount_t seq ;
   struct hrtimer *running ;
   unsigned int cpu ;
   unsigned int active_bases ;
   unsigned int clock_was_set_seq ;
   bool migration_enabled ;
   bool nohz_active ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_hrtirq : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hres_active : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hang_detected : 1 ;
   ktime_t expires_next ;
   struct hrtimer *next_timer ;
   unsigned int nr_events ;
   unsigned int nr_retries ;
   unsigned int nr_hangs ;
   unsigned int max_hang_time ;
   struct hrtimer_clock_base clock_base[4U] ;
};

#line 466  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hrtimer.h"
struct task_io_accounting {
   u64 rchar ;
   u64 wchar ;
   u64 syscr ;
   u64 syscw ;
   u64 read_bytes ;
   u64 write_bytes ;
   u64 cancelled_write_bytes ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/task_io_accounting.h"
struct latency_record {
   unsigned long backtrace[12U] ;
   unsigned int count ;
   unsigned long time ;
   unsigned long max ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array_ptr;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/latencytop.h"
struct assoc_array {
   struct assoc_array_ptr *root ;
   unsigned long nr_leaves_on_tree ;
};

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef int32_t key_serial_t;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
typedef uint32_t key_perm_t;

#line 35 
struct key;

#line 36 
struct signal_struct;

#line 37 
struct key_type;

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct keyring_index_key {
   struct key_type *type ;
   char const *description ;
   size_t desc_len ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_180 {
   struct list_head graveyard_link ;
   struct rb_node serial_node ;
};

#line 123 
struct key_user;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_181 {
   time_t expiry ;
   time_t revoked_at ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct __anonstruct_183 {
   struct key_type *type ;
   char *description ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_182 {
   struct keyring_index_key index_key ;
   struct __anonstruct_183 __anonCompField___anonunion_182_50 ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_type_data_184 {
   struct list_head link ;
   unsigned long x[2U] ;
   void *p[2U] ;
   int reject_error ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_payload_186 {
   unsigned long value ;
   void *rcudata ;
   void *data ;
   void *data2[2U] ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
union __anonunion_185 {
   union __anonunion_payload_186 payload ;
   struct assoc_array keys ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/key.h"
struct key {
   atomic_t usage ;
   key_serial_t serial ;
   union __anonunion_180 __anonCompField_key_48 ;
   struct rw_semaphore sem ;
   struct key_user *user ;
   void *security ;
   union __anonunion_181 __anonCompField_key_49 ;
   time_t last_used_at ;
   kuid_t uid ;
   kgid_t gid ;
   key_perm_t perm ;
   unsigned short quotalen ;
   unsigned short datalen ;
   unsigned long flags ;
   union __anonunion_182 __anonCompField_key_51 ;
   union __anonunion_type_data_184 type_data ;
   union __anonunion_185 __anonCompField_key_52 ;
};

#line 358 
struct audit_context;

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/selinux.h"
struct group_info {
   atomic_t usage ;
   int ngroups ;
   int nblocks ;
   kgid_t small_block[32U] ;
   kgid_t *blocks[0U] ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
struct cred {
   atomic_t usage ;
   atomic_t subscribers ;
   void *put_addr ;
   unsigned int magic ;
   kuid_t uid ;
   kgid_t gid ;
   kuid_t suid ;
   kgid_t sgid ;
   kuid_t euid ;
   kgid_t egid ;
   kuid_t fsuid ;
   kgid_t fsgid ;
   unsigned int securebits ;
   kernel_cap_t cap_inheritable ;
   kernel_cap_t cap_permitted ;
   kernel_cap_t cap_effective ;
   kernel_cap_t cap_bset ;
   unsigned char jit_keyring ;
   struct key *session_keyring ;
   struct key *process_keyring ;
   struct key *thread_keyring ;
   struct key *request_key_auth ;
   void *security ;
   struct user_struct *user ;
   struct user_namespace *user_ns ;
   struct group_info *group_info ;
   struct callback_head rcu ;
};

#line 369  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
union __anonunion_187 {
   unsigned long bitmap[4U] ;
   struct callback_head callback_head ;
};

#line 369  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cred.h"
struct idr_layer {
   int prefix ;
   int layer ;
   struct idr_layer *ary[256U] ;
   int count ;
   union __anonunion_187 __anonCompField_idr_layer_53 ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct idr {
   struct idr_layer *hint ;
   struct idr_layer *top ;
   int layers ;
   int cur ;
   spinlock_t lock ;
   int id_free_cnt ;
   struct idr_layer *id_free ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida_bitmap {
   long nr_busy ;
   unsigned long bitmap[15U] ;
};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/idr.h"
struct ida {
   struct idr idr ;
   struct ida_bitmap *free_bitmap ;
};

#line 185 
struct percpu_ref;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
typedef void percpu_ref_func_t(struct percpu_ref *);

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-refcount.h"
struct percpu_ref {
   atomic_long_t count ;
   unsigned long percpu_count_ptr ;
   percpu_ref_func_t *release ;
   percpu_ref_func_t *confirm_switch ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) force_atomic : 1 ;
   struct callback_head rcu ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup;

#line 28 
struct cgroup_root;

#line 29 
struct cgroup_subsys;

#line 30 
struct cgroup_taskset;

#line 31 
struct kernfs_node;

#line 32 
struct kernfs_ops;

#line 33 
struct kernfs_open_file;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-rwsem.h"
struct cgroup_subsys_state {
   struct cgroup *cgroup ;
   struct cgroup_subsys *ss ;
   struct percpu_ref refcnt ;
   struct cgroup_subsys_state *parent ;
   struct list_head sibling ;
   struct list_head children ;
   int id ;
   unsigned int flags ;
   u64 serial_nr ;
   struct callback_head callback_head ;
   struct work_struct destroy_work ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct css_set {
   atomic_t refcount ;
   struct hlist_node hlist ;
   struct list_head tasks ;
   struct list_head mg_tasks ;
   struct list_head cgrp_links ;
   struct cgroup *dfl_cgrp ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct list_head mg_preload_node ;
   struct list_head mg_node ;
   struct cgroup *mg_src_cgrp ;
   struct css_set *mg_dst_cset ;
   struct list_head e_cset_node[12U] ;
   struct callback_head callback_head ;
};

#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup {
   struct cgroup_subsys_state self ;
   unsigned long flags ;
   int id ;
   int populated_cnt ;
   struct kernfs_node *kn ;
   struct kernfs_node *procs_kn ;
   struct kernfs_node *populated_kn ;
   unsigned int subtree_control ;
   unsigned int child_subsys_mask ;
   struct cgroup_subsys_state *subsys[12U] ;
   struct cgroup_root *root ;
   struct list_head cset_links ;
   struct list_head e_csets[12U] ;
   struct list_head pidlists ;
   struct mutex pidlist_mutex ;
   wait_queue_head_t offline_waitq ;
   struct work_struct release_agent_work ;
};

#line 270 
struct kernfs_root;

#line 270  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_root {
   struct kernfs_root *kf_root ;
   unsigned int subsys_mask ;
   int hierarchy_id ;
   struct cgroup cgrp ;
   atomic_t nr_cgrps ;
   struct list_head root_list ;
   unsigned int flags ;
   struct idr cgroup_idr ;
   char release_agent_path[4096U] ;
   char name[64U] ;
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cftype {
   char name[64U] ;
   int private ;
   umode_t mode ;
   size_t max_write_len ;
   unsigned int flags ;
   struct cgroup_subsys *ss ;
   struct list_head node ;
   struct kernfs_ops *kf_ops ;
   u64 (*read_u64)(struct cgroup_subsys_state *, struct cftype *) ;
   s64 (*read_s64)(struct cgroup_subsys_state *, struct cftype *) ;
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   int (*write_u64)(struct cgroup_subsys_state *, struct cftype *, u64 ) ;
   int (*write_s64)(struct cgroup_subsys_state *, struct cftype *, s64 ) ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   struct lock_class_key lockdep_key ;
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup-defs.h"
struct cgroup_subsys {
   struct cgroup_subsys_state *(*css_alloc)(struct cgroup_subsys_state *) ;
   int (*css_online)(struct cgroup_subsys_state *) ;
   void (*css_offline)(struct cgroup_subsys_state *) ;
   void (*css_released)(struct cgroup_subsys_state *) ;
   void (*css_free)(struct cgroup_subsys_state *) ;
   void (*css_reset)(struct cgroup_subsys_state *) ;
   void (*css_e_css_changed)(struct cgroup_subsys_state *) ;
   int (*can_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*cancel_attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*attach)(struct cgroup_subsys_state *, struct cgroup_taskset *) ;
   void (*fork)(struct task_struct *) ;
   void (*exit)(struct cgroup_subsys_state *, struct cgroup_subsys_state *, struct task_struct *) ;
   void (*bind)(struct cgroup_subsys_state *) ;
   int disabled ;
   int early_init ;
   bool broken_hierarchy ;
   bool warned_broken_hierarchy ;
   int id ;
   char const *name ;
   struct cgroup_root *root ;
   struct idr css_idr ;
   struct list_head cfts ;
   struct cftype *dfl_cftypes ;
   struct cftype *legacy_cftypes ;
   unsigned int depends_on ;
};

#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct futex_pi_state;

#line 129 
struct robust_list_head;

#line 130 
struct bio_list;

#line 131 
struct fs_struct;

#line 132 
struct perf_event_context;

#line 133 
struct blk_plug;

#line 135 
struct nameidata;

#line 188 
struct cfs_rq;

#line 189 
struct task_group;

#line 477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sighand_struct {
   atomic_t count ;
   struct k_sigaction action[64U] ;
   spinlock_t siglock ;
   wait_queue_head_t signalfd_wqh ;
};

#line 516  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct pacct_struct {
   int ac_flag ;
   long ac_exitcode ;
   unsigned long ac_mem ;
   cputime_t ac_utime ;
   cputime_t ac_stime ;
   unsigned long ac_minflt ;
   unsigned long ac_majflt ;
};

#line 524  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cpu_itimer {
   cputime_t expires ;
   cputime_t incr ;
   u32 error ;
   u32 incr_error ;
};

#line 531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct cputime {
   cputime_t utime ;
   cputime_t stime ;
};

#line 543  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime {
   cputime_t utime ;
   cputime_t stime ;
   unsigned long long sum_exec_runtime ;
};

#line 563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_cputime_atomic {
   atomic64_t utime ;
   atomic64_t stime ;
   atomic64_t sum_exec_runtime ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct thread_group_cputimer {
   struct task_cputime_atomic cputime_atomic ;
   int running ;
};

#line 620 
struct autogroup;

#line 621 
struct tty_struct;

#line 621 
struct taskstats;

#line 621 
struct tty_audit_buf;

#line 621  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct signal_struct {
   atomic_t sigcnt ;
   atomic_t live ;
   int nr_threads ;
   struct list_head thread_head ;
   wait_queue_head_t wait_chldexit ;
   struct task_struct *curr_target ;
   struct sigpending shared_pending ;
   int group_exit_code ;
   int notify_count ;
   struct task_struct *group_exit_task ;
   int group_stop_count ;
   unsigned int flags ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_child_subreaper : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_child_subreaper : 1 ;
   int posix_timer_id ;
   struct list_head posix_timers ;
   struct hrtimer real_timer ;
   struct pid *leader_pid ;
   ktime_t it_real_incr ;
   struct cpu_itimer it[2U] ;
   struct thread_group_cputimer cputimer ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct pid *tty_old_pgrp ;
   int leader ;
   struct tty_struct *tty ;
   struct autogroup *autogroup ;
   seqlock_t stats_lock ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t cutime ;
   cputime_t cstime ;
   cputime_t gtime ;
   cputime_t cgtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   unsigned long cnvcsw ;
   unsigned long cnivcsw ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   unsigned long cmin_flt ;
   unsigned long cmaj_flt ;
   unsigned long inblock ;
   unsigned long oublock ;
   unsigned long cinblock ;
   unsigned long coublock ;
   unsigned long maxrss ;
   unsigned long cmaxrss ;
   struct task_io_accounting ioac ;
   unsigned long long sum_sched_runtime ;
   struct rlimit rlim[16U] ;
   struct pacct_struct pacct ;
   struct taskstats *stats ;
   unsigned int audit_tty ;
   unsigned int audit_tty_log_passwd ;
   struct tty_audit_buf *tty_audit_buf ;
   struct rw_semaphore group_rwsem ;
   oom_flags_t oom_flags ;
   short oom_score_adj ;
   short oom_score_adj_min ;
   struct mutex cred_guard_mutex ;
};

#line 802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct user_struct {
   atomic_t __count ;
   atomic_t processes ;
   atomic_t sigpending ;
   atomic_t inotify_watches ;
   atomic_t inotify_devs ;
   atomic_t fanotify_listeners ;
   atomic_long_t epoll_watches ;
   unsigned long mq_bytes ;
   unsigned long locked_shm ;
   struct key *uid_keyring ;
   struct key *session_keyring ;
   struct hlist_node uidhash_node ;
   kuid_t uid ;
   atomic_long_t locked_vm ;
};

#line 845 
struct backing_dev_info;

#line 846 
struct reclaim_state;

#line 847  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_info {
   unsigned long pcount ;
   unsigned long long run_delay ;
   unsigned long long last_arrival ;
   unsigned long long last_queued ;
};

#line 861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_delay_info {
   spinlock_t lock ;
   unsigned int flags ;
   u64 blkio_start ;
   u64 blkio_delay ;
   u64 swapin_delay ;
   u32 blkio_count ;
   u32 swapin_count ;
   u64 freepages_start ;
   u64 freepages_delay ;
   u32 freepages_count ;
};

#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct wake_q_node {
   struct wake_q_node *next ;
};

#line 1138 
struct io_context;

#line 1172 
struct uts_namespace;

#line 1173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct load_weight {
   unsigned long weight ;
   u32 inv_weight ;
};

#line 1181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_avg {
   u64 last_runnable_update ;
   s64 decay_count ;
   unsigned long load_avg_contrib ;
   unsigned long utilization_avg_contrib ;
   u32 runnable_avg_sum ;
   u32 avg_period ;
   u32 running_avg_sum ;
};

#line 1206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_statistics {
   u64 wait_start ;
   u64 wait_max ;
   u64 wait_count ;
   u64 wait_sum ;
   u64 iowait_count ;
   u64 iowait_sum ;
   u64 sleep_start ;
   u64 sleep_max ;
   s64 sum_sleep_runtime ;
   u64 block_start ;
   u64 block_max ;
   u64 exec_max ;
   u64 slice_max ;
   u64 nr_migrations_cold ;
   u64 nr_failed_migrations_affine ;
   u64 nr_failed_migrations_running ;
   u64 nr_failed_migrations_hot ;
   u64 nr_forced_migrations ;
   u64 nr_wakeups ;
   u64 nr_wakeups_sync ;
   u64 nr_wakeups_migrate ;
   u64 nr_wakeups_local ;
   u64 nr_wakeups_remote ;
   u64 nr_wakeups_affine ;
   u64 nr_wakeups_affine_attempts ;
   u64 nr_wakeups_passive ;
   u64 nr_wakeups_idle ;
};

#line 1241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_entity {
   struct load_weight load ;
   struct rb_node run_node ;
   struct list_head group_node ;
   unsigned int on_rq ;
   u64 exec_start ;
   u64 sum_exec_runtime ;
   u64 vruntime ;
   u64 prev_sum_exec_runtime ;
   u64 nr_migrations ;
   struct sched_statistics statistics ;
   int depth ;
   struct sched_entity *parent ;
   struct cfs_rq *cfs_rq ;
   struct cfs_rq *my_q ;
   struct sched_avg avg ;
};

#line 1273 
struct rt_rq;

#line 1273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_rt_entity {
   struct list_head run_list ;
   unsigned long timeout ;
   unsigned long watchdog_stamp ;
   unsigned int time_slice ;
   struct sched_rt_entity *back ;
   struct sched_rt_entity *parent ;
   struct rt_rq *rt_rq ;
   struct rt_rq *my_q ;
};

#line 1289  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct sched_dl_entity {
   struct rb_node rb_node ;
   u64 dl_runtime ;
   u64 dl_deadline ;
   u64 dl_period ;
   u64 dl_bw ;
   s64 runtime ;
   u64 deadline ;
   unsigned int flags ;
   int dl_throttled ;
   int dl_new ;
   int dl_boosted ;
   int dl_yielded ;
   struct hrtimer dl_timer ;
};

#line 1355  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct memcg_oom_info {
   struct mem_cgroup *memcg ;
   gfp_t gfp_mask ;
   int order ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) may_oom : 1 ;
};

#line 1779 
struct sched_class;

#line 1779 
struct files_struct;

#line 1779 
struct compat_robust_list_head;

#line 1779 
struct numa_group;

#line 1779 
struct ftrace_ret_stack;

#line 1779  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
struct task_struct {
   long volatile state ;
   void *stack ;
   atomic_t usage ;
   unsigned int flags ;
   unsigned int ptrace ;
   struct llist_node wake_entry ;
   int on_cpu ;
   struct task_struct *last_wakee ;
   unsigned long wakee_flips ;
   unsigned long wakee_flip_decay_ts ;
   int wake_cpu ;
   int on_rq ;
   int prio ;
   int static_prio ;
   int normal_prio ;
   unsigned int rt_priority ;
   struct sched_class const *sched_class ;
   struct sched_entity se ;
   struct sched_rt_entity rt ;
   struct task_group *sched_task_group ;
   struct sched_dl_entity dl ;
   struct hlist_head preempt_notifiers ;
   unsigned int btrace_seq ;
   unsigned int policy ;
   int nr_cpus_allowed ;
   cpumask_t cpus_allowed ;
   unsigned long rcu_tasks_nvcsw ;
   bool rcu_tasks_holdout ;
   struct list_head rcu_tasks_holdout_list ;
   int rcu_tasks_idle_cpu ;
   struct sched_info sched_info ;
   struct list_head tasks ;
   struct plist_node pushable_tasks ;
   struct rb_node pushable_dl_tasks ;
   struct mm_struct *mm ;
   struct mm_struct *active_mm ;
   u32 vmacache_seqnum ;
   struct vm_area_struct *vmacache[4U] ;
   struct task_rss_stat rss_stat ;
   int exit_state ;
   int exit_code ;
   int exit_signal ;
   int pdeath_signal ;
   unsigned long jobctl ;
   unsigned int personality ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_execve : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) in_iowait : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_reset_on_fork : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_contributes_to_load : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sched_migrated : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) memcg_kmem_skip_account : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) brk_randomized : 1 ;
   unsigned long atomic_flags ;
   struct restart_block restart_block ;
   pid_t pid ;
   pid_t tgid ;
   struct task_struct *real_parent ;
   struct task_struct *parent ;
   struct list_head children ;
   struct list_head sibling ;
   struct task_struct *group_leader ;
   struct list_head ptraced ;
   struct list_head ptrace_entry ;
   struct pid_link pids[3U] ;
   struct list_head thread_group ;
   struct list_head thread_node ;
   struct completion *vfork_done ;
   int *set_child_tid ;
   int *clear_child_tid ;
   cputime_t utime ;
   cputime_t stime ;
   cputime_t utimescaled ;
   cputime_t stimescaled ;
   cputime_t gtime ;
   struct cputime prev_cputime ;
   unsigned long nvcsw ;
   unsigned long nivcsw ;
   u64 start_time ;
   u64 real_start_time ;
   unsigned long min_flt ;
   unsigned long maj_flt ;
   struct task_cputime cputime_expires ;
   struct list_head cpu_timers[3U] ;
   struct cred const *real_cred ;
   struct cred const *cred ;
   char comm[16U] ;
   struct nameidata *nameidata ;
   struct sysv_sem sysvsem ;
   struct sysv_shm sysvshm ;
   unsigned long last_switch_count ;
   struct fs_struct *fs ;
   struct files_struct *files ;
   struct nsproxy *nsproxy ;
   struct signal_struct *signal ;
   struct sighand_struct *sighand ;
   sigset_t blocked ;
   sigset_t real_blocked ;
   sigset_t saved_sigmask ;
   struct sigpending pending ;
   unsigned long sas_ss_sp ;
   size_t sas_ss_size ;
   int (*notifier)(void *) ;
   void *notifier_data ;
   sigset_t *notifier_mask ;
   struct callback_head *task_works ;
   struct audit_context *audit_context ;
   kuid_t loginuid ;
   unsigned int sessionid ;
   struct seccomp seccomp ;
   u32 parent_exec_id ;
   u32 self_exec_id ;
   spinlock_t alloc_lock ;
   raw_spinlock_t pi_lock ;
   struct wake_q_node wake_q ;
   struct rb_root pi_waiters ;
   struct rb_node *pi_waiters_leftmost ;
   struct rt_mutex_waiter *pi_blocked_on ;
   struct mutex_waiter *blocked_on ;
   unsigned int irq_events ;
   unsigned long hardirq_enable_ip ;
   unsigned long hardirq_disable_ip ;
   unsigned int hardirq_enable_event ;
   unsigned int hardirq_disable_event ;
   int hardirqs_enabled ;
   int hardirq_context ;
   unsigned long softirq_disable_ip ;
   unsigned long softirq_enable_ip ;
   unsigned int softirq_disable_event ;
   unsigned int softirq_enable_event ;
   int softirqs_enabled ;
   int softirq_context ;
   u64 curr_chain_key ;
   int lockdep_depth ;
   unsigned int lockdep_recursion ;
   struct held_lock held_locks[48U] ;
   gfp_t lockdep_reclaim_gfp ;
   void *journal_info ;
   struct bio_list *bio_list ;
   struct blk_plug *plug ;
   struct reclaim_state *reclaim_state ;
   struct backing_dev_info *backing_dev_info ;
   struct io_context *io_context ;
   unsigned long ptrace_message ;
   siginfo_t *last_siginfo ;
   struct task_io_accounting ioac ;
   u64 acct_rss_mem1 ;
   u64 acct_vm_mem1 ;
   cputime_t acct_timexpd ;
   nodemask_t mems_allowed ;
   seqcount_t mems_allowed_seq ;
   int cpuset_mem_spread_rotor ;
   int cpuset_slab_spread_rotor ;
   struct css_set *cgroups ;
   struct list_head cg_list ;
   struct robust_list_head *robust_list ;
   struct compat_robust_list_head *compat_robust_list ;
   struct list_head pi_state_list ;
   struct futex_pi_state *pi_state_cache ;
   struct perf_event_context *perf_event_ctxp[2U] ;
   struct mutex perf_event_mutex ;
   struct list_head perf_event_list ;
   struct mempolicy *mempolicy ;
   short il_next ;
   short pref_node_fork ;
   int numa_scan_seq ;
   unsigned int numa_scan_period ;
   unsigned int numa_scan_period_max ;
   int numa_preferred_nid ;
   unsigned long numa_migrate_retry ;
   u64 node_stamp ;
   u64 last_task_numa_placement ;
   u64 last_sum_exec_runtime ;
   struct callback_head numa_work ;
   struct list_head numa_entry ;
   struct numa_group *numa_group ;
   unsigned long *numa_faults ;
   unsigned long total_numa_faults ;
   unsigned long numa_faults_locality[3U] ;
   unsigned long numa_pages_migrated ;
   struct callback_head rcu ;
   struct pipe_inode_info *splice_pipe ;
   struct page_frag task_frag ;
   struct task_delay_info *delays ;
   int make_it_fail ;
   int nr_dirtied ;
   int nr_dirtied_pause ;
   unsigned long dirty_paused_when ;
   int latency_record_count ;
   struct latency_record latency_record[32U] ;
   unsigned long timer_slack_ns ;
   unsigned long default_timer_slack_ns ;
   unsigned int kasan_depth ;
   int curr_ret_stack ;
   struct ftrace_ret_stack *ret_stack ;
   unsigned long long ftrace_timestamp ;
   atomic_t trace_overrun ;
   atomic_t tracing_graph_pause ;
   unsigned long trace ;
   unsigned long trace_recursion ;
   struct memcg_oom_info memcg_oom ;
   struct uprobe_task *utask ;
   unsigned int sequential_io ;
   unsigned int sequential_io_avg ;
   unsigned long task_state_change ;
   int pagefault_disabled ;
   struct thread_struct thread ;
};

#line 161  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/checksum_64.h"
struct in6_addr;

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct sk_buff;

#line 176 
struct iattr;

#line 177 
struct super_block;

#line 178 
struct file_system_type;

#line 179 
struct kernfs_open_node;

#line 180 
struct kernfs_iattrs;

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
struct kernfs_elem_dir {
   unsigned long subdirs ;
   struct rb_root children ;
   struct kernfs_root *root ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_symlink {
   struct kernfs_node *target_kn ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_elem_attr {
   struct kernfs_ops const *ops ;
   struct kernfs_open_node *open ;
   loff_t size ;
   struct kernfs_node *notify_next ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
union __anonunion_206 {
   struct kernfs_elem_dir dir ;
   struct kernfs_elem_symlink symlink ;
   struct kernfs_elem_attr attr ;
};

#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_node {
   atomic_t count ;
   atomic_t active ;
   struct lockdep_map dep_map ;
   struct kernfs_node *parent ;
   char const *name ;
   struct rb_node rb ;
   void const *ns ;
   unsigned int hash ;
   union __anonunion_206 __anonCompField_kernfs_node_57 ;
   void *priv ;
   unsigned short flags ;
   umode_t mode ;
   unsigned int ino ;
   struct kernfs_iattrs *iattr ;
};

#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_syscall_ops {
   int (*remount_fs)(struct kernfs_root *, int *, char *) ;
   int (*show_options)(struct seq_file *, struct kernfs_root *) ;
   int (*mkdir)(struct kernfs_node *, char const *, umode_t ) ;
   int (*rmdir)(struct kernfs_node *) ;
   int (*rename)(struct kernfs_node *, struct kernfs_node *, char const *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_root {
   struct kernfs_node *kn ;
   unsigned int flags ;
   struct ida ino_ida ;
   struct kernfs_syscall_ops *syscall_ops ;
   struct list_head supers ;
   wait_queue_head_t deactivate_waitq ;
};

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_open_file {
   struct kernfs_node *kn ;
   struct file *file ;
   void *priv ;
   struct mutex mutex ;
   int event ;
   struct list_head list ;
   char *prealloc_buf ;
   size_t atomic_write_len ;
   bool mmapped ;
   struct vm_operations_struct const *vm_ops ;
};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kernfs_ops {
   int (*seq_show)(struct seq_file *, void *) ;
   void *(*seq_start)(struct seq_file *, loff_t *) ;
   void *(*seq_next)(struct seq_file *, void *, loff_t *) ;
   void (*seq_stop)(struct seq_file *, void *) ;
   ssize_t (*read)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   size_t atomic_write_len ;
   bool prealloc ;
   ssize_t (*write)(struct kernfs_open_file *, char *, size_t , loff_t ) ;
   int (*mmap)(struct kernfs_open_file *, struct vm_area_struct *) ;
   struct lock_class_key lockdep_key ;
};

#line 477 
struct kobject;

#line 478 
enum kobj_ns_type {
    KOBJ_NS_TYPE_NONE = 0,
    KOBJ_NS_TYPE_NET = 1,
    KOBJ_NS_TYPES = 2
};

#line 484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernfs.h"
struct kobj_ns_type_operations {
   enum kobj_ns_type type ;
   bool (*current_may_mount)(void) ;
   void *(*grab_current_ns)(void) ;
   void const *(*netlink_ns)(struct sock *) ;
   void const *(*initial_ns)(void) ;
   void (*drop_ns)(void *) ;
};

#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/uapi/asm/stat.h"
struct kstat {
   u64 ino ;
   dev_t dev ;
   umode_t mode ;
   unsigned int nlink ;
   kuid_t uid ;
   kgid_t gid ;
   dev_t rdev ;
   loff_t size ;
   struct timespec atime ;
   struct timespec mtime ;
   struct timespec ctime ;
   unsigned long blksize ;
   unsigned long long blocks ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct bin_attribute;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/stat.h"
struct attribute {
   char const *name ;
   umode_t mode ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_lockdep : 1 ;
   struct lock_class_key *key ;
   struct lock_class_key skey ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct attribute_group {
   char const *name ;
   umode_t (*is_visible)(struct kobject *, struct attribute *, int ) ;
   struct attribute **attrs ;
   struct bin_attribute **bin_attrs ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct bin_attribute {
   struct attribute attr ;
   size_t size ;
   void *private ;
   ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t , size_t ) ;
   int (*mmap)(struct file *, struct kobject *, struct bin_attribute *, struct vm_area_struct *) ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct sysfs_ops {
   ssize_t (*show)(struct kobject *, struct attribute *, char *) ;
   ssize_t (*store)(struct kobject *, struct attribute *, char const *, size_t ) ;
};

#line 509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sysfs.h"
struct kref {
   atomic_t refcount ;
};

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset;

#line 52 
struct kobj_type;

#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobject {
   char const *name ;
   struct list_head entry ;
   struct kobject *parent ;
   struct kset *kset ;
   struct kobj_type *ktype ;
   struct kernfs_node *sd ;
   struct kref kref ;
   struct delayed_work release ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_initialized : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_in_sysfs : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_add_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_remove_uevent_sent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) uevent_suppress : 1 ;
};

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_type {
   void (*release)(struct kobject *) ;
   struct sysfs_ops const *sysfs_ops ;
   struct attribute **default_attrs ;
   struct kobj_ns_type_operations const *(*child_ns_type)(struct kobject *) ;
   void const *(*namespace)(struct kobject *) ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kobj_uevent_env {
   char *argv[3U] ;
   char *envp[32U] ;
   int envp_idx ;
   char buf[2048U] ;
   int buflen ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset_uevent_ops {
   int (* const filter)(struct kset *, struct kobject *) ;
   char const *(* const name)(struct kset *, struct kobject *) ;
   int (* const uevent)(struct kset *, struct kobject *, struct kobj_uevent_env *) ;
};

#line 148  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
struct kset {
   struct list_head list ;
   spinlock_t list_lock ;
   struct kobject kobj ;
   struct kset_uevent_ops const *uevent_ops ;
};

#line 223 
struct klist_node;

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct klist_node {
   void *n_klist ;
   struct list_head n_node ;
   struct kref n_ref ;
};

#line 67 
struct path;

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/klist.h"
struct seq_file {
   char *buf ;
   size_t size ;
   size_t from ;
   size_t count ;
   size_t pad_until ;
   loff_t index ;
   loff_t read_pos ;
   u64 version ;
   struct mutex lock ;
   struct seq_operations const *op ;
   int poll_event ;
   struct user_namespace *user_ns ;
   void *private ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
struct seq_operations {
   void *(*start)(struct seq_file *, loff_t *) ;
   void (*stop)(struct seq_file *, void *) ;
   void *(*next)(struct seq_file *, void *, loff_t *) ;
   int (*show)(struct seq_file *, void *) ;
};

#line 222 
struct pinctrl;

#line 223 
struct pinctrl_state;

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pinctrl/consumer.h"
struct dev_pin_info {
   struct pinctrl *p ;
   struct pinctrl_state *default_state ;
   struct pinctrl_state *sleep_state ;
   struct pinctrl_state *idle_state ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dma_map_ops;

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ratelimit.h"
struct dev_archdata {
   struct dma_map_ops *dma_ops ;
   void *iommu ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/device.h"
struct device_driver;

#line 16 
struct driver_private;

#line 17 
struct class;

#line 18 
struct subsys_private;

#line 19 
struct bus_type;

#line 20 
struct device_node;

#line 21 
struct fwnode_handle;

#line 22 
struct iommu_ops;

#line 23 
struct iommu_group;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute;

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct bus_type {
   char const *name ;
   char const *dev_name ;
   struct device *dev_root ;
   struct device_attribute *dev_attrs ;
   struct attribute_group const **bus_groups ;
   struct attribute_group const **dev_groups ;
   struct attribute_group const **drv_groups ;
   int (*match)(struct device *, struct device_driver *) ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*online)(struct device *) ;
   int (*offline)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct iommu_ops const *iommu_ops ;
   struct subsys_private *p ;
   struct lock_class_key lock_key ;
};

#line 139 
struct device_type;

#line 197 
enum probe_type {
    PROBE_DEFAULT_STRATEGY = 0,
    PROBE_PREFER_ASYNCHRONOUS = 1,
    PROBE_FORCE_SYNCHRONOUS = 2
};

#line 203 
struct of_device_id;

#line 203 
struct acpi_device_id;

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_driver {
   char const *name ;
   struct bus_type *bus ;
   struct module *owner ;
   char const *mod_name ;
   bool suppress_bind_attrs ;
   enum probe_type probe_type ;
   struct of_device_id const *of_match_table ;
   struct acpi_device_id const *acpi_match_table ;
   int (*probe)(struct device *) ;
   int (*remove)(struct device *) ;
   void (*shutdown)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct attribute_group const **groups ;
   struct dev_pm_ops const *pm ;
   struct driver_private *p ;
};

#line 353 
struct class_attribute;

#line 353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class {
   char const *name ;
   struct module *owner ;
   struct class_attribute *class_attrs ;
   struct attribute_group const **dev_groups ;
   struct kobject *dev_kobj ;
   int (*dev_uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *) ;
   void (*class_release)(struct class *) ;
   void (*dev_release)(struct device *) ;
   int (*suspend)(struct device *, pm_message_t ) ;
   int (*resume)(struct device *) ;
   struct kobj_ns_type_operations const *ns_type ;
   void const *(*namespace)(struct device *) ;
   struct dev_pm_ops const *pm ;
   struct subsys_private *p ;
};

#line 446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct class_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct class *, struct class_attribute *, char *) ;
   ssize_t (*store)(struct class *, struct class_attribute *, char const *, size_t ) ;
};

#line 514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_type {
   char const *name ;
   struct attribute_group const **groups ;
   int (*uevent)(struct device *, struct kobj_uevent_env *) ;
   char *(*devnode)(struct device *, umode_t *, kuid_t *, kgid_t *) ;
   void (*release)(struct device *) ;
   struct dev_pm_ops const *pm ;
};

#line 542  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct device *, struct device_attribute *, char *) ;
   ssize_t (*store)(struct device *, struct device_attribute *, char const *, size_t ) ;
};

#line 675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device_dma_parameters {
   unsigned int max_segment_size ;
   unsigned long segment_boundary_mask ;
};

#line 684 
struct dma_coherent_mem;

#line 684 
struct cma;

#line 684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct device {
   struct device *parent ;
   struct device_private *p ;
   struct kobject kobj ;
   char const *init_name ;
   struct device_type const *type ;
   struct mutex mutex ;
   struct bus_type *bus ;
   struct device_driver *driver ;
   void *platform_data ;
   void *driver_data ;
   struct dev_pm_info power ;
   struct dev_pm_domain *pm_domain ;
   struct dev_pin_info *pins ;
   int numa_node ;
   u64 *dma_mask ;
   u64 coherent_dma_mask ;
   unsigned long dma_pfn_offset ;
   struct device_dma_parameters *dma_parms ;
   struct list_head dma_pools ;
   struct dma_coherent_mem *dma_mem ;
   struct cma *cma_area ;
   struct dev_archdata archdata ;
   struct device_node *of_node ;
   struct fwnode_handle *fwnode ;
   dev_t devt ;
   u32 id ;
   spinlock_t devres_lock ;
   struct list_head devres_head ;
   struct klist_node knode_class ;
   struct class *class ;
   struct attribute_group const **groups ;
   void (*release)(struct device *) ;
   struct iommu_group *iommu_group ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline_disabled : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) offline : 1 ;
};

#line 830  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct wakeup_source {
   char const *name ;
   struct list_head entry ;
   spinlock_t lock ;
   struct wake_irq *wakeirq ;
   struct timer_list timer ;
   unsigned long timer_expires ;
   ktime_t total_time ;
   ktime_t max_time ;
   ktime_t last_time ;
   ktime_t start_prevent_time ;
   ktime_t prevent_sleep_time ;
   unsigned long event_count ;
   unsigned long active_count ;
   unsigned long relax_count ;
   unsigned long expire_count ;
   unsigned long wakeup_count ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) active : 1 ;
   bool __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) autosleep_enabled : 1 ;
};

#line 1283  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
struct dma_attrs {
   unsigned long flags[1U] ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-attrs.h"
enum dma_data_direction {
    DMA_BIDIRECTIONAL = 0,
    DMA_TO_DEVICE = 1,
    DMA_FROM_DEVICE = 2,
    DMA_NONE = 3
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bit_spinlock.h"
struct shrink_control {
   gfp_t gfp_mask ;
   unsigned long nr_to_scan ;
   int nid ;
   struct mem_cgroup *memcg ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/shrinker.h"
struct shrinker {
   unsigned long (*count_objects)(struct shrinker *, struct shrink_control *) ;
   unsigned long (*scan_objects)(struct shrinker *, struct shrink_control *) ;
   int seeks ;
   long batch ;
   unsigned long flags ;
   struct list_head list ;
   atomic_long_t *nr_deferred ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page_ext.h"
struct file_ra_state;

#line 65 
struct writeback_control;

#line 66 
struct bdi_writeback;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_fault {
   unsigned int flags ;
   unsigned long pgoff ;
   void *virtual_address ;
   struct page *cow_page ;
   struct page *page ;
   unsigned long max_pgoff ;
   pte_t *pte ;
};

#line 239  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct vm_operations_struct {
   void (*open)(struct vm_area_struct *) ;
   void (*close)(struct vm_area_struct *) ;
   int (*fault)(struct vm_area_struct *, struct vm_fault *) ;
   void (*map_pages)(struct vm_area_struct *, struct vm_fault *) ;
   int (*page_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*pfn_mkwrite)(struct vm_area_struct *, struct vm_fault *) ;
   int (*access)(struct vm_area_struct *, unsigned long , void *, int , int ) ;
   char const *(*name)(struct vm_area_struct *) ;
   int (*set_policy)(struct vm_area_struct *, struct mempolicy *) ;
   struct mempolicy *(*get_policy)(struct vm_area_struct *, unsigned long ) ;
   struct page *(*find_special_page)(struct vm_area_struct *, unsigned long ) ;
};

#line 2291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
struct scatterlist {
   unsigned long sg_magic ;
   unsigned long page_link ;
   unsigned int offset ;
   unsigned int length ;
   dma_addr_t dma_address ;
   unsigned int dma_length ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct sg_table {
   struct scatterlist *sgl ;
   unsigned int nents ;
   unsigned int orig_nents ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_map_ops {
   void *(*alloc)(struct device *, size_t , dma_addr_t *, gfp_t , struct dma_attrs *) ;
   void (*free)(struct device *, size_t , void *, dma_addr_t , struct dma_attrs *) ;
   int (*mmap)(struct device *, struct vm_area_struct *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   int (*get_sgtable)(struct device *, struct sg_table *, void *, dma_addr_t , size_t , struct dma_attrs *) ;
   dma_addr_t (*map_page)(struct device *, struct page *, unsigned long , size_t , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_page)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *) ;
   int (*map_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*unmap_sg)(struct device *, struct scatterlist *, int , enum dma_data_direction , struct dma_attrs *) ;
   void (*sync_single_for_cpu)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_single_for_device)(struct device *, dma_addr_t , size_t , enum dma_data_direction ) ;
   void (*sync_sg_for_cpu)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   void (*sync_sg_for_device)(struct device *, struct scatterlist *, int , enum dma_data_direction ) ;
   int (*mapping_error)(struct device *, dma_addr_t ) ;
   int (*dma_supported)(struct device *, u64 ) ;
   int (*set_dma_mask)(struct device *, u64 ) ;
   int is_phys ;
};

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
typedef u64 netdev_features_t;

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
union __anonunion_in6_u_207 {
   __u8 u6_addr8[16U] ;
   __be16 u6_addr16[8U] ;
   __be32 u6_addr32[4U] ;
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdev_features.h"
struct in6_addr {
   union __anonunion_in6_u_207 in6_u ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/in6.h"
struct ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_proto ;
};

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buf_operations;

#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow_dissector.h"
struct pipe_buffer {
   struct page *page ;
   unsigned int offset ;
   unsigned int len ;
   struct pipe_buf_operations const *ops ;
   unsigned int flags ;
   unsigned long private ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_inode_info {
   struct mutex mutex ;
   wait_queue_head_t wait ;
   unsigned int nrbufs ;
   unsigned int curbuf ;
   unsigned int buffers ;
   unsigned int readers ;
   unsigned int writers ;
   unsigned int files ;
   unsigned int waiting_writers ;
   unsigned int r_counter ;
   unsigned int w_counter ;
   struct page *tmp_page ;
   struct fasync_struct *fasync_readers ;
   struct fasync_struct *fasync_writers ;
   struct pipe_buffer *bufs ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pipe_fs_i.h"
struct pipe_buf_operations {
   int can_merge ;
   int (*confirm)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*release)(struct pipe_inode_info *, struct pipe_buffer *) ;
   int (*steal)(struct pipe_inode_info *, struct pipe_buffer *) ;
   void (*get)(struct pipe_inode_info *, struct pipe_buffer *) ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct napi_struct;

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/splice.h"
struct nf_conntrack {
   atomic_t use ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
enum ldv_22417 {
    BRNF_PROTO_UNCHANGED = 0,
    BRNF_PROTO_8021Q = 1,
    BRNF_PROTO_PPPOE = 2
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_212 {
   struct net_device *physoutdev ;
   char neigh_header[8U] ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_213 {
   __be32 ipv4_daddr ;
   struct in6_addr ipv6_daddr ;
};

#line 172  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct nf_bridge_info {
   atomic_t use ;
   enum ldv_22417 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) orig_proto : 8 ;
   bool pkt_otherhost ;
   __u16 frag_max_size ;
   unsigned int mask ;
   struct net_device *physindev ;
   union __anonunion_212 __anonCompField_nf_bridge_info_61 ;
   union __anonunion_213 __anonCompField_nf_bridge_info_62 ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff_head {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   __u32 qlen ;
   spinlock_t lock ;
};

#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef unsigned int sk_buff_data_t;

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_216 {
   u32 stamp_us ;
   u32 stamp_jiffies ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_215 {
   u64 v64 ;
   struct __anonstruct_216 __anonCompField___anonunion_215_63 ;
};

#line 404  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_mstamp {
   union __anonunion_215 __anonCompField_skb_mstamp_64 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_219 {
   ktime_t tstamp ;
   struct skb_mstamp skb_mstamp ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_218 {
   struct sk_buff *next ;
   struct sk_buff *prev ;
   union __anonunion_219 __anonCompField___anonstruct_218_65 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_217 {
   struct __anonstruct_218 __anonCompField___anonunion_217_66 ;
   struct rb_node rbnode ;
};

#line 457 
struct sec_path;

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_221 {
   __u16 csum_start ;
   __u16 csum_offset ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_220 {
   __wsum csum ;
   struct __anonstruct_221 __anonCompField___anonunion_220_68 ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_222 {
   unsigned int napi_id ;
   unsigned int sender_cpu ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_223 {
   __u32 mark ;
   __u32 reserved_tailroom ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
union __anonunion_224 {
   __be16 inner_protocol ;
   __u8 inner_ipproto ;
};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct sk_buff {
   union __anonunion_217 __anonCompField_sk_buff_67 ;
   struct sock *sk ;
   struct net_device *dev ;
   char cb[48U] ;
   unsigned long _skb_refdst ;
   void (*destructor)(struct sk_buff *) ;
   struct sec_path *sp ;
   struct nf_conntrack *nfct ;
   struct nf_bridge_info *nf_bridge ;
   unsigned int len ;
   unsigned int data_len ;
   __u16 mac_len ;
   __u16 hdr_len ;
   __u16 queue_mapping ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cloned : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nohdr : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) fclone : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) peeked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) head_frag : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) xmit_more : 1 ;
   __u32 headers_start[0U] ;
   __u8 __pkt_type_offset[0U] ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pkt_type : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pfmemalloc : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_df : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) nfctinfo : 3 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) nf_trace : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ip_summed : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ooo_okay : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) l4_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sw_hash : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wifi_acked : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_fcs : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encapsulation : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) encap_hdr_csum : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_valid : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_complete_sw : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) csum_level : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_bad : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) ndisc_nodetype : 2 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ipvs_property : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) inner_protocol_type : 1 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) remcsum_offload : 1 ;
   __u16 tc_index ;
   __u16 tc_verd ;
   union __anonunion_220 __anonCompField_sk_buff_69 ;
   __u32 priority ;
   int skb_iif ;
   __u32 hash ;
   __be16 vlan_proto ;
   __u16 vlan_tci ;
   union __anonunion_222 __anonCompField_sk_buff_70 ;
   __u32 secmark ;
   union __anonunion_223 __anonCompField_sk_buff_71 ;
   union __anonunion_224 __anonCompField_sk_buff_72 ;
   __u16 inner_transport_header ;
   __u16 inner_network_header ;
   __u16 inner_mac_header ;
   __be16 protocol ;
   __u16 transport_header ;
   __u16 network_header ;
   __u16 mac_header ;
   __u32 headers_end[0U] ;
   sk_buff_data_t tail ;
   sk_buff_data_t end ;
   unsigned char *head ;
   unsigned char *data ;
   unsigned int truesize ;
   atomic_t users ;
};

#line 1182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmaengine.h"
struct dql {
   unsigned int num_queued ;
   unsigned int adj_limit ;
   unsigned int last_obj_cnt ;
   unsigned int limit ;
   unsigned int num_completed ;
   unsigned int prev_ovlimit ;
   unsigned int prev_num_queued ;
   unsigned int prev_last_obj_cnt ;
   unsigned int lowest_slack ;
   unsigned long slack_start_time ;
   unsigned int max_limit ;
   unsigned int min_limit ;
   unsigned int slack_hold_time ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_sync_serial_settings_226 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
};

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_sync_serial_settings_226 sync_serial_settings;

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_te1_settings_227 {
   unsigned int clock_rate ;
   unsigned int clock_type ;
   unsigned short loopback ;
   unsigned int slot_map ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_te1_settings_227 te1_settings;

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_raw_hdlc_proto_228 {
   unsigned short encoding ;
   unsigned short parity ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_raw_hdlc_proto_228 raw_hdlc_proto;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_229 {
   unsigned int t391 ;
   unsigned int t392 ;
   unsigned int n391 ;
   unsigned int n392 ;
   unsigned int n393 ;
   unsigned short lmi ;
   unsigned short dce ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_229 fr_proto;

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_230 {
   unsigned int dlci ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_230 fr_proto_pvc;

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_fr_proto_pvc_info_231 {
   unsigned int dlci ;
   char master[16U] ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_fr_proto_pvc_info_231 fr_proto_pvc_info;

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct __anonstruct_cisco_proto_232 {
   unsigned int interval ;
   unsigned int timeout ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
typedef struct __anonstruct_cisco_proto_232 cisco_proto;

#line 117  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/hdlc/ioctl.h"
struct ifmap {
   unsigned long mem_start ;
   unsigned long mem_end ;
   unsigned short base_addr ;
   unsigned char irq ;
   unsigned char dma ;
   unsigned char port ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifs_ifsu_233 {
   raw_hdlc_proto *raw_hdlc ;
   cisco_proto *cisco ;
   fr_proto *fr ;
   fr_proto_pvc *fr_pvc ;
   fr_proto_pvc_info *fr_pvc_info ;
   sync_serial_settings *sync ;
   te1_settings *te1 ;
};

#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct if_settings {
   unsigned int type ;
   unsigned int size ;
   union __anonunion_ifs_ifsu_233 ifs_ifsu ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifrn_234 {
   char ifrn_name[16U] ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
union __anonunion_ifr_ifru_235 {
   struct sockaddr ifru_addr ;
   struct sockaddr ifru_dstaddr ;
   struct sockaddr ifru_broadaddr ;
   struct sockaddr ifru_netmask ;
   struct sockaddr ifru_hwaddr ;
   short ifru_flags ;
   int ifru_ivalue ;
   int ifru_mtu ;
   struct ifmap ifru_map ;
   char ifru_slave[16U] ;
   char ifru_newname[16U] ;
   void *ifru_data ;
   struct if_settings ifru_settings ;
};

#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if.h"
struct ifreq {
   union __anonunion_ifr_ifrn_234 ifr_ifrn ;
   union __anonunion_ifr_ifru_235 ifr_ifru ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_node;

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kdev_t.h"
struct hlist_bl_head {
   struct hlist_bl_node *first ;
};

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_bl.h"
struct hlist_bl_node {
   struct hlist_bl_node *next ;
   struct hlist_bl_node **pprev ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct __anonstruct_240 {
   spinlock_t lock ;
   int count ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
union __anonunion_239 {
   struct __anonstruct_240 __anonCompField___anonunion_239_73 ;
};

#line 114  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_bl.h"
struct lockref {
   union __anonunion_239 __anonCompField_lockref_74 ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct vfsmount;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct __anonstruct_242 {
   u32 hash ;
   u32 len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
union __anonunion_241 {
   struct __anonstruct_242 __anonCompField___anonunion_241_75 ;
   u64 hash_len ;
};

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockref.h"
struct qstr {
   union __anonunion_241 __anonCompField_qstr_76 ;
   unsigned char const *name ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
union __anonunion_d_u_243 {
   struct hlist_node d_alias ;
   struct callback_head d_rcu ;
};

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry {
   unsigned int d_flags ;
   seqcount_t d_seq ;
   struct hlist_bl_node d_hash ;
   struct dentry *d_parent ;
   struct qstr d_name ;
   struct inode *d_inode ;
   unsigned char d_iname[32U] ;
   struct lockref d_lockref ;
   struct dentry_operations const *d_op ;
   struct super_block *d_sb ;
   unsigned long d_time ;
   void *d_fsdata ;
   struct list_head d_lru ;
   struct list_head d_child ;
   struct list_head d_subdirs ;
   union __anonunion_d_u_243 d_u ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct dentry_operations {
   int (*d_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_weak_revalidate)(struct dentry *, unsigned int ) ;
   int (*d_hash)(struct dentry const *, struct qstr *) ;
   int (*d_compare)(struct dentry const *, struct dentry const *, unsigned int , char const *, struct qstr const *) ;
   int (*d_delete)(struct dentry const *) ;
   void (*d_release)(struct dentry *) ;
   void (*d_prune)(struct dentry *) ;
   void (*d_iput)(struct dentry *, struct inode *) ;
   char *(*d_dname)(struct dentry *, char *, int ) ;
   struct vfsmount *(*d_automount)(struct path *) ;
   int (*d_manage)(struct dentry *, bool ) ;
   struct inode *(*d_select_inode)(struct dentry *, unsigned int ) ;
};

#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dcache.h"
struct path {
   struct vfsmount *mnt ;
   struct dentry *dentry ;
};

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/path.h"
struct list_lru_one {
   struct list_head list ;
   long nr_items ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_memcg {
   struct list_lru_one *lru[0U] ;
};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru_node {
   spinlock_t lock ;
   struct list_lru_one lru ;
   struct list_lru_memcg *memcg_lrus ;
};

#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list_lru.h"
struct list_lru {
   struct list_lru_node *node ;
   struct list_head list ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct __anonstruct_247 {
   struct radix_tree_node *parent ;
   void *private_data ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
union __anonunion_246 {
   struct __anonstruct_247 __anonCompField___anonunion_246_77 ;
   struct callback_head callback_head ;
};

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_node {
   unsigned int path ;
   unsigned int count ;
   union __anonunion_246 __anonCompField_radix_tree_node_78 ;
   struct list_head private_list ;
   void *slots[64U] ;
   unsigned long tags[3U][1U] ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/radix-tree.h"
struct radix_tree_root {
   unsigned int height ;
   gfp_t gfp_mask ;
   struct radix_tree_node *rnode ;
};

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/semaphore.h"
struct fiemap_extent {
   __u64 fe_logical ;
   __u64 fe_physical ;
   __u64 fe_length ;
   __u64 fe_reserved64[2U] ;
   __u32 fe_flags ;
   __u32 fe_reserved[3U] ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fiemap.h"
enum migrate_mode {
    MIGRATE_ASYNC = 0,
    MIGRATE_SYNC_LIGHT = 1,
    MIGRATE_SYNC = 2
};

#line 44 
struct bio_set;

#line 45 
struct bio;

#line 46 
struct bio_integrity_payload;

#line 47 
struct block_device;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
typedef void bio_end_io_t(struct bio *, int );

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bio_vec {
   struct page *bv_page ;
   unsigned int bv_len ;
   unsigned int bv_offset ;
};

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bvec_iter {
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned int bi_idx ;
   unsigned int bi_bvec_done ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
union __anonunion_250 {
   struct bio_integrity_payload *bi_integrity ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk_types.h"
struct bio {
   struct bio *bi_next ;
   struct block_device *bi_bdev ;
   unsigned long bi_flags ;
   unsigned long bi_rw ;
   struct bvec_iter bi_iter ;
   unsigned int bi_phys_segments ;
   unsigned int bi_seg_front_size ;
   unsigned int bi_seg_back_size ;
   atomic_t __bi_remaining ;
   bio_end_io_t *bi_end_io ;
   void *bi_private ;
   struct io_context *bi_ioc ;
   struct cgroup_subsys_state *bi_css ;
   union __anonunion_250 __anonCompField_bio_79 ;
   unsigned short bi_vcnt ;
   unsigned short bi_max_vecs ;
   atomic_t __bi_cnt ;
   struct bio_vec *bi_io_vec ;
   struct bio_set *bi_pool ;
   struct bio_vec bi_inline_vecs[0U] ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/fs.h"
struct export_operations;

#line 61 
struct hd_geometry;

#line 62 
struct kstatfs;

#line 63 
struct swap_info_struct;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct iattr {
   unsigned int ia_valid ;
   umode_t ia_mode ;
   kuid_t ia_uid ;
   kgid_t ia_gid ;
   loff_t ia_size ;
   struct timespec ia_atime ;
   struct timespec ia_mtime ;
   struct timespec ia_ctime ;
   struct file *ia_file ;
};

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dqblk_xfs.h"
struct dquot;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef __kernel_uid32_t projid_t;

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
struct __anonstruct_kprojid_t_251 {
   projid_t val ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/projid.h"
typedef struct __anonstruct_kprojid_t_251 kprojid_t;

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/quota.h"
enum quota_type {
    USRQUOTA = 0,
    GRPQUOTA = 1,
    PRJQUOTA = 2
};

#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
typedef long long qsize_t;

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
union __anonunion_252 {
   kuid_t uid ;
   kgid_t gid ;
   kprojid_t projid ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kqid {
   union __anonunion_252 __anonCompField_kqid_80 ;
   enum quota_type type ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqblk {
   qsize_t dqb_bhardlimit ;
   qsize_t dqb_bsoftlimit ;
   qsize_t dqb_curspace ;
   qsize_t dqb_rsvspace ;
   qsize_t dqb_ihardlimit ;
   qsize_t dqb_isoftlimit ;
   qsize_t dqb_curinodes ;
   time_t dqb_btime ;
   time_t dqb_itime ;
};

#line 206 
struct quota_format_type;

#line 207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct mem_dqinfo {
   struct quota_format_type *dqi_format ;
   int dqi_fmt_id ;
   struct list_head dqi_dirty_list ;
   unsigned long dqi_flags ;
   unsigned int dqi_bgrace ;
   unsigned int dqi_igrace ;
   qsize_t dqi_max_spc_limit ;
   qsize_t dqi_max_ino_limit ;
   void *dqi_priv ;
};

#line 272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot {
   struct hlist_node dq_hash ;
   struct list_head dq_inuse ;
   struct list_head dq_free ;
   struct list_head dq_dirty ;
   struct mutex dq_lock ;
   atomic_t dq_count ;
   wait_queue_head_t dq_wait_unused ;
   struct super_block *dq_sb ;
   struct kqid dq_id ;
   loff_t dq_off ;
   unsigned long dq_flags ;
   struct mem_dqblk dq_dqb ;
};

#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_ops {
   int (*check_quota_file)(struct super_block *, int ) ;
   int (*read_file_info)(struct super_block *, int ) ;
   int (*write_file_info)(struct super_block *, int ) ;
   int (*free_file_info)(struct super_block *, int ) ;
   int (*read_dqblk)(struct dquot *) ;
   int (*commit_dqblk)(struct dquot *) ;
   int (*release_dqblk)(struct dquot *) ;
};

#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct dquot_operations {
   int (*write_dquot)(struct dquot *) ;
   struct dquot *(*alloc_dquot)(struct super_block *, int ) ;
   void (*destroy_dquot)(struct dquot *) ;
   int (*acquire_dquot)(struct dquot *) ;
   int (*release_dquot)(struct dquot *) ;
   int (*mark_dirty)(struct dquot *) ;
   int (*write_info)(struct super_block *, int ) ;
   qsize_t *(*get_reserved_space)(struct inode *) ;
   int (*get_projid)(struct inode *, kprojid_t *) ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_dqblk {
   int d_fieldmask ;
   u64 d_spc_hardlimit ;
   u64 d_spc_softlimit ;
   u64 d_ino_hardlimit ;
   u64 d_ino_softlimit ;
   u64 d_space ;
   u64 d_ino_count ;
   s64 d_ino_timer ;
   s64 d_spc_timer ;
   int d_ino_warns ;
   int d_spc_warns ;
   u64 d_rt_spc_hardlimit ;
   u64 d_rt_spc_softlimit ;
   u64 d_rt_space ;
   s64 d_rt_spc_timer ;
   int d_rt_spc_warns ;
};

#line 348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_type_state {
   unsigned int flags ;
   unsigned int spc_timelimit ;
   unsigned int ino_timelimit ;
   unsigned int rt_spc_timelimit ;
   unsigned int spc_warnlimit ;
   unsigned int ino_warnlimit ;
   unsigned int rt_spc_warnlimit ;
   unsigned long long ino ;
   blkcnt_t blocks ;
   blkcnt_t nextents ;
};

#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_state {
   unsigned int s_incoredqs ;
   struct qc_type_state s_state[3U] ;
};

#line 405  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct qc_info {
   int i_fieldmask ;
   unsigned int i_flags ;
   unsigned int i_spc_timelimit ;
   unsigned int i_ino_timelimit ;
   unsigned int i_rt_spc_timelimit ;
   unsigned int i_spc_warnlimit ;
   unsigned int i_ino_warnlimit ;
   unsigned int i_rt_spc_warnlimit ;
};

#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quotactl_ops {
   int (*quota_on)(struct super_block *, int , int , struct path *) ;
   int (*quota_off)(struct super_block *, int ) ;
   int (*quota_enable)(struct super_block *, unsigned int ) ;
   int (*quota_disable)(struct super_block *, unsigned int ) ;
   int (*quota_sync)(struct super_block *, int ) ;
   int (*set_info)(struct super_block *, int , struct qc_info *) ;
   int (*get_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*set_dqblk)(struct super_block *, struct kqid , struct qc_dqblk *) ;
   int (*get_state)(struct super_block *, struct qc_state *) ;
   int (*rm_xquota)(struct super_block *, unsigned int ) ;
};

#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_format_type {
   int qf_fmt_id ;
   struct quota_format_ops const *qf_ops ;
   struct module *qf_owner ;
   struct quota_format_type *qf_next ;
};

#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct quota_info {
   unsigned int flags ;
   struct mutex dqio_mutex ;
   struct mutex dqonoff_mutex ;
   struct inode *files[3U] ;
   struct mem_dqinfo info[3U] ;
   struct quota_format_ops const *ops[3U] ;
};

#line 526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/quota.h"
struct kiocb {
   struct file *ki_filp ;
   loff_t ki_pos ;
   void (*ki_complete)(struct kiocb *, long , long ) ;
   void *private ;
   int ki_flags ;
};

#line 366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space_operations {
   int (*writepage)(struct page *, struct writeback_control *) ;
   int (*readpage)(struct file *, struct page *) ;
   int (*writepages)(struct address_space *, struct writeback_control *) ;
   int (*set_page_dirty)(struct page *) ;
   int (*readpages)(struct file *, struct address_space *, struct list_head *, unsigned int ) ;
   int (*write_begin)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page **, void **) ;
   int (*write_end)(struct file *, struct address_space *, loff_t , unsigned int , unsigned int , struct page *, void *) ;
   sector_t (*bmap)(struct address_space *, sector_t ) ;
   void (*invalidatepage)(struct page *, unsigned int , unsigned int ) ;
   int (*releasepage)(struct page *, gfp_t ) ;
   void (*freepage)(struct page *) ;
   ssize_t (*direct_IO)(struct kiocb *, struct iov_iter *, loff_t ) ;
   int (*migratepage)(struct address_space *, struct page *, struct page *, enum migrate_mode ) ;
   int (*launder_page)(struct page *) ;
   int (*is_partially_uptodate)(struct page *, unsigned long , unsigned long ) ;
   void (*is_dirty_writeback)(struct page *, bool *, bool *) ;
   int (*error_remove_page)(struct address_space *, struct page *) ;
   int (*swap_activate)(struct swap_info_struct *, struct file *, sector_t *) ;
   void (*swap_deactivate)(struct file *) ;
};

#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct address_space {
   struct inode *host ;
   struct radix_tree_root page_tree ;
   spinlock_t tree_lock ;
   atomic_t i_mmap_writable ;
   struct rb_root i_mmap ;
   struct rw_semaphore i_mmap_rwsem ;
   unsigned long nrpages ;
   unsigned long nrshadows ;
   unsigned long writeback_index ;
   struct address_space_operations const *a_ops ;
   unsigned long flags ;
   spinlock_t private_lock ;
   struct list_head private_list ;
   void *private_data ;
};

#line 443 
struct request_queue;

#line 444 
struct hd_struct;

#line 444 
struct gendisk;

#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct block_device {
   dev_t bd_dev ;
   int bd_openers ;
   struct inode *bd_inode ;
   struct super_block *bd_super ;
   struct mutex bd_mutex ;
   struct list_head bd_inodes ;
   void *bd_claiming ;
   void *bd_holder ;
   int bd_holders ;
   bool bd_write_holder ;
   struct list_head bd_holder_disks ;
   struct block_device *bd_contains ;
   unsigned int bd_block_size ;
   struct hd_struct *bd_part ;
   unsigned int bd_part_count ;
   int bd_invalidated ;
   struct gendisk *bd_disk ;
   struct request_queue *bd_queue ;
   struct list_head bd_list ;
   unsigned long bd_private ;
   int bd_fsfreeze_count ;
   struct mutex bd_fsfreeze_mutex ;
};

#line 560 
struct posix_acl;

#line 561 
struct inode_operations;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_255 {
   unsigned int const i_nlink ;
   unsigned int __i_nlink ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_256 {
   struct hlist_head i_dentry ;
   struct callback_head i_rcu ;
};

#line 561 
struct file_lock_context;

#line 561 
struct cdev;

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_257 {
   struct pipe_inode_info *i_pipe ;
   struct block_device *i_bdev ;
   struct cdev *i_cdev ;
   char *i_link ;
};

#line 561  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode {
   umode_t i_mode ;
   unsigned short i_opflags ;
   kuid_t i_uid ;
   kgid_t i_gid ;
   unsigned int i_flags ;
   struct posix_acl *i_acl ;
   struct posix_acl *i_default_acl ;
   struct inode_operations const *i_op ;
   struct super_block *i_sb ;
   struct address_space *i_mapping ;
   void *i_security ;
   unsigned long i_ino ;
   union __anonunion_255 __anonCompField_inode_81 ;
   dev_t i_rdev ;
   loff_t i_size ;
   struct timespec i_atime ;
   struct timespec i_mtime ;
   struct timespec i_ctime ;
   spinlock_t i_lock ;
   unsigned short i_bytes ;
   unsigned int i_blkbits ;
   blkcnt_t i_blocks ;
   unsigned long i_state ;
   struct mutex i_mutex ;
   unsigned long dirtied_when ;
   unsigned long dirtied_time_when ;
   struct hlist_node i_hash ;
   struct list_head i_wb_list ;
   struct bdi_writeback *i_wb ;
   int i_wb_frn_winner ;
   u16 i_wb_frn_avg_time ;
   u16 i_wb_frn_history ;
   struct list_head i_lru ;
   struct list_head i_sb_list ;
   union __anonunion_256 __anonCompField_inode_82 ;
   u64 i_version ;
   atomic_t i_count ;
   atomic_t i_dio_count ;
   atomic_t i_writecount ;
   atomic_t i_readcount ;
   struct file_operations const *i_fop ;
   struct file_lock_context *i_flctx ;
   struct address_space i_data ;
   struct list_head i_devices ;
   union __anonunion_257 __anonCompField_inode_83 ;
   __u32 i_generation ;
   __u32 i_fsnotify_mask ;
   struct hlist_head i_fsnotify_marks ;
   void *i_private ;
};

#line 807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fown_struct {
   rwlock_t lock ;
   struct pid *pid ;
   enum pid_type pid_type ;
   kuid_t uid ;
   kuid_t euid ;
   int signum ;
};

#line 815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_ra_state {
   unsigned long start ;
   unsigned int size ;
   unsigned int async_size ;
   unsigned int ra_pages ;
   unsigned int mmap_miss ;
   loff_t prev_pos ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
union __anonunion_f_u_258 {
   struct llist_node fu_llist ;
   struct callback_head fu_rcuhead ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file {
   union __anonunion_f_u_258 f_u ;
   struct path f_path ;
   struct inode *f_inode ;
   struct file_operations const *f_op ;
   spinlock_t f_lock ;
   atomic_long_t f_count ;
   unsigned int f_flags ;
   fmode_t f_mode ;
   struct mutex f_pos_lock ;
   loff_t f_pos ;
   struct fown_struct f_owner ;
   struct cred const *f_cred ;
   struct file_ra_state f_ra ;
   u64 f_version ;
   void *f_security ;
   void *private_data ;
   struct list_head f_ep_links ;
   struct list_head f_tfile_llink ;
   struct address_space *f_mapping ;
};

#line 923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
typedef void *fl_owner_t;

#line 924 
struct file_lock;

#line 925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_operations {
   void (*fl_copy_lock)(struct file_lock *, struct file_lock *) ;
   void (*fl_release_private)(struct file_lock *) ;
};

#line 931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct lock_manager_operations {
   int (*lm_compare_owner)(struct file_lock *, struct file_lock *) ;
   unsigned long (*lm_owner_key)(struct file_lock *) ;
   fl_owner_t (*lm_get_owner)(fl_owner_t ) ;
   void (*lm_put_owner)(fl_owner_t ) ;
   void (*lm_notify)(struct file_lock *) ;
   int (*lm_grant)(struct file_lock *, int ) ;
   bool (*lm_break)(struct file_lock *) ;
   int (*lm_change)(struct file_lock *, int , struct list_head *) ;
   void (*lm_setup)(struct file_lock *, void **) ;
};

#line 952 
struct nlm_lockowner;

#line 953  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct nfs_lock_info {
   u32 state ;
   struct nlm_lockowner *owner ;
   struct list_head list ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_state;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct nfs4_lock_info {
   struct nfs4_lock_state *owner ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct __anonstruct_afs_260 {
   struct list_head link ;
   int state ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
union __anonunion_fl_u_259 {
   struct nfs_lock_info nfs_fl ;
   struct nfs4_lock_info nfs4_fl ;
   struct __anonstruct_afs_260 afs ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/nfs_fs_i.h"
struct file_lock {
   struct file_lock *fl_next ;
   struct list_head fl_list ;
   struct hlist_node fl_link ;
   struct list_head fl_block ;
   fl_owner_t fl_owner ;
   unsigned int fl_flags ;
   unsigned char fl_type ;
   unsigned int fl_pid ;
   int fl_link_cpu ;
   struct pid *fl_nspid ;
   wait_queue_head_t fl_wait ;
   struct file *fl_file ;
   loff_t fl_start ;
   loff_t fl_end ;
   struct fasync_struct *fl_fasync ;
   unsigned long fl_break_time ;
   unsigned long fl_downgrade_time ;
   struct file_lock_operations const *fl_ops ;
   struct lock_manager_operations const *fl_lmops ;
   union __anonunion_fl_u_259 fl_u ;
};

#line 1005  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_lock_context {
   spinlock_t flc_lock ;
   struct list_head flc_flock ;
   struct list_head flc_posix ;
   struct list_head flc_lease ;
};

#line 1221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fasync_struct {
   spinlock_t fa_lock ;
   int magic ;
   int fa_fd ;
   struct fasync_struct *fa_next ;
   struct file *fa_file ;
   struct callback_head fa_rcu ;
};

#line 1256  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct sb_writers {
   struct percpu_counter counter[3U] ;
   wait_queue_head_t wait ;
   int frozen ;
   wait_queue_head_t wait_unfrozen ;
   struct lockdep_map lock_map[3U] ;
};

#line 1287 
struct super_operations;

#line 1287 
struct xattr_handler;

#line 1287 
struct mtd_info;

#line 1287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_block {
   struct list_head s_list ;
   dev_t s_dev ;
   unsigned char s_blocksize_bits ;
   unsigned long s_blocksize ;
   loff_t s_maxbytes ;
   struct file_system_type *s_type ;
   struct super_operations const *s_op ;
   struct dquot_operations const *dq_op ;
   struct quotactl_ops const *s_qcop ;
   struct export_operations const *s_export_op ;
   unsigned long s_flags ;
   unsigned long s_iflags ;
   unsigned long s_magic ;
   struct dentry *s_root ;
   struct rw_semaphore s_umount ;
   int s_count ;
   atomic_t s_active ;
   void *s_security ;
   struct xattr_handler const **s_xattr ;
   struct list_head s_inodes ;
   struct hlist_bl_head s_anon ;
   struct list_head s_mounts ;
   struct block_device *s_bdev ;
   struct backing_dev_info *s_bdi ;
   struct mtd_info *s_mtd ;
   struct hlist_node s_instances ;
   unsigned int s_quota_types ;
   struct quota_info s_dquot ;
   struct sb_writers s_writers ;
   char s_id[32U] ;
   u8 s_uuid[16U] ;
   void *s_fs_info ;
   unsigned int s_max_links ;
   fmode_t s_mode ;
   u32 s_time_gran ;
   struct mutex s_vfs_rename_mutex ;
   char *s_subtype ;
   char *s_options ;
   struct dentry_operations const *s_d_op ;
   int cleancache_poolid ;
   struct shrinker s_shrink ;
   atomic_long_t s_remove_count ;
   int s_readonly_remount ;
   struct workqueue_struct *s_dio_done_wq ;
   struct hlist_head s_pins ;
   struct list_lru s_dentry_lru ;
   struct list_lru s_inode_lru ;
   struct callback_head rcu ;
   int s_stack_depth ;
};

#line 1526  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct fiemap_extent_info {
   unsigned int fi_flags ;
   unsigned int fi_extents_mapped ;
   unsigned int fi_extents_max ;
   struct fiemap_extent *fi_extents_start ;
};

#line 1540 
struct dir_context;

#line 1565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct dir_context {
   int (*actor)(struct dir_context *, char const *, int , loff_t , u64 , unsigned int ) ;
   loff_t pos ;
};

#line 1571 
struct block_device_operations;

#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_operations {
   struct module *owner ;
   loff_t (*llseek)(struct file *, loff_t , int ) ;
   ssize_t (*read)(struct file *, char *, size_t , loff_t *) ;
   ssize_t (*write)(struct file *, char const *, size_t , loff_t *) ;
   ssize_t (*read_iter)(struct kiocb *, struct iov_iter *) ;
   ssize_t (*write_iter)(struct kiocb *, struct iov_iter *) ;
   int (*iterate)(struct file *, struct dir_context *) ;
   unsigned int (*poll)(struct file *, struct poll_table_struct *) ;
   long (*unlocked_ioctl)(struct file *, unsigned int , unsigned long ) ;
   long (*compat_ioctl)(struct file *, unsigned int , unsigned long ) ;
   int (*mmap)(struct file *, struct vm_area_struct *) ;
   int (*mremap)(struct file *, struct vm_area_struct *) ;
   int (*open)(struct inode *, struct file *) ;
   int (*flush)(struct file *, fl_owner_t ) ;
   int (*release)(struct inode *, struct file *) ;
   int (*fsync)(struct file *, loff_t , loff_t , int ) ;
   int (*aio_fsync)(struct kiocb *, int ) ;
   int (*fasync)(int , struct file *, int ) ;
   int (*lock)(struct file *, int , struct file_lock *) ;
   ssize_t (*sendpage)(struct file *, struct page *, int , size_t , loff_t *, int ) ;
   unsigned long (*get_unmapped_area)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ) ;
   int (*check_flags)(int ) ;
   int (*flock)(struct file *, int , struct file_lock *) ;
   ssize_t (*splice_write)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ) ;
   ssize_t (*splice_read)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*setlease)(struct file *, long , struct file_lock **, void **) ;
   long (*fallocate)(struct file *, int , loff_t , loff_t ) ;
   void (*show_fdinfo)(struct seq_file *, struct file *) ;
};

#line 1633  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct inode_operations {
   struct dentry *(*lookup)(struct inode *, struct dentry *, unsigned int ) ;
   char const *(*follow_link)(struct dentry *, void **) ;
   int (*permission)(struct inode *, int ) ;
   struct posix_acl *(*get_acl)(struct inode *, int ) ;
   int (*readlink)(struct dentry *, char *, int ) ;
   void (*put_link)(struct inode *, void *) ;
   int (*create)(struct inode *, struct dentry *, umode_t , bool ) ;
   int (*link)(struct dentry *, struct inode *, struct dentry *) ;
   int (*unlink)(struct inode *, struct dentry *) ;
   int (*symlink)(struct inode *, struct dentry *, char const *) ;
   int (*mkdir)(struct inode *, struct dentry *, umode_t ) ;
   int (*rmdir)(struct inode *, struct dentry *) ;
   int (*mknod)(struct inode *, struct dentry *, umode_t , dev_t ) ;
   int (*rename)(struct inode *, struct dentry *, struct inode *, struct dentry *) ;
   int (*rename2)(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int ) ;
   int (*setattr)(struct dentry *, struct iattr *) ;
   int (*getattr)(struct vfsmount *, struct dentry *, struct kstat *) ;
   int (*setxattr)(struct dentry *, char const *, void const *, size_t , int ) ;
   ssize_t (*getxattr)(struct dentry *, char const *, void *, size_t ) ;
   ssize_t (*listxattr)(struct dentry *, char *, size_t ) ;
   int (*removexattr)(struct dentry *, char const *) ;
   int (*fiemap)(struct inode *, struct fiemap_extent_info *, u64 , u64 ) ;
   int (*update_time)(struct inode *, struct timespec *, int ) ;
   int (*atomic_open)(struct inode *, struct dentry *, struct file *, unsigned int , umode_t , int *) ;
   int (*tmpfile)(struct inode *, struct dentry *, umode_t ) ;
   int (*set_acl)(struct inode *, struct posix_acl *, int ) ;
};

#line 1687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct super_operations {
   struct inode *(*alloc_inode)(struct super_block *) ;
   void (*destroy_inode)(struct inode *) ;
   void (*dirty_inode)(struct inode *, int ) ;
   int (*write_inode)(struct inode *, struct writeback_control *) ;
   int (*drop_inode)(struct inode *) ;
   void (*evict_inode)(struct inode *) ;
   void (*put_super)(struct super_block *) ;
   int (*sync_fs)(struct super_block *, int ) ;
   int (*freeze_super)(struct super_block *) ;
   int (*freeze_fs)(struct super_block *) ;
   int (*thaw_super)(struct super_block *) ;
   int (*unfreeze_fs)(struct super_block *) ;
   int (*statfs)(struct dentry *, struct kstatfs *) ;
   int (*remount_fs)(struct super_block *, int *, char *) ;
   void (*umount_begin)(struct super_block *) ;
   int (*show_options)(struct seq_file *, struct dentry *) ;
   int (*show_devname)(struct seq_file *, struct dentry *) ;
   int (*show_path)(struct seq_file *, struct dentry *) ;
   int (*show_stats)(struct seq_file *, struct dentry *) ;
   ssize_t (*quota_read)(struct super_block *, int , char *, size_t , loff_t ) ;
   ssize_t (*quota_write)(struct super_block *, int , char const *, size_t , loff_t ) ;
   struct dquot **(*get_dquots)(struct inode *) ;
   int (*bdev_try_to_free_page)(struct super_block *, struct page *, gfp_t ) ;
   long (*nr_cached_objects)(struct super_block *, struct shrink_control *) ;
   long (*free_cached_objects)(struct super_block *, struct shrink_control *) ;
};

#line 1926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
struct file_system_type {
   char const *name ;
   int fs_flags ;
   struct dentry *(*mount)(struct file_system_type *, int , char const *, void *) ;
   void (*kill_sb)(struct super_block *) ;
   struct module *owner ;
   struct file_system_type *next ;
   struct hlist_head fs_supers ;
   struct lock_class_key s_lock_key ;
   struct lock_class_key s_umount_key ;
   struct lock_class_key s_vfs_rename_key ;
   struct lock_class_key s_writers_key[3U] ;
   struct lock_class_key i_lock_key ;
   struct lock_class_key i_mutex_key ;
   struct lock_class_key i_mutex_dir_key ;
};

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_time_t;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef s32 compat_long_t;

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
typedef u32 compat_uptr_t;

#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/compat.h"
struct compat_timespec {
   compat_time_t tv_sec ;
   s32 tv_nsec ;
};

#line 276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list {
   compat_uptr_t next ;
};

#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct compat_robust_list_head {
   struct compat_robust_list list ;
   compat_long_t futex_offset ;
   compat_uptr_t list_op_pending ;
};

#line 715  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compat.h"
struct ethtool_cmd {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertising ;
   __u16 speed ;
   __u8 duplex ;
   __u8 port ;
   __u8 phy_address ;
   __u8 transceiver ;
   __u8 autoneg ;
   __u8 mdio_support ;
   __u32 maxtxpkt ;
   __u32 maxrxpkt ;
   __u16 speed_hi ;
   __u8 eth_tp_mdix ;
   __u8 eth_tp_mdix_ctrl ;
   __u32 lp_advertising ;
   __u32 reserved[2U] ;
};

#line 125  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_drvinfo {
   __u32 cmd ;
   char driver[32U] ;
   char version[32U] ;
   char fw_version[32U] ;
   char bus_info[32U] ;
   char erom_version[32U] ;
   char reserved2[12U] ;
   __u32 n_priv_flags ;
   __u32 n_stats ;
   __u32 testinfo_len ;
   __u32 eedump_len ;
   __u32 regdump_len ;
};

#line 189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_wolinfo {
   __u32 cmd ;
   __u32 supported ;
   __u32 wolopts ;
   __u8 sopass[6U] ;
};

#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tunable {
   __u32 cmd ;
   __u32 id ;
   __u32 type_id ;
   __u32 len ;
   void *data[0U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_regs {
   __u32 cmd ;
   __u32 version ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eeprom {
   __u32 cmd ;
   __u32 magic ;
   __u32 offset ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_eee {
   __u32 cmd ;
   __u32 supported ;
   __u32 advertised ;
   __u32 lp_advertised ;
   __u32 eee_active ;
   __u32 eee_enabled ;
   __u32 tx_lpi_enabled ;
   __u32 tx_lpi_timer ;
   __u32 reserved[2U] ;
};

#line 322  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_modinfo {
   __u32 cmd ;
   __u32 type ;
   __u32 eeprom_len ;
   __u32 reserved[8U] ;
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_coalesce {
   __u32 cmd ;
   __u32 rx_coalesce_usecs ;
   __u32 rx_max_coalesced_frames ;
   __u32 rx_coalesce_usecs_irq ;
   __u32 rx_max_coalesced_frames_irq ;
   __u32 tx_coalesce_usecs ;
   __u32 tx_max_coalesced_frames ;
   __u32 tx_coalesce_usecs_irq ;
   __u32 tx_max_coalesced_frames_irq ;
   __u32 stats_block_coalesce_usecs ;
   __u32 use_adaptive_rx_coalesce ;
   __u32 use_adaptive_tx_coalesce ;
   __u32 pkt_rate_low ;
   __u32 rx_coalesce_usecs_low ;
   __u32 rx_max_coalesced_frames_low ;
   __u32 tx_coalesce_usecs_low ;
   __u32 tx_max_coalesced_frames_low ;
   __u32 pkt_rate_high ;
   __u32 rx_coalesce_usecs_high ;
   __u32 rx_max_coalesced_frames_high ;
   __u32 tx_coalesce_usecs_high ;
   __u32 tx_max_coalesced_frames_high ;
   __u32 rate_sample_interval ;
};

#line 438  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ringparam {
   __u32 cmd ;
   __u32 rx_max_pending ;
   __u32 rx_mini_max_pending ;
   __u32 rx_jumbo_max_pending ;
   __u32 tx_max_pending ;
   __u32 rx_pending ;
   __u32 rx_mini_pending ;
   __u32 rx_jumbo_pending ;
   __u32 tx_pending ;
};

#line 475  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_channels {
   __u32 cmd ;
   __u32 max_rx ;
   __u32 max_tx ;
   __u32 max_other ;
   __u32 max_combined ;
   __u32 rx_count ;
   __u32 tx_count ;
   __u32 other_count ;
   __u32 combined_count ;
};

#line 503  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_pauseparam {
   __u32 cmd ;
   __u32 autoneg ;
   __u32 rx_pause ;
   __u32 tx_pause ;
};

#line 605  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_test {
   __u32 cmd ;
   __u32 flags ;
   __u32 reserved ;
   __u32 len ;
   __u64 data[0U] ;
};

#line 637  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_stats {
   __u32 cmd ;
   __u32 n_stats ;
   __u64 data[0U] ;
};

#line 679  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_tcpip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be16 psrc ;
   __be16 pdst ;
   __u8 tos ;
};

#line 712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ah_espip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 spi ;
   __u8 tos ;
};

#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_usrip4_spec {
   __be32 ip4src ;
   __be32 ip4dst ;
   __be32 l4_4_bytes ;
   __u8 tos ;
   __u8 ip_ver ;
   __u8 proto ;
};

#line 748  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
union ethtool_flow_union {
   struct ethtool_tcpip4_spec tcp_ip4_spec ;
   struct ethtool_tcpip4_spec udp_ip4_spec ;
   struct ethtool_tcpip4_spec sctp_ip4_spec ;
   struct ethtool_ah_espip4_spec ah_ip4_spec ;
   struct ethtool_ah_espip4_spec esp_ip4_spec ;
   struct ethtool_usrip4_spec usr_ip4_spec ;
   struct ethhdr ether_spec ;
   __u8 hdata[52U] ;
};

#line 759  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flow_ext {
   __u8 padding[2U] ;
   unsigned char h_dest[6U] ;
   __be16 vlan_etype ;
   __be16 vlan_tci ;
   __be32 data[2U] ;
};

#line 778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rx_flow_spec {
   __u32 flow_type ;
   union ethtool_flow_union h_u ;
   struct ethtool_flow_ext h_ext ;
   union ethtool_flow_union m_u ;
   struct ethtool_flow_ext m_ext ;
   __u64 ring_cookie ;
   __u32 location ;
};

#line 828  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_rxnfc {
   __u32 cmd ;
   __u32 flow_type ;
   __u64 data ;
   struct ethtool_rx_flow_spec fs ;
   __u32 rule_cnt ;
   __u32 rule_locs[0U] ;
};

#line 999  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_flash {
   __u32 cmd ;
   __u32 region ;
   char data[128U] ;
};

#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_dump {
   __u32 cmd ;
   __u32 version ;
   __u32 flag ;
   __u32 len ;
   __u8 data[0U] ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
struct ethtool_ts_info {
   __u32 cmd ;
   __u32 so_timestamping ;
   __s32 phc_index ;
   __u32 tx_types ;
   __u32 tx_reserved[3U] ;
   __u32 rx_filters ;
   __u32 rx_reserved[3U] ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
enum ethtool_phys_id_state {
    ETHTOOL_ID_INACTIVE = 0,
    ETHTOOL_ID_ACTIVE = 1,
    ETHTOOL_ID_ON = 2,
    ETHTOOL_ID_OFF = 3
};

#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
struct ethtool_ops {
   int (*get_settings)(struct net_device *, struct ethtool_cmd *) ;
   int (*set_settings)(struct net_device *, struct ethtool_cmd *) ;
   void (*get_drvinfo)(struct net_device *, struct ethtool_drvinfo *) ;
   int (*get_regs_len)(struct net_device *) ;
   void (*get_regs)(struct net_device *, struct ethtool_regs *, void *) ;
   void (*get_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   int (*set_wol)(struct net_device *, struct ethtool_wolinfo *) ;
   u32 (*get_msglevel)(struct net_device *) ;
   void (*set_msglevel)(struct net_device *, u32 ) ;
   int (*nway_reset)(struct net_device *) ;
   u32 (*get_link)(struct net_device *) ;
   int (*get_eeprom_len)(struct net_device *) ;
   int (*get_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   int (*set_coalesce)(struct net_device *, struct ethtool_coalesce *) ;
   void (*get_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   int (*set_ringparam)(struct net_device *, struct ethtool_ringparam *) ;
   void (*get_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   int (*set_pauseparam)(struct net_device *, struct ethtool_pauseparam *) ;
   void (*self_test)(struct net_device *, struct ethtool_test *, u64 *) ;
   void (*get_strings)(struct net_device *, u32 , u8 *) ;
   int (*set_phys_id)(struct net_device *, enum ethtool_phys_id_state ) ;
   void (*get_ethtool_stats)(struct net_device *, struct ethtool_stats *, u64 *) ;
   int (*begin)(struct net_device *) ;
   void (*complete)(struct net_device *) ;
   u32 (*get_priv_flags)(struct net_device *) ;
   int (*set_priv_flags)(struct net_device *, u32 ) ;
   int (*get_sset_count)(struct net_device *, int ) ;
   int (*get_rxnfc)(struct net_device *, struct ethtool_rxnfc *, u32 *) ;
   int (*set_rxnfc)(struct net_device *, struct ethtool_rxnfc *) ;
   int (*flash_device)(struct net_device *, struct ethtool_flash *) ;
   int (*reset)(struct net_device *, u32 *) ;
   u32 (*get_rxfh_key_size)(struct net_device *) ;
   u32 (*get_rxfh_indir_size)(struct net_device *) ;
   int (*get_rxfh)(struct net_device *, u32 *, u8 *, u8 *) ;
   int (*set_rxfh)(struct net_device *, u32 const *, u8 const *, u8 const ) ;
   void (*get_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*set_channels)(struct net_device *, struct ethtool_channels *) ;
   int (*get_dump_flag)(struct net_device *, struct ethtool_dump *) ;
   int (*get_dump_data)(struct net_device *, struct ethtool_dump *, void *) ;
   int (*set_dump)(struct net_device *, struct ethtool_dump *) ;
   int (*get_ts_info)(struct net_device *, struct ethtool_ts_info *) ;
   int (*get_module_info)(struct net_device *, struct ethtool_modinfo *) ;
   int (*get_module_eeprom)(struct net_device *, struct ethtool_eeprom *, u8 *) ;
   int (*get_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*set_eee)(struct net_device *, struct ethtool_eee *) ;
   int (*get_tunable)(struct net_device *, struct ethtool_tunable const *, void *) ;
   int (*set_tunable)(struct net_device *, struct ethtool_tunable const *, void const *) ;
};

#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct prot_inuse;

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flow.h"
struct netns_core {
   struct ctl_table_header *sysctl_hdr ;
   int sysctl_somaxconn ;
   struct prot_inuse *inuse ;
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct u64_stats_sync {
   
};

#line 146  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/u64_stats_sync.h"
struct ipstats_mib {
   u64 mibs[36U] ;
   struct u64_stats_sync syncp ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmp_mib {
   unsigned long mibs[28U] ;
};

#line 67  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpmsg_mib {
   atomic_long_t mibs[512U] ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib {
   unsigned long mibs[6U] ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib {
   atomic_long_t mibs[512U] ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct tcp_mib {
   unsigned long mibs[16U] ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct udp_mib {
   unsigned long mibs[9U] ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_mib {
   unsigned long mibs[115U] ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct linux_xfrm_mib {
   unsigned long mibs[29U] ;
};

#line 118 
struct proc_dir_entry;

#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct netns_mib {
   struct tcp_mib *tcp_statistics ;
   struct ipstats_mib *ip_statistics ;
   struct linux_mib *net_statistics ;
   struct udp_mib *udp_statistics ;
   struct udp_mib *udplite_statistics ;
   struct icmp_mib *icmp_statistics ;
   struct icmpmsg_mib *icmpmsg_statistics ;
   struct proc_dir_entry *proc_net_devsnmp6 ;
   struct udp_mib *udp_stats_in6 ;
   struct udp_mib *udplite_stats_in6 ;
   struct ipstats_mib *ipv6_statistics ;
   struct icmpv6_mib *icmpv6_statistics ;
   struct icmpv6msg_mib *icmpv6msg_statistics ;
   struct linux_xfrm_mib *xfrm_statistics ;
};

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mib.h"
struct netns_unix {
   int sysctl_max_dgram_qlen ;
   struct ctl_table_header *ctl ;
};

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/unix.h"
struct netns_packet {
   struct mutex sklist_lock ;
   struct hlist_head sklist ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/packet.h"
struct netns_frags {
   struct percpu_counter mem ;
   int timeout ;
   int high_thresh ;
   int low_thresh ;
};

#line 184  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct ipv4_devconf;

#line 185 
struct fib_rules_ops;

#line 186 
struct fib_table;

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_frag.h"
struct local_ports {
   seqlock_t lock ;
   int range[2U] ;
   bool warned ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct ping_group_range {
   seqlock_t lock ;
   kgid_t range[2U] ;
};

#line 29 
struct xt_table;

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct netns_ipv4 {
   struct ctl_table_header *forw_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *ipv4_hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *xfrm4_hdr ;
   struct ipv4_devconf *devconf_all ;
   struct ipv4_devconf *devconf_dflt ;
   struct fib_rules_ops *rules_ops ;
   bool fib_has_custom_rules ;
   struct fib_table *fib_local ;
   struct fib_table *fib_main ;
   struct fib_table *fib_default ;
   int fib_num_tclassid_users ;
   struct hlist_head *fib_table_hash ;
   bool fib_offload_disabled ;
   struct sock *fibnl ;
   struct sock **icmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct inet_peer_base *peers ;
   struct sock **tcp_sk ;
   struct netns_frags frags ;
   struct xt_table *iptable_filter ;
   struct xt_table *iptable_mangle ;
   struct xt_table *iptable_raw ;
   struct xt_table *arptable_filter ;
   struct xt_table *iptable_security ;
   struct xt_table *nat_table ;
   int sysctl_icmp_echo_ignore_all ;
   int sysctl_icmp_echo_ignore_broadcasts ;
   int sysctl_icmp_ignore_bogus_error_responses ;
   int sysctl_icmp_ratelimit ;
   int sysctl_icmp_ratemask ;
   int sysctl_icmp_errors_use_inbound_ifaddr ;
   struct local_ports ip_local_ports ;
   int sysctl_tcp_ecn ;
   int sysctl_tcp_ecn_fallback ;
   int sysctl_ip_no_pmtu_disc ;
   int sysctl_ip_fwd_use_pmtu ;
   int sysctl_ip_nonlocal_bind ;
   int sysctl_fwmark_reflect ;
   int sysctl_tcp_fwmark_accept ;
   int sysctl_tcp_mtu_probing ;
   int sysctl_tcp_base_mss ;
   int sysctl_tcp_probe_threshold ;
   u32 sysctl_tcp_probe_interval ;
   struct ping_group_range ping_group_range ;
   atomic_t dev_addr_genid ;
   unsigned long *sysctl_local_reserved_ports ;
   struct list_head mr_tables ;
   struct fib_rules_ops *mr_rules_ops ;
   atomic_t rt_genid ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv4.h"
struct dst_ops {
   unsigned short family ;
   unsigned int gc_thresh ;
   int (*gc)(struct dst_ops *) ;
   struct dst_entry *(*check)(struct dst_entry *, __u32 ) ;
   unsigned int (*default_advmss)(struct dst_entry const *) ;
   unsigned int (*mtu)(struct dst_entry const *) ;
   u32 *(*cow_metrics)(struct dst_entry *, unsigned long ) ;
   void (*destroy)(struct dst_entry *) ;
   void (*ifdown)(struct dst_entry *, struct net_device *, int ) ;
   struct dst_entry *(*negative_advice)(struct dst_entry *) ;
   void (*link_failure)(struct sk_buff *) ;
   void (*update_pmtu)(struct dst_entry *, struct sock *, struct sk_buff *, u32 ) ;
   void (*redirect)(struct dst_entry *, struct sock *, struct sk_buff *) ;
   int (*local_out)(struct sk_buff *) ;
   struct neighbour *(*neigh_lookup)(struct dst_entry const *, struct sk_buff *, void const *) ;
   struct kmem_cache *kmem_cachep ;
   struct percpu_counter pcpuc_entries ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dst_ops.h"
struct netns_sysctl_ipv6 {
   struct ctl_table_header *hdr ;
   struct ctl_table_header *route_hdr ;
   struct ctl_table_header *icmp_hdr ;
   struct ctl_table_header *frags_hdr ;
   struct ctl_table_header *xfrm6_hdr ;
   int bindv6only ;
   int flush_delay ;
   int ip6_rt_max_size ;
   int ip6_rt_gc_min_interval ;
   int ip6_rt_gc_timeout ;
   int ip6_rt_gc_interval ;
   int ip6_rt_gc_elasticity ;
   int ip6_rt_mtu_expires ;
   int ip6_rt_min_advmss ;
   int flowlabel_consistency ;
   int auto_flowlabels ;
   int icmpv6_time ;
   int anycast_src_echo_reply ;
   int fwmark_reflect ;
   int idgen_retries ;
   int idgen_delay ;
   int flowlabel_state_ranges ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct rt6_info;

#line 39 
struct rt6_statistics;

#line 39 
struct fib6_table;

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_ipv6 {
   struct netns_sysctl_ipv6 sysctl ;
   struct ipv6_devconf *devconf_all ;
   struct ipv6_devconf *devconf_dflt ;
   struct inet_peer_base *peers ;
   struct netns_frags frags ;
   struct xt_table *ip6table_filter ;
   struct xt_table *ip6table_mangle ;
   struct xt_table *ip6table_raw ;
   struct xt_table *ip6table_security ;
   struct xt_table *ip6table_nat ;
   struct rt6_info *ip6_null_entry ;
   struct rt6_statistics *rt6_stats ;
   struct timer_list ip6_fib_timer ;
   struct hlist_head *fib_table_hash ;
   struct fib6_table *fib6_main_tbl ;
   struct dst_ops ip6_dst_ops ;
   unsigned int ip6_rt_gc_expire ;
   unsigned long ip6_rt_last_gc ;
   struct rt6_info *ip6_prohibit_entry ;
   struct rt6_info *ip6_blk_hole_entry ;
   struct fib6_table *fib6_local_tbl ;
   struct fib_rules_ops *fib6_rules_ops ;
   struct sock **icmp_sk ;
   struct sock *ndisc_sk ;
   struct sock *tcp_sk ;
   struct sock *igmp_sk ;
   struct sock *mc_autojoin_sk ;
   struct list_head mr6_tables ;
   struct fib_rules_ops *mr6_rules_ops ;
   atomic_t dev_addr_genid ;
   atomic_t fib6_sernum ;
};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_nf_frag {
   struct netns_sysctl_ipv6 sysctl ;
   struct netns_frags frags ;
};

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ipv6.h"
struct netns_sysctl_lowpan {
   struct ctl_table_header *frags_hdr ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_ieee802154_lowpan {
   struct netns_sysctl_lowpan sysctl ;
   struct netns_frags frags ;
};

#line 20 
struct sctp_mib;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/ieee802154_6lowpan.h"
struct netns_sctp {
   struct sctp_mib *sctp_statistics ;
   struct proc_dir_entry *proc_net_sctp ;
   struct ctl_table_header *sysctl_header ;
   struct sock *ctl_sock ;
   struct list_head local_addr_list ;
   struct list_head addr_waitq ;
   struct timer_list addr_wq_timer ;
   struct list_head auto_asconf_splist ;
   spinlock_t addr_wq_lock ;
   spinlock_t local_addr_lock ;
   unsigned int rto_initial ;
   unsigned int rto_min ;
   unsigned int rto_max ;
   int rto_alpha ;
   int rto_beta ;
   int max_burst ;
   int cookie_preserve_enable ;
   char *sctp_hmac_alg ;
   unsigned int valid_cookie_life ;
   unsigned int sack_timeout ;
   unsigned int hb_interval ;
   int max_retrans_association ;
   int max_retrans_path ;
   int max_retrans_init ;
   int pf_retrans ;
   int sndbuf_policy ;
   int rcvbuf_policy ;
   int default_auto_asconf ;
   int addip_enable ;
   int addip_noauth ;
   int prsctp_enable ;
   int auth_enable ;
   int scope_policy ;
   int rwnd_upd_shift ;
   unsigned long max_autoclose ;
};

#line 134  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/sctp.h"
struct netns_dccp {
   struct sock *v4_ctl_sk ;
   struct sock *v6_ctl_sk ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct nf_logger;

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netfilter.h"
struct netns_nf {
   struct proc_dir_entry *proc_netfilter ;
   struct nf_logger const *nf_loggers[13U] ;
   struct ctl_table_header *nf_log_dir_header ;
};

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct ebt_table;

#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/netfilter.h"
struct netns_xt {
   struct list_head tables[13U] ;
   bool notrack_deprecated_warning ;
   bool clusterip_deprecated_warning ;
   struct ebt_table *broute_table ;
   struct ebt_table *frame_filter ;
   struct ebt_table *frame_nat ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node;

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_head {
   struct hlist_nulls_node *first ;
};

#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/x_tables.h"
struct hlist_nulls_node {
   struct hlist_nulls_node *next ;
   struct hlist_nulls_node **pprev ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netfilter/nf_conntrack_tcp.h"
struct nf_proto_net {
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
   struct ctl_table_header *ctl_compat_header ;
   struct ctl_table *ctl_compat_table ;
   unsigned int users ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_generic_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_tcp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[14U] ;
   unsigned int tcp_loose ;
   unsigned int tcp_be_liberal ;
   unsigned int tcp_max_retrans ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_udp_net {
   struct nf_proto_net pn ;
   unsigned int timeouts[2U] ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_icmp_net {
   struct nf_proto_net pn ;
   unsigned int timeout ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct nf_ip_net {
   struct nf_generic_net generic ;
   struct nf_tcp_net tcp ;
   struct nf_udp_net udp ;
   struct nf_icmp_net icmp ;
   struct nf_icmp_net icmpv6 ;
   struct ctl_table_header *ctl_table_header ;
   struct ctl_table *ctl_table ;
};

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct ct_pcpu {
   spinlock_t lock ;
   struct hlist_nulls_head unconfirmed ;
   struct hlist_nulls_head dying ;
};

#line 72 
struct ip_conntrack_stat;

#line 72 
struct nf_ct_event_notifier;

#line 72 
struct nf_exp_event_notifier;

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_ct {
   atomic_t count ;
   unsigned int expect_count ;
   struct delayed_work ecache_dwork ;
   bool ecache_dwork_pending ;
   struct ctl_table_header *sysctl_header ;
   struct ctl_table_header *acct_sysctl_header ;
   struct ctl_table_header *tstamp_sysctl_header ;
   struct ctl_table_header *event_sysctl_header ;
   struct ctl_table_header *helper_sysctl_header ;
   char *slabname ;
   unsigned int sysctl_log_invalid ;
   int sysctl_events ;
   int sysctl_acct ;
   int sysctl_auto_assign_helper ;
   bool auto_assign_helper_warned ;
   int sysctl_tstamp ;
   int sysctl_checksum ;
   unsigned int htable_size ;
   seqcount_t generation ;
   struct kmem_cache *nf_conntrack_cachep ;
   struct hlist_nulls_head *hash ;
   struct hlist_head *expect_hash ;
   struct ct_pcpu *pcpu_lists ;
   struct ip_conntrack_stat *stat ;
   struct nf_ct_event_notifier *nf_conntrack_event_cb ;
   struct nf_exp_event_notifier *nf_expect_event_cb ;
   struct nf_ip_net nf_ct_proto ;
   unsigned int labels_used ;
   u8 label_words ;
   struct hlist_head *nat_bysource ;
   unsigned int nat_htable_size ;
};

#line 114 
struct nft_af_info;

#line 115  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/conntrack.h"
struct netns_nftables {
   struct list_head af_info ;
   struct list_head commit_list ;
   struct nft_af_info *ipv4 ;
   struct nft_af_info *ipv6 ;
   struct nft_af_info *inet ;
   struct nft_af_info *arp ;
   struct nft_af_info *bridge ;
   struct nft_af_info *netdev ;
   unsigned int base_seq ;
   u8 gencursor ;
};

#line 465  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct tasklet_struct {
   struct tasklet_struct *next ;
   unsigned long state ;
   atomic_t count ;
   void (*func)(unsigned long ) ;
   unsigned long data ;
};

#line 672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
struct flow_cache_percpu {
   struct hlist_head *hash_table ;
   int hash_count ;
   u32 hash_rnd ;
   int hash_rnd_recalc ;
   struct tasklet_struct flush_tasklet ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct flow_cache {
   u32 hash_shift ;
   struct flow_cache_percpu *percpu ;
   struct notifier_block hotcpu_notifier ;
   int low_watermark ;
   int high_watermark ;
   struct timer_list rnd_timer ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/flowcache.h"
struct xfrm_policy_hash {
   struct hlist_head *table ;
   unsigned int hmask ;
   u8 dbits4 ;
   u8 sbits4 ;
   u8 dbits6 ;
   u8 sbits6 ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct xfrm_policy_hthresh {
   struct work_struct work ;
   seqlock_t lock ;
   u8 lbits4 ;
   u8 rbits4 ;
   u8 lbits6 ;
   u8 rbits6 ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_xfrm {
   struct list_head state_all ;
   struct hlist_head *state_bydst ;
   struct hlist_head *state_bysrc ;
   struct hlist_head *state_byspi ;
   unsigned int state_hmask ;
   unsigned int state_num ;
   struct work_struct state_hash_work ;
   struct hlist_head state_gc_list ;
   struct work_struct state_gc_work ;
   struct list_head policy_all ;
   struct hlist_head *policy_byidx ;
   unsigned int policy_idx_hmask ;
   struct hlist_head policy_inexact[3U] ;
   struct xfrm_policy_hash policy_bydst[3U] ;
   unsigned int policy_count[6U] ;
   struct work_struct policy_hash_work ;
   struct xfrm_policy_hthresh policy_hthresh ;
   struct sock *nlsk ;
   struct sock *nlsk_stash ;
   u32 sysctl_aevent_etime ;
   u32 sysctl_aevent_rseqth ;
   int sysctl_larval_drop ;
   u32 sysctl_acq_expires ;
   struct ctl_table_header *sysctl_hdr ;
   struct dst_ops xfrm4_dst_ops ;
   struct dst_ops xfrm6_dst_ops ;
   spinlock_t xfrm_state_lock ;
   rwlock_t xfrm_policy_lock ;
   struct mutex xfrm_cfg_mutex ;
   struct flow_cache flow_cache_global ;
   atomic_t flow_cache_genid ;
   struct list_head flow_cache_gc_list ;
   spinlock_t flow_cache_gc_lock ;
   struct work_struct flow_cache_gc_work ;
   struct work_struct flow_cache_flush_work ;
   struct mutex flow_flush_sem ;
};

#line 88 
struct mpls_route;

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/xfrm.h"
struct netns_mpls {
   size_t platform_labels ;
   struct mpls_route **platform_label ;
   struct ctl_table_header *ctl ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct proc_ns_operations;

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/mpls.h"
struct ns_common {
   atomic_long_t stashed ;
   struct proc_ns_operations const *ops ;
   unsigned int inum ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net_generic;

#line 12 
struct netns_ipvs;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ns_common.h"
struct net {
   atomic_t passive ;
   atomic_t count ;
   spinlock_t rules_mod_lock ;
   atomic64_t cookie_gen ;
   struct list_head list ;
   struct list_head cleanup_list ;
   struct list_head exit_list ;
   struct user_namespace *user_ns ;
   spinlock_t nsid_lock ;
   struct idr netns_ids ;
   struct ns_common ns ;
   struct proc_dir_entry *proc_net ;
   struct proc_dir_entry *proc_net_stat ;
   struct ctl_table_set sysctls ;
   struct sock *rtnl ;
   struct sock *genl_sock ;
   struct list_head dev_base_head ;
   struct hlist_head *dev_name_head ;
   struct hlist_head *dev_index_head ;
   unsigned int dev_base_seq ;
   int ifindex ;
   unsigned int dev_unreg_count ;
   struct list_head rules_ops ;
   struct net_device *loopback_dev ;
   struct netns_core core ;
   struct netns_mib mib ;
   struct netns_packet packet ;
   struct netns_unix unx ;
   struct netns_ipv4 ipv4 ;
   struct netns_ipv6 ipv6 ;
   struct netns_ieee802154_lowpan ieee802154_lowpan ;
   struct netns_sctp sctp ;
   struct netns_dccp dccp ;
   struct netns_nf nf ;
   struct netns_xt xt ;
   struct netns_ct ct ;
   struct netns_nftables nft ;
   struct netns_nf_frag nf_frag ;
   struct sock *nfnl ;
   struct sock *nfnl_stash ;
   struct sk_buff_head wext_nlevents ;
   struct net_generic *gen ;
   struct netns_xfrm xfrm ;
   struct netns_ipvs *ipvs ;
   struct netns_mpls mpls ;
   struct sock *diag_nlsk ;
   atomic_t fnhe_genid ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
struct __anonstruct_possible_net_t_291 {
   struct net *net ;
};

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/net_namespace.h"
typedef struct __anonstruct_possible_net_t_291 possible_net_t;

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
typedef unsigned long kernel_ulong_t;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct pci_device_id {
   __u32 vendor ;
   __u32 device ;
   __u32 subvendor ;
   __u32 subdevice ;
   __u32 class ;
   __u32 class_mask ;
   kernel_ulong_t driver_data ;
};

#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct acpi_device_id {
   __u8 id[9U] ;
   kernel_ulong_t driver_data ;
   __u32 cls ;
   __u32 cls_msk ;
};

#line 221  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct of_device_id {
   char name[32U] ;
   char type[32U] ;
   char compatible[128U] ;
   void const *data ;
};

#line 652 
enum fwnode_type {
    FWNODE_INVALID = 0,
    FWNODE_OF = 1,
    FWNODE_ACPI = 2,
    FWNODE_PDATA = 3
};

#line 659  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mod_devicetable.h"
struct fwnode_handle {
   enum fwnode_type type ;
   struct fwnode_handle *secondary ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
typedef u32 phandle;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct property {
   char *name ;
   int length ;
   void *value ;
   struct property *next ;
   unsigned long _flags ;
   unsigned int unique_id ;
   struct bin_attribute attr ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct device_node {
   char const *name ;
   char const *type ;
   phandle phandle ;
   char const *full_name ;
   struct fwnode_handle fwnode ;
   struct property *properties ;
   struct property *deadprops ;
   struct device_node *parent ;
   struct device_node *child ;
   struct device_node *sibling ;
   struct kobject kobj ;
   unsigned long _flags ;
   void *data ;
};

#line 338  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mii.h"
enum ldv_27982 {
    PHY_INTERFACE_MODE_NA = 0,
    PHY_INTERFACE_MODE_MII = 1,
    PHY_INTERFACE_MODE_GMII = 2,
    PHY_INTERFACE_MODE_SGMII = 3,
    PHY_INTERFACE_MODE_TBI = 4,
    PHY_INTERFACE_MODE_REVMII = 5,
    PHY_INTERFACE_MODE_RMII = 6,
    PHY_INTERFACE_MODE_RGMII = 7,
    PHY_INTERFACE_MODE_RGMII_ID = 8,
    PHY_INTERFACE_MODE_RGMII_RXID = 9,
    PHY_INTERFACE_MODE_RGMII_TXID = 10,
    PHY_INTERFACE_MODE_RTBI = 11,
    PHY_INTERFACE_MODE_SMII = 12,
    PHY_INTERFACE_MODE_XGMII = 13,
    PHY_INTERFACE_MODE_MOCA = 14,
    PHY_INTERFACE_MODE_QSGMII = 15,
    PHY_INTERFACE_MODE_MAX = 16
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
typedef enum ldv_27982 phy_interface_t;

#line 126 
enum ldv_28035 {
    MDIOBUS_ALLOCATED = 1,
    MDIOBUS_REGISTERED = 2,
    MDIOBUS_UNREGISTERED = 3,
    MDIOBUS_RELEASED = 4
};

#line 133 
struct phy_device;

#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct mii_bus {
   char const *name ;
   char id[17U] ;
   void *priv ;
   int (*read)(struct mii_bus *, int , int ) ;
   int (*write)(struct mii_bus *, int , int , u16 ) ;
   int (*reset)(struct mii_bus *) ;
   struct mutex mdio_lock ;
   struct device *parent ;
   enum ldv_28035 state ;
   struct device dev ;
   struct phy_device *phy_map[32U] ;
   u32 phy_mask ;
   u32 phy_ignore_ta_mask ;
   int *irq ;
};

#line 214 
enum phy_state {
    PHY_DOWN = 0,
    PHY_STARTING = 1,
    PHY_READY = 2,
    PHY_PENDING = 3,
    PHY_UP = 4,
    PHY_AN = 5,
    PHY_RUNNING = 6,
    PHY_NOLINK = 7,
    PHY_FORCING = 8,
    PHY_CHANGELINK = 9,
    PHY_HALTED = 10,
    PHY_RESUMING = 11
};

#line 229  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_c45_device_ids {
   u32 devices_in_package ;
   u32 device_ids[8U] ;
};

#line 323 
struct phy_driver;

#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_device {
   struct phy_driver *drv ;
   struct mii_bus *bus ;
   struct device dev ;
   u32 phy_id ;
   struct phy_c45_device_ids c45_ids ;
   bool is_c45 ;
   bool is_internal ;
   bool has_fixups ;
   bool suspended ;
   enum phy_state state ;
   u32 dev_flags ;
   phy_interface_t interface ;
   int addr ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
   int link ;
   u32 interrupts ;
   u32 supported ;
   u32 advertising ;
   u32 lp_advertising ;
   int autoneg ;
   int link_timeout ;
   int irq ;
   void *priv ;
   struct work_struct phy_queue ;
   struct delayed_work state_queue ;
   atomic_t irq_disable ;
   struct mutex lock ;
   struct net_device *attached_dev ;
   void (*adjust_link)(struct net_device *) ;
};

#line 429  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct phy_driver {
   u32 phy_id ;
   char *name ;
   unsigned int phy_id_mask ;
   u32 features ;
   u32 flags ;
   void const *driver_data ;
   int (*soft_reset)(struct phy_device *) ;
   int (*config_init)(struct phy_device *) ;
   int (*probe)(struct phy_device *) ;
   int (*suspend)(struct phy_device *) ;
   int (*resume)(struct phy_device *) ;
   int (*config_aneg)(struct phy_device *) ;
   int (*aneg_done)(struct phy_device *) ;
   int (*read_status)(struct phy_device *) ;
   int (*ack_interrupt)(struct phy_device *) ;
   int (*config_intr)(struct phy_device *) ;
   int (*did_interrupt)(struct phy_device *) ;
   void (*remove)(struct phy_device *) ;
   int (*match_phy_device)(struct phy_device *) ;
   int (*ts_info)(struct phy_device *, struct ethtool_ts_info *) ;
   int (*hwtstamp)(struct phy_device *, struct ifreq *) ;
   bool (*rxtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   void (*txtstamp)(struct phy_device *, struct sk_buff *, int ) ;
   int (*set_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*get_wol)(struct phy_device *, struct ethtool_wolinfo *) ;
   void (*link_change_notify)(struct phy_device *) ;
   int (*read_mmd_indirect)(struct phy_device *, int , int , int ) ;
   void (*write_mmd_indirect)(struct phy_device *, int , int , int , u32 ) ;
   int (*module_info)(struct phy_device *, struct ethtool_modinfo *) ;
   int (*module_eeprom)(struct phy_device *, struct ethtool_eeprom *, u8 *) ;
   struct device_driver driver ;
};

#line 803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy.h"
struct fixed_phy_status {
   int link ;
   int speed ;
   int duplex ;
   int pause ;
   int asym_pause ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
enum dsa_tag_protocol {
    DSA_TAG_PROTO_NONE = 0,
    DSA_TAG_PROTO_DSA = 1,
    DSA_TAG_PROTO_TRAILER = 2,
    DSA_TAG_PROTO_EDSA = 3,
    DSA_TAG_PROTO_BRCM = 4
};

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/phy_fixed.h"
struct dsa_chip_data {
   struct device *host_dev ;
   int sw_addr ;
   int eeprom_len ;
   struct device_node *of_node ;
   char *port_names[12U] ;
   struct device_node *port_dn[12U] ;
   s8 *rtable ;
};

#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_platform_data {
   struct device *netdev ;
   struct net_device *of_netdev ;
   int nr_chips ;
   struct dsa_chip_data *chip ;
};

#line 84 
struct packet_type;

#line 85 
struct dsa_switch;

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_tree {
   struct dsa_platform_data *pd ;
   struct net_device *master_netdev ;
   int (*rcv)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   enum dsa_tag_protocol tag_protocol ;
   s8 cpu_switch ;
   s8 cpu_port ;
   int link_poll_needed ;
   struct work_struct link_poll_work ;
   struct timer_list link_poll_timer ;
   struct dsa_switch *ds[4U] ;
};

#line 123 
struct dsa_switch_driver;

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch {
   struct dsa_switch_tree *dst ;
   int index ;
   enum dsa_tag_protocol tag_protocol ;
   struct dsa_chip_data *pd ;
   struct dsa_switch_driver *drv ;
   struct device *master_dev ;
   char hwmon_name[24U] ;
   struct device *hwmon_dev ;
   u32 dsa_port_mask ;
   u32 phys_port_mask ;
   u32 phys_mii_mask ;
   struct mii_bus *slave_mii_bus ;
   struct net_device *ports[12U] ;
};

#line 194  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct dsa_switch_driver {
   struct list_head list ;
   enum dsa_tag_protocol tag_protocol ;
   int priv_size ;
   char *(*probe)(struct device *, int ) ;
   int (*setup)(struct dsa_switch *) ;
   int (*set_addr)(struct dsa_switch *, u8 *) ;
   u32 (*get_phy_flags)(struct dsa_switch *, int ) ;
   int (*phy_read)(struct dsa_switch *, int , int ) ;
   int (*phy_write)(struct dsa_switch *, int , int , u16 ) ;
   void (*poll_link)(struct dsa_switch *) ;
   void (*adjust_link)(struct dsa_switch *, int , struct phy_device *) ;
   void (*fixed_link_update)(struct dsa_switch *, int , struct fixed_phy_status *) ;
   void (*get_strings)(struct dsa_switch *, int , uint8_t *) ;
   void (*get_ethtool_stats)(struct dsa_switch *, int , uint64_t *) ;
   int (*get_sset_count)(struct dsa_switch *) ;
   void (*get_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*set_wol)(struct dsa_switch *, int , struct ethtool_wolinfo *) ;
   int (*suspend)(struct dsa_switch *) ;
   int (*resume)(struct dsa_switch *) ;
   int (*port_enable)(struct dsa_switch *, int , struct phy_device *) ;
   void (*port_disable)(struct dsa_switch *, int , struct phy_device *) ;
   int (*set_eee)(struct dsa_switch *, int , struct phy_device *, struct ethtool_eee *) ;
   int (*get_eee)(struct dsa_switch *, int , struct ethtool_eee *) ;
   int (*get_temp)(struct dsa_switch *, int *) ;
   int (*get_temp_limit)(struct dsa_switch *, int *) ;
   int (*set_temp_limit)(struct dsa_switch *, int ) ;
   int (*get_temp_alarm)(struct dsa_switch *, bool *) ;
   int (*get_eeprom_len)(struct dsa_switch *) ;
   int (*get_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*set_eeprom)(struct dsa_switch *, struct ethtool_eeprom *, u8 *) ;
   int (*get_regs_len)(struct dsa_switch *, int ) ;
   void (*get_regs)(struct dsa_switch *, int , struct ethtool_regs *, void *) ;
   int (*port_join_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_leave_bridge)(struct dsa_switch *, int , u32 ) ;
   int (*port_stp_update)(struct dsa_switch *, int , u8 ) ;
   int (*fdb_add)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_del)(struct dsa_switch *, int , unsigned char const *, u16 ) ;
   int (*fdb_getnext)(struct dsa_switch *, int , unsigned char *, bool *) ;
};

#line 320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dsa.h"
struct ieee_ets {
   __u8 willing ;
   __u8 ets_cap ;
   __u8 cbs ;
   __u8 tc_tx_bw[8U] ;
   __u8 tc_rx_bw[8U] ;
   __u8 tc_tsa[8U] ;
   __u8 prio_tc[8U] ;
   __u8 tc_reco_bw[8U] ;
   __u8 tc_reco_tsa[8U] ;
   __u8 reco_prio_tc[8U] ;
};

#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_maxrate {
   __u64 tc_maxrate[8U] ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn {
   __u8 rpg_enable[8U] ;
   __u32 rppp_max_rps[8U] ;
   __u32 rpg_time_reset[8U] ;
   __u32 rpg_byte_reset[8U] ;
   __u32 rpg_threshold[8U] ;
   __u32 rpg_max_rate[8U] ;
   __u32 rpg_ai_rate[8U] ;
   __u32 rpg_hai_rate[8U] ;
   __u32 rpg_gd[8U] ;
   __u32 rpg_min_dec_fac[8U] ;
   __u32 rpg_min_rate[8U] ;
   __u32 cndd_state_machine[8U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_qcn_stats {
   __u64 rppp_rp_centiseconds[8U] ;
   __u32 rppp_created_rps[8U] ;
};

#line 144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct ieee_pfc {
   __u8 pfc_cap ;
   __u8 pfc_en ;
   __u8 mbc ;
   __u16 delay ;
   __u64 requests[8U] ;
   __u64 indications[8U] ;
};

#line 164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pg {
   __u8 willing ;
   __u8 error ;
   __u8 pg_en ;
   __u8 tcs_supported ;
   __u8 pg_bw[8U] ;
   __u8 prio_pg[8U] ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct cee_pfc {
   __u8 willing ;
   __u8 error ;
   __u8 pfc_en ;
   __u8 tcs_supported ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_app {
   __u8 selector ;
   __u8 priority ;
   __u16 protocol ;
};

#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/dcbnl.h"
struct dcb_peer_app_info {
   __u8 willing ;
   __u8 error ;
};

#line 40  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct dcbnl_rtnl_ops {
   int (*ieee_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_setets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_getmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_setmaxrate)(struct net_device *, struct ieee_maxrate *) ;
   int (*ieee_getqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_setqcn)(struct net_device *, struct ieee_qcn *) ;
   int (*ieee_getqcnstats)(struct net_device *, struct ieee_qcn_stats *) ;
   int (*ieee_getpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_setpfc)(struct net_device *, struct ieee_pfc *) ;
   int (*ieee_getapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_setapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_delapp)(struct net_device *, struct dcb_app *) ;
   int (*ieee_peer_getets)(struct net_device *, struct ieee_ets *) ;
   int (*ieee_peer_getpfc)(struct net_device *, struct ieee_pfc *) ;
   u8 (*getstate)(struct net_device *) ;
   u8 (*setstate)(struct net_device *, u8 ) ;
   void (*getpermhwaddr)(struct net_device *, u8 *) ;
   void (*setpgtccfgtx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgtx)(struct net_device *, int , u8 ) ;
   void (*setpgtccfgrx)(struct net_device *, int , u8 , u8 , u8 , u8 ) ;
   void (*setpgbwgcfgrx)(struct net_device *, int , u8 ) ;
   void (*getpgtccfgtx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgtx)(struct net_device *, int , u8 *) ;
   void (*getpgtccfgrx)(struct net_device *, int , u8 *, u8 *, u8 *, u8 *) ;
   void (*getpgbwgcfgrx)(struct net_device *, int , u8 *) ;
   void (*setpfccfg)(struct net_device *, int , u8 ) ;
   void (*getpfccfg)(struct net_device *, int , u8 *) ;
   u8 (*setall)(struct net_device *) ;
   u8 (*getcap)(struct net_device *, int , u8 *) ;
   int (*getnumtcs)(struct net_device *, int , u8 *) ;
   int (*setnumtcs)(struct net_device *, int , u8 ) ;
   u8 (*getpfcstate)(struct net_device *) ;
   void (*setpfcstate)(struct net_device *, u8 ) ;
   void (*getbcncfg)(struct net_device *, int , u32 *) ;
   void (*setbcncfg)(struct net_device *, int , u32 ) ;
   void (*getbcnrp)(struct net_device *, int , u8 *) ;
   void (*setbcnrp)(struct net_device *, int , u8 ) ;
   int (*setapp)(struct net_device *, u8 , u16 , u8 ) ;
   int (*getapp)(struct net_device *, u8 , u16 ) ;
   u8 (*getfeatcfg)(struct net_device *, int , u8 *) ;
   u8 (*setfeatcfg)(struct net_device *, int , u8 ) ;
   u8 (*getdcbx)(struct net_device *) ;
   u8 (*setdcbx)(struct net_device *, u8 ) ;
   int (*peer_getappinfo)(struct net_device *, struct dcb_peer_app_info *, u16 *) ;
   int (*peer_getapptable)(struct net_device *, struct dcb_app *) ;
   int (*cee_peer_getpg)(struct net_device *, struct cee_pg *) ;
   int (*cee_peer_getpfc)(struct net_device *, struct cee_pfc *) ;
};

#line 105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
struct taskstats {
   __u16 version ;
   __u32 ac_exitcode ;
   __u8 ac_flag ;
   __u8 ac_nice ;
   __u64 cpu_count ;
   __u64 cpu_delay_total ;
   __u64 blkio_count ;
   __u64 blkio_delay_total ;
   __u64 swapin_count ;
   __u64 swapin_delay_total ;
   __u64 cpu_run_real_total ;
   __u64 cpu_run_virtual_total ;
   char ac_comm[32U] ;
   __u8 ac_sched ;
   __u8 ac_pad[3U] ;
   __u32 ac_uid ;
   __u32 ac_gid ;
   __u32 ac_pid ;
   __u32 ac_ppid ;
   __u32 ac_btime ;
   __u64 ac_etime ;
   __u64 ac_utime ;
   __u64 ac_stime ;
   __u64 ac_minflt ;
   __u64 ac_majflt ;
   __u64 coremem ;
   __u64 virtmem ;
   __u64 hiwater_rss ;
   __u64 hiwater_vm ;
   __u64 read_char ;
   __u64 write_char ;
   __u64 read_syscalls ;
   __u64 write_syscalls ;
   __u64 read_bytes ;
   __u64 write_bytes ;
   __u64 cancelled_write_bytes ;
   __u64 nvcsw ;
   __u64 nivcsw ;
   __u64 ac_utimescaled ;
   __u64 ac_stimescaled ;
   __u64 cpu_scaled_run_real_total ;
   __u64 freepages_count ;
   __u64 freepages_delay_total ;
};

#line 515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cgroup.h"
struct netprio_map {
   struct callback_head rcu ;
   u32 priomap_len ;
   u32 priomap[] ;
};

#line 1628  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct mnt_namespace;

#line 1629 
struct ipc_namespace;

#line 1630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct nsproxy {
   atomic_t count ;
   struct uts_namespace *uts_ns ;
   struct ipc_namespace *ipc_ns ;
   struct mnt_namespace *mnt_ns ;
   struct pid_namespace *pid_ns_for_children ;
   struct net *net_ns ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlmsghdr {
   __u32 nlmsg_len ;
   __u16 nlmsg_type ;
   __u16 nlmsg_flags ;
   __u32 nlmsg_seq ;
   __u32 nlmsg_pid ;
};

#line 147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/netlink.h"
struct nlattr {
   __u16 nla_len ;
   __u16 nla_type ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct netlink_callback {
   struct sk_buff *skb ;
   struct nlmsghdr const *nlh ;
   int (*dump)(struct sk_buff *, struct netlink_callback *) ;
   int (*done)(struct netlink_callback *) ;
   void *data ;
   struct module *module ;
   u16 family ;
   u16 min_dump_alloc ;
   unsigned int prev_seq ;
   unsigned int seq ;
   long args[6U] ;
};

#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netlink.h"
struct ndmsg {
   __u8 ndm_family ;
   __u8 ndm_pad1 ;
   __u16 ndm_pad2 ;
   __s32 ndm_ifindex ;
   __u16 ndm_state ;
   __u8 ndm_flags ;
   __u8 ndm_type ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct rtnl_link_stats64 {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 rx_errors ;
   __u64 tx_errors ;
   __u64 rx_dropped ;
   __u64 tx_dropped ;
   __u64 multicast ;
   __u64 collisions ;
   __u64 rx_length_errors ;
   __u64 rx_over_errors ;
   __u64 rx_crc_errors ;
   __u64 rx_frame_errors ;
   __u64 rx_fifo_errors ;
   __u64 rx_missed_errors ;
   __u64 tx_aborted_errors ;
   __u64 tx_carrier_errors ;
   __u64 tx_fifo_errors ;
   __u64 tx_heartbeat_errors ;
   __u64 tx_window_errors ;
   __u64 rx_compressed ;
   __u64 tx_compressed ;
};

#line 643  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_link.h"
struct ifla_vf_stats {
   __u64 rx_packets ;
   __u64 tx_packets ;
   __u64 rx_bytes ;
   __u64 tx_bytes ;
   __u64 broadcast ;
   __u64 multicast ;
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_link.h"
struct ifla_vf_info {
   __u32 vf ;
   __u8 mac[32U] ;
   __u32 vlan ;
   __u32 qos ;
   __u32 spoofchk ;
   __u32 linkstate ;
   __u32 min_tx_rate ;
   __u32 max_tx_rate ;
   __u32 rss_query_en ;
};

#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/if_bonding.h"
struct wireless_dev;

#line 120 
struct wpan_dev;

#line 121 
struct mpls_dev;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum netdev_tx {
    __NETDEV_TX_MIN = -2147483648,
    NETDEV_TX_OK = 0,
    NETDEV_TX_BUSY = 16,
    NETDEV_TX_LOCKED = 32
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum netdev_tx netdev_tx_t;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_stats {
   unsigned long rx_packets ;
   unsigned long tx_packets ;
   unsigned long rx_bytes ;
   unsigned long tx_bytes ;
   unsigned long rx_errors ;
   unsigned long tx_errors ;
   unsigned long rx_dropped ;
   unsigned long tx_dropped ;
   unsigned long multicast ;
   unsigned long collisions ;
   unsigned long rx_length_errors ;
   unsigned long rx_over_errors ;
   unsigned long rx_crc_errors ;
   unsigned long rx_frame_errors ;
   unsigned long rx_fifo_errors ;
   unsigned long rx_missed_errors ;
   unsigned long tx_aborted_errors ;
   unsigned long tx_carrier_errors ;
   unsigned long tx_fifo_errors ;
   unsigned long tx_heartbeat_errors ;
   unsigned long tx_window_errors ;
   unsigned long rx_compressed ;
   unsigned long tx_compressed ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr_list {
   struct list_head list ;
   int count ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct hh_cache {
   u16 hh_len ;
   u16 __pad ;
   seqlock_t hh_lock ;
   unsigned long hh_data[16U] ;
};

#line 245  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct header_ops {
   int (*create)(struct sk_buff *, struct net_device *, unsigned short , void const *, void const *, unsigned int ) ;
   int (*parse)(struct sk_buff const *, unsigned char *) ;
   int (*cache)(struct neighbour const *, struct hh_cache *, __be16 ) ;
   void (*cache_update)(struct hh_cache *, struct net_device const *, unsigned char const *) ;
};

#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct napi_struct {
   struct list_head poll_list ;
   unsigned long state ;
   int weight ;
   unsigned int gro_count ;
   int (*poll)(struct napi_struct *, int ) ;
   spinlock_t poll_lock ;
   int poll_owner ;
   struct net_device *dev ;
   struct sk_buff *gro_list ;
   struct sk_buff *skb ;
   struct hrtimer timer ;
   struct list_head dev_list ;
   struct hlist_node napi_hash_node ;
   unsigned int napi_id ;
};

#line 340 
enum rx_handler_result {
    RX_HANDLER_CONSUMED = 0,
    RX_HANDLER_ANOTHER = 1,
    RX_HANDLER_EXACT = 2,
    RX_HANDLER_PASS = 3
};

#line 388  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum rx_handler_result rx_handler_result_t;

#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef rx_handler_result_t rx_handler_func_t(struct sk_buff **);

#line 537 
struct Qdisc;

#line 537  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_queue {
   struct net_device *dev ;
   struct Qdisc *qdisc ;
   struct Qdisc *qdisc_sleeping ;
   struct kobject kobj ;
   int numa_node ;
   spinlock_t _xmit_lock ;
   int xmit_lock_owner ;
   unsigned long trans_start ;
   unsigned long trans_timeout ;
   unsigned long state ;
   struct dql dql ;
   unsigned long tx_maxrate ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_map {
   unsigned int len ;
   struct callback_head rcu ;
   u16 cpus[0U] ;
};

#line 619  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow {
   u16 cpu ;
   u16 filter ;
   unsigned int last_qtail ;
};

#line 631  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct rps_dev_flow_table {
   unsigned int mask ;
   struct callback_head rcu ;
   struct rps_dev_flow flows[0U] ;
};

#line 683  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_rx_queue {
   struct rps_map *rps_map ;
   struct rps_dev_flow_table *rps_flow_table ;
   struct kobject kobj ;
   struct net_device *dev ;
};

#line 706  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_map {
   unsigned int len ;
   unsigned int alloc_len ;
   struct callback_head rcu ;
   u16 queues[0U] ;
};

#line 719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct xps_dev_maps {
   struct callback_head rcu ;
   struct xps_map *cpu_map[0U] ;
};

#line 730  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_tc_txq {
   u16 count ;
   u16 offset ;
};

#line 741  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_fcoe_hbainfo {
   char manufacturer[64U] ;
   char serial_number[64U] ;
   char hardware_version[64U] ;
   char driver_version[64U] ;
   char optionrom_version[64U] ;
   char firmware_version[64U] ;
   char model[256U] ;
   char model_description[256U] ;
};

#line 757  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_phys_item_id {
   unsigned char id[32U] ;
   unsigned char id_len ;
};

#line 770  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device_ops {
   int (*ndo_init)(struct net_device *) ;
   void (*ndo_uninit)(struct net_device *) ;
   int (*ndo_open)(struct net_device *) ;
   int (*ndo_stop)(struct net_device *) ;
   netdev_tx_t (*ndo_start_xmit)(struct sk_buff *, struct net_device *) ;
   u16 (*ndo_select_queue)(struct net_device *, struct sk_buff *, void *, u16 (*)(struct net_device *, struct sk_buff *)) ;
   void (*ndo_change_rx_flags)(struct net_device *, int ) ;
   void (*ndo_set_rx_mode)(struct net_device *) ;
   int (*ndo_set_mac_address)(struct net_device *, void *) ;
   int (*ndo_validate_addr)(struct net_device *) ;
   int (*ndo_do_ioctl)(struct net_device *, struct ifreq *, int ) ;
   int (*ndo_set_config)(struct net_device *, struct ifmap *) ;
   int (*ndo_change_mtu)(struct net_device *, int ) ;
   int (*ndo_neigh_setup)(struct net_device *, struct neigh_parms *) ;
   void (*ndo_tx_timeout)(struct net_device *) ;
   struct rtnl_link_stats64 *(*ndo_get_stats64)(struct net_device *, struct rtnl_link_stats64 *) ;
   struct net_device_stats *(*ndo_get_stats)(struct net_device *) ;
   int (*ndo_vlan_rx_add_vid)(struct net_device *, __be16 , u16 ) ;
   int (*ndo_vlan_rx_kill_vid)(struct net_device *, __be16 , u16 ) ;
   void (*ndo_poll_controller)(struct net_device *) ;
   int (*ndo_netpoll_setup)(struct net_device *, struct netpoll_info *) ;
   void (*ndo_netpoll_cleanup)(struct net_device *) ;
   int (*ndo_busy_poll)(struct napi_struct *) ;
   int (*ndo_set_vf_mac)(struct net_device *, int , u8 *) ;
   int (*ndo_set_vf_vlan)(struct net_device *, int , u16 , u8 ) ;
   int (*ndo_set_vf_rate)(struct net_device *, int , int , int ) ;
   int (*ndo_set_vf_spoofchk)(struct net_device *, int , bool ) ;
   int (*ndo_get_vf_config)(struct net_device *, int , struct ifla_vf_info *) ;
   int (*ndo_set_vf_link_state)(struct net_device *, int , int ) ;
   int (*ndo_get_vf_stats)(struct net_device *, int , struct ifla_vf_stats *) ;
   int (*ndo_set_vf_port)(struct net_device *, int , struct nlattr **) ;
   int (*ndo_get_vf_port)(struct net_device *, int , struct sk_buff *) ;
   int (*ndo_set_vf_rss_query_en)(struct net_device *, int , bool ) ;
   int (*ndo_setup_tc)(struct net_device *, u8 ) ;
   int (*ndo_fcoe_enable)(struct net_device *) ;
   int (*ndo_fcoe_disable)(struct net_device *) ;
   int (*ndo_fcoe_ddp_setup)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_ddp_done)(struct net_device *, u16 ) ;
   int (*ndo_fcoe_ddp_target)(struct net_device *, u16 , struct scatterlist *, unsigned int ) ;
   int (*ndo_fcoe_get_hbainfo)(struct net_device *, struct netdev_fcoe_hbainfo *) ;
   int (*ndo_fcoe_get_wwn)(struct net_device *, u64 *, int ) ;
   int (*ndo_rx_flow_steer)(struct net_device *, struct sk_buff const *, u16 , u32 ) ;
   int (*ndo_add_slave)(struct net_device *, struct net_device *) ;
   int (*ndo_del_slave)(struct net_device *, struct net_device *) ;
   netdev_features_t (*ndo_fix_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_set_features)(struct net_device *, netdev_features_t ) ;
   int (*ndo_neigh_construct)(struct neighbour *) ;
   void (*ndo_neigh_destroy)(struct neighbour *) ;
   int (*ndo_fdb_add)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ) ;
   int (*ndo_fdb_del)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ) ;
   int (*ndo_fdb_dump)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ) ;
   int (*ndo_bridge_setlink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_bridge_getlink)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ) ;
   int (*ndo_bridge_dellink)(struct net_device *, struct nlmsghdr *, u16 ) ;
   int (*ndo_change_carrier)(struct net_device *, bool ) ;
   int (*ndo_get_phys_port_id)(struct net_device *, struct netdev_phys_item_id *) ;
   int (*ndo_get_phys_port_name)(struct net_device *, char *, size_t ) ;
   void (*ndo_add_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void (*ndo_del_vxlan_port)(struct net_device *, sa_family_t , __be16 ) ;
   void *(*ndo_dfwd_add_station)(struct net_device *, struct net_device *) ;
   void (*ndo_dfwd_del_station)(struct net_device *, void *) ;
   netdev_tx_t (*ndo_dfwd_start_xmit)(struct sk_buff *, struct net_device *, void *) ;
   int (*ndo_get_lock_subclass)(struct net_device *) ;
   netdev_features_t (*ndo_features_check)(struct sk_buff *, struct net_device *, netdev_features_t ) ;
   int (*ndo_set_tx_maxrate)(struct net_device *, int , u32 ) ;
   int (*ndo_get_iflink)(struct net_device const *) ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_adj_list_304 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct __anonstruct_all_adj_list_305 {
   struct list_head upper ;
   struct list_head lower ;
};

#line 1257 
struct iw_handler_def;

#line 1257 
struct iw_public_data;

#line 1257 
struct switchdev_ops;

#line 1257 
struct vlan_info;

#line 1257 
struct tipc_bearer;

#line 1257 
struct in_device;

#line 1257 
struct dn_dev;

#line 1257 
struct tcf_proto;

#line 1257 
struct cpu_rmap;

#line 1257 
struct pcpu_lstats;

#line 1257 
struct pcpu_sw_netstats;

#line 1257 
struct pcpu_dstats;

#line 1257 
struct pcpu_vstats;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
union __anonunion_306 {
   void *ml_priv ;
   struct pcpu_lstats *lstats ;
   struct pcpu_sw_netstats *tstats ;
   struct pcpu_dstats *dstats ;
   struct pcpu_vstats *vstats ;
};

#line 1257 
struct garp_port;

#line 1257 
struct mrp_port;

#line 1257  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device {
   char name[16U] ;
   struct hlist_node name_hlist ;
   char *ifalias ;
   unsigned long mem_end ;
   unsigned long mem_start ;
   unsigned long base_addr ;
   int irq ;
   atomic_t carrier_changes ;
   unsigned long state ;
   struct list_head dev_list ;
   struct list_head napi_list ;
   struct list_head unreg_list ;
   struct list_head close_list ;
   struct list_head ptype_all ;
   struct list_head ptype_specific ;
   struct __anonstruct_adj_list_304 adj_list ;
   struct __anonstruct_all_adj_list_305 all_adj_list ;
   netdev_features_t features ;
   netdev_features_t hw_features ;
   netdev_features_t wanted_features ;
   netdev_features_t vlan_features ;
   netdev_features_t hw_enc_features ;
   netdev_features_t mpls_features ;
   int ifindex ;
   int group ;
   struct net_device_stats stats ;
   atomic_long_t rx_dropped ;
   atomic_long_t tx_dropped ;
   struct iw_handler_def const *wireless_handlers ;
   struct iw_public_data *wireless_data ;
   struct net_device_ops const *netdev_ops ;
   struct ethtool_ops const *ethtool_ops ;
   struct switchdev_ops const *switchdev_ops ;
   struct header_ops const *header_ops ;
   unsigned int flags ;
   unsigned int priv_flags ;
   unsigned short gflags ;
   unsigned short padded ;
   unsigned char operstate ;
   unsigned char link_mode ;
   unsigned char if_port ;
   unsigned char dma ;
   unsigned int mtu ;
   unsigned short type ;
   unsigned short hard_header_len ;
   unsigned short needed_headroom ;
   unsigned short needed_tailroom ;
   unsigned char perm_addr[32U] ;
   unsigned char addr_assign_type ;
   unsigned char addr_len ;
   unsigned short neigh_priv_len ;
   unsigned short dev_id ;
   unsigned short dev_port ;
   spinlock_t addr_list_lock ;
   unsigned char name_assign_type ;
   bool uc_promisc ;
   struct netdev_hw_addr_list uc ;
   struct netdev_hw_addr_list mc ;
   struct netdev_hw_addr_list dev_addrs ;
   struct kset *queues_kset ;
   unsigned int promiscuity ;
   unsigned int allmulti ;
   struct vlan_info *vlan_info ;
   struct dsa_switch_tree *dsa_ptr ;
   struct tipc_bearer *tipc_ptr ;
   void *atalk_ptr ;
   struct in_device *ip_ptr ;
   struct dn_dev *dn_ptr ;
   struct inet6_dev *ip6_ptr ;
   void *ax25_ptr ;
   struct wireless_dev *ieee80211_ptr ;
   struct wpan_dev *ieee802154_ptr ;
   struct mpls_dev *mpls_ptr ;
   unsigned long last_rx ;
   unsigned char *dev_addr ;
   struct netdev_rx_queue *_rx ;
   unsigned int num_rx_queues ;
   unsigned int real_num_rx_queues ;
   unsigned long gro_flush_timeout ;
   rx_handler_func_t *rx_handler ;
   void *rx_handler_data ;
   struct tcf_proto *ingress_cl_list ;
   struct netdev_queue *ingress_queue ;
   struct list_head nf_hooks_ingress ;
   unsigned char broadcast[32U] ;
   struct cpu_rmap *rx_cpu_rmap ;
   struct hlist_node index_hlist ;
   struct netdev_queue *_tx ;
   unsigned int num_tx_queues ;
   unsigned int real_num_tx_queues ;
   struct Qdisc *qdisc ;
   unsigned long tx_queue_len ;
   spinlock_t tx_global_lock ;
   int watchdog_timeo ;
   struct xps_dev_maps *xps_maps ;
   unsigned long trans_start ;
   struct timer_list watchdog_timer ;
   int *pcpu_refcnt ;
   struct list_head todo_list ;
   struct list_head link_watch_list ;
   int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) reg_state : 8 ;
   bool dismantle ;
   int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) rtnl_link_state : 16 ;
   void (*destructor)(struct net_device *) ;
   struct netpoll_info *npinfo ;
   possible_net_t nd_net ;
   union __anonunion_306 __anonCompField_net_device_93 ;
   struct garp_port *garp_port ;
   struct mrp_port *mrp_port ;
   struct device dev ;
   struct attribute_group const *sysfs_groups[4U] ;
   struct attribute_group const *sysfs_rx_queue_group ;
   struct rtnl_link_ops const *rtnl_link_ops ;
   unsigned int gso_max_size ;
   u16 gso_max_segs ;
   u16 gso_min_segs ;
   struct dcbnl_rtnl_ops const *dcbnl_ops ;
   u8 num_tc ;
   struct netdev_tc_txq tc_to_txq[16U] ;
   u8 prio_tc_map[16U] ;
   unsigned int fcoe_ddp_xid ;
   struct netprio_map *priomap ;
   struct phy_device *phydev ;
   struct lock_class_key *qdisc_tx_busylock ;
};

#line 1978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct packet_type {
   __be16 type ;
   struct net_device *dev ;
   int (*func)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *) ;
   bool (*id_match)(struct packet_type *, struct sock *) ;
   void *af_packet_priv ;
   struct list_head list ;
};

#line 2025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct pcpu_sw_netstats {
   u64 rx_packets ;
   u64 rx_bytes ;
   u64 tx_packets ;
   u64 tx_bytes ;
   struct u64_stats_sync syncp ;
};

#line 449  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
struct fcoe_hdr {
   __u8 fcoe_ver ;
   __u8 fcoe_resvd[12U] ;
   __u8 fcoe_sof ;
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/genhd.h"
struct disk_stats {
   unsigned long sectors[2U] ;
   unsigned long ios[2U] ;
   unsigned long merges[2U] ;
   unsigned long ticks[2U] ;
   unsigned long io_ticks ;
   unsigned long time_in_queue ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/genhd.h"
struct partition_meta_info {
   char uuid[37U] ;
   u8 volname[64U] ;
};

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/genhd.h"
struct hd_struct {
   sector_t start_sect ;
   sector_t nr_sects ;
   seqcount_t nr_sects_seq ;
   sector_t alignment_offset ;
   unsigned int discard_alignment ;
   struct device __dev ;
   struct kobject *holder_dir ;
   int policy ;
   int partno ;
   struct partition_meta_info *info ;
   int make_it_fail ;
   unsigned long stamp ;
   atomic_t in_flight[2U] ;
   struct disk_stats *dkstats ;
   atomic_t ref ;
   struct callback_head callback_head ;
};

#line 155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/genhd.h"
struct disk_part_tbl {
   struct callback_head callback_head ;
   int len ;
   struct hd_struct *last_lookup ;
   struct hd_struct *part[] ;
};

#line 162 
struct disk_events;

#line 163 
struct timer_rand_state;

#line 163 
struct blk_integrity;

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/genhd.h"
struct gendisk {
   int major ;
   int first_minor ;
   int minors ;
   char disk_name[32U] ;
   char *(*devnode)(struct gendisk *, umode_t *) ;
   unsigned int events ;
   unsigned int async_events ;
   struct disk_part_tbl *part_tbl ;
   struct hd_struct part0 ;
   struct block_device_operations const *fops ;
   struct request_queue *queue ;
   void *private_data ;
   int flags ;
   struct device *driverfs_dev ;
   struct kobject *slave_dir ;
   struct timer_rand_state *random ;
   atomic_t sync_io ;
   struct disk_events *ev ;
   struct blk_integrity *integrity ;
   int node_id ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/flex_proportions.h"
struct fprop_local_percpu {
   struct percpu_counter events ;
   unsigned int period ;
   raw_spinlock_t lock ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/backing-dev-defs.h"
typedef int congested_fn(void *, int );

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/backing-dev-defs.h"
struct bdi_writeback_congested {
   unsigned long state ;
   atomic_t refcnt ;
   struct backing_dev_info *bdi ;
   int blkcg_id ;
   struct rb_node rb_node ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/backing-dev-defs.h"
union __anonunion_315 {
   struct work_struct release_work ;
   struct callback_head rcu ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/backing-dev-defs.h"
struct bdi_writeback {
   struct backing_dev_info *bdi ;
   unsigned long state ;
   unsigned long last_old_flush ;
   struct list_head b_dirty ;
   struct list_head b_io ;
   struct list_head b_more_io ;
   struct list_head b_dirty_time ;
   spinlock_t list_lock ;
   struct percpu_counter stat[4U] ;
   struct bdi_writeback_congested *congested ;
   unsigned long bw_time_stamp ;
   unsigned long dirtied_stamp ;
   unsigned long written_stamp ;
   unsigned long write_bandwidth ;
   unsigned long avg_write_bandwidth ;
   unsigned long dirty_ratelimit ;
   unsigned long balanced_dirty_ratelimit ;
   struct fprop_local_percpu completions ;
   int dirty_exceeded ;
   spinlock_t work_lock ;
   struct list_head work_list ;
   struct delayed_work dwork ;
   struct percpu_ref refcnt ;
   struct fprop_local_percpu memcg_completions ;
   struct cgroup_subsys_state *memcg_css ;
   struct cgroup_subsys_state *blkcg_css ;
   struct list_head memcg_node ;
   struct list_head blkcg_node ;
   union __anonunion_315 __anonCompField_bdi_writeback_94 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/backing-dev-defs.h"
struct backing_dev_info {
   struct list_head bdi_list ;
   unsigned long ra_pages ;
   unsigned int capabilities ;
   congested_fn *congested_fn ;
   void *congested_data ;
   char *name ;
   unsigned int min_ratio ;
   unsigned int max_ratio ;
   unsigned int max_prop_frac ;
   atomic_long_t tot_write_bandwidth ;
   struct bdi_writeback wb ;
   struct radix_tree_root cgwb_tree ;
   struct rb_root cgwb_congested_tree ;
   atomic_t usage_cnt ;
   wait_queue_head_t wb_waitq ;
   struct device *dev ;
   struct timer_list laptop_mode_wb_timer ;
   struct dentry *debug_dir ;
   struct dentry *debug_stats ;
};

#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mempool.h"
typedef void *mempool_alloc_t(gfp_t , void *);

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mempool.h"
typedef void mempool_free_t(void *, void *);

#line 13  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mempool.h"
struct mempool_s {
   spinlock_t lock ;
   int min_nr ;
   int curr_nr ;
   void **elements ;
   void *pool_data ;
   mempool_alloc_t *alloc ;
   mempool_free_t *free ;
   wait_queue_head_t wait ;
};

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mempool.h"
typedef struct mempool_s mempool_t;

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mempool.h"
union __anonunion_316 {
   struct list_head q_node ;
   struct kmem_cache *__rcu_icq_cache ;
};

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mempool.h"
union __anonunion_317 {
   struct hlist_node ioc_node ;
   struct callback_head __rcu_head ;
};

#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mempool.h"
struct io_cq {
   struct request_queue *q ;
   struct io_context *ioc ;
   union __anonunion_316 __anonCompField_io_cq_95 ;
   union __anonunion_317 __anonCompField_io_cq_96 ;
   unsigned int flags ;
};

#line 92  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/iocontext.h"
struct io_context {
   atomic_long_t refcount ;
   atomic_t active_ref ;
   atomic_t nr_tasks ;
   spinlock_t lock ;
   unsigned short ioprio ;
   int nr_batch_requests ;
   unsigned long last_waited ;
   struct radix_tree_root icq_tree ;
   struct io_cq *icq_hint ;
   struct hlist_head icq_list ;
   struct work_struct release_work ;
};

#line 326  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bio.h"
struct bio_integrity_payload {
   struct bio *bip_bio ;
   struct bvec_iter bip_iter ;
   bio_end_io_t *bip_end_io ;
   unsigned short bip_slab ;
   unsigned short bip_vcnt ;
   unsigned short bip_max_vcnt ;
   unsigned short bip_flags ;
   struct work_struct bip_work ;
   struct bio_vec *bip_vec ;
   struct bio_vec bip_inline_vecs[0U] ;
};

#line 541  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bio.h"
struct bio_list {
   struct bio *head ;
   struct bio *tail ;
};

#line 662  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bio.h"
struct bio_set {
   struct kmem_cache *bio_slab ;
   unsigned int front_pad ;
   mempool_t *bio_pool ;
   mempool_t *bvec_pool ;
   mempool_t *bio_integrity_pool ;
   mempool_t *bvec_integrity_pool ;
   spinlock_t rescue_lock ;
   struct bio_list rescue_list ;
   struct work_struct rescue_work ;
   struct workqueue_struct *rescue_workqueue ;
};

#line 64  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/bsg.h"
struct bsg_class_device {
   struct device *class_dev ;
   struct device *parent ;
   int minor ;
   struct request_queue *queue ;
   struct kref ref ;
   void (*release)(struct device *) ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bsg.h"
struct elevator_queue;

#line 23 
struct blk_trace;

#line 24 
struct request;

#line 26 
struct bsg_job;

#line 27 
struct blkcg_gq;

#line 28 
struct blk_flush_queue;

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef void rq_end_io_fn(struct request *, int );

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct request_list {
   struct request_queue *q ;
   struct blkcg_gq *blkg ;
   int count[2U] ;
   int starved[2U] ;
   mempool_t *rq_pool ;
   wait_queue_head_t wait[2U] ;
   unsigned int flags ;
};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
union __anonunion_318 {
   struct call_single_data csd ;
   unsigned long fifo_time ;
};

#line 75 
struct blk_mq_ctx;

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
union __anonunion_319 {
   struct hlist_node hash ;
   struct list_head ipi_list ;
};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
union __anonunion_320 {
   struct rb_node rb_node ;
   void *completion_data ;
};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct __anonstruct_elv_322 {
   struct io_cq *icq ;
   void *priv[2U] ;
};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct __anonstruct_flush_323 {
   unsigned int seq ;
   struct list_head list ;
   rq_end_io_fn *saved_end_io ;
};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
union __anonunion_321 {
   struct __anonstruct_elv_322 elv ;
   struct __anonstruct_flush_323 flush ;
};

#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct request {
   struct list_head queuelist ;
   union __anonunion_318 __anonCompField_request_97 ;
   struct request_queue *q ;
   struct blk_mq_ctx *mq_ctx ;
   u64 cmd_flags ;
   unsigned int cmd_type ;
   unsigned long atomic_flags ;
   int cpu ;
   unsigned int __data_len ;
   sector_t __sector ;
   struct bio *bio ;
   struct bio *biotail ;
   union __anonunion_319 __anonCompField_request_98 ;
   union __anonunion_320 __anonCompField_request_99 ;
   union __anonunion_321 __anonCompField_request_100 ;
   struct gendisk *rq_disk ;
   struct hd_struct *part ;
   unsigned long start_time ;
   struct request_list *rl ;
   unsigned long long start_time_ns ;
   unsigned long long io_start_time_ns ;
   unsigned short nr_phys_segments ;
   unsigned short nr_integrity_segments ;
   unsigned short ioprio ;
   void *special ;
   int tag ;
   int errors ;
   unsigned char __cmd[16U] ;
   unsigned char *cmd ;
   unsigned short cmd_len ;
   unsigned int extra_len ;
   unsigned int sense_len ;
   unsigned int resid_len ;
   void *sense ;
   unsigned long deadline ;
   struct list_head timeout_list ;
   unsigned int timeout ;
   int retries ;
   rq_end_io_fn *end_io ;
   void *end_io_data ;
   struct request *next_rq ;
};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/hashtable.h"
struct elevator_type;

#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef int elevator_merge_fn(struct request_queue *, struct request **, struct bio *);

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_merge_req_fn(struct request_queue *, struct request *, struct request *);

#line 17  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_merged_fn(struct request_queue *, struct request *, int );

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef int elevator_allow_merge_fn(struct request_queue *, struct request *, struct bio *);

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_bio_merged_fn(struct request_queue *, struct request *, struct bio *);

#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef int elevator_dispatch_fn(struct request_queue *, int );

#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_add_req_fn(struct request_queue *, struct request *);

#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef struct request *elevator_request_list_fn(struct request_queue *, struct request *);

#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_completed_req_fn(struct request_queue *, struct request *);

#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef int elevator_may_queue_fn(struct request_queue *, int );

#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_init_icq_fn(struct io_cq *);

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_exit_icq_fn(struct io_cq *);

#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef int elevator_set_req_fn(struct request_queue *, struct request *, struct bio *, gfp_t );

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_put_req_fn(struct request *);

#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_activate_req_fn(struct request_queue *, struct request *);

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_deactivate_req_fn(struct request_queue *, struct request *);

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef int elevator_init_fn(struct request_queue *, struct elevator_type *);

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_exit_fn(struct elevator_queue *);

#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
typedef void elevator_registered_fn(struct request_queue *);

#line 43  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
struct elevator_ops {
   elevator_merge_fn *elevator_merge_fn ;
   elevator_merged_fn *elevator_merged_fn ;
   elevator_merge_req_fn *elevator_merge_req_fn ;
   elevator_allow_merge_fn *elevator_allow_merge_fn ;
   elevator_bio_merged_fn *elevator_bio_merged_fn ;
   elevator_dispatch_fn *elevator_dispatch_fn ;
   elevator_add_req_fn *elevator_add_req_fn ;
   elevator_activate_req_fn *elevator_activate_req_fn ;
   elevator_deactivate_req_fn *elevator_deactivate_req_fn ;
   elevator_completed_req_fn *elevator_completed_req_fn ;
   elevator_request_list_fn *elevator_former_req_fn ;
   elevator_request_list_fn *elevator_latter_req_fn ;
   elevator_init_icq_fn *elevator_init_icq_fn ;
   elevator_exit_icq_fn *elevator_exit_icq_fn ;
   elevator_set_req_fn *elevator_set_req_fn ;
   elevator_put_req_fn *elevator_put_req_fn ;
   elevator_may_queue_fn *elevator_may_queue_fn ;
   elevator_init_fn *elevator_init_fn ;
   elevator_exit_fn *elevator_exit_fn ;
   elevator_registered_fn *elevator_registered_fn ;
};

#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
struct elv_fs_entry {
   struct attribute attr ;
   ssize_t (*show)(struct elevator_queue *, char *) ;
   ssize_t (*store)(struct elevator_queue *, char const *, size_t ) ;
};

#line 82  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
struct elevator_type {
   struct kmem_cache *icq_cache ;
   struct elevator_ops ops ;
   size_t icq_size ;
   size_t icq_align ;
   struct elv_fs_entry *elevator_attrs ;
   char elevator_name[16U] ;
   struct module *elevator_owner ;
   char icq_cache_name[21U] ;
   struct list_head list ;
};

#line 103  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elevator.h"
struct elevator_queue {
   struct elevator_type *type ;
   void *elevator_data ;
   struct kobject kobj ;
   struct mutex sysfs_lock ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) registered : 1 ;
   struct hlist_head hash[64U] ;
};

#line 210  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef void request_fn_proc(struct request_queue *);

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef void make_request_fn(struct request_queue *, struct bio *);

#line 212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef int prep_rq_fn(struct request_queue *, struct request *);

#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef void unprep_rq_fn(struct request_queue *, struct request *);

#line 214  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct bvec_merge_data {
   struct block_device *bi_bdev ;
   sector_t bi_sector ;
   unsigned int bi_size ;
   unsigned long bi_rw ;
};

#line 222  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef int merge_bvec_fn(struct request_queue *, struct bvec_merge_data *, struct bio_vec *);

#line 224  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef void softirq_done_fn(struct request *);

#line 225  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef int dma_drain_needed_fn(struct request *);

#line 226  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef int lld_busy_fn(struct request_queue *);

#line 227  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef int bsg_job_fn(struct bsg_job *);

#line 228 
enum blk_eh_timer_return {
    BLK_EH_NOT_HANDLED = 0,
    BLK_EH_HANDLED = 1,
    BLK_EH_RESET_TIMER = 2
};

#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef enum blk_eh_timer_return rq_timed_out_fn(struct request *);

#line 241  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct blk_queue_tag {
   struct request **tag_index ;
   unsigned long *tag_map ;
   int busy ;
   int max_depth ;
   int real_max_depth ;
   atomic_t refcnt ;
   int alloc_policy ;
   int next_tag ;
};

#line 252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct queue_limits {
   unsigned long bounce_pfn ;
   unsigned long seg_boundary_mask ;
   unsigned int max_hw_sectors ;
   unsigned int chunk_sectors ;
   unsigned int max_sectors ;
   unsigned int max_segment_size ;
   unsigned int physical_block_size ;
   unsigned int alignment_offset ;
   unsigned int io_min ;
   unsigned int io_opt ;
   unsigned int max_discard_sectors ;
   unsigned int max_write_same_sectors ;
   unsigned int discard_granularity ;
   unsigned int discard_alignment ;
   unsigned short logical_block_size ;
   unsigned short max_segments ;
   unsigned short max_integrity_segments ;
   unsigned char misaligned ;
   unsigned char discard_misaligned ;
   unsigned char cluster ;
   unsigned char discard_zeroes_data ;
   unsigned char raid_partial_stripes_expensive ;
};

#line 285 
struct blk_mq_ops;

#line 285 
struct blk_mq_hw_ctx;

#line 285 
struct throtl_data;

#line 285 
struct blk_mq_tag_set;

#line 285  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct request_queue {
   struct list_head queue_head ;
   struct request *last_merge ;
   struct elevator_queue *elevator ;
   int nr_rqs[2U] ;
   int nr_rqs_elvpriv ;
   struct request_list root_rl ;
   request_fn_proc *request_fn ;
   make_request_fn *make_request_fn ;
   prep_rq_fn *prep_rq_fn ;
   unprep_rq_fn *unprep_rq_fn ;
   merge_bvec_fn *merge_bvec_fn ;
   softirq_done_fn *softirq_done_fn ;
   rq_timed_out_fn *rq_timed_out_fn ;
   dma_drain_needed_fn *dma_drain_needed ;
   lld_busy_fn *lld_busy_fn ;
   struct blk_mq_ops *mq_ops ;
   unsigned int *mq_map ;
   struct blk_mq_ctx *queue_ctx ;
   unsigned int nr_queues ;
   struct blk_mq_hw_ctx **queue_hw_ctx ;
   unsigned int nr_hw_queues ;
   sector_t end_sector ;
   struct request *boundary_rq ;
   struct delayed_work delay_work ;
   struct backing_dev_info backing_dev_info ;
   void *queuedata ;
   unsigned long queue_flags ;
   int id ;
   gfp_t bounce_gfp ;
   spinlock_t __queue_lock ;
   spinlock_t *queue_lock ;
   struct kobject kobj ;
   struct kobject mq_kobj ;
   struct device *dev ;
   int rpm_status ;
   unsigned int nr_pending ;
   unsigned long nr_requests ;
   unsigned int nr_congestion_on ;
   unsigned int nr_congestion_off ;
   unsigned int nr_batching ;
   unsigned int dma_drain_size ;
   void *dma_drain_buffer ;
   unsigned int dma_pad_mask ;
   unsigned int dma_alignment ;
   struct blk_queue_tag *queue_tags ;
   struct list_head tag_busy_list ;
   unsigned int nr_sorted ;
   unsigned int in_flight[2U] ;
   unsigned int request_fn_active ;
   unsigned int rq_timeout ;
   struct timer_list timeout ;
   struct list_head timeout_list ;
   struct list_head icq_list ;
   unsigned long blkcg_pols[1U] ;
   struct blkcg_gq *root_blkg ;
   struct list_head blkg_list ;
   struct queue_limits limits ;
   unsigned int sg_timeout ;
   unsigned int sg_reserved_size ;
   int node ;
   struct blk_trace *blk_trace ;
   unsigned int flush_flags ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) flush_not_queueable : 1 ;
   struct blk_flush_queue *fq ;
   struct list_head requeue_list ;
   spinlock_t requeue_lock ;
   struct work_struct requeue_work ;
   struct mutex sysfs_lock ;
   int bypass_depth ;
   atomic_t mq_freeze_depth ;
   bsg_job_fn *bsg_job_fn ;
   int bsg_job_size ;
   struct bsg_class_device bsg_dev ;
   struct throtl_data *td ;
   struct callback_head callback_head ;
   wait_queue_head_t mq_freeze_wq ;
   struct percpu_ref mq_usage_counter ;
   struct list_head all_q_node ;
   struct blk_mq_tag_set *tag_set ;
   struct list_head tag_set_list ;
};

#line 1020  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct blk_plug {
   struct list_head list ;
   struct list_head mq_list ;
   struct list_head cb_list ;
};

#line 1398  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct blk_integrity_iter {
   void *prot_buf ;
   void *data_buf ;
   sector_t seed ;
   unsigned int data_size ;
   unsigned short interval ;
   char const *disk_name ;
};

#line 1427  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
typedef int integrity_processing_fn(struct blk_integrity_iter *);

#line 1428  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct blk_integrity {
   integrity_processing_fn *generate_fn ;
   integrity_processing_fn *verify_fn ;
   unsigned short flags ;
   unsigned short tuple_size ;
   unsigned short interval ;
   unsigned short tag_size ;
   char const *name ;
   struct kobject kobj ;
};

#line 1482  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct block_device_operations {
   int (*open)(struct block_device *, fmode_t ) ;
   void (*release)(struct gendisk *, fmode_t ) ;
   int (*rw_page)(struct block_device *, sector_t , struct page *, int ) ;
   int (*ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct block_device *, fmode_t , unsigned int , unsigned long ) ;
   long (*direct_access)(struct block_device *, sector_t , void **, unsigned long *, long ) ;
   unsigned int (*check_events)(struct gendisk *, unsigned int ) ;
   int (*media_changed)(struct gendisk *) ;
   void (*unlock_native_capacity)(struct gendisk *) ;
   int (*revalidate_disk)(struct gendisk *) ;
   int (*getgeo)(struct block_device *, struct hd_geometry *) ;
   void (*swap_slot_free_notify)(struct block_device *, unsigned long ) ;
   struct module *owner ;
};

#line 1578 
struct blk_mq_tags;

#line 1579  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blkdev.h"
struct blk_mq_cpu_notifier {
   struct list_head list ;
   void *data ;
   int (*notify)(void *, unsigned long , unsigned int ) ;
};

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
struct blk_align_bitmap;

#line 14  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
struct blk_mq_ctxmap {
   unsigned int size ;
   unsigned int bits_per_word ;
   struct blk_align_bitmap *map ;
};

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
struct __anonstruct_325 {
   spinlock_t lock ;
   struct list_head dispatch ;
};

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
struct blk_mq_hw_ctx {
   struct __anonstruct_325 __anonCompField_blk_mq_hw_ctx_101 ;
   unsigned long state ;
   struct delayed_work run_work ;
   struct delayed_work delay_work ;
   cpumask_var_t cpumask ;
   int next_cpu ;
   int next_cpu_batch ;
   unsigned long flags ;
   struct request_queue *queue ;
   struct blk_flush_queue *fq ;
   void *driver_data ;
   struct blk_mq_ctxmap ctx_map ;
   unsigned int nr_ctx ;
   struct blk_mq_ctx **ctxs ;
   atomic_t wait_index ;
   struct blk_mq_tags *tags ;
   unsigned long queued ;
   unsigned long run ;
   unsigned long dispatched[10U] ;
   unsigned int numa_node ;
   unsigned int queue_num ;
   atomic_t nr_active ;
   struct blk_mq_cpu_notifier cpu_notifier ;
   struct kobject kobj ;
};

#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
struct blk_mq_tag_set {
   struct blk_mq_ops *ops ;
   unsigned int nr_hw_queues ;
   unsigned int queue_depth ;
   unsigned int reserved_tags ;
   unsigned int cmd_size ;
   int numa_node ;
   unsigned int timeout ;
   unsigned int flags ;
   void *driver_data ;
   struct blk_mq_tags **tags ;
   struct mutex tag_list_lock ;
   struct list_head tag_list ;
};

#line 80  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
struct blk_mq_queue_data {
   struct request *rq ;
   struct list_head *list ;
   bool last ;
};

#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
typedef int queue_rq_fn(struct blk_mq_hw_ctx *, struct blk_mq_queue_data const *);

#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
typedef struct blk_mq_hw_ctx *map_queue_fn(struct request_queue *, int const );

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
typedef enum blk_eh_timer_return timeout_fn(struct request *, bool );

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
typedef int init_hctx_fn(struct blk_mq_hw_ctx *, void *, unsigned int );

#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
typedef void exit_hctx_fn(struct blk_mq_hw_ctx *, unsigned int );

#line 92  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
typedef int init_request_fn(void *, struct request *, unsigned int , unsigned int , unsigned int );

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
typedef void exit_request_fn(void *, struct request *, unsigned int , unsigned int );

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/blk-mq.h"
struct blk_mq_ops {
   queue_rq_fn *queue_rq ;
   map_queue_fn *map_queue ;
   timeout_fn *timeout ;
   softirq_done_fn *complete ;
   init_hctx_fn *init_hctx ;
   exit_hctx_fn *exit_hctx ;
   init_request_fn *init_request ;
   exit_request_fn *exit_request ;
};

#line 488  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/scsi/libfcoe.h"
enum pcie_memwin {
    MEMWIN_NIC = 0,
    MEMWIN_RSVD1 = 1,
    MEMWIN_RSVD2 = 2,
    MEMWIN_RDMA = 3,
    MEMWIN_RSVD4 = 4,
    MEMWIN_FOISCSI = 5,
    MEMWIN_CSIOSTOR = 6,
    MEMWIN_RSVD7 = 7
};

#line 499  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/scsi/libfcoe.h"
struct sge_qstat {
   __be32 qid ;
   __be16 cidx ;
   __be16 pidx ;
};

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct hotplug_slot;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/resource_ext.h"
struct pci_slot {
   struct pci_bus *bus ;
   struct list_head list ;
   struct hotplug_slot *hotplug ;
   unsigned char number ;
   struct kobject kobj ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef int pci_power_t;

#line 137  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_channel_state_t;

#line 138 
enum pci_channel_state {
    pci_channel_io_normal = 1,
    pci_channel_io_frozen = 2,
    pci_channel_io_perm_failure = 3
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_dev_flags_t;

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned short pci_bus_flags_t;

#line 249 
struct pcie_link_state;

#line 250 
struct pci_vpd;

#line 251 
struct pci_sriov;

#line 252 
struct pci_ats;

#line 253 
struct pci_driver;

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
union __anonunion_336 {
   struct pci_sriov *sriov ;
   struct pci_dev *physfn ;
};

#line 253  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dev {
   struct list_head bus_list ;
   struct pci_bus *bus ;
   struct pci_bus *subordinate ;
   void *sysdata ;
   struct proc_dir_entry *procent ;
   struct pci_slot *slot ;
   unsigned int devfn ;
   unsigned short vendor ;
   unsigned short device ;
   unsigned short subsystem_vendor ;
   unsigned short subsystem_device ;
   unsigned int class ;
   u8 revision ;
   u8 hdr_type ;
   u8 pcie_cap ;
   u8 msi_cap ;
   u8 msix_cap ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) pcie_mpss : 3 ;
   u8 rom_base_reg ;
   u8 pin ;
   u16 pcie_flags_reg ;
   u8 dma_alias_devfn ;
   struct pci_driver *driver ;
   u64 dma_mask ;
   struct device_dma_parameters dma_parms ;
   pci_power_t current_state ;
   u8 pm_cap ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(5))) pme_support : 5 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_interrupt : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pme_poll : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d1_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d2_support : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d1d2 : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) d3cold_allowed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) mmio_always_on : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) wakeup_prepared : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) runtime_d3cold : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ignore_hotplug : 1 ;
   unsigned int d3_delay ;
   unsigned int d3cold_delay ;
   struct pcie_link_state *link_state ;
   pci_channel_state_t error_state ;
   struct device dev ;
   int cfg_size ;
   unsigned int irq ;
   struct resource resource[17U] ;
   bool match_driver ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) transparent : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) multifunction : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_busmaster : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) no_64bit_msi : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) block_cfg_access : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_parity_status : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) irq_reroute_variant : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msi_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) msix_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ari_enabled : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) needs_freset : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) state_saved : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_physfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_virtfn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) reset_fn : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_hotplug_bridge : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first_valid : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) __aer_firmware_first : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) broken_intx_masking : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) io_window_1k : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) irq_managed : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) has_secondary_link : 1 ;
   pci_dev_flags_t dev_flags ;
   atomic_t enable_cnt ;
   u32 saved_config_space[16U] ;
   struct hlist_head saved_cap_space ;
   struct bin_attribute *rom_attr ;
   int rom_attr_enabled ;
   struct bin_attribute *res_attr[17U] ;
   struct bin_attribute *res_attr_wc[17U] ;
   struct list_head msi_list ;
   struct attribute_group const **msi_irq_groups ;
   struct pci_vpd *vpd ;
   union __anonunion_336 __anonCompField_pci_dev_104 ;
   struct pci_ats *ats ;
   phys_addr_t rom ;
   size_t romlen ;
   char *driver_override ;
};

#line 442 
struct pci_ops;

#line 442 
struct msi_controller;

#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_bus {
   struct list_head node ;
   struct pci_bus *parent ;
   struct list_head children ;
   struct list_head devices ;
   struct pci_dev *self ;
   struct list_head slots ;
   struct resource *resource[4U] ;
   struct list_head resources ;
   struct resource busn_res ;
   struct pci_ops *ops ;
   struct msi_controller *msi ;
   void *sysdata ;
   struct proc_dir_entry *procdir ;
   unsigned char number ;
   unsigned char primary ;
   unsigned char max_bus_speed ;
   unsigned char cur_bus_speed ;
   char name[48U] ;
   unsigned short bridge_ctl ;
   pci_bus_flags_t bus_flags ;
   struct device *bridge ;
   struct device dev ;
   struct bin_attribute *legacy_io ;
   struct bin_attribute *legacy_mem ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_added : 1 ;
};

#line 565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_ops {
   void *(*map_bus)(struct pci_bus *, unsigned int , int ) ;
   int (*read)(struct pci_bus *, unsigned int , int , int , u32 *) ;
   int (*write)(struct pci_bus *, unsigned int , int , int , u32 ) ;
};

#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_dynids {
   spinlock_t lock ;
   struct list_head list ;
};

#line 607  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
typedef unsigned int pci_ers_result_t;

#line 617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_error_handlers {
   pci_ers_result_t (*error_detected)(struct pci_dev *, enum pci_channel_state ) ;
   pci_ers_result_t (*mmio_enabled)(struct pci_dev *) ;
   pci_ers_result_t (*link_reset)(struct pci_dev *) ;
   pci_ers_result_t (*slot_reset)(struct pci_dev *) ;
   void (*reset_notify)(struct pci_dev *, bool ) ;
   void (*resume)(struct pci_dev *) ;
};

#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
struct pci_driver {
   struct list_head node ;
   char const *name ;
   struct pci_device_id const *id_table ;
   int (*probe)(struct pci_dev *, struct pci_device_id const *) ;
   void (*remove)(struct pci_dev *) ;
   int (*suspend)(struct pci_dev *, pm_message_t ) ;
   int (*suspend_late)(struct pci_dev *, pm_message_t ) ;
   int (*resume_early)(struct pci_dev *) ;
   int (*resume)(struct pci_dev *) ;
   void (*shutdown)(struct pci_dev *) ;
   int (*sriov_configure)(struct pci_dev *, int ) ;
   struct pci_error_handlers const *err_handler ;
   struct device_driver driver ;
   struct pci_dynids dynids ;
};

#line 116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
struct ipv4_devconf {
   void *sysctl ;
   int data[29U] ;
   unsigned long state[1U] ;
};

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/inetdevice.h"
struct in_ifaddr;

#line 20 
struct ip_mc_list;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/inetdevice.h"
struct in_device {
   struct net_device *dev ;
   atomic_t refcnt ;
   int dead ;
   struct in_ifaddr *ifa_list ;
   struct ip_mc_list *mc_list ;
   struct ip_mc_list **mc_hash ;
   int mc_count ;
   spinlock_t mc_tomb_lock ;
   struct ip_mc_list *mc_tomb ;
   unsigned long mr_v1_seen ;
   unsigned long mr_v2_seen ;
   unsigned long mr_maxdelay ;
   unsigned char mr_qrv ;
   unsigned char mr_gq_running ;
   unsigned char mr_ifc_count ;
   struct timer_list mr_gq_timer ;
   struct timer_list mr_ifc_timer ;
   struct neigh_parms *arp_parms ;
   struct ipv4_devconf cnf ;
   struct callback_head callback_head ;
};

#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/inetdevice.h"
struct in_ifaddr {
   struct hlist_node hash ;
   struct in_ifaddr *ifa_next ;
   struct in_device *ifa_dev ;
   struct callback_head callback_head ;
   __be32 ifa_local ;
   __be32 ifa_address ;
   __be32 ifa_mask ;
   __be32 ifa_broadcast ;
   unsigned char ifa_scope ;
   unsigned char ifa_prefixlen ;
   __u32 ifa_flags ;
   char ifa_label[16U] ;
   __u32 ifa_valid_lft ;
   __u32 ifa_preferred_lft ;
   unsigned long ifa_cstamp ;
   unsigned long ifa_tstamp ;
};

#line 268  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/inetdevice.h"
struct serv_entry {
   void *data ;
};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_uld.h"
union aopen_entry {
   void *data ;
   union aopen_entry *next ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_uld.h"
struct tid_info {
   void **tid_tab ;
   unsigned int ntids ;
   struct serv_entry *stid_tab ;
   unsigned long *stid_bmap ;
   unsigned int nstids ;
   unsigned int stid_base ;
   union aopen_entry *atid_tab ;
   unsigned int natids ;
   unsigned int atid_base ;
   struct filter_entry *ftid_tab ;
   unsigned int nftids ;
   unsigned int ftid_base ;
   unsigned int aftid_base ;
   unsigned int aftid_end ;
   unsigned int sftid_base ;
   unsigned int nsftids ;
   spinlock_t atid_lock ;
   union aopen_entry *afree ;
   unsigned int atids_in_use ;
   spinlock_t stid_lock ;
   unsigned int stids_in_use ;
   atomic_t tids_in_use ;
};

#line 201 
struct pkt_gl;

#line 203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_uld.h"
struct cxgb4_range {
   unsigned int start ;
   unsigned int size ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_uld.h"
struct cxgb4_virt_res {
   struct cxgb4_range ddp ;
   struct cxgb4_range iscsi ;
   struct cxgb4_range stag ;
   struct cxgb4_range rq ;
   struct cxgb4_range pbl ;
   struct cxgb4_range qp ;
   struct cxgb4_range cq ;
   struct cxgb4_range ocq ;
};

#line 358  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_uld.h"
struct port_stats {
   u64 tx_octets ;
   u64 tx_frames ;
   u64 tx_bcast_frames ;
   u64 tx_mcast_frames ;
   u64 tx_ucast_frames ;
   u64 tx_error_frames ;
   u64 tx_frames_64 ;
   u64 tx_frames_65_127 ;
   u64 tx_frames_128_255 ;
   u64 tx_frames_256_511 ;
   u64 tx_frames_512_1023 ;
   u64 tx_frames_1024_1518 ;
   u64 tx_frames_1519_max ;
   u64 tx_drop ;
   u64 tx_pause ;
   u64 tx_ppp0 ;
   u64 tx_ppp1 ;
   u64 tx_ppp2 ;
   u64 tx_ppp3 ;
   u64 tx_ppp4 ;
   u64 tx_ppp5 ;
   u64 tx_ppp6 ;
   u64 tx_ppp7 ;
   u64 rx_octets ;
   u64 rx_frames ;
   u64 rx_bcast_frames ;
   u64 rx_mcast_frames ;
   u64 rx_ucast_frames ;
   u64 rx_too_long ;
   u64 rx_jabber ;
   u64 rx_fcs_err ;
   u64 rx_len_err ;
   u64 rx_symbol_err ;
   u64 rx_runt ;
   u64 rx_frames_64 ;
   u64 rx_frames_65_127 ;
   u64 rx_frames_128_255 ;
   u64 rx_frames_256_511 ;
   u64 rx_frames_512_1023 ;
   u64 rx_frames_1024_1518 ;
   u64 rx_frames_1519_max ;
   u64 rx_pause ;
   u64 rx_ppp0 ;
   u64 rx_ppp1 ;
   u64 rx_ppp2 ;
   u64 rx_ppp3 ;
   u64 rx_ppp4 ;
   u64 rx_ppp5 ;
   u64 rx_ppp6 ;
   u64 rx_ppp7 ;
   u64 rx_ovflow0 ;
   u64 rx_ovflow1 ;
   u64 rx_ovflow2 ;
   u64 rx_ovflow3 ;
   u64 rx_trunc0 ;
   u64 rx_trunc1 ;
   u64 rx_trunc2 ;
   u64 rx_trunc3 ;
};

#line 243  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct sge_params {
   u32 hps ;
   u32 eq_qpp ;
   u32 iq_qpp ;
};

#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct tp_params {
   unsigned int tre ;
   unsigned int la_mask ;
   unsigned short tx_modq_map ;
   uint32_t dack_re ;
   unsigned short tx_modq[4U] ;
   u32 vlan_pri_map ;
   u32 ingress_config ;
   int vlan_shift ;
   int vnic_shift ;
   int port_shift ;
   int protocol_shift ;
};

#line 278  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct vpd_params {
   unsigned int cclk ;
   u8 ec[17U] ;
   u8 sn[25U] ;
   u8 id[17U] ;
   u8 pn[17U] ;
   u8 na[13U] ;
};

#line 287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct pci_params {
   unsigned char speed ;
   unsigned char width ;
};

#line 292 
enum chip_type {
    T4_A1 = 65,
    T4_A2 = 66,
    T4_FIRST_REV = 65,
    T4_LAST_REV = 66,
    T5_A0 = 80,
    T5_A1 = 81,
    T5_FIRST_REV = 80,
    T5_LAST_REV = 81,
    T6_A0 = 96,
    T6_FIRST_REV = 96,
    T6_LAST_REV = 96
};

#line 306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct devlog_params {
   u32 memtype ;
   u32 start ;
   u32 size ;
};

#line 323  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct arch_specific_params {
   u8 nchan ;
   u16 mps_rplc_size ;
   u16 vfcount ;
   u32 sge_fl_db ;
   u16 mps_tcam_size ;
};

#line 332  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct adapter_params {
   struct sge_params sge ;
   struct tp_params tp ;
   struct vpd_params vpd ;
   struct pci_params pci ;
   struct devlog_params devlog ;
   enum pcie_memwin drv_memwin ;
   unsigned int cim_la_size ;
   unsigned int sf_size ;
   unsigned int sf_nsec ;
   unsigned int sf_fw_start ;
   unsigned int fw_vers ;
   unsigned int tp_vers ;
   u8 api_vers[7U] ;
   unsigned short mtus[16U] ;
   unsigned short a_wnd[32U] ;
   unsigned short b_wnd[32U] ;
   unsigned char nports ;
   unsigned char portvec ;
   enum chip_type chip ;
   struct arch_specific_params arch ;
   unsigned char offload ;
   unsigned char bypass ;
   unsigned int ofldq_wr_cred ;
   bool ulptx_memwrite_dsgl ;
   unsigned int max_ordird_qp ;
   unsigned int max_ird_adapter ;
};

#line 369  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct sge_idma_monitor_state {
   unsigned int idma_1s_thresh ;
   unsigned int idma_stalled[2U] ;
   unsigned int idma_state[2U] ;
   unsigned int idma_qid[2U] ;
   unsigned int idma_warn[2U] ;
};

#line 2399  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
enum fw_port_type {
    FW_PORT_TYPE_FIBER_XFI = 0,
    FW_PORT_TYPE_FIBER_XAUI = 1,
    FW_PORT_TYPE_BT_SGMII = 2,
    FW_PORT_TYPE_BT_XFI = 3,
    FW_PORT_TYPE_BT_XAUI = 4,
    FW_PORT_TYPE_KX4 = 5,
    FW_PORT_TYPE_CX4 = 6,
    FW_PORT_TYPE_KX = 7,
    FW_PORT_TYPE_KR = 8,
    FW_PORT_TYPE_SFP = 9,
    FW_PORT_TYPE_BP_AP = 10,
    FW_PORT_TYPE_BP4_AP = 11,
    FW_PORT_TYPE_QSFP_10G = 12,
    FW_PORT_TYPE_QSA = 13,
    FW_PORT_TYPE_QSFP = 14,
    FW_PORT_TYPE_BP40_BA = 15,
    FW_PORT_TYPE_NONE = 31
};

#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct link_config {
   unsigned short supported ;
   unsigned short advertising ;
   unsigned short requested_speed ;
   unsigned short speed ;
   unsigned char requested_fc ;
   unsigned char fc ;
   unsigned char autoneg ;
   unsigned char link_ok ;
};

#line 444 
struct adapter;

#line 445 
struct sge_rspq;

#line 446 
enum cxgb4_dcb_state {
    CXGB4_DCB_STATE_START = 0,
    CXGB4_DCB_STATE_HOST = 1,
    CXGB4_DCB_STATE_FW_INCOMPLETE = 2,
    CXGB4_DCB_STATE_FW_ALLSYNCED = 3
};

#line 460 
enum cxgb4_dcb_fw_msgs {
    CXGB4_DCB_FW_PGID = 1,
    CXGB4_DCB_FW_PGRATE = 2,
    CXGB4_DCB_FW_PRIORATE = 4,
    CXGB4_DCB_FW_PFC = 8,
    CXGB4_DCB_FW_APP_ID = 16
};

#line 468  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct app_priority {
   u8 user_prio_map ;
   u8 sel_field ;
   u16 protocolid ;
};

#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.h"
struct port_dcb_info {
   enum cxgb4_dcb_state state ;
   enum cxgb4_dcb_fw_msgs msgs ;
   unsigned int supported ;
   bool enabled ;
   u32 pgid ;
   u8 dcb_version ;
   u8 pfcen ;
   u8 pg_num_tcs_supported ;
   u8 pfc_num_tcs_supported ;
   u8 pgrate[8U] ;
   u8 priorate[8U] ;
   u8 tsa[8U] ;
   struct app_priority app_priority[8U] ;
};

#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.h"
struct cxgb_fcoe {
   u8 flags ;
};

#line 55  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_fcoe.h"
struct port_info {
   struct adapter *adapter ;
   u16 viid ;
   s16 xact_addr_filt ;
   u16 rss_size ;
   s8 mdio_addr ;
   enum fw_port_type port_type ;
   u8 mod_type ;
   u8 port_id ;
   u8 tx_chan ;
   u8 lport ;
   u8 nqsets ;
   u8 first_qset ;
   u8 rss_mode ;
   struct link_config link_cfg ;
   u16 *rss ;
   struct port_stats stats_base ;
   struct port_dcb_info dcb ;
   struct cxgb_fcoe fcoe ;
};

#line 494  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct sge_fl {
   unsigned int avail ;
   unsigned int pend_cred ;
   unsigned int cidx ;
   unsigned int pidx ;
   unsigned long alloc_failed ;
   unsigned long large_alloc_failed ;
   unsigned long starving ;
   unsigned int cntxt_id ;
   unsigned int size ;
   struct rx_sw_desc *sdesc ;
   __be64 *desc ;
   dma_addr_t addr ;
   void *bar2_addr ;
   unsigned int bar2_qid ;
};

#line 517  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct pkt_gl {
   struct page_frag frags[17U] ;
   void *va ;
   unsigned int nfrags ;
   unsigned int tot_len ;
};

#line 527  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct sge_rspq {
   struct napi_struct napi ;
   __be64 const *cur_desc ;
   unsigned int cidx ;
   u8 gen ;
   u8 intr_params ;
   u8 next_intr_params ;
   u8 adaptive_rx ;
   u8 pktcnt_idx ;
   u8 uld ;
   u8 idx ;
   int offset ;
   u16 cntxt_id ;
   u16 abs_id ;
   __be64 *desc ;
   dma_addr_t phys_addr ;
   void *bar2_addr ;
   unsigned int bar2_qid ;
   unsigned int iqe_len ;
   unsigned int size ;
   struct adapter *adap ;
   struct net_device *netdev ;
   int (*handler)(struct sge_rspq *, __be64 const *, struct pkt_gl const *) ;
   unsigned int bpoll_state ;
   spinlock_t bpoll_lock ;
};

#line 567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct sge_eth_stats {
   unsigned long pkts ;
   unsigned long lro_pkts ;
   unsigned long lro_merged ;
   unsigned long rx_cso ;
   unsigned long vlan_ex ;
   unsigned long rx_drops ;
};

#line 578  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct sge_eth_rxq {
   struct sge_rspq rspq ;
   struct sge_fl fl ;
   struct sge_eth_stats stats ;
};

#line 584  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct sge_ofld_stats {
   unsigned long pkts ;
   unsigned long imm ;
   unsigned long an ;
   unsigned long nomem ;
};

#line 591  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct sge_ofld_rxq {
   struct sge_rspq rspq ;
   struct sge_fl fl ;
   struct sge_ofld_stats stats ;
};

#line 597  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct tx_desc {
   __be64 flit[8U] ;
};

#line 602  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct sge_txq {
   unsigned int in_use ;
   unsigned int size ;
   unsigned int cidx ;
   unsigned int pidx ;
   unsigned long stops ;
   unsigned long restarts ;
   unsigned int cntxt_id ;
   struct tx_desc *desc ;
   struct tx_sw_desc *sdesc ;
   struct sge_qstat *stat ;
   dma_addr_t phys_addr ;
   spinlock_t db_lock ;
   int db_disabled ;
   unsigned short db_pidx ;
   unsigned short db_pidx_inc ;
   void *bar2_addr ;
   unsigned int bar2_qid ;
};

#line 623  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct sge_eth_txq {
   struct sge_txq q ;
   struct netdev_queue *txq ;
   u8 dcb_prio ;
   unsigned long tso ;
   unsigned long tx_cso ;
   unsigned long vlan_ins ;
   unsigned long mapping_err ;
};

#line 635  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct sge_ofld_txq {
   struct sge_txq q ;
   struct adapter *adap ;
   struct sk_buff_head sendq ;
   struct tasklet_struct qresume_tsk ;
   u8 full ;
   unsigned long mapping_err ;
};

#line 644  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct sge_ctrl_txq {
   struct sge_txq q ;
   struct adapter *adap ;
   struct sk_buff_head sendq ;
   struct tasklet_struct qresume_tsk ;
   u8 full ;
};

#line 652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct sge {
   struct sge_eth_txq ethtxq[32U] ;
   struct sge_ofld_txq ofldtxq[16U] ;
   struct sge_ctrl_txq ctrlq[4U] ;
   struct sge_eth_rxq ethrxq[32U] ;
   struct sge_ofld_rxq ofldrxq[16U] ;
   struct sge_ofld_rxq rdmarxq[4U] ;
   struct sge_ofld_rxq rdmaciq[32U] ;
   struct sge_rspq fw_evtq ;
   struct sge_rspq intrq ;
   spinlock_t intrq_lock ;
   u16 max_ethqsets ;
   u16 ethqsets ;
   u16 ethtxq_rover ;
   u16 ofldqsets ;
   u16 rdmaqs ;
   u16 rdmaciqs ;
   u16 ofld_rxq[16U] ;
   u16 rdma_rxq[4U] ;
   u16 rdma_ciq[32U] ;
   u16 timer_val[6U] ;
   u8 counter_val[4U] ;
   u32 fl_pg_order ;
   u32 stat_len ;
   u32 pktshift ;
   u32 fl_align ;
   u32 fl_starve_thres ;
   struct sge_idma_monitor_state idma_monitor ;
   unsigned int egr_start ;
   unsigned int egr_sz ;
   unsigned int ingr_start ;
   unsigned int ingr_sz ;
   void **egr_map ;
   struct sge_rspq **ingr_map ;
   unsigned long *starving_fl ;
   unsigned long *txq_maperr ;
   unsigned long *blocked_fl ;
   struct timer_list rx_timer ;
   struct timer_list tx_timer ;
};

#line 697  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct doorbell_stats {
   u32 db_drop ;
   u32 db_empty ;
   u32 db_full ;
};

#line 720  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct __anonstruct_msix_info_342 {
   unsigned short vec ;
   char desc[26U] ;
};

#line 720  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct adapter {
   void *regs ;
   void *bar2 ;
   u32 t4_bar0 ;
   struct pci_dev *pdev ;
   struct device *pdev_dev ;
   unsigned int mbox ;
   unsigned int pf ;
   unsigned int flags ;
   enum chip_type chip ;
   int msg_enable ;
   struct adapter_params params ;
   struct cxgb4_virt_res vres ;
   unsigned int swintr ;
   struct __anonstruct_msix_info_342 msix_info[91U] ;
   struct doorbell_stats db_stats ;
   struct sge sge ;
   struct net_device *port[4U] ;
   u8 chan_map[4U] ;
   u32 filter_mode ;
   unsigned int l2t_start ;
   unsigned int l2t_end ;
   struct l2t_data *l2t ;
   unsigned int clipt_start ;
   unsigned int clipt_end ;
   struct clip_tbl *clipt ;
   void *uld_handle[2U] ;
   struct list_head list_node ;
   struct list_head rcu_node ;
   struct tid_info tids ;
   void **tid_release_head ;
   spinlock_t tid_release_lock ;
   struct workqueue_struct *workq ;
   struct work_struct tid_release_task ;
   struct work_struct db_full_task ;
   struct work_struct db_drop_task ;
   bool tid_release_task_busy ;
   struct dentry *debugfs_root ;
   spinlock_t stats_lock ;
   spinlock_t win0_lock ;
};

#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_ldst_addrval {
   __be32 addr ;
   __be32 val ;
};

#line 773  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_ldst_idctxt {
   __be32 physid ;
   __be32 msg_ctxtflush ;
   __be32 ctxt_data7 ;
   __be32 ctxt_data6 ;
   __be32 ctxt_data5 ;
   __be32 ctxt_data4 ;
   __be32 ctxt_data3 ;
   __be32 ctxt_data2 ;
   __be32 ctxt_data1 ;
   __be32 ctxt_data0 ;
};

#line 785  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_ldst_mdio {
   __be16 paddr_mmd ;
   __be16 raddr ;
   __be16 vctl ;
   __be16 rval ;
};

#line 791  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_ldst_mps_rplc {
   __be16 fid_idx ;
   __be16 rplcpf_pkd ;
   __be32 rplc255_224 ;
   __be32 rplc223_192 ;
   __be32 rplc191_160 ;
   __be32 rplc159_128 ;
   __be32 rplc127_96 ;
   __be32 rplc95_64 ;
   __be32 rplc63_32 ;
   __be32 rplc31_0 ;
};

#line 804  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_ldst_mps_atrb {
   __be16 fid_mpsid ;
   __be16 r2[3U] ;
   __be32 r3[2U] ;
   __be32 r4 ;
   __be32 atrb ;
   __be16 vlan[16U] ;
};

#line 812  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
union fw_ldst_mps {
   struct fw_ldst_mps_rplc rplc ;
   struct fw_ldst_mps_atrb atrb ;
};

#line 813  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_ldst_func {
   u8 access_ctl ;
   u8 mod_index ;
   __be16 ctl_id ;
   __be32 offset ;
   __be64 data0 ;
   __be64 data1 ;
};

#line 821  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_ldst_pcie {
   u8 ctrl_to_fn ;
   u8 bnum ;
   u8 r ;
   u8 ext_r ;
   u8 select_naccess ;
   u8 pcie_fn ;
   __be16 nset_pkd ;
   __be32 data[12U] ;
};

#line 831  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
union fw_ldst {
   struct fw_ldst_addrval addrval ;
   struct fw_ldst_idctxt idctxt ;
   struct fw_ldst_mdio mdio ;
   union fw_ldst_mps mps ;
   struct fw_ldst_func func ;
   struct fw_ldst_pcie pcie ;
};

#line 832  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_ldst_cmd {
   __be32 op_to_addrspace ;
   __be32 cycles_to_len16 ;
   union fw_ldst u ;
};

#line 1128 
enum fw_params_param_dev_fwcache {
    FW_PARAM_DEV_FWCACHE_FLUSH = 0,
    FW_PARAM_DEV_FWCACHE_FLUSHINV = 1
};

#line 3102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_devlog_e {
   __be64 timestamp ;
   __be32 seqno ;
   __be16 reserved1 ;
   __u8 level ;
   __u8 facility ;
   __u8 fmt[192U] ;
   __be32 params[8U] ;
   __be32 reserved3[4U] ;
};

#line 1450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct t4_debugfs_entry {
   char const *name ;
   struct file_operations const *ops ;
   umode_t mode ;
   unsigned char data ;
};

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.h"
struct seq_tab {
   int (*show)(struct seq_file *, void *, int ) ;
   unsigned int rows ;
   unsigned char width ;
   unsigned char skip_first ;
   char data[0U] ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.h"
struct clip_tbl {
   unsigned int clipt_start ;
   unsigned int clipt_size ;
   rwlock_t lock ;
   atomic_t nfree ;
   struct list_head ce_free_head ;
   void *cl_list ;
   struct list_head hash_list[0U] ;
};

#line 406  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
struct field_desc {
   char const *name ;
   unsigned int start ;
   unsigned int width ;
};

#line 918  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
struct devlog_info {
   unsigned int nentries ;
   unsigned int first ;
   struct fw_devlog_e log[0U] ;
};

#line 1724  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
struct rss_pf_conf {
   u32 rss_pf_map ;
   u32 rss_pf_mask ;
   u32 rss_pf_config ;
};

#line 1807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
struct rss_vf_conf {
   u32 rss_vf_vfl ;
   u32 rss_vf_vfh ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/asm-generic/int-ll64.h"
typedef short __s16;

#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/types.h"
typedef __u16 uint16_t;

#line 14  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
struct kernel_symbol {
   unsigned long value ;
   char const *name ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/init.h"
typedef void (*ctor_fn_t)(void);

#line 555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
struct bug_entry {
   int bug_addr_disp ;
   int file_disp ;
   unsigned short line ;
   unsigned short flags ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
typedef int pao_T__;

#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jump_label.h"
struct jump_entry;

#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
typedef u64 jump_label_t;

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/jump_label.h"
struct jump_entry {
   jump_label_t code ;
   jump_label_t target ;
   jump_label_t key ;
};

#line 250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/capability.h"
struct semaphore {
   raw_spinlock_t lock ;
   unsigned int count ;
   struct list_head wait_list ;
};

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
enum ldv_13172 {
    WORK_STRUCT_PENDING_BIT = 0,
    WORK_STRUCT_DELAYED_BIT = 1,
    WORK_STRUCT_PWQ_BIT = 2,
    WORK_STRUCT_LINKED_BIT = 3,
    WORK_STRUCT_STATIC_BIT = 4,
    WORK_STRUCT_COLOR_SHIFT = 5,
    WORK_STRUCT_COLOR_BITS = 4,
    WORK_STRUCT_PENDING = 1,
    WORK_STRUCT_DELAYED = 2,
    WORK_STRUCT_PWQ = 4,
    WORK_STRUCT_LINKED = 8,
    WORK_STRUCT_STATIC = 16,
    WORK_NR_COLORS = 15,
    WORK_NO_COLOR = 15,
    WORK_CPU_UNBOUND = 8192,
    WORK_STRUCT_FLAG_BITS = 9,
    WORK_OFFQ_FLAG_BASE = 5,
    __WORK_OFFQ_CANCELING = 5,
    WORK_OFFQ_CANCELING = 32,
    WORK_OFFQ_FLAG_BITS = 1,
    WORK_OFFQ_POOL_SHIFT = 6,
    WORK_OFFQ_LEFT = 58,
    WORK_OFFQ_POOL_BITS = 31,
    WORK_OFFQ_POOL_NONE = 2147483647,
    WORK_STRUCT_FLAG_MASK = 511,
    WORK_STRUCT_WQ_DATA_MASK = -512,
    WORK_STRUCT_NO_POOL = 137438953408,
    WORK_BUSY_PENDING = 1,
    WORK_BUSY_RUNNING = 2,
    WORKER_DESC_LEN = 24
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/socket.h"
struct msghdr {
   void *msg_name ;
   int msg_namelen ;
   struct iov_iter msg_iter ;
   void *msg_control ;
   __kernel_size_t msg_controllen ;
   unsigned int msg_flags ;
   struct kiocb *msg_iocb ;
};

#line 123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/random.h"
enum ldv_17183 {
    SS_FREE = 0,
    SS_UNCONNECTED = 1,
    SS_CONNECTING = 2,
    SS_CONNECTED = 3,
    SS_DISCONNECTING = 4
};

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
typedef enum ldv_17183 socket_state;

#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/net.h"
struct socket_wq {
   wait_queue_head_t wait ;
   struct fasync_struct *fasync_list ;
   struct callback_head rcu ;
};

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops;

#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct socket {
   socket_state state ;
   short type ;
   unsigned long flags ;
   struct socket_wq *wq ;
   struct file *file ;
   struct sock *sk ;
   struct proto_ops const *ops ;
};

#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
struct proto_ops {
   int family ;
   struct module *owner ;
   int (*release)(struct socket *) ;
   int (*bind)(struct socket *, struct sockaddr *, int ) ;
   int (*connect)(struct socket *, struct sockaddr *, int , int ) ;
   int (*socketpair)(struct socket *, struct socket *) ;
   int (*accept)(struct socket *, struct socket *, int ) ;
   int (*getname)(struct socket *, struct sockaddr *, int *, int ) ;
   unsigned int (*poll)(struct file *, struct socket *, struct poll_table_struct *) ;
   int (*ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*compat_ioctl)(struct socket *, unsigned int , unsigned long ) ;
   int (*listen)(struct socket *, int ) ;
   int (*shutdown)(struct socket *, int ) ;
   int (*setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct socket *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct socket *, int , int , char *, int *) ;
   int (*sendmsg)(struct socket *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct socket *, struct msghdr *, size_t , int ) ;
   int (*mmap)(struct file *, struct socket *, struct vm_area_struct *) ;
   ssize_t (*sendpage)(struct socket *, struct page *, int , size_t , int ) ;
   ssize_t (*splice_read)(struct socket *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ) ;
   int (*set_peek_off)(struct sock *, int ) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
struct exception_table_entry {
   int insn ;
   int fixup ;
};

#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6_mib_device {
   atomic_long_t mibs[6U] ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/snmp.h"
struct icmpv6msg_mib_device {
   atomic_long_t mibs[512U] ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netns/dccp.h"
struct in_addr {
   __be32 s_addr ;
};

#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/xfrm.h"
enum irqreturn {
    IRQ_NONE = 0,
    IRQ_HANDLED = 1,
    IRQ_WAKE_THREAD = 2
};

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/irqreturn.h"
typedef enum irqreturn irqreturn_t;

#line 92  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
typedef irqreturn_t (*irq_handler_t)(int , void *);

#line 1084  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/of.h"
struct mii_ioctl_data {
   __u16 phy_id ;
   __u16 reg_num ;
   __u16 val_in ;
   __u16 val_out ;
};

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/security.h"
struct xfrm_policy;

#line 98 
struct xfrm_state;

#line 114 
struct request_sock;

#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct netdev_hw_addr {
   struct list_head list ;
   unsigned char addr[32U] ;
   unsigned char type ;
   bool global_use ;
   int sync_cnt ;
   int refcount ;
   int synced ;
   struct callback_head callback_head ;
};

#line 449  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
struct firmware {
   size_t size ;
   u8 const *data ;
   struct page **pages ;
   void *priv ;
};

#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct vlan_ethhdr {
   unsigned char h_dest[6U] ;
   unsigned char h_source[6U] ;
   __be16 h_vlan_proto ;
   __be16 h_vlan_TCI ;
   __be16 h_vlan_encapsulated_proto ;
};

#line 126 
struct netpoll;

#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Addr;

#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u16 Elf64_Half;

#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u32 Elf64_Word;

#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef __u64 Elf64_Xword;

#line 190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
struct elf64_sym {
   Elf64_Word st_name ;
   unsigned char st_info ;
   unsigned char st_other ;
   Elf64_Half st_shndx ;
   Elf64_Addr st_value ;
   Elf64_Xword st_size ;
};

#line 198  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/elf.h"
typedef struct elf64_sym Elf64_Sym;

#line 53  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
struct kernel_param;

#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/elf.h"
struct kernel_param_ops {
   unsigned int flags ;
   int (*set)(char const *, struct kernel_param const *) ;
   int (*get)(char *, struct kernel_param const *) ;
   void (*free)(void *) ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string;

#line 62 
struct kparam_array;

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
union __anonunion_995 {
   void *arg ;
   struct kparam_string const *str ;
   struct kparam_array const *arr ;
};

#line 62  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kernel_param {
   char const *name ;
   struct module *mod ;
   struct kernel_param_ops const *ops ;
   u16 const perm ;
   s8 level ;
   u8 flags ;
   union __anonunion_995 __anonCompField_kernel_param_94 ;
};

#line 83  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_string {
   unsigned int maxlen ;
   char *string ;
};

#line 89  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct kparam_array {
   unsigned int max ;
   unsigned int elemsize ;
   unsigned int *num ;
   struct kernel_param_ops const *ops ;
   void *elem ;
};

#line 469  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/moduleparam.h"
struct latch_tree_node {
   struct rb_node node[2U] ;
};

#line 211  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rbtree_latch.h"
struct mod_arch_specific {
   
};

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_param_attrs;

#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_kobject {
   struct kobject kobj ;
   struct module *mod ;
   struct kobject *drivers_dir ;
   struct module_param_attrs *mp ;
   struct completion *kobj_completion ;
};

#line 48  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module_attribute {
   struct attribute attr ;
   ssize_t (*show)(struct module_attribute *, struct module_kobject *, char *) ;
   ssize_t (*store)(struct module_attribute *, struct module_kobject *, char const *, size_t ) ;
   void (*setup)(struct module *, char const *) ;
   int (*test)(struct module *) ;
   void (*free)(struct module *) ;
};

#line 290 
enum module_state {
    MODULE_STATE_LIVE = 0,
    MODULE_STATE_COMING = 1,
    MODULE_STATE_GOING = 2,
    MODULE_STATE_UNFORMED = 3
};

#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct mod_tree_node {
   struct module *mod ;
   struct latch_tree_node node ;
};

#line 304 
struct module_sect_attrs;

#line 304 
struct module_notes_attrs;

#line 304 
struct tracepoint;

#line 304 
struct trace_event_call;

#line 304 
struct trace_enum_map;

#line 304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/module.h"
struct module {
   enum module_state state ;
   struct list_head list ;
   char name[56U] ;
   struct module_kobject mkobj ;
   struct module_attribute *modinfo_attrs ;
   char const *version ;
   char const *srcversion ;
   struct kobject *holders_dir ;
   struct kernel_symbol const *syms ;
   unsigned long const *crcs ;
   unsigned int num_syms ;
   struct mutex param_lock ;
   struct kernel_param *kp ;
   unsigned int num_kp ;
   unsigned int num_gpl_syms ;
   struct kernel_symbol const *gpl_syms ;
   unsigned long const *gpl_crcs ;
   struct kernel_symbol const *unused_syms ;
   unsigned long const *unused_crcs ;
   unsigned int num_unused_syms ;
   unsigned int num_unused_gpl_syms ;
   struct kernel_symbol const *unused_gpl_syms ;
   unsigned long const *unused_gpl_crcs ;
   bool sig_ok ;
   bool async_probe_requested ;
   struct kernel_symbol const *gpl_future_syms ;
   unsigned long const *gpl_future_crcs ;
   unsigned int num_gpl_future_syms ;
   unsigned int num_exentries ;
   struct exception_table_entry *extable ;
   int (*init)(void) ;
   void *module_init ;
   void *module_core ;
   unsigned int init_size ;
   unsigned int core_size ;
   unsigned int init_text_size ;
   unsigned int core_text_size ;
   struct mod_tree_node mtn_core ;
   struct mod_tree_node mtn_init ;
   unsigned int init_ro_size ;
   unsigned int core_ro_size ;
   struct mod_arch_specific arch ;
   unsigned int taints ;
   unsigned int num_bugs ;
   struct list_head bug_list ;
   struct bug_entry *bug_table ;
   Elf64_Sym *symtab ;
   Elf64_Sym *core_symtab ;
   unsigned int num_symtab ;
   unsigned int core_num_syms ;
   char *strtab ;
   char *core_strtab ;
   struct module_sect_attrs *sect_attrs ;
   struct module_notes_attrs *notes_attrs ;
   char *args ;
   void *percpu ;
   unsigned int percpu_size ;
   unsigned int num_tracepoints ;
   struct tracepoint * const *tracepoints_ptrs ;
   struct jump_entry *jump_entries ;
   unsigned int num_jump_entries ;
   unsigned int num_trace_bprintk_fmt ;
   char const **trace_bprintk_fmt_start ;
   struct trace_event_call **trace_events ;
   unsigned int num_trace_events ;
   struct trace_enum_map **trace_enums ;
   unsigned int num_trace_enums ;
   unsigned int num_ftrace_callsites ;
   unsigned long *ftrace_callsites ;
   bool klp_alive ;
   struct list_head source_list ;
   struct list_head target_list ;
   void (*exit)(void) ;
   atomic_t refcnt ;
   ctor_fn_t (**ctors)(void) ;
   unsigned int num_ctors ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dmapool.h"
struct msix_entry {
   u32 vector ;
   u16 entry ;
};

#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
struct nla_policy {
   u16 type ;
   u16 len ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct rtnl_link_ops {
   struct list_head list ;
   char const *kind ;
   size_t priv_size ;
   void (*setup)(struct net_device *) ;
   int maxtype ;
   struct nla_policy const *policy ;
   int (*validate)(struct nlattr **, struct nlattr **) ;
   int (*newlink)(struct net *, struct net_device *, struct nlattr **, struct nlattr **) ;
   int (*changelink)(struct net_device *, struct nlattr **, struct nlattr **) ;
   void (*dellink)(struct net_device *, struct list_head *) ;
   size_t (*get_size)(struct net_device const *) ;
   int (*fill_info)(struct sk_buff *, struct net_device const *) ;
   size_t (*get_xstats_size)(struct net_device const *) ;
   int (*fill_xstats)(struct sk_buff *, struct net_device const *) ;
   unsigned int (*get_num_tx_queues)(void) ;
   unsigned int (*get_num_rx_queues)(void) ;
   int slave_maxtype ;
   struct nla_policy const *slave_policy ;
   int (*slave_validate)(struct nlattr **, struct nlattr **) ;
   int (*slave_changelink)(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **) ;
   size_t (*get_slave_size)(struct net_device const *, struct net_device const *) ;
   int (*fill_slave_info)(struct sk_buff *, struct net_device const *, struct net_device const *) ;
   struct net *(*get_link_net)(struct net_device const *) ;
};

#line 171 
struct neigh_table;

#line 171  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/rtnetlink.h"
struct neigh_parms {
   possible_net_t net ;
   struct net_device *dev ;
   struct list_head list ;
   int (*neigh_setup)(struct neighbour *) ;
   void (*neigh_cleanup)(struct neighbour *) ;
   struct neigh_table *tbl ;
   void *sysctl_table ;
   int dead ;
   atomic_t refcnt ;
   struct callback_head callback_head ;
   int reachable_time ;
   int data[13U] ;
   unsigned long data_state[1U] ;
};

#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_statistics {
   unsigned long allocs ;
   unsigned long destroys ;
   unsigned long hash_grows ;
   unsigned long res_failed ;
   unsigned long lookups ;
   unsigned long hits ;
   unsigned long rcv_probes_mcast ;
   unsigned long rcv_probes_ucast ;
   unsigned long periodic_gc_runs ;
   unsigned long forced_gc_runs ;
   unsigned long unres_discards ;
};

#line 129 
struct neigh_ops;

#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neighbour {
   struct neighbour *next ;
   struct neigh_table *tbl ;
   struct neigh_parms *parms ;
   unsigned long confirmed ;
   unsigned long updated ;
   rwlock_t lock ;
   atomic_t refcnt ;
   struct sk_buff_head arp_queue ;
   unsigned int arp_queue_len_bytes ;
   struct timer_list timer ;
   unsigned long used ;
   atomic_t probes ;
   __u8 flags ;
   __u8 nud_state ;
   __u8 type ;
   __u8 dead ;
   seqlock_t ha_lock ;
   unsigned char ha[32U] ;
   struct hh_cache hh ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   struct neigh_ops const *ops ;
   struct callback_head rcu ;
   struct net_device *dev ;
   u8 primary_key[0U] ;
};

#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_ops {
   int family ;
   void (*solicit)(struct neighbour *, struct sk_buff *) ;
   void (*error_report)(struct neighbour *, struct sk_buff *) ;
   int (*output)(struct neighbour *, struct sk_buff *) ;
   int (*connected_output)(struct neighbour *, struct sk_buff *) ;
};

#line 166  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct pneigh_entry {
   struct pneigh_entry *next ;
   possible_net_t net ;
   struct net_device *dev ;
   u8 flags ;
   u8 key[0U] ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_hash_table {
   struct neighbour **hash_buckets ;
   unsigned int hash_shift ;
   __u32 hash_rnd[4U] ;
   struct callback_head rcu ;
};

#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
struct neigh_table {
   int family ;
   int entry_size ;
   int key_len ;
   __be16 protocol ;
   __u32 (*hash)(void const *, struct net_device const *, __u32 *) ;
   bool (*key_eq)(struct neighbour const *, void const *) ;
   int (*constructor)(struct neighbour *) ;
   int (*pconstructor)(struct pneigh_entry *) ;
   void (*pdestructor)(struct pneigh_entry *) ;
   void (*proxy_redo)(struct sk_buff *) ;
   char *id ;
   struct neigh_parms parms ;
   struct list_head parms_list ;
   int gc_interval ;
   int gc_thresh1 ;
   int gc_thresh2 ;
   int gc_thresh3 ;
   unsigned long last_flush ;
   struct delayed_work gc_work ;
   struct timer_list proxy_timer ;
   struct sk_buff_head proxy_queue ;
   atomic_t entries ;
   rwlock_t lock ;
   unsigned long last_rand ;
   struct neigh_statistics *stats ;
   struct neigh_hash_table *nht ;
   struct pneigh_entry **phash_buckets ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6_stable_secret {
   bool initialized ;
   struct in6_addr secret ;
};

#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
struct ipv6_devconf {
   __s32 forwarding ;
   __s32 hop_limit ;
   __s32 mtu6 ;
   __s32 accept_ra ;
   __s32 accept_redirects ;
   __s32 autoconf ;
   __s32 dad_transmits ;
   __s32 rtr_solicits ;
   __s32 rtr_solicit_interval ;
   __s32 rtr_solicit_delay ;
   __s32 force_mld_version ;
   __s32 mldv1_unsolicited_report_interval ;
   __s32 mldv2_unsolicited_report_interval ;
   __s32 use_tempaddr ;
   __s32 temp_valid_lft ;
   __s32 temp_prefered_lft ;
   __s32 regen_max_retry ;
   __s32 max_desync_factor ;
   __s32 max_addresses ;
   __s32 accept_ra_defrtr ;
   __s32 accept_ra_pinfo ;
   __s32 accept_ra_rtr_pref ;
   __s32 rtr_probe_interval ;
   __s32 accept_ra_rt_info_max_plen ;
   __s32 proxy_ndp ;
   __s32 accept_source_route ;
   __s32 accept_ra_from_local ;
   __s32 optimistic_dad ;
   __s32 use_optimistic ;
   __s32 mc_forwarding ;
   __s32 disable_ipv6 ;
   __s32 accept_dad ;
   __s32 force_tllao ;
   __s32 ndisc_notify ;
   __s32 suppress_frag_ndisc ;
   __s32 accept_ra_mtu ;
   struct ipv6_stable_secret stable_secret ;
   void *sysctl ;
};

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/uaccess.h"
struct page_counter {
   atomic_long_t count ;
   unsigned long limit ;
   struct page_counter *parent ;
   unsigned long watermark ;
   unsigned long failcnt ;
};

#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/cacheflush.h"
struct sock_filter {
   __u16 code ;
   __u8 jt ;
   __u8 jf ;
   __u32 k ;
};

#line 49  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/filter.h"
struct bpf_insn {
   __u8 code ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) dst_reg : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) src_reg : 4 ;
   __s16 off ;
   __s32 imm ;
};

#line 81  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/bpf.h"
enum bpf_prog_type {
    BPF_PROG_TYPE_UNSPEC = 0,
    BPF_PROG_TYPE_SOCKET_FILTER = 1,
    BPF_PROG_TYPE_KPROBE = 2,
    BPF_PROG_TYPE_SCHED_CLS = 3,
    BPF_PROG_TYPE_SCHED_ACT = 4
};

#line 273 
struct bpf_prog_aux;

#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sock_fprog_kern {
   u16 len ;
   struct sock_filter *filter ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
union __anonunion_1016 {
   struct sock_filter insns[0U] ;
   struct bpf_insn insnsi[0U] ;
};

#line 325  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct bpf_prog {
   u16 pages ;
   bool jited ;
   bool gpl_compatible ;
   u32 len ;
   enum bpf_prog_type type ;
   struct bpf_prog_aux *aux ;
   struct sock_fprog_kern *orig_prog ;
   unsigned int (*bpf_func)(struct sk_buff const *, struct bpf_insn const *) ;
   union __anonunion_1016 __anonCompField_bpf_prog_100 ;
};

#line 342  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/filter.h"
struct sk_filter {
   atomic_t refcnt ;
   struct callback_head rcu ;
   struct bpf_prog *prog ;
};

#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist_nulls.h"
struct pollfd {
   int fd ;
   short events ;
   short revents ;
};

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
struct poll_table_struct {
   void (*_qproc)(struct file *, wait_queue_head_t *, struct poll_table_struct *) ;
   unsigned long _key ;
};

#line 163 
struct dn_route;

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
union __anonunion_1018 {
   struct dst_entry *next ;
   struct rtable *rt_next ;
   struct rt6_info *rt6_next ;
   struct dn_route *dn_next ;
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/poll.h"
struct dst_entry {
   struct callback_head callback_head ;
   struct dst_entry *child ;
   struct net_device *dev ;
   struct dst_ops *ops ;
   unsigned long _metrics ;
   unsigned long expires ;
   struct dst_entry *path ;
   struct dst_entry *from ;
   struct xfrm_state *xfrm ;
   int (*input)(struct sk_buff *) ;
   int (*output)(struct sock *, struct sk_buff *) ;
   unsigned short flags ;
   unsigned short pending_confirm ;
   short error ;
   short obsolete ;
   unsigned short header_len ;
   unsigned short trailer_len ;
   __u32 tclassid ;
   long __pad_to_align_refcnt[2U] ;
   atomic_t __refcnt ;
   int __use ;
   unsigned long lastuse ;
   union __anonunion_1018 __anonCompField_dst_entry_101 ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_socket_lock_t_1019 {
   spinlock_t slock ;
   int owned ;
   wait_queue_head_t wq ;
   struct lockdep_map dep_map ;
};

#line 124  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef struct __anonstruct_socket_lock_t_1019 socket_lock_t;

#line 124 
struct proto;

#line 130  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u32 __portpair;

#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
typedef __u64 __addrpair;

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_1021 {
   __be32 skc_daddr ;
   __be32 skc_rcv_saddr ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_1020 {
   __addrpair skc_addrpair ;
   struct __anonstruct_1021 __anonCompField___anonunion_1020_102 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_1022 {
   unsigned int skc_hash ;
   __u16 skc_u16hashes[2U] ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_1024 {
   __be16 skc_dport ;
   __u16 skc_num ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_1023 {
   __portpair skc_portpair ;
   struct __anonstruct_1024 __anonCompField___anonunion_1023_105 ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_1025 {
   struct hlist_node skc_bind_node ;
   struct hlist_nulls_node skc_portaddr_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_1026 {
   struct hlist_node skc_node ;
   struct hlist_nulls_node skc_nulls_node ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock_common {
   union __anonunion_1020 __anonCompField_sock_common_103 ;
   union __anonunion_1022 __anonCompField_sock_common_104 ;
   union __anonunion_1023 __anonCompField_sock_common_106 ;
   unsigned short skc_family ;
   unsigned char volatile skc_state ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) skc_reuse : 4 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_reuseport : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_ipv6only : 1 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) skc_net_refcnt : 1 ;
   int skc_bound_dev_if ;
   union __anonunion_1025 __anonCompField_sock_common_107 ;
   struct proto *skc_prot ;
   possible_net_t skc_net ;
   struct in6_addr skc_v6_daddr ;
   struct in6_addr skc_v6_rcv_saddr ;
   atomic64_t skc_cookie ;
   int skc_dontcopy_begin[0U] ;
   union __anonunion_1026 __anonCompField_sock_common_108 ;
   int skc_tx_queue_mapping ;
   atomic_t skc_refcnt ;
   int skc_dontcopy_end[0U] ;
};

#line 219 
struct cg_proto;

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct __anonstruct_sk_backlog_1027 {
   atomic_t rmem_alloc ;
   int len ;
   struct sk_buff *head ;
   struct sk_buff *tail ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct sock {
   struct sock_common __sk_common ;
   socket_lock_t sk_lock ;
   struct sk_buff_head sk_receive_queue ;
   struct __anonstruct_sk_backlog_1027 sk_backlog ;
   int sk_forward_alloc ;
   __u32 sk_rxhash ;
   u16 sk_incoming_cpu ;
   __u32 sk_txhash ;
   unsigned int sk_napi_id ;
   unsigned int sk_ll_usec ;
   atomic_t sk_drops ;
   int sk_rcvbuf ;
   struct sk_filter *sk_filter ;
   struct socket_wq *sk_wq ;
   struct xfrm_policy *sk_policy[2U] ;
   unsigned long sk_flags ;
   struct dst_entry *sk_rx_dst ;
   struct dst_entry *sk_dst_cache ;
   spinlock_t sk_dst_lock ;
   atomic_t sk_wmem_alloc ;
   atomic_t sk_omem_alloc ;
   int sk_sndbuf ;
   struct sk_buff_head sk_write_queue ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) sk_shutdown : 2 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_tx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) sk_no_check_rx : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) sk_userlocks : 4 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) sk_protocol : 8 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) sk_type : 16 ;
   int sk_wmem_queued ;
   gfp_t sk_allocation ;
   u32 sk_pacing_rate ;
   u32 sk_max_pacing_rate ;
   netdev_features_t sk_route_caps ;
   netdev_features_t sk_route_nocaps ;
   int sk_gso_type ;
   unsigned int sk_gso_max_size ;
   u16 sk_gso_max_segs ;
   int sk_rcvlowat ;
   unsigned long sk_lingertime ;
   struct sk_buff_head sk_error_queue ;
   struct proto *sk_prot_creator ;
   rwlock_t sk_callback_lock ;
   int sk_err ;
   int sk_err_soft ;
   u32 sk_ack_backlog ;
   u32 sk_max_ack_backlog ;
   __u32 sk_priority ;
   __u32 sk_cgrp_prioidx ;
   struct pid *sk_peer_pid ;
   struct cred const *sk_peer_cred ;
   long sk_rcvtimeo ;
   long sk_sndtimeo ;
   struct timer_list sk_timer ;
   ktime_t sk_stamp ;
   u16 sk_tsflags ;
   u32 sk_tskey ;
   struct socket *sk_socket ;
   void *sk_user_data ;
   struct page_frag sk_frag ;
   struct sk_buff *sk_send_head ;
   __s32 sk_peek_off ;
   int sk_write_pending ;
   void *sk_security ;
   __u32 sk_mark ;
   u32 sk_classid ;
   struct cg_proto *sk_cgrp ;
   void (*sk_state_change)(struct sock *) ;
   void (*sk_data_ready)(struct sock *) ;
   void (*sk_write_space)(struct sock *) ;
   void (*sk_error_report)(struct sock *) ;
   int (*sk_backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*sk_destruct)(struct sock *) ;
};

#line 914 
struct request_sock_ops;

#line 915 
struct timewait_sock_ops;

#line 917 
struct raw_hashinfo;

#line 932 
struct udp_table;

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
union __anonunion_h_1030 {
   struct inet_hashinfo *hashinfo ;
   struct udp_table *udp_table ;
   struct raw_hashinfo *raw_hash ;
};

#line 932  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct proto {
   void (*close)(struct sock *, long ) ;
   int (*connect)(struct sock *, struct sockaddr *, int ) ;
   int (*disconnect)(struct sock *, int ) ;
   struct sock *(*accept)(struct sock *, int , int *) ;
   int (*ioctl)(struct sock *, int , unsigned long ) ;
   int (*init)(struct sock *) ;
   void (*destroy)(struct sock *) ;
   void (*shutdown)(struct sock *, int ) ;
   int (*setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_setsockopt)(struct sock *, int , int , char *, unsigned int ) ;
   int (*compat_getsockopt)(struct sock *, int , int , char *, int *) ;
   int (*compat_ioctl)(struct sock *, unsigned int , unsigned long ) ;
   int (*sendmsg)(struct sock *, struct msghdr *, size_t ) ;
   int (*recvmsg)(struct sock *, struct msghdr *, size_t , int , int , int *) ;
   int (*sendpage)(struct sock *, struct page *, int , size_t , int ) ;
   int (*bind)(struct sock *, struct sockaddr *, int ) ;
   int (*backlog_rcv)(struct sock *, struct sk_buff *) ;
   void (*release_cb)(struct sock *) ;
   void (*hash)(struct sock *) ;
   void (*unhash)(struct sock *) ;
   void (*rehash)(struct sock *) ;
   int (*get_port)(struct sock *, unsigned short ) ;
   void (*clear_sk)(struct sock *, int ) ;
   unsigned int inuse_idx ;
   bool (*stream_memory_free)(struct sock const *) ;
   void (*enter_memory_pressure)(struct sock *) ;
   atomic_long_t *memory_allocated ;
   struct percpu_counter *sockets_allocated ;
   int *memory_pressure ;
   long *sysctl_mem ;
   int *sysctl_wmem ;
   int *sysctl_rmem ;
   int max_header ;
   bool no_autobind ;
   struct kmem_cache *slab ;
   unsigned int obj_size ;
   int slab_flags ;
   struct percpu_counter *orphan_count ;
   struct request_sock_ops *rsk_prot ;
   struct timewait_sock_ops *twsk_prot ;
   union __anonunion_h_1030 h ;
   struct module *owner ;
   char name[32U] ;
   struct list_head node ;
   int (*init_cgroup)(struct mem_cgroup *, struct cgroup_subsys *) ;
   void (*destroy_cgroup)(struct mem_cgroup *) ;
   struct cg_proto *(*proto_cgroup)(struct mem_cgroup *) ;
};

#line 1054  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/sock.h"
struct cg_proto {
   struct page_counter memory_allocated ;
   struct percpu_counter sockets_allocated ;
   int memory_pressure ;
   long sysctl_mem[3U] ;
   unsigned long flags ;
   struct mem_cgroup *memcg ;
};

#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jhash.h"
struct request_sock_ops {
   int family ;
   int obj_size ;
   struct kmem_cache *slab ;
   char *slab_name ;
   int (*rtx_syn_ack)(struct sock *, struct request_sock *) ;
   void (*send_ack)(struct sock *, struct sk_buff *, struct request_sock *) ;
   void (*send_reset)(struct sock *, struct sk_buff *) ;
   void (*destructor)(struct request_sock *) ;
   void (*syn_ack_timeout)(struct request_sock const *) ;
};

#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/request_sock.h"
struct request_sock {
   struct sock_common __req_common ;
   struct request_sock *dl_next ;
   struct sock *rsk_listener ;
   u16 mss ;
   u8 num_retrans ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cookie_ts : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(7))) num_timeout : 7 ;
   u32 window_clamp ;
   u32 rcv_wnd ;
   u32 ts_recent ;
   struct timer_list rsk_timer ;
   struct request_sock_ops const *rsk_ops ;
   struct sock *sk ;
   u32 *saved_syn ;
   u32 secid ;
   u32 peer_secid ;
};

#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_connection_sock.h"
struct timewait_sock_ops {
   struct kmem_cache *twsk_slab ;
   char *twsk_slab_name ;
   unsigned int twsk_obj_size ;
   int (*twsk_unique)(struct sock *, struct sock *, void *) ;
   void (*twsk_destructor)(struct sock *) ;
};

#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ipv6.h"
struct inet6_ifaddr {
   struct in6_addr addr ;
   __u32 prefix_len ;
   __u32 valid_lft ;
   __u32 prefered_lft ;
   atomic_t refcnt ;
   spinlock_t lock ;
   int state ;
   __u32 flags ;
   __u8 dad_probes ;
   __u8 stable_privacy_retry ;
   __u16 scope ;
   unsigned long cstamp ;
   unsigned long tstamp ;
   struct delayed_work dad_work ;
   struct inet6_dev *idev ;
   struct rt6_info *rt ;
   struct hlist_node addr_lst ;
   struct list_head if_list ;
   struct list_head tmp_list ;
   struct inet6_ifaddr *ifpub ;
   int regen_count ;
   bool tokenized ;
   struct callback_head rcu ;
   struct in6_addr peer_addr ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ip6_sf_list {
   struct ip6_sf_list *sf_next ;
   struct in6_addr sf_addr ;
   unsigned long sf_count[2U] ;
   unsigned char sf_gsresp ;
   unsigned char sf_oldin ;
   unsigned char sf_crcount ;
};

#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ifmcaddr6 {
   struct in6_addr mca_addr ;
   struct inet6_dev *idev ;
   struct ifmcaddr6 *next ;
   struct ip6_sf_list *mca_sources ;
   struct ip6_sf_list *mca_tomb ;
   unsigned int mca_sfmode ;
   unsigned char mca_crcount ;
   unsigned long mca_sfcount[2U] ;
   struct timer_list mca_timer ;
   unsigned int mca_flags ;
   int mca_users ;
   atomic_t mca_refcnt ;
   spinlock_t mca_lock ;
   unsigned long mca_cstamp ;
   unsigned long mca_tstamp ;
};

#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ifacaddr6 {
   struct in6_addr aca_addr ;
   struct inet6_dev *aca_idev ;
   struct rt6_info *aca_rt ;
   struct ifacaddr6 *aca_next ;
   int aca_users ;
   atomic_t aca_refcnt ;
   unsigned long aca_cstamp ;
   unsigned long aca_tstamp ;
};

#line 152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct ipv6_devstat {
   struct proc_dir_entry *proc_dir_entry ;
   struct ipstats_mib *ipv6 ;
   struct icmpv6_mib_device *icmpv6dev ;
   struct icmpv6msg_mib_device *icmpv6msgdev ;
};

#line 163  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/if_inet6.h"
struct inet6_dev {
   struct net_device *dev ;
   struct list_head addr_list ;
   struct ifmcaddr6 *mc_list ;
   struct ifmcaddr6 *mc_tomb ;
   spinlock_t mc_lock ;
   unsigned char mc_qrv ;
   unsigned char mc_gq_running ;
   unsigned char mc_ifc_count ;
   unsigned char mc_dad_count ;
   unsigned long mc_v1_seen ;
   unsigned long mc_qi ;
   unsigned long mc_qri ;
   unsigned long mc_maxdelay ;
   struct timer_list mc_gq_timer ;
   struct timer_list mc_ifc_timer ;
   struct timer_list mc_dad_timer ;
   struct ifacaddr6 *ac_list ;
   rwlock_t lock ;
   atomic_t refcnt ;
   __u32 if_flags ;
   int dead ;
   u8 rndid[8U] ;
   struct timer_list regen_timer ;
   struct list_head tempaddr_list ;
   struct in6_addr token ;
   struct neigh_parms *nd_parms ;
   struct ipv6_devconf cnf ;
   struct ipv6_devstat stats ;
   struct timer_list rs_timer ;
   __u8 rs_probes ;
   __u8 addr_gen_mode ;
   unsigned long tstamp ;
   struct callback_head rcu ;
};

#line 84  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/proc_fs.h"
union inet_addr {
   __u32 all[4U] ;
   __be32 ip ;
   __be32 ip6[4U] ;
   struct in_addr in ;
   struct in6_addr in6 ;
};

#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netpoll.h"
struct netpoll {
   struct net_device *dev ;
   char dev_name[16U] ;
   char const *name ;
   union inet_addr local_ip ;
   union inet_addr remote_ip ;
   bool ipv6 ;
   u16 local_port ;
   u16 remote_port ;
   u8 remote_mac[6U] ;
   struct work_struct cleanup_work ;
};

#line 35  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netpoll.h"
struct netpoll_info {
   atomic_t refcnt ;
   struct semaphore dev_lock ;
   struct sk_buff_head txq ;
   struct delayed_work tx_work ;
   struct netpoll *netpoll ;
   struct callback_head rcu ;
};

#line 181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_uld.h"
enum cxgb4_uld {
    CXGB4_ULD_RDMA = 0,
    CXGB4_ULD_ISCSI = 1,
    CXGB4_ULD_MAX = 2
};

#line 187 
enum cxgb4_state {
    CXGB4_STATE_UP = 0,
    CXGB4_STATE_START_RECOVERY = 1,
    CXGB4_STATE_DOWN = 2,
    CXGB4_STATE_DETACH = 3
};

#line 194 
enum cxgb4_control {
    CXGB4_CONTROL_DB_FULL = 0,
    CXGB4_CONTROL_DB_EMPTY = 1,
    CXGB4_CONTROL_DB_DROP = 2
};

#line 202 
struct tp_tcp_stats;

#line 222  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_uld.h"
struct cxgb4_lld_info {
   struct pci_dev *pdev ;
   struct l2t_data *l2t ;
   struct tid_info *tids ;
   struct net_device **ports ;
   struct cxgb4_virt_res const *vr ;
   unsigned short const *mtus ;
   unsigned short const *rxq_ids ;
   unsigned short const *ciq_ids ;
   unsigned short nrxq ;
   unsigned short ntxq ;
   unsigned short nciq ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) nchan : 4 ;
   unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) nports : 4 ;
   unsigned char wr_cred ;
   unsigned char adapter_type ;
   unsigned char fw_api_ver ;
   unsigned int fw_vers ;
   unsigned int iscsi_iolen ;
   unsigned int cclk_ps ;
   unsigned short udb_density ;
   unsigned short ucq_density ;
   unsigned short filt_mode ;
   unsigned short tx_modq[4U] ;
   void *gts_reg ;
   void *db_reg ;
   int dbfifo_int_thresh ;
   unsigned int sge_ingpadboundary ;
   unsigned int sge_egrstatuspagesize ;
   unsigned int sge_pktshift ;
   unsigned int pf ;
   bool enable_fw_ofld_conn ;
   unsigned int max_ordird_qp ;
   unsigned int max_ird_adapter ;
   bool ulptx_memwrite_dsgl ;
   int nodeid ;
};

#line 269  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_uld.h"
struct cxgb4_uld_info {
   char const *name ;
   void *(*add)(struct cxgb4_lld_info const *) ;
   int (*rx_handler)(void *, __be64 const *, struct pkt_gl const *) ;
   int (*state_change)(void *, enum cxgb4_state ) ;
   int (*control)(void *, enum cxgb4_control  , ...) ;
};

#line 303 
enum cxgb4_bar2_qtype {
    CXGB4_BAR2_QTYPE_EGRESS = 0,
    CXGB4_BAR2_QTYPE_INGRESS = 1
};

#line 340 
enum dev_master {
    MASTER_CANT = 0,
    MASTER_MAY = 1,
    MASTER_MUST = 2
};

#line 346 
enum dev_state {
    DEV_STATE_UNINIT = 0,
    DEV_STATE_INIT = 1,
    DEV_STATE_ERR = 2
};

#line 201  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct tp_tcp_stats {
   u32 tcp_out_rsts ;
   u64 tcp_in_segs ;
   u64 tcp_out_segs ;
   u64 tcp_retrans_segs ;
};

#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_filter_wr {
   __be32 op_pkd ;
   __be32 len16_pkd ;
   __be64 r3 ;
   __be32 tid_to_iq ;
   __be32 del_filter_to_l2tix ;
   __be16 ethtype ;
   __be16 ethtypem ;
   __u8 frag_to_ovlan_vldm ;
   __u8 smac_sel ;
   __be16 rx_chan_rx_rpl_iq ;
   __be32 maci_to_matchtypem ;
   __u8 ptcl ;
   __u8 ptclm ;
   __u8 ttyp ;
   __u8 ttypm ;
   __be16 ivlan ;
   __be16 ivlanm ;
   __be16 ovlan ;
   __be16 ovlanm ;
   __u8 lip[16U] ;
   __u8 lipm[16U] ;
   __u8 fip[16U] ;
   __u8 fipm[16U] ;
   __be16 lp ;
   __be16 lpm ;
   __be16 fp ;
   __be16 fpm ;
   __be16 r7 ;
   __u8 sma[6U] ;
};

#line 1014  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_caps_config_cmd {
   __be32 op_to_write ;
   __be32 cfvalid_to_len16 ;
   __be32 r2 ;
   __be32 hwmbitmap ;
   __be16 nbmcaps ;
   __be16 linkcaps ;
   __be16 switchcaps ;
   __be16 r3 ;
   __be16 niccaps ;
   __be16 ofldcaps ;
   __be16 rdmacaps ;
   __be16 r4 ;
   __be16 iscsicaps ;
   __be16 fcoecaps ;
   __be32 cfcsum ;
   __be32 finiver ;
   __be32 finicsum ;
};

#line 2293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_l1cfg {
   __be32 rcap ;
   __be32 r ;
};

#line 2320  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_l2cfg {
   __u8 ctlbf ;
   __u8 ovlan3_to_ivlan0 ;
   __be16 ivlantype ;
   __be16 txipg_force_pinfo ;
   __be16 mtu ;
   __be16 ovlan0mask ;
   __be16 ovlan0type ;
   __be16 ovlan1mask ;
   __be16 ovlan1type ;
   __be16 ovlan2mask ;
   __be16 ovlan2type ;
   __be16 ovlan3mask ;
   __be16 ovlan3type ;
};

#line 2335  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_info {
   __be32 lstatus_to_modtype ;
   __be16 pcap ;
   __be16 acap ;
   __be16 mtu ;
   __u8 cbllen ;
   __u8 auxlinfo ;
   __u8 dcbxdis_pkd ;
   __u8 r8_lo[3U] ;
   __be64 r9 ;
};

#line 2346  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_diags {
   __u8 diagop ;
   __u8 r[3U] ;
   __be32 diagval ;
};

#line 2351  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_dcb_pgid {
   __u8 type ;
   __u8 apply_pkd ;
   __u8 r10_lo[2U] ;
   __be32 pgid ;
   __be64 r11 ;
};

#line 2359  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_dcb_pgrate {
   __u8 type ;
   __u8 apply_pkd ;
   __u8 r10_lo[5U] ;
   __u8 num_tcs_supported ;
   __u8 pgrate[8U] ;
   __u8 tsa[8U] ;
};

#line 2367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_dcb_priorate {
   __u8 type ;
   __u8 apply_pkd ;
   __u8 r10_lo[6U] ;
   __u8 strict_priorate[8U] ;
};

#line 2373  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_dcb_pfc {
   __u8 type ;
   __u8 pfcen ;
   __u8 r10[5U] ;
   __u8 max_pfc_tcs ;
   __be64 r11 ;
};

#line 2380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_app_priority {
   __u8 type ;
   __u8 r10[2U] ;
   __u8 idx ;
   __u8 user_prio_map ;
   __u8 sel_field ;
   __be16 protocolid ;
   __be64 r12 ;
};

#line 2389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_dcb_control {
   __u8 type ;
   __u8 all_syncd_pkd ;
   __be16 dcb_version_to_app_state ;
   __be32 r11 ;
   __be64 r12 ;
};

#line 2396  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
union fw_port_dcb {
   struct fw_port_dcb_pgid pgid ;
   struct fw_port_dcb_pgrate pgrate ;
   struct fw_port_dcb_priorate priorate ;
   struct fw_port_dcb_pfc pfc ;
   struct fw_port_app_priority app_priority ;
   struct fw_port_dcb_control control ;
};

#line 2397  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
union fw_port {
   struct fw_port_l1cfg l1cfg ;
   struct fw_port_l2cfg l2cfg ;
   struct fw_port_info info ;
   struct fw_port_diags diags ;
   union fw_port_dcb dcb ;
};

#line 2398  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_port_cmd {
   __be32 op_to_portid ;
   __be32 action_to_len16 ;
   union fw_port u ;
};

#line 2991  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_hdr {
   u8 ver ;
   u8 chip ;
   __be16 len512 ;
   __be32 fw_ver ;
   __be32 tp_microcode_ver ;
   u8 intfver_nic ;
   u8 intfver_vnic ;
   u8 intfver_ofld ;
   u8 intfver_ri ;
   u8 intfver_iscsipdu ;
   u8 intfver_iscsi ;
   u8 intfver_fcoepdu ;
   u8 intfver_fcoe ;
   __u32 reserved2 ;
   __u32 reserved3 ;
   __u32 reserved4 ;
   __be32 flags ;
   __be32 reserved6[23U] ;
};

#line 3160  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_info {
   u8 chip ;
   char *fs_name ;
   char *fw_mod_name ;
   struct fw_hdr fw_hdr ;
};

#line 453  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
enum cxgb4_dcb_state_input {
    CXGB4_DCB_INPUT_FW_DISABLED = 0,
    CXGB4_DCB_INPUT_FW_ENABLED = 1,
    CXGB4_DCB_INPUT_FW_INCOMPLETE = 2,
    CXGB4_DCB_INPUT_FW_ALLSYNCED = 3
};

#line 774  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct ch_filter_tuple {
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) ethtype : 16 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) frag : 1 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ivlan_vld : 1 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ovlan_vld : 1 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pfvf_vld : 1 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(9))) macidx : 9 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) fcoe : 1 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) iport : 3 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) matchtype : 3 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) proto : 8 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) tos : 8 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) pf : 8 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) vf : 8 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) ivlan : 16 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(16))) ovlan : 16 ;
   uint8_t lip[16U] ;
   uint8_t fip[16U] ;
   uint16_t lport ;
   uint16_t fport ;
};

#line 838  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct ch_filter_specification {
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) hitcnts : 1 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) prio : 1 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) type : 1 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) action : 2 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) rpttid : 1 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) dirsteer : 1 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(10))) iq : 10 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) maskhash : 1 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) dirsteerhash : 1 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) eport : 2 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) newdmac : 1 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) newsmac : 1 ;
   uint32_t __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) newvlan : 2 ;
   uint8_t dmac[6U] ;
   uint8_t smac[6U] ;
   uint16_t vlan ;
   struct ch_filter_tuple val ;
   struct ch_filter_tuple mask ;
};

#line 1294 
enum t4_bar2_qtype {
    T4_BAR2_QTYPE_EGRESS = 0,
    T4_BAR2_QTYPE_INGRESS = 1
};

#line 1565  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
union opcode_tid {
   __be32 opcode_tid ;
   u8 opcode ;
};

#line 169  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct rss_header {
   u8 opcode ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) channel : 2 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) filter_hit : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) filter_tid : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))) hash_type : 2 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ipv6 : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) send2fw : 1 ;
   __be16 qid ;
   __be32 hash_val ;
};

#line 213  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct work_request_hdr {
   __be32 wr_hi ;
   __be32 wr_mid ;
   __be64 wr_lo ;
};

#line 219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_pass_open_req {
   struct work_request_hdr wr ;
   union opcode_tid ot ;
   __be16 local_port ;
   __be16 peer_port ;
   __be32 local_ip ;
   __be32 peer_ip ;
   __be64 opt0 ;
   __be64 opt1 ;
};

#line 294  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_pass_open_req6 {
   struct work_request_hdr wr ;
   union opcode_tid ot ;
   __be16 local_port ;
   __be16 peer_port ;
   __be64 local_ip_hi ;
   __be64 local_ip_lo ;
   __be64 peer_ip_hi ;
   __be64 peer_ip_lo ;
   __be64 opt0 ;
   __be64 opt1 ;
};

#line 544  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_set_tcb_rpl {
   union opcode_tid ot ;
   __be16 rsvd ;
   u8 cookie ;
   u8 status ;
   __be64 oldval ;
};

#line 575  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_close_listsvr_req {
   struct work_request_hdr wr ;
   union opcode_tid ot ;
   __be16 reply_ctrl ;
   __be16 rsvd ;
};

#line 628  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_tid_release {
   struct work_request_hdr wr ;
   union opcode_tid ot ;
   __be32 rsvd ;
};

#line 961  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_l2t_write_rpl {
   union opcode_tid ot ;
   u8 status ;
   u8 rsvd[3U] ;
};

#line 984  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_sge_egr_update {
   __be32 opcode_qid ;
   __be16 cidx ;
   __be16 pidx ;
};

#line 1021  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_fw4_msg {
   u8 opcode ;
   u8 type ;
   __be16 rsvd0 ;
   __be32 rsvd1 ;
   __be64 data[2U] ;
};

#line 1039  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_fw6_msg {
   u8 opcode ;
   u8 type ;
   __be16 rsvd0 ;
   __be32 rsvd1 ;
   __be64 data[4U] ;
};

#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.h"
struct l2t_entry {
   u16 state ;
   u16 idx ;
   u32 addr[4U] ;
   int ifindex ;
   struct neighbour *neigh ;
   struct l2t_entry *first ;
   struct l2t_entry *next ;
   struct sk_buff *arpq_head ;
   struct sk_buff *arpq_tail ;
   spinlock_t lock ;
   atomic_t refcnt ;
   u16 hash ;
   u16 vlan ;
   u8 v6 ;
   u8 lport ;
   u8 dmac[6U] ;
};

#line 86  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct filter_entry {
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) valid : 1 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) locked : 1 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) pending : 1 ;
   u32 __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) smtidx : 8 ;
   struct l2t_entry *l2t ;
   struct ch_filter_specification fs ;
};

#line 3236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct info_10gbt_phy_fw {
   unsigned int phy_fw_id ;
   char *phy_fw_file ;
   int (*phy_fw_version)(u8 const *, size_t ) ;
   int phy_flash ;
};

#line 3446  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
union __anonunion_last_1065 {
   __be32 word ;
   char buf[4U] ;
};

#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/types.h"
typedef __u16 __sum16;

#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct free_area {
   struct list_head free_list[6U] ;
   unsigned long nr_free ;
};

#line 96 
struct pglist_data;

#line 97  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zone_padding {
   char x[0U] ;
};

#line 202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zone_reclaim_stat {
   unsigned long recent_rotated[2U] ;
   unsigned long recent_scanned[2U] ;
};

#line 215 
struct zone;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct lruvec {
   struct list_head lists[5U] ;
   struct zone_reclaim_stat reclaim_stat ;
   struct zone *zone ;
};

#line 247  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct per_cpu_pages {
   int count ;
   int high ;
   int batch ;
   struct list_head lists[3U] ;
};

#line 260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct per_cpu_pageset {
   struct per_cpu_pages pcp ;
   s8 expire ;
   s8 stat_threshold ;
   s8 vm_stat_diff[39U] ;
};

#line 270 
enum zone_type {
    ZONE_DMA = 0,
    ZONE_DMA32 = 1,
    ZONE_NORMAL = 2,
    ZONE_MOVABLE = 3,
    __MAX_NR_ZONES = 4
};

#line 278  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zone {
   unsigned long watermark[3U] ;
   long lowmem_reserve[4U] ;
   int node ;
   unsigned int inactive_ratio ;
   struct pglist_data *zone_pgdat ;
   struct per_cpu_pageset *pageset ;
   unsigned long dirty_balance_reserve ;
   unsigned long min_unmapped_pages ;
   unsigned long min_slab_pages ;
   unsigned long zone_start_pfn ;
   unsigned long managed_pages ;
   unsigned long spanned_pages ;
   unsigned long present_pages ;
   char const *name ;
   int nr_migrate_reserve_block ;
   unsigned long nr_isolate_pageblock ;
   seqlock_t span_seqlock ;
   wait_queue_head_t *wait_table ;
   unsigned long wait_table_hash_nr_entries ;
   unsigned long wait_table_bits ;
   struct zone_padding _pad1_ ;
   struct free_area free_area[11U] ;
   unsigned long flags ;
   spinlock_t lock ;
   struct zone_padding _pad2_ ;
   spinlock_t lru_lock ;
   struct lruvec lruvec ;
   atomic_long_t inactive_age ;
   unsigned long percpu_drift_mark ;
   unsigned long compact_cached_free_pfn ;
   unsigned long compact_cached_migrate_pfn[2U] ;
   unsigned int compact_considered ;
   unsigned int compact_defer_shift ;
   int compact_order_failed ;
   bool compact_blockskip_flush ;
   struct zone_padding _pad3_ ;
   atomic_long_t vm_stat[39U] ;
};

#line 567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zonelist_cache {
   unsigned short z_to_n[4096U] ;
   unsigned long fullzones[64U] ;
   unsigned long last_full_zap ;
};

#line 654  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zoneref {
   struct zone *zone ;
   int zone_idx ;
};

#line 667  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct zonelist {
   struct zonelist_cache *zlcache_ptr ;
   struct zoneref _zonerefs[4097U] ;
   struct zonelist_cache zlcache ;
};

#line 705  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
struct pglist_data {
   struct zone node_zones[4U] ;
   struct zonelist node_zonelists[2U] ;
   int nr_zones ;
   spinlock_t node_size_lock ;
   unsigned long node_start_pfn ;
   unsigned long node_present_pages ;
   unsigned long node_spanned_pages ;
   int node_id ;
   wait_queue_head_t kswapd_wait ;
   wait_queue_head_t pfmemalloc_wait ;
   struct task_struct *kswapd ;
   int kswapd_max_order ;
   enum zone_type classzone_idx ;
   spinlock_t numabalancing_migrate_lock ;
   unsigned long numabalancing_migrate_next_window ;
   unsigned long numabalancing_migrate_nr_pages ;
   unsigned long first_deferred_pfn ;
};

#line 773  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmzone.h"
typedef struct pglist_data pg_data_t;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct;

#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
typedef struct skb_frag_struct skb_frag_t;

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct __anonstruct_page_1289 {
   struct page *p ;
};

#line 216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_frag_struct {
   struct __anonstruct_page_1289 page ;
   __u32 page_offset ;
   __u32 size ;
};

#line 249  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_hwtstamps {
   ktime_t hwtstamp ;
};

#line 319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
struct skb_shared_info {
   unsigned char nr_frags ;
   __u8 tx_flags ;
   unsigned short gso_size ;
   unsigned short gso_segs ;
   unsigned short gso_type ;
   struct sk_buff *frag_list ;
   struct skb_shared_hwtstamps hwtstamps ;
   u32 tskey ;
   __be32 ip6_frag_id ;
   atomic_t dataref ;
   void *destructor_arg ;
   skb_frag_t frags[17U] ;
};

#line 890 
enum pkt_hash_types {
    PKT_HASH_TYPE_NONE = 0,
    PKT_HASH_TYPE_L2 = 1,
    PKT_HASH_TYPE_L3 = 2,
    PKT_HASH_TYPE_L4 = 3
};

#line 331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
enum gro_result {
    GRO_MERGED = 0,
    GRO_MERGED_FREE = 1,
    GRO_HELD = 2,
    GRO_NORMAL = 3,
    GRO_DROP = 4
};

#line 339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
typedef enum gro_result gro_result_t;

#line 2893 
enum skb_free_reason {
    SKB_REASON_CONSUMED = 0,
    SKB_REASON_DROPPED = 1
};

#line 646  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct iphdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) ihl : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 tos ;
   __be16 tot_len ;
   __be16 id ;
   __be16 frag_off ;
   __u8 ttl ;
   __u8 protocol ;
   __sum16 check ;
   __be32 saddr ;
   __be32 daddr ;
};

#line 106  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ipv6.h"
struct ipv6hdr {
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) priority : 4 ;
   __u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) version : 4 ;
   __u8 flow_lbl[3U] ;
   __be16 payload_len ;
   __u8 nexthdr ;
   __u8 hop_limit ;
   struct in6_addr saddr ;
   struct in6_addr daddr ;
};

#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_timewait_sock.h"
struct tcphdr {
   __be16 source ;
   __be16 dest ;
   __be32 seq ;
   __be32 ack_seq ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) res1 : 4 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) doff : 4 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) fin : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) syn : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) rst : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) psh : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ack : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) urg : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ece : 1 ;
   __u16 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cwr : 1 ;
   __be16 window ;
   __sum16 check ;
   __be16 urg_ptr ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cryptohash.h"
union __anonunion_1442 {
   __be32 a4 ;
   __be32 a6[4U] ;
   struct in6_addr in6 ;
};

#line 19  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cryptohash.h"
struct inetpeer_addr_base {
   union __anonunion_1442 __anonCompField_inetpeer_addr_base_108 ;
};

#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inetpeer_addr {
   struct inetpeer_addr_base addr ;
   __u16 family ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
union __anonunion_1443 {
   struct list_head gc_list ;
   struct callback_head gc_rcu ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct __anonstruct_1445 {
   atomic_t rid ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
union __anonunion_1444 {
   struct __anonstruct_1445 __anonCompField___anonunion_1444_110 ;
   struct callback_head rcu ;
   struct inet_peer *gc_next ;
};

#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inet_peer {
   struct inet_peer *avl_left ;
   struct inet_peer *avl_right ;
   struct inetpeer_addr daddr ;
   __u32 avl_height ;
   u32 metrics[16U] ;
   u32 rate_tokens ;
   unsigned long rate_last ;
   union __anonunion_1443 __anonCompField_inet_peer_109 ;
   union __anonunion_1444 __anonCompField_inet_peer_111 ;
   __u32 dtime ;
   atomic_t refcnt ;
};

#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inetpeer.h"
struct inet_peer_base {
   struct inet_peer *root ;
   seqlock_t lock ;
   int total ;
};

#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/route.h"
struct uncached_list;

#line 51  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/route.h"
struct rtable {
   struct dst_entry dst ;
   int rt_genid ;
   unsigned int rt_flags ;
   __u16 rt_type ;
   __u8 rt_is_input ;
   __u8 rt_uses_gateway ;
   int rt_iif ;
   __be32 rt_gateway ;
   u32 rt_pmtu ;
   struct list_head rt_uncached ;
   struct uncached_list *rt_uncached_list ;
};

#line 317  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/route.h"
struct inet_ehash_bucket {
   struct hlist_nulls_head chain ;
};

#line 92  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_hashtables.h"
struct inet_bind_hashbucket {
   spinlock_t lock ;
   struct hlist_head chain ;
};

#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_hashtables.h"
struct inet_listen_hashbucket {
   spinlock_t lock ;
   struct hlist_nulls_head head ;
};

#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/inet_hashtables.h"
struct inet_hashinfo {
   struct inet_ehash_bucket *ehash ;
   spinlock_t *ehash_locks ;
   unsigned int ehash_mask ;
   unsigned int ehash_locks_mask ;
   struct inet_bind_hashbucket *bhash ;
   unsigned int bhash_size ;
   struct kmem_cache *bind_bucket_cachep ;
   struct inet_listen_hashbucket listening_hash[32U] ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.h"
union __anonunion_1450 {
   u8 type_gen ;
   __be64 last_flit ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.h"
struct rsp_ctrl {
   __be32 hdrbuflen_pidx ;
   __be32 pldbuflen_qid ;
   union __anonunion_1450 __anonCompField_rsp_ctrl_115 ;
};

#line 443  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct fw_wr_hdr {
   __be32 hi ;
   __be32 lo ;
};

#line 445  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_eth_tx_pkt_wr {
   __be32 op_immdlen ;
   __be32 equiq_to_len16 ;
   __be64 r3 ;
};

#line 1216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_iq_cmd {
   __be32 op_to_vfn ;
   __be32 alloc_to_len16 ;
   __be16 physiqid ;
   __be16 iqid ;
   __be16 fl0id ;
   __be16 fl1id ;
   __be32 type_to_iqandstindex ;
   __be16 iqdroprss_to_iqesize ;
   __be16 iqsize ;
   __be64 iqaddr ;
   __be32 iqns_to_fl0congen ;
   __be16 fl0dcaen_to_fl0cidxfthresh ;
   __be16 fl0size ;
   __be64 fl0addr ;
   __be32 fl1cngchmap_to_fl1congen ;
   __be16 fl1dcaen_to_fl1cidxfthresh ;
   __be16 fl1size ;
   __be64 fl1addr ;
};

#line 1314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_eq_eth_cmd {
   __be32 op_to_vfn ;
   __be32 alloc_to_len16 ;
   __be32 eqid_pkd ;
   __be32 physeqid_pkd ;
   __be32 fetchszm_to_iqid ;
   __be32 dcaen_to_eqsize ;
   __be64 eqaddr ;
   __be32 viid_pkd ;
   __be32 r8_lo ;
   __be64 r9 ;
};

#line 1563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_eq_ctrl_cmd {
   __be32 op_to_vfn ;
   __be32 alloc_to_len16 ;
   __be32 cmpliqid_eqid ;
   __be32 physeqid_pkd ;
   __be32 fetchszm_to_iqid ;
   __be32 dcaen_to_eqsize ;
   __be64 eqaddr ;
};

#line 1671  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_eq_ofld_cmd {
   __be32 op_to_vfn ;
   __be32 alloc_to_len16 ;
   __be32 eqid_pkd ;
   __be32 physeqid_pkd ;
   __be32 fetchszm_to_iqid ;
   __be32 dcaen_to_eqsize ;
   __be64 eqaddr ;
};

#line 634  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_tx_pkt_core {
   __be32 ctrl0 ;
   __be16 pack ;
   __be16 len ;
   __be64 ctrl1 ;
};

#line 646  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_tx_pkt_lso_core {
   __be32 lso_ctrl ;
   __be16 ipid_ofst ;
   __be16 mss ;
   __be32 seqno_offset ;
   __be32 len ;
};

#line 717  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_tx_pkt_lso {
   struct work_request_hdr wr ;
   struct cpl_tx_pkt_lso_core c ;
};

#line 800  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_rx_pkt {
   struct rss_header rsshdr ;
   u8 opcode ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))) iff : 4 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) csum_calc : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ipmi_pkt : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) vlan_ex : 1 ;
   u8 __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) ip_frag : 1 ;
   __be16 csum ;
   __be16 vlan ;
   __be16 len ;
   __be32 l2info ;
   __be16 hdr_len ;
   __be16 err_vec ;
};

#line 1077  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct ulptx_sge_pair {
   __be32 len[2U] ;
   __be64 addr[2U] ;
};

#line 1085  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct ulptx_sgl {
   __be32 cmd_nsge ;
   __be32 len0 ;
   __be64 addr0 ;
   struct ulptx_sge_pair sge[0U] ;
};

#line 1107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct tx_sw_desc {
   struct sk_buff *skb ;
   struct ulptx_sgl *sgl ;
};

#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
struct rx_sw_desc {
   struct page *page ;
   dma_addr_t dma_addr ;
};

#line 643  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
typedef int ldv_func_ret_type;

#line 173  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct lb_port_stats {
   u64 octets ;
   u64 frames ;
   u64 bcast_frames ;
   u64 mcast_frames ;
   u64 ucast_frames ;
   u64 error_frames ;
   u64 frames_64 ;
   u64 frames_65_127 ;
   u64 frames_128_255 ;
   u64 frames_256_511 ;
   u64 frames_512_1023 ;
   u64 frames_1024_1518 ;
   u64 frames_1519_max ;
   u64 drop ;
   u64 ovflow0 ;
   u64 ovflow1 ;
   u64 ovflow2 ;
   u64 ovflow3 ;
   u64 trunc0 ;
   u64 trunc1 ;
   u64 trunc2 ;
   u64 trunc3 ;
};

#line 208  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct tp_usm_stats {
   u32 frames ;
   u32 drops ;
   u64 octets ;
};

#line 214  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct tp_fcoe_stats {
   u32 frames_ddp ;
   u32 frames_drop ;
   u64 octets_ddp ;
};

#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct tp_err_stats {
   u32 mac_in_errs[4U] ;
   u32 hdr_in_errs[4U] ;
   u32 tcp_in_errs[4U] ;
   u32 tnl_cong_drops[4U] ;
   u32 ofld_chan_drops[4U] ;
   u32 tnl_tx_drops[4U] ;
   u32 ofld_vlan_drops[4U] ;
   u32 tcp6_in_errs[4U] ;
   u32 ofld_no_neigh ;
   u32 ofld_cong_defer ;
};

#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct tp_cpl_stats {
   u32 req[4U] ;
   u32 rsp[4U] ;
};

#line 238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct tp_rdma_stats {
   u32 rqe_dfr_pkt ;
   u32 rqe_dfr_mod ;
};

#line 250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
struct queue_port_stats {
   u64 tso ;
   u64 tx_csum ;
   u64 rx_csum ;
   u64 vlan_ex ;
   u64 vlan_ins ;
   u64 gro_pkts ;
   u64 gro_merged ;
};

#line 264  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
struct adapter_stats {
   u64 db_drop ;
   u64 db_full ;
   u64 db_empty ;
   u64 tcp_v4_out_rsts ;
   u64 tcp_v4_in_segs ;
   u64 tcp_v4_out_segs ;
   u64 tcp_v4_retrans_segs ;
   u64 tcp_v6_out_rsts ;
   u64 tcp_v6_in_segs ;
   u64 tcp_v6_out_segs ;
   u64 tcp_v6_retrans_segs ;
   u64 frames ;
   u64 octets ;
   u64 drops ;
   u64 rqe_dfr_mod ;
   u64 rqe_dfr_pkt ;
   u64 ofld_no_neigh ;
   u64 ofld_cong_defer ;
   u64 wc_success ;
   u64 wc_fail ;
};

#line 287  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
struct channel_stats {
   u64 cpl_req ;
   u64 cpl_rsp ;
   u64 mac_in_errs ;
   u64 hdr_in_errs ;
   u64 tcp_in_errs ;
   u64 tcp6_in_errs ;
   u64 tnl_cong_drops ;
   u64 tnl_tx_drops ;
   u64 ofld_vlan_drops ;
   u64 ofld_chan_drops ;
   u64 octets_ddp ;
   u64 frames_ddp ;
   u64 frames_drop ;
};

#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/in6.h"
struct sockaddr_in6 {
   unsigned short sin6_family ;
   __be16 sin6_port ;
   __be32 sin6_flowinfo ;
   struct in6_addr sin6_addr ;
   __u32 sin6_scope_id ;
};

#line 225  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/in.h"
struct sockaddr_in {
   __kernel_sa_family_t sin_family ;
   __be16 sin_port ;
   struct in_addr sin_addr ;
   unsigned char __pad[8U] ;
};

#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/addrconf.h"
union __anonunion___u_2162 {
   struct inet6_dev * const __val ;
   char __c[1U] ;
};

#line 2877  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_clip_cmd {
   __be32 op_to_write ;
   __be32 alloc_to_len16 ;
   __be64 ip_hi ;
   __be64 ip_lo ;
   __be32 r4[2U] ;
};

#line 1450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
union __anonunion_2170 {
   struct sockaddr_in addr ;
   struct sockaddr_in6 addr6 ;
};

#line 1450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
struct clip_entry {
   spinlock_t lock ;
   atomic_t refcnt ;
   struct list_head list ;
   union __anonunion_2170 __anonCompField_clip_entry_111 ;
};

#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_reset_cmd {
   __be32 op_to_write ;
   __be32 retval_len16 ;
   __be32 val ;
   __be32 halt_pkd ;
};

#line 876  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_hello_cmd {
   __be32 op_to_write ;
   __be32 retval_len16 ;
   __be32 err_to_clearinit ;
   __be32 fwrev ;
};

#line 890  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_bye_cmd {
   __be32 op_to_write ;
   __be32 retval_len16 ;
   __be64 r3 ;
};

#line 929  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_initialize_cmd {
   __be32 op_to_write ;
   __be32 retval_len16 ;
   __be64 r3 ;
};

#line 1133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_params_param {
   __be32 mnem ;
   __be32 val ;
};

#line 1192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_params_cmd {
   __be32 op_to_vfn ;
   __be32 retval_len16 ;
   struct fw_params_param param[7U] ;
};

#line 1193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_pfvf_cmd {
   __be32 op_to_vfn ;
   __be32 retval_len16 ;
   __be32 niqflint_niq ;
   __be32 type_to_neq ;
   __be32 tc_to_nexactf ;
   __be32 r_caps_to_nethctrl ;
   __be16 nricq ;
   __be16 nriqp ;
   __be32 r4 ;
};

#line 1778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_cmd {
   __be32 op_to_vfn ;
   __be32 alloc_to_len16 ;
   __be16 type_viid ;
   u8 mac[6U] ;
   u8 portid_pkd ;
   u8 nmac ;
   u8 nmac0[6U] ;
   __be16 rsssize_pkd ;
   u8 nmac1[6U] ;
   __be16 idsiiq_pkd ;
   u8 nmac2[6U] ;
   __be16 idseiq_pkd ;
   u8 nmac3[6U] ;
   __be64 r9 ;
   __be64 r10 ;
};

#line 1917  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_mac_exact {
   __be16 valid_to_idx ;
   u8 macaddr[6U] ;
};

#line 1962  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_mac_hash {
   __be64 hashvec ;
};

#line 1965  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
union fw_vi_mac {
   struct fw_vi_mac_exact exact[7U] ;
   struct fw_vi_mac_hash hash ;
};

#line 1966  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_mac_cmd {
   __be32 op_to_viid ;
   __be32 freemacs_to_len16 ;
   union fw_vi_mac u ;
};

#line 1967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_rxmode_cmd {
   __be32 op_to_viid ;
   __be32 retval_len16 ;
   __be32 mtu_to_vlanexen ;
   __be32 r4_lo ;
};

#line 2008  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_vi_enable_cmd {
   __be32 op_to_viid ;
   __be32 ien_to_len16 ;
   __be16 blinkdur ;
   __be16 r3 ;
   __be32 r4 ;
};

#line 2744  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_rss_ind_tbl_cmd {
   __be32 op_to_viid ;
   __be32 retval_len16 ;
   __be16 niqid ;
   __be16 startidx ;
   __be32 r3 ;
   __be32 iq0_to_iq2 ;
   __be32 iq3_to_iq5 ;
   __be32 iq6_to_iq8 ;
   __be32 iq9_to_iq11 ;
   __be32 iq12_to_iq14 ;
   __be32 iq15_to_iq17 ;
   __be32 iq18_to_iq20 ;
   __be32 iq21_to_iq23 ;
   __be32 iq24_to_iq26 ;
   __be32 iq27_to_iq29 ;
   __be32 iq30_iq31 ;
   __be32 r15_lo ;
};

#line 2764  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_rss_glb_config_manual {
   __be32 mode_pkd ;
   __be32 r3 ;
   __be64 r4 ;
   __be64 r5 ;
};

#line 2787  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_rss_glb_config_basicvirtual {
   __be32 mode_pkd ;
   __be32 synmapen_to_hashtoeplitz ;
   __be64 r8 ;
   __be64 r9 ;
};

#line 2793  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
union fw_rss_glb_config {
   struct fw_rss_glb_config_manual manual ;
   struct fw_rss_glb_config_basicvirtual basicvirtual ;
};

#line 2794  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_rss_glb_config_cmd {
   __be32 op_to_write ;
   __be32 retval_len16 ;
   union fw_rss_glb_config u ;
};

#line 2795  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_rss_vi_config_manual {
   __be64 r3 ;
   __be64 r4 ;
   __be64 r5 ;
};

#line 2869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_rss_vi_config_basicvirtual {
   __be32 r6 ;
   __be32 defaultq_to_udpen ;
   __be64 r9 ;
   __be64 r10 ;
};

#line 2875  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
union fw_rss_vi_config {
   struct fw_rss_vi_config_manual manual ;
   struct fw_rss_vi_config_basicvirtual basicvirtual ;
};

#line 2876  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_rss_vi_config_cmd {
   __be32 op_to_viid ;
   __be32 retval_len16 ;
   union fw_rss_vi_config u ;
};

#line 2967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_debug_assert {
   __be32 fcid ;
   __be32 line ;
   __be32 x ;
   __be32 y ;
   u8 filename_0_7[8U] ;
   u8 filename_8_15[8U] ;
   __be64 r3 ;
};

#line 2981  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_debug_prt {
   __be16 dprtstridx ;
   __be16 r3[3U] ;
   __be32 dprtstrparam0 ;
   __be32 dprtstrparam1 ;
   __be32 dprtstrparam2 ;
   __be32 dprtstrparam3 ;
};

#line 2989  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
union fw_debug {
   struct fw_debug_assert assert ;
   struct fw_debug_prt prt ;
};

#line 2990  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_debug_cmd {
   __be32 op_type ;
   __be32 len16_pkd ;
   union fw_debug u ;
};

#line 3150  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4fw_api.h"
struct fw_devlog_cmd {
   __be32 op_to_write ;
   __be32 retval_len16 ;
   __u8 level ;
   __u8 r2[7U] ;
   __be32 memtype_devlog_memaddr16_devlog ;
   __be32 memsize_devlog ;
   __be32 r3[2U] ;
};

#line 508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
union __anonunion_last_2495 {
   u32 word ;
   char byte[4U] ;
};

#line 2107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
struct exprom_header {
   unsigned char hdr_arr[16U] ;
   unsigned char hdr_ver[4U] ;
};

#line 2733  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
struct intr_info {
   unsigned int mask ;
   char const *msg ;
   short stat_idx ;
   unsigned short fatal ;
   void (*int_handler)(struct adapter *) ;
};

#line 5954  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
struct flash_desc {
   u32 vendor_and_model_id ;
   u32 size_mb ;
};

#line 234  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
struct _ddebug {
   char const *modname ;
   char const *function ;
   char const *filename ;
   char const *format ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))) lineno : 18 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))) flags : 8 ;
};

#line 77  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.h"
struct l2t_skb_cb {
   void *handle ;
   void (*arp_err_handler)(void *, struct sk_buff *) ;
};

#line 952  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct cpl_l2t_write_req {
   struct work_request_hdr wr ;
   union opcode_tid ot ;
   __be16 params ;
   __be16 l2t_idx ;
   __be16 vlan ;
   u8 dst_mac[6U] ;
};

#line 1116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_msg.h"
struct l2t_data {
   rwlock_t lock ;
   atomic_t nfree ;
   struct l2t_entry *rover ;
   struct l2t_entry l2tab[4096U] ;
};

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
struct ldv_list_element {
   void *data ;
   struct ldv_list_element *next ;
};

#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
typedef struct ldv_list_element *ldv_list_ptr;

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
struct device_private {
   void *driver_data ;
};

#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work;

#line 65  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_worker {
   spinlock_t lock ;
   struct list_head work_list ;
   struct task_struct *task ;
   struct kthread_work *current_work ;
};

#line 72  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kthread.h"
struct kthread_work {
   struct list_head node ;
   void (*func)(struct kthread_work *) ;
   struct kthread_worker *worker ;
};

#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/scatterlist.h"
struct dma_chan;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master;

#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_device {
   struct device dev ;
   struct spi_master *master ;
   u32 max_speed_hz ;
   u8 chip_select ;
   u8 bits_per_word ;
   u16 mode ;
   int irq ;
   void *controller_state ;
   void *controller_data ;
   char modalias[32U] ;
   int cs_gpio ;
};

#line 151 
struct spi_message;

#line 152 
struct spi_transfer;

#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_master {
   struct device dev ;
   struct list_head list ;
   s16 bus_num ;
   u16 num_chipselect ;
   u16 dma_alignment ;
   u16 mode_bits ;
   u32 bits_per_word_mask ;
   u32 min_speed_hz ;
   u32 max_speed_hz ;
   u16 flags ;
   spinlock_t bus_lock_spinlock ;
   struct mutex bus_lock_mutex ;
   bool bus_lock_flag ;
   int (*setup)(struct spi_device *) ;
   int (*transfer)(struct spi_device *, struct spi_message *) ;
   void (*cleanup)(struct spi_device *) ;
   bool (*can_dma)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   bool queued ;
   struct kthread_worker kworker ;
   struct task_struct *kworker_task ;
   struct kthread_work pump_messages ;
   spinlock_t queue_lock ;
   struct list_head queue ;
   struct spi_message *cur_msg ;
   bool idling ;
   bool busy ;
   bool running ;
   bool rt ;
   bool auto_runtime_pm ;
   bool cur_msg_prepared ;
   bool cur_msg_mapped ;
   struct completion xfer_completion ;
   size_t max_dma_len ;
   int (*prepare_transfer_hardware)(struct spi_master *) ;
   int (*transfer_one_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_transfer_hardware)(struct spi_master *) ;
   int (*prepare_message)(struct spi_master *, struct spi_message *) ;
   int (*unprepare_message)(struct spi_master *, struct spi_message *) ;
   void (*set_cs)(struct spi_device *, bool ) ;
   int (*transfer_one)(struct spi_master *, struct spi_device *, struct spi_transfer *) ;
   void (*handle_err)(struct spi_master *, struct spi_message *) ;
   int *cs_gpios ;
   struct dma_chan *dma_tx ;
   struct dma_chan *dma_rx ;
   void *dummy_rx ;
   void *dummy_tx ;
};

#line 506  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_transfer {
   void const *tx_buf ;
   void *rx_buf ;
   unsigned int len ;
   dma_addr_t tx_dma ;
   dma_addr_t rx_dma ;
   struct sg_table tx_sg ;
   struct sg_table rx_sg ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) cs_change : 1 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) tx_nbits : 3 ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))) rx_nbits : 3 ;
   u8 bits_per_word ;
   u16 delay_usecs ;
   u32 speed_hz ;
   struct list_head transfer_list ;
};

#line 630  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spi/spi.h"
struct spi_message {
   struct list_head transfers ;
   struct spi_device *spi ;
   unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))) is_dma_mapped : 1 ;
   void (*complete)(void *) ;
   void *context ;
   unsigned int frame_length ;
   unsigned int actual_length ;
   int status ;
   struct list_head queue ;
   void *state ;
};

#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef unsigned long pthread_t;

#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
union pthread_attr_t {
   char __size[56U] ;
   long __align ;
};

#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
typedef union pthread_attr_t pthread_attr_t;

#line 3835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct ldv_struct_character_driver_scenario_19 {
   struct file_operations *arg0 ;
   int signal_pending ;
};

#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_free_irq_10 {
   int arg0 ;
   int signal_pending ;
};

#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_interrupt_scenario_22 {
   enum irqreturn (*arg2)(int , void *) ;
   enum irqreturn (*arg1)(int , void *) ;
   void *arg3 ;
   int arg0 ;
   int signal_pending ;
};

#line 36  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_pci_scenario_21 {
   struct pci_driver *arg0 ;
   int signal_pending ;
};

#line 41  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_random_allocationless_scenario_54 {
   struct net_device *arg0 ;
   int signal_pending ;
};

#line 46  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_seq_release_private_16 {
   struct seq_file *arg0 ;
   int signal_pending ;
};

#line 51  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_timer_scenario_43 {
   struct timer_list *arg0 ;
   int signal_pending ;
};

#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
struct ldv_struct_traverse_kernel_items_scenario_28 {
   struct seq_operations *arg1 ;
   struct seq_file *arg0 ;
   int signal_pending ;
};

#line 1083  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
void dev_err(struct device const *, char const * , ...);


#line 1089 
void _dev_info(struct device const *, char const * , ...);


#line 1897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_network_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1899 
  __retres = skb->head + (int)skb->network_header;
  
#line 1899 
  return __retres;
}


#line 2703 
int skb_copy_bits(struct sk_buff const *, int, void *, int);


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void *netdev_priv(struct net_device const *dev)
{
  void *__retres;
  
#line 1882 
  __retres = (void *)dev + 3008U;
  
#line 1882 
  return __retres;
}


#line 3472 
void netdev_features_change(struct net_device *);


#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_fcoe.h"
int cxgb_fcoe_enable(struct net_device *netdev);


#line 53 
int cxgb_fcoe_disable(struct net_device *netdev);


#line 54 
bool cxgb_fcoe_sof_eof_supported(struct adapter *adap, struct sk_buff *skb);


#line 913  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static int is_t4(enum chip_type chip)
{
  int __retres;
  
#line 915 
  __retres = (((unsigned int)chip >> 4) & 15U) == 4U;
  
#line 915 
  return __retres;
}


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_fcoe.c"
bool cxgb_fcoe_sof_eof_supported(struct adapter *adap, struct sk_buff *skb)
{
  bool __retres;
  
#line 43 
  struct fcoe_hdr *fcoeh = skb_network_header((struct sk_buff const *)skb);
  
#line 44 
  u8 sof = fcoeh->fcoe_sof;
  
#line 45 
  u8 eof = (unsigned char)0U;
  
#line 47 
  if ((unsigned int)sof != 46U && (unsigned int)sof != 54U) {
    
#line 48 
    dev_err((struct device const *)adap->pdev_dev,"Unsupported SOF 0x%x\n",(int)sof);
    
#line 49 
    __retres = (_Bool)0;
    
#line 49 
    goto return_label;
  }
  else ;
  
#line 52 
  skb_copy_bits((struct sk_buff const *)skb,(int)(skb->len + 4294967292U),(void *)(& eof),1);
  
#line 54 
  if ((unsigned int)eof + 191U > 1U) {
    
#line 55 
    dev_err((struct device const *)adap->pdev_dev,"Unsupported EOF 0x%x\n",(int)eof);
    
#line 56 
    __retres = (_Bool)0;
    
#line 56 
    goto return_label;
  }
  else ;
  
#line 59 
  __retres = (_Bool)1;
  return_label: 
#line 59 
                return __retres;
}


#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_fcoe.c"
int cxgb_fcoe_enable(struct net_device *netdev)
{
  int __retres;
  int tmp_0;
  
#line 70 
  struct port_info *pi = netdev_priv((struct net_device const *)netdev);
  
#line 71 
  struct adapter *adap = pi->adapter;
  
#line 72 
  struct cxgb_fcoe *fcoe = & pi->fcoe;
  
#line 74 
  tmp_0 = is_t4(adap->params.chip);
  
#line 74 
  if (tmp_0 != 0) {
    
#line 75 
    __retres = -22;
    
#line 75 
    goto return_label;
  }
  else ;
  
#line 77 
  if ((adap->flags & 1U) == 0U) {
    
#line 78 
    __retres = -22;
    
#line 78 
    goto return_label;
  }
  else ;
  
#line 80 
  _dev_info((struct device const *)adap->pdev_dev,"Enabling FCoE offload features\n");
  
#line 82 
  netdev->features |= 536870912ULL;
  
#line 83 
  netdev->vlan_features |= 536870912ULL;
  
#line 84 
  netdev->features |= 2147483648ULL;
  
#line 85 
  netdev->vlan_features |= 2147483648ULL;
  
#line 87 
  netdev_features_change(netdev);
  
#line 89 
  fcoe->flags = (unsigned char)((unsigned int)fcoe->flags | 1U);
  
#line 91 
  __retres = 0;
  return_label: 
#line 91 
                return __retres;
}


#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_fcoe.c"
int cxgb_fcoe_disable(struct net_device *netdev)
{
  int __retres;
  
#line 102 
  struct port_info *pi = netdev_priv((struct net_device const *)netdev);
  
#line 103 
  struct adapter *adap = pi->adapter;
  
#line 104 
  struct cxgb_fcoe *fcoe = & pi->fcoe;
  
#line 106 
  if (((int)fcoe->flags & 1) == 0) {
    
#line 107 
    __retres = -22;
    
#line 107 
    goto return_label;
  }
  else ;
  
#line 109 
  _dev_info((struct device const *)adap->pdev_dev,"Disabling FCoE offload features\n");
  
#line 111 
  fcoe->flags = (unsigned char)((unsigned int)fcoe->flags & 254U);
  
#line 113 
  netdev->features &= 18446744073172680703ULL;
  
#line 114 
  netdev->vlan_features &= 18446744073172680703ULL;
  
#line 115 
  netdev->features &= 18446744071562067967ULL;
  
#line 116 
  netdev->vlan_features &= 18446744071562067967ULL;
  
#line 118 
  netdev_features_change(netdev);
  
#line 120 
  __retres = 0;
  return_label: 
#line 120 
                return __retres;
}

unsigned short __builtin_bswap16(unsigned short);

unsigned int __builtin_bswap32(unsigned int);

unsigned long __builtin_bswap64(unsigned long);

void __builtin_unreachable(void);


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/fvtp/.tmp_cxgb4_debugfs.c"
void ldv_inline_asm(void);


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/export.h"
extern struct module __this_module;


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u16 __fswab16(__u16 val)
{
  __u16 tmp;
  
#line 49 
  tmp = __builtin_bswap16((unsigned short)((int)val));
  
#line 49 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u32 __fswab32(__u32 val)
{
  __u32 tmp;
  
#line 60 
  tmp = __builtin_bswap32(val);
  
#line 60 
  return tmp;
}


#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/swab.h"
__inline static __u64 __fswab64(__u64 val)
{
  __u64 tmp;
  
#line 71 
  tmp = (__u64)__builtin_bswap64((unsigned long)val);
  
#line 71 
  return tmp;
}


#line 248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
void __might_fault(char const *, int);


#line 271 
int kstrtoull(char const *, unsigned int, unsigned long long *);


#line 290  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kernel.h"
__inline static int kstrtoul(char const *s, unsigned int base, unsigned long *res)
{
  int tmp;
  
#line 298 
  tmp = kstrtoull(s,base,(unsigned long long *)res);
  
#line 298 
  return tmp;
}


#line 402 
int sprintf(char *, char const * , ...);


#line 405 
int snprintf(char *, size_t, char const * , ...);


#line 409 
int scnprintf(char *, size_t, char const * , ...);


#line 418 
int sscanf(char const *, char const * , ...);


#line 34  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
void *memcpy(void *, void const *, size_t);


#line 56 
void *memset(void *, int, size_t);


#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
int bitmap_parse_user(char const *, unsigned int, unsigned long *, int);


#line 201  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
__inline static void bitmap_copy(unsigned long *dst, unsigned long const *src, unsigned int nbits)
{
  
#line 204 
  if (0 != 0 && nbits <= 64U) 
#line 205 
                              *dst = *src;
  else {
    
#line 207 
    unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
    
#line 208 
    memcpy((void *)dst,(void const *)src,(unsigned long)len);
  }
  
#line 210 
  return;
}


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock(raw_spinlock_t *);


#line 41 
void _raw_spin_unlock(raw_spinlock_t *);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 366 
static void ldv_spin_lock_84(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_90(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 415 
static void ldv_spin_unlock_85(spinlock_t *lock);


#line 419 
static void ldv_spin_unlock_91(spinlock_t *lock);


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
void ldv_spin_model_lock(char *);


#line 75 
void ldv_spin_model_unlock(char *);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kzalloc(size_t size, gfp_t flags);


#line 24 
void *ldv_kmalloc(size_t size, gfp_t flags);


#line 25 
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags);


#line 116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
static int ldv_seq_open_87(struct file *ldv_func_arg1, struct seq_operations const *ldv_func_arg2);


#line 120 
static int ldv_seq_open_89(struct file *ldv_func_arg1, struct seq_operations const *ldv_func_arg2);


#line 122 
ssize_t seq_read(struct file *, char *, size_t, loff_t *);


#line 123 
loff_t seq_lseek(struct file *, loff_t, int);


#line 124 
int seq_release(struct inode *, struct file *);


#line 126 
int seq_putc(struct seq_file *, char);


#line 127 
int seq_puts(struct seq_file *, char const *);


#line 130 
int seq_printf(struct seq_file *, char const * , ...);


#line 139 
int single_open(struct file *, int (*)(struct seq_file *, void *), void *);


#line 141 
int single_release(struct inode *, struct file *);


#line 142 
void *__seq_open_private(struct file *, struct seq_operations const *, int);


#line 144 
int seq_release_private(struct inode *, struct file *);


#line 147 
static int ldv_seq_release_private_81(struct inode *ldv_func_arg1, struct file *ldv_func_arg2);


#line 151 
static int ldv_seq_release_private_82(struct inode *ldv_func_arg1, struct file *ldv_func_arg2);


#line 155 
static int ldv_seq_release_private_83(struct inode *ldv_func_arg1, struct file *ldv_func_arg2);


#line 159 
static int ldv_seq_release_private_86(struct inode *ldv_func_arg1, struct file *ldv_func_arg2);


#line 163 
static int ldv_seq_release_private_88(struct inode *ldv_func_arg1, struct file *ldv_func_arg2);


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned int readl(void const volatile *addr)
{
  unsigned int ret;
  
#line 59 
  ldv_inline_asm();
  
#line 58 
  return ret;
}


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writel(unsigned int val, void volatile *addr)
{
  
#line 68 
  ldv_inline_asm();
  
#line 69 
  return;
}


#line 90  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static unsigned long readq(void const volatile *addr)
{
  unsigned long ret;
  
#line 91 
  ldv_inline_asm();
  
#line 90 
  return ret;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
__inline static void writeq(unsigned long val, void volatile *addr)
{
  
#line 93 
  ldv_inline_asm();
  
#line 94 
  return;
}


#line 1207  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/fs.h"
__inline static struct inode *file_inode(struct file const *f)
{
  struct inode *__retres;
  
#line 1209 
  __retres = f->f_inode;
  
#line 1209 
  return __retres;
}


#line 2547 
loff_t default_llseek(struct file *, loff_t, int);


#line 2662 
loff_t generic_file_llseek(struct file *, loff_t, int);


#line 2812 
int simple_open(struct inode *, struct file *);


#line 2843 
ssize_t simple_read_from_buffer(void *, size_t, loff_t *, void const *, size_t);


#line 54  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debugfs.h"
static struct dentry *ldv_debugfs_create_file_92(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5);


#line 57 
struct dentry *debugfs_create_file_size(char const *, umode_t, struct dentry *, void *, struct file_operations const *, loff_t);


#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ctype.h"
extern unsigned char const _ctype[];


#line 38  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ctype.h"
__inline static unsigned char __tolower(unsigned char c)
{
  
#line 40 
  if (((int)_ctype[(int)c] & 1) != 0) 
#line 41 
                                      c = (unsigned char)((unsigned int)c + 32U); else ;
  
#line 42 
  return c;
}


#line 650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
unsigned long _copy_from_user(void *, void const *, unsigned int);


#line 652 
unsigned long _copy_to_user(void *, void const *, unsigned int);


#line 662 
void copy_from_user_overflow(void);


#line 664 
void copy_to_user_overflow(void);


#line 672 
void __copy_from_user_overflow(void);


#line 677 
void __copy_to_user_overflow(void);


#line 693  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
__inline static unsigned long copy_from_user(void *to, void const *from, unsigned long n)
{
  
#line 695 
  int sz = -1;
  
#line 697 
  __might_fault("./arch/x86/include/asm/uaccess.h",697);
  
#line 717 
  if ((long)(sz < 0) != 0L || (long)((unsigned long)sz >= n) != 0L) 
#line 718 
                                                                    n = _copy_from_user(to,from,(unsigned int)n);
  else 
    
#line 719 
    if (0 != 0) 
#line 720 
                copy_from_user_overflow(); else 
#line 722 
                                                __copy_from_user_overflow();
  
#line 724 
  return n;
}


#line 728  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/uaccess.h"
__inline static unsigned long copy_to_user(void *to, void const *from, unsigned long n)
{
  
#line 730 
  int sz = -1;
  
#line 732 
  __might_fault("./arch/x86/include/asm/uaccess.h",732);
  
#line 735 
  if ((long)(sz < 0) != 0L || (long)((unsigned long)sz >= n) != 0L) 
#line 736 
                                                                    n = _copy_to_user(to,from,(unsigned int)n);
  else 
    
#line 737 
    if (0 != 0) 
#line 738 
                copy_to_user_overflow(); else 
#line 740 
                                              __copy_to_user_overflow();
  
#line 742 
  return n;
}


#line 1085  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
void dev_warn(struct device const *, char const * , ...);


#line 143  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
void kfree(void const *);


#line 418 
static void *kmalloc(size_t size, gfp_t flags);


#line 542 
static void *kcalloc(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc(size_t size, gfp_t flags);


#line 908  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static int is_t5(enum chip_type chip)
{
  int __retres;
  
#line 910 
  __retres = (((unsigned int)chip >> 4) & 15U) == 5U;
  
#line 910 
  return __retres;
}


#line 918  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static u32 t4_read_reg(struct adapter *adap, u32 reg_addr)
{
  u32 tmp;
  
#line 920 
  tmp = readl((void const volatile *)(adap->regs + reg_addr));
  
#line 920 
  return tmp;
}


#line 923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static void t4_write_reg(struct adapter *adap, u32 reg_addr, u32 val)
{
  
#line 925 
  writel(val,(void volatile *)(adap->regs + reg_addr));
  
#line 926 
  return;
}


#line 941  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static u64 t4_read_reg64(struct adapter *adap, u32 reg_addr)
{
  u64 tmp;
  
#line 943 
  tmp = (u64)readq((void const volatile *)(adap->regs + reg_addr));
  
#line 943 
  return tmp;
}


#line 985  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static struct port_info *adap2pinfo(struct adapter *adap, int idx)
{
  struct port_info *tmp;
  
#line 987 
  tmp = (struct port_info *)netdev_priv((struct net_device const *)adap->port[idx]);
  
#line 987 
  return tmp;
}


#line 1109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
static unsigned int qtimer_val(struct adapter const *adap, struct sge_rspq const *q)
{
  unsigned int __retres;
  int tmp;
  
#line 1112 
  unsigned int idx = (unsigned int)((int)q->intr_params >> 1);
  
#line 1114 
  if (idx <= 5U) 
#line 1114 
                 tmp = (int)adap->sge.timer_val[idx]; else 
#line 1114 
                                                           tmp = 0;
  
#line 1114 
  __retres = (unsigned int)tmp;
  
#line 1114 
  return __retres;
}


#line 1124 
void *t4_alloc_mem(size_t size);


#line 1208 
void t4_set_reg_field(struct adapter *adapter, unsigned int addr, u32 mask, u32 val);


#line 1213 
int t4_wr_mbox_meat(struct adapter *adap, int mbox, void const *cmd, int size, void *rpl, bool sleep_ok);


#line 1224  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static int t4_wr_mbox(struct adapter *adap, int mbox, void const *cmd, int size, void *rpl)
{
  int tmp;
  
#line 1227 
  tmp = t4_wr_mbox_meat(adap,mbox,cmd,size,rpl,(_Bool)1);
  
#line 1227 
  return tmp;
}


#line 1261 
int t4_memory_rw(struct adapter *adap, int win, int mtype, u32 addr, u32 len, void *hbuf, int dir);


#line 1275 
int t4_read_flash(struct adapter *adapter, unsigned int addr, unsigned int nwords, u32 *data, int byte_oriented);


#line 1283 
int t4_fwcache(struct adapter *adap, enum fw_params_param_dev_fwcache op);


#line 1319 
int t4_read_rss(struct adapter *adapter, u16 *map);


#line 1320 
void t4_read_rss_key(struct adapter *adap, u32 *key);


#line 1321 
void t4_write_rss_key(struct adapter *adap, u32 const *key, int idx);


#line 1322 
void t4_read_rss_pf_config(struct adapter *adapter, unsigned int index, u32 *valp);


#line 1324 
void t4_read_rss_vf_config(struct adapter *adapter, unsigned int index, u32 *vfl, u32 *vfh);


#line 1326 
u32 t4_read_rss_pf_map(struct adapter *adapter);


#line 1327 
u32 t4_read_rss_pf_mask(struct adapter *adapter);


#line 1330 
void t4_pmtx_get_stats(struct adapter *adap, u32 *cnt, u64 *cycles);


#line 1331 
void t4_pmrx_get_stats(struct adapter *adap, u32 *cnt, u64 *cycles);


#line 1332 
int t4_read_cim_ibq(struct adapter *adap, unsigned int qid, u32 *data, size_t n);


#line 1334 
int t4_read_cim_obq(struct adapter *adap, unsigned int qid, u32 *data, size_t n);


#line 1336 
int t4_cim_read(struct adapter *adap, unsigned int addr, unsigned int n, unsigned int *valp);


#line 1340 
int t4_cim_read_la(struct adapter *adap, u32 *la_buf, unsigned int *wrptr);


#line 1341 
void t4_cim_read_pif_la(struct adapter *adap, u32 *pif_req, u32 *pif_rsp, unsigned int *pif_req_wrptr, unsigned int *pif_rsp_wrptr);


#line 1344 
void t4_cim_read_ma_la(struct adapter *adap, u32 *ma_req, u32 *ma_rsp);


#line 1345 
void t4_read_cimq_cfg(struct adapter *adap, u16 *base, u16 *size, u16 *thres);


#line 1353 
void t4_read_cong_tbl(struct adapter *adap, u16 (*incr)[32U]);


#line 1356 
void t4_tp_read_la(struct adapter *adap, u64 *la_buf, unsigned int *wrptr);


#line 1368 
void t4_ulprx_read_la(struct adapter *adap, u32 *la_buf);


#line 1370 
void t4_get_chan_txrate(struct adapter *adap, u64 *nic_rate, u64 *ofld_rate);


#line 1386 
int t4_query_params(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int nparams, u32 const *params, u32 *val);


#line 1446 
void t4_free_mem(void *addr);


#line 68  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.h"
__inline static unsigned int hex2val(char c)
{
  unsigned int __retres;
  int tmp_0;
  
#line 70 
  if (((int)_ctype[(int)((unsigned char)c)] & 4) != 0) 
#line 70 
                                                       tmp_0 = (int)c + -48;
  else {
    unsigned char tmp;
    
#line 70 
    tmp = __tolower((unsigned char)((int)((unsigned char)c)));
    
#line 70 
    tmp_0 = (int)tmp + -87;
  }
  
#line 70 
  __retres = (unsigned int)tmp_0;
  
#line 70 
  return __retres;
}


#line 73 
struct seq_tab *seq_open_tab(struct file *f, unsigned int rows, unsigned int width, unsigned int have_header, int (*show)(struct seq_file *, void *, int ));


#line 77 
int t4_setup_debugfs(struct adapter *adap);


#line 78 
void add_debugfs_files(struct adapter *adap, struct t4_debugfs_entry *files, unsigned int nfiles);


#line 81 
int mem_open(struct inode *inode, struct file *file);


#line 41  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.h"
int clip_tbl_show(struct seq_file *seq, void *v);


#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.h"
struct file_operations const t4_l2t_fops;


#line 50  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static void *seq_tab_get_idx(struct seq_tab *tb, loff_t pos)
{
  void *__retres;
  char *tmp;
  
#line 52 
  pos -= (long long)tb->skip_first;
  
#line 53 
  if ((long long)tb->rows > pos) 
#line 53 
                                 tmp = & tb->data[(long long)tb->width * pos]; else 
                                                                    
#line 53 
                                                                    tmp = (char *)0;
  
#line 53 
  __retres = (void *)tmp;
  
#line 53 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static void *seq_tab_start(struct seq_file *seq, loff_t *pos)
{
  void *__retres;
  void *tmp;
  
#line 58 
  struct seq_tab *tb = (struct seq_tab *)seq->private;
  
#line 60 
  if ((unsigned int)tb->skip_first != 0U && *pos == 0LL) {
    
#line 61 
    __retres = (void *)1;
    
#line 61 
    goto return_label;
  }
  else ;
  
#line 63 
  tmp = seq_tab_get_idx(tb,*pos);
  
#line 63 
  __retres = tmp;
  return_label: 
#line 63 
                return __retres;
}


#line 66  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static void *seq_tab_next(struct seq_file *seq, void *v, loff_t *pos)
{
  
#line 68 
  v = seq_tab_get_idx((struct seq_tab *)seq->private,*pos + 1LL);
  
#line 69 
  if (v != (void *)0) 
#line 70 
                      *pos += 1LL; else ;
  
#line 71 
  return v;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static void seq_tab_stop(struct seq_file *seq, void *v)
{
  
#line 76 
  return;
}


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int seq_tab_show(struct seq_file *seq, void *v)
{
  int tmp;
  
#line 80 
  struct seq_tab const *tb = (struct seq_tab const *)seq->private;
  
#line 82 
  tmp = (*(tb->show))(seq,v,(int)(((long)v - (long)(& tb->data)) / (long)tb->width));
  
#line 82 
  return tmp;
}


#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct seq_operations const seq_tab_ops = {.start = & seq_tab_start, .stop = & seq_tab_stop, .next = & seq_tab_next, .show = & seq_tab_show};

#line 92  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
struct seq_tab *seq_open_tab(struct file *f, unsigned int rows, unsigned int width, unsigned int have_header, int (*show)(struct seq_file *, void *, int ))
{
  struct seq_tab *p;
  
#line 98 
  p = (struct seq_tab *)__seq_open_private(f,& seq_tab_ops,(int)(rows * width + 16U));
  
#line 99 
  if (p != (struct seq_tab *)0) {
    
#line 100 
    p->show = show;
    
#line 101 
    p->rows = rows;
    
#line 102 
    p->width = (unsigned char)width;
    
#line 103 
    p->skip_first = (unsigned char)(have_header != 0U);
  }
  else ;
  
#line 105 
  return p;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int seq_tab_trim(struct seq_tab *p, unsigned int new_rows)
{
  int __retres;
  
#line 113 
  if (p->rows < new_rows) {
    
#line 114 
    __retres = -22;
    
#line 114 
    goto return_label;
  }
  else ;
  
#line 115 
  p->rows = new_rows;
  
#line 116 
  __retres = 0;
  return_label: 
#line 116 
                return __retres;
}


#line 119  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int cim_la_show(struct seq_file *seq, void *v, int idx)
{
  int __retres;
  
#line 121 
  if (v == (void *)1) 
#line 122 
                      seq_puts(seq,"Status   Data      PC     LS0Stat  LS0Addr ");
  else {
    
#line 125 
    u32 const *p = (u32 const *)v;
    
#line 127 
    seq_printf(seq,"  %02x  %x%07x %x%07x %08x %08x %08x%08x%08x%08x\n",(*p >> 4) & 255U,*p & 15U,*(p + 1U) >> 4,*(p + 1U) & 15U,*(p + 2U) >> 4,*(p + 2U) & 15U,*(p + 3U),*(p + 4U),*(p + 5U),*(p + 6U),*(p + 7U));
  }
  
#line 133 
  __retres = 0;
  
#line 133 
  return __retres;
}


#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int cim_la_show_3in1(struct seq_file *seq, void *v, int idx)
{
  int __retres;
  
#line 138 
  if (v == (void *)1) 
#line 139 
                      seq_puts(seq,"Status   Data      PC\n");
  else {
    
#line 141 
    u32 const *p = (u32 const *)v;
    
#line 143 
    seq_printf(seq,"  %02x   %08x %08x\n",*(p + 5U) & 255U,*(p + 6U),*(p + 7U));
    
#line 145 
    seq_printf(seq,"  %02x   %02x%06x %02x%06x\n",(*(p + 3U) >> 8) & 255U,*(p + 3U) & 255U,*(p + 4U) >> 8,*(p + 4U) & 255U,*(p + 5U) >> 8);
    
#line 148 
    seq_printf(seq,"  %02x   %x%07x %x%07x\n",(*p >> 4) & 255U,*p & 15U,*(p + 1U) >> 4,*(p + 1U) & 15U,*(p + 2U) >> 4);
  }
  
#line 151 
  __retres = 0;
  
#line 151 
  return __retres;
}


#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int cim_la_open(struct inode *inode, struct file *file)
{
  int __retres;
  int ret;
  unsigned int cfg;
  struct seq_tab *p;
  int (*tmp)(struct seq_file *seq, void *v, int idx);
  
#line 159 
  struct adapter *adap = (struct adapter *)inode->i_private;
  
#line 161 
  ret = t4_cim_read(adap,320U,1U,& cfg);
  
#line 162 
  if (ret != 0) {
    
#line 163 
    __retres = ret;
    
#line 163 
    goto return_label;
  }
  else ;
  
#line 165 
  if ((cfg & 1073741824U) != 0U) 
#line 165 
                                 tmp = & cim_la_show_3in1; else 
#line 165 
                                                                tmp = & cim_la_show;
  
#line 165 
  ;
  
#line 165 
  ;
  
#line 165 
  p = seq_open_tab(file,adap->params.cim_la_size / 8U,32U,1U,tmp);
  
#line 168 
  if (p == (struct seq_tab *)0) {
    
#line 169 
    __retres = -12;
    
#line 169 
    goto return_label;
  }
  else ;
  
#line 171 
  ret = t4_cim_read_la(adap,(u32 *)(& p->data),(unsigned int *)0U);
  
#line 172 
  if (ret != 0) 
#line 173 
                ldv_seq_release_private_81(inode,file); else ;
  
#line 174 
  __retres = ret;
  return_label: 
#line 174 
                return __retres;
}


#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const cim_la_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & cim_la_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & seq_release_private, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 185  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int cim_pif_la_show(struct seq_file *seq, void *v, int idx)
{
  int __retres;
  
#line 187 
  u32 const *p = (u32 const *)v;
  
#line 189 
  if (v == (void *)1) 
#line 190 
                      seq_puts(seq,"Cntl ID DataBE   Addr                 Data\n");
  else 
    
#line 191 
    if (idx <= 63) 
#line 192 
                   seq_printf(seq," %02x  %02x  %04x  %08x %08x%08x%08x%08x\n",(*(p + 5U) >> 22) & 255U,(*(p + 5U) >> 16) & 63U,*(p + 5U) & 65535U,*(p + 4U),*(p + 3U),*(p + 2U),*(p + 1U),*p);
    else {
      
#line 196 
      if (idx == 64) 
#line 197 
                     seq_puts(seq,"\nCntl ID               Data\n"); else ;
      
#line 198 
      seq_printf(seq," %02x  %02x %08x%08x%08x%08x\n",(*(p + 4U) >> 6) & 255U,*(p + 4U) & 63U,*(p + 3U),*(p + 2U),*(p + 1U),*p);
    }
  
#line 202 
  __retres = 0;
  
#line 202 
  return __retres;
}


#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int cim_pif_la_open(struct inode *inode, struct file *file)
{
  int __retres;
  struct seq_tab *p;
  
#line 208 
  struct adapter *adap = (struct adapter *)inode->i_private;
  
#line 210 
  p = seq_open_tab(file,128U,24U,1U,& cim_pif_la_show);
  
#line 212 
  if (p == (struct seq_tab *)0) {
    
#line 213 
    __retres = -12;
    
#line 213 
    goto return_label;
  }
  else ;
  
#line 215 
  t4_cim_read_pif_la(adap,(u32 *)(& p->data),(u32 *)(& p->data) + 384U,(unsigned int *)0U,(unsigned int *)0U);
  
#line 217 
  __retres = 0;
  return_label: 
#line 217 
                return __retres;
}


#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const cim_pif_la_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & cim_pif_la_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & seq_release_private, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int cim_ma_la_show(struct seq_file *seq, void *v, int idx)
{
  int __retres;
  
#line 230 
  u32 const *p = (u32 const *)v;
  
#line 232 
  if (v == (void *)1) 
#line 233 
                      seq_puts(seq,"\n");
  else 
    
#line 234 
    if (idx <= 63) 
#line 235 
                   seq_printf(seq,"%02x%08x%08x%08x%08x\n",*(p + 4U),*(p + 3U),*(p + 2U),*(p + 1U),*p);
    else {
      
#line 238 
      if (idx == 64) 
#line 239 
                     seq_puts(seq,"\nCnt ID Tag UE       Data       RDY VLD\n"); else ;
      
#line 241 
      seq_printf(seq,"%3u %2u  %x   %u %08x%08x  %u   %u\n",(*(p + 2U) >> 10) & 255U,(*(p + 2U) >> 7) & 7U,(*(p + 2U) >> 3) & 15U,(*(p + 2U) >> 2) & 1U,(*(p + 1U) >> 2) | (*(p + 2U) << 30),(*p >> 2) | (*(p + 1U) << 30),(*p >> 1) & 1U,*p & 1U);
    }
  
#line 248 
  __retres = 0;
  
#line 248 
  return __retres;
}


#line 251  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int cim_ma_la_open(struct inode *inode, struct file *file)
{
  int __retres;
  struct seq_tab *p;
  
#line 254 
  struct adapter *adap = (struct adapter *)inode->i_private;
  
#line 256 
  p = seq_open_tab(file,128U,20U,1U,& cim_ma_la_show);
  
#line 258 
  if (p == (struct seq_tab *)0) {
    
#line 259 
    __retres = -12;
    
#line 259 
    goto return_label;
  }
  else ;
  
#line 261 
  t4_cim_read_ma_la(adap,(u32 *)(& p->data),(u32 *)(& p->data) + 320U);
  
#line 263 
  __retres = 0;
  return_label: 
#line 263 
                return __retres;
}


#line 266  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const cim_ma_la_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & cim_ma_la_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & seq_release_private, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 274  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int cim_qcfg_show(struct seq_file *seq, void *v)
{
  int __retres;
  int i;
  u16 base[14U];
  u16 size[14U];
  u32 stat[56U];
  u16 thres[6U];
  u32 obq_wr_t4[12U];
  u32 *wr;
  u32 obq_wr_t5[16U];
  int tmp_0;
  int tmp;
  int tmp_2;
  int tmp_1;
  
#line 276 
  char const * const qname[14U] = {"TP0", "TP1", "ULP", "SGE0", "SGE1", "NC-SI", "ULP0", "ULP1", "ULP2", "ULP3", "SGE", "NC-SI", "SGE0-RX", "SGE1-RX"};
  
#line 283 
  struct adapter *adap = (struct adapter *)seq->private;
  
#line 290 
  u32 *p = (u32 *)(& stat);
  
#line 291 
  tmp = is_t4(adap->params.chip);
  
#line 291 
  if (tmp != 0) 
#line 291 
                tmp_0 = 6; else 
#line 291 
                                tmp_0 = 8;
  
#line 291 
  int cim_num_obq = tmp_0;
  
#line 294 
  tmp_1 = is_t4(adap->params.chip);
  
#line 294 
  if (tmp_1 != 0) 
#line 294 
                  tmp_2 = 16; else 
#line 294 
                                   tmp_2 = 640;
  
#line 294 
  ;
  
#line 294 
  i = t4_cim_read(adap,(unsigned int)tmp_2,56U,(unsigned int *)(& stat));
  
#line 297 
  if (i == 0) {
    int tmp_3;
    
#line 298 
    tmp_3 = is_t4(adap->params.chip);
    
#line 298 
    if (tmp_3 != 0) {
      
#line 299 
      i = t4_cim_read(adap,260U,12U,(unsigned int *)(& obq_wr_t4));
      
#line 301 
      wr = (u32 *)(& obq_wr_t4);
    }
    else {
      
#line 303 
      i = t4_cim_read(adap,916U,16U,(unsigned int *)(& obq_wr_t5));
      
#line 305 
      wr = (u32 *)(& obq_wr_t5);
    }
  }
  else ;
  
#line 308 
  if (i != 0) {
    
#line 309 
    __retres = i;
    
#line 309 
    goto return_label;
  }
  else ;
  
#line 311 
  t4_read_cimq_cfg(adap,(u16 *)(& base),(u16 *)(& size),(u16 *)(& thres));
  
#line 313 
  seq_printf(seq,"  Queue  Base  Size Thres  RdPtr WrPtr  SOP  EOP Avail\n");
  
#line 315 
  i = 0;
  
#line 315 
  goto ldv_49468;
  ldv_49467: 
#line 316 
  ;
  
#line 316 
  seq_printf(seq,"%7s %5x %5u %5u %6x  %4x %4u %4u %5u\n",qname[i],(int)base[i],(int)size[i],(int)thres[i],*p & 8191U,*(p + 1U) & 8191U,*(p + 3U) & 4095U,(*(p + 3U) >> 16) & 4095U,(*(p + 2U) & 2047U) * 16U);
  
#line 315 
  i += 1;
  
#line 315 
  p += 4U;
  ldv_49468: 
#line 316 
  ;
  
#line 315 
  if (i <= 5) 
#line 317 
              goto ldv_49467; else 
#line 320 
                                   goto ldv_49469;
  ldv_49469: 
#line 321 
  ;
  
#line 321 
  goto ldv_49471;
  ldv_49470: 
#line 322 
  ;
  
#line 322 
  seq_printf(seq,"%7s %5x %5u %12x  %4x %4u %4u %5u\n",qname[i],(int)base[i],(int)size[i],*p & 16383U,*wr - (unsigned int)base[i],*(p + 3U) & 4095U,(*(p + 3U) >> 16) & 4095U,(*(p + 2U) & 2047U) * 16U);
  
#line 321 
  i += 1;
  
#line 321 
  p += 4U;
  
#line 321 
  wr += 2U;
  ldv_49471: 
#line 322 
  ;
  
#line 321 
  if (cim_num_obq + 6 > i) 
#line 323 
                           goto ldv_49470; else 
#line 326 
                                                goto ldv_49472;
  ldv_49472: 
#line 327 
  ;
  
#line 327 
  __retres = 0;
  return_label: 
#line 327 
                return __retres;
}


#line 330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int cim_qcfg_open(struct inode *inode, struct file *file)
{
  int tmp;
  
#line 332 
  tmp = single_open(file,& cim_qcfg_show,inode->i_private);
  
#line 332 
  return tmp;
}


#line 335  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const cim_qcfg_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & cim_qcfg_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & single_release, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 343  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int cimq_show(struct seq_file *seq, void *v, int idx)
{
  int __retres;
  
#line 345 
  u32 const *p = (u32 const *)v;
  
#line 347 
  seq_printf(seq,"%#06x: %08x %08x %08x %08x\n",idx * 16,*p,*(p + 1U),*(p + 2U),*(p + 3U));
  
#line 349 
  __retres = 0;
  
#line 349 
  return __retres;
}


#line 352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int cim_ibq_open(struct inode *inode, struct file *file)
{
  int __retres;
  int ret;
  struct seq_tab *p;
  
#line 356 
  unsigned int qid = (unsigned int)((long)inode->i_private) & 7U;
  
#line 357 
  struct adapter *adap = (struct adapter *)(inode->i_private + - qid);
  
#line 359 
  p = seq_open_tab(file,128U,16U,0U,& cimq_show);
  
#line 360 
  if (p == (struct seq_tab *)0) {
    
#line 361 
    __retres = -12;
    
#line 361 
    goto return_label;
  }
  else ;
  
#line 363 
  ret = t4_read_cim_ibq(adap,qid,(u32 *)(& p->data),512UL);
  
#line 364 
  if (ret < 0) 
#line 365 
               ldv_seq_release_private_82(inode,file); else 
#line 367 
                                                            ret = 0;
  
#line 368 
  __retres = ret;
  return_label: 
#line 368 
                return __retres;
}


#line 371  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const cim_ibq_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & cim_ibq_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & seq_release_private, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 379  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int cim_obq_open(struct inode *inode, struct file *file)
{
  int __retres;
  int ret;
  struct seq_tab *p;
  
#line 383 
  unsigned int qid = (unsigned int)((long)inode->i_private) & 7U;
  
#line 384 
  struct adapter *adap = (struct adapter *)(inode->i_private + - qid);
  
#line 386 
  p = seq_open_tab(file,768U,16U,0U,& cimq_show);
  
#line 387 
  if (p == (struct seq_tab *)0) {
    
#line 388 
    __retres = -12;
    
#line 388 
    goto return_label;
  }
  else ;
  
#line 390 
  ret = t4_read_cim_obq(adap,qid,(u32 *)(& p->data),3072UL);
  
#line 391 
  if (ret < 0) 
#line 392 
               ldv_seq_release_private_83(inode,file);
  else {
    
#line 394 
    seq_tab_trim(p,(unsigned int)(ret / 4));
    
#line 395 
    ret = 0;
  }
  
#line 397 
  __retres = ret;
  return_label: 
#line 397 
                return __retres;
}


#line 400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const cim_obq_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & cim_obq_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & seq_release_private, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 414  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static void field_desc_show(struct seq_file *seq, u64 v, struct field_desc const *p)
{
  char buf[32U];
  
#line 418 
  int line_size = 0;
  
#line 420 
  goto ldv_49516;
  ldv_49515: 
#line 421 
  ;
  {
    
#line 421 
    u64 mask = (1ULL << p->width) + 18446744073709551615ULL;
    
#line 422 
    int len = scnprintf((char *)(& buf),32UL,"%s: %llu",p->name,(v >> p->start) & mask);
    
#line 425 
    if (line_size + len > 78) {
      
#line 426 
      line_size = 8;
      
#line 427 
      seq_puts(seq,"\n        ");
    }
    else ;
    
#line 429 
    seq_printf(seq,"%s ",(char *)(& buf));
    
#line 430 
    line_size = (len + 1) + line_size;
    
#line 431 
    p += 1;
  }
  ldv_49516: 
#line 433 
  ;
  
#line 420 
  if (p->name != (char const *)0) 
#line 422 
                                  goto ldv_49515; else 
#line 425 
                                                       goto ldv_49517;
  ldv_49517: 
#line 426 
  ;
  
#line 433 
  seq_putc(seq,(char)10);
  
#line 434 
  return;
}


#line 436  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct field_desc tp_la0[34U] = {{.name = "RcfOpCodeOut", .start = 60U, .width = 4U}, {.name = "State", .start = 56U, .width = 4U}, {.name = "WcfState", .start = 52U, .width = 4U}, {.name = "RcfOpcSrcOut", .start = 50U, .width = 2U}, {.name = "CRxError", .start = 49U, .width = 1U}, {.name = "ERxError", .start = 48U, .width = 1U}, {.name = "SanityFailed", .start = 47U, .width = 1U}, {.name = "SpuriousMsg", .start = 46U, .width = 1U}, {.name = "FlushInputMsg", .start = 45U, .width = 1U}, {.name = "FlushInputCpl", .start = 44U, .width = 1U}, {.name = "RssUpBit", .start = 43U, .width = 1U}, {.name = "RssFilterHit", .start = 42U, .width = 1U}, {.name = "Tid", .start = 32U, .width = 10U}, {.name = "InitTcb", .start = 31U, .width = 1U}, {.name = "LineNumber", .start = 24U, .width = 7U}, {.name = "Emsg", .start = 23U, .width = 1U}, {.name = "EdataOut", .start = 22U, .width = 1U}, {.name = "Cmsg", .start = 21U, .width = 1U}, {.name = "CdataOut", .start = 20U, .width = 1U}, {.name = "EreadPdu", .start = 19U, .width = 1U}, {.name = "CreadPdu", .start = 18U, .width = 1U}, {.name = "TunnelPkt", .start = 17U, .width = 1U}, {.name = "RcfPeerFin", .start = 16U, .width = 1U}, {.name = "RcfReasonOut", .start = 12U, .width = 4U}, {.name = "TxCchannel", .start = 10U, .width = 2U}, {.name = "RcfTxChannel", .start = 8U, .width = 2U}, {.name = "RxEchannel", .start = 6U, .width = 2U}, {.name = "RcfRxChannel", .start = 5U, .width = 1U}, {.name = "RcfDataOutSrdy", .start = 4U, .width = 1U}, {.name = "RxDvld", .start = 3U, .width = 1U}, {.name = "RxOoDvld", .start = 2U, .width = 1U}, {.name = "RxCongestion", .start = 1U, .width = 1U}, {.name = "TxCongestion", .start = 0U, .width = 1U}, {.name = (char const *)0, .start = 0U, .width = 0U}};

#line 473  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int tp_la_show(struct seq_file *seq, void *v, int idx)
{
  int __retres;
  
#line 475 
  u64 const *p = (u64 const *)v;
  
#line 477 
  field_desc_show(seq,*p,(struct field_desc const *)(& tp_la0));
  
#line 478 
  __retres = 0;
  
#line 478 
  return __retres;
}


#line 481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int tp_la_show2(struct seq_file *seq, void *v, int idx)
{
  int __retres;
  
#line 483 
  u64 const *p = (u64 const *)v;
  
#line 485 
  if (idx != 0) 
#line 486 
                seq_putc(seq,(char)10); else ;
  
#line 487 
  field_desc_show(seq,*p,(struct field_desc const *)(& tp_la0));
  
#line 488 
  if (idx <= 62 || *(p + 1U) != 18446744073709551615ULL) 
#line 489 
                                                         field_desc_show(seq,*(p + 1U),(struct field_desc const *)(& tp_la0)); else ;
  
#line 490 
  __retres = 0;
  
#line 490 
  return __retres;
}


#line 493  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int tp_la_show3(struct seq_file *seq, void *v, int idx)
{
  int __retres;
  
#line 495 
  struct field_desc tp_la1[46U] = {{.name = "CplCmdIn", .start = 56U, .width = 8U}, {.name = "CplCmdOut", .start = 48U, .width = 8U}, {.name = "ESynOut", .start = 47U, .width = 1U}, {.name = "EAckOut", .start = 46U, .width = 1U}, {.name = "EFinOut", .start = 45U, .width = 1U}, {.name = "ERstOut", .start = 44U, .width = 1U}, {.name = "SynIn", .start = 43U, .width = 1U}, {.name = "AckIn", .start = 42U, .width = 1U}, {.name = "FinIn", .start = 41U, .width = 1U}, {.name = "RstIn", .start = 40U, .width = 1U}, {.name = "DataIn", .start = 39U, .width = 1U}, {.name = "DataInVld", .start = 38U, .width = 1U}, {.name = "PadIn", .start = 37U, .width = 1U}, {.name = "RxBufEmpty", .start = 36U, .width = 1U}, {.name = "RxDdp", .start = 35U, .width = 1U}, {.name = "RxFbCongestion", .start = 34U, .width = 1U}, {.name = "TxFbCongestion", .start = 33U, .width = 1U}, {.name = "TxPktSumSrdy", .start = 32U, .width = 1U}, {.name = "RcfUlpType", .start = 28U, .width = 4U}, {.name = "Eread", .start = 27U, .width = 1U}, {.name = "Ebypass", .start = 26U, .width = 1U}, {.name = "Esave", .start = 25U, .width = 1U}, {.name = "Static0", .start = 24U, .width = 1U}, {.name = "Cread", .start = 23U, .width = 1U}, {.name = "Cbypass", .start = 22U, .width = 1U}, {.name = "Csave", .start = 21U, .width = 1U}, {.name = "CPktOut", .start = 20U, .width = 1U}, {.name = "RxPagePoolFull", .start = 18U, .width = 2U}, {.name = "RxLpbkPkt", .start = 17U, .width = 1U}, {.name = "TxLpbkPkt", .start = 16U, .width = 1U}, {.name = "RxVfValid", .start = 15U, .width = 1U}, {.name = "SynLearned", .start = 14U, .width = 1U}, {.name = "SetDelEntry", .start = 13U, .width = 1U}, {.name = "SetInvEntry", .start = 12U, .width = 1U}, {.name = "CpcmdDvld", .start = 11U, .width = 1U}, {.name = "CpcmdSave", .start = 10U, .width = 1U}, {.name = "RxPstructsFull", .start = 8U, .width = 2U}, {.name = "EpcmdDvld", .start = 7U, .width = 1U}, {.name = "EpcmdFlush", .start = 6U, .width = 1U}, {.name = "EpcmdTrimPrefix", .start = 5U, .width = 1U}, {.name = "EpcmdTrimPostfix", .start = 4U, .width = 1U}, {.name = "ERssIp4Pkt", .start = 3U, .width = 1U}, {.name = "ERssIp6Pkt", .start = 2U, .width = 1U}, {.name = "ERssTcpUdpPkt", .start = 1U, .width = 1U}, {.name = "ERssFceFipPkt", .start = 0U, .width = 1U}, {.name = (char const *)0, .start = 0U, .width = 0U}};
  
#line 543 
  struct field_desc tp_la2[44U] = {{.name = "CplCmdIn", .start = 56U, .width = 8U}, {.name = "MpsVfVld", .start = 55U, .width = 1U}, {.name = "MpsPf", .start = 52U, .width = 3U}, {.name = "MpsVf", .start = 44U, .width = 8U}, {.name = "SynIn", .start = 43U, .width = 1U}, {.name = "AckIn", .start = 42U, .width = 1U}, {.name = "FinIn", .start = 41U, .width = 1U}, {.name = "RstIn", .start = 40U, .width = 1U}, {.name = "DataIn", .start = 39U, .width = 1U}, {.name = "DataInVld", .start = 38U, .width = 1U}, {.name = "PadIn", .start = 37U, .width = 1U}, {.name = "RxBufEmpty", .start = 36U, .width = 1U}, {.name = "RxDdp", .start = 35U, .width = 1U}, {.name = "RxFbCongestion", .start = 34U, .width = 1U}, {.name = "TxFbCongestion", .start = 33U, .width = 1U}, {.name = "TxPktSumSrdy", .start = 32U, .width = 1U}, {.name = "RcfUlpType", .start = 28U, .width = 4U}, {.name = "Eread", .start = 27U, .width = 1U}, {.name = "Ebypass", .start = 26U, .width = 1U}, {.name = "Esave", .start = 25U, .width = 1U}, {.name = "Static0", .start = 24U, .width = 1U}, {.name = "Cread", .start = 23U, .width = 1U}, {.name = "Cbypass", .start = 22U, .width = 1U}, {.name = "Csave", .start = 21U, .width = 1U}, {.name = "CPktOut", .start = 20U, .width = 1U}, {.name = "RxPagePoolFull", .start = 18U, .width = 2U}, {.name = "RxLpbkPkt", .start = 17U, .width = 1U}, {.name = "TxLpbkPkt", .start = 16U, .width = 1U}, {.name = "RxVfValid", .start = 15U, .width = 1U}, {.name = "SynLearned", .start = 14U, .width = 1U}, {.name = "SetDelEntry", .start = 13U, .width = 1U}, {.name = "SetInvEntry", .start = 12U, .width = 1U}, {.name = "CpcmdDvld", .start = 11U, .width = 1U}, {.name = "CpcmdSave", .start = 10U, .width = 1U}, {.name = "RxPstructsFull", .start = 8U, .width = 2U}, {.name = "EpcmdDvld", .start = 7U, .width = 1U}, {.name = "EpcmdFlush", .start = 6U, .width = 1U}, {.name = "EpcmdTrimPrefix", .start = 5U, .width = 1U}, {.name = "EpcmdTrimPostfix", .start = 4U, .width = 1U}, {.name = "ERssIp4Pkt", .start = 3U, .width = 1U}, {.name = "ERssIp6Pkt", .start = 2U, .width = 1U}, {.name = "ERssTcpUdpPkt", .start = 1U, .width = 1U}, {.name = "ERssFceFipPkt", .start = 0U, .width = 1U}, {.name = (char const *)0, .start = 0U, .width = 0U}};
  
#line 589 
  u64 const *p = (u64 const *)v;
  
#line 591 
  if (idx != 0) 
#line 592 
                seq_putc(seq,(char)10); else ;
  
#line 593 
  field_desc_show(seq,*p,(struct field_desc const *)(& tp_la0));
  
#line 594 
  if (idx <= 62 || *(p + 1U) != 18446744073709551615ULL) {
    struct field_desc *tmp;
    
#line 595 
    if ((*p & 131072ULL) != 0ULL) 
#line 595 
                                  tmp = (struct field_desc *)(& tp_la2); else 
                                                                    
#line 595 
                                                                    tmp = (struct field_desc *)(& tp_la1);
    
#line 595 
    ;
    
#line 595 
    ;
    
#line 595 
    field_desc_show(seq,*(p + 1U),(struct field_desc const *)tmp);
  }
  else ;
  
#line 596 
  __retres = 0;
  
#line 596 
  return __retres;
}


#line 599  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int tp_la_open(struct inode *inode, struct file *file)
{
  int __retres;
  struct seq_tab *p;
  u32 tmp;
  
#line 602 
  struct adapter *adap = (struct adapter *)inode->i_private;
  
#line 604 
  tmp = t4_read_reg(adap,32468U);
  
#line 604 
  switch ((tmp >> 14) & 3U) {
    case (unsigned int)2: 
#line 605 
    ;
    
#line 606 
    p = seq_open_tab(file,64U,16U,0U,& tp_la_show2);
    
#line 608 
    goto ldv_49546;
    case (unsigned int)3: 
#line 609 
    ;
    
#line 610 
    p = seq_open_tab(file,64U,16U,0U,& tp_la_show3);
    
#line 612 
    goto ldv_49546;
    default: 
#line 613 
    ;
    
#line 614 
    p = seq_open_tab(file,128U,8U,0U,& tp_la_show);
  }
  ldv_49546: 
#line 616 
  ;
  
#line 616 
  if (p == (struct seq_tab *)0) {
    
#line 617 
    __retres = -12;
    
#line 617 
    goto return_label;
  }
  else ;
  
#line 619 
  t4_tp_read_la(adap,(u64 *)(& p->data),(unsigned int *)0U);
  
#line 620 
  __retres = 0;
  return_label: 
#line 620 
                return __retres;
}


#line 623  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static ssize_t tp_la_write(struct file *file, char const *buf, size_t count, loff_t *pos)
{
  ssize_t __retres;
  int err;
  char s[32U];
  unsigned long val;
  unsigned long tmp_0;
  struct inode *tmp_1;
  unsigned long tmp_2;
  {
    unsigned long tmp;
    
#line 629 
    unsigned long _min1 = 31UL;
    
#line 629 
    size_t _min2 = count;
    
#line 629 
    if (_min1 < _min2) 
#line 629 
                       tmp = _min1; else 
#line 629 
                                         tmp = _min2;
    
#line 629 
    tmp_0 = tmp;
  }
  
#line 629 
  size_t size = tmp_0;
  
#line 630 
  tmp_1 = file_inode((struct file const *)file);
  
#line 630 
  struct adapter *adap = (struct adapter *)tmp_1->i_private;
  
#line 632 
  tmp_2 = copy_from_user((void *)(& s),(void const *)buf,size);
  
#line 632 
  if (tmp_2 != 0UL) {
    
#line 633 
    __retres = -14L;
    
#line 633 
    goto return_label;
  }
  else ;
  
#line 634 
  s[size] = (char)0;
  
#line 635 
  err = kstrtoul((char const *)(& s),0U,& val);
  
#line 636 
  if (err != 0) {
    
#line 637 
    __retres = (long)err;
    
#line 637 
    goto return_label;
  }
  else ;
  
#line 638 
  if (val > 65535UL) {
    
#line 639 
    __retres = -22L;
    
#line 639 
    goto return_label;
  }
  else ;
  
#line 640 
  adap->params.tp.la_mask = (unsigned int)val << 16U;
  
#line 641 
  t4_set_reg_field(adap,32468U,4294901760U,adap->params.tp.la_mask);
  
#line 643 
  __retres = (long)count;
  return_label: 
#line 643 
                return __retres;
}


#line 646  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const tp_la_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = & tp_la_write, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & tp_la_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & seq_release_private, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 655  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int ulprx_la_show(struct seq_file *seq, void *v, int idx)
{
  int __retres;
  
#line 657 
  u32 const *p = (u32 const *)v;
  
#line 659 
  if (v == (void *)1) 
#line 660 
                      seq_puts(seq,"      Pcmd        Type   Message"); else 
                                                                    
#line 663 
                                                                    seq_printf(seq,"%08x%08x  %4x  %08x  %08x%08x%08x%08x\n",*(p + 1U),*p,*(p + 2U),*(p + 3U),*(p + 7U),*(p + 6U),*(p + 5U),*(p + 4U));
  
#line 665 
  __retres = 0;
  
#line 665 
  return __retres;
}


#line 668  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int ulprx_la_open(struct inode *inode, struct file *file)
{
  int __retres;
  struct seq_tab *p;
  
#line 671 
  struct adapter *adap = (struct adapter *)inode->i_private;
  
#line 673 
  p = seq_open_tab(file,512U,32U,1U,& ulprx_la_show);
  
#line 675 
  if (p == (struct seq_tab *)0) {
    
#line 676 
    __retres = -12;
    
#line 676 
    goto return_label;
  }
  else ;
  
#line 678 
  t4_ulprx_read_la(adap,(u32 *)(& p->data));
  
#line 679 
  __retres = 0;
  return_label: 
#line 679 
                return __retres;
}


#line 682  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const ulprx_la_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & ulprx_la_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & seq_release_private, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 702  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int pm_stats_show(struct seq_file *seq, void *v)
{
  int __retres;
  int i;
  u32 tx_cnt[5U];
  u32 rx_cnt[5U];
  u64 tx_cyc[5U];
  u64 rx_cyc[5U];
  
#line 704 
  char const * const tx_pm_stats[4U] = {"Read:", "Write bypass:", "Write mem:", "Bypass + mem:"};
  
#line 707 
  char const * const rx_pm_stats[4U] = {"Read:", "Write bypass:", "Write mem:", "Flush:"};
  
#line 714 
  struct adapter *adap = (struct adapter *)seq->private;
  
#line 716 
  t4_pmtx_get_stats(adap,(u32 *)(& tx_cnt),(u64 *)(& tx_cyc));
  
#line 717 
  t4_pmrx_get_stats(adap,(u32 *)(& rx_cnt),(u64 *)(& rx_cyc));
  
#line 719 
  seq_printf(seq,"%13s %10s  %20s\n",(char *)" ",(char *)"Tx pcmds",(char *)"Tx bytes");
  
#line 720 
  i = 0;
  
#line 720 
  goto ldv_49590;
  ldv_49589: 
#line 721 
  ;
  
#line 721 
  seq_printf(seq,"%-13s %10u  %20llu\n",tx_pm_stats[i],tx_cnt[i],tx_cyc[i]);
  
#line 720 
  i += 1;
  ldv_49590: 
#line 721 
  ;
  
#line 720 
  if (i <= 3) 
#line 722 
              goto ldv_49589; else 
#line 725 
                                   goto ldv_49591;
  ldv_49591: 
#line 726 
  ;
  
#line 724 
  seq_printf(seq,"%13s %10s  %20s\n",(char *)" ",(char *)"Rx pcmds",(char *)"Rx bytes");
  
#line 725 
  i = 0;
  
#line 725 
  goto ldv_49593;
  ldv_49592: 
#line 726 
  ;
  
#line 726 
  seq_printf(seq,"%-13s %10u  %20llu\n",rx_pm_stats[i],rx_cnt[i],rx_cyc[i]);
  
#line 725 
  i += 1;
  ldv_49593: 
#line 726 
  ;
  
#line 725 
  if (i <= 3) 
#line 727 
              goto ldv_49592; else 
#line 730 
                                   goto ldv_49594;
  ldv_49594: 
#line 731 
  ;
  
#line 728 
  __retres = 0;
  
#line 728 
  return __retres;
}


#line 731  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int pm_stats_open(struct inode *inode, struct file *file)
{
  int tmp;
  
#line 733 
  tmp = single_open(file,& pm_stats_show,inode->i_private);
  
#line 733 
  return tmp;
}


#line 736  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static ssize_t pm_stats_clear(struct file *file, char const *buf, size_t count, loff_t *pos)
{
  ssize_t __retres;
  struct inode *tmp;
  
#line 739 
  tmp = file_inode((struct file const *)file);
  
#line 739 
  struct adapter *adap = (struct adapter *)tmp->i_private;
  
#line 741 
  t4_write_reg(adap,36808U,0U);
  
#line 742 
  t4_write_reg(adap,36840U,0U);
  
#line 743 
  __retres = (long)count;
  
#line 743 
  return __retres;
}


#line 746  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const pm_stats_debugfs_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = & pm_stats_clear, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & pm_stats_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & single_release, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 755  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int tx_rate_show(struct seq_file *seq, void *v)
{
  int __retres;
  u64 nrate[4U];
  u64 orate[4U];
  
#line 758 
  struct adapter *adap = (struct adapter *)seq->private;
  
#line 760 
  t4_get_chan_txrate(adap,(u64 *)(& nrate),(u64 *)(& orate));
  
#line 761 
  if ((unsigned int)adap->params.arch.nchan == 4U) {
    
#line 762 
    seq_puts(seq,"              channel 0   channel 1   ");
    
#line 764 
    seq_printf(seq,"NIC B/s:     %10llu  %10llu  %10llu  %10llu\n",nrate[0],nrate[1],nrate[2],nrate[3]);
    
#line 769 
    seq_printf(seq,"Offload B/s: %10llu  %10llu  %10llu  %10llu\n",orate[0],orate[1],orate[2],orate[3]);
  }
  else {
    
#line 775 
    seq_puts(seq,"              channel 0   channel 1\n");
    
#line 776 
    seq_printf(seq,"NIC B/s:     %10llu  %10llu\n",nrate[0],nrate[1]);
    
#line 779 
    seq_printf(seq,"Offload B/s: %10llu  %10llu\n",orate[0],orate[1]);
  }
  
#line 783 
  __retres = 0;
  
#line 783 
  return __retres;
}


#line 786  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int tx_rate_open(struct inode *inode, struct file *file)
{
  int tmp;
  
#line 786 
  tmp = single_open(file,& tx_rate_show,inode->i_private);
  
#line 786 
  return tmp;
}


#line 786  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const tx_rate_debugfs_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & tx_rate_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & single_release, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 788  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int cctrl_tbl_show(struct seq_file *seq, void *v)
{
  int __retres;
  int i;
  u16 (*incr)[32U];
  
#line 790 
  char const * const dec_fac[8U] = {"0.5", "0.5625", "0.625", "0.6875", "0.75", "0.8125", "0.875", "0.9375"};
  
#line 796 
  struct adapter *adap = (struct adapter *)seq->private;
  
#line 798 
  incr = (u16 (*)[32U])kmalloc(1024UL,208U);
  
#line 799 
  if (incr == (u16 (*)[32U])0) {
    
#line 800 
    __retres = -12;
    
#line 800 
    goto return_label;
  }
  else ;
  
#line 802 
  t4_read_cong_tbl(adap,incr);
  
#line 804 
  i = 0;
  
#line 804 
  goto ldv_49628;
  ldv_49627: 
#line 805 
  ;
  
#line 805 
  seq_printf(seq,"%2d: %4u %4u %4u %4u %4u %4u %4u %4u\n",i,(int)(*incr)[i],(int)(*(incr + 1U))[i],(int)(*(incr + 2U))[i],(int)(*(incr + 3U))[i],(int)(*(incr + 4U))[i],(int)(*(incr + 5U))[i],(int)(*(incr + 6U))[i],(int)(*(incr + 7U))[i]);
  
#line 808 
  seq_printf(seq,"%8u %4u %4u %4u %4u %4u %4u %4u %5u %s\n",(int)(*(incr + 8U))[i],(int)(*(incr + 9U))[i],(int)(*(incr + 10U))[i],(int)(*(incr + 11U))[i],(int)(*(incr + 12U))[i],(int)(*(incr + 13U))[i],(int)(*(incr + 14U))[i],(int)(*(incr + 15U))[i],(int)adap->params.a_wnd[i],dec_fac[(int)adap->params.b_wnd[i]]);
  
#line 804 
  i += 1;
  ldv_49628: 
#line 805 
  ;
  
#line 804 
  if (i <= 31) 
#line 806 
               goto ldv_49627; else 
#line 809 
                                    goto ldv_49629;
  ldv_49629: 
#line 810 
  ;
  
#line 815 
  kfree((void const *)incr);
  
#line 816 
  __retres = 0;
  return_label: 
#line 816 
                return __retres;
}


#line 819  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int cctrl_tbl_open(struct inode *inode, struct file *file)
{
  int tmp;
  
#line 819 
  tmp = single_open(file,& cctrl_tbl_show,inode->i_private);
  
#line 819 
  return tmp;
}


#line 819  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const cctrl_tbl_debugfs_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & cctrl_tbl_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & single_release, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 824  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static char *unit_conv(char *buf, size_t len, unsigned int val, unsigned int factor)
{
  
#line 827 
  unsigned int rem = val % factor;
  
#line 829 
  if (rem == 0U) 
#line 830 
                 snprintf(buf,len,"%u",val / factor);
  else {
    
#line 832 
    goto ldv_49643;
    ldv_49642: 
#line 833 
    ;
    
#line 833 
    rem /= 10U;
    ldv_49643: 
#line 834 
    ;
    
#line 832 
    if (rem % 10U == 0U) 
#line 834 
                         goto ldv_49642; else 
#line 837 
                                              goto ldv_49644;
    ldv_49644: 
#line 838 
    ;
    
#line 834 
    snprintf(buf,len,"%u.%u",val / factor,rem);
  }
  
#line 836 
  return buf;
}


#line 839  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int clk_show(struct seq_file *seq, void *v)
{
  int __retres;
  char buf[32U];
  char *tmp_0;
  char *tmp_1;
  char *tmp_2;
  char *tmp_3;
  u32 tmp_4;
  u32 tmp_5;
  u32 tmp_6;
  u32 tmp_7;
  u32 tmp_8;
  u32 tmp_9;
  u32 tmp_10;
  u32 tmp_11;
  u32 tmp_12;
  
#line 842 
  struct adapter *adap = (struct adapter *)seq->private;
  
#line 843 
  unsigned int cclk_ps = 1000000000U / adap->params.vpd.cclk;
  
#line 844 
  u32 res = t4_read_reg(adap,32144U);
  
#line 845 
  unsigned int tre = (res >> 16) & 255U;
  
#line 846 
  unsigned int dack_re = res & 255U;
  
#line 847 
  unsigned long long tp_tick_us = (unsigned long long)((cclk_ps << tre) / 1000000U);
  
#line 849 
  tmp_0 = unit_conv((char *)(& buf),32UL,cclk_ps,1000U);
  
#line 849 
  ;
  
#line 849 
  seq_printf(seq,"Core clock period: %s ns\n",tmp_0);
  
#line 851 
  tmp_1 = unit_conv((char *)(& buf),32UL,cclk_ps << tre,1000000U);
  
#line 851 
  ;
  
#line 851 
  seq_printf(seq,"TP timer tick: %s us\n",tmp_1);
  
#line 853 
  tmp_2 = unit_conv((char *)(& buf),32UL,cclk_ps << ((res >> 8) & 255U),1000000U);
  
#line 853 
  ;
  
#line 853 
  seq_printf(seq,"TCP timestamp tick: %s us\n",tmp_2);
  
#line 856 
  tmp_3 = unit_conv((char *)(& buf),32UL,cclk_ps << dack_re,1000000U);
  
#line 856 
  ;
  
#line 856 
  seq_printf(seq,"DACK tick: %s us\n",tmp_3);
  
#line 860 
  tmp_4 = t4_read_reg(adap,32180U);
  
#line 858 
  ;
  
#line 858 
  ;
  
#line 858 
  seq_printf(seq,"DACK timer: %u us\n",((cclk_ps << dack_re) / 1000000U) * tmp_4);
  
#line 862 
  tmp_5 = t4_read_reg(adap,32152U);
  
#line 861 
  ;
  
#line 861 
  ;
  
#line 861 
  seq_printf(seq,"Retransmit min: %llu us\n",(unsigned long long)tmp_5 * tp_tick_us);
  
#line 864 
  tmp_6 = t4_read_reg(adap,32156U);
  
#line 863 
  ;
  
#line 863 
  ;
  
#line 863 
  seq_printf(seq,"Retransmit max: %llu us\n",(unsigned long long)tmp_6 * tp_tick_us);
  
#line 866 
  tmp_7 = t4_read_reg(adap,32160U);
  
#line 865 
  ;
  
#line 865 
  ;
  
#line 865 
  seq_printf(seq,"Persist timer min: %llu us\n",(unsigned long long)tmp_7 * tp_tick_us);
  
#line 868 
  tmp_8 = t4_read_reg(adap,32164U);
  
#line 867 
  ;
  
#line 867 
  ;
  
#line 867 
  seq_printf(seq,"Persist timer max: %llu us\n",(unsigned long long)tmp_8 * tp_tick_us);
  
#line 870 
  tmp_9 = t4_read_reg(adap,32168U);
  
#line 869 
  ;
  
#line 869 
  ;
  
#line 869 
  seq_printf(seq,"Keepalive idle timer: %llu us\n",(unsigned long long)tmp_9 * tp_tick_us);
  
#line 872 
  tmp_10 = t4_read_reg(adap,32172U);
  
#line 871 
  ;
  
#line 871 
  ;
  
#line 871 
  seq_printf(seq,"Keepalive interval: %llu us\n",(unsigned long long)tmp_10 * tp_tick_us);
  
#line 874 
  tmp_11 = t4_read_reg(adap,32176U);
  
#line 873 
  ;
  
#line 873 
  ;
  
#line 873 
  seq_printf(seq,"Initial SRTT: %llu us\n",((unsigned long long)tmp_11 & 65535ULL) * tp_tick_us);
  
#line 876 
  tmp_12 = t4_read_reg(adap,32184U);
  
#line 875 
  ;
  
#line 875 
  ;
  
#line 875 
  seq_printf(seq,"FINWAIT2 timer: %llu us\n",(unsigned long long)tmp_12 * tp_tick_us);
  
#line 878 
  __retres = 0;
  
#line 878 
  return __retres;
}


#line 881  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int clk_open(struct inode *inode, struct file *file)
{
  int tmp;
  
#line 881 
  tmp = single_open(file,& clk_show,inode->i_private);
  
#line 881 
  return tmp;
}


#line 881  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const clk_debugfs_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & clk_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & single_release, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 884  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static char const * const devlog_level_strings[6U] = {"EMERG", "CRIT", "ERR", "NOTICE", "INFO", "DEBUG"};

#line 893  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static char const * const devlog_facility_strings[51U] = {"CORE", [2] = "SCHED", [4] = "TIMER", [6] = "RES", [8] = "HW", [16] = "FLR", [18] = "DMAQ", [20] = "PHY", [22] = "MAC", [24] = "PORT", [26] = "VI", [28] = "FILTER", [30] = "ACL", [32] = "TM", [34] = "QFC", [36] = "DCB", [38] = "ETH", [40] = "OFLD", [42] = "RI", [44] = "ISCSI", [46] = "FCOE", [48] = "FOISCSI", [50] = "FOFCOE"};

#line 929  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int devlog_show(struct seq_file *seq, void *v)
{
  int __retres;
  
#line 931 
  if (v == (void *)1) 
#line 932 
                      seq_printf(seq,"%10s  %15s  %8s  %8s  %s\n",(char *)"Seq#",(char *)"Tstamp",(char *)"Level",(char *)"Facility",(char *)"Message");
  else {
    unsigned long index;
    struct fw_devlog_e *e;
    char const *tmp;
    char const *tmp_0;
    unsigned long long tmp_2;
    unsigned int tmp_4;
    unsigned int tmp_6;
    unsigned int tmp_8;
    unsigned int tmp_10;
    unsigned int tmp_12;
    unsigned int tmp_14;
    unsigned int tmp_16;
    unsigned int tmp_18;
    unsigned int tmp_20;
    
#line 935 
    struct devlog_info *dinfo = (struct devlog_info *)seq->private;
    
#line 936 
    int fidx = (int)((long)v + (long)4294967294U);
    
#line 943 
    index = (unsigned long)(dinfo->first + (unsigned int)fidx);
    
#line 944 
    if ((unsigned long)dinfo->nentries <= index) 
#line 945 
                                                 index -= (unsigned long)dinfo->nentries; else ;
    
#line 946 
    e = & dinfo->log[index];
    
#line 947 
    if (e->timestamp == 0ULL) {
      
#line 948 
      __retres = 0;
      
#line 948 
      goto return_label;
    }
    else ;
    
#line 959 
    if ((unsigned int)e->facility <= 50U) 
#line 959 
                                          tmp = devlog_facility_strings[(int)e->facility]; else 
                                                                    
#line 959 
                                                                    tmp = "UNKNOWN";
    
#line 956 
    if ((unsigned int)e->level <= 5U) 
#line 956 
                                      tmp_0 = devlog_level_strings[(int)e->level]; else 
                                                                    
#line 956 
                                                                    tmp_0 = "UNKNOWN";
    
#line 955 
    if (0 != 0) 
#line 955 
                tmp_2 = (((((((e->timestamp << 56) | ((e->timestamp << 40) & 71776119061217280ULL)) | ((e->timestamp << 24) & 280375465082880ULL)) | ((e->timestamp << 8) & 1095216660480ULL)) | ((e->timestamp >> 8) & 4278190080ULL)) | ((e->timestamp >> 24) & 16711680ULL)) | ((e->timestamp >> 40) & 65280ULL)) | (e->timestamp >> 56); else 
                                                                    
#line 956 
                                                                    tmp_2 = __fswab64(e->timestamp);
    
#line 954 
    if (0 != 0) 
#line 954 
                tmp_4 = (((e->seqno << 24) | ((e->seqno << 8) & 16711680U)) | ((e->seqno >> 8) & 65280U)) | (e->seqno >> 24); else 
                                                                    
#line 955 
                                                                    tmp_4 = __fswab32(e->seqno);
    
#line 954 
    ;
    
#line 954 
    seq_printf(seq,"%10d  %15llu  %8s  %8s  ",tmp_4,tmp_2,tmp_0,tmp);
    
#line 970 
    if (0 != 0) 
#line 970 
                tmp_6 = (((e->params[7] << 24) | ((e->params[7] << 8) & 16711680U)) | ((e->params[7] >> 8) & 65280U)) | (e->params[7] >> 24); else 
                                                                    
#line 971 
                                                                    tmp_6 = __fswab32(e->params[7]);
    
#line 969 
    if (0 != 0) 
#line 969 
                tmp_8 = (((e->params[6] << 24) | ((e->params[6] << 8) & 16711680U)) | ((e->params[6] >> 8) & 65280U)) | (e->params[6] >> 24); else 
                                                                    
#line 970 
                                                                    tmp_8 = __fswab32(e->params[6]);
    
#line 968 
    if (0 != 0) 
#line 968 
                tmp_10 = (((e->params[5] << 24) | ((e->params[5] << 8) & 16711680U)) | ((e->params[5] >> 8) & 65280U)) | (e->params[5] >> 24); else 
                                                                    
#line 969 
                                                                    tmp_10 = __fswab32(e->params[5]);
    
#line 967 
    if (0 != 0) 
#line 967 
                tmp_12 = (((e->params[4] << 24) | ((e->params[4] << 8) & 16711680U)) | ((e->params[4] >> 8) & 65280U)) | (e->params[4] >> 24); else 
                                                                    
#line 968 
                                                                    tmp_12 = __fswab32(e->params[4]);
    
#line 966 
    if (0 != 0) 
#line 966 
                tmp_14 = (((e->params[3] << 24) | ((e->params[3] << 8) & 16711680U)) | ((e->params[3] >> 8) & 65280U)) | (e->params[3] >> 24); else 
                                                                    
#line 967 
                                                                    tmp_14 = __fswab32(e->params[3]);
    
#line 965 
    if (0 != 0) 
#line 965 
                tmp_16 = (((e->params[2] << 24) | ((e->params[2] << 8) & 16711680U)) | ((e->params[2] >> 8) & 65280U)) | (e->params[2] >> 24); else 
                                                                    
#line 966 
                                                                    tmp_16 = __fswab32(e->params[2]);
    
#line 964 
    if (0 != 0) 
#line 964 
                tmp_18 = (((e->params[1] << 24) | ((e->params[1] << 8) & 16711680U)) | ((e->params[1] >> 8) & 65280U)) | (e->params[1] >> 24); else 
                                                                    
#line 965 
                                                                    tmp_18 = __fswab32(e->params[1]);
    
#line 963 
    if (0 != 0) 
#line 963 
                tmp_20 = (((e->params[0] << 24) | ((e->params[0] << 8) & 16711680U)) | ((e->params[0] >> 8) & 65280U)) | (e->params[0] >> 24); else 
                                                                    
#line 964 
                                                                    tmp_20 = __fswab32(e->params[0]);
    
#line 963 
    ;
    
#line 963 
    ;
    
#line 963 
    seq_printf(seq,(char const *)(& e->fmt),tmp_20,tmp_18,tmp_16,tmp_14,tmp_12,tmp_10,tmp_8,tmp_6);
  }
  
#line 973 
  __retres = 0;
  return_label: 
#line 973 
                return __retres;
}


#line 978  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
__inline static void *devlog_get_idx(struct devlog_info *dinfo, loff_t pos)
{
  void *__retres;
  
#line 980 
  if ((long long)dinfo->nentries < pos) {
    
#line 981 
    __retres = (void *)0;
    
#line 981 
    goto return_label;
  }
  else ;
  
#line 983 
  __retres = (void *)(pos + 1LL);
  return_label: 
#line 983 
                return __retres;
}


#line 986  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static void *devlog_start(struct seq_file *seq, loff_t *pos)
{
  void *tmp_0;
  
#line 988 
  struct devlog_info *dinfo = (struct devlog_info *)seq->private;
  
#line 990 
  if (*pos != 0LL) 
#line 991 
                   tmp_0 = devlog_get_idx(dinfo,*pos); else 
#line 990 
                                                            tmp_0 = (void *)1;
  
#line 992 
  return tmp_0;
}


#line 995  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static void *devlog_next(struct seq_file *seq, void *v, loff_t *pos)
{
  void *tmp;
  
#line 997 
  struct devlog_info *dinfo = (struct devlog_info *)seq->private;
  
#line 999 
  *pos += 1LL;
  
#line 1000 
  tmp = devlog_get_idx(dinfo,*pos);
  
#line 1000 
  return tmp;
}


#line 1003  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static void devlog_stop(struct seq_file *seq, void *v)
{
  
#line 1005 
  return;
}


#line 1007  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct seq_operations const devlog_seq_ops = {.start = & devlog_start, .stop = & devlog_stop, .next = & devlog_next, .show = & devlog_show};

#line 1017  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int devlog_open(struct inode *inode, struct file *file)
{
  int __retres;
  struct devlog_info *dinfo;
  unsigned int index;
  u32 fseqno;
  int ret;
  
#line 1019 
  struct adapter *adap = (struct adapter *)inode->i_private;
  
#line 1020 
  struct devlog_params *dparams = & adap->params.devlog;
  
#line 1028 
  if (dparams->start == 0U) {
    
#line 1029 
    __retres = -6;
    
#line 1029 
    goto return_label;
  }
  else ;
  
#line 1034 
  dinfo = (struct devlog_info *)__seq_open_private(file,& devlog_seq_ops,(int)(dparams->size + 8U));
  
#line 1036 
  if (dinfo == (struct devlog_info *)0) {
    
#line 1037 
    __retres = -12;
    
#line 1037 
    goto return_label;
  }
  else ;
  
#line 1041 
  dinfo->nentries = dparams->size / 256U;
  
#line 1042 
  dinfo->first = 0U;
  
#line 1043 
  ldv_spin_lock_84(& adap->win0_lock);
  
#line 1044 
  ret = t4_memory_rw(adap,(int)adap->params.drv_memwin,(int)dparams->memtype,dparams->start,dparams->size,(void *)(& dinfo->log),1);
  
#line 1047 
  ldv_spin_unlock_85(& adap->win0_lock);
  
#line 1048 
  if (ret != 0) {
    
#line 1049 
    ldv_seq_release_private_86(inode,file);
    
#line 1050 
    __retres = ret;
    
#line 1050 
    goto return_label;
  }
  else ;
  
#line 1056 
  fseqno = 4294967295U;
  
#line 1056 
  index = 0U;
  
#line 1056 
  goto ldv_49715;
  ldv_49714: 
#line 1057 
  ;
  {
    __u32 seqno;
    
#line 1057 
    struct fw_devlog_e *e = & dinfo->log[index];
    
#line 1060 
    if (e->timestamp == 0ULL) 
#line 1061 
                              goto ldv_49713; else ;
    
#line 1063 
    if (0 != 0) 
#line 1063 
                seqno = (((e->seqno << 24) | ((e->seqno << 8) & 16711680U)) | ((e->seqno >> 8) & 65280U)) | (e->seqno >> 24); else 
                                                                    
#line 1063 
                                                                    seqno = __fswab32(e->seqno);
    
#line 1064 
    if (seqno < fseqno) {
      
#line 1065 
      fseqno = seqno;
      
#line 1066 
      dinfo->first = index;
    }
    else ;
  }
  ldv_49713: 
#line 1069 
  ;
  
#line 1056 
  index += 1U;
  ldv_49715: 
#line 1057 
  ;
  
#line 1056 
  if (dinfo->nentries > index) 
#line 1058 
                               goto ldv_49714; else 
#line 1061 
                                                    goto ldv_49716;
  ldv_49716: 
#line 1062 
  ;
  
#line 1069 
  __retres = 0;
  return_label: 
#line 1069 
                return __retres;
}


#line 1072  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const devlog_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & devlog_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & seq_release_private, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 1080  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int mbox_show(struct seq_file *seq, void *v)
{
  int __retres;
  int i;
  int tmp_0;
  int tmp;
  unsigned int tmp_1;
  unsigned long tmp_2;
  
#line 1082 
  char const * const owner[4U] = {"none", "FW", "driver", "unknown"};
  
#line 1086 
  unsigned int mbox = (unsigned int)((long)seq->private) & 7U;
  
#line 1087 
  struct adapter *adap = (struct adapter *)(seq->private + - mbox);
  
#line 1088 
  void *addr = adap->regs + ((mbox + 120U) * 1024U + 576U);
  
#line 1091 
  tmp = is_t4(adap->params.chip);
  
#line 1091 
  if (tmp != 0) 
#line 1091 
                tmp_0 = 640; else 
#line 1091 
                                  tmp_0 = 656;
  
#line 1089 
  unsigned int ctrl_reg = (unsigned int)tmp_0;
  
#line 1092 
  void *ctrl = adap->regs + ((mbox + 120U) * 1024U + ctrl_reg);
  
#line 1094 
  tmp_1 = readl((void const volatile *)ctrl);
  
#line 1094 
  i = (int)tmp_1 & 3;
  
#line 1095 
  seq_printf(seq,"mailbox owned by %s\n\n",owner[i]);
  
#line 1097 
  i = 0;
  
#line 1097 
  goto ldv_49730;
  ldv_49729: 
#line 1098 
  ;
  
#line 1099 
  tmp_2 = readq((void const volatile *)(addr + i));
  
#line 1098 
  ;
  
#line 1098 
  seq_printf(seq,"%016llx\n",(unsigned long long)tmp_2);
  
#line 1097 
  i += 8;
  ldv_49730: 
#line 1098 
  ;
  
#line 1097 
  if (i <= 63) 
#line 1099 
               goto ldv_49729; else 
#line 1102 
                                    goto ldv_49731;
  ldv_49731: 
#line 1103 
  ;
  
#line 1100 
  __retres = 0;
  
#line 1100 
  return __retres;
}


#line 1103  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int mbox_open(struct inode *inode, struct file *file)
{
  int tmp;
  
#line 1105 
  tmp = single_open(file,& mbox_show,inode->i_private);
  
#line 1105 
  return tmp;
}


#line 1108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static ssize_t mbox_write(struct file *file, char const *buf, size_t count, loff_t *pos)
{
  ssize_t __retres;
  int i;
  char s[256U];
  unsigned long long data[8U];
  struct inode const *ino;
  unsigned int mbox;
  struct adapter *adap;
  void *addr;
  void *ctrl;
  unsigned long tmp;
  int tmp_0;
  unsigned int tmp_2;
  
#line 1112 
  char c = (char)10;
  
#line 1120 
  if (count + 18446744073709551615UL > 254UL) {
    
#line 1121 
    __retres = -22L;
    
#line 1121 
    goto return_label;
  }
  else ;
  
#line 1122 
  tmp = copy_from_user((void *)(& s),(void const *)buf,count);
  
#line 1122 
  if (tmp != 0UL) {
    
#line 1123 
    __retres = -14L;
    
#line 1123 
    goto return_label;
  }
  else ;
  
#line 1124 
  s[count] = (char)0;
  
#line 1126 
  tmp_0 = sscanf((char const *)(& s),"%llx %llx %llx %llx %llx %llx %llx %llx%c",&(data[0]),& data[1],& data[2],& data[3],& data[4],& data[5],& data[6],& data[7],& c);
  
#line 1126 
  if (tmp_0 <= 7) {
    
#line 1129 
    __retres = -22L;
    
#line 1129 
    goto return_label;
  }
  else 
    
#line 1128 
    if ((int)c != 10) {
      
#line 1129 
      __retres = -22L;
      
#line 1129 
      goto return_label;
    }
    else ;
  
#line 1131 
  ino = (struct inode const *)file_inode((struct file const *)file);
  
#line 1132 
  mbox = (unsigned int)((long)ino->i_private) & 7U;
  
#line 1133 
  adap = (struct adapter *)(ino->i_private + - mbox);
  
#line 1134 
  addr = adap->regs + ((mbox + 120U) * 1024U + 576U);
  
#line 1135 
  ctrl = addr + 64U;
  
#line 1137 
  tmp_2 = readl((void const volatile *)ctrl);
  
#line 1137 
  if ((tmp_2 & 3U) != 2U) {
    
#line 1138 
    __retres = -16L;
    
#line 1138 
    goto return_label;
  }
  else ;
  
#line 1140 
  i = 0;
  
#line 1140 
  goto ldv_49752;
  ldv_49751: 
#line 1141 
  ;
  
#line 1141 
  writeq((unsigned long)data[i],(void volatile *)(addr + i * 8));
  
#line 1140 
  i += 1;
  ldv_49752: 
#line 1141 
  ;
  
#line 1140 
  if (i <= 7) 
#line 1142 
              goto ldv_49751; else 
#line 1145 
                                   goto ldv_49753;
  ldv_49753: 
#line 1146 
  ;
  
#line 1143 
  writel(9U,(void volatile *)ctrl);
  
#line 1144 
  __retres = (long)count;
  return_label: 
#line 1144 
                return __retres;
}


#line 1147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const mbox_debugfs_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = & mbox_write, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & mbox_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & single_release, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 1156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static ssize_t flash_read(struct file *file, char *buf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  struct inode *tmp;
  
#line 1159 
  loff_t pos = *ppos;
  
#line 1160 
  tmp = file_inode((struct file const *)file);
  
#line 1160 
  loff_t avail = tmp->i_size;
  
#line 1161 
  struct adapter *adap = (struct adapter *)file->private_data;
  
#line 1163 
  if (pos < 0LL) {
    
#line 1164 
    __retres = -22L;
    
#line 1164 
    goto return_label;
  }
  else ;
  
#line 1165 
  if (pos >= avail) {
    
#line 1166 
    __retres = 0L;
    
#line 1166 
    goto return_label;
  }
  else ;
  
#line 1167 
  if ((unsigned long long)(avail - pos) < (unsigned long long)count) 
    
#line 1168 
    count = (unsigned long)(avail - pos); else ;
  
#line 1170 
  goto ldv_49772;
  ldv_49771: 
#line 1171 
  ;
  {
    size_t len;
    int ret;
    int ofst;
    u8 data[256U];
    unsigned long tmp_1;
    unsigned long tmp_2;
    
#line 1175 
    ofst = (int)pos & 3;
    {
      unsigned long tmp_0;
      
#line 1176 
      size_t _min1 = (unsigned long)ofst + count;
      
#line 1176 
      unsigned long _min2 = 256UL;
      
#line 1176 
      if (_min1 < _min2) 
#line 1176 
                         tmp_0 = _min1; else 
#line 1176 
                                             tmp_0 = _min2;
      
#line 1176 
      tmp_1 = tmp_0;
    }
    
#line 1176 
    len = tmp_1;
    
#line 1177 
    ret = t4_read_flash(adap,(unsigned int)pos - (unsigned int)ofst,(unsigned int)((len + 3UL) / 4UL),(u32 *)(& data),1);
    
#line 1179 
    if (ret != 0) {
      
#line 1180 
      __retres = (long)ret;
      
#line 1180 
      goto return_label;
    }
    else ;
    
#line 1182 
    len -= (unsigned long)ofst;
    
#line 1183 
    tmp_2 = copy_to_user((void *)buf,(void const *)(& data) + ofst,len);
    
#line 1183 
    if (tmp_2 != 0UL) {
      
#line 1184 
      __retres = -14L;
      
#line 1184 
      goto return_label;
    }
    else ;
    
#line 1186 
    buf += len;
    
#line 1187 
    pos = (long long)((unsigned long long)pos + (unsigned long long)len);
    
#line 1188 
    count -= len;
  }
  ldv_49772: 
#line 1190 
  ;
  
#line 1170 
  if (count != 0UL) 
#line 1172 
                    goto ldv_49771; else 
#line 1175 
                                         goto ldv_49773;
  ldv_49773: 
#line 1176 
  ;
  
#line 1190 
  count = (unsigned long)(pos - *ppos);
  
#line 1191 
  *ppos = pos;
  
#line 1192 
  __retres = (long)count;
  return_label: 
#line 1192 
                return __retres;
}


#line 1195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const flash_debugfs_fops = {.owner = & __this_module, .llseek = (loff_t (*)(struct file *, loff_t , int ))0, .read = & flash_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & mem_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 1201  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
__inline static void tcamxy2valmask(u64 x, u64 y, u8 *addr, u64 *mask)
{
  
#line 1203 
  *mask = x | y;
  
#line 1204 
  if (0 != 0) 
#line 1204 
              y = (((((((y << 56) | ((y << 40) & 71776119061217280ULL)) | ((y << 24) & 280375465082880ULL)) | ((y << 8) & 1095216660480ULL)) | ((y >> 8) & 4278190080ULL)) | ((y >> 24) & 16711680ULL)) | ((y >> 40) & 65280ULL)) | (y >> 56); else 
                                                                    
#line 1204 
                                                                    y = __fswab64(y);
  
#line 1205 
  memcpy((void *)addr,(void const *)(& y) + 2U,6UL);
  
#line 1206 
  return;
}


#line 1208  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int mps_tcam_show(struct seq_file *seq, void *v)
{
  int __retres;
  
#line 1210 
  struct adapter *adap = (struct adapter *)seq->private;
  
#line 1211 
  unsigned int chip_ver = ((unsigned int)adap->params.chip >> 4) & 15U;
  
#line 1213 
  if (v == (void *)1) 
    
#line 1214 
    if ((unsigned int)adap->params.arch.mps_rplc_size > 128U) 
#line 1215 
                                                              seq_puts(seq,"Idx  Ethernet address     Mask     "); else 
                                                                    
#line 1220 
                                                                    seq_puts(seq,"Idx  Ethernet address     Mask     ");
  else {
    u64 mask;
    u8 addr[6U];
    bool replicate;
    u64 tcamy;
    u64 tcamx;
    u64 val;
    u32 cls_lo;
    u32 cls_hi;
    u32 ctl;
    
#line 1227 
    unsigned int idx = (unsigned int)((long)v) + 4294967294U;
    
#line 1230 
    u32 rplc[8U] = {0U};
    
#line 1232 
    if (chip_ver > 5U) {
      u32 tmp;
      u32 tmp_0;
      u32 tmp_1;
      u32 tmp_2;
      
#line 1239 
      ctl = 0U;
      
#line 1240 
      if (idx <= 255U) 
#line 1241 
                       ctl = (idx << 17) | ctl; else 
#line 1243 
                                                     ctl = (((idx + 4294967040U) << 17) | ctl) | 33554432U;
      
#line 1245 
      t4_write_reg(adap,61448U,ctl);
      
#line 1246 
      tmp = t4_read_reg(adap,61444U);
      
#line 1246 
      val = (unsigned long long)tmp;
      
#line 1247 
      tcamy = (val << 32) & 281470681743360ULL;
      
#line 1248 
      tmp_0 = t4_read_reg(adap,61440U);
      
#line 1248 
      tcamy = (unsigned long long)tmp_0 | tcamy;
      
#line 1251 
      ctl |= 65536U;
      
#line 1252 
      t4_write_reg(adap,61448U,ctl);
      
#line 1253 
      tmp_1 = t4_read_reg(adap,61444U);
      
#line 1253 
      val = (unsigned long long)tmp_1;
      
#line 1254 
      tcamx = (val << 32) & 281470681743360ULL;
      
#line 1255 
      tmp_2 = t4_read_reg(adap,61440U);
      
#line 1255 
      tcamx = (unsigned long long)tmp_2 | tcamx;
    }
    else {
      
#line 1257 
      tcamy = t4_read_reg64(adap,(idx + 3840U) * 16U);
      
#line 1258 
      tcamx = t4_read_reg64(adap,idx * 16U + 61448U);
    }
    
#line 1261 
    cls_lo = t4_read_reg(adap,(idx + 7168U) * 8U);
    
#line 1262 
    cls_hi = t4_read_reg(adap,idx * 8U + 57348U);
    
#line 1264 
    if ((tcamx & tcamy) != 0ULL) {
      
#line 1265 
      seq_printf(seq,"%3u         -\n",idx);
      
#line 1266 
      goto out;
    }
    else ;
    
#line 1269 
    rplc[3] = 0U;
    
#line 1269 
    rplc[2] = rplc[3];
    
#line 1269 
    rplc[1] = rplc[2];
    
#line 1269 
    rplc[0] = rplc[1];
    
#line 1270 
    if (chip_ver > 5U) 
#line 1271 
                       replicate = (_Bool)((cls_lo & 4096U) != 0U); else 
                                                                    
#line 1273 
                                                                    replicate = (_Bool)((cls_lo & 2048U) != 0U);
    
#line 1275 
    if ((int)replicate != 0) {
      struct fw_ldst_cmd ldst_cmd;
      int ret;
      struct fw_ldst_mps_rplc mps_rplc;
      u32 ldst_addrspc;
      
#line 1281 
      memset((void *)(& ldst_cmd),0,64UL);
      
#line 1282 
      ldst_addrspc = 32U;
      
#line 1284 
      if (0 != 0) 
#line 1284 
                  ldst_cmd.op_to_addrspace = ((((ldst_addrspc << 24) | ((ldst_addrspc << 8) & 16711680U)) | ((ldst_addrspc >> 8) & 16128U)) | (ldst_addrspc >> 24)) | 49153U; else 
                                                                    
#line 1285 
                                                                    ldst_cmd.op_to_addrspace = __fswab32(ldst_addrspc | 29360128U);
      
#line 1289 
      ldst_cmd.cycles_to_len16 = 67108864U;
      
#line 1290 
      if (0 != 0) 
#line 1290 
                  ldst_cmd.u.mps.rplc.fid_idx = (unsigned short)((unsigned int)((int)((unsigned short)((int)((unsigned int)((unsigned short)idx) | 32768U) << 8)) | ((int)((unsigned short)idx) >> 8)) | 128U); else 
                                                                    
#line 1291 
                                                                    ldst_cmd.u.mps.rplc.fid_idx = __fswab16((unsigned short)((int)((unsigned int)((unsigned short)idx) | 32768U)));
      
#line 1293 
      ret = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& ldst_cmd),64,(void *)(& ldst_cmd));
      
#line 1295 
      if (ret != 0) 
#line 1296 
                    dev_warn((struct device const *)adap->pdev_dev,"Can\'t read MPS ",idx,- ret);
      else {
        
#line 1300 
        mps_rplc = ldst_cmd.u.mps.rplc;
        
#line 1301 
        if (0 != 0) 
#line 1301 
                    rplc[0] = (((mps_rplc.rplc31_0 << 24) | ((mps_rplc.rplc31_0 << 8) & 16711680U)) | ((mps_rplc.rplc31_0 >> 8) & 65280U)) | (mps_rplc.rplc31_0 >> 24); else 
                                                                    
#line 1301 
                                                                    rplc[0] = __fswab32(mps_rplc.rplc31_0);
        
#line 1302 
        if (0 != 0) 
#line 1302 
                    rplc[1] = (((mps_rplc.rplc63_32 << 24) | ((mps_rplc.rplc63_32 << 8) & 16711680U)) | ((mps_rplc.rplc63_32 >> 8) & 65280U)) | (mps_rplc.rplc63_32 >> 24); else 
                                                                    
#line 1302 
                                                                    rplc[1] = __fswab32(mps_rplc.rplc63_32);
        
#line 1303 
        if (0 != 0) 
#line 1303 
                    rplc[2] = (((mps_rplc.rplc95_64 << 24) | ((mps_rplc.rplc95_64 << 8) & 16711680U)) | ((mps_rplc.rplc95_64 >> 8) & 65280U)) | (mps_rplc.rplc95_64 >> 24); else 
                                                                    
#line 1303 
                                                                    rplc[2] = __fswab32(mps_rplc.rplc95_64);
        
#line 1304 
        if (0 != 0) 
#line 1304 
                    rplc[3] = (((mps_rplc.rplc127_96 << 24) | ((mps_rplc.rplc127_96 << 8) & 16711680U)) | ((mps_rplc.rplc127_96 >> 8) & 65280U)) | (mps_rplc.rplc127_96 >> 24); else 
                                                                    
#line 1304 
                                                                    rplc[3] = __fswab32(mps_rplc.rplc127_96);
        
#line 1305 
        if ((unsigned int)adap->params.arch.mps_rplc_size > 128U) {
          
#line 1306 
          if (0 != 0) 
#line 1306 
                      rplc[4] = (((mps_rplc.rplc159_128 << 24) | ((mps_rplc.rplc159_128 << 8) & 16711680U)) | ((mps_rplc.rplc159_128 >> 8) & 65280U)) | (mps_rplc.rplc159_128 >> 24); else 
                                                                    
#line 1306 
                                                                    rplc[4] = __fswab32(mps_rplc.rplc159_128);
          
#line 1307 
          if (0 != 0) 
#line 1307 
                      rplc[5] = (((mps_rplc.rplc191_160 << 24) | ((mps_rplc.rplc191_160 << 8) & 16711680U)) | ((mps_rplc.rplc191_160 >> 8) & 65280U)) | (mps_rplc.rplc191_160 >> 24); else 
                                                                    
#line 1307 
                                                                    rplc[5] = __fswab32(mps_rplc.rplc191_160);
          
#line 1308 
          if (0 != 0) 
#line 1308 
                      rplc[6] = (((mps_rplc.rplc223_192 << 24) | ((mps_rplc.rplc223_192 << 8) & 16711680U)) | ((mps_rplc.rplc223_192 >> 8) & 65280U)) | (mps_rplc.rplc223_192 >> 24); else 
                                                                    
#line 1308 
                                                                    rplc[6] = __fswab32(mps_rplc.rplc223_192);
          
#line 1309 
          if (0 != 0) 
#line 1309 
                      rplc[7] = (((mps_rplc.rplc255_224 << 24) | ((mps_rplc.rplc255_224 << 8) & 16711680U)) | ((mps_rplc.rplc255_224 >> 8) & 65280U)) | (mps_rplc.rplc255_224 >> 24); else 
                                                                    
#line 1309 
                                                                    rplc[7] = __fswab32(mps_rplc.rplc255_224);
        }
        else ;
      }
    }
    else ;
    
#line 1314 
    tcamxy2valmask(tcamx,tcamy,(u8 *)(& addr),& mask);
    
#line 1315 
    if (chip_ver > 5U) {
      unsigned int tmp_13;
      int tmp_14;
      
#line 1322 
      if ((cls_lo & 256U) != 0U) 
#line 1322 
                                 tmp_13 = cls_lo & 255U; else 
#line 1322 
                                                              tmp_13 = 4294967295U;
      
#line 1316 
      ;
      
#line 1316 
      ;
      
#line 1319 
      if ((cls_lo & 8192U) != 0U) 
#line 1319 
                                  tmp_14 = 89; else 
#line 1319 
                                                    tmp_14 = 78;
      
#line 1316 
      ;
      
#line 1316 
      ;
      
#line 1316 
      ;
      
#line 1316 
      ;
      
#line 1316 
      ;
      
#line 1316 
      ;
      
#line 1316 
      ;
      
#line 1316 
      ;
      
#line 1316 
      ;
      
#line 1316 
      seq_printf(seq,"%3u %02x:%02x:%02x:%02x:%02x:%02x ",idx,(int)addr[0],(int)addr[1],(int)addr[2],(int)addr[3],(int)addr[4],(int)addr[5],mask,tmp_14,cls_hi & 15U,(cls_lo >> 9) & 7U,tmp_13);
    }
    else {
      unsigned int tmp_15;
      int tmp_16;
      
#line 1332 
      if ((cls_lo & 128U) != 0U) 
#line 1332 
                                 tmp_15 = cls_lo & 127U; else 
#line 1332 
                                                              tmp_15 = 4294967295U;
      
#line 1326 
      ;
      
#line 1326 
      ;
      
#line 1329 
      if ((cls_lo & 4096U) != 0U) 
#line 1329 
                                  tmp_16 = 89; else 
#line 1329 
                                                    tmp_16 = 78;
      
#line 1326 
      ;
      
#line 1326 
      ;
      
#line 1326 
      ;
      
#line 1326 
      ;
      
#line 1326 
      ;
      
#line 1326 
      ;
      
#line 1326 
      ;
      
#line 1326 
      ;
      
#line 1326 
      ;
      
#line 1326 
      seq_printf(seq,"%3u %02x:%02x:%02x:%02x:%02x:%02x ",idx,(int)addr[0],(int)addr[1],(int)addr[2],(int)addr[3],(int)addr[4],(int)addr[5],mask,tmp_16,cls_hi & 15U,(cls_lo >> 8) & 7U,tmp_15);
    }
    
#line 1335 
    if ((int)replicate != 0) 
      
#line 1336 
      if ((unsigned int)adap->params.arch.mps_rplc_size > 128U) 
#line 1337 
                                                                seq_printf(seq," %08x %08x %08x %08x ",rplc[7],rplc[6],rplc[5],rplc[4],rplc[3],rplc[2],rplc[1],rplc[0]); else 
                                                                    
#line 1342 
                                                                    seq_printf(seq," %08x %08x %08x %08x",rplc[3],rplc[2],rplc[1],rplc[0]);
    else 
      
#line 1345 
      if ((unsigned int)adap->params.arch.mps_rplc_size > 128U) 
#line 1346 
                                                                seq_printf(seq,"%72c",32); else 
                                                                    
#line 1348 
                                                                    seq_printf(seq,"%36c",32);
    
#line 1351 
    if (chip_ver > 5U) 
#line 1352 
                       seq_printf(seq,"%4u%3u%3u%3u %#x\n",(cls_lo >> 14) & 7U,(cls_lo >> 17) & 7U,(cls_lo >> 20) & 7U,(cls_lo >> 23) & 7U,(cls_lo >> 26) & 15U); else 
                                                                    
#line 1359 
                                                                    seq_printf(seq,"%4u%3u%3u%3u %#x\n",(cls_lo >> 13) & 7U,(cls_lo >> 16) & 7U,(cls_lo >> 19) & 7U,(cls_lo >> 22) & 7U,(cls_lo >> 25) & 15U);
  }
  out: 
#line 1364 
  ;
  
#line 1364 
  __retres = 0;
  
#line 1364 
  return __retres;
}


#line 1367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
__inline static void *mps_tcam_get_idx(struct seq_file *seq, loff_t pos)
{
  int tmp_0;
  int tmp;
  void *tmp_1;
  
#line 1369 
  struct adapter *adap = (struct adapter *)seq->private;
  
#line 1370 
  tmp = is_t4(adap->params.chip);
  
#line 1370 
  if (tmp != 0) 
#line 1370 
                tmp_0 = 336; else 
#line 1370 
                                  tmp_0 = 512;
  
#line 1370 
  int max_mac_addr = tmp_0;
  
#line 1373 
  if ((long long)max_mac_addr >= pos) 
#line 1373 
                                      tmp_1 = (void *)(pos + 1LL); else 
                                                                    
#line 1373 
                                                                    tmp_1 = (void *)0;
  
#line 1373 
  return tmp_1;
}


#line 1376  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static void *mps_tcam_start(struct seq_file *seq, loff_t *pos)
{
  void *tmp_0;
  
#line 1378 
  if (*pos != 0LL) 
#line 1378 
                   tmp_0 = mps_tcam_get_idx(seq,*pos); else 
#line 1378 
                                                            tmp_0 = (void *)1;
  
#line 1378 
  return tmp_0;
}


#line 1381  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static void *mps_tcam_next(struct seq_file *seq, void *v, loff_t *pos)
{
  void *tmp;
  
#line 1383 
  *pos += 1LL;
  
#line 1384 
  tmp = mps_tcam_get_idx(seq,*pos);
  
#line 1384 
  return tmp;
}


#line 1387  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static void mps_tcam_stop(struct seq_file *seq, void *v)
{
  
#line 1389 
  return;
}


#line 1391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct seq_operations const mps_tcam_seq_ops = {.start = & mps_tcam_start, .stop = & mps_tcam_stop, .next = & mps_tcam_next, .show = & mps_tcam_show};

#line 1398  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int mps_tcam_open(struct inode *inode, struct file *file)
{
  
#line 1400 
  int res = ldv_seq_open_87(file,& mps_tcam_seq_ops);
  
#line 1402 
  if (res == 0) {
    
#line 1403 
    struct seq_file *seq = (struct seq_file *)file->private_data;
    
#line 1405 
    seq->private = inode->i_private;
  }
  else ;
  
#line 1407 
  return res;
}


#line 1410  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const mps_tcam_debugfs_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & mps_tcam_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & seq_release, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 1420  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int sensors_show(struct seq_file *seq, void *v)
{
  int __retres;
  u32 param[7U];
  u32 val[7U];
  int ret;
  
#line 1422 
  struct adapter *adap = (struct adapter *)seq->private;
  
#line 1429 
  param[0] = 17891328U;
  
#line 1432 
  param[1] = 17891584U;
  
#line 1435 
  ret = t4_query_params(adap,adap->mbox,adap->pf,0U,2U,(u32 const *)(& param),(u32 *)(& val));
  
#line 1438 
  if (ret < 0 || val[0] == 0U) 
#line 1439 
                               seq_puts(seq,"Temperature: <unknown>\n"); else 
                                                                    
#line 1441 
                                                                    seq_printf(seq,"Temperature: %dC\n",val[0]);
  
#line 1443 
  if (ret < 0 || val[1] == 0U) 
#line 1444 
                               seq_puts(seq,"Core VDD:    <unknown>\n"); else 
                                                                    
#line 1446 
                                                                    seq_printf(seq,"Core VDD:    %dmV\n",val[1]);
  
#line 1448 
  __retres = 0;
  
#line 1448 
  return __retres;
}


#line 1451  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int sensors_open(struct inode *inode, struct file *file)
{
  int tmp;
  
#line 1451 
  tmp = single_open(file,& sensors_show,inode->i_private);
  
#line 1451 
  return tmp;
}


#line 1451  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const sensors_debugfs_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & sensors_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & single_release, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 1454  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int clip_tbl_open(struct inode *inode, struct file *file)
{
  int tmp;
  
#line 1456 
  tmp = single_open(file,& clip_tbl_show,inode->i_private);
  
#line 1456 
  return tmp;
}


#line 1459  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const clip_tbl_debugfs_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & clip_tbl_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & single_release, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 1471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int rss_show(struct seq_file *seq, void *v, int idx)
{
  int __retres;
  
#line 1473 
  u16 *entry = (u16 *)v;
  
#line 1475 
  seq_printf(seq,"%4d:  %4u  %4u  %4u  %4u  %4u  %4u  %4u  %4u\n",idx * 8,(int)*entry,(int)*(entry + 1U),(int)*(entry + 2U),(int)*(entry + 3U),(int)*(entry + 4U),(int)*(entry + 5U),(int)*(entry + 6U),(int)*(entry + 7U));
  
#line 1478 
  __retres = 0;
  
#line 1478 
  return __retres;
}


#line 1481  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int rss_open(struct inode *inode, struct file *file)
{
  int __retres;
  int ret;
  struct seq_tab *p;
  
#line 1485 
  struct adapter *adap = (struct adapter *)inode->i_private;
  
#line 1487 
  p = seq_open_tab(file,256U,16U,0U,& rss_show);
  
#line 1488 
  if (p == (struct seq_tab *)0) {
    
#line 1489 
    __retres = -12;
    
#line 1489 
    goto return_label;
  }
  else ;
  
#line 1491 
  ret = t4_read_rss(adap,(u16 *)(& p->data));
  
#line 1492 
  if (ret != 0) 
#line 1493 
                ldv_seq_release_private_88(inode,file); else ;
  
#line 1495 
  __retres = ret;
  return_label: 
#line 1495 
                return __retres;
}


#line 1498  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const rss_debugfs_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & rss_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & seq_release_private, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 1512  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static char const *yesno(int x)
{
  char const *tmp;
  
#line 1514 
  char const *yes = "yes";
  
#line 1515 
  char const *no = "no";
  
#line 1517 
  if (x != 0) 
#line 1517 
              tmp = yes; else 
#line 1517 
                              tmp = no;
  
#line 1517 
  return tmp;
}


#line 1520  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int rss_config_show(struct seq_file *seq, void *v)
{
  int __retres;
  u32 rssconf;
  char const *tmp;
  char const *tmp_0;
  char const *tmp_1;
  char const *tmp_2;
  char const *tmp_3;
  char const *tmp_4;
  char const *tmp_5;
  char const *tmp_6;
  char const *tmp_7;
  char const *tmp_8;
  char const *tmp_9;
  char const *tmp_10;
  char const *tmp_11;
  char const *tmp_12;
  char const *tmp_13;
  char const *tmp_14;
  char const *tmp_15;
  char const *tmp_16;
  char const *tmp_17;
  char const *tmp_18;
  char const *tmp_19;
  char const *tmp_20;
  char const *tmp_21;
  char const *tmp_22;
  char const *tmp_23;
  char const *tmp_24;
  char const *tmp_25;
  char const *tmp_26;
  char const *tmp_27;
  char const *tmp_30;
  char const *tmp_31;
  char const *tmp_32;
  char const *tmp_34;
  char const *tmp_35;
  char const *tmp_36;
  char const *tmp_37;
  char const *tmp_38;
  char const *tmp_39;
  char const *tmp_40;
  char const *tmp_41;
  char const *tmp_42;
  char const *tmp_43;
  char const *tmp_44;
  char const *tmp_45;
  char const *tmp_46;
  char const *tmp_47;
  char const *tmp_48;
  char const *tmp_49;
  char const *tmp_50;
  char const *tmp_51;
  char const *tmp_52;
  char const *tmp_53;
  char const *tmp_54;
  char const *tmp_55;
  char const *tmp_56;
  char const *tmp_57;
  char const *tmp_58;
  char const *tmp_59;
  
#line 1522 
  struct adapter *adapter = (struct adapter *)seq->private;
  
#line 1523 
  char const * const keymode[4U] = {"global", "global and per-VF scramble", "per-PF and per-VF scramble", "per-VF and per-VF scramble"};
  
#line 1531 
  rssconf = t4_read_reg(adapter,32240U);
  
#line 1532 
  seq_printf(seq,"TP_RSS_CONFIG: %#x\n",rssconf);
  
#line 1533 
  tmp = yesno((int)((unsigned int)((int)rssconf) & -2147483648));
  
#line 1533 
  ;
  
#line 1533 
  seq_printf(seq,"  Tnl4TupEnIpv6: %3s\n",tmp);
  
#line 1535 
  tmp_0 = yesno((int)rssconf & 1073741824);
  
#line 1535 
  ;
  
#line 1535 
  seq_printf(seq,"  Tnl2TupEnIpv6: %3s\n",tmp_0);
  
#line 1537 
  tmp_1 = yesno((int)rssconf & 536870912);
  
#line 1537 
  ;
  
#line 1537 
  seq_printf(seq,"  Tnl4TupEnIpv4: %3s\n",tmp_1);
  
#line 1539 
  tmp_2 = yesno((int)rssconf & 268435456);
  
#line 1539 
  ;
  
#line 1539 
  seq_printf(seq,"  Tnl2TupEnIpv4: %3s\n",tmp_2);
  
#line 1541 
  tmp_3 = yesno((int)rssconf & 134217728);
  
#line 1541 
  ;
  
#line 1541 
  seq_printf(seq,"  TnlTcpSel:     %3s\n",tmp_3);
  
#line 1542 
  tmp_4 = yesno((int)rssconf & 67108864);
  
#line 1542 
  ;
  
#line 1542 
  seq_printf(seq,"  TnlIp6Sel:     %3s\n",tmp_4);
  
#line 1543 
  tmp_5 = yesno((int)rssconf & 33554432);
  
#line 1543 
  ;
  
#line 1543 
  seq_printf(seq,"  TnlVrtSel:     %3s\n",tmp_5);
  
#line 1544 
  tmp_6 = yesno((int)rssconf & 16777216);
  
#line 1544 
  ;
  
#line 1544 
  seq_printf(seq,"  TnlMapEn:      %3s\n",tmp_6);
  
#line 1545 
  tmp_7 = yesno((int)rssconf & 524288);
  
#line 1545 
  ;
  
#line 1545 
  seq_printf(seq,"  OfdHashSave:   %3s\n",tmp_7);
  
#line 1547 
  tmp_8 = yesno((int)rssconf & 262144);
  
#line 1547 
  ;
  
#line 1547 
  seq_printf(seq,"  OfdVrtSel:     %3s\n",tmp_8);
  
#line 1548 
  tmp_9 = yesno((int)rssconf & 131072);
  
#line 1548 
  ;
  
#line 1548 
  seq_printf(seq,"  OfdMapEn:      %3s\n",tmp_9);
  
#line 1549 
  tmp_10 = yesno((int)rssconf & 65536);
  
#line 1549 
  ;
  
#line 1549 
  seq_printf(seq,"  OfdLkpEn:      %3s\n",tmp_10);
  
#line 1550 
  tmp_11 = yesno((int)rssconf & 32768);
  
#line 1550 
  ;
  
#line 1550 
  seq_printf(seq,"  Syn4TupEnIpv6: %3s\n",tmp_11);
  
#line 1552 
  tmp_12 = yesno((int)rssconf & 16384);
  
#line 1552 
  ;
  
#line 1552 
  seq_printf(seq,"  Syn2TupEnIpv6: %3s\n",tmp_12);
  
#line 1554 
  tmp_13 = yesno((int)rssconf & 8192);
  
#line 1554 
  ;
  
#line 1554 
  seq_printf(seq,"  Syn4TupEnIpv4: %3s\n",tmp_13);
  
#line 1556 
  tmp_14 = yesno((int)rssconf & 4096);
  
#line 1556 
  ;
  
#line 1556 
  seq_printf(seq,"  Syn2TupEnIpv4: %3s\n",tmp_14);
  
#line 1558 
  tmp_15 = yesno((int)rssconf & 32768);
  
#line 1558 
  ;
  
#line 1558 
  seq_printf(seq,"  Syn4TupEnIpv6: %3s\n",tmp_15);
  
#line 1560 
  tmp_16 = yesno((int)rssconf & 2048);
  
#line 1560 
  ;
  
#line 1560 
  seq_printf(seq,"  SynIp6Sel:     %3s\n",tmp_16);
  
#line 1561 
  tmp_17 = yesno((int)rssconf & 1024);
  
#line 1561 
  ;
  
#line 1561 
  seq_printf(seq,"  SynVrt6Sel:    %3s\n",tmp_17);
  
#line 1562 
  tmp_18 = yesno((int)rssconf & 512);
  
#line 1562 
  ;
  
#line 1562 
  seq_printf(seq,"  SynMapEn:      %3s\n",tmp_18);
  
#line 1563 
  tmp_19 = yesno((int)rssconf & 256);
  
#line 1563 
  ;
  
#line 1563 
  seq_printf(seq,"  SynLkpEn:      %3s\n",tmp_19);
  
#line 1564 
  tmp_20 = yesno((int)rssconf & 128);
  
#line 1564 
  ;
  
#line 1564 
  seq_printf(seq,"  ChnEn:         %3s\n",tmp_20);
  
#line 1566 
  tmp_21 = yesno((int)rssconf & 64);
  
#line 1566 
  ;
  
#line 1566 
  seq_printf(seq,"  PrtEn:         %3s\n",tmp_21);
  
#line 1568 
  tmp_22 = yesno((int)rssconf & 32);
  
#line 1568 
  ;
  
#line 1568 
  seq_printf(seq,"  TnlAllLkp:     %3s\n",tmp_22);
  
#line 1570 
  tmp_23 = yesno((int)rssconf & 16);
  
#line 1570 
  ;
  
#line 1570 
  seq_printf(seq,"  VrtEn:         %3s\n",tmp_23);
  
#line 1572 
  tmp_24 = yesno((int)rssconf & 8);
  
#line 1572 
  ;
  
#line 1572 
  seq_printf(seq,"  CngEn:         %3s\n",tmp_24);
  
#line 1574 
  tmp_25 = yesno((int)rssconf & 4);
  
#line 1574 
  ;
  
#line 1574 
  seq_printf(seq,"  HashToeplitz:  %3s\n",tmp_25);
  
#line 1576 
  tmp_26 = yesno((int)rssconf & 2);
  
#line 1576 
  ;
  
#line 1576 
  seq_printf(seq,"  Udp4En:        %3s\n",tmp_26);
  
#line 1577 
  tmp_27 = yesno((int)rssconf & 1);
  
#line 1577 
  ;
  
#line 1577 
  seq_printf(seq,"  Disable:       %3s\n",tmp_27);
  
#line 1579 
  seq_puts(seq,"\n");
  
#line 1581 
  rssconf = t4_read_reg(adapter,32244U);
  
#line 1582 
  seq_printf(seq,"TP_RSS_CONFIG_TNL: %#x\n",rssconf);
  
#line 1583 
  seq_printf(seq,"  MaskSize:      %3d\n",rssconf >> 28);
  
#line 1584 
  seq_printf(seq,"  MaskFilter:    %3d\n",(rssconf >> 16) & 2047U);
  
#line 1585 
  if ((((unsigned int)adapter->params.chip >> 4) & 15U) > 5U) {
    char const *tmp_28;
    char const *tmp_29;
    
#line 1586 
    tmp_28 = yesno((int)rssconf & 4);
    
#line 1586 
    ;
    
#line 1586 
    seq_printf(seq,"  HashAll:     %3s\n",tmp_28);
    
#line 1588 
    tmp_29 = yesno((int)rssconf & 2);
    
#line 1588 
    ;
    
#line 1588 
    seq_printf(seq,"  HashEth:     %3s\n",tmp_29);
  }
  else ;
  
#line 1591 
  tmp_30 = yesno((int)rssconf & 1);
  
#line 1591 
  ;
  
#line 1591 
  seq_printf(seq,"  UseWireCh:     %3s\n",tmp_30);
  
#line 1593 
  seq_puts(seq,"\n");
  
#line 1595 
  rssconf = t4_read_reg(adapter,32248U);
  
#line 1596 
  seq_printf(seq,"TP_RSS_CONFIG_OFD: %#x\n",rssconf);
  
#line 1597 
  seq_printf(seq,"  MaskSize:      %3d\n",rssconf >> 28);
  
#line 1598 
  tmp_31 = yesno((int)rssconf & 1048576);
  
#line 1598 
  ;
  
#line 1598 
  seq_printf(seq,"  RRCplMapEn:    %3s\n",tmp_31);
  
#line 1600 
  seq_printf(seq,"  RRCplQueWidth: %3d\n",(rssconf >> 16) & 15U);
  
#line 1602 
  seq_puts(seq,"\n");
  
#line 1604 
  rssconf = t4_read_reg(adapter,32252U);
  
#line 1605 
  seq_printf(seq,"TP_RSS_CONFIG_SYN: %#x\n",rssconf);
  
#line 1606 
  seq_printf(seq,"  MaskSize:      %3d\n",rssconf >> 28);
  
#line 1607 
  tmp_32 = yesno((int)rssconf & 1);
  
#line 1607 
  ;
  
#line 1607 
  seq_printf(seq,"  UseWireCh:     %3s\n",tmp_32);
  
#line 1609 
  seq_puts(seq,"\n");
  
#line 1611 
  rssconf = t4_read_reg(adapter,32256U);
  
#line 1612 
  seq_printf(seq,"TP_RSS_CONFIG_VRT: %#x\n",rssconf);
  
#line 1613 
  if ((((unsigned int)adapter->params.chip >> 4) & 15U) > 5U) {
    char const *tmp_33;
    
#line 1614 
    seq_printf(seq,"  KeyWrAddrX:     %3d\n",rssconf >> 30);
    
#line 1616 
    tmp_33 = yesno((int)rssconf & 67108864);
    
#line 1616 
    ;
    
#line 1616 
    seq_printf(seq,"  KeyExtend:      %3s\n",tmp_33);
  }
  else ;
  
#line 1619 
  tmp_34 = yesno((int)rssconf & 33554432);
  
#line 1619 
  ;
  
#line 1619 
  seq_printf(seq,"  VfRdRg:        %3s\n",tmp_34);
  
#line 1620 
  tmp_35 = yesno((int)rssconf & 16777216);
  
#line 1620 
  ;
  
#line 1620 
  seq_printf(seq,"  VfRdEn:        %3s\n",tmp_35);
  
#line 1621 
  tmp_36 = yesno((int)rssconf & 8388608);
  
#line 1621 
  ;
  
#line 1621 
  seq_printf(seq,"  VfPerrEn:      %3s\n",tmp_36);
  
#line 1622 
  tmp_37 = yesno((int)rssconf & 4194304);
  
#line 1622 
  ;
  
#line 1622 
  seq_printf(seq,"  KeyPerrEn:     %3s\n",tmp_37);
  
#line 1623 
  tmp_38 = yesno((int)rssconf & 2097152);
  
#line 1623 
  ;
  
#line 1623 
  seq_printf(seq,"  DisVfVlan:     %3s\n",tmp_38);
  
#line 1625 
  tmp_39 = yesno((int)rssconf & 1048576);
  
#line 1625 
  ;
  
#line 1625 
  seq_printf(seq,"  EnUpSwt:       %3s\n",tmp_39);
  
#line 1626 
  seq_printf(seq,"  HashDelay:     %3d\n",(rssconf >> 16) & 15U);
  
#line 1627 
  if ((((unsigned int)adapter->params.chip >> 4) & 15U) <= 5U) 
#line 1628 
                                                               seq_printf(seq,"  VfWrAddr:      %3d\n",(rssconf >> 8) & 127U); else 
                                                                    
#line 1630 
                                                                    seq_printf(seq,"  VfWrAddr:      %3d\n",(rssconf >> 8) & 255U);
  
#line 1632 
  seq_printf(seq,"  KeyMode:       %s\n",keymode[(rssconf >> 6) & 3U]);
  
#line 1633 
  tmp_40 = yesno((int)rssconf & 32);
  
#line 1633 
  ;
  
#line 1633 
  seq_printf(seq,"  VfWrEn:        %3s\n",tmp_40);
  
#line 1634 
  tmp_41 = yesno((int)rssconf & 16);
  
#line 1634 
  ;
  
#line 1634 
  seq_printf(seq,"  KeyWrEn:       %3s\n",tmp_41);
  
#line 1635 
  seq_printf(seq,"  KeyWrAddr:     %3d\n",rssconf & 15U);
  
#line 1637 
  seq_puts(seq,"\n");
  
#line 1639 
  rssconf = t4_read_reg(adapter,32260U);
  
#line 1640 
  seq_printf(seq,"TP_RSS_CONFIG_CNG: %#x\n",rssconf);
  
#line 1641 
  tmp_42 = yesno((int)((unsigned int)((int)rssconf) & -2147483648));
  
#line 1641 
  ;
  
#line 1641 
  seq_printf(seq,"  ChnCount3:     %3s\n",tmp_42);
  
#line 1642 
  tmp_43 = yesno((int)rssconf & 1073741824);
  
#line 1642 
  ;
  
#line 1642 
  seq_printf(seq,"  ChnCount2:     %3s\n",tmp_43);
  
#line 1643 
  tmp_44 = yesno((int)rssconf & 536870912);
  
#line 1643 
  ;
  
#line 1643 
  seq_printf(seq,"  ChnCount1:     %3s\n",tmp_44);
  
#line 1644 
  tmp_45 = yesno((int)rssconf & 268435456);
  
#line 1644 
  ;
  
#line 1644 
  seq_printf(seq,"  ChnCount0:     %3s\n",tmp_45);
  
#line 1645 
  tmp_46 = yesno((int)rssconf & 134217728);
  
#line 1645 
  ;
  
#line 1645 
  seq_printf(seq,"  ChnUndFlow3:   %3s\n",tmp_46);
  
#line 1647 
  tmp_47 = yesno((int)rssconf & 67108864);
  
#line 1647 
  ;
  
#line 1647 
  seq_printf(seq,"  ChnUndFlow2:   %3s\n",tmp_47);
  
#line 1649 
  tmp_48 = yesno((int)rssconf & 33554432);
  
#line 1649 
  ;
  
#line 1649 
  seq_printf(seq,"  ChnUndFlow1:   %3s\n",tmp_48);
  
#line 1651 
  tmp_49 = yesno((int)rssconf & 16777216);
  
#line 1651 
  ;
  
#line 1651 
  seq_printf(seq,"  ChnUndFlow0:   %3s\n",tmp_49);
  
#line 1653 
  tmp_50 = yesno((int)rssconf & 524288);
  
#line 1653 
  ;
  
#line 1653 
  seq_printf(seq,"  RstChn3:       %3s\n",tmp_50);
  
#line 1654 
  tmp_51 = yesno((int)rssconf & 262144);
  
#line 1654 
  ;
  
#line 1654 
  seq_printf(seq,"  RstChn2:       %3s\n",tmp_51);
  
#line 1655 
  tmp_52 = yesno((int)rssconf & 131072);
  
#line 1655 
  ;
  
#line 1655 
  seq_printf(seq,"  RstChn1:       %3s\n",tmp_52);
  
#line 1656 
  tmp_53 = yesno((int)rssconf & 65536);
  
#line 1656 
  ;
  
#line 1656 
  seq_printf(seq,"  RstChn0:       %3s\n",tmp_53);
  
#line 1657 
  tmp_54 = yesno((int)rssconf & 32768);
  
#line 1657 
  ;
  
#line 1657 
  seq_printf(seq,"  UpdVld:        %3s\n",tmp_54);
  
#line 1658 
  tmp_55 = yesno((int)rssconf & 16384);
  
#line 1658 
  ;
  
#line 1658 
  seq_printf(seq,"  Xoff:          %3s\n",tmp_55);
  
#line 1659 
  tmp_56 = yesno((int)rssconf & 8192);
  
#line 1659 
  ;
  
#line 1659 
  seq_printf(seq,"  UpdChn3:       %3s\n",tmp_56);
  
#line 1660 
  tmp_57 = yesno((int)rssconf & 4096);
  
#line 1660 
  ;
  
#line 1660 
  seq_printf(seq,"  UpdChn2:       %3s\n",tmp_57);
  
#line 1661 
  tmp_58 = yesno((int)rssconf & 2048);
  
#line 1661 
  ;
  
#line 1661 
  seq_printf(seq,"  UpdChn1:       %3s\n",tmp_58);
  
#line 1662 
  tmp_59 = yesno((int)rssconf & 1024);
  
#line 1662 
  ;
  
#line 1662 
  seq_printf(seq,"  UpdChn0:       %3s\n",tmp_59);
  
#line 1663 
  seq_printf(seq,"  Queue:         %3d\n",rssconf & 1023U);
  
#line 1665 
  __retres = 0;
  
#line 1665 
  return __retres;
}


#line 1668  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int rss_config_open(struct inode *inode, struct file *file)
{
  int tmp;
  
#line 1668 
  tmp = single_open(file,& rss_config_show,inode->i_private);
  
#line 1668 
  return tmp;
}


#line 1668  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const rss_config_debugfs_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & rss_config_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & single_release, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 1673  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int rss_key_show(struct seq_file *seq, void *v)
{
  int __retres;
  u32 key[10U];
  
#line 1677 
  t4_read_rss_key((struct adapter *)seq->private,(u32 *)(& key));
  
#line 1678 
  seq_printf(seq,"%08x%08x%08x%08x%08x%08x%08x%08x%08x%08x\n",key[9],key[8],key[7],key[6],key[5],key[4],key[3],key[2],key[1],key[0]);
  
#line 1681 
  __retres = 0;
  
#line 1681 
  return __retres;
}


#line 1684  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int rss_key_open(struct inode *inode, struct file *file)
{
  int tmp;
  
#line 1686 
  tmp = single_open(file,& rss_key_show,inode->i_private);
  
#line 1686 
  return tmp;
}


#line 1689  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static ssize_t rss_key_write(struct file *file, char const *buf, size_t count, loff_t *pos)
{
  ssize_t __retres;
  int i;
  int j;
  u32 key[10U];
  char s[100U];
  char *p;
  struct inode *tmp;
  unsigned long tmp_0;
  unsigned int tmp_1;
  
#line 1695 
  tmp = file_inode((struct file const *)file);
  
#line 1695 
  struct adapter *adap = (struct adapter *)tmp->i_private;
  
#line 1697 
  if (count > 99UL) {
    
#line 1698 
    __retres = -22L;
    
#line 1698 
    goto return_label;
  }
  else ;
  
#line 1699 
  tmp_0 = copy_from_user((void *)(& s),(void const *)buf,count);
  
#line 1699 
  if (tmp_0 != 0UL) {
    
#line 1700 
    __retres = -14L;
    
#line 1700 
    goto return_label;
  }
  else ;
  
#line 1701 
  i = (int)count;
  
#line 1701 
  goto ldv_49901;
  ldv_49900: 
#line 1702 
  ;
  
#line 1701 
  i -= 1;
  ldv_49901: 
#line 1702 
  ;
  
#line 1701 
  if (i > 0 && ((int)_ctype[(int)((unsigned char)s[i + -1])] & 32) != 0) 
    
#line 1703 
    goto ldv_49900; else 
#line 1706 
                         goto ldv_49902;
  ldv_49902: 
#line 1707 
  ;
  
#line 1703 
  s[i] = (char)0;
  
#line 1705 
  p = (char *)(& s);
  
#line 1705 
  i = 9;
  
#line 1705 
  goto ldv_49907;
  ldv_49906: 
#line 1706 
  ;
  
#line 1706 
  key[i] = 0U;
  
#line 1707 
  j = 0;
  
#line 1707 
  goto ldv_49904;
  ldv_49903: 
#line 1708 
  ;
  
#line 1708 
  if (((int)_ctype[(int)((unsigned char)*p)] & 68) == 0) {
    
#line 1709 
    __retres = -22L;
    
#line 1709 
    goto return_label;
  }
  else ;
  
#line 1710 
  tmp_1 = hex2val((char)((int)*p));
  
#line 1710 
  key[i] = (key[i] << 4) | tmp_1;
  
#line 1707 
  j += 1;
  
#line 1707 
  p += 1;
  ldv_49904: 
#line 1708 
  ;
  
#line 1707 
  if (j <= 7) 
#line 1709 
              goto ldv_49903; else 
#line 1712 
                                   goto ldv_49905;
  ldv_49905: 
#line 1713 
  ;
  
#line 1705 
  i -= 1;
  ldv_49907: 
#line 1706 
  ;
  
#line 1705 
  if (i >= 0) 
#line 1707 
              goto ldv_49906; else 
#line 1710 
                                   goto ldv_49908;
  ldv_49908: 
#line 1711 
  ;
  
#line 1714 
  t4_write_rss_key(adap,(u32 const *)(& key),-1);
  
#line 1715 
  __retres = (long)count;
  return_label: 
#line 1715 
                return __retres;
}


#line 1718  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const rss_key_debugfs_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = & rss_key_write, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & rss_key_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & single_release, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 1736  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int rss_pf_config_show(struct seq_file *seq, void *v, int idx)
{
  int __retres;
  struct rss_pf_conf *pfconf;
  
#line 1740 
  if (v == (void *)1) {
    
#line 1742 
    pfconf = (struct rss_pf_conf *)(seq->private + 14U);
    
#line 1743 
    seq_printf(seq,"PF Map Index Size = %d\n\n",(pfconf->rss_pf_map >> 24) & 3U);
    
#line 1746 
    seq_puts(seq,"     RSS              PF   VF    Hash Tuple Enable         Default\n");
    
#line 1747 
    seq_puts(seq,"     Enable       IPF Mask Mask  IPv6      IPv4      UDP   Queue\n");
    
#line 1748 
    seq_puts(seq," PF  Map Chn Prt  Map Size Size  Four Two  Four Two  Four  Ch1  Ch0\n");
  }
  else {
    char const *tmp;
    char const *tmp_0;
    char const *tmp_1;
    char const *tmp_2;
    char const *tmp_3;
    char const *tmp_4;
    char const *tmp_5;
    char const *tmp_6;
    
#line 1755 
    pfconf = (struct rss_pf_conf *)v;
    
#line 1756 
    ;
    
#line 1756 
    ;
    
#line 1767 
    tmp = yesno((int)pfconf->rss_pf_config & 268435456);
    
#line 1766 
    tmp_0 = yesno((int)pfconf->rss_pf_config & 16777216);
    
#line 1765 
    tmp_1 = yesno((int)pfconf->rss_pf_config & 33554432);
    
#line 1764 
    tmp_2 = yesno((int)pfconf->rss_pf_config & 67108864);
    
#line 1763 
    tmp_3 = yesno((int)pfconf->rss_pf_config & 134217728);
    
#line 1756 
    ;
    
#line 1756 
    ;
    
#line 1756 
    ;
    
#line 1759 
    tmp_4 = yesno((int)pfconf->rss_pf_config & 536870912);
    
#line 1758 
    tmp_5 = yesno((int)pfconf->rss_pf_config & 1073741824);
    
#line 1756 
    tmp_6 = yesno((int)((unsigned int)((int)pfconf->rss_pf_config) & -2147483648));
    
#line 1756 
    ;
    
#line 1756 
    ;
    
#line 1756 
    seq_printf(seq,"%3d  %3s %3s %3s  %3d  %3d  %3d   %3s %3s   %3s %3s   %3s  %3d  %3d\n",idx,tmp_6,tmp_5,tmp_4,(pfconf->rss_pf_map >> idx * 3) & 7U,(pfconf->rss_pf_mask >> idx * 4) & 15U,(pfconf->rss_pf_config >> 20) & 15U,tmp_3,tmp_2,tmp_1,tmp_0,tmp,(pfconf->rss_pf_config >> 10) & 1023U,pfconf->rss_pf_config & 1023U);
  }
  
#line 1775 
  __retres = 0;
  
#line 1775 
  return __retres;
}


#line 1778  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int rss_pf_config_open(struct inode *inode, struct file *file)
{
  int __retres;
  struct seq_tab *p;
  u32 rss_pf_map;
  u32 rss_pf_mask;
  struct rss_pf_conf *pfconf;
  int pf;
  
#line 1780 
  struct adapter *adapter = (struct adapter *)inode->i_private;
  
#line 1786 
  p = seq_open_tab(file,8U,12U,1U,& rss_pf_config_show);
  
#line 1787 
  if (p == (struct seq_tab *)0) {
    
#line 1788 
    __retres = -12;
    
#line 1788 
    goto return_label;
  }
  else ;
  
#line 1790 
  pfconf = (struct rss_pf_conf *)(& p->data);
  
#line 1791 
  rss_pf_map = t4_read_rss_pf_map(adapter);
  
#line 1792 
  rss_pf_mask = t4_read_rss_pf_mask(adapter);
  
#line 1793 
  pf = 0;
  
#line 1793 
  goto ldv_49931;
  ldv_49930: 
#line 1794 
  ;
  
#line 1794 
  (pfconf + pf)->rss_pf_map = rss_pf_map;
  
#line 1795 
  (pfconf + pf)->rss_pf_mask = rss_pf_mask;
  
#line 1796 
  t4_read_rss_pf_config(adapter,(unsigned int)pf,& (pfconf + pf)->rss_pf_config);
  
#line 1793 
  pf += 1;
  ldv_49931: 
#line 1794 
  ;
  
#line 1793 
  if (pf <= 7) 
#line 1795 
               goto ldv_49930; else 
#line 1798 
                                    goto ldv_49932;
  ldv_49932: 
#line 1799 
  ;
  
#line 1798 
  __retres = 0;
  return_label: 
#line 1798 
                return __retres;
}


#line 1801  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const rss_pf_config_debugfs_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & rss_pf_config_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & seq_release_private, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 1817  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int rss_vf_config_show(struct seq_file *seq, void *v, int idx)
{
  int __retres;
  
#line 1819 
  if (v == (void *)1) {
    
#line 1820 
    seq_puts(seq,"     RSS                     Hash Tuple Enable\n");
    
#line 1821 
    seq_puts(seq,"     Enable   IVF  Dis  Enb  IPv6      IPv4      UDP    Def  Secret Key\n");
    
#line 1822 
    seq_puts(seq," VF  Chn Prt  Map  VLAN  uP  Four Two  Four Two  Four   Que  Idx       Hash\n");
  }
  else {
    char const *tmp;
    char const *tmp_0;
    char const *tmp_1;
    char const *tmp_2;
    char const *tmp_3;
    char const *tmp_4;
    char const *tmp_5;
    char const *tmp_6;
    char const *tmp_7;
    
#line 1824 
    struct rss_vf_conf *vfconf = (struct rss_vf_conf *)v;
    
#line 1826 
    ;
    
#line 1826 
    ;
    
#line 1826 
    ;
    
#line 1836 
    tmp = yesno((int)((unsigned int)((int)vfconf->rss_vf_vfh) & -2147483648));
    
#line 1835 
    tmp_0 = yesno((int)vfconf->rss_vf_vfh & 16);
    
#line 1834 
    tmp_1 = yesno((int)vfconf->rss_vf_vfh & 32);
    
#line 1833 
    tmp_2 = yesno((int)vfconf->rss_vf_vfh & 64);
    
#line 1832 
    tmp_3 = yesno((int)vfconf->rss_vf_vfh & 32);
    
#line 1831 
    tmp_4 = yesno((int)vfconf->rss_vf_vfh & 1073741824);
    
#line 1830 
    tmp_5 = yesno((int)vfconf->rss_vf_vfh & 268435456);
    
#line 1826 
    ;
    
#line 1828 
    tmp_6 = yesno((int)vfconf->rss_vf_vfh & 134217728);
    
#line 1826 
    tmp_7 = yesno((int)vfconf->rss_vf_vfh & 67108864);
    
#line 1826 
    ;
    
#line 1826 
    ;
    
#line 1826 
    seq_printf(seq,"%3d  %3s %3s  %3d   %3s %3s   %3s %3s   %3s  %3s   %3s  %4d  %3d %#10x\n",idx,tmp_7,tmp_6,(vfconf->rss_vf_vfh >> 8) & 255U,tmp_5,tmp_4,tmp_3,tmp_2,tmp_1,tmp_0,tmp,(vfconf->rss_vf_vfh >> 16) & 1023U,vfconf->rss_vf_vfh & 15U,vfconf->rss_vf_vfl);
  }
  
#line 1842 
  __retres = 0;
  
#line 1842 
  return __retres;
}


#line 1845  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int rss_vf_config_open(struct inode *inode, struct file *file)
{
  int __retres;
  struct seq_tab *p;
  struct rss_vf_conf *vfconf;
  int vf;
  
#line 1847 
  struct adapter *adapter = (struct adapter *)inode->i_private;
  
#line 1850 
  int vfcount = (int)adapter->params.arch.vfcount;
  
#line 1852 
  p = seq_open_tab(file,(unsigned int)vfcount,8U,1U,& rss_vf_config_show);
  
#line 1853 
  if (p == (struct seq_tab *)0) {
    
#line 1854 
    __retres = -12;
    
#line 1854 
    goto return_label;
  }
  else ;
  
#line 1856 
  vfconf = (struct rss_vf_conf *)(& p->data);
  
#line 1857 
  vf = 0;
  
#line 1857 
  goto ldv_49953;
  ldv_49952: 
#line 1858 
  ;
  
#line 1858 
  t4_read_rss_vf_config(adapter,(unsigned int)vf,& (vfconf + vf)->rss_vf_vfl,& (vfconf + vf)->rss_vf_vfh);
  
#line 1857 
  vf += 1;
  ldv_49953: 
#line 1858 
  ;
  
#line 1857 
  if (vf < vfcount) 
#line 1859 
                    goto ldv_49952; else 
#line 1862 
                                         goto ldv_49954;
  ldv_49954: 
#line 1863 
  ;
  
#line 1861 
  __retres = 0;
  return_label: 
#line 1861 
                return __retres;
}


#line 1864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const rss_vf_config_debugfs_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & rss_vf_config_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & seq_release_private, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 1877  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
__inline static struct port_info *ethqset2pinfo(struct adapter *adap, int qset)
{
  struct port_info *__retres;
  int pidx;
  
#line 1881 
  pidx = 0;
  
#line 1881 
  goto ldv_49963;
  ldv_49962: 
#line 1882 
  ;
  {
    
#line 1882 
    struct port_info *pi = adap2pinfo(adap,pidx);
    
#line 1884 
    if ((int)pi->first_qset <= qset && (int)pi->first_qset + (int)pi->nqsets > qset) {
      
#line 1886 
      __retres = pi;
      
#line 1886 
      goto return_label;
    }
    else ;
  }
  
#line 1881 
  pidx += 1;
  ldv_49963: 
#line 1882 
  ;
  
#line 1881 
  if ((int)adap->params.nports > pidx) 
#line 1883 
                                       goto ldv_49962; else 
#line 1886 
                                                            goto ldv_49964;
  ldv_49964: 
#line 1887 
  ;
  
#line 1892 
  ldv_inline_asm();
  
#line 1890 
  ;
  
#line 1891 
  __retres = (struct port_info *)0;
  return_label: 
#line 1891 
                return __retres;
}


#line 1894  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int sge_qinfo_show(struct seq_file *seq, void *v)
{
  int __retres;
  int i;
  
#line 1896 
  struct adapter *adap = (struct adapter *)seq->private;
  
#line 1897 
  int eth_entries = ((int)adap->sge.ethqsets + 3) / 4;
  
#line 1898 
  int toe_entries = ((int)adap->sge.ofldqsets + 3) / 4;
  
#line 1899 
  int rdma_entries = ((int)adap->sge.rdmaqs + 3) / 4;
  
#line 1900 
  int ciq_entries = ((int)adap->sge.rdmaciqs + 3) / 4;
  
#line 1901 
  int ctrl_entries = 1;
  
#line 1902 
  int r = (int)((long)v + (long)4294967295U);
  
#line 1903 
  int toe_idx = r - eth_entries;
  
#line 1904 
  int rdma_idx = toe_idx - toe_entries;
  
#line 1905 
  int ciq_idx = rdma_idx - rdma_entries;
  
#line 1906 
  int ctrl_idx = ciq_idx - ciq_entries;
  
#line 1907 
  int fq_idx = ctrl_idx - ctrl_entries;
  
#line 1909 
  if (r != 0) 
#line 1910 
              seq_putc(seq,(char)10); else ;
  
#line 1923 
  if (r < eth_entries) {
    int tmp_0;
    char *tmp_1;
    struct port_info *tmp_2;
    struct port_info *tmp_3;
    unsigned int tmp_4;
    
#line 1924 
    int base_qset = r * 4;
    
#line 1925 
    struct sge_eth_rxq const *rx = (struct sge_eth_rxq const *)(& adap->sge.ethrxq[base_qset]);
    
#line 1926 
    struct sge_eth_txq const *tx = (struct sge_eth_txq const *)(& adap->sge.ethtxq[base_qset]);
    {
      int tmp;
      
#line 1927 
      int _min1 = 4;
      
#line 1927 
      int _min2 = (int)adap->sge.ethqsets - r * 4;
      
#line 1927 
      if (_min1 < _min2) 
#line 1927 
                         tmp = _min1; else 
#line 1927 
                                           tmp = _min2;
      
#line 1927 
      tmp_0 = tmp;
    }
    
#line 1927 
    int n = tmp_0;
    
#line 1929 
    seq_printf(seq,"%-12s",(char *)"QType:");
    
#line 1929 
    i = 0;
    
#line 1929 
    goto ldv_49990;
    ldv_49989: 
#line 1930 
    ;
    
#line 1929 
    seq_printf(seq," %16",(char *)"Ethernet");
    
#line 1929 
    i += 1;
    ldv_49990: 
#line 1930 
    ;
    
#line 1929 
    if (i < n) 
#line 1931 
               goto ldv_49989; else 
#line 1934 
                                    goto ldv_49991;
    ldv_49991: 
#line 1935 
    ;
    
#line 1929 
    seq_putc(seq,(char)10);
    
#line 1930 
    seq_printf(seq,"%-12s",(char *)"Interface:");
    
#line 1930 
    i = 0;
    
#line 1930 
    goto ldv_49993;
    ldv_49992: 
#line 1931 
    ;
    
#line 1930 
    if ((rx + i)->rspq.netdev != (struct net_device *)0) 
#line 1930 
                                                         tmp_1 = (char *)(& ((rx + i)->rspq.netdev)->name); else 
                                                                    
#line 1930 
                                                                    tmp_1 = (char *)"N/A";
    
#line 1930 
    ;
    
#line 1930 
    seq_printf(seq," %16",tmp_1);
    
#line 1930 
    i += 1;
    ldv_49993: 
#line 1931 
    ;
    
#line 1930 
    if (i < n) 
#line 1932 
               goto ldv_49992; else 
#line 1935 
                                    goto ldv_49994;
    ldv_49994: 
#line 1936 
    ;
    
#line 1930 
    seq_putc(seq,(char)10);
    
#line 1932 
    seq_printf(seq,"%-12s",(char *)"TxQ ID:");
    
#line 1932 
    i = 0;
    
#line 1932 
    goto ldv_49996;
    ldv_49995: 
#line 1933 
    ;
    
#line 1932 
    seq_printf(seq," %16",(tx + i)->q.cntxt_id);
    
#line 1932 
    i += 1;
    ldv_49996: 
#line 1933 
    ;
    
#line 1932 
    if (i < n) 
#line 1934 
               goto ldv_49995; else 
#line 1937 
                                    goto ldv_49997;
    ldv_49997: 
#line 1938 
    ;
    
#line 1932 
    seq_putc(seq,(char)10);
    
#line 1933 
    seq_printf(seq,"%-12s",(char *)"TxQ size:");
    
#line 1933 
    i = 0;
    
#line 1933 
    goto ldv_49999;
    ldv_49998: 
#line 1934 
    ;
    
#line 1933 
    seq_printf(seq," %16",(tx + i)->q.size);
    
#line 1933 
    i += 1;
    ldv_49999: 
#line 1934 
    ;
    
#line 1933 
    if (i < n) 
#line 1935 
               goto ldv_49998; else 
#line 1938 
                                    goto ldv_50000;
    ldv_50000: 
#line 1939 
    ;
    
#line 1933 
    seq_putc(seq,(char)10);
    
#line 1934 
    seq_printf(seq,"%-12s",(char *)"TxQ inuse:");
    
#line 1934 
    i = 0;
    
#line 1934 
    goto ldv_50002;
    ldv_50001: 
#line 1935 
    ;
    
#line 1934 
    seq_printf(seq," %16",(tx + i)->q.in_use);
    
#line 1934 
    i += 1;
    ldv_50002: 
#line 1935 
    ;
    
#line 1934 
    if (i < n) 
#line 1936 
               goto ldv_50001; else 
#line 1939 
                                    goto ldv_50003;
    ldv_50003: 
#line 1940 
    ;
    
#line 1934 
    seq_putc(seq,(char)10);
    
#line 1935 
    seq_printf(seq,"%-12s",(char *)"TxQ CIDX:");
    
#line 1935 
    i = 0;
    
#line 1935 
    goto ldv_50005;
    ldv_50004: 
#line 1936 
    ;
    
#line 1935 
    seq_printf(seq," %16",(tx + i)->q.cidx);
    
#line 1935 
    i += 1;
    ldv_50005: 
#line 1936 
    ;
    
#line 1935 
    if (i < n) 
#line 1937 
               goto ldv_50004; else 
#line 1940 
                                    goto ldv_50006;
    ldv_50006: 
#line 1941 
    ;
    
#line 1935 
    seq_putc(seq,(char)10);
    
#line 1936 
    seq_printf(seq,"%-12s",(char *)"TxQ PIDX:");
    
#line 1936 
    i = 0;
    
#line 1936 
    goto ldv_50008;
    ldv_50007: 
#line 1937 
    ;
    
#line 1936 
    seq_printf(seq," %16",(tx + i)->q.pidx);
    
#line 1936 
    i += 1;
    ldv_50008: 
#line 1937 
    ;
    
#line 1936 
    if (i < n) 
#line 1938 
               goto ldv_50007; else 
#line 1941 
                                    goto ldv_50009;
    ldv_50009: 
#line 1942 
    ;
    
#line 1936 
    seq_putc(seq,(char)10);
    
#line 1938 
    seq_printf(seq,"%-12s",(char *)"DCB Prio:");
    
#line 1938 
    i = 0;
    
#line 1938 
    goto ldv_50011;
    ldv_50010: 
#line 1939 
    ;
    
#line 1938 
    seq_printf(seq," %16",(int)(tx + i)->dcb_prio);
    
#line 1938 
    i += 1;
    ldv_50011: 
#line 1939 
    ;
    
#line 1938 
    if (i < n) 
#line 1940 
               goto ldv_50010; else 
#line 1943 
                                    goto ldv_50012;
    ldv_50012: 
#line 1944 
    ;
    
#line 1938 
    seq_putc(seq,(char)10);
    
#line 1939 
    seq_printf(seq,"%-12s",(char *)"DCB PGID:");
    
#line 1939 
    i = 0;
    
#line 1939 
    goto ldv_50014;
    ldv_50013: 
#line 1940 
    ;
    
#line 1939 
    tmp_2 = ethqset2pinfo(adap,base_qset + i);
    
#line 1939 
    ;
    
#line 1939 
    ;
    
#line 1939 
    seq_printf(seq," %16",(tmp_2->dcb.pgid >> (7 - (int)(tx + i)->dcb_prio) * 4) & 15U);
    
#line 1939 
    i += 1;
    ldv_50014: 
#line 1940 
    ;
    
#line 1939 
    if (i < n) 
#line 1941 
               goto ldv_50013; else 
#line 1944 
                                    goto ldv_50015;
    ldv_50015: 
#line 1945 
    ;
    
#line 1939 
    seq_putc(seq,(char)10);
    
#line 1942 
    seq_printf(seq,"%-12s",(char *)"DCB PFC:");
    
#line 1942 
    i = 0;
    
#line 1942 
    goto ldv_50017;
    ldv_50016: 
#line 1943 
    ;
    
#line 1942 
    tmp_3 = ethqset2pinfo(adap,base_qset + i);
    
#line 1942 
    ;
    
#line 1942 
    ;
    
#line 1942 
    seq_printf(seq," %16",((int)tmp_3->dcb.pfcen >> (7 - (int)(tx + i)->dcb_prio)) & 1);
    
#line 1942 
    i += 1;
    ldv_50017: 
#line 1943 
    ;
    
#line 1942 
    if (i < n) 
#line 1944 
               goto ldv_50016; else 
#line 1947 
                                    goto ldv_50018;
    ldv_50018: 
#line 1948 
    ;
    
#line 1942 
    seq_putc(seq,(char)10);
    
#line 1946 
    seq_printf(seq,"%-12s",(char *)"RspQ ID:");
    
#line 1946 
    i = 0;
    
#line 1946 
    goto ldv_50020;
    ldv_50019: 
#line 1947 
    ;
    
#line 1946 
    seq_printf(seq," %16",(int)(rx + i)->rspq.abs_id);
    
#line 1946 
    i += 1;
    ldv_50020: 
#line 1947 
    ;
    
#line 1946 
    if (i < n) 
#line 1948 
               goto ldv_50019; else 
#line 1951 
                                    goto ldv_50021;
    ldv_50021: 
#line 1952 
    ;
    
#line 1946 
    seq_putc(seq,(char)10);
    
#line 1947 
    seq_printf(seq,"%-12s",(char *)"RspQ size:");
    
#line 1947 
    i = 0;
    
#line 1947 
    goto ldv_50023;
    ldv_50022: 
#line 1948 
    ;
    
#line 1947 
    seq_printf(seq," %16",(rx + i)->rspq.size);
    
#line 1947 
    i += 1;
    ldv_50023: 
#line 1948 
    ;
    
#line 1947 
    if (i < n) 
#line 1949 
               goto ldv_50022; else 
#line 1952 
                                    goto ldv_50024;
    ldv_50024: 
#line 1953 
    ;
    
#line 1947 
    seq_putc(seq,(char)10);
    
#line 1948 
    seq_printf(seq,"%-12s",(char *)"RspQE size:");
    
#line 1948 
    i = 0;
    
#line 1948 
    goto ldv_50026;
    ldv_50025: 
#line 1949 
    ;
    
#line 1948 
    seq_printf(seq," %16",(rx + i)->rspq.iqe_len);
    
#line 1948 
    i += 1;
    ldv_50026: 
#line 1949 
    ;
    
#line 1948 
    if (i < n) 
#line 1950 
               goto ldv_50025; else 
#line 1953 
                                    goto ldv_50027;
    ldv_50027: 
#line 1954 
    ;
    
#line 1948 
    seq_putc(seq,(char)10);
    
#line 1949 
    seq_printf(seq,"%-12s",(char *)"RspQ CIDX:");
    
#line 1949 
    i = 0;
    
#line 1949 
    goto ldv_50029;
    ldv_50028: 
#line 1950 
    ;
    
#line 1949 
    seq_printf(seq," %16",(rx + i)->rspq.cidx);
    
#line 1949 
    i += 1;
    ldv_50029: 
#line 1950 
    ;
    
#line 1949 
    if (i < n) 
#line 1951 
               goto ldv_50028; else 
#line 1954 
                                    goto ldv_50030;
    ldv_50030: 
#line 1955 
    ;
    
#line 1949 
    seq_putc(seq,(char)10);
    
#line 1950 
    seq_printf(seq,"%-12s",(char *)"RspQ Gen:");
    
#line 1950 
    i = 0;
    
#line 1950 
    goto ldv_50032;
    ldv_50031: 
#line 1951 
    ;
    
#line 1950 
    seq_printf(seq," %16",(int)(rx + i)->rspq.gen);
    
#line 1950 
    i += 1;
    ldv_50032: 
#line 1951 
    ;
    
#line 1950 
    if (i < n) 
#line 1952 
               goto ldv_50031; else 
#line 1955 
                                    goto ldv_50033;
    ldv_50033: 
#line 1956 
    ;
    
#line 1950 
    seq_putc(seq,(char)10);
    
#line 1951 
    seq_printf(seq,"%-12s",(char *)"Intr delay:");
    
#line 1951 
    i = 0;
    
#line 1951 
    goto ldv_50035;
    ldv_50034: 
#line 1952 
    ;
    
#line 1951 
    tmp_4 = qtimer_val((struct adapter const *)adap,& (rx + i)->rspq);
    
#line 1951 
    ;
    
#line 1951 
    seq_printf(seq," %16",tmp_4);
    
#line 1951 
    i += 1;
    ldv_50035: 
#line 1952 
    ;
    
#line 1951 
    if (i < n) 
#line 1953 
               goto ldv_50034; else 
#line 1956 
                                    goto ldv_50036;
    ldv_50036: 
#line 1957 
    ;
    
#line 1951 
    seq_putc(seq,(char)10);
    
#line 1952 
    seq_printf(seq,"%-12s",(char *)"Intr pktcnt:");
    
#line 1952 
    i = 0;
    
#line 1952 
    goto ldv_50038;
    ldv_50037: 
#line 1953 
    ;
    
#line 1952 
    seq_printf(seq," %16",(int)adap->sge.counter_val[(int)(rx + i)->rspq.pktcnt_idx]);
    
#line 1952 
    i += 1;
    ldv_50038: 
#line 1953 
    ;
    
#line 1952 
    if (i < n) 
#line 1954 
               goto ldv_50037; else 
#line 1957 
                                    goto ldv_50039;
    ldv_50039: 
#line 1958 
    ;
    
#line 1952 
    seq_putc(seq,(char)10);
    
#line 1954 
    seq_printf(seq,"%-12s",(char *)"FL ID:");
    
#line 1954 
    i = 0;
    
#line 1954 
    goto ldv_50041;
    ldv_50040: 
#line 1955 
    ;
    
#line 1954 
    seq_printf(seq," %16",(rx + i)->fl.cntxt_id);
    
#line 1954 
    i += 1;
    ldv_50041: 
#line 1955 
    ;
    
#line 1954 
    if (i < n) 
#line 1956 
               goto ldv_50040; else 
#line 1959 
                                    goto ldv_50042;
    ldv_50042: 
#line 1960 
    ;
    
#line 1954 
    seq_putc(seq,(char)10);
    
#line 1955 
    seq_printf(seq,"%-12s",(char *)"FL size:");
    
#line 1955 
    i = 0;
    
#line 1955 
    goto ldv_50044;
    ldv_50043: 
#line 1956 
    ;
    
#line 1955 
    seq_printf(seq," %16",(rx + i)->fl.size + 4294967288U);
    
#line 1955 
    i += 1;
    ldv_50044: 
#line 1956 
    ;
    
#line 1955 
    if (i < n) 
#line 1957 
               goto ldv_50043; else 
#line 1960 
                                    goto ldv_50045;
    ldv_50045: 
#line 1961 
    ;
    
#line 1955 
    seq_putc(seq,(char)10);
    
#line 1956 
    seq_printf(seq,"%-12s",(char *)"FL pend:");
    
#line 1956 
    i = 0;
    
#line 1956 
    goto ldv_50047;
    ldv_50046: 
#line 1957 
    ;
    
#line 1956 
    seq_printf(seq," %16",(rx + i)->fl.pend_cred);
    
#line 1956 
    i += 1;
    ldv_50047: 
#line 1957 
    ;
    
#line 1956 
    if (i < n) 
#line 1958 
               goto ldv_50046; else 
#line 1961 
                                    goto ldv_50048;
    ldv_50048: 
#line 1962 
    ;
    
#line 1956 
    seq_putc(seq,(char)10);
    
#line 1957 
    seq_printf(seq,"%-12s",(char *)"FL avail:");
    
#line 1957 
    i = 0;
    
#line 1957 
    goto ldv_50050;
    ldv_50049: 
#line 1958 
    ;
    
#line 1957 
    seq_printf(seq," %16",(rx + i)->fl.avail);
    
#line 1957 
    i += 1;
    ldv_50050: 
#line 1958 
    ;
    
#line 1957 
    if (i < n) 
#line 1959 
               goto ldv_50049; else 
#line 1962 
                                    goto ldv_50051;
    ldv_50051: 
#line 1963 
    ;
    
#line 1957 
    seq_putc(seq,(char)10);
    
#line 1958 
    seq_printf(seq,"%-12s",(char *)"FL PIDX:");
    
#line 1958 
    i = 0;
    
#line 1958 
    goto ldv_50053;
    ldv_50052: 
#line 1959 
    ;
    
#line 1958 
    seq_printf(seq," %16",(rx + i)->fl.pidx);
    
#line 1958 
    i += 1;
    ldv_50053: 
#line 1959 
    ;
    
#line 1958 
    if (i < n) 
#line 1960 
               goto ldv_50052; else 
#line 1963 
                                    goto ldv_50054;
    ldv_50054: 
#line 1964 
    ;
    
#line 1958 
    seq_putc(seq,(char)10);
    
#line 1959 
    seq_printf(seq,"%-12s",(char *)"FL CIDX:");
    
#line 1959 
    i = 0;
    
#line 1959 
    goto ldv_50056;
    ldv_50055: 
#line 1960 
    ;
    
#line 1959 
    seq_printf(seq," %16",(rx + i)->fl.cidx);
    
#line 1959 
    i += 1;
    ldv_50056: 
#line 1960 
    ;
    
#line 1959 
    if (i < n) 
#line 1961 
               goto ldv_50055; else 
#line 1964 
                                    goto ldv_50057;
    ldv_50057: 
#line 1965 
    ;
    
#line 1959 
    seq_putc(seq,(char)10);
  }
  else 
    
#line 1960 
    if (toe_idx < toe_entries) {
      int tmp_6;
      unsigned int tmp_7;
      
#line 1961 
      struct sge_ofld_rxq const *rx_0 = (struct sge_ofld_rxq const *)(& adap->sge.ofldrxq[toe_idx * 4]);
      
#line 1962 
      struct sge_ofld_txq const *tx_0 = (struct sge_ofld_txq const *)(& adap->sge.ofldtxq[toe_idx * 4]);
      {
        int tmp_5;
        
#line 1963 
        int _min1_0 = 4;
        
#line 1963 
        int _min2_0 = (int)adap->sge.ofldqsets - toe_idx * 4;
        
#line 1963 
        if (_min1_0 < _min2_0) 
#line 1963 
                               tmp_5 = _min1_0; else 
#line 1963 
                                                     tmp_5 = _min2_0;
        
#line 1963 
        tmp_6 = tmp_5;
      }
      
#line 1963 
      int n_0 = tmp_6;
      
#line 1965 
      seq_printf(seq,"%-12s",(char *)"QType:");
      
#line 1965 
      i = 0;
      
#line 1965 
      goto ldv_50065;
      ldv_50064: 
#line 1966 
      ;
      
#line 1965 
      seq_printf(seq," %16",(char *)"TOE");
      
#line 1965 
      i += 1;
      ldv_50065: 
#line 1966 
      ;
      
#line 1965 
      if (i < n_0) 
#line 1967 
                   goto ldv_50064; else 
#line 1970 
                                        goto ldv_50066;
      ldv_50066: 
#line 1971 
      ;
      
#line 1965 
      seq_putc(seq,(char)10);
      
#line 1966 
      seq_printf(seq,"%-12s",(char *)"TxQ ID:");
      
#line 1966 
      i = 0;
      
#line 1966 
      goto ldv_50068;
      ldv_50067: 
#line 1967 
      ;
      
#line 1966 
      seq_printf(seq," %16",(tx_0 + i)->q.cntxt_id);
      
#line 1966 
      i += 1;
      ldv_50068: 
#line 1967 
      ;
      
#line 1966 
      if (i < n_0) 
#line 1968 
                   goto ldv_50067; else 
#line 1971 
                                        goto ldv_50069;
      ldv_50069: 
#line 1972 
      ;
      
#line 1966 
      seq_putc(seq,(char)10);
      
#line 1967 
      seq_printf(seq,"%-12s",(char *)"TxQ size:");
      
#line 1967 
      i = 0;
      
#line 1967 
      goto ldv_50071;
      ldv_50070: 
#line 1968 
      ;
      
#line 1967 
      seq_printf(seq," %16",(tx_0 + i)->q.size);
      
#line 1967 
      i += 1;
      ldv_50071: 
#line 1968 
      ;
      
#line 1967 
      if (i < n_0) 
#line 1969 
                   goto ldv_50070; else 
#line 1972 
                                        goto ldv_50072;
      ldv_50072: 
#line 1973 
      ;
      
#line 1967 
      seq_putc(seq,(char)10);
      
#line 1968 
      seq_printf(seq,"%-12s",(char *)"TxQ inuse:");
      
#line 1968 
      i = 0;
      
#line 1968 
      goto ldv_50074;
      ldv_50073: 
#line 1969 
      ;
      
#line 1968 
      seq_printf(seq," %16",(tx_0 + i)->q.in_use);
      
#line 1968 
      i += 1;
      ldv_50074: 
#line 1969 
      ;
      
#line 1968 
      if (i < n_0) 
#line 1970 
                   goto ldv_50073; else 
#line 1973 
                                        goto ldv_50075;
      ldv_50075: 
#line 1974 
      ;
      
#line 1968 
      seq_putc(seq,(char)10);
      
#line 1969 
      seq_printf(seq,"%-12s",(char *)"TxQ CIDX:");
      
#line 1969 
      i = 0;
      
#line 1969 
      goto ldv_50077;
      ldv_50076: 
#line 1970 
      ;
      
#line 1969 
      seq_printf(seq," %16",(tx_0 + i)->q.cidx);
      
#line 1969 
      i += 1;
      ldv_50077: 
#line 1970 
      ;
      
#line 1969 
      if (i < n_0) 
#line 1971 
                   goto ldv_50076; else 
#line 1974 
                                        goto ldv_50078;
      ldv_50078: 
#line 1975 
      ;
      
#line 1969 
      seq_putc(seq,(char)10);
      
#line 1970 
      seq_printf(seq,"%-12s",(char *)"TxQ PIDX:");
      
#line 1970 
      i = 0;
      
#line 1970 
      goto ldv_50080;
      ldv_50079: 
#line 1971 
      ;
      
#line 1970 
      seq_printf(seq," %16",(tx_0 + i)->q.pidx);
      
#line 1970 
      i += 1;
      ldv_50080: 
#line 1971 
      ;
      
#line 1970 
      if (i < n_0) 
#line 1972 
                   goto ldv_50079; else 
#line 1975 
                                        goto ldv_50081;
      ldv_50081: 
#line 1976 
      ;
      
#line 1970 
      seq_putc(seq,(char)10);
      
#line 1971 
      seq_printf(seq,"%-12s",(char *)"RspQ ID:");
      
#line 1971 
      i = 0;
      
#line 1971 
      goto ldv_50083;
      ldv_50082: 
#line 1972 
      ;
      
#line 1971 
      seq_printf(seq," %16",(int)(rx_0 + i)->rspq.abs_id);
      
#line 1971 
      i += 1;
      ldv_50083: 
#line 1972 
      ;
      
#line 1971 
      if (i < n_0) 
#line 1973 
                   goto ldv_50082; else 
#line 1976 
                                        goto ldv_50084;
      ldv_50084: 
#line 1977 
      ;
      
#line 1971 
      seq_putc(seq,(char)10);
      
#line 1972 
      seq_printf(seq,"%-12s",(char *)"RspQ size:");
      
#line 1972 
      i = 0;
      
#line 1972 
      goto ldv_50086;
      ldv_50085: 
#line 1973 
      ;
      
#line 1972 
      seq_printf(seq," %16",(rx_0 + i)->rspq.size);
      
#line 1972 
      i += 1;
      ldv_50086: 
#line 1973 
      ;
      
#line 1972 
      if (i < n_0) 
#line 1974 
                   goto ldv_50085; else 
#line 1977 
                                        goto ldv_50087;
      ldv_50087: 
#line 1978 
      ;
      
#line 1972 
      seq_putc(seq,(char)10);
      
#line 1973 
      seq_printf(seq,"%-12s",(char *)"RspQE size:");
      
#line 1973 
      i = 0;
      
#line 1973 
      goto ldv_50089;
      ldv_50088: 
#line 1974 
      ;
      
#line 1973 
      seq_printf(seq," %16",(rx_0 + i)->rspq.iqe_len);
      
#line 1973 
      i += 1;
      ldv_50089: 
#line 1974 
      ;
      
#line 1973 
      if (i < n_0) 
#line 1975 
                   goto ldv_50088; else 
#line 1978 
                                        goto ldv_50090;
      ldv_50090: 
#line 1979 
      ;
      
#line 1973 
      seq_putc(seq,(char)10);
      
#line 1974 
      seq_printf(seq,"%-12s",(char *)"RspQ CIDX:");
      
#line 1974 
      i = 0;
      
#line 1974 
      goto ldv_50092;
      ldv_50091: 
#line 1975 
      ;
      
#line 1974 
      seq_printf(seq," %16",(rx_0 + i)->rspq.cidx);
      
#line 1974 
      i += 1;
      ldv_50092: 
#line 1975 
      ;
      
#line 1974 
      if (i < n_0) 
#line 1976 
                   goto ldv_50091; else 
#line 1979 
                                        goto ldv_50093;
      ldv_50093: 
#line 1980 
      ;
      
#line 1974 
      seq_putc(seq,(char)10);
      
#line 1975 
      seq_printf(seq,"%-12s",(char *)"RspQ Gen:");
      
#line 1975 
      i = 0;
      
#line 1975 
      goto ldv_50095;
      ldv_50094: 
#line 1976 
      ;
      
#line 1975 
      seq_printf(seq," %16",(int)(rx_0 + i)->rspq.gen);
      
#line 1975 
      i += 1;
      ldv_50095: 
#line 1976 
      ;
      
#line 1975 
      if (i < n_0) 
#line 1977 
                   goto ldv_50094; else 
#line 1980 
                                        goto ldv_50096;
      ldv_50096: 
#line 1981 
      ;
      
#line 1975 
      seq_putc(seq,(char)10);
      
#line 1976 
      seq_printf(seq,"%-12s",(char *)"Intr delay:");
      
#line 1976 
      i = 0;
      
#line 1976 
      goto ldv_50098;
      ldv_50097: 
#line 1977 
      ;
      
#line 1976 
      tmp_7 = qtimer_val((struct adapter const *)adap,& (rx_0 + i)->rspq);
      
#line 1976 
      ;
      
#line 1976 
      seq_printf(seq," %16",tmp_7);
      
#line 1976 
      i += 1;
      ldv_50098: 
#line 1977 
      ;
      
#line 1976 
      if (i < n_0) 
#line 1978 
                   goto ldv_50097; else 
#line 1981 
                                        goto ldv_50099;
      ldv_50099: 
#line 1982 
      ;
      
#line 1976 
      seq_putc(seq,(char)10);
      
#line 1977 
      seq_printf(seq,"%-12s",(char *)"Intr pktcnt:");
      
#line 1977 
      i = 0;
      
#line 1977 
      goto ldv_50101;
      ldv_50100: 
#line 1978 
      ;
      
#line 1977 
      seq_printf(seq," %16",(int)adap->sge.counter_val[(int)(rx_0 + i)->rspq.pktcnt_idx]);
      
#line 1977 
      i += 1;
      ldv_50101: 
#line 1978 
      ;
      
#line 1977 
      if (i < n_0) 
#line 1979 
                   goto ldv_50100; else 
#line 1982 
                                        goto ldv_50102;
      ldv_50102: 
#line 1983 
      ;
      
#line 1977 
      seq_putc(seq,(char)10);
      
#line 1979 
      seq_printf(seq,"%-12s",(char *)"FL ID:");
      
#line 1979 
      i = 0;
      
#line 1979 
      goto ldv_50104;
      ldv_50103: 
#line 1980 
      ;
      
#line 1979 
      seq_printf(seq," %16",(rx_0 + i)->fl.cntxt_id);
      
#line 1979 
      i += 1;
      ldv_50104: 
#line 1980 
      ;
      
#line 1979 
      if (i < n_0) 
#line 1981 
                   goto ldv_50103; else 
#line 1984 
                                        goto ldv_50105;
      ldv_50105: 
#line 1985 
      ;
      
#line 1979 
      seq_putc(seq,(char)10);
      
#line 1980 
      seq_printf(seq,"%-12s",(char *)"FL size:");
      
#line 1980 
      i = 0;
      
#line 1980 
      goto ldv_50107;
      ldv_50106: 
#line 1981 
      ;
      
#line 1980 
      seq_printf(seq," %16",(rx_0 + i)->fl.size + 4294967288U);
      
#line 1980 
      i += 1;
      ldv_50107: 
#line 1981 
      ;
      
#line 1980 
      if (i < n_0) 
#line 1982 
                   goto ldv_50106; else 
#line 1985 
                                        goto ldv_50108;
      ldv_50108: 
#line 1986 
      ;
      
#line 1980 
      seq_putc(seq,(char)10);
      
#line 1981 
      seq_printf(seq,"%-12s",(char *)"FL pend:");
      
#line 1981 
      i = 0;
      
#line 1981 
      goto ldv_50110;
      ldv_50109: 
#line 1982 
      ;
      
#line 1981 
      seq_printf(seq," %16",(rx_0 + i)->fl.pend_cred);
      
#line 1981 
      i += 1;
      ldv_50110: 
#line 1982 
      ;
      
#line 1981 
      if (i < n_0) 
#line 1983 
                   goto ldv_50109; else 
#line 1986 
                                        goto ldv_50111;
      ldv_50111: 
#line 1987 
      ;
      
#line 1981 
      seq_putc(seq,(char)10);
      
#line 1982 
      seq_printf(seq,"%-12s",(char *)"FL avail:");
      
#line 1982 
      i = 0;
      
#line 1982 
      goto ldv_50113;
      ldv_50112: 
#line 1983 
      ;
      
#line 1982 
      seq_printf(seq," %16",(rx_0 + i)->fl.avail);
      
#line 1982 
      i += 1;
      ldv_50113: 
#line 1983 
      ;
      
#line 1982 
      if (i < n_0) 
#line 1984 
                   goto ldv_50112; else 
#line 1987 
                                        goto ldv_50114;
      ldv_50114: 
#line 1988 
      ;
      
#line 1982 
      seq_putc(seq,(char)10);
      
#line 1983 
      seq_printf(seq,"%-12s",(char *)"FL PIDX:");
      
#line 1983 
      i = 0;
      
#line 1983 
      goto ldv_50116;
      ldv_50115: 
#line 1984 
      ;
      
#line 1983 
      seq_printf(seq," %16",(rx_0 + i)->fl.pidx);
      
#line 1983 
      i += 1;
      ldv_50116: 
#line 1984 
      ;
      
#line 1983 
      if (i < n_0) 
#line 1985 
                   goto ldv_50115; else 
#line 1988 
                                        goto ldv_50117;
      ldv_50117: 
#line 1989 
      ;
      
#line 1983 
      seq_putc(seq,(char)10);
      
#line 1984 
      seq_printf(seq,"%-12s",(char *)"FL CIDX:");
      
#line 1984 
      i = 0;
      
#line 1984 
      goto ldv_50119;
      ldv_50118: 
#line 1985 
      ;
      
#line 1984 
      seq_printf(seq," %16",(rx_0 + i)->fl.cidx);
      
#line 1984 
      i += 1;
      ldv_50119: 
#line 1985 
      ;
      
#line 1984 
      if (i < n_0) 
#line 1986 
                   goto ldv_50118; else 
#line 1989 
                                        goto ldv_50120;
      ldv_50120: 
#line 1990 
      ;
      
#line 1984 
      seq_putc(seq,(char)10);
    }
    else 
      
#line 1985 
      if (rdma_idx < rdma_entries) {
        int tmp_9;
        char *tmp_10;
        unsigned int tmp_11;
        
#line 1986 
        struct sge_ofld_rxq const *rx_1 = (struct sge_ofld_rxq const *)(& adap->sge.rdmarxq[rdma_idx * 4]);
        {
          int tmp_8;
          
#line 1988 
          int _min1_1 = 4;
          
#line 1988 
          int _min2_1 = (int)adap->sge.rdmaqs - rdma_idx * 4;
          
#line 1988 
          if (_min1_1 < _min2_1) 
#line 1988 
                                 tmp_8 = _min1_1; else 
#line 1988 
                                                       tmp_8 = _min2_1;
          
#line 1988 
          tmp_9 = tmp_8;
        }
        
#line 1988 
        int n_1 = tmp_9;
        
#line 1990 
        seq_printf(seq,"%-12s",(char *)"QType:");
        
#line 1990 
        i = 0;
        
#line 1990 
        goto ldv_50127;
        ldv_50126: 
#line 1991 
        ;
        
#line 1990 
        seq_printf(seq," %16",(char *)"RDMA-CPL");
        
#line 1990 
        i += 1;
        ldv_50127: 
#line 1991 
        ;
        
#line 1990 
        if (i < n_1) 
#line 1992 
                     goto ldv_50126; else 
#line 1995 
                                          goto ldv_50128;
        ldv_50128: 
#line 1996 
        ;
        
#line 1990 
        seq_putc(seq,(char)10);
        
#line 1991 
        seq_printf(seq,"%-12s",(char *)"Interface:");
        
#line 1991 
        i = 0;
        
#line 1991 
        goto ldv_50130;
        ldv_50129: 
#line 1992 
        ;
        
#line 1991 
        if ((rx_1 + i)->rspq.netdev != (struct net_device *)0) 
#line 1991 
                                                               tmp_10 = (char *)(& ((rx_1 + i)->rspq.netdev)->name); else 
                                                                    
#line 1991 
                                                                    tmp_10 = (char *)"N/A";
        
#line 1991 
        ;
        
#line 1991 
        seq_printf(seq," %16",tmp_10);
        
#line 1991 
        i += 1;
        ldv_50130: 
#line 1992 
        ;
        
#line 1991 
        if (i < n_1) 
#line 1993 
                     goto ldv_50129; else 
#line 1996 
                                          goto ldv_50131;
        ldv_50131: 
#line 1997 
        ;
        
#line 1991 
        seq_putc(seq,(char)10);
        
#line 1993 
        seq_printf(seq,"%-12s",(char *)"RspQ ID:");
        
#line 1993 
        i = 0;
        
#line 1993 
        goto ldv_50133;
        ldv_50132: 
#line 1994 
        ;
        
#line 1993 
        seq_printf(seq," %16",(int)(rx_1 + i)->rspq.abs_id);
        
#line 1993 
        i += 1;
        ldv_50133: 
#line 1994 
        ;
        
#line 1993 
        if (i < n_1) 
#line 1995 
                     goto ldv_50132; else 
#line 1998 
                                          goto ldv_50134;
        ldv_50134: 
#line 1999 
        ;
        
#line 1993 
        seq_putc(seq,(char)10);
        
#line 1994 
        seq_printf(seq,"%-12s",(char *)"RspQ size:");
        
#line 1994 
        i = 0;
        
#line 1994 
        goto ldv_50136;
        ldv_50135: 
#line 1995 
        ;
        
#line 1994 
        seq_printf(seq," %16",(rx_1 + i)->rspq.size);
        
#line 1994 
        i += 1;
        ldv_50136: 
#line 1995 
        ;
        
#line 1994 
        if (i < n_1) 
#line 1996 
                     goto ldv_50135; else 
#line 1999 
                                          goto ldv_50137;
        ldv_50137: 
#line 2000 
        ;
        
#line 1994 
        seq_putc(seq,(char)10);
        
#line 1995 
        seq_printf(seq,"%-12s",(char *)"RspQE size:");
        
#line 1995 
        i = 0;
        
#line 1995 
        goto ldv_50139;
        ldv_50138: 
#line 1996 
        ;
        
#line 1995 
        seq_printf(seq," %16",(rx_1 + i)->rspq.iqe_len);
        
#line 1995 
        i += 1;
        ldv_50139: 
#line 1996 
        ;
        
#line 1995 
        if (i < n_1) 
#line 1997 
                     goto ldv_50138; else 
#line 2000 
                                          goto ldv_50140;
        ldv_50140: 
#line 2001 
        ;
        
#line 1995 
        seq_putc(seq,(char)10);
        
#line 1996 
        seq_printf(seq,"%-12s",(char *)"RspQ CIDX:");
        
#line 1996 
        i = 0;
        
#line 1996 
        goto ldv_50142;
        ldv_50141: 
#line 1997 
        ;
        
#line 1996 
        seq_printf(seq," %16",(rx_1 + i)->rspq.cidx);
        
#line 1996 
        i += 1;
        ldv_50142: 
#line 1997 
        ;
        
#line 1996 
        if (i < n_1) 
#line 1998 
                     goto ldv_50141; else 
#line 2001 
                                          goto ldv_50143;
        ldv_50143: 
#line 2002 
        ;
        
#line 1996 
        seq_putc(seq,(char)10);
        
#line 1997 
        seq_printf(seq,"%-12s",(char *)"RspQ Gen:");
        
#line 1997 
        i = 0;
        
#line 1997 
        goto ldv_50145;
        ldv_50144: 
#line 1998 
        ;
        
#line 1997 
        seq_printf(seq," %16",(int)(rx_1 + i)->rspq.gen);
        
#line 1997 
        i += 1;
        ldv_50145: 
#line 1998 
        ;
        
#line 1997 
        if (i < n_1) 
#line 1999 
                     goto ldv_50144; else 
#line 2002 
                                          goto ldv_50146;
        ldv_50146: 
#line 2003 
        ;
        
#line 1997 
        seq_putc(seq,(char)10);
        
#line 1998 
        seq_printf(seq,"%-12s",(char *)"Intr delay:");
        
#line 1998 
        i = 0;
        
#line 1998 
        goto ldv_50148;
        ldv_50147: 
#line 1999 
        ;
        
#line 1998 
        tmp_11 = qtimer_val((struct adapter const *)adap,& (rx_1 + i)->rspq);
        
#line 1998 
        ;
        
#line 1998 
        seq_printf(seq," %16",tmp_11);
        
#line 1998 
        i += 1;
        ldv_50148: 
#line 1999 
        ;
        
#line 1998 
        if (i < n_1) 
#line 2000 
                     goto ldv_50147; else 
#line 2003 
                                          goto ldv_50149;
        ldv_50149: 
#line 2004 
        ;
        
#line 1998 
        seq_putc(seq,(char)10);
        
#line 1999 
        seq_printf(seq,"%-12s",(char *)"Intr pktcnt:");
        
#line 1999 
        i = 0;
        
#line 1999 
        goto ldv_50151;
        ldv_50150: 
#line 2000 
        ;
        
#line 1999 
        seq_printf(seq," %16",(int)adap->sge.counter_val[(int)(rx_1 + i)->rspq.pktcnt_idx]);
        
#line 1999 
        i += 1;
        ldv_50151: 
#line 2000 
        ;
        
#line 1999 
        if (i < n_1) 
#line 2001 
                     goto ldv_50150; else 
#line 2004 
                                          goto ldv_50152;
        ldv_50152: 
#line 2005 
        ;
        
#line 1999 
        seq_putc(seq,(char)10);
        
#line 2001 
        seq_printf(seq,"%-12s",(char *)"FL ID:");
        
#line 2001 
        i = 0;
        
#line 2001 
        goto ldv_50154;
        ldv_50153: 
#line 2002 
        ;
        
#line 2001 
        seq_printf(seq," %16",(rx_1 + i)->fl.cntxt_id);
        
#line 2001 
        i += 1;
        ldv_50154: 
#line 2002 
        ;
        
#line 2001 
        if (i < n_1) 
#line 2003 
                     goto ldv_50153; else 
#line 2006 
                                          goto ldv_50155;
        ldv_50155: 
#line 2007 
        ;
        
#line 2001 
        seq_putc(seq,(char)10);
        
#line 2002 
        seq_printf(seq,"%-12s",(char *)"FL size:");
        
#line 2002 
        i = 0;
        
#line 2002 
        goto ldv_50157;
        ldv_50156: 
#line 2003 
        ;
        
#line 2002 
        seq_printf(seq," %16",(rx_1 + i)->fl.size + 4294967288U);
        
#line 2002 
        i += 1;
        ldv_50157: 
#line 2003 
        ;
        
#line 2002 
        if (i < n_1) 
#line 2004 
                     goto ldv_50156; else 
#line 2007 
                                          goto ldv_50158;
        ldv_50158: 
#line 2008 
        ;
        
#line 2002 
        seq_putc(seq,(char)10);
        
#line 2003 
        seq_printf(seq,"%-12s",(char *)"FL pend:");
        
#line 2003 
        i = 0;
        
#line 2003 
        goto ldv_50160;
        ldv_50159: 
#line 2004 
        ;
        
#line 2003 
        seq_printf(seq," %16",(rx_1 + i)->fl.pend_cred);
        
#line 2003 
        i += 1;
        ldv_50160: 
#line 2004 
        ;
        
#line 2003 
        if (i < n_1) 
#line 2005 
                     goto ldv_50159; else 
#line 2008 
                                          goto ldv_50161;
        ldv_50161: 
#line 2009 
        ;
        
#line 2003 
        seq_putc(seq,(char)10);
        
#line 2004 
        seq_printf(seq,"%-12s",(char *)"FL avail:");
        
#line 2004 
        i = 0;
        
#line 2004 
        goto ldv_50163;
        ldv_50162: 
#line 2005 
        ;
        
#line 2004 
        seq_printf(seq," %16",(rx_1 + i)->fl.avail);
        
#line 2004 
        i += 1;
        ldv_50163: 
#line 2005 
        ;
        
#line 2004 
        if (i < n_1) 
#line 2006 
                     goto ldv_50162; else 
#line 2009 
                                          goto ldv_50164;
        ldv_50164: 
#line 2010 
        ;
        
#line 2004 
        seq_putc(seq,(char)10);
        
#line 2005 
        seq_printf(seq,"%-12s",(char *)"FL PIDX:");
        
#line 2005 
        i = 0;
        
#line 2005 
        goto ldv_50166;
        ldv_50165: 
#line 2006 
        ;
        
#line 2005 
        seq_printf(seq," %16",(rx_1 + i)->fl.pidx);
        
#line 2005 
        i += 1;
        ldv_50166: 
#line 2006 
        ;
        
#line 2005 
        if (i < n_1) 
#line 2007 
                     goto ldv_50165; else 
#line 2010 
                                          goto ldv_50167;
        ldv_50167: 
#line 2011 
        ;
        
#line 2005 
        seq_putc(seq,(char)10);
        
#line 2006 
        seq_printf(seq,"%-12s",(char *)"FL CIDX:");
        
#line 2006 
        i = 0;
        
#line 2006 
        goto ldv_50169;
        ldv_50168: 
#line 2007 
        ;
        
#line 2006 
        seq_printf(seq," %16",(rx_1 + i)->fl.cidx);
        
#line 2006 
        i += 1;
        ldv_50169: 
#line 2007 
        ;
        
#line 2006 
        if (i < n_1) 
#line 2008 
                     goto ldv_50168; else 
#line 2011 
                                          goto ldv_50170;
        ldv_50170: 
#line 2012 
        ;
        
#line 2006 
        seq_putc(seq,(char)10);
      }
      else 
        
#line 2007 
        if (ciq_idx < ciq_entries) {
          int tmp_13;
          char *tmp_14;
          unsigned int tmp_15;
          
#line 2008 
          struct sge_ofld_rxq const *rx_2 = (struct sge_ofld_rxq const *)(& adap->sge.rdmaciq[ciq_idx * 4]);
          {
            int tmp_12;
            
#line 2009 
            int _min1_2 = 4;
            
#line 2009 
            int _min2_2 = (int)adap->sge.rdmaciqs - ciq_idx * 4;
            
#line 2009 
            if (_min1_2 < _min2_2) 
#line 2009 
                                   tmp_12 = _min1_2; else 
#line 2009 
                                                          tmp_12 = _min2_2;
            
#line 2009 
            tmp_13 = tmp_12;
          }
          
#line 2009 
          int n_2 = tmp_13;
          
#line 2011 
          seq_printf(seq,"%-12s",(char *)"QType:");
          
#line 2011 
          i = 0;
          
#line 2011 
          goto ldv_50177;
          ldv_50176: 
#line 2012 
          ;
          
#line 2011 
          seq_printf(seq," %16",(char *)"RDMA-CIQ");
          
#line 2011 
          i += 1;
          ldv_50177: 
#line 2012 
          ;
          
#line 2011 
          if (i < n_2) 
#line 2013 
                       goto ldv_50176; else 
#line 2016 
                                            goto ldv_50178;
          ldv_50178: 
#line 2017 
          ;
          
#line 2011 
          seq_putc(seq,(char)10);
          
#line 2012 
          seq_printf(seq,"%-12s",(char *)"Interface:");
          
#line 2012 
          i = 0;
          
#line 2012 
          goto ldv_50180;
          ldv_50179: 
#line 2013 
          ;
          
#line 2012 
          if ((rx_2 + i)->rspq.netdev != (struct net_device *)0) 
#line 2012 
                                                                 tmp_14 = (char *)(& ((rx_2 + i)->rspq.netdev)->name); else 
                                                                    
#line 2012 
                                                                    tmp_14 = (char *)"N/A";
          
#line 2012 
          ;
          
#line 2012 
          seq_printf(seq," %16",tmp_14);
          
#line 2012 
          i += 1;
          ldv_50180: 
#line 2013 
          ;
          
#line 2012 
          if (i < n_2) 
#line 2014 
                       goto ldv_50179; else 
#line 2017 
                                            goto ldv_50181;
          ldv_50181: 
#line 2018 
          ;
          
#line 2012 
          seq_putc(seq,(char)10);
          
#line 2014 
          seq_printf(seq,"%-12s",(char *)"RspQ ID:");
          
#line 2014 
          i = 0;
          
#line 2014 
          goto ldv_50183;
          ldv_50182: 
#line 2015 
          ;
          
#line 2014 
          seq_printf(seq," %16",(int)(rx_2 + i)->rspq.abs_id);
          
#line 2014 
          i += 1;
          ldv_50183: 
#line 2015 
          ;
          
#line 2014 
          if (i < n_2) 
#line 2016 
                       goto ldv_50182; else 
#line 2019 
                                            goto ldv_50184;
          ldv_50184: 
#line 2020 
          ;
          
#line 2014 
          seq_putc(seq,(char)10);
          
#line 2015 
          seq_printf(seq,"%-12s",(char *)"RspQ size:");
          
#line 2015 
          i = 0;
          
#line 2015 
          goto ldv_50186;
          ldv_50185: 
#line 2016 
          ;
          
#line 2015 
          seq_printf(seq," %16",(rx_2 + i)->rspq.size);
          
#line 2015 
          i += 1;
          ldv_50186: 
#line 2016 
          ;
          
#line 2015 
          if (i < n_2) 
#line 2017 
                       goto ldv_50185; else 
#line 2020 
                                            goto ldv_50187;
          ldv_50187: 
#line 2021 
          ;
          
#line 2015 
          seq_putc(seq,(char)10);
          
#line 2016 
          seq_printf(seq,"%-12s",(char *)"RspQE size:");
          
#line 2016 
          i = 0;
          
#line 2016 
          goto ldv_50189;
          ldv_50188: 
#line 2017 
          ;
          
#line 2016 
          seq_printf(seq," %16",(rx_2 + i)->rspq.iqe_len);
          
#line 2016 
          i += 1;
          ldv_50189: 
#line 2017 
          ;
          
#line 2016 
          if (i < n_2) 
#line 2018 
                       goto ldv_50188; else 
#line 2021 
                                            goto ldv_50190;
          ldv_50190: 
#line 2022 
          ;
          
#line 2016 
          seq_putc(seq,(char)10);
          
#line 2017 
          seq_printf(seq,"%-12s",(char *)"RspQ CIDX:");
          
#line 2017 
          i = 0;
          
#line 2017 
          goto ldv_50192;
          ldv_50191: 
#line 2018 
          ;
          
#line 2017 
          seq_printf(seq," %16",(rx_2 + i)->rspq.cidx);
          
#line 2017 
          i += 1;
          ldv_50192: 
#line 2018 
          ;
          
#line 2017 
          if (i < n_2) 
#line 2019 
                       goto ldv_50191; else 
#line 2022 
                                            goto ldv_50193;
          ldv_50193: 
#line 2023 
          ;
          
#line 2017 
          seq_putc(seq,(char)10);
          
#line 2018 
          seq_printf(seq,"%-12s",(char *)"RspQ Gen:");
          
#line 2018 
          i = 0;
          
#line 2018 
          goto ldv_50195;
          ldv_50194: 
#line 2019 
          ;
          
#line 2018 
          seq_printf(seq," %16",(int)(rx_2 + i)->rspq.gen);
          
#line 2018 
          i += 1;
          ldv_50195: 
#line 2019 
          ;
          
#line 2018 
          if (i < n_2) 
#line 2020 
                       goto ldv_50194; else 
#line 2023 
                                            goto ldv_50196;
          ldv_50196: 
#line 2024 
          ;
          
#line 2018 
          seq_putc(seq,(char)10);
          
#line 2019 
          seq_printf(seq,"%-12s",(char *)"Intr delay:");
          
#line 2019 
          i = 0;
          
#line 2019 
          goto ldv_50198;
          ldv_50197: 
#line 2020 
          ;
          
#line 2019 
          tmp_15 = qtimer_val((struct adapter const *)adap,& (rx_2 + i)->rspq);
          
#line 2019 
          ;
          
#line 2019 
          seq_printf(seq," %16",tmp_15);
          
#line 2019 
          i += 1;
          ldv_50198: 
#line 2020 
          ;
          
#line 2019 
          if (i < n_2) 
#line 2021 
                       goto ldv_50197; else 
#line 2024 
                                            goto ldv_50199;
          ldv_50199: 
#line 2025 
          ;
          
#line 2019 
          seq_putc(seq,(char)10);
          
#line 2020 
          seq_printf(seq,"%-12s",(char *)"Intr pktcnt:");
          
#line 2020 
          i = 0;
          
#line 2020 
          goto ldv_50201;
          ldv_50200: 
#line 2021 
          ;
          
#line 2020 
          seq_printf(seq," %16",(int)adap->sge.counter_val[(int)(rx_2 + i)->rspq.pktcnt_idx]);
          
#line 2020 
          i += 1;
          ldv_50201: 
#line 2021 
          ;
          
#line 2020 
          if (i < n_2) 
#line 2022 
                       goto ldv_50200; else 
#line 2025 
                                            goto ldv_50202;
          ldv_50202: 
#line 2026 
          ;
          
#line 2020 
          seq_putc(seq,(char)10);
        }
        else 
          
#line 2022 
          if (ctrl_idx < ctrl_entries) {
            int tmp_17;
            
#line 2023 
            struct sge_ctrl_txq const *tx_1 = (struct sge_ctrl_txq const *)(& adap->sge.ctrlq[ctrl_idx * 4]);
            {
              int tmp_16;
              
#line 2024 
              int _min1_3 = 4;
              
#line 2024 
              int _min2_3 = (int)adap->params.nports - ctrl_idx * 4;
              
#line 2024 
              if (_min1_3 < _min2_3) 
#line 2024 
                                     tmp_16 = _min1_3; else 
#line 2024 
                                                            tmp_16 = _min2_3;
              
#line 2024 
              tmp_17 = tmp_16;
            }
            
#line 2024 
            int n_3 = tmp_17;
            
#line 2026 
            seq_printf(seq,"%-12s",(char *)"QType:");
            
#line 2026 
            i = 0;
            
#line 2026 
            goto ldv_50209;
            ldv_50208: 
#line 2027 
            ;
            
#line 2026 
            seq_printf(seq," %16",(char *)"Control");
            
#line 2026 
            i += 1;
            ldv_50209: 
#line 2027 
            ;
            
#line 2026 
            if (i < n_3) 
#line 2028 
                         goto ldv_50208; else 
#line 2031 
                                              goto ldv_50210;
            ldv_50210: 
#line 2032 
            ;
            
#line 2026 
            seq_putc(seq,(char)10);
            
#line 2027 
            seq_printf(seq,"%-12s",(char *)"TxQ ID:");
            
#line 2027 
            i = 0;
            
#line 2027 
            goto ldv_50212;
            ldv_50211: 
#line 2028 
            ;
            
#line 2027 
            seq_printf(seq," %16",(tx_1 + i)->q.cntxt_id);
            
#line 2027 
            i += 1;
            ldv_50212: 
#line 2028 
            ;
            
#line 2027 
            if (i < n_3) 
#line 2029 
                         goto ldv_50211; else 
#line 2032 
                                              goto ldv_50213;
            ldv_50213: 
#line 2033 
            ;
            
#line 2027 
            seq_putc(seq,(char)10);
            
#line 2028 
            seq_printf(seq,"%-12s",(char *)"TxQ size:");
            
#line 2028 
            i = 0;
            
#line 2028 
            goto ldv_50215;
            ldv_50214: 
#line 2029 
            ;
            
#line 2028 
            seq_printf(seq," %16",(tx_1 + i)->q.size);
            
#line 2028 
            i += 1;
            ldv_50215: 
#line 2029 
            ;
            
#line 2028 
            if (i < n_3) 
#line 2030 
                         goto ldv_50214; else 
#line 2033 
                                              goto ldv_50216;
            ldv_50216: 
#line 2034 
            ;
            
#line 2028 
            seq_putc(seq,(char)10);
            
#line 2029 
            seq_printf(seq,"%-12s",(char *)"TxQ inuse:");
            
#line 2029 
            i = 0;
            
#line 2029 
            goto ldv_50218;
            ldv_50217: 
#line 2030 
            ;
            
#line 2029 
            seq_printf(seq," %16",(tx_1 + i)->q.in_use);
            
#line 2029 
            i += 1;
            ldv_50218: 
#line 2030 
            ;
            
#line 2029 
            if (i < n_3) 
#line 2031 
                         goto ldv_50217; else 
#line 2034 
                                              goto ldv_50219;
            ldv_50219: 
#line 2035 
            ;
            
#line 2029 
            seq_putc(seq,(char)10);
            
#line 2030 
            seq_printf(seq,"%-12s",(char *)"TxQ CIDX:");
            
#line 2030 
            i = 0;
            
#line 2030 
            goto ldv_50221;
            ldv_50220: 
#line 2031 
            ;
            
#line 2030 
            seq_printf(seq," %16",(tx_1 + i)->q.cidx);
            
#line 2030 
            i += 1;
            ldv_50221: 
#line 2031 
            ;
            
#line 2030 
            if (i < n_3) 
#line 2032 
                         goto ldv_50220; else 
#line 2035 
                                              goto ldv_50222;
            ldv_50222: 
#line 2036 
            ;
            
#line 2030 
            seq_putc(seq,(char)10);
            
#line 2031 
            seq_printf(seq,"%-12s",(char *)"TxQ PIDX:");
            
#line 2031 
            i = 0;
            
#line 2031 
            goto ldv_50224;
            ldv_50223: 
#line 2032 
            ;
            
#line 2031 
            seq_printf(seq," %16",(tx_1 + i)->q.pidx);
            
#line 2031 
            i += 1;
            ldv_50224: 
#line 2032 
            ;
            
#line 2031 
            if (i < n_3) 
#line 2033 
                         goto ldv_50223; else 
#line 2036 
                                              goto ldv_50225;
            ldv_50225: 
#line 2037 
            ;
            
#line 2031 
            seq_putc(seq,(char)10);
          }
          else 
            
#line 2032 
            if (fq_idx == 0) {
              unsigned int tmp_18;
              
#line 2033 
              struct sge_rspq const *evtq = (struct sge_rspq const *)(& adap->sge.fw_evtq);
              
#line 2035 
              seq_printf(seq,"%-12s %16s\n",(char *)"QType:",(char *)"FW event queue");
              
#line 2036 
              seq_printf(seq,"%-12s %16u\n",(char *)"RspQ ID:",(int)evtq->abs_id);
              
#line 2037 
              seq_printf(seq,"%-12s %16u\n",(char *)"RspQ size:",evtq->size);
              
#line 2038 
              seq_printf(seq,"%-12s %16u\n",(char *)"RspQE size:",evtq->iqe_len);
              
#line 2039 
              seq_printf(seq,"%-12s %16u\n",(char *)"RspQ CIDX:",evtq->cidx);
              
#line 2040 
              seq_printf(seq,"%-12s %16u\n",(char *)"RspQ Gen:",(int)evtq->gen);
              
#line 2041 
              tmp_18 = qtimer_val((struct adapter const *)adap,evtq);
              
#line 2041 
              ;
              
#line 2041 
              seq_printf(seq,"%-12s %16u\n",(char *)"Intr delay:",tmp_18);
              
#line 2043 
              seq_printf(seq,"%-12s %16u\n",(char *)"Intr pktcnt:",(int)adap->sge.counter_val[(int)evtq->pktcnt_idx]);
            }
            else ;
  
#line 2050 
  __retres = 0;
  
#line 2050 
  return __retres;
}


#line 2053  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int sge_queue_entries(struct adapter const *adap)
{
  int __retres;
  
#line 2059 
  __retres = (((((int)adap->sge.ethqsets + 3) / 4 + ((int)adap->sge.ofldqsets + 3) / 4) + ((int)adap->sge.rdmaqs + 3) / 4) + ((int)adap->sge.rdmaciqs + 3) / 4) + 2;
  
#line 2059 
  return __retres;
}


#line 2062  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static void *sge_queue_start(struct seq_file *seq, loff_t *pos)
{
  void *tmp_0;
  
#line 2064 
  int entries = sge_queue_entries((struct adapter const *)seq->private);
  
#line 2066 
  if (*pos < (long long)entries) 
#line 2066 
                                 tmp_0 = (void *)((unsigned long)*pos + 1UL); else 
                                                                    
#line 2066 
                                                                    tmp_0 = (void *)0;
  
#line 2066 
  return tmp_0;
}


#line 2069  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static void sge_queue_stop(struct seq_file *seq, void *v)
{
  
#line 2071 
  return;
}


#line 2073  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static void *sge_queue_next(struct seq_file *seq, void *v, loff_t *pos)
{
  void *tmp_0;
  
#line 2075 
  int entries = sge_queue_entries((struct adapter const *)seq->private);
  
#line 2077 
  *pos += 1LL;
  
#line 2078 
  if (*pos < (long long)entries) 
#line 2078 
                                 tmp_0 = (void *)((unsigned long)*pos + 1UL); else 
                                                                    
#line 2078 
                                                                    tmp_0 = (void *)0;
  
#line 2078 
  return tmp_0;
}


#line 2081  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct seq_operations const sge_qinfo_seq_ops = {.start = & sge_queue_start, .stop = & sge_queue_stop, .next = & sge_queue_next, .show = & sge_qinfo_show};

#line 2088  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int sge_qinfo_open(struct inode *inode, struct file *file)
{
  
#line 2090 
  int res = ldv_seq_open_89(file,& sge_qinfo_seq_ops);
  
#line 2092 
  if (res == 0) {
    
#line 2093 
    struct seq_file *seq = (struct seq_file *)file->private_data;
    
#line 2095 
    seq->private = inode->i_private;
  }
  else ;
  
#line 2097 
  return res;
}


#line 2100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const sge_qinfo_debugfs_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & sge_qinfo_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & seq_release, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 2108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
int mem_open(struct inode *inode, struct file *file)
{
  int __retres;
  unsigned int mem;
  struct adapter *adap;
  
#line 2113 
  file->private_data = inode->i_private;
  
#line 2115 
  mem = (unsigned int)((long)file->private_data) & 3U;
  
#line 2116 
  adap = (struct adapter *)(file->private_data + - mem);
  
#line 2118 
  t4_fwcache(adap,(enum fw_params_param_dev_fwcache)FW_PARAM_DEV_FWCACHE_FLUSH);
  
#line 2120 
  __retres = 0;
  
#line 2120 
  return __retres;
}


#line 2123  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static ssize_t mem_read(struct file *file, char *buf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  struct inode *tmp;
  __be32 *data;
  int ret;
  unsigned long tmp_1;
  
#line 2126 
  loff_t pos = *ppos;
  
#line 2127 
  tmp = file_inode((struct file const *)file);
  
#line 2127 
  loff_t avail = tmp->i_size;
  
#line 2128 
  unsigned int mem = (unsigned int)((long)file->private_data) & 3U;
  
#line 2129 
  struct adapter *adap = (struct adapter *)(file->private_data + - mem);
  
#line 2133 
  if (pos < 0LL) {
    
#line 2134 
    __retres = -22L;
    
#line 2134 
    goto return_label;
  }
  else ;
  
#line 2135 
  if (pos >= avail) {
    
#line 2136 
    __retres = 0L;
    
#line 2136 
    goto return_label;
  }
  else ;
  
#line 2137 
  if ((unsigned long long)(avail - pos) < (unsigned long long)count) 
    
#line 2138 
    count = (unsigned long)(avail - pos); else ;
  
#line 2140 
  data = (__be32 *)t4_alloc_mem(count);
  
#line 2141 
  if (data == (__be32 *)0U) {
    
#line 2142 
    __retres = -12L;
    
#line 2142 
    goto return_label;
  }
  else ;
  
#line 2144 
  ldv_spin_lock_90(& adap->win0_lock);
  
#line 2145 
  ret = t4_memory_rw(adap,0,(int)mem,(unsigned int)pos,(unsigned int)count,(void *)data,1);
  
#line 2146 
  ldv_spin_unlock_91(& adap->win0_lock);
  
#line 2147 
  if (ret != 0) {
    
#line 2148 
    t4_free_mem((void *)data);
    
#line 2149 
    __retres = (long)ret;
    
#line 2149 
    goto return_label;
  }
  else ;
  
#line 2151 
  tmp_1 = copy_to_user((void *)buf,(void const *)data,count);
  
#line 2151 
  ret = (int)tmp_1;
  
#line 2153 
  t4_free_mem((void *)data);
  
#line 2154 
  if (ret != 0) {
    
#line 2155 
    __retres = -14L;
    
#line 2155 
    goto return_label;
  }
  else ;
  
#line 2157 
  *ppos = (long long)((unsigned long long)pos + (unsigned long long)count);
  
#line 2158 
  __retres = (long)count;
  return_label: 
#line 2158 
                return __retres;
}


#line 2160  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const mem_debugfs_fops = {.owner = & __this_module, .llseek = & default_llseek, .read = & mem_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & simple_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 2167  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static void add_debugfs_mem(struct adapter *adap, char const *name, unsigned int idx, unsigned int size_mb)
{
  
#line 2170 
  debugfs_create_file_size(name,(unsigned short)256,adap->debugfs_root,(void *)adap + idx,& mem_debugfs_fops,(long long)(size_mb << 20));
  
#line 2173 
  return;
}


#line 2175  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static int blocked_fl_open(struct inode *inode, struct file *file)
{
  int __retres;
  
#line 2177 
  file->private_data = inode->i_private;
  
#line 2178 
  __retres = 0;
  
#line 2178 
  return __retres;
}


#line 2181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static ssize_t blocked_fl_read(struct file *filp, char *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  int len;
  char *buf;
  int tmp_0;
  
#line 2185 
  struct adapter const *adap = (struct adapter const *)filp->private_data;
  
#line 2187 
  ssize_t size = (long)(((adap->sge.egr_sz + 3U) / 4U + adap->sge.egr_sz / 32U) + 2U);
  
#line 2190 
  buf = (char *)kzalloc((unsigned long)size,208U);
  
#line 2191 
  if (buf == (char *)0) {
    
#line 2192 
    __retres = -12L;
    
#line 2192 
    goto return_label;
  }
  else ;
  
#line 2194 
  len = snprintf(buf,(unsigned long)(size + -1L),"%*pb\n",adap->sge.egr_sz,adap->sge.blocked_fl);
  
#line 2196 
  tmp_0 = sprintf(buf + len,"\n");
  
#line 2196 
  len = tmp_0 + len;
  
#line 2197 
  size = simple_read_from_buffer((void *)ubuf,count,ppos,(void const *)buf,(unsigned long)len);
  
#line 2198 
  t4_free_mem((void *)buf);
  
#line 2199 
  __retres = size;
  return_label: 
#line 2199 
                return __retres;
}


#line 2202  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static ssize_t blocked_fl_write(struct file *filp, char const *ubuf, size_t count, loff_t *ppos)
{
  ssize_t __retres;
  int err;
  unsigned long *t;
  
#line 2207 
  struct adapter *adap = (struct adapter *)filp->private_data;
  
#line 2209 
  t = (unsigned long *)kcalloc(((unsigned long)adap->sge.egr_sz + 63UL) / 64UL,8UL,208U);
  
#line 2210 
  if (t == (unsigned long *)0UL) {
    
#line 2211 
    __retres = -12L;
    
#line 2211 
    goto return_label;
  }
  else ;
  
#line 2213 
  err = bitmap_parse_user(ubuf,(unsigned int)count,t,(int)adap->sge.egr_sz);
  
#line 2214 
  if (err != 0) {
    
#line 2215 
    __retres = (long)err;
    
#line 2215 
    goto return_label;
  }
  else ;
  
#line 2217 
  bitmap_copy(adap->sge.blocked_fl,(unsigned long const *)t,adap->sge.egr_sz);
  
#line 2218 
  t4_free_mem((void *)t);
  
#line 2219 
  __retres = (long)count;
  return_label: 
#line 2219 
                return __retres;
}


#line 2222  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
static struct file_operations const blocked_fl_fops = {.owner = & __this_module, .llseek = & generic_file_llseek, .read = & blocked_fl_read, .write = & blocked_fl_write, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & blocked_fl_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = (int (*)(struct inode *, struct file *))0, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 2232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
void add_debugfs_files(struct adapter *adap, struct t4_debugfs_entry *files, unsigned int nfiles)
{
  int i;
  
#line 2239 
  i = 0;
  
#line 2239 
  goto ldv_50309;
  ldv_50308: 
#line 2240 
  ;
  
#line 2240 
  ldv_debugfs_create_file_92((files + i)->name,(unsigned short)((int)(files + i)->mode),adap->debugfs_root,(void *)adap + (int)(files + i)->data,(files + i)->ops);
  
#line 2239 
  i += 1;
  ldv_50309: 
#line 2240 
  ;
  
#line 2239 
  if ((unsigned int)i < nfiles) 
#line 2241 
                                goto ldv_50308; else 
#line 2244 
                                                     goto ldv_50310;
  ldv_50310: 
#line 2245 
  ;
  
#line 2246 
  return;
}


#line 2246  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_debugfs.c"
int t4_setup_debugfs(struct adapter *adap)
{
  int __retres;
  int i;
  struct dentry *de;
  int tmp;
  u32 tmp_0;
  int tmp_1;
  
#line 2249 
  u32 size = 0U;
  
#line 2252 
  struct t4_debugfs_entry t4_debugfs_files[42U] = {{.name = "cim_la", .ops = & cim_la_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "cim_pif_la", .ops = & cim_pif_la_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "cim_ma_la", .ops = & cim_ma_la_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "cim_qcfg", .ops = & cim_qcfg_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "clk", .ops = & clk_debugfs_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "devlog", .ops = & devlog_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "mbox0", .ops = & mbox_debugfs_fops, .mode = (unsigned short)384U, .data = (unsigned char)0U}, {.name = "mbox1", .ops = & mbox_debugfs_fops, .mode = (unsigned short)384U, .data = (unsigned char)1U}, {.name = "mbox2", .ops = & mbox_debugfs_fops, .mode = (unsigned short)384U, .data = (unsigned char)2U}, {.name = "mbox3", .ops = & mbox_debugfs_fops, .mode = (unsigned short)384U, .data = (unsigned char)3U}, {.name = "mbox4", .ops = & mbox_debugfs_fops, .mode = (unsigned short)384U, .data = (unsigned char)4U}, {.name = "mbox5", .ops = & mbox_debugfs_fops, .mode = (unsigned short)384U, .data = (unsigned char)5U}, {.name = "mbox6", .ops = & mbox_debugfs_fops, .mode = (unsigned short)384U, .data = (unsigned char)6U}, {.name = "mbox7", .ops = & mbox_debugfs_fops, .mode = (unsigned short)384U, .data = (unsigned char)7U}, {.name = "l2t", .ops = & t4_l2t_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "mps_tcam", .ops = & mps_tcam_debugfs_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "rss", .ops = & rss_debugfs_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "rss_config", .ops = & rss_config_debugfs_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "rss_key", .ops = & rss_key_debugfs_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "rss_pf_config", .ops = & rss_pf_config_debugfs_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "rss_vf_config", .ops = & rss_vf_config_debugfs_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "sge_qinfo", .ops = & sge_qinfo_debugfs_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "ibq_tp0", .ops = & cim_ibq_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "ibq_tp1", .ops = & cim_ibq_fops, .mode = (unsigned short)256U, .data = (unsigned char)1U}, {.name = "ibq_ulp", .ops = & cim_ibq_fops, .mode = (unsigned short)256U, .data = (unsigned char)2U}, {.name = "ibq_sge0", .ops = & cim_ibq_fops, .mode = (unsigned short)256U, .data = (unsigned char)3U}, {.name = "ibq_sge1", .ops = & cim_ibq_fops, .mode = (unsigned short)256U, .data = (unsigned char)4U}, {.name = "ibq_ncsi", .ops = & cim_ibq_fops, .mode = (unsigned short)256U, .data = (unsigned char)5U}, {.name = "obq_ulp0", .ops = & cim_obq_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "obq_ulp1", .ops = & cim_obq_fops, .mode = (unsigned short)256U, .data = (unsigned char)1U}, {.name = "obq_ulp2", .ops = & cim_obq_fops, .mode = (unsigned short)256U, .data = (unsigned char)2U}, {.name = "obq_ulp3", .ops = & cim_obq_fops, .mode = (unsigned short)256U, .data = (unsigned char)3U}, {.name = "obq_sge", .ops = & cim_obq_fops, .mode = (unsigned short)256U, .data = (unsigned char)4U}, {.name = "obq_ncsi", .ops = & cim_obq_fops, .mode = (unsigned short)256U, .data = (unsigned char)5U}, {.name = "tp_la", .ops = & tp_la_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "ulprx_la", .ops = & ulprx_la_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "sensors", .ops = & sensors_debugfs_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "pm_stats", .ops = & pm_stats_debugfs_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "tx_rate", .ops = & tx_rate_debugfs_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "cctrl", .ops = & cctrl_tbl_debugfs_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "clip_tbl", .ops = & clip_tbl_debugfs_fops, .mode = (unsigned short)256U, .data = (unsigned char)0U}, {.name = "blocked_fl", .ops = & blocked_fl_fops, .mode = (unsigned short)384U, .data = (unsigned char)0U}};
  
#line 2301 
  struct t4_debugfs_entry t5_debugfs_files[2U] = {{.name = "obq_sge_rx_q0", .ops = & cim_obq_fops, .mode = (unsigned short)256U, .data = (unsigned char)6U}, {.name = "obq_sge_rx_q1", .ops = & cim_obq_fops, .mode = (unsigned short)256U, .data = (unsigned char)7U}};
  
#line 2306 
  add_debugfs_files(adap,(struct t4_debugfs_entry *)(& t4_debugfs_files),42U);
  
#line 2309 
  tmp = is_t4(adap->params.chip);
  
#line 2309 
  if (tmp == 0) 
#line 2310 
                add_debugfs_files(adap,(struct t4_debugfs_entry *)(& t5_debugfs_files),2U); else ;
  
#line 2314 
  tmp_0 = t4_read_reg(adap,30680U);
  
#line 2314 
  i = (int)tmp_0;
  
#line 2315 
  if (((unsigned int)i & 1U) != 0U) {
    
#line 2316 
    size = t4_read_reg(adap,30656U);
    
#line 2317 
    add_debugfs_mem(adap,"edc0",0U,size & 4095U);
  }
  else ;
  
#line 2319 
  if (((unsigned int)i & 2U) != 0U) {
    
#line 2320 
    size = t4_read_reg(adap,30660U);
    
#line 2321 
    add_debugfs_mem(adap,"edc1",1U,size & 4095U);
  }
  else ;
  
#line 2323 
  tmp_1 = is_t5(adap->params.chip);
  
#line 2323 
  if (tmp_1 != 0) {
    
#line 2324 
    if (((unsigned int)i & 4U) != 0U) {
      
#line 2325 
      size = t4_read_reg(adap,30664U);
      
#line 2326 
      add_debugfs_mem(adap,"mc0",2U,size & 4095U);
    }
    else ;
    
#line 2329 
    if (((unsigned int)i & 16U) != 0U) {
      
#line 2330 
      size = t4_read_reg(adap,30728U);
      
#line 2331 
      add_debugfs_mem(adap,"mc1",3U,size & 4095U);
    }
    else ;
  }
  else 
    
#line 2335 
    if (((unsigned int)i & 4U) != 0U) {
      
#line 2336 
      size = t4_read_reg(adap,30664U);
      
#line 2337 
      add_debugfs_mem(adap,"mc",2U,size & 4095U);
    }
    else ;
  
#line 2342 
  de = debugfs_create_file_size("flash",(unsigned short)256,adap->debugfs_root,(void *)adap,& flash_debugfs_fops,(long long)adap->params.sf_size);
  
#line 2345 
  __retres = 0;
  
#line 2345 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_cim_obq_fops_2 = (struct file_operations *)(& cim_obq_fops);

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct seq_operations *ldv_emg_alias_seq_tab_ops_6 = (struct seq_operations *)(& seq_tab_ops);

#line 58  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_blocked_fl_fops_2 = (struct file_operations *)(& blocked_fl_fops);

#line 59  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_sensors_debugfs_fops_2 = (struct file_operations *)(& sensors_debugfs_fops);

#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_clk_debugfs_fops_2 = (struct file_operations *)(& clk_debugfs_fops);

#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_cim_la_fops_2 = (struct file_operations *)(& cim_la_fops);

#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_pm_stats_debugfs_fops_2 = (struct file_operations *)(& pm_stats_debugfs_fops);

#line 63  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_mps_tcam_debugfs_fops_2 = (struct file_operations *)(& mps_tcam_debugfs_fops);

#line 64  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_cctrl_tbl_debugfs_fops_2 = (struct file_operations *)(& cctrl_tbl_debugfs_fops);

#line 65  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_tp_la_fops_2 = (struct file_operations *)(& tp_la_fops);

#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_ulprx_la_fops_2 = (struct file_operations *)(& ulprx_la_fops);

#line 67  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
long long (*ldv_emg_alias_seq_lseek_3)(struct file *, long long , int ) = & seq_lseek;

#line 68  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_cim_qcfg_fops_2 = (struct file_operations *)(& cim_qcfg_fops);

#line 69  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_rss_key_debugfs_fops_2 = (struct file_operations *)(& rss_key_debugfs_fops);

#line 70  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_rss_config_debugfs_fops_2 = (struct file_operations *)(& rss_config_debugfs_fops);

#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
long long (*ldv_emg_alias_default_llseek_3)(struct file *, long long , int ) = & default_llseek;

#line 72  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int (*ldv_emg_alias_single_release_5)(struct inode *, struct file *) = & single_release;

#line 73  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int (*ldv_emg_alias_simple_open_5)(struct inode *, struct file *) = & simple_open;

#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_clip_tbl_debugfs_fops_2 = (struct file_operations *)(& clip_tbl_debugfs_fops);

#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_tx_rate_debugfs_fops_2 = (struct file_operations *)(& tx_rate_debugfs_fops);

#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
long long (*ldv_emg_alias_generic_file_llseek_3)(struct file *, long long , int ) = & generic_file_llseek;

#line 77  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_rss_pf_config_debugfs_fops_2 = (struct file_operations *)(& rss_pf_config_debugfs_fops);

#line 78  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_cim_ibq_fops_2 = (struct file_operations *)(& cim_ibq_fops);

#line 79  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_cim_ma_la_fops_2 = (struct file_operations *)(& cim_ma_la_fops);

#line 80  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_sge_qinfo_debugfs_fops_2 = (struct file_operations *)(& sge_qinfo_debugfs_fops);

#line 81  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct seq_operations *ldv_emg_alias_devlog_seq_ops_6 = (struct seq_operations *)(& devlog_seq_ops);

#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_cim_pif_la_fops_2 = (struct file_operations *)(& cim_pif_la_fops);

#line 83  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_mbox_debugfs_fops_2 = (struct file_operations *)(& mbox_debugfs_fops);

#line 84  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_devlog_fops_2 = (struct file_operations *)(& devlog_fops);

#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_flash_debugfs_fops_2 = (struct file_operations *)(& flash_debugfs_fops);

#line 86  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_mem_debugfs_fops_2 = (struct file_operations *)(& mem_debugfs_fops);

#line 87  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_rss_debugfs_fops_2 = (struct file_operations *)(& rss_debugfs_fops);

#line 88  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
long (*ldv_emg_alias_seq_read_4)(struct file *, char *, unsigned long , long long *) = & seq_read;

#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct seq_operations *ldv_emg_alias_sge_qinfo_seq_ops_6 = (struct seq_operations *)(& sge_qinfo_seq_ops);

#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct seq_operations *ldv_emg_alias_mps_tcam_seq_ops_6 = (struct seq_operations *)(& mps_tcam_seq_ops);

#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
struct file_operations *ldv_emg_alias_rss_vf_config_debugfs_fops_2 = (struct file_operations *)(& rss_vf_config_debugfs_fops);

#line 96 
int ldv_emg_seq_open(struct file *arg0, struct seq_operations *arg1);


#line 97 
int ldv_emg_seq_release_private(struct inode *arg0, struct file *arg1);


#line 100 
struct dentry *ldv_emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4);


#line 114  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_ulprx_la_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 115 
  tmp = ulprx_la_open(arg0,arg1);
  
#line 115 
  return tmp;
}


#line 119  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
long ldv_emg_wrapper_flash_read_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 120 
  tmp = flash_read(arg0,arg1,arg2,arg3);
  
#line 120 
  return tmp;
}


#line 124  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_rss_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 125 
  tmp = rss_open(arg0,arg1);
  
#line 125 
  return tmp;
}


#line 129  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_cim_ma_la_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 130 
  tmp = cim_ma_la_open(arg0,arg1);
  
#line 130 
  return tmp;
}


#line 134  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
void ldv_emg_wrapper_seq_tab_stop_5(struct seq_file *arg0, void *arg1)
{
  
#line 135 
  seq_tab_stop(arg0,arg1);
  
#line 136 
  return;
}


#line 139  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_cim_la_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 140 
  tmp = cim_la_open(arg0,arg1);
  
#line 140 
  return tmp;
}


#line 144  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_seq_tab_show_4(struct seq_file *arg0, void *arg1)
{
  int tmp;
  
#line 145 
  tmp = seq_tab_show(arg0,arg1);
  
#line 145 
  return tmp;
}


#line 149  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_rss_key_open_4(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 150 
  tmp = rss_key_open(arg0,arg1);
  
#line 150 
  return tmp;
}


#line 154  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
long ldv_emg_wrapper_mbox_write_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 155 
  tmp = mbox_write(arg0,(char const *)arg1,arg2,arg3);
  
#line 155 
  return tmp;
}


#line 159  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
long ldv_emg_wrapper_mem_read_4(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 160 
  tmp = mem_read(arg0,arg1,arg2,arg3);
  
#line 160 
  return tmp;
}


#line 164  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_cctrl_tbl_open_6(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 165 
  tmp = cctrl_tbl_open(arg0,arg1);
  
#line 165 
  return tmp;
}


#line 169  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
long ldv_emg_wrapper_pm_stats_clear_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 170 
  tmp = pm_stats_clear(arg0,(char const *)arg1,arg2,arg3);
  
#line 170 
  return tmp;
}


#line 174  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_devlog_show_4(struct seq_file *arg0, void *arg1)
{
  int tmp;
  
#line 175 
  tmp = devlog_show(arg0,arg1);
  
#line 175 
  return tmp;
}


#line 179  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
void *ldv_emg_wrapper_sge_queue_next_3(struct seq_file *arg0, void *arg1, long long *arg2)
{
  void *tmp;
  
#line 180 
  tmp = sge_queue_next(arg0,arg1,arg2);
  
#line 180 
  return tmp;
}


#line 184  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_rss_config_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 185 
  tmp = rss_config_open(arg0,arg1);
  
#line 185 
  return tmp;
}


#line 189  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_mps_tcam_show_4(struct seq_file *arg0, void *arg1)
{
  int tmp;
  
#line 190 
  tmp = mps_tcam_show(arg0,arg1);
  
#line 190 
  return tmp;
}


#line 194  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_clk_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 195 
  tmp = clk_open(arg0,arg1);
  
#line 195 
  return tmp;
}


#line 199  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
long ldv_emg_wrapper_blocked_fl_write_5(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 200 
  tmp = blocked_fl_write(arg0,(char const *)arg1,arg2,arg3);
  
#line 200 
  return tmp;
}


#line 204  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
long ldv_emg_wrapper_tp_la_write_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 205 
  tmp = tp_la_write(arg0,(char const *)arg1,arg2,arg3);
  
#line 205 
  return tmp;
}


#line 209  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
void *ldv_emg_wrapper_sge_queue_start_2(struct seq_file *arg0, long long *arg1)
{
  void *tmp;
  
#line 210 
  tmp = sge_queue_start(arg0,arg1);
  
#line 210 
  return tmp;
}


#line 214  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_rss_pf_config_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 215 
  tmp = rss_pf_config_open(arg0,arg1);
  
#line 215 
  return tmp;
}


#line 219  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_tp_la_open_4(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 220 
  tmp = tp_la_open(arg0,arg1);
  
#line 220 
  return tmp;
}


#line 224  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_cim_pif_la_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 225 
  tmp = cim_pif_la_open(arg0,arg1);
  
#line 225 
  return tmp;
}


#line 229  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
long ldv_emg_wrapper_blocked_fl_read_4(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 230 
  tmp = blocked_fl_read(arg0,arg1,arg2,arg3);
  
#line 230 
  return tmp;
}


#line 234  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_mbox_open_4(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 235 
  tmp = mbox_open(arg0,arg1);
  
#line 235 
  return tmp;
}


#line 239  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_cim_ibq_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 240 
  tmp = cim_ibq_open(arg0,arg1);
  
#line 240 
  return tmp;
}


#line 244  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
void *ldv_emg_wrapper_mps_tcam_start_2(struct seq_file *arg0, long long *arg1)
{
  void *tmp;
  
#line 245 
  tmp = mps_tcam_start(arg0,arg1);
  
#line 245 
  return tmp;
}


#line 249  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_pm_stats_open_4(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 250 
  tmp = pm_stats_open(arg0,arg1);
  
#line 250 
  return tmp;
}


#line 254  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
void *ldv_emg_wrapper_devlog_start_2(struct seq_file *arg0, long long *arg1)
{
  void *tmp;
  
#line 255 
  tmp = devlog_start(arg0,arg1);
  
#line 255 
  return tmp;
}


#line 259  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
void ldv_emg_wrapper_sge_queue_stop_5(struct seq_file *arg0, void *arg1)
{
  
#line 260 
  sge_queue_stop(arg0,arg1);
  
#line 261 
  return;
}


#line 264  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_sensors_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 265 
  tmp = sensors_open(arg0,arg1);
  
#line 265 
  return tmp;
}


#line 269  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_clip_tbl_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 270 
  tmp = clip_tbl_open(arg0,arg1);
  
#line 270 
  return tmp;
}


#line 274  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_cim_obq_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 275 
  tmp = cim_obq_open(arg0,arg1);
  
#line 275 
  return tmp;
}


#line 279  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_sge_qinfo_show_4(struct seq_file *arg0, void *arg1)
{
  int tmp;
  
#line 280 
  tmp = sge_qinfo_show(arg0,arg1);
  
#line 280 
  return tmp;
}


#line 284  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_cim_qcfg_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 285 
  tmp = cim_qcfg_open(arg0,arg1);
  
#line 285 
  return tmp;
}


#line 289  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
void ldv_emg_wrapper_devlog_stop_5(struct seq_file *arg0, void *arg1)
{
  
#line 290 
  devlog_stop(arg0,arg1);
  
#line 291 
  return;
}


#line 294  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
void *ldv_emg_wrapper_mps_tcam_next_3(struct seq_file *arg0, void *arg1, long long *arg2)
{
  void *tmp;
  
#line 295 
  tmp = mps_tcam_next(arg0,arg1,arg2);
  
#line 295 
  return tmp;
}


#line 299  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_sge_qinfo_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 300 
  tmp = sge_qinfo_open(arg0,arg1);
  
#line 300 
  return tmp;
}


#line 304  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_devlog_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 305 
  tmp = devlog_open(arg0,arg1);
  
#line 305 
  return tmp;
}


#line 309  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_rss_vf_config_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 310 
  tmp = rss_vf_config_open(arg0,arg1);
  
#line 310 
  return tmp;
}


#line 314  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
void *ldv_emg_wrapper_devlog_next_3(struct seq_file *arg0, void *arg1, long long *arg2)
{
  void *tmp;
  
#line 315 
  tmp = devlog_next(arg0,arg1,arg2);
  
#line 315 
  return tmp;
}


#line 319  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_mps_tcam_open_4(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 320 
  tmp = mps_tcam_open(arg0,arg1);
  
#line 320 
  return tmp;
}


#line 324  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
void *ldv_emg_wrapper_seq_tab_start_2(struct seq_file *arg0, long long *arg1)
{
  void *tmp;
  
#line 325 
  tmp = seq_tab_start(arg0,arg1);
  
#line 325 
  return tmp;
}


#line 329  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
void ldv_emg_wrapper_mps_tcam_stop_5(struct seq_file *arg0, void *arg1)
{
  
#line 330 
  mps_tcam_stop(arg0,arg1);
  
#line 331 
  return;
}


#line 334  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
void *ldv_emg_wrapper_seq_tab_next_3(struct seq_file *arg0, void *arg1, long long *arg2)
{
  void *tmp;
  
#line 335 
  tmp = seq_tab_next(arg0,arg1,arg2);
  
#line 335 
  return tmp;
}


#line 339  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_blocked_fl_open_6(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 340 
  tmp = blocked_fl_open(arg0,arg1);
  
#line 340 
  return tmp;
}


#line 344  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
long ldv_emg_wrapper_rss_key_write_3(struct file *arg0, char *arg1, unsigned long arg2, long long *arg3)
{
  long tmp;
  
#line 345 
  tmp = rss_key_write(arg0,(char const *)arg1,arg2,arg3);
  
#line 345 
  return tmp;
}


#line 349  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
int ldv_emg_wrapper_tx_rate_open_3(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 350 
  tmp = tx_rate_open(arg0,arg1);
  
#line 350 
  return tmp;
}


#line 872  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
static void *kmalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 875 
  tmp = ldv_kmalloc(size,flags);
  
#line 875 
  return tmp;
}


#line 886  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
static void *kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 889 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 889 
  return tmp;
}


#line 893  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
static void *kzalloc(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 896 
  tmp = ldv_kzalloc(size,flags);
  
#line 896 
  return tmp;
}


#line 1113  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
static int ldv_seq_release_private_81(struct inode *ldv_func_arg1, struct file *ldv_func_arg2)
{
  int tmp;
  
#line 1117 
  tmp = ldv_emg_seq_release_private(ldv_func_arg1,ldv_func_arg2);
  
#line 1117 
  return tmp;
}


#line 1121  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
static int ldv_seq_release_private_82(struct inode *ldv_func_arg1, struct file *ldv_func_arg2)
{
  int tmp;
  
#line 1125 
  tmp = ldv_emg_seq_release_private(ldv_func_arg1,ldv_func_arg2);
  
#line 1125 
  return tmp;
}


#line 1129  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
static int ldv_seq_release_private_83(struct inode *ldv_func_arg1, struct file *ldv_func_arg2)
{
  int tmp;
  
#line 1133 
  tmp = ldv_emg_seq_release_private(ldv_func_arg1,ldv_func_arg2);
  
#line 1133 
  return tmp;
}


#line 1137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
static void ldv_spin_lock_84(spinlock_t *lock)
{
  
#line 1141 
  ldv_spin_model_lock((char *)"win0_lock_of_adapter");
  
#line 1143 
  spin_lock(lock);
  
#line 1144 
  return;
}


#line 1147  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
static void ldv_spin_unlock_85(spinlock_t *lock)
{
  
#line 1151 
  ldv_spin_model_unlock((char *)"win0_lock_of_adapter");
  
#line 1153 
  spin_unlock(lock);
  
#line 1154 
  return;
}


#line 1157  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
static int ldv_seq_release_private_86(struct inode *ldv_func_arg1, struct file *ldv_func_arg2)
{
  int tmp;
  
#line 1161 
  tmp = ldv_emg_seq_release_private(ldv_func_arg1,ldv_func_arg2);
  
#line 1161 
  return tmp;
}


#line 1165  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
static int ldv_seq_open_87(struct file *ldv_func_arg1, struct seq_operations const *ldv_func_arg2)
{
  int tmp;
  
#line 1169 
  tmp = ldv_emg_seq_open(ldv_func_arg1,(struct seq_operations *)ldv_func_arg2);
  
#line 1169 
  return tmp;
}


#line 1173  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
static int ldv_seq_release_private_88(struct inode *ldv_func_arg1, struct file *ldv_func_arg2)
{
  int tmp;
  
#line 1177 
  tmp = ldv_emg_seq_release_private(ldv_func_arg1,ldv_func_arg2);
  
#line 1177 
  return tmp;
}


#line 1181  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
static int ldv_seq_open_89(struct file *ldv_func_arg1, struct seq_operations const *ldv_func_arg2)
{
  int tmp;
  
#line 1185 
  tmp = ldv_emg_seq_open(ldv_func_arg1,(struct seq_operations *)ldv_func_arg2);
  
#line 1185 
  return tmp;
}


#line 1189  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
static void ldv_spin_lock_90(spinlock_t *lock)
{
  
#line 1193 
  ldv_spin_model_lock((char *)"win0_lock_of_adapter");
  
#line 1195 
  spin_lock(lock);
  
#line 1196 
  return;
}


#line 1199  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
static void ldv_spin_unlock_91(spinlock_t *lock)
{
  
#line 1203 
  ldv_spin_model_unlock((char *)"win0_lock_of_adapter");
  
#line 1205 
  spin_unlock(lock);
  
#line 1206 
  return;
}


#line 1209  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_debugfs.c.aux"
static struct dentry *ldv_debugfs_create_file_92(char const *ldv_func_arg1, umode_t ldv_func_arg2, struct dentry *ldv_func_arg3, void *ldv_func_arg4, struct file_operations const *ldv_func_arg5)
{
  struct dentry *tmp;
  
#line 1213 
  tmp = ldv_emg_debugfs_create_file((char *)ldv_func_arg1,(unsigned short)((int)ldv_func_arg2),ldv_func_arg3,ldv_func_arg4,(struct file_operations *)ldv_func_arg5);
  
#line 1213 
  return tmp;
}


#line 8  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
void ldv_atomic_dec(atomic_t *v);


#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void __set_bit(long nr, unsigned long volatile *addr)
{
  
#line 96 
  ldv_inline_asm();
  
#line 97 
  return;
}


#line 110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static void clear_bit(long nr, unsigned long volatile *addr)
{
  
#line 112 
  if (0 != 0) 
#line 114 
              ldv_inline_asm(); else 
#line 117 
                                     ldv_inline_asm();
  
#line 118 
  return;
}


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int constant_test_bit(long nr, unsigned long const volatile *addr)
{
  int __retres;
  
#line 311 
  __retres = ((*(addr + (nr >> 6)) >> (nr & 63L)) & 1UL) != 0UL;
  
#line 311 
  return __retres;
}


#line 437  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int fls(int x)
{
  int __retres;
  int r;
  
#line 440 
  ldv_inline_asm();
  
#line 464 
  __retres = r + 1;
  
#line 464 
  return __retres;
}


#line 479  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int fls64(__u64 x)
{
  int __retres;
  
#line 481 
  int bitpos = -1;
  
#line 482 
  ldv_inline_asm();
  
#line 490 
  __retres = bitpos + 1;
  
#line 490 
  return __retres;
}


#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bitops/find.h"
unsigned long find_next_zero_bit(unsigned long const *, unsigned long, unsigned long);


#line 53 
unsigned long find_first_zero_bit(unsigned long const *, unsigned long);


#line 24  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned int __arch_hweight32(unsigned int w)
{
  
#line 26 
  unsigned int res = 0U;
  
#line 27 
  ldv_inline_asm();
  
#line 32 
  return res;
}


#line 45  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/arch_hweight.h"
__inline static unsigned long __arch_hweight64(__u64 w)
{
  
#line 47 
  unsigned long res = 0UL;
  
#line 48 
  ldv_inline_asm();
  
#line 58 
  return res;
}


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitops.h"
__inline static unsigned long hweight_long(unsigned long w)
{
  unsigned long tmp_0;
  
#line 80 
  if (0 != 0) 
#line 80 
              tmp_0 = (unsigned long)((((unsigned int)((((((((((unsigned long long)w & 1ULL) != 0ULL) + (((unsigned long long)w & 2ULL) != 0ULL)) + (((unsigned long long)w & 4ULL) != 0ULL)) + (((unsigned long long)w & 8ULL) != 0ULL)) + (((unsigned long long)w & 16ULL) != 0ULL)) + (((unsigned long long)w & 32ULL) != 0ULL)) + (((unsigned long long)w & 64ULL) != 0ULL)) + (((unsigned long long)w & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 8) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 8) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 8) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 16) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 16) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 16) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 24) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 24) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 24) & 128ULL) != 0ULL)))) + (((unsigned int)((((((((((unsigned long long)(w >> 32) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 32) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 32) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 40) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 40) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 40) & 128ULL) != 0ULL))) + ((unsigned int)((((((((((unsigned long long)(w >> 48) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 48) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 48) & 128ULL) != 0ULL)) + (unsigned int)((((((((((unsigned long long)(w >> 56) & 1ULL) != 0ULL) + (((unsigned long long)(w >> 56) & 2ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 4ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 8ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 16ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 32ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 64ULL) != 0ULL)) + (((unsigned long long)(w >> 56) & 128ULL) != 0ULL))))); else 
                                                                    
#line 80 
                                                                    tmp_0 = __arch_hweight64((unsigned long long)w);
  
#line 80 
  return tmp_0;
}


#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitops.h"
__inline static unsigned int fls_long(unsigned long l)
{
  unsigned int __retres;
  int tmp_0;
  
#line 178 
  tmp_0 = fls64((unsigned long long)l);
  
#line 178 
  __retres = (unsigned int)tmp_0;
  
#line 178 
  return __retres;
}


#line 22  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/log2.h"
int ____ilog2_NaN(void);


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/log2.h"
__inline static int __ilog2_u32(u32 n)
{
  int __retres;
  int tmp;
  
#line 34 
  tmp = fls((int)n);
  
#line 34 
  __retres = tmp + -1;
  
#line 34 
  return __retres;
}


#line 61  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/log2.h"
__inline static unsigned long __roundup_pow_of_two(unsigned long n)
{
  unsigned long __retres;
  unsigned int tmp;
  
#line 63 
  tmp = fls_long(n + 18446744073709551615UL);
  
#line 63 
  __retres = 1UL << tmp;
  
#line 63 
  return __retres;
}


#line 142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
int printk(char const * , ...);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void INIT_LIST_HEAD(struct list_head *list)
{
  
#line 27 
  list->next = list;
  
#line 28 
  list->prev = list;
  
#line 29 
  return;
}


#line 48 
void __list_add(struct list_head *, struct list_head *, struct list_head *);


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static void list_add_tail(struct list_head *new, struct list_head *head)
{
  
#line 77 
  __list_add(new,head->prev,head);
  
#line 78 
  return;
}


#line 112 
void __list_del_entry(struct list_head *);


#line 113 
void list_del(struct list_head *);


#line 187  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/list.h"
__inline static int list_empty(struct list_head const *head)
{
  int __retres;
  
#line 189 
  __retres = (struct list_head const *)head->next == head;
  
#line 189 
  return __retres;
}


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/percpu.h"
void __bad_percpu_size(void);


#line 295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/percpu-defs.h"
void __bad_size_call_parameter(void);


#line 12  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/current.h"
__inline static struct task_struct *get_current(void)
{
  struct task_struct *tmp;
  {
    struct task_struct *pfo_ret__;
    
#line 14 
    switch (8UL) {
      case (unsigned long)1: 
#line 14 
      ;
      
#line 15 
      ldv_inline_asm();
      
#line 14 
      goto ldv_3477;
      case (unsigned long)2: 
#line 14 
      ;
      
#line 15 
      ldv_inline_asm();
      
#line 14 
      goto ldv_3477;
      case (unsigned long)4: 
#line 14 
      ;
      
#line 15 
      ldv_inline_asm();
      
#line 14 
      goto ldv_3477;
      case (unsigned long)8: 
#line 14 
      ;
      
#line 15 
      ldv_inline_asm();
      
#line 14 
      goto ldv_3477;
      default: 
#line 14 
      ;
      
#line 14 
      __bad_percpu_size();
    }
    ldv_3477: 
#line 14 
    ;
    
#line 14 
    tmp = pfo_ret__;
  }
  
#line 14 
  return tmp;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
int __bitmap_weight(unsigned long const *, unsigned int);


#line 163 
int bitmap_find_free_region(unsigned long *, unsigned int, int);


#line 164 
void bitmap_release_region(unsigned long *, unsigned int, int);


#line 181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
__inline static void bitmap_zero(unsigned long *dst, unsigned int nbits)
{
  
#line 183 
  if (0 != 0 && nbits <= 64U) 
#line 184 
                              *dst = 0UL;
  else {
    
#line 186 
    unsigned int len = (unsigned int)(((unsigned long)nbits + 63UL) / 64UL) * 8U;
    
#line 187 
    memset((void *)dst,0,(unsigned long)len);
  }
  
#line 189 
  return;
}


#line 298  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitmap.h"
__inline static int bitmap_weight(unsigned long const *src, unsigned int nbits)
{
  int __retres;
  int tmp_0;
  
#line 300 
  if (0 != 0 && nbits <= 64U) {
    unsigned long tmp;
    
#line 301 
    tmp = hweight_long(*src & (18446744073709551615UL >> (- nbits & 63U)));
    
#line 301 
    __retres = (int)tmp;
    
#line 301 
    goto return_label;
  }
  else ;
  
#line 302 
  tmp_0 = __bitmap_weight(src,nbits);
  
#line 302 
  __retres = tmp_0;
  return_label: 
#line 302 
                return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
extern int nr_cpu_ids;


#line 89 
extern struct cpumask const * const cpu_online_mask;


#line 474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/cpumask.h"
__inline static unsigned int cpumask_weight(struct cpumask const *srcp)
{
  unsigned int __retres;
  int tmp;
  
#line 476 
  tmp = bitmap_weight((unsigned long const *)(& srcp->bits),(unsigned int)nr_cpu_ids);
  
#line 476 
  __retres = (unsigned int)tmp;
  
#line 476 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
static long PTR_ERR(void const *ptr);


#line 41 
static bool IS_ERR(void const *ptr);


#line 50 
static bool IS_ERR_OR_NULL(void const *ptr);


#line 11  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/cmpxchg.h"
void __xchg_wrong_size(void);


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static void atomic_set(atomic_t *v, int i)
{
  
#line 39 
  v->counter = i;
  
#line 40 
  return;
}


#line 114 
static void atomic_dec(atomic_t *v);


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_add(int val)
{
  int tmp;
  
#line 72 
  if (0 != 0 && (val == 1 || val == -1)) 
#line 72 
                                         tmp = val; else 
#line 72 
                                                         tmp = 0;
  
#line 72 
  int const pao_ID__ = tmp;
  
#line 72 
  switch (4UL) {
    case (unsigned long)1: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)2: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)4: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    case (unsigned long)8: 
#line 72 
    ;
    
#line 72 
    if (pao_ID__ == 1) 
#line 74 
                       ldv_inline_asm();
    else 
      
#line 72 
      if (pao_ID__ == -1) 
#line 74 
                          ldv_inline_asm(); else 
#line 77 
                                                 ldv_inline_asm();
    
#line 72 
    goto ldv_6377;
    default: 
#line 72 
    ;
    
#line 72 
    __bad_percpu_size();
  }
  ldv_6377: 
#line 72 
  ;
  
#line 74 
  return;
}


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static void __preempt_count_sub(int val)
{
  int tmp;
  
#line 77 
  if (0 != 0 && (- val == 1 || - val == -1)) 
#line 77 
                                             tmp = - val; else 
#line 77 
                                                               tmp = 0;
  
#line 77 
  int const pao_ID__ = tmp;
  
#line 77 
  switch (4UL) {
    case (unsigned long)1: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)2: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)4: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    case (unsigned long)8: 
#line 77 
    ;
    
#line 77 
    if (pao_ID__ == 1) 
#line 79 
                       ldv_inline_asm();
    else 
      
#line 77 
      if (pao_ID__ == -1) 
#line 79 
                          ldv_inline_asm(); else 
#line 82 
                                                 ldv_inline_asm();
    
#line 77 
    goto ldv_6389;
    default: 
#line 77 
    ;
    
#line 77 
    __bad_percpu_size();
  }
  ldv_6389: 
#line 77 
  ;
  
#line 79 
  return;
}


#line 7  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
void __local_bh_disable_ip(unsigned long, unsigned int);


#line 16  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
__inline static void local_bh_disable(void)
{
  __here_0: 
#line 18 
  ;
  
#line 18 
  __local_bh_disable_ip((unsigned long)((void *)0),512U);
  
#line 20 
  return;
}


#line 22 
void __local_bh_enable_ip(unsigned long, unsigned int);


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bottom_half.h"
__inline static void local_bh_enable(void)
{
  __here_0: 
#line 31 
  ;
  
#line 31 
  __local_bh_enable_ip((unsigned long)((void *)0),512U);
  
#line 33 
  return;
}


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/lockdep.h"
void lockdep_init_map(struct lockdep_map *, char const *, struct lock_class_key *, int);


#line 333 
void lock_acquire(struct lockdep_map *, unsigned int, int, int, int, struct lockdep_map *, unsigned long);


#line 337 
void lock_release(struct lockdep_map *, int, unsigned long);


#line 545 
void lockdep_rcu_suspicious(char const *, int const, char const *);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
void __raw_spin_lock_init(raw_spinlock_t *, char const *, struct lock_class_key *);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
void _raw_spin_lock_bh(raw_spinlock_t *);


#line 31 
void _raw_spin_lock_irq(raw_spinlock_t *);


#line 42 
void _raw_spin_unlock_bh(raw_spinlock_t *);


#line 43 
void _raw_spin_unlock_irq(raw_spinlock_t *);


#line 45 
void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);


#line 299  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
__inline static raw_spinlock_t *spinlock_check(spinlock_t *lock)
{
  raw_spinlock_t *__retres;
  
#line 301 
  __retres = & lock->__anonCompField_spinlock_18.rlock;
  
#line 301 
  return __retres;
}


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_0(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 362 
static void ldv_spin_lock_76(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_119(spinlock_t *lock);


#line 374 
static void ldv_spin_lock_121(spinlock_t *lock);


#line 378 
static void ldv_spin_lock_123(spinlock_t *lock);


#line 382 
static void ldv_spin_lock_133(spinlock_t *lock);


#line 386 
static void ldv_spin_lock_139(spinlock_t *lock);


#line 390 
static void ldv_spin_lock_150(spinlock_t *lock);


#line 394 
static void ldv_spin_lock_153(spinlock_t *lock);


#line 398 
static void ldv_spin_lock_155(spinlock_t *lock);


#line 399  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_bh(spinlock_t *lock)
{
  
#line 401 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 402 
  return;
}


#line 435 
static void ldv_spin_lock_bh_102(spinlock_t *lock);


#line 439 
static void ldv_spin_lock_bh_104(spinlock_t *lock);


#line 443 
static void ldv_spin_lock_bh_106(spinlock_t *lock);


#line 447 
static void ldv_spin_lock_bh_108(spinlock_t *lock);


#line 451 
static void ldv_spin_lock_bh_110(spinlock_t *lock);


#line 455 
static void ldv_spin_lock_bh_112(spinlock_t *lock);


#line 459 
static void ldv_spin_lock_bh_115(spinlock_t *lock);


#line 463 
static void ldv_spin_lock_bh_117(spinlock_t *lock);


#line 344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_irq(spinlock_t *lock)
{
  
#line 346 
  _raw_spin_lock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 347 
  return;
}


#line 366 
static void ldv_spin_lock_irq_127(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_irq_129(spinlock_t *lock);


#line 371  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_0(spinlock_t *lock)
{
  
#line 373 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 374 
  return;
}


#line 419 
static void ldv_spin_unlock_77(spinlock_t *lock);


#line 427 
static void ldv_spin_unlock_120(spinlock_t *lock);


#line 431 
static void ldv_spin_unlock_122(spinlock_t *lock);


#line 435 
static void ldv_spin_unlock_124(spinlock_t *lock);


#line 439 
static void ldv_spin_unlock_134(spinlock_t *lock);


#line 443 
static void ldv_spin_unlock_140(spinlock_t *lock);


#line 447 
static void ldv_spin_unlock_151(spinlock_t *lock);


#line 451 
static void ldv_spin_unlock_152(spinlock_t *lock);


#line 455 
static void ldv_spin_unlock_154(spinlock_t *lock);


#line 459 
static void ldv_spin_unlock_156(spinlock_t *lock);


#line 460  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_bh(spinlock_t *lock)
{
  
#line 462 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 463 
  return;
}


#line 500 
static void ldv_spin_unlock_bh_103(spinlock_t *lock);


#line 504 
static void ldv_spin_unlock_bh_105(spinlock_t *lock);


#line 508 
static void ldv_spin_unlock_bh_107(spinlock_t *lock);


#line 512 
static void ldv_spin_unlock_bh_109(spinlock_t *lock);


#line 516 
static void ldv_spin_unlock_bh_111(spinlock_t *lock);


#line 520 
static void ldv_spin_unlock_bh_114(spinlock_t *lock);


#line 524 
static void ldv_spin_unlock_bh_116(spinlock_t *lock);


#line 528 
static void ldv_spin_unlock_bh_118(spinlock_t *lock);


#line 529  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irq(spinlock_t *lock)
{
  
#line 531 
  _raw_spin_unlock_irq(& lock->__anonCompField_spinlock_18.rlock);
  
#line 532 
  return;
}


#line 545 
static void ldv_spin_unlock_irq_128(spinlock_t *lock);


#line 549 
static void ldv_spin_unlock_irq_130(spinlock_t *lock);


#line 550  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 552 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 553 
  return;
}


#line 582 
static void ldv_spin_unlock_irqrestore_126(spinlock_t *lock, unsigned long flags);


#line 37  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_mutex_lock_135(struct mutex *ldv_func_arg1);


#line 41 
static void ldv_mutex_lock_137(struct mutex *ldv_func_arg1);


#line 45 
static void ldv_mutex_lock_141(struct mutex *ldv_func_arg1);


#line 49 
static void ldv_mutex_lock_143(struct mutex *ldv_func_arg1);


#line 53 
static void ldv_mutex_lock_145(struct mutex *ldv_func_arg1);


#line 59 
void ldv_mutex_model_lock(struct mutex *, char *);


#line 61 
void ldv_mutex_model_unlock(struct mutex *, char *);


#line 63 
void __ldv_spin_lock(spinlock_t *);


#line 90 
static void ldv___ldv_spin_lock_125(spinlock_t *ldv_func_arg1);


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
long ldv_is_err(void const *ptr);


#line 28 
long ldv_is_err_or_null(void const *ptr);


#line 30 
long ldv_ptr_err(void const *ptr);


#line 285  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
unsigned int jiffies_to_usecs(unsigned long const);


#line 365 
unsigned long __usecs_to_jiffies(unsigned int const);


#line 367  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
__inline static unsigned long _usecs_to_jiffies(unsigned int const u)
{
  unsigned long __retres;
  
#line 369 
  __retres = (unsigned long)(((long)u + 3999L) / 4000L);
  
#line 369 
  return __retres;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
__inline static unsigned long usecs_to_jiffies(unsigned int const u)
{
  unsigned long __retres;
  
#line 410 
  if (0 != 0) {
    unsigned int tmp;
    unsigned long tmp_0;
    
#line 411 
    tmp = jiffies_to_usecs(4611686018427387902UL);
    
#line 411 
    ;
    
#line 411 
    if (tmp < u) {
      
#line 412 
      __retres = 4611686018427387902UL;
      
#line 412 
      goto return_label;
    }
    else ;
    
#line 413 
    tmp_0 = _usecs_to_jiffies(u);
    
#line 413 
    __retres = tmp_0;
    
#line 413 
    goto return_label;
  }
  else {
    unsigned long tmp_1;
    
#line 415 
    tmp_1 = __usecs_to_jiffies(u);
    
#line 415 
    __retres = tmp_1;
    
#line 415 
    goto return_label;
  }
  return_label: 
#line 410 
                return __retres;
}


#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
void synchronize_sched(void);


#line 268  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void __rcu_read_lock(void)
{
  
#line 270 
  __preempt_count_add(1);
  
#line 271 
  ldv_inline_asm();
  
#line 272 
  return;
}


#line 273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void __rcu_read_unlock(void)
{
  
#line 275 
  ldv_inline_asm();
  
#line 275 
  __preempt_count_sub(1);
  
#line 276 
  return;
}


#line 278  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void synchronize_rcu(void)
{
  
#line 280 
  synchronize_sched();
  
#line 281 
  return;
}


#line 104  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcutree.h"
bool rcu_is_watching(void);


#line 447  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_lock_acquire(struct lockdep_map *map)
{
  __here_0: 
#line 449 
  ;
  
#line 449 
  ;
  
#line 449 
  lock_acquire(map,0U,0,2,0,(struct lockdep_map *)0,(unsigned long)((void *)0));
  
#line 451 
  return;
}


#line 452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_lock_release(struct lockdep_map *map)
{
  __here_0: 
#line 454 
  ;
  
#line 454 
  ;
  
#line 454 
  lock_release(map,1,(unsigned long)((void *)0));
  
#line 456 
  return;
}


#line 457 
extern struct lockdep_map rcu_lock_map;


#line 461 
int debug_lockdep_rcu_enabled(void);


#line 843  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_read_lock(void)
{
  
#line 845 
  __rcu_read_lock();
  
#line 847 
  rcu_lock_acquire(& rcu_lock_map);
  {
    bool __warned;
    int tmp;
    
#line 848 
    tmp = debug_lockdep_rcu_enabled();
    
#line 848 
    if (tmp != 0) {
      
#line 848 
      if (! __warned) {
        int tmp_1;
        bool tmp_0;
        
#line 848 
        tmp_0 = rcu_is_watching();
        
#line 848 
        if (tmp_0) 
#line 848 
                   tmp_1 = 0; else 
#line 848 
                                   tmp_1 = 1;
        
#line 848 
        if (tmp_1) {
          
#line 848 
          __warned = (_Bool)1;
          
#line 848 
          lockdep_rcu_suspicious("include/linux/rcupdate.h",849,"rcu_read_lock() used illegally while idle");
        }
        else ;
      }
      else ;
    }
    else ;
  }
  
#line 851 
  return;
}


#line 897  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
__inline static void rcu_read_unlock(void)
{
  {
    bool __warned;
    int tmp;
    
#line 899 
    tmp = debug_lockdep_rcu_enabled();
    
#line 899 
    if (tmp != 0) {
      
#line 899 
      if (! __warned) {
        int tmp_1;
        bool tmp_0;
        
#line 899 
        tmp_0 = rcu_is_watching();
        
#line 899 
        if (tmp_0) 
#line 899 
                   tmp_1 = 0; else 
#line 899 
                                   tmp_1 = 1;
        
#line 899 
        if (tmp_1) {
          
#line 899 
          __warned = (_Bool)1;
          
#line 899 
          lockdep_rcu_suspicious("include/linux/rcupdate.h",900,"rcu_read_unlock() used illegally while idle");
        }
        else ;
      }
      else ;
    }
    else ;
  }
  
#line 902 
  __rcu_read_unlock();
  
#line 903 
  rcu_lock_release(& rcu_lock_map);
  
#line 904 
  return;
}


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist.h"
void __list_add_rcu(struct list_head *, struct list_head *, struct list_head *);


#line 99  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist.h"
__inline static void list_add_tail_rcu(struct list_head *new, struct list_head *head)
{
  
#line 102 
  __list_add_rcu(new,head->prev,head);
  
#line 103 
  return;
}


#line 129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rculist.h"
__inline static void list_del_rcu(struct list_head *entry)
{
  
#line 131 
  __list_del_entry(entry);
  
#line 132 
  entry->prev = (struct list_head *)(-2401263026316508672);
  
#line 133 
  return;
}


#line 193  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mutex.h"
static void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1);


#line 197 
static void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1);


#line 201 
static void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1);


#line 205 
static void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1);


#line 209 
static void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1);


#line 181  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/workqueue.h"
void __init_work(struct work_struct *, int);


#line 361 
struct workqueue_struct *__alloc_workqueue_key(char const *, unsigned int, int, struct lock_class_key *, char const * , ...);


#line 421 
void destroy_workqueue(struct workqueue_struct *);


#line 444 
bool cancel_work_sync(struct work_struct *);


#line 490 
static bool ldv_queue_work_113(struct workqueue_struct *wq, struct work_struct *work);


#line 494 
static bool ldv_queue_work_131(struct workqueue_struct *wq, struct work_struct *work);


#line 498 
static bool ldv_queue_work_132(struct workqueue_struct *wq, struct work_struct *work);


#line 195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/io.h"
void iounmap(void volatile *);


#line 329 
void *ioremap_wc(resource_size_t, unsigned long);


#line 58  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/debugfs.h"
struct dentry *debugfs_create_dir(char const *, struct dentry *);


#line 71 
static void ldv_debugfs_remove_162(struct dentry *ldv_func_arg1);


#line 75 
static void ldv_debugfs_remove_164(struct dentry *ldv_func_arg1);


#line 77 
void debugfs_remove_recursive(struct dentry *);


#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/net.h"
int net_ratelimit(void);


#line 421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/sched.h"
long schedule_timeout(long);


#line 424 
long schedule_timeout_uninterruptible(long);


#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kmalloc_0(size_t size, gfp_t flags);


#line 542 
static void *kcalloc_0(size_t n, size_t size, gfp_t flags);


#line 581 
static void *kzalloc_0(size_t size, gfp_t flags);


#line 87  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kobject.h"
__inline static char const *kobject_name(struct kobject const *kobj)
{
  char const *__retres;
  
#line 89 
  __retres = kobj->name;
  
#line 89 
  return __retres;
}


#line 833  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static char const *dev_name(struct device const *dev)
{
  char const *__retres;
  char const *tmp;
  
#line 836 
  if (dev->init_name != (char const *)0) {
    
#line 837 
    __retres = dev->init_name;
    
#line 837 
    goto return_label;
  }
  else ;
  
#line 839 
  tmp = kobject_name(& dev->kobj);
  
#line 839 
  __retres = tmp;
  return_label: 
#line 839 
                return __retres;
}


#line 846  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static int dev_to_node(struct device *dev)
{
  int __retres;
  
#line 848 
  __retres = dev->numa_node;
  
#line 848 
  return __retres;
}


#line 864  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void *dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 866 
  __retres = dev->driver_data;
  
#line 866 
  return __retres;
}


#line 869  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/device.h"
__inline static void dev_set_drvdata(struct device *dev, void *data)
{
  
#line 871 
  dev->driver_data = data;
  
#line 872 
  return;
}


#line 1079 
void dev_alert(struct device const *, char const * , ...);


#line 403  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
void kvfree(void const *);


#line 60  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
int dma_supported(struct device *, u64);


#line 61 
int dma_set_mask(struct device *, u64);


#line 101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int dma_set_coherent_mask(struct device *dev, u64 mask)
{
  int __retres;
  int tmp;
  
#line 103 
  tmp = dma_supported(dev,mask);
  
#line 103 
  if (tmp == 0) {
    
#line 104 
    __retres = -5;
    
#line 104 
    goto return_label;
  }
  else ;
  
#line 105 
  dev->coherent_dma_mask = mask;
  
#line 106 
  __retres = 0;
  return_label: 
#line 106 
                return __retres;
}


#line 772  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
void kfree_skb(struct sk_buff *);


#line 783 
struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);


#line 787  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *alloc_skb(unsigned int size, gfp_t priority)
{
  struct sk_buff *tmp;
  
#line 790 
  tmp = __alloc_skb(size,priority,0,-1);
  
#line 790 
  return tmp;
}


#line 1567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_is_nonlinear(struct sk_buff const *skb)
{
  bool __retres;
  
#line 1569 
  __retres = (_Bool)(skb->data_len != 0U);
  
#line 1569 
  return __retres;
}


#line 1650  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_tail_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1652 
  __retres = skb->head + skb->tail;
  
#line 1652 
  return __retres;
}


#line 1689  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *__skb_put(struct sk_buff *skb, unsigned int len)
{
  bool tmp_1;
  
#line 1691 
  unsigned char *tmp = skb_tail_pointer((struct sk_buff const *)skb);
  
#line 1692 
  tmp_1 = skb_is_nonlinear((struct sk_buff const *)skb);
  
#line 1692 
  if ((long)((int)tmp_1 != 0) != 0L) {
    
#line 1694 
    ldv_inline_asm();
    
#line 1692 
    ;
  }
  else ;
  
#line 1693 
  skb->tail += len;
  
#line 1694 
  skb->len += len;
  
#line 1695 
  return tmp;
}


#line 3290  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_set_queue_mapping(struct sk_buff *skb, u16 queue_mapping)
{
  
#line 3292 
  skb->queue_mapping = queue_mapping;
  
#line 3293 
  return;
}


#line 3310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static u16 skb_get_rx_queue(struct sk_buff const *skb)
{
  u16 __retres;
  
#line 3312 
  __retres = (unsigned short)((unsigned int)skb->queue_mapping + 65535U);
  
#line 3312 
  return __retres;
}


#line 3315  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static bool skb_rx_queue_recorded(struct sk_buff const *skb)
{
  bool __retres;
  
#line 3317 
  __retres = (_Bool)((unsigned int)skb->queue_mapping != 0U);
  
#line 3317 
  return __retres;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/delay.h"
void __const_udelay(unsigned long);


#line 141  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static int ldv_request_irq_85(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 145 
static int ldv_request_irq_86(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 149 
static int ldv_request_irq_87(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 153 
static int ldv_request_irq_88(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 157 
static int ldv_request_irq_89(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 161 
static int ldv_request_irq_147(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 165 
static int ldv_request_irq_149(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev);


#line 177 
static void ldv_free_irq_90(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 181 
static void ldv_free_irq_91(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 185 
static void ldv_free_irq_92(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 189 
static void ldv_free_irq_93(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 193 
static void ldv_free_irq_94(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 197 
static void ldv_free_irq_95(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 201 
static void ldv_free_irq_96(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 205 
static void ldv_free_irq_97(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 209 
static void ldv_free_irq_98(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 213 
static void ldv_free_irq_99(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 217 
static void ldv_free_irq_100(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 221 
static void ldv_free_irq_101(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 225 
static void ldv_free_irq_148(unsigned int ldv_func_arg1, void *ldv_func_arg2);


#line 540 
static void ldv_tasklet_schedule_84(struct tasklet_struct *t);


#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void napi_disable(struct napi_struct *);


#line 505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_enable(struct napi_struct *n)
{
  int tmp;
  
#line 507 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& n->state));
  
#line 507 
  if ((long)(tmp == 0) != 0L) {
    
#line 509 
    ldv_inline_asm();
    
#line 507 
    ;
  }
  else ;
  
#line 509 
  ldv_inline_asm();
  
#line 509 
  clear_bit(0L,(unsigned long volatile *)(& n->state));
  
#line 510 
  return;
}


#line 1822  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static struct netdev_queue *netdev_get_tx_queue(struct net_device const *dev, unsigned int index)
{
  struct netdev_queue *__retres;
  
#line 1825 
  __retres = dev->_tx + index;
  
#line 1825 
  return __retres;
}


#line 2205 
static void ldv_free_netdev_157(struct net_device *ldv_func_arg1);


#line 2515  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_queue(struct netdev_queue *dev_queue)
{
  
#line 2517 
  clear_bit(0L,(unsigned long volatile *)(& dev_queue->state));
  
#line 2518 
  return;
}


#line 2531  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void netif_tx_start_all_queues(struct net_device *dev)
{
  unsigned int i;
  
#line 2535 
  i = 0U;
  
#line 2535 
  goto ldv_42920;
  ldv_42919: 
#line 2536 
  ;
  {
    
#line 2536 
    struct netdev_queue *txq = netdev_get_tx_queue((struct net_device const *)dev,i);
    
#line 2537 
    netif_tx_start_queue(txq);
  }
  
#line 2535 
  i += 1U;
  ldv_42920: 
#line 2536 
  ;
  
#line 2535 
  if (dev->num_tx_queues > i) 
#line 2537 
                              goto ldv_42919; else 
#line 2540 
                                                   goto ldv_42921;
  ldv_42921: 
#line 2541 
  ;
  
#line 2542 
  return;
}


#line 2541 
void netif_tx_wake_queue(struct netdev_queue *);


#line 2582 
void netif_tx_stop_all_queues(struct net_device *);


#line 2769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_running(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 2771 
  tmp = constant_test_bit(0L,(unsigned long const volatile *)(& dev->state));
  
#line 2771 
  __retres = (_Bool)(tmp != 0);
  
#line 2771 
  return __retres;
}


#line 2867 
int netif_set_real_num_tx_queues(struct net_device *, unsigned int);


#line 2870 
int netif_set_real_num_rx_queues(struct net_device *, unsigned int);


#line 3038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_carrier_ok(struct net_device const *dev)
{
  bool __retres;
  int tmp;
  
#line 3040 
  tmp = constant_test_bit(2L,(unsigned long const volatile *)(& dev->state));
  
#line 3040 
  __retres = (_Bool)(tmp == 0);
  
#line 3040 
  return __retres;
}


#line 3047 
void netif_carrier_on(struct net_device *);


#line 3049 
void netif_carrier_off(struct net_device *);


#line 3112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool netif_device_present(struct net_device *dev)
{
  bool __retres;
  int tmp;
  
#line 3114 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& dev->state));
  
#line 3114 
  __retres = (_Bool)(tmp != 0);
  
#line 3114 
  return __retres;
}


#line 3117 
void netif_device_detach(struct net_device *);


#line 3119 
void netif_device_attach(struct net_device *);


#line 3355 
static int ldv_register_netdev_159(struct net_device *ldv_func_arg1);


#line 3360 
static void ldv_unregister_netdev_160(struct net_device *ldv_func_arg1);


#line 3830 
void netdev_warn(struct net_device const *, char const * , ...);


#line 3834 
void netdev_info(struct net_device const *, char const * , ...);


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
int eth_validate_addr(struct net_device *);


#line 53 
static struct net_device *ldv_alloc_etherdev_mqs_158(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3);


#line 93  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_zero_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 96 
  __retres = (_Bool)((*((u32 const *)addr) | (unsigned int)*((u16 const *)(addr + 4U))) == 0U);
  
#line 96 
  return __retres;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_multicast_ether_addr(u8 const *addr)
{
  bool __retres;
  
#line 114 
  u32 a = *((u32 const *)addr);
  
#line 121 
  __retres = (_Bool)((a & 1U) != 0U);
  
#line 121 
  return __retres;
}


#line 186  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static bool is_valid_ether_addr(u8 const *addr)
{
  bool __retres;
  int tmp_3;
  int tmp_0;
  bool tmp;
  
#line 190 
  tmp = is_multicast_ether_addr(addr);
  
#line 190 
  if (tmp) 
#line 190 
           tmp_0 = 0; else 
#line 190 
                           tmp_0 = 1;
  
#line 190 
  if (tmp_0) {
    int tmp_2;
    bool tmp_1;
    
#line 190 
    tmp_1 = is_zero_ether_addr(addr);
    
#line 190 
    if (tmp_1) 
#line 190 
               tmp_2 = 0; else 
#line 190 
                               tmp_2 = 1;
    
#line 190 
    if (tmp_2) 
#line 190 
               tmp_3 = 1; else 
#line 190 
                               tmp_3 = 0;
  }
  else 
#line 190 
       tmp_3 = 0;
  
#line 190 
  __retres = (_Bool)(tmp_3 != 0);
  
#line 190 
  return __retres;
}


#line 271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__inline static void ether_addr_copy(u8 *dst, u8 const *src)
{
  
#line 274 
  *((u32 *)dst) = *((u32 const *)src);
  
#line 275 
  *((u16 *)(dst + 4U)) = *((u16 const *)(src + 4U));
  
#line 276 
  return;
}


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/firmware.h"
int request_firmware(struct firmware const **, char const *, struct device *);


#line 48 
int request_firmware_direct(struct firmware const **, char const *, struct device *);


#line 51 
void release_firmware(struct firmware const *);


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
void rtnl_lock(void);


#line 28 
void rtnl_unlock(void);


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct net_device *vlan_dev_real_dev(struct net_device const *);


#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static int __vlan_get_tag(struct sk_buff const *skb, u16 *vlan_tci)
{
  int __retres;
  
#line 425 
  struct vlan_ethhdr *veth = (struct vlan_ethhdr *)skb->data;
  
#line 427 
  if ((unsigned int)veth->h_vlan_proto != 129U && (unsigned int)veth->h_vlan_proto != 43144U) {
    
#line 429 
    __retres = -22;
    
#line 429 
    goto return_label;
  }
  else ;
  
#line 431 
  if (0 != 0) 
#line 431 
              *vlan_tci = (unsigned short)(((int)veth->h_vlan_TCI << 8) | ((int)veth->h_vlan_TCI >> 8)); else 
                                                                    
#line 431 
                                                                    *vlan_tci = __fswab16((unsigned short)((int)veth->h_vlan_TCI));
  
#line 432 
  __retres = 0;
  return_label: 
#line 432 
                return __retres;
}


#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static int __vlan_hwaccel_get_tag(struct sk_buff const *skb, u16 *vlan_tci)
{
  int __retres;
  
#line 445 
  if (((int)skb->vlan_tci & 4096) != 0) {
    
#line 446 
    *vlan_tci = (unsigned short)((unsigned int)skb->vlan_tci & 61439U);
    
#line 447 
    __retres = 0;
    
#line 447 
    goto return_label;
  }
  else {
    
#line 449 
    *vlan_tci = (unsigned short)0U;
    
#line 450 
    __retres = -22;
    
#line 450 
    goto return_label;
  }
  return_label: 
#line 445 
                return __retres;
}


#line 463  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static int vlan_get_tag(struct sk_buff const *skb, u16 *vlan_tci)
{
  int __retres;
  
#line 465 
  if (((skb->dev)->features & 128ULL) != 0ULL) {
    int tmp;
    
#line 466 
    tmp = __vlan_hwaccel_get_tag(skb,vlan_tci);
    
#line 466 
    __retres = tmp;
    
#line 466 
    goto return_label;
  }
  else {
    int tmp_0;
    
#line 468 
    tmp_0 = __vlan_get_tag(skb,vlan_tci);
    
#line 468 
    __retres = tmp_0;
    
#line 468 
    goto return_label;
  }
  return_label: 
#line 465 
                return __retres;
}


#line 15  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mdio.h"
__inline static bool mdio_phy_id_is_c45(int phy_id)
{
  bool __retres;
  
#line 17 
  __retres = (_Bool)(((phy_id & 32768) != 0 && (phy_id & -33792) == 0) != 0);
  
#line 17 
  return __retres;
}


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mdio.h"
__inline static __u16 mdio_phy_id_prtad(int phy_id)
{
  __u16 __retres;
  
#line 22 
  __retres = (unsigned short)((unsigned int)((unsigned short)(phy_id >> 5)) & 31U);
  
#line 22 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mdio.h"
__inline static __u16 mdio_phy_id_devad(int phy_id)
{
  __u16 __retres;
  
#line 27 
  __retres = (unsigned short)((unsigned int)((unsigned short)phy_id) & 31U);
  
#line 27 
  return __retres;
}


#line 914  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pcie_capability_clear_and_set_word(struct pci_dev *, int, u16, u16);


#line 919  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pcie_capability_set_word(struct pci_dev *dev, int pos, u16 set)
{
  int tmp;
  
#line 922 
  tmp = pcie_capability_clear_and_set_word(dev,pos,(unsigned short)0,(unsigned short)((int)set));
  
#line 922 
  return tmp;
}


#line 951 
int pci_enable_device(struct pci_dev *);


#line 968 
void pci_disable_device(struct pci_dev *);


#line 971 
void pci_set_master(struct pci_dev *);


#line 1026 
int pci_save_state(struct pci_dev *);


#line 1027 
void pci_restore_state(struct pci_dev *);


#line 1094 
int pci_request_regions(struct pci_dev *, char const *);


#line 1096 
void pci_release_regions(struct pci_dev *);


#line 1146 
static int ldv___pci_register_driver_161(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3);


#line 1158 
static void ldv_pci_unregister_driver_163(struct pci_driver *ldv_func_arg1);


#line 1212 
void pci_disable_msi(struct pci_dev *);


#line 1216 
void pci_disable_msix(struct pci_dev *);


#line 1219 
int pci_enable_msi_range(struct pci_dev *, int, int);


#line 1220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_enable_msi_exact(struct pci_dev *dev, int nvec)
{
  int __retres;
  
#line 1222 
  int rc = pci_enable_msi_range(dev,nvec,nvec);
  
#line 1223 
  if (rc < 0) {
    
#line 1224 
    __retres = rc;
    
#line 1224 
    goto return_label;
  }
  else ;
  
#line 1225 
  __retres = 0;
  return_label: 
#line 1225 
                return __retres;
}


#line 1227 
int pci_enable_msix_range(struct pci_dev *, struct msix_entry *, int, int);


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_set_dma_mask(struct pci_dev *dev, u64 mask)
{
  int tmp;
  
#line 115 
  tmp = dma_set_mask(& dev->dev,mask);
  
#line 115 
  return tmp;
}


#line 118  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/pci-dma-compat.h"
__inline static int pci_set_consistent_dma_mask(struct pci_dev *dev, u64 mask)
{
  int tmp;
  
#line 120 
  tmp = dma_set_coherent_mask(& dev->dev,mask);
  
#line 120 
  return tmp;
}


#line 1471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void *pci_get_drvdata(struct pci_dev *pdev)
{
  void *tmp;
  
#line 1473 
  tmp = dev_get_drvdata((struct device const *)(& pdev->dev));
  
#line 1473 
  return tmp;
}


#line 1476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static void pci_set_drvdata(struct pci_dev *pdev, void *data)
{
  
#line 1478 
  dev_set_drvdata(& pdev->dev,data);
  
#line 1479 
  return;
}


#line 1484  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static char const *pci_name(struct pci_dev const *pdev)
{
  char const *tmp;
  
#line 1486 
  tmp = dev_name(& pdev->dev);
  
#line 1486 
  return tmp;
}


#line 1666 
void *pci_ioremap_bar(struct pci_dev *, int);


#line 1672 
int pci_enable_sriov(struct pci_dev *, int);


#line 1673 
void pci_disable_sriov(struct pci_dev *);


#line 42  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/aer.h"
int pci_enable_pcie_error_reporting(struct pci_dev *);


#line 43 
int pci_disable_pcie_error_reporting(struct pci_dev *);


#line 44 
int pci_cleanup_aer_uncorrect_error_status(struct pci_dev *);


#line 70  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
void *vzalloc(unsigned long);


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/netevent.h"
int register_netevent_notifier(struct notifier_block *);


#line 30 
int unregister_netevent_notifier(struct notifier_block *);


#line 218  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/addrconf.h"
int register_inet6addr_notifier(struct notifier_block *);


#line 219 
int unregister_inet6addr_notifier(struct notifier_block *);


#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_uld.h"
int cxgb4_alloc_atid(struct tid_info *t, void *data);


#line 154 
int cxgb4_alloc_stid(struct tid_info *t, int family, void *data);


#line 155 
int cxgb4_alloc_sftid(struct tid_info *t, int family, void *data);


#line 156 
void cxgb4_free_atid(struct tid_info *t, unsigned int atid);


#line 157 
void cxgb4_free_stid(struct tid_info *t, unsigned int stid, int family);


#line 158 
void cxgb4_remove_tid(struct tid_info *t, unsigned int chan, unsigned int tid);


#line 162 
int cxgb4_create_server(struct net_device const *dev, unsigned int stid, __be32 sip, __be16 sport, __be16 vlan, unsigned int queue);


#line 165 
int cxgb4_create_server6(struct net_device const *dev, unsigned int stid, struct in6_addr const *sip, __be16 sport, unsigned int queue);


#line 168 
int cxgb4_remove_server(struct net_device const *dev, unsigned int stid, unsigned int queue, bool ipv6);


#line 170 
int cxgb4_create_server_filter(struct net_device const *dev, unsigned int stid, __be32 sip, __be16 sport, __be16 vlan, unsigned int queue, unsigned char port, unsigned char mask);


#line 174 
int cxgb4_remove_server_filter(struct net_device const *dev, unsigned int stid, unsigned int queue, bool ipv6);


#line 177  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_uld.h"
__inline static void set_wr_txq(struct sk_buff *skb, int prio, int queue)
{
  
#line 179 
  skb_set_queue_mapping(skb,(unsigned short)((int)((unsigned short)((queue << 1) | prio))));
  
#line 180 
  return;
}


#line 279 
int cxgb4_register_uld(enum cxgb4_uld type, struct cxgb4_uld_info const *p);


#line 280 
int cxgb4_unregister_uld(enum cxgb4_uld type);


#line 282 
unsigned int cxgb4_dbfifo_count(struct net_device const *dev, int lpfifo);


#line 283 
unsigned int cxgb4_port_chan(struct net_device const *dev);


#line 284 
unsigned int cxgb4_port_viid(struct net_device const *dev);


#line 285 
unsigned int cxgb4_port_idx(struct net_device const *dev);


#line 286 
unsigned int cxgb4_best_mtu(unsigned short const *mtus, unsigned short mtu, unsigned int *idx);


#line 288 
unsigned int cxgb4_best_aligned_mtu(unsigned short const *mtus, unsigned short header_size, unsigned short data_size_max, unsigned short data_size_align, unsigned int *mtu_idxp);


#line 293 
void cxgb4_get_tcp_stats(struct pci_dev *pdev, struct tp_tcp_stats *v4, struct tp_tcp_stats *v6);


#line 295 
void cxgb4_iscsi_init(struct net_device *dev, unsigned int tag_mask, unsigned int const *pgsz_order);


#line 299 
int cxgb4_sync_txq_pidx(struct net_device *dev, u16 qid, u16 pidx, u16 size);


#line 300 
int cxgb4_flush_eq_cache(struct net_device *dev);


#line 301 
int cxgb4_read_tpte(struct net_device *dev, u32 stag, __be32 *tpte);


#line 302 
u64 cxgb4_read_sge_timestamp(struct net_device *dev);


#line 305 
int cxgb4_bar2_sge_qregs(struct net_device *dev, unsigned int qid, enum cxgb4_bar2_qtype qtype, int user, u64 *pbar2_qoffset, unsigned int *pbar2_qid);


#line 132  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.h"
void cxgb4_dcb_state_init(struct net_device *dev);


#line 134 
void cxgb4_dcb_state_fsm(struct net_device *dev, enum cxgb4_dcb_state_input transition_to);


#line 135 
void cxgb4_dcb_handle_fw_update(struct adapter *adap, struct fw_port_cmd const *pcmd);


#line 137 
struct dcbnl_rtnl_ops const cxgb4_dcb_ops;


#line 898  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static int is_offload(struct adapter const *adap)
{
  int __retres;
  
#line 900 
  __retres = (int)adap->params.offload;
  
#line 900 
  return __retres;
}


#line 960  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static void t4_set_hw_addr(struct adapter *adapter, int port_idx, u8 *hw_addr)
{
  
#line 963 
  ether_addr_copy((adapter->port[port_idx])->dev_addr,(u8 const *)hw_addr);
  
#line 964 
  ether_addr_copy((u8 *)(& (adapter->port[port_idx])->perm_addr),(u8 const *)hw_addr);
  
#line 965 
  return;
}


#line 973  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static struct port_info *netdev2pinfo(struct net_device const *dev)
{
  struct port_info *tmp;
  
#line 975 
  tmp = (struct port_info *)netdev_priv(dev);
  
#line 975 
  return tmp;
}


#line 996  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static struct adapter *netdev2adap(struct net_device const *dev)
{
  struct adapter *__retres;
  struct port_info *tmp;
  
#line 998 
  tmp = netdev2pinfo(dev);
  
#line 998 
  __retres = tmp->adapter;
  
#line 998 
  return __retres;
}


#line 1002  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static void cxgb_busy_poll_init_lock(struct sge_rspq *q)
{
  
#line 1004 
  spinlock_check(& q->bpoll_lock);
  {
    struct lock_class_key __key;
    
#line 1004 
    __raw_spin_lock_init(& q->bpoll_lock.__anonCompField_spinlock_18.rlock,"&(&q->bpoll_lock)->rlock",& __key);
  }
  
#line 1005 
  q->bpoll_state = 0U;
  
#line 1006 
  return;
}


#line 1008  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static bool cxgb_poll_lock_napi(struct sge_rspq *q)
{
  
#line 1010 
  bool rc = (_Bool)1;
  
#line 1012 
  ldv_spin_lock_76(& q->bpoll_lock);
  
#line 1013 
  if (((unsigned long)q->bpoll_state & 3UL) != 0UL) {
    
#line 1014 
    q->bpoll_state |= 4U;
    
#line 1015 
    rc = (_Bool)0;
  }
  else 
#line 1017 
       q->bpoll_state = 1U;
  
#line 1019 
  ldv_spin_unlock_77(& q->bpoll_lock);
  
#line 1020 
  return rc;
}


#line 1118 
char cxgb4_driver_name[6U];


#line 1119 
char const cxgb4_driver_version[9U];


#line 1121 
void t4_os_portmod_changed(struct adapter const *adap, int port_id);


#line 1122 
void t4_os_link_changed(struct adapter *adapter, int port_id, int link_stat);


#line 1126 
void t4_free_sge_resources(struct adapter *adap);


#line 1128 
irq_handler_t t4_intr_handler(struct adapter *adap);


#line 1129 
netdev_tx_t t4_eth_xmit(struct sk_buff *skb, struct net_device *dev);


#line 1130 
int t4_ethrx_handler(struct sge_rspq *q, __be64 const *rsp, struct pkt_gl const *si);


#line 1132 
int t4_mgmt_tx(struct adapter *adap, struct sk_buff *skb);


#line 1133 
int t4_ofld_send(struct adapter *adap, struct sk_buff *skb);


#line 1134 
int t4_sge_alloc_rxq(struct adapter *adap, struct sge_rspq *iq, bool fwevtq, struct net_device *dev, int intr_idx, struct sge_fl *fl, int (*hnd)(struct sge_rspq *, __be64 const *, struct pkt_gl const *), int cong);


#line 1137 
int t4_sge_alloc_eth_txq(struct adapter *adap, struct sge_eth_txq *txq, struct net_device *dev, struct netdev_queue *netdevq, unsigned int iqid);


#line 1140 
int t4_sge_alloc_ctrl_txq(struct adapter *adap, struct sge_ctrl_txq *txq, struct net_device *dev, unsigned int iqid, unsigned int cmplqid);


#line 1143 
int t4_sge_alloc_ofld_txq(struct adapter *adap, struct sge_ofld_txq *txq, struct net_device *dev, unsigned int iqid);


#line 1145 
irqreturn_t t4_sge_intr_msix(int irq, void *cookie);


#line 1146 
int t4_sge_init(struct adapter *adap);


#line 1147 
void t4_sge_start(struct adapter *adap);


#line 1148 
void t4_sge_stop(struct adapter *adap);


#line 1149 
int cxgb_busy_poll(struct napi_struct *napi);


#line 1150 
int cxgb4_set_rspq_intr_params(struct sge_rspq *q, unsigned int us, unsigned int cnt);


#line 1152 
void cxgb4_set_ethtool_ops(struct net_device *netdev);


#line 1153 
int cxgb4_write_rss(struct port_info const *pi, u16 const *queues);


#line 1154 
int dbfifo_int_thresh;


#line 1159  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static int is_bypass(struct adapter *adap)
{
  int __retres;
  
#line 1161 
  __retres = (int)adap->params.bypass;
  
#line 1161 
  return __retres;
}


#line 1164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static int is_bypass_device(int device)
{
  int __retres;
  
#line 1167 
  switch (device) {
    case 17419: 
#line 1168 
    ;
    case 17420: 
#line 1169 
    ;
    
#line 1170 
    __retres = 1;
    
#line 1170 
    goto return_label;
    default: 
#line 1171 
    ;
    
#line 1172 
    __retres = 0;
    
#line 1172 
    goto return_label;
  }
  return_label: 
#line 1167 
                return __retres;
}


#line 1176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static int is_10gbt_device(int device)
{
  int __retres;
  
#line 1179 
  switch (device) {
    case 17417: 
#line 1180 
    ;
    case 17542: 
#line 1181 
    ;
    
#line 1182 
    __retres = 1;
    
#line 1182 
    goto return_label;
    default: 
#line 1184 
    ;
    
#line 1185 
    __retres = 0;
    
#line 1185 
    goto return_label;
  }
  return_label: 
#line 1179 
                return __retres;
}


#line 1236 
void t4_write_indirect(struct adapter *adap, unsigned int addr_reg, unsigned int data_reg, u32 const *vals, unsigned int nregs, unsigned int start_idx);


#line 1246 
void t4_intr_enable(struct adapter *adapter);


#line 1247 
void t4_intr_disable(struct adapter *adapter);


#line 1248 
int t4_slow_intr_handler(struct adapter *adapter);


#line 1250 
int t4_wait_dev_ready(void *regs);


#line 1251 
int t4_link_l1cfg(struct adapter *adap, unsigned int mbox, unsigned int port, struct link_config *lc);


#line 1255 
u32 t4_read_pcie_cfg4(struct adapter *adap, int reg);


#line 1256 
u32 t4_get_util_window(struct adapter *adap);


#line 1257 
void t4_setup_memwin(struct adapter *adap, u32 memwin_base, u32 window);


#line 1273 
int t4_get_raw_vpd_params(struct adapter *adapter, struct vpd_params *p);


#line 1274 
int t4_get_vpd_params(struct adapter *adapter, struct vpd_params *p);


#line 1278 
int t4_load_phy_fw(struct adapter *adap, int win, spinlock_t *win_lock, int (*phy_fw_version)(u8 const *, size_t ), u8 const *phy_fw_data, size_t phy_fw_size);


#line 1282 
int t4_phy_fw_ver(struct adapter *adap, int *phy_fw_ver);


#line 1286 
unsigned int t4_flash_cfg_addr(struct adapter *adapter);


#line 1287 
int t4_get_fw_version(struct adapter *adapter, u32 *vers);


#line 1288 
int t4_get_tp_version(struct adapter *adapter, u32 *vers);


#line 1290 
int t4_prep_fw(struct adapter *adap, struct fw_info *fw_info, u8 const *fw_data, unsigned int fw_size, struct fw_hdr *card_fw, enum dev_state state, int *reset);


#line 1293 
int t4_prep_adapter(struct adapter *adapter);


#line 1296 
int t4_bar2_sge_qregs(struct adapter *adapter, unsigned int qid, enum t4_bar2_qtype qtype, int user, u64 *pbar2_qoffset, unsigned int *pbar2_qid);


#line 1306 
int t4_init_devlog_params(struct adapter *adap);


#line 1307 
int t4_init_sge_params(struct adapter *adapter);


#line 1308 
int t4_init_tp_params(struct adapter *adap);


#line 1310 
int t4_init_rss_mode(struct adapter *adap, int mbox);


#line 1311 
int t4_port_init(struct adapter *adap, int mbox, int pf, int vf);


#line 1312 
void t4_fatal_err(struct adapter *adap);


#line 1313 
int t4_config_rss_range(struct adapter *adapter, int mbox, unsigned int viid, int start, int n, u16 const *rspq, unsigned int nrspq);


#line 1315 
int t4_config_glbl_rss(struct adapter *adapter, int mbox, unsigned int mode, unsigned int flags);


#line 1317 
int t4_config_vi_rss(struct adapter *adapter, int mbox, unsigned int viid, unsigned int flags, unsigned int defq);


#line 1329 
unsigned int t4_get_mps_bg_map(struct adapter *adap, int idx);


#line 1346 
char const *t4_get_port_type_description(enum fw_port_type port_type);


#line 1348 
void t4_get_port_stats_offset(struct adapter *adap, int idx, struct port_stats *stats, struct port_stats *offset);


#line 1352 
void t4_read_mtu_tbl(struct adapter *adap, u16 *mtus, u8 *mtu_log);


#line 1354 
void t4_tp_wr_bits_indirect(struct adapter *adap, unsigned int addr, unsigned int mask, unsigned int val);


#line 1361 
void t4_tp_get_tcp_stats(struct adapter *adap, struct tp_tcp_stats *v4, struct tp_tcp_stats *v6);


#line 1365 
void t4_load_mtus(struct adapter *adap, unsigned short const *mtus, unsigned short const *alpha, unsigned short const *beta);


#line 1371 
void t4_mk_filtdelwr(unsigned int ftid, struct fw_filter_wr *wr, int qid);


#line 1378 
int t4_fw_hello(struct adapter *adap, unsigned int mbox, unsigned int evt_mbox, enum dev_master master, enum dev_state *state);


#line 1380 
int t4_fw_bye(struct adapter *adap, unsigned int mbox);


#line 1381 
int t4_early_init(struct adapter *adap, unsigned int mbox);


#line 1382 
int t4_fw_reset(struct adapter *adap, unsigned int mbox, int reset);


#line 1383 
int t4_fixup_host_params(struct adapter *adap, unsigned int page_size, unsigned int cache_line_size);


#line 1385 
int t4_fw_initialize(struct adapter *adap, unsigned int mbox);


#line 1392 
int t4_set_params_timeout(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int nparams, u32 const *params, u32 const *val, int timeout);


#line 1396 
int t4_set_params(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int nparams, u32 const *params, u32 const *val);


#line 1399 
int t4_cfg_pfvf(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int txq, unsigned int txq_eth_ctrl, unsigned int rxqi, unsigned int rxq, unsigned int tc, unsigned int vi, unsigned int cmask, unsigned int pmask, unsigned int nexact, unsigned int rcaps, unsigned int wxcaps);


#line 1404 
int t4_alloc_vi(struct adapter *adap, unsigned int mbox, unsigned int port, unsigned int pf, unsigned int vf, unsigned int nmac, u8 *mac, unsigned int *rss_size);


#line 1407 
int t4_free_vi(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int viid);


#line 1410 
int t4_set_rxmode(struct adapter *adap, unsigned int mbox, unsigned int viid, int mtu, int promisc, int all_multi, int bcast, int vlanex, bool sleep_ok);


#line 1413 
int t4_alloc_mac_filt(struct adapter *adap, unsigned int mbox, unsigned int viid, bool free_0, unsigned int naddr, u8 const **addr, u16 *idx, u64 *hash, bool sleep_ok);


#line 1416 
int t4_change_mac(struct adapter *adap, unsigned int mbox, unsigned int viid, int idx, u8 const *addr, bool persist, bool add_smt);


#line 1418 
int t4_set_addr_hash(struct adapter *adap, unsigned int mbox, unsigned int viid, bool ucast, u64 vec, bool sleep_ok);


#line 1420 
int t4_enable_vi_params(struct adapter *adap, unsigned int mbox, unsigned int viid, bool rx_en, bool tx_en, bool dcb_en);


#line 1422 
int t4_enable_vi(struct adapter *adap, unsigned int mbox, unsigned int viid, bool rx_en, bool tx_en);


#line 1426 
int t4_mdio_rd(struct adapter *adap, unsigned int mbox, unsigned int phy_addr, unsigned int mmd, unsigned int reg, u16 *valp);


#line 1428 
int t4_mdio_wr(struct adapter *adap, unsigned int mbox, unsigned int phy_addr, unsigned int mmd, unsigned int reg, u16 val);


#line 1439 
int t4_sge_ctxt_flush(struct adapter *adap, unsigned int mbox);


#line 1440 
int t4_handle_fw_rpl(struct adapter *adap, __be64 const *rpl);


#line 1441 
void t4_db_full(struct adapter *adap);


#line 1442 
void t4_db_dropped(struct adapter *adap);


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.h"
struct clip_tbl *t4_init_clip_tbl(unsigned int clipt_start, unsigned int clipt_end);


#line 39 
int cxgb4_clip_get(struct net_device const *dev, u32 const *lip, u8 v6);


#line 40 
void cxgb4_clip_release(struct net_device const *dev, u32 const *lip, u8 v6);


#line 42 
int cxgb4_update_root_dev_clip(struct net_device *dev);


#line 43 
void t4_cleanup_clip_tbl(struct adapter *adap);


#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.h"
void cxgb4_l2t_release(struct l2t_entry *e);


#line 103 
void t4_l2t_update(struct adapter *adap, struct neighbour *neigh);


#line 104 
struct l2t_entry *t4_l2t_alloc_switching(struct l2t_data *d);


#line 105 
int t4_l2t_set_switching(struct adapter *adap, struct l2t_entry *e, u16 vlan, u8 port, u8 *eth_addr);


#line 107 
struct l2t_data *t4_init_l2t(void);


#line 108 
void do_l2t_write_rpl(struct adapter *adap, struct cpl_l2t_write_rpl const *rpl);


#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
char cxgb4_driver_name[6U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'\000'};

#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
char const cxgb4_driver_version[9U] = {(char)'2', (char)'.', (char)'0', (char)'.', (char)'0', (char)'-', (char)'k', (char)'o', (char)'\000'};

#line 94  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_pci_id_tbl.h"
static struct pci_device_id const cxgb4_pci_tbl[117U] = {{.vendor = 5157U, .device = 17408U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16384U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17409U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16385U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17410U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16386U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17411U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16387U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17412U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16388U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17413U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16389U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17414U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16390U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17415U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16391U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17416U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16392U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17417U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16393U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17418U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16394U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17419U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16395U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17420U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16396U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17421U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16397U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17422U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16398U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17536U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16512U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17537U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16513U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17538U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16514U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17539U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16515U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17540U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16516U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17541U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16517U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17542U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16518U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17543U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16519U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 17544U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 16520U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21504U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20480U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21505U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20481U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21506U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20482U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21507U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20483U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21508U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20484U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21509U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20485U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21510U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20486U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21511U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20487U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21512U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20488U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21513U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20489U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21514U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20490U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21515U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20491U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21516U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20492U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21517U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20493U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21518U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20494U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21520U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20496U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21521U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20497U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21522U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20498U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21523U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20499U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21524U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20500U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21525U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20501U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21632U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20608U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21633U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20609U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21634U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20610U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21635U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20611U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21636U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20612U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21637U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20613U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21638U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20614U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21639U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20615U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21640U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20616U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21641U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20617U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21648U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20624U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21649U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20625U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 21650U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 5157U, .device = 20626U, .subvendor = 4294967295U, .subdevice = 4294967295U, .class = 0U, .class_mask = 0U, .driver_data = 4UL}, {.vendor = 0U, .device = 0U, .subvendor = 0U, .subdevice = 0U, .class = 0U, .class_mask = 0U, .driver_data = 0UL}};

#line 151  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct pci_device_id const __mod_pci__cxgb4_pci_tbl_device_table[117U];

#line 178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int dflt_msg_enable = 255;

#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int msi = 2;

#line 226  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int rx_dma_offset = 2;

#line 228  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static bool vf_acls;

#line 238  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static unsigned int num_vf[4U];

#line 250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int select_queue;

#line 261  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static struct dentry *cxgb4_debugfs_root;

#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static struct list_head adapter_list = {.next = & adapter_list, .prev = & adapter_list};

#line 264  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static struct mutex uld_mutex = {.count = {.counter = 1}, .wait_lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "uld_mutex.wait_lock", .cpu = 0, .ip = 0UL}}}}, .wait_list = {.next = & uld_mutex.wait_list, .prev = & uld_mutex.wait_list}, .owner = (struct task_struct *)0, .magic = (void *)(& uld_mutex), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "uld_mutex", .cpu = 0, .ip = 0UL}};

#line 266  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static struct list_head adap_rcu_list = {.next = & adap_rcu_list, .prev = & adap_rcu_list};

#line 267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static spinlock_t adap_rcu_lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 3735899821U, .owner_cpu = 4294967295U, .owner = (void *)(-1), .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = "adap_rcu_lock", .cpu = 0, .ip = 0UL}}}};

#line 268  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static struct cxgb4_uld_info ulds[2U];

#line 269  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const *uld_str[2U] = {"RDMA", "iSCSI"};

#line 271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void link_report(struct net_device *dev)
{
  int tmp_1;
  bool tmp_0;
  
#line 273 
  tmp_0 = netif_carrier_ok((struct net_device const *)dev);
  
#line 273 
  if (tmp_0) 
#line 273 
             tmp_1 = 0; else 
#line 273 
                             tmp_1 = 1;
  
#line 273 
  if (tmp_1) 
#line 274 
             netdev_info((struct net_device const *)dev,"link down\n");
  else {
    
#line 276 
    char const *fc[4U] = {"no", "Rx", "Tx", "Tx/Rx"};
    
#line 278 
    char const *s = "10Mbps";
    
#line 279 
    struct port_info const *p = netdev_priv((struct net_device const *)dev);
    
#line 281 
    switch ((int)p->link_cfg.speed) {
      case 10000: 
#line 282 
      ;
      
#line 283 
      s = "10Gbps";
      
#line 284 
      goto ldv_58722;
      case 1000: 
#line 285 
      ;
      
#line 286 
      s = "1000Mbps";
      
#line 287 
      goto ldv_58722;
      case 100: 
#line 288 
      ;
      
#line 289 
      s = "100Mbps";
      
#line 290 
      goto ldv_58722;
      case 40000: 
#line 291 
      ;
      
#line 292 
      s = "40Gbps";
      
#line 293 
      goto ldv_58722;
    }
    ldv_58722: 
#line 296 
    ;
    
#line 296 
    netdev_info((struct net_device const *)dev,"link up, %s, full-duplex, %s PAUSE\n",s,fc[(int)p->link_cfg.fc]);
  }
  
#line 299 
  return;
}


#line 303  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void dcb_tx_queue_prio_enable(struct net_device *dev, int enable)
{
  int i;
  
#line 305 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 306 
  struct adapter *adap = pi->adapter;
  
#line 307 
  struct sge_eth_txq *txq = & adap->sge.ethtxq[(int)pi->first_qset];
  
#line 313 
  i = 0;
  
#line 313 
  goto ldv_58738;
  ldv_58737: 
#line 314 
  ;
  {
    u32 name;
    u32 value;
    int err;
    
#line 317 
    name = txq->q.cntxt_id | 68354048U;
    
#line 321 
    if (enable != 0) 
#line 321 
                     value = (unsigned int)i; else 
#line 321 
                                                   value = 4294967295U;
    
#line 327 
    err = t4_set_params_timeout(adap,adap->mbox,adap->pf,0U,1U,(u32 const *)(& name),(u32 const *)(& value),-10000);
    
#line 331 
    if (err != 0) {
      char *tmp_0;
      
#line 332 
      ;
      
#line 332 
      ;
      
#line 332 
      ;
      
#line 333 
      if (enable != 0) 
#line 333 
                       tmp_0 = (char *)"set"; else 
#line 333 
                                                   tmp_0 = (char *)"unset";
      
#line 332 
      ;
      
#line 332 
      dev_err((struct device const *)adap->pdev_dev,"Can\'t %s DCB Priority on port %d, TX Queue %d: err=%d\n",tmp_0,(int)pi->port_id,i,- err);
    }
    else 
#line 336 
         txq->dcb_prio = (unsigned char)value;
  }
  
#line 313 
  i += 1;
  
#line 313 
  txq += 1;
  ldv_58738: 
#line 314 
  ;
  
#line 313 
  if ((int)pi->nqsets > i) 
#line 315 
                           goto ldv_58737; else 
#line 318 
                                                goto ldv_58739;
  ldv_58739: 
#line 319 
  ;
  
#line 320 
  return;
}


#line 341  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
void t4_os_link_changed(struct adapter *adapter, int port_id, int link_stat)
{
  bool tmp;
  
#line 343 
  struct net_device *dev = adapter->port[port_id];
  
#line 346 
  tmp = netif_running((struct net_device const *)dev);
  
#line 346 
  if ((int)tmp != 0) {
    bool tmp_0;
    
#line 346 
    tmp_0 = netif_carrier_ok((struct net_device const *)dev);
    
#line 346 
    ;
    
#line 346 
    if ((int)tmp_0 != link_stat) {
      
#line 347 
      if (link_stat != 0) 
#line 348 
                          netif_carrier_on(dev);
      else {
        
#line 351 
        cxgb4_dcb_state_init(dev);
        
#line 352 
        dcb_tx_queue_prio_enable(dev,0);
        
#line 354 
        netif_carrier_off(dev);
      }
      
#line 357 
      link_report(dev);
    }
    else ;
  }
  else ;
  
#line 359 
  return;
}


#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
void t4_os_portmod_changed(struct adapter const *adap, int port_id)
{
  
#line 363 
  char const *mod_str[7U] = {(char const *)0, "LR", "SR", "ER", "passive DA", "active DA", "LRM"};
  
#line 367 
  struct net_device const *dev = (struct net_device const *)adap->port[port_id];
  
#line 368 
  struct port_info const *pi = netdev_priv(dev);
  
#line 370 
  if ((unsigned int)pi->mod_type == 31U) 
#line 371 
                                         netdev_info(dev,"port module unplugged\n");
  else 
    
#line 372 
    if ((unsigned int)pi->mod_type <= 6U) 
#line 373 
                                          netdev_info(dev,"%s module inserted\n",mod_str[(int)pi->mod_type]); else ;
  
#line 374 
  return;
}


#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int set_addr_filters(struct net_device const *dev, bool sleep)
{
  int __retres;
  u16 filt_idx[7U];
  u8 const *addr[7U];
  int ret;
  struct netdev_hw_addr const *ha;
  struct netdev_hw_addr const *tmp_0;
  struct netdev_hw_addr const *tmp_2;
  struct netdev_hw_addr const *tmp_3;
  struct netdev_hw_addr const *tmp_5;
  int tmp_6;
  
#line 382 
  u64 mhash = 0ULL;
  
#line 383 
  u64 uhash = 0ULL;
  
#line 384 
  bool free_0 = (_Bool)1;
  
#line 387 
  int naddr = 0;
  
#line 389 
  int uc_cnt = dev->uc.count;
  
#line 390 
  int mc_cnt = dev->mc.count;
  
#line 391 
  struct port_info const *pi = netdev_priv(dev);
  
#line 392 
  unsigned int mb = (pi->adapter)->pf;
  {
    
#line 395 
    struct list_head const *__mptr = (struct list_head const *)dev->uc.list.next;
    
#line 395 
    tmp_0 = (struct netdev_hw_addr const *)__mptr;
  }
  
#line 395 
  ha = tmp_0;
  
#line 395 
  goto ldv_58780;
  ldv_58779: 
#line 396 
  ;
  {
    int tmp_1;
    
#line 396 
    tmp_1 = naddr;
    
#line 396 
    naddr += 1;
    
#line 396 
    addr[tmp_1] = (u8 const *)(& ha->addr);
    
#line 397 
    uc_cnt -= 1;
    
#line 397 
    if (uc_cnt == 0) 
#line 397 
                     goto _LOR;
    else 
      
#line 397 
      if ((unsigned int)naddr > 6U) {
        _LOR: {
                
#line 398 
                ret = t4_alloc_mac_filt(pi->adapter,mb,(unsigned int)pi->viid,(_Bool)((bool)((int)free_0) != 0),(unsigned int)naddr,(u8 const **)(& addr),(u16 *)(& filt_idx),& uhash,(_Bool)((bool)((int)sleep) != 0));
                
#line 400 
                if (ret < 0) {
                  
#line 401 
                  __retres = ret;
                  
#line 401 
                  goto return_label;
                }
                else ;
                
#line 403 
                free_0 = (_Bool)0;
                
#line 404 
                naddr = 0;
              }
      }
      else ;
  }
  {
    
#line 395 
    struct list_head const *__mptr_0 = (struct list_head const *)ha->list.next;
    
#line 395 
    tmp_2 = (struct netdev_hw_addr const *)__mptr_0;
  }
  
#line 395 
  ha = tmp_2;
  ldv_58780: 
#line 397 
  ;
  
#line 395 
  if (& ha->list != & dev->uc.list) 
#line 397 
                                    goto ldv_58779; else 
#line 400 
                                                         goto ldv_58781;
  ldv_58781: 
#line 401 
  ;
  {
    
#line 409 
    struct list_head const *__mptr_1 = (struct list_head const *)dev->mc.list.next;
    
#line 409 
    tmp_3 = (struct netdev_hw_addr const *)__mptr_1;
  }
  
#line 409 
  ha = tmp_3;
  
#line 409 
  goto ldv_58790;
  ldv_58789: 
#line 410 
  ;
  {
    int tmp_4;
    
#line 410 
    tmp_4 = naddr;
    
#line 410 
    naddr += 1;
    
#line 410 
    addr[tmp_4] = (u8 const *)(& ha->addr);
    
#line 411 
    mc_cnt -= 1;
    
#line 411 
    if (mc_cnt == 0) 
#line 411 
                     goto _LOR_0;
    else 
      
#line 411 
      if ((unsigned int)naddr > 6U) {
        _LOR_0: {
                  
#line 412 
                  ret = t4_alloc_mac_filt(pi->adapter,mb,(unsigned int)pi->viid,(_Bool)((bool)((int)free_0) != 0),(unsigned int)naddr,(u8 const **)(& addr),(u16 *)(& filt_idx),& mhash,(_Bool)((bool)((int)sleep) != 0));
                  
#line 414 
                  if (ret < 0) {
                    
#line 415 
                    __retres = ret;
                    
#line 415 
                    goto return_label;
                  }
                  else ;
                  
#line 417 
                  free_0 = (_Bool)0;
                  
#line 418 
                  naddr = 0;
                }
      }
      else ;
  }
  {
    
#line 409 
    struct list_head const *__mptr_2 = (struct list_head const *)ha->list.next;
    
#line 409 
    tmp_5 = (struct netdev_hw_addr const *)__mptr_2;
  }
  
#line 409 
  ha = tmp_5;
  ldv_58790: 
#line 411 
  ;
  
#line 409 
  if (& ha->list != & dev->mc.list) 
#line 411 
                                    goto ldv_58789; else 
#line 414 
                                                         goto ldv_58791;
  ldv_58791: 
#line 415 
  ;
  
#line 422 
  tmp_6 = t4_set_addr_hash(pi->adapter,mb,(unsigned int)pi->viid,(_Bool)(uhash != 0ULL),uhash | mhash,(_Bool)((bool)((int)sleep) != 0));
  
#line 422 
  __retres = tmp_6;
  return_label: 
#line 422 
                return __retres;
}


#line 426  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int dbfifo_int_thresh = 10;

#line 433  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int dbfifo_drain_delay = 1000;

#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int set_rxmode(struct net_device *dev, int mtu, bool sleep_ok)
{
  int ret;
  
#line 445 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 447 
  ret = set_addr_filters((struct net_device const *)dev,(_Bool)((bool)((int)sleep_ok) != 0));
  
#line 448 
  if (ret == 0) 
#line 449 
                ret = t4_set_rxmode(pi->adapter,(pi->adapter)->pf,(unsigned int)pi->viid,mtu,(int)(dev->flags >> 8) & 1,(int)(dev->flags >> 9) & 1,1,-1,(_Bool)((bool)((int)sleep_ok) != 0)); else ;
  
#line 453 
  return ret;
}


#line 462  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int link_start(struct net_device *dev)
{
  int ret;
  
#line 465 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 466 
  unsigned int mb = (pi->adapter)->pf;
  
#line 472 
  ret = t4_set_rxmode(pi->adapter,mb,(unsigned int)pi->viid,(int)dev->mtu,-1,-1,-1,(dev->features & 256ULL) != 0ULL,(_Bool)1);
  
#line 474 
  if (ret == 0) {
    
#line 475 
    ret = t4_change_mac(pi->adapter,mb,(unsigned int)pi->viid,(int)pi->xact_addr_filt,(u8 const *)dev->dev_addr,(_Bool)1,(_Bool)1);
    
#line 478 
    if (ret >= 0) {
      
#line 479 
      pi->xact_addr_filt = (short)ret;
      
#line 480 
      ret = 0;
    }
    else ;
  }
  else ;
  
#line 483 
  if (ret == 0) 
#line 484 
                ret = t4_link_l1cfg(pi->adapter,mb,(unsigned int)pi->tx_chan,& pi->link_cfg); else ;
  
#line 486 
  if (ret == 0) {
    
#line 487 
    local_bh_disable();
    
#line 488 
    ret = t4_enable_vi_params(pi->adapter,mb,(unsigned int)pi->viid,(_Bool)1,(_Bool)1,(_Bool)1);
    
#line 490 
    local_bh_enable();
  }
  else ;
  
#line 493 
  return ret;
}


#line 496  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_dcb_enabled(struct net_device const *dev)
{
  int __retres;
  
#line 499 
  struct port_info *pi = netdev_priv(dev);
  
#line 501 
  if (! pi->dcb.enabled) {
    
#line 502 
    __retres = 0;
    
#line 502 
    goto return_label;
  }
  else ;
  
#line 504 
  __retres = (pi->dcb.state == (unsigned int)CXGB4_DCB_STATE_FW_ALLSYNCED || pi->dcb.state == (unsigned int)CXGB4_DCB_STATE_HOST) != 0;
  return_label: 
#line 504 
                return __retres;
}


#line 510  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_dcb_enabled[18U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'d', (char)'c', (char)'b', (char)'_', (char)'e', (char)'n', (char)'a', (char)'b', (char)'l', (char)'e', (char)'d', (char)'\000'};

#line 510 
struct kernel_symbol const __ksymtab_cxgb4_dcb_enabled;


#line 510  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_dcb_enabled = {.value = (unsigned long)(& cxgb4_dcb_enabled), .name = (char const *)(& __kstrtab_cxgb4_dcb_enabled)};

#line 514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void dcb_rpl(struct adapter *adap, struct fw_port_cmd const *pcmd)
{
  unsigned int tmp_0;
  int new_dcb_enabled;
  
#line 516 
  if (0 != 0) 
#line 516 
              tmp_0 = ((((pcmd->op_to_portid << 24) | ((pcmd->op_to_portid << 8) & 16711680U)) | ((pcmd->op_to_portid >> 8) & 65280U)) | (pcmd->op_to_portid >> 24)) & 15U;
  else {
    __u32 tmp;
    
#line 516 
    tmp = __fswab32(pcmd->op_to_portid);
    
#line 516 
    tmp_0 = tmp & 15U;
  }
  
#line 516 
  int port = (int)tmp_0;
  
#line 517 
  struct net_device *dev = adap->port[port];
  
#line 518 
  int old_dcb_enabled = cxgb4_dcb_enabled((struct net_device const *)dev);
  
#line 521 
  cxgb4_dcb_handle_fw_update(adap,pcmd);
  
#line 522 
  new_dcb_enabled = cxgb4_dcb_enabled((struct net_device const *)dev);
  
#line 528 
  if (new_dcb_enabled != old_dcb_enabled) 
#line 529 
                                          dcb_tx_queue_prio_enable(dev,new_dcb_enabled); else ;
  
#line 530 
  return;
}


#line 536  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void clear_filter(struct adapter *adap, struct filter_entry *f)
{
  
#line 544 
  if (f->l2t != (struct l2t_entry *)0) 
#line 545 
                                       cxgb4_l2t_release(f->l2t); else ;
  
#line 551 
  memset((void *)f,0,144UL);
  
#line 552 
  return;
}


#line 556  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void filter_rpl(struct adapter *adap, struct cpl_set_tcb_rpl const *rpl)
{
  unsigned int tmp_0;
  unsigned int ret;
  struct filter_entry *f;
  
#line 558 
  if (0 != 0) 
#line 558 
              tmp_0 = ((((rpl->ot.opcode_tid << 24) | ((rpl->ot.opcode_tid << 8) & 16711680U)) | ((rpl->ot.opcode_tid >> 8) & 65280U)) | (rpl->ot.opcode_tid >> 24)) & 16777215U;
  else {
    __u32 tmp;
    
#line 558 
    tmp = __fswab32(rpl->ot.opcode_tid);
    
#line 558 
    tmp_0 = tmp & 16777215U;
  }
  
#line 558 
  unsigned int idx = tmp_0;
  
#line 559 
  unsigned int nidx = idx - adap->tids.ftid_base;
  
#line 563 
  if (adap->tids.ftid_base <= idx && adap->tids.nftids + adap->tids.nsftids > nidx) {
    
#line 565 
    idx = nidx;
    
#line 566 
    ret = (unsigned int)((int)rpl->cookie >> 5) & 7U;
    
#line 567 
    f = adap->tids.ftid_tab + idx;
    
#line 569 
    if (ret == 2U) 
#line 573 
                   clear_filter(adap,f);
    else 
      
#line 574 
      if (ret == 3U) {
        
#line 575 
        dev_err((struct device const *)adap->pdev_dev,"filter %u setup failed due to full SMT\n",idx);
        
#line 577 
        clear_filter(adap,f);
      }
      else 
        
#line 578 
        if (ret == 1U) {
          
#line 579 
          if (0 != 0) 
#line 579 
                      f->smtidx = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))((unsigned char)(((((((((rpl->oldval << 56) | ((rpl->oldval << 40) & 71776119061217280ULL)) | ((rpl->oldval << 24) & 280375465082880ULL)) | ((rpl->oldval << 8) & 1095216660480ULL)) | ((rpl->oldval >> 8) & 4278190080ULL)) | ((rpl->oldval >> 24) & 16711680ULL)) | ((rpl->oldval >> 40) & 65280ULL)) | (rpl->oldval >> 56)) >> 24));
          else {
            __u64 tmp_1;
            
#line 579 
            tmp_1 = __fswab64(rpl->oldval);
            
#line 579 
            f->smtidx = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))((unsigned char)(tmp_1 >> 24));
          }
          
#line 580 
          f->pending = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
          
#line 581 
          f->valid = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
        }
        else {
          
#line 586 
          dev_err((struct device const *)adap->pdev_dev,"filter %u setup failed with error %u\n",idx,ret);
          
#line 588 
          clear_filter(adap,f);
        }
  }
  else ;
  
#line 591 
  return;
}


#line 595  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int fwevtq_handler(struct sge_rspq *q, __be64 const *rsp, struct pkt_gl const *gl)
{
  int __retres;
  
#line 598 
  u8 opcode = ((struct rss_header const *)rsp)->opcode;
  
#line 600 
  rsp += 1;
  
#line 604 
  if ((long)((unsigned int)opcode == 192U) != 0L && (long)((unsigned int)((struct cpl_fw4_msg const *)rsp)->type == 4U) != 0L) {
    
#line 606 
    rsp += 1;
    
#line 607 
    opcode = ((struct rss_header const *)rsp)->opcode;
    
#line 608 
    rsp += 1;
    
#line 609 
    if ((unsigned int)opcode != 165U) {
      
#line 610 
      dev_err((struct device const *)(q->adap)->pdev_dev,"unexpected FW4/CPL %#x on FW event queue\n",(int)opcode);
      
#line 612 
      goto out;
    }
    else ;
  }
  else ;
  
#line 616 
  if ((long)((unsigned int)opcode == 165U) != 0L) {
    unsigned int tmp_0;
    struct sge_txq *txq;
    
#line 617 
    struct cpl_sge_egr_update const *p = (struct cpl_sge_egr_update const *)rsp;
    
#line 618 
    if (0 != 0) 
#line 618 
                tmp_0 = ((((p->opcode_qid << 24) | ((p->opcode_qid << 8) & 16711680U)) | ((p->opcode_qid >> 8) & 65280U)) | (p->opcode_qid >> 24)) & 131071U;
    else {
      __u32 tmp;
      
#line 618 
      tmp = __fswab32(p->opcode_qid);
      
#line 618 
      tmp_0 = tmp & 131071U;
    }
    
#line 618 
    unsigned int qid = tmp_0;
    
#line 621 
    txq = (struct sge_txq *)*((q->adap)->sge.egr_map + (qid - (q->adap)->sge.egr_start));
    
#line 622 
    txq->restarts += 1UL;
    
#line 623 
    if ((u8 *)(& (q->adap)->sge.ofldtxq) > (u8 *)txq) {
      struct sge_eth_txq *eq;
      struct sge_eth_txq *tmp_1;
      {
        
#line 626 
        struct sge_txq const *__mptr = (struct sge_txq const *)txq;
        
#line 626 
        tmp_1 = (struct sge_eth_txq *)__mptr;
      }
      
#line 626 
      eq = tmp_1;
      
#line 627 
      netif_tx_wake_queue(eq->txq);
    }
    else {
      struct sge_ofld_txq *oq;
      struct sge_ofld_txq *tmp_2;
      {
        
#line 631 
        struct sge_txq const *__mptr_0 = (struct sge_txq const *)txq;
        
#line 631 
        tmp_2 = (struct sge_ofld_txq *)__mptr_0;
      }
      
#line 631 
      oq = tmp_2;
      
#line 632 
      ldv_tasklet_schedule_84(& oq->qresume_tsk);
    }
  }
  else 
    
#line 634 
    if ((unsigned int)opcode == 224U || (unsigned int)opcode == 192U) {
      unsigned int tmp_4;
      unsigned int tmp_6;
      
#line 635 
      struct cpl_fw6_msg const *p_0 = (struct cpl_fw6_msg const *)rsp;
      
#line 638 
      struct fw_port_cmd const *pcmd = (struct fw_port_cmd const *)(& p_0->data);
      
#line 639 
      if (0 != 0) 
#line 639 
                  tmp_4 = ((((pcmd->op_to_portid << 24) | ((pcmd->op_to_portid << 8) & 16711680U)) | ((pcmd->op_to_portid >> 8) & 65280U)) | (pcmd->op_to_portid >> 24)) >> 24;
      else {
        __u32 tmp_3;
        
#line 639 
        tmp_3 = __fswab32(pcmd->op_to_portid);
        
#line 639 
        tmp_4 = tmp_3 >> 24;
      }
      
#line 639 
      unsigned int cmd = tmp_4;
      
#line 640 
      if (0 != 0) 
#line 640 
                  tmp_6 = ((((pcmd->action_to_len16 << 24) | ((pcmd->action_to_len16 << 8) & 16711680U)) | ((pcmd->action_to_len16 >> 8) & 65280U)) | (pcmd->action_to_len16 >> 24)) >> 16;
      else {
        __u32 tmp_5;
        
#line 641 
        tmp_5 = __fswab32(pcmd->action_to_len16);
        
#line 640 
        tmp_6 = tmp_5 >> 16;
      }
      
#line 640 
      unsigned int action = tmp_6;
      
#line 643 
      if (cmd == 27U && action == 3U) {
        unsigned int tmp_8;
        
#line 645 
        if (0 != 0) 
#line 645 
                    tmp_8 = ((((pcmd->op_to_portid << 24) | ((pcmd->op_to_portid << 8) & 16711680U)) | ((pcmd->op_to_portid >> 8) & 65280U)) | (pcmd->op_to_portid >> 24)) & 15U;
        else {
          __u32 tmp_7;
          
#line 645 
          tmp_7 = __fswab32(pcmd->op_to_portid);
          
#line 645 
          tmp_8 = tmp_7 & 15U;
        }
        
#line 645 
        int port = (int)tmp_8;
        
#line 647 
        struct net_device *dev = (q->adap)->port[port];
        
#line 648 
        int state_input = (int)pcmd->u.info.dcbxdis_pkd >= 0;
        
#line 653 
        cxgb4_dcb_state_fsm(dev,(enum cxgb4_dcb_state_input)state_input);
      }
      else ;
      
#line 656 
      if (cmd == 27U && action == 5U) 
#line 658 
                                      dcb_rpl(q->adap,pcmd);
      else 
        
#line 661 
        if ((unsigned int)p_0->type == 0U) 
#line 662 
                                           t4_handle_fw_rpl(q->adap,(__be64 const *)(& p_0->data)); else ;
    }
    else 
      
#line 663 
      if ((unsigned int)opcode == 35U) {
        
#line 664 
        struct cpl_l2t_write_rpl const *p_1 = (struct cpl_l2t_write_rpl const *)rsp;
        
#line 666 
        do_l2t_write_rpl(q->adap,p_1);
      }
      else 
        
#line 667 
        if ((unsigned int)opcode == 58U) {
          
#line 668 
          struct cpl_set_tcb_rpl const *p_2 = (struct cpl_set_tcb_rpl const *)rsp;
          
#line 670 
          filter_rpl(q->adap,p_2);
        }
        else 
#line 672 
             dev_err((struct device const *)(q->adap)->pdev_dev,"unexpected CPL %#x on FW event queue\n",(int)opcode);
  out: 
#line 674 
  ;
  
#line 675 
  __retres = 0;
  
#line 675 
  return __retres;
}


#line 687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int uldrx_handler(struct sge_rspq *q, __be64 const *rsp, struct pkt_gl const *gl)
{
  int __retres;
  struct sge_ofld_rxq *tmp;
  int tmp_0;
  {
    
#line 690 
    struct sge_rspq const *__mptr = (struct sge_rspq const *)q;
    
#line 690 
    tmp = (struct sge_ofld_rxq *)__mptr;
  }
  
#line 690 
  struct sge_ofld_rxq *rxq = tmp;
  
#line 694 
  if ((unsigned int)((struct rss_header const *)rsp)->opcode == 192U && (unsigned int)((struct cpl_fw4_msg const *)(rsp + 1U))->type == 4U) 
    
#line 696 
    rsp += 2U; else ;
  
#line 698 
  tmp_0 = (*(ulds[(int)q->uld].rx_handler))((q->adap)->uld_handle[(int)q->uld],rsp,gl);
  
#line 698 
  if (tmp_0 != 0) {
    
#line 699 
    rxq->stats.nomem += 1UL;
    
#line 700 
    __retres = -1;
    
#line 700 
    goto return_label;
  }
  else ;
  
#line 702 
  if (gl == (struct pkt_gl const *)0) 
#line 703 
                                      rxq->stats.imm += 1UL;
  else 
    
#line 704 
    if ((void *)gl == (void *)1) 
#line 705 
                                 rxq->stats.an += 1UL; else 
#line 707 
                                                            rxq->stats.pkts += 1UL;
  
#line 708 
  __retres = 0;
  return_label: 
#line 708 
                return __retres;
}


#line 711  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void disable_msi(struct adapter *adapter)
{
  
#line 713 
  if ((adapter->flags & 8U) != 0U) {
    
#line 714 
    pci_disable_msix(adapter->pdev);
    
#line 715 
    adapter->flags &= 4294967287U;
  }
  else 
    
#line 716 
    if ((adapter->flags & 4U) != 0U) {
      
#line 717 
      pci_disable_msi(adapter->pdev);
      
#line 718 
      adapter->flags &= 4294967291U;
    }
    else ;
  
#line 720 
  return;
}


#line 725  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static irqreturn_t t4_nondata_intr(int irq, void *cookie)
{
  irqreturn_t __retres;
  
#line 727 
  struct adapter *adap = (struct adapter *)cookie;
  
#line 728 
  u32 v = t4_read_reg(adap,111552U);
  
#line 730 
  if ((v & 8U) != 0U) {
    
#line 731 
    adap->swintr = 1U;
    
#line 732 
    t4_write_reg(adap,111552U,v);
  }
  else ;
  
#line 734 
  if ((adap->flags & 128U) != 0U) 
#line 735 
                                  t4_slow_intr_handler(adap); else ;
  
#line 736 
  __retres = IRQ_HANDLED;
  
#line 736 
  return __retres;
}


#line 742  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void name_msix_vecs(struct adapter *adap)
{
  int i;
  int j;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  
#line 744 
  int msi_idx = 2;
  
#line 744 
  int n = 26;
  
#line 747 
  snprintf((char *)(& adap->msix_info[0].desc),(unsigned long)n,"%s",(char *)(& (adap->port[0])->name));
  
#line 750 
  snprintf((char *)(& adap->msix_info[1].desc),(unsigned long)n,"%s-FWeventq",(char *)(& (adap->port[0])->name));
  
#line 754 
  j = 0;
  
#line 754 
  goto ldv_58943;
  ldv_58942: 
#line 755 
  ;
  {
    
#line 755 
    struct net_device *d = adap->port[j];
    
#line 756 
    struct port_info const *pi = netdev_priv((struct net_device const *)d);
    
#line 758 
    i = 0;
    
#line 758 
    goto ldv_58940;
    ldv_58939: 
#line 759 
    ;
    
#line 759 
    snprintf((char *)(& adap->msix_info[msi_idx].desc),(unsigned long)n,"%s-Rx%d",(char *)(& d->name),i);
    
#line 758 
    i += 1;
    
#line 758 
    msi_idx += 1;
    ldv_58940: 
#line 759 
    ;
    
#line 758 
    if ((int)pi->nqsets > i) 
#line 760 
                             goto ldv_58939; else 
#line 763 
                                                  goto ldv_58941;
    ldv_58941: 
#line 764 
    ;
  }
  
#line 754 
  j += 1;
  ldv_58943: 
#line 755 
  ;
  
#line 754 
  if ((int)adap->params.nports > j) 
#line 756 
                                    goto ldv_58942; else 
#line 759 
                                                         goto ldv_58944;
  ldv_58944: 
#line 760 
  ;
  
#line 764 
  i = 0;
  
#line 764 
  goto ldv_58946;
  ldv_58945: 
#line 765 
  ;
  
#line 765 
  ;
  
#line 765 
  ;
  
#line 765 
  ;
  
#line 765 
  tmp_0 = msi_idx;
  
#line 765 
  msi_idx += 1;
  
#line 765 
  ;
  
#line 765 
  snprintf((char *)(& adap->msix_info[tmp_0].desc),(unsigned long)n,"%s-ofld%d",(char *)(& (adap->port[0])->name),i);
  
#line 764 
  i += 1;
  ldv_58946: 
#line 765 
  ;
  
#line 764 
  if ((int)adap->sge.ofldqsets > i) 
#line 766 
                                    goto ldv_58945; else 
#line 769 
                                                         goto ldv_58947;
  ldv_58947: 
#line 770 
  ;
  
#line 768 
  i = 0;
  
#line 768 
  goto ldv_58949;
  ldv_58948: 
#line 769 
  ;
  
#line 769 
  ;
  
#line 769 
  ;
  
#line 769 
  ;
  
#line 769 
  tmp_1 = msi_idx;
  
#line 769 
  msi_idx += 1;
  
#line 769 
  ;
  
#line 769 
  snprintf((char *)(& adap->msix_info[tmp_1].desc),(unsigned long)n,"%s-rdma%d",(char *)(& (adap->port[0])->name),i);
  
#line 768 
  i += 1;
  ldv_58949: 
#line 769 
  ;
  
#line 768 
  if ((int)adap->sge.rdmaqs > i) 
#line 770 
                                 goto ldv_58948; else 
#line 773 
                                                      goto ldv_58950;
  ldv_58950: 
#line 774 
  ;
  
#line 772 
  i = 0;
  
#line 772 
  goto ldv_58952;
  ldv_58951: 
#line 773 
  ;
  
#line 773 
  ;
  
#line 773 
  ;
  
#line 773 
  ;
  
#line 773 
  tmp_2 = msi_idx;
  
#line 773 
  msi_idx += 1;
  
#line 773 
  ;
  
#line 773 
  snprintf((char *)(& adap->msix_info[tmp_2].desc),(unsigned long)n,"%s-rdma-ciq%d",(char *)(& (adap->port[0])->name),i);
  
#line 772 
  i += 1;
  ldv_58952: 
#line 773 
  ;
  
#line 772 
  if ((int)adap->sge.rdmaciqs > i) 
#line 774 
                                   goto ldv_58951; else 
#line 777 
                                                        goto ldv_58953;
  ldv_58953: 
#line 778 
  ;
  
#line 779 
  return;
}


#line 777  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int request_msix_queue_irqs(struct adapter *adap)
{
  int __retres;
  int err;
  int ethqidx;
  
#line 779 
  struct sge *s = & adap->sge;
  
#line 780 
  int ofldqidx = 0;
  
#line 780 
  int rdmaqidx = 0;
  
#line 780 
  int rdmaciqqidx = 0;
  
#line 781 
  int msi_index = 2;
  
#line 783 
  err = ldv_request_irq_85((unsigned int)adap->msix_info[1].vec,& t4_sge_intr_msix,0UL,(char const *)(& adap->msix_info[1].desc),(void *)(& s->fw_evtq));
  
#line 785 
  if (err != 0) {
    
#line 786 
    __retres = err;
    
#line 786 
    goto return_label;
  }
  else ;
  
#line 788 
  ethqidx = 0;
  
#line 788 
  goto ldv_58966;
  ldv_58965: 
#line 789 
  ;
  
#line 789 
  err = ldv_request_irq_86((unsigned int)adap->msix_info[msi_index].vec,& t4_sge_intr_msix,0UL,(char const *)(& adap->msix_info[msi_index].desc),(void *)(& s->ethrxq[ethqidx].rspq));
  
#line 793 
  if (err != 0) 
#line 794 
                goto unwind; else ;
  
#line 795 
  msi_index += 1;
  
#line 788 
  ethqidx += 1;
  ldv_58966: 
#line 789 
  ;
  
#line 788 
  if ((int)s->ethqsets > ethqidx) 
#line 790 
                                  goto ldv_58965; else 
#line 793 
                                                       goto ldv_58967;
  ldv_58967: 
#line 794 
  ;
  
#line 797 
  ofldqidx = 0;
  
#line 797 
  goto ldv_58969;
  ldv_58968: 
#line 798 
  ;
  
#line 798 
  err = ldv_request_irq_87((unsigned int)adap->msix_info[msi_index].vec,& t4_sge_intr_msix,0UL,(char const *)(& adap->msix_info[msi_index].desc),(void *)(& s->ofldrxq[ofldqidx].rspq));
  
#line 802 
  if (err != 0) 
#line 803 
                goto unwind; else ;
  
#line 804 
  msi_index += 1;
  
#line 797 
  ofldqidx += 1;
  ldv_58969: 
#line 798 
  ;
  
#line 797 
  if ((int)s->ofldqsets > ofldqidx) 
#line 799 
                                    goto ldv_58968; else 
#line 802 
                                                         goto ldv_58970;
  ldv_58970: 
#line 803 
  ;
  
#line 806 
  rdmaqidx = 0;
  
#line 806 
  goto ldv_58972;
  ldv_58971: 
#line 807 
  ;
  
#line 807 
  err = ldv_request_irq_88((unsigned int)adap->msix_info[msi_index].vec,& t4_sge_intr_msix,0UL,(char const *)(& adap->msix_info[msi_index].desc),(void *)(& s->rdmarxq[rdmaqidx].rspq));
  
#line 811 
  if (err != 0) 
#line 812 
                goto unwind; else ;
  
#line 813 
  msi_index += 1;
  
#line 806 
  rdmaqidx += 1;
  ldv_58972: 
#line 807 
  ;
  
#line 806 
  if ((int)s->rdmaqs > rdmaqidx) 
#line 808 
                                 goto ldv_58971; else 
#line 811 
                                                      goto ldv_58973;
  ldv_58973: 
#line 812 
  ;
  
#line 815 
  rdmaciqqidx = 0;
  
#line 815 
  goto ldv_58975;
  ldv_58974: 
#line 816 
  ;
  
#line 816 
  err = ldv_request_irq_89((unsigned int)adap->msix_info[msi_index].vec,& t4_sge_intr_msix,0UL,(char const *)(& adap->msix_info[msi_index].desc),(void *)(& s->rdmaciq[rdmaciqqidx].rspq));
  
#line 820 
  if (err != 0) 
#line 821 
                goto unwind; else ;
  
#line 822 
  msi_index += 1;
  
#line 815 
  rdmaciqqidx += 1;
  ldv_58975: 
#line 816 
  ;
  
#line 815 
  if ((int)s->rdmaciqs > rdmaciqqidx) 
#line 817 
                                      goto ldv_58974; else 
#line 820 
                                                           goto ldv_58976;
  ldv_58976: 
#line 821 
  ;
  
#line 824 
  __retres = 0;
  
#line 824 
  goto return_label;
  unwind: 
#line 826 
  ;
  
#line 827 
  goto ldv_58978;
  ldv_58977: 
#line 828 
  ;
  
#line 828 
  ;
  
#line 828 
  msi_index -= 1;
  
#line 828 
  ;
  
#line 828 
  ldv_free_irq_90((unsigned int)adap->msix_info[msi_index].vec,(void *)(& s->rdmaciq[rdmaciqqidx].rspq));
  ldv_58978: 
#line 830 
  ;
  
#line 827 
  rdmaciqqidx -= 1;
  
#line 827 
  if (rdmaciqqidx >= 0) 
#line 829 
                        goto ldv_58977; else 
#line 832 
                                             goto ldv_58979;
  ldv_58979: 
#line 833 
  ;
  
#line 830 
  goto ldv_58981;
  ldv_58980: 
#line 831 
  ;
  
#line 831 
  ;
  
#line 831 
  msi_index -= 1;
  
#line 831 
  ;
  
#line 831 
  ldv_free_irq_91((unsigned int)adap->msix_info[msi_index].vec,(void *)(& s->rdmarxq[rdmaqidx].rspq));
  ldv_58981: 
#line 833 
  ;
  
#line 830 
  rdmaqidx -= 1;
  
#line 830 
  if (rdmaqidx >= 0) 
#line 832 
                     goto ldv_58980; else 
#line 835 
                                          goto ldv_58982;
  ldv_58982: 
#line 836 
  ;
  
#line 833 
  goto ldv_58984;
  ldv_58983: 
#line 834 
  ;
  
#line 834 
  ;
  
#line 834 
  msi_index -= 1;
  
#line 834 
  ;
  
#line 834 
  ldv_free_irq_92((unsigned int)adap->msix_info[msi_index].vec,(void *)(& s->ofldrxq[ofldqidx].rspq));
  ldv_58984: 
#line 836 
  ;
  
#line 833 
  ofldqidx -= 1;
  
#line 833 
  if (ofldqidx >= 0) 
#line 835 
                     goto ldv_58983; else 
#line 838 
                                          goto ldv_58985;
  ldv_58985: 
#line 839 
  ;
  
#line 836 
  goto ldv_58987;
  ldv_58986: 
#line 837 
  ;
  
#line 837 
  ;
  
#line 837 
  msi_index -= 1;
  
#line 837 
  ;
  
#line 837 
  ldv_free_irq_93((unsigned int)adap->msix_info[msi_index].vec,(void *)(& s->ethrxq[ethqidx].rspq));
  ldv_58987: 
#line 839 
  ;
  
#line 836 
  ethqidx -= 1;
  
#line 836 
  if (ethqidx >= 0) 
#line 838 
                    goto ldv_58986; else 
#line 841 
                                         goto ldv_58988;
  ldv_58988: 
#line 842 
  ;
  
#line 839 
  ldv_free_irq_94((unsigned int)adap->msix_info[1].vec,(void *)(& s->fw_evtq));
  
#line 840 
  __retres = err;
  return_label: 
#line 840 
                return __retres;
}


#line 843  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void free_msix_queue_irqs(struct adapter *adap)
{
  int i;
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  
#line 845 
  int msi_index = 2;
  
#line 846 
  struct sge *s = & adap->sge;
  
#line 848 
  ldv_free_irq_95((unsigned int)adap->msix_info[1].vec,(void *)(& s->fw_evtq));
  
#line 849 
  i = 0;
  
#line 849 
  goto ldv_58996;
  ldv_58995: 
#line 850 
  ;
  
#line 850 
  ;
  
#line 850 
  tmp = msi_index;
  
#line 850 
  msi_index += 1;
  
#line 850 
  ;
  
#line 850 
  ldv_free_irq_96((unsigned int)adap->msix_info[tmp].vec,(void *)(& s->ethrxq[i].rspq));
  
#line 849 
  i += 1;
  ldv_58996: 
#line 850 
  ;
  
#line 849 
  if ((int)s->ethqsets > i) 
#line 851 
                            goto ldv_58995; else 
#line 854 
                                                 goto ldv_58997;
  ldv_58997: 
#line 855 
  ;
  
#line 851 
  i = 0;
  
#line 851 
  goto ldv_58999;
  ldv_58998: 
#line 852 
  ;
  
#line 852 
  ;
  
#line 852 
  tmp_0 = msi_index;
  
#line 852 
  msi_index += 1;
  
#line 852 
  ;
  
#line 852 
  ldv_free_irq_97((unsigned int)adap->msix_info[tmp_0].vec,(void *)(& s->ofldrxq[i].rspq));
  
#line 851 
  i += 1;
  ldv_58999: 
#line 852 
  ;
  
#line 851 
  if ((int)s->ofldqsets > i) 
#line 853 
                             goto ldv_58998; else 
#line 856 
                                                  goto ldv_59000;
  ldv_59000: 
#line 857 
  ;
  
#line 853 
  i = 0;
  
#line 853 
  goto ldv_59002;
  ldv_59001: 
#line 854 
  ;
  
#line 854 
  ;
  
#line 854 
  tmp_1 = msi_index;
  
#line 854 
  msi_index += 1;
  
#line 854 
  ;
  
#line 854 
  ldv_free_irq_98((unsigned int)adap->msix_info[tmp_1].vec,(void *)(& s->rdmarxq[i].rspq));
  
#line 853 
  i += 1;
  ldv_59002: 
#line 854 
  ;
  
#line 853 
  if ((int)s->rdmaqs > i) 
#line 855 
                          goto ldv_59001; else 
#line 858 
                                               goto ldv_59003;
  ldv_59003: 
#line 859 
  ;
  
#line 855 
  i = 0;
  
#line 855 
  goto ldv_59005;
  ldv_59004: 
#line 856 
  ;
  
#line 856 
  ;
  
#line 856 
  tmp_2 = msi_index;
  
#line 856 
  msi_index += 1;
  
#line 856 
  ;
  
#line 856 
  ldv_free_irq_99((unsigned int)adap->msix_info[tmp_2].vec,(void *)(& s->rdmaciq[i].rspq));
  
#line 855 
  i += 1;
  ldv_59005: 
#line 856 
  ;
  
#line 855 
  if ((int)s->rdmaciqs > i) 
#line 857 
                            goto ldv_59004; else 
#line 860 
                                                 goto ldv_59006;
  ldv_59006: 
#line 861 
  ;
  
#line 862 
  return;
}


#line 868  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_write_rss(struct port_info const *pi, u16 const *queues)
{
  int __retres;
  u16 *rss;
  int i;
  int err;
  struct sge_eth_rxq const *rxq;
  
#line 872 
  struct adapter *adapter = pi->adapter;
  
#line 875 
  rxq = (struct sge_eth_rxq const *)(& adapter->sge.ethrxq[(int)pi->first_qset]);
  
#line 876 
  rss = (u16 *)kmalloc_0((unsigned long)pi->rss_size * 2UL,208U);
  
#line 877 
  if (rss == (u16 *)0U) {
    
#line 878 
    __retres = -12;
    
#line 878 
    goto return_label;
  }
  else ;
  
#line 881 
  i = 0;
  
#line 881 
  goto ldv_59017;
  ldv_59016: 
#line 882 
  ;
  
#line 882 
  *(rss + i) = (rxq + (int)*queues)->rspq.abs_id;
  
#line 881 
  i += 1;
  
#line 881 
  queues += 1;
  ldv_59017: 
#line 882 
  ;
  
#line 881 
  if ((int)pi->rss_size > i) 
#line 883 
                             goto ldv_59016; else 
#line 886 
                                                  goto ldv_59018;
  ldv_59018: 
#line 887 
  ;
  
#line 884 
  err = t4_config_rss_range(adapter,(int)adapter->pf,(unsigned int)pi->viid,0,(int)pi->rss_size,(u16 const *)rss,(unsigned int)pi->rss_size);
  
#line 891 
  if (err == 0) 
#line 892 
                err = t4_config_vi_rss(adapter,(int)adapter->mbox,(unsigned int)pi->viid,31U,(unsigned int)*rss); else ;
  
#line 899 
  kfree((void const *)rss);
  
#line 900 
  __retres = err;
  return_label: 
#line 900 
                return __retres;
}


#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int setup_rss(struct adapter *adap)
{
  int __retres;
  int i;
  int j;
  int err;
  
#line 913 
  i = 0;
  
#line 913 
  goto ldv_59030;
  ldv_59029: 
#line 914 
  ;
  {
    
#line 914 
    struct port_info const *pi = adap2pinfo(adap,i);
    
#line 917 
    j = 0;
    
#line 917 
    goto ldv_59027;
    ldv_59026: 
#line 918 
    ;
    
#line 918 
    *(pi->rss + j) = (unsigned short)(j % (int)pi->nqsets);
    
#line 917 
    j += 1;
    ldv_59027: 
#line 918 
    ;
    
#line 917 
    if ((int)pi->rss_size > j) 
#line 919 
                               goto ldv_59026; else 
#line 922 
                                                    goto ldv_59028;
    ldv_59028: 
#line 923 
    ;
    
#line 920 
    err = cxgb4_write_rss(pi,(u16 const *)pi->rss);
    
#line 921 
    if (err != 0) {
      
#line 922 
      __retres = err;
      
#line 922 
      goto return_label;
    }
    else ;
  }
  
#line 913 
  i += 1;
  ldv_59030: 
#line 914 
  ;
  
#line 913 
  if ((int)adap->params.nports > i) 
#line 915 
                                    goto ldv_59029; else 
#line 918 
                                                         goto ldv_59031;
  ldv_59031: 
#line 919 
  ;
  
#line 924 
  __retres = 0;
  return_label: 
#line 924 
                return __retres;
}


#line 930  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static unsigned int rxq_to_chan(struct sge const *p, unsigned int qid)
{
  unsigned int __retres;
  struct port_info *tmp;
  
#line 932 
  qid -= p->ingr_start;
  
#line 933 
  tmp = netdev2pinfo((struct net_device const *)(*(p->ingr_map + qid))->netdev);
  
#line 933 
  __retres = (unsigned int)tmp->tx_chan;
  
#line 933 
  return __retres;
}


#line 939  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void quiesce_rx(struct adapter *adap)
{
  int i;
  
#line 943 
  i = 0;
  
#line 943 
  goto ldv_59049;
  ldv_59048: 
#line 944 
  ;
  {
    
#line 944 
    struct sge_rspq *q = *(adap->sge.ingr_map + i);
    
#line 946 
    if (q != (struct sge_rspq *)0 && q->handler != (int (*)(struct sge_rspq *, __be64 const *, struct pkt_gl const *))0) {
      int tmp_1;
      bool tmp_0;
      
#line 947 
      napi_disable(& q->napi);
      
#line 948 
      local_bh_disable();
      
#line 949 
      goto ldv_59046;
      ldv_59045: 
#line 950 
      ;
      
#line 950 
      if (1) 
#line 950 
             __const_udelay(4295000UL);
      else {
        
#line 950 
        unsigned long __ms = 1UL;
        {
          unsigned long tmp;
          
#line 950 
          goto ldv_59043;
          ldv_59042: 
#line 951 
          ;
          
#line 950 
          __const_udelay(4295000UL);
          ldv_59043: 
#line 952 
          ;
          
#line 950 
          tmp = __ms;
          
#line 950 
          __ms -= 1UL;
          
#line 950 
          ;
          
#line 950 
          if (tmp != 0UL) 
#line 952 
                          goto ldv_59042; else 
#line 955 
                                               goto ldv_59044;
          ldv_59044: 
#line 956 
          ;
        }
      }
      ldv_59046: 
#line 959 
      ;
      
#line 949 
      tmp_0 = cxgb_poll_lock_napi(q);
      
#line 949 
      if (tmp_0) 
#line 949 
                 tmp_1 = 0; else 
#line 949 
                                 tmp_1 = 1;
      
#line 949 
      if (tmp_1) 
#line 951 
                 goto ldv_59045; else 
#line 954 
                                      goto ldv_59047;
      ldv_59047: 
#line 955 
      ;
      
#line 951 
      local_bh_enable();
    }
    else ;
  }
  
#line 943 
  i += 1;
  ldv_59049: 
#line 944 
  ;
  
#line 943 
  if (adap->sge.ingr_sz > (unsigned int)i) 
#line 945 
                                           goto ldv_59048; else 
#line 948 
                                                                goto ldv_59050;
  ldv_59050: 
#line 949 
  ;
  
#line 950 
  return;
}


#line 958  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void disable_interrupts(struct adapter *adap)
{
  
#line 960 
  if ((adap->flags & 1U) != 0U) {
    
#line 961 
    t4_intr_disable(adap);
    
#line 962 
    if ((adap->flags & 8U) != 0U) {
      
#line 963 
      free_msix_queue_irqs(adap);
      
#line 964 
      ldv_free_irq_100((unsigned int)adap->msix_info[0].vec,(void *)adap);
    }
    else 
#line 966 
         ldv_free_irq_101((adap->pdev)->irq,(void *)adap);
    
#line 968 
    quiesce_rx(adap);
  }
  else ;
  
#line 970 
  return;
}


#line 975  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void enable_rx(struct adapter *adap)
{
  int i;
  
#line 979 
  i = 0;
  
#line 979 
  goto ldv_59061;
  ldv_59060: 
#line 980 
  ;
  {
    
#line 980 
    struct sge_rspq *q = *(adap->sge.ingr_map + i);
    
#line 982 
    if (q == (struct sge_rspq *)0) 
#line 983 
                                   goto ldv_59059; else ;
    
#line 984 
    if (q->handler != (int (*)(struct sge_rspq *, __be64 const *, struct pkt_gl const *))0) {
      
#line 985 
      cxgb_busy_poll_init_lock(q);
      
#line 986 
      napi_enable(& q->napi);
    }
    else ;
    
#line 989 
    t4_write_reg(adap,110596U,(unsigned int)(((int)q->intr_params << 12) | ((int)q->cntxt_id << 16)));
  }
  ldv_59059: 
#line 993 
  ;
  
#line 979 
  i += 1;
  ldv_59061: 
#line 980 
  ;
  
#line 979 
  if (adap->sge.ingr_sz > (unsigned int)i) 
#line 981 
                                           goto ldv_59060; else 
#line 984 
                                                                goto ldv_59062;
  ldv_59062: 
#line 985 
  ;
  
#line 986 
  return;
}


#line 995  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int alloc_ofld_rxqs(struct adapter *adap, struct sge_ofld_rxq *q, unsigned int nq, unsigned int per_chan, int msi_idx, u16 *ids)
{
  int __retres;
  int i;
  int err;
  struct sge_fl *tmp;
  
#line 1001 
  i = 0;
  
#line 1001 
  goto ldv_59074;
  ldv_59073: 
#line 1002 
  ;
  
#line 1002 
  if (msi_idx > 0) 
#line 1003 
                   msi_idx += 1; else ;
  
#line 1005 
  if (q->fl.size != 0U) 
#line 1005 
                        tmp = & q->fl; else 
#line 1005 
                                            tmp = (struct sge_fl *)0;
  
#line 1004 
  ;
  
#line 1004 
  ;
  
#line 1004 
  ;
  
#line 1004 
  ;
  
#line 1004 
  err = t4_sge_alloc_rxq(adap,& q->rspq,(_Bool)0,adap->port[(unsigned int)i / per_chan],msi_idx,tmp,& uldrx_handler,0);
  
#line 1008 
  if (err != 0) {
    
#line 1009 
    __retres = err;
    
#line 1009 
    goto return_label;
  }
  else ;
  
#line 1010 
  memset((void *)(& q->stats),0,32UL);
  
#line 1011 
  if (ids != (u16 *)0U) 
#line 1012 
                        *(ids + i) = q->rspq.abs_id; else ;
  
#line 1001 
  i += 1;
  
#line 1001 
  q += 1;
  ldv_59074: 
#line 1002 
  ;
  
#line 1001 
  if ((unsigned int)i < nq) 
#line 1003 
                            goto ldv_59073; else 
#line 1006 
                                                 goto ldv_59075;
  ldv_59075: 
#line 1007 
  ;
  
#line 1014 
  __retres = 0;
  return_label: 
#line 1014 
                return __retres;
}


#line 1025  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int setup_sge_queues(struct adapter *adap)
{
  int __retres;
  int err;
  int msi_idx;
  int i;
  int j;
  struct port_info *tmp_2;
  int tmp_4;
  int tmp_3;
  
#line 1028 
  struct sge *s = & adap->sge;
  
#line 1030 
  bitmap_zero(s->starving_fl,s->egr_sz);
  
#line 1031 
  bitmap_zero(s->txq_maperr,s->egr_sz);
  
#line 1033 
  if ((adap->flags & 8U) != 0U) 
#line 1034 
                                msi_idx = 1;
  else {
    
#line 1036 
    err = t4_sge_alloc_rxq(adap,& s->intrq,(_Bool)0,adap->port[0],0,(struct sge_fl *)0,(int (*)(struct sge_rspq *, __be64 const *, struct pkt_gl const *))0,-1);
    
#line 1038 
    if (err != 0) {
      
#line 1039 
      __retres = err;
      
#line 1039 
      goto return_label;
    }
    else ;
    
#line 1040 
    msi_idx = ~ ((int)s->intrq.abs_id);
  }
  
#line 1056 
  err = t4_sge_alloc_rxq(adap,& s->fw_evtq,(_Bool)1,adap->port[0],msi_idx,(struct sge_fl *)0,& fwevtq_handler,-1);
  
#line 1058 
  if (err != 0) {
    freeout: 
#line 1059 
    ;
    
#line 1059 
    t4_free_sge_resources(adap);
    
#line 1060 
    __retres = err;
    
#line 1060 
    goto return_label;
  }
  else ;
  
#line 1063 
  i = 0;
  
#line 1063 
  goto ldv_59096;
  ldv_59095: 
#line 1064 
  ;
  {
    unsigned int tmp_0;
    struct netdev_queue *tmp_1;
    
#line 1064 
    struct net_device *dev = adap->port[i];
    
#line 1065 
    struct port_info *pi = netdev_priv((struct net_device const *)dev);
    
#line 1066 
    struct sge_eth_rxq *q = & s->ethrxq[(int)pi->first_qset];
    
#line 1067 
    struct sge_eth_txq *t = & s->ethtxq[(int)pi->first_qset];
    
#line 1069 
    j = 0;
    
#line 1069 
    goto ldv_59090;
    ldv_59089: 
#line 1070 
    ;
    
#line 1070 
    if (msi_idx > 0) 
#line 1071 
                     msi_idx += 1; else ;
    
#line 1075 
    tmp_0 = t4_get_mps_bg_map(adap,(int)pi->tx_chan);
    
#line 1072 
    ;
    
#line 1072 
    ;
    
#line 1072 
    ;
    
#line 1072 
    ;
    
#line 1072 
    ;
    
#line 1072 
    err = t4_sge_alloc_rxq(adap,& q->rspq,(_Bool)0,dev,msi_idx,& q->fl,& t4_ethrx_handler,(int)tmp_0);
    
#line 1077 
    if (err != 0) 
#line 1078 
                  goto freeout; else ;
    
#line 1079 
    q->rspq.idx = (unsigned char)j;
    
#line 1080 
    memset((void *)(& q->stats),0,48UL);
    
#line 1069 
    j += 1;
    
#line 1069 
    q += 1;
    ldv_59090: 
#line 1070 
    ;
    
#line 1069 
    if ((int)pi->nqsets > j) 
#line 1071 
                             goto ldv_59089; else 
#line 1074 
                                                  goto ldv_59091;
    ldv_59091: 
#line 1075 
    ;
    
#line 1082 
    j = 0;
    
#line 1082 
    goto ldv_59093;
    ldv_59092: 
#line 1083 
    ;
    
#line 1083 
    ;
    
#line 1083 
    tmp_1 = netdev_get_tx_queue((struct net_device const *)dev,(unsigned int)j);
    
#line 1083 
    ;
    
#line 1083 
    ;
    
#line 1083 
    ;
    
#line 1083 
    err = t4_sge_alloc_eth_txq(adap,t,dev,tmp_1,(unsigned int)s->fw_evtq.cntxt_id);
    
#line 1086 
    if (err != 0) 
#line 1087 
                  goto freeout; else ;
    
#line 1082 
    j += 1;
    
#line 1082 
    t += 1;
    ldv_59093: 
#line 1083 
    ;
    
#line 1082 
    if ((int)pi->nqsets > j) 
#line 1084 
                             goto ldv_59092; else 
#line 1087 
                                                  goto ldv_59094;
    ldv_59094: 
#line 1088 
    ;
  }
  
#line 1063 
  i += 1;
  ldv_59096: 
#line 1064 
  ;
  
#line 1063 
  if ((int)adap->params.nports > i) 
#line 1065 
                                    goto ldv_59095; else 
#line 1068 
                                                         goto ldv_59097;
  ldv_59097: 
#line 1069 
  ;
  
#line 1091 
  j = (int)s->ofldqsets / (int)adap->params.nports;
  
#line 1092 
  i = 0;
  
#line 1092 
  goto ldv_59099;
  ldv_59098: 
#line 1093 
  ;
  
#line 1093 
  err = t4_sge_alloc_ofld_txq(adap,& s->ofldtxq[i],adap->port[i / j],(unsigned int)s->fw_evtq.cntxt_id);
  
#line 1096 
  if (err != 0) 
#line 1097 
                goto freeout; else ;
  
#line 1092 
  i += 1;
  ldv_59099: 
#line 1093 
  ;
  
#line 1092 
  if ((int)s->ofldqsets > i) 
#line 1094 
                             goto ldv_59098; else 
#line 1097 
                                                  goto ldv_59100;
  ldv_59100: 
#line 1098 
  ;
  
#line 1108 
  err = alloc_ofld_rxqs(adap,(struct sge_ofld_rxq *)(& s->ofldrxq),(unsigned int)s->ofldqsets,(unsigned int)j,msi_idx,(u16 *)(& s->ofld_rxq));
  
#line 1108 
  if (err != 0) 
#line 1108 
                goto freeout; else ;
  
#line 1108 
  if (msi_idx > 0) 
#line 1108 
                   msi_idx = (int)s->ofldqsets + msi_idx; else ;
  
#line 1109 
  err = alloc_ofld_rxqs(adap,(struct sge_ofld_rxq *)(& s->rdmarxq),(unsigned int)s->rdmaqs,1U,msi_idx,(u16 *)(& s->rdma_rxq));
  
#line 1109 
  if (err != 0) 
#line 1109 
                goto freeout; else ;
  
#line 1109 
  if (msi_idx > 0) 
#line 1109 
                   msi_idx = (int)s->rdmaqs + msi_idx; else ;
  
#line 1110 
  j = (int)s->rdmaciqs / (int)adap->params.nports;
  
#line 1111 
  err = alloc_ofld_rxqs(adap,(struct sge_ofld_rxq *)(& s->rdmaciq),(unsigned int)s->rdmaciqs,(unsigned int)j,msi_idx,(u16 *)(& s->rdma_ciq));
  
#line 1111 
  if (err != 0) 
#line 1111 
                goto freeout; else ;
  
#line 1111 
  if (msi_idx > 0) 
#line 1111 
                   msi_idx = (int)s->rdmaciqs + msi_idx; else ;
  
#line 1115 
  i = 0;
  
#line 1115 
  goto ldv_59102;
  ldv_59101: 
#line 1116 
  ;
  
#line 1120 
  err = t4_sge_alloc_ctrl_txq(adap,& s->ctrlq[i],adap->port[i],(unsigned int)s->fw_evtq.cntxt_id,(unsigned int)s->rdmarxq[i].rspq.cntxt_id);
  
#line 1123 
  if (err != 0) 
#line 1124 
                goto freeout; else ;
  
#line 1115 
  i += 1;
  ldv_59102: 
#line 1116 
  ;
  
#line 1115 
  if ((int)adap->params.nports > i) 
#line 1117 
                                    goto ldv_59101; else 
#line 1120 
                                                         goto ldv_59103;
  ldv_59103: 
#line 1121 
  ;
  
#line 1130 
  tmp_2 = netdev2pinfo((struct net_device const *)adap->port[0]);
  
#line 1127 
  ;
  
#line 1128 
  tmp_3 = is_t4(adap->params.chip);
  
#line 1128 
  if (tmp_3 != 0) 
#line 1128 
                  tmp_4 = 38920; else 
#line 1128 
                                      tmp_4 = 40972;
  
#line 1127 
  ;
  
#line 1127 
  t4_write_reg(adap,(unsigned int)tmp_4,(unsigned int)(((int)tmp_2->tx_chan << 16) | (int)s->ethrxq[0].rspq.abs_id));
  
#line 1132 
  __retres = 0;
  return_label: 
#line 1132 
                return __retres;
}


#line 1139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
void *t4_alloc_mem(size_t size)
{
  
#line 1141 
  void *p = kzalloc_0(size,720U);
  
#line 1143 
  if (p == (void *)0) 
#line 1144 
                      p = vzalloc(size); else ;
  
#line 1145 
  return p;
}


#line 1151  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
void t4_free_mem(void *addr)
{
  
#line 1153 
  kvfree((void const *)addr);
  
#line 1154 
  return;
}


#line 1162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int set_filter_wr(struct adapter *adapter, int fidx)
{
  int __retres;
  struct sk_buff *skb;
  struct fw_filter_wr *fwr;
  unsigned int ftid;
  __u32 tmp_5;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  
#line 1164 
  struct filter_entry *f = adapter->tids.ftid_tab + fidx;
  
#line 1169 
  skb = alloc_skb(128U,208U);
  
#line 1170 
  if (skb == (struct sk_buff *)0) {
    
#line 1171 
    __retres = -12;
    
#line 1171 
    goto return_label;
  }
  else ;
  
#line 1177 
  if ((unsigned int)*((unsigned char *)(& f->fs) + 2UL) != 0U || (unsigned int)*((unsigned short *)(& f->fs) + 1UL) != 0U) {
    int tmp;
    
#line 1179 
    f->l2t = t4_l2t_alloc_switching(adapter->l2t);
    
#line 1180 
    if (f->l2t == (struct l2t_entry *)0) {
      
#line 1181 
      kfree_skb(skb);
      
#line 1182 
      __retres = -11;
      
#line 1182 
      goto return_label;
    }
    else ;
    
#line 1184 
    tmp = t4_l2t_set_switching(adapter,f->l2t,(unsigned short)((int)f->fs.vlan),(unsigned char)((int)f->fs.eport),(u8 *)(& f->fs.dmac));
    
#line 1184 
    if (tmp != 0) {
      
#line 1186 
      cxgb4_l2t_release(f->l2t);
      
#line 1187 
      f->l2t = (struct l2t_entry *)0;
      
#line 1188 
      kfree_skb(skb);
      
#line 1189 
      __retres = -12;
      
#line 1189 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 1193 
  ftid = adapter->tids.ftid_base + (unsigned int)fidx;
  
#line 1195 
  fwr = (struct fw_filter_wr *)__skb_put(skb,128U);
  
#line 1196 
  memset((void *)fwr,0,128UL);
  
#line 1206 
  fwr->op_pkd = 2U;
  
#line 1207 
  fwr->len16_pkd = 134217728U;
  
#line 1208 
  if (0 != 0) 
#line 1208 
              fwr->tid_to_iq = ((((((ftid << 12) | (unsigned int)((int)f->fs.type << 11)) | (unsigned int)f->fs.iq) << 24) | (((((ftid << 12) | (unsigned int)((int)f->fs.type << 11)) | (unsigned int)f->fs.iq) << 8) & 16711680U)) | (((((ftid << 12) | (unsigned int)((int)f->fs.type << 11)) | (unsigned int)f->fs.iq) >> 8) & 65280U)) | ((((ftid << 12) | (unsigned int)((int)f->fs.type << 11)) | (unsigned int)f->fs.iq) >> 24); else 
                                                                    
#line 1209 
                                                                    fwr->tid_to_iq = __fswab32(((ftid << 12) | (unsigned int)((int)f->fs.type << 11)) | (unsigned int)f->fs.iq);
  
#line 1214 
  if ((unsigned int)*((unsigned char *)(& f->fs) + 0UL) == 8U) 
#line 1214 
                                                               tmp_2 = 16777216; else 
                                                                    
#line 1214 
                                                                    tmp_2 = 0;
  
#line 1214 
  if ((unsigned int)*((unsigned char *)(& f->fs) + 0UL) == 16U) 
#line 1214 
                                                                tmp_3 = 1048576; else 
                                                                    
#line 1214 
                                                                    tmp_3 = 0;
  
#line 1214 
  if (f->l2t != (struct l2t_entry *)0) 
#line 1214 
                                       tmp_4 = (int)(f->l2t)->idx; else 
                                                                    
#line 1214 
                                                                    tmp_4 = 0;
  
#line 1214 
  ;
  
#line 1214 
  tmp_5 = __fswab32((unsigned int)(((((((((((((((int)f->fs.rpttid << 25) | tmp_2) | ((int)f->fs.dirsteer << 23)) | ((int)f->fs.maskhash << 22)) | ((int)f->fs.dirsteerhash << 21)) | tmp_3) | ((int)f->fs.newdmac << 19)) | ((int)f->fs.newsmac << 18)) | ((((unsigned int)*((unsigned short *)(& f->fs) + 1UL) == 256U || (unsigned int)*((unsigned short *)(& f->fs) + 1UL) == 384U) != 0) << 17)) | ((((unsigned int)*((unsigned short *)(& f->fs) + 1UL) == 128U || (unsigned int)*((unsigned short *)(& f->fs) + 1UL) == 384U) != 0) << 16)) | ((int)f->fs.hitcnts << 15)) | ((int)f->fs.eport << 13)) | ((int)f->fs.prio << 12)) | tmp_4));
  
#line 1213 
  fwr->del_filter_to_l2tix = tmp_5;
  
#line 1230 
  if (0 != 0) 
#line 1230 
              fwr->ethtype = (unsigned short)(((int)f->fs.val.ethtype << 8) | ((int)f->fs.val.ethtype >> 8)); else 
                                                                    
#line 1230 
                                                                    fwr->ethtype = __fswab16((unsigned short)((int)f->fs.val.ethtype));
  
#line 1231 
  if (0 != 0) 
#line 1231 
              fwr->ethtypem = (unsigned short)(((int)f->fs.mask.ethtype << 8) | ((int)f->fs.mask.ethtype >> 8)); else 
                                                                    
#line 1231 
                                                                    fwr->ethtypem = __fswab16((unsigned short)((int)f->fs.mask.ethtype));
  
#line 1232 
  fwr->frag_to_ovlan_vldm = (unsigned char)(((((((int)f->fs.val.frag << 7) | ((int)f->fs.mask.frag << 6)) | ((int)f->fs.val.ivlan_vld << 5)) | ((int)f->fs.val.ovlan_vld << 4)) | ((int)f->fs.mask.ivlan_vld << 3)) | ((int)f->fs.mask.ovlan_vld << 2));
  
#line 1239 
  fwr->smac_sel = (unsigned char)0U;
  
#line 1240 
  if (0 != 0) 
#line 1240 
              fwr->rx_chan_rx_rpl_iq = (unsigned short)(((int)adapter->sge.fw_evtq.abs_id << 8) | ((int)adapter->sge.fw_evtq.abs_id >> 8)); else 
                                                                    
#line 1241 
                                                                    fwr->rx_chan_rx_rpl_iq = __fswab16((unsigned short)((int)adapter->sge.fw_evtq.abs_id));
  
#line 1243 
  if (0 != 0) 
#line 1243 
              fwr->maci_to_matchtypem = ((((unsigned int)(((((((((int)f->fs.val.macidx << 23) | ((int)f->fs.mask.macidx << 14)) | ((int)f->fs.val.fcoe << 13)) | ((int)f->fs.mask.fcoe << 12)) | ((int)f->fs.val.iport << 9)) | ((int)f->fs.mask.iport << 6)) | ((int)f->fs.val.matchtype << 3)) | (int)f->fs.mask.matchtype) << 24) | (((unsigned int)(((((((((int)f->fs.val.macidx << 23) | ((int)f->fs.mask.macidx << 14)) | ((int)f->fs.val.fcoe << 13)) | ((int)f->fs.mask.fcoe << 12)) | ((int)f->fs.val.iport << 9)) | ((int)f->fs.mask.iport << 6)) | ((int)f->fs.val.matchtype << 3)) | (int)f->fs.mask.matchtype) << 8) & 16711680U)) | (((unsigned int)(((((((((int)f->fs.val.macidx << 23) | ((int)f->fs.mask.macidx << 14)) | ((int)f->fs.val.fcoe << 13)) | ((int)f->fs.mask.fcoe << 12)) | ((int)f->fs.val.iport << 9)) | ((int)f->fs.mask.iport << 6)) | ((int)f->fs.val.matchtype << 3)) | (int)f->fs.mask.matchtype) >> 8) & 65280U)) | ((unsigned int)(((((((((int)f->fs.val.macidx << 23) | ((int)f->fs.mask.macidx << 14)) | ((int)f->fs.val.fcoe << 13)) | ((int)f->fs.mask.fcoe << 12)) | ((int)f->fs.val.iport << 9)) | ((int)f->fs.mask.iport << 6)) | ((int)f->fs.val.matchtype << 3)) | (int)f->fs.mask.matchtype) >> 24); else 
                                                                    
#line 1244 
                                                                    fwr->maci_to_matchtypem = __fswab32((unsigned int)(((((((((int)f->fs.val.macidx << 23) | ((int)f->fs.mask.macidx << 14)) | ((int)f->fs.val.fcoe << 13)) | ((int)f->fs.mask.fcoe << 12)) | ((int)f->fs.val.iport << 9)) | ((int)f->fs.mask.iport << 6)) | ((int)f->fs.val.matchtype << 3)) | (int)f->fs.mask.matchtype));
  
#line 1252 
  fwr->ptcl = (unsigned char)f->fs.val.proto;
  
#line 1253 
  fwr->ptclm = (unsigned char)f->fs.mask.proto;
  
#line 1254 
  fwr->ttyp = (unsigned char)f->fs.val.tos;
  
#line 1255 
  fwr->ttypm = (unsigned char)f->fs.mask.tos;
  
#line 1256 
  if (0 != 0) 
#line 1256 
              fwr->ivlan = (unsigned short)(((int)f->fs.val.ivlan << 8) | ((int)f->fs.val.ivlan >> 8)); else 
                                                                    
#line 1256 
                                                                    fwr->ivlan = __fswab16((unsigned short)((int)f->fs.val.ivlan));
  
#line 1257 
  if (0 != 0) 
#line 1257 
              fwr->ivlanm = (unsigned short)(((int)f->fs.mask.ivlan << 8) | ((int)f->fs.mask.ivlan >> 8)); else 
                                                                    
#line 1257 
                                                                    fwr->ivlanm = __fswab16((unsigned short)((int)f->fs.mask.ivlan));
  
#line 1258 
  if (0 != 0) 
#line 1258 
              fwr->ovlan = (unsigned short)(((int)f->fs.val.ovlan << 8) | ((int)f->fs.val.ovlan >> 8)); else 
                                                                    
#line 1258 
                                                                    fwr->ovlan = __fswab16((unsigned short)((int)f->fs.val.ovlan));
  
#line 1259 
  if (0 != 0) 
#line 1259 
              fwr->ovlanm = (unsigned short)(((int)f->fs.mask.ovlan << 8) | ((int)f->fs.mask.ovlan >> 8)); else 
                                                                    
#line 1259 
                                                                    fwr->ovlanm = __fswab16((unsigned short)((int)f->fs.mask.ovlan));
  
#line 1260 
  memcpy((void *)(& fwr->lip),(void const *)(& f->fs.val.lip),16UL);
  
#line 1261 
  memcpy((void *)(& fwr->lipm),(void const *)(& f->fs.mask.lip),16UL);
  
#line 1262 
  memcpy((void *)(& fwr->fip),(void const *)(& f->fs.val.fip),16UL);
  
#line 1263 
  memcpy((void *)(& fwr->fipm),(void const *)(& f->fs.mask.fip),16UL);
  
#line 1264 
  if (0 != 0) 
#line 1264 
              fwr->lp = (unsigned short)(((int)f->fs.val.lport << 8) | ((int)f->fs.val.lport >> 8)); else 
                                                                    
#line 1264 
                                                                    fwr->lp = __fswab16((unsigned short)((int)f->fs.val.lport));
  
#line 1265 
  if (0 != 0) 
#line 1265 
              fwr->lpm = (unsigned short)(((int)f->fs.mask.lport << 8) | ((int)f->fs.mask.lport >> 8)); else 
                                                                    
#line 1265 
                                                                    fwr->lpm = __fswab16((unsigned short)((int)f->fs.mask.lport));
  
#line 1266 
  if (0 != 0) 
#line 1266 
              fwr->fp = (unsigned short)(((int)f->fs.val.fport << 8) | ((int)f->fs.val.fport >> 8)); else 
                                                                    
#line 1266 
                                                                    fwr->fp = __fswab16((unsigned short)((int)f->fs.val.fport));
  
#line 1267 
  if (0 != 0) 
#line 1267 
              fwr->fpm = (unsigned short)(((int)f->fs.mask.fport << 8) | ((int)f->fs.mask.fport >> 8)); else 
                                                                    
#line 1267 
                                                                    fwr->fpm = __fswab16((unsigned short)((int)f->fs.mask.fport));
  
#line 1268 
  if ((unsigned int)*((unsigned char *)(& f->fs) + 2UL) != 0U) 
#line 1269 
                                                               memcpy((void *)(& fwr->sma),(void const *)(& f->fs.smac),6UL); else ;
  
#line 1274 
  f->pending = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
  
#line 1275 
  set_wr_txq(skb,1,(int)f->fs.val.iport & 3);
  
#line 1276 
  t4_ofld_send(adapter,skb);
  
#line 1277 
  __retres = 0;
  return_label: 
#line 1277 
                return __retres;
}


#line 1282  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int del_filter_wr(struct adapter *adapter, int fidx)
{
  int __retres;
  struct sk_buff *skb;
  struct fw_filter_wr *fwr;
  unsigned int len;
  unsigned int ftid;
  
#line 1284 
  struct filter_entry *f = adapter->tids.ftid_tab + fidx;
  
#line 1289 
  len = 128U;
  
#line 1290 
  ftid = adapter->tids.ftid_base + (unsigned int)fidx;
  
#line 1292 
  skb = alloc_skb(len,208U);
  
#line 1293 
  if (skb == (struct sk_buff *)0) {
    
#line 1294 
    __retres = -12;
    
#line 1294 
    goto return_label;
  }
  else ;
  
#line 1296 
  fwr = (struct fw_filter_wr *)__skb_put(skb,len);
  
#line 1297 
  t4_mk_filtdelwr(ftid,fwr,(int)adapter->sge.fw_evtq.abs_id);
  
#line 1302 
  f->pending = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
  
#line 1303 
  t4_mgmt_tx(adapter,skb);
  
#line 1304 
  __retres = 0;
  return_label: 
#line 1304 
                return __retres;
}


#line 1307  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static u16 cxgb_select_queue(struct net_device *dev, struct sk_buff *skb, void *accel_priv, u16 (*fallback)(struct net_device *, struct sk_buff *))
{
  u16 __retres;
  int txq;
  int tmp_0;
  u16 tmp_8;
  
#line 1318 
  tmp_0 = cxgb4_dcb_enabled((struct net_device const *)dev);
  
#line 1318 
  if (tmp_0 != 0) {
    u16 vlan_tci;
    int err;
    
#line 1322 
    err = vlan_get_tag((struct sk_buff const *)skb,& vlan_tci);
    
#line 1323 
    if ((long)(err != 0) != 0L) {
      int tmp;
      
#line 1324 
      tmp = net_ratelimit();
      
#line 1324 
      if (tmp != 0) 
#line 1325 
                    netdev_warn((struct net_device const *)dev,"TX Packet without VLAN Tag on DCB Link\n"); else ;
      
#line 1327 
      txq = 0;
    }
    else {
      
#line 1329 
      txq = (int)vlan_tci >> 13;
      
#line 1331 
      if ((unsigned int)skb->protocol == 1673U) 
#line 1332 
                                                txq = (int)skb->priority & 7; else ;
    }
    
#line 1335 
    __retres = (unsigned short)txq;
    
#line 1335 
    goto return_label;
  }
  else ;
  
#line 1339 
  if (select_queue != 0) {
    bool tmp_1;
    
#line 1340 
    tmp_1 = skb_rx_queue_recorded((struct sk_buff const *)skb);
    
#line 1340 
    if ((int)tmp_1 != 0) {
      u16 tmp_2;
      
#line 1341 
      tmp_2 = skb_get_rx_queue((struct sk_buff const *)skb);
      
#line 1340 
      txq = (int)tmp_2;
    }
    else {
      int tmp_7;
      {
        int pscr_ret__;
        {
          
#line 1342 
          void const *__vpp_verify = (void const *)0;
          
#line 1342 
          void const *tmp_3 = __vpp_verify;
        }
        
#line 1342 
        switch (4UL) {
          int tmp_3_0;
          int tmp_4;
          int tmp_5;
          int tmp_6;
          case (unsigned long)1: 
#line 1342 
          ;
          {
            int pfo_ret__;
            
#line 1342 
            switch (4UL) {
              case (unsigned long)1: 
#line 1342 
              ;
              
#line 1343 
              ldv_inline_asm();
              
#line 1342 
              goto ldv_59142;
              case (unsigned long)2: 
#line 1342 
              ;
              
#line 1343 
              ldv_inline_asm();
              
#line 1342 
              goto ldv_59142;
              case (unsigned long)4: 
#line 1342 
              ;
              
#line 1343 
              ldv_inline_asm();
              
#line 1342 
              goto ldv_59142;
              case (unsigned long)8: 
#line 1342 
              ;
              
#line 1343 
              ldv_inline_asm();
              
#line 1342 
              goto ldv_59142;
              default: 
#line 1342 
              ;
              
#line 1342 
              __bad_percpu_size();
            }
            ldv_59142: 
#line 1342 
            ;
            
#line 1342 
            tmp_3_0 = pfo_ret__;
          }
          
#line 1342 
          pscr_ret__ = tmp_3_0;
          
#line 1342 
          goto ldv_59148;
          case (unsigned long)2: 
#line 1342 
          ;
          {
            int pfo_ret___0;
            
#line 1342 
            switch (4UL) {
              case (unsigned long)1: 
#line 1342 
              ;
              
#line 1343 
              ldv_inline_asm();
              
#line 1342 
              goto ldv_59152;
              case (unsigned long)2: 
#line 1342 
              ;
              
#line 1343 
              ldv_inline_asm();
              
#line 1342 
              goto ldv_59152;
              case (unsigned long)4: 
#line 1342 
              ;
              
#line 1343 
              ldv_inline_asm();
              
#line 1342 
              goto ldv_59152;
              case (unsigned long)8: 
#line 1342 
              ;
              
#line 1343 
              ldv_inline_asm();
              
#line 1342 
              goto ldv_59152;
              default: 
#line 1342 
              ;
              
#line 1342 
              __bad_percpu_size();
            }
            ldv_59152: 
#line 1342 
            ;
            
#line 1342 
            tmp_4 = pfo_ret___0;
          }
          
#line 1342 
          pscr_ret__ = tmp_4;
          
#line 1342 
          goto ldv_59148;
          case (unsigned long)4: 
#line 1342 
          ;
          {
            int pfo_ret___1;
            
#line 1342 
            switch (4UL) {
              case (unsigned long)1: 
#line 1342 
              ;
              
#line 1343 
              ldv_inline_asm();
              
#line 1342 
              goto ldv_59161;
              case (unsigned long)2: 
#line 1342 
              ;
              
#line 1343 
              ldv_inline_asm();
              
#line 1342 
              goto ldv_59161;
              case (unsigned long)4: 
#line 1342 
              ;
              
#line 1343 
              ldv_inline_asm();
              
#line 1342 
              goto ldv_59161;
              case (unsigned long)8: 
#line 1342 
              ;
              
#line 1343 
              ldv_inline_asm();
              
#line 1342 
              goto ldv_59161;
              default: 
#line 1342 
              ;
              
#line 1342 
              __bad_percpu_size();
            }
            ldv_59161: 
#line 1342 
            ;
            
#line 1342 
            tmp_5 = pfo_ret___1;
          }
          
#line 1342 
          pscr_ret__ = tmp_5;
          
#line 1342 
          goto ldv_59148;
          case (unsigned long)8: 
#line 1342 
          ;
          {
            int pfo_ret___2;
            
#line 1342 
            switch (4UL) {
              case (unsigned long)1: 
#line 1342 
              ;
              
#line 1343 
              ldv_inline_asm();
              
#line 1342 
              goto ldv_59170;
              case (unsigned long)2: 
#line 1342 
              ;
              
#line 1343 
              ldv_inline_asm();
              
#line 1342 
              goto ldv_59170;
              case (unsigned long)4: 
#line 1342 
              ;
              
#line 1343 
              ldv_inline_asm();
              
#line 1342 
              goto ldv_59170;
              case (unsigned long)8: 
#line 1342 
              ;
              
#line 1343 
              ldv_inline_asm();
              
#line 1342 
              goto ldv_59170;
              default: 
#line 1342 
              ;
              
#line 1342 
              __bad_percpu_size();
            }
            ldv_59170: 
#line 1342 
            ;
            
#line 1342 
            tmp_6 = pfo_ret___2;
          }
          
#line 1342 
          pscr_ret__ = tmp_6;
          
#line 1342 
          goto ldv_59148;
          default: 
#line 1342 
          ;
          
#line 1342 
          __bad_size_call_parameter();
          
#line 1342 
          goto ldv_59148;
        }
        ldv_59148: 
#line 1342 
        ;
        
#line 1342 
        tmp_7 = pscr_ret__;
      }
      
#line 1340 
      txq = tmp_7;
    }
    
#line 1344 
    goto ldv_59179;
    ldv_59178: 
#line 1345 
    ;
    
#line 1345 
    txq = (int)((unsigned int)txq - dev->real_num_tx_queues);
    ldv_59179: 
#line 1346 
    ;
    
#line 1344 
    if ((long)(dev->real_num_tx_queues <= (unsigned int)txq) != 0L) 
#line 1346 
                                                                    goto ldv_59178; else 
                                                                    
#line 1349 
                                                                    goto ldv_59180;
    ldv_59180: 
#line 1350 
    ;
    
#line 1347 
    __retres = (unsigned short)txq;
    
#line 1347 
    goto return_label;
  }
  else ;
  
#line 1350 
  tmp_8 = (*fallback)(dev,skb);
  
#line 1350 
  ;
  
#line 1350 
  __retres = (unsigned short)((unsigned int)tmp_8 % dev->real_num_tx_queues);
  return_label: 
#line 1350 
                return __retres;
}


#line 1353  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int closest_timer(struct sge const *s, int time)
{
  int i;
  int delta;
  
#line 1355 
  int match = 0;
  
#line 1355 
  int min_delta = 2147483647;
  
#line 1357 
  i = 0;
  
#line 1357 
  goto ldv_59193;
  ldv_59192: 
#line 1358 
  ;
  
#line 1358 
  delta = time - (int)s->timer_val[i];
  
#line 1359 
  if (delta < 0) 
#line 1360 
                 delta = - delta; else ;
  
#line 1361 
  if (delta < min_delta) {
    
#line 1362 
    min_delta = delta;
    
#line 1363 
    match = i;
  }
  else ;
  
#line 1357 
  i += 1;
  ldv_59193: 
#line 1358 
  ;
  
#line 1357 
  if ((unsigned int)i <= 5U) 
#line 1359 
                             goto ldv_59192; else 
#line 1362 
                                                  goto ldv_59194;
  ldv_59194: 
#line 1363 
  ;
  
#line 1366 
  return match;
}


#line 1369  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int closest_thres(struct sge const *s, int thres)
{
  int i;
  int delta;
  
#line 1371 
  int match = 0;
  
#line 1371 
  int min_delta = 2147483647;
  
#line 1373 
  i = 0;
  
#line 1373 
  goto ldv_59207;
  ldv_59206: 
#line 1374 
  ;
  
#line 1374 
  delta = thres - (int)s->counter_val[i];
  
#line 1375 
  if (delta < 0) 
#line 1376 
                 delta = - delta; else ;
  
#line 1377 
  if (delta < min_delta) {
    
#line 1378 
    min_delta = delta;
    
#line 1379 
    match = i;
  }
  else ;
  
#line 1373 
  i += 1;
  ldv_59207: 
#line 1374 
  ;
  
#line 1373 
  if ((unsigned int)i <= 3U) 
#line 1375 
                             goto ldv_59206; else 
#line 1378 
                                                  goto ldv_59208;
  ldv_59208: 
#line 1379 
  ;
  
#line 1382 
  return match;
}


#line 1394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_set_rspq_intr_params(struct sge_rspq *q, unsigned int us, unsigned int cnt)
{
  int __retres;
  int tmp_1;
  
#line 1397 
  struct adapter *adap = q->adap;
  
#line 1399 
  if ((us | cnt) == 0U) 
#line 1400 
                        cnt = 1U; else ;
  
#line 1402 
  if (cnt != 0U) {
    int err;
    u32 v;
    u32 new_idx;
    int tmp;
    
#line 1406 
    tmp = closest_thres((struct sge const *)(& adap->sge),(int)cnt);
    
#line 1406 
    new_idx = (unsigned int)tmp;
    
#line 1407 
    if (q->desc != (__be64 *)0ULL && (unsigned int)q->pktcnt_idx != new_idx) {
      
#line 1409 
      v = (unsigned int)((int)q->cntxt_id | 67174400);
      
#line 1413 
      err = t4_set_params(adap,adap->mbox,adap->pf,0U,1U,(u32 const *)(& v),(u32 const *)(& new_idx));
      
#line 1415 
      if (err != 0) {
        
#line 1416 
        __retres = err;
        
#line 1416 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 1418 
    q->pktcnt_idx = (unsigned char)new_idx;
  }
  else ;
  
#line 1421 
  if (us != 0U) 
#line 1421 
                tmp_1 = closest_timer((struct sge const *)(& adap->sge),(int)us); else 
                                                                    
#line 1421 
                                                                    tmp_1 = 6;
  
#line 1421 
  us = (unsigned int)tmp_1;
  
#line 1422 
  q->intr_params = (unsigned char)(((int)((unsigned char)us) << 1U) | (cnt != 0U));
  
#line 1423 
  __retres = 0;
  return_label: 
#line 1423 
                return __retres;
}


#line 1426  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int cxgb_set_features(struct net_device *dev, netdev_features_t features)
{
  int __retres;
  int err;
  
#line 1428 
  struct port_info const *pi = netdev_priv((struct net_device const *)dev);
  
#line 1429 
  netdev_features_t changed = dev->features ^ features;
  
#line 1432 
  if ((changed & 256ULL) == 0ULL) {
    
#line 1433 
    __retres = 0;
    
#line 1433 
    goto return_label;
  }
  else ;
  
#line 1435 
  err = t4_set_rxmode(pi->adapter,(pi->adapter)->pf,(unsigned int)pi->viid,-1,-1,-1,-1,(features & 256ULL) != 0ULL,(_Bool)1);
  
#line 1438 
  if ((long)(err != 0) != 0L) 
#line 1439 
                              dev->features = features ^ 256ULL; else ;
  
#line 1440 
  __retres = err;
  return_label: 
#line 1440 
                return __retres;
}


#line 1443  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int setup_debugfs(struct adapter *adap)
{
  int __retres;
  bool tmp;
  
#line 1445 
  tmp = IS_ERR_OR_NULL((void const *)adap->debugfs_root);
  
#line 1445 
  if ((int)tmp != 0) {
    
#line 1446 
    __retres = -1;
    
#line 1446 
    goto return_label;
  }
  else ;
  
#line 1449 
  t4_setup_debugfs(adap);
  
#line 1451 
  __retres = 0;
  return_label: 
#line 1451 
                return __retres;
}


#line 1461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_alloc_atid(struct tid_info *t, void *data)
{
  
#line 1463 
  int atid = -1;
  
#line 1465 
  ldv_spin_lock_bh_102(& t->atid_lock);
  
#line 1466 
  if (t->afree != (union aopen_entry *)0) {
    
#line 1467 
    union aopen_entry *p = t->afree;
    
#line 1469 
    atid = (int)(((long)p - (long)t->atid_tab) / 8L + (long)t->atid_base);
    
#line 1470 
    t->afree = p->next;
    
#line 1471 
    p->data = data;
    
#line 1472 
    t->atids_in_use += 1U;
  }
  else ;
  
#line 1474 
  ldv_spin_unlock_bh_103(& t->atid_lock);
  
#line 1475 
  return atid;
}


#line 1477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_alloc_atid[17U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'a', (char)'t', (char)'i', (char)'d', (char)'\000'};

#line 1477 
struct kernel_symbol const __ksymtab_cxgb4_alloc_atid;


#line 1477  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_alloc_atid = {.value = (unsigned long)(& cxgb4_alloc_atid), .name = (char const *)(& __kstrtab_cxgb4_alloc_atid)};

#line 1482  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
void cxgb4_free_atid(struct tid_info *t, unsigned int atid)
{
  
#line 1484 
  union aopen_entry *p = t->atid_tab + (atid - t->atid_base);
  
#line 1486 
  ldv_spin_lock_bh_104(& t->atid_lock);
  
#line 1487 
  p->next = t->afree;
  
#line 1488 
  t->afree = p;
  
#line 1489 
  t->atids_in_use -= 1U;
  
#line 1490 
  ldv_spin_unlock_bh_105(& t->atid_lock);
  
#line 1491 
  return;
}


#line 1492  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_free_atid[16U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'f', (char)'r', (char)'e', (char)'e', (char)'_', (char)'a', (char)'t', (char)'i', (char)'d', (char)'\000'};

#line 1492 
struct kernel_symbol const __ksymtab_cxgb4_free_atid;


#line 1492  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_free_atid = {.value = (unsigned long)(& cxgb4_free_atid), .name = (char const *)(& __kstrtab_cxgb4_free_atid)};

#line 1497  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_alloc_stid(struct tid_info *t, int family, void *data)
{
  int stid;
  
#line 1501 
  ldv_spin_lock_bh_106(& t->stid_lock);
  
#line 1502 
  if (family == 2) {
    unsigned long tmp;
    
#line 1503 
    tmp = find_first_zero_bit((unsigned long const *)t->stid_bmap,(unsigned long)t->nstids);
    
#line 1503 
    stid = (int)tmp;
    
#line 1504 
    if (t->nstids > (unsigned int)stid) 
#line 1505 
                                        __set_bit((long)stid,(unsigned long volatile *)t->stid_bmap); else 
                                                                    
#line 1507 
                                                                    stid = -1;
  }
  else {
    
#line 1509 
    stid = bitmap_find_free_region(t->stid_bmap,t->nstids,2);
    
#line 1510 
    if (stid < 0) 
#line 1511 
                  stid = -1; else ;
  }
  
#line 1513 
  if (stid >= 0) {
    
#line 1514 
    (t->stid_tab + stid)->data = data;
    
#line 1515 
    stid = (int)(t->stid_base + (unsigned int)stid);
    
#line 1520 
    if (family == 2) 
#line 1521 
                     t->stids_in_use += 1U; else 
#line 1523 
                                                 t->stids_in_use += 4U;
  }
  else ;
  
#line 1525 
  ldv_spin_unlock_bh_107(& t->stid_lock);
  
#line 1526 
  return stid;
}


#line 1528  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_alloc_stid[17U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'s', (char)'t', (char)'i', (char)'d', (char)'\000'};

#line 1528 
struct kernel_symbol const __ksymtab_cxgb4_alloc_stid;


#line 1528  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_alloc_stid = {.value = (unsigned long)(& cxgb4_alloc_stid), .name = (char const *)(& __kstrtab_cxgb4_alloc_stid)};

#line 1532  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_alloc_sftid(struct tid_info *t, int family, void *data)
{
  int stid;
  
#line 1536 
  ldv_spin_lock_bh_108(& t->stid_lock);
  
#line 1537 
  if (family == 2) {
    unsigned long tmp;
    
#line 1538 
    tmp = find_next_zero_bit((unsigned long const *)t->stid_bmap,(unsigned long)(t->nstids + t->nsftids),(unsigned long)t->nstids);
    
#line 1538 
    stid = (int)tmp;
    
#line 1540 
    if (t->nstids + t->nsftids > (unsigned int)stid) 
#line 1541 
                                                     __set_bit((long)stid,(unsigned long volatile *)t->stid_bmap); else 
                                                                    
#line 1543 
                                                                    stid = -1;
  }
  else 
#line 1545 
       stid = -1;
  
#line 1547 
  if (stid >= 0) {
    
#line 1548 
    (t->stid_tab + stid)->data = data;
    
#line 1549 
    stid = (int)((unsigned int)stid - t->nstids);
    
#line 1550 
    stid = (int)(t->sftid_base + (unsigned int)stid);
    
#line 1551 
    t->stids_in_use += 1U;
  }
  else ;
  
#line 1553 
  ldv_spin_unlock_bh_109(& t->stid_lock);
  
#line 1554 
  return stid;
}


#line 1556  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_alloc_sftid[18U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'a', (char)'l', (char)'l', (char)'o', (char)'c', (char)'_', (char)'s', (char)'f', (char)'t', (char)'i', (char)'d', (char)'\000'};

#line 1556 
struct kernel_symbol const __ksymtab_cxgb4_alloc_sftid;


#line 1556  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_alloc_sftid = {.value = (unsigned long)(& cxgb4_alloc_sftid), .name = (char const *)(& __kstrtab_cxgb4_alloc_sftid)};

#line 1560  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
void cxgb4_free_stid(struct tid_info *t, unsigned int stid, int family)
{
  
#line 1563 
  if (t->nsftids != 0U && t->sftid_base <= stid) {
    
#line 1564 
    stid -= t->sftid_base;
    
#line 1565 
    stid = t->nstids + stid;
  }
  else 
#line 1567 
       stid -= t->stid_base;
  
#line 1570 
  ldv_spin_lock_bh_110(& t->stid_lock);
  
#line 1571 
  if (family == 2) 
#line 1572 
                   __set_bit((long)stid,(unsigned long volatile *)t->stid_bmap); else 
                                                                    
#line 1574 
                                                                    bitmap_release_region(t->stid_bmap,stid,2);
  
#line 1575 
  (t->stid_tab + stid)->data = (void *)0;
  
#line 1576 
  if (family == 2) 
#line 1577 
                   t->stids_in_use -= 1U; else 
#line 1579 
                                               t->stids_in_use += 4294967292U;
  
#line 1580 
  ldv_spin_unlock_bh_111(& t->stid_lock);
  
#line 1581 
  return;
}


#line 1582  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_free_stid[16U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'f', (char)'r', (char)'e', (char)'e', (char)'_', (char)'s', (char)'t', (char)'i', (char)'d', (char)'\000'};

#line 1582 
struct kernel_symbol const __ksymtab_cxgb4_free_stid;


#line 1582  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_free_stid = {.value = (unsigned long)(& cxgb4_free_stid), .name = (char const *)(& __kstrtab_cxgb4_free_stid)};

#line 1587  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void mk_tid_release(struct sk_buff *skb, unsigned int chan, unsigned int tid)
{
  struct cpl_tid_release *req;
  
#line 1592 
  set_wr_txq(skb,1,(int)chan);
  
#line 1593 
  req = (struct cpl_tid_release *)__skb_put(skb,24U);
  
#line 1594 
  req->wr.wr_hi = 134217733U;
  
#line 1594 
  if (0 != 0) 
#line 1594 
              req->wr.wr_mid = ((((tid << 16) & 16776960U) | (tid & 65280U)) | ((tid << 8) >> 24)) | 33554432U; else 
                                                                    
#line 1594 
                                                                    req->wr.wr_mid = __fswab32((tid << 8) | 2U);
  
#line 1594 
  req->wr.wr_lo = 0ULL;
  
#line 1595 
  if (0 != 0) 
#line 1595 
              req->ot.opcode_tid = ((((tid << 24) | ((tid << 8) & 16711680U)) | ((tid >> 8) & 65280U)) | (tid >> 24)) | 26U; else 
                                                                    
#line 1595 
                                                                    req->ot.opcode_tid = __fswab32(tid | 436207616U);
  
#line 1596 
  return;
}


#line 1602  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void cxgb4_queue_tid_release(struct tid_info *t, unsigned int chan, unsigned int tid)
{
  struct adapter *tmp;
  
#line 1605 
  void **p = t->tid_tab + tid;
  {
    
#line 1606 
    struct tid_info const *__mptr = (struct tid_info const *)t;
    
#line 1606 
    tmp = (struct adapter *)__mptr + 18446744073709480704U;
  }
  
#line 1606 
  struct adapter *adap = tmp;
  
#line 1608 
  ldv_spin_lock_bh_112(& adap->tid_release_lock);
  
#line 1609 
  *p = (void *)adap->tid_release_head;
  
#line 1611 
  adap->tid_release_head = (void **)((unsigned long)chan | (unsigned long)p);
  
#line 1612 
  if (! adap->tid_release_task_busy) {
    
#line 1613 
    adap->tid_release_task_busy = (_Bool)1;
    
#line 1614 
    ldv_queue_work_113(adap->workq,& adap->tid_release_task);
  }
  else ;
  
#line 1616 
  ldv_spin_unlock_bh_114(& adap->tid_release_lock);
  
#line 1617 
  return;
}


#line 1622  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void process_tid_release_list(struct work_struct *work)
{
  struct sk_buff *skb;
  struct adapter *adap;
  struct adapter *tmp;
  {
    
#line 1627 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 1627 
    tmp = (struct adapter *)__mptr + 18446744073709480296U;
  }
  
#line 1627 
  adap = tmp;
  
#line 1629 
  ldv_spin_lock_bh_115(& adap->tid_release_lock);
  
#line 1630 
  goto ldv_59327;
  ldv_59326: 
#line 1631 
  ;
  {
    
#line 1631 
    void **p = adap->tid_release_head;
    
#line 1632 
    unsigned int chan = (unsigned int)((long)p) & 3U;
    
#line 1633 
    p += - chan;
    
#line 1635 
    adap->tid_release_head = (void **)*p;
    
#line 1636 
    *p = (void *)0;
    
#line 1637 
    ldv_spin_unlock_bh_116(& adap->tid_release_lock);
    
#line 1639 
    goto ldv_59324;
    ldv_59323: 
#line 1640 
    ;
    
#line 1641 
    schedule_timeout_uninterruptible(1L);
    ldv_59324: 
#line 1642 
    ;
    
#line 1639 
    skb = alloc_skb(24U,208U);
    
#line 1639 
    if (skb == (struct sk_buff *)0) 
#line 1641 
                                    goto ldv_59323; else 
#line 1644 
                                                         goto ldv_59325;
    ldv_59325: 
#line 1645 
    ;
    
#line 1643 
    mk_tid_release(skb,chan,(unsigned int)(((long)p - (long)adap->tids.tid_tab) / 8L));
    
#line 1644 
    t4_ofld_send(adap,skb);
    
#line 1645 
    ldv_spin_lock_bh_117(& adap->tid_release_lock);
  }
  ldv_59327: 
#line 1647 
  ;
  
#line 1630 
  if (adap->tid_release_head != (void **)0) 
#line 1632 
                                            goto ldv_59326; else 
#line 1635 
                                                                 goto ldv_59328;
  ldv_59328: 
#line 1636 
  ;
  
#line 1647 
  adap->tid_release_task_busy = (_Bool)0;
  
#line 1648 
  ldv_spin_unlock_bh_118(& adap->tid_release_lock);
  
#line 1649 
  return;
}


#line 1655  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
void cxgb4_remove_tid(struct tid_info *t, unsigned int chan, unsigned int tid)
{
  void *old;
  struct sk_buff *skb;
  struct adapter *tmp;
  {
    
#line 1659 
    struct tid_info const *__mptr = (struct tid_info const *)t;
    
#line 1659 
    tmp = (struct adapter *)__mptr + 18446744073709480704U;
  }
  
#line 1659 
  struct adapter *adap = tmp;
  
#line 1661 
  old = *(t->tid_tab + tid);
  
#line 1662 
  skb = alloc_skb(24U,32U);
  
#line 1663 
  if ((long)(skb != (struct sk_buff *)0) != 0L) {
    
#line 1664 
    *(t->tid_tab + tid) = (void *)0;
    
#line 1665 
    mk_tid_release(skb,chan,tid);
    
#line 1666 
    t4_ofld_send(adap,skb);
  }
  else 
#line 1668 
       cxgb4_queue_tid_release(t,chan,tid);
  
#line 1669 
  if (old != (void *)0) 
#line 1670 
                        atomic_dec(& t->tids_in_use); else ;
  
#line 1671 
  return;
}


#line 1672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_remove_tid[17U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'r', (char)'e', (char)'m', (char)'o', (char)'v', (char)'e', (char)'_', (char)'t', (char)'i', (char)'d', (char)'\000'};

#line 1672 
struct kernel_symbol const __ksymtab_cxgb4_remove_tid;


#line 1672  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_remove_tid = {.value = (unsigned long)(& cxgb4_remove_tid), .name = (char const *)(& __kstrtab_cxgb4_remove_tid)};

#line 1677  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int tid_init(struct tid_info *t)
{
  int __retres;
  size_t size;
  unsigned int stid_bmap_size;
  struct adapter *tmp;
  
#line 1681 
  unsigned int natids = t->natids;
  {
    
#line 1682 
    struct tid_info const *__mptr = (struct tid_info const *)t;
    
#line 1682 
    tmp = (struct adapter *)__mptr + 18446744073709480704U;
  }
  
#line 1682 
  struct adapter *adap = tmp;
  
#line 1684 
  stid_bmap_size = (unsigned int)(((unsigned long)(t->nstids + t->nsftids) + 63UL) / 64UL);
  
#line 1685 
  size = ((((((unsigned long)t->ntids + (unsigned long)natids) + (unsigned long)t->nstids) + (unsigned long)t->nsftids) + (unsigned long)stid_bmap_size) + ((unsigned long)t->nsftids + (unsigned long)t->nftids) * 18UL) * 8UL;
  
#line 1693 
  t->tid_tab = (void **)t4_alloc_mem(size);
  
#line 1694 
  if (t->tid_tab == (void **)0) {
    
#line 1695 
    __retres = -12;
    
#line 1695 
    goto return_label;
  }
  else ;
  
#line 1697 
  t->atid_tab = (union aopen_entry *)(t->tid_tab + t->ntids);
  
#line 1698 
  t->stid_tab = (struct serv_entry *)(t->atid_tab + natids);
  
#line 1699 
  t->stid_bmap = (unsigned long *)(t->stid_tab + (t->nstids + t->nsftids));
  
#line 1700 
  t->ftid_tab = (struct filter_entry *)(t->stid_bmap + stid_bmap_size);
  
#line 1701 
  spinlock_check(& t->stid_lock);
  {
    struct lock_class_key __key;
    
#line 1701 
    __raw_spin_lock_init(& t->stid_lock.__anonCompField_spinlock_18.rlock,"&(&t->stid_lock)->rlock",& __key);
  }
  
#line 1702 
  spinlock_check(& t->atid_lock);
  {
    struct lock_class_key __key_0;
    
#line 1702 
    __raw_spin_lock_init(& t->atid_lock.__anonCompField_spinlock_18.rlock,"&(&t->atid_lock)->rlock",& __key_0);
  }
  
#line 1704 
  t->stids_in_use = 0U;
  
#line 1705 
  t->afree = (union aopen_entry *)0;
  
#line 1706 
  t->atids_in_use = 0U;
  
#line 1707 
  atomic_set(& t->tids_in_use,0);
  
#line 1710 
  if (natids != 0U) {
    
#line 1711 
    goto ldv_59360;
    ldv_59359: 
#line 1712 
    ;
    
#line 1712 
    (t->atid_tab + (natids + 4294967295U))->next = t->atid_tab + natids;
    ldv_59360: 
#line 1713 
    ;
    
#line 1711 
    natids -= 1U;
    
#line 1711 
    if (natids != 0U) 
#line 1713 
                      goto ldv_59359; else 
#line 1716 
                                           goto ldv_59361;
    ldv_59361: 
#line 1717 
    ;
    
#line 1713 
    t->afree = t->atid_tab;
  }
  else ;
  
#line 1715 
  bitmap_zero(t->stid_bmap,t->nstids + t->nsftids);
  
#line 1717 
  if (t->stid_base == 0U && (((unsigned int)adap->params.chip >> 4) & 15U) <= 5U) 
    
#line 1719 
    __set_bit(0L,(unsigned long volatile *)t->stid_bmap); else ;
  
#line 1721 
  __retres = 0;
  return_label: 
#line 1721 
                return __retres;
}


#line 1735  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_create_server(struct net_device const *dev, unsigned int stid, __be32 sip, __be16 sport, __be16 vlan, unsigned int queue)
{
  int __retres;
  unsigned int chan;
  struct sk_buff *skb;
  struct adapter *adap;
  struct cpl_pass_open_req *req;
  int ret;
  int tmp_3;
  
#line 1745 
  skb = alloc_skb(48U,208U);
  
#line 1746 
  if (skb == (struct sk_buff *)0) {
    
#line 1747 
    __retres = -12;
    
#line 1747 
    goto return_label;
  }
  else ;
  
#line 1749 
  adap = netdev2adap(dev);
  
#line 1750 
  req = (struct cpl_pass_open_req *)__skb_put(skb,48U);
  
#line 1751 
  req->wr.wr_hi = 536870917U;
  
#line 1751 
  req->wr.wr_mid = 50331648U;
  
#line 1751 
  req->wr.wr_lo = 0ULL;
  
#line 1752 
  if (0 != 0) 
#line 1752 
              req->ot.opcode_tid = ((((stid << 24) | ((stid << 8) & 16711680U)) | ((stid >> 8) & 65280U)) | (stid >> 24)) | 1U; else 
                                                                    
#line 1752 
                                                                    req->ot.opcode_tid = __fswab32(stid | 16777216U);
  
#line 1753 
  req->local_port = sport;
  
#line 1754 
  req->peer_port = (unsigned short)0U;
  
#line 1755 
  req->local_ip = sip;
  
#line 1756 
  req->peer_ip = 0U;
  
#line 1757 
  chan = rxq_to_chan((struct sge const *)(& adap->sge),queue);
  
#line 1758 
  if (0 != 0) 
#line 1758 
              req->opt0 = ((((unsigned long long)(chan << 2) << 56) | (((unsigned long long)(chan << 2) << 40) & 71776119061217280ULL)) | (((unsigned long long)(chan << 2) << 24) & 280375465082880ULL)) | (((unsigned long long)(chan << 2) << 8) & 1095216660480ULL); else 
                                                                    
#line 1758 
                                                                    req->opt0 = __fswab64((unsigned long long)(chan << 2));
  
#line 1759 
  if (0 != 0) 
#line 1759 
              req->opt1 = ((((unsigned long long)((queue << 2) | 4194305U) << 56) | (((unsigned long long)((queue << 2) | 4194305U) << 40) & 71776119061217280ULL)) | (((unsigned long long)((queue << 2) | 4194305U) << 24) & 280375465082880ULL)) | (((unsigned long long)((queue << 2) | 4194305U) << 8) & 1095216660480ULL); else 
                                                                    
#line 1759 
                                                                    req->opt1 = __fswab64((unsigned long long)((queue << 2) | 4194305U));
  
#line 1761 
  ret = t4_mgmt_tx(adap,skb);
  
#line 1762 
  if (ret != 2) 
#line 1762 
                tmp_3 = ret; else 
#line 1762 
                                  tmp_3 = 0;
  
#line 1762 
  __retres = tmp_3;
  return_label: 
#line 1762 
                return __retres;
}


#line 1764  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_create_server[20U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'c', (char)'r', (char)'e', (char)'a', (char)'t', (char)'e', (char)'_', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'r', (char)'\000'};

#line 1764 
struct kernel_symbol const __ksymtab_cxgb4_create_server;


#line 1764  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_create_server = {.value = (unsigned long)(& cxgb4_create_server), .name = (char const *)(& __kstrtab_cxgb4_create_server)};

#line 1776  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_create_server6(struct net_device const *dev, unsigned int stid, struct in6_addr const *sip, __be16 sport, unsigned int queue)
{
  int __retres;
  unsigned int chan;
  struct sk_buff *skb;
  struct adapter *adap;
  struct cpl_pass_open_req6 *req;
  int ret;
  int tmp_3;
  
#line 1786 
  skb = alloc_skb(72U,208U);
  
#line 1787 
  if (skb == (struct sk_buff *)0) {
    
#line 1788 
    __retres = -12;
    
#line 1788 
    goto return_label;
  }
  else ;
  
#line 1790 
  adap = netdev2adap(dev);
  
#line 1791 
  req = (struct cpl_pass_open_req6 *)__skb_put(skb,72U);
  
#line 1792 
  req->wr.wr_hi = 939524101U;
  
#line 1792 
  req->wr.wr_mid = 83886080U;
  
#line 1792 
  req->wr.wr_lo = 0ULL;
  
#line 1793 
  if (0 != 0) 
#line 1793 
              req->ot.opcode_tid = ((((stid << 24) | ((stid << 8) & 16711680U)) | ((stid >> 8) & 65280U)) | (stid >> 24)) | 129U; else 
                                                                    
#line 1793 
                                                                    req->ot.opcode_tid = __fswab32(stid | 2164260864U);
  
#line 1794 
  req->local_port = sport;
  
#line 1795 
  req->peer_port = (unsigned short)0U;
  
#line 1796 
  req->local_ip_hi = *((__be64 *)(& sip->in6_u.u6_addr8));
  
#line 1797 
  req->local_ip_lo = *((__be64 *)(& sip->in6_u.u6_addr8) + 8U);
  
#line 1798 
  req->peer_ip_hi = 0ULL;
  
#line 1799 
  req->peer_ip_lo = 0ULL;
  
#line 1800 
  chan = rxq_to_chan((struct sge const *)(& adap->sge),queue);
  
#line 1801 
  if (0 != 0) 
#line 1801 
              req->opt0 = ((((unsigned long long)(chan << 2) << 56) | (((unsigned long long)(chan << 2) << 40) & 71776119061217280ULL)) | (((unsigned long long)(chan << 2) << 24) & 280375465082880ULL)) | (((unsigned long long)(chan << 2) << 8) & 1095216660480ULL); else 
                                                                    
#line 1801 
                                                                    req->opt0 = __fswab64((unsigned long long)(chan << 2));
  
#line 1802 
  if (0 != 0) 
#line 1802 
              req->opt1 = ((((unsigned long long)((queue << 2) | 4194305U) << 56) | (((unsigned long long)((queue << 2) | 4194305U) << 40) & 71776119061217280ULL)) | (((unsigned long long)((queue << 2) | 4194305U) << 24) & 280375465082880ULL)) | (((unsigned long long)((queue << 2) | 4194305U) << 8) & 1095216660480ULL); else 
                                                                    
#line 1802 
                                                                    req->opt1 = __fswab64((unsigned long long)((queue << 2) | 4194305U));
  
#line 1804 
  ret = t4_mgmt_tx(adap,skb);
  
#line 1805 
  if (ret != 2) 
#line 1805 
                tmp_3 = ret; else 
#line 1805 
                                  tmp_3 = 0;
  
#line 1805 
  __retres = tmp_3;
  return_label: 
#line 1805 
                return __retres;
}


#line 1807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_create_server6[21U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'c', (char)'r', (char)'e', (char)'a', (char)'t', (char)'e', (char)'_', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'r', (char)'6', (char)'\000'};

#line 1807 
struct kernel_symbol const __ksymtab_cxgb4_create_server6;


#line 1807  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_create_server6 = {.value = (unsigned long)(& cxgb4_create_server6), .name = (char const *)(& __kstrtab_cxgb4_create_server6)};

#line 1809  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_remove_server(struct net_device const *dev, unsigned int stid, unsigned int queue, bool ipv6)
{
  int __retres;
  struct sk_buff *skb;
  struct adapter *adap;
  struct cpl_close_listsvr_req *req;
  int ret;
  int tmp_6;
  
#line 1817 
  adap = netdev2adap(dev);
  
#line 1819 
  skb = alloc_skb(24U,208U);
  
#line 1820 
  if (skb == (struct sk_buff *)0) {
    
#line 1821 
    __retres = -12;
    
#line 1821 
    goto return_label;
  }
  else ;
  
#line 1823 
  req = (struct cpl_close_listsvr_req *)__skb_put(skb,24U);
  
#line 1824 
  req->wr.wr_hi = 134217733U;
  
#line 1824 
  req->wr.wr_mid = 33554432U;
  
#line 1824 
  req->wr.wr_lo = 0ULL;
  
#line 1825 
  if (0 != 0) 
#line 1825 
              req->ot.opcode_tid = ((((stid << 24) | ((stid << 8) & 16711680U)) | ((stid >> 8) & 65280U)) | (stid >> 24)) | 9U; else 
                                                                    
#line 1825 
                                                                    req->ot.opcode_tid = __fswab32(stid | 150994944U);
  
#line 1826 
  if (0 != 0) {
    int tmp_2;
    int tmp_3;
    
#line 1826 
    if ((int)ipv6 != 0) 
#line 1826 
                        tmp_2 = 16384; else 
#line 1826 
                                            tmp_2 = 0;
    
#line 1826 
    if ((int)ipv6 != 0) 
#line 1826 
                        tmp_3 = 16384; else 
#line 1826 
                                            tmp_3 = 0;
    
#line 1826 
    req->reply_ctrl = (unsigned short)((((int)((unsigned short)tmp_2) | (int)((unsigned short)queue)) << 8) | (((int)((unsigned short)tmp_3) | (int)((unsigned short)queue)) >> 8));
  }
  else {
    __u16 tmp_5;
    unsigned int tmp_4;
    
#line 1826 
    if ((int)ipv6 != 0) 
#line 1826 
                        tmp_4 = 16384U; else 
#line 1826 
                                             tmp_4 = 0U;
    
#line 1826 
    ;
    
#line 1826 
    tmp_5 = __fswab16((unsigned short)((int)(tmp_4 | (unsigned int)((unsigned short)queue))));
    
#line 1826 
    req->reply_ctrl = tmp_5;
  }
  
#line 1828 
  ret = t4_mgmt_tx(adap,skb);
  
#line 1829 
  if (ret != 2) 
#line 1829 
                tmp_6 = ret; else 
#line 1829 
                                  tmp_6 = 0;
  
#line 1829 
  __retres = tmp_6;
  return_label: 
#line 1829 
                return __retres;
}


#line 1831  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_remove_server[20U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'r', (char)'e', (char)'m', (char)'o', (char)'v', (char)'e', (char)'_', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'r', (char)'\000'};

#line 1831 
struct kernel_symbol const __ksymtab_cxgb4_remove_server;


#line 1831  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_remove_server = {.value = (unsigned long)(& cxgb4_remove_server), .name = (char const *)(& __kstrtab_cxgb4_remove_server)};

#line 1843  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
unsigned int cxgb4_best_mtu(unsigned short const *mtus, unsigned short mtu, unsigned int *idx)
{
  unsigned int __retres;
  
#line 1846 
  unsigned int i = 0U;
  
#line 1848 
  goto ldv_59437;
  ldv_59436: 
#line 1849 
  ;
  
#line 1849 
  i += 1U;
  ldv_59437: 
#line 1850 
  ;
  
#line 1848 
  if (i <= 14U && (int)*(mtus + (i + 1U)) <= (int)mtu) 
#line 1850 
                                                       goto ldv_59436; else 
                                                                    
#line 1853 
                                                                    goto ldv_59438;
  ldv_59438: 
#line 1854 
  ;
  
#line 1850 
  if (idx != (unsigned int *)0U) 
#line 1851 
                                 *idx = i; else ;
  
#line 1852 
  __retres = (unsigned int)*(mtus + i);
  
#line 1852 
  return __retres;
}


#line 1854  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_best_mtu[15U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'b', (char)'e', (char)'s', (char)'t', (char)'_', (char)'m', (char)'t', (char)'u', (char)'\000'};

#line 1854 
struct kernel_symbol const __ksymtab_cxgb4_best_mtu;


#line 1854  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_best_mtu = {.value = (unsigned long)(& cxgb4_best_mtu), .name = (char const *)(& __kstrtab_cxgb4_best_mtu)};

#line 1872  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
unsigned int cxgb4_best_aligned_mtu(unsigned short const *mtus, unsigned short header_size, unsigned short data_size_max, unsigned short data_size_align, unsigned int *mtu_idxp)
{
  unsigned int __retres;
  int mtu_idx;
  int aligned_mtu_idx;
  
#line 1878 
  unsigned short max_mtu = (unsigned short)((int)header_size + (int)data_size_max);
  
#line 1879 
  unsigned short data_size_align_mask = (unsigned short)((unsigned int)data_size_align + 65535U);
  
#line 1887 
  mtu_idx = 0;
  
#line 1887 
  aligned_mtu_idx = -1;
  
#line 1887 
  goto ldv_59462;
  ldv_59461: 
#line 1888 
  ;
  {
    
#line 1888 
    unsigned short data_size = (unsigned short)((int)*(mtus + mtu_idx) - (int)header_size);
    
#line 1893 
    if ((unsigned int)((int)data_size & (int)data_size_align_mask) == 0U) 
      
#line 1894 
      aligned_mtu_idx = mtu_idx; else ;
    
#line 1900 
    if (mtu_idx + 1 <= 15 && (int)*(mtus + ((unsigned int)mtu_idx + 1U)) > (int)max_mtu) 
      
#line 1901 
      goto ldv_59460; else ;
  }
  
#line 1887 
  mtu_idx += 1;
  ldv_59462: 
#line 1888 
  ;
  
#line 1887 
  if (mtu_idx <= 15) 
#line 1889 
                     goto ldv_59461; else 
#line 1892 
                                          goto ldv_59460;
  ldv_59460: 
#line 1893 
  ;
  
#line 1907 
  if (mtu_idx == 16) 
#line 1908 
                     mtu_idx -= 1; else ;
  
#line 1914 
  if (aligned_mtu_idx >= 0 && mtu_idx - aligned_mtu_idx <= 1) 
#line 1916 
                                                              mtu_idx = aligned_mtu_idx; else ;
  
#line 1921 
  if (mtu_idxp != (unsigned int *)0U) 
#line 1922 
                                      *mtu_idxp = (unsigned int)mtu_idx; else ;
  
#line 1923 
  __retres = (unsigned int)*(mtus + mtu_idx);
  
#line 1923 
  return __retres;
}


#line 1925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_best_aligned_mtu[23U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'b', (char)'e', (char)'s', (char)'t', (char)'_', (char)'a', (char)'l', (char)'i', (char)'g', (char)'n', (char)'e', (char)'d', (char)'_', (char)'m', (char)'t', (char)'u', (char)'\000'};

#line 1925 
struct kernel_symbol const __ksymtab_cxgb4_best_aligned_mtu;


#line 1925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_best_aligned_mtu = {.value = (unsigned long)(& cxgb4_best_aligned_mtu), .name = (char const *)(& __kstrtab_cxgb4_best_aligned_mtu)};

#line 1933  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
unsigned int cxgb4_port_chan(struct net_device const *dev)
{
  unsigned int __retres;
  struct port_info *tmp;
  
#line 1935 
  tmp = netdev2pinfo(dev);
  
#line 1935 
  __retres = (unsigned int)tmp->tx_chan;
  
#line 1935 
  return __retres;
}


#line 1937  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_port_chan[16U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'c', (char)'h', (char)'a', (char)'n', (char)'\000'};

#line 1937 
struct kernel_symbol const __ksymtab_cxgb4_port_chan;


#line 1937  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_port_chan = {.value = (unsigned long)(& cxgb4_port_chan), .name = (char const *)(& __kstrtab_cxgb4_port_chan)};

#line 1939  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
unsigned int cxgb4_dbfifo_count(struct net_device const *dev, int lpfifo)
{
  u32 v1;
  u32 v2;
  u32 lp_count;
  u32 hp_count;
  int tmp_0;
  u32 tmp_1;
  
#line 1941 
  struct adapter *adap = netdev2adap(dev);
  
#line 1944 
  v1 = t4_read_reg(adap,4260U);
  
#line 1945 
  v2 = t4_read_reg(adap,4376U);
  
#line 1946 
  tmp_0 = is_t4(adap->params.chip);
  
#line 1946 
  if (tmp_0 != 0) {
    
#line 1947 
    lp_count = v1 & 2047U;
    
#line 1948 
    hp_count = (v1 >> 16) & 2047U;
  }
  else {
    
#line 1950 
    lp_count = v1 & 262143U;
    
#line 1951 
    hp_count = v2 & 1023U;
  }
  
#line 1953 
  if (lpfifo != 0) 
#line 1953 
                   tmp_1 = lp_count; else 
#line 1953 
                                          tmp_1 = hp_count;
  
#line 1953 
  return tmp_1;
}


#line 1955  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_dbfifo_count[19U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'d', (char)'b', (char)'f', (char)'i', (char)'f', (char)'o', (char)'_', (char)'c', (char)'o', (char)'u', (char)'n', (char)'t', (char)'\000'};

#line 1955 
struct kernel_symbol const __ksymtab_cxgb4_dbfifo_count;


#line 1955  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_dbfifo_count = {.value = (unsigned long)(& cxgb4_dbfifo_count), .name = (char const *)(& __kstrtab_cxgb4_dbfifo_count)};

#line 1963  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
unsigned int cxgb4_port_viid(struct net_device const *dev)
{
  unsigned int __retres;
  struct port_info *tmp;
  
#line 1965 
  tmp = netdev2pinfo(dev);
  
#line 1965 
  __retres = (unsigned int)tmp->viid;
  
#line 1965 
  return __retres;
}


#line 1967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_port_viid[16U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'v', (char)'i', (char)'i', (char)'d', (char)'\000'};

#line 1967 
struct kernel_symbol const __ksymtab_cxgb4_port_viid;


#line 1967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_port_viid = {.value = (unsigned long)(& cxgb4_port_viid), .name = (char const *)(& __kstrtab_cxgb4_port_viid)};

#line 1975  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
unsigned int cxgb4_port_idx(struct net_device const *dev)
{
  unsigned int __retres;
  struct port_info *tmp;
  
#line 1977 
  tmp = netdev2pinfo(dev);
  
#line 1977 
  __retres = (unsigned int)tmp->port_id;
  
#line 1977 
  return __retres;
}


#line 1979  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_port_idx[15U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'p', (char)'o', (char)'r', (char)'t', (char)'_', (char)'i', (char)'d', (char)'x', (char)'\000'};

#line 1979 
struct kernel_symbol const __ksymtab_cxgb4_port_idx;


#line 1979  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_port_idx = {.value = (unsigned long)(& cxgb4_port_idx), .name = (char const *)(& __kstrtab_cxgb4_port_idx)};

#line 1981  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
void cxgb4_get_tcp_stats(struct pci_dev *pdev, struct tp_tcp_stats *v4, struct tp_tcp_stats *v6)
{
  
#line 1984 
  struct adapter *adap = pci_get_drvdata(pdev);
  
#line 1986 
  ldv_spin_lock_119(& adap->stats_lock);
  
#line 1987 
  t4_tp_get_tcp_stats(adap,v4,v6);
  
#line 1988 
  ldv_spin_unlock_120(& adap->stats_lock);
  
#line 1989 
  return;
}


#line 1990  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_get_tcp_stats[20U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'g', (char)'e', (char)'t', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'s', (char)'t', (char)'a', (char)'t', (char)'s', (char)'\000'};

#line 1990 
struct kernel_symbol const __ksymtab_cxgb4_get_tcp_stats;


#line 1990  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_get_tcp_stats = {.value = (unsigned long)(& cxgb4_get_tcp_stats), .name = (char const *)(& __kstrtab_cxgb4_get_tcp_stats)};

#line 1992  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
void cxgb4_iscsi_init(struct net_device *dev, unsigned int tag_mask, unsigned int const *pgsz_order)
{
  
#line 1995 
  struct adapter *adap = netdev2adap((struct net_device const *)dev);
  
#line 1997 
  t4_write_reg(adap,102756U,tag_mask);
  
#line 1998 
  t4_write_reg(adap,102760U,((*pgsz_order | (*(pgsz_order + 1U) << 8)) | (*(pgsz_order + 2U) << 16)) | (*(pgsz_order + 3U) << 24));
  
#line 2001 
  return;
}


#line 2002  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_iscsi_init[17U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'i', (char)'s', (char)'c', (char)'s', (char)'i', (char)'_', (char)'i', (char)'n', (char)'i', (char)'t', (char)'\000'};

#line 2002 
struct kernel_symbol const __ksymtab_cxgb4_iscsi_init;


#line 2002  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_iscsi_init = {.value = (unsigned long)(& cxgb4_iscsi_init), .name = (char const *)(& __kstrtab_cxgb4_iscsi_init)};

#line 2004  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_flush_eq_cache(struct net_device *dev)
{
  int tmp_0;
  
#line 2006 
  struct adapter *adap = netdev2adap((struct net_device const *)dev);
  
#line 2008 
  tmp_0 = t4_sge_ctxt_flush(adap,adap->mbox);
  
#line 2008 
  return tmp_0;
}


#line 2010  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_flush_eq_cache[21U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'f', (char)'l', (char)'u', (char)'s', (char)'h', (char)'_', (char)'e', (char)'q', (char)'_', (char)'c', (char)'a', (char)'c', (char)'h', (char)'e', (char)'\000'};

#line 2010 
struct kernel_symbol const __ksymtab_cxgb4_flush_eq_cache;


#line 2010  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_flush_eq_cache = {.value = (unsigned long)(& cxgb4_flush_eq_cache), .name = (char const *)(& __kstrtab_cxgb4_flush_eq_cache)};

#line 2012  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int read_eq_indices(struct adapter *adap, u16 qid, u16 *pidx, u16 *cidx)
{
  u32 tmp;
  __be64 indices;
  int ret;
  
#line 2014 
  tmp = t4_read_reg(adap,4228U);
  
#line 2014 
  u32 addr = (tmp + (unsigned int)((int)qid * 24)) + 8U;
  
#line 2018 
  ldv_spin_lock_121(& adap->win0_lock);
  
#line 2019 
  ret = t4_memory_rw(adap,0,0,addr,8U,(void *)(& indices),1);
  
#line 2022 
  ldv_spin_unlock_122(& adap->win0_lock);
  
#line 2023 
  if (ret == 0) {
    
#line 2024 
    if (0 != 0) 
#line 2024 
                *cidx = (unsigned short)(((((((((indices << 56) | ((indices << 40) & 71776119061217280ULL)) | ((indices << 24) & 280375465082880ULL)) | ((indices << 8) & 1095216660480ULL)) | ((indices >> 8) & 4278190080ULL)) | ((indices >> 24) & 16711680ULL)) | ((indices >> 40) & 65280ULL)) | (indices >> 56)) >> 25);
    else {
      __u64 tmp_0;
      
#line 2024 
      tmp_0 = __fswab64(indices);
      
#line 2024 
      *cidx = (unsigned short)(tmp_0 >> 25);
    }
    
#line 2025 
    if (0 != 0) 
#line 2025 
                *pidx = (unsigned short)(((((((((indices << 56) | ((indices << 40) & 71776119061217280ULL)) | ((indices << 24) & 280375465082880ULL)) | ((indices << 8) & 1095216660480ULL)) | ((indices >> 8) & 4278190080ULL)) | ((indices >> 24) & 16711680ULL)) | ((indices >> 40) & 65280ULL)) | (indices >> 56)) >> 9);
    else {
      __u64 tmp_1;
      
#line 2025 
      tmp_1 = __fswab64(indices);
      
#line 2025 
      *pidx = (unsigned short)(tmp_1 >> 9);
    }
  }
  else ;
  
#line 2027 
  return ret;
}


#line 2030  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_sync_txq_pidx(struct net_device *dev, u16 qid, u16 pidx, u16 size)
{
  u16 hw_pidx;
  u16 hw_cidx;
  int ret;
  
#line 2033 
  struct adapter *adap = netdev2adap((struct net_device const *)dev);
  
#line 2037 
  ret = read_eq_indices(adap,(unsigned short)((int)qid),& hw_pidx,& hw_cidx);
  
#line 2038 
  if (ret != 0) 
#line 2039 
                goto out; else ;
  
#line 2041 
  if ((int)pidx != (int)hw_pidx) {
    u16 delta;
    u32 val;
    int tmp_0;
    
#line 2045 
    if ((int)pidx >= (int)hw_pidx) 
#line 2046 
                                   delta = (unsigned short)((int)pidx - (int)hw_pidx); else 
                                                                    
#line 2048 
                                                                    delta = (unsigned short)(((int)size - (int)hw_pidx) + (int)pidx);
    
#line 2050 
    tmp_0 = is_t4(adap->params.chip);
    
#line 2050 
    if (tmp_0 != 0) 
#line 2051 
                    val = (unsigned int)delta; else 
#line 2053 
                                                    val = (unsigned int)delta;
    
#line 2054 
    ldv_inline_asm();
    
#line 2055 
    t4_write_reg(adap,110592U,(unsigned int)((int)qid << 15) | val);
  }
  else ;
  out: 
#line 2058 
  ;
  
#line 2059 
  return ret;
}


#line 2061  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_sync_txq_pidx[20U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'s', (char)'y', (char)'n', (char)'c', (char)'_', (char)'t', (char)'x', (char)'q', (char)'_', (char)'p', (char)'i', (char)'d', (char)'x', (char)'\000'};

#line 2061 
struct kernel_symbol const __ksymtab_cxgb4_sync_txq_pidx;


#line 2061  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_sync_txq_pidx = {.value = (unsigned long)(& cxgb4_sync_txq_pidx), .name = (char const *)(& __kstrtab_cxgb4_sync_txq_pidx)};

#line 2063  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_read_tpte(struct net_device *dev, u32 stag, __be32 *tpte)
{
  int __retres;
  struct adapter *adap;
  u32 offset;
  u32 memtype;
  u32 memaddr;
  u32 edc0_size;
  u32 edc1_size;
  u32 mc0_size;
  u32 mc1_size;
  u32 size;
  u32 edc0_end;
  u32 edc1_end;
  u32 mc0_end;
  u32 mc1_end;
  int ret;
  
#line 2071 
  adap = netdev2adap((struct net_device const *)dev);
  
#line 2073 
  offset = (stag >> 8) * 32U + adap->vres.stag.start;
  
#line 2081 
  size = t4_read_reg(adap,30656U);
  
#line 2082 
  edc0_size = size << 20;
  
#line 2083 
  size = t4_read_reg(adap,30660U);
  
#line 2084 
  edc1_size = size << 20;
  
#line 2085 
  size = t4_read_reg(adap,30664U);
  
#line 2086 
  mc0_size = size << 20;
  
#line 2088 
  edc0_end = edc0_size;
  
#line 2089 
  edc1_end = edc0_end + edc1_size;
  
#line 2090 
  mc0_end = edc1_end + mc0_size;
  
#line 2092 
  if (offset < edc0_end) {
    
#line 2093 
    memtype = 0U;
    
#line 2094 
    memaddr = offset;
  }
  else 
    
#line 2095 
    if (offset < edc1_end) {
      
#line 2096 
      memtype = 1U;
      
#line 2097 
      memaddr = offset - edc0_end;
    }
    else 
      
#line 2099 
      if (offset < mc0_end) {
        
#line 2100 
        memtype = 2U;
        
#line 2101 
        memaddr = offset - edc1_end;
      }
      else {
        int tmp;
        
#line 2102 
        tmp = is_t5(adap->params.chip);
        
#line 2102 
        if (tmp != 0) {
          
#line 2103 
          size = t4_read_reg(adap,30728U);
          
#line 2104 
          mc1_size = size << 20;
          
#line 2105 
          mc1_end = mc0_end + mc1_size;
          
#line 2106 
          if (offset < mc1_end) {
            
#line 2107 
            memtype = 3U;
            
#line 2108 
            memaddr = offset - mc0_end;
          }
          else 
#line 2111 
               goto err;
        }
        else 
#line 2115 
             goto err;
      }
  
#line 2119 
  ldv_spin_lock_123(& adap->win0_lock);
  
#line 2120 
  ret = t4_memory_rw(adap,0,(int)memtype,memaddr,32U,(void *)tpte,1);
  
#line 2121 
  ldv_spin_unlock_124(& adap->win0_lock);
  
#line 2122 
  __retres = ret;
  
#line 2122 
  goto return_label;
  err: 
#line 2124 
  ;
  
#line 2125 
  dev_err((struct device const *)adap->pdev_dev,"stag %#x, offset %#x out of range\n",stag,offset);
  
#line 2127 
  __retres = -22;
  return_label: 
#line 2127 
                return __retres;
}


#line 2129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_read_tpte[16U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d', (char)'_', (char)'t', (char)'p', (char)'t', (char)'e', (char)'\000'};

#line 2129 
struct kernel_symbol const __ksymtab_cxgb4_read_tpte;


#line 2129  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_read_tpte = {.value = (unsigned long)(& cxgb4_read_tpte), .name = (char const *)(& __kstrtab_cxgb4_read_tpte)};

#line 2131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
u64 cxgb4_read_sge_timestamp(struct net_device *dev)
{
  u64 __retres;
  u32 hi;
  u32 lo;
  struct adapter *adap;
  u32 tmp;
  
#line 2136 
  adap = netdev2adap((struct net_device const *)dev);
  
#line 2137 
  lo = t4_read_reg(adap,4248U);
  
#line 2138 
  tmp = t4_read_reg(adap,4252U);
  
#line 2138 
  hi = tmp & 268435455U;
  
#line 2140 
  __retres = ((unsigned long long)hi << 32) | (unsigned long long)lo;
  
#line 2140 
  return __retres;
}


#line 2142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_read_sge_timestamp[25U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'r', (char)'e', (char)'a', (char)'d', (char)'_', (char)'s', (char)'g', (char)'e', (char)'_', (char)'t', (char)'i', (char)'m', (char)'e', (char)'s', (char)'t', (char)'a', (char)'m', (char)'p', (char)'\000'};

#line 2142 
struct kernel_symbol const __ksymtab_cxgb4_read_sge_timestamp;


#line 2142  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_read_sge_timestamp = {.value = (unsigned long)(& cxgb4_read_sge_timestamp), .name = (char const *)(& __kstrtab_cxgb4_read_sge_timestamp)};

#line 2144  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_bar2_sge_qregs(struct net_device *dev, unsigned int qid, enum cxgb4_bar2_qtype qtype, int user, u64 *pbar2_qoffset, unsigned int *pbar2_qid)
{
  int tmp_0;
  struct adapter *tmp;
  
#line 2151 
  ;
  
#line 2151 
  ;
  
#line 2151 
  ;
  
#line 2151 
  ;
  
#line 2151 
  ;
  
#line 2151 
  tmp = netdev2adap((struct net_device const *)dev);
  
#line 2151 
  tmp_0 = t4_bar2_sge_qregs(tmp,qid,(enum t4_bar2_qtype)(qtype != (unsigned int)CXGB4_BAR2_QTYPE_EGRESS),user,pbar2_qoffset,pbar2_qid);
  
#line 2151 
  return tmp_0;
}


#line 2160  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_bar2_sge_qregs[21U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'b', (char)'a', (char)'r', (char)'2', (char)'_', (char)'s', (char)'g', (char)'e', (char)'_', (char)'q', (char)'r', (char)'e', (char)'g', (char)'s', (char)'\000'};

#line 2160 
struct kernel_symbol const __ksymtab_cxgb4_bar2_sge_qregs;


#line 2160  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_bar2_sge_qregs = {.value = (unsigned long)(& cxgb4_bar2_sge_qregs), .name = (char const *)(& __kstrtab_cxgb4_bar2_sge_qregs)};

#line 2162 
static struct pci_driver cxgb4_driver;


#line 2164  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void check_neigh_update(struct neighbour *neigh)
{
  struct device const *parent;
  
#line 2167 
  struct net_device const *netdev = (struct net_device const *)neigh->dev;
  
#line 2169 
  if ((netdev->priv_flags & 1U) != 0U) 
#line 2170 
                                       netdev = (struct net_device const *)vlan_dev_real_dev(netdev); else ;
  
#line 2171 
  parent = (struct device const *)netdev->dev.parent;
  
#line 2172 
  if (parent != (struct device const *)0 && parent->driver == & cxgb4_driver.driver) {
    void *tmp_0;
    
#line 2173 
    ;
    
#line 2173 
    tmp_0 = dev_get_drvdata(parent);
    
#line 2173 
    t4_l2t_update((struct adapter *)tmp_0,neigh);
  }
  else ;
  
#line 2174 
  return;
}


#line 2176  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int netevent_cb(struct notifier_block *nb, unsigned long event, void *data)
{
  int __retres;
  
#line 2179 
  switch (event) {
    case (unsigned long)1: 
#line 2180 
    ;
    
#line 2181 
    check_neigh_update((struct neighbour *)data);
    
#line 2182 
    goto ldv_59668;
    case (unsigned long)2: 
#line 2183 
    ;
    default: 
#line 2184 
    ;
    
#line 2185 
    goto ldv_59668;
  }
  ldv_59668: 
#line 2187 
  ;
  
#line 2187 
  __retres = 0;
  
#line 2187 
  return __retres;
}


#line 2190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static bool netevent_registered;

#line 2191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static struct notifier_block cxgb4_netevent_nb = {.notifier_call = & netevent_cb, .next = (struct notifier_block *)0, .priority = 0};

#line 2195  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void drain_db_fifo(struct adapter *adap, int usecs)
{
  u32 v1;
  u32 v2;
  u32 lp_count;
  u32 hp_count;
  int tmp;
  struct task_struct *tmp_0;
  unsigned long tmp_1;
  ldv_59692: 
#line 2198 
  ;
  
#line 2200 
  v1 = t4_read_reg(adap,4260U);
  
#line 2201 
  v2 = t4_read_reg(adap,4376U);
  
#line 2202 
  tmp = is_t4(adap->params.chip);
  
#line 2202 
  if (tmp != 0) {
    
#line 2203 
    lp_count = v1 & 2047U;
    
#line 2204 
    hp_count = (v1 >> 16) & 2047U;
  }
  else {
    
#line 2206 
    lp_count = v1 & 262143U;
    
#line 2207 
    hp_count = v2 & 1023U;
  }
  
#line 2210 
  if (lp_count == 0U && hp_count == 0U) 
#line 2211 
                                        goto ldv_59681; else ;
  
#line 2212 
  tmp_0 = get_current();
  __here_0: 
#line 2212 
  ;
  
#line 2212 
  tmp_0->task_state_change = (unsigned long)((void *)0);
  {
    
#line 2212 
    long volatile __ret = 2L;
    
#line 2212 
    switch (8UL) {
      case (unsigned long)1: 
#line 2212 
      ;
      
#line 2213 
      ldv_inline_asm();
      
#line 2212 
      goto ldv_59686;
      case (unsigned long)2: 
#line 2212 
      ;
      
#line 2213 
      ldv_inline_asm();
      
#line 2212 
      goto ldv_59686;
      case (unsigned long)4: 
#line 2212 
      ;
      
#line 2213 
      ldv_inline_asm();
      
#line 2212 
      goto ldv_59686;
      case (unsigned long)8: 
#line 2212 
      ;
      
#line 2213 
      ldv_inline_asm();
      
#line 2212 
      goto ldv_59686;
      default: 
#line 2212 
      ;
      
#line 2212 
      __xchg_wrong_size();
    }
    ldv_59686: 
#line 2212 
    ;
    
#line 2212 
    long tmp_2 = __ret;
  }
  
#line 2213 
  tmp_1 = usecs_to_jiffies((unsigned int)usecs);
  
#line 2213 
  schedule_timeout((long)tmp_1);
  
#line 2200 
  goto ldv_59692;
  ldv_59681: 
#line 2201 
  ;
  
#line 2202 
  return;
}


#line 2217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void disable_txq_db(struct sge_txq *q)
{
  unsigned long flags;
  
#line 2221 
  ldv___ldv_spin_lock_125(& q->db_lock);
  
#line 2222 
  q->db_disabled = 1;
  
#line 2223 
  ldv_spin_unlock_irqrestore_126(& q->db_lock,flags);
  
#line 2224 
  return;
}


#line 2226  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void enable_txq_db(struct adapter *adap, struct sge_txq *q)
{
  
#line 2228 
  ldv_spin_lock_irq_127(& q->db_lock);
  
#line 2229 
  if ((unsigned int)q->db_pidx_inc != 0U) {
    
#line 2231 
    ldv_inline_asm();
    
#line 2234 
    t4_write_reg(adap,110592U,(q->cntxt_id << 15) | (unsigned int)q->db_pidx_inc);
    
#line 2236 
    q->db_pidx_inc = (unsigned short)0U;
  }
  else ;
  
#line 2238 
  q->db_disabled = 0;
  
#line 2239 
  ldv_spin_unlock_irq_128(& q->db_lock);
  
#line 2240 
  return;
}


#line 2242  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void disable_dbs(struct adapter *adap)
{
  int i;
  
#line 2246 
  i = 0;
  
#line 2246 
  goto ldv_59706;
  ldv_59705: 
#line 2247 
  ;
  
#line 2247 
  disable_txq_db(& adap->sge.ethtxq[i].q);
  
#line 2246 
  i += 1;
  ldv_59706: 
#line 2247 
  ;
  
#line 2246 
  if ((int)adap->sge.ethqsets > i) 
#line 2248 
                                   goto ldv_59705; else 
#line 2251 
                                                        goto ldv_59707;
  ldv_59707: 
#line 2252 
  ;
  
#line 2248 
  i = 0;
  
#line 2248 
  goto ldv_59709;
  ldv_59708: 
#line 2249 
  ;
  
#line 2249 
  disable_txq_db(& adap->sge.ofldtxq[i].q);
  
#line 2248 
  i += 1;
  ldv_59709: 
#line 2249 
  ;
  
#line 2248 
  if ((int)adap->sge.ofldqsets > i) 
#line 2250 
                                    goto ldv_59708; else 
#line 2253 
                                                         goto ldv_59710;
  ldv_59710: 
#line 2254 
  ;
  
#line 2250 
  i = 0;
  
#line 2250 
  goto ldv_59712;
  ldv_59711: 
#line 2251 
  ;
  
#line 2251 
  disable_txq_db(& adap->sge.ctrlq[i].q);
  
#line 2250 
  i += 1;
  ldv_59712: 
#line 2251 
  ;
  
#line 2250 
  if ((int)adap->params.nports > i) 
#line 2252 
                                    goto ldv_59711; else 
#line 2255 
                                                         goto ldv_59713;
  ldv_59713: 
#line 2256 
  ;
  
#line 2257 
  return;
}


#line 2254  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void enable_dbs(struct adapter *adap)
{
  int i;
  
#line 2258 
  i = 0;
  
#line 2258 
  goto ldv_59719;
  ldv_59718: 
#line 2259 
  ;
  
#line 2259 
  enable_txq_db(adap,& adap->sge.ethtxq[i].q);
  
#line 2258 
  i += 1;
  ldv_59719: 
#line 2259 
  ;
  
#line 2258 
  if ((int)adap->sge.ethqsets > i) 
#line 2260 
                                   goto ldv_59718; else 
#line 2263 
                                                        goto ldv_59720;
  ldv_59720: 
#line 2264 
  ;
  
#line 2260 
  i = 0;
  
#line 2260 
  goto ldv_59722;
  ldv_59721: 
#line 2261 
  ;
  
#line 2261 
  enable_txq_db(adap,& adap->sge.ofldtxq[i].q);
  
#line 2260 
  i += 1;
  ldv_59722: 
#line 2261 
  ;
  
#line 2260 
  if ((int)adap->sge.ofldqsets > i) 
#line 2262 
                                    goto ldv_59721; else 
#line 2265 
                                                         goto ldv_59723;
  ldv_59723: 
#line 2266 
  ;
  
#line 2262 
  i = 0;
  
#line 2262 
  goto ldv_59725;
  ldv_59724: 
#line 2263 
  ;
  
#line 2263 
  enable_txq_db(adap,& adap->sge.ctrlq[i].q);
  
#line 2262 
  i += 1;
  ldv_59725: 
#line 2263 
  ;
  
#line 2262 
  if ((int)adap->params.nports > i) 
#line 2264 
                                    goto ldv_59724; else 
#line 2267 
                                                         goto ldv_59726;
  ldv_59726: 
#line 2268 
  ;
  
#line 2269 
  return;
}


#line 2266  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void notify_rdma_uld(struct adapter *adap, enum cxgb4_control cmd)
{
  
#line 2268 
  if (adap->uld_handle[0] != (void *)0) 
#line 2269 
                                        (*(ulds[0].control))(adap->uld_handle[0],cmd); else ;
  
#line 2270 
  return;
}


#line 2273  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void process_db_full(struct work_struct *work)
{
  struct adapter *adap;
  struct adapter *tmp;
  {
    
#line 2277 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 2277 
    tmp = (struct adapter *)__mptr + 18446744073709480216U;
  }
  
#line 2277 
  adap = tmp;
  
#line 2279 
  drain_db_fifo(adap,dbfifo_drain_delay);
  
#line 2280 
  enable_dbs(adap);
  
#line 2281 
  notify_rdma_uld(adap,(enum cxgb4_control)CXGB4_CONTROL_DB_EMPTY);
  
#line 2282 
  if ((((unsigned int)adap->params.chip >> 4) & 15U) <= 5U) 
#line 2283 
                                                            t4_set_reg_field(adap,4160U,384U,384U); else 
                                                                    
#line 2287 
                                                                    t4_set_reg_field(adap,4160U,128U,128U);
  
#line 2288 
  return;
}


#line 2291  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void sync_txq_pidx(struct adapter *adap, struct sge_txq *q)
{
  u16 hw_pidx;
  u16 hw_cidx;
  int ret;
  
#line 2296 
  ldv_spin_lock_irq_129(& q->db_lock);
  
#line 2297 
  ret = read_eq_indices(adap,(unsigned short)((int)((unsigned short)q->cntxt_id)),& hw_pidx,& hw_cidx);
  
#line 2298 
  if (ret != 0) 
#line 2299 
                goto out; else ;
  
#line 2300 
  if ((int)q->db_pidx != (int)hw_pidx) {
    u16 delta;
    u32 val;
    int tmp;
    
#line 2304 
    if ((int)q->db_pidx >= (int)hw_pidx) 
#line 2305 
                                         delta = (unsigned short)((int)q->db_pidx - (int)hw_pidx); else 
                                                                    
#line 2307 
                                                                    delta = (unsigned short)(((int)((unsigned short)q->size) - (int)hw_pidx) + (int)q->db_pidx);
    
#line 2309 
    tmp = is_t4(adap->params.chip);
    
#line 2309 
    if (tmp != 0) 
#line 2310 
                  val = (unsigned int)delta; else 
#line 2312 
                                                  val = (unsigned int)delta;
    
#line 2313 
    ldv_inline_asm();
    
#line 2314 
    t4_write_reg(adap,110592U,(q->cntxt_id << 15) | val);
  }
  else ;
  out: 
#line 2317 
  ;
  
#line 2318 
  q->db_disabled = 0;
  
#line 2319 
  q->db_pidx_inc = (unsigned short)0U;
  
#line 2320 
  ldv_spin_unlock_irq_130(& q->db_lock);
  
#line 2321 
  if (ret != 0) 
#line 2322 
                dev_warn((struct device const *)adap->pdev_dev,"DB drop recovery failed.\n"); else ;
  
#line 2323 
  return;
}


#line 2324  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void recover_all_queues(struct adapter *adap)
{
  int i;
  
#line 2328 
  i = 0;
  
#line 2328 
  goto ldv_59752;
  ldv_59751: 
#line 2329 
  ;
  
#line 2329 
  sync_txq_pidx(adap,& adap->sge.ethtxq[i].q);
  
#line 2328 
  i += 1;
  ldv_59752: 
#line 2329 
  ;
  
#line 2328 
  if ((int)adap->sge.ethqsets > i) 
#line 2330 
                                   goto ldv_59751; else 
#line 2333 
                                                        goto ldv_59753;
  ldv_59753: 
#line 2334 
  ;
  
#line 2330 
  i = 0;
  
#line 2330 
  goto ldv_59755;
  ldv_59754: 
#line 2331 
  ;
  
#line 2331 
  sync_txq_pidx(adap,& adap->sge.ofldtxq[i].q);
  
#line 2330 
  i += 1;
  ldv_59755: 
#line 2331 
  ;
  
#line 2330 
  if ((int)adap->sge.ofldqsets > i) 
#line 2332 
                                    goto ldv_59754; else 
#line 2335 
                                                         goto ldv_59756;
  ldv_59756: 
#line 2336 
  ;
  
#line 2332 
  i = 0;
  
#line 2332 
  goto ldv_59758;
  ldv_59757: 
#line 2333 
  ;
  
#line 2333 
  sync_txq_pidx(adap,& adap->sge.ctrlq[i].q);
  
#line 2332 
  i += 1;
  ldv_59758: 
#line 2333 
  ;
  
#line 2332 
  if ((int)adap->params.nports > i) 
#line 2334 
                                    goto ldv_59757; else 
#line 2337 
                                                         goto ldv_59759;
  ldv_59759: 
#line 2338 
  ;
  
#line 2339 
  return;
}


#line 2336  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void process_db_drop(struct work_struct *work)
{
  struct adapter *adap;
  struct adapter *tmp;
  int tmp_2;
  {
    
#line 2340 
    struct work_struct const *__mptr = (struct work_struct const *)work;
    
#line 2340 
    tmp = (struct adapter *)__mptr + 18446744073709480136U;
  }
  
#line 2340 
  adap = tmp;
  
#line 2342 
  tmp_2 = is_t4(adap->params.chip);
  
#line 2342 
  if (tmp_2 != 0) {
    
#line 2343 
    drain_db_fifo(adap,dbfifo_drain_delay);
    
#line 2344 
    notify_rdma_uld(adap,(enum cxgb4_control)CXGB4_CONTROL_DB_DROP);
    
#line 2345 
    drain_db_fifo(adap,dbfifo_drain_delay);
    
#line 2346 
    recover_all_queues(adap);
    
#line 2347 
    drain_db_fifo(adap,dbfifo_drain_delay);
    
#line 2348 
    enable_dbs(adap);
    
#line 2349 
    notify_rdma_uld(adap,(enum cxgb4_control)CXGB4_CONTROL_DB_EMPTY);
  }
  else {
    int tmp_1;
    
#line 2350 
    tmp_1 = is_t5(adap->params.chip);
    
#line 2350 
    if (tmp_1 != 0) {
      u64 bar2_qoffset;
      unsigned int bar2_qid;
      int ret;
      
#line 2351 
      u32 dropped_db = t4_read_reg(adap,4268U);
      
#line 2352 
      u16 qid = (unsigned short)(dropped_db >> 15);
      
#line 2353 
      u16 pidx_inc = (unsigned short)((unsigned int)((unsigned short)dropped_db) & 8191U);
      
#line 2358 
      ret = t4_bar2_sge_qregs(adap,(unsigned int)qid,(enum t4_bar2_qtype)T4_BAR2_QTYPE_EGRESS,0,& bar2_qoffset,& bar2_qid);
      
#line 2360 
      if (ret != 0) 
#line 2361 
                    dev_err((struct device const *)adap->pdev_dev,"doorbell drop recovery: ",(int)qid,(int)pidx_inc); else 
                                                                    
#line 2364 
                                                                    writel((unsigned int)pidx_inc | (bar2_qid << 15),(void volatile *)(adap->bar2 + (bar2_qoffset + (u64)8U)));
      
#line 2368 
      t4_set_reg_field(adap,4272U,32768U,32768U);
    }
    else ;
  }
  
#line 2371 
  if ((((unsigned int)adap->params.chip >> 4) & 15U) <= 5U) 
#line 2372 
                                                            t4_set_reg_field(adap,4264U,1U,0U); else ;
  
#line 2373 
  return;
}


#line 2375  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
void t4_db_full(struct adapter *adap)
{
  int tmp;
  
#line 2377 
  tmp = is_t4(adap->params.chip);
  
#line 2377 
  if (tmp != 0) {
    
#line 2378 
    disable_dbs(adap);
    
#line 2379 
    notify_rdma_uld(adap,(enum cxgb4_control)CXGB4_CONTROL_DB_FULL);
    
#line 2380 
    t4_set_reg_field(adap,4160U,384U,0U);
    
#line 2382 
    ldv_queue_work_131(adap->workq,& adap->db_full_task);
  }
  else ;
  
#line 2384 
  return;
}


#line 2386  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
void t4_db_dropped(struct adapter *adap)
{
  int tmp;
  
#line 2388 
  tmp = is_t4(adap->params.chip);
  
#line 2388 
  if (tmp != 0) {
    
#line 2389 
    disable_dbs(adap);
    
#line 2390 
    notify_rdma_uld(adap,(enum cxgb4_control)CXGB4_CONTROL_DB_FULL);
  }
  else ;
  
#line 2392 
  ldv_queue_work_132(adap->workq,& adap->db_drop_task);
  
#line 2393 
  return;
}


#line 2395  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void uld_attach(struct adapter *adap, unsigned int uld)
{
  void *handle;
  struct cxgb4_lld_info lli;
  unsigned short i;
  u32 tmp;
  bool tmp_1;
  
#line 2401 
  lli.pdev = adap->pdev;
  
#line 2402 
  lli.pf = adap->pf;
  
#line 2403 
  lli.l2t = adap->l2t;
  
#line 2404 
  lli.tids = & adap->tids;
  
#line 2405 
  lli.ports = (struct net_device **)(& adap->port);
  
#line 2406 
  lli.vr = (struct cxgb4_virt_res const *)(& adap->vres);
  
#line 2407 
  lli.mtus = (unsigned short const *)(& adap->params.mtus);
  
#line 2408 
  if (uld == 0U) {
    
#line 2409 
    lli.rxq_ids = (unsigned short const *)(& adap->sge.rdma_rxq);
    
#line 2410 
    lli.ciq_ids = (unsigned short const *)(& adap->sge.rdma_ciq);
    
#line 2411 
    lli.nrxq = adap->sge.rdmaqs;
    
#line 2412 
    lli.nciq = adap->sge.rdmaciqs;
  }
  else 
    
#line 2413 
    if (uld == 1U) {
      
#line 2414 
      lli.rxq_ids = (unsigned short const *)(& adap->sge.ofld_rxq);
      
#line 2415 
      lli.nrxq = adap->sge.ofldqsets;
    }
    else ;
  
#line 2417 
  lli.ntxq = adap->sge.ofldqsets;
  
#line 2418 
  lli.nchan = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))adap->params.nports;
  
#line 2419 
  lli.nports = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(4))))adap->params.nports;
  
#line 2420 
  lli.wr_cred = (unsigned char)adap->params.ofldq_wr_cred;
  
#line 2421 
  lli.adapter_type = (unsigned char)adap->params.chip;
  
#line 2422 
  tmp = t4_read_reg(adap,32104U);
  
#line 2422 
  lli.iscsi_iolen = (tmp >> 16) & 65535U;
  
#line 2423 
  lli.cclk_ps = 1000000000U / adap->params.vpd.cclk;
  
#line 2424 
  lli.udb_density = (unsigned short)(1 << adap->params.sge.eq_qpp);
  
#line 2425 
  lli.ucq_density = (unsigned short)(1 << adap->params.sge.iq_qpp);
  
#line 2426 
  lli.filt_mode = (unsigned short)adap->params.tp.vlan_pri_map;
  
#line 2428 
  i = (unsigned short)0U;
  
#line 2428 
  goto ldv_59786;
  ldv_59785: 
#line 2429 
  ;
  
#line 2429 
  lli.tx_modq[(int)i] = i;
  
#line 2428 
  i = (unsigned short)((int)i + 1);
  ldv_59786: 
#line 2429 
  ;
  
#line 2428 
  if ((unsigned int)i <= 3U) 
#line 2430 
                             goto ldv_59785; else 
#line 2433 
                                                  goto ldv_59787;
  ldv_59787: 
#line 2434 
  ;
  
#line 2430 
  lli.gts_reg = adap->regs + 110596U;
  
#line 2431 
  lli.db_reg = adap->regs + 110592U;
  
#line 2432 
  lli.fw_vers = adap->params.fw_vers;
  
#line 2433 
  lli.dbfifo_int_thresh = dbfifo_int_thresh;
  
#line 2434 
  lli.sge_ingpadboundary = adap->sge.fl_align;
  
#line 2435 
  lli.sge_egrstatuspagesize = adap->sge.stat_len;
  
#line 2436 
  lli.sge_pktshift = adap->sge.pktshift;
  
#line 2437 
  lli.enable_fw_ofld_conn = (_Bool)((adap->flags & 512U) != 0U);
  
#line 2438 
  lli.max_ordird_qp = adap->params.max_ordird_qp;
  
#line 2439 
  lli.max_ird_adapter = adap->params.max_ird_adapter;
  
#line 2440 
  lli.ulptx_memwrite_dsgl = adap->params.ulptx_memwrite_dsgl;
  
#line 2441 
  lli.nodeid = dev_to_node(adap->pdev_dev);
  
#line 2443 
  handle = (*(ulds[uld].add))((struct cxgb4_lld_info const *)(& lli));
  
#line 2444 
  tmp_1 = IS_ERR((void const *)handle);
  
#line 2444 
  if ((int)tmp_1 != 0) {
    long tmp_0;
    
#line 2447 
    tmp_0 = PTR_ERR((void const *)handle);
    
#line 2445 
    ;
    
#line 2445 
    ;
    
#line 2445 
    dev_warn((struct device const *)adap->pdev_dev,"could not attach to the %s driver, error %ld\n",uld_str[uld],tmp_0);
    
#line 2448 
    goto return_label;
  }
  else ;
  
#line 2451 
  adap->uld_handle[uld] = handle;
  
#line 2453 
  if (! netevent_registered) {
    
#line 2454 
    register_netevent_notifier(& cxgb4_netevent_nb);
    
#line 2455 
    netevent_registered = (_Bool)1;
  }
  else ;
  
#line 2458 
  if ((adap->flags & 1U) != 0U) 
#line 2459 
                                (*(ulds[uld].state_change))(handle,(enum cxgb4_state)CXGB4_STATE_UP); else ;
  return_label: 
#line 2460 
                return;
}


#line 2462  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void attach_ulds(struct adapter *adap)
{
  unsigned int i;
  
#line 2466 
  ldv_spin_lock_133(& adap_rcu_lock);
  
#line 2467 
  list_add_tail_rcu(& adap->rcu_node,& adap_rcu_list);
  
#line 2468 
  ldv_spin_unlock_134(& adap_rcu_lock);
  
#line 2470 
  ldv_mutex_lock_135(& uld_mutex);
  
#line 2471 
  list_add_tail(& adap->list_node,& adapter_list);
  
#line 2472 
  i = 0U;
  
#line 2472 
  goto ldv_59793;
  ldv_59792: 
#line 2473 
  ;
  
#line 2473 
  if (ulds[i].add != (void *(*)(struct cxgb4_lld_info const *))0) 
#line 2474 
                                                                  uld_attach(adap,i); else ;
  
#line 2472 
  i += 1U;
  ldv_59793: 
#line 2473 
  ;
  
#line 2472 
  if (i <= 1U) 
#line 2474 
               goto ldv_59792; else 
#line 2477 
                                    goto ldv_59794;
  ldv_59794: 
#line 2478 
  ;
  
#line 2475 
  ldv_mutex_unlock_136(& uld_mutex);
  
#line 2476 
  return;
}


#line 2478  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void detach_ulds(struct adapter *adap)
{
  unsigned int i;
  
#line 2482 
  ldv_mutex_lock_137(& uld_mutex);
  
#line 2483 
  list_del(& adap->list_node);
  
#line 2484 
  i = 0U;
  
#line 2484 
  goto ldv_59800;
  ldv_59799: 
#line 2485 
  ;
  
#line 2485 
  if (adap->uld_handle[i] != (void *)0) {
    
#line 2486 
    (*(ulds[i].state_change))(adap->uld_handle[i],(enum cxgb4_state)CXGB4_STATE_DETACH);
    
#line 2488 
    adap->uld_handle[i] = (void *)0;
  }
  else ;
  
#line 2484 
  i += 1U;
  ldv_59800: 
#line 2485 
  ;
  
#line 2484 
  if (i <= 1U) 
#line 2486 
               goto ldv_59799; else 
#line 2489 
                                    goto ldv_59801;
  ldv_59801: 
#line 2490 
  ;
  
#line 2490 
  if ((int)netevent_registered != 0) {
    int tmp;
    
#line 2490 
    tmp = list_empty((struct list_head const *)(& adapter_list));
    
#line 2490 
    if (tmp != 0) {
      
#line 2491 
      unregister_netevent_notifier(& cxgb4_netevent_nb);
      
#line 2492 
      netevent_registered = (_Bool)0;
    }
    else ;
  }
  else ;
  
#line 2494 
  ldv_mutex_unlock_138(& uld_mutex);
  
#line 2496 
  ldv_spin_lock_139(& adap_rcu_lock);
  
#line 2497 
  list_del_rcu(& adap->rcu_node);
  
#line 2498 
  ldv_spin_unlock_140(& adap_rcu_lock);
  
#line 2499 
  return;
}


#line 2501  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void notify_ulds(struct adapter *adap, enum cxgb4_state new_state)
{
  unsigned int i;
  
#line 2505 
  ldv_mutex_lock_141(& uld_mutex);
  
#line 2506 
  i = 0U;
  
#line 2506 
  goto ldv_59808;
  ldv_59807: 
#line 2507 
  ;
  
#line 2507 
  if (adap->uld_handle[i] != (void *)0) 
#line 2508 
                                        (*(ulds[i].state_change))(adap->uld_handle[i],new_state); else ;
  
#line 2506 
  i += 1U;
  ldv_59808: 
#line 2507 
  ;
  
#line 2506 
  if (i <= 1U) 
#line 2508 
               goto ldv_59807; else 
#line 2511 
                                    goto ldv_59809;
  ldv_59809: 
#line 2512 
  ;
  
#line 2509 
  ldv_mutex_unlock_142(& uld_mutex);
  
#line 2510 
  return;
}


#line 2521  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_register_uld(enum cxgb4_uld type, struct cxgb4_uld_info const *p)
{
  int __retres;
  struct adapter *adap;
  struct adapter *tmp;
  struct adapter *tmp_0;
  
#line 2523 
  int ret = 0;
  
#line 2526 
  if (type > (unsigned int)CXGB4_ULD_ISCSI) {
    
#line 2527 
    __retres = -22;
    
#line 2527 
    goto return_label;
  }
  else ;
  
#line 2528 
  ldv_mutex_lock_143(& uld_mutex);
  
#line 2529 
  if (ulds[(unsigned int)type].add != (void *(*)(struct cxgb4_lld_info const *))0) {
    
#line 2530 
    ret = -16;
    
#line 2531 
    goto out;
  }
  else ;
  
#line 2533 
  ulds[(unsigned int)type] = *p;
  {
    
#line 2534 
    struct list_head const *__mptr = (struct list_head const *)adapter_list.next;
    
#line 2534 
    tmp = (struct adapter *)__mptr + 18446744073709480744U;
  }
  
#line 2534 
  adap = tmp;
  
#line 2534 
  goto ldv_59822;
  ldv_59821: 
#line 2535 
  ;
  
#line 2535 
  uld_attach(adap,(unsigned int)type);
  {
    
#line 2534 
    struct list_head const *__mptr_0 = (struct list_head const *)adap->list_node.next;
    
#line 2534 
    tmp_0 = (struct adapter *)__mptr_0 + 18446744073709480744U;
  }
  
#line 2534 
  adap = tmp_0;
  ldv_59822: 
#line 2536 
  ;
  
#line 2534 
  if (& adap->list_node != & adapter_list) 
#line 2536 
                                           goto ldv_59821; else 
#line 2539 
                                                                goto ldv_59823;
  ldv_59823: 
#line 2540 
  ;
  out: 
#line 2536 
  ;
  
#line 2536 
  ldv_mutex_unlock_144(& uld_mutex);
  
#line 2537 
  __retres = ret;
  return_label: 
#line 2537 
                return __retres;
}


#line 2539  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_register_uld[19U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'r', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)'_', (char)'u', (char)'l', (char)'d', (char)'\000'};

#line 2539 
struct kernel_symbol const __ksymtab_cxgb4_register_uld;


#line 2539  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_register_uld = {.value = (unsigned long)(& cxgb4_register_uld), .name = (char const *)(& __kstrtab_cxgb4_register_uld)};

#line 2547  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_unregister_uld(enum cxgb4_uld type)
{
  int __retres;
  struct adapter *adap;
  struct adapter *tmp;
  struct adapter *tmp_0;
  
#line 2551 
  if (type > (unsigned int)CXGB4_ULD_ISCSI) {
    
#line 2552 
    __retres = -22;
    
#line 2552 
    goto return_label;
  }
  else ;
  
#line 2553 
  ldv_mutex_lock_145(& uld_mutex);
  {
    
#line 2554 
    struct list_head const *__mptr = (struct list_head const *)adapter_list.next;
    
#line 2554 
    tmp = (struct adapter *)__mptr + 18446744073709480744U;
  }
  
#line 2554 
  adap = tmp;
  
#line 2554 
  goto ldv_59841;
  ldv_59840: 
#line 2555 
  ;
  
#line 2555 
  adap->uld_handle[(unsigned int)type] = (void *)0;
  {
    
#line 2554 
    struct list_head const *__mptr_0 = (struct list_head const *)adap->list_node.next;
    
#line 2554 
    tmp_0 = (struct adapter *)__mptr_0 + 18446744073709480744U;
  }
  
#line 2554 
  adap = tmp_0;
  ldv_59841: 
#line 2556 
  ;
  
#line 2554 
  if (& adap->list_node != & adapter_list) 
#line 2556 
                                           goto ldv_59840; else 
#line 2559 
                                                                goto ldv_59842;
  ldv_59842: 
#line 2560 
  ;
  
#line 2556 
  ulds[(unsigned int)type].add = (void *(*)(struct cxgb4_lld_info const *))0;
  
#line 2557 
  ldv_mutex_unlock_146(& uld_mutex);
  
#line 2558 
  __retres = 0;
  return_label: 
#line 2558 
                return __retres;
}


#line 2560  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_unregister_uld[21U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'u', (char)'n', (char)'r', (char)'e', (char)'g', (char)'i', (char)'s', (char)'t', (char)'e', (char)'r', (char)'_', (char)'u', (char)'l', (char)'d', (char)'\000'};

#line 2560 
struct kernel_symbol const __ksymtab_cxgb4_unregister_uld;


#line 2560  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_unregister_uld = {.value = (unsigned long)(& cxgb4_unregister_uld), .name = (char const *)(& __kstrtab_cxgb4_unregister_uld)};

#line 2563  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int cxgb4_inet6addr_handler(struct notifier_block *this, unsigned long event, void *data)
{
  int __retres;
  struct adapter *adap;
  
#line 2566 
  struct inet6_ifaddr *ifa = (struct inet6_ifaddr *)data;
  
#line 2567 
  struct net_device *event_dev = (ifa->idev)->dev;
  
#line 2568 
  struct device const *parent = (struct device const *)0;
  
#line 2572 
  if ((event_dev->priv_flags & 1U) != 0U) 
#line 2573 
                                          event_dev = vlan_dev_real_dev((struct net_device const *)event_dev); else ;
  
#line 2575 
  if ((event_dev->flags & 1024U) != 0U) {
    struct adapter *tmp;
    struct adapter *tmp_0;
    {
      
#line 2576 
      struct list_head const *__mptr = (struct list_head const *)adapter_list.next;
      
#line 2576 
      tmp = (struct adapter *)__mptr + 18446744073709480744U;
    }
    
#line 2576 
    adap = tmp;
    
#line 2576 
    goto ldv_59868;
    ldv_59867: 
#line 2577 
    ;
    
#line 2577 
    switch (event) {
      case (unsigned long)1: 
#line 2578 
      ;
      
#line 2579 
      cxgb4_clip_get((struct net_device const *)adap->port[0],(u32 const *)ifa,(unsigned char)1);
      
#line 2581 
      goto ldv_59864;
      case (unsigned long)2: 
#line 2582 
      ;
      
#line 2583 
      cxgb4_clip_release((struct net_device const *)adap->port[0],(u32 const *)ifa,(unsigned char)1);
      
#line 2585 
      goto ldv_59864;
      default: 
#line 2586 
      ;
      
#line 2587 
      goto ldv_59864;
    }
    ldv_59864: 
#line 2589 
    ;
    {
      
#line 2576 
      struct list_head const *__mptr_0 = (struct list_head const *)adap->list_node.next;
      
#line 2576 
      tmp_0 = (struct adapter *)__mptr_0 + 18446744073709480744U;
    }
    
#line 2576 
    adap = tmp_0;
    ldv_59868: 
#line 2578 
    ;
    
#line 2576 
    if (& adap->list_node != & adapter_list) 
#line 2578 
                                             goto ldv_59867; else 
#line 2581 
                                                                  goto ldv_59869;
    ldv_59869: 
#line 2582 
    ;
    
#line 2590 
    __retres = 1;
    
#line 2590 
    goto return_label;
  }
  else ;
  
#line 2594 
  if (event_dev != (struct net_device *)0) 
#line 2595 
                                           parent = (struct device const *)event_dev->dev.parent; else ;
  
#line 2597 
  if (parent != (struct device const *)0 && parent->driver == & cxgb4_driver.driver) {
    
#line 2598 
    switch (event) {
      case (unsigned long)1: 
#line 2599 
      ;
      
#line 2600 
      cxgb4_clip_get((struct net_device const *)event_dev,(u32 const *)ifa,(unsigned char)1);
      
#line 2601 
      goto ldv_59871;
      case (unsigned long)2: 
#line 2602 
      ;
      
#line 2603 
      cxgb4_clip_release((struct net_device const *)event_dev,(u32 const *)ifa,(unsigned char)1);
      
#line 2604 
      goto ldv_59871;
      default: 
#line 2605 
      ;
      
#line 2606 
      goto ldv_59871;
    }
    ldv_59871: 
#line 2608 
    ;
  }
  else ;
  
#line 2609 
  __retres = 1;
  return_label: 
#line 2609 
                return __retres;
}


#line 2612  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static bool inet6addr_registered;

#line 2613  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static struct notifier_block cxgb4_inet6addr_notifier = {.notifier_call = & cxgb4_inet6addr_handler, .next = (struct notifier_block *)0, .priority = 0};

#line 2617  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void update_clip(struct adapter const *adap)
{
  int i;
  struct net_device *dev;
  int ret;
  
#line 2623 
  rcu_read_lock();
  
#line 2625 
  i = 0;
  
#line 2625 
  goto ldv_59884;
  ldv_59883: 
#line 2626 
  ;
  
#line 2626 
  dev = adap->port[i];
  
#line 2627 
  ret = 0;
  
#line 2629 
  if (dev != (struct net_device *)0) 
#line 2630 
                                     ret = cxgb4_update_root_dev_clip(dev); else ;
  
#line 2632 
  if (ret < 0) 
#line 2633 
               goto ldv_59882; else ;
  
#line 2625 
  i += 1;
  ldv_59884: 
#line 2626 
  ;
  
#line 2625 
  if (i <= 3) 
#line 2627 
              goto ldv_59883; else 
#line 2630 
                                   goto ldv_59882;
  ldv_59882: 
#line 2631 
  ;
  
#line 2635 
  rcu_read_unlock();
  
#line 2636 
  return;
}


#line 2649  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int cxgb_up(struct adapter *adap)
{
  int __retres;
  int err;
  
#line 2653 
  err = setup_sge_queues(adap);
  
#line 2654 
  if (err != 0) 
#line 2655 
                goto out; else ;
  
#line 2656 
  err = setup_rss(adap);
  
#line 2657 
  if (err != 0) 
#line 2658 
                goto freeq; else ;
  
#line 2660 
  if ((adap->flags & 8U) != 0U) {
    
#line 2661 
    name_msix_vecs(adap);
    
#line 2662 
    err = ldv_request_irq_147((unsigned int)adap->msix_info[0].vec,& t4_nondata_intr,0UL,(char const *)(& adap->msix_info[0].desc),(void *)adap);
    
#line 2664 
    if (err != 0) 
#line 2665 
                  goto irq_err; else ;
    
#line 2667 
    err = request_msix_queue_irqs(adap);
    
#line 2668 
    if (err != 0) {
      
#line 2669 
      ldv_free_irq_148((unsigned int)adap->msix_info[0].vec,(void *)adap);
      
#line 2670 
      goto irq_err;
    }
    else ;
  }
  else {
    int tmp;
    irq_handler_t tmp_0;
    
#line 2673 
    ;
    
#line 2673 
    ;
    
#line 2674 
    if ((adap->flags & 4U) != 0U) 
#line 2674 
                                  tmp = 0; else 
#line 2674 
                                                tmp = 128;
    
#line 2673 
    tmp_0 = t4_intr_handler(adap);
    
#line 2673 
    ;
    
#line 2673 
    err = ldv_request_irq_149((adap->pdev)->irq,tmp_0,(unsigned long)tmp,(char const *)(& (adap->port[0])->name),(void *)adap);
    
#line 2676 
    if (err != 0) 
#line 2677 
                  goto irq_err; else ;
  }
  
#line 2679 
  enable_rx(adap);
  
#line 2680 
  t4_sge_start(adap);
  
#line 2681 
  t4_intr_enable(adap);
  
#line 2682 
  adap->flags |= 1U;
  
#line 2683 
  notify_ulds(adap,(enum cxgb4_state)CXGB4_STATE_UP);
  
#line 2685 
  update_clip((struct adapter const *)adap);
  out: 
#line 2687 
  ;
  
#line 2688 
  __retres = err;
  
#line 2688 
  goto return_label;
  irq_err: 
#line 2689 
  ;
  
#line 2690 
  dev_err((struct device const *)adap->pdev_dev,"request_irq failed, err %d\n",err);
  freeq: 
#line 2691 
  ;
  
#line 2692 
  t4_free_sge_resources(adap);
  
#line 2693 
  goto out;
  return_label: 
#line 2693 
                return __retres;
}


#line 2696  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void cxgb_down(struct adapter *adapter)
{
  
#line 2698 
  cancel_work_sync(& adapter->tid_release_task);
  
#line 2699 
  cancel_work_sync(& adapter->db_full_task);
  
#line 2700 
  cancel_work_sync(& adapter->db_drop_task);
  
#line 2701 
  adapter->tid_release_task_busy = (_Bool)0;
  
#line 2702 
  adapter->tid_release_head = (void **)0;
  
#line 2704 
  t4_sge_stop(adapter);
  
#line 2705 
  t4_free_sge_resources(adapter);
  
#line 2706 
  adapter->flags &= 4294967294U;
  
#line 2707 
  return;
}


#line 2712  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int cxgb_open(struct net_device *dev)
{
  int __retres;
  int err;
  
#line 2715 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 2716 
  struct adapter *adapter = pi->adapter;
  
#line 2718 
  netif_carrier_off(dev);
  
#line 2720 
  if ((adapter->flags & 1U) == 0U) {
    
#line 2721 
    err = cxgb_up(adapter);
    
#line 2722 
    if (err < 0) {
      
#line 2723 
      __retres = err;
      
#line 2723 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2726 
  err = link_start(dev);
  
#line 2727 
  if (err == 0) 
#line 2728 
                netif_tx_start_all_queues(dev); else ;
  
#line 2729 
  __retres = err;
  return_label: 
#line 2729 
                return __retres;
}


#line 2732  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int cxgb_close(struct net_device *dev)
{
  int tmp_0;
  
#line 2734 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 2735 
  struct adapter *adapter = pi->adapter;
  
#line 2737 
  netif_tx_stop_all_queues(dev);
  
#line 2738 
  netif_carrier_off(dev);
  
#line 2739 
  tmp_0 = t4_enable_vi(adapter,adapter->pf,(unsigned int)pi->viid,(_Bool)0,(_Bool)0);
  
#line 2739 
  return tmp_0;
}


#line 2744  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int writable_filter(struct filter_entry *f)
{
  int __retres;
  
#line 2746 
  if ((unsigned int)*((unsigned char *)f + 0UL) != 0U) {
    
#line 2747 
    __retres = -1;
    
#line 2747 
    goto return_label;
  }
  else ;
  
#line 2748 
  if ((unsigned int)*((unsigned char *)f + 0UL) != 0U) {
    
#line 2749 
    __retres = -16;
    
#line 2749 
    goto return_label;
  }
  else ;
  
#line 2751 
  __retres = 0;
  return_label: 
#line 2751 
                return __retres;
}


#line 2758  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int delete_filter(struct adapter *adapter, unsigned int fidx)
{
  int __retres;
  struct filter_entry *f;
  int ret;
  
#line 2763 
  if (adapter->tids.nftids + adapter->tids.nsftids <= fidx) {
    
#line 2764 
    __retres = -22;
    
#line 2764 
    goto return_label;
  }
  else ;
  
#line 2766 
  f = adapter->tids.ftid_tab + fidx;
  
#line 2767 
  ret = writable_filter(f);
  
#line 2768 
  if (ret != 0) {
    
#line 2769 
    __retres = ret;
    
#line 2769 
    goto return_label;
  }
  else ;
  
#line 2770 
  if ((unsigned int)*((unsigned char *)f + 0UL) != 0U) {
    int tmp;
    
#line 2771 
    tmp = del_filter_wr(adapter,(int)fidx);
    
#line 2771 
    __retres = tmp;
    
#line 2771 
    goto return_label;
  }
  else ;
  
#line 2773 
  __retres = 0;
  return_label: 
#line 2773 
                return __retres;
}


#line 2776  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_create_server_filter(struct net_device const *dev, unsigned int stid, __be32 sip, __be16 sport, __be16 vlan, unsigned int queue, unsigned char port, unsigned char mask)
{
  int __retres;
  int ret;
  struct filter_entry *f;
  struct adapter *adap;
  int i;
  u8 *val;
  
#line 2786 
  adap = netdev2adap(dev);
  
#line 2789 
  stid -= adap->tids.sftid_base;
  
#line 2790 
  stid = adap->tids.nftids + stid;
  
#line 2794 
  f = adap->tids.ftid_tab + stid;
  
#line 2795 
  ret = writable_filter(f);
  
#line 2796 
  if (ret != 0) {
    
#line 2797 
    __retres = ret;
    
#line 2797 
    goto return_label;
  }
  else ;
  
#line 2802 
  if ((unsigned int)*((unsigned char *)f + 0UL) != 0U) 
#line 2803 
                                                       clear_filter(adap,f); else ;
  
#line 2806 
  memset((void *)(& f->fs),0,124UL);
  
#line 2807 
  if (0 != 0) 
#line 2807 
              f->fs.val.lport = (unsigned short)(((int)sport << 8) | ((int)sport >> 8)); else 
                                                                    
#line 2807 
                                                                    f->fs.val.lport = __fswab16((unsigned short)((int)sport));
  
#line 2808 
  f->fs.mask.lport = (unsigned short)65535U;
  
#line 2809 
  val = (u8 *)(& sip);
  
#line 2810 
  if ((unsigned int)((((int)*val | (int)*(val + 1U)) | (int)*(val + 2U)) | (int)*(val + 3U)) != 0U) {
    
#line 2811 
    i = 0;
    
#line 2811 
    goto ldv_59931;
    ldv_59930: 
#line 2812 
    ;
    
#line 2812 
    f->fs.val.lip[i] = *(val + i);
    
#line 2813 
    f->fs.mask.lip[i] = (unsigned char)255U;
    
#line 2811 
    i += 1;
    ldv_59931: 
#line 2812 
    ;
    
#line 2811 
    if (i <= 3) 
#line 2813 
                goto ldv_59930; else 
#line 2816 
                                     goto ldv_59932;
    ldv_59932: 
#line 2817 
    ;
    
#line 2815 
    if ((adap->params.tp.vlan_pri_map & 2U) != 0U) {
      
#line 2816 
      f->fs.val.iport = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))port;
      
#line 2817 
      f->fs.mask.iport = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(3))))mask;
    }
    else ;
  }
  else ;
  
#line 2821 
  if ((adap->params.tp.vlan_pri_map & 32U) != 0U) {
    
#line 2822 
    f->fs.val.proto = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))6U;
    
#line 2823 
    f->fs.mask.proto = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))255U;
  }
  else ;
  
#line 2826 
  f->fs.dirsteer = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
  
#line 2827 
  f->fs.iq = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(10))))queue;
  
#line 2829 
  f->locked = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
  
#line 2830 
  f->fs.rpttid = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
  
#line 2832 
  ret = set_filter_wr(adap,(int)stid);
  
#line 2833 
  if (ret != 0) {
    
#line 2834 
    clear_filter(adap,f);
    
#line 2835 
    __retres = ret;
    
#line 2835 
    goto return_label;
  }
  else ;
  
#line 2838 
  __retres = 0;
  return_label: 
#line 2838 
                return __retres;
}


#line 2840  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_create_server_filter[27U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'c', (char)'r', (char)'e', (char)'a', (char)'t', (char)'e', (char)'_', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'r', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'\000'};

#line 2840 
struct kernel_symbol const __ksymtab_cxgb4_create_server_filter;


#line 2840  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_create_server_filter = {.value = (unsigned long)(& cxgb4_create_server_filter), .name = (char const *)(& __kstrtab_cxgb4_create_server_filter)};

#line 2842  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
int cxgb4_remove_server_filter(struct net_device const *dev, unsigned int stid, unsigned int queue, bool ipv6)
{
  int __retres;
  int ret;
  struct filter_entry *f;
  struct adapter *adap;
  
#line 2849 
  adap = netdev2adap(dev);
  
#line 2852 
  stid -= adap->tids.sftid_base;
  
#line 2853 
  stid = adap->tids.nftids + stid;
  
#line 2855 
  f = adap->tids.ftid_tab + stid;
  
#line 2857 
  f->locked = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
  
#line 2859 
  ret = delete_filter(adap,stid);
  
#line 2860 
  if (ret != 0) {
    
#line 2861 
    __retres = ret;
    
#line 2861 
    goto return_label;
  }
  else ;
  
#line 2863 
  __retres = 0;
  return_label: 
#line 2863 
                return __retres;
}


#line 2865  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static char const __kstrtab_cxgb4_remove_server_filter[27U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'r', (char)'e', (char)'m', (char)'o', (char)'v', (char)'e', (char)'_', (char)'s', (char)'e', (char)'r', (char)'v', (char)'e', (char)'r', (char)'_', (char)'f', (char)'i', (char)'l', (char)'t', (char)'e', (char)'r', (char)'\000'};

#line 2865 
struct kernel_symbol const __ksymtab_cxgb4_remove_server_filter;


#line 2865  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
struct kernel_symbol const __ksymtab_cxgb4_remove_server_filter = {.value = (unsigned long)(& cxgb4_remove_server_filter), .name = (char const *)(& __kstrtab_cxgb4_remove_server_filter)};

#line 2867  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static struct rtnl_link_stats64 *cxgb_get_stats(struct net_device *dev, struct rtnl_link_stats64 *ns)
{
  struct rtnl_link_stats64 *__retres;
  struct port_stats stats;
  int tmp_1;
  bool tmp_0;
  
#line 2871 
  struct port_info *p = netdev_priv((struct net_device const *)dev);
  
#line 2872 
  struct adapter *adapter = p->adapter;
  
#line 2878 
  ldv_spin_lock_150(& adapter->stats_lock);
  
#line 2879 
  tmp_0 = netif_device_present(dev);
  
#line 2879 
  if (tmp_0) 
#line 2879 
             tmp_1 = 0; else 
#line 2879 
                             tmp_1 = 1;
  
#line 2879 
  if (tmp_1) {
    
#line 2880 
    ldv_spin_unlock_151(& adapter->stats_lock);
    
#line 2881 
    __retres = ns;
    
#line 2881 
    goto return_label;
  }
  else ;
  
#line 2883 
  t4_get_port_stats_offset(adapter,(int)p->tx_chan,& stats,& p->stats_base);
  
#line 2885 
  ldv_spin_unlock_152(& adapter->stats_lock);
  
#line 2887 
  ns->tx_bytes = stats.tx_octets;
  
#line 2888 
  ns->tx_packets = stats.tx_frames;
  
#line 2889 
  ns->rx_bytes = stats.rx_octets;
  
#line 2890 
  ns->rx_packets = stats.rx_frames;
  
#line 2891 
  ns->multicast = stats.rx_mcast_frames;
  
#line 2894 
  ns->rx_length_errors = (stats.rx_jabber + stats.rx_too_long) + stats.rx_runt;
  
#line 2896 
  ns->rx_over_errors = 0ULL;
  
#line 2897 
  ns->rx_crc_errors = stats.rx_fcs_err;
  
#line 2898 
  ns->rx_frame_errors = stats.rx_symbol_err;
  
#line 2899 
  ns->rx_fifo_errors = ((((((stats.rx_ovflow0 + stats.rx_ovflow1) + stats.rx_ovflow2) + stats.rx_ovflow3) + stats.rx_trunc0) + stats.rx_trunc1) + stats.rx_trunc2) + stats.rx_trunc3;
  
#line 2903 
  ns->rx_missed_errors = 0ULL;
  
#line 2906 
  ns->tx_aborted_errors = 0ULL;
  
#line 2907 
  ns->tx_carrier_errors = 0ULL;
  
#line 2908 
  ns->tx_fifo_errors = 0ULL;
  
#line 2909 
  ns->tx_heartbeat_errors = 0ULL;
  
#line 2910 
  ns->tx_window_errors = 0ULL;
  
#line 2912 
  ns->tx_errors = stats.tx_error_frames;
  
#line 2913 
  ns->rx_errors = (((stats.rx_symbol_err + stats.rx_fcs_err) + ns->rx_length_errors) + stats.rx_len_err) + ns->rx_fifo_errors;
  
#line 2915 
  __retres = ns;
  return_label: 
#line 2915 
                return __retres;
}


#line 2918  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int cxgb_ioctl(struct net_device *dev, struct ifreq *req, int cmd)
{
  int __retres;
  unsigned int mbox;
  int prtad;
  int devad;
  
#line 2921 
  int ret = 0;
  
#line 2922 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 2923 
  struct mii_ioctl_data *data = (struct mii_ioctl_data *)(& req->ifr_ifru.ifru_data);
  
#line 2925 
  switch (cmd) {
    bool tmp_2;
    case 35143: 
#line 2926 
    ;
    
#line 2927 
    if ((int)pi->mdio_addr < 0) {
      
#line 2928 
      __retres = -95;
      
#line 2928 
      goto return_label;
    }
    else ;
    
#line 2929 
    data->phy_id = (unsigned short)pi->mdio_addr;
    
#line 2930 
    goto ldv_59985;
    case 35144: 
#line 2931 
    ;
    case 35145: 
#line 2932 
    ;
    
#line 2933 
    tmp_2 = mdio_phy_id_is_c45((int)data->phy_id);
    
#line 2933 
    if ((int)tmp_2 != 0) {
      __u16 tmp_0;
      __u16 tmp_1;
      
#line 2934 
      tmp_0 = mdio_phy_id_prtad((int)data->phy_id);
      
#line 2934 
      prtad = (int)tmp_0;
      
#line 2935 
      tmp_1 = mdio_phy_id_devad((int)data->phy_id);
      
#line 2935 
      devad = (int)tmp_1;
    }
    else 
      
#line 2936 
      if ((unsigned int)data->phy_id <= 31U) {
        
#line 2937 
        prtad = (int)data->phy_id;
        
#line 2938 
        devad = 0;
        
#line 2939 
        data->reg_num = (unsigned short)((unsigned int)data->reg_num & 31U);
      }
      else {
        
#line 2941 
        __retres = -22;
        
#line 2941 
        goto return_label;
      }
    
#line 2943 
    mbox = (pi->adapter)->pf;
    
#line 2944 
    if (cmd == 35144) 
#line 2945 
                      ret = t4_mdio_rd(pi->adapter,mbox,(unsigned int)prtad,(unsigned int)devad,(unsigned int)data->reg_num,& data->val_out); else 
                                                                    
#line 2948 
                                                                    ret = t4_mdio_wr(pi->adapter,mbox,(unsigned int)prtad,(unsigned int)devad,(unsigned int)data->reg_num,(unsigned short)((int)data->val_in));
    
#line 2950 
    goto ldv_59985;
    default: 
#line 2951 
    ;
    
#line 2952 
    __retres = -95;
    
#line 2952 
    goto return_label;
  }
  ldv_59985: 
#line 2954 
  ;
  
#line 2954 
  __retres = ret;
  return_label: 
#line 2954 
                return __retres;
}


#line 2957  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void cxgb_set_rxmode(struct net_device *dev)
{
  
#line 2960 
  set_rxmode(dev,-1,(_Bool)0);
  
#line 2961 
  return;
}


#line 2963  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int cxgb_change_mtu(struct net_device *dev, int new_mtu)
{
  int __retres;
  int ret;
  
#line 2966 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 2968 
  if ((unsigned int)new_mtu + 4294967215U > 9519U) {
    
#line 2969 
    __retres = -22;
    
#line 2969 
    goto return_label;
  }
  else ;
  
#line 2970 
  ret = t4_set_rxmode(pi->adapter,(pi->adapter)->pf,(unsigned int)pi->viid,new_mtu,-1,-1,-1,-1,(_Bool)1);
  
#line 2972 
  if (ret == 0) 
#line 2973 
                dev->mtu = (unsigned int)new_mtu; else ;
  
#line 2974 
  __retres = ret;
  return_label: 
#line 2974 
                return __retres;
}


#line 2977  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int cxgb_set_mac_addr(struct net_device *dev, void *p)
{
  int __retres;
  int ret;
  int tmp_1;
  bool tmp_0;
  
#line 2980 
  struct sockaddr *addr = (struct sockaddr *)p;
  
#line 2981 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 2983 
  tmp_0 = is_valid_ether_addr((u8 const *)(& addr->sa_data));
  
#line 2983 
  if (tmp_0) 
#line 2983 
             tmp_1 = 0; else 
#line 2983 
                             tmp_1 = 1;
  
#line 2983 
  if (tmp_1) {
    
#line 2984 
    __retres = -99;
    
#line 2984 
    goto return_label;
  }
  else ;
  
#line 2986 
  ret = t4_change_mac(pi->adapter,(pi->adapter)->pf,(unsigned int)pi->viid,(int)pi->xact_addr_filt,(u8 const *)(& addr->sa_data),(_Bool)1,(_Bool)1);
  
#line 2988 
  if (ret < 0) {
    
#line 2989 
    __retres = ret;
    
#line 2989 
    goto return_label;
  }
  else ;
  
#line 2991 
  memcpy((void *)dev->dev_addr,(void const *)(& addr->sa_data),(unsigned long)dev->addr_len);
  
#line 2992 
  pi->xact_addr_filt = (short)ret;
  
#line 2993 
  __retres = 0;
  return_label: 
#line 2993 
                return __retres;
}


#line 2997  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void cxgb_netpoll(struct net_device *dev)
{
  
#line 2999 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 3000 
  struct adapter *adap = pi->adapter;
  
#line 3002 
  if ((adap->flags & 8U) != 0U) {
    int i;
    
#line 3004 
    struct sge_eth_rxq *rx = & adap->sge.ethrxq[(int)pi->first_qset];
    
#line 3006 
    i = (int)pi->nqsets;
    
#line 3006 
    goto ldv_60013;
    ldv_60012: 
#line 3007 
    ;
    
#line 3007 
    t4_sge_intr_msix(0,(void *)(& rx->rspq));
    
#line 3006 
    i -= 1;
    
#line 3006 
    rx += 1;
    ldv_60013: 
#line 3007 
    ;
    
#line 3006 
    if (i != 0) 
#line 3008 
                goto ldv_60012; else 
#line 3011 
                                     goto ldv_60014;
    ldv_60014: 
#line 3012 
    ;
  }
  else {
    irq_handler_t tmp_0;
    
#line 3009 
    tmp_0 = t4_intr_handler(adap);
    
#line 3009 
    (*tmp_0)(0,(void *)adap);
  }
  
#line 3010 
  return;
}


#line 3013  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static struct net_device_ops const cxgb4_netdev_ops = {.ndo_init = (int (*)(struct net_device *))0, .ndo_uninit = (void (*)(struct net_device *))0, .ndo_open = & cxgb_open, .ndo_stop = & cxgb_close, .ndo_start_xmit = & t4_eth_xmit, .ndo_select_queue = & cxgb_select_queue, .ndo_change_rx_flags = (void (*)(struct net_device *, int ))0, .ndo_set_rx_mode = & cxgb_set_rxmode, .ndo_set_mac_address = & cxgb_set_mac_addr, .ndo_validate_addr = & eth_validate_addr, .ndo_do_ioctl = & cxgb_ioctl, .ndo_set_config = (int (*)(struct net_device *, struct ifmap *))0, .ndo_change_mtu = & cxgb_change_mtu, .ndo_neigh_setup = (int (*)(struct net_device *, struct neigh_parms *))0, .ndo_tx_timeout = (void (*)(struct net_device *))0, .ndo_get_stats64 = & cxgb_get_stats, .ndo_get_stats = (struct net_device_stats *(*)(struct net_device *))0, .ndo_vlan_rx_add_vid = (int (*)(struct net_device *, __be16 , u16 ))0, .ndo_vlan_rx_kill_vid = (int (*)(struct net_device *, __be16 , u16 ))0, .ndo_poll_controller = & cxgb_netpoll, .ndo_netpoll_setup = (int (*)(struct net_device *, struct netpoll_info *))0, .ndo_netpoll_cleanup = (void (*)(struct net_device *))0, .ndo_busy_poll = & cxgb_busy_poll, .ndo_set_vf_mac = (int (*)(struct net_device *, int , u8 *))0, .ndo_set_vf_vlan = (int (*)(struct net_device *, int , u16 , u8 ))0, .ndo_set_vf_rate = (int (*)(struct net_device *, int , int , int ))0, .ndo_set_vf_spoofchk = (int (*)(struct net_device *, int , bool ))0, .ndo_get_vf_config = (int (*)(struct net_device *, int , struct ifla_vf_info *))0, .ndo_set_vf_link_state = (int (*)(struct net_device *, int , int ))0, .ndo_get_vf_stats = (int (*)(struct net_device *, int , struct ifla_vf_stats *))0, .ndo_set_vf_port = (int (*)(struct net_device *, int , struct nlattr **))0, .ndo_get_vf_port = (int (*)(struct net_device *, int , struct sk_buff *))0, .ndo_set_vf_rss_query_en = (int (*)(struct net_device *, int , bool ))0, .ndo_setup_tc = (int (*)(struct net_device *, u8 ))0, .ndo_fcoe_enable = & cxgb_fcoe_enable, .ndo_fcoe_disable = & cxgb_fcoe_disable, .ndo_fcoe_ddp_setup = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_ddp_done = (int (*)(struct net_device *, u16 ))0, .ndo_fcoe_ddp_target = (int (*)(struct net_device *, u16 , struct scatterlist *, unsigned int ))0, .ndo_fcoe_get_hbainfo = (int (*)(struct net_device *, struct netdev_fcoe_hbainfo *))0, .ndo_fcoe_get_wwn = (int (*)(struct net_device *, u64 *, int ))0, .ndo_rx_flow_steer = (int (*)(struct net_device *, struct sk_buff const *, u16 , u32 ))0, .ndo_add_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_del_slave = (int (*)(struct net_device *, struct net_device *))0, .ndo_fix_features = (netdev_features_t (*)(struct net_device *, netdev_features_t ))0, .ndo_set_features = & cxgb_set_features, .ndo_neigh_construct = (int (*)(struct neighbour *))0, .ndo_neigh_destroy = (void (*)(struct neighbour *))0, .ndo_fdb_add = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 , u16 ))0, .ndo_fdb_del = (int (*)(struct ndmsg *, struct nlattr **, struct net_device *, unsigned char const *, u16 ))0, .ndo_fdb_dump = (int (*)(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int ))0, .ndo_bridge_setlink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_bridge_getlink = (int (*)(struct sk_buff *, u32 , u32 , struct net_device *, u32 , int ))0, .ndo_bridge_dellink = (int (*)(struct net_device *, struct nlmsghdr *, u16 ))0, .ndo_change_carrier = (int (*)(struct net_device *, bool ))0, .ndo_get_phys_port_id = (int (*)(struct net_device *, struct netdev_phys_item_id *))0, .ndo_get_phys_port_name = (int (*)(struct net_device *, char *, size_t ))0, .ndo_add_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_del_vxlan_port = (void (*)(struct net_device *, sa_family_t , __be16 ))0, .ndo_dfwd_add_station = (void *(*)(struct net_device *, struct net_device *))0, .ndo_dfwd_del_station = (void (*)(struct net_device *, void *))0, .ndo_dfwd_start_xmit = (netdev_tx_t (*)(struct sk_buff *, struct net_device *, void *))0, .ndo_get_lock_subclass = (int (*)(struct net_device *))0, .ndo_features_check = (netdev_features_t (*)(struct sk_buff *, struct net_device *, netdev_features_t ))0, .ndo_set_tx_maxrate = (int (*)(struct net_device *, int , u32 ))0, .ndo_get_iflink = (int (*)(struct net_device const *))0};

#line 3038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
void t4_fatal_err(struct adapter *adap)
{
  
#line 3040 
  t4_set_reg_field(adap,4104U,1U,0U);
  
#line 3041 
  t4_intr_disable(adap);
  
#line 3042 
  dev_alert((struct device const *)adap->pdev_dev,"encountered fatal error, adapter stopped\n");
  
#line 3043 
  return;
}


#line 3045  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void setup_memwin(struct adapter *adap)
{
  
#line 3047 
  u32 nic_win_base = t4_get_util_window(adap);
  
#line 3049 
  t4_setup_memwin(adap,nic_win_base,0U);
  
#line 3050 
  return;
}


#line 3052  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void setup_memwin_rdma(struct adapter *adap)
{
  
#line 3054 
  if (adap->vres.ocq.size != 0U) {
    u32 start;
    unsigned int sz_kb;
    resource_size_t tmp;
    unsigned long tmp_70;
    int tmp_208;
    
#line 3058 
    start = t4_read_pcie_cfg4(adap,24);
    
#line 3059 
    start &= 4294967280U;
    
#line 3060 
    if ((adap->pdev)->resource[2].start != 0ULL || (adap->pdev)->resource[2].end != (adap->pdev)->resource[2].start) 
      
#line 3060 
      tmp = ((adap->pdev)->resource[2].end - (adap->pdev)->resource[2].start) + 1ULL; else 
                                                                    
#line 3060 
                                                                    tmp = 0ULL;
    
#line 3060 
    if (0 != 0) {
      unsigned long tmp_68;
      
#line 3060 
      if (adap->vres.ocq.size != 1U) {
        unsigned long tmp_67;
        
#line 3060 
        if (0 != 0) {
          unsigned long tmp_65;
          
#line 3060 
          if (adap->vres.ocq.size == 1U) {
            int tmp_0;
            
#line 3060 
            tmp_0 = ____ilog2_NaN();
            
#line 3060 
            tmp_65 = 1UL << (tmp_0 + 1);
          }
          else {
            unsigned long tmp_64;
            
#line 3060 
            if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
              unsigned long tmp_63;
              
#line 3060 
              if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
                unsigned long tmp_62;
                
#line 3060 
                if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                  unsigned long tmp_61;
                  
#line 3060 
                  if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                    unsigned long tmp_60;
                    
#line 3060 
                    if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                      unsigned long tmp_59;
                      
#line 3060 
                      if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                        unsigned long tmp_58;
                        
#line 3060 
                        if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                          unsigned long tmp_57;
                          
#line 3060 
                          if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                            unsigned long tmp_56;
                            
#line 3060 
                            if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                              unsigned long tmp_55;
                              
#line 3060 
                              if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                                unsigned long tmp_54;
                                
#line 3060 
                                if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                  unsigned long tmp_53;
                                  
#line 3060 
                                  if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                    unsigned long tmp_52;
                                    
#line 3060 
                                    if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                      unsigned long tmp_51;
                                      
#line 3060 
                                      if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                        unsigned long tmp_50;
                                        
#line 3060 
                                        if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                          unsigned long tmp_49;
                                          
#line 3060 
                                          if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                            unsigned long tmp_48;
                                            
#line 3060 
                                            if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                              unsigned long tmp_47;
                                              
#line 3060 
                                              if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                                unsigned long tmp_46;
                                                
#line 3060 
                                                if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                  unsigned long tmp_45;
                                                  
#line 3060 
                                                  if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                    unsigned long tmp_44;
                                                    
#line 3060 
                                                    if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                      unsigned long tmp_43;
                                                      
#line 3060 
                                                      if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                        unsigned long tmp_42;
                                                        
#line 3060 
                                                        if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                          unsigned long tmp_41;
                                                          
#line 3060 
                                                          if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                            unsigned long tmp_40;
                                                            
#line 3060 
                                                            if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                              unsigned long tmp_39;
                                                              
#line 3060 
                                                              if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                                unsigned long tmp_38;
                                                                
#line 3060 
                                                                if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                  unsigned long tmp_37;
                                                                  
#line 3060 
                                                                  if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                    unsigned long tmp_36;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    unsigned long tmp_35;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    unsigned long tmp_34;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    unsigned long tmp_33;
                                                                    
#line 3060 
                                                                    if (
                                                                    adap->vres.ocq.size + 4294967295U >= (unsigned int)0) {
                                                                    unsigned long tmp_32;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    unsigned long tmp_31;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    unsigned long tmp_30;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    unsigned long tmp_29;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    unsigned long tmp_28;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    unsigned long tmp_27;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    unsigned long tmp_26;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    unsigned long tmp_25;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    unsigned long tmp_24;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    unsigned long tmp_23;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    unsigned long tmp_22;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    unsigned long tmp_21;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    unsigned long tmp_20;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    unsigned long tmp_19;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    unsigned long tmp_18;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    unsigned long tmp_17;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    unsigned long tmp_16;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    unsigned long tmp_15;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    unsigned long tmp_14;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    unsigned long tmp_13;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    unsigned long tmp_12;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    unsigned long tmp_11;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 512ULL) == 0ULL) {
                                                                    unsigned long tmp_10;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 256ULL) == 0ULL) {
                                                                    unsigned long tmp_9;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 128ULL) == 0ULL) {
                                                                    unsigned long tmp_8;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 64ULL) == 0ULL) {
                                                                    unsigned long tmp_7;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 32ULL) == 0ULL) {
                                                                    unsigned long tmp_6;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 16ULL) == 0ULL) {
                                                                    unsigned long tmp_5;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 8ULL) == 0ULL) {
                                                                    unsigned long tmp_4;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 4ULL) == 0ULL) {
                                                                    unsigned long tmp_3;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 2ULL) == 0ULL) {
                                                                    unsigned long tmp_2;
                                                                    
#line 3060 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 1ULL) == 0ULL) {
                                                                    int tmp_1;
                                                                    
#line 3060 
                                                                    tmp_1 = ____ilog2_NaN();
                                                                    
#line 3060 
                                                                    tmp_2 = 1UL << (tmp_1 + 1);
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_2 = 2UL;
                                                                    
#line 3060 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_3 = 4UL;
                                                                    
#line 3060 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_4 = 8UL;
                                                                    
#line 3060 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_5 = 16UL;
                                                                    
#line 3060 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_6 = 32UL;
                                                                    
#line 3060 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_7 = 64UL;
                                                                    
#line 3060 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_8 = 128UL;
                                                                    
#line 3060 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_9 = 256UL;
                                                                    
#line 3060 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_10 = 512UL;
                                                                    
#line 3060 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_11 = 1024UL;
                                                                    
#line 3060 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_12 = 2048UL;
                                                                    
#line 3060 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_13 = 4096UL;
                                                                    
#line 3060 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_14 = 8192UL;
                                                                    
#line 3060 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_15 = 16384UL;
                                                                    
#line 3060 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_16 = 32768UL;
                                                                    
#line 3060 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_17 = 65536UL;
                                                                    
#line 3060 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_18 = 131072UL;
                                                                    
#line 3060 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_19 = 262144UL;
                                                                    
#line 3060 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_20 = 524288UL;
                                                                    
#line 3060 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_21 = 1048576UL;
                                                                    
#line 3060 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_22 = 2097152UL;
                                                                    
#line 3060 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_23 = 4194304UL;
                                                                    
#line 3060 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_24 = 8388608UL;
                                                                    
#line 3060 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_25 = 16777216UL;
                                                                    
#line 3060 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_26 = 33554432UL;
                                                                    
#line 3060 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_27 = 67108864UL;
                                                                    
#line 3060 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_28 = 134217728UL;
                                                                    
#line 3060 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_29 = 268435456UL;
                                                                    
#line 3060 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_30 = 536870912UL;
                                                                    
#line 3060 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_31 = 1073741824UL;
                                                                    
#line 3060 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_32 = 2147483648UL;
                                                                    
#line 3060 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_33 = 4294967296UL;
                                                                    
#line 3060 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_34 = 8589934592UL;
                                                                    
#line 3060 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_35 = 17179869184UL;
                                                                    
#line 3060 
                                                                    tmp_36 = tmp_35;
                                                                    }
                                                                    else 
                                                                    
#line 3060 
                                                                    tmp_36 = 34359738368UL;
                                                                    
#line 3060 
                                                                    tmp_37 = tmp_36;
                                                                  }
                                                                  else 
                                                                    
#line 3060 
                                                                    tmp_37 = 68719476736UL;
                                                                  
#line 3060 
                                                                  tmp_38 = tmp_37;
                                                                }
                                                                else 
                                                                  
#line 3060 
                                                                  tmp_38 = 137438953472UL;
                                                                
#line 3060 
                                                                tmp_39 = tmp_38;
                                                              }
                                                              else 
#line 3060 
                                                                   tmp_39 = 274877906944UL;
                                                              
#line 3060 
                                                              tmp_40 = tmp_39;
                                                            }
                                                            else 
#line 3060 
                                                                 tmp_40 = 549755813888UL;
                                                            
#line 3060 
                                                            tmp_41 = tmp_40;
                                                          }
                                                          else 
#line 3060 
                                                               tmp_41 = 1099511627776UL;
                                                          
#line 3060 
                                                          tmp_42 = tmp_41;
                                                        }
                                                        else 
#line 3060 
                                                             tmp_42 = 2199023255552UL;
                                                        
#line 3060 
                                                        tmp_43 = tmp_42;
                                                      }
                                                      else 
#line 3060 
                                                           tmp_43 = 4398046511104UL;
                                                      
#line 3060 
                                                      tmp_44 = tmp_43;
                                                    }
                                                    else 
#line 3060 
                                                         tmp_44 = 8796093022208UL;
                                                    
#line 3060 
                                                    tmp_45 = tmp_44;
                                                  }
                                                  else 
#line 3060 
                                                       tmp_45 = 17592186044416UL;
                                                  
#line 3060 
                                                  tmp_46 = tmp_45;
                                                }
                                                else 
#line 3060 
                                                     tmp_46 = 35184372088832UL;
                                                
#line 3060 
                                                tmp_47 = tmp_46;
                                              }
                                              else 
#line 3060 
                                                   tmp_47 = 70368744177664UL;
                                              
#line 3060 
                                              tmp_48 = tmp_47;
                                            }
                                            else 
#line 3060 
                                                 tmp_48 = 140737488355328UL;
                                            
#line 3060 
                                            tmp_49 = tmp_48;
                                          }
                                          else 
#line 3060 
                                               tmp_49 = 281474976710656UL;
                                          
#line 3060 
                                          tmp_50 = tmp_49;
                                        }
                                        else 
#line 3060 
                                             tmp_50 = 562949953421312UL;
                                        
#line 3060 
                                        tmp_51 = tmp_50;
                                      }
                                      else 
#line 3060 
                                           tmp_51 = 1125899906842624UL;
                                      
#line 3060 
                                      tmp_52 = tmp_51;
                                    }
                                    else 
#line 3060 
                                         tmp_52 = 2251799813685248UL;
                                    
#line 3060 
                                    tmp_53 = tmp_52;
                                  }
                                  else 
#line 3060 
                                       tmp_53 = 4503599627370496UL;
                                  
#line 3060 
                                  tmp_54 = tmp_53;
                                }
                                else 
#line 3060 
                                     tmp_54 = 9007199254740992UL;
                                
#line 3060 
                                tmp_55 = tmp_54;
                              }
                              else 
#line 3060 
                                   tmp_55 = 18014398509481984UL;
                              
#line 3060 
                              tmp_56 = tmp_55;
                            }
                            else 
#line 3060 
                                 tmp_56 = 36028797018963968UL;
                            
#line 3060 
                            tmp_57 = tmp_56;
                          }
                          else 
#line 3060 
                               tmp_57 = 72057594037927936UL;
                          
#line 3060 
                          tmp_58 = tmp_57;
                        }
                        else 
#line 3060 
                             tmp_58 = 144115188075855872UL;
                        
#line 3060 
                        tmp_59 = tmp_58;
                      }
                      else 
#line 3060 
                           tmp_59 = 288230376151711744UL;
                      
#line 3060 
                      tmp_60 = tmp_59;
                    }
                    else 
#line 3060 
                         tmp_60 = 576460752303423488UL;
                    
#line 3060 
                    tmp_61 = tmp_60;
                  }
                  else 
#line 3060 
                       tmp_61 = 1152921504606846976UL;
                  
#line 3060 
                  tmp_62 = tmp_61;
                }
                else 
#line 3060 
                     tmp_62 = 2305843009213693952UL;
                
#line 3060 
                tmp_63 = tmp_62;
              }
              else 
#line 3060 
                   tmp_63 = 4611686018427387904UL;
              
#line 3060 
              tmp_64 = tmp_63;
            }
            else 
#line 3060 
                 tmp_64 = 9223372036854775808UL;
            
#line 3060 
            tmp_65 = tmp_64;
          }
          
#line 3060 
          tmp_67 = tmp_65;
        }
        else {
          int tmp_66;
          
#line 3060 
          tmp_66 = __ilog2_u32(adap->vres.ocq.size + 4294967295U);
          
#line 3060 
          tmp_67 = 1UL << (tmp_66 + 1);
        }
        
#line 3060 
        tmp_68 = tmp_67;
      }
      else 
#line 3060 
           tmp_68 = 1UL;
      
#line 3060 
      tmp_70 = tmp_68;
    }
    else 
#line 3060 
         tmp_70 = __roundup_pow_of_two((unsigned long)adap->vres.ocq.size);
    
#line 3060 
    start = (unsigned int)(tmp - (unsigned long long)tmp_70) + start;
    
#line 3061 
    if (0 != 0) {
      unsigned int tmp_139;
      
#line 3061 
      if (adap->vres.ocq.size != 1U) {
        unsigned int tmp_138;
        
#line 3061 
        if (0 != 0) {
          unsigned int tmp_136;
          
#line 3061 
          if (adap->vres.ocq.size == 1U) {
            int tmp_71;
            
#line 3061 
            tmp_71 = ____ilog2_NaN();
            
#line 3061 
            tmp_136 = (unsigned int)((1UL << (tmp_71 + 1)) >> 10);
          }
          else {
            unsigned int tmp_135;
            
#line 3061 
            if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 4611686018427387904ULL) == 0ULL) {
              unsigned int tmp_134;
              
#line 3061 
              if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 2305843009213693952ULL) == 0ULL) {
                unsigned int tmp_133;
                
#line 3061 
                if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 1152921504606846976ULL) == 0ULL) {
                  unsigned int tmp_132;
                  
#line 3061 
                  if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 576460752303423488ULL) == 0ULL) {
                    unsigned int tmp_131;
                    
#line 3061 
                    if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 288230376151711744ULL) == 0ULL) {
                      unsigned int tmp_130;
                      
#line 3061 
                      if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 144115188075855872ULL) == 0ULL) {
                        unsigned int tmp_129;
                        
#line 3061 
                        if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 72057594037927936ULL) == 0ULL) {
                          unsigned int tmp_128;
                          
#line 3061 
                          if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 36028797018963968ULL) == 0ULL) {
                            unsigned int tmp_127;
                            
#line 3061 
                            if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 18014398509481984ULL) == 0ULL) {
                              unsigned int tmp_126;
                              
#line 3061 
                              if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 9007199254740992ULL) == 0ULL) {
                                unsigned int tmp_125;
                                
#line 3061 
                                if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 4503599627370496ULL) == 0ULL) {
                                  unsigned int tmp_124;
                                  
#line 3061 
                                  if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 2251799813685248ULL) == 0ULL) {
                                    unsigned int tmp_123;
                                    
#line 3061 
                                    if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 1125899906842624ULL) == 0ULL) {
                                      unsigned int tmp_122;
                                      
#line 3061 
                                      if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 562949953421312ULL) == 0ULL) {
                                        unsigned int tmp_121;
                                        
#line 3061 
                                        if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 281474976710656ULL) == 0ULL) {
                                          unsigned int tmp_120;
                                          
#line 3061 
                                          if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 140737488355328ULL) == 0ULL) {
                                            unsigned int tmp_119;
                                            
#line 3061 
                                            if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 70368744177664ULL) == 0ULL) {
                                              unsigned int tmp_118;
                                              
#line 3061 
                                              if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 35184372088832ULL) == 0ULL) {
                                                unsigned int tmp_117;
                                                
#line 3061 
                                                if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 17592186044416ULL) == 0ULL) {
                                                  unsigned int tmp_116;
                                                  
#line 3061 
                                                  if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 8796093022208ULL) == 0ULL) {
                                                    unsigned int tmp_115;
                                                    
#line 3061 
                                                    if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 4398046511104ULL) == 0ULL) {
                                                      unsigned int tmp_114;
                                                      
#line 3061 
                                                      if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 2199023255552ULL) == 0ULL) {
                                                        unsigned int tmp_113;
                                                        
#line 3061 
                                                        if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 1099511627776ULL) == 0ULL) {
                                                          unsigned int tmp_112;
                                                          
#line 3061 
                                                          if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 549755813888ULL) == 0ULL) {
                                                            unsigned int tmp_111;
                                                            
#line 3061 
                                                            if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 274877906944ULL) == 0ULL) {
                                                              unsigned int tmp_110;
                                                              
#line 3061 
                                                              if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 137438953472ULL) == 0ULL) {
                                                                unsigned int tmp_109;
                                                                
#line 3061 
                                                                if (((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 68719476736ULL) == 0ULL) {
                                                                  unsigned int tmp_108;
                                                                  
#line 3061 
                                                                  if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 34359738368ULL) == 0ULL) {
                                                                    unsigned int tmp_107;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 17179869184ULL) == 0ULL) {
                                                                    unsigned int tmp_106;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 8589934592ULL) == 0ULL) {
                                                                    unsigned int tmp_105;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 4294967296ULL) == 0ULL) {
                                                                    unsigned int tmp_104;
                                                                    
#line 3061 
                                                                    if (
                                                                    adap->vres.ocq.size + 4294967295U >= (unsigned int)0) {
                                                                    unsigned int tmp_103;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 1073741824ULL) == 0ULL) {
                                                                    unsigned int tmp_102;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 536870912ULL) == 0ULL) {
                                                                    unsigned int tmp_101;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 268435456ULL) == 0ULL) {
                                                                    unsigned int tmp_100;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 134217728ULL) == 0ULL) {
                                                                    unsigned int tmp_99;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 67108864ULL) == 0ULL) {
                                                                    unsigned int tmp_98;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 33554432ULL) == 0ULL) {
                                                                    unsigned int tmp_97;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 16777216ULL) == 0ULL) {
                                                                    unsigned int tmp_96;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 8388608ULL) == 0ULL) {
                                                                    unsigned int tmp_95;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 4194304ULL) == 0ULL) {
                                                                    unsigned int tmp_94;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 2097152ULL) == 0ULL) {
                                                                    unsigned int tmp_93;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 1048576ULL) == 0ULL) {
                                                                    unsigned int tmp_92;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 524288ULL) == 0ULL) {
                                                                    unsigned int tmp_91;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 262144ULL) == 0ULL) {
                                                                    unsigned int tmp_90;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 131072ULL) == 0ULL) {
                                                                    unsigned int tmp_89;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 65536ULL) == 0ULL) {
                                                                    unsigned int tmp_88;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 32768ULL) == 0ULL) {
                                                                    unsigned int tmp_87;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 16384ULL) == 0ULL) {
                                                                    unsigned int tmp_86;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 8192ULL) == 0ULL) {
                                                                    unsigned int tmp_85;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 4096ULL) == 0ULL) {
                                                                    unsigned int tmp_84;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 2048ULL) == 0ULL) {
                                                                    unsigned int tmp_83;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 1024ULL) == 0ULL) {
                                                                    unsigned int tmp_82;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 512ULL) == 0ULL) {
                                                                    unsigned int tmp_81;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 256ULL) == 0ULL) {
                                                                    unsigned int tmp_80;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 128ULL) == 0ULL) {
                                                                    unsigned int tmp_79;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 64ULL) == 0ULL) {
                                                                    unsigned int tmp_78;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 32ULL) == 0ULL) {
                                                                    unsigned int tmp_77;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 16ULL) == 0ULL) {
                                                                    unsigned int tmp_76;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 8ULL) == 0ULL) {
                                                                    unsigned int tmp_75;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 4ULL) == 0ULL) {
                                                                    unsigned int tmp_74;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 2ULL) == 0ULL) {
                                                                    unsigned int tmp_73;
                                                                    
#line 3061 
                                                                    if (
                                                                    ((unsigned long long)(adap->vres.ocq.size + 4294967295U) & 1ULL) == 0ULL) {
                                                                    int tmp_72;
                                                                    
#line 3061 
                                                                    tmp_72 = ____ilog2_NaN();
                                                                    
#line 3061 
                                                                    tmp_73 = (unsigned int)((1UL << (tmp_72 + 1)) >> 10);
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_73 = 0U;
                                                                    
#line 3061 
                                                                    tmp_74 = tmp_73;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_74 = 0U;
                                                                    
#line 3061 
                                                                    tmp_75 = tmp_74;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_75 = 0U;
                                                                    
#line 3061 
                                                                    tmp_76 = tmp_75;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_76 = 0U;
                                                                    
#line 3061 
                                                                    tmp_77 = tmp_76;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_77 = 0U;
                                                                    
#line 3061 
                                                                    tmp_78 = tmp_77;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_78 = 0U;
                                                                    
#line 3061 
                                                                    tmp_79 = tmp_78;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_79 = 0U;
                                                                    
#line 3061 
                                                                    tmp_80 = tmp_79;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_80 = 0U;
                                                                    
#line 3061 
                                                                    tmp_81 = tmp_80;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_81 = 0U;
                                                                    
#line 3061 
                                                                    tmp_82 = tmp_81;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_82 = 1U;
                                                                    
#line 3061 
                                                                    tmp_83 = tmp_82;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_83 = 2U;
                                                                    
#line 3061 
                                                                    tmp_84 = tmp_83;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_84 = 4U;
                                                                    
#line 3061 
                                                                    tmp_85 = tmp_84;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_85 = 8U;
                                                                    
#line 3061 
                                                                    tmp_86 = tmp_85;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_86 = 16U;
                                                                    
#line 3061 
                                                                    tmp_87 = tmp_86;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_87 = 32U;
                                                                    
#line 3061 
                                                                    tmp_88 = tmp_87;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_88 = 64U;
                                                                    
#line 3061 
                                                                    tmp_89 = tmp_88;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_89 = 128U;
                                                                    
#line 3061 
                                                                    tmp_90 = tmp_89;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_90 = 256U;
                                                                    
#line 3061 
                                                                    tmp_91 = tmp_90;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_91 = 512U;
                                                                    
#line 3061 
                                                                    tmp_92 = tmp_91;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_92 = 1024U;
                                                                    
#line 3061 
                                                                    tmp_93 = tmp_92;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_93 = 2048U;
                                                                    
#line 3061 
                                                                    tmp_94 = tmp_93;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_94 = 4096U;
                                                                    
#line 3061 
                                                                    tmp_95 = tmp_94;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_95 = 8192U;
                                                                    
#line 3061 
                                                                    tmp_96 = tmp_95;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_96 = 16384U;
                                                                    
#line 3061 
                                                                    tmp_97 = tmp_96;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_97 = 32768U;
                                                                    
#line 3061 
                                                                    tmp_98 = tmp_97;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_98 = 65536U;
                                                                    
#line 3061 
                                                                    tmp_99 = tmp_98;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_99 = 131072U;
                                                                    
#line 3061 
                                                                    tmp_100 = tmp_99;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_100 = 262144U;
                                                                    
#line 3061 
                                                                    tmp_101 = tmp_100;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_101 = 524288U;
                                                                    
#line 3061 
                                                                    tmp_102 = tmp_101;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_102 = 1048576U;
                                                                    
#line 3061 
                                                                    tmp_103 = tmp_102;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_103 = 2097152U;
                                                                    
#line 3061 
                                                                    tmp_104 = tmp_103;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_104 = 4194304U;
                                                                    
#line 3061 
                                                                    tmp_105 = tmp_104;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_105 = 8388608U;
                                                                    
#line 3061 
                                                                    tmp_106 = tmp_105;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_106 = 16777216U;
                                                                    
#line 3061 
                                                                    tmp_107 = tmp_106;
                                                                    }
                                                                    else 
                                                                    
#line 3061 
                                                                    tmp_107 = 33554432U;
                                                                    
#line 3061 
                                                                    tmp_108 = tmp_107;
                                                                  }
                                                                  else 
                                                                    
#line 3061 
                                                                    tmp_108 = 67108864U;
                                                                  
#line 3061 
                                                                  tmp_109 = tmp_108;
                                                                }
                                                                else 
                                                                  
#line 3061 
                                                                  tmp_109 = 134217728U;
                                                                
#line 3061 
                                                                tmp_110 = tmp_109;
                                                              }
                                                              else 
#line 3061 
                                                                   tmp_110 = 268435456U;
                                                              
#line 3061 
                                                              tmp_111 = tmp_110;
                                                            }
                                                            else 
#line 3061 
                                                                 tmp_111 = 536870912U;
                                                            
#line 3061 
                                                            tmp_112 = tmp_111;
                                                          }
                                                          else 
#line 3061 
                                                               tmp_112 = 1073741824U;
                                                          
#line 3061 
                                                          tmp_113 = tmp_112;
                                                        }
                                                        else 
#line 3061 
                                                             tmp_113 = 2147483648U;
                                                        
#line 3061 
                                                        tmp_114 = tmp_113;
                                                      }
                                                      else 
#line 3061 
                                                           tmp_114 = 0U;
                                                      
#line 3061 
                                                      tmp_115 = tmp_114;
                                                    }
                                                    else 
#line 3061 
                                                         tmp_115 = 0U;
                                                    
#line 3061 
                                                    tmp_116 = tmp_115;
                                                  }
                                                  else 
#line 3061 
                                                       tmp_116 = 0U;
                                                  
#line 3061 
                                                  tmp_117 = tmp_116;
                                                }
                                                else 
#line 3061 
                                                     tmp_117 = 0U;
                                                
#line 3061 
                                                tmp_118 = tmp_117;
                                              }
                                              else 
#line 3061 
                                                   tmp_118 = 0U;
                                              
#line 3061 
                                              tmp_119 = tmp_118;
                                            }
                                            else 
#line 3061 
                                                 tmp_119 = 0U;
                                            
#line 3061 
                                            tmp_120 = tmp_119;
                                          }
                                          else 
#line 3061 
                                               tmp_120 = 0U;
                                          
#line 3061 
                                          tmp_121 = tmp_120;
                                        }
                                        else 
#line 3061 
                                             tmp_121 = 0U;
                                        
#line 3061 
                                        tmp_122 = tmp_121;
                                      }
                                      else 
#line 3061 
                                           tmp_122 = 0U;
                                      
#line 3061 
                                      tmp_123 = tmp_122;
                                    }
                                    else 
#line 3061 
                                         tmp_123 = 0U;
                                    
#line 3061 
                                    tmp_124 = tmp_123;
                                  }
                                  else 
#line 3061 
                                       tmp_124 = 0U;
                                  
#line 3061 
                                  tmp_125 = tmp_124;
                                }
                                else 
#line 3061 
                                     tmp_125 = 0U;
                                
#line 3061 
                                tmp_126 = tmp_125;
                              }
                              else 
#line 3061 
                                   tmp_126 = 0U;
                              
#line 3061 
                              tmp_127 = tmp_126;
                            }
                            else 
#line 3061 
                                 tmp_127 = 0U;
                            
#line 3061 
                            tmp_128 = tmp_127;
                          }
                          else 
#line 3061 
                               tmp_128 = 0U;
                          
#line 3061 
                          tmp_129 = tmp_128;
                        }
                        else 
#line 3061 
                             tmp_129 = 0U;
                        
#line 3061 
                        tmp_130 = tmp_129;
                      }
                      else 
#line 3061 
                           tmp_130 = 0U;
                      
#line 3061 
                      tmp_131 = tmp_130;
                    }
                    else 
#line 3061 
                         tmp_131 = 0U;
                    
#line 3061 
                    tmp_132 = tmp_131;
                  }
                  else 
#line 3061 
                       tmp_132 = 0U;
                  
#line 3061 
                  tmp_133 = tmp_132;
                }
                else 
#line 3061 
                     tmp_133 = 0U;
                
#line 3061 
                tmp_134 = tmp_133;
              }
              else 
#line 3061 
                   tmp_134 = 0U;
              
#line 3061 
              tmp_135 = tmp_134;
            }
            else 
#line 3061 
                 tmp_135 = 0U;
            
#line 3061 
            tmp_136 = tmp_135;
          }
          
#line 3061 
          tmp_138 = tmp_136;
        }
        else {
          int tmp_137;
          
#line 3061 
          tmp_137 = __ilog2_u32(adap->vres.ocq.size + 4294967295U);
          
#line 3061 
          tmp_138 = (unsigned int)((1UL << (tmp_137 + 1)) >> 10);
        }
        
#line 3061 
        tmp_139 = tmp_138;
      }
      else 
#line 3061 
           tmp_139 = 0U;
      
#line 3061 
      sz_kb = tmp_139;
    }
    else {
      unsigned long tmp_140;
      
#line 3061 
      tmp_140 = __roundup_pow_of_two((unsigned long)adap->vres.ocq.size);
      
#line 3061 
      sz_kb = (unsigned int)(tmp_140 >> 10);
    }
    
#line 3064 
    if (0 != 0) {
      int tmp_206;
      
#line 3064 
      if (sz_kb == 0U) 
#line 3064 
                       tmp_206 = ____ilog2_NaN();
      else {
        int tmp_205;
        
#line 3064 
        if (((unsigned long long)sz_kb & 4611686018427387904ULL) == 0ULL) {
          int tmp_204;
          
#line 3064 
          if (((unsigned long long)sz_kb & 2305843009213693952ULL) == 0ULL) {
            int tmp_203;
            
#line 3064 
            if (((unsigned long long)sz_kb & 1152921504606846976ULL) == 0ULL) {
              int tmp_202;
              
#line 3064 
              if (((unsigned long long)sz_kb & 576460752303423488ULL) == 0ULL) {
                int tmp_201;
                
#line 3064 
                if (((unsigned long long)sz_kb & 288230376151711744ULL) == 0ULL) {
                  int tmp_200;
                  
#line 3064 
                  if (((unsigned long long)sz_kb & 144115188075855872ULL) == 0ULL) {
                    int tmp_199;
                    
#line 3064 
                    if (((unsigned long long)sz_kb & 72057594037927936ULL) == 0ULL) {
                      int tmp_198;
                      
#line 3064 
                      if (((unsigned long long)sz_kb & 36028797018963968ULL) == 0ULL) {
                        int tmp_197;
                        
#line 3064 
                        if (((unsigned long long)sz_kb & 18014398509481984ULL) == 0ULL) {
                          int tmp_196;
                          
#line 3064 
                          if (((unsigned long long)sz_kb & 9007199254740992ULL) == 0ULL) {
                            int tmp_195;
                            
#line 3064 
                            if (((unsigned long long)sz_kb & 4503599627370496ULL) == 0ULL) {
                              int tmp_194;
                              
#line 3064 
                              if (((unsigned long long)sz_kb & 2251799813685248ULL) == 0ULL) {
                                int tmp_193;
                                
#line 3064 
                                if (((unsigned long long)sz_kb & 1125899906842624ULL) == 0ULL) {
                                  int tmp_192;
                                  
#line 3064 
                                  if (((unsigned long long)sz_kb & 562949953421312ULL) == 0ULL) {
                                    int tmp_191;
                                    
#line 3064 
                                    if (((unsigned long long)sz_kb & 281474976710656ULL) == 0ULL) {
                                      int tmp_190;
                                      
#line 3064 
                                      if (((unsigned long long)sz_kb & 140737488355328ULL) == 0ULL) {
                                        int tmp_189;
                                        
#line 3064 
                                        if (((unsigned long long)sz_kb & 70368744177664ULL) == 0ULL) {
                                          int tmp_188;
                                          
#line 3064 
                                          if (((unsigned long long)sz_kb & 35184372088832ULL) == 0ULL) {
                                            int tmp_187;
                                            
#line 3064 
                                            if (((unsigned long long)sz_kb & 17592186044416ULL) == 0ULL) {
                                              int tmp_186;
                                              
#line 3064 
                                              if (((unsigned long long)sz_kb & 8796093022208ULL) == 0ULL) {
                                                int tmp_185;
                                                
#line 3064 
                                                if (((unsigned long long)sz_kb & 4398046511104ULL) == 0ULL) {
                                                  int tmp_184;
                                                  
#line 3064 
                                                  if (((unsigned long long)sz_kb & 2199023255552ULL) == 0ULL) {
                                                    int tmp_183;
                                                    
#line 3064 
                                                    if (((unsigned long long)sz_kb & 1099511627776ULL) == 0ULL) {
                                                      int tmp_182;
                                                      
#line 3064 
                                                      if (((unsigned long long)sz_kb & 549755813888ULL) == 0ULL) {
                                                        int tmp_181;
                                                        
#line 3064 
                                                        if (((unsigned long long)sz_kb & 274877906944ULL) == 0ULL) {
                                                          int tmp_180;
                                                          
#line 3064 
                                                          if (((unsigned long long)sz_kb & 137438953472ULL) == 0ULL) {
                                                            int tmp_179;
                                                            
#line 3064 
                                                            if (((unsigned long long)sz_kb & 68719476736ULL) == 0ULL) {
                                                              int tmp_178;
                                                              
#line 3064 
                                                              if (((unsigned long long)sz_kb & 34359738368ULL) == 0ULL) {
                                                                int tmp_177;
                                                                
#line 3064 
                                                                if (((unsigned long long)sz_kb & 17179869184ULL) == 0ULL) {
                                                                  int tmp_176;
                                                                  
#line 3064 
                                                                  if (
                                                                    ((unsigned long long)sz_kb & 8589934592ULL) == 0ULL) {
                                                                    int tmp_175;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 4294967296ULL) == 0ULL) {
                                                                    int tmp_174;
                                                                    
#line 3064 
                                                                    if (
                                                                    sz_kb >= (unsigned int)0) {
                                                                    int tmp_173;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 1073741824ULL) == 0ULL) {
                                                                    int tmp_172;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 536870912ULL) == 0ULL) {
                                                                    int tmp_171;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 268435456ULL) == 0ULL) {
                                                                    int tmp_170;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 134217728ULL) == 0ULL) {
                                                                    int tmp_169;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 67108864ULL) == 0ULL) {
                                                                    int tmp_168;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 33554432ULL) == 0ULL) {
                                                                    int tmp_167;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 16777216ULL) == 0ULL) {
                                                                    int tmp_166;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 8388608ULL) == 0ULL) {
                                                                    int tmp_165;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 4194304ULL) == 0ULL) {
                                                                    int tmp_164;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 2097152ULL) == 0ULL) {
                                                                    int tmp_163;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 1048576ULL) == 0ULL) {
                                                                    int tmp_162;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 524288ULL) == 0ULL) {
                                                                    int tmp_161;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 262144ULL) == 0ULL) {
                                                                    int tmp_160;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 131072ULL) == 0ULL) {
                                                                    int tmp_159;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 65536ULL) == 0ULL) {
                                                                    int tmp_158;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 32768ULL) == 0ULL) {
                                                                    int tmp_157;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 16384ULL) == 0ULL) {
                                                                    int tmp_156;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 8192ULL) == 0ULL) {
                                                                    int tmp_155;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 4096ULL) == 0ULL) {
                                                                    int tmp_154;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 2048ULL) == 0ULL) {
                                                                    int tmp_153;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 1024ULL) == 0ULL) {
                                                                    int tmp_152;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 512ULL) == 0ULL) {
                                                                    int tmp_151;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 256ULL) == 0ULL) {
                                                                    int tmp_150;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 128ULL) == 0ULL) {
                                                                    int tmp_149;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 64ULL) == 0ULL) {
                                                                    int tmp_148;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 32ULL) == 0ULL) {
                                                                    int tmp_147;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 16ULL) == 0ULL) {
                                                                    int tmp_146;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 8ULL) == 0ULL) {
                                                                    int tmp_145;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 4ULL) == 0ULL) {
                                                                    int tmp_144;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 2ULL) == 0ULL) {
                                                                    int tmp_143;
                                                                    
#line 3064 
                                                                    if (
                                                                    ((unsigned long long)sz_kb & 1ULL) == 0ULL) 
                                                                    
#line 3064 
                                                                    tmp_143 = ____ilog2_NaN(); else 
                                                                    
#line 3064 
                                                                    tmp_143 = 0;
                                                                    
#line 3064 
                                                                    tmp_144 = tmp_143;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_144 = 1;
                                                                    
#line 3064 
                                                                    tmp_145 = tmp_144;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_145 = 2;
                                                                    
#line 3064 
                                                                    tmp_146 = tmp_145;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_146 = 3;
                                                                    
#line 3064 
                                                                    tmp_147 = tmp_146;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_147 = 4;
                                                                    
#line 3064 
                                                                    tmp_148 = tmp_147;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_148 = 5;
                                                                    
#line 3064 
                                                                    tmp_149 = tmp_148;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_149 = 6;
                                                                    
#line 3064 
                                                                    tmp_150 = tmp_149;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_150 = 7;
                                                                    
#line 3064 
                                                                    tmp_151 = tmp_150;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_151 = 8;
                                                                    
#line 3064 
                                                                    tmp_152 = tmp_151;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_152 = 9;
                                                                    
#line 3064 
                                                                    tmp_153 = tmp_152;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_153 = 10;
                                                                    
#line 3064 
                                                                    tmp_154 = tmp_153;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_154 = 11;
                                                                    
#line 3064 
                                                                    tmp_155 = tmp_154;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_155 = 12;
                                                                    
#line 3064 
                                                                    tmp_156 = tmp_155;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_156 = 13;
                                                                    
#line 3064 
                                                                    tmp_157 = tmp_156;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_157 = 14;
                                                                    
#line 3064 
                                                                    tmp_158 = tmp_157;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_158 = 15;
                                                                    
#line 3064 
                                                                    tmp_159 = tmp_158;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_159 = 16;
                                                                    
#line 3064 
                                                                    tmp_160 = tmp_159;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_160 = 17;
                                                                    
#line 3064 
                                                                    tmp_161 = tmp_160;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_161 = 18;
                                                                    
#line 3064 
                                                                    tmp_162 = tmp_161;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_162 = 19;
                                                                    
#line 3064 
                                                                    tmp_163 = tmp_162;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_163 = 20;
                                                                    
#line 3064 
                                                                    tmp_164 = tmp_163;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_164 = 21;
                                                                    
#line 3064 
                                                                    tmp_165 = tmp_164;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_165 = 22;
                                                                    
#line 3064 
                                                                    tmp_166 = tmp_165;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_166 = 23;
                                                                    
#line 3064 
                                                                    tmp_167 = tmp_166;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_167 = 24;
                                                                    
#line 3064 
                                                                    tmp_168 = tmp_167;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_168 = 25;
                                                                    
#line 3064 
                                                                    tmp_169 = tmp_168;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_169 = 26;
                                                                    
#line 3064 
                                                                    tmp_170 = tmp_169;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_170 = 27;
                                                                    
#line 3064 
                                                                    tmp_171 = tmp_170;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_171 = 28;
                                                                    
#line 3064 
                                                                    tmp_172 = tmp_171;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_172 = 29;
                                                                    
#line 3064 
                                                                    tmp_173 = tmp_172;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_173 = 30;
                                                                    
#line 3064 
                                                                    tmp_174 = tmp_173;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_174 = 31;
                                                                    
#line 3064 
                                                                    tmp_175 = tmp_174;
                                                                    }
                                                                    else 
                                                                    
#line 3064 
                                                                    tmp_175 = 32;
                                                                    
#line 3064 
                                                                    tmp_176 = tmp_175;
                                                                  }
                                                                  else 
                                                                    
#line 3064 
                                                                    tmp_176 = 33;
                                                                  
#line 3064 
                                                                  tmp_177 = tmp_176;
                                                                }
                                                                else 
                                                                  
#line 3064 
                                                                  tmp_177 = 34;
                                                                
#line 3064 
                                                                tmp_178 = tmp_177;
                                                              }
                                                              else 
#line 3064 
                                                                   tmp_178 = 35;
                                                              
#line 3064 
                                                              tmp_179 = tmp_178;
                                                            }
                                                            else 
#line 3064 
                                                                 tmp_179 = 36;
                                                            
#line 3064 
                                                            tmp_180 = tmp_179;
                                                          }
                                                          else 
#line 3064 
                                                               tmp_180 = 37;
                                                          
#line 3064 
                                                          tmp_181 = tmp_180;
                                                        }
                                                        else 
#line 3064 
                                                             tmp_181 = 38;
                                                        
#line 3064 
                                                        tmp_182 = tmp_181;
                                                      }
                                                      else 
#line 3064 
                                                           tmp_182 = 39;
                                                      
#line 3064 
                                                      tmp_183 = tmp_182;
                                                    }
                                                    else 
#line 3064 
                                                         tmp_183 = 40;
                                                    
#line 3064 
                                                    tmp_184 = tmp_183;
                                                  }
                                                  else 
#line 3064 
                                                       tmp_184 = 41;
                                                  
#line 3064 
                                                  tmp_185 = tmp_184;
                                                }
                                                else 
#line 3064 
                                                     tmp_185 = 42;
                                                
#line 3064 
                                                tmp_186 = tmp_185;
                                              }
                                              else 
#line 3064 
                                                   tmp_186 = 43;
                                              
#line 3064 
                                              tmp_187 = tmp_186;
                                            }
                                            else 
#line 3064 
                                                 tmp_187 = 44;
                                            
#line 3064 
                                            tmp_188 = tmp_187;
                                          }
                                          else 
#line 3064 
                                               tmp_188 = 45;
                                          
#line 3064 
                                          tmp_189 = tmp_188;
                                        }
                                        else 
#line 3064 
                                             tmp_189 = 46;
                                        
#line 3064 
                                        tmp_190 = tmp_189;
                                      }
                                      else 
#line 3064 
                                           tmp_190 = 47;
                                      
#line 3064 
                                      tmp_191 = tmp_190;
                                    }
                                    else 
#line 3064 
                                         tmp_191 = 48;
                                    
#line 3064 
                                    tmp_192 = tmp_191;
                                  }
                                  else 
#line 3064 
                                       tmp_192 = 49;
                                  
#line 3064 
                                  tmp_193 = tmp_192;
                                }
                                else 
#line 3064 
                                     tmp_193 = 50;
                                
#line 3064 
                                tmp_194 = tmp_193;
                              }
                              else 
#line 3064 
                                   tmp_194 = 51;
                              
#line 3064 
                              tmp_195 = tmp_194;
                            }
                            else 
#line 3064 
                                 tmp_195 = 52;
                            
#line 3064 
                            tmp_196 = tmp_195;
                          }
                          else 
#line 3064 
                               tmp_196 = 53;
                          
#line 3064 
                          tmp_197 = tmp_196;
                        }
                        else 
#line 3064 
                             tmp_197 = 54;
                        
#line 3064 
                        tmp_198 = tmp_197;
                      }
                      else 
#line 3064 
                           tmp_198 = 55;
                      
#line 3064 
                      tmp_199 = tmp_198;
                    }
                    else 
#line 3064 
                         tmp_199 = 56;
                    
#line 3064 
                    tmp_200 = tmp_199;
                  }
                  else 
#line 3064 
                       tmp_200 = 57;
                  
#line 3064 
                  tmp_201 = tmp_200;
                }
                else 
#line 3064 
                     tmp_201 = 58;
                
#line 3064 
                tmp_202 = tmp_201;
              }
              else 
#line 3064 
                   tmp_202 = 59;
              
#line 3064 
              tmp_203 = tmp_202;
            }
            else 
#line 3064 
                 tmp_203 = 60;
            
#line 3064 
            tmp_204 = tmp_203;
          }
          else 
#line 3064 
               tmp_204 = 61;
          
#line 3064 
          tmp_205 = tmp_204;
        }
        else 
#line 3064 
             tmp_205 = 62;
        
#line 3064 
        tmp_206 = tmp_205;
      }
      
#line 3064 
      tmp_208 = tmp_206;
    }
    else 
#line 3064 
         tmp_208 = __ilog2_u32(sz_kb);
    
#line 3062 
    ;
    
#line 3062 
    ;
    
#line 3062 
    t4_write_reg(adap,12416U,((unsigned int)tmp_208 | start) | 256U);
    
#line 3065 
    t4_write_reg(adap,12420U,adap->vres.ocq.start);
    
#line 3068 
    t4_read_reg(adap,12420U);
  }
  else ;
  
#line 3070 
  return;
}


#line 3073  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int adap_init1(struct adapter *adap, struct fw_caps_config_cmd *c)
{
  int __retres;
  u32 v;
  int ret;
  int tmp;
  int tmp_0;
  
#line 3079 
  memset((void *)c,0,48UL);
  
#line 3080 
  c->op_to_write = 49159U;
  
#line 3082 
  c->cfvalid_to_len16 = 50331648U;
  
#line 3083 
  ret = t4_wr_mbox(adap,(int)adap->mbox,(void const *)c,48,(void *)c);
  
#line 3084 
  if (ret < 0) {
    
#line 3085 
    __retres = ret;
    
#line 3085 
    goto return_label;
  }
  else ;
  
#line 3088 
  if (((int)c->niccaps & 512) != 0) 
    
#line 3089 
    if (! vf_acls) 
#line 3090 
                   c->niccaps = (unsigned short)((unsigned int)c->niccaps ^ 512U); else 
                                                                    
#line 3092 
                                                                    c->niccaps = (unsigned short)512U;
  else 
    
#line 3093 
    if ((int)vf_acls != 0) {
      
#line 3094 
      dev_err((struct device const *)adap->pdev_dev,"virtualization ACLs not supported");
      
#line 3095 
      __retres = ret;
      
#line 3095 
      goto return_label;
    }
    else ;
  
#line 3097 
  c->op_to_write = 40967U;
  
#line 3099 
  ret = t4_wr_mbox(adap,(int)adap->mbox,(void const *)c,48,(void *)0);
  
#line 3100 
  if (ret < 0) {
    
#line 3101 
    __retres = ret;
    
#line 3101 
    goto return_label;
  }
  else ;
  
#line 3103 
  ret = t4_config_glbl_rss(adap,(int)adap->pf,1U,6U);
  
#line 3107 
  if (ret < 0) {
    
#line 3108 
    __retres = ret;
    
#line 3108 
    goto return_label;
  }
  else ;
  
#line 3110 
  ret = t4_cfg_pfvf(adap,adap->mbox,adap->pf,0U,adap->sge.egr_sz,64U,90U,0U,0U,4U,15U,15U,16U,1U,1U);
  
#line 3113 
  if (ret < 0) {
    
#line 3114 
    __retres = ret;
    
#line 3114 
    goto return_label;
  }
  else ;
  
#line 3116 
  t4_sge_init(adap);
  
#line 3119 
  t4_write_reg(adap,32192U,105875529U);
  
#line 3120 
  t4_write_reg(adap,102776U,0U);
  
#line 3121 
  t4_write_reg(adap,32320U,321U);
  
#line 3122 
  v = t4_read_reg(adap,32324U);
  
#line 3123 
  t4_write_reg(adap,32324U,v & 4294966271U);
  
#line 3126 
  adap->params.tp.tx_modq_map = (unsigned short)228U;
  
#line 3127 
  t4_write_reg(adap,32296U,(unsigned int)adap->params.tp.tx_modq_map);
  
#line 3131 
  v = 2216789025U;
  
#line 3132 
  t4_write_indirect(adap,32320U,32324U,(u32 const *)(& v),1U,35U);
  
#line 3134 
  t4_write_indirect(adap,32320U,32324U,(u32 const *)(& v),1U,36U);
  
#line 3136 
  t4_write_indirect(adap,32320U,32324U,(u32 const *)(& v),1U,37U);
  
#line 3140 
  tmp = is_offload((struct adapter const *)adap);
  
#line 3140 
  if (tmp != 0) {
    
#line 3141 
    t4_write_reg(adap,32304U,269488144U);
    
#line 3146 
    t4_write_reg(adap,32308U,269488144U);
  }
  else ;
  
#line 3154 
  tmp_0 = t4_early_init(adap,adap->pf);
  
#line 3154 
  __retres = tmp_0;
  return_label: 
#line 3154 
                return __retres;
}


#line 3178  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int adap_init0_tweaks(struct adapter *adapter)
{
  int __retres;
  
#line 3185 
  t4_fixup_host_params(adapter,4096U,64U);
  
#line 3190 
  if (rx_dma_offset != 2 && rx_dma_offset != 0) {
    
#line 3191 
    dev_err((struct device const *)(& (adapter->pdev)->dev),"Ignoring illegal rx_dma_offset=%d, using 2\n",rx_dma_offset);
    
#line 3194 
    rx_dma_offset = 2;
  }
  else ;
  
#line 3196 
  t4_set_reg_field(adapter,4104U,7168U,(unsigned int)(rx_dma_offset << 10));
  
#line 3204 
  t4_tp_wr_bits_indirect(adapter,321U,1024U,0U);
  
#line 3207 
  __retres = 0;
  
#line 3207 
  return __retres;
}


#line 3214  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int phy_aq1202_version(u8 const *phy_fw_data, size_t phy_fw_size)
{
  int __retres;
  int offset;
  
#line 3232 
  offset = (((int)*(phy_fw_data + 8U) | ((int)*(phy_fw_data + 9U) << 8)) | ((int)*(phy_fw_data + 10U) << 16)) << 12;
  
#line 3233 
  offset = ((int)*(phy_fw_data + ((unsigned int)offset + 10U)) | ((int)*(phy_fw_data + ((unsigned int)offset + 11U)) << 8)) | ((int)*(phy_fw_data + ((unsigned int)offset + 12U)) << 16);
  
#line 3234 
  __retres = ((int)*(phy_fw_data + ((unsigned int)offset + 638U)) << 8) | (int)*(phy_fw_data + ((unsigned int)offset + 639U));
  
#line 3234 
  return __retres;
}


#line 3246  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static struct info_10gbt_phy_fw phy_info_array[3U] = {{.phy_fw_id = 17417U, .phy_fw_file = (char *)"cxgb4/aq1202_fw.cld", .phy_fw_version = & phy_aq1202_version, .phy_flash = 1}, {.phy_fw_id = 17542U, .phy_fw_file = (char *)"cxgb4/bcm8483.bin", .phy_fw_version = (int (*)(u8 const *, size_t ))0, .phy_flash = 0}, {.phy_fw_id = 0U, .phy_fw_file = (char *)0, .phy_fw_version = (int (*)(u8 const *, size_t ))0, .phy_flash = 0}};

#line 3262  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static struct info_10gbt_phy_fw *find_phy_info(int devid)
{
  struct info_10gbt_phy_fw *__retres;
  int i;
  
#line 3266 
  i = 0;
  
#line 3266 
  goto ldv_60058;
  ldv_60057: 
#line 3267 
  ;
  
#line 3267 
  if (phy_info_array[i].phy_fw_id == (unsigned int)devid) {
    
#line 3268 
    __retres = & phy_info_array[i];
    
#line 3268 
    goto return_label;
  }
  else ;
  
#line 3266 
  i += 1;
  ldv_60058: 
#line 3267 
  ;
  
#line 3266 
  if ((unsigned int)i <= 2U) 
#line 3268 
                             goto ldv_60057; else 
#line 3271 
                                                  goto ldv_60059;
  ldv_60059: 
#line 3272 
  ;
  
#line 3270 
  __retres = (struct info_10gbt_phy_fw *)0;
  return_label: 
#line 3270 
                return __retres;
}


#line 3278  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int adap_init0_phy(struct adapter *adap)
{
  int __retres;
  struct firmware const *phyf;
  int ret;
  struct info_10gbt_phy_fw *phy_info;
  
#line 3286 
  phy_info = find_phy_info((int)(adap->pdev)->device);
  
#line 3287 
  if (phy_info == (struct info_10gbt_phy_fw *)0) {
    
#line 3288 
    dev_warn((struct device const *)adap->pdev_dev,"No PHY Firmware file found for this PHY\n");
    
#line 3290 
    __retres = -95;
    
#line 3290 
    goto return_label;
  }
  else ;
  
#line 3298 
  ret = request_firmware_direct(& phyf,(char const *)phy_info->phy_fw_file,adap->pdev_dev);
  
#line 3300 
  if (ret < 0) {
    
#line 3307 
    dev_err((struct device const *)adap->pdev_dev,"unable to find PHY Firmware image ",phy_info->phy_fw_file,- ret);
    
#line 3310 
    if (phy_info->phy_flash != 0) {
      
#line 3311 
      int cur_phy_fw_ver = 0;
      
#line 3313 
      t4_phy_fw_ver(adap,& cur_phy_fw_ver);
      
#line 3314 
      dev_warn((struct device const *)adap->pdev_dev,"continuing with, on-adapter ",cur_phy_fw_ver);
      
#line 3316 
      ret = 0;
    }
    else ;
    
#line 3319 
    __retres = ret;
    
#line 3319 
    goto return_label;
  }
  else ;
  
#line 3324 
  ret = t4_load_phy_fw(adap,0,& adap->win0_lock,phy_info->phy_fw_version,phyf->data,phyf->size);
  
#line 3327 
  if (ret < 0) 
#line 3328 
               dev_err((struct device const *)adap->pdev_dev,"PHY Firmware transfer error %d\n",- ret);
  else 
    
#line 3330 
    if (ret > 0) {
      
#line 3331 
      int new_phy_fw_ver = 0;
      
#line 3333 
      if (phy_info->phy_fw_version != (int (*)(u8 const *, size_t ))0) 
        
#line 3334 
        new_phy_fw_ver = (*(phy_info->phy_fw_version))(phyf->data,phyf->size); else ;
      
#line 3336 
      _dev_info((struct device const *)adap->pdev_dev,"Successfully transferred PHY ",phy_info->phy_fw_file,new_phy_fw_ver);
    }
    else ;
  
#line 3341 
  release_firmware(phyf);
  
#line 3343 
  __retres = ret;
  return_label: 
#line 3343 
                return __retres;
}


#line 3349  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int adap_init0_config(struct adapter *adapter, int reset)
{
  int __retres;
  struct fw_caps_config_cmd caps_cmd;
  struct firmware const *cf;
  u32 finiver;
  u32 finicsum;
  u32 cfcsum;
  int ret;
  char *fw_config_file;
  char fw_config_file_path[256U];
  int tmp;
  
#line 3353 
  unsigned long mtype = 0UL;
  
#line 3353 
  unsigned long maddr = 0UL;
  
#line 3356 
  int config_issued = 0;
  
#line 3358 
  char *config_name = (char *)0;
  
#line 3363 
  if (reset != 0) {
    
#line 3364 
    ret = t4_fw_reset(adapter,adapter->mbox,3);
    
#line 3366 
    if (ret < 0) 
#line 3367 
                 goto bye; else ;
  }
  else ;
  
#line 3375 
  tmp = is_10gbt_device((int)(adapter->pdev)->device);
  
#line 3375 
  if (tmp != 0) {
    
#line 3376 
    ret = adap_init0_phy(adapter);
    
#line 3377 
    if (ret < 0) 
#line 3378 
                 goto bye; else ;
  }
  else ;
  
#line 3385 
  switch (((unsigned int)adapter->params.chip >> 4) & 15U) {
    case (unsigned int)4: 
#line 3386 
    ;
    
#line 3387 
    fw_config_file = (char *)"cxgb4/t4-config.txt";
    
#line 3388 
    goto ldv_60086;
    case (unsigned int)5: 
#line 3389 
    ;
    
#line 3390 
    fw_config_file = (char *)"cxgb4/t5-config.txt";
    
#line 3391 
    goto ldv_60086;
    case (unsigned int)6: 
#line 3392 
    ;
    
#line 3393 
    fw_config_file = (char *)"cxgb4/t6-config.txt";
    
#line 3394 
    goto ldv_60086;
    default: 
#line 3395 
    ;
    
#line 3396 
    dev_err((struct device const *)adapter->pdev_dev,"Device %d is not supported\n",(int)(adapter->pdev)->device);
    
#line 3398 
    ret = -22;
    
#line 3399 
    goto bye;
  }
  ldv_60086: 
#line 3402 
  ;
  
#line 3402 
  ret = request_firmware(& cf,(char const *)fw_config_file,adapter->pdev_dev);
  
#line 3403 
  if (ret < 0) {
    unsigned int tmp_0;
    
#line 3404 
    config_name = (char *)"On FLASH";
    
#line 3405 
    mtype = 4UL;
    
#line 3406 
    tmp_0 = t4_flash_cfg_addr(adapter);
    
#line 3406 
    maddr = (unsigned long)tmp_0;
  }
  else {
    u32 params[7U];
    u32 val[7U];
    
#line 3410 
    sprintf((char *)(& fw_config_file_path),"/lib/firmware/%s",fw_config_file);
    
#line 3412 
    config_name = (char *)(& fw_config_file_path);
    
#line 3414 
    if (cf->size > 65535UL) 
#line 3415 
                            ret = -12;
    else {
      
#line 3417 
      params[0] = 17629184U;
      
#line 3419 
      ret = t4_query_params(adapter,adapter->mbox,adapter->pf,0U,1U,(u32 const *)(& params),(u32 *)(& val));
      
#line 3421 
      if (ret == 0) {
        
#line 3432 
        size_t resid = cf->size & 3UL;
        
#line 3433 
        size_t size = cf->size & 18446744073709551612UL;
        
#line 3434 
        __be32 *data = (__be32 *)cf->data;
        
#line 3436 
        mtype = (unsigned long)(val[0] >> 8) & 255UL;
        
#line 3437 
        maddr = (unsigned long)(val[0] << 16) & 16711680UL;
        
#line 3439 
        ldv_spin_lock_153(& adapter->win0_lock);
        
#line 3440 
        ret = t4_memory_rw(adapter,0,(int)mtype,(unsigned int)maddr,(unsigned int)size,(void *)data,0);
        
#line 3442 
        if (ret == 0 && resid != 0UL) {
          union __anonunion_last_1065 last;
          int i;
          
#line 3449 
          last.word = *(data + (size >> 2));
          
#line 3450 
          i = (int)resid;
          
#line 3450 
          goto ldv_60101;
          ldv_60100: 
#line 3451 
          ;
          
#line 3451 
          last.buf[i] = (char)0;
          
#line 3450 
          i += 1;
          ldv_60101: 
#line 3451 
          ;
          
#line 3450 
          if (i <= 3) 
#line 3452 
                      goto ldv_60100; else 
#line 3455 
                                           goto ldv_60102;
          ldv_60102: 
#line 3456 
          ;
          
#line 3452 
          ret = t4_memory_rw(adapter,0,(int)mtype,(unsigned int)maddr + (unsigned int)size,4U,(void *)(& last.word),0);
        }
        else ;
        
#line 3457 
        ldv_spin_unlock_154(& adapter->win0_lock);
      }
      else ;
    }
    
#line 3461 
    release_firmware(cf);
    
#line 3462 
    if (ret != 0) 
#line 3463 
                  goto bye; else ;
  }
  
#line 3472 
  memset((void *)(& caps_cmd),0,48UL);
  
#line 3473 
  caps_cmd.op_to_write = 49159U;
  
#line 3477 
  if (0 != 0) 
#line 3477 
              caps_cmd.cfvalid_to_len16 = (((((((unsigned int)mtype << 24U) | ((unsigned int)(maddr >> 16) << 16U)) << 24) | (((((unsigned int)mtype << 24U) | ((unsigned int)(maddr >> 16) << 16U)) << 8) & 16711680U)) | (((((unsigned int)mtype << 24U) | ((unsigned int)(maddr >> 16) << 16U)) >> 8) & 65280U)) | ((((unsigned int)mtype << 24U) | ((unsigned int)(maddr >> 16) << 16U)) >> 24)) | 50331656U; else 
                                                                    
#line 3478 
                                                                    caps_cmd.cfvalid_to_len16 = __fswab32((((unsigned int)mtype << 24U) | ((unsigned int)maddr & 4294901760U)) | 134217731U);
  
#line 3482 
  ret = t4_wr_mbox(adapter,(int)adapter->mbox,(void const *)(& caps_cmd),48,(void *)(& caps_cmd));
  
#line 3491 
  if (ret == -2) {
    
#line 3492 
    memset((void *)(& caps_cmd),0,48UL);
    
#line 3493 
    caps_cmd.op_to_write = 49159U;
    
#line 3497 
    caps_cmd.cfvalid_to_len16 = 50331648U;
    
#line 3498 
    ret = t4_wr_mbox(adapter,(int)adapter->mbox,(void const *)(& caps_cmd),48,(void *)(& caps_cmd));
    
#line 3500 
    config_name = (char *)"Firmware Default";
  }
  else ;
  
#line 3503 
  config_issued = 1;
  
#line 3504 
  if (ret < 0) 
#line 3505 
               goto bye; else ;
  
#line 3507 
  if (0 != 0) 
#line 3507 
              finiver = (((caps_cmd.finiver << 24) | ((caps_cmd.finiver << 8) & 16711680U)) | ((caps_cmd.finiver >> 8) & 65280U)) | (caps_cmd.finiver >> 24); else 
                                                                    
#line 3507 
                                                                    finiver = __fswab32(caps_cmd.finiver);
  
#line 3508 
  if (0 != 0) 
#line 3508 
              finicsum = (((caps_cmd.finicsum << 24) | ((caps_cmd.finicsum << 8) & 16711680U)) | ((caps_cmd.finicsum >> 8) & 65280U)) | (caps_cmd.finicsum >> 24); else 
                                                                    
#line 3508 
                                                                    finicsum = __fswab32(caps_cmd.finicsum);
  
#line 3509 
  if (0 != 0) 
#line 3509 
              cfcsum = (((caps_cmd.cfcsum << 24) | ((caps_cmd.cfcsum << 8) & 16711680U)) | ((caps_cmd.cfcsum >> 8) & 65280U)) | (caps_cmd.cfcsum >> 24); else 
                                                                    
#line 3509 
                                                                    cfcsum = __fswab32(caps_cmd.cfcsum);
  
#line 3510 
  if (finicsum != cfcsum) 
#line 3511 
                          dev_warn((struct device const *)adapter->pdev_dev,"Configuration File checksum ",finicsum,cfcsum); else ;
  
#line 3518 
  caps_cmd.op_to_write = 40967U;
  
#line 3522 
  caps_cmd.cfvalid_to_len16 = 50331648U;
  
#line 3523 
  ret = t4_wr_mbox(adapter,(int)adapter->mbox,(void const *)(& caps_cmd),48,(void *)0);
  
#line 3525 
  if (ret < 0) 
#line 3526 
               goto bye; else ;
  
#line 3532 
  ret = adap_init0_tweaks(adapter);
  
#line 3533 
  if (ret < 0) 
#line 3534 
               goto bye; else ;
  
#line 3540 
  ret = t4_fw_initialize(adapter,adapter->mbox);
  
#line 3541 
  if (ret < 0) 
#line 3542 
               goto bye; else ;
  
#line 3547 
  _dev_info((struct device const *)adapter->pdev_dev,"Successfully configured using Firmware ",config_name,finiver,cfcsum);
  
#line 3550 
  __retres = 0;
  
#line 3550 
  goto return_label;
  bye: 
#line 3557 
  ;
  
#line 3558 
  if (config_issued != 0 && ret != -2) 
#line 3559 
                                       dev_warn((struct device const *)adapter->pdev_dev,"\"%s\" configuration file error %d\n",config_name,- ret); else ;
  
#line 3561 
  __retres = ret;
  return_label: 
#line 3561 
                return __retres;
}


#line 3564  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static struct fw_info fw_info_array[3U] = {{.chip = (unsigned char)4U, .fs_name = (char *)"cxgb4/t4-config.txt", .fw_mod_name = (char *)"cxgb4/t4fw.bin", .fw_hdr = {.ver = (unsigned char)0, .chip = (unsigned char)0U, .len512 = (unsigned short)0, .fw_ver = 0U, .tp_microcode_ver = 0U, .intfver_nic = (unsigned char)0U, .intfver_vnic = (unsigned char)0U, .intfver_ofld = (unsigned char)0, .intfver_ri = (unsigned char)0U, .intfver_iscsipdu = (unsigned char)0, .intfver_iscsi = (unsigned char)0U, .intfver_fcoepdu = (unsigned char)0, .intfver_fcoe = (unsigned char)0U, .reserved2 = 0U, .reserved3 = 0U, .reserved4 = 0U, .flags = 0U, .reserved6 = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}}}, {.chip = (unsigned char)5U, .fs_name = (char *)"cxgb4/t5-config.txt", .fw_mod_name = (char *)"cxgb4/t5fw.bin", .fw_hdr = {.ver = (unsigned char)0, .chip = (unsigned char)1U, .len512 = (unsigned short)0, .fw_ver = 0U, .tp_microcode_ver = 0U, .intfver_nic = (unsigned char)0U, .intfver_vnic = (unsigned char)0U, .intfver_ofld = (unsigned char)0, .intfver_ri = (unsigned char)0U, .intfver_iscsipdu = (unsigned char)0, .intfver_iscsi = (unsigned char)0U, .intfver_fcoepdu = (unsigned char)0, .intfver_fcoe = (unsigned char)0U, .reserved2 = 0U, .reserved3 = 0U, .reserved4 = 0U, .flags = 0U, .reserved6 = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}}}, {.chip = (unsigned char)6U, .fs_name = (char *)"cxgb4/t6-config.txt", .fw_mod_name = (char *)"cxgb4/t6fw.bin", .fw_hdr = {.ver = (unsigned char)0, .chip = (unsigned char)2U, .len512 = (unsigned short)0, .fw_ver = 0U, .tp_microcode_ver = 0U, .intfver_nic = (unsigned char)0U, .intfver_vnic = (unsigned char)0U, .intfver_ofld = (unsigned char)0U, .intfver_ri = (unsigned char)0U, .intfver_iscsipdu = (unsigned char)0U, .intfver_iscsi = (unsigned char)0U, .intfver_fcoepdu = (unsigned char)0U, .intfver_fcoe = (unsigned char)0U, .reserved2 = 0U, .reserved3 = 0U, .reserved4 = 0U, .flags = 0U, .reserved6 = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U}}}};

#line 3611  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static struct fw_info *find_fw_info(int chip)
{
  struct fw_info *__retres;
  int i;
  
#line 3615 
  i = 0;
  
#line 3615 
  goto ldv_60112;
  ldv_60111: 
#line 3616 
  ;
  
#line 3616 
  if ((int)fw_info_array[i].chip == chip) {
    
#line 3617 
    __retres = & fw_info_array[i];
    
#line 3617 
    goto return_label;
  }
  else ;
  
#line 3615 
  i += 1;
  ldv_60112: 
#line 3616 
  ;
  
#line 3615 
  if ((unsigned int)i <= 2U) 
#line 3617 
                             goto ldv_60111; else 
#line 3620 
                                                  goto ldv_60113;
  ldv_60113: 
#line 3621 
  ;
  
#line 3619 
  __retres = (struct fw_info *)0;
  return_label: 
#line 3619 
                return __retres;
}


#line 3625  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int adap_init0(struct adapter *adap)
{
  int __retres;
  int ret;
  u32 v;
  u32 port_vec;
  enum dev_state state;
  u32 params[7U];
  u32 val[7U];
  struct fw_caps_config_cmd caps_cmd;
  int tmp_2;
  int tmp_8;
  
#line 3632 
  int reset = 1;
  
#line 3637 
  ret = t4_init_devlog_params(adap);
  
#line 3638 
  if (ret < 0) {
    
#line 3639 
    __retres = ret;
    
#line 3639 
    goto return_label;
  }
  else ;
  
#line 3642 
  ret = t4_fw_hello(adap,adap->mbox,adap->mbox,(enum dev_master)MASTER_MAY,& state);
  
#line 3643 
  if (ret < 0) {
    
#line 3644 
    dev_err((struct device const *)adap->pdev_dev,"could not connect to FW, error %d\n",ret);
    
#line 3646 
    __retres = ret;
    
#line 3646 
    goto return_label;
  }
  else ;
  
#line 3648 
  if (adap->mbox == (unsigned int)ret) 
#line 3649 
                                       adap->flags |= 128U; else ;
  
#line 3658 
  t4_get_fw_version(adap,& adap->params.fw_vers);
  
#line 3659 
  t4_get_tp_version(adap,& adap->params.tp_vers);
  
#line 3660 
  if ((adap->flags & 128U) != 0U && state != (unsigned int)DEV_STATE_INIT) {
    struct fw_info *fw_info;
    struct fw_hdr *card_fw;
    struct firmware const *fw;
    
#line 3664 
    u8 const *fw_data = (u8 const *)0U;
    
#line 3665 
    unsigned int fw_size = 0U;
    
#line 3670 
    fw_info = find_fw_info((int)((unsigned int)adap->params.chip >> 4) & 15);
    
#line 3671 
    if (fw_info == (struct fw_info *)0) {
      
#line 3672 
      dev_err((struct device const *)adap->pdev_dev,"unable to get firmware info for chip %d.\n",((unsigned int)adap->params.chip >> 4) & 15U);
      
#line 3675 
      __retres = -22;
      
#line 3675 
      goto return_label;
    }
    else ;
    
#line 3681 
    card_fw = (struct fw_hdr *)t4_alloc_mem(128UL);
    
#line 3684 
    ret = request_firmware(& fw,(char const *)fw_info->fw_mod_name,adap->pdev_dev);
    
#line 3686 
    if (ret < 0) 
#line 3687 
                 dev_err((struct device const *)adap->pdev_dev,"unable to load firmware image %s, error %d\n",fw_info->fw_mod_name,ret);
    else {
      
#line 3691 
      fw_data = fw->data;
      
#line 3692 
      fw_size = (unsigned int)fw->size;
    }
    
#line 3696 
    ret = t4_prep_fw(adap,fw_info,fw_data,fw_size,card_fw,state,& reset);
    
#line 3700 
    release_firmware(fw);
    
#line 3701 
    t4_free_mem((void *)card_fw);
    
#line 3703 
    if (ret < 0) 
#line 3704 
                 goto bye; else ;
  }
  else ;
  
#line 3714 
  ret = t4_get_vpd_params(adap,& adap->params.vpd);
  
#line 3715 
  if (ret < 0) 
#line 3716 
               goto bye; else ;
  
#line 3723 
  v = 16842752U;
  
#line 3726 
  ret = t4_query_params(adap,adap->mbox,adap->pf,0U,1U,(u32 const *)(& v),& port_vec);
  
#line 3727 
  if (ret < 0) 
#line 3728 
               goto bye; else ;
  
#line 3730 
  if (0 != 0) 
#line 3730 
              adap->params.nports = (unsigned char)((((((((((((unsigned long long)port_vec & 1ULL) != 0ULL) + (((unsigned long long)port_vec & 2ULL) != 0ULL)) + (((unsigned long long)port_vec & 4ULL) != 0ULL)) + (((unsigned long long)port_vec & 8ULL) != 0ULL)) + (((unsigned long long)port_vec & 16ULL) != 0ULL)) + (((unsigned long long)port_vec & 32ULL) != 0ULL)) + (((unsigned long long)port_vec & 64ULL) != 0ULL)) + (((unsigned long long)port_vec & 128ULL) != 0ULL)) + ((((((((((unsigned long long)(port_vec >> 8) & 1ULL) != 0ULL) + (((unsigned long long)(port_vec >> 8) & 2ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 8) & 4ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 8) & 8ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 8) & 16ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 8) & 32ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 8) & 64ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 8) & 128ULL) != 0ULL))) + (((((((((((unsigned long long)(port_vec >> 16) & 1ULL) != 0ULL) + (((unsigned long long)(port_vec >> 16) & 2ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 16) & 4ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 16) & 8ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 16) & 16ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 16) & 32ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 16) & 64ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 16) & 128ULL) != 0ULL)) + ((((((((((unsigned long long)(port_vec >> 24) & 1ULL) != 0ULL) + (((unsigned long long)(port_vec >> 24) & 2ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 24) & 4ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 24) & 8ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 24) & 16ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 24) & 32ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 24) & 64ULL) != 0ULL)) + (((unsigned long long)(port_vec >> 24) & 128ULL) != 0ULL))));
  else {
    unsigned int tmp_0;
    
#line 3730 
    tmp_0 = __arch_hweight32(port_vec);
    
#line 3730 
    adap->params.nports = (unsigned char)tmp_0;
  }
  
#line 3731 
  adap->params.portvec = (unsigned char)port_vec;
  
#line 3736 
  if (state == (unsigned int)DEV_STATE_INIT) {
    char *tmp_1;
    
#line 3737 
    if ((adap->flags & 128U) != 0U) 
#line 3737 
                                    tmp_1 = (char *)"MASTER"; else 
#line 3737 
                                                                   tmp_1 = (char *)"SLAVE";
    
#line 3737 
    ;
    
#line 3737 
    _dev_info((struct device const *)adap->pdev_dev,"Coming up as %s: ",tmp_1);
  }
  else {
    
#line 3741 
    _dev_info((struct device const *)adap->pdev_dev,"Coming up as MASTER: ");
    
#line 3747 
    params[0] = 17629184U;
    
#line 3749 
    ret = t4_query_params(adap,adap->mbox,adap->pf,0U,1U,(u32 const *)(& params),(u32 *)(& val));
    
#line 3755 
    if (ret < 0) {
      
#line 3756 
      dev_err((struct device const *)adap->pdev_dev,"firmware doesn\'t support ");
      
#line 3758 
      goto bye;
    }
    else ;
    
#line 3765 
    ret = adap_init0_config(adap,reset);
    
#line 3766 
    if (ret == -2) {
      
#line 3767 
      dev_err((struct device const *)adap->pdev_dev,"no Configuration File ");
      
#line 3769 
      goto bye;
    }
    else ;
    
#line 3771 
    if (ret < 0) {
      
#line 3772 
      dev_err((struct device const *)adap->pdev_dev,"could not initialize ",- ret);
      
#line 3774 
      goto bye;
    }
    else ;
  }
  
#line 3782 
  ret = t4_sge_init(adap);
  
#line 3783 
  if (ret < 0) 
#line 3784 
               goto bye; else ;
  
#line 3786 
  tmp_2 = is_bypass_device((int)(adap->pdev)->device);
  
#line 3786 
  if (tmp_2 != 0) 
#line 3787 
                  adap->params.bypass = (unsigned char)1U; else ;
  
#line 3802 
  params[0] = 36372480U;
  
#line 3803 
  params[1] = 34799616U;
  
#line 3804 
  params[2] = 34865152U;
  
#line 3805 
  params[3] = 33882112U;
  
#line 3806 
  params[4] = 33947648U;
  
#line 3807 
  params[5] = 36241408U;
  
#line 3808 
  ret = t4_query_params(adap,adap->mbox,adap->pf,0U,6U,(u32 const *)(& params),(u32 *)(& val));
  
#line 3809 
  if (ret < 0) 
#line 3810 
               goto bye; else ;
  
#line 3811 
  adap->sge.egr_start = val[0];
  
#line 3812 
  adap->l2t_start = val[1];
  
#line 3813 
  adap->l2t_end = val[2];
  
#line 3814 
  adap->tids.ftid_base = val[3];
  
#line 3815 
  adap->tids.nftids = (val[4] - val[3]) + 1U;
  
#line 3816 
  adap->sge.ingr_start = val[5];
  
#line 3824 
  params[0] = 36438016U;
  
#line 3825 
  params[1] = 36306944U;
  
#line 3826 
  ret = t4_query_params(adap,adap->mbox,adap->pf,0U,2U,(u32 const *)(& params),(u32 *)(& val));
  
#line 3827 
  if (ret < 0) 
#line 3828 
               goto bye; else ;
  
#line 3829 
  adap->sge.egr_sz = (val[0] - adap->sge.egr_start) + 1U;
  
#line 3830 
  adap->sge.ingr_sz = (val[1] - adap->sge.ingr_start) + 1U;
  
#line 3832 
  adap->sge.egr_map = (void **)kcalloc_0((unsigned long)adap->sge.egr_sz,8UL,208U);
  
#line 3834 
  if (adap->sge.egr_map == (void **)0) {
    
#line 3835 
    ret = -12;
    
#line 3836 
    goto bye;
  }
  else ;
  
#line 3839 
  adap->sge.ingr_map = (struct sge_rspq **)kcalloc_0((unsigned long)adap->sge.ingr_sz,8UL,208U);
  
#line 3841 
  if (adap->sge.ingr_map == (struct sge_rspq **)0) {
    
#line 3842 
    ret = -12;
    
#line 3843 
    goto bye;
  }
  else ;
  
#line 3849 
  adap->sge.starving_fl = (unsigned long *)kcalloc_0(((unsigned long)adap->sge.egr_sz + 63UL) / 64UL,8UL,208U);
  
#line 3851 
  if (adap->sge.starving_fl == (unsigned long *)0UL) {
    
#line 3852 
    ret = -12;
    
#line 3853 
    goto bye;
  }
  else ;
  
#line 3856 
  adap->sge.txq_maperr = (unsigned long *)kcalloc_0(((unsigned long)adap->sge.egr_sz + 63UL) / 64UL,8UL,208U);
  
#line 3858 
  if (adap->sge.txq_maperr == (unsigned long *)0UL) {
    
#line 3859 
    ret = -12;
    
#line 3860 
    goto bye;
  }
  else ;
  
#line 3864 
  adap->sge.blocked_fl = (unsigned long *)kcalloc_0(((unsigned long)adap->sge.egr_sz + 63UL) / 64UL,8UL,208U);
  
#line 3866 
  if (adap->sge.blocked_fl == (unsigned long *)0UL) {
    
#line 3867 
    ret = -12;
    
#line 3868 
    goto bye;
  }
  else ;
  
#line 3872 
  params[0] = 33751040U;
  
#line 3873 
  params[1] = 33816576U;
  
#line 3874 
  ret = t4_query_params(adap,adap->mbox,adap->pf,0U,2U,(u32 const *)(& params),(u32 *)(& val));
  
#line 3875 
  if (ret < 0) 
#line 3876 
               goto bye; else ;
  
#line 3877 
  adap->clipt_start = val[0];
  
#line 3878 
  adap->clipt_end = val[1];
  
#line 3881 
  params[0] = 36503552U;
  
#line 3882 
  params[1] = 36569088U;
  
#line 3883 
  ret = t4_query_params(adap,adap->mbox,adap->pf,0U,2U,(u32 const *)(& params),(u32 *)(& val));
  
#line 3887 
  if (val[0] != val[1] && ret >= 0) {
    
#line 3888 
    adap->flags |= 512U;
    
#line 3889 
    adap->tids.aftid_base = val[0];
    
#line 3890 
    adap->tids.aftid_end = val[1];
  }
  else ;
  
#line 3898 
  params[0] = 36765696U;
  
#line 3899 
  val[0] = 1U;
  
#line 3900 
  t4_set_params(adap,adap->mbox,adap->pf,0U,1U,(u32 const *)(& params),(u32 const *)(& val));
  
#line 3908 
  tmp_8 = is_t4(adap->params.chip);
  
#line 3908 
  if (tmp_8 != 0) 
#line 3909 
                  adap->params.ulptx_memwrite_dsgl = (_Bool)0;
  else {
    
#line 3911 
    params[0] = 18284544U;
    
#line 3912 
    ret = t4_query_params(adap,adap->mbox,adap->pf,0U,1U,(u32 const *)(& params),(u32 *)(& val));
    
#line 3914 
    adap->params.ulptx_memwrite_dsgl = (_Bool)((ret == 0 && val[0] != 0U) != 0);
  }
  
#line 3921 
  memset((void *)(& caps_cmd),0,48UL);
  
#line 3922 
  caps_cmd.op_to_write = 49159U;
  
#line 3924 
  caps_cmd.cfvalid_to_len16 = 50331648U;
  
#line 3925 
  ret = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& caps_cmd),48,(void *)(& caps_cmd));
  
#line 3927 
  if (ret < 0) 
#line 3928 
               goto bye; else ;
  
#line 3930 
  if ((unsigned int)caps_cmd.ofldcaps != 0U) {
    unsigned int tmp_10;
    
#line 3932 
    params[0] = 16908288U;
    
#line 3933 
    params[1] = 34013184U;
    
#line 3934 
    params[2] = 34078720U;
    
#line 3935 
    params[3] = 34144256U;
    
#line 3936 
    params[4] = 34209792U;
    
#line 3937 
    params[5] = 16973824U;
    
#line 3938 
    ret = t4_query_params(adap,adap->mbox,adap->pf,0U,6U,(u32 const *)(& params),(u32 *)(& val));
    
#line 3940 
    if (ret < 0) 
#line 3941 
                 goto bye; else ;
    
#line 3942 
    adap->tids.ntids = val[0];
    {
      unsigned int tmp_9;
      
#line 3943 
      unsigned int _min1 = adap->tids.ntids / 2U;
      
#line 3943 
      unsigned int _min2 = 8192U;
      
#line 3943 
      if (_min1 < _min2) 
#line 3943 
                         tmp_9 = _min1; else 
#line 3943 
                                             tmp_9 = _min2;
      
#line 3943 
      tmp_10 = tmp_9;
    }
    
#line 3943 
    adap->tids.natids = tmp_10;
    
#line 3944 
    adap->tids.stid_base = val[1];
    
#line 3945 
    adap->tids.nstids = (val[2] - val[1]) + 1U;
    
#line 3955 
    if ((adap->flags & 512U) != 0U) {
      int tmp_11;
      
#line 3955 
      tmp_11 = is_bypass(adap);
      
#line 3955 
      if (tmp_11 == 0) {
        
#line 3956 
        adap->tids.sftid_base = adap->tids.ftid_base + (adap->tids.nftids + 2U) / 3U;
        
#line 3958 
        adap->tids.nsftids = adap->tids.nftids - (adap->tids.nftids + 2U) / 3U;
        
#line 3960 
        adap->tids.nftids = adap->tids.sftid_base - adap->tids.ftid_base;
      }
      else ;
    }
    else ;
    
#line 3963 
    adap->vres.ddp.start = val[3];
    
#line 3964 
    adap->vres.ddp.size = (val[4] - val[3]) + 1U;
    
#line 3965 
    adap->params.ofldq_wr_cred = val[5];
    
#line 3967 
    adap->params.offload = (unsigned char)1U;
  }
  else ;
  
#line 3969 
  if ((unsigned int)caps_cmd.rdmacaps != 0U) {
    
#line 3970 
    params[0] = 34406400U;
    
#line 3971 
    params[1] = 34471936U;
    
#line 3972 
    params[2] = 35586048U;
    
#line 3973 
    params[3] = 34603008U;
    
#line 3974 
    params[4] = 34668544U;
    
#line 3975 
    params[5] = 34734080U;
    
#line 3976 
    ret = t4_query_params(adap,adap->mbox,adap->pf,0U,6U,(u32 const *)(& params),(u32 *)(& val));
    
#line 3978 
    if (ret < 0) 
#line 3979 
                 goto bye; else ;
    
#line 3980 
    adap->vres.stag.start = val[0];
    
#line 3981 
    adap->vres.stag.size = (val[1] - val[0]) + 1U;
    
#line 3982 
    adap->vres.rq.start = val[2];
    
#line 3983 
    adap->vres.rq.size = (val[3] - val[2]) + 1U;
    
#line 3984 
    adap->vres.pbl.start = val[4];
    
#line 3985 
    adap->vres.pbl.size = (val[5] - val[4]) + 1U;
    
#line 3987 
    params[0] = 34930688U;
    
#line 3988 
    params[1] = 34996224U;
    
#line 3989 
    params[2] = 35061760U;
    
#line 3990 
    params[3] = 35127296U;
    
#line 3991 
    params[4] = 36044800U;
    
#line 3992 
    params[5] = 36110336U;
    
#line 3993 
    ret = t4_query_params(adap,adap->mbox,adap->pf,0U,6U,(u32 const *)(& params),(u32 *)(& val));
    
#line 3995 
    if (ret < 0) 
#line 3996 
                 goto bye; else ;
    
#line 3997 
    adap->vres.qp.start = val[0];
    
#line 3998 
    adap->vres.qp.size = (val[1] - val[0]) + 1U;
    
#line 3999 
    adap->vres.cq.start = val[2];
    
#line 4000 
    adap->vres.cq.size = (val[3] - val[2]) + 1U;
    
#line 4001 
    adap->vres.ocq.start = val[4];
    
#line 4002 
    adap->vres.ocq.size = (val[5] - val[4]) + 1U;
    
#line 4004 
    params[0] = 18022400U;
    
#line 4005 
    params[1] = 18087936U;
    
#line 4006 
    ret = t4_query_params(adap,adap->mbox,adap->pf,0U,2U,(u32 const *)(& params),(u32 *)(& val));
    
#line 4008 
    if (ret < 0) {
      
#line 4009 
      adap->params.max_ordird_qp = 8U;
      
#line 4010 
      adap->params.max_ird_adapter = adap->tids.ntids * 32U;
      
#line 4011 
      ret = 0;
    }
    else {
      
#line 4013 
      adap->params.max_ordird_qp = val[0];
      
#line 4014 
      adap->params.max_ird_adapter = val[1];
    }
    
#line 4016 
    _dev_info((struct device const *)adap->pdev_dev,"max_ordird_qp %d max_ird_adapter %d\n",adap->params.max_ordird_qp,adap->params.max_ird_adapter);
  }
  else ;
  
#line 4021 
  if ((unsigned int)caps_cmd.iscsicaps != 0U) {
    
#line 4022 
    params[0] = 34275328U;
    
#line 4023 
    params[1] = 34340864U;
    
#line 4024 
    ret = t4_query_params(adap,adap->mbox,adap->pf,0U,2U,(u32 const *)(& params),(u32 *)(& val));
    
#line 4026 
    if (ret < 0) 
#line 4027 
                 goto bye; else ;
    
#line 4028 
    adap->vres.iscsi.start = val[0];
    
#line 4029 
    adap->vres.iscsi.size = (val[1] - val[0]) + 1U;
  }
  else ;
  
#line 4039 
  t4_read_mtu_tbl(adap,(u16 *)(& adap->params.mtus),(u8 *)0U);
  
#line 4040 
  if (state != (unsigned int)DEV_STATE_INIT) {
    int i;
    
#line 4060 
    i = 0;
    
#line 4060 
    goto ldv_60137;
    ldv_60136: 
#line 4061 
    ;
    
#line 4061 
    if ((unsigned int)adap->params.mtus[i] == 1492U) {
      
#line 4062 
      adap->params.mtus[i] = (unsigned short)1488U;
      
#line 4063 
      goto ldv_60135;
    }
    else ;
    
#line 4060 
    i += 1;
    ldv_60137: 
#line 4061 
    ;
    
#line 4060 
    if (i <= 15) 
#line 4062 
                 goto ldv_60136; else 
#line 4065 
                                      goto ldv_60135;
    ldv_60135: 
#line 4066 
    ;
    
#line 4066 
    t4_load_mtus(adap,(unsigned short const *)(& adap->params.mtus),(unsigned short const *)(& adap->params.a_wnd),(unsigned short const *)(& adap->params.b_wnd));
  }
  else ;
  
#line 4069 
  t4_init_sge_params(adap);
  
#line 4070 
  adap->flags |= 16U;
  
#line 4071 
  t4_init_tp_params(adap);
  
#line 4072 
  __retres = 0;
  
#line 4072 
  goto return_label;
  bye: 
#line 4079 
  ;
  
#line 4080 
  kfree((void const *)adap->sge.egr_map);
  
#line 4081 
  kfree((void const *)adap->sge.ingr_map);
  
#line 4082 
  kfree((void const *)adap->sge.starving_fl);
  
#line 4083 
  kfree((void const *)adap->sge.txq_maperr);
  
#line 4085 
  kfree((void const *)adap->sge.blocked_fl);
  
#line 4087 
  if (ret != -110 && ret != -5) 
#line 4088 
                                t4_fw_bye(adap,adap->mbox); else ;
  
#line 4089 
  __retres = ret;
  return_label: 
#line 4089 
                return __retres;
}


#line 4094  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static pci_ers_result_t eeh_err_detected(struct pci_dev *pdev, pci_channel_state_t state)
{
  pci_ers_result_t __retres;
  int i;
  int tmp_0;
  
#line 4098 
  struct adapter *adap = pci_get_drvdata(pdev);
  
#line 4100 
  if (adap == (struct adapter *)0) 
#line 4101 
                                   goto out; else ;
  
#line 4103 
  rtnl_lock();
  
#line 4104 
  adap->flags &= 4294967279U;
  
#line 4105 
  notify_ulds(adap,(enum cxgb4_state)CXGB4_STATE_START_RECOVERY);
  
#line 4106 
  ldv_spin_lock_155(& adap->stats_lock);
  
#line 4107 
  i = 0;
  
#line 4107 
  goto ldv_60147;
  ldv_60146: 
#line 4108 
  ;
  {
    
#line 4108 
    struct net_device *dev = adap->port[i];
    
#line 4110 
    netif_device_detach(dev);
    
#line 4111 
    netif_carrier_off(dev);
  }
  
#line 4107 
  i += 1;
  ldv_60147: 
#line 4108 
  ;
  
#line 4107 
  if ((int)adap->params.nports > i) 
#line 4109 
                                    goto ldv_60146; else 
#line 4112 
                                                         goto ldv_60148;
  ldv_60148: 
#line 4113 
  ;
  
#line 4113 
  ldv_spin_unlock_156(& adap->stats_lock);
  
#line 4114 
  disable_interrupts(adap);
  
#line 4115 
  if ((adap->flags & 1U) != 0U) 
#line 4116 
                                cxgb_down(adap); else ;
  
#line 4117 
  rtnl_unlock();
  
#line 4118 
  if ((adap->flags & 2U) != 0U) {
    
#line 4119 
    pci_disable_device(pdev);
    
#line 4120 
    adap->flags &= 4294967293U;
  }
  else ;
  out: 
#line 4122 
  ;
  
#line 4123 
  if (state == 3U) 
#line 4123 
                   tmp_0 = 4; else 
#line 4123 
                                   tmp_0 = 3;
  
#line 4123 
  __retres = (unsigned int)tmp_0;
  
#line 4123 
  return __retres;
}


#line 4126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static pci_ers_result_t eeh_slot_reset(struct pci_dev *pdev)
{
  pci_ers_result_t __retres;
  int i;
  int ret;
  struct fw_caps_config_cmd c;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_5;
  
#line 4130 
  struct adapter *adap = pci_get_drvdata(pdev);
  
#line 4132 
  if (adap == (struct adapter *)0) {
    
#line 4133 
    pci_restore_state(pdev);
    
#line 4134 
    pci_save_state(pdev);
    
#line 4135 
    __retres = 5U;
    
#line 4135 
    goto return_label;
  }
  else ;
  
#line 4138 
  if ((adap->flags & 2U) == 0U) {
    int tmp_0;
    
#line 4139 
    tmp_0 = pci_enable_device(pdev);
    
#line 4139 
    if (tmp_0 != 0) {
      
#line 4140 
      dev_err((struct device const *)(& pdev->dev),"Cannot reenable PCI ");
      
#line 4142 
      __retres = 4U;
      
#line 4142 
      goto return_label;
    }
    else ;
    
#line 4144 
    adap->flags |= 2U;
  }
  else ;
  
#line 4147 
  pci_set_master(pdev);
  
#line 4148 
  pci_restore_state(pdev);
  
#line 4149 
  pci_save_state(pdev);
  
#line 4150 
  pci_cleanup_aer_uncorrect_error_status(pdev);
  
#line 4152 
  tmp_1 = t4_wait_dev_ready(adap->regs);
  
#line 4152 
  if (tmp_1 < 0) {
    
#line 4153 
    __retres = 4U;
    
#line 4153 
    goto return_label;
  }
  else ;
  
#line 4154 
  tmp_2 = t4_fw_hello(adap,adap->mbox,adap->pf,(enum dev_master)MASTER_MUST,(enum dev_state *)DEV_STATE_UNINIT);
  
#line 4154 
  if (tmp_2 < 0) {
    
#line 4155 
    __retres = 4U;
    
#line 4155 
    goto return_label;
  }
  else ;
  
#line 4156 
  adap->flags |= 16U;
  
#line 4157 
  tmp_3 = adap_init1(adap,& c);
  
#line 4157 
  if (tmp_3 != 0) {
    
#line 4158 
    __retres = 4U;
    
#line 4158 
    goto return_label;
  }
  else ;
  
#line 4160 
  i = 0;
  
#line 4160 
  goto ldv_60158;
  ldv_60157: 
#line 4161 
  ;
  {
    
#line 4161 
    struct port_info *p = adap2pinfo(adap,i);
    
#line 4163 
    ret = t4_alloc_vi(adap,adap->mbox,(unsigned int)p->tx_chan,adap->pf,0U,1U,(u8 *)0U,(unsigned int *)0U);
    
#line 4165 
    if (ret < 0) {
      
#line 4166 
      __retres = 4U;
      
#line 4166 
      goto return_label;
    }
    else ;
    
#line 4167 
    p->viid = (unsigned short)ret;
    
#line 4168 
    p->xact_addr_filt = (short)(-1);
  }
  
#line 4160 
  i += 1;
  ldv_60158: 
#line 4161 
  ;
  
#line 4160 
  if ((int)adap->params.nports > i) 
#line 4162 
                                    goto ldv_60157; else 
#line 4165 
                                                         goto ldv_60159;
  ldv_60159: 
#line 4166 
  ;
  
#line 4171 
  t4_load_mtus(adap,(unsigned short const *)(& adap->params.mtus),(unsigned short const *)(& adap->params.a_wnd),(unsigned short const *)(& adap->params.b_wnd));
  
#line 4173 
  setup_memwin(adap);
  
#line 4174 
  tmp_5 = cxgb_up(adap);
  
#line 4174 
  if (tmp_5 != 0) {
    
#line 4175 
    __retres = 4U;
    
#line 4175 
    goto return_label;
  }
  else ;
  
#line 4176 
  __retres = 5U;
  return_label: 
#line 4176 
                return __retres;
}


#line 4179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void eeh_resume(struct pci_dev *pdev)
{
  int i;
  
#line 4182 
  struct adapter *adap = pci_get_drvdata(pdev);
  
#line 4184 
  if (adap == (struct adapter *)0) 
#line 4185 
                                   goto return_label; else ;
  
#line 4187 
  rtnl_lock();
  
#line 4188 
  i = 0;
  
#line 4188 
  goto ldv_60167;
  ldv_60166: 
#line 4189 
  ;
  {
    bool tmp_0;
    
#line 4189 
    struct net_device *dev = adap->port[i];
    
#line 4191 
    tmp_0 = netif_running((struct net_device const *)dev);
    
#line 4191 
    if ((int)tmp_0 != 0) {
      
#line 4192 
      link_start(dev);
      
#line 4193 
      cxgb_set_rxmode(dev);
    }
    else ;
    
#line 4195 
    netif_device_attach(dev);
  }
  
#line 4188 
  i += 1;
  ldv_60167: 
#line 4189 
  ;
  
#line 4188 
  if ((int)adap->params.nports > i) 
#line 4190 
                                    goto ldv_60166; else 
#line 4193 
                                                         goto ldv_60168;
  ldv_60168: 
#line 4194 
  ;
  
#line 4197 
  rtnl_unlock();
  return_label: 
#line 4198 
                return;
}


#line 4200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static struct pci_error_handlers const cxgb4_eeh = {.error_detected = (pci_ers_result_t (*)(struct pci_dev *, enum pci_channel_state ))(& eeh_err_detected), .mmio_enabled = (pci_ers_result_t (*)(struct pci_dev *))0, .link_reset = (pci_ers_result_t (*)(struct pci_dev *))0, .slot_reset = & eeh_slot_reset, .reset_notify = (void (*)(struct pci_dev *, bool ))0, .resume = & eeh_resume};

#line 4206  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
__inline static bool is_x_10g_port(struct link_config const *lc)
{
  bool __retres;
  
#line 4208 
  __retres = (_Bool)((((int)lc->supported & 8) != 0 || ((int)lc->supported & 16) != 0) != 0);
  
#line 4208 
  return __retres;
}


#line 4212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
__inline static void init_rspq(struct adapter *adap, struct sge_rspq *q, unsigned int us, unsigned int cnt, unsigned int size, unsigned int iqe_size)
{
  
#line 4216 
  q->adap = adap;
  
#line 4217 
  cxgb4_set_rspq_intr_params(q,us,cnt);
  
#line 4218 
  q->iqe_len = iqe_size;
  
#line 4219 
  q->size = size;
  
#line 4220 
  return;
}


#line 4227  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void cfg_queues(struct adapter *adap)
{
  int i;
  int ciq_size;
  bool tmp_0;
  struct port_info *tmp;
  int tmp_11;
  
#line 4229 
  struct sge *s = & adap->sge;
  
#line 4230 
  int n10g = 0;
  
#line 4230 
  int qidx = 0;
  
#line 4236 
  i = 0;
  
#line 4236 
  goto ldv_60190;
  ldv_60189: 
#line 4237 
  ;
  
#line 4237 
  tmp = adap2pinfo(adap,i);
  
#line 4237 
  tmp_0 = is_x_10g_port((struct link_config const *)(& tmp->link_cfg));
  
#line 4237 
  n10g = (int)tmp_0 + n10g;
  
#line 4236 
  i += 1;
  ldv_60190: 
#line 4237 
  ;
  
#line 4236 
  if ((int)adap->params.nports > i) 
#line 4238 
                                    goto ldv_60189; else 
#line 4241 
                                                         goto ldv_60191;
  ldv_60191: 
#line 4242 
  ;
  
#line 4243 
  if ((int)adap->params.nports * 8 > 32) {
    
#line 4244 
    dev_err((struct device const *)adap->pdev_dev,"MAX_ETH_QSETS=%d < %d!\n",32,(int)adap->params.nports * 8);
    
#line 4248 
    ldv_inline_asm();
    
#line 4246 
    ;
  }
  else ;
  
#line 4249 
  i = 0;
  
#line 4249 
  goto ldv_60194;
  ldv_60193: 
#line 4250 
  ;
  {
    
#line 4250 
    struct port_info *pi = adap2pinfo(adap,i);
    
#line 4252 
    pi->first_qset = (unsigned char)qidx;
    
#line 4253 
    pi->nqsets = (unsigned char)8U;
    
#line 4254 
    qidx = (int)pi->nqsets + qidx;
  }
  
#line 4249 
  i += 1;
  ldv_60194: 
#line 4250 
  ;
  
#line 4249 
  if ((int)adap->params.nports > i) 
#line 4251 
                                    goto ldv_60193; else 
#line 4254 
                                                         goto ldv_60195;
  ldv_60195: 
#line 4255 
  ;
  
#line 4275 
  s->ethqsets = (unsigned short)qidx;
  
#line 4276 
  s->max_ethqsets = (unsigned short)qidx;
  
#line 4278 
  tmp_11 = is_offload((struct adapter const *)adap);
  
#line 4278 
  if (tmp_11 != 0) {
    int tmp_8;
    int tmp_10;
    
#line 4284 
    if (n10g != 0) {
      int tmp_4;
      int tmp_5;
      {
        unsigned int tmp_2;
        int tmp_3;
        
#line 4285 
        int __min1 = 16;
        
#line 4285 
        tmp_2 = cpumask_weight(cpu_online_mask);
        
#line 4285 
        int __min2 = (int)tmp_2;
        
#line 4285 
        if (__min1 < __min2) 
#line 4285 
                             tmp_3 = __min1; else 
#line 4285 
                                                  tmp_3 = __min2;
        
#line 4285 
        tmp_4 = tmp_3;
      }
      
#line 4285 
      i = tmp_4;
      {
        
#line 4287 
        unsigned char const __y = adap->params.nports;
        
#line 4287 
        tmp_5 = ((((int)__y + -1) + i) / (int)__y) * (int)__y;
      }
      
#line 4287 
      s->ofldqsets = (unsigned short)tmp_5;
    }
    else 
#line 4289 
         s->ofldqsets = (unsigned short)adap->params.nports;
    
#line 4291 
    s->rdmaqs = (unsigned short)adap->params.nports;
    {
      unsigned int tmp_6;
      int tmp_7;
      
#line 4298 
      int __min1_0 = 32;
      
#line 4298 
      tmp_6 = cpumask_weight(cpu_online_mask);
      
#line 4298 
      int __min2_0 = (int)tmp_6;
      
#line 4298 
      if (__min1_0 < __min2_0) 
#line 4298 
                               tmp_7 = __min1_0; else 
#line 4298 
                                                      tmp_7 = __min2_0;
      
#line 4298 
      tmp_8 = tmp_7;
    }
    
#line 4298 
    s->rdmaciqs = (unsigned short)tmp_8;
    
#line 4299 
    s->rdmaciqs = (unsigned short)((int)((unsigned short)((int)s->rdmaciqs / (int)adap->params.nports)) * (int)((unsigned short)adap->params.nports));
    {
      int tmp_9;
      
#line 4301 
      int __max1 = (int)s->rdmaciqs;
      
#line 4301 
      int __max2 = (int)adap->params.nports;
      
#line 4301 
      if (__max1 > __max2) 
#line 4301 
                           tmp_9 = __max1; else 
#line 4301 
                                                tmp_9 = __max2;
      
#line 4301 
      tmp_10 = tmp_9;
    }
    
#line 4301 
    s->rdmaciqs = (unsigned short)tmp_10;
  }
  else ;
  
#line 4304 
  i = 0;
  
#line 4304 
  goto ldv_60215;
  ldv_60214: 
#line 4305 
  ;
  {
    
#line 4305 
    struct sge_eth_rxq *r = & s->ethrxq[i];
    
#line 4307 
    init_rspq(adap,& r->rspq,5U,10U,1024U,64U);
    
#line 4308 
    r->fl.size = 72U;
  }
  
#line 4304 
  i += 1;
  ldv_60215: 
#line 4305 
  ;
  
#line 4304 
  if ((unsigned int)i <= 31U) 
#line 4306 
                              goto ldv_60214; else 
#line 4309 
                                                   goto ldv_60216;
  ldv_60216: 
#line 4310 
  ;
  
#line 4311 
  i = 0;
  
#line 4311 
  goto ldv_60221;
  ldv_60220: 
#line 4312 
  ;
  
#line 4312 
  s->ethtxq[i].q.size = 1024U;
  
#line 4311 
  i += 1;
  ldv_60221: 
#line 4312 
  ;
  
#line 4311 
  if ((unsigned int)i <= 31U) 
#line 4313 
                              goto ldv_60220; else 
#line 4316 
                                                   goto ldv_60222;
  ldv_60222: 
#line 4317 
  ;
  
#line 4314 
  i = 0;
  
#line 4314 
  goto ldv_60227;
  ldv_60226: 
#line 4315 
  ;
  
#line 4315 
  s->ctrlq[i].q.size = 512U;
  
#line 4314 
  i += 1;
  ldv_60227: 
#line 4315 
  ;
  
#line 4314 
  if ((unsigned int)i <= 3U) 
#line 4316 
                             goto ldv_60226; else 
#line 4319 
                                                  goto ldv_60228;
  ldv_60228: 
#line 4320 
  ;
  
#line 4317 
  i = 0;
  
#line 4317 
  goto ldv_60233;
  ldv_60232: 
#line 4318 
  ;
  
#line 4318 
  s->ofldtxq[i].q.size = 1024U;
  
#line 4317 
  i += 1;
  ldv_60233: 
#line 4318 
  ;
  
#line 4317 
  if ((unsigned int)i <= 15U) 
#line 4319 
                              goto ldv_60232; else 
#line 4322 
                                                   goto ldv_60234;
  ldv_60234: 
#line 4323 
  ;
  
#line 4320 
  i = 0;
  
#line 4320 
  goto ldv_60240;
  ldv_60239: 
#line 4321 
  ;
  {
    
#line 4321 
    struct sge_ofld_rxq *r_0 = & s->ofldrxq[i];
    
#line 4323 
    init_rspq(adap,& r_0->rspq,5U,1U,1024U,64U);
    
#line 4324 
    r_0->rspq.uld = (unsigned char)1U;
    
#line 4325 
    r_0->fl.size = 72U;
  }
  
#line 4320 
  i += 1;
  ldv_60240: 
#line 4321 
  ;
  
#line 4320 
  if ((unsigned int)i <= 15U) 
#line 4322 
                              goto ldv_60239; else 
#line 4325 
                                                   goto ldv_60241;
  ldv_60241: 
#line 4326 
  ;
  
#line 4328 
  i = 0;
  
#line 4328 
  goto ldv_60247;
  ldv_60246: 
#line 4329 
  ;
  {
    
#line 4329 
    struct sge_ofld_rxq *r_1 = & s->rdmarxq[i];
    
#line 4331 
    init_rspq(adap,& r_1->rspq,5U,1U,511U,64U);
    
#line 4332 
    r_1->rspq.uld = (unsigned char)0U;
    
#line 4333 
    r_1->fl.size = 72U;
  }
  
#line 4328 
  i += 1;
  ldv_60247: 
#line 4329 
  ;
  
#line 4328 
  if ((unsigned int)i <= 3U) 
#line 4330 
                             goto ldv_60246; else 
#line 4333 
                                                  goto ldv_60248;
  ldv_60248: 
#line 4334 
  ;
  
#line 4336 
  ciq_size = (int)((adap->vres.cq.size + adap->tids.nftids) + 64U);
  
#line 4337 
  if (ciq_size > 65520) {
    
#line 4338 
    dev_warn((struct device const *)adap->pdev_dev,"CIQ size too small for available IQs\n");
    
#line 4339 
    ciq_size = 65520;
  }
  else ;
  
#line 4342 
  i = 0;
  
#line 4342 
  goto ldv_60254;
  ldv_60253: 
#line 4343 
  ;
  {
    
#line 4343 
    struct sge_ofld_rxq *r_2 = & s->rdmaciq[i];
    
#line 4345 
    init_rspq(adap,& r_2->rspq,5U,1U,(unsigned int)ciq_size,64U);
    
#line 4346 
    r_2->rspq.uld = (unsigned char)0U;
  }
  
#line 4342 
  i += 1;
  ldv_60254: 
#line 4343 
  ;
  
#line 4342 
  if ((unsigned int)i <= 31U) 
#line 4344 
                              goto ldv_60253; else 
#line 4347 
                                                   goto ldv_60255;
  ldv_60255: 
#line 4348 
  ;
  
#line 4349 
  init_rspq(adap,& s->fw_evtq,0U,1U,1024U,64U);
  
#line 4350 
  init_rspq(adap,& s->intrq,0U,1U,180U,64U);
  
#line 4351 
  return;
}


#line 4357  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void reduce_ethqs(struct adapter *adap, int n)
{
  int i;
  struct port_info *pi;
  
#line 4362 
  goto ldv_60266;
  ldv_60265: 
#line 4363 
  ;
  
#line 4363 
  i = 0;
  
#line 4363 
  goto ldv_60264;
  ldv_60263: 
#line 4364 
  ;
  
#line 4364 
  pi = adap2pinfo(adap,i);
  
#line 4365 
  if ((unsigned int)pi->nqsets > 1U) {
    
#line 4366 
    pi->nqsets = (u8)((int)pi->nqsets - 1);
    
#line 4367 
    adap->sge.ethqsets = (u16)((int)adap->sge.ethqsets - 1);
    
#line 4368 
    if ((int)adap->sge.ethqsets <= n) 
#line 4369 
                                      goto ldv_60262; else ;
  }
  else ;
  
#line 4363 
  i += 1;
  ldv_60264: 
#line 4364 
  ;
  
#line 4363 
  if ((int)adap->params.nports > i) 
#line 4365 
                                    goto ldv_60263; else 
#line 4368 
                                                         goto ldv_60262;
  ldv_60262: 
#line 4369 
  ;
  ldv_60266: 
#line 4370 
  ;
  
#line 4362 
  if ((int)adap->sge.ethqsets > n) 
#line 4364 
                                   goto ldv_60265; else 
#line 4367 
                                                        goto ldv_60267;
  ldv_60267: 
#line 4368 
  ;
  
#line 4373 
  n = 0;
  
#line 4374 
  i = 0;
  
#line 4374 
  goto ldv_60269;
  ldv_60268: 
#line 4375 
  ;
  
#line 4375 
  pi = adap2pinfo(adap,i);
  
#line 4376 
  pi->first_qset = (unsigned char)n;
  
#line 4377 
  n = (int)pi->nqsets + n;
  
#line 4374 
  i += 1;
  ldv_60269: 
#line 4375 
  ;
  
#line 4374 
  if ((int)adap->params.nports > i) 
#line 4376 
                                    goto ldv_60268; else 
#line 4379 
                                                         goto ldv_60270;
  ldv_60270: 
#line 4380 
  ;
  
#line 4381 
  return;
}


#line 4384  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int enable_msix(struct adapter *adap)
{
  int __retres;
  int i;
  int want;
  int need;
  int allocated;
  struct msix_entry *entries;
  int tmp_0;
  int tmp_1;
  
#line 4386 
  int ofld_need = 0;
  
#line 4388 
  struct sge *s = & adap->sge;
  
#line 4389 
  unsigned int nchan = (unsigned int)adap->params.nports;
  
#line 4392 
  entries = (struct msix_entry *)kmalloc_0(728UL,208U);
  
#line 4394 
  if (entries == (struct msix_entry *)0) {
    
#line 4395 
    __retres = -12;
    
#line 4395 
    goto return_label;
  }
  else ;
  
#line 4397 
  i = 0;
  
#line 4397 
  goto ldv_60283;
  ldv_60282: 
#line 4398 
  ;
  
#line 4398 
  (entries + i)->entry = (unsigned short)i;
  
#line 4397 
  i += 1;
  ldv_60283: 
#line 4398 
  ;
  
#line 4397 
  if (i <= 90) 
#line 4399 
               goto ldv_60282; else 
#line 4402 
                                    goto ldv_60284;
  ldv_60284: 
#line 4403 
  ;
  
#line 4400 
  want = (int)s->max_ethqsets + 2;
  
#line 4401 
  tmp_0 = is_offload((struct adapter const *)adap);
  
#line 4401 
  if (tmp_0 != 0) {
    
#line 4402 
    want = (((int)s->rdmaqs + (int)s->rdmaciqs) + (int)s->ofldqsets) + want;
    
#line 4404 
    ofld_need = (int)(nchan * 3U);
  }
  else ;
  
#line 4410 
  need = ((int)adap->params.nports * 8 + 2) + ofld_need;
  
#line 4414 
  allocated = pci_enable_msix_range(adap->pdev,entries,need,want);
  
#line 4415 
  if (allocated < 0) {
    
#line 4416 
    _dev_info((struct device const *)adap->pdev_dev,"not enough MSI-X vectors left,");
    
#line 4418 
    kfree((void const *)entries);
    
#line 4419 
    __retres = allocated;
    
#line 4419 
    goto return_label;
  }
  else ;
  
#line 4426 
  i = (allocated + -2) - ofld_need;
  
#line 4427 
  if ((int)s->max_ethqsets > i) {
    
#line 4428 
    s->max_ethqsets = (unsigned short)i;
    
#line 4429 
    if ((int)s->ethqsets > i) 
#line 4430 
                              reduce_ethqs(adap,i); else ;
  }
  else ;
  
#line 4432 
  tmp_1 = is_offload((struct adapter const *)adap);
  
#line 4432 
  if (tmp_1 != 0) {
    
#line 4433 
    if (allocated < want) {
      
#line 4434 
      s->rdmaqs = (unsigned short)nchan;
      
#line 4435 
      s->rdmaciqs = (unsigned short)nchan;
    }
    else ;
    
#line 4439 
    i = (((allocated + -2) - (int)s->max_ethqsets) - (int)s->rdmaqs) - (int)s->rdmaciqs;
    
#line 4441 
    s->ofldqsets = (unsigned short)((int)((unsigned short)((unsigned int)i / nchan)) * (int)((unsigned short)nchan));
  }
  else ;
  
#line 4443 
  i = 0;
  
#line 4443 
  goto ldv_60286;
  ldv_60285: 
#line 4444 
  ;
  
#line 4444 
  adap->msix_info[i].vec = (unsigned short)(entries + i)->vector;
  
#line 4443 
  i += 1;
  ldv_60286: 
#line 4444 
  ;
  
#line 4443 
  if (i < allocated) 
#line 4445 
                     goto ldv_60285; else 
#line 4448 
                                          goto ldv_60287;
  ldv_60287: 
#line 4449 
  ;
  
#line 4446 
  kfree((void const *)entries);
  
#line 4447 
  __retres = 0;
  return_label: 
#line 4447 
                return __retres;
}


#line 4452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int init_rss(struct adapter *adap)
{
  int __retres;
  unsigned int i;
  int err;
  
#line 4457 
  err = t4_init_rss_mode(adap,(int)adap->mbox);
  
#line 4458 
  if (err != 0) {
    
#line 4459 
    __retres = err;
    
#line 4459 
    goto return_label;
  }
  else ;
  
#line 4461 
  i = 0U;
  
#line 4461 
  goto ldv_60295;
  ldv_60294: 
#line 4462 
  ;
  {
    
#line 4462 
    struct port_info *pi = adap2pinfo(adap,(int)i);
    
#line 4464 
    pi->rss = (u16 *)kcalloc_0((unsigned long)pi->rss_size,2UL,208U);
    
#line 4465 
    if (pi->rss == (u16 *)0U) {
      
#line 4466 
      __retres = -12;
      
#line 4466 
      goto return_label;
    }
    else ;
  }
  
#line 4461 
  i += 1U;
  ldv_60295: 
#line 4462 
  ;
  
#line 4461 
  if ((unsigned int)adap->params.nports > i) 
#line 4463 
                                             goto ldv_60294; else 
#line 4466 
                                                                  goto ldv_60296;
  ldv_60296: 
#line 4467 
  ;
  
#line 4468 
  __retres = 0;
  return_label: 
#line 4468 
                return __retres;
}


#line 4471  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void print_port_info(struct net_device const *dev)
{
  char buf[80U];
  char const *tmp_4;
  char *tmp_6;
  char *tmp_8;
  int tmp_7;
  
#line 4474 
  char *bufp = (char *)(& buf);
  
#line 4475 
  char const *spd = "";
  
#line 4476 
  struct port_info const *pi = netdev_priv(dev);
  
#line 4477 
  struct adapter const *adap = (struct adapter const *)pi->adapter;
  
#line 4479 
  if ((unsigned int)adap->params.pci.speed == 1U) 
#line 4480 
                                                  spd = " 2.5 GT/s";
  else 
    
#line 4481 
    if ((unsigned int)adap->params.pci.speed == 2U) 
#line 4482 
                                                    spd = " 5 GT/s";
    else 
      
#line 4483 
      if ((unsigned int)adap->params.pci.speed == 3U) 
#line 4484 
                                                      spd = " 8 GT/s"; else ;
  
#line 4486 
  if (((int)pi->link_cfg.supported & 1) != 0) {
    int tmp_0;
    
#line 4487 
    tmp_0 = sprintf(bufp,"100/");
    
#line 4487 
    bufp += tmp_0;
  }
  else ;
  
#line 4488 
  if (((int)pi->link_cfg.supported & 2) != 0) {
    int tmp_1;
    
#line 4489 
    tmp_1 = sprintf(bufp,"1000/");
    
#line 4489 
    bufp += tmp_1;
  }
  else ;
  
#line 4490 
  if (((int)pi->link_cfg.supported & 8) != 0) {
    int tmp_2;
    
#line 4491 
    tmp_2 = sprintf(bufp,"10G/");
    
#line 4491 
    bufp += tmp_2;
  }
  else ;
  
#line 4492 
  if (((int)pi->link_cfg.supported & 16) != 0) {
    int tmp_3;
    
#line 4493 
    tmp_3 = sprintf(bufp,"40G/");
    
#line 4493 
    bufp += tmp_3;
  }
  else ;
  
#line 4494 
  if ((char *)(& buf) != bufp) 
#line 4495 
                               bufp -= 1; else ;
  
#line 4496 
  tmp_4 = t4_get_port_type_description(pi->port_type);
  
#line 4496 
  ;
  
#line 4496 
  sprintf(bufp,"BASE-%s",tmp_4);
  
#line 4501 
  if ((adap->flags & 8U) == 0U) {
    char *tmp_5;
    
#line 4502 
    if ((adap->flags & 4U) != 0U) 
#line 4502 
                                  tmp_5 = (char *)" MSI"; else 
#line 4502 
                                                               tmp_5 = (char *)"";
    
#line 4501 
    tmp_6 = tmp_5;
  }
  else 
#line 4501 
       tmp_6 = (char *)" MSI-X";
  
#line 4498 
  ;
  
#line 4498 
  ;
  
#line 4500 
  tmp_7 = is_offload(adap);
  
#line 4500 
  if (tmp_7 != 0) 
#line 4500 
                  tmp_8 = (char *)"R"; else 
#line 4500 
                                            tmp_8 = (char *)"";
  
#line 4498 
  ;
  
#line 4498 
  ;
  
#line 4498 
  ;
  
#line 4498 
  netdev_info(dev,"Chelsio %s rev %d %s %sNIC PCIe x%d%s%s\n",(u8 const *)(& adap->params.vpd.id),(unsigned int)adap->params.chip & 15U,(char *)(& buf),tmp_8,(int)adap->params.pci.width,spd,tmp_6);
  
#line 4504 
  netdev_info(dev,"S/N: %s, P/N: %s\n",(u8 const *)(& adap->params.vpd.sn),(u8 const *)(& adap->params.vpd.pn));
  
#line 4506 
  return;
}


#line 4508  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void enable_pcie_relaxed_ordering(struct pci_dev *dev)
{
  
#line 4510 
  pcie_capability_set_word(dev,8,(unsigned short)16);
  
#line 4511 
  return;
}


#line 4520  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void free_some_resources(struct adapter *adapter)
{
  unsigned int i;
  
#line 4524 
  t4_free_mem((void *)adapter->l2t);
  
#line 4525 
  t4_free_mem((void *)adapter->tids.tid_tab);
  
#line 4526 
  kfree((void const *)adapter->sge.egr_map);
  
#line 4527 
  kfree((void const *)adapter->sge.ingr_map);
  
#line 4528 
  kfree((void const *)adapter->sge.starving_fl);
  
#line 4529 
  kfree((void const *)adapter->sge.txq_maperr);
  
#line 4531 
  kfree((void const *)adapter->sge.blocked_fl);
  
#line 4533 
  disable_msi(adapter);
  
#line 4535 
  i = 0U;
  
#line 4535 
  goto ldv_60314;
  ldv_60313: 
#line 4536 
  ;
  
#line 4536 
  if (adapter->port[i] != (struct net_device *)0) {
    struct port_info *tmp_0;
    
#line 4537 
    struct port_info *pi = adap2pinfo(adapter,(int)i);
    
#line 4539 
    if ((unsigned int)pi->viid != 0U) 
#line 4540 
                                      t4_free_vi(adapter,adapter->mbox,adapter->pf,0U,(unsigned int)pi->viid); else ;
    
#line 4542 
    tmp_0 = adap2pinfo(adapter,(int)i);
    
#line 4542 
    kfree((void const *)tmp_0->rss);
    
#line 4543 
    ldv_free_netdev_157(adapter->port[i]);
  }
  else ;
  
#line 4535 
  i += 1U;
  ldv_60314: 
#line 4536 
  ;
  
#line 4535 
  if ((unsigned int)adapter->params.nports > i) 
#line 4537 
                                                goto ldv_60313; else 
                                                                  
#line 4540 
                                                                  goto ldv_60315;
  ldv_60315: 
#line 4541 
  ;
  
#line 4545 
  if ((adapter->flags & 16U) != 0U) 
#line 4546 
                                    t4_fw_bye(adapter,adapter->pf); else ;
  
#line 4547 
  return;
}


#line 4554  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int init_one(struct pci_dev *pdev, struct pci_device_id const *ent)
{
  int __retres;
  int func;
  int i;
  int err;
  int s_qpp;
  int qpp;
  int num_seg;
  struct port_info *pi;
  void *regs;
  unsigned int tmp;
  int tmp_0;
  struct workqueue_struct *tmp_3;
  int tmp_6;
  int tmp_10;
  int tmp_15;
  int tmp_17;
  
#line 4558 
  bool highdma = (_Bool)0;
  
#line 4559 
  struct adapter *adapter = (struct adapter *)0;
  {
    bool __print_once;
    
#line 4562 
    if (! __print_once) {
      
#line 4562 
      __print_once = (_Bool)1;
      
#line 4562 
      printk("\001",(char *)"Chelsio T4/T5 Network Driver",(char *)"2.0.0-ko");
    }
    else ;
  }
  
#line 4564 
  err = pci_request_regions(pdev,"cxgb4");
  
#line 4565 
  if (err != 0) {
    
#line 4567 
    _dev_info((struct device const *)(& pdev->dev),"cannot obtain PCI resources\n");
    
#line 4568 
    __retres = err;
    
#line 4568 
    goto return_label;
  }
  else ;
  
#line 4571 
  err = pci_enable_device(pdev);
  
#line 4572 
  if (err != 0) {
    
#line 4573 
    dev_err((struct device const *)(& pdev->dev),"cannot enable PCI device\n");
    
#line 4574 
    goto out_release_regions;
  }
  else ;
  
#line 4577 
  regs = pci_ioremap_bar(pdev,0);
  
#line 4578 
  if (regs == (void *)0) {
    
#line 4579 
    dev_err((struct device const *)(& pdev->dev),"cannot map device registers\n");
    
#line 4580 
    err = -12;
    
#line 4581 
    goto out_disable_device;
  }
  else ;
  
#line 4584 
  err = t4_wait_dev_ready(regs);
  
#line 4585 
  if (err < 0) 
#line 4586 
               goto out_unmap_bar0; else ;
  
#line 4589 
  tmp = readl((void const volatile *)(regs + 103424U));
  
#line 4589 
  func = (int)(tmp >> 8) & 7;
  
#line 4590 
  if ((unsigned long)func != ent->driver_data) {
    
#line 4591 
    iounmap((void volatile *)regs);
    
#line 4592 
    pci_disable_device(pdev);
    
#line 4593 
    pci_save_state(pdev);
    
#line 4594 
    goto sriov;
  }
  else ;
  
#line 4597 
  tmp_0 = pci_set_dma_mask(pdev,18446744073709551615ULL);
  
#line 4597 
  if (tmp_0 == 0) {
    
#line 4598 
    highdma = (_Bool)1;
    
#line 4599 
    err = pci_set_consistent_dma_mask(pdev,18446744073709551615ULL);
    
#line 4600 
    if (err != 0) {
      
#line 4601 
      dev_err((struct device const *)(& pdev->dev),"unable to obtain 64-bit DMA for ");
      
#line 4603 
      goto out_unmap_bar0;
    }
    else ;
  }
  else {
    
#line 4606 
    err = pci_set_dma_mask(pdev,4294967295ULL);
    
#line 4607 
    if (err != 0) {
      
#line 4608 
      dev_err((struct device const *)(& pdev->dev),"no usable DMA configuration\n");
      
#line 4609 
      goto out_unmap_bar0;
    }
    else ;
  }
  
#line 4613 
  pci_enable_pcie_error_reporting(pdev);
  
#line 4614 
  enable_pcie_relaxed_ordering(pdev);
  
#line 4615 
  pci_set_master(pdev);
  
#line 4616 
  pci_save_state(pdev);
  
#line 4618 
  adapter = (struct adapter *)kzalloc_0(71808UL,208U);
  
#line 4619 
  if (adapter == (struct adapter *)0) {
    
#line 4620 
    err = -12;
    
#line 4621 
    goto out_unmap_bar0;
  }
  else ;
  {
    struct lock_class_key __key;
    char const *__lock_name;
    
#line 4624 
    __lock_name = "\"%s\"";
    
#line 4624 
    tmp_3 = __alloc_workqueue_key("%s",131082U,1,& __key,__lock_name,(char *)"cxgb4");
  }
  
#line 4624 
  adapter->workq = tmp_3;
  
#line 4625 
  if (adapter->workq == (struct workqueue_struct *)0) {
    
#line 4626 
    err = -12;
    
#line 4627 
    goto out_free_adapter;
  }
  else ;
  
#line 4631 
  adapter->flags |= 2U;
  
#line 4633 
  adapter->regs = regs;
  
#line 4634 
  adapter->pdev = pdev;
  
#line 4635 
  adapter->pdev_dev = & pdev->dev;
  
#line 4636 
  adapter->mbox = (unsigned int)func;
  
#line 4637 
  adapter->pf = (unsigned int)func;
  
#line 4638 
  adapter->msg_enable = dflt_msg_enable;
  
#line 4639 
  memset((void *)(& adapter->chan_map),255,4UL);
  
#line 4641 
  spinlock_check(& adapter->stats_lock);
  {
    struct lock_class_key __key_0;
    
#line 4641 
    __raw_spin_lock_init(& adapter->stats_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->stats_lock)->rlock",& __key_0);
  }
  
#line 4642 
  spinlock_check(& adapter->tid_release_lock);
  {
    struct lock_class_key __key_1;
    
#line 4642 
    __raw_spin_lock_init(& adapter->tid_release_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->tid_release_lock)->rlock",& __key_1);
  }
  
#line 4643 
  spinlock_check(& adapter->win0_lock);
  {
    struct lock_class_key __key_2;
    
#line 4643 
    __raw_spin_lock_init(& adapter->win0_lock.__anonCompField_spinlock_18.rlock,"&(&adapter->win0_lock)->rlock",& __key_2);
  }
  {
    struct lock_class_key __key_3;
    
#line 4645 
    __init_work(& adapter->tid_release_task,0);
    
#line 4645 
    atomic_long_t __constr_expr_37 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 4645 
    adapter->tid_release_task.data = __constr_expr_37;
    
#line 4645 
    lockdep_init_map(& adapter->tid_release_task.lockdep_map,"(&adapter->tid_release_task)",& __key_3,0);
    
#line 4645 
    INIT_LIST_HEAD(& adapter->tid_release_task.entry);
    
#line 4645 
    adapter->tid_release_task.func = & process_tid_release_list;
  }
  {
    struct lock_class_key __key_4;
    
#line 4646 
    __init_work(& adapter->db_full_task,0);
    
#line 4646 
    atomic_long_t __constr_expr_38 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 4646 
    adapter->db_full_task.data = __constr_expr_38;
    
#line 4646 
    lockdep_init_map(& adapter->db_full_task.lockdep_map,"(&adapter->db_full_task)",& __key_4,0);
    
#line 4646 
    INIT_LIST_HEAD(& adapter->db_full_task.entry);
    
#line 4646 
    adapter->db_full_task.func = & process_db_full;
  }
  {
    struct lock_class_key __key_5;
    
#line 4647 
    __init_work(& adapter->db_drop_task,0);
    
#line 4647 
    atomic_long_t __constr_expr_39 = {.counter = WORK_STRUCT_NO_POOL};
    
#line 4647 
    adapter->db_drop_task.data = __constr_expr_39;
    
#line 4647 
    lockdep_init_map(& adapter->db_drop_task.lockdep_map,"(&adapter->db_drop_task)",& __key_5,0);
    
#line 4647 
    INIT_LIST_HEAD(& adapter->db_drop_task.entry);
    
#line 4647 
    adapter->db_drop_task.func = & process_db_drop;
  }
  
#line 4649 
  err = t4_prep_adapter(adapter);
  
#line 4650 
  if (err != 0) 
#line 4651 
                goto out_free_adapter; else ;
  
#line 4654 
  tmp_6 = is_t4(adapter->params.chip);
  
#line 4654 
  if (tmp_6 == 0) {
    u32 tmp_4;
    resource_size_t tmp_5;
    
#line 4655 
    s_qpp = (int)(adapter->pf * 4U);
    
#line 4658 
    tmp_4 = t4_read_reg(adapter,4112U);
    
#line 4658 
    qpp = 1 << ((tmp_4 >> s_qpp) & 15U);
    
#line 4660 
    num_seg = 32;
    
#line 4667 
    if (qpp > num_seg) {
      
#line 4668 
      dev_err((struct device const *)(& pdev->dev),"Incorrect number of egress queues per page\n");
      
#line 4670 
      err = -22;
      
#line 4671 
      goto out_free_adapter;
    }
    else ;
    
#line 4674 
    if (pdev->resource[2].start != 0ULL || pdev->resource[2].end != pdev->resource[2].start) 
      
#line 4674 
      tmp_5 = (pdev->resource[2].end - pdev->resource[2].start) + 1ULL; else 
                                                                    
#line 4674 
                                                                    tmp_5 = 0ULL;
    
#line 4673 
    ;
    
#line 4673 
    adapter->bar2 = ioremap_wc(pdev->resource[2].start,(unsigned long)tmp_5);
    
#line 4675 
    if (adapter->bar2 == (void *)0) {
      
#line 4676 
      dev_err((struct device const *)(& pdev->dev),"cannot map device bar2 region\n");
      
#line 4677 
      err = -12;
      
#line 4678 
      goto out_free_adapter;
    }
    else ;
    
#line 4680 
    t4_write_reg(adapter,4332U,3584U);
  }
  else ;
  
#line 4684 
  setup_memwin(adapter);
  
#line 4685 
  err = adap_init0(adapter);
  
#line 4687 
  bitmap_zero(adapter->sge.blocked_fl,adapter->sge.egr_sz);
  
#line 4689 
  setup_memwin_rdma(adapter);
  
#line 4690 
  if (err != 0) 
#line 4691 
                goto out_unmap_bar; else ;
  
#line 4693 
  i = 0;
  
#line 4693 
  goto ldv_60352;
  ldv_60351: 
#line 4694 
  ;
  {
    struct net_device *netdev;
    
#line 4696 
    netdev = ldv_alloc_etherdev_mqs_158(600,32U,32U);
    
#line 4698 
    if (netdev == (struct net_device *)0) {
      
#line 4699 
      err = -12;
      
#line 4700 
      goto out_free_dev;
    }
    else ;
    
#line 4703 
    netdev->dev.parent = & pdev->dev;
    
#line 4705 
    adapter->port[i] = netdev;
    
#line 4706 
    pi = (struct port_info *)netdev_priv((struct net_device const *)netdev);
    
#line 4707 
    pi->adapter = adapter;
    
#line 4708 
    pi->xact_addr_filt = (short)(-1);
    
#line 4709 
    pi->port_id = (unsigned char)i;
    
#line 4710 
    netdev->irq = (int)pdev->irq;
    
#line 4712 
    netdev->hw_features = 25771442579ULL;
    
#line 4716 
    if ((int)highdma != 0) 
#line 4717 
                           netdev->hw_features |= 32ULL; else ;
    
#line 4718 
    netdev->features |= netdev->hw_features;
    
#line 4719 
    netdev->vlan_features = netdev->features & 1638451ULL;
    
#line 4721 
    netdev->priv_flags |= 131072U;
    
#line 4723 
    netdev->netdev_ops = & cxgb4_netdev_ops;
    
#line 4725 
    netdev->dcbnl_ops = & cxgb4_dcb_ops;
    
#line 4726 
    cxgb4_dcb_state_init(netdev);
    
#line 4728 
    cxgb4_set_ethtool_ops(netdev);
  }
  
#line 4693 
  i += 1;
  ldv_60352: 
#line 4694 
  ;
  
#line 4693 
  if ((int)adapter->params.nports > i) 
#line 4695 
                                       goto ldv_60351; else 
#line 4698 
                                                            goto ldv_60353;
  ldv_60353: 
#line 4699 
  ;
  
#line 4731 
  pci_set_drvdata(pdev,(void *)adapter);
  
#line 4733 
  if ((adapter->flags & 16U) != 0U) {
    
#line 4734 
    err = t4_port_init(adapter,func,func,0);
    
#line 4735 
    if (err != 0) 
#line 4736 
                  goto out_free_dev; else ;
  }
  else 
    
#line 4737 
    if ((unsigned int)adapter->params.nports == 1U) {
      u8 hw_addr[6U];
      
#line 4744 
      u8 *na = (u8 *)(& adapter->params.vpd.na);
      
#line 4746 
      err = t4_get_raw_vpd_params(adapter,& adapter->params.vpd);
      
#line 4747 
      if (err == 0) {
        unsigned int tmp_8;
        unsigned int tmp_9;
        
#line 4748 
        i = 0;
        
#line 4748 
        goto ldv_60357;
        ldv_60356: 
#line 4749 
        ;
        
#line 4749 
        tmp_8 = hex2val((char)((int)((char)*(na + i * 2))));
        
#line 4749 
        tmp_9 = hex2val((char)((int)((char)*(na + ((unsigned int)(i * 2) + 1U)))));
        
#line 4749 
        hw_addr[i] = (unsigned char)((unsigned int)((unsigned char)tmp_8) * 16U + (unsigned int)((unsigned char)tmp_9));
        
#line 4748 
        i += 1;
        ldv_60357: 
#line 4749 
        ;
        
#line 4748 
        if (i <= 5) 
#line 4750 
                    goto ldv_60356; else 
#line 4753 
                                         goto ldv_60358;
        ldv_60358: 
#line 4754 
        ;
        
#line 4751 
        t4_set_hw_addr(adapter,0,(u8 *)(& hw_addr));
      }
      else ;
    }
    else ;
  
#line 4758 
  cfg_queues(adapter);
  
#line 4760 
  adapter->l2t = t4_init_l2t();
  
#line 4761 
  if (adapter->l2t == (struct l2t_data *)0) {
    
#line 4763 
    dev_warn((struct device const *)(& pdev->dev),"could not allocate L2T, continuing\n");
    
#line 4764 
    adapter->params.offload = (unsigned char)0U;
  }
  else ;
  
#line 4768 
  adapter->clipt = t4_init_clip_tbl(adapter->clipt_start,adapter->clipt_end);
  
#line 4770 
  if (adapter->clipt == (struct clip_tbl *)0) {
    
#line 4774 
    dev_warn((struct device const *)(& pdev->dev),"could not allocate Clip table, continuing\n");
    
#line 4776 
    adapter->params.offload = (unsigned char)0U;
  }
  else ;
  
#line 4779 
  tmp_10 = is_offload((struct adapter const *)adapter);
  
#line 4779 
  if (tmp_10 != 0) {
    int tmp_11;
    
#line 4779 
    tmp_11 = tid_init(& adapter->tids);
    
#line 4779 
    if (tmp_11 < 0) {
      
#line 4780 
      dev_warn((struct device const *)(& pdev->dev),"could not allocate TID table, ");
      
#line 4782 
      adapter->params.offload = (unsigned char)0U;
    }
    else ;
  }
  else ;
  
#line 4786 
  if (msi > 1) {
    int tmp_13;
    
#line 4786 
    tmp_13 = enable_msix(adapter);
    
#line 4786 
    if (tmp_13 == 0) 
#line 4787 
                     adapter->flags |= 8U; else 
#line 4786 
                                                goto _LAND;
  }
  else {
    _LAND: 
#line 4788 
    ;
    
#line 4788 
    if (msi > 0) {
      int tmp_12;
      
#line 4788 
      tmp_12 = pci_enable_msi_exact(pdev,1);
      
#line 4788 
      if (tmp_12 == 0) 
#line 4789 
                       adapter->flags |= 4U; else ;
    }
    else ;
  }
  
#line 4791 
  err = init_rss(adapter);
  
#line 4792 
  if (err != 0) 
#line 4793 
                goto out_free_dev; else ;
  
#line 4801 
  i = 0;
  
#line 4801 
  goto ldv_60361;
  ldv_60360: 
#line 4802 
  ;
  
#line 4802 
  pi = adap2pinfo(adapter,i);
  
#line 4803 
  netif_set_real_num_tx_queues(adapter->port[i],(unsigned int)pi->nqsets);
  
#line 4804 
  netif_set_real_num_rx_queues(adapter->port[i],(unsigned int)pi->nqsets);
  
#line 4806 
  err = ldv_register_netdev_159(adapter->port[i]);
  
#line 4807 
  if (err != 0) 
#line 4808 
                goto ldv_60359; else ;
  
#line 4809 
  adapter->chan_map[(int)pi->tx_chan] = (unsigned char)i;
  
#line 4810 
  print_port_info((struct net_device const *)adapter->port[i]);
  
#line 4801 
  i += 1;
  ldv_60361: 
#line 4802 
  ;
  
#line 4801 
  if ((int)adapter->params.nports > i) 
#line 4803 
                                       goto ldv_60360; else 
#line 4806 
                                                            goto ldv_60359;
  ldv_60359: 
#line 4807 
  ;
  
#line 4812 
  if (i == 0) {
    
#line 4813 
    dev_err((struct device const *)(& pdev->dev),"could not register any net devices\n");
    
#line 4814 
    goto out_free_dev;
  }
  else ;
  
#line 4816 
  if (err != 0) {
    
#line 4817 
    dev_warn((struct device const *)(& pdev->dev),"only %d net devices registered\n",i);
    
#line 4818 
    err = 0;
  }
  else ;
  
#line 4821 
  if (cxgb4_debugfs_root != (struct dentry *)0) {
    char const *tmp_14;
    
#line 4822 
    ;
    
#line 4822 
    tmp_14 = pci_name((struct pci_dev const *)pdev);
    
#line 4822 
    adapter->debugfs_root = debugfs_create_dir(tmp_14,cxgb4_debugfs_root);
    
#line 4824 
    setup_debugfs(adapter);
  }
  else ;
  
#line 4828 
  pdev->needs_freset = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U;
  
#line 4830 
  tmp_15 = is_offload((struct adapter const *)adapter);
  
#line 4830 
  if (tmp_15 != 0) 
#line 4831 
                   attach_ulds(adapter); else ;
  sriov: 
#line 4833 
  ;
  
#line 4835 
  if ((unsigned int)func <= 3U && num_vf[func] != 0U) {
    int tmp_16;
    
#line 4836 
    tmp_16 = pci_enable_sriov(pdev,(int)num_vf[func]);
    
#line 4836 
    if (tmp_16 == 0) 
#line 4837 
                     _dev_info((struct device const *)(& pdev->dev),"instantiated %u virtual functions\n",num_vf[func]); else ;
  }
  else ;
  
#line 4841 
  __retres = 0;
  
#line 4841 
  goto return_label;
  out_free_dev: 
#line 4843 
  ;
  
#line 4844 
  free_some_resources(adapter);
  out_unmap_bar: 
#line 4845 
  ;
  
#line 4846 
  tmp_17 = is_t4(adapter->params.chip);
  
#line 4846 
  if (tmp_17 == 0) 
#line 4847 
                   iounmap((void volatile *)adapter->bar2); else ;
  out_free_adapter: 
#line 4848 
  ;
  
#line 4849 
  if (adapter->workq != (struct workqueue_struct *)0) 
#line 4850 
                                                      destroy_workqueue(adapter->workq); else ;
  
#line 4852 
  kfree((void const *)adapter);
  out_unmap_bar0: 
#line 4853 
  ;
  
#line 4854 
  iounmap((void volatile *)regs);
  out_disable_device: 
#line 4855 
  ;
  
#line 4856 
  pci_disable_pcie_error_reporting(pdev);
  
#line 4857 
  pci_disable_device(pdev);
  out_release_regions: 
#line 4858 
  ;
  
#line 4859 
  pci_release_regions(pdev);
  
#line 4860 
  __retres = err;
  return_label: 
#line 4860 
                return __retres;
}


#line 4863  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void remove_one(struct pci_dev *pdev)
{
  
#line 4865 
  struct adapter *adapter = pci_get_drvdata(pdev);
  
#line 4868 
  pci_disable_sriov(pdev);
  
#line 4872 
  if (adapter != (struct adapter *)0) {
    int i;
    int tmp_0;
    int tmp_1;
    
#line 4878 
    destroy_workqueue(adapter->workq);
    
#line 4880 
    tmp_0 = is_offload((struct adapter const *)adapter);
    
#line 4880 
    if (tmp_0 != 0) 
#line 4881 
                    detach_ulds(adapter); else ;
    
#line 4883 
    disable_interrupts(adapter);
    
#line 4885 
    i = 0;
    
#line 4885 
    goto ldv_60371;
    ldv_60370: 
#line 4886 
    ;
    
#line 4886 
    if ((unsigned int)(adapter->port[i])->reg_state == 1U) 
#line 4887 
                                                           ldv_unregister_netdev_160(adapter->port[i]); else ;
    
#line 4885 
    i += 1;
    ldv_60371: 
#line 4886 
    ;
    
#line 4885 
    if ((int)adapter->params.nports > i) 
#line 4887 
                                         goto ldv_60370; else 
#line 4890 
                                                              goto ldv_60372;
    ldv_60372: 
#line 4891 
    ;
    
#line 4889 
    debugfs_remove_recursive(adapter->debugfs_root);
    
#line 4894 
    if (adapter->tids.ftid_tab != (struct filter_entry *)0) {
      
#line 4895 
      struct filter_entry *f = adapter->tids.ftid_tab;
      
#line 4896 
      i = 0;
      
#line 4896 
      goto ldv_60375;
      ldv_60374: 
#line 4897 
      ;
      
#line 4898 
      if ((unsigned int)*((unsigned char *)f + 0UL) != 0U) 
#line 4899 
                                                           clear_filter(adapter,f); else ;
      
#line 4897 
      i += 1;
      
#line 4897 
      f += 1;
      ldv_60375: 
#line 4898 
      ;
      
#line 4896 
      if (adapter->tids.nftids + adapter->tids.nsftids > (unsigned int)i) 
        
#line 4898 
        goto ldv_60374; else 
#line 4901 
                             goto ldv_60376;
      ldv_60376: 
#line 4902 
      ;
    }
    else ;
    
#line 4902 
    if ((adapter->flags & 1U) != 0U) 
#line 4903 
                                     cxgb_down(adapter); else ;
    
#line 4905 
    free_some_resources(adapter);
    
#line 4907 
    t4_cleanup_clip_tbl(adapter);
    
#line 4909 
    iounmap((void volatile *)adapter->regs);
    
#line 4910 
    tmp_1 = is_t4(adapter->params.chip);
    
#line 4910 
    if (tmp_1 == 0) 
#line 4911 
                    iounmap((void volatile *)adapter->bar2); else ;
    
#line 4912 
    pci_disable_pcie_error_reporting(pdev);
    
#line 4913 
    if ((adapter->flags & 2U) != 0U) {
      
#line 4914 
      pci_disable_device(pdev);
      
#line 4915 
      adapter->flags &= 4294967293U;
    }
    else ;
    
#line 4917 
    pci_release_regions(pdev);
    
#line 4918 
    synchronize_rcu();
    
#line 4919 
    kfree((void const *)adapter);
  }
  else 
#line 4921 
       pci_release_regions(pdev);
  
#line 4922 
  return;
}


#line 4924  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static struct pci_driver cxgb4_driver = {.node = {.next = (struct list_head *)0, .prev = (struct list_head *)0}, .name = "cxgb4", .id_table = (struct pci_device_id const *)(& cxgb4_pci_tbl), .probe = & init_one, .remove = & remove_one, .suspend = (int (*)(struct pci_dev *, pm_message_t ))0, .suspend_late = (int (*)(struct pci_dev *, pm_message_t ))0, .resume_early = (int (*)(struct pci_dev *))0, .resume = (int (*)(struct pci_dev *))0, .shutdown = & remove_one, .sriov_configure = (int (*)(struct pci_dev *, int ))0, .err_handler = & cxgb4_eeh, .driver = {.name = (char const *)0, .bus = (struct bus_type *)0, .owner = (struct module *)0, .mod_name = (char const *)0, .suppress_bind_attrs = (_Bool)0, .probe_type = 0, .of_match_table = (struct of_device_id const *)0, .acpi_match_table = (struct acpi_device_id const *)0, .probe = (int (*)(struct device *))0, .remove = (int (*)(struct device *))0, .shutdown = (void (*)(struct device *))0, .suspend = (int (*)(struct device *, pm_message_t ))0, .resume = (int (*)(struct device *))0, .groups = (struct attribute_group const **)0, .pm = (struct dev_pm_ops const *)0, .p = (struct driver_private *)0}, .dynids = {.lock = {.__anonCompField_spinlock_18 = {.rlock = {.raw_lock = {.val = {.counter = 0}}, .magic = 0U, .owner_cpu = 0U, .owner = (void *)0, .dep_map = {.key = (struct lock_class_key *)0, .class_cache = {(struct lock_class *)0, (struct lock_class *)0}, .name = (char const *)0, .cpu = 0, .ip = 0UL}}}}, .list = {.next = (struct list_head *)0, .prev = (struct list_head *)0}}};

#line 4933  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static int cxgb4_init_module(void)
{
  int ret;
  
#line 4938 
  cxgb4_debugfs_root = debugfs_create_dir("cxgb4",(struct dentry *)0);
  
#line 4939 
  if (cxgb4_debugfs_root == (struct dentry *)0) 
#line 4940 
                                                printk("\001"); else ;
  
#line 4942 
  ret = ldv___pci_register_driver_161(& cxgb4_driver,& __this_module,"cxgb4");
  
#line 4943 
  if (ret < 0) 
#line 4944 
               ldv_debugfs_remove_162(cxgb4_debugfs_root); else ;
  
#line 4947 
  if (! inet6addr_registered) {
    
#line 4948 
    register_inet6addr_notifier(& cxgb4_inet6addr_notifier);
    
#line 4949 
    inet6addr_registered = (_Bool)1;
  }
  else ;
  
#line 4953 
  return ret;
}


#line 4956  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_main.c"
static void cxgb4_cleanup_module(void)
{
  
#line 4959 
  if ((int)inet6addr_registered != 0) {
    
#line 4960 
    unregister_inet6addr_notifier(& cxgb4_inet6addr_notifier);
    
#line 4961 
    inet6addr_registered = (_Bool)0;
  }
  else ;
  
#line 4964 
  ldv_pci_unregister_driver_163(& cxgb4_driver);
  
#line 4965 
  ldv_debugfs_remove_164(cxgb4_debugfs_root);
  
#line 4966 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
int (*ldv_emg_alias_eth_validate_addr_9)(struct net_device *) = & eth_validate_addr;

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
struct pci_driver *ldv_emg_alias_cxgb4_driver_2 = & cxgb4_driver;

#line 64 
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2);


#line 65 
void ldv_emg_tasklet_schedule(struct tasklet_struct *arg0);


#line 67 
void ldv_emg_debugfs_remove(struct dentry *arg0);


#line 68 
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0);


#line 69 
_Bool ldv_emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1);


#line 70 
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2);


#line 71 
void ldv_emg_unregister_netdev(struct net_device *arg0);


#line 72 
void ldv_emg_free_irq(unsigned int arg0, void *arg1);


#line 73 
int ldv_emg_register_netdev(struct net_device *arg0);


#line 74 
void ldv_emg_free_netdev(struct net_device *arg0);


#line 76 
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4);


#line 80  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
int ldv_emg_wrapper_cxgb_set_mac_addr_19(struct net_device *arg0, void *arg1)
{
  int tmp;
  
#line 81 
  tmp = cxgb_set_mac_addr(arg0,arg1);
  
#line 81 
  return tmp;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
enum irqreturn ldv_emg_wrapper_t4_nondata_intr_2(int arg0, void *arg1)
{
  enum irqreturn tmp;
  
#line 86 
  tmp = t4_nondata_intr(arg0,arg1);
  
#line 86 
  return tmp;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
unsigned short ldv_emg_wrapper_cxgb_select_queue_22(struct net_device *arg0, struct sk_buff *arg1, void *arg2, unsigned short (*arg3)(struct net_device *, struct sk_buff *))
{
  unsigned short tmp;
  
#line 91 
  tmp = cxgb_select_queue(arg0,arg1,arg2,arg3);
  
#line 91 
  return tmp;
}


#line 95  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
void ldv_emg_wrapper_cxgb_netpoll_36(struct net_device *arg0)
{
  
#line 96 
  cxgb_netpoll(arg0);
  
#line 97 
  return;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
int ldv_emg_cxgb4_init_module(void)
{
  int tmp;
  
#line 101 
  tmp = cxgb4_init_module();
  
#line 101 
  return tmp;
}


#line 104  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
void ldv_emg_wrapper_remove_one_2(struct pci_dev *arg0)
{
  
#line 105 
  remove_one(arg0);
  
#line 106 
  return;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
void ldv_emg_wrapper_cxgb_set_rxmode_21(struct net_device *arg0)
{
  
#line 110 
  cxgb_set_rxmode(arg0);
  
#line 111 
  return;
}


#line 114  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
int ldv_emg_wrapper_init_one_3(struct pci_dev *arg0, struct pci_device_id *arg1)
{
  int tmp;
  
#line 115 
  tmp = init_one(arg0,(struct pci_device_id const *)arg1);
  
#line 115 
  return tmp;
}


#line 119  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
struct rtnl_link_stats64 *ldv_emg_wrapper_cxgb_get_stats_13(struct net_device *arg0, struct rtnl_link_stats64 *arg1)
{
  struct rtnl_link_stats64 *tmp;
  
#line 120 
  tmp = cxgb_get_stats(arg0,arg1);
  
#line 120 
  return tmp;
}


#line 124  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
int ldv_emg_wrapper_cxgb_set_features_11(struct net_device *arg0, unsigned long long arg1)
{
  int tmp;
  
#line 125 
  tmp = cxgb_set_features(arg0,arg1);
  
#line 125 
  return tmp;
}


#line 129  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
int ldv_emg_wrapper_cxgb_ioctl_23(struct net_device *arg0, struct ifreq *arg1, int arg2)
{
  int tmp;
  
#line 130 
  tmp = cxgb_ioctl(arg0,arg1,arg2);
  
#line 130 
  return tmp;
}


#line 134  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
int ldv_emg_wrapper_cxgb_change_mtu_6(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 135 
  tmp = cxgb_change_mtu(arg0,arg1);
  
#line 135 
  return tmp;
}


#line 139  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
int ldv_emg_wrapper_cxgb_open_2(struct net_device *arg0)
{
  int tmp;
  
#line 140 
  tmp = cxgb_open(arg0);
  
#line 140 
  return tmp;
}


#line 144  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
int ldv_emg_wrapper_cxgb_close_2(struct net_device *arg0)
{
  int tmp;
  
#line 145 
  tmp = cxgb_close(arg0);
  
#line 145 
  return tmp;
}


#line 149  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
void ldv_emg_cxgb4_cleanup_module(void)
{
  
#line 150 
  cxgb4_cleanup_module();
  
#line 151 
  return;
}


#line 161  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static long PTR_ERR(void const *ptr)
{
  long tmp;
  
#line 164 
  tmp = ldv_ptr_err(ptr);
  
#line 164 
  return tmp;
}


#line 168  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static bool IS_ERR(void const *ptr)
{
  bool __retres;
  long ret;
  
#line 172 
  ret = ldv_is_err(ptr);
  
#line 173 
  __retres = (_Bool)(ret != 0L);
  
#line 173 
  return __retres;
}


#line 177  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static bool IS_ERR_OR_NULL(void const *ptr)
{
  bool __retres;
  long ret;
  
#line 181 
  ret = ldv_is_err_or_null(ptr);
  
#line 182 
  __retres = (_Bool)(ret != 0L);
  
#line 182 
  return __retres;
}


#line 214  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void atomic_dec(atomic_t *v)
{
  
#line 217 
  ldv_atomic_dec(v);
  
#line 218 
  return;
}


#line 570  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void *kmalloc_0(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 573 
  tmp = ldv_kmalloc(size,flags);
  
#line 573 
  return tmp;
}


#line 584  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void *kcalloc_0(size_t n, size_t size, gfp_t flags)
{
  void *tmp;
  
#line 587 
  tmp = ldv_kcalloc(n,size,flags);
  
#line 587 
  return tmp;
}


#line 591  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void *kzalloc_0(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 594 
  tmp = ldv_kzalloc(size,flags);
  
#line 594 
  return tmp;
}


#line 862  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_76(spinlock_t *lock)
{
  
#line 866 
  ldv_spin_model_lock((char *)"bpoll_lock_of_sge_rspq");
  
#line 868 
  spin_lock_0(lock);
  
#line 869 
  return;
}


#line 872  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_77(spinlock_t *lock)
{
  
#line 876 
  ldv_spin_model_unlock((char *)"bpoll_lock_of_sge_rspq");
  
#line 878 
  spin_unlock_0(lock);
  
#line 879 
  return;
}


#line 942  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_tasklet_schedule_84(struct tasklet_struct *t)
{
  
#line 946 
  ldv_emg_tasklet_schedule(t);
  
#line 947 
  return;
}


#line 950  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static int ldv_request_irq_85(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 954 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 954 
  return tmp;
}


#line 958  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static int ldv_request_irq_86(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 962 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 962 
  return tmp;
}


#line 966  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static int ldv_request_irq_87(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 970 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 970 
  return tmp;
}


#line 974  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static int ldv_request_irq_88(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 978 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 978 
  return tmp;
}


#line 982  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static int ldv_request_irq_89(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 986 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 986 
  return tmp;
}


#line 990  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_free_irq_90(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 994 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 995 
  return;
}


#line 998  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_free_irq_91(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1002 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1003 
  return;
}


#line 1006  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_free_irq_92(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1010 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1011 
  return;
}


#line 1014  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_free_irq_93(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1018 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1019 
  return;
}


#line 1022  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_free_irq_94(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1026 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1027 
  return;
}


#line 1030  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_free_irq_95(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1034 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1035 
  return;
}


#line 1038  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_free_irq_96(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1042 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1043 
  return;
}


#line 1046  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_free_irq_97(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1050 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1051 
  return;
}


#line 1054  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_free_irq_98(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1058 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1059 
  return;
}


#line 1062  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_free_irq_99(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1066 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1067 
  return;
}


#line 1070  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_free_irq_100(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1074 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1075 
  return;
}


#line 1078  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_free_irq_101(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1082 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1083 
  return;
}


#line 1086  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_bh_102(spinlock_t *lock)
{
  
#line 1090 
  ldv_spin_model_lock((char *)"atid_lock_of_tid_info");
  
#line 1092 
  spin_lock_bh(lock);
  
#line 1093 
  return;
}


#line 1096  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_bh_103(spinlock_t *lock)
{
  
#line 1100 
  ldv_spin_model_unlock((char *)"atid_lock_of_tid_info");
  
#line 1102 
  spin_unlock_bh(lock);
  
#line 1103 
  return;
}


#line 1106  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_bh_104(spinlock_t *lock)
{
  
#line 1110 
  ldv_spin_model_lock((char *)"atid_lock_of_tid_info");
  
#line 1112 
  spin_lock_bh(lock);
  
#line 1113 
  return;
}


#line 1116  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_bh_105(spinlock_t *lock)
{
  
#line 1120 
  ldv_spin_model_unlock((char *)"atid_lock_of_tid_info");
  
#line 1122 
  spin_unlock_bh(lock);
  
#line 1123 
  return;
}


#line 1126  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_bh_106(spinlock_t *lock)
{
  
#line 1130 
  ldv_spin_model_lock((char *)"stid_lock_of_tid_info");
  
#line 1132 
  spin_lock_bh(lock);
  
#line 1133 
  return;
}


#line 1136  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_bh_107(spinlock_t *lock)
{
  
#line 1140 
  ldv_spin_model_unlock((char *)"stid_lock_of_tid_info");
  
#line 1142 
  spin_unlock_bh(lock);
  
#line 1143 
  return;
}


#line 1146  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_bh_108(spinlock_t *lock)
{
  
#line 1150 
  ldv_spin_model_lock((char *)"stid_lock_of_tid_info");
  
#line 1152 
  spin_lock_bh(lock);
  
#line 1153 
  return;
}


#line 1156  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_bh_109(spinlock_t *lock)
{
  
#line 1160 
  ldv_spin_model_unlock((char *)"stid_lock_of_tid_info");
  
#line 1162 
  spin_unlock_bh(lock);
  
#line 1163 
  return;
}


#line 1166  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_bh_110(spinlock_t *lock)
{
  
#line 1170 
  ldv_spin_model_lock((char *)"stid_lock_of_tid_info");
  
#line 1172 
  spin_lock_bh(lock);
  
#line 1173 
  return;
}


#line 1176  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_bh_111(spinlock_t *lock)
{
  
#line 1180 
  ldv_spin_model_unlock((char *)"stid_lock_of_tid_info");
  
#line 1182 
  spin_unlock_bh(lock);
  
#line 1183 
  return;
}


#line 1186  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_bh_112(spinlock_t *lock)
{
  
#line 1190 
  ldv_spin_model_lock((char *)"tid_release_lock_of_adapter");
  
#line 1192 
  spin_lock_bh(lock);
  
#line 1193 
  return;
}


#line 1196  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static bool ldv_queue_work_113(struct workqueue_struct *wq, struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1200 
  tmp = ldv_emg_queue_work(wq,work);
  
#line 1200 
  __retres = tmp != 0;
  
#line 1200 
  return __retres;
}


#line 1204  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_bh_114(spinlock_t *lock)
{
  
#line 1208 
  ldv_spin_model_unlock((char *)"tid_release_lock_of_adapter");
  
#line 1210 
  spin_unlock_bh(lock);
  
#line 1211 
  return;
}


#line 1214  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_bh_115(spinlock_t *lock)
{
  
#line 1218 
  ldv_spin_model_lock((char *)"tid_release_lock_of_adapter");
  
#line 1220 
  spin_lock_bh(lock);
  
#line 1221 
  return;
}


#line 1224  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_bh_116(spinlock_t *lock)
{
  
#line 1228 
  ldv_spin_model_unlock((char *)"tid_release_lock_of_adapter");
  
#line 1230 
  spin_unlock_bh(lock);
  
#line 1231 
  return;
}


#line 1234  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_bh_117(spinlock_t *lock)
{
  
#line 1238 
  ldv_spin_model_lock((char *)"tid_release_lock_of_adapter");
  
#line 1240 
  spin_lock_bh(lock);
  
#line 1241 
  return;
}


#line 1244  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_bh_118(spinlock_t *lock)
{
  
#line 1248 
  ldv_spin_model_unlock((char *)"tid_release_lock_of_adapter");
  
#line 1250 
  spin_unlock_bh(lock);
  
#line 1251 
  return;
}


#line 1254  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_119(spinlock_t *lock)
{
  
#line 1258 
  ldv_spin_model_lock((char *)"stats_lock_of_adapter");
  
#line 1260 
  spin_lock_0(lock);
  
#line 1261 
  return;
}


#line 1264  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_120(spinlock_t *lock)
{
  
#line 1268 
  ldv_spin_model_unlock((char *)"stats_lock_of_adapter");
  
#line 1270 
  spin_unlock_0(lock);
  
#line 1271 
  return;
}


#line 1274  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_121(spinlock_t *lock)
{
  
#line 1278 
  ldv_spin_model_lock((char *)"win0_lock_of_adapter");
  
#line 1280 
  spin_lock_0(lock);
  
#line 1281 
  return;
}


#line 1284  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_122(spinlock_t *lock)
{
  
#line 1288 
  ldv_spin_model_unlock((char *)"win0_lock_of_adapter");
  
#line 1290 
  spin_unlock_0(lock);
  
#line 1291 
  return;
}


#line 1294  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_123(spinlock_t *lock)
{
  
#line 1298 
  ldv_spin_model_lock((char *)"win0_lock_of_adapter");
  
#line 1300 
  spin_lock_0(lock);
  
#line 1301 
  return;
}


#line 1304  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_124(spinlock_t *lock)
{
  
#line 1308 
  ldv_spin_model_unlock((char *)"win0_lock_of_adapter");
  
#line 1310 
  spin_unlock_0(lock);
  
#line 1311 
  return;
}


#line 1314  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv___ldv_spin_lock_125(spinlock_t *ldv_func_arg1)
{
  
#line 1318 
  ldv_spin_model_lock((char *)"db_lock_of_sge_txq");
  
#line 1320 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 1321 
  return;
}


#line 1324  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_irqrestore_126(spinlock_t *lock, unsigned long flags)
{
  
#line 1328 
  ldv_spin_model_unlock((char *)"db_lock_of_sge_txq");
  
#line 1330 
  spin_unlock_irqrestore(lock,flags);
  
#line 1331 
  return;
}


#line 1334  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_irq_127(spinlock_t *lock)
{
  
#line 1338 
  ldv_spin_model_lock((char *)"db_lock_of_sge_txq");
  
#line 1340 
  spin_lock_irq(lock);
  
#line 1341 
  return;
}


#line 1344  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_irq_128(spinlock_t *lock)
{
  
#line 1348 
  ldv_spin_model_unlock((char *)"db_lock_of_sge_txq");
  
#line 1350 
  spin_unlock_irq(lock);
  
#line 1351 
  return;
}


#line 1354  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_irq_129(spinlock_t *lock)
{
  
#line 1358 
  ldv_spin_model_lock((char *)"db_lock_of_sge_txq");
  
#line 1360 
  spin_lock_irq(lock);
  
#line 1361 
  return;
}


#line 1364  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_irq_130(spinlock_t *lock)
{
  
#line 1368 
  ldv_spin_model_unlock((char *)"db_lock_of_sge_txq");
  
#line 1370 
  spin_unlock_irq(lock);
  
#line 1371 
  return;
}


#line 1374  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static bool ldv_queue_work_131(struct workqueue_struct *wq, struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1378 
  tmp = ldv_emg_queue_work(wq,work);
  
#line 1378 
  __retres = tmp != 0;
  
#line 1378 
  return __retres;
}


#line 1382  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static bool ldv_queue_work_132(struct workqueue_struct *wq, struct work_struct *work)
{
  bool __retres;
  bool tmp;
  
#line 1386 
  tmp = ldv_emg_queue_work(wq,work);
  
#line 1386 
  __retres = tmp != 0;
  
#line 1386 
  return __retres;
}


#line 1390  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_133(spinlock_t *lock)
{
  
#line 1394 
  ldv_spin_model_lock((char *)"adap_rcu_lock");
  
#line 1396 
  spin_lock_0(lock);
  
#line 1397 
  return;
}


#line 1400  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_134(spinlock_t *lock)
{
  
#line 1404 
  ldv_spin_model_unlock((char *)"adap_rcu_lock");
  
#line 1406 
  spin_unlock_0(lock);
  
#line 1407 
  return;
}


#line 1410  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_mutex_lock_135(struct mutex *ldv_func_arg1)
{
  
#line 1414 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"uld_mutex");
  
#line 1415 
  return;
}


#line 1418  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_mutex_unlock_136(struct mutex *ldv_func_arg1)
{
  
#line 1422 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"uld_mutex");
  
#line 1423 
  return;
}


#line 1426  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_mutex_lock_137(struct mutex *ldv_func_arg1)
{
  
#line 1430 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"uld_mutex");
  
#line 1431 
  return;
}


#line 1434  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_mutex_unlock_138(struct mutex *ldv_func_arg1)
{
  
#line 1438 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"uld_mutex");
  
#line 1439 
  return;
}


#line 1442  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_139(spinlock_t *lock)
{
  
#line 1446 
  ldv_spin_model_lock((char *)"adap_rcu_lock");
  
#line 1448 
  spin_lock_0(lock);
  
#line 1449 
  return;
}


#line 1452  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_140(spinlock_t *lock)
{
  
#line 1456 
  ldv_spin_model_unlock((char *)"adap_rcu_lock");
  
#line 1458 
  spin_unlock_0(lock);
  
#line 1459 
  return;
}


#line 1462  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_mutex_lock_141(struct mutex *ldv_func_arg1)
{
  
#line 1466 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"uld_mutex");
  
#line 1467 
  return;
}


#line 1470  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_mutex_unlock_142(struct mutex *ldv_func_arg1)
{
  
#line 1474 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"uld_mutex");
  
#line 1475 
  return;
}


#line 1478  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_mutex_lock_143(struct mutex *ldv_func_arg1)
{
  
#line 1482 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"uld_mutex");
  
#line 1483 
  return;
}


#line 1486  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_mutex_unlock_144(struct mutex *ldv_func_arg1)
{
  
#line 1490 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"uld_mutex");
  
#line 1491 
  return;
}


#line 1494  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_mutex_lock_145(struct mutex *ldv_func_arg1)
{
  
#line 1498 
  ldv_mutex_model_lock(ldv_func_arg1,(char *)"uld_mutex");
  
#line 1499 
  return;
}


#line 1502  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_mutex_unlock_146(struct mutex *ldv_func_arg1)
{
  
#line 1506 
  ldv_mutex_model_unlock(ldv_func_arg1,(char *)"uld_mutex");
  
#line 1507 
  return;
}


#line 1510  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static int ldv_request_irq_147(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1514 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1514 
  return tmp;
}


#line 1518  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_free_irq_148(unsigned int ldv_func_arg1, void *ldv_func_arg2)
{
  
#line 1522 
  ldv_emg_free_irq(ldv_func_arg1,ldv_func_arg2);
  
#line 1523 
  return;
}


#line 1526  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static int ldv_request_irq_149(unsigned int irq, irqreturn_t (*handler)(int , void *), unsigned long flags, char const *name, void *dev)
{
  int tmp;
  
#line 1530 
  tmp = ldv_emg_request_irq(irq,handler,flags,(char *)name,dev);
  
#line 1530 
  return tmp;
}


#line 1534  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_150(spinlock_t *lock)
{
  
#line 1538 
  ldv_spin_model_lock((char *)"stats_lock_of_adapter");
  
#line 1540 
  spin_lock_0(lock);
  
#line 1541 
  return;
}


#line 1544  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_151(spinlock_t *lock)
{
  
#line 1548 
  ldv_spin_model_unlock((char *)"stats_lock_of_adapter");
  
#line 1550 
  spin_unlock_0(lock);
  
#line 1551 
  return;
}


#line 1554  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_152(spinlock_t *lock)
{
  
#line 1558 
  ldv_spin_model_unlock((char *)"stats_lock_of_adapter");
  
#line 1560 
  spin_unlock_0(lock);
  
#line 1561 
  return;
}


#line 1564  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_153(spinlock_t *lock)
{
  
#line 1568 
  ldv_spin_model_lock((char *)"win0_lock_of_adapter");
  
#line 1570 
  spin_lock_0(lock);
  
#line 1571 
  return;
}


#line 1574  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_154(spinlock_t *lock)
{
  
#line 1578 
  ldv_spin_model_unlock((char *)"win0_lock_of_adapter");
  
#line 1580 
  spin_unlock_0(lock);
  
#line 1581 
  return;
}


#line 1584  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_lock_155(spinlock_t *lock)
{
  
#line 1588 
  ldv_spin_model_lock((char *)"stats_lock_of_adapter");
  
#line 1590 
  spin_lock_0(lock);
  
#line 1591 
  return;
}


#line 1594  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_spin_unlock_156(spinlock_t *lock)
{
  
#line 1598 
  ldv_spin_model_unlock((char *)"stats_lock_of_adapter");
  
#line 1600 
  spin_unlock_0(lock);
  
#line 1601 
  return;
}


#line 1604  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_free_netdev_157(struct net_device *ldv_func_arg1)
{
  
#line 1608 
  ldv_emg_free_netdev(ldv_func_arg1);
  
#line 1609 
  return;
}


#line 1612  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static struct net_device *ldv_alloc_etherdev_mqs_158(int ldv_func_arg1, unsigned int ldv_func_arg2, unsigned int ldv_func_arg3)
{
  struct net_device *tmp;
  
#line 1616 
  tmp = ldv_emg_alloc_etherdev_mqs(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
  
#line 1616 
  return tmp;
}


#line 1620  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static int ldv_register_netdev_159(struct net_device *ldv_func_arg1)
{
  int tmp;
  
#line 1624 
  tmp = ldv_emg_register_netdev(ldv_func_arg1);
  
#line 1624 
  return tmp;
}


#line 1628  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_unregister_netdev_160(struct net_device *ldv_func_arg1)
{
  
#line 1632 
  ldv_emg_unregister_netdev(ldv_func_arg1);
  
#line 1633 
  return;
}


#line 1636  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static int ldv___pci_register_driver_161(struct pci_driver *ldv_func_arg1, struct module *ldv_func_arg2, char const *ldv_func_arg3)
{
  int tmp;
  
#line 1640 
  tmp = ldv_emg___pci_register_driver(ldv_func_arg1,ldv_func_arg2,(char *)ldv_func_arg3);
  
#line 1640 
  return tmp;
}


#line 1644  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_debugfs_remove_162(struct dentry *ldv_func_arg1)
{
  
#line 1648 
  ldv_emg_debugfs_remove(ldv_func_arg1);
  
#line 1649 
  return;
}


#line 1652  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_pci_unregister_driver_163(struct pci_driver *ldv_func_arg1)
{
  
#line 1656 
  ldv_emg_pci_unregister_driver(ldv_func_arg1);
  
#line 1657 
  return;
}


#line 1660  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_main.c.aux"
static void ldv_debugfs_remove_164(struct dentry *ldv_func_arg1)
{
  
#line 1664 
  ldv_emg_debugfs_remove(ldv_func_arg1);
  
#line 1665 
  return;
}

void __builtin_prefetch(void const * , ...);


#line 7  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
void ldv_atomic_inc(atomic_t *v);


#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int test_and_set_bit(long nr, unsigned long volatile *addr)
{
  int __retres;
  
#line 206 
  ldv_inline_asm();
  
#line 207 
  ldv_inline_asm();
  
#line 206 
  __retres = 0;
  
#line 206 
  goto return_label;
  cc_label: 
#line 206 
  ;
  
#line 206 
  __retres = 1;
  return_label: 
#line 206 
                return __retres;
}


#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static int variable_test_bit(long nr, unsigned long const volatile *addr)
{
  int oldbit;
  
#line 317 
  ldv_inline_asm();
  
#line 323 
  return oldbit;
}


#line 346  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/bitops.h"
__inline static unsigned long __ffs(unsigned long word)
{
  
#line 348 
  ldv_inline_asm();
  
#line 351 
  return word;
}


#line 71  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/bug.h"
void warn_slowpath_null(char const *, int const);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/page_64.h"
unsigned long __phys_addr(unsigned long);


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
__inline static int atomic_read(atomic_t const *v)
{
  int __retres;
  int const volatile *tmp;
  {
    
#line 27 
    int const __var = 0;
    
#line 27 
    tmp = (int const volatile *)(& v->counter);
  }
  
#line 27 
  __retres = *tmp;
  
#line 27 
  return __retres;
}


#line 98 
static void atomic_inc(atomic_t *v);


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/preempt.h"
__inline static int preempt_count(void)
{
  int __retres;
  int tmp;
  {
    int pfo_ret__;
    
#line 22 
    switch (4UL) {
      case (unsigned long)1: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      case (unsigned long)2: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      case (unsigned long)4: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      case (unsigned long)8: 
#line 22 
      ;
      
#line 23 
      ldv_inline_asm();
      
#line 22 
      goto ldv_6320;
      default: 
#line 22 
      ;
      
#line 22 
      __bad_percpu_size();
    }
    ldv_6320: 
#line 22 
    ;
    
#line 22 
    tmp = pfo_ret__;
  }
  
#line 22 
  __retres = tmp & 2147483647;
  
#line 22 
  return __retres;
}


#line 39  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock_api_smp.h"
int _raw_spin_trylock(raw_spinlock_t *);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_1(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 358 
static void ldv_spin_lock_74(spinlock_t *lock);


#line 362 
static void ldv_spin_lock_76_0(spinlock_t *lock);


#line 366 
static void ldv_spin_lock_84_0(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_87(spinlock_t *lock);


#line 374 
static void ldv_spin_lock_89(spinlock_t *lock);


#line 378 
static void ldv_spin_lock_90_0(spinlock_t *lock);


#line 382 
static void ldv_spin_lock_93(spinlock_t *lock);


#line 386 
static void ldv_spin_lock_94(spinlock_t *lock);


#line 390 
static void ldv_spin_lock_95(spinlock_t *lock);


#line 394 
static void ldv_spin_lock_97(spinlock_t *lock);


#line 398 
static void ldv_spin_lock_99(spinlock_t *lock);


#line 399  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_bh_0(spinlock_t *lock)
{
  
#line 401 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 402 
  return;
}


#line 427 
static void ldv_spin_lock_bh_78(spinlock_t *lock);


#line 431 
static void ldv_spin_lock_bh_80(spinlock_t *lock);


#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static int spin_trylock(spinlock_t *lock)
{
  int tmp;
  
#line 434 
  tmp = _raw_spin_trylock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 434 
  return tmp;
}


#line 343 
static int ldv_spin_trylock_63(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_1(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 395 
static void ldv_spin_unlock_64(spinlock_t *lock);


#line 407 
static void ldv_spin_unlock_75(spinlock_t *lock);


#line 411 
static void ldv_spin_unlock_77_0(spinlock_t *lock);


#line 415 
static void ldv_spin_unlock_85_0(spinlock_t *lock);


#line 419 
static void ldv_spin_unlock_86(spinlock_t *lock);


#line 423 
static void ldv_spin_unlock_88(spinlock_t *lock);


#line 427 
static void ldv_spin_unlock_91_0(spinlock_t *lock);


#line 431 
static void ldv_spin_unlock_92(spinlock_t *lock);


#line 435 
static void ldv_spin_unlock_96(spinlock_t *lock);


#line 439 
static void ldv_spin_unlock_98(spinlock_t *lock);


#line 443 
static void ldv_spin_unlock_100(spinlock_t *lock);


#line 444  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_bh_0(spinlock_t *lock)
{
  
#line 446 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 447 
  return;
}


#line 476 
static void ldv_spin_unlock_bh_79(spinlock_t *lock);


#line 480 
static void ldv_spin_unlock_bh_81(spinlock_t *lock);


#line 494  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_irqrestore_0(spinlock_t *lock, unsigned long flags)
{
  {
    unsigned long __dummy;
    unsigned long __dummy2;
    
  }
  
#line 496 
  _raw_spin_unlock_irqrestore(& lock->__anonCompField_spinlock_18.rlock,flags);
  
#line 497 
  return;
}


#line 526 
static void ldv_spin_unlock_irqrestore_83(spinlock_t *lock, unsigned long flags);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_int(void);


#line 70  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv___ldv_spin_lock_82(spinlock_t *ldv_func_arg1);


#line 78  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jiffies.h"
extern unsigned long volatile jiffies;


#line 88  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/timer.h"
void init_timer_key(struct timer_list *, unsigned int, char const *, struct lock_class_key *);


#line 173 
static int ldv_mod_timer_101(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 177 
static int ldv_mod_timer_103(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 181 
static int ldv_mod_timer_106(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 185 
static int ldv_mod_timer_107(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2);


#line 232 
static int ldv_del_timer_sync_108(struct timer_list *ldv_func_arg1);


#line 236 
static int ldv_del_timer_sync_109(struct timer_list *ldv_func_arg1);


#line 131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/kmemcheck.h"
__inline static void kmemcheck_mark_initialized(void *address, unsigned int n)
{
  
#line 133 
  return;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mmdebug.h"
void dump_page(struct page *, char const *);


#line 158  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/memory_hotplug.h"
extern pg_data_t *node_data[];


#line 75  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/topology.h"
__inline static int numa_node_id(void)
{
  int tmp_3;
  {
    int pscr_ret__;
    {
      
#line 77 
      void const *__vpp_verify = (void const *)0;
      
#line 77 
      void const *tmp = __vpp_verify;
    }
    
#line 77 
    switch (4UL) {
      int tmp_0;
      int tmp_0_0;
      int tmp_1;
      int tmp_2;
      case (unsigned long)1: 
#line 77 
      ;
      {
        int pfo_ret__;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15346;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15346;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15346;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15346;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_15346: 
#line 77 
        ;
        
#line 77 
        tmp_0 = pfo_ret__;
      }
      
#line 77 
      pscr_ret__ = tmp_0;
      
#line 77 
      goto ldv_15352;
      case (unsigned long)2: 
#line 77 
      ;
      {
        int pfo_ret___0;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15356;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15356;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15356;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15356;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_15356: 
#line 77 
        ;
        
#line 77 
        tmp_0_0 = pfo_ret___0;
      }
      
#line 77 
      pscr_ret__ = tmp_0_0;
      
#line 77 
      goto ldv_15352;
      case (unsigned long)4: 
#line 77 
      ;
      {
        int pfo_ret___1;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15365;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15365;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15365;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15365;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_15365: 
#line 77 
        ;
        
#line 77 
        tmp_1 = pfo_ret___1;
      }
      
#line 77 
      pscr_ret__ = tmp_1;
      
#line 77 
      goto ldv_15352;
      case (unsigned long)8: 
#line 77 
      ;
      {
        int pfo_ret___2;
        
#line 77 
        switch (4UL) {
          case (unsigned long)1: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15374;
          case (unsigned long)2: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15374;
          case (unsigned long)4: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15374;
          case (unsigned long)8: 
#line 77 
          ;
          
#line 78 
          ldv_inline_asm();
          
#line 77 
          goto ldv_15374;
          default: 
#line 77 
          ;
          
#line 77 
          __bad_percpu_size();
        }
        ldv_15374: 
#line 77 
        ;
        
#line 77 
        tmp_2 = pfo_ret___2;
      }
      
#line 77 
      pscr_ret__ = tmp_2;
      
#line 77 
      goto ldv_15352;
      default: 
#line 77 
      ;
      
#line 77 
      __bad_size_call_parameter();
      
#line 77 
      goto ldv_15352;
    }
    ldv_15352: 
#line 77 
    ;
    
#line 77 
    tmp_3 = pscr_ret__;
  }
  
#line 77 
  return tmp_3;
}


#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static int gfp_zonelist(gfp_t flags)
{
  int __retres;
  
#line 265 
  if ((long)((flags & 262144U) != 0U) != 0L) {
    
#line 266 
    __retres = 1;
    
#line 266 
    goto return_label;
  }
  else ;
  
#line 268 
  __retres = 0;
  return_label: 
#line 268 
                return __retres;
}


#line 280  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct zonelist *node_zonelist(int nid, gfp_t flags)
{
  struct zonelist *__retres;
  int tmp;
  
#line 282 
  tmp = gfp_zonelist(flags);
  
#line 282 
  ;
  
#line 282 
  __retres = (struct zonelist *)(& (node_data[nid])->node_zonelists) + tmp;
  
#line 282 
  return __retres;
}


#line 293 
struct page *__alloc_pages_nodemask(gfp_t, unsigned int, struct zonelist *, nodemask_t *);


#line 297  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct page *__alloc_pages(gfp_t gfp_mask, unsigned int order, struct zonelist *zonelist)
{
  struct page *tmp;
  
#line 300 
  tmp = __alloc_pages_nodemask(gfp_mask,order,zonelist,(nodemask_t *)0);
  
#line 300 
  return tmp;
}


#line 303  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/gfp.h"
__inline static struct page *alloc_pages_node(int nid, gfp_t gfp_mask, unsigned int order)
{
  struct page *tmp_0;
  struct zonelist *tmp;
  
#line 307 
  if (nid < 0) 
#line 308 
               nid = numa_node_id(); else ;
  
#line 310 
  tmp = node_zonelist(nid,gfp_mask);
  
#line 310 
  ;
  
#line 310 
  ;
  
#line 310 
  tmp_0 = __alloc_pages(gfp_mask,order,tmp);
  
#line 310 
  return tmp_0;
}


#line 366 
void __free_pages(struct page *, unsigned int);


#line 233  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
extern struct kmem_cache *kmalloc_caches[14U];


#line 246  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
__inline static int kmalloc_index(size_t size)
{
  int __retres;
  
#line 248 
  if (size == 0UL) {
    
#line 249 
    __retres = 0;
    
#line 249 
    goto return_label;
  }
  else ;
  
#line 251 
  if (size <= 8UL) {
    
#line 252 
    __retres = 3;
    
#line 252 
    goto return_label;
  }
  else ;
  
#line 254 
  if (size + 18446744073709551551UL <= 31UL) {
    
#line 255 
    __retres = 1;
    
#line 255 
    goto return_label;
  }
  else ;
  
#line 256 
  if (size + 18446744073709551487UL <= 63UL) {
    
#line 257 
    __retres = 2;
    
#line 257 
    goto return_label;
  }
  else ;
  
#line 258 
  if (size <= 8UL) {
    
#line 258 
    __retres = 3;
    
#line 258 
    goto return_label;
  }
  else ;
  
#line 259 
  if (size <= 16UL) {
    
#line 259 
    __retres = 4;
    
#line 259 
    goto return_label;
  }
  else ;
  
#line 260 
  if (size <= 32UL) {
    
#line 260 
    __retres = 5;
    
#line 260 
    goto return_label;
  }
  else ;
  
#line 261 
  if (size <= 64UL) {
    
#line 261 
    __retres = 6;
    
#line 261 
    goto return_label;
  }
  else ;
  
#line 262 
  if (size <= 128UL) {
    
#line 262 
    __retres = 7;
    
#line 262 
    goto return_label;
  }
  else ;
  
#line 263 
  if (size <= 256UL) {
    
#line 263 
    __retres = 8;
    
#line 263 
    goto return_label;
  }
  else ;
  
#line 264 
  if (size <= 512UL) {
    
#line 264 
    __retres = 9;
    
#line 264 
    goto return_label;
  }
  else ;
  
#line 265 
  if (size <= 1024UL) {
    
#line 265 
    __retres = 10;
    
#line 265 
    goto return_label;
  }
  else ;
  
#line 266 
  if (size <= 2048UL) {
    
#line 266 
    __retres = 11;
    
#line 266 
    goto return_label;
  }
  else ;
  
#line 267 
  if (size <= 4096UL) {
    
#line 267 
    __retres = 12;
    
#line 267 
    goto return_label;
  }
  else ;
  
#line 268 
  if (size <= 8192UL) {
    
#line 268 
    __retres = 13;
    
#line 268 
    goto return_label;
  }
  else ;
  
#line 269 
  if (size <= 16384UL) {
    
#line 269 
    __retres = 14;
    
#line 269 
    goto return_label;
  }
  else ;
  
#line 270 
  if (size <= 32768UL) {
    
#line 270 
    __retres = 15;
    
#line 270 
    goto return_label;
  }
  else ;
  
#line 271 
  if (size <= 65536UL) {
    
#line 271 
    __retres = 16;
    
#line 271 
    goto return_label;
  }
  else ;
  
#line 272 
  if (size <= 131072UL) {
    
#line 272 
    __retres = 17;
    
#line 272 
    goto return_label;
  }
  else ;
  
#line 273 
  if (size <= 262144UL) {
    
#line 273 
    __retres = 18;
    
#line 273 
    goto return_label;
  }
  else ;
  
#line 274 
  if (size <= 524288UL) {
    
#line 274 
    __retres = 19;
    
#line 274 
    goto return_label;
  }
  else ;
  
#line 275 
  if (size <= 1048576UL) {
    
#line 275 
    __retres = 20;
    
#line 275 
    goto return_label;
  }
  else ;
  
#line 276 
  if (size <= 2097152UL) {
    
#line 276 
    __retres = 21;
    
#line 276 
    goto return_label;
  }
  else ;
  
#line 277 
  if (size <= 4194304UL) {
    
#line 277 
    __retres = 22;
    
#line 277 
    goto return_label;
  }
  else ;
  
#line 278 
  if (size <= 8388608UL) {
    
#line 278 
    __retres = 23;
    
#line 278 
    goto return_label;
  }
  else ;
  
#line 279 
  if (size <= 16777216UL) {
    
#line 279 
    __retres = 24;
    
#line 279 
    goto return_label;
  }
  else ;
  
#line 280 
  if (size <= 33554432UL) {
    
#line 280 
    __retres = 25;
    
#line 280 
    goto return_label;
  }
  else ;
  
#line 281 
  if (size <= 67108864UL) {
    
#line 281 
    __retres = 26;
    
#line 281 
    goto return_label;
  }
  else ;
  
#line 282 
  ldv_inline_asm();
  
#line 282 
  ;
  
#line 285 
  __retres = -1;
  return_label: 
#line 285 
                return __retres;
}


#line 294 
void *__kmalloc_node(size_t, gfp_t, int);


#line 312 
void *kmem_cache_alloc_node_trace(struct kmem_cache *, gfp_t, int, size_t);


#line 462  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
__inline static void *kmalloc_node(size_t size, gfp_t flags, int node)
{
  void *__retres;
  void *tmp_1;
  
#line 465 
  if ((0 != 0 && size <= 8192UL) && (flags & 1U) == 0U) {
    void *tmp_0;
    
#line 467 
    int i = kmalloc_index(size);
    
#line 469 
    if (i == 0) {
      
#line 470 
      __retres = (void *)16;
      
#line 470 
      goto return_label;
    }
    else ;
    
#line 472 
    tmp_0 = kmem_cache_alloc_node_trace(kmalloc_caches[i],flags,node,size);
    
#line 472 
    __retres = tmp_0;
    
#line 472 
    goto return_label;
  }
  else ;
  
#line 476 
  tmp_1 = __kmalloc_node(size,flags,node);
  
#line 476 
  __retres = tmp_1;
  return_label: 
#line 476 
                return __retres;
}


#line 596  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
__inline static void *kzalloc_node(size_t size, gfp_t flags, int node)
{
  void *tmp;
  
#line 598 
  tmp = kmalloc_node(size,flags | 32768U,node);
  
#line 598 
  return tmp;
}


#line 111  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/checksum.h"
__inline static __wsum csum_unfold(__sum16 n)
{
  __wsum __retres;
  
#line 113 
  __retres = (unsigned int)n;
  
#line 113 
  return __retres;
}


#line 400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/page-flags.h"
__inline static int PageTail(struct page const *page)
{
  int tmp;
  
#line 400 
  tmp = constant_test_bit(15L,(unsigned long const volatile *)(& page->flags));
  
#line 400 
  return tmp;
}


#line 440  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static struct page *compound_head_by_tail(struct page *tail)
{
  struct page *__retres;
  int tmp;
  
#line 442 
  struct page *head = tail->__anonCompField_page_36.first_page;
  
#line 443 
  ldv_inline_asm();
  
#line 450 
  tmp = PageTail((struct page const *)tail);
  
#line 450 
  if ((long)(tmp != 0) != 0L) {
    
#line 451 
    __retres = head;
    
#line 451 
    goto return_label;
  }
  else ;
  
#line 452 
  __retres = tail;
  return_label: 
#line 452 
                return __retres;
}


#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static struct page *compound_head(struct page *page)
{
  struct page *__retres;
  int tmp_0;
  
#line 463 
  tmp_0 = PageTail((struct page const *)page);
  
#line 463 
  if ((long)(tmp_0 != 0) != 0L) {
    struct page *tmp;
    
#line 464 
    tmp = compound_head_by_tail(page);
    
#line 464 
    __retres = tmp;
    
#line 464 
    goto return_label;
  }
  else ;
  
#line 465 
  __retres = page;
  return_label: 
#line 465 
                return __retres;
}


#line 532 
bool __get_page_tail(struct page *);


#line 534  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void get_page(struct page *page)
{
  int tmp_0;
  int tmp_1;
  
#line 536 
  tmp_0 = PageTail((struct page const *)page);
  
#line 536 
  if ((long)(tmp_0 != 0) != 0L) {
    bool tmp;
    
#line 537 
    tmp = __get_page_tail(page);
    
#line 537 
    if ((long)((int)tmp != 0) != 0L) 
#line 538 
                                     goto return_label; else ;
  }
  else ;
  
#line 543 
  tmp_1 = atomic_read((atomic_t const *)(& page->__anonCompField_page_32.__anonCompField___anonstruct_57_31.__anonCompField___anonunion_59_30._count));
  
#line 543 
  if ((long)(tmp_1 <= 0) != 0L) {
    
#line 543 
    dump_page(page,"VM_BUG_ON_PAGE(");
    
#line 544 
    ldv_inline_asm();
    
#line 543 
    ;
  }
  else ;
  
#line 544 
  atomic_inc(& page->__anonCompField_page_32.__anonCompField___anonstruct_57_31.__anonCompField___anonunion_59_30._count);
  return_label: 
#line 545 
                return;
}


#line 569 
void put_page(struct page *);


#line 945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static void *lowmem_page_address(struct page const *page)
{
  void *__retres;
  
#line 947 
  __retres = (void *)((unsigned long)((unsigned long long)(((long)page + 24189255811072L) / 64L) << 12) + 18446612132314218496UL);
  
#line 947 
  return __retres;
}


#line 1031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/mm.h"
__inline static bool page_is_pfmemalloc(struct page *page)
{
  bool __retres;
  
#line 1037 
  __retres = (_Bool)(page->__anonCompField_page_32.__anonCompField___anonstruct_57_27.index == 18446744073709551615UL);
  
#line 1037 
  return __retres;
}


#line 73  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-mapping.h"
__inline static int valid_dma_direction(int dma_direction)
{
  int __retres;
  
#line 76 
  __retres = (unsigned int)dma_direction <= 2U;
  
#line 76 
  return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dma-debug.h"
void debug_dma_map_page(struct device *, struct page *, size_t, size_t, int, dma_addr_t, bool);


#line 42 
void debug_dma_mapping_error(struct device *, dma_addr_t);


#line 44 
void debug_dma_unmap_page(struct device *, dma_addr_t, size_t, int, bool);


#line 59 
void debug_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, int);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
extern struct dma_map_ops *dma_ops;


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static struct dma_map_ops *get_dma_ops(struct device *dev)
{
  struct dma_map_ops *__retres;
  
#line 37 
  if ((long)(dev == (struct device *)0) != 0L || dev->archdata.dma_ops == (struct dma_map_ops *)0) {
    
#line 38 
    __retres = dma_ops;
    
#line 38 
    goto return_label;
  }
  else {
    
#line 40 
    __retres = dev->archdata.dma_ops;
    
#line 40 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 10  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_single_attrs(struct device *dev, void *ptr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  dma_addr_t addr;
  int tmp_0;
  unsigned long tmp_1;
  unsigned long tmp_2;
  
#line 15 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 18 
  kmemcheck_mark_initialized(ptr,(unsigned int)size);
  
#line 19 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 19 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 21 
    ldv_inline_asm();
    
#line 19 
    ;
  }
  else ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  ;
  
#line 20 
  tmp_1 = __phys_addr((unsigned long)ptr);
  
#line 20 
  ;
  
#line 20 
  addr = (*(ops->map_page))(dev,(struct page *)(-24189255811072) + (tmp_1 >> 12),(unsigned long)ptr & 4095UL,size,dir,attrs);
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  ;
  
#line 23 
  tmp_2 = __phys_addr((unsigned long)ptr);
  
#line 23 
  ;
  
#line 23 
  debug_dma_map_page(dev,(struct page *)(-24189255811072) + (tmp_2 >> 12),(unsigned long)ptr & 4095UL,size,(int)dir,addr,(_Bool)1);
  
#line 26 
  return addr;
}


#line 29  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_single_attrs(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir, struct dma_attrs *attrs)
{
  int tmp_0;
  
#line 34 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 36 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 36 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 38 
    ldv_inline_asm();
    
#line 36 
    ;
  }
  else ;
  
#line 37 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 38 
    (*(ops->unmap_page))(dev,addr,size,dir,attrs); else ;
  
#line 39 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)1);
  
#line 40 
  return;
}


#line 76  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static dma_addr_t dma_map_page(struct device *dev, struct page *page, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t addr;
  void *tmp_0;
  int tmp_1;
  
#line 80 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 83 
  ;
  
#line 83 
  tmp_0 = lowmem_page_address((struct page const *)page);
  
#line 83 
  ;
  
#line 83 
  kmemcheck_mark_initialized(tmp_0 + offset,(unsigned int)size);
  
#line 84 
  tmp_1 = valid_dma_direction((int)dir);
  
#line 84 
  if ((long)(tmp_1 == 0) != 0L) {
    
#line 86 
    ldv_inline_asm();
    
#line 84 
    ;
  }
  else ;
  
#line 85 
  addr = (*(ops->map_page))(dev,page,offset,size,dir,(struct dma_attrs *)0);
  
#line 86 
  debug_dma_map_page(dev,page,offset,size,(int)dir,addr,(_Bool)0);
  
#line 88 
  return addr;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_unmap_page(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 94 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 96 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 96 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 98 
    ldv_inline_asm();
    
#line 96 
    ;
  }
  else ;
  
#line 97 
  if (ops->unmap_page != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction , struct dma_attrs *))0) 
    
#line 98 
    (*(ops->unmap_page))(dev,addr,size,dir,(struct dma_attrs *)0); else ;
  
#line 99 
  debug_dma_unmap_page(dev,addr,size,(int)dir,(_Bool)0);
  
#line 100 
  return;
}


#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/dma-mapping-common.h"
__inline static void dma_sync_single_for_cpu(struct device *dev, dma_addr_t addr, size_t size, enum dma_data_direction dir)
{
  int tmp_0;
  
#line 106 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 108 
  tmp_0 = valid_dma_direction((int)dir);
  
#line 108 
  if ((long)(tmp_0 == 0) != 0L) {
    
#line 110 
    ldv_inline_asm();
    
#line 108 
    ;
  }
  else ;
  
#line 109 
  if (ops->sync_single_for_cpu != (void (*)(struct device *, dma_addr_t , size_t , enum dma_data_direction ))0) 
    
#line 110 
    (*(ops->sync_single_for_cpu))(dev,addr,size,dir); else ;
  
#line 111 
  debug_dma_sync_single_for_cpu(dev,addr,size,(int)dir);
  
#line 112 
  return;
}


#line 47  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/dma-mapping.h"
__inline static int dma_mapping_error(struct device *dev, dma_addr_t dma_addr)
{
  int __retres;
  
#line 49 
  struct dma_map_ops *ops = get_dma_ops(dev);
  
#line 50 
  debug_dma_mapping_error(dev,dma_addr);
  
#line 51 
  if (ops->mapping_error != (int (*)(struct device *, dma_addr_t ))0) {
    int tmp_0;
    
#line 52 
    tmp_0 = (*(ops->mapping_error))(dev,dma_addr);
    
#line 52 
    __retres = tmp_0;
    
#line 52 
    goto return_label;
  }
  else ;
  
#line 54 
  __retres = dma_addr == 0ULL;
  return_label: 
#line 54 
                return __retres;
}


#line 131 
void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, struct dma_attrs *);


#line 136 
void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, struct dma_attrs *);


#line 230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_frag_size(skb_frag_t const *frag)
{
  unsigned int __retres;
  
#line 232 
  __retres = frag->size;
  
#line 232 
  return __retres;
}


#line 235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_frag_size_set(skb_frag_t *frag, unsigned int size)
{
  
#line 237 
  frag->size = size;
  
#line 238 
  return;
}


#line 775 
void consume_skb(struct sk_buff *);


#line 926  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_set_hash(struct sk_buff *skb, __u32 hash, enum pkt_hash_types type)
{
  
#line 928 
  skb->l4_hash = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))(type == (unsigned int)PKT_HASH_TYPE_L4);
  
#line 929 
  skb->sw_hash = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))0U;
  
#line 930 
  skb->hash = hash;
  
#line 931 
  return;
}


#line 976  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_end_pointer(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 978 
  __retres = skb->head + skb->end;
  
#line 978 
  return __retres;
}


#line 1259  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *skb_peek(struct sk_buff_head const *list_)
{
  
#line 1261 
  struct sk_buff *skb = list_->next;
  
#line 1263 
  if (skb == (struct sk_buff *)list_) 
#line 1264 
                                      skb = (struct sk_buff *)0; else ;
  
#line 1265 
  return skb;
}


#line 1331  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __skb_queue_head_init(struct sk_buff_head *list)
{
  struct sk_buff *tmp;
  
#line 1333 
  tmp = (struct sk_buff *)list;
  
#line 1333 
  list->next = tmp;
  
#line 1333 
  list->prev = tmp;
  
#line 1334 
  list->qlen = 0U;
  
#line 1335 
  return;
}


#line 1345  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_queue_head_init(struct sk_buff_head *list)
{
  
#line 1347 
  spinlock_check(& list->lock);
  {
    struct lock_class_key __key;
    
#line 1347 
    __raw_spin_lock_init(& list->lock.__anonCompField_spinlock_18.rlock,"&(&list->lock)->rlock",& __key);
  }
  
#line 1348 
  __skb_queue_head_init(list);
  
#line 1349 
  return;
}


#line 1366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __skb_insert(struct sk_buff *newsk, struct sk_buff *prev, struct sk_buff *next, struct sk_buff_head *list)
{
  struct sk_buff *tmp;
  
#line 1370 
  newsk->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.next = next;
  
#line 1371 
  newsk->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.prev = prev;
  
#line 1372 
  tmp = newsk;
  
#line 1372 
  prev->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.next = tmp;
  
#line 1372 
  next->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.prev = tmp;
  
#line 1373 
  list->qlen += 1U;
  
#line 1374 
  return;
}


#line 1474  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __skb_queue_before(struct sk_buff_head *list, struct sk_buff *next, struct sk_buff *newsk)
{
  
#line 1478 
  __skb_insert(newsk,next->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.prev,next,list);
  
#line 1479 
  return;
}


#line 1509  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __skb_queue_tail(struct sk_buff_head *list, struct sk_buff *newsk)
{
  
#line 1512 
  __skb_queue_before(list,(struct sk_buff *)list,newsk);
  
#line 1513 
  return;
}


#line 1520  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __skb_unlink(struct sk_buff *skb, struct sk_buff_head *list)
{
  struct sk_buff *next;
  struct sk_buff *prev;
  struct sk_buff *tmp;
  
#line 1524 
  list->qlen -= 1U;
  
#line 1525 
  next = skb->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.next;
  
#line 1526 
  prev = skb->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.prev;
  
#line 1527 
  tmp = (struct sk_buff *)0;
  
#line 1527 
  skb->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.prev = tmp;
  
#line 1527 
  skb->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.next = tmp;
  
#line 1528 
  next->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.prev = prev;
  
#line 1529 
  prev->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.next = next;
  
#line 1530 
  return;
}


#line 1541  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *__skb_dequeue(struct sk_buff_head *list)
{
  
#line 1543 
  struct sk_buff *skb = skb_peek((struct sk_buff_head const *)list);
  
#line 1544 
  if (skb != (struct sk_buff *)0) 
#line 1545 
                                  __skb_unlink(skb,list); else ;
  
#line 1546 
  return skb;
}


#line 1572  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned int skb_headlen(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1574 
  __retres = skb->len - skb->data_len;
  
#line 1574 
  return __retres;
}


#line 1599  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __skb_fill_page_desc(struct sk_buff *skb, int i, struct page *page, int off, int size)
{
  unsigned char *tmp;
  bool tmp_0;
  
#line 1602 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1602 
  skb_frag_t *frag = & ((struct skb_shared_info *)tmp)->frags[i];
  
#line 1609 
  frag->page.p = page;
  
#line 1610 
  frag->page_offset = (unsigned int)off;
  
#line 1611 
  skb_frag_size_set(frag,(unsigned int)size);
  
#line 1613 
  page = compound_head(page);
  
#line 1614 
  tmp_0 = page_is_pfmemalloc(page);
  
#line 1614 
  if ((int)tmp_0 != 0) 
#line 1615 
                       skb->pfmemalloc = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(1))))1U; else ;
  
#line 1616 
  return;
}


#line 1707  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *__skb_pull(struct sk_buff *skb, unsigned int len)
{
  unsigned char *__retres;
  
#line 1709 
  skb->len -= len;
  
#line 1710 
  if ((long)(skb->len < skb->data_len) != 0L) {
    
#line 1712 
    ldv_inline_asm();
    
#line 1710 
    ;
  }
  else ;
  
#line 1711 
  skb->data += len;
  
#line 1711 
  __retres = skb->data;
  
#line 1711 
  return __retres;
}


#line 1880  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static unsigned char *skb_transport_header(struct sk_buff const *skb)
{
  unsigned char *__retres;
  
#line 1882 
  __retres = skb->head + (int)skb->transport_header;
  
#line 1882 
  return __retres;
}


#line 1885  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_reset_transport_header(struct sk_buff *skb)
{
  
#line 1887 
  skb->transport_header = (unsigned short)((long)skb->data - (long)skb->head);
  
#line 1888 
  return;
}


#line 1890  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_set_transport_header(struct sk_buff *skb, int const offset)
{
  
#line 1893 
  skb_reset_transport_header(skb);
  
#line 1894 
  skb->transport_header = (unsigned short)((int)skb->transport_header + (int)((unsigned short)offset));
  
#line 1895 
  return;
}


#line 1902  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_reset_network_header(struct sk_buff *skb)
{
  
#line 1904 
  skb->network_header = (unsigned short)((long)skb->data - (long)skb->head);
  
#line 1905 
  return;
}


#line 1907  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_set_network_header(struct sk_buff *skb, int const offset)
{
  
#line 1909 
  skb_reset_network_header(skb);
  
#line 1910 
  skb->network_header = (unsigned short)((int)skb->network_header + (int)((unsigned short)offset));
  
#line 1911 
  return;
}


#line 1923  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_reset_mac_header(struct sk_buff *skb)
{
  
#line 1925 
  skb->mac_header = (unsigned short)((long)skb->data - (long)skb->head);
  
#line 1926 
  return;
}


#line 1967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_transport_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1969 
  tmp = skb_transport_header(skb);
  
#line 1969 
  ;
  
#line 1969 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1969 
  return __retres;
}


#line 1972  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static u32 skb_network_header_len(struct sk_buff const *skb)
{
  u32 __retres;
  
#line 1974 
  __retres = (unsigned int)((int)skb->transport_header - (int)skb->network_header);
  
#line 1974 
  return __retres;
}


#line 1982  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static int skb_network_offset(struct sk_buff const *skb)
{
  int __retres;
  unsigned char *tmp;
  
#line 1984 
  tmp = skb_network_header(skb);
  
#line 1984 
  ;
  
#line 1984 
  __retres = (int)((long)tmp - (long)skb->data);
  
#line 1984 
  return __retres;
}


#line 2095  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_orphan(struct sk_buff *skb)
{
  
#line 2097 
  if (skb->destructor != (void (*)(struct sk_buff *))0) {
    
#line 2098 
    (*(skb->destructor))(skb);
    
#line 2099 
    skb->destructor = (void (*)(struct sk_buff *))0;
    
#line 2100 
    skb->sk = (struct sock *)0;
  }
  else 
    
#line 2102 
    if ((long)(skb->sk != (struct sock *)0) != 0L) {
      
#line 2104 
      ldv_inline_asm();
      
#line 2102 
      ;
    }
    else ;
  
#line 2104 
  return;
}


#line 2131  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void __skb_queue_purge(struct sk_buff_head *list)
{
  struct sk_buff *skb;
  
#line 2134 
  goto ldv_27158;
  ldv_27157: 
#line 2135 
  ;
  
#line 2135 
  kfree_skb(skb);
  ldv_27158: 
#line 2136 
  ;
  
#line 2134 
  skb = __skb_dequeue(list);
  
#line 2134 
  if (skb != (struct sk_buff *)0) 
#line 2136 
                                  goto ldv_27157; else 
#line 2139 
                                                       goto ldv_27159;
  ldv_27159: 
#line 2140 
  ;
  
#line 2141 
  return;
}


#line 2140 
struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);


#line 2156  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *netdev_alloc_skb(struct net_device *dev, unsigned int length)
{
  struct sk_buff *tmp;
  
#line 2159 
  tmp = __netdev_alloc_skb(dev,length,32U);
  
#line 2159 
  return tmp;
}


#line 2170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct sk_buff *dev_alloc_skb(unsigned int length)
{
  struct sk_buff *tmp;
  
#line 2172 
  tmp = netdev_alloc_skb((struct net_device *)0,length);
  
#line 2172 
  return tmp;
}


#line 2272  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static struct page *skb_frag_page(skb_frag_t const *frag)
{
  struct page *__retres;
  
#line 2274 
  __retres = frag->page.p;
  
#line 2274 
  return __retres;
}


#line 2390  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static dma_addr_t skb_frag_dma_map(struct device *dev, skb_frag_t const *frag, size_t offset, size_t size, enum dma_data_direction dir)
{
  dma_addr_t tmp_0;
  struct page *tmp;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  ;
  
#line 2395 
  tmp = skb_frag_page(frag);
  
#line 2395 
  ;
  
#line 2395 
  tmp_0 = dma_map_page(dev,tmp,(unsigned long)frag->page_offset + offset,size,dir);
  
#line 2395 
  return tmp_0;
}


#line 2789  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_copy_from_linear_data(struct sk_buff const *skb, void *to, unsigned int const len)
{
  
#line 2793 
  memcpy(to,(void const *)skb->data,(unsigned long)len);
  
#line 2794 
  return;
}


#line 2803  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_copy_to_linear_data(struct sk_buff *skb, void const *from, unsigned int const len)
{
  
#line 2807 
  memcpy((void *)skb->data,from,(unsigned long)len);
  
#line 2808 
  return;
}


#line 3295  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static u16 skb_get_queue_mapping(struct sk_buff const *skb)
{
  u16 __retres;
  
#line 3297 
  __retres = skb->queue_mapping;
  
#line 3297 
  return __retres;
}


#line 3305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_record_rx_queue(struct sk_buff *skb, u16 rx_queue)
{
  
#line 3307 
  skb->queue_mapping = (unsigned short)((unsigned int)rx_queue + 1U);
  
#line 3308 
  return;
}


#line 3426  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/skbuff.h"
__inline static void skb_checksum_none_assert(struct sk_buff const *skb)
{
  
#line 3428 
  return;
}


#line 540  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/interrupt.h"
static void ldv_tasklet_schedule_102(struct tasklet_struct *t);


#line 583 
void tasklet_kill(struct tasklet_struct *);


#line 589 
static void ldv_tasklet_init_104(struct tasklet_struct *ldv_func_arg1, void (*ldv_func_arg2)(unsigned long ), unsigned long ldv_func_arg3);


#line 593 
static void ldv_tasklet_init_105(struct tasklet_struct *ldv_func_arg1, void (*ldv_func_arg2)(unsigned long ), unsigned long ldv_func_arg3);


#line 391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void __napi_schedule(struct napi_struct *);


#line 394  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_disable_pending(struct napi_struct *n)
{
  bool __retres;
  int tmp;
  
#line 396 
  tmp = constant_test_bit(1L,(unsigned long const volatile *)(& n->state));
  
#line 396 
  __retres = (_Bool)(tmp != 0);
  
#line 396 
  return __retres;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_schedule_prep(struct napi_struct *n)
{
  bool __retres;
  int tmp_2;
  int tmp_0;
  bool tmp;
  
#line 410 
  tmp = napi_disable_pending(n);
  
#line 410 
  if (tmp) 
#line 410 
           tmp_0 = 0; else 
#line 410 
                           tmp_0 = 1;
  
#line 410 
  if (tmp_0) {
    int tmp_1;
    
#line 410 
    tmp_1 = test_and_set_bit(0L,(unsigned long volatile *)(& n->state));
    
#line 410 
    if (tmp_1 == 0) 
#line 410 
                    tmp_2 = 1; else 
#line 410 
                                    tmp_2 = 0;
  }
  else 
#line 410 
       tmp_2 = 0;
  
#line 410 
  __retres = (_Bool)(tmp_2 != 0);
  
#line 410 
  return __retres;
}


#line 421  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_schedule(struct napi_struct *n)
{
  bool tmp;
  
#line 423 
  tmp = napi_schedule_prep(n);
  
#line 423 
  if ((int)tmp != 0) 
#line 424 
                     __napi_schedule(n); else ;
  
#line 425 
  return;
}


#line 440  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool napi_reschedule(struct napi_struct *napi)
{
  bool __retres;
  bool tmp;
  
#line 442 
  tmp = napi_schedule_prep(napi);
  
#line 442 
  if ((int)tmp != 0) {
    
#line 443 
    __napi_schedule(napi);
    
#line 444 
    __retres = (_Bool)1;
    
#line 444 
    goto return_label;
  }
  else ;
  
#line 446 
  __retres = (_Bool)0;
  return_label: 
#line 446 
                return __retres;
}


#line 450 
void napi_complete_done(struct napi_struct *, int);


#line 458  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void napi_complete(struct napi_struct *n)
{
  
#line 460 
  napi_complete_done(n,0);
  
#line 461 
  return;
}


#line 478 
void napi_hash_add(struct napi_struct *);


#line 487 
void napi_hash_del(struct napi_struct *);


#line 593  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static int netdev_queue_numa_node_read(struct netdev_queue const *q)
{
  int __retres;
  
#line 596 
  __retres = q->numa_node;
  
#line 596 
  return __retres;
}


#line 1911 
void netif_napi_add(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int ), int);


#line 1920 
void netif_napi_del(struct napi_struct *);


#line 2900 
void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);


#line 2931  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_kfree_skb_any(struct sk_buff *skb)
{
  
#line 2933 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_DROPPED);
  
#line 2934 
  return;
}


#line 2936  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void dev_consume_skb_any(struct sk_buff *skb)
{
  
#line 2938 
  __dev_kfree_skb_any(skb,(enum skb_free_reason)SKB_REASON_CONSUMED);
  
#line 2939 
  return;
}


#line 2943 
int netif_receive_skb_sk(struct sock *, struct sk_buff *);


#line 2944  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static int netif_receive_skb(struct sk_buff *skb)
{
  int tmp;
  
#line 2946 
  tmp = netif_receive_skb_sk(skb->sk,skb);
  
#line 2946 
  return tmp;
}


#line 2950 
struct sk_buff *napi_get_frags(struct napi_struct *);


#line 2951 
gro_result_t napi_gro_frags(struct napi_struct *);


#line 3182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static bool __netif_tx_trylock(struct netdev_queue *txq)
{
  int tmp;
  
#line 3184 
  tmp = ldv_spin_trylock_63(& txq->_xmit_lock);
  
#line 3184 
  bool ok = (_Bool)(tmp != 0);
  
#line 3185 
  if ((long)((int)ok != 0) != 0L) {
    int tmp_4;
    {
      int pscr_ret__;
      {
        
#line 3186 
        void const *__vpp_verify = (void const *)0;
        
#line 3186 
        void const *tmp_2 = __vpp_verify;
      }
      
#line 3186 
      switch (4UL) {
        int tmp_0;
        int tmp_1;
        int tmp_2_0;
        int tmp_3;
        case (unsigned long)1: 
#line 3186 
        ;
        {
          int pfo_ret__;
          
#line 3186 
          switch (4UL) {
            case (unsigned long)1: 
#line 3186 
            ;
            
#line 3187 
            ldv_inline_asm();
            
#line 3186 
            goto ldv_42832;
            case (unsigned long)2: 
#line 3186 
            ;
            
#line 3187 
            ldv_inline_asm();
            
#line 3186 
            goto ldv_42832;
            case (unsigned long)4: 
#line 3186 
            ;
            
#line 3187 
            ldv_inline_asm();
            
#line 3186 
            goto ldv_42832;
            case (unsigned long)8: 
#line 3186 
            ;
            
#line 3187 
            ldv_inline_asm();
            
#line 3186 
            goto ldv_42832;
            default: 
#line 3186 
            ;
            
#line 3186 
            __bad_percpu_size();
          }
          ldv_42832: 
#line 3186 
          ;
          
#line 3186 
          tmp_0 = pfo_ret__;
        }
        
#line 3186 
        pscr_ret__ = tmp_0;
        
#line 3186 
        goto ldv_42838;
        case (unsigned long)2: 
#line 3186 
        ;
        {
          int pfo_ret___0;
          
#line 3186 
          switch (4UL) {
            case (unsigned long)1: 
#line 3186 
            ;
            
#line 3187 
            ldv_inline_asm();
            
#line 3186 
            goto ldv_42842;
            case (unsigned long)2: 
#line 3186 
            ;
            
#line 3187 
            ldv_inline_asm();
            
#line 3186 
            goto ldv_42842;
            case (unsigned long)4: 
#line 3186 
            ;
            
#line 3187 
            ldv_inline_asm();
            
#line 3186 
            goto ldv_42842;
            case (unsigned long)8: 
#line 3186 
            ;
            
#line 3187 
            ldv_inline_asm();
            
#line 3186 
            goto ldv_42842;
            default: 
#line 3186 
            ;
            
#line 3186 
            __bad_percpu_size();
          }
          ldv_42842: 
#line 3186 
          ;
          
#line 3186 
          tmp_1 = pfo_ret___0;
        }
        
#line 3186 
        pscr_ret__ = tmp_1;
        
#line 3186 
        goto ldv_42838;
        case (unsigned long)4: 
#line 3186 
        ;
        {
          int pfo_ret___1;
          
#line 3186 
          switch (4UL) {
            case (unsigned long)1: 
#line 3186 
            ;
            
#line 3187 
            ldv_inline_asm();
            
#line 3186 
            goto ldv_42851;
            case (unsigned long)2: 
#line 3186 
            ;
            
#line 3187 
            ldv_inline_asm();
            
#line 3186 
            goto ldv_42851;
            case (unsigned long)4: 
#line 3186 
            ;
            
#line 3187 
            ldv_inline_asm();
            
#line 3186 
            goto ldv_42851;
            case (unsigned long)8: 
#line 3186 
            ;
            
#line 3187 
            ldv_inline_asm();
            
#line 3186 
            goto ldv_42851;
            default: 
#line 3186 
            ;
            
#line 3186 
            __bad_percpu_size();
          }
          ldv_42851: 
#line 3186 
          ;
          
#line 3186 
          tmp_2_0 = pfo_ret___1;
        }
        
#line 3186 
        pscr_ret__ = tmp_2_0;
        
#line 3186 
        goto ldv_42838;
        case (unsigned long)8: 
#line 3186 
        ;
        {
          int pfo_ret___2;
          
#line 3186 
          switch (4UL) {
            case (unsigned long)1: 
#line 3186 
            ;
            
#line 3187 
            ldv_inline_asm();
            
#line 3186 
            goto ldv_42860;
            case (unsigned long)2: 
#line 3186 
            ;
            
#line 3187 
            ldv_inline_asm();
            
#line 3186 
            goto ldv_42860;
            case (unsigned long)4: 
#line 3186 
            ;
            
#line 3187 
            ldv_inline_asm();
            
#line 3186 
            goto ldv_42860;
            case (unsigned long)8: 
#line 3186 
            ;
            
#line 3187 
            ldv_inline_asm();
            
#line 3186 
            goto ldv_42860;
            default: 
#line 3186 
            ;
            
#line 3186 
            __bad_percpu_size();
          }
          ldv_42860: 
#line 3186 
          ;
          
#line 3186 
          tmp_3 = pfo_ret___2;
        }
        
#line 3186 
        pscr_ret__ = tmp_3;
        
#line 3186 
        goto ldv_42838;
        default: 
#line 3186 
        ;
        
#line 3186 
        __bad_size_call_parameter();
        
#line 3186 
        goto ldv_42838;
      }
      ldv_42838: 
#line 3186 
      ;
      
#line 3186 
      tmp_4 = pscr_ret__;
    }
    
#line 3186 
    txq->xmit_lock_owner = tmp_4;
  }
  else ;
  
#line 3187 
  return ok;
}


#line 3190  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
__inline static void __netif_tx_unlock(struct netdev_queue *txq)
{
  
#line 3192 
  txq->xmit_lock_owner = -1;
  
#line 3193 
  ldv_spin_unlock_64(& txq->_xmit_lock);
  
#line 3194 
  return;
}


#line 33  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/etherdevice.h"
__be16 eth_type_trans(struct sk_buff *, struct net_device *);


#line 409  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
__inline static void __vlan_hwaccel_put_tag(struct sk_buff *skb, __be16 vlan_proto, u16 vlan_tci)
{
  
#line 412 
  skb->vlan_proto = vlan_proto;
  
#line 413 
  skb->vlan_tci = (unsigned short)((unsigned int)vlan_tci | 4096U);
  
#line 414 
  return;
}


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ip.h"
__inline static struct iphdr *ip_hdr(struct sk_buff const *skb)
{
  struct iphdr *tmp;
  
#line 25 
  tmp = (struct iphdr *)skb_network_header(skb);
  
#line 25 
  return tmp;
}


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/tcp.h"
__inline static struct tcphdr *tcp_hdr(struct sk_buff const *skb)
{
  struct tcphdr *tmp;
  
#line 29 
  tmp = (struct tcphdr *)skb_transport_header(skb);
  
#line 29 
  return tmp;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/busy_poll.h"
__inline static void skb_mark_napi_id(struct sk_buff *skb, struct napi_struct *napi)
{
  
#line 124 
  skb->__anonCompField_sk_buff_70.napi_id = napi->napi_id;
  
#line 125 
  return;
}


#line 281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_uld.h"
int cxgb4_ofld_send(struct net_device *dev, struct sk_buff *skb);


#line 297 
struct sk_buff *cxgb4_pktgl_to_skb(struct pkt_gl const *gl, unsigned int skb_len, unsigned int pull_len);


#line 1008  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static bool cxgb_poll_lock_napi_0(struct sge_rspq *q)
{
  
#line 1010 
  bool rc = (_Bool)1;
  
#line 1012 
  ldv_spin_lock_74(& q->bpoll_lock);
  
#line 1013 
  if (((unsigned long)q->bpoll_state & 3UL) != 0UL) {
    
#line 1014 
    q->bpoll_state |= 4U;
    
#line 1015 
    rc = (_Bool)0;
  }
  else 
#line 1017 
       q->bpoll_state = 1U;
  
#line 1019 
  ldv_spin_unlock_75(& q->bpoll_lock);
  
#line 1020 
  return rc;
}


#line 1023  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static bool cxgb_poll_unlock_napi(struct sge_rspq *q)
{
  
#line 1025 
  bool rc = (_Bool)0;
  
#line 1027 
  ldv_spin_lock_76_0(& q->bpoll_lock);
  
#line 1028 
  if (((unsigned long)q->bpoll_state & 8UL) != 0UL) 
#line 1029 
                                                    rc = (_Bool)1; else ;
  
#line 1030 
  q->bpoll_state = 0U;
  
#line 1031 
  ldv_spin_unlock_77_0(& q->bpoll_lock);
  
#line 1032 
  return rc;
}


#line 1035  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static bool cxgb_poll_lock_poll(struct sge_rspq *q)
{
  
#line 1037 
  bool rc = (_Bool)1;
  
#line 1039 
  ldv_spin_lock_bh_78(& q->bpoll_lock);
  
#line 1040 
  if (((unsigned long)q->bpoll_state & 3UL) != 0UL) {
    
#line 1041 
    q->bpoll_state |= 8U;
    
#line 1042 
    rc = (_Bool)0;
  }
  else 
#line 1044 
       q->bpoll_state |= 2U;
  
#line 1046 
  ldv_spin_unlock_bh_79(& q->bpoll_lock);
  
#line 1047 
  return rc;
}


#line 1050  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static bool cxgb_poll_unlock_poll(struct sge_rspq *q)
{
  
#line 1052 
  bool rc = (_Bool)0;
  
#line 1054 
  ldv_spin_lock_bh_80(& q->bpoll_lock);
  
#line 1055 
  if (((unsigned long)q->bpoll_state & 8UL) != 0UL) 
#line 1056 
                                                    rc = (_Bool)1; else ;
  
#line 1057 
  q->bpoll_state = 0U;
  
#line 1058 
  ldv_spin_unlock_bh_81(& q->bpoll_lock);
  
#line 1059 
  return rc;
}


#line 1062  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static bool cxgb_poll_busy_polling(struct sge_rspq *q)
{
  bool __retres;
  
#line 1064 
  __retres = (_Bool)(((unsigned long)q->bpoll_state & 10UL) != 0UL);
  
#line 1064 
  return __retres;
}


#line 1127 
void t4_free_ofld_rxqs(struct adapter *adap, int n, struct sge_ofld_rxq *q);


#line 1200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static unsigned int core_ticks_to_us(struct adapter const *adapter, unsigned int ticks)
{
  unsigned int __retres;
  
#line 1204 
  __retres = (ticks * 1000U + adapter->params.vpd.cclk / 2U) / adapter->params.vpd.cclk;
  
#line 1204 
  return __retres;
}


#line 1430 
int t4_iq_free(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int iqtype, unsigned int iqid, unsigned int fl0id, unsigned int fl1id);


#line 1433 
int t4_eth_eq_free(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int eqid);


#line 1435 
int t4_ctrl_eq_free(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int eqid);


#line 1437 
int t4_ofld_eq_free(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int eqid);


#line 1447 
void t4_idma_monitor_init(struct adapter *adapter, struct sge_idma_monitor_state *idma);


#line 1449 
void t4_idma_monitor(struct adapter *adapter, struct sge_idma_monitor_state *idma, int hz, int ticks);


#line 157  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static unsigned int fl_mtu_bufsize(struct adapter *adapter, unsigned int mtu)
{
  unsigned int __retres;
  
#line 160 
  struct sge *s = & adapter->sge;
  
#line 162 
  __retres = (((s->pktshift + mtu) + s->fl_align) + 17U) & - s->fl_align;
  
#line 162 
  return __retres;
}


#line 197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static int timer_pkt_quota[6U] = {1, 1, 2, 3, 4, 5};

#line 200  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static dma_addr_t get_buf_addr(struct rx_sw_desc const *d)
{
  dma_addr_t __retres;
  
#line 202 
  __retres = d->dma_addr & 18446744073709551584ULL;
  
#line 202 
  return __retres;
}


#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static bool is_buf_mapped(struct rx_sw_desc const *d)
{
  bool __retres;
  
#line 207 
  __retres = (_Bool)((d->dma_addr & 16ULL) == 0ULL);
  
#line 207 
  return __retres;
}


#line 217  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static unsigned int txq_avail(struct sge_txq const *q)
{
  unsigned int __retres;
  
#line 219 
  __retres = (q->size - q->in_use) + 4294967295U;
  
#line 219 
  return __retres;
}


#line 230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static unsigned int fl_cap(struct sge_fl const *fl)
{
  unsigned int __retres;
  
#line 232 
  __retres = fl->size + 4294967288U;
  
#line 232 
  return __retres;
}


#line 244  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static bool fl_starving(struct adapter const *adapter, struct sge_fl const *fl)
{
  bool __retres;
  
#line 247 
  struct sge const *s = & adapter->sge;
  
#line 249 
  __retres = (_Bool)(fl->avail - fl->pend_cred <= s->fl_starve_thres);
  
#line 249 
  return __retres;
}


#line 252  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static int map_skb(struct device *dev, struct sk_buff const *skb, dma_addr_t *addr)
{
  int __retres;
  skb_frag_t const *fp;
  skb_frag_t const *end;
  struct skb_shared_info const *si;
  unsigned int tmp;
  int tmp_0;
  unsigned int tmp_2;
  int tmp_3;
  unsigned int tmp_4;
  skb_frag_t const *tmp_5;
  unsigned int tmp_6;
  
#line 258 
  tmp = skb_headlen(skb);
  
#line 258 
  ;
  
#line 258 
  ;
  
#line 258 
  *addr = dma_map_single_attrs(dev,(void *)skb->data,(unsigned long)tmp,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
  
#line 259 
  tmp_0 = dma_mapping_error(dev,*addr);
  
#line 259 
  if (tmp_0 != 0) 
#line 260 
                  goto out_err; else ;
  
#line 262 
  si = (struct skb_shared_info const *)skb_end_pointer(skb);
  
#line 263 
  end = & si->frags[(int)si->nr_frags];
  
#line 265 
  fp = (skb_frag_t const *)(& si->frags);
  
#line 265 
  goto ldv_58647;
  ldv_58646: 
#line 266 
  ;
  
#line 266 
  addr += 1;
  
#line 266 
  tmp_2 = skb_frag_size(fp);
  
#line 266 
  ;
  
#line 266 
  ;
  
#line 266 
  *addr = skb_frag_dma_map(dev,fp,0UL,(unsigned long)tmp_2,(enum dma_data_direction)DMA_TO_DEVICE);
  
#line 268 
  tmp_3 = dma_mapping_error(dev,*addr);
  
#line 268 
  if (tmp_3 != 0) 
#line 269 
                  goto unwind; else ;
  
#line 265 
  fp += 1;
  ldv_58647: 
#line 266 
  ;
  
#line 265 
  if (fp < end) 
#line 267 
                goto ldv_58646; else 
#line 270 
                                     goto ldv_58648;
  ldv_58648: 
#line 271 
  ;
  
#line 271 
  __retres = 0;
  
#line 271 
  goto return_label;
  unwind: 
#line 273 
  ;
  
#line 274 
  goto ldv_58650;
  ldv_58649: 
#line 275 
  ;
  
#line 275 
  tmp_4 = skb_frag_size(fp);
  
#line 275 
  addr -= 1;
  
#line 275 
  ;
  
#line 275 
  ;
  
#line 275 
  dma_unmap_page(dev,*addr,(unsigned long)tmp_4,(enum dma_data_direction)DMA_TO_DEVICE);
  ldv_58650: 
#line 276 
  ;
  
#line 274 
  tmp_5 = fp;
  
#line 274 
  fp -= 1;
  
#line 274 
  ;
  
#line 274 
  if (tmp_5 > (skb_frag_t const *)(& si->frags)) 
#line 276 
                                                 goto ldv_58649; else 
                                                                   
#line 279 
                                                                   goto ldv_58651;
  ldv_58651: 
#line 280 
  ;
  
#line 277 
  tmp_6 = skb_headlen(skb);
  
#line 277 
  ;
  
#line 277 
  ;
  
#line 277 
  dma_unmap_single_attrs(dev,*(addr + 18446744073709551615U),(unsigned long)tmp_6,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
  out_err: 
#line 278 
  ;
  
#line 279 
  __retres = -12;
  return_label: 
#line 279 
                return __retres;
}


#line 283  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void unmap_skb(struct device *dev, struct sk_buff const *skb, dma_addr_t const *addr)
{
  skb_frag_t const *fp;
  skb_frag_t const *end;
  struct skb_shared_info const *si;
  unsigned int tmp;
  dma_addr_t const *tmp_0;
  unsigned int tmp_2;
  dma_addr_t const *tmp_3;
  
#line 289 
  tmp = skb_headlen(skb);
  
#line 289 
  tmp_0 = addr;
  
#line 289 
  addr += 1;
  
#line 289 
  ;
  
#line 289 
  ;
  
#line 289 
  dma_unmap_single_attrs(dev,*tmp_0,(unsigned long)tmp,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
  
#line 291 
  si = (struct skb_shared_info const *)skb_end_pointer(skb);
  
#line 292 
  end = & si->frags[(int)si->nr_frags];
  
#line 293 
  fp = (skb_frag_t const *)(& si->frags);
  
#line 293 
  goto ldv_58661;
  ldv_58660: 
#line 294 
  ;
  
#line 294 
  tmp_2 = skb_frag_size(fp);
  
#line 294 
  tmp_3 = addr;
  
#line 294 
  addr += 1;
  
#line 294 
  ;
  
#line 294 
  ;
  
#line 294 
  dma_unmap_page(dev,*tmp_3,(unsigned long)tmp_2,(enum dma_data_direction)DMA_TO_DEVICE);
  
#line 293 
  fp += 1;
  ldv_58661: 
#line 294 
  ;
  
#line 293 
  if (fp < end) 
#line 295 
                goto ldv_58660; else 
#line 298 
                                     goto ldv_58662;
  ldv_58662: 
#line 299 
  ;
  
#line 300 
  return;
}


#line 305  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void deferred_unmap_destructor(struct sk_buff *skb)
{
  
#line 307 
  unmap_skb((skb->dev)->dev.parent,(struct sk_buff const *)skb,(dma_addr_t const *)skb->head);
  
#line 308 
  return;
}


#line 311  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void unmap_sgl(struct device *dev, struct sk_buff const *skb, struct ulptx_sgl const *sgl, struct sge_txq const *q)
{
  struct ulptx_sge_pair const *p;
  unsigned char *tmp;
  unsigned int tmp_8;
  
#line 315 
  tmp = skb_end_pointer(skb);
  
#line 315 
  unsigned int nfrags = (unsigned int)((struct skb_shared_info *)tmp)->nr_frags;
  
#line 317 
  tmp_8 = skb_headlen(skb);
  
#line 317 
  if ((long)(tmp_8 != 0U) != 0L) {
    unsigned int tmp_1;
    unsigned long long tmp_3;
    
#line 318 
    if (0 != 0) 
#line 318 
                tmp_1 = (((sgl->len0 << 24) | ((sgl->len0 << 8) & 16711680U)) | ((sgl->len0 >> 8) & 65280U)) | (sgl->len0 >> 24); else 
                                                                    
#line 318 
                                                                    tmp_1 = __fswab32(sgl->len0);
    
#line 318 
    if (0 != 0) 
#line 318 
                tmp_3 = (((((((sgl->addr0 << 56) | ((sgl->addr0 << 40) & 71776119061217280ULL)) | ((sgl->addr0 << 24) & 280375465082880ULL)) | ((sgl->addr0 << 8) & 1095216660480ULL)) | ((sgl->addr0 >> 8) & 4278190080ULL)) | ((sgl->addr0 >> 24) & 16711680ULL)) | ((sgl->addr0 >> 40) & 65280ULL)) | (sgl->addr0 >> 56); else 
                                                                    
#line 318 
                                                                    tmp_3 = __fswab64(sgl->addr0);
    
#line 318 
    ;
    
#line 318 
    dma_unmap_single_attrs(dev,tmp_3,(unsigned long)tmp_1,(enum dma_data_direction)DMA_TO_DEVICE,(struct dma_attrs *)0);
  }
  else {
    unsigned int tmp_5;
    unsigned long long tmp_7;
    
#line 321 
    if (0 != 0) 
#line 321 
                tmp_5 = (((sgl->len0 << 24) | ((sgl->len0 << 8) & 16711680U)) | ((sgl->len0 >> 8) & 65280U)) | (sgl->len0 >> 24); else 
                                                                    
#line 321 
                                                                    tmp_5 = __fswab32(sgl->len0);
    
#line 321 
    if (0 != 0) 
#line 321 
                tmp_7 = (((((((sgl->addr0 << 56) | ((sgl->addr0 << 40) & 71776119061217280ULL)) | ((sgl->addr0 << 24) & 280375465082880ULL)) | ((sgl->addr0 << 8) & 1095216660480ULL)) | ((sgl->addr0 >> 8) & 4278190080ULL)) | ((sgl->addr0 >> 24) & 16711680ULL)) | ((sgl->addr0 >> 40) & 65280ULL)) | (sgl->addr0 >> 56); else 
                                                                    
#line 321 
                                                                    tmp_7 = __fswab64(sgl->addr0);
    
#line 321 
    ;
    
#line 321 
    dma_unmap_page(dev,tmp_7,(unsigned long)tmp_5,(enum dma_data_direction)DMA_TO_DEVICE);
    
#line 323 
    nfrags -= 1U;
  }
  
#line 330 
  p = (struct ulptx_sge_pair const *)(& sgl->sge);
  
#line 330 
  goto ldv_58678;
  ldv_58677: 
#line 331 
  ;
  
#line 331 
  if ((long)((u8 *)(p + 1U) <= (u8 *)q->stat) != 0L) {
    unsigned int tmp_10;
    unsigned long long tmp_12;
    unsigned int tmp_14;
    unsigned long long tmp_16;
    unmap: 
#line 332 
    ;
    
#line 333 
    if (0 != 0) 
#line 333 
                tmp_10 = (((p->len[0] << 24) | ((p->len[0] << 8) & 16711680U)) | ((p->len[0] >> 8) & 65280U)) | (p->len[0] >> 24); else 
                                                                    
#line 333 
                                                                    tmp_10 = __fswab32(p->len[0]);
    
#line 332 
    if (0 != 0) 
#line 332 
                tmp_12 = (((((((p->addr[0] << 56) | ((p->addr[0] << 40) & 71776119061217280ULL)) | ((p->addr[0] << 24) & 280375465082880ULL)) | ((p->addr[0] << 8) & 1095216660480ULL)) | ((p->addr[0] >> 8) & 4278190080ULL)) | ((p->addr[0] >> 24) & 16711680ULL)) | ((p->addr[0] >> 40) & 65280ULL)) | (p->addr[0] >> 56); else 
                                                                    
#line 332 
                                                                    tmp_12 = __fswab64(p->addr[0]);
    
#line 332 
    ;
    
#line 332 
    dma_unmap_page(dev,tmp_12,(unsigned long)tmp_10,(enum dma_data_direction)DMA_TO_DEVICE);
    
#line 335 
    if (0 != 0) 
#line 335 
                tmp_14 = (((p->len[1] << 24) | ((p->len[1] << 8) & 16711680U)) | ((p->len[1] >> 8) & 65280U)) | (p->len[1] >> 24); else 
                                                                    
#line 335 
                                                                    tmp_14 = __fswab32(p->len[1]);
    
#line 334 
    if (0 != 0) 
#line 334 
                tmp_16 = (((((((p->addr[1] << 56) | ((p->addr[1] << 40) & 71776119061217280ULL)) | ((p->addr[1] << 24) & 280375465082880ULL)) | ((p->addr[1] << 8) & 1095216660480ULL)) | ((p->addr[1] >> 8) & 4278190080ULL)) | ((p->addr[1] >> 24) & 16711680ULL)) | ((p->addr[1] >> 40) & 65280ULL)) | (p->addr[1] >> 56); else 
                                                                    
#line 334 
                                                                    tmp_16 = __fswab64(p->addr[1]);
    
#line 334 
    ;
    
#line 334 
    dma_unmap_page(dev,tmp_16,(unsigned long)tmp_14,(enum dma_data_direction)DMA_TO_DEVICE);
    
#line 336 
    p += 1;
  }
  else 
    
#line 337 
    if ((u8 *)q->stat == (u8 *)p) {
      
#line 338 
      p = (struct ulptx_sge_pair const *)q->desc;
      
#line 339 
      goto unmap;
    }
    else 
      
#line 340 
      if ((u8 *)p + 8U == (u8 *)q->stat) {
        unsigned int tmp_18;
        unsigned long long tmp_20;
        unsigned int tmp_22;
        unsigned long long tmp_24;
        
#line 341 
        __be64 const *addr = (__be64 const *)q->desc;
        
#line 344 
        if (0 != 0) 
#line 344 
                    tmp_18 = (((p->len[0] << 24) | ((p->len[0] << 8) & 16711680U)) | ((p->len[0] >> 8) & 65280U)) | (p->len[0] >> 24); else 
                                                                    
#line 344 
                                                                    tmp_18 = __fswab32(p->len[0]);
        
#line 343 
        if (0 != 0) 
#line 343 
                    tmp_20 = (((((((*addr << 56) | ((*addr << 40) & 71776119061217280ULL)) | ((*addr << 24) & 280375465082880ULL)) | ((*addr << 8) & 1095216660480ULL)) | ((*addr >> 8) & 4278190080ULL)) | ((*addr >> 24) & 16711680ULL)) | ((*addr >> 40) & 65280ULL)) | (*addr >> 56); else 
                                                                    
#line 343 
                                                                    tmp_20 = __fswab64(*addr);
        
#line 343 
        ;
        
#line 343 
        dma_unmap_page(dev,tmp_20,(unsigned long)tmp_18,(enum dma_data_direction)DMA_TO_DEVICE);
        
#line 346 
        if (0 != 0) 
#line 346 
                    tmp_22 = (((p->len[1] << 24) | ((p->len[1] << 8) & 16711680U)) | ((p->len[1] >> 8) & 65280U)) | (p->len[1] >> 24); else 
                                                                    
#line 346 
                                                                    tmp_22 = __fswab32(p->len[1]);
        
#line 345 
        if (0 != 0) 
#line 345 
                    tmp_24 = (((((((*(addr + 1U) << 56) | ((*(addr + 1U) << 40) & 71776119061217280ULL)) | ((*(addr + 1U) << 24) & 280375465082880ULL)) | ((*(addr + 1U) << 8) & 1095216660480ULL)) | ((*(addr + 1U) >> 8) & 4278190080ULL)) | ((*(addr + 1U) >> 24) & 16711680ULL)) | ((*(addr + 1U) >> 40) & 65280ULL)) | (*(addr + 1U) >> 56); else 
                                                                    
#line 345 
                                                                    tmp_24 = __fswab64(*(addr + 1U));
        
#line 345 
        ;
        
#line 345 
        dma_unmap_page(dev,tmp_24,(unsigned long)tmp_22,(enum dma_data_direction)DMA_TO_DEVICE);
        
#line 347 
        p = (struct ulptx_sge_pair const *)(addr + 2U);
      }
      else {
        unsigned int tmp_26;
        unsigned long long tmp_28;
        unsigned int tmp_30;
        unsigned long long tmp_32;
        
#line 349 
        __be64 const *addr_0 = (__be64 const *)q->desc;
        
#line 352 
        if (0 != 0) 
#line 352 
                    tmp_26 = (((p->len[0] << 24) | ((p->len[0] << 8) & 16711680U)) | ((p->len[0] >> 8) & 65280U)) | (p->len[0] >> 24); else 
                                                                    
#line 352 
                                                                    tmp_26 = __fswab32(p->len[0]);
        
#line 351 
        if (0 != 0) 
#line 351 
                    tmp_28 = (((((((p->addr[0] << 56) | ((p->addr[0] << 40) & 71776119061217280ULL)) | ((p->addr[0] << 24) & 280375465082880ULL)) | ((p->addr[0] << 8) & 1095216660480ULL)) | ((p->addr[0] >> 8) & 4278190080ULL)) | ((p->addr[0] >> 24) & 16711680ULL)) | ((p->addr[0] >> 40) & 65280ULL)) | (p->addr[0] >> 56); else 
                                                                    
#line 351 
                                                                    tmp_28 = __fswab64(p->addr[0]);
        
#line 351 
        ;
        
#line 351 
        dma_unmap_page(dev,tmp_28,(unsigned long)tmp_26,(enum dma_data_direction)DMA_TO_DEVICE);
        
#line 354 
        if (0 != 0) 
#line 354 
                    tmp_30 = (((p->len[1] << 24) | ((p->len[1] << 8) & 16711680U)) | ((p->len[1] >> 8) & 65280U)) | (p->len[1] >> 24); else 
                                                                    
#line 354 
                                                                    tmp_30 = __fswab32(p->len[1]);
        
#line 353 
        if (0 != 0) 
#line 353 
                    tmp_32 = (((((((*addr_0 << 56) | ((*addr_0 << 40) & 71776119061217280ULL)) | ((*addr_0 << 24) & 280375465082880ULL)) | ((*addr_0 << 8) & 1095216660480ULL)) | ((*addr_0 >> 8) & 4278190080ULL)) | ((*addr_0 >> 24) & 16711680ULL)) | ((*addr_0 >> 40) & 65280ULL)) | (*addr_0 >> 56); else 
                                                                    
#line 353 
                                                                    tmp_32 = __fswab64(*addr_0);
        
#line 353 
        ;
        
#line 353 
        dma_unmap_page(dev,tmp_32,(unsigned long)tmp_30,(enum dma_data_direction)DMA_TO_DEVICE);
        
#line 355 
        p = (struct ulptx_sge_pair const *)(addr_0 + 1U);
      }
  
#line 330 
  nfrags += 4294967294U;
  ldv_58678: 
#line 331 
  ;
  
#line 330 
  if (nfrags > 1U) 
#line 332 
                   goto ldv_58677; else 
#line 335 
                                        goto ldv_58679;
  ldv_58679: 
#line 336 
  ;
  
#line 358 
  if (nfrags != 0U) {
    __be64 addr_1;
    unsigned int tmp_34;
    unsigned long long tmp_36;
    
#line 361 
    if ((u8 *)q->stat == (u8 *)p) 
#line 362 
                                  p = (struct ulptx_sge_pair const *)q->desc; else ;
    
#line 363 
    if ((u8 *)p + 16U <= (u8 *)q->stat) 
#line 363 
                                        addr_1 = p->addr[0]; else 
#line 363 
                                                                  addr_1 = *((__be64 const *)q->desc);
    
#line 365 
    if (0 != 0) 
#line 365 
                tmp_34 = (((p->len[0] << 24) | ((p->len[0] << 8) & 16711680U)) | ((p->len[0] >> 8) & 65280U)) | (p->len[0] >> 24); else 
                                                                    
#line 365 
                                                                    tmp_34 = __fswab32(p->len[0]);
    
#line 365 
    if (0 != 0) 
#line 365 
                tmp_36 = (((((((addr_1 << 56) | ((addr_1 << 40) & 71776119061217280ULL)) | ((addr_1 << 24) & 280375465082880ULL)) | ((addr_1 << 8) & 1095216660480ULL)) | ((addr_1 >> 8) & 4278190080ULL)) | ((addr_1 >> 24) & 16711680ULL)) | ((addr_1 >> 40) & 65280ULL)) | (addr_1 >> 56); else 
                                                                    
#line 365 
                                                                    tmp_36 = __fswab64(addr_1);
    
#line 365 
    ;
    
#line 365 
    dma_unmap_page(dev,tmp_36,(unsigned long)tmp_34,(enum dma_data_direction)DMA_TO_DEVICE);
  }
  else ;
  
#line 367 
  return;
}


#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void free_tx_desc(struct adapter *adap, struct sge_txq *q, unsigned int n, bool unmap)
{
  struct tx_sw_desc *d;
  unsigned int tmp;
  
#line 384 
  unsigned int cidx = q->cidx;
  
#line 385 
  struct device *dev = adap->pdev_dev;
  
#line 387 
  d = q->sdesc + cidx;
  
#line 388 
  goto ldv_58691;
  ldv_58690: 
#line 389 
  ;
  
#line 389 
  if (d->skb != (struct sk_buff *)0) {
    
#line 390 
    if ((int)unmap != 0) 
#line 391 
                         unmap_sgl(dev,(struct sk_buff const *)d->skb,(struct ulptx_sgl const *)d->sgl,(struct sge_txq const *)q); else ;
    
#line 392 
    dev_consume_skb_any(d->skb);
    
#line 393 
    d->skb = (struct sk_buff *)0;
  }
  else ;
  
#line 395 
  d += 1;
  
#line 396 
  cidx += 1U;
  
#line 396 
  ;
  
#line 396 
  if (cidx == q->size) {
    
#line 397 
    cidx = 0U;
    
#line 398 
    d = q->sdesc;
  }
  else ;
  ldv_58691: 
#line 400 
  ;
  
#line 388 
  tmp = n;
  
#line 388 
  n -= 1U;
  
#line 388 
  ;
  
#line 388 
  if (tmp != 0U) 
#line 390 
                 goto ldv_58690; else 
#line 393 
                                      goto ldv_58692;
  ldv_58692: 
#line 394 
  ;
  
#line 401 
  q->cidx = cidx;
  
#line 402 
  return;
}


#line 407  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static int reclaimable(struct sge_txq const *q)
{
  int __retres;
  int tmp_0;
  unsigned int tmp_1;
  
#line 409 
  if (0 != 0) 
#line 409 
              tmp_0 = (int)((unsigned short)(((int)(q->stat)->cidx << 8) | ((int)(q->stat)->cidx >> 8)));
  else {
    __u16 tmp;
    
#line 409 
    tmp = __fswab16((unsigned short)((int)(q->stat)->cidx));
    
#line 409 
    tmp_0 = (int)tmp;
  }
  
#line 409 
  int hw_cidx = tmp_0;
  
#line 410 
  hw_cidx = (int)((unsigned int)hw_cidx - q->cidx);
  
#line 411 
  if (hw_cidx < 0) 
#line 411 
                   tmp_1 = q->size + (unsigned int)hw_cidx; else 
#line 411 
                                                                 tmp_1 = (unsigned int)hw_cidx;
  
#line 411 
  __retres = (int)tmp_1;
  
#line 411 
  return __retres;
}


#line 424  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static void reclaim_completed_tx(struct adapter *adap, struct sge_txq *q, bool unmap)
{
  
#line 427 
  int avail = reclaimable((struct sge_txq const *)q);
  
#line 429 
  if (avail != 0) {
    
#line 434 
    if (avail > 16) 
#line 435 
                    avail = 16; else ;
    
#line 437 
    free_tx_desc(adap,q,(unsigned int)avail,(_Bool)((bool)((int)unmap) != 0));
    
#line 438 
    q->in_use -= (unsigned int)avail;
  }
  else ;
  
#line 440 
  return;
}


#line 442  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static int get_buf_size(struct adapter *adapter, struct rx_sw_desc const *d)
{
  int buf_size;
  
#line 445 
  struct sge *s = & adapter->sge;
  
#line 446 
  unsigned int rx_buf_size_idx = (unsigned int)d->dma_addr & 15U;
  
#line 449 
  switch (rx_buf_size_idx) {
    unsigned int tmp;
    unsigned int tmp_0;
    case (unsigned int)0: 
#line 450 
    ;
    
#line 451 
    buf_size = 4096;
    
#line 452 
    goto ldv_58711;
    case (unsigned int)1: 
#line 454 
    ;
    
#line 455 
    buf_size = (int)(4096UL << s->fl_pg_order);
    
#line 456 
    goto ldv_58711;
    case (unsigned int)2: 
#line 458 
    ;
    
#line 459 
    tmp = fl_mtu_bufsize(adapter,1500U);
    
#line 459 
    buf_size = (int)tmp;
    
#line 460 
    goto ldv_58711;
    case (unsigned int)3: 
#line 462 
    ;
    
#line 463 
    tmp_0 = fl_mtu_bufsize(adapter,9000U);
    
#line 463 
    buf_size = (int)tmp_0;
    
#line 464 
    goto ldv_58711;
    default: 
#line 466 
    ;
    
#line 469 
    ldv_inline_asm();
    
#line 467 
    ;
  }
  ldv_58711: 
#line 470 
  ;
  
#line 470 
  return buf_size;
}


#line 482  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void free_rx_bufs(struct adapter *adap, struct sge_fl *q, int n)
{
  int tmp_2;
  
#line 484 
  goto ldv_58723;
  ldv_58722: 
#line 485 
  ;
  {
    bool tmp_1;
    
#line 485 
    struct rx_sw_desc *d = q->sdesc + q->cidx;
    
#line 487 
    tmp_1 = is_buf_mapped((struct rx_sw_desc const *)d);
    
#line 487 
    if ((int)tmp_1 != 0) {
      int tmp;
      dma_addr_t tmp_0;
      
#line 489 
      tmp = get_buf_size(adap,(struct rx_sw_desc const *)d);
      
#line 488 
      tmp_0 = get_buf_addr((struct rx_sw_desc const *)d);
      
#line 488 
      ;
      
#line 488 
      dma_unmap_page(adap->pdev_dev,tmp_0,(unsigned long)tmp,(enum dma_data_direction)DMA_FROM_DEVICE);
    }
    else ;
    
#line 491 
    put_page(d->page);
    
#line 492 
    d->page = (struct page *)0;
    
#line 493 
    q->cidx += 1U;
    
#line 493 
    ;
    
#line 493 
    if (q->cidx == q->size) 
#line 494 
                            q->cidx = 0U; else ;
    
#line 495 
    q->avail -= 1U;
  }
  ldv_58723: 
#line 497 
  ;
  
#line 484 
  tmp_2 = n;
  
#line 484 
  n -= 1;
  
#line 484 
  ;
  
#line 484 
  if (tmp_2 != 0) 
#line 486 
                  goto ldv_58722; else 
#line 489 
                                       goto ldv_58724;
  ldv_58724: 
#line 490 
  ;
  
#line 491 
  return;
}


#line 510  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void unmap_rx_buf(struct adapter *adap, struct sge_fl *q)
{
  bool tmp_1;
  
#line 512 
  struct rx_sw_desc *d = q->sdesc + q->cidx;
  
#line 514 
  tmp_1 = is_buf_mapped((struct rx_sw_desc const *)d);
  
#line 514 
  if ((int)tmp_1 != 0) {
    int tmp;
    dma_addr_t tmp_0;
    
#line 516 
    tmp = get_buf_size(adap,(struct rx_sw_desc const *)d);
    
#line 515 
    tmp_0 = get_buf_addr((struct rx_sw_desc const *)d);
    
#line 515 
    ;
    
#line 515 
    dma_unmap_page(adap->pdev_dev,tmp_0,(unsigned long)tmp,(enum dma_data_direction)DMA_FROM_DEVICE);
  }
  else ;
  
#line 517 
  d->page = (struct page *)0;
  
#line 518 
  q->cidx += 1U;
  
#line 518 
  ;
  
#line 518 
  if (q->cidx == q->size) 
#line 519 
                          q->cidx = 0U; else ;
  
#line 520 
  q->avail -= 1U;
  
#line 521 
  return;
}


#line 523  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static void ring_fl_db(struct adapter *adap, struct sge_fl *q)
{
  
#line 525 
  if (q->pend_cred > 7U) {
    int tmp;
    
#line 526 
    u32 val = adap->params.arch.sge_fl_db;
    
#line 528 
    tmp = is_t4(adap->params.chip);
    
#line 528 
    if (tmp != 0) 
#line 529 
                  val = q->pend_cred / 8U | val; else 
#line 531 
                                                      val = q->pend_cred / 8U | val;
    
#line 532 
    ldv_inline_asm();
    
#line 542 
    if ((long)(q->bar2_addr == (void *)0) != 0L) 
#line 543 
                                                 t4_write_reg(adap,110592U,(q->cntxt_id << 15) | val);
    else {
      
#line 546 
      writel((q->bar2_qid << 15) | val,(void volatile *)(q->bar2_addr + 8U));
      
#line 548 
      ldv_inline_asm();
    }
    
#line 554 
    q->pend_cred &= 7U;
  }
  else ;
  
#line 556 
  return;
}


#line 558  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static void set_rx_sw_desc(struct rx_sw_desc *sd, struct page *pg, dma_addr_t mapping)
{
  
#line 561 
  sd->page = pg;
  
#line 562 
  sd->dma_addr = mapping;
  
#line 563 
  return;
}


#line 579  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static unsigned int refill_fl(struct adapter *adap, struct sge_fl *q, int n, gfp_t gfp)
{
  struct page *pg;
  dma_addr_t mapping;
  int node;
  int tmp_1;
  int tmp_2;
  __be64 *tmp_3;
  int tmp_5;
  __be64 *tmp_6;
  int tmp_8;
  bool tmp_9;
  
#line 582 
  struct sge *s = & adap->sge;
  
#line 585 
  unsigned int cred = q->avail;
  
#line 586 
  __be64 *d = q->desc + q->pidx;
  
#line 587 
  struct rx_sw_desc *sd = q->sdesc + q->pidx;
  
#line 591 
  if (0 != 0) {
    int tmp;
    
#line 591 
    tmp = constant_test_bit((long)(q->cntxt_id - adap->sge.egr_start),(unsigned long const volatile *)adap->sge.blocked_fl);
    
#line 591 
    tmp_1 = tmp != 0;
  }
  else {
    int tmp_0;
    
#line 591 
    tmp_0 = variable_test_bit((long)(q->cntxt_id - adap->sge.egr_start),(unsigned long const volatile *)adap->sge.blocked_fl);
    
#line 591 
    tmp_1 = tmp_0 != 0;
  }
  
#line 591 
  if (tmp_1) 
#line 592 
             goto out; else ;
  
#line 595 
  gfp |= 512U;
  
#line 596 
  node = dev_to_node(adap->pdev_dev);
  
#line 598 
  if (s->fl_pg_order == 0U) 
#line 599 
                            goto alloc_small_pages; else ;
  
#line 604 
  goto ldv_58757;
  ldv_58756: 
#line 605 
  ;
  
#line 605 
  pg = alloc_pages_node(node,gfp | 16384U,s->fl_pg_order);
  
#line 606 
  if ((long)(pg == (struct page *)0) != 0L) {
    
#line 607 
    q->large_alloc_failed += 1UL;
    
#line 608 
    goto ldv_58755;
  }
  else ;
  
#line 611 
  mapping = dma_map_page(adap->pdev_dev,pg,0UL,4096UL << s->fl_pg_order,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 614 
  tmp_2 = dma_mapping_error(adap->pdev_dev,mapping);
  
#line 614 
  if ((long)(tmp_2 != 0) != 0L) {
    
#line 615 
    __free_pages(pg,s->fl_pg_order);
    
#line 616 
    goto out;
  }
  else ;
  
#line 618 
  mapping |= 1ULL;
  
#line 619 
  tmp_3 = d;
  
#line 619 
  d += 1;
  
#line 619 
  if (0 != 0) 
#line 619 
              *tmp_3 = (((((((mapping << 56) | ((mapping << 40) & 71776119061217280ULL)) | ((mapping << 24) & 280375465082880ULL)) | ((mapping << 8) & 1095216660480ULL)) | ((mapping >> 8) & 4278190080ULL)) | ((mapping >> 24) & 16711680ULL)) | ((mapping >> 40) & 65280ULL)) | (mapping >> 56); else 
                                                                    
#line 619 
                                                                    *tmp_3 = __fswab64(mapping);
  
#line 621 
  set_rx_sw_desc(sd,pg,mapping);
  
#line 622 
  sd += 1;
  
#line 624 
  q->avail += 1U;
  
#line 625 
  q->pidx += 1U;
  
#line 625 
  ;
  
#line 625 
  if (q->pidx == q->size) {
    
#line 626 
    q->pidx = 0U;
    
#line 627 
    sd = q->sdesc;
    
#line 628 
    d = q->desc;
  }
  else ;
  
#line 630 
  n -= 1;
  ldv_58757: 
#line 631 
  ;
  
#line 604 
  if (n != 0) 
#line 606 
              goto ldv_58756; else 
#line 609 
                                   goto ldv_58755;
  ldv_58755: 
#line 610 
  ;
  alloc_small_pages: 
#line 633 
  ;
  
#line 634 
  goto ldv_58760;
  ldv_58759: 
#line 635 
  ;
  
#line 635 
  pg = alloc_pages_node(node,gfp,0U);
  
#line 636 
  if ((long)(pg == (struct page *)0) != 0L) {
    
#line 637 
    q->alloc_failed += 1UL;
    
#line 638 
    goto ldv_58758;
  }
  else ;
  
#line 641 
  mapping = dma_map_page(adap->pdev_dev,pg,0UL,4096UL,(enum dma_data_direction)DMA_FROM_DEVICE);
  
#line 643 
  tmp_5 = dma_mapping_error(adap->pdev_dev,mapping);
  
#line 643 
  if ((long)(tmp_5 != 0) != 0L) {
    
#line 644 
    put_page(pg);
    
#line 645 
    goto out;
  }
  else ;
  
#line 647 
  tmp_6 = d;
  
#line 647 
  d += 1;
  
#line 647 
  if (0 != 0) 
#line 647 
              *tmp_6 = (((((((mapping << 56) | ((mapping << 40) & 71776119061217280ULL)) | ((mapping << 24) & 280375465082880ULL)) | ((mapping << 8) & 1095216660480ULL)) | ((mapping >> 8) & 4278190080ULL)) | ((mapping >> 24) & 16711680ULL)) | ((mapping >> 40) & 65280ULL)) | (mapping >> 56); else 
                                                                    
#line 647 
                                                                    *tmp_6 = __fswab64(mapping);
  
#line 649 
  set_rx_sw_desc(sd,pg,mapping);
  
#line 650 
  sd += 1;
  
#line 652 
  q->avail += 1U;
  
#line 653 
  q->pidx += 1U;
  
#line 653 
  ;
  
#line 653 
  if (q->pidx == q->size) {
    
#line 654 
    q->pidx = 0U;
    
#line 655 
    sd = q->sdesc;
    
#line 656 
    d = q->desc;
  }
  else ;
  ldv_58760: 
#line 658 
  ;
  
#line 634 
  tmp_8 = n;
  
#line 634 
  n -= 1;
  
#line 634 
  ;
  
#line 634 
  if (tmp_8 != 0) 
#line 636 
                  goto ldv_58759; else 
#line 639 
                                       goto ldv_58758;
  ldv_58758: 
#line 640 
  ;
  out: 
#line 660 
  ;
  
#line 660 
  cred = q->avail - cred;
  
#line 661 
  q->pend_cred += cred;
  
#line 662 
  ring_fl_db(adap,q);
  
#line 664 
  tmp_9 = fl_starving((struct adapter const *)adap,(struct sge_fl const *)q);
  
#line 664 
  if ((long)((int)tmp_9 != 0) != 0L) {
    
#line 666 
    ldv_inline_asm();
    
#line 666 
    clear_bit((long)(q->cntxt_id - adap->sge.egr_start),(unsigned long volatile *)adap->sge.starving_fl);
  }
  else ;
  
#line 670 
  return cred;
}


#line 673  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static void __refill_fl(struct adapter *adap, struct sge_fl *fl)
{
  unsigned int tmp_1;
  {
    unsigned int tmp;
    unsigned int tmp_0;
    
#line 675 
    unsigned int _min1 = 16U;
    
#line 675 
    tmp = fl_cap((struct sge_fl const *)fl);
    
#line 675 
    unsigned int _min2 = tmp - fl->avail;
    
#line 675 
    if (_min1 < _min2) 
#line 675 
                       tmp_0 = _min1; else 
#line 675 
                                           tmp_0 = _min2;
    
#line 675 
    tmp_1 = tmp_0;
  }
  
#line 675 
  ;
  
#line 675 
  ;
  
#line 675 
  refill_fl(adap,fl,(int)tmp_1,32U);
  
#line 677 
  return;
}


#line 698  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void *alloc_ring(struct device *dev, size_t nelem, size_t elem_size, size_t sw_size, dma_addr_t *phys, void *metadata, size_t stat_size, int node)
{
  void *__retres;
  
#line 702 
  size_t len = nelem * elem_size + stat_size;
  
#line 703 
  void *s = (void *)0;
  
#line 704 
  void *p = dma_alloc_attrs(dev,len,phys,208U,(struct dma_attrs *)0);
  
#line 706 
  if (p == (void *)0) {
    
#line 707 
    __retres = (void *)0;
    
#line 707 
    goto return_label;
  }
  else ;
  
#line 708 
  if (sw_size != 0UL) {
    
#line 709 
    s = kzalloc_node(nelem * sw_size,208U,node);
    
#line 711 
    if (s == (void *)0) {
      
#line 712 
      dma_free_attrs(dev,len,p,*phys,(struct dma_attrs *)0);
      
#line 713 
      __retres = (void *)0;
      
#line 713 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 716 
  if (metadata != (void *)0) 
#line 717 
                             *((void **)metadata) = s; else ;
  
#line 718 
  memset(p,0,len);
  
#line 719 
  __retres = p;
  return_label: 
#line 719 
                return __retres;
}


#line 729  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static unsigned int sgl_len(unsigned int n)
{
  unsigned int __retres;
  
#line 747 
  n -= 1U;
  
#line 748 
  __retres = ((n * 3U) / 2U + (n & 1U)) + 2U;
  
#line 748 
  return __retres;
}


#line 758  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static unsigned int flits_to_desc(unsigned int n)
{
  unsigned int __retres;
  
#line 760 
  if ((long)(n > 64U) != 0L) {
    
#line 762 
    ldv_inline_asm();
    
#line 760 
    ;
  }
  else ;
  
#line 761 
  __retres = (n + 7U) / 8U;
  
#line 761 
  return __retres;
}


#line 771  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static int is_eth_imm(struct sk_buff const *skb)
{
  int __retres;
  int tmp_0;
  unsigned char *tmp;
  
#line 773 
  tmp = skb_end_pointer(skb);
  
#line 773 
  ;
  
#line 773 
  if ((unsigned int)((struct skb_shared_info *)tmp)->gso_size != 0U) 
    
#line 773 
    tmp_0 = 16; else 
#line 773 
                     tmp_0 = 0;
  
#line 773 
  int hdrlen = tmp_0;
  
#line 776 
  hdrlen = (int)((unsigned int)hdrlen + 32U);
  
#line 777 
  if (skb->len <= (unsigned int)(256 - hdrlen)) {
    
#line 778 
    __retres = hdrlen;
    
#line 778 
    goto return_label;
  }
  else ;
  
#line 779 
  __retres = 0;
  return_label: 
#line 779 
                return __retres;
}


#line 789  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static unsigned int calc_tx_flits(struct sk_buff const *skb)
{
  unsigned int __retres;
  unsigned int flits;
  unsigned int tmp_1;
  unsigned char *tmp_0;
  unsigned char *tmp_2;
  
#line 792 
  int hdrlen = is_eth_imm(skb);
  
#line 799 
  if (hdrlen != 0) {
    
#line 800 
    __retres = (unsigned int)(((unsigned long)(skb->len + (unsigned int)hdrlen) + 7UL) / 8UL);
    
#line 800 
    goto return_label;
  }
  else ;
  
#line 810 
  tmp_0 = skb_end_pointer(skb);
  
#line 810 
  ;
  
#line 810 
  tmp_1 = sgl_len((unsigned int)((int)((struct skb_shared_info *)tmp_0)->nr_frags + 1));
  
#line 810 
  flits = tmp_1 + 4U;
  
#line 811 
  tmp_2 = skb_end_pointer(skb);
  
#line 811 
  ;
  
#line 811 
  if ((unsigned int)((struct skb_shared_info *)tmp_2)->gso_size != 0U) 
    
#line 812 
    flits += 6U; else 
#line 816 
                      flits += 4U;
  
#line 818 
  __retres = flits;
  return_label: 
#line 818 
                return __retres;
}


#line 850  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void write_sgl(struct sk_buff const *skb, struct sge_txq *q, struct ulptx_sgl *sgl, u64 *end, unsigned int start, dma_addr_t const *addr)
{
  unsigned int i;
  unsigned int len;
  struct ulptx_sge_pair *to;
  struct ulptx_sge_pair buf[9U];
  unsigned int tmp_0;
  __u32 tmp_8;
  unsigned int tmp_7;
  __u32 tmp_10;
  unsigned int tmp_9;
  __u64 tmp_12;
  
#line 856 
  struct skb_shared_info const *si = skb_end_pointer(skb);
  
#line 857 
  unsigned int nfrags = (unsigned int)si->nr_frags;
  
#line 860 
  tmp_0 = skb_headlen(skb);
  
#line 860 
  len = tmp_0 - start;
  
#line 861 
  if ((long)(len != 0U) != 0L) {
    
#line 862 
    if (0 != 0) 
#line 862 
                sgl->len0 = (((len << 24) | ((len << 8) & 16711680U)) | ((len >> 8) & 65280U)) | (len >> 24); else 
                                                                    
#line 862 
                                                                    sgl->len0 = __fswab32(len);
    
#line 863 
    if (0 != 0) 
#line 863 
                sgl->addr0 = ((((((((*addr + (unsigned long long)start) << 56) | (((*addr + (unsigned long long)start) << 40) & 71776119061217280ULL)) | (((*addr + (unsigned long long)start) << 24) & 280375465082880ULL)) | (((*addr + (unsigned long long)start) << 8) & 1095216660480ULL)) | (((*addr + (unsigned long long)start) >> 8) & 4278190080ULL)) | (((*addr + (unsigned long long)start) >> 24) & 16711680ULL)) | (((*addr + (unsigned long long)start) >> 40) & 65280ULL)) | ((*addr + (unsigned long long)start) >> 56); else 
                                                                    
#line 863 
                                                                    sgl->addr0 = __fswab64(*addr + (unsigned long long)start);
    
#line 864 
    nfrags += 1U;
  }
  else {
    __u32 tmp_4;
    unsigned int tmp_3;
    
#line 866 
    tmp_3 = skb_frag_size(& si->frags[0]);
    
#line 866 
    tmp_4 = __fswab32(tmp_3);
    
#line 866 
    sgl->len0 = tmp_4;
    
#line 867 
    if (0 != 0) 
#line 867 
                sgl->addr0 = (((((((*(addr + 1U) << 56) | ((*(addr + 1U) << 40) & 71776119061217280ULL)) | ((*(addr + 1U) << 24) & 280375465082880ULL)) | ((*(addr + 1U) << 8) & 1095216660480ULL)) | ((*(addr + 1U) >> 8) & 4278190080ULL)) | ((*(addr + 1U) >> 24) & 16711680ULL)) | ((*(addr + 1U) >> 40) & 65280ULL)) | (*(addr + 1U) >> 56); else 
                                                                    
#line 867 
                                                                    sgl->addr0 = __fswab64(*(addr + 1U));
  }
  
#line 870 
  if (0 != 0) 
#line 870 
              sgl->cmd_nsge = ((((nfrags << 24) | ((nfrags << 8) & 16711680U)) | ((nfrags >> 8) & 65280U)) | (nfrags >> 24)) | 130U; else 
                                                                    
#line 870 
                                                                    sgl->cmd_nsge = __fswab32(nfrags | 2181038080U);
  
#line 872 
  nfrags -= 1U;
  
#line 872 
  if ((long)(nfrags == 0U) != 0L) 
#line 873 
                                  goto return_label; else ;
  
#line 879 
  if ((u8 *)q->stat < (u8 *)end) 
#line 879 
                                 to = (struct ulptx_sge_pair *)(& buf); else 
                                                                    
#line 879 
                                                                    to = (struct ulptx_sge_pair *)(& sgl->sge);
  
#line 881 
  i = (unsigned int)((unsigned int)si->nr_frags != nfrags);
  
#line 881 
  goto ldv_58814;
  ldv_58813: 
#line 882 
  ;
  
#line 882 
  tmp_7 = skb_frag_size(& si->frags[i]);
  
#line 882 
  tmp_8 = __fswab32(tmp_7);
  
#line 882 
  to->len[0] = tmp_8;
  
#line 883 
  i += 1U;
  
#line 883 
  ;
  
#line 883 
  tmp_9 = skb_frag_size(& si->frags[i]);
  
#line 883 
  tmp_10 = __fswab32(tmp_9);
  
#line 883 
  to->len[1] = tmp_10;
  
#line 884 
  if (0 != 0) 
#line 884 
              to->addr[0] = (((((((*(addr + i) << 56) | ((*(addr + i) << 40) & 71776119061217280ULL)) | ((*(addr + i) << 24) & 280375465082880ULL)) | ((*(addr + i) << 8) & 1095216660480ULL)) | ((*(addr + i) >> 8) & 4278190080ULL)) | ((*(addr + i) >> 24) & 16711680ULL)) | ((*(addr + i) >> 40) & 65280ULL)) | (*(addr + i) >> 56); else 
                                                                    
#line 884 
                                                                    to->addr[0] = __fswab64(*(addr + i));
  
#line 885 
  i += 1U;
  
#line 885 
  ;
  
#line 885 
  tmp_12 = __fswab64(*(addr + i));
  
#line 885 
  to->addr[1] = tmp_12;
  
#line 881 
  nfrags += 4294967294U;
  
#line 881 
  to += 1;
  ldv_58814: 
#line 882 
  ;
  
#line 881 
  if (nfrags > 1U) 
#line 883 
                   goto ldv_58813; else 
#line 886 
                                        goto ldv_58815;
  ldv_58815: 
#line 887 
  ;
  
#line 887 
  if (nfrags != 0U) {
    __u32 tmp_14;
    unsigned int tmp_13;
    
#line 888 
    tmp_13 = skb_frag_size(& si->frags[i]);
    
#line 888 
    tmp_14 = __fswab32(tmp_13);
    
#line 888 
    to->len[0] = tmp_14;
    
#line 889 
    to->len[1] = 0U;
    
#line 890 
    if (0 != 0) 
#line 890 
                to->addr[0] = (((((((*(addr + (i + 1U)) << 56) | ((*(addr + (i + 1U)) << 40) & 71776119061217280ULL)) | ((*(addr + (i + 1U)) << 24) & 280375465082880ULL)) | ((*(addr + (i + 1U)) << 8) & 1095216660480ULL)) | ((*(addr + (i + 1U)) >> 8) & 4278190080ULL)) | ((*(addr + (i + 1U)) >> 24) & 16711680ULL)) | ((*(addr + (i + 1U)) >> 40) & 65280ULL)) | (*(addr + (i + 1U)) >> 56); else 
                                                                    
#line 890 
                                                                    to->addr[0] = __fswab64(*(addr + (i + 1U)));
  }
  else ;
  
#line 892 
  if ((long)((u8 *)q->stat < (u8 *)end) != 0L) {
    unsigned int part1;
    
#line 893 
    unsigned int part0 = (unsigned int)((long)q->stat - (long)(& sgl->sge));
    
#line 895 
    if ((long)(part0 != 0U) != 0L) 
#line 896 
                                   memcpy((void *)(& sgl->sge),(void const *)(& buf),(unsigned long)part0); else ;
    
#line 897 
    part1 = (unsigned int)((long)end - (long)q->stat);
    
#line 898 
    memcpy((void *)q->desc,(void const *)(& buf) + part0,(unsigned long)part1);
    
#line 899 
    end = (u64 *)q->desc + part1;
  }
  else ;
  
#line 901 
  if (((unsigned long)end & 8UL) != 0UL) 
#line 902 
                                         *end = 0ULL; else ;
  return_label: 
#line 903 
                return;
}


#line 909  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void cxgb_pio_copy(u64 *dst, u64 *src)
{
  
#line 911 
  int count = 8;
  
#line 913 
  goto ldv_58824;
  ldv_58823: 
#line 914 
  ;
  
#line 914 
  writeq((unsigned long)*src,(void volatile *)dst);
  
#line 915 
  src += 1;
  
#line 916 
  dst += 1;
  
#line 917 
  count -= 1;
  ldv_58824: 
#line 918 
  ;
  
#line 913 
  if (count != 0) 
#line 915 
                  goto ldv_58823; else 
#line 918 
                                       goto ldv_58825;
  ldv_58825: 
#line 919 
  ;
  
#line 920 
  return;
}


#line 929  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static void ring_tx_db(struct adapter *adap, struct sge_txq *q, int n)
{
  
#line 931 
  ldv_inline_asm();
  
#line 939 
  if ((long)(q->bar2_addr == (void *)0) != 0L) {
    unsigned long flags;
    
#line 940 
    u32 val = (unsigned int)n;
    
#line 946 
    ldv___ldv_spin_lock_82(& q->db_lock);
    
#line 947 
    if (q->db_disabled == 0) 
#line 948 
                             t4_write_reg(adap,110592U,(q->cntxt_id << 15) | val); else 
                                                                    
#line 951 
                                                                    q->db_pidx_inc = (unsigned short)((int)q->db_pidx_inc + (int)((unsigned short)n));
    
#line 952 
    q->db_pidx = (unsigned short)q->pidx;
    
#line 953 
    ldv_spin_unlock_irqrestore_83(& q->db_lock,flags);
  }
  else {
    
#line 955 
    u32 val_0 = (unsigned int)n;
    {
      
#line 963 
      int __ret_warn_on = (val_0 & 16384U) != 0U;
      
#line 963 
      if ((long)(__ret_warn_on != 0) != 0L) 
#line 963 
                                            warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c",963); else ;
      
#line 963 
      long tmp = (long)(__ret_warn_on != 0);
    }
    
#line 969 
    if (n == 1 && q->bar2_qid == 0U) {
      unsigned int tmp_0;
      
#line 972 
      if (q->pidx != 0U) 
#line 972 
                         tmp_0 = q->pidx + 4294967295U; else 
#line 972 
                                                             tmp_0 = q->size + 4294967295U;
      
#line 970 
      int index = (int)tmp_0;
      
#line 973 
      u64 *wr = (u64 *)(q->desc + index);
      
#line 975 
      cxgb_pio_copy((u64 *)(q->bar2_addr + 64U),wr);
    }
    else 
#line 979 
         writel((q->bar2_qid << 15) | val_0,(void volatile *)(q->bar2_addr + 8U));
    
#line 981 
    ldv_inline_asm();
  }
  
#line 983 
  return;
}


#line 1008  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void inline_tx_skb(struct sk_buff const *skb, struct sge_txq const *q, void *pos)
{
  u64 *p;
  
#line 1012 
  int left = (int)((long)q->stat - (long)pos);
  
#line 1014 
  if ((long)(skb->len <= (unsigned int)left) != 0L) {
    
#line 1015 
    if ((long)(skb->data_len == 0U) != 0L) 
#line 1016 
                                           skb_copy_from_linear_data(skb,pos,skb->len); else 
                                                                    
#line 1018 
                                                                    skb_copy_bits(skb,0,pos,(int)skb->len);
    
#line 1019 
    pos += skb->len;
  }
  else {
    
#line 1021 
    skb_copy_bits(skb,0,pos,left);
    
#line 1022 
    skb_copy_bits(skb,left,(void *)q->desc,(int)(skb->len - (unsigned int)left));
    
#line 1023 
    pos = (void *)q->desc + (skb->len - (unsigned int)left);
  }
  
#line 1027 
  p = (u64 *)(((unsigned long)pos + 7UL) & 18446744073709551608UL);
  
#line 1028 
  if (((unsigned long)p & 8UL) != 0UL) 
#line 1029 
                                       *p = 0ULL; else ;
  
#line 1030 
  return;
}


#line 1036  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static u64 hwcsum(enum chip_type chip, struct sk_buff const *skb)
{
  u64 __retres;
  int csum_type;
  
#line 1039 
  struct iphdr const *iph = ip_hdr(skb);
  
#line 1041 
  if ((unsigned int)*((unsigned char *)iph + 0UL) == 64U) 
    
#line 1042 
    if ((unsigned int)iph->protocol == 6U) 
#line 1043 
                                           csum_type = 8;
    else 
      
#line 1044 
      if ((unsigned int)iph->protocol == 17U) 
#line 1045 
                                              csum_type = 9;
      else {
        nocsum: 
#line 1047 
        ;
        
#line 1051 
        __retres = 9223372036854775808ULL;
        
#line 1051 
        goto return_label;
      }
  else {
    
#line 1057 
    struct ipv6hdr const *ip6h = (struct ipv6hdr const *)iph;
    
#line 1059 
    if ((unsigned int)ip6h->nexthdr == 6U) 
#line 1060 
                                           csum_type = 10;
    else 
      
#line 1061 
      if ((unsigned int)ip6h->nexthdr == 17U) 
#line 1062 
                                              csum_type = 11; else 
#line 1064 
                                                                   goto nocsum;
  }
  
#line 1067 
  if ((long)(csum_type > 7) != 0L) {
    u32 tmp_0;
    int tmp_1;
    
#line 1068 
    tmp_0 = skb_network_header_len(skb);
    
#line 1068 
    u64 hdr_len = (unsigned long long)tmp_0 << 20;
    
#line 1069 
    tmp_1 = skb_network_offset(skb);
    
#line 1069 
    int eth_hdr_len = tmp_1 + -14;
    
#line 1071 
    if ((((unsigned int)chip >> 4) & 15U) <= 5U) 
#line 1072 
                                                 hdr_len = ((unsigned long long)eth_hdr_len << 34) | hdr_len; else 
                                                                    
#line 1074 
                                                                    hdr_len = ((unsigned long long)eth_hdr_len << 32) | hdr_len;
    
#line 1075 
    __retres = ((unsigned long long)csum_type << 40) | hdr_len;
    
#line 1075 
    goto return_label;
  }
  else {
    
#line 1077 
    int start = skb_transport_offset(skb);
    
#line 1080 
    __retres = (((unsigned long long)csum_type << 40) | (unsigned long long)(start << 20)) | ((unsigned long long)((int)skb->__anonCompField_sk_buff_69.__anonCompField___anonunion_220_68.csum_offset + start) << 30);
    
#line 1080 
    goto return_label;
  }
  return_label: 
#line 1067 
                return __retres;
}


#line 1085  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void eth_txq_stop(struct sge_eth_txq *q)
{
  
#line 1087 
  netif_tx_start_queue(q->txq);
  
#line 1088 
  q->q.stops += 1UL;
  
#line 1089 
  return;
}


#line 1091  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static void txq_advance(struct sge_txq *q, unsigned int n)
{
  
#line 1093 
  q->in_use += n;
  
#line 1094 
  q->pidx += n;
  
#line 1095 
  if (q->pidx >= q->size) 
#line 1096 
                          q->pidx -= q->size; else ;
  
#line 1097 
  return;
}


#line 1101  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static int cxgb_fcoe_offload(struct sk_buff *skb, struct adapter *adap, struct port_info const *pi, u64 *cntrl)
{
  int __retres;
  int tmp_0;
  bool tmp;
  
#line 1104 
  struct cxgb_fcoe const *fcoe = & pi->fcoe;
  
#line 1106 
  if (((int)fcoe->flags & 1) == 0) {
    
#line 1107 
    __retres = 0;
    
#line 1107 
    goto return_label;
  }
  else ;
  
#line 1109 
  if ((unsigned int)skb->protocol != 1673U) {
    
#line 1110 
    __retres = 0;
    
#line 1110 
    goto return_label;
  }
  else ;
  
#line 1112 
  skb_reset_mac_header(skb);
  
#line 1113 
  skb->mac_len = (unsigned short)14U;
  
#line 1115 
  skb_set_network_header(skb,(int)skb->mac_len);
  
#line 1116 
  skb_set_transport_header(skb,(int)((unsigned int)skb->mac_len + 14U));
  
#line 1118 
  tmp = cxgb_fcoe_sof_eof_supported(adap,skb);
  
#line 1118 
  if (tmp) 
#line 1118 
           tmp_0 = 0; else 
#line 1118 
                           tmp_0 = 1;
  
#line 1118 
  if (tmp_0) {
    
#line 1119 
    __retres = -524;
    
#line 1119 
    goto return_label;
  }
  else ;
  
#line 1122 
  *cntrl = 13835065760482885632ULL;
  
#line 1127 
  __retres = 0;
  return_label: 
#line 1127 
                return __retres;
}


#line 1138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
netdev_tx_t t4_eth_xmit(struct sk_buff *skb, struct net_device *dev)
{
  netdev_tx_t __retres;
  u32 wr_mid;
  u64 cntrl;
  u64 *end;
  int qidx;
  int credits;
  unsigned int flits;
  unsigned int ndesc;
  struct adapter *adap;
  struct sge_eth_txq *q;
  struct port_info const *pi;
  struct fw_eth_tx_pkt_wr *wr;
  struct cpl_tx_pkt_core *cpl;
  struct skb_shared_info const *ssi;
  dma_addr_t addr[18U];
  int len;
  int max_pkt_len;
  int err;
  unsigned char *tmp;
  u16 tmp_1;
  unsigned int tmp_2;
  int tmp_3;
  unsigned int tmp_6;
  
#line 1151 
  bool immediate = (_Bool)0;
  
#line 1161 
  if ((long)(skb->len <= 13U) != 0L) {
    out_free: 
#line 1162 
    ;
    
#line 1162 
    dev_kfree_skb_any(skb);
    
#line 1163 
    __retres = NETDEV_TX_OK;
    
#line 1163 
    goto return_label;
  }
  else ;
  
#line 1167 
  max_pkt_len = (int)(dev->mtu + 14U);
  
#line 1168 
  if (((int)skb->vlan_tci & 4096) != 0) 
#line 1169 
                                        max_pkt_len += 4; else ;
  
#line 1170 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1170 
  ;
  
#line 1170 
  if ((unsigned int)((struct skb_shared_info *)tmp)->gso_size == 0U) {
    
#line 1170 
    if ((long)(skb->len > (unsigned int)max_pkt_len) != 0L) 
#line 1171 
                                                            goto out_free; else ;
  }
  else ;
  
#line 1173 
  pi = (struct port_info const *)netdev_priv((struct net_device const *)dev);
  
#line 1174 
  adap = pi->adapter;
  
#line 1175 
  tmp_1 = skb_get_queue_mapping((struct sk_buff const *)skb);
  
#line 1175 
  qidx = (int)tmp_1;
  
#line 1176 
  q = & adap->sge.ethtxq[(int)pi->first_qset + qidx];
  
#line 1178 
  reclaim_completed_tx(adap,& q->q,(_Bool)1);
  
#line 1179 
  cntrl = 13835058055282163712ULL;
  
#line 1182 
  err = cxgb_fcoe_offload(skb,adap,pi,& cntrl);
  
#line 1183 
  if ((long)(err == -524) != 0L) 
#line 1184 
                                 goto out_free; else ;
  
#line 1187 
  flits = calc_tx_flits((struct sk_buff const *)skb);
  
#line 1188 
  ndesc = flits_to_desc(flits);
  
#line 1189 
  tmp_2 = txq_avail((struct sge_txq const *)(& q->q));
  
#line 1189 
  credits = (int)(tmp_2 - ndesc);
  
#line 1191 
  if ((long)(credits < 0) != 0L) {
    
#line 1192 
    eth_txq_stop(q);
    
#line 1193 
    dev_err((struct device const *)adap->pdev_dev,"%s: Tx ring %u full while queue awake!\n",(char *)(& dev->name),qidx);
    
#line 1196 
    __retres = NETDEV_TX_BUSY;
    
#line 1196 
    goto return_label;
  }
  else ;
  
#line 1199 
  tmp_3 = is_eth_imm((struct sk_buff const *)skb);
  
#line 1199 
  if (tmp_3 != 0) 
#line 1200 
                  immediate = (_Bool)1; else ;
  
#line 1202 
  if (! immediate) {
    int tmp_4;
    
#line 1203 
    tmp_4 = map_skb(adap->pdev_dev,(struct sk_buff const *)skb,(dma_addr_t *)(& addr));
    
#line 1202 
    if ((long)(tmp_4 < 0) != 0L) {
      
#line 1204 
      q->mapping_err += 1UL;
      
#line 1205 
      goto out_free;
    }
    else ;
  }
  else ;
  
#line 1208 
  wr_mid = (flits + 1U) / 2U;
  
#line 1209 
  if ((long)((unsigned int)credits <= 4U) != 0L) {
    
#line 1210 
    eth_txq_stop(q);
    
#line 1211 
    wr_mid |= 3221225472U;
  }
  else ;
  
#line 1214 
  wr = (struct fw_eth_tx_pkt_wr *)(q->q.desc + q->q.pidx);
  
#line 1215 
  if (0 != 0) 
#line 1215 
              wr->equiq_to_len16 = (((wr_mid << 24) | ((wr_mid << 8) & 16711680U)) | ((wr_mid >> 8) & 65280U)) | (wr_mid >> 24); else 
                                                                    
#line 1215 
                                                                    wr->equiq_to_len16 = __fswab32(wr_mid);
  
#line 1216 
  wr->r3 = 0ULL;
  
#line 1217 
  end = (u64 *)wr + flits;
  
#line 1219 
  if ((int)immediate != 0) 
#line 1219 
                           tmp_6 = skb->len; else 
#line 1219 
                                                  tmp_6 = 0U;
  
#line 1219 
  len = (int)tmp_6;
  
#line 1220 
  ssi = (struct skb_shared_info const *)skb_end_pointer((struct sk_buff const *)skb);
  
#line 1221 
  if ((unsigned int)ssi->gso_size != 0U) {
    u32 tmp_8;
    int tmp_9;
    __u32 tmp_12;
    struct tcphdr *tmp_11;
    int tmp_16;
    int tmp_17;
    
#line 1222 
    struct cpl_tx_pkt_lso *lso = (struct cpl_tx_pkt_lso *)wr;
    
#line 1223 
    bool v6 = (_Bool)(((int)ssi->gso_type & 16) != 0);
    
#line 1224 
    tmp_8 = skb_network_header_len((struct sk_buff const *)skb);
    
#line 1224 
    int l3hdr_len = (int)tmp_8;
    
#line 1225 
    tmp_9 = skb_network_offset((struct sk_buff const *)skb);
    
#line 1225 
    int eth_xtra_len = tmp_9 + -14;
    
#line 1227 
    len = (int)((unsigned int)len + 32U);
    
#line 1228 
    if (0 != 0) 
#line 1228 
                wr->op_immdlen = (((((unsigned int)len << 24) | (((unsigned int)len << 8) & 16711680U)) | (((unsigned int)len >> 8) & 65280U)) | ((unsigned int)len >> 24)) | 8U; else 
                                                                    
#line 1228 
                                                                    wr->op_immdlen = __fswab32((unsigned int)(len | 134217728));
    
#line 1230 
    tmp_11 = tcp_hdr((struct sk_buff const *)skb);
    
#line 1230 
    ;
    
#line 1230 
    tmp_12 = __fswab32(((((unsigned int)((int)v6 << 20) | (unsigned int)(eth_xtra_len / 4 << 16)) | (unsigned int)(l3hdr_len / 4 << 4)) | (unsigned int)tmp_11->doff) | 3988783104U);
    
#line 1230 
    lso->c.lso_ctrl = tmp_12;
    
#line 1236 
    lso->c.ipid_ofst = (unsigned short)0U;
    
#line 1237 
    if (0 != 0) 
#line 1237 
                lso->c.mss = (unsigned short)(((int)ssi->gso_size << 8) | ((int)ssi->gso_size >> 8)); else 
                                                                    
#line 1237 
                                                                    lso->c.mss = __fswab16((unsigned short)((int)ssi->gso_size));
    
#line 1238 
    lso->c.seqno_offset = 0U;
    
#line 1239 
    tmp_16 = is_t4(adap->params.chip);
    
#line 1239 
    if (tmp_16 != 0) 
      
#line 1240 
      if (0 != 0) 
#line 1240 
                  lso->c.len = (((skb->len << 24) | ((skb->len << 8) & 16711680U)) | ((skb->len >> 8) & 65280U)) | (skb->len >> 24); else 
                                                                    
#line 1240 
                                                                    lso->c.len = __fswab32(skb->len);
    else 
      
#line 1242 
      if (0 != 0) 
#line 1242 
                  lso->c.len = (((skb->len << 24) | ((skb->len << 8) & 16711680U)) | ((skb->len >> 8) & 65280U)) | (skb->len >> 24); else 
                                                                    
#line 1242 
                                                                    lso->c.len = __fswab32(skb->len);
    
#line 1243 
    cpl = (struct cpl_tx_pkt_core *)(lso + 1U);
    
#line 1245 
    if ((((unsigned int)adap->params.chip >> 4) & 15U) <= 5U) 
#line 1246 
                                                              cntrl = (unsigned long long)eth_xtra_len << 34; else 
                                                                    
#line 1248 
                                                                    cntrl = (unsigned long long)eth_xtra_len << 32;
    
#line 1250 
    if ((int)v6 != 0) 
#line 1250 
                      tmp_17 = 10; else 
#line 1250 
                                        tmp_17 = 8;
    
#line 1250 
    cntrl = (((unsigned long long)tmp_17 << 40) | ((unsigned long long)l3hdr_len << 20)) | cntrl;
    
#line 1253 
    q->tso += 1UL;
    
#line 1254 
    q->tx_cso += (unsigned long)ssi->gso_segs;
  }
  else {
    
#line 1256 
    len = (int)((unsigned int)len + 16U);
    
#line 1257 
    if (0 != 0) 
#line 1257 
                wr->op_immdlen = (((((unsigned int)len << 24) | (((unsigned int)len << 8) & 16711680U)) | (((unsigned int)len >> 8) & 65280U)) | ((unsigned int)len >> 24)) | 8U; else 
                                                                    
#line 1257 
                                                                    wr->op_immdlen = __fswab32((unsigned int)(len | 134217728));
    
#line 1259 
    cpl = (struct cpl_tx_pkt_core *)(wr + 1U);
    
#line 1260 
    if ((unsigned int)*((unsigned char *)skb + 145UL) == 6U) {
      u64 tmp_19;
      
#line 1261 
      tmp_19 = hwcsum(adap->params.chip,(struct sk_buff const *)skb);
      
#line 1261 
      cntrl = tmp_19 | 4611686018427387904ULL;
      
#line 1263 
      q->tx_cso += 1UL;
    }
    else ;
  }
  
#line 1267 
  if (((int)skb->vlan_tci & 4096) != 0) {
    
#line 1268 
    q->vlan_ins += 1UL;
    
#line 1269 
    cntrl = (((unsigned long long)((int)skb->vlan_tci & -4097) << 44) | cntrl) | 1152921504606846976ULL;
    
#line 1271 
    if ((unsigned int)skb->protocol == 1673U) 
#line 1272 
                                              cntrl = (((unsigned long long)(skb->priority << 13) << 44) & 1152903912420802560ULL) | cntrl; else ;
  }
  else ;
  
#line 1277 
  if (0 != 0) 
#line 1277 
              cpl->ctrl0 = ((((((unsigned int)((int)pi->tx_chan << 16) | (adap->pf << 8)) << 24) | ((((unsigned int)((int)pi->tx_chan << 16) | (adap->pf << 8)) << 8) & 16711680U)) | ((((unsigned int)((int)pi->tx_chan << 16) | (adap->pf << 8)) >> 8) & 65280U)) | (((unsigned int)((int)pi->tx_chan << 16) | (adap->pf << 8)) >> 24)) | 238U; else 
                                                                    
#line 1277 
                                                                    cpl->ctrl0 = __fswab32(((unsigned int)((int)pi->tx_chan << 16) | (adap->pf << 8)) | 3992977408U);
  
#line 1280 
  cpl->pack = (unsigned short)0U;
  
#line 1281 
  if (0 != 0) 
#line 1281 
              cpl->len = (unsigned short)(((int)((unsigned short)skb->len) << 8) | ((int)((unsigned short)skb->len) >> 8)); else 
                                                                    
#line 1281 
                                                                    cpl->len = __fswab16((unsigned short)((int)((unsigned short)skb->len)));
  
#line 1282 
  if (0 != 0) 
#line 1282 
              cpl->ctrl1 = (((((((cntrl << 56) | ((cntrl << 40) & 71776119061217280ULL)) | ((cntrl << 24) & 280375465082880ULL)) | ((cntrl << 8) & 1095216660480ULL)) | ((cntrl >> 8) & 4278190080ULL)) | ((cntrl >> 24) & 16711680ULL)) | ((cntrl >> 40) & 65280ULL)) | (cntrl >> 56); else 
                                                                    
#line 1282 
                                                                    cpl->ctrl1 = __fswab64(cntrl);
  
#line 1284 
  if ((int)immediate != 0) {
    
#line 1285 
    inline_tx_skb((struct sk_buff const *)skb,(struct sge_txq const *)(& q->q),(void *)(cpl + 1U));
    
#line 1286 
    dev_consume_skb_any(skb);
  }
  else {
    int last_desc;
    
#line 1290 
    write_sgl((struct sk_buff const *)skb,& q->q,(struct ulptx_sgl *)(cpl + 1U),end,0U,(dma_addr_t const *)(& addr));
    
#line 1292 
    skb_orphan(skb);
    
#line 1294 
    last_desc = (int)((q->q.pidx + ndesc) + 4294967295U);
    
#line 1295 
    if (q->q.size <= (unsigned int)last_desc) 
#line 1296 
                                              last_desc = (int)((unsigned int)last_desc - q->q.size); else ;
    
#line 1297 
    (q->q.sdesc + last_desc)->skb = skb;
    
#line 1298 
    (q->q.sdesc + last_desc)->sgl = (struct ulptx_sgl *)(cpl + 1U);
  }
  
#line 1301 
  txq_advance(& q->q,ndesc);
  
#line 1303 
  ring_tx_db(adap,& q->q,(int)ndesc);
  
#line 1304 
  __retres = NETDEV_TX_OK;
  return_label: 
#line 1304 
                return __retres;
}


#line 1315  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static void reclaim_completed_tx_imm(struct sge_txq *q)
{
  int tmp_0;
  
#line 1317 
  if (0 != 0) 
#line 1317 
              tmp_0 = (int)((unsigned short)(((int)(q->stat)->cidx << 8) | ((int)(q->stat)->cidx >> 8)));
  else {
    __u16 tmp;
    
#line 1317 
    tmp = __fswab16((unsigned short)((int)(q->stat)->cidx));
    
#line 1317 
    tmp_0 = (int)tmp;
  }
  
#line 1317 
  int hw_cidx = tmp_0;
  
#line 1318 
  int reclaim = (int)((unsigned int)hw_cidx - q->cidx);
  
#line 1320 
  if (reclaim < 0) 
#line 1321 
                   reclaim = (int)(q->size + (unsigned int)reclaim); else ;
  
#line 1323 
  q->in_use -= (unsigned int)reclaim;
  
#line 1324 
  q->cidx = (unsigned int)hw_cidx;
  
#line 1325 
  return;
}


#line 1333  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static int is_imm(struct sk_buff const *skb)
{
  int __retres;
  
#line 1335 
  __retres = skb->len <= 512U;
  
#line 1335 
  return __retres;
}


#line 1348  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void ctrlq_check_stop(struct sge_ctrl_txq *q, struct fw_wr_hdr *wr)
{
  unsigned int tmp;
  
#line 1350 
  reclaim_completed_tx_imm(& q->q);
  
#line 1351 
  tmp = txq_avail((struct sge_txq const *)(& q->q));
  
#line 1351 
  if ((long)(tmp <= 7U) != 0L) {
    
#line 1352 
    wr->lo |= 192U;
    
#line 1353 
    q->q.stops += 1UL;
    
#line 1354 
    q->full = (unsigned char)1U;
  }
  else ;
  
#line 1356 
  return;
}


#line 1366  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static int ctrl_xmit(struct sge_ctrl_txq *q, struct sk_buff *skb)
{
  int __retres;
  unsigned int ndesc;
  struct fw_wr_hdr *wr;
  int tmp_0;
  unsigned int tmp_0_0;
  
#line 1371 
  tmp_0 = is_imm((struct sk_buff const *)skb);
  
#line 1371 
  if ((long)(tmp_0 == 0) != 0L) {
    {
      
#line 1372 
      int __ret_warn_on = 1;
      
#line 1372 
      if ((long)(__ret_warn_on != 0) != 0L) 
#line 1372 
                                            warn_slowpath_null("/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c",1372); else ;
      
#line 1372 
      long tmp = (long)(__ret_warn_on != 0);
    }
    
#line 1373 
    consume_skb(skb);
    
#line 1374 
    __retres = 1;
    
#line 1374 
    goto return_label;
  }
  else ;
  
#line 1377 
  ndesc = (unsigned int)(((unsigned long)skb->len + 63UL) / 64UL);
  
#line 1378 
  ldv_spin_lock_84_0(& q->sendq.lock);
  
#line 1380 
  if ((long)((unsigned int)q->full != 0U) != 0L) {
    
#line 1381 
    skb->priority = ndesc;
    
#line 1382 
    __skb_queue_tail(& q->sendq,skb);
    
#line 1383 
    ldv_spin_unlock_85_0(& q->sendq.lock);
    
#line 1384 
    __retres = 2;
    
#line 1384 
    goto return_label;
  }
  else ;
  
#line 1387 
  wr = (struct fw_wr_hdr *)(q->q.desc + q->q.pidx);
  
#line 1388 
  inline_tx_skb((struct sk_buff const *)skb,(struct sge_txq const *)(& q->q),(void *)wr);
  
#line 1390 
  txq_advance(& q->q,ndesc);
  
#line 1391 
  tmp_0_0 = txq_avail((struct sge_txq const *)(& q->q));
  
#line 1391 
  if ((long)(tmp_0_0 <= 7U) != 0L) 
#line 1392 
                                   ctrlq_check_stop(q,wr); else ;
  
#line 1394 
  ring_tx_db(q->adap,& q->q,(int)ndesc);
  
#line 1395 
  ldv_spin_unlock_86(& q->sendq.lock);
  
#line 1397 
  kfree_skb(skb);
  
#line 1398 
  __retres = 0;
  return_label: 
#line 1398 
                return __retres;
}


#line 1407  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void restart_ctrlq(unsigned long data)
{
  struct sk_buff *skb;
  unsigned int tmp;
  
#line 1410 
  unsigned int written = 0U;
  
#line 1411 
  struct sge_ctrl_txq *q = (struct sge_ctrl_txq *)data;
  
#line 1413 
  ldv_spin_lock_87(& q->sendq.lock);
  
#line 1414 
  reclaim_completed_tx_imm(& q->q);
  
#line 1415 
  tmp = txq_avail((struct sge_txq const *)(& q->q));
  
#line 1415 
  if ((long)(tmp <= 7U) != 0L) {
    
#line 1417 
    ldv_inline_asm();
    
#line 1415 
    ;
  }
  else ;
  
#line 1417 
  goto ldv_58929;
  ldv_58928: 
#line 1418 
  ;
  {
    struct fw_wr_hdr *wr;
    unsigned int tmp_0;
    
#line 1419 
    unsigned int ndesc = skb->priority;
    
#line 1425 
    ldv_spin_unlock_88(& q->sendq.lock);
    
#line 1427 
    wr = (struct fw_wr_hdr *)(q->q.desc + q->q.pidx);
    
#line 1428 
    inline_tx_skb((struct sk_buff const *)skb,(struct sge_txq const *)(& q->q),(void *)wr);
    
#line 1429 
    kfree_skb(skb);
    
#line 1431 
    written += ndesc;
    
#line 1432 
    txq_advance(& q->q,ndesc);
    
#line 1433 
    tmp_0 = txq_avail((struct sge_txq const *)(& q->q));
    
#line 1433 
    if ((long)(tmp_0 <= 7U) != 0L) {
      
#line 1434 
      unsigned long old = q->q.stops;
      
#line 1436 
      ctrlq_check_stop(q,wr);
      
#line 1437 
      if (q->q.stops != old) {
        
#line 1438 
        ldv_spin_lock_89(& q->sendq.lock);
        
#line 1439 
        goto ringdb;
      }
      else ;
    }
    else ;
    
#line 1442 
    if (written > 16U) {
      
#line 1443 
      ring_tx_db(q->adap,& q->q,(int)written);
      
#line 1444 
      written = 0U;
    }
    else ;
    
#line 1446 
    ldv_spin_lock_90_0(& q->sendq.lock);
  }
  ldv_58929: 
#line 1448 
  ;
  
#line 1417 
  skb = __skb_dequeue(& q->sendq);
  
#line 1417 
  if (skb != (struct sk_buff *)0) 
#line 1419 
                                  goto ldv_58928; else 
#line 1422 
                                                       goto ldv_58930;
  ldv_58930: 
#line 1423 
  ;
  
#line 1448 
  q->full = (unsigned char)0U;
  ringdb: 
#line 1449 
  ;
  
#line 1449 
  if (written != 0U) 
#line 1450 
                     ring_tx_db(q->adap,& q->q,(int)written); else ;
  
#line 1451 
  ldv_spin_unlock_91_0(& q->sendq.lock);
  
#line 1452 
  return;
}


#line 1461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
int t4_mgmt_tx(struct adapter *adap, struct sk_buff *skb)
{
  int ret;
  
#line 1465 
  local_bh_disable();
  
#line 1466 
  ret = ctrl_xmit(& adap->sge.ctrlq[0],skb);
  
#line 1467 
  local_bh_enable();
  
#line 1468 
  return ret;
}


#line 1478  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static int is_ofld_imm(struct sk_buff const *skb)
{
  int __retres;
  
#line 1480 
  __retres = skb->len <= 256U;
  
#line 1480 
  return __retres;
}


#line 1491  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static unsigned int calc_tx_flits_ofld(struct sk_buff const *skb)
{
  unsigned int __retres;
  unsigned int flits;
  unsigned int cnt;
  int tmp;
  int tmp_0;
  unsigned char *tmp_1;
  unsigned char *tmp_2;
  unsigned char *tmp_3;
  unsigned int tmp_4;
  
#line 1495 
  tmp = is_ofld_imm(skb);
  
#line 1495 
  if (tmp != 0) {
    
#line 1496 
    __retres = (skb->len + 7U) / 8U;
    
#line 1496 
    goto return_label;
  }
  else ;
  
#line 1498 
  tmp_0 = skb_transport_offset(skb);
  
#line 1498 
  flits = (unsigned int)tmp_0 / 8U;
  
#line 1499 
  tmp_1 = skb_end_pointer(skb);
  
#line 1499 
  cnt = (unsigned int)((struct skb_shared_info *)tmp_1)->nr_frags;
  
#line 1500 
  tmp_2 = skb_tail_pointer(skb);
  
#line 1500 
  tmp_3 = skb_transport_header(skb);
  
#line 1500 
  if (tmp_2 != tmp_3) 
#line 1501 
                      cnt += 1U; else ;
  
#line 1502 
  tmp_4 = sgl_len(cnt);
  
#line 1502 
  ;
  
#line 1502 
  __retres = tmp_4 + flits;
  return_label: 
#line 1502 
                return __retres;
}


#line 1514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void txq_stop_maperr(struct sge_ofld_txq *q)
{
  
#line 1516 
  q->mapping_err += 1UL;
  
#line 1517 
  q->q.stops += 1UL;
  
#line 1518 
  clear_bit((long)(q->q.cntxt_id - (q->adap)->sge.egr_start),(unsigned long volatile *)(q->adap)->sge.txq_maperr);
  
#line 1520 
  return;
}


#line 1530  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void ofldtxq_stop(struct sge_ofld_txq *q, struct sk_buff *skb)
{
  
#line 1532 
  struct fw_wr_hdr *wr = (struct fw_wr_hdr *)skb->data;
  
#line 1534 
  wr->lo |= 192U;
  
#line 1535 
  q->q.stops += 1UL;
  
#line 1536 
  q->full = (unsigned char)1U;
  
#line 1537 
  return;
}


#line 1546  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void service_ofldq(struct sge_ofld_txq *q)
{
  u64 *pos;
  int credits;
  struct sk_buff *skb;
  unsigned int flits;
  unsigned int ndesc;
  unsigned int tmp;
  int tmp_2;
  int tmp_3;
  
#line 1551 
  unsigned int written = 0U;
  
#line 1554 
  goto ldv_58965;
  ldv_58964: 
#line 1555 
  ;
  
#line 1559 
  ldv_spin_unlock_92(& q->sendq.lock);
  
#line 1561 
  reclaim_completed_tx(q->adap,& q->q,(_Bool)0);
  
#line 1563 
  flits = skb->priority;
  
#line 1564 
  ndesc = flits_to_desc(flits);
  
#line 1565 
  tmp = txq_avail((struct sge_txq const *)(& q->q));
  
#line 1565 
  credits = (int)(tmp - ndesc);
  
#line 1566 
  if ((long)(credits < 0) != 0L) {
    
#line 1568 
    ldv_inline_asm();
    
#line 1566 
    ;
  }
  else ;
  
#line 1567 
  if ((long)((unsigned int)credits <= 7U) != 0L) 
#line 1568 
                                                 ofldtxq_stop(q,skb); else ;
  
#line 1570 
  pos = (u64 *)(q->q.desc + q->q.pidx);
  
#line 1571 
  tmp_2 = is_ofld_imm((struct sk_buff const *)skb);
  
#line 1571 
  if (tmp_2 != 0) 
#line 1572 
                  inline_tx_skb((struct sk_buff const *)skb,(struct sge_txq const *)(& q->q),(void *)pos);
  else {
    int tmp_1;
    
#line 1573 
    tmp_1 = map_skb((q->adap)->pdev_dev,(struct sk_buff const *)skb,(dma_addr_t *)skb->head);
    
#line 1573 
    if (tmp_1 != 0) {
      
#line 1575 
      txq_stop_maperr(q);
      
#line 1576 
      ldv_spin_lock_93(& q->sendq.lock);
      
#line 1577 
      goto ldv_58961;
    }
    else {
      int last_desc;
      
#line 1579 
      int hdr_len = skb_transport_offset((struct sk_buff const *)skb);
      
#line 1581 
      memcpy((void *)pos,(void const *)skb->data,(unsigned long)hdr_len);
      
#line 1582 
      write_sgl((struct sk_buff const *)skb,& q->q,(struct ulptx_sgl *)pos + hdr_len,pos + flits,(unsigned int)hdr_len,(dma_addr_t const *)skb->head);
      
#line 1586 
      skb->dev = (q->adap)->port[0];
      
#line 1587 
      skb->destructor = & deferred_unmap_destructor;
      
#line 1589 
      last_desc = (int)((q->q.pidx + ndesc) + 4294967295U);
      
#line 1590 
      if (q->q.size <= (unsigned int)last_desc) 
#line 1591 
                                                last_desc = (int)((unsigned int)last_desc - q->q.size); else ;
      
#line 1592 
      (q->q.sdesc + last_desc)->skb = skb;
    }
  }
  
#line 1595 
  txq_advance(& q->q,ndesc);
  
#line 1596 
  written += ndesc;
  
#line 1597 
  if ((long)(written > 32U) != 0L) {
    
#line 1598 
    ring_tx_db(q->adap,& q->q,(int)written);
    
#line 1599 
    written = 0U;
  }
  else ;
  
#line 1602 
  ldv_spin_lock_94(& q->sendq.lock);
  
#line 1603 
  __skb_unlink(skb,& q->sendq);
  
#line 1604 
  tmp_3 = is_ofld_imm((struct sk_buff const *)skb);
  
#line 1604 
  if (tmp_3 != 0) 
#line 1605 
                  kfree_skb(skb); else ;
  ldv_58965: 
#line 1606 
  ;
  
#line 1554 
  skb = skb_peek((struct sk_buff_head const *)(& q->sendq));
  
#line 1554 
  if (skb != (struct sk_buff *)0) {
    
#line 1554 
    if ((unsigned int)q->full == 0U) 
#line 1556 
                                     goto ldv_58964; else 
#line 1559 
                                                          goto ldv_58961;
  }
  else 
#line 1559 
       goto ldv_58961;
  ldv_58961: 
#line 1560 
  ;
  
#line 1607 
  if ((long)(written != 0U) != 0L) 
#line 1608 
                                   ring_tx_db(q->adap,& q->q,(int)written); else ;
  
#line 1609 
  return;
}


#line 1618  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static int ofld_xmit(struct sge_ofld_txq *q, struct sk_buff *skb)
{
  int __retres;
  
#line 1620 
  skb->priority = calc_tx_flits_ofld((struct sk_buff const *)skb);
  
#line 1621 
  ldv_spin_lock_95(& q->sendq.lock);
  
#line 1622 
  __skb_queue_tail(& q->sendq,skb);
  
#line 1623 
  if (q->sendq.qlen == 1U) 
#line 1624 
                           service_ofldq(q); else ;
  
#line 1625 
  ldv_spin_unlock_96(& q->sendq.lock);
  
#line 1626 
  __retres = 0;
  
#line 1626 
  return __retres;
}


#line 1635  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void restart_ofldq(unsigned long data)
{
  
#line 1637 
  struct sge_ofld_txq *q = (struct sge_ofld_txq *)data;
  
#line 1639 
  ldv_spin_lock_97(& q->sendq.lock);
  
#line 1640 
  q->full = (unsigned char)0U;
  
#line 1641 
  service_ofldq(q);
  
#line 1642 
  ldv_spin_unlock_98(& q->sendq.lock);
  
#line 1643 
  return;
}


#line 1652  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static unsigned int skb_txq(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1654 
  __retres = (unsigned int)((int)skb->queue_mapping >> 1);
  
#line 1654 
  return __retres;
}


#line 1664  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static unsigned int is_ctrl_pkt(struct sk_buff const *skb)
{
  unsigned int __retres;
  
#line 1666 
  __retres = (unsigned int)skb->queue_mapping & 1U;
  
#line 1666 
  return __retres;
}


#line 1669  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static int ofld_send(struct adapter *adap, struct sk_buff *skb)
{
  int __retres;
  unsigned int tmp_1;
  int tmp_2;
  
#line 1671 
  unsigned int idx = skb_txq((struct sk_buff const *)skb);
  
#line 1673 
  tmp_1 = is_ctrl_pkt((struct sk_buff const *)skb);
  
#line 1673 
  if ((long)(tmp_1 != 0U) != 0L) {
    int tmp_0;
    
#line 1675 
    if (adap->tids.nsftids != 0U) 
#line 1676 
                                  idx = 0U; else ;
    
#line 1677 
    tmp_0 = ctrl_xmit(& adap->sge.ctrlq[idx],skb);
    
#line 1677 
    __retres = tmp_0;
    
#line 1677 
    goto return_label;
  }
  else ;
  
#line 1679 
  tmp_2 = ofld_xmit(& adap->sge.ofldtxq[idx],skb);
  
#line 1679 
  __retres = tmp_2;
  return_label: 
#line 1679 
                return __retres;
}


#line 1691  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
int t4_ofld_send(struct adapter *adap, struct sk_buff *skb)
{
  int ret;
  
#line 1695 
  local_bh_disable();
  
#line 1696 
  ret = ofld_send(adap,skb);
  
#line 1697 
  local_bh_enable();
  
#line 1698 
  return ret;
}


#line 1709  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
int cxgb4_ofld_send(struct net_device *dev, struct sk_buff *skb)
{
  int tmp_0;
  struct adapter *tmp;
  
#line 1711 
  ;
  
#line 1711 
  tmp = netdev2adap((struct net_device const *)dev);
  
#line 1711 
  tmp_0 = t4_ofld_send(tmp,skb);
  
#line 1711 
  return tmp_0;
}


#line 1713  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static char const __kstrtab_cxgb4_ofld_send[16U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'o', (char)'f', (char)'l', (char)'d', (char)'_', (char)'s', (char)'e', (char)'n', (char)'d', (char)'\000'};

#line 1713 
struct kernel_symbol const __ksymtab_cxgb4_ofld_send;


#line 1713  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
struct kernel_symbol const __ksymtab_cxgb4_ofld_send = {.value = (unsigned long)(& cxgb4_ofld_send), .name = (char const *)(& __kstrtab_cxgb4_ofld_send)};

#line 1715  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static void copy_frags(struct sk_buff *skb, struct pkt_gl const *gl, unsigned int offset)
{
  int i;
  unsigned char *tmp;
  
#line 1721 
  __skb_fill_page_desc(skb,0,gl->frags[0].page,(int)(gl->frags[0].offset + offset),(int)(gl->frags[0].size - offset));
  
#line 1724 
  tmp = skb_end_pointer((struct sk_buff const *)skb);
  
#line 1724 
  ((struct skb_shared_info *)tmp)->nr_frags = (unsigned char)gl->nfrags;
  
#line 1725 
  i = 1;
  
#line 1725 
  goto ldv_59009;
  ldv_59008: 
#line 1726 
  ;
  
#line 1726 
  __skb_fill_page_desc(skb,i,gl->frags[i].page,(int)gl->frags[i].offset,(int)gl->frags[i].size);
  
#line 1725 
  i += 1;
  ldv_59009: 
#line 1726 
  ;
  
#line 1725 
  if (gl->nfrags > (unsigned int)i) 
#line 1727 
                                    goto ldv_59008; else 
#line 1730 
                                                         goto ldv_59010;
  ldv_59010: 
#line 1731 
  ;
  
#line 1731 
  get_page(gl->frags[gl->nfrags + 4294967295U].page);
  
#line 1732 
  return;
}


#line 1743  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
struct sk_buff *cxgb4_pktgl_to_skb(struct pkt_gl const *gl, unsigned int skb_len, unsigned int pull_len)
{
  struct sk_buff *skb;
  
#line 1753 
  if (gl->tot_len <= 256U) {
    
#line 1754 
    skb = dev_alloc_skb(gl->tot_len);
    
#line 1755 
    if ((long)(skb == (struct sk_buff *)0) != 0L) 
#line 1756 
                                                  goto out; else ;
    
#line 1757 
    __skb_put(skb,gl->tot_len);
    
#line 1758 
    skb_copy_to_linear_data(skb,(void const *)gl->va,gl->tot_len);
  }
  else {
    
#line 1760 
    skb = dev_alloc_skb(skb_len);
    
#line 1761 
    if ((long)(skb == (struct sk_buff *)0) != 0L) 
#line 1762 
                                                  goto out; else ;
    
#line 1763 
    __skb_put(skb,pull_len);
    
#line 1764 
    skb_copy_to_linear_data(skb,(void const *)gl->va,pull_len);
    
#line 1766 
    copy_frags(skb,gl,pull_len);
    
#line 1767 
    skb->len = gl->tot_len;
    
#line 1768 
    skb->data_len = skb->len - pull_len;
    
#line 1769 
    skb->truesize += skb->data_len;
  }
  out: 
#line 1771 
  ;
  
#line 1771 
  return skb;
}


#line 1773  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static char const __kstrtab_cxgb4_pktgl_to_skb[19U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'p', (char)'k', (char)'t', (char)'g', (char)'l', (char)'_', (char)'t', (char)'o', (char)'_', (char)'s', (char)'k', (char)'b', (char)'\000'};

#line 1773 
struct kernel_symbol const __ksymtab_cxgb4_pktgl_to_skb;


#line 1773  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
struct kernel_symbol const __ksymtab_cxgb4_pktgl_to_skb = {.value = (unsigned long)(& cxgb4_pktgl_to_skb), .name = (char const *)(& __kstrtab_cxgb4_pktgl_to_skb)};

#line 1782  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void t4_pktgl_free(struct pkt_gl const *gl)
{
  int n;
  struct page_frag const *p;
  int tmp;
  
#line 1787 
  p = (struct page_frag const *)(& gl->frags);
  
#line 1787 
  n = (int)(gl->nfrags + 4294967295U);
  
#line 1787 
  goto ldv_59033;
  ldv_59032: 
#line 1788 
  ;
  
#line 1788 
  put_page(p->page);
  
#line 1787 
  p += 1;
  ldv_59033: 
#line 1788 
  ;
  
#line 1787 
  tmp = n;
  
#line 1787 
  n -= 1;
  
#line 1787 
  ;
  
#line 1787 
  if (tmp != 0) 
#line 1789 
                goto ldv_59032; else 
#line 1792 
                                     goto ldv_59034;
  ldv_59034: 
#line 1793 
  ;
  
#line 1794 
  return;
}


#line 1795  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static int handle_trace_pkt(struct adapter *adap, struct pkt_gl const *gl)
{
  int __retres;
  struct sk_buff *skb;
  int tmp;
  
#line 1800 
  skb = cxgb4_pktgl_to_skb(gl,128U,128U);
  
#line 1801 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    
#line 1802 
    t4_pktgl_free(gl);
    
#line 1803 
    __retres = 0;
    
#line 1803 
    goto return_label;
  }
  else ;
  
#line 1806 
  tmp = is_t4(adap->params.chip);
  
#line 1806 
  if (tmp != 0) 
#line 1807 
                __skb_pull(skb,16U); else 
#line 1809 
                                          __skb_pull(skb,24U);
  
#line 1811 
  skb_reset_mac_header(skb);
  
#line 1812 
  skb->protocol = (unsigned short)65535U;
  
#line 1813 
  skb->dev = adap->port[0];
  
#line 1814 
  netif_receive_skb(skb);
  
#line 1815 
  __retres = 0;
  return_label: 
#line 1815 
                return __retres;
}


#line 1818  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void do_gro(struct sge_eth_rxq *rxq, struct pkt_gl const *gl, struct cpl_rx_pkt const *pkt)
{
  int ret;
  struct sk_buff *skb;
  gro_result_t tmp_1;
  
#line 1821 
  struct adapter *adapter = rxq->rspq.adap;
  
#line 1822 
  struct sge *s = & adapter->sge;
  
#line 1826 
  skb = napi_get_frags(& rxq->rspq.napi);
  
#line 1827 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    
#line 1828 
    t4_pktgl_free(gl);
    
#line 1829 
    rxq->stats.rx_drops += 1UL;
    
#line 1830 
    goto return_label;
  }
  else ;
  
#line 1833 
  copy_frags(skb,gl,s->pktshift);
  
#line 1834 
  skb->len = gl->tot_len - s->pktshift;
  
#line 1835 
  skb->data_len = skb->len;
  
#line 1836 
  skb->truesize += skb->data_len;
  
#line 1837 
  skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
  
#line 1838 
  skb_record_rx_queue(skb,(unsigned short)((int)rxq->rspq.idx));
  
#line 1839 
  skb_mark_napi_id(skb,& rxq->rspq.napi);
  
#line 1840 
  if (((rxq->rspq.netdev)->features & 8589934592ULL) != 0ULL) 
#line 1841 
                                                              skb_set_hash(skb,pkt->rsshdr.hash_val,(enum pkt_hash_types)PKT_HASH_TYPE_L3); else ;
  
#line 1844 
  if ((long)((unsigned int)*((unsigned char *)pkt + 9UL) != 0U) != 0L) {
    int tmp_0;
    
#line 1845 
    if (0 != 0) 
#line 1845 
                tmp_0 = (int)((unsigned short)(((int)pkt->vlan << 8) | ((int)pkt->vlan >> 8)));
    else {
      __u16 tmp;
      
#line 1845 
      tmp = __fswab16((unsigned short)((int)pkt->vlan));
      
#line 1845 
      tmp_0 = (int)tmp;
    }
    
#line 1845 
    ;
    
#line 1845 
    __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)tmp_0);
    
#line 1846 
    rxq->stats.vlan_ex += 1UL;
  }
  else ;
  
#line 1848 
  tmp_1 = napi_gro_frags(& rxq->rspq.napi);
  
#line 1848 
  ret = (int)tmp_1;
  
#line 1849 
  if (ret == 2) 
#line 1850 
                rxq->stats.lro_pkts += 1UL;
  else 
    
#line 1851 
    if ((unsigned int)ret <= 1U) 
#line 1852 
                                 rxq->stats.lro_merged += 1UL; else ;
  
#line 1853 
  rxq->stats.pkts += 1UL;
  
#line 1854 
  rxq->stats.rx_cso += 1UL;
  return_label: 
#line 1855 
                return;
}


#line 1865  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
int t4_ethrx_handler(struct sge_rspq *q, __be64 const *rsp, struct pkt_gl const *si)
{
  int __retres;
  bool csum_ok;
  struct sk_buff *skb;
  struct cpl_rx_pkt const *pkt;
  struct sge_eth_rxq *tmp;
  int tmp_1;
  int tmp_0;
  struct port_info *pi;
  {
    
#line 1871 
    struct sge_rspq const *__mptr = (struct sge_rspq const *)q;
    
#line 1871 
    tmp = (struct sge_eth_rxq *)__mptr;
  }
  
#line 1871 
  struct sge_eth_rxq *rxq = tmp;
  
#line 1872 
  struct sge *s = & (q->adap)->sge;
  
#line 1873 
  tmp_0 = is_t4((q->adap)->params.chip);
  
#line 1873 
  if (tmp_0 != 0) 
#line 1873 
                  tmp_1 = 176; else 
#line 1873 
                                    tmp_1 = 72;
  
#line 1873 
  int cpl_trace_pkt = tmp_1;
  
#line 1879 
  if ((long)((int)*((u8 *)rsp) == cpl_trace_pkt) != 0L) {
    int tmp_2;
    
#line 1880 
    tmp_2 = handle_trace_pkt(q->adap,si);
    
#line 1880 
    __retres = tmp_2;
    
#line 1880 
    goto return_label;
  }
  else ;
  
#line 1882 
  pkt = (struct cpl_rx_pkt const *)rsp;
  
#line 1883 
  csum_ok = (_Bool)((((unsigned int)*((unsigned char *)pkt + 9UL) != 0U && (unsigned int)pkt->err_vec == 0U) && ((q->netdev)->features & 17179869184ULL) != 0ULL) != 0);
  
#line 1885 
  if ((pkt->l2info & 32768U) != 0U) {
    int tmp_4;
    bool tmp_3;
    
#line 1886 
    tmp_3 = cxgb_poll_busy_polling(q);
    
#line 1886 
    if (tmp_3) 
#line 1886 
               tmp_4 = 0; else 
#line 1886 
                               tmp_4 = 1;
    
#line 1886 
    if (tmp_4) {
      
#line 1886 
      if (((q->netdev)->features & 16384ULL) != 0ULL) {
        
#line 1887 
        if ((int)csum_ok != 0) {
          
#line 1887 
          if ((unsigned int)*((unsigned char *)pkt + 9UL) == 0U) {
            
#line 1888 
            do_gro(rxq,si,pkt);
            
#line 1889 
            __retres = 0;
            
#line 1889 
            goto return_label;
          }
          else ;
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 1892 
  skb = cxgb4_pktgl_to_skb(si,512U,128U);
  
#line 1893 
  if ((long)(skb == (struct sk_buff *)0) != 0L) {
    
#line 1894 
    t4_pktgl_free(si);
    
#line 1895 
    rxq->stats.rx_drops += 1UL;
    
#line 1896 
    __retres = 0;
    
#line 1896 
    goto return_label;
  }
  else ;
  
#line 1899 
  __skb_pull(skb,s->pktshift);
  
#line 1900 
  skb->protocol = eth_type_trans(skb,q->netdev);
  
#line 1901 
  skb_record_rx_queue(skb,(unsigned short)((int)q->idx));
  
#line 1902 
  if (((skb->dev)->features & 8589934592ULL) != 0ULL) 
#line 1903 
                                                      skb_set_hash(skb,pkt->rsshdr.hash_val,(enum pkt_hash_types)PKT_HASH_TYPE_L3); else ;
  
#line 1906 
  rxq->stats.pkts += 1UL;
  
#line 1908 
  if ((int)csum_ok != 0 && (pkt->l2info & 49152U) != 0U) {
    
#line 1909 
    if ((unsigned int)*((unsigned char *)pkt + 9UL) == 0U) {
      
#line 1910 
      skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U;
      
#line 1911 
      rxq->stats.rx_cso += 1UL;
    }
    else 
      
#line 1912 
      if ((pkt->l2info & 1U) != 0U) {
        
#line 1913 
        __sum16 c = pkt->csum;
        
#line 1914 
        skb->__anonCompField_sk_buff_69.csum = csum_unfold((unsigned short)((int)c));
        
#line 1915 
        skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))2U;
        
#line 1916 
        rxq->stats.rx_cso += 1UL;
      }
      else ;
  }
  else {
    
#line 1919 
    skb_checksum_none_assert((struct sk_buff const *)skb);
    
#line 1924 
    pi = (struct port_info *)netdev_priv((struct net_device const *)skb->dev);
    
#line 1925 
    if ((pkt->l2info & 61451U) == 0U) {
      
#line 1926 
      if ((pkt->l2info & 4U) != 0U && ((int)pi->fcoe.flags & 1) != 0) {
        
#line 1928 
        if (((int)pkt->err_vec & 32) == 0) 
#line 1929 
                                           skb->ip_summed = (unsigned char __attribute__((__FRAMA_C_BITFIELD_SIZE__(2))))1U; else ;
      }
      else ;
    }
    else ;
  }
  
#line 1937 
  if ((long)((unsigned int)*((unsigned char *)pkt + 9UL) != 0U) != 0L) {
    int tmp_7;
    
#line 1938 
    if (0 != 0) 
#line 1938 
                tmp_7 = (int)((unsigned short)(((int)pkt->vlan << 8) | ((int)pkt->vlan >> 8)));
    else {
      __u16 tmp_6;
      
#line 1938 
      tmp_6 = __fswab16((unsigned short)((int)pkt->vlan));
      
#line 1938 
      tmp_7 = (int)tmp_6;
    }
    
#line 1938 
    ;
    
#line 1938 
    __vlan_hwaccel_put_tag(skb,(unsigned short)129,(unsigned short)tmp_7);
    
#line 1939 
    rxq->stats.vlan_ex += 1UL;
  }
  else ;
  
#line 1941 
  skb_mark_napi_id(skb,& q->napi);
  
#line 1942 
  netif_receive_skb(skb);
  
#line 1943 
  __retres = 0;
  return_label: 
#line 1943 
                return __retres;
}


#line 1961  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void restore_rx_bufs(struct pkt_gl const *si, struct sge_fl *q, int frags)
{
  struct rx_sw_desc *d;
  int tmp;
  
#line 1966 
  goto ldv_59071;
  ldv_59070: 
#line 1967 
  ;
  
#line 1967 
  if (q->cidx == 0U) 
#line 1968 
                     q->cidx = q->size + 4294967295U; else 
#line 1970 
                                                           q->cidx -= 1U;
  
#line 1971 
  d = q->sdesc + q->cidx;
  
#line 1972 
  d->page = si->frags[frags].page;
  
#line 1973 
  d->dma_addr |= 16ULL;
  
#line 1974 
  q->avail += 1U;
  ldv_59071: 
#line 1975 
  ;
  
#line 1966 
  tmp = frags;
  
#line 1966 
  frags -= 1;
  
#line 1966 
  ;
  
#line 1966 
  if (tmp != 0) 
#line 1968 
                goto ldv_59070; else 
#line 1971 
                                     goto ldv_59072;
  ldv_59072: 
#line 1972 
  ;
  
#line 1973 
  return;
}


#line 1986  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static bool is_new_response(struct rsp_ctrl const *r, struct sge_rspq const *q)
{
  bool __retres;
  
#line 1989 
  __retres = (_Bool)((int)r->__anonCompField_rsp_ctrl_115.type_gen >> 7 == (int)q->gen);
  
#line 1989 
  return __retres;
}


#line 1998  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
__inline static void rspq_next(struct sge_rspq *q)
{
  
#line 2000 
  q->cur_desc += q->iqe_len;
  
#line 2001 
  q->cidx += 1U;
  
#line 2001 
  ;
  
#line 2001 
  if ((long)(q->cidx == q->size) != 0L) {
    
#line 2002 
    q->cidx = 0U;
    
#line 2003 
    q->gen = (unsigned char)((unsigned int)q->gen ^ 1U);
    
#line 2004 
    q->cur_desc = (__be64 const *)q->desc;
  }
  else ;
  
#line 2006 
  return;
}


#line 2021  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static int process_responses(struct sge_rspq *q, int budget)
{
  int __retres;
  int ret;
  int rsp_type;
  struct rsp_ctrl const *rc;
  struct sge_eth_rxq *tmp;
  int tmp_1;
  bool tmp_0;
  
#line 2024 
  int budget_left = budget;
  {
    
#line 2026 
    struct sge_rspq const *__mptr = (struct sge_rspq const *)q;
    
#line 2026 
    tmp = (struct sge_eth_rxq *)__mptr;
  }
  
#line 2026 
  struct sge_eth_rxq *rxq = tmp;
  
#line 2027 
  struct adapter *adapter = q->adap;
  
#line 2028 
  struct sge *s = & adapter->sge;
  
#line 2030 
  goto ldv_59106;
  ldv_59105: 
#line 2031 
  ;
  
#line 2031 
  rc = (struct rsp_ctrl const *)q->cur_desc + ((unsigned long)q->iqe_len + 18446744073709551600U);
  
#line 2032 
  tmp_0 = is_new_response(rc,(struct sge_rspq const *)q);
  
#line 2032 
  if (tmp_0) 
#line 2032 
             tmp_1 = 0; else 
#line 2032 
                             tmp_1 = 1;
  
#line 2032 
  if (tmp_1) 
#line 2033 
             goto ldv_59093; else ;
  
#line 2034 
  ldv_inline_asm();
  
#line 2036 
  rsp_type = ((int)rc->__anonCompField_rsp_ctrl_115.type_gen >> 4) & 3;
  
#line 2037 
  if ((long)(rsp_type == 0) != 0L) {
    struct page_frag *fp;
    struct pkt_gl si;
    struct rx_sw_desc const *rsd;
    unsigned int tmp_3;
    u32 bufsz;
    u32 frags;
    int tmp_4;
    u32 tmp_6;
    dma_addr_t tmp_7;
    void *tmp_8;
    
#line 2041 
    if (0 != 0) 
#line 2041 
                tmp_3 = (((rc->pldbuflen_qid << 24) | ((rc->pldbuflen_qid << 8) & 16711680U)) | ((rc->pldbuflen_qid >> 8) & 65280U)) | (rc->pldbuflen_qid >> 24); else 
                                                                    
#line 2041 
                                                                    tmp_3 = __fswab32(rc->pldbuflen_qid);
    
#line 2041 
    u32 len = tmp_3;
    
#line 2043 
    if (len < (u32)0) {
      
#line 2044 
      if ((long)(q->offset > 0) != 0L) {
        
#line 2045 
        free_rx_bufs(q->adap,& rxq->fl,1);
        
#line 2046 
        q->offset = 0;
      }
      else ;
      
#line 2048 
      len &= 2147483647U;
    }
    else ;
    
#line 2050 
    si.tot_len = len;
    
#line 2053 
    frags = 0U;
    
#line 2053 
    fp = (struct page_frag *)(& si.frags);
    ldv_59104: 
#line 2054 
    ;
    
#line 2054 
    rsd = (struct rx_sw_desc const *)(rxq->fl.sdesc + rxq->fl.cidx);
    
#line 2055 
    tmp_4 = get_buf_size(adapter,rsd);
    
#line 2055 
    bufsz = (unsigned int)tmp_4;
    
#line 2056 
    fp->page = rsd->page;
    
#line 2057 
    fp->offset = (unsigned int)q->offset;
    {
      u32 tmp_5;
      
#line 2058 
      u32 _min1 = bufsz;
      
#line 2058 
      u32 _min2 = len;
      
#line 2058 
      if (_min1 < _min2) 
#line 2058 
                         tmp_5 = _min1; else 
#line 2058 
                                             tmp_5 = _min2;
      
#line 2058 
      tmp_6 = tmp_5;
    }
    
#line 2058 
    fp->size = tmp_6;
    
#line 2059 
    len -= fp->size;
    
#line 2060 
    if (len == 0U) 
#line 2061 
                   goto ldv_59103; else ;
    
#line 2062 
    unmap_rx_buf(q->adap,& rxq->fl);
    
#line 2053 
    frags += 1U;
    
#line 2053 
    fp += 1;
    
#line 2054 
    goto ldv_59104;
    ldv_59103: 
#line 2055 
    ;
    
#line 2069 
    ;
    
#line 2069 
    tmp_7 = get_buf_addr(rsd);
    
#line 2069 
    ;
    
#line 2069 
    dma_sync_single_for_cpu((q->adap)->pdev_dev,tmp_7,(unsigned long)fp->size,(enum dma_data_direction)DMA_FROM_DEVICE);
    
#line 2073 
    tmp_8 = lowmem_page_address((struct page const *)si.frags[0].page);
    
#line 2073 
    si.va = tmp_8 + si.frags[0].offset;
    
#line 2075 
    __builtin_prefetch((void const *)si.va);
    
#line 2077 
    si.nfrags = frags + 1U;
    
#line 2078 
    ret = (*(q->handler))(q,q->cur_desc,(struct pkt_gl const *)(& si));
    
#line 2079 
    if ((long)(ret == 0) != 0L) 
#line 2080 
                                q->offset = (int)((unsigned int)q->offset + (((fp->size + s->fl_align) + 4294967295U) & - s->fl_align)); else 
                                                                    
#line 2082 
                                                                    restore_rx_bufs((struct pkt_gl const *)(& si),& rxq->fl,(int)frags);
  }
  else 
    
#line 2083 
    if ((long)(rsp_type == 1) != 0L) 
#line 2084 
                                     ret = (*(q->handler))(q,q->cur_desc,(struct pkt_gl const *)0); else 
                                                                    
#line 2086 
                                                                    ret = (*(q->handler))(q,(__be64 const *)rc,(struct pkt_gl const *)1);
  
#line 2089 
  if ((long)(ret != 0) != 0L) {
    
#line 2091 
    q->next_intr_params = (unsigned char)10U;
    
#line 2092 
    goto ldv_59093;
  }
  else ;
  
#line 2095 
  rspq_next(q);
  
#line 2096 
  budget_left -= 1;
  ldv_59106: 
#line 2097 
  ;
  
#line 2030 
  if ((long)(budget_left != 0) != 0L) 
#line 2032 
                                      goto ldv_59105; else 
#line 2035 
                                                           goto ldv_59093;
  ldv_59093: 
#line 2036 
  ;
  
#line 2099 
  if (q->offset >= 0 && rxq->fl.size - rxq->fl.avail > 15U) 
#line 2100 
                                                            __refill_fl(q->adap,& rxq->fl); else ;
  
#line 2101 
  __retres = budget - budget_left;
  
#line 2101 
  return __retres;
}


#line 2105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
int cxgb_busy_poll(struct napi_struct *napi)
{
  int __retres;
  struct sge_rspq *tmp;
  unsigned int params;
  unsigned int work_done;
  u32 val;
  int tmp_1;
  bool tmp_0;
  int tmp_2;
  {
    
#line 2107 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 2107 
    tmp = (struct sge_rspq *)__mptr;
  }
  
#line 2107 
  struct sge_rspq *q = tmp;
  
#line 2111 
  tmp_0 = cxgb_poll_lock_poll(q);
  
#line 2111 
  if (tmp_0) 
#line 2111 
             tmp_1 = 0; else 
#line 2111 
                             tmp_1 = 1;
  
#line 2111 
  if (tmp_1) {
    
#line 2112 
    __retres = -2;
    
#line 2112 
    goto return_label;
  }
  else ;
  
#line 2114 
  tmp_2 = process_responses(q,4);
  
#line 2114 
  work_done = (unsigned int)tmp_2;
  
#line 2115 
  params = 1U;
  
#line 2116 
  q->next_intr_params = (unsigned char)params;
  
#line 2117 
  val = (params << 12) | work_done;
  
#line 2122 
  if ((long)(q->bar2_addr == (void *)0) != 0L) 
#line 2123 
                                               t4_write_reg(q->adap,110596U,((unsigned int)q->cntxt_id << 16) | val);
  else {
    
#line 2126 
    writel((q->bar2_qid << 16) | val,(void volatile *)(q->bar2_addr + 20U));
    
#line 2128 
    ldv_inline_asm();
  }
  
#line 2131 
  cxgb_poll_unlock_poll(q);
  
#line 2132 
  __retres = (int)work_done;
  return_label: 
#line 2132 
                return __retres;
}


#line 2147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static int napi_rx_handler(struct napi_struct *napi, int budget)
{
  int __retres;
  unsigned int params;
  struct sge_rspq *tmp;
  int work_done;
  u32 val;
  int tmp_1;
  bool tmp_0;
  {
    
#line 2150 
    struct napi_struct const *__mptr = (struct napi_struct const *)napi;
    
#line 2150 
    tmp = (struct sge_rspq *)__mptr;
  }
  
#line 2150 
  struct sge_rspq *q = tmp;
  
#line 2154 
  tmp_0 = cxgb_poll_lock_napi_0(q);
  
#line 2154 
  if (tmp_0) 
#line 2154 
             tmp_1 = 0; else 
#line 2154 
                             tmp_1 = 1;
  
#line 2154 
  if (tmp_1) {
    
#line 2155 
    __retres = budget;
    
#line 2155 
    goto return_label;
  }
  else ;
  
#line 2157 
  work_done = process_responses(q,budget);
  
#line 2158 
  if ((long)(work_done < budget) != 0L) {
    int timer_index;
    
#line 2161 
    napi_complete(napi);
    
#line 2162 
    timer_index = ((int)q->next_intr_params >> 1) & 7;
    
#line 2164 
    if ((unsigned int)q->adaptive_rx != 0U) {
      int tmp_3;
      int tmp_7;
      {
        int tmp_2;
        
#line 2165 
        int _max1 = timer_pkt_quota[timer_index];
        
#line 2165 
        int _max2 = 1;
        
#line 2165 
        if (_max1 > _max2) 
#line 2165 
                           tmp_2 = _max1; else 
#line 2165 
                                               tmp_2 = _max2;
        
#line 2165 
        tmp_3 = tmp_2;
      }
      
#line 2165 
      ;
      
#line 2165 
      if (tmp_3 < work_done) 
#line 2167 
                             timer_index += 1; else 
#line 2169 
                                                    timer_index += -1;
      {
        int tmp_5;
        int tmp_6;
        {
          int tmp_4;
          
#line 2171 
          int _max1_0 = timer_index;
          
#line 2171 
          int _max2_0 = 0;
          
#line 2171 
          if (_max1_0 > _max2_0) 
#line 2171 
                                 tmp_4 = _max1_0; else 
#line 2171 
                                                       tmp_4 = _max2_0;
          
#line 2171 
          tmp_5 = tmp_4;
        }
        
#line 2171 
        int _min1 = tmp_5;
        
#line 2171 
        int _min2 = 5;
        
#line 2171 
        if (_min1 < _min2) 
#line 2171 
                           tmp_6 = _min1; else 
#line 2171 
                                               tmp_6 = _min2;
        
#line 2171 
        tmp_7 = tmp_6;
      }
      
#line 2171 
      timer_index = tmp_7;
      
#line 2172 
      q->next_intr_params = (unsigned char)((int)((unsigned char)timer_index) << 1U);
      
#line 2175 
      params = (unsigned int)q->next_intr_params;
    }
    else {
      
#line 2177 
      params = (unsigned int)q->next_intr_params;
      
#line 2178 
      q->next_intr_params = q->intr_params;
    }
  }
  else 
#line 2181 
       params = 14U;
  
#line 2183 
  val = (params << 12) | (unsigned int)work_done;
  
#line 2188 
  if ((long)(q->bar2_addr == (void *)0) != 0L) 
#line 2189 
                                               t4_write_reg(q->adap,110596U,((unsigned int)q->cntxt_id << 16) | val);
  else {
    
#line 2192 
    writel((q->bar2_qid << 16) | val,(void volatile *)(q->bar2_addr + 20U));
    
#line 2194 
    ldv_inline_asm();
  }
  
#line 2196 
  cxgb_poll_unlock_napi(q);
  
#line 2197 
  __retres = work_done;
  return_label: 
#line 2197 
                return __retres;
}


#line 2203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
irqreturn_t t4_sge_intr_msix(int irq, void *cookie)
{
  irqreturn_t __retres;
  
#line 2205 
  struct sge_rspq *q = (struct sge_rspq *)cookie;
  
#line 2207 
  napi_schedule(& q->napi);
  
#line 2208 
  __retres = IRQ_HANDLED;
  
#line 2208 
  return __retres;
}


#line 2215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static unsigned int process_intrq(struct adapter *adap)
{
  unsigned int credits;
  struct rsp_ctrl const *rc;
  u32 val;
  int tmp_0;
  bool tmp;
  
#line 2219 
  struct sge_rspq *q = & adap->sge.intrq;
  
#line 2222 
  ldv_spin_lock_99(& adap->sge.intrq_lock);
  
#line 2223 
  credits = 0U;
  ldv_59153: 
#line 2224 
  ;
  
#line 2224 
  rc = (struct rsp_ctrl const *)q->cur_desc + ((unsigned long)q->iqe_len + 18446744073709551600U);
  
#line 2225 
  tmp = is_new_response(rc,(struct sge_rspq const *)q);
  
#line 2225 
  if (tmp) 
#line 2225 
           tmp_0 = 0; else 
#line 2225 
                           tmp_0 = 1;
  
#line 2225 
  if (tmp_0) 
#line 2226 
             goto ldv_59151; else ;
  
#line 2227 
  ldv_inline_asm();
  
#line 2229 
  if ((((int)rc->__anonCompField_rsp_ctrl_115.type_gen >> 4) & 3) == 2) {
    unsigned int tmp_2;
    
#line 2230 
    if (0 != 0) 
#line 2230 
                tmp_2 = (((rc->pldbuflen_qid << 24) | ((rc->pldbuflen_qid << 8) & 16711680U)) | ((rc->pldbuflen_qid >> 8) & 65280U)) | (rc->pldbuflen_qid >> 24); else 
                                                                    
#line 2230 
                                                                    tmp_2 = __fswab32(rc->pldbuflen_qid);
    
#line 2230 
    unsigned int qid = tmp_2;
    
#line 2232 
    qid -= adap->sge.ingr_start;
    
#line 2233 
    napi_schedule(& (*(adap->sge.ingr_map + qid))->napi);
  }
  else ;
  
#line 2236 
  rspq_next(q);
  
#line 2223 
  credits += 1U;
  
#line 2224 
  goto ldv_59153;
  ldv_59151: 
#line 2225 
  ;
  
#line 2239 
  val = (unsigned int)((int)q->intr_params << 12) | credits;
  
#line 2244 
  if ((long)(q->bar2_addr == (void *)0) != 0L) 
#line 2245 
                                               t4_write_reg(adap,110596U,(unsigned int)((int)q->cntxt_id << 16) | val);
  else {
    
#line 2248 
    writel((q->bar2_qid << 16) | val,(void volatile *)(q->bar2_addr + 20U));
    
#line 2250 
    ldv_inline_asm();
  }
  
#line 2252 
  ldv_spin_unlock_100(& adap->sge.intrq_lock);
  
#line 2253 
  return credits;
}


#line 2260  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static irqreturn_t t4_intr_msi(int irq, void *cookie)
{
  irqreturn_t __retres;
  
#line 2262 
  struct adapter *adap = (struct adapter *)cookie;
  
#line 2264 
  if ((adap->flags & 128U) != 0U) 
#line 2265 
                                  t4_slow_intr_handler(adap); else ;
  
#line 2266 
  process_intrq(adap);
  
#line 2267 
  __retres = IRQ_HANDLED;
  
#line 2267 
  return __retres;
}


#line 2275  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static irqreturn_t t4_intr_intx(int irq, void *cookie)
{
  irqreturn_t __retres;
  int tmp_0;
  unsigned int tmp_1;
  
#line 2277 
  struct adapter *adap = (struct adapter *)cookie;
  
#line 2279 
  t4_write_reg(adap,110660U,0U);
  
#line 2280 
  if ((adap->flags & 128U) != 0U) {
    int tmp;
    
#line 2280 
    tmp = t4_slow_intr_handler(adap);
    
#line 2280 
    if (tmp != 0) 
#line 2280 
                  tmp_0 = 1; else 
#line 2280 
                                  tmp_0 = 0;
  }
  else 
#line 2280 
       tmp_0 = 0;
  
#line 2280 
  tmp_1 = process_intrq(adap);
  
#line 2280 
  if (((unsigned int)tmp_0 | tmp_1) != 0U) {
    
#line 2282 
    __retres = IRQ_HANDLED;
    
#line 2282 
    goto return_label;
  }
  else ;
  
#line 2283 
  __retres = IRQ_NONE;
  return_label: 
#line 2283 
                return __retres;
}


#line 2293  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
irq_handler_t t4_intr_handler(struct adapter *adap)
{
  irq_handler_t __retres;
  
#line 2295 
  if ((adap->flags & 8U) != 0U) {
    
#line 2296 
    __retres = & t4_sge_intr_msix;
    
#line 2296 
    goto return_label;
  }
  else ;
  
#line 2297 
  if ((adap->flags & 4U) != 0U) {
    
#line 2298 
    __retres = & t4_intr_msi;
    
#line 2298 
    goto return_label;
  }
  else ;
  
#line 2299 
  __retres = & t4_intr_intx;
  return_label: 
#line 2299 
                return __retres;
}


#line 2302  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void sge_rx_timer_cb(unsigned long data)
{
  unsigned long m;
  unsigned int i;
  
#line 2306 
  struct adapter *adap = (struct adapter *)data;
  
#line 2307 
  struct sge *s = & adap->sge;
  
#line 2309 
  i = 0U;
  
#line 2309 
  goto ldv_59183;
  ldv_59182: 
#line 2310 
  ;
  
#line 2310 
  m = *(s->starving_fl + i);
  
#line 2310 
  goto ldv_59180;
  ldv_59179: 
#line 2311 
  ;
  {
    struct sge_eth_rxq *rxq;
    unsigned long tmp;
    bool tmp_2;
    
#line 2312 
    tmp = __ffs(m);
    
#line 2312 
    unsigned int id = (unsigned int)tmp + i * 64U;
    
#line 2313 
    struct sge_fl *fl = (struct sge_fl *)*(s->egr_map + id);
    
#line 2315 
    clear_bit((long)id,(unsigned long volatile *)s->starving_fl);
    
#line 2316 
    ldv_inline_asm();
    
#line 2318 
    tmp_2 = fl_starving((struct adapter const *)adap,(struct sge_fl const *)fl);
    
#line 2318 
    if ((int)tmp_2 != 0) {
      struct sge_eth_rxq *tmp_0;
      bool tmp_1;
      {
        
#line 2319 
        struct sge_fl const *__mptr = (struct sge_fl const *)fl;
        
#line 2319 
        tmp_0 = (struct sge_eth_rxq *)__mptr + 18446744073709551160U;
      }
      
#line 2319 
      rxq = tmp_0;
      
#line 2320 
      tmp_1 = napi_reschedule(& rxq->rspq.napi);
      
#line 2320 
      if ((int)tmp_1 != 0) 
#line 2321 
                           fl->starving += 1UL; else 
#line 2323 
                                                     clear_bit((long)id,(unsigned long volatile *)s->starving_fl);
    }
    else ;
  }
  
#line 2310 
  m = (m + 18446744073709551615UL) & m;
  ldv_59180: 
#line 2311 
  ;
  
#line 2310 
  if (m != 0UL) 
#line 2312 
                goto ldv_59179; else 
#line 2315 
                                     goto ldv_59181;
  ldv_59181: 
#line 2316 
  ;
  
#line 2309 
  i += 1U;
  ldv_59183: 
#line 2310 
  ;
  
#line 2309 
  if ((unsigned long)i < ((unsigned long)s->egr_sz + 63UL) / 64UL) 
#line 2311 
                                                                   goto ldv_59182; else 
                                                                    
#line 2314 
                                                                    goto ldv_59184;
  ldv_59184: 
#line 2315 
  ;
  
#line 2330 
  if ((adap->flags & 128U) == 0U) 
#line 2331 
                                  goto done; else ;
  
#line 2333 
  t4_idma_monitor(adap,& s->idma_monitor,250,125);
  done: 
#line 2335 
  ;
  
#line 2336 
  ldv_mod_timer_101(& s->rx_timer,jiffies + 125UL);
  
#line 2337 
  return;
}


#line 2339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void sge_tx_timer_cb(unsigned long data)
{
  unsigned long m;
  unsigned int i;
  unsigned int budget;
  int tmp_4;
  
#line 2343 
  struct adapter *adap = (struct adapter *)data;
  
#line 2344 
  struct sge *s = & adap->sge;
  
#line 2346 
  i = 0U;
  
#line 2346 
  goto ldv_59200;
  ldv_59199: 
#line 2347 
  ;
  
#line 2347 
  m = *(s->txq_maperr + i);
  
#line 2347 
  goto ldv_59197;
  ldv_59196: 
#line 2348 
  ;
  {
    unsigned long tmp;
    
#line 2348 
    tmp = __ffs(m);
    
#line 2348 
    unsigned long id = tmp + (unsigned long)(i * 64U);
    
#line 2349 
    struct sge_ofld_txq *txq = (struct sge_ofld_txq *)*(s->egr_map + id);
    
#line 2351 
    clear_bit((long)id,(unsigned long volatile *)s->txq_maperr);
    
#line 2352 
    ldv_tasklet_schedule_102(& txq->qresume_tsk);
  }
  
#line 2347 
  m = (m + 18446744073709551615UL) & m;
  ldv_59197: 
#line 2348 
  ;
  
#line 2347 
  if (m != 0UL) 
#line 2349 
                goto ldv_59196; else 
#line 2352 
                                     goto ldv_59198;
  ldv_59198: 
#line 2353 
  ;
  
#line 2346 
  i += 1U;
  ldv_59200: 
#line 2347 
  ;
  
#line 2346 
  if ((unsigned long)i < ((unsigned long)s->egr_sz + 63UL) / 64UL) 
#line 2348 
                                                                   goto ldv_59199; else 
                                                                    
#line 2351 
                                                                    goto ldv_59201;
  ldv_59201: 
#line 2352 
  ;
  
#line 2355 
  budget = 100U;
  
#line 2356 
  i = (unsigned int)s->ethtxq_rover;
  ldv_59210: 
#line 2357 
  ;
  {
    
#line 2358 
    struct sge_eth_txq *q = & s->ethtxq[i];
    
#line 2360 
    if (q->q.in_use != 0U) {
      int tmp_1;
      {
        unsigned long __dummy;
        unsigned long volatile __dummy2;
        
#line 2361 
        tmp_1 = 1;
      }
      
#line 2360 
      if (tmp_1 != 0) {
        int tmp_2;
        {
          unsigned long __dummy_0;
          unsigned long __dummy2_0;
          
#line 2361 
          tmp_2 = 1;
        }
        
#line 2361 
        if (tmp_2 != 0) {
          
#line 2361 
          if ((long)((jiffies - (q->txq)->trans_start) + 18446744073709551614UL) >= 0L) {
            bool tmp_3;
            
#line 2361 
            tmp_3 = __netif_tx_trylock(q->txq);
            
#line 2361 
            if ((int)tmp_3 != 0) {
              
#line 2363 
              int avail = reclaimable((struct sge_txq const *)(& q->q));
              
#line 2365 
              if (avail != 0) {
                
#line 2366 
                if ((unsigned int)avail > budget) 
#line 2367 
                                                  avail = (int)budget; else ;
                
#line 2369 
                free_tx_desc(adap,& q->q,(unsigned int)avail,(_Bool)1);
                
#line 2370 
                q->q.in_use -= (unsigned int)avail;
                
#line 2371 
                budget -= (unsigned int)avail;
              }
              else ;
              
#line 2373 
              __netif_tx_unlock(q->txq);
            }
            else ;
          }
          else ;
        }
        else ;
      }
      else ;
    }
    else ;
    
#line 2376 
    i += 1U;
    
#line 2376 
    ;
    
#line 2376 
    if (i >= (unsigned int)s->ethqsets) 
#line 2377 
                                        i = 0U; else ;
  }
  
#line 2378 
  if (budget != 0U && (unsigned int)s->ethtxq_rover != i) 
#line 2380 
                                                          goto ldv_59210; else 
                                                                    
#line 2383 
                                                                    goto ldv_59211;
  ldv_59211: 
#line 2384 
  ;
  
#line 2379 
  s->ethtxq_rover = (unsigned short)i;
  
#line 2380 
  if (budget != 0U) 
#line 2380 
                    tmp_4 = 125; else 
#line 2380 
                                      tmp_4 = 2;
  
#line 2380 
  ;
  
#line 2380 
  ;
  
#line 2380 
  ldv_mod_timer_103(& s->tx_timer,(unsigned long)tmp_4 + jiffies);
  
#line 2381 
  return;
}


#line 2396  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void *bar2_address(struct adapter *adapter, unsigned int qid, enum t4_bar2_qtype qtype, unsigned int *pbar2_qid)
{
  void *__retres;
  u64 bar2_qoffset;
  int ret;
  
#line 2404 
  ret = t4_bar2_sge_qregs(adapter,qid,qtype,0,& bar2_qoffset,pbar2_qid);
  
#line 2406 
  if (ret != 0) {
    
#line 2407 
    __retres = (void *)0;
    
#line 2407 
    goto return_label;
  }
  else ;
  
#line 2409 
  __retres = adapter->bar2 + bar2_qoffset;
  return_label: 
#line 2409 
                return __retres;
}


#line 2415  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
int t4_sge_alloc_rxq(struct adapter *adap, struct sge_rspq *iq, bool fwevtq, struct net_device *dev, int intr_idx, struct sge_fl *fl, int (*hnd)(struct sge_rspq *, __be64 const *, struct pkt_gl const *), int cong)
{
  int __retres;
  int ret;
  struct fw_iq_cmd c;
  unsigned int tmp_0;
  __u16 tmp_78;
  unsigned int tmp_77;
  int tmp_101;
  
#line 2419 
  int flsz = 0;
  
#line 2421 
  struct sge *s = & adap->sge;
  
#line 2422 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  {
    
#line 2425 
    int const __y = 16;
    
#line 2425 
    tmp_0 = (iq->size + 15U) & 4294967280U;
  }
  
#line 2425 
  iq->size = tmp_0;
  
#line 2427 
  iq->desc = (__be64 *)alloc_ring(adap->pdev_dev,(unsigned long)iq->size,(unsigned long)iq->iqe_len,0UL,& iq->phys_addr,(void *)0,0UL,-1);
  
#line 2429 
  if (iq->desc == (__be64 *)0ULL) {
    
#line 2430 
    __retres = -12;
    
#line 2430 
    goto return_label;
  }
  else ;
  
#line 2432 
  memset((void *)(& c),0,64UL);
  
#line 2433 
  if (0 != 0) 
#line 2433 
              c.op_to_vfn = ((((adap->pf << 16) & 16776960U) | (adap->pf & 20224U)) | ((adap->pf << 8) >> 24)) | 45072U; else 
                                                                    
#line 2433 
                                                                    c.op_to_vfn = __fswab32((adap->pf << 8) | 279969792U);
  
#line 2436 
  c.alloc_to_len16 = 67109008U;
  
#line 2438 
  if (0 != 0) {
    int tmp_4;
    int tmp_5;
    int tmp_6;
    int tmp_7;
    
#line 2438 
    if (intr_idx < 0) 
#line 2438 
                      tmp_4 = ~ intr_idx; else 
#line 2438 
                                               tmp_4 = intr_idx;
    
#line 2438 
    if (intr_idx < 0) 
#line 2438 
                      tmp_5 = ~ intr_idx; else 
#line 2438 
                                               tmp_5 = intr_idx;
    
#line 2438 
    if (intr_idx < 0) 
#line 2438 
                      tmp_6 = ~ intr_idx; else 
#line 2438 
                                               tmp_6 = intr_idx;
    
#line 2438 
    if (intr_idx < 0) 
#line 2438 
                      tmp_7 = ~ intr_idx; else 
#line 2438 
                                               tmp_7 = intr_idx;
    
#line 2438 
    c.type_to_iqandstindex = ((((unsigned int)((((((int)fwevtq << 28) | ((int)pi->viid << 16)) | ((intr_idx >> 16) & 32768)) | 4096) | tmp_4) << 24) | (((unsigned int)((((((int)fwevtq << 28) | ((int)pi->viid << 16)) | ((intr_idx >> 16) & 32768)) | 4096) | tmp_5) << 8) & 16711680U)) | (((unsigned int)((((((int)fwevtq << 28) | ((int)pi->viid << 16)) | ((intr_idx >> 16) & 32768)) | 4096) | tmp_6) >> 8) & 65280U)) | ((unsigned int)((((((int)fwevtq << 28) | ((int)pi->viid << 16)) | ((intr_idx >> 16) & 32768)) | 4096) | tmp_7) >> 24);
  }
  else {
    __u32 tmp_9;
    int tmp_8;
    
#line 2438 
    if (intr_idx < 0) 
#line 2438 
                      tmp_8 = ~ intr_idx; else 
#line 2438 
                                               tmp_8 = intr_idx;
    
#line 2438 
    ;
    
#line 2438 
    tmp_9 = __fswab32((unsigned int)((((((int)fwevtq << 28) | ((int)pi->viid << 16)) | ((intr_idx >> 16) & 32768)) | 4096) | tmp_8));
    
#line 2438 
    c.type_to_iqandstindex = tmp_9;
  }
  
#line 2444 
  if (0 != 0) {
    unsigned int tmp_75;
    
#line 2444 
    if (iq->iqe_len == 0U) {
      int tmp_10;
      
#line 2444 
      tmp_10 = ____ilog2_NaN();
      
#line 2444 
      tmp_75 = (unsigned int)((unsigned short)tmp_10) + 65532U;
    }
    else {
      unsigned int tmp_74;
      
#line 2444 
      if (((unsigned long long)iq->iqe_len & 4611686018427387904ULL) == 0ULL) {
        unsigned int tmp_73;
        
#line 2444 
        if (((unsigned long long)iq->iqe_len & 2305843009213693952ULL) == 0ULL) {
          unsigned int tmp_72;
          
#line 2444 
          if (((unsigned long long)iq->iqe_len & 1152921504606846976ULL) == 0ULL) {
            unsigned int tmp_71;
            
#line 2444 
            if (((unsigned long long)iq->iqe_len & 576460752303423488ULL) == 0ULL) {
              unsigned int tmp_70;
              
#line 2444 
              if (((unsigned long long)iq->iqe_len & 288230376151711744ULL) == 0ULL) {
                unsigned int tmp_69;
                
#line 2444 
                if (((unsigned long long)iq->iqe_len & 144115188075855872ULL) == 0ULL) {
                  unsigned int tmp_68;
                  
#line 2444 
                  if (((unsigned long long)iq->iqe_len & 72057594037927936ULL) == 0ULL) {
                    unsigned int tmp_67;
                    
#line 2444 
                    if (((unsigned long long)iq->iqe_len & 36028797018963968ULL) == 0ULL) {
                      unsigned int tmp_66;
                      
#line 2444 
                      if (((unsigned long long)iq->iqe_len & 18014398509481984ULL) == 0ULL) {
                        unsigned int tmp_65;
                        
#line 2444 
                        if (((unsigned long long)iq->iqe_len & 9007199254740992ULL) == 0ULL) {
                          unsigned int tmp_64;
                          
#line 2444 
                          if (((unsigned long long)iq->iqe_len & 4503599627370496ULL) == 0ULL) {
                            unsigned int tmp_63;
                            
#line 2444 
                            if (((unsigned long long)iq->iqe_len & 2251799813685248ULL) == 0ULL) {
                              unsigned int tmp_62;
                              
#line 2444 
                              if (((unsigned long long)iq->iqe_len & 1125899906842624ULL) == 0ULL) {
                                unsigned int tmp_61;
                                
#line 2444 
                                if (((unsigned long long)iq->iqe_len & 562949953421312ULL) == 0ULL) {
                                  unsigned int tmp_60;
                                  
#line 2444 
                                  if (((unsigned long long)iq->iqe_len & 281474976710656ULL) == 0ULL) {
                                    unsigned int tmp_59;
                                    
#line 2444 
                                    if (((unsigned long long)iq->iqe_len & 140737488355328ULL) == 0ULL) {
                                      unsigned int tmp_58;
                                      
#line 2444 
                                      if (((unsigned long long)iq->iqe_len & 70368744177664ULL) == 0ULL) {
                                        unsigned int tmp_57;
                                        
#line 2444 
                                        if (((unsigned long long)iq->iqe_len & 35184372088832ULL) == 0ULL) {
                                          unsigned int tmp_56;
                                          
#line 2444 
                                          if (((unsigned long long)iq->iqe_len & 17592186044416ULL) == 0ULL) {
                                            unsigned int tmp_55;
                                            
#line 2444 
                                            if (((unsigned long long)iq->iqe_len & 8796093022208ULL) == 0ULL) {
                                              unsigned int tmp_54;
                                              
#line 2444 
                                              if (((unsigned long long)iq->iqe_len & 4398046511104ULL) == 0ULL) {
                                                unsigned int tmp_53;
                                                
#line 2444 
                                                if (((unsigned long long)iq->iqe_len & 2199023255552ULL) == 0ULL) {
                                                  unsigned int tmp_52;
                                                  
#line 2444 
                                                  if (((unsigned long long)iq->iqe_len & 1099511627776ULL) == 0ULL) {
                                                    unsigned int tmp_51;
                                                    
#line 2444 
                                                    if (((unsigned long long)iq->iqe_len & 549755813888ULL) == 0ULL) {
                                                      unsigned int tmp_50;
                                                      
#line 2444 
                                                      if (((unsigned long long)iq->iqe_len & 274877906944ULL) == 0ULL) {
                                                        unsigned int tmp_49;
                                                        
#line 2444 
                                                        if (((unsigned long long)iq->iqe_len & 137438953472ULL) == 0ULL) {
                                                          unsigned int tmp_48;
                                                          
#line 2444 
                                                          if (((unsigned long long)iq->iqe_len & 68719476736ULL) == 0ULL) {
                                                            unsigned int tmp_47;
                                                            
#line 2444 
                                                            if (((unsigned long long)iq->iqe_len & 34359738368ULL) == 0ULL) {
                                                              unsigned int tmp_46;
                                                              
#line 2444 
                                                              if (((unsigned long long)iq->iqe_len & 17179869184ULL) == 0ULL) {
                                                                unsigned int tmp_45;
                                                                
#line 2444 
                                                                if (((unsigned long long)iq->iqe_len & 8589934592ULL) == 0ULL) {
                                                                  unsigned int tmp_44;
                                                                  
#line 2444 
                                                                  if (
                                                                    ((unsigned long long)iq->iqe_len & 4294967296ULL) == 0ULL) {
                                                                    unsigned int tmp_43;
                                                                    
#line 2444 
                                                                    if (
                                                                    iq->iqe_len >= (unsigned int)0) {
                                                                    unsigned int tmp_42;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 1073741824ULL) == 0ULL) {
                                                                    unsigned int tmp_41;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 536870912ULL) == 0ULL) {
                                                                    unsigned int tmp_40;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 268435456ULL) == 0ULL) {
                                                                    unsigned int tmp_39;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 134217728ULL) == 0ULL) {
                                                                    unsigned int tmp_38;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 67108864ULL) == 0ULL) {
                                                                    unsigned int tmp_37;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 33554432ULL) == 0ULL) {
                                                                    unsigned int tmp_36;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 16777216ULL) == 0ULL) {
                                                                    unsigned int tmp_35;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 8388608ULL) == 0ULL) {
                                                                    unsigned int tmp_34;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 4194304ULL) == 0ULL) {
                                                                    unsigned int tmp_33;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 2097152ULL) == 0ULL) {
                                                                    unsigned int tmp_32;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 1048576ULL) == 0ULL) {
                                                                    unsigned int tmp_31;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 524288ULL) == 0ULL) {
                                                                    unsigned int tmp_30;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 262144ULL) == 0ULL) {
                                                                    unsigned int tmp_29;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 131072ULL) == 0ULL) {
                                                                    unsigned int tmp_28;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 65536ULL) == 0ULL) {
                                                                    unsigned int tmp_27;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 32768ULL) == 0ULL) {
                                                                    unsigned int tmp_26;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 16384ULL) == 0ULL) {
                                                                    unsigned int tmp_25;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 8192ULL) == 0ULL) {
                                                                    unsigned int tmp_24;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 4096ULL) == 0ULL) {
                                                                    unsigned int tmp_23;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 2048ULL) == 0ULL) {
                                                                    unsigned int tmp_22;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 1024ULL) == 0ULL) {
                                                                    unsigned int tmp_21;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 512ULL) == 0ULL) {
                                                                    unsigned int tmp_20;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 256ULL) == 0ULL) {
                                                                    unsigned int tmp_19;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 128ULL) == 0ULL) {
                                                                    unsigned int tmp_18;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 64ULL) == 0ULL) {
                                                                    unsigned int tmp_17;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 32ULL) == 0ULL) {
                                                                    unsigned int tmp_16;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 16ULL) == 0ULL) {
                                                                    unsigned int tmp_15;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 8ULL) == 0ULL) {
                                                                    unsigned int tmp_14;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 4ULL) == 0ULL) {
                                                                    unsigned int tmp_13;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 2ULL) == 0ULL) {
                                                                    unsigned int tmp_12;
                                                                    
#line 2444 
                                                                    if (
                                                                    ((unsigned long long)iq->iqe_len & 1ULL) == 0ULL) {
                                                                    int tmp_11;
                                                                    
#line 2444 
                                                                    tmp_11 = ____ilog2_NaN();
                                                                    
#line 2444 
                                                                    tmp_12 = (unsigned int)((unsigned short)tmp_11) + 65532U;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_12 = 65532U;
                                                                    
#line 2444 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_13 = 65533U;
                                                                    
#line 2444 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_14 = 65534U;
                                                                    
#line 2444 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_15 = 65535U;
                                                                    
#line 2444 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_16 = 0U;
                                                                    
#line 2444 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_17 = 1U;
                                                                    
#line 2444 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_18 = 2U;
                                                                    
#line 2444 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_19 = 3U;
                                                                    
#line 2444 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_20 = 4U;
                                                                    
#line 2444 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_21 = 5U;
                                                                    
#line 2444 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_22 = 6U;
                                                                    
#line 2444 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_23 = 7U;
                                                                    
#line 2444 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_24 = 8U;
                                                                    
#line 2444 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_25 = 9U;
                                                                    
#line 2444 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_26 = 10U;
                                                                    
#line 2444 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_27 = 11U;
                                                                    
#line 2444 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_28 = 12U;
                                                                    
#line 2444 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_29 = 13U;
                                                                    
#line 2444 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_30 = 14U;
                                                                    
#line 2444 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_31 = 15U;
                                                                    
#line 2444 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_32 = 16U;
                                                                    
#line 2444 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_33 = 17U;
                                                                    
#line 2444 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_34 = 18U;
                                                                    
#line 2444 
                                                                    tmp_35 = tmp_34;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_35 = 19U;
                                                                    
#line 2444 
                                                                    tmp_36 = tmp_35;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_36 = 20U;
                                                                    
#line 2444 
                                                                    tmp_37 = tmp_36;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_37 = 21U;
                                                                    
#line 2444 
                                                                    tmp_38 = tmp_37;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_38 = 22U;
                                                                    
#line 2444 
                                                                    tmp_39 = tmp_38;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_39 = 23U;
                                                                    
#line 2444 
                                                                    tmp_40 = tmp_39;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_40 = 24U;
                                                                    
#line 2444 
                                                                    tmp_41 = tmp_40;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_41 = 25U;
                                                                    
#line 2444 
                                                                    tmp_42 = tmp_41;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_42 = 26U;
                                                                    
#line 2444 
                                                                    tmp_43 = tmp_42;
                                                                    }
                                                                    else 
                                                                    
#line 2444 
                                                                    tmp_43 = 27U;
                                                                    
#line 2444 
                                                                    tmp_44 = tmp_43;
                                                                  }
                                                                  else 
                                                                    
#line 2444 
                                                                    tmp_44 = 28U;
                                                                  
#line 2444 
                                                                  tmp_45 = tmp_44;
                                                                }
                                                                else 
                                                                  
#line 2444 
                                                                  tmp_45 = 29U;
                                                                
#line 2444 
                                                                tmp_46 = tmp_45;
                                                              }
                                                              else 
#line 2444 
                                                                   tmp_46 = 30U;
                                                              
#line 2444 
                                                              tmp_47 = tmp_46;
                                                            }
                                                            else 
#line 2444 
                                                                 tmp_47 = 31U;
                                                            
#line 2444 
                                                            tmp_48 = tmp_47;
                                                          }
                                                          else 
#line 2444 
                                                               tmp_48 = 32U;
                                                          
#line 2444 
                                                          tmp_49 = tmp_48;
                                                        }
                                                        else 
#line 2444 
                                                             tmp_49 = 33U;
                                                        
#line 2444 
                                                        tmp_50 = tmp_49;
                                                      }
                                                      else 
#line 2444 
                                                           tmp_50 = 34U;
                                                      
#line 2444 
                                                      tmp_51 = tmp_50;
                                                    }
                                                    else 
#line 2444 
                                                         tmp_51 = 35U;
                                                    
#line 2444 
                                                    tmp_52 = tmp_51;
                                                  }
                                                  else 
#line 2444 
                                                       tmp_52 = 36U;
                                                  
#line 2444 
                                                  tmp_53 = tmp_52;
                                                }
                                                else 
#line 2444 
                                                     tmp_53 = 37U;
                                                
#line 2444 
                                                tmp_54 = tmp_53;
                                              }
                                              else 
#line 2444 
                                                   tmp_54 = 38U;
                                              
#line 2444 
                                              tmp_55 = tmp_54;
                                            }
                                            else 
#line 2444 
                                                 tmp_55 = 39U;
                                            
#line 2444 
                                            tmp_56 = tmp_55;
                                          }
                                          else 
#line 2444 
                                               tmp_56 = 40U;
                                          
#line 2444 
                                          tmp_57 = tmp_56;
                                        }
                                        else 
#line 2444 
                                             tmp_57 = 41U;
                                        
#line 2444 
                                        tmp_58 = tmp_57;
                                      }
                                      else 
#line 2444 
                                           tmp_58 = 42U;
                                      
#line 2444 
                                      tmp_59 = tmp_58;
                                    }
                                    else 
#line 2444 
                                         tmp_59 = 43U;
                                    
#line 2444 
                                    tmp_60 = tmp_59;
                                  }
                                  else 
#line 2444 
                                       tmp_60 = 44U;
                                  
#line 2444 
                                  tmp_61 = tmp_60;
                                }
                                else 
#line 2444 
                                     tmp_61 = 45U;
                                
#line 2444 
                                tmp_62 = tmp_61;
                              }
                              else 
#line 2444 
                                   tmp_62 = 46U;
                              
#line 2444 
                              tmp_63 = tmp_62;
                            }
                            else 
#line 2444 
                                 tmp_63 = 47U;
                            
#line 2444 
                            tmp_64 = tmp_63;
                          }
                          else 
#line 2444 
                               tmp_64 = 48U;
                          
#line 2444 
                          tmp_65 = tmp_64;
                        }
                        else 
#line 2444 
                             tmp_65 = 49U;
                        
#line 2444 
                        tmp_66 = tmp_65;
                      }
                      else 
#line 2444 
                           tmp_66 = 50U;
                      
#line 2444 
                      tmp_67 = tmp_66;
                    }
                    else 
#line 2444 
                         tmp_67 = 51U;
                    
#line 2444 
                    tmp_68 = tmp_67;
                  }
                  else 
#line 2444 
                       tmp_68 = 52U;
                  
#line 2444 
                  tmp_69 = tmp_68;
                }
                else 
#line 2444 
                     tmp_69 = 53U;
                
#line 2444 
                tmp_70 = tmp_69;
              }
              else 
#line 2444 
                   tmp_70 = 54U;
              
#line 2444 
              tmp_71 = tmp_70;
            }
            else 
#line 2444 
                 tmp_71 = 55U;
            
#line 2444 
            tmp_72 = tmp_71;
          }
          else 
#line 2444 
               tmp_72 = 56U;
          
#line 2444 
          tmp_73 = tmp_72;
        }
        else 
#line 2444 
             tmp_73 = 57U;
        
#line 2444 
        tmp_74 = tmp_73;
      }
      else 
#line 2444 
           tmp_74 = 58U;
      
#line 2444 
      tmp_75 = tmp_74;
    }
    
#line 2444 
    tmp_77 = tmp_75;
  }
  else {
    int tmp_76;
    
#line 2444 
    tmp_76 = __ilog2_u32(iq->iqe_len);
    
#line 2444 
    tmp_77 = (unsigned int)((unsigned short)tmp_76) + 65532U;
  }
  
#line 2444 
  ;
  
#line 2444 
  tmp_78 = __fswab16((unsigned short)((int)(((unsigned int)(((int)((unsigned short)pi->tx_chan) << 12U) | ((int)((unsigned short)iq->pktcnt_idx) << 4U)) | tmp_77) | 16384U)));
  
#line 2444 
  c.iqdroprss_to_iqesize = tmp_78;
  
#line 2448 
  if (0 != 0) 
#line 2448 
              c.iqsize = (unsigned short)(((int)((unsigned short)iq->size) << 8) | ((int)((unsigned short)iq->size) >> 8)); else 
                                                                    
#line 2448 
                                                                    c.iqsize = __fswab16((unsigned short)((int)((unsigned short)iq->size)));
  
#line 2449 
  if (0 != 0) 
#line 2449 
              c.iqaddr = (((((((iq->phys_addr << 56) | ((iq->phys_addr << 40) & 71776119061217280ULL)) | ((iq->phys_addr << 24) & 280375465082880ULL)) | ((iq->phys_addr << 8) & 1095216660480ULL)) | ((iq->phys_addr >> 8) & 4278190080ULL)) | ((iq->phys_addr >> 24) & 16711680ULL)) | ((iq->phys_addr >> 40) & 65280ULL)) | (iq->phys_addr >> 56); else 
                                                                    
#line 2449 
                                                                    c.iqaddr = __fswab64(iq->phys_addr);
  
#line 2450 
  if (cong >= 0) 
#line 2451 
                 c.iqns_to_fl0congen = 8U; else ;
  
#line 2453 
  if (fl != (struct sge_fl *)0) {
    unsigned int tmp_81;
    
#line 2454 
    enum chip_type chip = ((unsigned int)adap->params.chip >> 4) & 15U;
    
#line 2463 
    if (fl->size < s->fl_starve_thres + 15U) 
#line 2464 
                                             fl->size = s->fl_starve_thres + 15U; else ;
    {
      
#line 2465 
      int const __y_0 = 8;
      
#line 2465 
      tmp_81 = (fl->size + 7U) & 4294967288U;
    }
    
#line 2465 
    fl->size = tmp_81;
    
#line 2466 
    fl->desc = (__be64 *)alloc_ring(adap->pdev_dev,(unsigned long)fl->size,8UL,16UL,& fl->addr,(void *)(& fl->sdesc),(unsigned long)s->stat_len,-1);
    
#line 2469 
    if (fl->desc == (__be64 *)0ULL) 
#line 2470 
                                    goto fl_nomem; else ;
    
#line 2472 
    flsz = (int)(fl->size / 8U + s->stat_len / 64U);
    
#line 2473 
    c.iqns_to_fl0congen |= 1175453696U;
    
#line 2477 
    if (cong >= 0) {
      unsigned int tmp_84;
      
#line 2479 
      if (0 != 0) 
#line 2479 
                  tmp_84 = ((((unsigned int)(cong << 20) >> 8) & 65280U) | ((unsigned int)(cong << 20) >> 24)) | 17301504U; else 
                                                                    
#line 2479 
                                                                    tmp_84 = __fswab32((unsigned int)(cong << 20) | 2049U);
      
#line 2478 
      c.iqns_to_fl0congen |= tmp_84;
    }
    else ;
    
#line 2482 
    if (0 != 0) {
      int tmp_86;
      int tmp_87;
      
#line 2483 
      if (chip <= (unsigned int)5) 
#line 2483 
                                   tmp_86 = 48; else 
#line 2483 
                                                     tmp_86 = 32;
      
#line 2483 
      if (chip <= (unsigned int)5) 
#line 2483 
                                   tmp_87 = 48; else 
#line 2483 
                                                     tmp_87 = 32;
      
#line 2482 
      c.fl0dcaen_to_fl0cidxfthresh = (unsigned short)((unsigned int)((int)((unsigned short)((int)((unsigned short)(tmp_86 | 256)) << 8)) | ((int)((unsigned short)tmp_87) >> 8)) | 1U);
    }
    else {
      __u16 tmp_89;
      unsigned int tmp_88;
      
#line 2483 
      if (chip <= (unsigned int)5) 
#line 2483 
                                   tmp_88 = 304U; else 
#line 2483 
                                                       tmp_88 = 288U;
      
#line 2483 
      tmp_89 = __fswab16((unsigned short)((int)tmp_88));
      
#line 2482 
      c.fl0dcaen_to_fl0cidxfthresh = tmp_89;
    }
    
#line 2487 
    if (0 != 0) 
#line 2487 
                c.fl0size = (unsigned short)(((int)((unsigned short)flsz) << 8) | ((int)((unsigned short)flsz) >> 8)); else 
                                                                    
#line 2487 
                                                                    c.fl0size = __fswab16((unsigned short)((int)((unsigned short)flsz)));
    
#line 2488 
    if (0 != 0) 
#line 2488 
                c.fl0addr = (((((((fl->addr << 56) | ((fl->addr << 40) & 71776119061217280ULL)) | ((fl->addr << 24) & 280375465082880ULL)) | ((fl->addr << 8) & 1095216660480ULL)) | ((fl->addr >> 8) & 4278190080ULL)) | ((fl->addr >> 24) & 16711680ULL)) | ((fl->addr >> 40) & 65280ULL)) | (fl->addr >> 56); else 
                                                                    
#line 2488 
                                                                    c.fl0addr = __fswab64(fl->addr);
  }
  else ;
  
#line 2491 
  ret = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& c),64,(void *)(& c));
  
#line 2492 
  if (ret != 0) 
#line 2493 
                goto err; else ;
  
#line 2495 
  netif_napi_add(dev,& iq->napi,& napi_rx_handler,64);
  
#line 2496 
  napi_hash_add(& iq->napi);
  
#line 2497 
  iq->cur_desc = (__be64 const *)iq->desc;
  
#line 2498 
  iq->cidx = 0U;
  
#line 2499 
  iq->gen = (unsigned char)1U;
  
#line 2500 
  iq->next_intr_params = iq->intr_params;
  
#line 2501 
  if (0 != 0) 
#line 2501 
              iq->cntxt_id = (unsigned short)(((int)c.iqid << 8) | ((int)c.iqid >> 8)); else 
                                                                    
#line 2501 
                                                                    iq->cntxt_id = __fswab16((unsigned short)((int)c.iqid));
  
#line 2502 
  if (0 != 0) 
#line 2502 
              iq->abs_id = (unsigned short)(((int)c.physiqid << 8) | ((int)c.physiqid >> 8)); else 
                                                                    
#line 2502 
                                                                    iq->abs_id = __fswab16((unsigned short)((int)c.physiqid));
  
#line 2503 
  iq->bar2_addr = bar2_address(adap,(unsigned int)iq->cntxt_id,(enum t4_bar2_qtype)T4_BAR2_QTYPE_INGRESS,& iq->bar2_qid);
  
#line 2507 
  iq->size -= 1U;
  
#line 2508 
  iq->netdev = dev;
  
#line 2509 
  iq->handler = hnd;
  
#line 2512 
  if (fl != (struct sge_fl *)0) 
#line 2512 
                                iq->offset = 0; else 
#line 2512 
                                                     iq->offset = -1;
  
#line 2514 
  *(adap->sge.ingr_map + ((unsigned int)iq->cntxt_id - adap->sge.ingr_start)) = iq;
  
#line 2516 
  if (fl != (struct sge_fl *)0) {
    int tmp_95;
    unsigned int tmp_96;
    unsigned int tmp_97;
    unsigned long tmp_99;
    unsigned long tmp_98;
    unsigned int tmp_100;
    
#line 2517 
    if (0 != 0) 
#line 2517 
                tmp_95 = (int)((unsigned short)(((int)c.fl0id << 8) | ((int)c.fl0id >> 8)));
    else {
      __u16 tmp_94;
      
#line 2517 
      tmp_94 = __fswab16((unsigned short)((int)c.fl0id));
      
#line 2517 
      tmp_95 = (int)tmp_94;
    }
    
#line 2517 
    fl->cntxt_id = (unsigned int)tmp_95;
    
#line 2518 
    tmp_96 = 0U;
    
#line 2518 
    fl->pend_cred = tmp_96;
    
#line 2518 
    fl->avail = tmp_96;
    
#line 2519 
    tmp_97 = 0U;
    
#line 2519 
    fl->cidx = tmp_97;
    
#line 2519 
    fl->pidx = tmp_97;
    
#line 2520 
    tmp_99 = 0UL;
    
#line 2520 
    fl->starving = tmp_99;
    
#line 2520 
    tmp_98 = tmp_99;
    
#line 2520 
    fl->large_alloc_failed = tmp_98;
    
#line 2520 
    fl->alloc_failed = tmp_98;
    
#line 2521 
    *(adap->sge.egr_map + (fl->cntxt_id - adap->sge.egr_start)) = (void *)fl;
    
#line 2526 
    fl->bar2_addr = bar2_address(adap,fl->cntxt_id,(enum t4_bar2_qtype)T4_BAR2_QTYPE_EGRESS,& fl->bar2_qid);
    
#line 2530 
    tmp_100 = fl_cap((struct sge_fl const *)fl);
    
#line 2530 
    ;
    
#line 2530 
    ;
    
#line 2530 
    refill_fl(adap,fl,(int)tmp_100,208U);
  }
  else ;
  
#line 2541 
  tmp_101 = is_t4(adap->params.chip);
  
#line 2541 
  if (tmp_101 == 0) {
    
#line 2541 
    if (cong >= 0) {
      u32 param;
      u32 val;
      int i;
      
#line 2545 
      param = (unsigned int)((int)iq->cntxt_id | 69206016);
      
#line 2548 
      if (cong == 0) 
#line 2549 
                     val = 524288U;
      else {
        
#line 2551 
        val = 1048576U;
        
#line 2553 
        i = 0;
        
#line 2553 
        goto ldv_59246;
        ldv_59245: 
#line 2554 
        ;
        
#line 2554 
        if (((cong >> i) & 1) != 0) 
#line 2555 
                                    val = (unsigned int)(1 << (i << 2)) | val; else ;
        
#line 2553 
        i += 1;
        ldv_59246: 
#line 2554 
        ;
        
#line 2553 
        if (i <= 3) 
#line 2555 
                    goto ldv_59245; else 
#line 2558 
                                         goto ldv_59247;
        ldv_59247: 
#line 2559 
        ;
      }
      
#line 2559 
      ret = t4_set_params(adap,adap->mbox,adap->pf,0U,1U,(u32 const *)(& param),(u32 const *)(& val));
      
#line 2561 
      if (ret != 0) 
#line 2562 
                    dev_warn((struct device const *)adap->pdev_dev,"Failed to set Congestion",(int)iq->cntxt_id,- ret); else ;
    }
    else ;
  }
  else ;
  
#line 2567 
  __retres = 0;
  
#line 2567 
  goto return_label;
  fl_nomem: 
#line 2569 
  ;
  
#line 2570 
  ret = -12;
  err: 
#line 2571 
  ;
  
#line 2572 
  if (iq->desc != (__be64 *)0ULL) {
    
#line 2573 
    dma_free_attrs(adap->pdev_dev,(unsigned long)(iq->size * iq->iqe_len),(void *)iq->desc,iq->phys_addr,(struct dma_attrs *)0);
    
#line 2575 
    iq->desc = (__be64 *)0ULL;
  }
  else ;
  
#line 2577 
  if (fl != (struct sge_fl *)0 && fl->desc != (__be64 *)0ULL) {
    
#line 2578 
    kfree((void const *)fl->sdesc);
    
#line 2579 
    fl->sdesc = (struct rx_sw_desc *)0;
    
#line 2580 
    dma_free_attrs(adap->pdev_dev,(unsigned long)flsz * 64UL,(void *)fl->desc,fl->addr,(struct dma_attrs *)0);
    
#line 2582 
    fl->desc = (__be64 *)0ULL;
  }
  else ;
  
#line 2584 
  __retres = ret;
  return_label: 
#line 2584 
                return __retres;
}


#line 2587  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void init_txq(struct adapter *adap, struct sge_txq *q, unsigned int id)
{
  unsigned int tmp;
  unsigned long tmp_0;
  
#line 2589 
  q->cntxt_id = id;
  
#line 2590 
  q->bar2_addr = bar2_address(adap,q->cntxt_id,(enum t4_bar2_qtype)T4_BAR2_QTYPE_EGRESS,& q->bar2_qid);
  
#line 2594 
  q->in_use = 0U;
  
#line 2595 
  tmp = 0U;
  
#line 2595 
  q->pidx = tmp;
  
#line 2595 
  q->cidx = tmp;
  
#line 2596 
  tmp_0 = 0UL;
  
#line 2596 
  q->restarts = tmp_0;
  
#line 2596 
  q->stops = tmp_0;
  
#line 2597 
  q->stat = (struct sge_qstat *)(q->desc + q->size);
  
#line 2598 
  spinlock_check(& q->db_lock);
  {
    struct lock_class_key __key;
    
#line 2598 
    __raw_spin_lock_init(& q->db_lock.__anonCompField_spinlock_18.rlock,"&(&q->db_lock)->rlock",& __key);
  }
  
#line 2599 
  *(adap->sge.egr_map + (id - adap->sge.egr_start)) = (void *)q;
  
#line 2600 
  return;
}


#line 2602  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
int t4_sge_alloc_eth_txq(struct adapter *adap, struct sge_eth_txq *txq, struct net_device *dev, struct netdev_queue *netdevq, unsigned int iqid)
{
  int __retres;
  int ret;
  int nentries;
  struct fw_eq_eth_cmd c;
  void *tmp_1;
  int tmp_0;
  unsigned int tmp_8;
  unsigned long tmp_10;
  unsigned long tmp_9;
  
#line 2608 
  struct sge *s = & adap->sge;
  
#line 2609 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 2612 
  nentries = (int)(txq->q.size + s->stat_len / 64U);
  
#line 2616 
  tmp_0 = netdev_queue_numa_node_read((struct netdev_queue const *)netdevq);
  
#line 2614 
  ;
  
#line 2614 
  ;
  
#line 2614 
  ;
  
#line 2614 
  ;
  
#line 2614 
  ;
  
#line 2614 
  tmp_1 = alloc_ring(adap->pdev_dev,(unsigned long)txq->q.size,64UL,16UL,& txq->q.phys_addr,(void *)(& txq->q.sdesc),(unsigned long)s->stat_len,tmp_0);
  
#line 2614 
  txq->q.desc = (struct tx_desc *)tmp_1;
  
#line 2618 
  if (txq->q.desc == (struct tx_desc *)0) {
    
#line 2619 
    __retres = -12;
    
#line 2619 
    goto return_label;
  }
  else ;
  
#line 2621 
  memset((void *)(& c),0,48UL);
  
#line 2622 
  if (0 != 0) 
#line 2622 
              c.op_to_vfn = ((((adap->pf << 16) & 16776960U) | (adap->pf & 20224U)) | ((adap->pf << 8) >> 24)) | 45074U; else 
                                                                    
#line 2622 
                                                                    c.op_to_vfn = __fswab32((adap->pf << 8) | 313524224U);
  
#line 2626 
  c.alloc_to_len16 = 50331792U;
  
#line 2628 
  if (0 != 0) 
#line 2628 
              c.viid_pkd = ((((unsigned int)((int)pi->viid << 16) >> 8) & 65280U) | ((unsigned int)((int)pi->viid << 16) >> 24)) | 64U; else 
                                                                    
#line 2628 
                                                                    c.viid_pkd = __fswab32((unsigned int)((int)pi->viid << 16) | 1073741824U);
  
#line 2630 
  if (0 != 0) 
#line 2630 
              c.fetchszm_to_iqid = ((((((unsigned int)((int)pi->tx_chan << 16) | iqid) << 24) | ((((unsigned int)((int)pi->tx_chan << 16) | iqid) << 8) & 16711680U)) | ((((unsigned int)((int)pi->tx_chan << 16) | iqid) >> 8) & 40704U)) | (((unsigned int)((int)pi->tx_chan << 16) | iqid) >> 24)) | 24576U; else 
                                                                    
#line 2631 
                                                                    c.fetchszm_to_iqid = __fswab32(((unsigned int)((int)pi->tx_chan << 16) | iqid) | 6291456U);
  
#line 2634 
  if (0 != 0) 
#line 2634 
              c.dcaen_to_eqsize = (((((unsigned int)nentries << 24) | (((unsigned int)nentries << 8) & 16711680U)) | (((unsigned int)nentries >> 8) & 51712U)) | ((unsigned int)nentries >> 24)) | 13569U; else 
                                                                    
#line 2635 
                                                                    c.dcaen_to_eqsize = __fswab32((unsigned int)(nentries | 20250624));
  
#line 2639 
  if (0 != 0) 
#line 2639 
              c.eqaddr = (((((((txq->q.phys_addr << 56) | ((txq->q.phys_addr << 40) & 71776119061217280ULL)) | ((txq->q.phys_addr << 24) & 280375465082880ULL)) | ((txq->q.phys_addr << 8) & 1095216660480ULL)) | ((txq->q.phys_addr >> 8) & 4278190080ULL)) | ((txq->q.phys_addr >> 24) & 16711680ULL)) | ((txq->q.phys_addr >> 40) & 65280ULL)) | (txq->q.phys_addr >> 56); else 
                                                                    
#line 2639 
                                                                    c.eqaddr = __fswab64(txq->q.phys_addr);
  
#line 2641 
  ret = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& c),48,(void *)(& c));
  
#line 2642 
  if (ret != 0) {
    
#line 2643 
    kfree((void const *)txq->q.sdesc);
    
#line 2644 
    txq->q.sdesc = (struct tx_sw_desc *)0;
    
#line 2645 
    dma_free_attrs(adap->pdev_dev,(unsigned long)nentries * 64UL,(void *)txq->q.desc,txq->q.phys_addr,(struct dma_attrs *)0);
    
#line 2648 
    txq->q.desc = (struct tx_desc *)0;
    
#line 2649 
    __retres = ret;
    
#line 2649 
    goto return_label;
  }
  else ;
  
#line 2652 
  if (0 != 0) 
#line 2652 
              tmp_8 = ((((c.eqid_pkd << 24) | ((c.eqid_pkd << 8) & 16711680U)) | ((c.eqid_pkd >> 8) & 65280U)) | (c.eqid_pkd >> 24)) & 1048575U;
  else {
    __u32 tmp_7;
    
#line 2652 
    tmp_7 = __fswab32(c.eqid_pkd);
    
#line 2652 
    tmp_8 = tmp_7 & 1048575U;
  }
  
#line 2652 
  ;
  
#line 2652 
  ;
  
#line 2652 
  init_txq(adap,& txq->q,tmp_8);
  
#line 2653 
  txq->txq = netdevq;
  
#line 2654 
  tmp_10 = 0UL;
  
#line 2654 
  txq->vlan_ins = tmp_10;
  
#line 2654 
  tmp_9 = tmp_10;
  
#line 2654 
  txq->tx_cso = tmp_9;
  
#line 2654 
  txq->tso = tmp_9;
  
#line 2655 
  txq->mapping_err = 0UL;
  
#line 2656 
  __retres = 0;
  return_label: 
#line 2656 
                return __retres;
}


#line 2659  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
int t4_sge_alloc_ctrl_txq(struct adapter *adap, struct sge_ctrl_txq *txq, struct net_device *dev, unsigned int iqid, unsigned int cmplqid)
{
  int __retres;
  int ret;
  int nentries;
  struct fw_eq_ctrl_cmd c;
  void *tmp_1;
  int tmp_0;
  unsigned int tmp_8;
  
#line 2665 
  struct sge *s = & adap->sge;
  
#line 2666 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 2669 
  nentries = (int)(txq->q.size + s->stat_len / 64U);
  
#line 2672 
  tmp_0 = dev_to_node(adap->pdev_dev);
  
#line 2671 
  ;
  
#line 2671 
  ;
  
#line 2671 
  ;
  
#line 2671 
  tmp_1 = alloc_ring(adap->pdev_dev,(unsigned long)nentries,64UL,0UL,& txq->q.phys_addr,(void *)0,0UL,tmp_0);
  
#line 2671 
  txq->q.desc = (struct tx_desc *)tmp_1;
  
#line 2674 
  if (txq->q.desc == (struct tx_desc *)0) {
    
#line 2675 
    __retres = -12;
    
#line 2675 
    goto return_label;
  }
  else ;
  
#line 2677 
  if (0 != 0) 
#line 2677 
              c.op_to_vfn = ((((adap->pf << 16) & 16776960U) | (adap->pf & 20224U)) | ((adap->pf << 8) >> 24)) | 45075U; else 
                                                                    
#line 2677 
                                                                    c.op_to_vfn = __fswab32((adap->pf << 8) | 330301440U);
  
#line 2681 
  c.alloc_to_len16 = 33554576U;
  
#line 2683 
  if (0 != 0) 
#line 2683 
              c.cmpliqid_eqid = (((cmplqid << 20) >> 8) & 65280U) | ((cmplqid << 20) >> 24); else 
                                                                    
#line 2683 
                                                                    c.cmpliqid_eqid = __fswab32(cmplqid << 20);
  
#line 2684 
  c.physeqid_pkd = 0U;
  
#line 2685 
  if (0 != 0) 
#line 2685 
              c.fetchszm_to_iqid = ((((((unsigned int)((int)pi->tx_chan << 16) | iqid) << 24) | ((((unsigned int)((int)pi->tx_chan << 16) | iqid) << 8) & 16711680U)) | ((((unsigned int)((int)pi->tx_chan << 16) | iqid) >> 8) & 40704U)) | (((unsigned int)((int)pi->tx_chan << 16) | iqid) >> 24)) | 24576U; else 
                                                                    
#line 2686 
                                                                    c.fetchszm_to_iqid = __fswab32(((unsigned int)((int)pi->tx_chan << 16) | iqid) | 6291456U);
  
#line 2689 
  if (0 != 0) 
#line 2689 
              c.dcaen_to_eqsize = (((((unsigned int)nentries << 24) | (((unsigned int)nentries << 8) & 16711680U)) | (((unsigned int)nentries >> 8) & 51712U)) | ((unsigned int)nentries >> 24)) | 13569U; else 
                                                                    
#line 2690 
                                                                    c.dcaen_to_eqsize = __fswab32((unsigned int)(nentries | 20250624));
  
#line 2694 
  if (0 != 0) 
#line 2694 
              c.eqaddr = (((((((txq->q.phys_addr << 56) | ((txq->q.phys_addr << 40) & 71776119061217280ULL)) | ((txq->q.phys_addr << 24) & 280375465082880ULL)) | ((txq->q.phys_addr << 8) & 1095216660480ULL)) | ((txq->q.phys_addr >> 8) & 4278190080ULL)) | ((txq->q.phys_addr >> 24) & 16711680ULL)) | ((txq->q.phys_addr >> 40) & 65280ULL)) | (txq->q.phys_addr >> 56); else 
                                                                    
#line 2694 
                                                                    c.eqaddr = __fswab64(txq->q.phys_addr);
  
#line 2696 
  ret = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& c),32,(void *)(& c));
  
#line 2697 
  if (ret != 0) {
    
#line 2698 
    dma_free_attrs(adap->pdev_dev,(unsigned long)nentries * 64UL,(void *)txq->q.desc,txq->q.phys_addr,(struct dma_attrs *)0);
    
#line 2701 
    txq->q.desc = (struct tx_desc *)0;
    
#line 2702 
    __retres = ret;
    
#line 2702 
    goto return_label;
  }
  else ;
  
#line 2705 
  if (0 != 0) 
#line 2705 
              tmp_8 = ((((c.cmpliqid_eqid << 24) | ((c.cmpliqid_eqid << 8) & 16711680U)) | ((c.cmpliqid_eqid >> 8) & 65280U)) | (c.cmpliqid_eqid >> 24)) & 1048575U;
  else {
    __u32 tmp_7;
    
#line 2705 
    tmp_7 = __fswab32(c.cmpliqid_eqid);
    
#line 2705 
    tmp_8 = tmp_7 & 1048575U;
  }
  
#line 2705 
  ;
  
#line 2705 
  ;
  
#line 2705 
  init_txq(adap,& txq->q,tmp_8);
  
#line 2706 
  txq->adap = adap;
  
#line 2707 
  skb_queue_head_init(& txq->sendq);
  
#line 2708 
  ldv_tasklet_init_104(& txq->qresume_tsk,& restart_ctrlq,(unsigned long)txq);
  
#line 2709 
  txq->full = (unsigned char)0U;
  
#line 2710 
  __retres = 0;
  return_label: 
#line 2710 
                return __retres;
}


#line 2713  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
int t4_sge_alloc_ofld_txq(struct adapter *adap, struct sge_ofld_txq *txq, struct net_device *dev, unsigned int iqid)
{
  int __retres;
  int ret;
  int nentries;
  struct fw_eq_ofld_cmd c;
  unsigned int tmp_6;
  
#line 2718 
  struct sge *s = & adap->sge;
  
#line 2719 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 2722 
  nentries = (int)(txq->q.size + s->stat_len / 64U);
  
#line 2724 
  txq->q.desc = (struct tx_desc *)alloc_ring(adap->pdev_dev,(unsigned long)txq->q.size,64UL,16UL,& txq->q.phys_addr,(void *)(& txq->q.sdesc),(unsigned long)s->stat_len,-1);
  
#line 2728 
  if (txq->q.desc == (struct tx_desc *)0) {
    
#line 2729 
    __retres = -12;
    
#line 2729 
    goto return_label;
  }
  else ;
  
#line 2731 
  memset((void *)(& c),0,32UL);
  
#line 2732 
  if (0 != 0) 
#line 2732 
              c.op_to_vfn = ((((adap->pf << 16) & 16776960U) | (adap->pf & 20224U)) | ((adap->pf << 8) >> 24)) | 45089U; else 
                                                                    
#line 2732 
                                                                    c.op_to_vfn = __fswab32((adap->pf << 8) | 565182464U);
  
#line 2736 
  c.alloc_to_len16 = 33554576U;
  
#line 2738 
  if (0 != 0) 
#line 2738 
              c.fetchszm_to_iqid = ((((((unsigned int)((int)pi->tx_chan << 16) | iqid) << 24) | ((((unsigned int)((int)pi->tx_chan << 16) | iqid) << 8) & 16711680U)) | ((((unsigned int)((int)pi->tx_chan << 16) | iqid) >> 8) & 40704U)) | (((unsigned int)((int)pi->tx_chan << 16) | iqid) >> 24)) | 24576U; else 
                                                                    
#line 2739 
                                                                    c.fetchszm_to_iqid = __fswab32(((unsigned int)((int)pi->tx_chan << 16) | iqid) | 6291456U);
  
#line 2742 
  if (0 != 0) 
#line 2742 
              c.dcaen_to_eqsize = (((((unsigned int)nentries << 24) | (((unsigned int)nentries << 8) & 16711680U)) | (((unsigned int)nentries >> 8) & 51712U)) | ((unsigned int)nentries >> 24)) | 13569U; else 
                                                                    
#line 2743 
                                                                    c.dcaen_to_eqsize = __fswab32((unsigned int)(nentries | 20250624));
  
#line 2747 
  if (0 != 0) 
#line 2747 
              c.eqaddr = (((((((txq->q.phys_addr << 56) | ((txq->q.phys_addr << 40) & 71776119061217280ULL)) | ((txq->q.phys_addr << 24) & 280375465082880ULL)) | ((txq->q.phys_addr << 8) & 1095216660480ULL)) | ((txq->q.phys_addr >> 8) & 4278190080ULL)) | ((txq->q.phys_addr >> 24) & 16711680ULL)) | ((txq->q.phys_addr >> 40) & 65280ULL)) | (txq->q.phys_addr >> 56); else 
                                                                    
#line 2747 
                                                                    c.eqaddr = __fswab64(txq->q.phys_addr);
  
#line 2749 
  ret = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& c),32,(void *)(& c));
  
#line 2750 
  if (ret != 0) {
    
#line 2751 
    kfree((void const *)txq->q.sdesc);
    
#line 2752 
    txq->q.sdesc = (struct tx_sw_desc *)0;
    
#line 2753 
    dma_free_attrs(adap->pdev_dev,(unsigned long)nentries * 64UL,(void *)txq->q.desc,txq->q.phys_addr,(struct dma_attrs *)0);
    
#line 2756 
    txq->q.desc = (struct tx_desc *)0;
    
#line 2757 
    __retres = ret;
    
#line 2757 
    goto return_label;
  }
  else ;
  
#line 2760 
  if (0 != 0) 
#line 2760 
              tmp_6 = ((((c.eqid_pkd << 24) | ((c.eqid_pkd << 8) & 16711680U)) | ((c.eqid_pkd >> 8) & 65280U)) | (c.eqid_pkd >> 24)) & 1048575U;
  else {
    __u32 tmp_5;
    
#line 2760 
    tmp_5 = __fswab32(c.eqid_pkd);
    
#line 2760 
    tmp_6 = tmp_5 & 1048575U;
  }
  
#line 2760 
  ;
  
#line 2760 
  ;
  
#line 2760 
  init_txq(adap,& txq->q,tmp_6);
  
#line 2761 
  txq->adap = adap;
  
#line 2762 
  skb_queue_head_init(& txq->sendq);
  
#line 2763 
  ldv_tasklet_init_105(& txq->qresume_tsk,& restart_ofldq,(unsigned long)txq);
  
#line 2764 
  txq->full = (unsigned char)0U;
  
#line 2765 
  txq->mapping_err = 0UL;
  
#line 2766 
  __retres = 0;
  return_label: 
#line 2766 
                return __retres;
}


#line 2769  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void free_txq(struct adapter *adap, struct sge_txq *q)
{
  
#line 2771 
  struct sge *s = & adap->sge;
  
#line 2773 
  dma_free_attrs(adap->pdev_dev,(unsigned long)q->size * 64UL + (unsigned long)s->stat_len,(void *)q->desc,q->phys_addr,(struct dma_attrs *)0);
  
#line 2776 
  q->cntxt_id = 0U;
  
#line 2777 
  q->sdesc = (struct tx_sw_desc *)0;
  
#line 2778 
  q->desc = (struct tx_desc *)0;
  
#line 2779 
  return;
}


#line 2781  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static void free_rspq_fl(struct adapter *adap, struct sge_rspq *rq, struct sge_fl *fl)
{
  unsigned int tmp;
  u16 tmp_0;
  
#line 2784 
  struct sge *s = & adap->sge;
  
#line 2785 
  if (fl != (struct sge_fl *)0) 
#line 2785 
                                tmp = fl->cntxt_id; else 
#line 2785 
                                                         tmp = 65535U;
  
#line 2785 
  unsigned int fl_id = tmp;
  
#line 2787 
  *(adap->sge.ingr_map + ((unsigned int)rq->cntxt_id - adap->sge.ingr_start)) = (struct sge_rspq *)0;
  
#line 2788 
  t4_iq_free(adap,adap->mbox,adap->pf,0U,0U,(unsigned int)rq->cntxt_id,fl_id,65535U);
  
#line 2790 
  dma_free_attrs(adap->pdev_dev,(unsigned long)((rq->size + 1U) * rq->iqe_len),(void *)rq->desc,rq->phys_addr,(struct dma_attrs *)0);
  
#line 2792 
  napi_hash_del(& rq->napi);
  
#line 2793 
  netif_napi_del(& rq->napi);
  
#line 2794 
  rq->netdev = (struct net_device *)0;
  
#line 2795 
  tmp_0 = (unsigned short)0U;
  
#line 2795 
  rq->abs_id = tmp_0;
  
#line 2795 
  rq->cntxt_id = tmp_0;
  
#line 2796 
  rq->desc = (__be64 *)0ULL;
  
#line 2798 
  if (fl != (struct sge_fl *)0) {
    
#line 2799 
    free_rx_bufs(adap,fl,(int)fl->avail);
    
#line 2800 
    dma_free_attrs(adap->pdev_dev,(unsigned long)(fl->size * 8U + s->stat_len),(void *)fl->desc,fl->addr,(struct dma_attrs *)0);
    
#line 2802 
    kfree((void const *)fl->sdesc);
    
#line 2803 
    fl->sdesc = (struct rx_sw_desc *)0;
    
#line 2804 
    fl->cntxt_id = 0U;
    
#line 2805 
    fl->desc = (__be64 *)0ULL;
  }
  else ;
  
#line 2807 
  return;
}


#line 2817  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
void t4_free_ofld_rxqs(struct adapter *adap, int n, struct sge_ofld_rxq *q)
{
  
#line 2819 
  goto ldv_59307;
  ldv_59306: 
#line 2820 
  ;
  
#line 2820 
  if (q->rspq.desc != (__be64 *)0ULL) {
    struct sge_fl *tmp;
    
#line 2821 
    if (q->fl.size != 0U) 
#line 2821 
                          tmp = & q->fl; else 
#line 2821 
                                              tmp = (struct sge_fl *)0;
    
#line 2821 
    ;
    
#line 2821 
    ;
    
#line 2821 
    free_rspq_fl(adap,& q->rspq,tmp);
  }
  else ;
  
#line 2819 
  n -= 1;
  
#line 2819 
  q += 1;
  ldv_59307: 
#line 2820 
  ;
  
#line 2819 
  if (n != 0) 
#line 2821 
              goto ldv_59306; else 
#line 2824 
                                   goto ldv_59308;
  ldv_59308: 
#line 2825 
  ;
  
#line 2826 
  return;
}


#line 2831  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
void t4_free_sge_resources(struct adapter *adap)
{
  int i;
  
#line 2834 
  struct sge_eth_rxq *eq = (struct sge_eth_rxq *)(& adap->sge.ethrxq);
  
#line 2835 
  struct sge_eth_txq *etq = (struct sge_eth_txq *)(& adap->sge.ethtxq);
  
#line 2838 
  i = 0;
  
#line 2838 
  goto ldv_59316;
  ldv_59315: 
#line 2839 
  ;
  
#line 2839 
  if (eq->rspq.desc != (__be64 *)0ULL) {
    struct sge_fl *tmp;
    
#line 2840 
    if (eq->fl.size != 0U) 
#line 2840 
                           tmp = & eq->fl; else 
#line 2840 
                                                tmp = (struct sge_fl *)0;
    
#line 2840 
    ;
    
#line 2840 
    ;
    
#line 2840 
    free_rspq_fl(adap,& eq->rspq,tmp);
  }
  else ;
  
#line 2842 
  if (etq->q.desc != (struct tx_desc *)0) {
    
#line 2843 
    t4_eth_eq_free(adap,adap->mbox,adap->pf,0U,etq->q.cntxt_id);
    
#line 2845 
    free_tx_desc(adap,& etq->q,etq->q.in_use,(_Bool)1);
    
#line 2846 
    kfree((void const *)etq->q.sdesc);
    
#line 2847 
    free_txq(adap,& etq->q);
  }
  else ;
  
#line 2838 
  i += 1;
  
#line 2838 
  eq += 1;
  
#line 2838 
  etq += 1;
  ldv_59316: 
#line 2839 
  ;
  
#line 2838 
  if ((int)adap->sge.ethqsets > i) 
#line 2840 
                                   goto ldv_59315; else 
#line 2843 
                                                        goto ldv_59317;
  ldv_59317: 
#line 2844 
  ;
  
#line 2852 
  t4_free_ofld_rxqs(adap,(int)adap->sge.ofldqsets,(struct sge_ofld_rxq *)(& adap->sge.ofldrxq));
  
#line 2853 
  t4_free_ofld_rxqs(adap,(int)adap->sge.rdmaqs,(struct sge_ofld_rxq *)(& adap->sge.rdmarxq));
  
#line 2854 
  t4_free_ofld_rxqs(adap,(int)adap->sge.rdmaciqs,(struct sge_ofld_rxq *)(& adap->sge.rdmaciq));
  
#line 2857 
  i = 0;
  
#line 2857 
  goto ldv_59323;
  ldv_59322: 
#line 2858 
  ;
  {
    
#line 2858 
    struct sge_ofld_txq *q = & adap->sge.ofldtxq[i];
    
#line 2860 
    if (q->q.desc != (struct tx_desc *)0) {
      
#line 2861 
      tasklet_kill(& q->qresume_tsk);
      
#line 2862 
      t4_ofld_eq_free(adap,adap->mbox,adap->pf,0U,q->q.cntxt_id);
      
#line 2864 
      free_tx_desc(adap,& q->q,q->q.in_use,(_Bool)0);
      
#line 2865 
      kfree((void const *)q->q.sdesc);
      
#line 2866 
      __skb_queue_purge(& q->sendq);
      
#line 2867 
      free_txq(adap,& q->q);
    }
    else ;
  }
  
#line 2857 
  i += 1;
  ldv_59323: 
#line 2858 
  ;
  
#line 2857 
  if ((unsigned int)i <= 15U) 
#line 2859 
                              goto ldv_59322; else 
#line 2862 
                                                   goto ldv_59324;
  ldv_59324: 
#line 2863 
  ;
  
#line 2872 
  i = 0;
  
#line 2872 
  goto ldv_59330;
  ldv_59329: 
#line 2873 
  ;
  {
    
#line 2873 
    struct sge_ctrl_txq *cq = & adap->sge.ctrlq[i];
    
#line 2875 
    if (cq->q.desc != (struct tx_desc *)0) {
      
#line 2876 
      tasklet_kill(& cq->qresume_tsk);
      
#line 2877 
      t4_ctrl_eq_free(adap,adap->mbox,adap->pf,0U,cq->q.cntxt_id);
      
#line 2879 
      __skb_queue_purge(& cq->sendq);
      
#line 2880 
      free_txq(adap,& cq->q);
    }
    else ;
  }
  
#line 2872 
  i += 1;
  ldv_59330: 
#line 2873 
  ;
  
#line 2872 
  if ((unsigned int)i <= 3U) 
#line 2874 
                             goto ldv_59329; else 
#line 2877 
                                                  goto ldv_59331;
  ldv_59331: 
#line 2878 
  ;
  
#line 2884 
  if (adap->sge.fw_evtq.desc != (__be64 *)0ULL) 
#line 2885 
                                                free_rspq_fl(adap,& adap->sge.fw_evtq,(struct sge_fl *)0); else ;
  
#line 2887 
  if (adap->sge.intrq.desc != (__be64 *)0ULL) 
#line 2888 
                                              free_rspq_fl(adap,& adap->sge.intrq,(struct sge_fl *)0); else ;
  
#line 2891 
  memset((void *)adap->sge.egr_map,0,(unsigned long)adap->sge.egr_sz * 8UL);
  
#line 2893 
  return;
}


#line 2895  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
void t4_sge_start(struct adapter *adap)
{
  
#line 2897 
  adap->sge.ethtxq_rover = (unsigned short)0U;
  
#line 2898 
  ldv_mod_timer_106(& adap->sge.rx_timer,jiffies + 125UL);
  
#line 2899 
  ldv_mod_timer_107(& adap->sge.tx_timer,jiffies + 125UL);
  
#line 2900 
  return;
}


#line 2910  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
void t4_sge_stop(struct adapter *adap)
{
  int i;
  int tmp;
  
#line 2913 
  struct sge *s = & adap->sge;
  
#line 2915 
  tmp = preempt_count();
  
#line 2915 
  if (((unsigned long)tmp & 2096896UL) != 0UL) 
#line 2916 
                                               goto return_label; else ;
  
#line 2918 
  if (s->rx_timer.function != (void (*)(unsigned long ))0) 
#line 2919 
                                                           ldv_del_timer_sync_108(& s->rx_timer); else ;
  
#line 2920 
  if (s->tx_timer.function != (void (*)(unsigned long ))0) 
#line 2921 
                                                           ldv_del_timer_sync_109(& s->tx_timer); else ;
  
#line 2923 
  i = 0;
  
#line 2923 
  goto ldv_59345;
  ldv_59344: 
#line 2924 
  ;
  {
    
#line 2924 
    struct sge_ofld_txq *q = & s->ofldtxq[i];
    
#line 2926 
    if (q->q.desc != (struct tx_desc *)0) 
#line 2927 
                                          tasklet_kill(& q->qresume_tsk); else ;
  }
  
#line 2923 
  i += 1;
  ldv_59345: 
#line 2924 
  ;
  
#line 2923 
  if ((unsigned int)i <= 15U) 
#line 2925 
                              goto ldv_59344; else 
#line 2928 
                                                   goto ldv_59346;
  ldv_59346: 
#line 2929 
  ;
  
#line 2929 
  i = 0;
  
#line 2929 
  goto ldv_59352;
  ldv_59351: 
#line 2930 
  ;
  {
    
#line 2930 
    struct sge_ctrl_txq *cq = & s->ctrlq[i];
    
#line 2932 
    if (cq->q.desc != (struct tx_desc *)0) 
#line 2933 
                                           tasklet_kill(& cq->qresume_tsk); else ;
  }
  
#line 2929 
  i += 1;
  ldv_59352: 
#line 2930 
  ;
  
#line 2929 
  if ((unsigned int)i <= 3U) 
#line 2931 
                             goto ldv_59351; else 
#line 2934 
                                                  goto ldv_59353;
  ldv_59353: 
#line 2935 
  ;
  return_label: 
#line 2936 
                return;
}


#line 2945  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
static int t4_sge_init_soft(struct adapter *adap)
{
  int __retres;
  u32 fl_small_pg;
  u32 fl_large_pg;
  u32 fl_small_mtu;
  u32 fl_large_mtu;
  u32 timer_value_0_and_1;
  u32 timer_value_2_and_3;
  u32 timer_value_4_and_5;
  u32 ingress_rx_threshold;
  u32 tmp;
  unsigned int tmp_68;
  unsigned int tmp_70;
  unsigned int tmp_71;
  unsigned int tmp_72;
  unsigned int tmp_73;
  unsigned int tmp_74;
  unsigned int tmp_75;
  
#line 2947 
  struct sge *s = & adap->sge;
  
#line 2957 
  tmp = t4_read_reg(adap,4104U);
  
#line 2957 
  if ((tmp & 262144U) != 262144U) {
    
#line 2959 
    dev_err((struct device const *)adap->pdev_dev,"bad SGE CPL MODE\n");
    
#line 2960 
    __retres = -22;
    
#line 2960 
    goto return_label;
  }
  else ;
  
#line 2974 
  fl_small_pg = t4_read_reg(adap,4164U);
  
#line 2975 
  fl_large_pg = t4_read_reg(adap,4168U);
  
#line 2976 
  fl_small_mtu = t4_read_reg(adap,4172U);
  
#line 2977 
  fl_large_mtu = t4_read_reg(adap,4176U);
  
#line 2982 
  if (fl_large_pg <= fl_small_pg) 
#line 2983 
                                  fl_large_pg = 0U; else ;
  
#line 2990 
  if (fl_small_pg != 4096U || ((fl_large_pg + 4294967295U) & fl_large_pg) != 0U) {
    
#line 2992 
    dev_err((struct device const *)adap->pdev_dev,"bad SGE FL page buffer sizes [%d, %d]\n",fl_small_pg,fl_large_pg);
    
#line 2994 
    __retres = -22;
    
#line 2994 
    goto return_label;
  }
  else ;
  
#line 2996 
  if (fl_large_pg != 0U) {
    int tmp_67;
    
#line 2997 
    if (0 != 0) {
      int tmp_65;
      
#line 2997 
      if (fl_large_pg == 0U) {
        int tmp_0;
        
#line 2997 
        tmp_0 = ____ilog2_NaN();
        
#line 2997 
        tmp_65 = tmp_0 + -12;
      }
      else {
        int tmp_64;
        
#line 2997 
        if (((unsigned long long)fl_large_pg & 4611686018427387904ULL) == 0ULL) {
          int tmp_63;
          
#line 2997 
          if (((unsigned long long)fl_large_pg & 2305843009213693952ULL) == 0ULL) {
            int tmp_62;
            
#line 2997 
            if (((unsigned long long)fl_large_pg & 1152921504606846976ULL) == 0ULL) {
              int tmp_61;
              
#line 2997 
              if (((unsigned long long)fl_large_pg & 576460752303423488ULL) == 0ULL) {
                int tmp_60;
                
#line 2997 
                if (((unsigned long long)fl_large_pg & 288230376151711744ULL) == 0ULL) {
                  int tmp_59;
                  
#line 2997 
                  if (((unsigned long long)fl_large_pg & 144115188075855872ULL) == 0ULL) {
                    int tmp_58;
                    
#line 2997 
                    if (((unsigned long long)fl_large_pg & 72057594037927936ULL) == 0ULL) {
                      int tmp_57;
                      
#line 2997 
                      if (((unsigned long long)fl_large_pg & 36028797018963968ULL) == 0ULL) {
                        int tmp_56;
                        
#line 2997 
                        if (((unsigned long long)fl_large_pg & 18014398509481984ULL) == 0ULL) {
                          int tmp_55;
                          
#line 2997 
                          if (((unsigned long long)fl_large_pg & 9007199254740992ULL) == 0ULL) {
                            int tmp_54;
                            
#line 2997 
                            if (((unsigned long long)fl_large_pg & 4503599627370496ULL) == 0ULL) {
                              int tmp_53;
                              
#line 2997 
                              if (((unsigned long long)fl_large_pg & 2251799813685248ULL) == 0ULL) {
                                int tmp_52;
                                
#line 2997 
                                if (((unsigned long long)fl_large_pg & 1125899906842624ULL) == 0ULL) {
                                  int tmp_51;
                                  
#line 2997 
                                  if (((unsigned long long)fl_large_pg & 562949953421312ULL) == 0ULL) {
                                    int tmp_50;
                                    
#line 2997 
                                    if (((unsigned long long)fl_large_pg & 281474976710656ULL) == 0ULL) {
                                      int tmp_49;
                                      
#line 2997 
                                      if (((unsigned long long)fl_large_pg & 140737488355328ULL) == 0ULL) {
                                        int tmp_48;
                                        
#line 2997 
                                        if (((unsigned long long)fl_large_pg & 70368744177664ULL) == 0ULL) {
                                          int tmp_47;
                                          
#line 2997 
                                          if (((unsigned long long)fl_large_pg & 35184372088832ULL) == 0ULL) {
                                            int tmp_46;
                                            
#line 2997 
                                            if (((unsigned long long)fl_large_pg & 17592186044416ULL) == 0ULL) {
                                              int tmp_45;
                                              
#line 2997 
                                              if (((unsigned long long)fl_large_pg & 8796093022208ULL) == 0ULL) {
                                                int tmp_44;
                                                
#line 2997 
                                                if (((unsigned long long)fl_large_pg & 4398046511104ULL) == 0ULL) {
                                                  int tmp_43;
                                                  
#line 2997 
                                                  if (((unsigned long long)fl_large_pg & 2199023255552ULL) == 0ULL) {
                                                    int tmp_42;
                                                    
#line 2997 
                                                    if (((unsigned long long)fl_large_pg & 1099511627776ULL) == 0ULL) {
                                                      int tmp_41;
                                                      
#line 2997 
                                                      if (((unsigned long long)fl_large_pg & 549755813888ULL) == 0ULL) {
                                                        int tmp_40;
                                                        
#line 2997 
                                                        if (((unsigned long long)fl_large_pg & 274877906944ULL) == 0ULL) {
                                                          int tmp_39;
                                                          
#line 2997 
                                                          if (((unsigned long long)fl_large_pg & 137438953472ULL) == 0ULL) {
                                                            int tmp_38;
                                                            
#line 2997 
                                                            if (((unsigned long long)fl_large_pg & 68719476736ULL) == 0ULL) {
                                                              int tmp_37;
                                                              
#line 2997 
                                                              if (((unsigned long long)fl_large_pg & 34359738368ULL) == 0ULL) {
                                                                int tmp_36;
                                                                
#line 2997 
                                                                if (((unsigned long long)fl_large_pg & 17179869184ULL) == 0ULL) {
                                                                  int tmp_35;
                                                                  
#line 2997 
                                                                  if (
                                                                    ((unsigned long long)fl_large_pg & 8589934592ULL) == 0ULL) {
                                                                    int tmp_34;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 4294967296ULL) == 0ULL) {
                                                                    int tmp_33;
                                                                    
#line 2997 
                                                                    if (
                                                                    fl_large_pg >= (u32)0) {
                                                                    int tmp_32;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 1073741824ULL) == 0ULL) {
                                                                    int tmp_31;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 536870912ULL) == 0ULL) {
                                                                    int tmp_30;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 268435456ULL) == 0ULL) {
                                                                    int tmp_29;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 134217728ULL) == 0ULL) {
                                                                    int tmp_28;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 67108864ULL) == 0ULL) {
                                                                    int tmp_27;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 33554432ULL) == 0ULL) {
                                                                    int tmp_26;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 16777216ULL) == 0ULL) {
                                                                    int tmp_25;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 8388608ULL) == 0ULL) {
                                                                    int tmp_24;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 4194304ULL) == 0ULL) {
                                                                    int tmp_23;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 2097152ULL) == 0ULL) {
                                                                    int tmp_22;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 1048576ULL) == 0ULL) {
                                                                    int tmp_21;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 524288ULL) == 0ULL) {
                                                                    int tmp_20;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 262144ULL) == 0ULL) {
                                                                    int tmp_19;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 131072ULL) == 0ULL) {
                                                                    int tmp_18;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 65536ULL) == 0ULL) {
                                                                    int tmp_17;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 32768ULL) == 0ULL) {
                                                                    int tmp_16;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 16384ULL) == 0ULL) {
                                                                    int tmp_15;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 8192ULL) == 0ULL) {
                                                                    int tmp_14;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 4096ULL) == 0ULL) {
                                                                    int tmp_13;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 2048ULL) == 0ULL) {
                                                                    int tmp_12;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 1024ULL) == 0ULL) {
                                                                    int tmp_11;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 512ULL) == 0ULL) {
                                                                    int tmp_10;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 256ULL) == 0ULL) {
                                                                    int tmp_9;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 128ULL) == 0ULL) {
                                                                    int tmp_8;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 64ULL) == 0ULL) {
                                                                    int tmp_7;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 32ULL) == 0ULL) {
                                                                    int tmp_6;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 16ULL) == 0ULL) {
                                                                    int tmp_5;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 8ULL) == 0ULL) {
                                                                    int tmp_4;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 4ULL) == 0ULL) {
                                                                    int tmp_3;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 2ULL) == 0ULL) {
                                                                    int tmp_2;
                                                                    
#line 2997 
                                                                    if (
                                                                    ((unsigned long long)fl_large_pg & 1ULL) == 0ULL) {
                                                                    int tmp_1;
                                                                    
#line 2997 
                                                                    tmp_1 = ____ilog2_NaN();
                                                                    
#line 2997 
                                                                    tmp_2 = tmp_1 + -12;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_2 = -12;
                                                                    
#line 2997 
                                                                    tmp_3 = tmp_2;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_3 = -11;
                                                                    
#line 2997 
                                                                    tmp_4 = tmp_3;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_4 = -10;
                                                                    
#line 2997 
                                                                    tmp_5 = tmp_4;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_5 = -9;
                                                                    
#line 2997 
                                                                    tmp_6 = tmp_5;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_6 = -8;
                                                                    
#line 2997 
                                                                    tmp_7 = tmp_6;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_7 = -7;
                                                                    
#line 2997 
                                                                    tmp_8 = tmp_7;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_8 = -6;
                                                                    
#line 2997 
                                                                    tmp_9 = tmp_8;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_9 = -5;
                                                                    
#line 2997 
                                                                    tmp_10 = tmp_9;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_10 = -4;
                                                                    
#line 2997 
                                                                    tmp_11 = tmp_10;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_11 = -3;
                                                                    
#line 2997 
                                                                    tmp_12 = tmp_11;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_12 = -2;
                                                                    
#line 2997 
                                                                    tmp_13 = tmp_12;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_13 = -1;
                                                                    
#line 2997 
                                                                    tmp_14 = tmp_13;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_14 = 0;
                                                                    
#line 2997 
                                                                    tmp_15 = tmp_14;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_15 = 1;
                                                                    
#line 2997 
                                                                    tmp_16 = tmp_15;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_16 = 2;
                                                                    
#line 2997 
                                                                    tmp_17 = tmp_16;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_17 = 3;
                                                                    
#line 2997 
                                                                    tmp_18 = tmp_17;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_18 = 4;
                                                                    
#line 2997 
                                                                    tmp_19 = tmp_18;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_19 = 5;
                                                                    
#line 2997 
                                                                    tmp_20 = tmp_19;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_20 = 6;
                                                                    
#line 2997 
                                                                    tmp_21 = tmp_20;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_21 = 7;
                                                                    
#line 2997 
                                                                    tmp_22 = tmp_21;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_22 = 8;
                                                                    
#line 2997 
                                                                    tmp_23 = tmp_22;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_23 = 9;
                                                                    
#line 2997 
                                                                    tmp_24 = tmp_23;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_24 = 10;
                                                                    
#line 2997 
                                                                    tmp_25 = tmp_24;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_25 = 11;
                                                                    
#line 2997 
                                                                    tmp_26 = tmp_25;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_26 = 12;
                                                                    
#line 2997 
                                                                    tmp_27 = tmp_26;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_27 = 13;
                                                                    
#line 2997 
                                                                    tmp_28 = tmp_27;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_28 = 14;
                                                                    
#line 2997 
                                                                    tmp_29 = tmp_28;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_29 = 15;
                                                                    
#line 2997 
                                                                    tmp_30 = tmp_29;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_30 = 16;
                                                                    
#line 2997 
                                                                    tmp_31 = tmp_30;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_31 = 17;
                                                                    
#line 2997 
                                                                    tmp_32 = tmp_31;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_32 = 18;
                                                                    
#line 2997 
                                                                    tmp_33 = tmp_32;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_33 = 19;
                                                                    
#line 2997 
                                                                    tmp_34 = tmp_33;
                                                                    }
                                                                    else 
                                                                    
#line 2997 
                                                                    tmp_34 = 20;
                                                                    
#line 2997 
                                                                    tmp_35 = tmp_34;
                                                                  }
                                                                  else 
                                                                    
#line 2997 
                                                                    tmp_35 = 21;
                                                                  
#line 2997 
                                                                  tmp_36 = tmp_35;
                                                                }
                                                                else 
                                                                  
#line 2997 
                                                                  tmp_36 = 22;
                                                                
#line 2997 
                                                                tmp_37 = tmp_36;
                                                              }
                                                              else 
#line 2997 
                                                                   tmp_37 = 23;
                                                              
#line 2997 
                                                              tmp_38 = tmp_37;
                                                            }
                                                            else 
#line 2997 
                                                                 tmp_38 = 24;
                                                            
#line 2997 
                                                            tmp_39 = tmp_38;
                                                          }
                                                          else 
#line 2997 
                                                               tmp_39 = 25;
                                                          
#line 2997 
                                                          tmp_40 = tmp_39;
                                                        }
                                                        else 
#line 2997 
                                                             tmp_40 = 26;
                                                        
#line 2997 
                                                        tmp_41 = tmp_40;
                                                      }
                                                      else 
#line 2997 
                                                           tmp_41 = 27;
                                                      
#line 2997 
                                                      tmp_42 = tmp_41;
                                                    }
                                                    else 
#line 2997 
                                                         tmp_42 = 28;
                                                    
#line 2997 
                                                    tmp_43 = tmp_42;
                                                  }
                                                  else 
#line 2997 
                                                       tmp_43 = 29;
                                                  
#line 2997 
                                                  tmp_44 = tmp_43;
                                                }
                                                else 
#line 2997 
                                                     tmp_44 = 30;
                                                
#line 2997 
                                                tmp_45 = tmp_44;
                                              }
                                              else 
#line 2997 
                                                   tmp_45 = 31;
                                              
#line 2997 
                                              tmp_46 = tmp_45;
                                            }
                                            else 
#line 2997 
                                                 tmp_46 = 32;
                                            
#line 2997 
                                            tmp_47 = tmp_46;
                                          }
                                          else 
#line 2997 
                                               tmp_47 = 33;
                                          
#line 2997 
                                          tmp_48 = tmp_47;
                                        }
                                        else 
#line 2997 
                                             tmp_48 = 34;
                                        
#line 2997 
                                        tmp_49 = tmp_48;
                                      }
                                      else 
#line 2997 
                                           tmp_49 = 35;
                                      
#line 2997 
                                      tmp_50 = tmp_49;
                                    }
                                    else 
#line 2997 
                                         tmp_50 = 36;
                                    
#line 2997 
                                    tmp_51 = tmp_50;
                                  }
                                  else 
#line 2997 
                                       tmp_51 = 37;
                                  
#line 2997 
                                  tmp_52 = tmp_51;
                                }
                                else 
#line 2997 
                                     tmp_52 = 38;
                                
#line 2997 
                                tmp_53 = tmp_52;
                              }
                              else 
#line 2997 
                                   tmp_53 = 39;
                              
#line 2997 
                              tmp_54 = tmp_53;
                            }
                            else 
#line 2997 
                                 tmp_54 = 40;
                            
#line 2997 
                            tmp_55 = tmp_54;
                          }
                          else 
#line 2997 
                               tmp_55 = 41;
                          
#line 2997 
                          tmp_56 = tmp_55;
                        }
                        else 
#line 2997 
                             tmp_56 = 42;
                        
#line 2997 
                        tmp_57 = tmp_56;
                      }
                      else 
#line 2997 
                           tmp_57 = 43;
                      
#line 2997 
                      tmp_58 = tmp_57;
                    }
                    else 
#line 2997 
                         tmp_58 = 44;
                    
#line 2997 
                    tmp_59 = tmp_58;
                  }
                  else 
#line 2997 
                       tmp_59 = 45;
                  
#line 2997 
                  tmp_60 = tmp_59;
                }
                else 
#line 2997 
                     tmp_60 = 46;
                
#line 2997 
                tmp_61 = tmp_60;
              }
              else 
#line 2997 
                   tmp_61 = 47;
              
#line 2997 
              tmp_62 = tmp_61;
            }
            else 
#line 2997 
                 tmp_62 = 48;
            
#line 2997 
            tmp_63 = tmp_62;
          }
          else 
#line 2997 
               tmp_63 = 49;
          
#line 2997 
          tmp_64 = tmp_63;
        }
        else 
#line 2997 
             tmp_64 = 50;
        
#line 2997 
        tmp_65 = tmp_64;
      }
      
#line 2997 
      tmp_67 = tmp_65;
    }
    else {
      int tmp_66;
      
#line 2997 
      tmp_66 = __ilog2_u32(fl_large_pg);
      
#line 2997 
      tmp_67 = tmp_66 + -12;
    }
    
#line 2997 
    s->fl_pg_order = (unsigned int)tmp_67;
  }
  else ;
  
#line 2999 
  tmp_68 = fl_mtu_bufsize(adap,1500U);
  
#line 2999 
  ;
  
#line 2999 
  if (tmp_68 > fl_small_mtu) 
#line 2999 
                             goto _LOR;
  else {
    unsigned int tmp_69;
    
#line 3000 
    tmp_69 = fl_mtu_bufsize(adap,9000U);
    
#line 3000 
    ;
    
#line 3000 
    if (tmp_69 > fl_large_mtu) {
      _LOR: {
              
#line 3001 
              dev_err((struct device const *)adap->pdev_dev,"bad SGE FL MTU sizes [%d, %d]\n",fl_small_mtu,fl_large_mtu);
              
#line 3003 
              __retres = -22;
              
#line 3003 
              goto return_label;
            }
    }
    else ;
  }
  
#line 3010 
  timer_value_0_and_1 = t4_read_reg(adap,4280U);
  
#line 3011 
  timer_value_2_and_3 = t4_read_reg(adap,4284U);
  
#line 3012 
  timer_value_4_and_5 = t4_read_reg(adap,4288U);
  
#line 3013 
  tmp_70 = core_ticks_to_us((struct adapter const *)adap,timer_value_0_and_1 >> 16);
  
#line 3013 
  s->timer_val[0] = (unsigned short)tmp_70;
  
#line 3015 
  tmp_71 = core_ticks_to_us((struct adapter const *)adap,timer_value_0_and_1 & 65535U);
  
#line 3015 
  s->timer_val[1] = (unsigned short)tmp_71;
  
#line 3017 
  tmp_72 = core_ticks_to_us((struct adapter const *)adap,timer_value_2_and_3 >> 16);
  
#line 3017 
  s->timer_val[2] = (unsigned short)tmp_72;
  
#line 3019 
  tmp_73 = core_ticks_to_us((struct adapter const *)adap,timer_value_2_and_3 & 65535U);
  
#line 3019 
  s->timer_val[3] = (unsigned short)tmp_73;
  
#line 3021 
  tmp_74 = core_ticks_to_us((struct adapter const *)adap,timer_value_4_and_5 >> 16);
  
#line 3021 
  s->timer_val[4] = (unsigned short)tmp_74;
  
#line 3023 
  tmp_75 = core_ticks_to_us((struct adapter const *)adap,timer_value_4_and_5 & 65535U);
  
#line 3023 
  s->timer_val[5] = (unsigned short)tmp_75;
  
#line 3026 
  ingress_rx_threshold = t4_read_reg(adap,4256U);
  
#line 3027 
  s->counter_val[0] = (unsigned char)((unsigned int)((unsigned char)(ingress_rx_threshold >> 24)) & 63U);
  
#line 3028 
  s->counter_val[1] = (unsigned char)((unsigned int)((unsigned char)(ingress_rx_threshold >> 16)) & 63U);
  
#line 3029 
  s->counter_val[2] = (unsigned char)((unsigned int)((unsigned char)(ingress_rx_threshold >> 8)) & 63U);
  
#line 3030 
  s->counter_val[3] = (unsigned char)((unsigned int)((unsigned char)ingress_rx_threshold) & 63U);
  
#line 3032 
  __retres = 0;
  return_label: 
#line 3032 
                return __retres;
}


#line 3042  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/sge.c"
int t4_sge_init(struct adapter *adap)
{
  int __retres;
  u32 sge_control;
  u32 sge_control2;
  u32 sge_conm_ctrl;
  unsigned int ingpadboundary;
  unsigned int ingpackboundary;
  int ret;
  int egress_threshold;
  int tmp;
  int tmp_2;
  int tmp_3;
  
#line 3044 
  struct sge *s = & adap->sge;
  
#line 3053 
  sge_control = t4_read_reg(adap,4104U);
  
#line 3054 
  s->pktshift = (sge_control >> 10) & 7U;
  
#line 3055 
  if ((sge_control & 131072U) != 0U) 
#line 3055 
                                     tmp = 128; else 
#line 3055 
                                                     tmp = 64;
  
#line 3055 
  s->stat_len = (unsigned int)tmp;
  
#line 3067 
  ingpadboundary = (unsigned int)(1 << (((sge_control >> 4) & 7U) + 5U));
  
#line 3069 
  tmp_2 = is_t4(adap->params.chip);
  
#line 3069 
  if (tmp_2 != 0) 
#line 3070 
                  s->fl_align = ingpadboundary;
  else {
    unsigned int tmp_1;
    
#line 3075 
    sge_control2 = t4_read_reg(adap,4388U);
    
#line 3076 
    ingpackboundary = (sge_control2 >> 16) & 7U;
    
#line 3077 
    if (ingpackboundary == 0U) 
#line 3078 
                               ingpackboundary = 16U; else 
#line 3080 
                                                           ingpackboundary = (unsigned int)(1 << (ingpackboundary + 5U));
    {
      unsigned int tmp_0;
      
#line 3083 
      unsigned int _max1 = ingpadboundary;
      
#line 3083 
      unsigned int _max2 = ingpackboundary;
      
#line 3083 
      if (_max1 > _max2) 
#line 3083 
                         tmp_0 = _max1; else 
#line 3083 
                                             tmp_0 = _max2;
      
#line 3083 
      tmp_1 = tmp_0;
    }
    
#line 3083 
    s->fl_align = tmp_1;
  }
  
#line 3086 
  ret = t4_sge_init_soft(adap);
  
#line 3087 
  if (ret < 0) {
    
#line 3088 
    __retres = ret;
    
#line 3088 
    goto return_label;
  }
  else ;
  
#line 3102 
  sge_conm_ctrl = t4_read_reg(adap,4244U);
  
#line 3103 
  tmp_3 = is_t4(adap->params.chip);
  
#line 3103 
  if (tmp_3 != 0) 
#line 3104 
                  egress_threshold = (int)(sge_conm_ctrl >> 8) & 63; else 
                                                                    
#line 3106 
                                                                    egress_threshold = (int)(sge_conm_ctrl >> 14) & 63;
  
#line 3107 
  s->fl_starve_thres = (unsigned int)(egress_threshold * 2 + 1);
  
#line 3109 
  t4_idma_monitor_init(adap,& s->idma_monitor);
  {
    struct lock_class_key __key;
    
#line 3114 
    init_timer_key(& s->rx_timer,0U,"((&s->rx_timer))",& __key);
  }
  
#line 3114 
  s->rx_timer.function = & sge_rx_timer_cb;
  
#line 3114 
  s->rx_timer.data = (unsigned long)adap;
  {
    struct lock_class_key __key_0;
    
#line 3115 
    init_timer_key(& s->tx_timer,0U,"((&s->tx_timer))",& __key_0);
  }
  
#line 3115 
  s->tx_timer.function = & sge_tx_timer_cb;
  
#line 3115 
  s->tx_timer.data = (unsigned long)adap;
  
#line 3117 
  spinlock_check(& s->intrq_lock);
  {
    struct lock_class_key __key_1;
    
#line 3117 
    __raw_spin_lock_init(& s->intrq_lock.__anonCompField_spinlock_18.rlock,"&(&s->intrq_lock)->rlock",& __key_1);
  }
  
#line 3119 
  __retres = 0;
  return_label: 
#line 3119 
                return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
void (*ldv_emg_alias_None_2)(unsigned long ) = & restart_ofldq;

#line 59 
int ldv_emg_del_timer_sync(struct timer_list *arg0);


#line 60 
void ldv_emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2);


#line 72 
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1);


#line 129  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void atomic_inc(atomic_t *v)
{
  
#line 132 
  ldv_atomic_inc(v);
  
#line 133 
  return;
}


#line 641  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static int ldv_spin_trylock_63(spinlock_t *lock)
{
  int __retres;
  
#line 645 
  ldv_func_ret_type ldv_func_res = spin_trylock(lock);
  
#line 647 
  int is_spin_held_by_another_thread = ldv_undef_int();
  
#line 649 
  if (is_spin_held_by_another_thread != 0) {
    
#line 652 
    __retres = 0;
    
#line 652 
    goto return_label;
  }
  else {
    
#line 655 
    ldv_spin_model_lock((char *)"_xmit_lock_of_netdev_queue");
    
#line 657 
    __retres = 1;
    
#line 657 
    goto return_label;
  }
  
#line 660 
  __retres = ldv_func_res;
  return_label: 
#line 660 
                return __retres;
}


#line 664  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_unlock_64(spinlock_t *lock)
{
  
#line 668 
  ldv_spin_model_unlock((char *)"_xmit_lock_of_netdev_queue");
  
#line 670 
  spin_unlock_1(lock);
  
#line 671 
  return;
}


#line 764  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_lock_74(spinlock_t *lock)
{
  
#line 768 
  ldv_spin_model_lock((char *)"bpoll_lock_of_sge_rspq");
  
#line 770 
  spin_lock_1(lock);
  
#line 771 
  return;
}


#line 774  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_unlock_75(spinlock_t *lock)
{
  
#line 778 
  ldv_spin_model_unlock((char *)"bpoll_lock_of_sge_rspq");
  
#line 780 
  spin_unlock_1(lock);
  
#line 781 
  return;
}


#line 784  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_lock_76_0(spinlock_t *lock)
{
  
#line 788 
  ldv_spin_model_lock((char *)"bpoll_lock_of_sge_rspq");
  
#line 790 
  spin_lock_1(lock);
  
#line 791 
  return;
}


#line 794  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_unlock_77_0(spinlock_t *lock)
{
  
#line 798 
  ldv_spin_model_unlock((char *)"bpoll_lock_of_sge_rspq");
  
#line 800 
  spin_unlock_1(lock);
  
#line 801 
  return;
}


#line 804  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_lock_bh_78(spinlock_t *lock)
{
  
#line 808 
  ldv_spin_model_lock((char *)"bpoll_lock_of_sge_rspq");
  
#line 810 
  spin_lock_bh_0(lock);
  
#line 811 
  return;
}


#line 814  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_unlock_bh_79(spinlock_t *lock)
{
  
#line 818 
  ldv_spin_model_unlock((char *)"bpoll_lock_of_sge_rspq");
  
#line 820 
  spin_unlock_bh_0(lock);
  
#line 821 
  return;
}


#line 824  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_lock_bh_80(spinlock_t *lock)
{
  
#line 828 
  ldv_spin_model_lock((char *)"bpoll_lock_of_sge_rspq");
  
#line 830 
  spin_lock_bh_0(lock);
  
#line 831 
  return;
}


#line 834  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_unlock_bh_81(spinlock_t *lock)
{
  
#line 838 
  ldv_spin_model_unlock((char *)"bpoll_lock_of_sge_rspq");
  
#line 840 
  spin_unlock_bh_0(lock);
  
#line 841 
  return;
}


#line 844  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv___ldv_spin_lock_82(spinlock_t *ldv_func_arg1)
{
  
#line 848 
  ldv_spin_model_lock((char *)"db_lock_of_sge_txq");
  
#line 850 
  __ldv_spin_lock(ldv_func_arg1);
  
#line 851 
  return;
}


#line 854  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_unlock_irqrestore_83(spinlock_t *lock, unsigned long flags)
{
  
#line 858 
  ldv_spin_model_unlock((char *)"db_lock_of_sge_txq");
  
#line 860 
  spin_unlock_irqrestore_0(lock,flags);
  
#line 861 
  return;
}


#line 864  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_lock_84_0(spinlock_t *lock)
{
  
#line 868 
  ldv_spin_model_lock((char *)"lock_of_sk_buff_head");
  
#line 870 
  spin_lock_1(lock);
  
#line 871 
  return;
}


#line 874  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_unlock_85_0(spinlock_t *lock)
{
  
#line 878 
  ldv_spin_model_unlock((char *)"lock_of_sk_buff_head");
  
#line 880 
  spin_unlock_1(lock);
  
#line 881 
  return;
}


#line 884  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_unlock_86(spinlock_t *lock)
{
  
#line 888 
  ldv_spin_model_unlock((char *)"lock_of_sk_buff_head");
  
#line 890 
  spin_unlock_1(lock);
  
#line 891 
  return;
}


#line 894  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_lock_87(spinlock_t *lock)
{
  
#line 898 
  ldv_spin_model_lock((char *)"lock_of_sk_buff_head");
  
#line 900 
  spin_lock_1(lock);
  
#line 901 
  return;
}


#line 904  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_unlock_88(spinlock_t *lock)
{
  
#line 908 
  ldv_spin_model_unlock((char *)"lock_of_sk_buff_head");
  
#line 910 
  spin_unlock_1(lock);
  
#line 911 
  return;
}


#line 914  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_lock_89(spinlock_t *lock)
{
  
#line 918 
  ldv_spin_model_lock((char *)"lock_of_sk_buff_head");
  
#line 920 
  spin_lock_1(lock);
  
#line 921 
  return;
}


#line 924  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_lock_90_0(spinlock_t *lock)
{
  
#line 928 
  ldv_spin_model_lock((char *)"lock_of_sk_buff_head");
  
#line 930 
  spin_lock_1(lock);
  
#line 931 
  return;
}


#line 934  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_unlock_91_0(spinlock_t *lock)
{
  
#line 938 
  ldv_spin_model_unlock((char *)"lock_of_sk_buff_head");
  
#line 940 
  spin_unlock_1(lock);
  
#line 941 
  return;
}


#line 944  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_unlock_92(spinlock_t *lock)
{
  
#line 948 
  ldv_spin_model_unlock((char *)"lock_of_sk_buff_head");
  
#line 950 
  spin_unlock_1(lock);
  
#line 951 
  return;
}


#line 954  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_lock_93(spinlock_t *lock)
{
  
#line 958 
  ldv_spin_model_lock((char *)"lock_of_sk_buff_head");
  
#line 960 
  spin_lock_1(lock);
  
#line 961 
  return;
}


#line 964  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_lock_94(spinlock_t *lock)
{
  
#line 968 
  ldv_spin_model_lock((char *)"lock_of_sk_buff_head");
  
#line 970 
  spin_lock_1(lock);
  
#line 971 
  return;
}


#line 974  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_lock_95(spinlock_t *lock)
{
  
#line 978 
  ldv_spin_model_lock((char *)"lock_of_sk_buff_head");
  
#line 980 
  spin_lock_1(lock);
  
#line 981 
  return;
}


#line 984  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_unlock_96(spinlock_t *lock)
{
  
#line 988 
  ldv_spin_model_unlock((char *)"lock_of_sk_buff_head");
  
#line 990 
  spin_unlock_1(lock);
  
#line 991 
  return;
}


#line 994  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_lock_97(spinlock_t *lock)
{
  
#line 998 
  ldv_spin_model_lock((char *)"lock_of_sk_buff_head");
  
#line 1000 
  spin_lock_1(lock);
  
#line 1001 
  return;
}


#line 1004  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_unlock_98(spinlock_t *lock)
{
  
#line 1008 
  ldv_spin_model_unlock((char *)"lock_of_sk_buff_head");
  
#line 1010 
  spin_unlock_1(lock);
  
#line 1011 
  return;
}


#line 1014  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_lock_99(spinlock_t *lock)
{
  
#line 1018 
  ldv_spin_model_lock((char *)"intrq_lock_of_sge");
  
#line 1020 
  spin_lock_1(lock);
  
#line 1021 
  return;
}


#line 1024  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_spin_unlock_100(spinlock_t *lock)
{
  
#line 1028 
  ldv_spin_model_unlock((char *)"intrq_lock_of_sge");
  
#line 1030 
  spin_unlock_1(lock);
  
#line 1031 
  return;
}


#line 1034  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static int ldv_mod_timer_101(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1038 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1038 
  return tmp;
}


#line 1042  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_tasklet_schedule_102(struct tasklet_struct *t)
{
  
#line 1046 
  ldv_emg_tasklet_schedule(t);
  
#line 1047 
  return;
}


#line 1050  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static int ldv_mod_timer_103(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1054 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1054 
  return tmp;
}


#line 1058  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_tasklet_init_104(struct tasklet_struct *ldv_func_arg1, void (*ldv_func_arg2)(unsigned long ), unsigned long ldv_func_arg3)
{
  
#line 1062 
  ldv_emg_tasklet_init(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
  
#line 1063 
  return;
}


#line 1066  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static void ldv_tasklet_init_105(struct tasklet_struct *ldv_func_arg1, void (*ldv_func_arg2)(unsigned long ), unsigned long ldv_func_arg3)
{
  
#line 1070 
  ldv_emg_tasklet_init(ldv_func_arg1,ldv_func_arg2,ldv_func_arg3);
  
#line 1071 
  return;
}


#line 1074  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static int ldv_mod_timer_106(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1078 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1078 
  return tmp;
}


#line 1082  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static int ldv_mod_timer_107(struct timer_list *ldv_func_arg1, unsigned long ldv_func_arg2)
{
  int tmp;
  
#line 1086 
  tmp = ldv_emg_mod_timer(ldv_func_arg1,ldv_func_arg2);
  
#line 1086 
  return tmp;
}


#line 1090  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static int ldv_del_timer_sync_108(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1094 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1094 
  return tmp;
}


#line 1098  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_sge.c.aux"
static int ldv_del_timer_sync_109(struct timer_list *ldv_func_arg1)
{
  int tmp;
  
#line 1102 
  tmp = ldv_emg_del_timer_sync(ldv_func_arg1);
  
#line 1102 
  return tmp;
}


#line 26  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
size_t strlcpy(char *, char const *, size_t);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_2(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 366 
static void ldv_spin_lock_81(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_83(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_2(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 415 
static void ldv_spin_unlock_82(spinlock_t *lock);


#line 419 
static void ldv_spin_unlock_84(spinlock_t *lock);


#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/slab.h"
static void *kmalloc_1(size_t size, gfp_t flags);


#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static void ethtool_cmd_speed_set(struct ethtool_cmd *ep, __u32 speed)
{
  
#line 117 
  ep->speed = (unsigned short)speed;
  
#line 118 
  ep->speed_hi = (unsigned short)(speed >> 16);
  
#line 119 
  return;
}


#line 121  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/uapi/linux/ethtool.h"
__inline static __u32 ethtool_cmd_speed(struct ethtool_cmd const *ep)
{
  __u32 __retres;
  
#line 123 
  __retres = (unsigned int)(((int)ep->speed_hi << 16) | (int)ep->speed);
  
#line 123 
  return __retres;
}


#line 85  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/ethtool.h"
u32 ethtool_op_get_link(struct net_device *);


#line 1076  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
ssize_t pci_read_vpd(struct pci_dev *, loff_t, size_t, void *);


#line 1077 
ssize_t pci_write_vpd(struct pci_dev *, loff_t, size_t, void const *);


#line 1102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static unsigned int mk_adap_vers(struct adapter *ap)
{
  unsigned int __retres;
  
#line 1105 
  __retres = ((((unsigned int)ap->params.chip >> 4) & 15U) | (((unsigned int)ap->params.chip << 10) & 15360U)) | 65536U;
  
#line 1105 
  return __retres;
}


#line 1109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
static unsigned int qtimer_val_0(struct adapter const *adap, struct sge_rspq const *q)
{
  unsigned int __retres;
  int tmp;
  
#line 1112 
  unsigned int idx = (unsigned int)((int)q->intr_params >> 1);
  
#line 1114 
  if (idx <= 5U) 
#line 1114 
                 tmp = (int)adap->sge.timer_val[idx]; else 
#line 1114 
                                                           tmp = 0;
  
#line 1114 
  __retres = (unsigned int)tmp;
  
#line 1114 
  return __retres;
}


#line 1253 
int t4_restart_aneg(struct adapter *adap, unsigned int mbox, unsigned int port);


#line 1269 
unsigned int t4_get_regs_len(struct adapter *adapter);


#line 1270 
void t4_get_regs(struct adapter *adap, void *buf, size_t buf_size);


#line 1272 
int t4_seeprom_wp(struct adapter *adapter, bool enable);


#line 1284 
int t4_fw_upgrade(struct adapter *adap, unsigned int mbox, u8 const *fw_data, unsigned int size, int force);


#line 1289 
int t4_get_exprom_version(struct adapter *adap, u32 *vers);


#line 1351 
void t4_get_lb_stats(struct adapter *adap, int idx, struct lb_port_stats *p);


#line 1357 
void t4_tp_get_err_stats(struct adapter *adap, struct tp_err_stats *st);


#line 1358 
void t4_tp_get_cpl_stats(struct adapter *adap, struct tp_cpl_stats *st);


#line 1359 
void t4_tp_get_rdma_stats(struct adapter *adap, struct tp_rdma_stats *st);


#line 1360 
void t4_get_usm_stats(struct adapter *adap, struct tp_usm_stats *st);


#line 1363 
void t4_get_fcoe_stats(struct adapter *adap, unsigned int idx, struct tp_fcoe_stats *st);


#line 1424 
int t4_identify_port(struct adapter *adap, unsigned int mbox, unsigned int viid, unsigned int nblinks);


#line 27  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static u32 get_msglevel(struct net_device *dev)
{
  u32 __retres;
  struct adapter *tmp;
  
#line 29 
  tmp = netdev2adap((struct net_device const *)dev);
  
#line 29 
  __retres = (unsigned int)tmp->msg_enable;
  
#line 29 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static void set_msglevel(struct net_device *dev, u32 val)
{
  struct adapter *tmp;
  
#line 34 
  tmp = netdev2adap((struct net_device const *)dev);
  
#line 34 
  tmp->msg_enable = (int)val;
  
#line 35 
  return;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static char const stats_strings[65U][32U] = {{(char)'T', (char)'x', (char)'O', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'O', (char)'K', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'O', (char)'K', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'B', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'M', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'U', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'E', (char)'r', (char)'r', (char)'o', (char)'r', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'6', (char)'4', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'6', (char)'5', (char)'T', (char)'o', (char)'1', (char)'2', (char)'7', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'1', (char)'2', (char)'8', (char)'T', (char)'o', (char)'2', (char)'5', (char)'5', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'2', (char)'5', (char)'6', (char)'T', (char)'o', (char)'5', (char)'1', (char)'1', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'5', (char)'1', (char)'2', (char)'T', (char)'o', (char)'1', (char)'0', (char)'2', (char)'3', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'1', (char)'0', (char)'2', (char)'4', (char)'T', (char)'o', (char)'1', (char)'5', (char)'1', (char)'8', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'1', (char)'5', (char)'1', (char)'9', (char)'T', (char)'o', (char)'M', (char)'a', (char)'x', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'D', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'P', (char)'a', (char)'u', (char)'s', (char)'e', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'P', (char)'P', (char)'P', (char)'0', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'P', (char)'P', (char)'P', (char)'1', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'P', (char)'P', (char)'P', (char)'2', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'P', (char)'P', (char)'P', (char)'3', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'P', (char)'P', (char)'P', (char)'4', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'P', (char)'P', (char)'P', (char)'5', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'P', (char)'P', (char)'P', (char)'6', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'P', (char)'P', (char)'P', (char)'7', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'O', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'O', (char)'K', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'O', (char)'K', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'B', (char)'r', (char)'o', (char)'a', (char)'d', (char)'c', (char)'a', (char)'s', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'M', (char)'u', (char)'l', (char)'t', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'U', (char)'n', (char)'i', (char)'c', (char)'a', (char)'s', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'T', (char)'o', (char)'o', (char)'L', (char)'o', (char)'n', (char)'g', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'J', (char)'a', (char)'b', (char)'b', (char)'e', (char)'r', (char)'E', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'F', (char)'C', (char)'S', (char)'E', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'L', (char)'e', (char)'n', (char)'g', (char)'t', (char)'h', (char)'E', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'S', (char)'y', (char)'m', (char)'b', (char)'o', (char)'l', (char)'E', (char)'r', (char)'r', (char)'o', (char)'r', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'R', (char)'u', (char)'n', (char)'t', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'6', (char)'4', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'6', (char)'5', (char)'T', (char)'o', (char)'1', (char)'2', (char)'7', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'1', (char)'2', (char)'8', (char)'T', (char)'o', (char)'2', (char)'5', (char)'5', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'2', (char)'5', (char)'6', (char)'T', (char)'o', (char)'5', (char)'1', (char)'1', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'5', (char)'1', (char)'2', (char)'T', (char)'o', (char)'1', (char)'0', (char)'2', (char)'3', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'1', (char)'0', (char)'2', (char)'4', (char)'T', (char)'o', (char)'1', (char)'5', (char)'1', (char)'8', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'1', (char)'5', (char)'1', (char)'9', (char)'T', (char)'o', (char)'M', (char)'a', (char)'x', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'P', (char)'a', (char)'u', (char)'s', (char)'e', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'P', (char)'P', (char)'P', (char)'0', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'P', (char)'P', (char)'P', (char)'1', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'P', (char)'P', (char)'P', (char)'2', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'P', (char)'P', (char)'P', (char)'3', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'P', (char)'P', (char)'P', (char)'4', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'P', (char)'P', (char)'P', (char)'5', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'P', (char)'P', (char)'P', (char)'6', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'P', (char)'P', (char)'P', (char)'7', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'B', (char)'G', (char)'0', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'D', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'B', (char)'G', (char)'1', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'D', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'B', (char)'G', (char)'2', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'D', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'B', (char)'G', (char)'3', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'D', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'B', (char)'G', (char)'0', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'T', (char)'r', (char)'u', (char)'n', (char)'c', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'B', (char)'G', (char)'1', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'T', (char)'r', (char)'u', (char)'n', (char)'c', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'B', (char)'G', (char)'2', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'T', (char)'r', (char)'u', (char)'n', (char)'c', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'B', (char)'G', (char)'3', (char)'F', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'T', (char)'r', (char)'u', (char)'n', (char)'c', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'S', (char)'O', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'T', (char)'x', (char)'C', (char)'s', (char)'u', (char)'m', (char)'O', (char)'f', (char)'f', (char)'l', (char)'o', (char)'a', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'R', (char)'x', (char)'C', (char)'s', (char)'u', (char)'m', (char)'G', (char)'o', (char)'o', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'V', (char)'L', (char)'A', (char)'N', (char)'e', (char)'x', (char)'t', (char)'r', (char)'a', (char)'c', (char)'t', (char)'i', (char)'o', (char)'n', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'V', (char)'L', (char)'A', (char)'N', (char)'i', (char)'n', (char)'s', (char)'e', (char)'r', (char)'t', (char)'i', (char)'o', (char)'n', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'G', (char)'R', (char)'O', (char)'p', (char)'a', (char)'c', (char)'k', (char)'e', (char)'t', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'G', (char)'R', (char)'O', (char)'m', (char)'e', (char)'r', (char)'g', (char)'e', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}};

#line 113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static char adapter_stats_strings[20U][32U] = {{(char)'d', (char)'b', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'d', (char)'b', (char)'_', (char)'f', (char)'u', (char)'l', (char)'l', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'d', (char)'b', (char)'_', (char)'e', (char)'m', (char)'p', (char)'t', (char)'y', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'c', (char)'p', (char)'_', (char)'i', (char)'p', (char)'v', (char)'4', (char)'_', (char)'o', (char)'u', (char)'t', (char)'_', (char)'r', (char)'s', (char)'t', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'c', (char)'p', (char)'_', (char)'i', (char)'p', (char)'v', (char)'4', (char)'_', (char)'i', (char)'n', (char)'_', (char)'s', (char)'e', (char)'g', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'c', (char)'p', (char)'_', (char)'i', (char)'p', (char)'v', (char)'4', (char)'_', (char)'o', (char)'u', (char)'t', (char)'_', (char)'s', (char)'e', (char)'g', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'c', (char)'p', (char)'_', (char)'i', (char)'p', (char)'v', (char)'4', (char)'_', (char)'r', (char)'e', (char)'t', (char)'r', (char)'a', (char)'n', (char)'s', (char)'_', (char)'s', (char)'e', (char)'g', (char)'s', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'c', (char)'p', (char)'_', (char)'i', (char)'p', (char)'v', (char)'6', (char)'_', (char)'o', (char)'u', (char)'t', (char)'_', (char)'r', (char)'s', (char)'t', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'c', (char)'p', (char)'_', (char)'i', (char)'p', (char)'v', (char)'6', (char)'_', (char)'i', (char)'n', (char)'_', (char)'s', (char)'e', (char)'g', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'c', (char)'p', (char)'_', (char)'i', (char)'p', (char)'v', (char)'6', (char)'_', (char)'o', (char)'u', (char)'t', (char)'_', (char)'s', (char)'e', (char)'g', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'c', (char)'p', (char)'_', (char)'i', (char)'p', (char)'v', (char)'6', (char)'_', (char)'r', (char)'e', (char)'t', (char)'r', (char)'a', (char)'n', (char)'s', (char)'_', (char)'s', (char)'e', (char)'g', (char)'s', (char)' ', (char)' ', (char)'\000'}, {(char)'u', (char)'s', (char)'m', (char)'_', (char)'d', (char)'d', (char)'p', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'u', (char)'s', (char)'m', (char)'_', (char)'d', (char)'d', (char)'p', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'u', (char)'s', (char)'m', (char)'_', (char)'d', (char)'d', (char)'p', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'r', (char)'d', (char)'m', (char)'a', (char)'_', (char)'n', (char)'o', (char)'_', (char)'r', (char)'q', (char)'e', (char)'_', (char)'m', (char)'o', (char)'d', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)' ', (char)' ', (char)'\000'}, {(char)'r', (char)'d', (char)'m', (char)'a', (char)'_', (char)'n', (char)'o', (char)'_', (char)'r', (char)'q', (char)'e', (char)'_', (char)'p', (char)'k', (char)'t', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'p', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'o', (char)'f', (char)'l', (char)'d', (char)'_', (char)'n', (char)'o', (char)'_', (char)'n', (char)'e', (char)'i', (char)'g', (char)'h', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'p', (char)'_', (char)'e', (char)'r', (char)'r', (char)'_', (char)'o', (char)'f', (char)'l', (char)'d', (char)'_', (char)'c', (char)'o', (char)'n', (char)'g', (char)'_', (char)'d', (char)'e', (char)'f', (char)'e', (char)'r', (char)' ', (char)'\000'}, {(char)'w', (char)'r', (char)'i', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'a', (char)'l', (char)'_', (char)'s', (char)'u', (char)'c', (char)'c', (char)'e', (char)'s', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'w', (char)'r', (char)'i', (char)'t', (char)'e', (char)'_', (char)'c', (char)'o', (char)'a', (char)'l', (char)'_', (char)'f', (char)'a', (char)'i', (char)'l', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}};

#line 136  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static char channel_stats_strings[14U][32U] = {{(char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'C', (char)'h', (char)'a', (char)'n', (char)'n', (char)'e', (char)'l', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)' ', (char)'\000'}, {(char)'t', (char)'p', (char)'_', (char)'c', (char)'p', (char)'l', (char)'_', (char)'r', (char)'e', (char)'q', (char)'u', (char)'e', (char)'s', (char)'t', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'p', (char)'_', (char)'c', (char)'p', (char)'l', (char)'_', (char)'r', (char)'e', (char)'s', (char)'p', (char)'o', (char)'n', (char)'s', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'p', (char)'_', (char)'m', (char)'a', (char)'c', (char)'_', (char)'i', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'p', (char)'_', (char)'h', (char)'d', (char)'r', (char)'_', (char)'i', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'p', (char)'_', (char)'t', (char)'c', (char)'p', (char)'_', (char)'i', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'p', (char)'_', (char)'t', (char)'c', (char)'p', (char)'6', (char)'_', (char)'i', (char)'n', (char)'_', (char)'e', (char)'r', (char)'r', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'p', (char)'_', (char)'t', (char)'n', (char)'l', (char)'_', (char)'c', (char)'o', (char)'n', (char)'g', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'p', (char)'_', (char)'t', (char)'n', (char)'l', (char)'_', (char)'t', (char)'x', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'p', (char)'_', (char)'o', (char)'f', (char)'l', (char)'d', (char)'_', (char)'v', (char)'l', (char)'a', (char)'n', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'t', (char)'p', (char)'_', (char)'o', (char)'f', (char)'l', (char)'d', (char)'_', (char)'c', (char)'h', (char)'a', (char)'n', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'f', (char)'c', (char)'o', (char)'e', (char)'_', (char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'d', (char)'d', (char)'p', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'f', (char)'c', (char)'o', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'d', (char)'d', (char)'p', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'f', (char)'c', (char)'o', (char)'e', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}};

#line 153  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static char loopback_stats_strings[23U][32U] = {{(char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'L', (char)'o', (char)'o', (char)'p', (char)'b', (char)'a', (char)'c', (char)'k', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)'-', (char)' ', (char)'\000'}, {(char)'o', (char)'c', (char)'t', (char)'e', (char)'t', (char)'s', (char)'_', (char)'o', (char)'k', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'o', (char)'k', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'b', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'m', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'u', (char)'c', (char)'a', (char)'s', (char)'t', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'e', (char)'r', (char)'r', (char)'o', (char)'r', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'6', (char)'4', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'6', (char)'5', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'2', (char)'7', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'1', (char)'2', (char)'8', (char)'_', (char)'t', (char)'o', (char)'_', (char)'2', (char)'5', (char)'5', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'2', (char)'5', (char)'6', (char)'_', (char)'t', (char)'o', (char)'_', (char)'5', (char)'1', (char)'1', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'5', (char)'1', (char)'2', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'0', (char)'2', (char)'3', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'1', (char)'0', (char)'2', (char)'4', (char)'_', (char)'t', (char)'o', (char)'_', (char)'1', (char)'5', (char)'1', (char)'8', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'1', (char)'5', (char)'1', (char)'9', (char)'_', (char)'t', (char)'o', (char)'_', (char)'m', (char)'a', (char)'x', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'b', (char)'g', (char)'0', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'b', (char)'g', (char)'1', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'b', (char)'g', (char)'2', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'b', (char)'g', (char)'3', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'d', (char)'r', (char)'o', (char)'p', (char)'p', (char)'e', (char)'d', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'b', (char)'g', (char)'0', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'t', (char)'r', (char)'u', (char)'n', (char)'c', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'b', (char)'g', (char)'1', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'t', (char)'r', (char)'u', (char)'n', (char)'c', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'b', (char)'g', (char)'2', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'t', (char)'r', (char)'u', (char)'n', (char)'c', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}, {(char)'b', (char)'g', (char)'3', (char)'_', (char)'f', (char)'r', (char)'a', (char)'m', (char)'e', (char)'s', (char)'_', (char)'t', (char)'r', (char)'u', (char)'n', (char)'c', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)' ', (char)'\000'}};

#line 179  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int get_sset_count(struct net_device *dev, int sset)
{
  int __retres;
  
#line 181 
  switch (sset) {
    case 1: 
#line 182 
    ;
    
#line 183 
    __retres = 122;
    
#line 183 
    goto return_label;
    default: 
#line 187 
    ;
    
#line 188 
    __retres = -95;
    
#line 188 
    goto return_label;
  }
  return_label: 
#line 181 
                return __retres;
}


#line 192  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int get_regs_len(struct net_device *dev)
{
  int __retres;
  unsigned int tmp_0;
  
#line 194 
  struct adapter *adap = netdev2adap((struct net_device const *)dev);
  
#line 196 
  tmp_0 = t4_get_regs_len(adap);
  
#line 196 
  __retres = (int)tmp_0;
  
#line 196 
  return __retres;
}


#line 199  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int get_eeprom_len(struct net_device *dev)
{
  int __retres;
  
#line 201 
  __retres = 17408;
  
#line 201 
  return __retres;
}


#line 204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static void get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
{
  u32 exprom_vers;
  char const *tmp_0;
  int tmp_1;
  
#line 206 
  struct adapter *adapter = netdev2adap((struct net_device const *)dev);
  
#line 209 
  strlcpy((char *)(& info->driver),(char const *)(& cxgb4_driver_name),32UL);
  
#line 210 
  strlcpy((char *)(& info->version),(char const *)(& cxgb4_driver_version),32UL);
  
#line 212 
  tmp_0 = pci_name((struct pci_dev const *)adapter->pdev);
  
#line 212 
  ;
  
#line 212 
  strlcpy((char *)(& info->bus_info),tmp_0,32UL);
  
#line 215 
  if (adapter->params.fw_vers != 0U) 
#line 216 
                                     snprintf((char *)(& info->fw_version),32UL,"%u.%u.%u.%u, TP %u.%u.%u.%u",adapter->params.fw_vers >> 24,(adapter->params.fw_vers >> 16) & 255U,(adapter->params.fw_vers >> 8) & 255U,adapter->params.fw_vers & 255U,adapter->params.tp_vers >> 24,(adapter->params.tp_vers >> 16) & 255U,(adapter->params.tp_vers >> 8) & 255U,adapter->params.tp_vers & 255U); else ;
  
#line 227 
  tmp_1 = t4_get_exprom_version(adapter,& exprom_vers);
  
#line 227 
  if (tmp_1 == 0) 
#line 228 
                  snprintf((char *)(& info->erom_version),32UL,"%u.%u.%u.%u",exprom_vers >> 24,(exprom_vers >> 16) & 255U,(exprom_vers >> 8) & 255U,exprom_vers & 255U); else ;
  
#line 234 
  return;
}


#line 236  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static void get_strings(struct net_device *dev, u32 stringset, u8 *data)
{
  
#line 238 
  if (stringset == 1U) {
    
#line 239 
    memcpy((void *)data,(void const *)(& stats_strings),2080UL);
    
#line 240 
    data += 2080U;
    
#line 241 
    memcpy((void *)data,(void const *)(& adapter_stats_strings),640UL);
    
#line 243 
    data += 640U;
    
#line 244 
    memcpy((void *)data,(void const *)(& channel_stats_strings),448UL);
    
#line 246 
    data += 448U;
    
#line 247 
    memcpy((void *)data,(void const *)(& loopback_stats_strings),736UL);
  }
  else ;
  
#line 249 
  return;
}


#line 304  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static void collect_sge_port_stats(struct adapter const *adap, struct port_info const *p, struct queue_port_stats *s)
{
  int i;
  
#line 309 
  struct sge_eth_txq const *tx = & adap->sge.ethtxq[(int)p->first_qset];
  
#line 310 
  struct sge_eth_rxq const *rx = & adap->sge.ethrxq[(int)p->first_qset];
  
#line 312 
  memset((void *)s,0,56UL);
  
#line 313 
  i = 0;
  
#line 313 
  goto ldv_49159;
  ldv_49158: 
#line 314 
  ;
  
#line 314 
  s->tso += (unsigned long long)tx->tso;
  
#line 315 
  s->tx_csum += (unsigned long long)tx->tx_cso;
  
#line 316 
  s->rx_csum += (unsigned long long)rx->stats.rx_cso;
  
#line 317 
  s->vlan_ex += (unsigned long long)rx->stats.vlan_ex;
  
#line 318 
  s->vlan_ins += (unsigned long long)tx->vlan_ins;
  
#line 319 
  s->gro_pkts += (unsigned long long)rx->stats.lro_pkts;
  
#line 320 
  s->gro_merged += (unsigned long long)rx->stats.lro_merged;
  
#line 313 
  i += 1;
  
#line 313 
  rx += 1;
  
#line 313 
  tx += 1;
  ldv_49159: 
#line 314 
  ;
  
#line 313 
  if ((int)p->nqsets > i) 
#line 315 
                          goto ldv_49158; else 
#line 318 
                                               goto ldv_49160;
  ldv_49160: 
#line 319 
  ;
  
#line 320 
  return;
}


#line 324  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static void collect_adapter_stats(struct adapter *adap, struct adapter_stats *s)
{
  struct tp_tcp_stats v4;
  struct tp_tcp_stats v6;
  struct tp_rdma_stats rdma_stats;
  struct tp_err_stats err_stats;
  struct tp_usm_stats usm_stats;
  u64 val1;
  u64 val2;
  int tmp;
  int tmp_3;
  
#line 332 
  memset((void *)s,0,160UL);
  
#line 334 
  ldv_spin_lock_81(& adap->stats_lock);
  
#line 335 
  t4_tp_get_tcp_stats(adap,& v4,& v6);
  
#line 336 
  t4_tp_get_rdma_stats(adap,& rdma_stats);
  
#line 337 
  t4_get_usm_stats(adap,& usm_stats);
  
#line 338 
  t4_tp_get_err_stats(adap,& err_stats);
  
#line 339 
  ldv_spin_unlock_82(& adap->stats_lock);
  
#line 341 
  s->db_drop = (unsigned long long)adap->db_stats.db_drop;
  
#line 342 
  s->db_full = (unsigned long long)adap->db_stats.db_full;
  
#line 343 
  s->db_empty = (unsigned long long)adap->db_stats.db_empty;
  
#line 345 
  s->tcp_v4_out_rsts = (unsigned long long)v4.tcp_out_rsts;
  
#line 346 
  s->tcp_v4_in_segs = v4.tcp_in_segs;
  
#line 347 
  s->tcp_v4_out_segs = v4.tcp_out_segs;
  
#line 348 
  s->tcp_v4_retrans_segs = v4.tcp_retrans_segs;
  
#line 349 
  s->tcp_v6_out_rsts = (unsigned long long)v6.tcp_out_rsts;
  
#line 350 
  s->tcp_v6_in_segs = v6.tcp_in_segs;
  
#line 351 
  s->tcp_v6_out_segs = v6.tcp_out_segs;
  
#line 352 
  s->tcp_v6_retrans_segs = v6.tcp_retrans_segs;
  
#line 354 
  tmp = is_offload((struct adapter const *)adap);
  
#line 354 
  if (tmp != 0) {
    
#line 355 
    s->frames = (unsigned long long)usm_stats.frames;
    
#line 356 
    s->octets = usm_stats.octets;
    
#line 357 
    s->drops = (unsigned long long)usm_stats.drops;
    
#line 358 
    s->rqe_dfr_mod = (unsigned long long)rdma_stats.rqe_dfr_mod;
    
#line 359 
    s->rqe_dfr_pkt = (unsigned long long)rdma_stats.rqe_dfr_pkt;
  }
  else ;
  
#line 362 
  s->ofld_no_neigh = (unsigned long long)err_stats.ofld_no_neigh;
  
#line 363 
  s->ofld_cong_defer = (unsigned long long)err_stats.ofld_cong_defer;
  
#line 365 
  tmp_3 = is_t4(adap->params.chip);
  
#line 365 
  if (tmp_3 == 0) {
    int v;
    u32 tmp_0;
    
#line 368 
    tmp_0 = t4_read_reg(adap,4332U);
    
#line 368 
    v = (int)tmp_0;
    
#line 369 
    if (((unsigned int)(v >> 9) & 15U) == 7U) {
      u32 tmp_1;
      u32 tmp_2;
      
#line 370 
      tmp_1 = t4_read_reg(adap,4328U);
      
#line 370 
      val2 = (unsigned long long)tmp_1;
      
#line 371 
      tmp_2 = t4_read_reg(adap,4324U);
      
#line 371 
      val1 = (unsigned long long)tmp_2;
      
#line 372 
      s->wc_success = val1 - val2;
      
#line 373 
      s->wc_fail = val2;
    }
    else ;
  }
  else ;
  
#line 376 
  return;
}


#line 378  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static void collect_channel_stats(struct adapter *adap, struct channel_stats *s, u8 i)
{
  struct tp_cpl_stats cpl_stats;
  struct tp_err_stats err_stats;
  struct tp_fcoe_stats fcoe_stats;
  
#line 385 
  memset((void *)s,0,104UL);
  
#line 387 
  ldv_spin_lock_83(& adap->stats_lock);
  
#line 388 
  t4_tp_get_cpl_stats(adap,& cpl_stats);
  
#line 389 
  t4_tp_get_err_stats(adap,& err_stats);
  
#line 390 
  t4_get_fcoe_stats(adap,(unsigned int)i,& fcoe_stats);
  
#line 391 
  ldv_spin_unlock_84(& adap->stats_lock);
  
#line 393 
  s->cpl_req = (unsigned long long)cpl_stats.req[(int)i];
  
#line 394 
  s->cpl_rsp = (unsigned long long)cpl_stats.rsp[(int)i];
  
#line 395 
  s->mac_in_errs = (unsigned long long)err_stats.mac_in_errs[(int)i];
  
#line 396 
  s->hdr_in_errs = (unsigned long long)err_stats.hdr_in_errs[(int)i];
  
#line 397 
  s->tcp_in_errs = (unsigned long long)err_stats.tcp_in_errs[(int)i];
  
#line 398 
  s->tcp6_in_errs = (unsigned long long)err_stats.tcp6_in_errs[(int)i];
  
#line 399 
  s->tnl_cong_drops = (unsigned long long)err_stats.tnl_cong_drops[(int)i];
  
#line 400 
  s->tnl_tx_drops = (unsigned long long)err_stats.tnl_tx_drops[(int)i];
  
#line 401 
  s->ofld_vlan_drops = (unsigned long long)err_stats.ofld_vlan_drops[(int)i];
  
#line 402 
  s->ofld_chan_drops = (unsigned long long)err_stats.ofld_chan_drops[(int)i];
  
#line 403 
  s->octets_ddp = fcoe_stats.octets_ddp;
  
#line 404 
  s->frames_ddp = (unsigned long long)fcoe_stats.frames_ddp;
  
#line 405 
  s->frames_drop = (unsigned long long)fcoe_stats.frames_drop;
  
#line 406 
  return;
}


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static void get_stats(struct net_device *dev, struct ethtool_stats *stats, u64 *data)
{
  struct lb_port_stats s;
  int i;
  u64 *p0;
  u64 *tmp_0;
  u64 *tmp_1;
  u64 *tmp_2;
  u64 *tmp_3;
  
#line 411 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 412 
  struct adapter *adapter = pi->adapter;
  
#line 417 
  t4_get_port_stats_offset(adapter,(int)pi->tx_chan,(struct port_stats *)data,& pi->stats_base);
  
#line 421 
  data += 58U;
  
#line 422 
  collect_sge_port_stats((struct adapter const *)adapter,(struct port_info const *)pi,(struct queue_port_stats *)data);
  
#line 423 
  data += 7U;
  
#line 424 
  collect_adapter_stats(adapter,(struct adapter_stats *)data);
  
#line 425 
  data += 20U;
  
#line 427 
  tmp_0 = data;
  
#line 427 
  data += 1;
  
#line 427 
  *tmp_0 = (unsigned long long)pi->port_id;
  
#line 428 
  collect_channel_stats(adapter,(struct channel_stats *)data,(unsigned char)((int)pi->port_id));
  
#line 430 
  data += 13U;
  
#line 432 
  tmp_1 = data;
  
#line 432 
  data += 1;
  
#line 432 
  *tmp_1 = (unsigned long long)pi->port_id;
  
#line 433 
  memset((void *)(& s),0,176UL);
  
#line 434 
  t4_get_lb_stats(adapter,(int)pi->port_id,& s);
  
#line 436 
  p0 = & s.octets;
  
#line 437 
  i = 0;
  
#line 437 
  goto ldv_49195;
  ldv_49194: 
#line 438 
  ;
  
#line 438 
  tmp_2 = data;
  
#line 438 
  data += 1;
  
#line 438 
  tmp_3 = p0;
  
#line 438 
  p0 += 1;
  
#line 438 
  *tmp_2 = *tmp_3;
  
#line 437 
  i += 1;
  ldv_49195: 
#line 438 
  ;
  
#line 437 
  if ((unsigned int)i <= 21U) 
#line 439 
                              goto ldv_49194; else 
#line 442 
                                                   goto ldv_49196;
  ldv_49196: 
#line 443 
  ;
  
#line 444 
  return;
}


#line 441  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static void get_regs(struct net_device *dev, struct ethtool_regs *regs, void *buf)
{
  size_t buf_size;
  unsigned int tmp_0;
  
#line 444 
  struct adapter *adap = netdev2adap((struct net_device const *)dev);
  
#line 447 
  tmp_0 = t4_get_regs_len(adap);
  
#line 447 
  buf_size = (unsigned long)tmp_0;
  
#line 448 
  regs->version = mk_adap_vers(adap);
  
#line 449 
  t4_get_regs(adap,buf,buf_size);
  
#line 450 
  return;
}


#line 452  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int restart_autoneg(struct net_device *dev)
{
  int __retres;
  int tmp_1;
  bool tmp_0;
  
#line 454 
  struct port_info *p = netdev_priv((struct net_device const *)dev);
  
#line 456 
  tmp_0 = netif_running((struct net_device const *)dev);
  
#line 456 
  if (tmp_0) 
#line 456 
             tmp_1 = 0; else 
#line 456 
                             tmp_1 = 1;
  
#line 456 
  if (tmp_1) {
    
#line 457 
    __retres = -11;
    
#line 457 
    goto return_label;
  }
  else ;
  
#line 458 
  if ((unsigned int)p->link_cfg.autoneg != 1U) {
    
#line 459 
    __retres = -22;
    
#line 459 
    goto return_label;
  }
  else ;
  
#line 460 
  t4_restart_aneg(p->adapter,(p->adapter)->pf,(unsigned int)p->tx_chan);
  
#line 461 
  __retres = 0;
  return_label: 
#line 461 
                return __retres;
}


#line 464  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int identify_port(struct net_device *dev, enum ethtool_phys_id_state state)
{
  int __retres;
  unsigned int val;
  int tmp_1;
  struct port_info *tmp_0;
  
#line 468 
  struct adapter *adap = netdev2adap((struct net_device const *)dev);
  
#line 470 
  if (state == (unsigned int)ETHTOOL_ID_ACTIVE) 
#line 471 
                                                val = 65535U;
  else 
    
#line 472 
    if (state == (unsigned int)ETHTOOL_ID_INACTIVE) 
#line 473 
                                                    val = 0U;
    else {
      
#line 475 
      __retres = -22;
      
#line 475 
      goto return_label;
    }
  
#line 477 
  ;
  
#line 477 
  tmp_0 = netdev2pinfo((struct net_device const *)dev);
  
#line 477 
  ;
  
#line 477 
  ;
  
#line 477 
  tmp_1 = t4_identify_port(adap,adap->pf,(unsigned int)tmp_0->viid,val);
  
#line 477 
  __retres = tmp_1;
  return_label: 
#line 477 
                return __retres;
}


#line 480  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static unsigned int from_fw_linkcaps(enum fw_port_type type, unsigned int caps)
{
  
#line 482 
  unsigned int v = 0U;
  
#line 484 
  if ((unsigned int)type + 4294967294U <= 2U) {
    
#line 486 
    v |= 128U;
    
#line 487 
    if ((caps & 1U) != 0U) 
#line 488 
                           v |= 8U; else ;
    
#line 489 
    if ((caps & 2U) != 0U) 
#line 490 
                           v |= 32U; else ;
    
#line 491 
    if ((caps & 8U) != 0U) 
#line 492 
                           v |= 4096U; else ;
  }
  else 
    
#line 493 
    if (type == (unsigned int)FW_PORT_TYPE_KX4 || type == (unsigned int)FW_PORT_TYPE_KX) {
      
#line 494 
      v |= 65536U;
      
#line 495 
      if ((caps & 2U) != 0U) 
#line 496 
                             v |= 131072U; else ;
      
#line 497 
      if ((caps & 8U) != 0U) 
#line 498 
                             v |= 262144U; else ;
    }
    else 
      
#line 499 
      if (type == (unsigned int)FW_PORT_TYPE_KR) 
#line 500 
                                                 v |= 589824U;
      else 
        
#line 501 
        if (type == (unsigned int)FW_PORT_TYPE_BP_AP) 
#line 502 
                                                      v |= 1769472U;
        else 
          
#line 504 
          if (type == (unsigned int)FW_PORT_TYPE_BP4_AP) 
#line 505 
                                                         v |= 2031616U;
          else 
            
#line 508 
            if ((type <= (unsigned int)FW_PORT_TYPE_FIBER_XAUI || type == (unsigned int)FW_PORT_TYPE_SFP) || (unsigned int)type + 4294967284U <= 1U) {
              
#line 513 
              v |= 1024U;
              
#line 514 
              if ((caps & 2U) != 0U) 
#line 515 
                                     v |= 32U; else ;
              
#line 516 
              if ((caps & 8U) != 0U) 
#line 517 
                                     v |= 4096U; else ;
            }
            else 
              
#line 518 
              if ((unsigned int)type + 4294967282U <= 1U) {
                
#line 520 
                v |= 33554432U;
                
#line 521 
                v |= 1024U;
              }
              else ;
  
#line 524 
  if ((caps & 256U) != 0U) 
#line 525 
                           v |= 64U; else ;
  
#line 526 
  return v;
}


#line 529  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static unsigned int to_fw_linkcaps(unsigned int caps)
{
  
#line 531 
  unsigned int v = 0U;
  
#line 533 
  if ((caps & 8U) != 0U) 
#line 534 
                         v |= 1U; else ;
  
#line 535 
  if ((caps & 32U) != 0U) 
#line 536 
                          v |= 2U; else ;
  
#line 537 
  if ((caps & 4096U) != 0U) 
#line 538 
                            v |= 8U; else ;
  
#line 539 
  if ((caps & 33554432U) != 0U) 
#line 540 
                                v |= 16U; else ;
  
#line 541 
  return v;
}


#line 544  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
{
  int __retres;
  int tmp_1;
  bool tmp_0;
  
#line 546 
  struct port_info const *p = netdev_priv((struct net_device const *)dev);
  
#line 549 
  if ((unsigned int)p->port_type + 4294967294U <= 2U) 
#line 551 
                                                      cmd->port = (unsigned char)0U;
  else 
    
#line 552 
    if (p->port_type <= (unsigned int)FW_PORT_TYPE_FIBER_XAUI) 
#line 554 
                                                               cmd->port = (unsigned char)3U;
    else 
      
#line 555 
      if (((p->port_type == (unsigned int)FW_PORT_TYPE_SFP || p->port_type == (unsigned int)FW_PORT_TYPE_QSFP_10G) || p->port_type == (unsigned int)FW_PORT_TYPE_QSA) || p->port_type == (unsigned int)FW_PORT_TYPE_QSFP) 
        
#line 559 
        if ((unsigned int)p->mod_type + 255U <= 2U || (unsigned int)p->mod_type == 6U) 
          
#line 563 
          cmd->port = (unsigned char)3U;
        else 
          
#line 564 
          if ((unsigned int)p->mod_type + 252U <= 1U) 
#line 566 
                                                      cmd->port = (unsigned char)5U; else 
                                                                    
#line 568 
                                                                    cmd->port = (unsigned char)255U;
      else 
#line 570 
           cmd->port = (unsigned char)255U;
  
#line 573 
  if ((int)p->mdio_addr >= 0) {
    
#line 574 
    cmd->phy_address = (unsigned char)p->mdio_addr;
    
#line 575 
    cmd->transceiver = (unsigned char)1U;
    
#line 576 
    if (p->port_type == (unsigned int)FW_PORT_TYPE_BT_SGMII) 
#line 576 
                                                             cmd->mdio_support = (unsigned char)1U; else 
                                                                    
#line 576 
                                                                    cmd->mdio_support = (unsigned char)2U;
  }
  else {
    
#line 579 
    cmd->phy_address = (unsigned char)0U;
    
#line 580 
    cmd->transceiver = (unsigned char)0U;
    
#line 581 
    cmd->mdio_support = (unsigned char)0U;
  }
  
#line 584 
  cmd->supported = from_fw_linkcaps(p->port_type,(unsigned int)p->link_cfg.supported);
  
#line 585 
  cmd->advertising = from_fw_linkcaps(p->port_type,(unsigned int)p->link_cfg.advertising);
  
#line 588 
  tmp_0 = netif_carrier_ok((struct net_device const *)dev);
  
#line 588 
  if ((int)tmp_0 != 0) 
#line 588 
                       tmp_1 = (int)p->link_cfg.speed; else 
#line 588 
                                                            tmp_1 = 0;
  
#line 587 
  ;
  
#line 587 
  ethtool_cmd_speed_set(cmd,(unsigned int)tmp_1);
  
#line 589 
  cmd->duplex = (unsigned char)1U;
  
#line 590 
  cmd->autoneg = p->link_cfg.autoneg;
  
#line 591 
  cmd->maxtxpkt = 0U;
  
#line 592 
  cmd->maxrxpkt = 0U;
  
#line 593 
  __retres = 0;
  
#line 593 
  return __retres;
}


#line 596  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static unsigned int speed_to_caps(int speed)
{
  unsigned int __retres;
  
#line 598 
  if (speed == 100) {
    
#line 599 
    __retres = 1U;
    
#line 599 
    goto return_label;
  }
  else ;
  
#line 600 
  if (speed == 1000) {
    
#line 601 
    __retres = 2U;
    
#line 601 
    goto return_label;
  }
  else ;
  
#line 602 
  if (speed == 10000) {
    
#line 603 
    __retres = 8U;
    
#line 603 
    goto return_label;
  }
  else ;
  
#line 604 
  if (speed == 40000) {
    
#line 605 
    __retres = 16U;
    
#line 605 
    goto return_label;
  }
  else ;
  
#line 606 
  __retres = 0U;
  return_label: 
#line 606 
                return __retres;
}


#line 609  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
{
  int __retres;
  unsigned int cap;
  bool tmp_3;
  
#line 612 
  struct port_info *p = netdev_priv((struct net_device const *)dev);
  
#line 613 
  struct link_config *lc = & p->link_cfg;
  
#line 614 
  u32 speed = ethtool_cmd_speed((struct ethtool_cmd const *)cmd);
  
#line 616 
  if ((unsigned int)cmd->duplex != 1U) {
    
#line 617 
    __retres = -22;
    
#line 617 
    goto return_label;
  }
  else ;
  
#line 619 
  if (((int)lc->supported & 256) == 0) {
    
#line 623 
    if ((unsigned int)cmd->autoneg == 0U) {
      unsigned int tmp_1;
      
#line 624 
      tmp_1 = speed_to_caps((int)speed);
      
#line 623 
      ;
      
#line 623 
      if (((unsigned int)lc->supported & tmp_1) != 0U) {
        
#line 625 
        __retres = 0;
        
#line 625 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 626 
    __retres = -22;
    
#line 626 
    goto return_label;
  }
  else ;
  
#line 629 
  if ((unsigned int)cmd->autoneg == 0U) {
    
#line 630 
    cap = speed_to_caps((int)speed);
    
#line 632 
    if ((((unsigned int)lc->supported & cap) == 0U || (speed == 1000U || speed == 10000U)) || speed == 40000U) {
      
#line 636 
      __retres = -22;
      
#line 636 
      goto return_label;
    }
    else ;
    
#line 637 
    lc->requested_speed = (unsigned short)cap;
    
#line 638 
    lc->advertising = (unsigned short)0U;
  }
  else {
    
#line 640 
    cap = to_fw_linkcaps(cmd->advertising);
    
#line 641 
    if (((unsigned int)lc->supported & cap) == 0U) {
      
#line 642 
      __retres = -22;
      
#line 642 
      goto return_label;
    }
    else ;
    
#line 643 
    lc->requested_speed = (unsigned short)0U;
    
#line 644 
    lc->advertising = (unsigned short)((unsigned int)((unsigned short)cap) | 256U);
  }
  
#line 646 
  lc->autoneg = cmd->autoneg;
  
#line 648 
  tmp_3 = netif_running((struct net_device const *)dev);
  
#line 648 
  if ((int)tmp_3 != 0) {
    int tmp_2;
    
#line 649 
    tmp_2 = t4_link_l1cfg(p->adapter,(p->adapter)->pf,(unsigned int)p->tx_chan,lc);
    
#line 649 
    __retres = tmp_2;
    
#line 649 
    goto return_label;
  }
  else ;
  
#line 651 
  __retres = 0;
  return_label: 
#line 651 
                return __retres;
}


#line 654  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static void get_pauseparam(struct net_device *dev, struct ethtool_pauseparam *epause)
{
  
#line 657 
  struct port_info *p = netdev_priv((struct net_device const *)dev);
  
#line 659 
  epause->autoneg = (unsigned int)(((int)p->link_cfg.requested_fc & 4) != 0);
  
#line 660 
  epause->rx_pause = (unsigned int)(((int)p->link_cfg.fc & 1) != 0);
  
#line 661 
  epause->tx_pause = (unsigned int)(((int)p->link_cfg.fc & 2) != 0);
  
#line 662 
  return;
}


#line 664  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int set_pauseparam(struct net_device *dev, struct ethtool_pauseparam *epause)
{
  int __retres;
  bool tmp_1;
  
#line 667 
  struct port_info *p = netdev_priv((struct net_device const *)dev);
  
#line 668 
  struct link_config *lc = & p->link_cfg;
  
#line 670 
  if (epause->autoneg == 0U) 
#line 671 
                             lc->requested_fc = (unsigned char)0U;
  else 
    
#line 672 
    if (((int)lc->supported & 256) != 0) 
#line 673 
                                         lc->requested_fc = (unsigned char)4U;
    else {
      
#line 675 
      __retres = -22;
      
#line 675 
      goto return_label;
    }
  
#line 677 
  if (epause->rx_pause != 0U) 
#line 678 
                              lc->requested_fc = (unsigned char)((unsigned int)lc->requested_fc | 1U); else ;
  
#line 679 
  if (epause->tx_pause != 0U) 
#line 680 
                              lc->requested_fc = (unsigned char)((unsigned int)lc->requested_fc | 2U); else ;
  
#line 681 
  tmp_1 = netif_running((struct net_device const *)dev);
  
#line 681 
  if ((int)tmp_1 != 0) {
    int tmp_0;
    
#line 682 
    tmp_0 = t4_link_l1cfg(p->adapter,(p->adapter)->pf,(unsigned int)p->tx_chan,lc);
    
#line 682 
    __retres = tmp_0;
    
#line 682 
    goto return_label;
  }
  else ;
  
#line 684 
  __retres = 0;
  return_label: 
#line 684 
                return __retres;
}


#line 687  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static void get_sge_param(struct net_device *dev, struct ethtool_ringparam *e)
{
  
#line 689 
  struct port_info const *pi = netdev_priv((struct net_device const *)dev);
  
#line 690 
  struct sge const *s = (struct sge const *)(& (pi->adapter)->sge);
  
#line 692 
  e->rx_max_pending = 16384U;
  
#line 693 
  e->rx_mini_max_pending = 16384U;
  
#line 694 
  e->rx_jumbo_max_pending = 0U;
  
#line 695 
  e->tx_max_pending = 16384U;
  
#line 697 
  e->rx_pending = s->ethrxq[(int)pi->first_qset].fl.size + 4294967288U;
  
#line 698 
  e->rx_mini_pending = s->ethrxq[(int)pi->first_qset].rspq.size;
  
#line 699 
  e->rx_jumbo_pending = 0U;
  
#line 700 
  e->tx_pending = s->ethtxq[(int)pi->first_qset].q.size;
  
#line 701 
  return;
}


#line 703  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int set_sge_param(struct net_device *dev, struct ethtool_ringparam *e)
{
  int __retres;
  int i;
  
#line 706 
  struct port_info const *pi = netdev_priv((struct net_device const *)dev);
  
#line 707 
  struct adapter *adapter = pi->adapter;
  
#line 708 
  struct sge *s = & adapter->sge;
  
#line 710 
  if ((((((e->rx_pending > 16384U || e->rx_jumbo_pending != 0U) || e->tx_pending > 16384U) || e->rx_mini_pending > 16384U) || e->rx_mini_pending <= 127U) || e->rx_pending <= 15U) || e->tx_pending <= 31U) {
    
#line 715 
    __retres = -22;
    
#line 715 
    goto return_label;
  }
  else ;
  
#line 717 
  if ((adapter->flags & 1U) != 0U) {
    
#line 718 
    __retres = -16;
    
#line 718 
    goto return_label;
  }
  else ;
  
#line 720 
  i = 0;
  
#line 720 
  goto ldv_49265;
  ldv_49264: 
#line 721 
  ;
  
#line 721 
  s->ethtxq[(int)pi->first_qset + i].q.size = e->tx_pending;
  
#line 722 
  s->ethrxq[(int)pi->first_qset + i].fl.size = e->rx_pending + 8U;
  
#line 723 
  s->ethrxq[(int)pi->first_qset + i].rspq.size = e->rx_mini_pending;
  
#line 720 
  i += 1;
  ldv_49265: 
#line 721 
  ;
  
#line 720 
  if ((int)pi->nqsets > i) 
#line 722 
                           goto ldv_49264; else 
#line 725 
                                                goto ldv_49266;
  ldv_49266: 
#line 726 
  ;
  
#line 725 
  __retres = 0;
  return_label: 
#line 725 
                return __retres;
}


#line 736  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int set_rx_intr_params(struct net_device *dev, unsigned int us, unsigned int cnt)
{
  int __retres;
  int i;
  int err;
  
#line 740 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 741 
  struct adapter *adap = pi->adapter;
  
#line 742 
  struct sge_eth_rxq *q = & adap->sge.ethrxq[(int)pi->first_qset];
  
#line 744 
  i = 0;
  
#line 744 
  goto ldv_49278;
  ldv_49277: 
#line 745 
  ;
  
#line 745 
  err = cxgb4_set_rspq_intr_params(& q->rspq,us,cnt);
  
#line 746 
  if (err != 0) {
    
#line 747 
    __retres = err;
    
#line 747 
    goto return_label;
  }
  else ;
  
#line 744 
  i += 1;
  
#line 744 
  q += 1;
  ldv_49278: 
#line 745 
  ;
  
#line 744 
  if ((int)pi->nqsets > i) 
#line 746 
                           goto ldv_49277; else 
#line 749 
                                                goto ldv_49279;
  ldv_49279: 
#line 750 
  ;
  
#line 749 
  __retres = 0;
  return_label: 
#line 749 
                return __retres;
}


#line 752  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int set_adaptive_rx_setting(struct net_device *dev, int adaptive_rx)
{
  int __retres;
  int i;
  
#line 755 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 756 
  struct adapter *adap = pi->adapter;
  
#line 757 
  struct sge_eth_rxq *q = & adap->sge.ethrxq[(int)pi->first_qset];
  
#line 759 
  i = 0;
  
#line 759 
  goto ldv_49289;
  ldv_49288: 
#line 760 
  ;
  
#line 760 
  q->rspq.adaptive_rx = (unsigned char)adaptive_rx;
  
#line 759 
  i += 1;
  
#line 759 
  q += 1;
  ldv_49289: 
#line 760 
  ;
  
#line 759 
  if ((int)pi->nqsets > i) 
#line 761 
                           goto ldv_49288; else 
#line 764 
                                                goto ldv_49290;
  ldv_49290: 
#line 765 
  ;
  
#line 762 
  __retres = 0;
  
#line 762 
  return __retres;
}


#line 765  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int get_adaptive_rx_setting(struct net_device *dev)
{
  int __retres;
  
#line 767 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 768 
  struct adapter *adap = pi->adapter;
  
#line 769 
  struct sge_eth_rxq *q = & adap->sge.ethrxq[(int)pi->first_qset];
  
#line 771 
  __retres = (int)q->rspq.adaptive_rx;
  
#line 771 
  return __retres;
}


#line 774  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int set_coalesce(struct net_device *dev, struct ethtool_coalesce *c)
{
  int tmp;
  
#line 776 
  set_adaptive_rx_setting(dev,(int)c->use_adaptive_rx_coalesce);
  
#line 777 
  tmp = set_rx_intr_params(dev,c->rx_coalesce_usecs,c->rx_max_coalesced_frames);
  
#line 777 
  return tmp;
}


#line 781  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int get_coalesce(struct net_device *dev, struct ethtool_coalesce *c)
{
  int __retres;
  int tmp_0;
  int tmp_1;
  
#line 783 
  struct port_info const *pi = netdev_priv((struct net_device const *)dev);
  
#line 784 
  struct adapter const *adap = (struct adapter const *)pi->adapter;
  
#line 785 
  struct sge_rspq const *rq = & adap->sge.ethrxq[(int)pi->first_qset].rspq;
  
#line 787 
  c->rx_coalesce_usecs = qtimer_val_0(adap,rq);
  
#line 789 
  if (((unsigned int)rq->intr_params & 1U) != 0U) 
#line 789 
                                                  tmp_0 = (int)adap->sge.counter_val[(int)rq->pktcnt_idx]; else 
                                                                    
#line 789 
                                                                    tmp_0 = 0;
  
#line 788 
  c->rx_max_coalesced_frames = (unsigned int)tmp_0;
  
#line 790 
  tmp_1 = get_adaptive_rx_setting(dev);
  
#line 790 
  c->use_adaptive_rx_coalesce = (unsigned int)tmp_1;
  
#line 791 
  __retres = 0;
  
#line 791 
  return __retres;
}


#line 811  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int eeprom_ptov(unsigned int phys_addr, unsigned int fn, unsigned int sz)
{
  int __retres;
  
#line 813 
  fn *= sz;
  
#line 814 
  if (phys_addr <= 1023U) {
    
#line 815 
    __retres = (int)(phys_addr + 31744U);
    
#line 815 
    goto return_label;
  }
  else ;
  
#line 816 
  if (fn + 1024U > phys_addr) {
    
#line 817 
    __retres = (int)((phys_addr - fn) + 30720U);
    
#line 817 
    goto return_label;
  }
  else ;
  
#line 818 
  if (phys_addr <= 17407U) {
    
#line 819 
    __retres = (int)((phys_addr - fn) + 4294966272U);
    
#line 819 
    goto return_label;
  }
  else ;
  
#line 820 
  __retres = -22;
  return_label: 
#line 820 
                return __retres;
}


#line 825  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int eeprom_rd_phys(struct adapter *adap, unsigned int phys_addr, u32 *v)
{
  int tmp_1;
  
#line 827 
  int vaddr = eeprom_ptov(phys_addr,adap->pf,1024U);
  
#line 829 
  if (vaddr >= 0) {
    ssize_t tmp_0;
    
#line 830 
    tmp_0 = pci_read_vpd(adap->pdev,(long long)vaddr,4UL,(void *)v);
    
#line 830 
    vaddr = (int)tmp_0;
  }
  else ;
  
#line 831 
  if (0 < vaddr) 
#line 831 
                 tmp_1 = 0; else 
#line 831 
                                 tmp_1 = vaddr;
  
#line 831 
  return tmp_1;
}


#line 834  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int eeprom_wr_phys(struct adapter *adap, unsigned int phys_addr, u32 v)
{
  int tmp_1;
  
#line 836 
  int vaddr = eeprom_ptov(phys_addr,adap->pf,1024U);
  
#line 838 
  if (vaddr >= 0) {
    ssize_t tmp_0;
    
#line 839 
    tmp_0 = pci_write_vpd(adap->pdev,(long long)vaddr,4UL,(void const *)(& v));
    
#line 839 
    vaddr = (int)tmp_0;
  }
  else ;
  
#line 840 
  if (0 < vaddr) 
#line 840 
                 tmp_1 = 0; else 
#line 840 
                                 tmp_1 = vaddr;
  
#line 840 
  return tmp_1;
}


#line 845  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int get_eeprom(struct net_device *dev, struct ethtool_eeprom *e, u8 *data)
{
  int __retres;
  int i;
  
#line 848 
  int err = 0;
  
#line 849 
  struct adapter *adapter = netdev2adap((struct net_device const *)dev);
  
#line 850 
  u8 *buf = kmalloc_1(17408UL,208U);
  
#line 852 
  if (buf == (u8 *)0U) {
    
#line 853 
    __retres = -12;
    
#line 853 
    goto return_label;
  }
  else ;
  
#line 855 
  e->magic = 954396940U;
  
#line 856 
  i = (int)e->offset & -4;
  
#line 856 
  goto ldv_49335;
  ldv_49334: 
#line 857 
  ;
  
#line 857 
  err = eeprom_rd_phys(adapter,(unsigned int)i,(u32 *)(buf + i));
  
#line 856 
  i += 4;
  ldv_49335: 
#line 857 
  ;
  
#line 856 
  if (err == 0 && e->offset + e->len > (unsigned int)i) 
#line 858 
                                                        goto ldv_49334; else 
                                                                    
#line 861 
                                                                    goto ldv_49336;
  ldv_49336: 
#line 862 
  ;
  
#line 859 
  if (err == 0) 
#line 860 
                memcpy((void *)data,(void const *)(buf + e->offset),(unsigned long)e->len); else ;
  
#line 861 
  kfree((void const *)buf);
  
#line 862 
  __retres = err;
  return_label: 
#line 862 
                return __retres;
}


#line 865  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int set_eeprom(struct net_device *dev, struct ethtool_eeprom *eeprom, u8 *data)
{
  int __retres;
  u8 *buf;
  u32 aligned_offset;
  u32 aligned_len;
  u32 *p;
  
#line 869 
  int err = 0;
  
#line 871 
  struct adapter *adapter = netdev2adap((struct net_device const *)dev);
  
#line 873 
  if (eeprom->magic != 954396940U) {
    
#line 874 
    __retres = -22;
    
#line 874 
    goto return_label;
  }
  else ;
  
#line 876 
  aligned_offset = eeprom->offset & 4294967292U;
  
#line 877 
  aligned_len = ((eeprom->len + (eeprom->offset & 3U)) + 3U) & 4294967292U;
  
#line 879 
  if (adapter->pf != 0U) {
    
#line 880 
    u32 start = (adapter->pf + 1U) * 1024U;
    
#line 882 
    if (aligned_offset < start || aligned_offset + aligned_len > start + 1024U) {
      
#line 884 
      __retres = -1;
      
#line 884 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 887 
  if (eeprom->offset != aligned_offset || eeprom->len != aligned_len) {
    
#line 890 
    buf = (u8 *)kmalloc_1((unsigned long)aligned_len,208U);
    
#line 891 
    if (buf == (u8 *)0U) {
      
#line 892 
      __retres = -12;
      
#line 892 
      goto return_label;
    }
    else ;
    
#line 893 
    err = eeprom_rd_phys(adapter,aligned_offset,(u32 *)buf);
    
#line 894 
    if (err == 0 && aligned_len > 4U) 
#line 895 
                                      err = eeprom_rd_phys(adapter,(aligned_offset + aligned_len) + 4294967292U,(u32 *)(buf + (aligned_len + 4294967292U))); else ;
    
#line 898 
    if (err != 0) 
#line 899 
                  goto out; else ;
    
#line 900 
    memcpy((void *)(buf + (eeprom->offset & 3U)),(void const *)data,(unsigned long)eeprom->len);
  }
  else 
#line 902 
       buf = data;
  
#line 905 
  err = t4_seeprom_wp(adapter,(_Bool)0);
  
#line 906 
  if (err != 0) 
#line 907 
                goto out; else ;
  
#line 909 
  p = (u32 *)buf;
  
#line 909 
  goto ldv_49351;
  ldv_49350: 
#line 910 
  ;
  
#line 910 
  err = eeprom_wr_phys(adapter,aligned_offset,*p);
  
#line 911 
  aligned_offset += 4U;
  
#line 909 
  aligned_len += 4294967292U;
  
#line 909 
  p += 1;
  ldv_49351: 
#line 910 
  ;
  
#line 909 
  if (err == 0 && aligned_len != 0U) 
#line 911 
                                     goto ldv_49350; else 
#line 914 
                                                          goto ldv_49352;
  ldv_49352: 
#line 915 
  ;
  
#line 914 
  if (err == 0) 
#line 915 
                err = t4_seeprom_wp(adapter,(_Bool)1); else ;
  out: 
#line 916 
  ;
  
#line 917 
  if (buf != data) 
#line 918 
                   kfree((void const *)buf); else ;
  
#line 919 
  __retres = err;
  return_label: 
#line 919 
                return __retres;
}


#line 922  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int set_flash(struct net_device *netdev, struct ethtool_flash *ef)
{
  int __retres;
  int ret;
  struct firmware const *fw;
  
#line 926 
  struct adapter *adap = netdev2adap((struct net_device const *)netdev);
  
#line 927 
  unsigned int mbox = 8U;
  
#line 929 
  ef->data[127UL] = (char)0;
  
#line 930 
  ret = request_firmware(& fw,(char const *)(& ef->data),adap->pdev_dev);
  
#line 931 
  if (ret < 0) {
    
#line 932 
    __retres = ret;
    
#line 932 
    goto return_label;
  }
  else ;
  
#line 939 
  if ((adap->flags & 1U) != 0U) 
#line 940 
                                mbox = adap->mbox; else ;
  
#line 942 
  ret = t4_fw_upgrade(adap,mbox,fw->data,(unsigned int)fw->size,1);
  
#line 943 
  release_firmware(fw);
  
#line 944 
  if (ret == 0) 
#line 945 
                _dev_info((struct device const *)adap->pdev_dev,"loaded firmware %s, reload cxgb4 driver\n",(char *)(& ef->data)); else ;
  
#line 947 
  __retres = ret;
  return_label: 
#line 947 
                return __retres;
}


#line 950  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static u32 get_rss_table_size(struct net_device *dev)
{
  u32 __retres;
  
#line 952 
  struct port_info const *pi = netdev_priv((struct net_device const *)dev);
  
#line 954 
  __retres = (unsigned int)pi->rss_size;
  
#line 954 
  return __retres;
}


#line 957  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int get_rss_table(struct net_device *dev, u32 *p, u8 *key, u8 *hfunc)
{
  int __retres;
  unsigned int tmp_0;
  
#line 959 
  struct port_info const *pi = netdev_priv((struct net_device const *)dev);
  
#line 960 
  unsigned int n = (unsigned int)pi->rss_size;
  
#line 962 
  if (hfunc != (u8 *)0U) 
#line 963 
                         *hfunc = (unsigned char)1U; else ;
  
#line 964 
  if (p == (u32 *)0U) {
    
#line 965 
    __retres = 0;
    
#line 965 
    goto return_label;
  }
  else ;
  
#line 966 
  goto ldv_49374;
  ldv_49373: 
#line 967 
  ;
  
#line 967 
  *(p + n) = (unsigned int)*(pi->rss + n);
  ldv_49374: 
#line 968 
  ;
  
#line 966 
  tmp_0 = n;
  
#line 966 
  n -= 1U;
  
#line 966 
  ;
  
#line 966 
  if (tmp_0 != 0U) 
#line 968 
                   goto ldv_49373; else 
#line 971 
                                        goto ldv_49375;
  ldv_49375: 
#line 972 
  ;
  
#line 968 
  __retres = 0;
  return_label: 
#line 968 
                return __retres;
}


#line 971  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int set_rss_table(struct net_device *dev, u32 const *p, u8 const *key, u8 const hfunc)
{
  int __retres;
  unsigned int i;
  
#line 975 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 980 
  if (key != (u8 const *)0U || (unsigned int)hfunc > 1U) {
    
#line 982 
    __retres = -95;
    
#line 982 
    goto return_label;
  }
  else ;
  
#line 983 
  if (p == (u32 const *)0U) {
    
#line 984 
    __retres = 0;
    
#line 984 
    goto return_label;
  }
  else ;
  
#line 986 
  i = 0U;
  
#line 986 
  goto ldv_49385;
  ldv_49384: 
#line 987 
  ;
  
#line 987 
  *(pi->rss + i) = (unsigned short)*(p + i);
  
#line 986 
  i += 1U;
  ldv_49385: 
#line 987 
  ;
  
#line 986 
  if ((unsigned int)pi->rss_size > i) 
#line 988 
                                      goto ldv_49384; else 
#line 991 
                                                           goto ldv_49386;
  ldv_49386: 
#line 992 
  ;
  
#line 988 
  if (((pi->adapter)->flags & 1U) != 0U) {
    int tmp_0;
    
#line 989 
    tmp_0 = cxgb4_write_rss((struct port_info const *)pi,(u16 const *)pi->rss);
    
#line 989 
    __retres = tmp_0;
    
#line 989 
    goto return_label;
  }
  else ;
  
#line 990 
  __retres = 0;
  return_label: 
#line 990 
                return __retres;
}


#line 993  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static int get_rxnfc(struct net_device *dev, struct ethtool_rxnfc *info, u32 *rules)
{
  int __retres;
  
#line 996 
  struct port_info const *pi = netdev_priv((struct net_device const *)dev);
  
#line 998 
  switch (info->cmd) {
    case (__u32)41: 
#line 999 
    ;
    {
      
#line 1000 
      unsigned int v = (unsigned int)pi->rss_mode;
      
#line 1002 
      info->data = 0ULL;
      
#line 1003 
      switch (info->flow_type) {
        case (__u32)1: 
#line 1004 
        ;
        
#line 1005 
        if ((v & 4U) != 0U) 
#line 1006 
                            info->data = 240ULL;
        else 
          
#line 1008 
          if ((v & 2U) != 0U) 
#line 1009 
                              info->data = 48ULL; else ;
        
#line 1010 
        goto ldv_49396;
        case (__u32)2: 
#line 1011 
        ;
        
#line 1012 
        if ((v & 4U) != 0U && (v & 1U) != 0U) 
#line 1014 
                                              info->data = 240ULL;
        else 
          
#line 1016 
          if ((v & 2U) != 0U) 
#line 1017 
                              info->data = 48ULL; else ;
        
#line 1018 
        goto ldv_49396;
        case (__u32)3: 
#line 1019 
        ;
        case (__u32)4: 
#line 1020 
        ;
        case (__u32)16: 
#line 1021 
        ;
        
#line 1022 
        if ((v & 2U) != 0U) 
#line 1023 
                            info->data = 48ULL; else ;
        
#line 1024 
        goto ldv_49396;
        case (__u32)5: 
#line 1025 
        ;
        
#line 1026 
        if ((v & 16U) != 0U) 
#line 1027 
                             info->data = 240ULL;
        else 
          
#line 1029 
          if ((v & 8U) != 0U) 
#line 1030 
                              info->data = 48ULL; else ;
        
#line 1031 
        goto ldv_49396;
        case (__u32)6: 
#line 1032 
        ;
        
#line 1033 
        if ((v & 16U) != 0U && (v & 1U) != 0U) 
#line 1035 
                                               info->data = 240ULL;
        else 
          
#line 1037 
          if ((v & 8U) != 0U) 
#line 1038 
                              info->data = 48ULL; else ;
        
#line 1039 
        goto ldv_49396;
        case (__u32)7: 
#line 1040 
        ;
        case (__u32)8: 
#line 1041 
        ;
        case (__u32)17: 
#line 1042 
        ;
        
#line 1043 
        if ((v & 8U) != 0U) 
#line 1044 
                            info->data = 48ULL; else ;
        
#line 1045 
        goto ldv_49396;
      }
      ldv_49396: 
#line 1047 
      ;
      
#line 1047 
      __retres = 0;
      
#line 1047 
      goto return_label;
    }
    case (__u32)45: 
#line 1049 
    ;
    
#line 1050 
    info->data = (unsigned long long)pi->nqsets;
    
#line 1051 
    __retres = 0;
    
#line 1051 
    goto return_label;
  }
  
#line 1053 
  __retres = -95;
  return_label: 
#line 1053 
                return __retres;
}


#line 1056  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
static struct ethtool_ops const cxgb_ethtool_ops = {.get_settings = & get_settings, .set_settings = & set_settings, .get_drvinfo = & get_drvinfo, .get_regs_len = & get_regs_len, .get_regs = & get_regs, .get_wol = (void (*)(struct net_device *, struct ethtool_wolinfo *))0, .set_wol = (int (*)(struct net_device *, struct ethtool_wolinfo *))0, .get_msglevel = & get_msglevel, .set_msglevel = & set_msglevel, .nway_reset = & restart_autoneg, .get_link = & ethtool_op_get_link, .get_eeprom_len = & get_eeprom_len, .get_eeprom = & get_eeprom, .set_eeprom = & set_eeprom, .get_coalesce = & get_coalesce, .set_coalesce = & set_coalesce, .get_ringparam = & get_sge_param, .set_ringparam = & set_sge_param, .get_pauseparam = & get_pauseparam, .set_pauseparam = & set_pauseparam, .self_test = (void (*)(struct net_device *, struct ethtool_test *, u64 *))0, .get_strings = & get_strings, .set_phys_id = & identify_port, .get_ethtool_stats = & get_stats, .begin = (int (*)(struct net_device *))0, .complete = (void (*)(struct net_device *))0, .get_priv_flags = (u32 (*)(struct net_device *))0, .set_priv_flags = (int (*)(struct net_device *, u32 ))0, .get_sset_count = & get_sset_count, .get_rxnfc = & get_rxnfc, .set_rxnfc = (int (*)(struct net_device *, struct ethtool_rxnfc *))0, .flash_device = & set_flash, .reset = (int (*)(struct net_device *, u32 *))0, .get_rxfh_key_size = (u32 (*)(struct net_device *))0, .get_rxfh_indir_size = & get_rss_table_size, .get_rxfh = & get_rss_table, .set_rxfh = & set_rss_table, .get_channels = (void (*)(struct net_device *, struct ethtool_channels *))0, .set_channels = (int (*)(struct net_device *, struct ethtool_channels *))0, .get_dump_flag = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_dump_data = (int (*)(struct net_device *, struct ethtool_dump *, void *))0, .set_dump = (int (*)(struct net_device *, struct ethtool_dump *))0, .get_ts_info = (int (*)(struct net_device *, struct ethtool_ts_info *))0, .get_module_info = (int (*)(struct net_device *, struct ethtool_modinfo *))0, .get_module_eeprom = (int (*)(struct net_device *, struct ethtool_eeprom *, u8 *))0, .get_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .set_eee = (int (*)(struct net_device *, struct ethtool_eee *))0, .get_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void *))0, .set_tunable = (int (*)(struct net_device *, struct ethtool_tunable const *, void const *))0};

#line 1086  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_ethtool.c"
void cxgb4_set_ethtool_ops(struct net_device *netdev)
{
  
#line 1088 
  netdev->ethtool_ops = & cxgb_ethtool_ops;
  
#line 1089 
  return;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
unsigned int (*ldv_emg_alias_ethtool_op_get_link_10)(struct net_device *) = & ethtool_op_get_link;

#line 77  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_get_settings_25(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 78 
  tmp = get_settings(arg0,arg1);
  
#line 78 
  return tmp;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
void ldv_emg_wrapper_get_strings_30(struct net_device *arg0, unsigned int arg1, unsigned char *arg2)
{
  
#line 83 
  get_strings(arg0,arg1,arg2);
  
#line 84 
  return;
}


#line 87  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_set_pauseparam_35(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  int tmp;
  
#line 88 
  tmp = set_pauseparam(arg0,arg1);
  
#line 88 
  return tmp;
}


#line 92  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_identify_port_15(struct net_device *arg0, enum ethtool_phys_id_state arg1)
{
  int tmp;
  
#line 93 
  tmp = identify_port(arg0,arg1);
  
#line 93 
  return tmp;
}


#line 97  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_get_coalesce_31(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 98 
  tmp = get_coalesce(arg0,arg1);
  
#line 98 
  return tmp;
}


#line 102  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_set_flash_24(struct net_device *arg0, struct ethtool_flash *arg1)
{
  int tmp;
  
#line 103 
  tmp = set_flash(arg0,arg1);
  
#line 103 
  return tmp;
}


#line 107  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
unsigned int ldv_emg_wrapper_get_rss_table_size_4(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 108 
  tmp = get_rss_table_size(arg0);
  
#line 108 
  return tmp;
}


#line 112  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_get_rss_table_32(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char *arg3)
{
  int tmp;
  
#line 113 
  tmp = get_rss_table(arg0,arg1,arg2,arg3);
  
#line 113 
  return tmp;
}


#line 117  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_get_regs_len_33(struct net_device *arg0)
{
  int tmp;
  
#line 118 
  tmp = get_regs_len(arg0);
  
#line 118 
  return tmp;
}


#line 122  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_restart_autoneg_29(struct net_device *arg0)
{
  int tmp;
  
#line 123 
  tmp = restart_autoneg(arg0);
  
#line 123 
  return tmp;
}


#line 127  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_set_coalesce_34(struct net_device *arg0, struct ethtool_coalesce *arg1)
{
  int tmp;
  
#line 128 
  tmp = set_coalesce(arg0,arg1);
  
#line 128 
  return tmp;
}


#line 132  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
void ldv_emg_wrapper_get_pauseparam_2(struct net_device *arg0, struct ethtool_pauseparam *arg1)
{
  
#line 133 
  get_pauseparam(arg0,arg1);
  
#line 134 
  return;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_set_eeprom_14(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  int tmp;
  
#line 138 
  tmp = set_eeprom(arg0,arg1,arg2);
  
#line 138 
  return tmp;
}


#line 142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_set_rss_table_16(struct net_device *arg0, unsigned int *arg1, unsigned char *arg2, unsigned char arg3)
{
  int tmp;
  
#line 143 
  tmp = set_rss_table(arg0,(u32 const *)arg1,(u8 const *)arg2,(unsigned char)((int)arg3));
  
#line 143 
  return tmp;
}


#line 147  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_get_rxnfc_28(struct net_device *arg0, struct ethtool_rxnfc *arg1, unsigned int *arg2)
{
  int tmp;
  
#line 148 
  tmp = get_rxnfc(arg0,arg1,arg2);
  
#line 148 
  return tmp;
}


#line 152  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_set_settings_3(struct net_device *arg0, struct ethtool_cmd *arg1)
{
  int tmp;
  
#line 153 
  tmp = set_settings(arg0,arg1);
  
#line 153 
  return tmp;
}


#line 157  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
void ldv_emg_wrapper_set_msglevel_5(struct net_device *arg0, unsigned int arg1)
{
  
#line 158 
  set_msglevel(arg0,arg1);
  
#line 159 
  return;
}


#line 162  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
void ldv_emg_wrapper_get_stats_8(struct net_device *arg0, struct ethtool_stats *arg1, unsigned long long *arg2)
{
  
#line 163 
  get_stats(arg0,arg1,arg2);
  
#line 164 
  return;
}


#line 167  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_get_eeprom_len_37(struct net_device *arg0)
{
  int tmp;
  
#line 168 
  tmp = get_eeprom_len(arg0);
  
#line 168 
  return tmp;
}


#line 172  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_get_eeprom_20(struct net_device *arg0, struct ethtool_eeprom *arg1, unsigned char *arg2)
{
  int tmp;
  
#line 173 
  tmp = get_eeprom(arg0,arg1,arg2);
  
#line 173 
  return tmp;
}


#line 177  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
void ldv_emg_wrapper_get_regs_26(struct net_device *arg0, struct ethtool_regs *arg1, void *arg2)
{
  
#line 178 
  get_regs(arg0,arg1,arg2);
  
#line 179 
  return;
}


#line 182  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
void ldv_emg_wrapper_get_drvinfo_12(struct net_device *arg0, struct ethtool_drvinfo *arg1)
{
  
#line 183 
  get_drvinfo(arg0,arg1);
  
#line 184 
  return;
}


#line 187  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
unsigned int ldv_emg_wrapper_get_msglevel_18(struct net_device *arg0)
{
  unsigned int tmp;
  
#line 188 
  tmp = get_msglevel(arg0);
  
#line 188 
  return tmp;
}


#line 192  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_set_sge_param_17(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  int tmp;
  
#line 193 
  tmp = set_sge_param(arg0,arg1);
  
#line 193 
  return tmp;
}


#line 197  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
void ldv_emg_wrapper_get_sge_param_7(struct net_device *arg0, struct ethtool_ringparam *arg1)
{
  
#line 198 
  get_sge_param(arg0,arg1);
  
#line 199 
  return;
}


#line 202  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
int ldv_emg_wrapper_get_sset_count_27(struct net_device *arg0, int arg1)
{
  int tmp;
  
#line 203 
  tmp = get_sset_count(arg0,arg1);
  
#line 203 
  return tmp;
}


#line 624  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
static void *kmalloc_1(size_t size, gfp_t flags)
{
  void *tmp;
  
#line 627 
  tmp = ldv_kmalloc(size,flags);
  
#line 627 
  return tmp;
}


#line 966  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
static void ldv_spin_lock_81(spinlock_t *lock)
{
  
#line 970 
  ldv_spin_model_lock((char *)"stats_lock_of_adapter");
  
#line 972 
  spin_lock_2(lock);
  
#line 973 
  return;
}


#line 976  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
static void ldv_spin_unlock_82(spinlock_t *lock)
{
  
#line 980 
  ldv_spin_model_unlock((char *)"stats_lock_of_adapter");
  
#line 982 
  spin_unlock_2(lock);
  
#line 983 
  return;
}


#line 986  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
static void ldv_spin_lock_83(spinlock_t *lock)
{
  
#line 990 
  ldv_spin_model_lock((char *)"stats_lock_of_adapter");
  
#line 992 
  spin_lock_2(lock);
  
#line 993 
  return;
}


#line 996  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_cxgb4_ethtool.c.aux"
static void ldv_spin_unlock_84(spinlock_t *lock)
{
  
#line 1000 
  ldv_spin_model_unlock((char *)"stats_lock_of_adapter");
  
#line 1002 
  spin_unlock_2(lock);
  
#line 1003 
  return;
}

void *__builtin_memcpy(void *, void const *, unsigned long);


#line 201  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/compiler.h"
__inline static void __read_once_size(void const volatile *p, void *res, int size)
{
  
#line 203 
  switch (size) {
    case 1: 
#line 204 
    ;
    
#line 204 
    *((__u8 *)res) = *((__u8 volatile *)p);
    
#line 204 
    goto ldv_1185;
    case 2: 
#line 205 
    ;
    
#line 205 
    *((__u16 *)res) = *((__u16 volatile *)p);
    
#line 205 
    goto ldv_1185;
    case 4: 
#line 206 
    ;
    
#line 206 
    *((__u32 *)res) = *((__u32 volatile *)p);
    
#line 206 
    goto ldv_1185;
    case 8: 
#line 207 
    ;
    
#line 207 
    *((__u64 *)res) = *((__u64 volatile *)p);
    
#line 207 
    goto ldv_1185;
    default: 
#line 208 
    ;
    
#line 209 
    ldv_inline_asm();
    
#line 210 
    __builtin_memcpy(res,(void const *)p,(unsigned long)size);
    
#line 211 
    ldv_inline_asm();
  }
  ldv_1185: 
#line 213 
  ;
  
#line 214 
  return;
}


#line 9  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_clip_tbl.c.aux"
int ldv_atomic_dec_and_test(atomic_t *v);


#line 108  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/bitops.h"
__inline static __u32 rol32(__u32 word, unsigned int shift)
{
  __u32 __retres;
  
#line 110 
  __retres = (word << shift) | (word >> ((unsigned long)8 * sizeof(word) - (unsigned long)shift));
  
#line 110 
  return __retres;
}


#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/string_64.h"
int memcmp(void const *, void const *, size_t);


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_inc_0(atomic_t *v);


#line 114 
static void atomic_dec_0(atomic_t *v);


#line 120 
static int atomic_dec_and_test(atomic_t *v);


#line 18  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock.h"
void __rwlock_init(rwlock_t *, char const *, struct lock_class_key *);


#line 20  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_api_smp.h"
void _raw_read_lock_bh(rwlock_t *);


#line 21 
void _raw_write_lock_bh(rwlock_t *);


#line 32 
void _raw_read_unlock_bh(rwlock_t *);


#line 33 
void _raw_write_unlock_bh(rwlock_t *);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_bh_1(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 399 
static void ldv_spin_lock_bh_82(spinlock_t *lock);


#line 412  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_bh_1(spinlock_t *lock)
{
  
#line 414 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 415 
  return;
}


#line 452 
static void ldv_spin_unlock_bh_83(spinlock_t *lock);


#line 463  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rcupdate.h"
int rcu_read_lock_held(void);


#line 3533  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
struct net_device *netdev_master_upper_dev_get_rcu(struct net_device *);


#line 149  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jhash.h"
__inline static u32 __jhash_nwords(u32 a, u32 b, u32 c, u32 initval)
{
  __u32 tmp;
  __u32 tmp_0;
  __u32 tmp_1;
  __u32 tmp_2;
  __u32 tmp_3;
  __u32 tmp_4;
  __u32 tmp_5;
  
#line 151 
  a += initval;
  
#line 152 
  b += initval;
  
#line 153 
  c += initval;
  
#line 155 
  c ^= b;
  
#line 155 
  tmp = rol32(b,14U);
  
#line 155 
  c -= tmp;
  
#line 155 
  a ^= c;
  
#line 155 
  tmp_0 = rol32(c,11U);
  
#line 155 
  a -= tmp_0;
  
#line 155 
  b ^= a;
  
#line 155 
  tmp_1 = rol32(a,25U);
  
#line 155 
  b -= tmp_1;
  
#line 155 
  c ^= b;
  
#line 155 
  tmp_2 = rol32(b,16U);
  
#line 155 
  c -= tmp_2;
  
#line 155 
  a ^= c;
  
#line 155 
  tmp_3 = rol32(c,4U);
  
#line 155 
  a -= tmp_3;
  
#line 155 
  b ^= a;
  
#line 155 
  tmp_4 = rol32(a,14U);
  
#line 155 
  b -= tmp_4;
  
#line 155 
  c ^= b;
  
#line 155 
  tmp_5 = rol32(b,24U);
  
#line 155 
  c -= tmp_5;
  
#line 157 
  return c;
}


#line 170  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jhash.h"
__inline static u32 jhash_1word(u32 a, u32 initval)
{
  u32 tmp;
  
#line 172 
  tmp = __jhash_nwords(a,0U,0U,initval + 3735928563U);
  
#line 172 
  return tmp;
}


#line 36  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rtnetlink.h"
int lockdep_rtnl_is_held(void);


#line 109  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
struct net_device *__vlan_find_dev_deep_rcu(struct net_device *, __be16, u16);


#line 232  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/addrconf.h"
__inline static struct inet6_dev *__in6_dev_get(struct net_device const *dev)
{
  struct inet6_dev *tmp_4;
  {
    struct inet6_dev *tmp_0;
    {
      struct inet6_dev *tmp;
      {
        union __anonunion___u_2162 __u;
        
#line 234 
        __read_once_size((void const volatile *)(& dev->ip6_ptr),(void *)(& __u.__c),8);
        
#line 234 
        tmp = __u.__val;
      }
      
#line 234 
      struct inet6_dev * const _________p1 = tmp;
      
#line 234 
      tmp_0 = _________p1;
    }
    
#line 234 
    struct inet6_dev *________p1 = tmp_0;
    {
      bool __warned;
      int tmp_1;
      
#line 234 
      tmp_1 = debug_lockdep_rcu_enabled();
      
#line 234 
      if (tmp_1 != 0) {
        
#line 234 
        if (! __warned) {
          int tmp_2;
          
#line 234 
          tmp_2 = lockdep_rtnl_is_held();
          
#line 234 
          if (tmp_2 == 0) {
            int tmp_3;
            
#line 234 
            tmp_3 = rcu_read_lock_held();
            
#line 234 
            if (tmp_3 == 0) {
              
#line 234 
              __warned = (_Bool)1;
              
#line 234 
              lockdep_rcu_suspicious("include/net/addrconf.h",234,"suspicious rcu_dereference_check() usage");
            }
            else ;
          }
          else ;
        }
        else ;
      }
      else ;
    }
    
#line 234 
    tmp_4 = ________p1;
  }
  
#line 234 
  return tmp_4;
}


#line 21  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
__inline static unsigned int ipv4_clip_hash(struct clip_tbl *c, u32 const *key)
{
  unsigned int __retres;
  u32 tmp;
  
#line 23 
  unsigned int clipt_size_half = c->clipt_size / 2U;
  
#line 25 
  tmp = jhash_1word(*key,0U);
  
#line 25 
  ;
  
#line 25 
  __retres = tmp % clipt_size_half;
  
#line 25 
  return __retres;
}


#line 28  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
__inline static unsigned int ipv6_clip_hash(struct clip_tbl *d, u32 const *key)
{
  unsigned int __retres;
  u32 tmp;
  
#line 30 
  unsigned int clipt_size_half = d->clipt_size / 2U;
  
#line 31 
  u32 xor = ((*key ^ *(key + 1U)) ^ *(key + 2U)) ^ *(key + 3U);
  
#line 34 
  tmp = jhash_1word(xor,0U);
  
#line 34 
  ;
  
#line 33 
  __retres = tmp % clipt_size_half + clipt_size_half;
  
#line 33 
  return __retres;
}


#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
static unsigned int clip_addr_hash(struct clip_tbl *ctbl, u32 const *addr, u8 v6)
{
  unsigned int tmp_1;
  
#line 40 
  if ((unsigned int)v6 != 0U) 
#line 40 
                              tmp_1 = ipv6_clip_hash(ctbl,addr); else 
                                                                   
#line 40 
                                                                   tmp_1 = ipv4_clip_hash(ctbl,addr);
  
#line 40 
  return tmp_1;
}


#line 44  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
static int clip6_get_mbox(struct net_device const *dev, struct in6_addr const *lip)
{
  struct fw_clip_cmd c;
  int tmp_0;
  
#line 47 
  struct adapter *adap = netdev2adap(dev);
  
#line 50 
  memset((void *)(& c),0,32UL);
  
#line 51 
  c.op_to_write = 41000U;
  
#line 53 
  c.alloc_to_len16 = 33554560U;
  
#line 54 
  c.ip_hi = *((__be64 *)(& lip->in6_u.u6_addr8));
  
#line 55 
  c.ip_lo = *((__be64 *)(& lip->in6_u.u6_addr8) + 8U);
  
#line 56 
  tmp_0 = t4_wr_mbox_meat(adap,(int)adap->mbox,(void const *)(& c),32,(void *)(& c),(_Bool)0);
  
#line 56 
  return tmp_0;
}


#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
static int clip6_release_mbox(struct net_device const *dev, struct in6_addr const *lip)
{
  struct fw_clip_cmd c;
  int tmp_0;
  
#line 62 
  struct adapter *adap = netdev2adap(dev);
  
#line 65 
  memset((void *)(& c),0,32UL);
  
#line 66 
  c.op_to_write = 49192U;
  
#line 68 
  c.alloc_to_len16 = 33554496U;
  
#line 69 
  c.ip_hi = *((__be64 *)(& lip->in6_u.u6_addr8));
  
#line 70 
  c.ip_lo = *((__be64 *)(& lip->in6_u.u6_addr8) + 8U);
  
#line 71 
  tmp_0 = t4_wr_mbox_meat(adap,(int)adap->mbox,(void const *)(& c),32,(void *)(& c),(_Bool)0);
  
#line 71 
  return tmp_0;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
int cxgb4_clip_get(struct net_device const *dev, u32 const *lip, u8 v6)
{
  int __retres;
  struct clip_entry *ce;
  struct clip_entry *cte;
  int hash;
  unsigned int tmp_0;
  struct clip_entry *tmp_1;
  struct clip_entry *tmp_2;
  int tmp_4;
  
#line 76 
  struct adapter *adap = netdev2adap(dev);
  
#line 77 
  struct clip_tbl *ctbl = adap->clipt;
  
#line 79 
  u32 *addr = (u32 *)lip;
  
#line 81 
  int ret = -1;
  
#line 83 
  if (ctbl == (struct clip_tbl *)0) {
    
#line 84 
    __retres = 0;
    
#line 84 
    goto return_label;
  }
  else ;
  
#line 86 
  tmp_0 = clip_addr_hash(ctbl,(u32 const *)addr,(unsigned char)((int)v6));
  
#line 86 
  hash = (int)tmp_0;
  
#line 88 
  _raw_read_lock_bh(& ctbl->lock);
  {
    
#line 89 
    struct list_head const *__mptr = (struct list_head const *)ctbl->hash_list[hash].next;
    
#line 89 
    tmp_1 = (struct clip_entry *)__mptr + 18446744073709551536U;
  }
  
#line 89 
  cte = tmp_1;
  
#line 89 
  goto ldv_56117;
  ldv_56116: 
#line 90 
  ;
  
#line 90 
  if ((unsigned int)cte->__anonCompField_clip_entry_111.addr6.sin6_family == 10U && (unsigned int)v6 != 0U) 
    
#line 91 
    ret = memcmp((void const *)lip,(void const *)(& cte->__anonCompField_clip_entry_111.addr6.sin6_addr.in6_u.u6_addr8),16UL);
  else 
    
#line 93 
    if ((unsigned int)cte->__anonCompField_clip_entry_111.addr.sin_family == 2U && (unsigned int)v6 == 0U) 
      
#line 94 
      ret = memcmp((void const *)lip,(void const *)(& cte->__anonCompField_clip_entry_111.addr.sin_addr),4UL); else ;
  
#line 96 
  if (ret == 0) {
    
#line 97 
    ce = cte;
    
#line 98 
    _raw_read_unlock_bh(& ctbl->lock);
    
#line 99 
    goto found;
  }
  else ;
  {
    
#line 89 
    struct list_head const *__mptr_0 = (struct list_head const *)cte->list.next;
    
#line 89 
    tmp_2 = (struct clip_entry *)__mptr_0 + 18446744073709551536U;
  }
  
#line 89 
  cte = tmp_2;
  ldv_56117: 
#line 91 
  ;
  
#line 89 
  if (& cte->list != & ctbl->hash_list[hash]) 
#line 91 
                                              goto ldv_56116; else 
#line 94 
                                                                   goto ldv_56118;
  ldv_56118: 
#line 95 
  ;
  
#line 102 
  _raw_read_unlock_bh(& ctbl->lock);
  
#line 104 
  _raw_write_lock_bh(& ctbl->lock);
  
#line 105 
  tmp_4 = list_empty((struct list_head const *)(& ctbl->ce_free_head));
  
#line 105 
  if (tmp_4 == 0) {
    struct clip_entry *tmp_3;
    {
      
#line 106 
      struct list_head const *__mptr_1 = (struct list_head const *)ctbl->ce_free_head.next;
      
#line 106 
      tmp_3 = (struct clip_entry *)__mptr_1 + 18446744073709551536U;
    }
    
#line 106 
    ce = tmp_3;
    
#line 108 
    list_del(& ce->list);
    
#line 109 
    INIT_LIST_HEAD(& ce->list);
    
#line 110 
    spinlock_check(& ce->lock);
    {
      struct lock_class_key __key;
      
#line 110 
      __raw_spin_lock_init(& ce->lock.__anonCompField_spinlock_18.rlock,"&(&ce->lock)->rlock",& __key);
    }
    
#line 111 
    atomic_set(& ce->refcnt,0);
    
#line 112 
    atomic_dec_0(& ctbl->nfree);
    
#line 113 
    list_add_tail(& ce->list,& ctbl->hash_list[hash]);
    
#line 114 
    if ((unsigned int)v6 != 0U) {
      
#line 115 
      ce->__anonCompField_clip_entry_111.addr6.sin6_family = (unsigned short)10U;
      
#line 116 
      memcpy((void *)(& ce->__anonCompField_clip_entry_111.addr6.sin6_addr.in6_u.u6_addr8),(void const *)lip,16UL);
      
#line 118 
      ret = clip6_get_mbox(dev,(struct in6_addr const *)lip);
      
#line 119 
      if (ret != 0) {
        
#line 120 
        _raw_write_unlock_bh(& ctbl->lock);
        
#line 121 
        __retres = ret;
        
#line 121 
        goto return_label;
      }
      else ;
    }
    else {
      
#line 124 
      ce->__anonCompField_clip_entry_111.addr.sin_family = (unsigned short)2U;
      
#line 125 
      memcpy((void *)(& ce->__anonCompField_clip_entry_111.addr.sin_addr),(void const *)lip,4UL);
    }
  }
  else {
    
#line 129 
    _raw_write_unlock_bh(& ctbl->lock);
    
#line 130 
    __retres = -12;
    
#line 130 
    goto return_label;
  }
  
#line 132 
  _raw_write_unlock_bh(& ctbl->lock);
  found: 
#line 133 
  ;
  
#line 134 
  atomic_inc_0(& ce->refcnt);
  
#line 136 
  __retres = 0;
  return_label: 
#line 136 
                return __retres;
}


#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
static char const __kstrtab_cxgb4_clip_get[15U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'c', (char)'l', (char)'i', (char)'p', (char)'_', (char)'g', (char)'e', (char)'t', (char)'\000'};

#line 138 
struct kernel_symbol const __ksymtab_cxgb4_clip_get;


#line 138  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
struct kernel_symbol const __ksymtab_cxgb4_clip_get = {.value = (unsigned long)(& cxgb4_clip_get), .name = (char const *)(& __kstrtab_cxgb4_clip_get)};

#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
void cxgb4_clip_release(struct net_device const *dev, u32 const *lip, u8 v6)
{
  struct clip_entry *ce;
  struct clip_entry *cte;
  int hash;
  unsigned int tmp_0;
  struct clip_entry *tmp_1;
  struct clip_entry *tmp_2;
  int tmp_3;
  
#line 142 
  struct adapter *adap = netdev2adap(dev);
  
#line 143 
  struct clip_tbl *ctbl = adap->clipt;
  
#line 145 
  u32 *addr = (u32 *)lip;
  
#line 147 
  int ret = -1;
  
#line 149 
  tmp_0 = clip_addr_hash(ctbl,(u32 const *)addr,(unsigned char)((int)v6));
  
#line 149 
  hash = (int)tmp_0;
  
#line 151 
  _raw_read_lock_bh(& ctbl->lock);
  {
    
#line 152 
    struct list_head const *__mptr = (struct list_head const *)ctbl->hash_list[hash].next;
    
#line 152 
    tmp_1 = (struct clip_entry *)__mptr + 18446744073709551536U;
  }
  
#line 152 
  cte = tmp_1;
  
#line 152 
  goto ldv_56149;
  ldv_56148: 
#line 153 
  ;
  
#line 153 
  if ((unsigned int)cte->__anonCompField_clip_entry_111.addr6.sin6_family == 10U && (unsigned int)v6 != 0U) 
    
#line 154 
    ret = memcmp((void const *)lip,(void const *)(& cte->__anonCompField_clip_entry_111.addr6.sin6_addr.in6_u.u6_addr8),16UL);
  else 
    
#line 156 
    if ((unsigned int)cte->__anonCompField_clip_entry_111.addr.sin_family == 2U && (unsigned int)v6 == 0U) 
      
#line 157 
      ret = memcmp((void const *)lip,(void const *)(& cte->__anonCompField_clip_entry_111.addr.sin_addr),4UL); else ;
  
#line 159 
  if (ret == 0) {
    
#line 160 
    ce = cte;
    
#line 161 
    _raw_read_unlock_bh(& ctbl->lock);
    
#line 162 
    goto found;
  }
  else ;
  {
    
#line 152 
    struct list_head const *__mptr_0 = (struct list_head const *)cte->list.next;
    
#line 152 
    tmp_2 = (struct clip_entry *)__mptr_0 + 18446744073709551536U;
  }
  
#line 152 
  cte = tmp_2;
  ldv_56149: 
#line 154 
  ;
  
#line 152 
  if (& cte->list != & ctbl->hash_list[hash]) 
#line 154 
                                              goto ldv_56148; else 
#line 157 
                                                                   goto ldv_56150;
  ldv_56150: 
#line 158 
  ;
  
#line 165 
  _raw_read_unlock_bh(& ctbl->lock);
  
#line 167 
  goto return_label;
  found: 
#line 168 
  ;
  
#line 169 
  _raw_write_lock_bh(& ctbl->lock);
  
#line 170 
  ldv_spin_lock_bh_82(& ce->lock);
  
#line 171 
  tmp_3 = atomic_dec_and_test(& ce->refcnt);
  
#line 171 
  if (tmp_3 != 0) {
    
#line 172 
    list_del(& ce->list);
    
#line 173 
    INIT_LIST_HEAD(& ce->list);
    
#line 174 
    list_add_tail(& ce->list,& ctbl->ce_free_head);
    
#line 175 
    atomic_inc_0(& ctbl->nfree);
    
#line 176 
    if ((unsigned int)v6 != 0U) 
#line 177 
                                clip6_release_mbox(dev,(struct in6_addr const *)lip); else ;
  }
  else ;
  
#line 179 
  ldv_spin_unlock_bh_83(& ce->lock);
  
#line 180 
  _raw_write_unlock_bh(& ctbl->lock);
  return_label: 
#line 181 
                return;
}


#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
static char const __kstrtab_cxgb4_clip_release[19U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'c', (char)'l', (char)'i', (char)'p', (char)'_', (char)'r', (char)'e', (char)'l', (char)'e', (char)'a', (char)'s', (char)'e', (char)'\000'};

#line 182 
struct kernel_symbol const __ksymtab_cxgb4_clip_release;


#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
struct kernel_symbol const __ksymtab_cxgb4_clip_release = {.value = (unsigned long)(& cxgb4_clip_release), .name = (char const *)(& __kstrtab_cxgb4_clip_release)};

#line 188  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
static int cxgb4_update_dev_clip(struct net_device *root_dev, struct net_device *dev)
{
  int __retres;
  struct inet6_ifaddr *ifa;
  struct inet6_ifaddr *tmp;
  struct inet6_ifaddr *tmp_0;
  
#line 191 
  struct inet6_dev *idev = (struct inet6_dev *)0;
  
#line 193 
  int ret = 0;
  
#line 195 
  idev = __in6_dev_get((struct net_device const *)root_dev);
  
#line 196 
  if (idev == (struct inet6_dev *)0) {
    
#line 197 
    __retres = ret;
    
#line 197 
    goto return_label;
  }
  else ;
  
#line 199 
  _raw_read_lock_bh(& idev->lock);
  {
    
#line 200 
    struct list_head const *__mptr = (struct list_head const *)idev->addr_list.next;
    
#line 200 
    tmp = (struct inet6_ifaddr *)__mptr + 18446744073709551224U;
  }
  
#line 200 
  ifa = tmp;
  
#line 200 
  goto ldv_56173;
  ldv_56172: 
#line 201 
  ;
  
#line 201 
  ret = cxgb4_clip_get((struct net_device const *)dev,(u32 const *)(& ifa->addr.in6_u.u6_addr8),(unsigned char)1);
  
#line 202 
  if (ret < 0) 
#line 203 
               goto ldv_56171; else ;
  {
    
#line 200 
    struct list_head const *__mptr_0 = (struct list_head const *)ifa->if_list.next;
    
#line 200 
    tmp_0 = (struct inet6_ifaddr *)__mptr_0 + 18446744073709551224U;
  }
  
#line 200 
  ifa = tmp_0;
  ldv_56173: 
#line 202 
  ;
  
#line 200 
  if (& ifa->if_list != & idev->addr_list) 
#line 202 
                                           goto ldv_56172; else 
#line 205 
                                                                goto ldv_56171;
  ldv_56171: 
#line 206 
  ;
  
#line 205 
  _raw_read_unlock_bh(& idev->lock);
  
#line 207 
  __retres = ret;
  return_label: 
#line 207 
                return __retres;
}


#line 210  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
int cxgb4_update_root_dev_clip(struct net_device *dev)
{
  int __retres;
  int i;
  
#line 212 
  struct net_device *root_dev = (struct net_device *)0;
  
#line 213 
  int ret = 0;
  
#line 216 
  ret = cxgb4_update_dev_clip(dev,dev);
  
#line 217 
  if (ret != 0) {
    
#line 218 
    __retres = ret;
    
#line 218 
    goto return_label;
  }
  else ;
  
#line 221 
  root_dev = netdev_master_upper_dev_get_rcu(dev);
  
#line 222 
  if (root_dev != (struct net_device *)0) {
    
#line 223 
    ret = cxgb4_update_dev_clip(root_dev,dev);
    
#line 224 
    if (ret != 0) {
      
#line 225 
      __retres = ret;
      
#line 225 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 228 
  i = 0;
  
#line 228 
  goto ldv_56183;
  ldv_56182: 
#line 229 
  ;
  
#line 229 
  root_dev = __vlan_find_dev_deep_rcu(dev,(unsigned short)129,(unsigned short)((int)((unsigned short)i)));
  
#line 230 
  if (root_dev == (struct net_device *)0) 
#line 231 
                                          goto ldv_56180; else ;
  
#line 233 
  ret = cxgb4_update_dev_clip(root_dev,dev);
  
#line 234 
  if (ret != 0) 
#line 235 
                goto ldv_56181; else ;
  ldv_56180: 
#line 236 
  ;
  
#line 228 
  i += 1;
  ldv_56183: 
#line 229 
  ;
  
#line 228 
  if (i <= 4095) 
#line 230 
                 goto ldv_56182; else 
#line 233 
                                      goto ldv_56181;
  ldv_56181: 
#line 234 
  ;
  
#line 238 
  __retres = ret;
  return_label: 
#line 238 
                return __retres;
}


#line 240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
static char const __kstrtab_cxgb4_update_root_dev_clip[27U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'u', (char)'p', (char)'d', (char)'a', (char)'t', (char)'e', (char)'_', (char)'r', (char)'o', (char)'o', (char)'t', (char)'_', (char)'d', (char)'e', (char)'v', (char)'_', (char)'c', (char)'l', (char)'i', (char)'p', (char)'\000'};

#line 240 
struct kernel_symbol const __ksymtab_cxgb4_update_root_dev_clip;


#line 240  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
struct kernel_symbol const __ksymtab_cxgb4_update_root_dev_clip = {.value = (unsigned long)(& cxgb4_update_root_dev_clip), .name = (char const *)(& __kstrtab_cxgb4_update_root_dev_clip)};

#line 242  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
int clip_tbl_show(struct seq_file *seq, void *v)
{
  int __retres;
  struct clip_entry *ce;
  char ip[60U];
  int i;
  struct clip_entry *tmp;
  int tmp_0;
  struct clip_entry *tmp_1;
  int tmp_2;
  
#line 244 
  struct adapter *adapter = (struct adapter *)seq->private;
  
#line 245 
  struct clip_tbl *ctbl = adapter->clipt;
  
#line 250 
  _raw_read_lock_bh(& ctbl->lock);
  
#line 252 
  seq_puts(seq,"IP Address                  Users\n");
  
#line 253 
  i = 0;
  
#line 253 
  goto ldv_56208;
  ldv_56207: 
#line 254 
  ;
  {
    
#line 254 
    struct list_head const *__mptr = (struct list_head const *)ctbl->hash_list[i].next;
    
#line 254 
    tmp = (struct clip_entry *)__mptr + 18446744073709551536U;
  }
  
#line 254 
  ce = tmp;
  
#line 254 
  goto ldv_56205;
  ldv_56204: 
#line 255 
  ;
  
#line 255 
  ip[0] = (char)0;
  
#line 256 
  sprintf((char *)(& ip),"%pISc",& ce->__anonCompField_clip_entry_111.addr);
  
#line 257 
  tmp_0 = atomic_read((atomic_t const *)(& ce->refcnt));
  
#line 257 
  ;
  
#line 257 
  seq_printf(seq,"%-25s   %u\n",(char *)(& ip),tmp_0);
  {
    
#line 254 
    struct list_head const *__mptr_0 = (struct list_head const *)ce->list.next;
    
#line 254 
    tmp_1 = (struct clip_entry *)__mptr_0 + 18446744073709551536U;
  }
  
#line 254 
  ce = tmp_1;
  ldv_56205: 
#line 256 
  ;
  
#line 254 
  if (& ce->list != & ctbl->hash_list[i]) 
#line 256 
                                          goto ldv_56204; else 
#line 259 
                                                               goto ldv_56206;
  ldv_56206: 
#line 260 
  ;
  
#line 253 
  i += 1;
  ldv_56208: 
#line 254 
  ;
  
#line 253 
  if (ctbl->clipt_size > (unsigned int)i) 
#line 255 
                                          goto ldv_56207; else 
#line 258 
                                                               goto ldv_56209;
  ldv_56209: 
#line 259 
  ;
  
#line 261 
  tmp_2 = atomic_read((atomic_t const *)(& ctbl->nfree));
  
#line 261 
  ;
  
#line 261 
  seq_printf(seq,"Free clip entries : %d\n",tmp_2);
  
#line 263 
  _raw_read_unlock_bh(& ctbl->lock);
  
#line 265 
  __retres = 0;
  
#line 265 
  return __retres;
}


#line 268  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
struct clip_tbl *t4_init_clip_tbl(unsigned int clipt_start, unsigned int clipt_end)
{
  struct clip_tbl *__retres;
  struct clip_entry *cl_list;
  struct clip_tbl *ctbl;
  unsigned int clipt_size;
  int i;
  
#line 276 
  if (clipt_start >= clipt_end) {
    
#line 277 
    __retres = (struct clip_tbl *)0;
    
#line 277 
    goto return_label;
  }
  else ;
  
#line 278 
  clipt_size = (clipt_end - clipt_start) + 1U;
  
#line 279 
  if (clipt_size <= 1U) {
    
#line 280 
    __retres = (struct clip_tbl *)0;
    
#line 280 
    goto return_label;
  }
  else ;
  
#line 282 
  ctbl = (struct clip_tbl *)t4_alloc_mem(((unsigned long)clipt_size + 7UL) * 16UL);
  
#line 284 
  if (ctbl == (struct clip_tbl *)0) {
    
#line 285 
    __retres = (struct clip_tbl *)0;
    
#line 285 
    goto return_label;
  }
  else ;
  
#line 287 
  ctbl->clipt_start = clipt_start;
  
#line 288 
  ctbl->clipt_size = clipt_size;
  
#line 289 
  INIT_LIST_HEAD(& ctbl->ce_free_head);
  
#line 291 
  atomic_set(& ctbl->nfree,(int)clipt_size);
  {
    struct lock_class_key __key;
    
#line 292 
    __rwlock_init(& ctbl->lock,"&ctbl->lock",& __key);
  }
  
#line 294 
  i = 0;
  
#line 294 
  goto ldv_56220;
  ldv_56219: 
#line 295 
  ;
  
#line 295 
  INIT_LIST_HEAD(& ctbl->hash_list[i]);
  
#line 294 
  i += 1;
  ldv_56220: 
#line 295 
  ;
  
#line 294 
  if (ctbl->clipt_size > (unsigned int)i) 
#line 296 
                                          goto ldv_56219; else 
#line 299 
                                                               goto ldv_56221;
  ldv_56221: 
#line 300 
  ;
  
#line 297 
  cl_list = (struct clip_entry *)t4_alloc_mem((unsigned long)clipt_size * 128UL);
  
#line 298 
  ctbl->cl_list = (void *)cl_list;
  
#line 300 
  i = 0;
  
#line 300 
  goto ldv_56223;
  ldv_56222: 
#line 301 
  ;
  
#line 301 
  INIT_LIST_HEAD(& (cl_list + i)->list);
  
#line 302 
  list_add_tail(& (cl_list + i)->list,& ctbl->ce_free_head);
  
#line 300 
  i += 1;
  ldv_56223: 
#line 301 
  ;
  
#line 300 
  if ((unsigned int)i < clipt_size) 
#line 302 
                                    goto ldv_56222; else 
#line 305 
                                                         goto ldv_56224;
  ldv_56224: 
#line 306 
  ;
  
#line 305 
  __retres = ctbl;
  return_label: 
#line 305 
                return __retres;
}


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
void t4_cleanup_clip_tbl(struct adapter *adap)
{
  
#line 310 
  struct clip_tbl *ctbl = adap->clipt;
  
#line 312 
  if (ctbl != (struct clip_tbl *)0) {
    
#line 313 
    if (ctbl->cl_list != (void *)0) 
#line 314 
                                    t4_free_mem(ctbl->cl_list); else ;
    
#line 315 
    t4_free_mem((void *)ctbl);
  }
  else ;
  
#line 317 
  return;
}


#line 318  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
static char const __kstrtab_t4_cleanup_clip_tbl[20U] = {(char)'t', (char)'4', (char)'_', (char)'c', (char)'l', (char)'e', (char)'a', (char)'n', (char)'u', (char)'p', (char)'_', (char)'c', (char)'l', (char)'i', (char)'p', (char)'_', (char)'t', (char)'b', (char)'l', (char)'\000'};

#line 318 
struct kernel_symbol const __ksymtab_t4_cleanup_clip_tbl;


#line 318  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/clip_tbl.c"
struct kernel_symbol const __ksymtab_t4_cleanup_clip_tbl = {.value = (unsigned long)(& t4_cleanup_clip_tbl), .name = (char const *)(& __kstrtab_t4_cleanup_clip_tbl)};

#line 126  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_clip_tbl.c.aux"
static void atomic_inc_0(atomic_t *v)
{
  
#line 129 
  ldv_atomic_inc(v);
  
#line 130 
  return;
}


#line 133  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_clip_tbl.c.aux"
static void atomic_dec_0(atomic_t *v)
{
  
#line 136 
  ldv_atomic_dec(v);
  
#line 137 
  return;
}


#line 140  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_clip_tbl.c.aux"
static int atomic_dec_and_test(atomic_t *v)
{
  int tmp;
  
#line 143 
  tmp = ldv_atomic_dec_and_test(v);
  
#line 143 
  return tmp;
}


#line 841  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_clip_tbl.c.aux"
static void ldv_spin_lock_bh_82(spinlock_t *lock)
{
  
#line 845 
  ldv_spin_model_lock((char *)"lock_of_clip_entry");
  
#line 847 
  spin_lock_bh_1(lock);
  
#line 848 
  return;
}


#line 851  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_clip_tbl.c.aux"
static void ldv_spin_unlock_bh_83(spinlock_t *lock)
{
  
#line 855 
  ldv_spin_model_unlock((char *)"lock_of_clip_entry");
  
#line 857 
  spin_unlock_bh_1(lock);
  
#line 858 
  return;
}


#line 154  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/printk.h"
int __printk_ratelimit(char const *);


#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/string.h"
char *strim(char *);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_bh_2(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 399 
static void ldv_spin_lock_bh_81(spinlock_t *lock);


#line 412  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_bh_2(spinlock_t *lock)
{
  
#line 414 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 415 
  return;
}


#line 448 
static void ldv_spin_unlock_bh_82(spinlock_t *lock);


#line 5  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/asm-generic/delay.h"
void __bad_udelay(void);


#line 8 
void __udelay(unsigned long);


#line 46  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/delay.h"
void msleep(unsigned int);


#line 835  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
int pci_find_capability(struct pci_dev *, int);


#line 861 
int pci_bus_read_config_word(struct pci_bus *, unsigned int, int, u16 *);


#line 867 
int pci_bus_write_config_word(struct pci_bus *, unsigned int, int, u16);


#line 887  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_read_config_word(struct pci_dev const *dev, int where, u16 *val)
{
  int tmp;
  
#line 889 
  tmp = pci_bus_read_config_word(dev->bus,dev->devfn,where,val);
  
#line 889 
  return tmp;
}


#line 900  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_write_config_word(struct pci_dev const *dev, int where, u16 val)
{
  int tmp;
  
#line 902 
  tmp = pci_bus_write_config_word(dev->bus,dev->devfn,where,(unsigned short)((int)val));
  
#line 902 
  return tmp;
}


#line 910 
int pcie_capability_read_word(struct pci_dev *, int, u16 *);


#line 1718  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static int pci_pcie_cap(struct pci_dev *dev)
{
  int __retres;
  
#line 1720 
  __retres = (int)dev->pcie_cap;
  
#line 1720 
  return __retres;
}


#line 1729  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static bool pci_is_pcie(struct pci_dev *dev)
{
  bool __retres;
  int tmp;
  
#line 1731 
  tmp = pci_pcie_cap(dev);
  
#line 1731 
  __retres = (_Bool)(tmp != 0);
  
#line 1731 
  return __retres;
}


#line 1793  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static u16 pci_vpd_lrdt_size(u8 const *lrdt)
{
  u16 __retres;
  
#line 1795 
  __retres = (unsigned short)((int)((unsigned short)*(lrdt + 1U)) + ((int)((unsigned short)*(lrdt + 2U)) << 8U));
  
#line 1795 
  return __retres;
}


#line 1815  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/pci.h"
__inline static u8 pci_vpd_info_field_size(u8 const *info_field)
{
  u8 __retres;
  
#line 1817 
  __retres = *(info_field + 2U);
  
#line 1817 
  return __retres;
}


#line 1830 
int pci_vpd_find_tag(u8 const *, unsigned int, unsigned int, u8);


#line 1842 
int pci_vpd_find_info_keyword(u8 const *, unsigned int, unsigned int, char const *);


#line 69  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/vmalloc.h"
void *vmalloc(unsigned long);


#line 83 
void vfree(void const *);


#line 903  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static int is_t6(enum chip_type chip)
{
  int __retres;
  
#line 905 
  __retres = (((unsigned int)chip >> 4) & 15U) == 6U;
  
#line 905 
  return __retres;
}


#line 946  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static void t4_write_reg64(struct adapter *adap, u32 reg_addr, u64 val)
{
  
#line 948 
  writeq((unsigned long)val,(void volatile *)(adap->regs + reg_addr));
  
#line 949 
  return;
}


#line 1189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static unsigned int core_ticks_per_usec(struct adapter const *adap)
{
  unsigned int __retres;
  
#line 1191 
  __retres = adap->params.vpd.cclk / 1000U;
  
#line 1191 
  return __retres;
}


#line 1211 
int t4_wr_mbox_meat_timeout(struct adapter *adap, int mbox, void const *cmd, int size, void *rpl, bool sleep_ok, int timeout);


#line 1216  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static int t4_wr_mbox_timeout(struct adapter *adap, int mbox, void const *cmd, int size, void *rpl, int timeout)
{
  int tmp;
  
#line 1220 
  tmp = t4_wr_mbox_meat_timeout(adap,mbox,cmd,size,rpl,(_Bool)1,timeout);
  
#line 1220 
  return tmp;
}


#line 1230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4.h"
__inline static int t4_wr_mbox_ns(struct adapter *adap, int mbox, void const *cmd, int size, void *rpl)
{
  int tmp;
  
#line 1233 
  tmp = t4_wr_mbox_meat(adap,mbox,cmd,size,rpl,(_Bool)0);
  
#line 1233 
  return tmp;
}


#line 1239 
void t4_read_indirect(struct adapter *adap, unsigned int addr_reg, unsigned int data_reg, u32 *vals, unsigned int nregs, unsigned int start_idx);


#line 1242 
void t4_hw_pci_read_cfg4(struct adapter *adap, int reg, u32 *val);


#line 1277 
int t4_load_fw(struct adapter *adap, u8 const *fw_data, unsigned int size);


#line 1309 
int t4_filter_field_shift(struct adapter const *adap, int filter_sel);


#line 1338 
int t4_cim_write(struct adapter *adap, unsigned int addr, unsigned int n, unsigned int const *valp);


#line 1347 
void t4_get_port_stats(struct adapter *adap, int idx, struct port_stats *p);


#line 1389 
int t4_query_params_rw(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int nparams, u32 const *params, u32 *val, int rw);


#line 1443 
int t4_fwaddrspace_write(struct adapter *adap, unsigned int mbox, u32 addr, u32 val);


#line 1445 
void t4_sge_decode_idma_state(struct adapter *adapter, int state);


#line 56  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static int t4_wait_op_done_val(struct adapter *adapter, int reg, u32 mask, int polarity, int attempts, int delay, u32 *valp)
{
  int __retres;
  ldv_48962: 
#line 58 
  ;
  {
    
#line 60 
    u32 val = t4_read_reg(adapter,(unsigned int)reg);
    
#line 62 
    if (((val & mask) != 0U) == polarity) {
      
#line 63 
      if (valp != (u32 *)0U) 
#line 64 
                             *valp = val; else ;
      
#line 65 
      __retres = 0;
      
#line 65 
      goto return_label;
    }
    else ;
    
#line 67 
    attempts -= 1;
    
#line 67 
    if (attempts == 0) {
      
#line 68 
      __retres = -11;
      
#line 68 
      goto return_label;
    }
    else ;
    
#line 69 
    if (delay != 0) 
      
#line 70 
      if (0 != 0) 
        
#line 70 
        if (delay > 19999) 
#line 70 
                           __bad_udelay(); else 
#line 70 
                                                __const_udelay((unsigned long)delay * 4295UL);
      else 
#line 70 
           __udelay((unsigned long)delay);
    else ;
  }
  
#line 59 
  goto ldv_48962;
  return_label: 
#line 59 
                return __retres;
}


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
__inline static int t4_wait_op_done(struct adapter *adapter, int reg, u32 mask, int polarity, int attempts, int delay)
{
  int tmp;
  
#line 77 
  tmp = t4_wait_op_done_val(adapter,reg,mask,polarity,attempts,delay,(u32 *)0U);
  
#line 77 
  return tmp;
}


#line 91  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_set_reg_field(struct adapter *adapter, unsigned int addr, u32 mask, u32 val)
{
  u32 tmp;
  
#line 94 
  tmp = t4_read_reg(adapter,addr);
  
#line 94 
  u32 v = tmp & ~ mask;
  
#line 96 
  t4_write_reg(adapter,addr,v | val);
  
#line 97 
  t4_read_reg(adapter,addr);
  
#line 98 
  return;
}


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_read_indirect(struct adapter *adap, unsigned int addr_reg, unsigned int data_reg, u32 *vals, unsigned int nregs, unsigned int start_idx)
{
  u32 *tmp;
  unsigned int tmp_0;
  
#line 116 
  goto ldv_48987;
  ldv_48986: 
#line 117 
  ;
  
#line 117 
  t4_write_reg(adap,addr_reg,start_idx);
  
#line 118 
  tmp = vals;
  
#line 118 
  vals += 1;
  
#line 118 
  *tmp = t4_read_reg(adap,data_reg);
  
#line 119 
  start_idx += 1U;
  ldv_48987: 
#line 120 
  ;
  
#line 116 
  tmp_0 = nregs;
  
#line 116 
  nregs -= 1U;
  
#line 116 
  ;
  
#line 116 
  if (tmp_0 != 0U) 
#line 118 
                   goto ldv_48986; else 
#line 121 
                                        goto ldv_48988;
  ldv_48988: 
#line 122 
  ;
  
#line 123 
  return;
}


#line 135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_write_indirect(struct adapter *adap, unsigned int addr_reg, unsigned int data_reg, u32 const *vals, unsigned int nregs, unsigned int start_idx)
{
  unsigned int tmp;
  u32 const *tmp_0;
  unsigned int tmp_1;
  
#line 139 
  goto ldv_48998;
  ldv_48997: 
#line 140 
  ;
  
#line 140 
  tmp = start_idx;
  
#line 140 
  start_idx += 1U;
  
#line 140 
  ;
  
#line 140 
  ;
  
#line 140 
  ;
  
#line 140 
  t4_write_reg(adap,addr_reg,tmp);
  
#line 141 
  tmp_0 = vals;
  
#line 141 
  vals += 1;
  
#line 141 
  ;
  
#line 141 
  ;
  
#line 141 
  ;
  
#line 141 
  t4_write_reg(adap,data_reg,*tmp_0);
  ldv_48998: 
#line 142 
  ;
  
#line 139 
  tmp_1 = nregs;
  
#line 139 
  nregs -= 1U;
  
#line 139 
  ;
  
#line 139 
  if (tmp_1 != 0U) 
#line 141 
                   goto ldv_48997; else 
#line 144 
                                        goto ldv_48999;
  ldv_48999: 
#line 145 
  ;
  
#line 146 
  return;
}


#line 151  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_hw_pci_read_cfg4(struct adapter *adap, int reg, u32 *val)
{
  int tmp;
  
#line 153 
  u32 req = (adap->pf << 12) | (unsigned int)reg;
  
#line 155 
  if ((((unsigned int)adap->params.chip >> 4) & 15U) <= 5U) 
#line 156 
                                                            req |= 1073741824U; else 
                                                                    
#line 158 
                                                                    req |= 2147483648U;
  
#line 160 
  tmp = is_t4(adap->params.chip);
  
#line 160 
  if (tmp != 0) 
#line 161 
                req |= 268435456U; else ;
  
#line 163 
  t4_write_reg(adap,12384U,req);
  
#line 164 
  *val = t4_read_reg(adap,12388U);
  
#line 171 
  t4_write_reg(adap,12384U,0U);
  
#line 172 
  return;
}


#line 182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void t4_report_fw_error(struct adapter *adap)
{
  u32 pcie_fw;
  
#line 184 
  char const * const reason[8U] = {"Crash", "During Device Preparation", "During Device Configuration", "During Device Initialization", "Unexpected Event", "Insufficient Airflow", "Device Shutdown", "Reserved"};
  
#line 196 
  pcie_fw = t4_read_reg(adap,12472U);
  
#line 197 
  if (pcie_fw < (u32)0) 
#line 198 
                        dev_err((struct device const *)adap->pdev_dev,"Firmware reports adapter error: %s\n",reason[(pcie_fw >> 24) & 7U]); else ;
  
#line 200 
  return;
}


#line 205  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void get_mbox_rpl(struct adapter *adap, __be64 *rpl, int nflit, u32 mbox_addr)
{
  __be64 *tmp;
  __u64 tmp_1;
  u64 tmp_0;
  
#line 208 
  goto ldv_49018;
  ldv_49017: 
#line 209 
  ;
  
#line 209 
  tmp = rpl;
  
#line 209 
  rpl += 1;
  
#line 209 
  tmp_0 = t4_read_reg64(adap,mbox_addr);
  
#line 209 
  tmp_1 = __fswab64(tmp_0);
  
#line 209 
  *tmp = tmp_1;
  
#line 208 
  nflit -= 1;
  
#line 208 
  mbox_addr += 8U;
  ldv_49018: 
#line 209 
  ;
  
#line 208 
  if (nflit != 0) 
#line 210 
                  goto ldv_49017; else 
#line 213 
                                       goto ldv_49019;
  ldv_49019: 
#line 214 
  ;
  
#line 215 
  return;
}


#line 215  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void fw_asrt(struct adapter *adap, u32 mbox_addr)
{
  struct fw_debug_cmd asrt;
  unsigned int tmp_0;
  unsigned int tmp_2;
  unsigned int tmp_4;
  
#line 219 
  get_mbox_rpl(adap,(__be64 *)(& asrt),6,mbox_addr);
  
#line 223 
  if (0 != 0) 
#line 223 
              tmp_0 = (((asrt.u.assert.y << 24) | ((asrt.u.assert.y << 8) & 16711680U)) | ((asrt.u.assert.y >> 8) & 65280U)) | (asrt.u.assert.y >> 24); else 
                                                                    
#line 223 
                                                                    tmp_0 = __fswab32(asrt.u.assert.y);
  
#line 222 
  if (0 != 0) 
#line 222 
              tmp_2 = (((asrt.u.assert.x << 24) | ((asrt.u.assert.x << 8) & 16711680U)) | ((asrt.u.assert.x >> 8) & 65280U)) | (asrt.u.assert.x >> 24); else 
                                                                    
#line 223 
                                                                    tmp_2 = __fswab32(asrt.u.assert.x);
  
#line 222 
  if (0 != 0) 
#line 222 
              tmp_4 = (((asrt.u.assert.line << 24) | ((asrt.u.assert.line << 8) & 16711680U)) | ((asrt.u.assert.line >> 8) & 65280U)) | (asrt.u.assert.line >> 24); else 
                                                                    
#line 222 
                                                                    tmp_4 = __fswab32(asrt.u.assert.line);
  
#line 220 
  ;
  
#line 220 
  dev_alert((struct device const *)adap->pdev_dev,"FW assertion at %.16s:%u, val0 %#x, val1 %#x\n",(u8 *)(& asrt.u.assert.filename_0_7),tmp_4,tmp_2,tmp_0);
  
#line 224 
  return;
}


#line 226  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void dump_mbox(struct adapter *adap, int mbox, u32 data_reg)
{
  u64 tmp;
  u64 tmp_0;
  u64 tmp_1;
  u64 tmp_2;
  u64 tmp_3;
  u64 tmp_4;
  u64 tmp_5;
  u64 tmp_6;
  
#line 237 
  tmp = t4_read_reg64(adap,data_reg + 56U);
  
#line 236 
  tmp_0 = t4_read_reg64(adap,data_reg + 48U);
  
#line 235 
  tmp_1 = t4_read_reg64(adap,data_reg + 40U);
  
#line 234 
  tmp_2 = t4_read_reg64(adap,data_reg + 32U);
  
#line 233 
  tmp_3 = t4_read_reg64(adap,data_reg + 24U);
  
#line 232 
  tmp_4 = t4_read_reg64(adap,data_reg + 16U);
  
#line 231 
  tmp_5 = t4_read_reg64(adap,data_reg + 8U);
  
#line 230 
  tmp_6 = t4_read_reg64(adap,data_reg);
  
#line 228 
  ;
  
#line 228 
  ;
  
#line 228 
  dev_err((struct device const *)adap->pdev_dev,"mbox %d: %llx %llx %llx %llx %llx %llx %llx %llx\n",mbox,tmp_6,tmp_5,tmp_4,tmp_3,tmp_2,tmp_1,tmp_0,tmp);
  
#line 238 
  return;
}


#line 263  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_wr_mbox_meat_timeout(struct adapter *adap, int mbox, void const *cmd, int size, void *rpl, bool sleep_ok, int timeout)
{
  int __retres;
  u32 v;
  u64 res;
  int i;
  int ms;
  int delay_idx;
  u32 tmp;
  u32 tmp_0;
  __u64 tmp_3;
  __be64 const *tmp_2;
  
#line 266 
  int const delay[10U] = {1, 1, 3, 5, 10, 10, 20, 50, 100, 200};
  
#line 273 
  __be64 const *p = (__be64 const *)cmd;
  
#line 274 
  u32 data_reg = (unsigned int)((mbox + 120) * 1024 + 576);
  
#line 275 
  u32 ctl_reg = (unsigned int)((mbox + 120) * 1024 + 640);
  
#line 277 
  if ((size & 15) != 0 || size > 64) {
    
#line 278 
    __retres = -22;
    
#line 278 
    goto return_label;
  }
  else ;
  
#line 284 
  if ((adap->pdev)->error_state != 1U) {
    
#line 285 
    __retres = -5;
    
#line 285 
    goto return_label;
  }
  else ;
  
#line 287 
  tmp = t4_read_reg(adap,ctl_reg);
  
#line 287 
  v = tmp & 3U;
  
#line 288 
  i = 0;
  
#line 288 
  goto ldv_49049;
  ldv_49048: 
#line 289 
  ;
  
#line 289 
  tmp_0 = t4_read_reg(adap,ctl_reg);
  
#line 289 
  v = tmp_0 & 3U;
  
#line 288 
  i += 1;
  ldv_49049: 
#line 289 
  ;
  
#line 288 
  if (v == 0U && i <= 2) 
#line 290 
                         goto ldv_49048; else 
#line 293 
                                              goto ldv_49050;
  ldv_49050: 
#line 294 
  ;
  
#line 291 
  if (v != 2U) {
    int tmp_1;
    
#line 292 
    if (v != 0U) 
#line 292 
                 tmp_1 = -16; else 
#line 292 
                                   tmp_1 = -110;
    
#line 292 
    __retres = tmp_1;
    
#line 292 
    goto return_label;
  }
  else ;
  
#line 294 
  i = 0;
  
#line 294 
  goto ldv_49052;
  ldv_49051: 
#line 295 
  ;
  
#line 295 
  tmp_2 = p;
  
#line 295 
  p += 1;
  
#line 295 
  ;
  
#line 295 
  tmp_3 = __fswab64(*tmp_2);
  
#line 295 
  ;
  
#line 295 
  ;
  
#line 295 
  t4_write_reg64(adap,data_reg + (unsigned int)i,tmp_3);
  
#line 294 
  i += 8;
  ldv_49052: 
#line 295 
  ;
  
#line 294 
  if (i < size) 
#line 296 
                goto ldv_49051; else 
#line 299 
                                     goto ldv_49053;
  ldv_49053: 
#line 300 
  ;
  
#line 297 
  t4_write_reg(adap,ctl_reg,9U);
  
#line 298 
  t4_read_reg(adap,ctl_reg);
  
#line 300 
  delay_idx = 0;
  
#line 301 
  ms = delay[0];
  
#line 303 
  i = 0;
  
#line 303 
  goto ldv_49063;
  ldv_49062: 
#line 304 
  ;
  
#line 304 
  if ((int)sleep_ok != 0) {
    
#line 305 
    ms = delay[delay_idx];
    
#line 306 
    if ((unsigned int)delay_idx <= 8U) 
#line 307 
                                       delay_idx += 1; else ;
    
#line 308 
    msleep((unsigned int)ms);
  }
  else 
    
#line 310 
    if (0 != 0 && ms <= 5) 
      
#line 310 
      if (0 != 0) 
        
#line 310 
        if (ms * 1000 > 19999) 
#line 310 
                               __bad_udelay(); else 
#line 310 
                                                    __const_udelay((unsigned long)ms * 4295000UL);
      else 
#line 310 
           __udelay((unsigned long)(ms * 1000));
    else {
      
#line 310 
      unsigned long __ms = (unsigned long)ms;
      {
        unsigned long tmp_4;
        
#line 310 
        goto ldv_49059;
        ldv_49058: 
#line 311 
        ;
        
#line 310 
        __const_udelay(4295000UL);
        ldv_49059: 
#line 312 
        ;
        
#line 310 
        tmp_4 = __ms;
        
#line 310 
        __ms -= 1UL;
        
#line 310 
        ;
        
#line 310 
        if (tmp_4 != 0UL) 
#line 312 
                          goto ldv_49058; else 
#line 315 
                                               goto ldv_49060;
        ldv_49060: 
#line 316 
        ;
      }
    }
  
#line 312 
  v = t4_read_reg(adap,ctl_reg);
  
#line 313 
  if ((v & 3U) == 2U) {
    
#line 314 
    if ((v & 8U) == 0U) {
      
#line 315 
      t4_write_reg(adap,ctl_reg,0U);
      
#line 316 
      goto ldv_49061;
    }
    else ;
    
#line 319 
    res = t4_read_reg64(adap,data_reg);
    
#line 320 
    if (res >> 56 == 129ULL) {
      
#line 321 
      fw_asrt(adap,data_reg);
      
#line 322 
      res = 1280ULL;
    }
    else 
      
#line 323 
      if (rpl != (void *)0) 
#line 324 
                            get_mbox_rpl(adap,(__be64 *)rpl,size / 8,data_reg); else ;
    
#line 327 
    if ((((int)res >> 8) & 255) != 0) 
#line 328 
                                      dump_mbox(adap,mbox,data_reg); else ;
    
#line 329 
    t4_write_reg(adap,ctl_reg,0U);
    
#line 330 
    __retres = - (((int)res >> 8) & 255);
    
#line 330 
    goto return_label;
  }
  else ;
  ldv_49061: 
#line 332 
  ;
  
#line 303 
  i += ms;
  ldv_49063: 
#line 304 
  ;
  
#line 303 
  if (i < timeout) 
#line 305 
                   goto ldv_49062; else 
#line 308 
                                        goto ldv_49064;
  ldv_49064: 
#line 309 
  ;
  
#line 334 
  dump_mbox(adap,mbox,data_reg);
  
#line 335 
  dev_err((struct device const *)adap->pdev_dev,"command %#x in mailbox %d timed out\n",(int)*((u8 const *)cmd),mbox);
  
#line 337 
  t4_report_fw_error(adap);
  
#line 338 
  __retres = -110;
  return_label: 
#line 338 
                return __retres;
}


#line 341  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_wr_mbox_meat(struct adapter *adap, int mbox, void const *cmd, int size, void *rpl, bool sleep_ok)
{
  int tmp;
  
#line 344 
  tmp = t4_wr_mbox_meat_timeout(adap,mbox,cmd,size,rpl,(_Bool)((bool)((int)sleep_ok) != 0),10000);
  
#line 344 
  return tmp;
}


#line 365  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_memory_rw(struct adapter *adap, int win, int mtype, u32 addr, u32 len, void *hbuf, int dir)
{
  int __retres;
  u32 pos;
  u32 offset;
  u32 resid;
  u32 memoffset;
  u32 edc_size;
  u32 mc_size;
  u32 win_pf;
  u32 mem_reg;
  u32 mem_aperture;
  u32 mem_base;
  u32 *buf;
  u32 tmp;
  int tmp_1;
  int tmp_2;
  
#line 374 
  if ((addr & 3U) != 0U || ((unsigned long)hbuf & 3UL) != 0UL) {
    
#line 375 
    __retres = -22;
    
#line 375 
    goto return_label;
  }
  else ;
  
#line 376 
  buf = (u32 *)hbuf;
  
#line 383 
  resid = len & 3U;
  
#line 384 
  len -= resid;
  
#line 392 
  tmp = t4_read_reg(adap,30656U);
  
#line 392 
  edc_size = tmp & 4095U;
  
#line 393 
  if (mtype != 3) 
#line 394 
                  memoffset = (edc_size * (unsigned int)mtype) * 1048576U;
  else {
    u32 tmp_0;
    
#line 396 
    tmp_0 = t4_read_reg(adap,30664U);
    
#line 396 
    mc_size = tmp_0 & 4095U;
    
#line 398 
    memoffset = (edc_size * 2U + mc_size) * 1048576U;
  }
  
#line 402 
  addr += memoffset;
  
#line 412 
  mem_reg = t4_read_reg(adap,(unsigned int)((win + 1549) * 8));
  
#line 415 
  mem_aperture = (unsigned int)(1 << ((mem_reg & 255U) + 10U));
  
#line 416 
  mem_base = mem_reg & 4294966272U;
  
#line 417 
  tmp_1 = is_t4(adap->params.chip);
  
#line 417 
  if (tmp_1 != 0) 
#line 418 
                  mem_base -= adap->t4_bar0; else ;
  
#line 419 
  tmp_2 = is_t4(adap->params.chip);
  
#line 419 
  if (tmp_2 == 0) 
#line 419 
                  win_pf = adap->pf; else 
#line 419 
                                          win_pf = 0U;
  
#line 424 
  pos = - mem_aperture & addr;
  
#line 425 
  offset = addr - pos;
  
#line 431 
  t4_write_reg(adap,(unsigned int)(win * 8 + 12396),pos | win_pf);
  
#line 434 
  t4_read_reg(adap,(unsigned int)(win * 8 + 12396));
  
#line 471 
  goto ldv_49094;
  ldv_49093: 
#line 472 
  ;
  
#line 472 
  if (dir == 1) {
    u32 *tmp_3;
    
#line 473 
    tmp_3 = buf;
    
#line 473 
    buf += 1;
    
#line 473 
    *tmp_3 = t4_read_reg(adap,mem_base + offset);
  }
  else {
    u32 *tmp_5;
    
#line 477 
    tmp_5 = buf;
    
#line 477 
    buf += 1;
    
#line 476 
    ;
    
#line 476 
    ;
    
#line 476 
    ;
    
#line 476 
    t4_write_reg(adap,mem_base + offset,*tmp_5);
  }
  
#line 478 
  offset += 4U;
  
#line 479 
  len += 4294967292U;
  
#line 487 
  if (offset == mem_aperture) {
    
#line 488 
    pos += mem_aperture;
    
#line 489 
    offset = 0U;
    
#line 490 
    t4_write_reg(adap,(unsigned int)(win * 8 + 12396),pos | win_pf);
    
#line 493 
    t4_read_reg(adap,(unsigned int)(win * 8 + 12396));
  }
  else ;
  ldv_49094: 
#line 496 
  ;
  
#line 471 
  if (len != 0U) 
#line 473 
                 goto ldv_49093; else 
#line 476 
                                      goto ldv_49095;
  ldv_49095: 
#line 477 
  ;
  
#line 504 
  if (resid != 0U) {
    union __anonunion_last_2495 last;
    unsigned char *bp;
    int i;
    
#line 512 
    if (dir == 1) {
      
#line 513 
      last.word = t4_read_reg(adap,mem_base + offset);
      
#line 516 
      bp = (unsigned char *)buf;
      
#line 516 
      i = (int)resid;
      
#line 516 
      goto ldv_49103;
      ldv_49102: 
#line 517 
      ;
      
#line 517 
      *(bp + i) = (unsigned char)last.byte[i];
      
#line 516 
      i += 1;
      ldv_49103: 
#line 517 
      ;
      
#line 516 
      if (i <= 3) 
#line 518 
                  goto ldv_49102; else 
#line 521 
                                       goto ldv_49104;
      ldv_49104: 
#line 522 
      ;
    }
    else {
      
#line 519 
      last.word = *buf;
      
#line 520 
      i = (int)resid;
      
#line 520 
      goto ldv_49106;
      ldv_49105: 
#line 521 
      ;
      
#line 521 
      last.byte[i] = (char)0;
      
#line 520 
      i += 1;
      ldv_49106: 
#line 521 
      ;
      
#line 520 
      if (i <= 3) 
#line 522 
                  goto ldv_49105; else 
#line 525 
                                       goto ldv_49107;
      ldv_49107: 
#line 526 
      ;
      
#line 522 
      t4_write_reg(adap,mem_base + offset,last.word);
    }
  }
  else ;
  
#line 527 
  __retres = 0;
  return_label: 
#line 527 
                return __retres;
}


#line 535  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
u32 t4_read_pcie_cfg4(struct adapter *adap, int reg)
{
  u32 val;
  u32 ldst_addrspace;
  struct fw_ldst_cmd ldst_cmd;
  int ret;
  
#line 545 
  memset((void *)(& ldst_cmd),0,64UL);
  
#line 546 
  ldst_addrspace = 41U;
  
#line 547 
  if (0 != 0) 
#line 547 
              ldst_cmd.op_to_addrspace = ((((ldst_addrspace << 24) | ((ldst_addrspace << 8) & 16711680U)) | ((ldst_addrspace >> 8) & 16128U)) | (ldst_addrspace >> 24)) | 49153U; else 
                                                                    
#line 547 
                                                                    ldst_cmd.op_to_addrspace = __fswab32(ldst_addrspace | 29360128U);
  
#line 551 
  ldst_cmd.cycles_to_len16 = 67108864U;
  
#line 552 
  ldst_cmd.u.pcie.select_naccess = (unsigned char)1U;
  
#line 553 
  ldst_cmd.u.pcie.ctrl_to_fn = (unsigned char)((unsigned int)((unsigned char)adap->pf) | 16U);
  
#line 555 
  ldst_cmd.u.pcie.r = (unsigned char)reg;
  
#line 560 
  ret = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& ldst_cmd),64,(void *)(& ldst_cmd));
  
#line 562 
  if (ret == 0) 
    
#line 563 
    if (0 != 0) 
#line 563 
                val = (((ldst_cmd.u.pcie.data[0] << 24) | ((ldst_cmd.u.pcie.data[0] << 8) & 16711680U)) | ((ldst_cmd.u.pcie.data[0] >> 8) & 65280U)) | (ldst_cmd.u.pcie.data[0] >> 24); else 
                                                                    
#line 563 
                                                                    val = __fswab32(ldst_cmd.u.pcie.data[0]);
  else 
#line 568 
       t4_hw_pci_read_cfg4(adap,reg,& val);
  
#line 569 
  return val;
}


#line 576  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static u32 t4_get_window(struct adapter *adap, u32 pci_base, u64 pci_mask, u32 memwin_base)
{
  u32 ret;
  int tmp;
  
#line 581 
  tmp = is_t4(adap->params.chip);
  
#line 581 
  if (tmp != 0) {
    u32 bar0;
    
#line 593 
    bar0 = t4_read_pcie_cfg4(adap,(int)pci_base);
    
#line 594 
    bar0 = (unsigned int)pci_mask & bar0;
    
#line 595 
    adap->t4_bar0 = bar0;
    
#line 597 
    ret = bar0 + memwin_base;
  }
  else 
#line 600 
       ret = memwin_base;
  
#line 602 
  return ret;
}


#line 606  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
u32 t4_get_util_window(struct adapter *adap)
{
  u32 tmp;
  
#line 608 
  tmp = t4_get_window(adap,16U,18446744073709551600ULL,112640U);
  
#line 608 
  return tmp;
}


#line 616  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_setup_memwin(struct adapter *adap, u32 memwin_base, u32 window)
{
  
#line 618 
  t4_write_reg(adap,(window + 1549U) * 8U,memwin_base | 1U);
  
#line 622 
  t4_read_reg(adap,(window + 1549U) * 8U);
  
#line 624 
  return;
}


#line 632  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
unsigned int t4_get_regs_len(struct adapter *adapter)
{
  unsigned int __retres;
  
#line 634 
  unsigned int chip_version = ((unsigned int)adapter->params.chip >> 4) & 15U;
  
#line 636 
  switch (chip_version) {
    case (unsigned int)4: 
#line 637 
    ;
    
#line 638 
    __retres = 163840U;
    
#line 638 
    goto return_label;
    case (unsigned int)5: 
#line 640 
    ;
    case (unsigned int)6: 
#line 641 
    ;
    
#line 642 
    __retres = 339968U;
    
#line 642 
    goto return_label;
  }
  
#line 645 
  dev_err((struct device const *)adapter->pdev_dev,"Unsupported chip version %d\n",chip_version);
  
#line 647 
  __retres = 0U;
  return_label: 
#line 647 
                return __retres;
}


#line 660  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_get_regs(struct adapter *adap, void *buf, size_t buf_size)
{
  unsigned int const *reg_ranges;
  int reg_ranges_size;
  int range;
  
#line 662 
  unsigned int const t4_reg_ranges[438U] = {4104U, 4360U, 4480U, 4532U, 4604U, 4668U, 4864U, 5948U, 6144U, 6396U, 12288U, 12380U, 12392U, 12504U, 12512U, 22820U, 22880U, 22996U, 23040U, 23288U, 24576U, 24728U, 24832U, 24912U, 25088U, 25096U, 25152U, 25160U, 25216U, 25400U, 25456U, 25484U, 25600U, 25660U, 25856U, 25892U, 27136U, 27192U, 27232U, 27256U, 27392U, 27524U, 27632U, 27780U, 27888U, 28036U, 28144U, 28292U, 28400U, 28548U, 28656U, 28804U, 28912U, 29060U, 29168U, 29316U, 29424U, 29572U, 29680U, 29776U, 29952U, 30000U, 30208U, 30236U, 30336U, 30412U, 30464U, 30616U, 30656U, 30716U, 30976U, 31228U, 31488U, 31800U, 32000U, 32508U, 36288U, 36380U, 36400U, 36472U, 36512U, 36716U, 36800U, 36980U, 37116U, 37116U, 37888U, 37976U, 38400U, 38588U, 38912U, 38920U, 38944U, 38972U, 38992U, 39012U, 39936U, 40044U, 40064U, 40172U, 40192U, 40300U, 40320U, 40428U, 40448U, 40556U, 40576U, 40684U, 40704U, 40812U, 40832U, 40940U, 53252U, 53308U, 57280U, 57312U, 57344U, 60028U, 61440U, 69904U, 69912U, 70032U, 102464U, 102508U, 102520U, 102528U, 102540U, 102692U, 102736U, 102832U, 102864U, 102888U, 102968U, 102988U, 103416U, 103540U, 103568U, 103672U, 104448U, 106316U, 106496U, 106604U, 106672U, 106784U, 106792U, 106808U, 106896U, 106948U, 107004U, 107004U, 122944U, 122956U, 123524U, 123532U, 123584U, 123584U, 123616U, 123616U, 123648U, 123780U, 123840U, 123848U, 123968U, 123980U, 124548U, 124556U, 124608U, 124608U, 124640U, 124640U, 124672U, 124804U, 124864U, 124872U, 124992U, 125004U, 125572U, 125580U, 125632U, 125632U, 125664U, 125664U, 125696U, 125828U, 125888U, 125896U, 126016U, 126028U, 126596U, 126604U, 126656U, 126656U, 126688U, 126688U, 126720U, 126852U, 126912U, 126920U, 127040U, 127052U, 127620U, 127628U, 127680U, 127680U, 127712U, 127712U, 127744U, 127876U, 127936U, 127944U, 128064U, 128076U, 128644U, 128652U, 128704U, 128704U, 128736U, 128736U, 128768U, 128900U, 128960U, 128968U, 129088U, 129100U, 129668U, 129676U, 129728U, 129728U, 129760U, 129760U, 129792U, 129924U, 129984U, 129992U, 130112U, 130124U, 130692U, 130700U, 130752U, 130752U, 130784U, 130784U, 130816U, 130948U, 131008U, 131016U, 131072U, 131116U, 131328U, 131388U, 131472U, 131528U, 131584U, 131864U, 132096U, 132392U, 132416U, 132628U, 135168U, 135232U, 135244U, 135264U, 135360U, 135404U, 135680U, 135784U, 135792U, 135812U, 135932U, 136072U, 136192U, 136196U, 136448U, 136472U, 136492U, 136508U, 136528U, 136532U, 136704U, 136704U, 136712U, 136744U, 136752U, 136764U, 136960U, 136988U, 137088U, 137100U, 137216U, 138296U, 138368U, 138620U, 138752U, 138756U, 139264U, 139308U, 139520U, 139580U, 139664U, 139720U, 139776U, 140056U, 140288U, 140584U, 140608U, 140820U, 143360U, 143424U, 143436U, 143456U, 143552U, 143596U, 143872U, 143976U, 143984U, 144004U, 144124U, 144264U, 144384U, 144388U, 144640U, 144664U, 144684U, 144700U, 144720U, 144724U, 144896U, 144896U, 144904U, 144936U, 144944U, 144956U, 145152U, 145180U, 145280U, 145292U, 145408U, 146488U, 146560U, 146812U, 146944U, 146948U, 147456U, 147500U, 147712U, 147772U, 147856U, 147912U, 147968U, 148248U, 148480U, 148776U, 148800U, 149012U, 151552U, 151616U, 151628U, 151648U, 151744U, 151788U, 152064U, 152168U, 152176U, 152196U, 152316U, 152456U, 152576U, 152580U, 152832U, 152856U, 152876U, 152892U, 152912U, 152916U, 153088U, 153088U, 153096U, 153128U, 153136U, 153148U, 153344U, 153372U, 153472U, 153484U, 153600U, 154680U, 154752U, 155004U, 155136U, 155140U, 155648U, 155692U, 155904U, 155964U, 156048U, 156104U, 156160U, 156440U, 156672U, 156968U, 156992U, 157204U, 159744U, 159808U, 159820U, 159840U, 159936U, 159980U, 160256U, 160360U, 160368U, 160388U, 160508U, 160648U, 160768U, 160772U, 161024U, 161048U, 161068U, 161084U, 161104U, 161108U, 161280U, 161280U, 161288U, 161320U, 161328U, 161340U, 161536U, 161564U, 161664U, 161676U, 161792U, 162872U, 162944U, 163196U, 163328U, 163332U};
  
#line 884 
  unsigned int const t5_reg_ranges[874U] = {4104U, 4424U, 4480U, 4532U, 4604U, 4668U, 4736U, 5948U, 6144U, 6396U, 12288U, 12328U, 12392U, 12504U, 12512U, 12540U, 12608U, 13692U, 13736U, 13772U, 13804U, 13804U, 13824U, 22052U, 22220U, 22364U, 22540U, 22548U, 22672U, 22716U, 22848U, 23004U, 23036U, 23064U, 23136U, 23196U, 23444U, 23548U, 24576U, 24640U, 24664U, 24908U, 30464U, 30616U, 30656U, 30972U, 31488U, 31828U, 32000U, 32508U, 36288U, 36320U, 36344U, 36484U, 36512U, 36740U, 36800U, 37112U, 37888U, 38000U, 38400U, 38644U, 38912U, 38920U, 38944U, 38972U, 38992U, 39012U, 39936U, 40044U, 40064U, 40172U, 40192U, 40300U, 40320U, 40428U, 40448U, 40556U, 40576U, 40684U, 40704U, 40812U, 40832U, 40992U, 53252U, 53308U, 57280U, 57312U, 57344U, 69768U, 69788U, 69904U, 69912U, 70012U, 70032U, 70148U, 102464U, 102508U, 102520U, 102528U, 102540U, 102692U, 102736U, 102832U, 102864U, 102888U, 102968U, 103056U, 103416U, 103540U, 103568U, 103628U, 103664U, 103672U, 105472U, 105568U, 105620U, 106000U, 106064U, 106292U, 106304U, 106320U, 106384U, 106468U, 106496U, 106604U, 106672U, 106784U, 106792U, 106808U, 106896U, 106948U, 107004U, 107004U, 122888U, 122892U, 122944U, 122956U, 123524U, 123536U, 123584U, 123584U, 123616U, 123616U, 123648U, 123780U, 123840U, 123848U, 123912U, 123916U, 123968U, 123980U, 124548U, 124560U, 124608U, 124608U, 124640U, 124640U, 124672U, 124804U, 124864U, 124872U, 124936U, 124940U, 124992U, 125004U, 125572U, 125584U, 125632U, 125632U, 125664U, 125664U, 125696U, 125828U, 125888U, 125896U, 125960U, 125964U, 126016U, 126028U, 126596U, 126608U, 126656U, 126656U, 126688U, 126688U, 126720U, 126852U, 126912U, 126920U, 126984U, 126988U, 127040U, 127052U, 127620U, 127632U, 127680U, 127680U, 127712U, 127712U, 127744U, 127876U, 127936U, 127944U, 128008U, 128012U, 128064U, 128076U, 128644U, 128656U, 128704U, 128704U, 128736U, 128736U, 128768U, 128900U, 128960U, 128968U, 129032U, 129036U, 129088U, 129100U, 129668U, 129680U, 129728U, 129728U, 129760U, 129760U, 129792U, 129924U, 129984U, 129992U, 130056U, 130060U, 130112U, 130124U, 130692U, 130704U, 130752U, 130752U, 130784U, 130784U, 130816U, 130948U, 131008U, 131016U, 196608U, 196656U, 196864U, 196932U, 197008U, 197072U, 197120U, 197400U, 197632U, 197932U, 197952U, 198172U, 198656U, 198708U, 198848U, 198920U, 198928U, 199084U, 199168U, 199212U, 199236U, 199248U, 199284U, 199716U, 199936U, 199936U, 199944U, 199956U, 199964U, 199968U, 199996U, 200016U, 201216U, 201228U, 201248U, 201248U, 201280U, 201280U, 202240U, 202252U, 203264U, 203292U, 204288U, 204320U, 204344U, 204348U, 204416U, 204416U, 204424U, 204456U, 204464U, 204468U, 204488U, 204500U, 204728U, 204804U, 205312U, 205312U, 205320U, 205376U, 205384U, 205440U, 205448U, 205504U, 205512U, 205564U, 206336U, 206384U, 207360U, 207548U, 207616U, 207728U, 208896U, 208968U, 208992U, 209052U, 209136U, 209224U, 209248U, 209308U, 209392U, 209636U, 209656U, 209892U, 209912U, 209992U, 210016U, 210076U, 210160U, 210248U, 210272U, 210332U, 210416U, 210660U, 210680U, 210916U, 210936U, 210940U, 210964U, 210964U, 210988U, 210988U, 211072U, 211084U, 211176U, 211180U, 211200U, 211272U, 211296U, 211356U, 211440U, 211684U, 211704U, 211728U, 211752U, 211752U, 211772U, 211792U, 211952U, 211984U, 212008U, 212008U, 212028U, 212048U, 212208U, 212220U, 212992U, 213040U, 213248U, 213316U, 213392U, 213456U, 213504U, 213784U, 214016U, 214316U, 214336U, 214556U, 215040U, 215092U, 215232U, 215304U, 215312U, 215468U, 215552U, 215596U, 215620U, 215632U, 215668U, 216100U, 216320U, 216320U, 216328U, 216340U, 216348U, 216352U, 216380U, 216400U, 217600U, 217612U, 217632U, 217632U, 217664U, 217664U, 218624U, 218636U, 219648U, 219676U, 220672U, 220704U, 220728U, 220732U, 220800U, 220800U, 220808U, 220840U, 220848U, 220852U, 220872U, 220884U, 221112U, 221188U, 221696U, 221696U, 221704U, 221760U, 221768U, 221824U, 221832U, 221888U, 221896U, 221948U, 222720U, 222768U, 223744U, 223932U, 224000U, 224112U, 225280U, 225352U, 225376U, 225436U, 225520U, 225608U, 225632U, 225692U, 225776U, 226020U, 226040U, 226276U, 226296U, 226376U, 226400U, 226460U, 226544U, 226632U, 226656U, 226716U, 226800U, 227044U, 227064U, 227300U, 227320U, 227324U, 227348U, 227348U, 227372U, 227372U, 227456U, 227468U, 227560U, 227564U, 227584U, 227656U, 227680U, 227740U, 227824U, 228068U, 228088U, 228112U, 228136U, 228136U, 228156U, 228176U, 228336U, 228368U, 228392U, 228392U, 228412U, 228432U, 228592U, 228604U, 229376U, 229424U, 229632U, 229700U, 229776U, 229840U, 229888U, 230168U, 230400U, 230700U, 230720U, 230940U, 231424U, 231476U, 231616U, 231688U, 231696U, 231852U, 231936U, 231980U, 232004U, 232016U, 232052U, 232484U, 232704U, 232704U, 232712U, 232724U, 232732U, 232736U, 232764U, 232784U, 233984U, 233996U, 234016U, 234016U, 234048U, 234048U, 235008U, 235020U, 236032U, 236060U, 237056U, 237088U, 237112U, 237116U, 237184U, 237184U, 237192U, 237224U, 237232U, 237236U, 237256U, 237268U, 237496U, 237572U, 238080U, 238080U, 238088U, 238144U, 238152U, 238208U, 238216U, 238272U, 238280U, 238332U, 239104U, 239152U, 240128U, 240316U, 240384U, 240496U, 241664U, 241736U, 241760U, 241820U, 241904U, 241992U, 242016U, 242076U, 242160U, 242404U, 242424U, 242660U, 242680U, 242760U, 242784U, 242844U, 242928U, 243016U, 243040U, 243100U, 243184U, 243428U, 243448U, 243684U, 243704U, 243708U, 243732U, 243732U, 243756U, 243756U, 243840U, 243852U, 243944U, 243948U, 243968U, 244040U, 244064U, 244124U, 244208U, 244452U, 244472U, 244496U, 244520U, 244520U, 244540U, 244560U, 244720U, 244752U, 244776U, 244776U, 244796U, 244816U, 244976U, 244988U, 245760U, 245808U, 246016U, 246084U, 246160U, 246224U, 246272U, 246552U, 246784U, 247084U, 247104U, 247324U, 247808U, 247860U, 248000U, 248072U, 248080U, 248236U, 248320U, 248364U, 248388U, 248400U, 248436U, 248868U, 249088U, 249088U, 249096U, 249108U, 249116U, 249120U, 249148U, 249168U, 250368U, 250380U, 250400U, 250400U, 250432U, 250432U, 251392U, 251404U, 252416U, 252444U, 253440U, 253472U, 253496U, 253500U, 253568U, 253568U, 253576U, 253608U, 253616U, 253620U, 253640U, 253652U, 253880U, 253956U, 254464U, 254464U, 254472U, 254528U, 254536U, 254592U, 254600U, 254656U, 254664U, 254716U, 255488U, 255536U, 256512U, 256700U, 256768U, 256880U, 258048U, 258120U, 258144U, 258204U, 258288U, 258376U, 258400U, 258460U, 258544U, 258788U, 258808U, 259044U, 259064U, 259144U, 259168U, 259228U, 259312U, 259400U, 259424U, 259484U, 259568U, 259812U, 259832U, 260068U, 260088U, 260092U, 260116U, 260116U, 260140U, 260140U, 260224U, 260236U, 260328U, 260332U, 260352U, 260424U, 260448U, 260508U, 260592U, 260836U, 260856U, 260880U, 260904U, 260904U, 260924U, 260944U, 261104U, 261136U, 261160U, 261160U, 261180U, 261200U, 261360U, 261372U, 262144U, 262156U, 262208U, 262248U, 262268U, 262468U, 262528U, 262540U, 262656U, 262808U, 262828U, 262972U, 263160U, 263164U, 267012U, 267204U, 267264U, 267292U, 267392U, 267472U, 278528U, 278648U, 278720U, 279160U, 279232U, 279672U, 279744U, 280184U, 280256U, 280696U, 280768U, 281084U, 282624U, 282728U, 282752U, 282756U, 282784U, 282800U, 283136U, 283240U, 283264U, 283268U, 283296U, 283312U, 286912U, 286948U, 290816U, 290956U, 291328U, 291408U, 291840U, 291872U, 292352U, 292376U, 292864U, 292884U, 294912U, 294924U, 294976U, 295016U, 295036U, 295236U, 295296U, 295308U, 295424U, 295576U, 295596U, 295740U, 295928U, 295932U, 299780U, 299972U, 300032U, 300060U, 300160U, 300240U, 311296U, 311416U, 311488U, 311928U, 312000U, 312440U, 312512U, 312952U, 313024U, 313464U, 313536U, 313852U, 315392U, 315496U, 315520U, 315524U, 315552U, 315568U, 315904U, 316008U, 316032U, 316036U, 316064U, 316080U, 319680U, 319716U, 323584U, 323724U, 324096U, 324176U, 324608U, 324640U, 325120U, 325144U, 325632U, 325652U, 327680U, 327884U, 328704U, 328704U, 329728U, 329932U, 330752U, 330752U, 331776U, 331804U, 332544U, 332552U};
  
#line 1324 
  unsigned int const t6_reg_ranges[670U] = {4104U, 4428U, 4480U, 4532U, 4604U, 4688U, 4736U, 4924U, 6144U, 6396U, 12288U, 12332U, 12384U, 12504U, 12512U, 12540U, 12608U, 13692U, 13736U, 13772U, 13804U, 13804U, 13824U, 22052U, 22220U, 22364U, 22540U, 22548U, 22672U, 22716U, 22848U, 22876U, 22912U, 22924U, 22960U, 23004U, 23036U, 23064U, 23136U, 23148U, 23168U, 23196U, 23444U, 23548U, 23568U, 24256U, 24264U, 24264U, 24576U, 24640U, 24664U, 24916U, 30464U, 30616U, 30656U, 30848U, 30924U, 30972U, 31488U, 31828U, 32000U, 32508U, 36288U, 36320U, 36344U, 36484U, 36512U, 36744U, 36792U, 37148U, 37888U, 38000U, 38400U, 38684U, 38912U, 38920U, 38944U, 38972U, 38992U, 39012U, 39936U, 40044U, 40064U, 40172U, 40192U, 40300U, 40320U, 40428U, 40448U, 40556U, 40576U, 40684U, 40704U, 40812U, 40832U, 40992U, 53252U, 53308U, 57280U, 57312U, 57344U, 61448U, 69632U, 69652U, 69704U, 69904U, 69912U, 70012U, 70032U, 70240U, 70400U, 70412U, 73728U, 73820U, 102464U, 102508U, 102520U, 102528U, 102540U, 102692U, 102736U, 102832U, 102864U, 102888U, 102968U, 103096U, 103416U, 103540U, 103568U, 103628U, 103664U, 103672U, 105472U, 105600U, 105620U, 105660U, 105700U, 105768U, 105808U, 105848U, 105876U, 105928U, 105968U, 106000U, 106064U, 106092U, 106144U, 106292U, 106304U, 106320U, 106384U, 106412U, 106436U, 106468U, 106496U, 106604U, 106672U, 106784U, 106792U, 106808U, 106896U, 106948U, 107004U, 107004U, 122888U, 122892U, 122944U, 122956U, 123524U, 123536U, 123584U, 123584U, 123616U, 123616U, 123648U, 123780U, 123840U, 123848U, 123912U, 123916U, 123968U, 123980U, 124548U, 124560U, 124608U, 124608U, 124640U, 124640U, 124672U, 124804U, 124864U, 124872U, 124936U, 124940U, 124992U, 125004U, 125572U, 125584U, 125632U, 125632U, 125664U, 125664U, 125696U, 125828U, 125888U, 125896U, 125960U, 125964U, 126016U, 126028U, 126596U, 126608U, 126656U, 126656U, 126688U, 126688U, 126720U, 126852U, 126912U, 126920U, 126984U, 126988U, 127040U, 127052U, 127620U, 127632U, 127680U, 127680U, 127712U, 127712U, 127744U, 127876U, 127936U, 127944U, 128008U, 128012U, 128064U, 128076U, 128644U, 128656U, 128704U, 128704U, 128736U, 128736U, 128768U, 128900U, 128960U, 128968U, 129032U, 129036U, 129088U, 129100U, 129668U, 129680U, 129728U, 129728U, 129760U, 129760U, 129792U, 129924U, 129984U, 129992U, 130056U, 130060U, 130112U, 130124U, 130692U, 130704U, 130752U, 130752U, 130784U, 130784U, 130816U, 130948U, 131008U, 131016U, 196608U, 196720U, 196864U, 196956U, 197008U, 197072U, 197120U, 197400U, 197632U, 197932U, 197952U, 198172U, 198656U, 198796U, 198848U, 198920U, 198928U, 199096U, 199168U, 199172U, 199180U, 199212U, 199236U, 199248U, 199284U, 199716U, 199936U, 199996U, 200004U, 200060U, 200160U, 200160U, 200192U, 200404U, 200448U, 200612U, 200640U, 200644U, 200704U, 200708U, 200832U, 200956U, 201224U, 201248U, 201276U, 201300U, 201472U, 201472U, 201480U, 201500U, 201528U, 201532U, 201600U, 201600U, 201608U, 201640U, 201652U, 201652U, 201728U, 201760U, 201784U, 201788U, 201856U, 201856U, 201896U, 201896U, 201904U, 201908U, 201928U, 201940U, 203328U, 203340U, 203504U, 203552U, 203576U, 203580U, 203648U, 203648U, 203688U, 203688U, 203696U, 203700U, 203720U, 203732U, 205120U, 205196U, 205296U, 205312U, 205336U, 205336U, 205824U, 205824U, 205832U, 205852U, 206360U, 206368U, 206436U, 206436U, 206504U, 206504U, 206572U, 206572U, 207360U, 207548U, 207616U, 207736U, 207872U, 207872U, 207880U, 207932U, 208384U, 208428U, 208640U, 208684U, 208896U, 209068U, 209088U, 209324U, 209344U, 209604U, 209636U, 209860U, 209892U, 210092U, 210112U, 210348U, 210368U, 210628U, 210660U, 210884U, 210916U, 210940U, 210964U, 210964U, 211028U, 211048U, 211072U, 211084U, 211136U, 211152U, 211176U, 211180U, 211200U, 211372U, 211392U, 211652U, 211684U, 211728U, 211748U, 211792U, 211952U, 211984U, 212004U, 212048U, 212208U, 212220U, 212992U, 213104U, 213248U, 213340U, 213392U, 213456U, 213504U, 213784U, 214016U, 214316U, 214336U, 214556U, 215040U, 215180U, 215232U, 215304U, 215312U, 215480U, 215552U, 215556U, 215564U, 215596U, 215620U, 215632U, 215668U, 216100U, 216320U, 216380U, 216388U, 216444U, 216544U, 216544U, 216576U, 216788U, 216832U, 216996U, 217024U, 217028U, 217088U, 217092U, 217216U, 217340U, 217608U, 217632U, 217660U, 217684U, 217856U, 217856U, 217864U, 217884U, 217912U, 217916U, 217984U, 217984U, 217992U, 218024U, 218036U, 218036U, 218112U, 218144U, 218168U, 218172U, 218240U, 218240U, 218280U, 218280U, 218288U, 218292U, 218312U, 218324U, 219712U, 219724U, 219888U, 219936U, 219960U, 219964U, 220032U, 220032U, 220072U, 220072U, 220080U, 220084U, 220104U, 220116U, 221504U, 221580U, 221680U, 221696U, 221720U, 221720U, 222208U, 222208U, 222216U, 222236U, 222744U, 222752U, 222820U, 222820U, 222888U, 222888U, 222956U, 222956U, 223744U, 223932U, 224000U, 224120U, 224256U, 224256U, 224264U, 224316U, 224768U, 224812U, 225024U, 225068U, 225280U, 225452U, 225472U, 225708U, 225728U, 225988U, 226020U, 226244U, 226276U, 226476U, 226496U, 226732U, 226752U, 227012U, 227044U, 227268U, 227300U, 227324U, 227348U, 227348U, 227412U, 227432U, 227456U, 227468U, 227520U, 227536U, 227560U, 227564U, 227584U, 227756U, 227776U, 228036U, 228068U, 228112U, 228132U, 228176U, 228336U, 228368U, 228388U, 228432U, 228592U, 228604U, 262208U, 262208U, 262272U, 262276U, 262400U, 262400U, 262464U, 262588U, 262656U, 262676U, 262696U, 262696U, 262720U, 262744U, 262784U, 262784U, 262916U, 262916U, 262960U, 262972U, 267012U, 267228U, 267264U, 267292U, 267392U, 267472U, 278528U, 278652U, 278720U, 279164U, 279232U, 279676U, 279744U, 280188U, 280256U, 280700U, 280768U, 281212U, 281280U, 281724U, 281792U, 282236U, 282304U, 282748U, 282816U, 283132U, 284672U, 284776U, 284800U, 284804U, 284832U, 284848U, 285184U, 285288U, 285312U, 285316U, 285344U, 285360U, 286912U, 286948U, 290816U, 290956U, 291328U, 291408U, 291840U, 291872U, 292352U, 292376U, 292864U, 292908U, 327680U, 327884U, 328704U, 328704U, 329728U, 329932U, 330752U, 330752U, 331776U, 331952U, 332544U, 332580U};
  
#line 1662 
  u32 *buf_end = (u32 *)buf + buf_size;
  
#line 1665 
  unsigned int chip_version = ((unsigned int)adap->params.chip >> 4) & 15U;
  
#line 1670 
  switch (chip_version) {
    case (unsigned int)4: 
#line 1671 
    ;
    
#line 1672 
    reg_ranges = (unsigned int const *)(& t4_reg_ranges);
    
#line 1673 
    reg_ranges_size = 438;
    
#line 1674 
    goto ldv_49156;
    case (unsigned int)5: 
#line 1676 
    ;
    
#line 1677 
    reg_ranges = (unsigned int const *)(& t5_reg_ranges);
    
#line 1678 
    reg_ranges_size = 874;
    
#line 1679 
    goto ldv_49156;
    case (unsigned int)6: 
#line 1681 
    ;
    
#line 1682 
    reg_ranges = (unsigned int const *)(& t6_reg_ranges);
    
#line 1683 
    reg_ranges_size = 670;
    
#line 1684 
    goto ldv_49156;
    default: 
#line 1686 
    ;
    
#line 1687 
    dev_err((struct device const *)adap->pdev_dev,"Unsupported chip version %d\n",chip_version);
    
#line 1689 
    goto return_label;
  }
  ldv_49156: 
#line 1695 
  ;
  
#line 1695 
  memset(buf,0,buf_size);
  
#line 1696 
  range = 0;
  
#line 1696 
  goto ldv_49173;
  ldv_49172: 
#line 1697 
  ;
  {
    u32 *tmp;
    
#line 1697 
    unsigned int reg = *(reg_ranges + range);
    
#line 1698 
    unsigned int last_reg = *(reg_ranges + ((unsigned int)range + 1U));
    
#line 1699 
    u32 *bufp = (u32 *)buf + reg;
    
#line 1704 
    goto ldv_49170;
    ldv_49169: 
#line 1705 
    ;
    
#line 1705 
    tmp = bufp;
    
#line 1705 
    bufp += 1;
    
#line 1705 
    *tmp = t4_read_reg(adap,reg);
    
#line 1706 
    reg += 4U;
    ldv_49170: 
#line 1707 
    ;
    
#line 1704 
    if (reg <= last_reg && bufp < buf_end) 
#line 1706 
                                           goto ldv_49169; else 
#line 1709 
                                                                goto ldv_49171;
    ldv_49171: 
#line 1710 
    ;
  }
  
#line 1696 
  range += 2;
  ldv_49173: 
#line 1697 
  ;
  
#line 1696 
  if (range < reg_ranges_size) 
#line 1698 
                               goto ldv_49172; else 
#line 1701 
                                                    goto ldv_49174;
  ldv_49174: 
#line 1702 
  ;
  return_label: 
#line 1703 
                return;
}


#line 1724  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_seeprom_wp(struct adapter *adapter, bool enable)
{
  int tmp;
  ssize_t tmp_0;
  int tmp_1;
  
#line 1726 
  if ((int)enable != 0) 
#line 1726 
                        tmp = 12; else 
#line 1726 
                                       tmp = 0;
  
#line 1726 
  unsigned int v = (unsigned int)tmp;
  
#line 1727 
  tmp_0 = pci_write_vpd(adapter->pdev,31740LL,4UL,(void const *)(& v));
  
#line 1727 
  int ret = (int)tmp_0;
  
#line 1728 
  if (0 < ret) 
#line 1728 
               tmp_1 = 0; else 
#line 1728 
                               tmp_1 = ret;
  
#line 1728 
  return tmp_1;
}


#line 1738  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_get_raw_vpd_params(struct adapter *adapter, struct vpd_params *p)
{
  int __retres;
  int i;
  int addr;
  int ec;
  int sn;
  int pn;
  int na;
  u8 *vpd;
  u8 csum;
  unsigned int vpdr_len;
  unsigned int kw_offset;
  unsigned int id_len;
  ssize_t tmp_0;
  ssize_t tmp_1;
  u16 tmp_2;
  u16 tmp_3;
  u8 tmp_4;
  int tmp_6;
  u8 tmp_7;
  int tmp_9;
  int tmp_11;
  
#line 1740 
  int ret = 0;
  
#line 1745 
  vpd = (u8 *)vmalloc(1024UL);
  
#line 1746 
  if (vpd == (u8 *)0U) {
    
#line 1747 
    __retres = -12;
    
#line 1747 
    goto return_label;
  }
  else ;
  
#line 1752 
  tmp_0 = pci_read_vpd(adapter->pdev,1024LL,4UL,(void *)vpd);
  
#line 1752 
  ret = (int)tmp_0;
  
#line 1753 
  if (ret < 0) 
#line 1754 
               goto out; else ;
  
#line 1762 
  if ((unsigned int)*vpd == 130U) 
#line 1762 
                                  addr = 1024; else 
#line 1762 
                                                    addr = 0;
  
#line 1764 
  tmp_1 = pci_read_vpd(adapter->pdev,(long long)addr,1024UL,(void *)vpd);
  
#line 1764 
  ret = (int)tmp_1;
  
#line 1765 
  if (ret < 0) 
#line 1766 
               goto out; else ;
  
#line 1768 
  if ((unsigned int)*vpd != 130U) {
    
#line 1769 
    dev_err((struct device const *)adapter->pdev_dev,"missing VPD ID string\n");
    
#line 1770 
    ret = -22;
    
#line 1771 
    goto out;
  }
  else ;
  
#line 1774 
  tmp_2 = pci_vpd_lrdt_size((u8 const *)vpd);
  
#line 1774 
  id_len = (unsigned int)tmp_2;
  
#line 1775 
  if (id_len > 16U) 
#line 1776 
                    id_len = 16U; else ;
  
#line 1778 
  i = pci_vpd_find_tag((u8 const *)vpd,0U,1024U,(unsigned char)144);
  
#line 1779 
  if (i < 0) {
    
#line 1780 
    dev_err((struct device const *)adapter->pdev_dev,"missing VPD-R section\n");
    
#line 1781 
    ret = -22;
    
#line 1782 
    goto out;
  }
  else ;
  
#line 1785 
  tmp_3 = pci_vpd_lrdt_size((u8 const *)(vpd + i));
  
#line 1785 
  vpdr_len = (unsigned int)tmp_3;
  
#line 1786 
  kw_offset = (unsigned int)(i + 3);
  
#line 1787 
  if (vpdr_len + kw_offset > 1024U) {
    
#line 1788 
    dev_err((struct device const *)adapter->pdev_dev,"bad VPD-R length %u\n",vpdr_len);
    
#line 1789 
    ret = -22;
    
#line 1790 
    goto out;
  }
  else ;
  
#line 1803 
  i = pci_vpd_find_info_keyword((u8 const *)vpd,kw_offset,vpdr_len,"RV");
  
#line 1803 
  if (i < 0) {
    
#line 1803 
    dev_err((struct device const *)adapter->pdev_dev,"missing VPD keyword ");
    
#line 1803 
    ret = -22;
    
#line 1803 
    goto out;
  }
  else ;
  
#line 1803 
  i += 3;
  
#line 1804 
  csum = (unsigned char)0U;
  
#line 1804 
  goto ldv_49199;
  ldv_49198: 
#line 1805 
  ;
  
#line 1805 
  csum = (unsigned char)((int)*(vpd + i) + (int)csum);
  
#line 1804 
  i -= 1;
  ldv_49199: 
#line 1805 
  ;
  
#line 1804 
  if (i >= 0) 
#line 1806 
              goto ldv_49198; else 
#line 1809 
                                   goto ldv_49200;
  ldv_49200: 
#line 1810 
  ;
  
#line 1807 
  if ((unsigned int)csum != 0U) {
    
#line 1808 
    dev_err((struct device const *)adapter->pdev_dev,"corrupted VPD EEPROM, actual csum %u\n",(int)csum);
    
#line 1810 
    ret = -22;
    
#line 1811 
    goto out;
  }
  else ;
  
#line 1814 
  ec = pci_vpd_find_info_keyword((u8 const *)vpd,kw_offset,vpdr_len,"EC");
  
#line 1814 
  if (ec < 0) {
    
#line 1814 
    dev_err((struct device const *)adapter->pdev_dev,"missing VPD keyword ");
    
#line 1814 
    ret = -22;
    
#line 1814 
    goto out;
  }
  else ;
  
#line 1814 
  ec += 3;
  
#line 1815 
  sn = pci_vpd_find_info_keyword((u8 const *)vpd,kw_offset,vpdr_len,"SN");
  
#line 1815 
  if (sn < 0) {
    
#line 1815 
    dev_err((struct device const *)adapter->pdev_dev,"missing VPD keyword ");
    
#line 1815 
    ret = -22;
    
#line 1815 
    goto out;
  }
  else ;
  
#line 1815 
  sn += 3;
  
#line 1816 
  pn = pci_vpd_find_info_keyword((u8 const *)vpd,kw_offset,vpdr_len,"PN");
  
#line 1816 
  if (pn < 0) {
    
#line 1816 
    dev_err((struct device const *)adapter->pdev_dev,"missing VPD keyword ");
    
#line 1816 
    ret = -22;
    
#line 1816 
    goto out;
  }
  else ;
  
#line 1816 
  pn += 3;
  
#line 1817 
  na = pci_vpd_find_info_keyword((u8 const *)vpd,kw_offset,vpdr_len,"NA");
  
#line 1817 
  if (na < 0) {
    
#line 1817 
    dev_err((struct device const *)adapter->pdev_dev,"missing VPD keyword ");
    
#line 1817 
    ret = -22;
    
#line 1817 
    goto out;
  }
  else ;
  
#line 1817 
  na += 3;
  
#line 1820 
  memcpy((void *)(& p->id),(void const *)(vpd + 3U),(unsigned long)id_len);
  
#line 1821 
  strim((char *)(& p->id));
  
#line 1822 
  memcpy((void *)(& p->ec),(void const *)(vpd + ec),16UL);
  
#line 1823 
  strim((char *)(& p->ec));
  
#line 1824 
  tmp_4 = pci_vpd_info_field_size((u8 const *)(vpd + ((unsigned long)sn + 18446744073709551613U)));
  
#line 1824 
  i = (int)tmp_4;
  {
    int tmp_5;
    
#line 1825 
    int _min1 = i;
    
#line 1825 
    int _min2 = 24;
    
#line 1825 
    if (_min1 < _min2) 
#line 1825 
                       tmp_5 = _min1; else 
#line 1825 
                                           tmp_5 = _min2;
    
#line 1825 
    tmp_6 = tmp_5;
  }
  
#line 1825 
  ;
  
#line 1825 
  ;
  
#line 1825 
  memcpy((void *)(& p->sn),(void const *)(vpd + sn),(unsigned long)tmp_6);
  
#line 1826 
  strim((char *)(& p->sn));
  
#line 1827 
  tmp_7 = pci_vpd_info_field_size((u8 const *)(vpd + ((unsigned long)pn + 18446744073709551613U)));
  
#line 1827 
  i = (int)tmp_7;
  {
    int tmp_8;
    
#line 1828 
    int _min1_0 = i;
    
#line 1828 
    int _min2_0 = 16;
    
#line 1828 
    if (_min1_0 < _min2_0) 
#line 1828 
                           tmp_8 = _min1_0; else 
#line 1828 
                                                 tmp_8 = _min2_0;
    
#line 1828 
    tmp_9 = tmp_8;
  }
  
#line 1828 
  ;
  
#line 1828 
  ;
  
#line 1828 
  memcpy((void *)(& p->pn),(void const *)(vpd + pn),(unsigned long)tmp_9);
  
#line 1829 
  strim((char *)(& p->pn));
  {
    int tmp_10;
    
#line 1830 
    int _min1_1 = i;
    
#line 1830 
    int _min2_1 = 12;
    
#line 1830 
    if (_min1_1 < _min2_1) 
#line 1830 
                           tmp_10 = _min1_1; else 
#line 1830 
                                                  tmp_10 = _min2_1;
    
#line 1830 
    tmp_11 = tmp_10;
  }
  
#line 1830 
  ;
  
#line 1830 
  ;
  
#line 1830 
  memcpy((void *)(& p->na),(void const *)(vpd + na),(unsigned long)tmp_11);
  
#line 1831 
  strim((char *)(& p->na));
  out: 
#line 1833 
  ;
  
#line 1834 
  vfree((void const *)vpd);
  
#line 1835 
  __retres = ret;
  return_label: 
#line 1835 
                return __retres;
}


#line 1847  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_get_vpd_params(struct adapter *adapter, struct vpd_params *p)
{
  int __retres;
  u32 cclk_param;
  u32 cclk_val;
  int ret;
  
#line 1854 
  ret = t4_get_raw_vpd_params(adapter,p);
  
#line 1855 
  if (ret != 0) {
    
#line 1856 
    __retres = ret;
    
#line 1856 
    goto return_label;
  }
  else ;
  
#line 1861 
  cclk_param = 16777216U;
  
#line 1863 
  ret = t4_query_params(adapter,adapter->mbox,adapter->pf,0U,1U,(u32 const *)(& cclk_param),& cclk_val);
  
#line 1866 
  if (ret != 0) {
    
#line 1867 
    __retres = ret;
    
#line 1867 
    goto return_label;
  }
  else ;
  
#line 1868 
  p->cclk = cclk_val;
  
#line 1870 
  __retres = 0;
  return_label: 
#line 1870 
                return __retres;
}


#line 1901  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static int sf1_read(struct adapter *adapter, unsigned int byte_cnt, int cont, int lock, u32 *valp)
{
  int __retres;
  int ret;
  u32 tmp;
  
#line 1906 
  if (byte_cnt + 4294967295U > 3U) {
    
#line 1907 
    __retres = -22;
    
#line 1907 
    goto return_label;
  }
  else ;
  
#line 1908 
  tmp = t4_read_reg(adapter,103420U);
  
#line 1908 
  if (tmp < (u32)0) {
    
#line 1909 
    __retres = -16;
    
#line 1909 
    goto return_label;
  }
  else ;
  
#line 1910 
  t4_write_reg(adapter,103420U,(unsigned int)((lock << 4) | (cont << 3)) | ((byte_cnt + 4294967295U) << 1));
  
#line 1912 
  ret = t4_wait_op_done(adapter,103420,2147483648U,0,10,5);
  
#line 1913 
  if (ret == 0) 
#line 1914 
                *valp = t4_read_reg(adapter,103416U); else ;
  
#line 1915 
  __retres = ret;
  return_label: 
#line 1915 
                return __retres;
}


#line 1930  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static int sf1_write(struct adapter *adapter, unsigned int byte_cnt, int cont, int lock, u32 val)
{
  int __retres;
  u32 tmp;
  int tmp_0;
  
#line 1933 
  if (byte_cnt + 4294967295U > 3U) {
    
#line 1934 
    __retres = -22;
    
#line 1934 
    goto return_label;
  }
  else ;
  
#line 1935 
  tmp = t4_read_reg(adapter,103420U);
  
#line 1935 
  if (tmp < (u32)0) {
    
#line 1936 
    __retres = -16;
    
#line 1936 
    goto return_label;
  }
  else ;
  
#line 1937 
  t4_write_reg(adapter,103416U,val);
  
#line 1938 
  t4_write_reg(adapter,103420U,((unsigned int)((lock << 4) | (cont << 3)) | ((byte_cnt + 4294967295U) << 1)) | 1U);
  
#line 1940 
  tmp_0 = t4_wait_op_done(adapter,103420,2147483648U,0,10,5);
  
#line 1940 
  __retres = tmp_0;
  return_label: 
#line 1940 
                return __retres;
}


#line 1951  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static int flash_wait_op(struct adapter *adapter, int attempts, int delay)
{
  int __retres;
  int ret;
  u32 status;
  ldv_49249: 
#line 1955 
  ;
  
#line 1957 
  ret = sf1_write(adapter,1U,1,1,5U);
  
#line 1957 
  if (ret != 0) {
    
#line 1959 
    __retres = ret;
    
#line 1959 
    goto return_label;
  }
  else {
    
#line 1958 
    ret = sf1_read(adapter,1U,0,1,& status);
    
#line 1957 
    if (ret != 0) {
      
#line 1959 
      __retres = ret;
      
#line 1959 
      goto return_label;
    }
    else ;
  }
  
#line 1960 
  if ((status & 1U) == 0U) {
    
#line 1961 
    __retres = 0;
    
#line 1961 
    goto return_label;
  }
  else ;
  
#line 1962 
  attempts -= 1;
  
#line 1962 
  if (attempts == 0) {
    
#line 1963 
    __retres = -11;
    
#line 1963 
    goto return_label;
  }
  else ;
  
#line 1964 
  if (delay != 0) 
#line 1965 
                  msleep((unsigned int)delay); else ;
  
#line 1957 
  goto ldv_49249;
  return_label: 
#line 1957 
                return __retres;
}


#line 1982  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_read_flash(struct adapter *adapter, unsigned int addr, unsigned int nwords, u32 *data, int byte_oriented)
{
  int __retres;
  int ret;
  
#line 1987 
  if ((unsigned long)addr + (unsigned long)nwords * 4UL > (unsigned long)adapter->params.sf_size || (addr & 3U) != 0U) {
    
#line 1988 
    __retres = -22;
    
#line 1988 
    goto return_label;
  }
  else ;
  
#line 1990 
  if (0 != 0) 
#line 1990 
              addr = ((((addr << 24) | ((addr << 8) & 16711680U)) | ((addr >> 8) & 65280U)) | (addr >> 24)) | 11U;
  else {
    __u32 tmp;
    
#line 1990 
    tmp = __fswab32(addr);
    
#line 1990 
    addr = tmp | 11U;
  }
  
#line 1992 
  ret = sf1_write(adapter,4U,1,0,addr);
  
#line 1992 
  if (ret != 0) {
    
#line 1994 
    __retres = ret;
    
#line 1994 
    goto return_label;
  }
  else {
    
#line 1993 
    ret = sf1_read(adapter,1U,1,0,data);
    
#line 1992 
    if (ret != 0) {
      
#line 1994 
      __retres = ret;
      
#line 1994 
      goto return_label;
    }
    else ;
  }
  
#line 1996 
  goto ldv_49259;
  ldv_49258: 
#line 1997 
  ;
  
#line 1997 
  ret = sf1_read(adapter,4U,nwords > 1U,nwords == 1U,data);
  
#line 1998 
  if (nwords == 1U) 
#line 1999 
                    t4_write_reg(adapter,103420U,0U); else ;
  
#line 2000 
  if (ret != 0) {
    
#line 2001 
    __retres = ret;
    
#line 2001 
    goto return_label;
  }
  else ;
  
#line 2002 
  if (byte_oriented != 0) 
    
#line 2003 
    if (0 != 0) 
#line 2003 
                *data = (((*data << 24) | ((*data << 8) & 16711680U)) | ((*data >> 8) & 65280U)) | (*data >> 24); else 
                                                                    
#line 2003 
                                                                    *data = __fswab32(*data);
  else ;
  
#line 1996 
  nwords -= 1U;
  
#line 1996 
  data += 1;
  ldv_49259: 
#line 1997 
  ;
  
#line 1996 
  if (nwords != 0U) 
#line 1998 
                    goto ldv_49258; else 
#line 2001 
                                         goto ldv_49260;
  ldv_49260: 
#line 2002 
  ;
  
#line 2005 
  __retres = 0;
  return_label: 
#line 2005 
                return __retres;
}


#line 2018  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static int t4_write_flash(struct adapter *adapter, unsigned int addr, unsigned int n, u8 const *data)
{
  int __retres;
  int ret;
  u32 buf[64U];
  unsigned int i;
  unsigned int c;
  unsigned int left;
  unsigned int val;
  unsigned int tmp_1;
  u8 const *tmp_2;
  int tmp_3;
  
#line 2023 
  unsigned int offset = addr & 255U;
  
#line 2025 
  if (adapter->params.sf_size <= addr || offset + n > 256U) {
    
#line 2026 
    __retres = -22;
    
#line 2026 
    goto return_label;
  }
  else ;
  
#line 2028 
  if (0 != 0) 
#line 2028 
              val = ((((addr << 24) | ((addr << 8) & 16711680U)) | ((addr >> 8) & 65280U)) | (addr >> 24)) | 2U;
  else {
    __u32 tmp;
    
#line 2028 
    tmp = __fswab32(addr);
    
#line 2028 
    val = tmp | 2U;
  }
  
#line 2030 
  ret = sf1_write(adapter,1U,0,1,6U);
  
#line 2030 
  if (ret != 0) 
#line 2032 
                goto unlock;
  else {
    
#line 2031 
    ret = sf1_write(adapter,4U,1,1,val);
    
#line 2030 
    if (ret != 0) 
#line 2032 
                  goto unlock; else ;
  }
  
#line 2034 
  left = n;
  
#line 2034 
  goto ldv_49282;
  ldv_49281: 
#line 2035 
  ;
  {
    unsigned int tmp_0;
    
#line 2035 
    unsigned int _min1 = left;
    
#line 2035 
    unsigned int _min2 = 4U;
    
#line 2035 
    if (_min1 < _min2) 
#line 2035 
                       tmp_0 = _min1; else 
#line 2035 
                                           tmp_0 = _min2;
    
#line 2035 
    tmp_1 = tmp_0;
  }
  
#line 2035 
  c = tmp_1;
  
#line 2036 
  val = 0U;
  
#line 2036 
  i = 0U;
  
#line 2036 
  goto ldv_49279;
  ldv_49278: 
#line 2037 
  ;
  
#line 2037 
  tmp_2 = data;
  
#line 2037 
  data += 1;
  
#line 2037 
  val = (val << 8) + (unsigned int)*tmp_2;
  
#line 2036 
  i += 1U;
  ldv_49279: 
#line 2037 
  ;
  
#line 2036 
  if (i < c) 
#line 2038 
             goto ldv_49278; else 
#line 2041 
                                  goto ldv_49280;
  ldv_49280: 
#line 2042 
  ;
  
#line 2039 
  ret = sf1_write(adapter,c,c != left,1,val);
  
#line 2040 
  if (ret != 0) 
#line 2041 
                goto unlock; else ;
  
#line 2034 
  left -= c;
  ldv_49282: 
#line 2035 
  ;
  
#line 2034 
  if (left != 0U) 
#line 2036 
                  goto ldv_49281; else 
#line 2039 
                                       goto ldv_49283;
  ldv_49283: 
#line 2040 
  ;
  
#line 2043 
  ret = flash_wait_op(adapter,8,1);
  
#line 2044 
  if (ret != 0) 
#line 2045 
                goto unlock; else ;
  
#line 2047 
  t4_write_reg(adapter,103420U,0U);
  
#line 2050 
  ret = t4_read_flash(adapter,addr & 4294967040U,64U,(u32 *)(& buf),1);
  
#line 2051 
  if (ret != 0) {
    
#line 2052 
    __retres = ret;
    
#line 2052 
    goto return_label;
  }
  else ;
  
#line 2054 
  tmp_3 = memcmp((void const *)(data + - n),(void const *)(& buf) + offset,(unsigned long)n);
  
#line 2054 
  if (tmp_3 != 0) {
    
#line 2055 
    dev_err((struct device const *)adapter->pdev_dev,"failed to correctly write the flash page at %#x\n",addr);
    
#line 2058 
    __retres = -5;
    
#line 2058 
    goto return_label;
  }
  else ;
  
#line 2060 
  __retres = 0;
  
#line 2060 
  goto return_label;
  unlock: 
#line 2062 
  ;
  
#line 2063 
  t4_write_reg(adapter,103420U,0U);
  
#line 2064 
  __retres = ret;
  return_label: 
#line 2064 
                return __retres;
}


#line 2074  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_get_fw_version(struct adapter *adapter, u32 *vers)
{
  int tmp;
  
#line 2076 
  tmp = t4_read_flash(adapter,524292U,1U,vers,0);
  
#line 2076 
  return tmp;
}


#line 2088  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_get_tp_version(struct adapter *adapter, u32 *vers)
{
  int tmp;
  
#line 2090 
  tmp = t4_read_flash(adapter,524296U,1U,vers,0);
  
#line 2090 
  return tmp;
}


#line 2105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_get_exprom_version(struct adapter *adap, u32 *vers)
{
  int __retres;
  struct exprom_header *hdr;
  u32 exprom_header_buf[5U];
  int ret;
  
#line 2115 
  ret = t4_read_flash(adap,0U,5U,(u32 *)(& exprom_header_buf),0);
  
#line 2118 
  if (ret != 0) {
    
#line 2119 
    __retres = ret;
    
#line 2119 
    goto return_label;
  }
  else ;
  
#line 2121 
  hdr = (struct exprom_header *)(& exprom_header_buf);
  
#line 2122 
  if ((unsigned int)hdr->hdr_arr[0] != 85U || (unsigned int)hdr->hdr_arr[1] != 170U) {
    
#line 2123 
    __retres = -2;
    
#line 2123 
    goto return_label;
  }
  else ;
  
#line 2125 
  *vers = (unsigned int)(((((int)hdr->hdr_ver[0] << 24) | ((int)hdr->hdr_ver[1] << 16)) | ((int)hdr->hdr_ver[2] << 8)) | (int)hdr->hdr_ver[3]);
  
#line 2129 
  __retres = 0;
  return_label: 
#line 2129 
                return __retres;
}


#line 2135  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static int fw_compatible(struct fw_hdr const *hdr1, struct fw_hdr const *hdr2)
{
  int __retres;
  
#line 2139 
  if ((int)hdr1->chip == (int)hdr2->chip && hdr1->fw_ver == hdr2->fw_ver) {
    
#line 2140 
    __retres = 1;
    
#line 2140 
    goto return_label;
  }
  else ;
  
#line 2143 
  if ((((((int)hdr1->chip == (int)hdr2->chip && (int)hdr1->intfver_nic == (int)hdr2->intfver_nic) && (int)hdr1->intfver_vnic == (int)hdr2->intfver_vnic) && (int)hdr1->intfver_ri == (int)hdr2->intfver_ri) && (int)hdr1->intfver_iscsi == (int)hdr2->intfver_iscsi) && (int)hdr1->intfver_fcoe == (int)hdr2->intfver_fcoe) {
    
#line 2145 
    __retres = 1;
    
#line 2145 
    goto return_label;
  }
  else ;
  
#line 2148 
  __retres = 0;
  return_label: 
#line 2148 
                return __retres;
}


#line 2155  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static int should_install_fs_fw(struct adapter *adap, int card_fw_usable, int k, int c)
{
  int __retres;
  char const *reason;
  
#line 2160 
  if (card_fw_usable == 0) {
    
#line 2161 
    reason = "incompatible or unusable";
    
#line 2162 
    goto install;
  }
  else ;
  
#line 2165 
  if (k > c) {
    
#line 2166 
    reason = "older than the version supported with this driver";
    
#line 2167 
    goto install;
  }
  else ;
  
#line 2170 
  __retres = 0;
  
#line 2170 
  goto return_label;
  install: 
#line 2172 
  ;
  
#line 2173 
  dev_err((struct device const *)adap->pdev_dev,"firmware on card (%u.%u.%u.%u) is %s, ",c >> 24,(c >> 16) & 255,(c >> 8) & 255,c & 255,reason,k >> 24,(k >> 16) & 255,(k >> 8) & 255,k & 255);
  
#line 2180 
  __retres = 1;
  return_label: 
#line 2180 
                return __retres;
}


#line 2183  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_prep_fw(struct adapter *adap, struct fw_info *fw_info, u8 const *fw_data, unsigned int fw_size, struct fw_hdr *card_fw, enum dev_state state, int *reset)
{
  int ret;
  int card_fw_usable;
  int fs_fw_usable;
  struct fw_hdr const *fs_fw;
  struct fw_hdr const *drv_fw;
  int tmp;
  
#line 2192 
  drv_fw = (struct fw_hdr const *)(& fw_info->fw_hdr);
  
#line 2195 
  tmp = t4_read_flash(adap,524288U,32U,(u32 *)card_fw,1);
  
#line 2195 
  ret = - tmp;
  
#line 2198 
  if (ret == 0) 
#line 2199 
                card_fw_usable = fw_compatible(drv_fw,(struct fw_hdr const *)card_fw);
  else {
    
#line 2201 
    dev_err((struct device const *)adap->pdev_dev,"Unable to read card\'s firmware header: %d\n",ret);
    
#line 2203 
    card_fw_usable = 0;
  }
  
#line 2206 
  if (fw_data != (u8 const *)0U) {
    
#line 2207 
    fs_fw = (struct fw_hdr const *)fw_data;
    
#line 2208 
    fs_fw_usable = fw_compatible(drv_fw,fs_fw);
  }
  else {
    
#line 2210 
    fs_fw = (struct fw_hdr const *)0;
    
#line 2211 
    fs_fw_usable = 0;
  }
  
#line 2214 
  if ((card_fw_usable != 0 && card_fw->fw_ver == drv_fw->fw_ver) && (fs_fw_usable == 0 || fs_fw->fw_ver == drv_fw->fw_ver)) ;
  else 
    
#line 2220 
    if (fs_fw_usable != 0 && state == (unsigned int)DEV_STATE_UNINIT) {
      int tmp_5;
      unsigned int tmp_2;
      unsigned int tmp_4;
      
#line 2223 
      if (0 != 0) 
#line 2223 
                  tmp_2 = (((card_fw->fw_ver << 24) | ((card_fw->fw_ver << 8) & 16711680U)) | ((card_fw->fw_ver >> 8) & 65280U)) | (card_fw->fw_ver >> 24); else 
                                                                    
#line 2223 
                                                                    tmp_2 = __fswab32(card_fw->fw_ver);
      
#line 2222 
      if (0 != 0) 
#line 2222 
                  tmp_4 = (((fs_fw->fw_ver << 24) | ((fs_fw->fw_ver << 8) & 16711680U)) | ((fs_fw->fw_ver >> 8) & 65280U)) | (fs_fw->fw_ver >> 24); else 
                                                                    
#line 2222 
                                                                    tmp_4 = __fswab32(fs_fw->fw_ver);
      
#line 2220 
      ;
      
#line 2220 
      ;
      
#line 2220 
      tmp_5 = should_install_fs_fw(adap,card_fw_usable,(int)tmp_4,(int)tmp_2);
      
#line 2220 
      if (tmp_5 != 0) {
        int tmp_0;
        
#line 2224 
        tmp_0 = t4_fw_upgrade(adap,adap->mbox,fw_data,fw_size,0);
        
#line 2224 
        ret = - tmp_0;
        
#line 2226 
        if (ret != 0) {
          
#line 2227 
          dev_err((struct device const *)adap->pdev_dev,"failed to install firmware: %d\n",ret);
          
#line 2229 
          goto bye;
        }
        else ;
        
#line 2233 
        *card_fw = *fs_fw;
        
#line 2234 
        card_fw_usable = 1;
        
#line 2235 
        *reset = 0;
      }
      else ;
    }
    else ;
  
#line 2238 
  if (card_fw_usable == 0) {
    uint32_t d;
    uint32_t c;
    uint32_t k;
    
#line 2241 
    if (0 != 0) 
#line 2241 
                d = (((drv_fw->fw_ver << 24) | ((drv_fw->fw_ver << 8) & 16711680U)) | ((drv_fw->fw_ver >> 8) & 65280U)) | (drv_fw->fw_ver >> 24); else 
                                                                    
#line 2241 
                                                                    d = __fswab32(drv_fw->fw_ver);
    
#line 2242 
    if (0 != 0) 
#line 2242 
                c = (((card_fw->fw_ver << 24) | ((card_fw->fw_ver << 8) & 16711680U)) | ((card_fw->fw_ver >> 8) & 65280U)) | (card_fw->fw_ver >> 24); else 
                                                                    
#line 2242 
                                                                    c = __fswab32(card_fw->fw_ver);
    
#line 2243 
    if (fs_fw != (struct fw_hdr const *)0) {
      unsigned int tmp_9;
      
#line 2243 
      if (0 != 0) 
#line 2243 
                  tmp_9 = (((fs_fw->fw_ver << 24) | ((fs_fw->fw_ver << 8) & 16711680U)) | ((fs_fw->fw_ver >> 8) & 65280U)) | (fs_fw->fw_ver >> 24); else 
                                                                    
#line 2243 
                                                                    tmp_9 = __fswab32(fs_fw->fw_ver);
      
#line 2243 
      k = tmp_9;
    }
    else 
#line 2243 
         k = 0U;
    
#line 2245 
    dev_err((struct device const *)adap->pdev_dev,"Cannot find a usable firmware: ",(unsigned int)state,d >> 24,(d >> 16) & 255U,(d >> 8) & 255U,d & 255U,c >> 24,(c >> 16) & 255U,(c >> 8) & 255U,c & 255U,k >> 24,(k >> 16) & 255U,(k >> 8) & 255U,k & 255U);
    
#line 2256 
    ret = 22;
    
#line 2257 
    goto bye;
  }
  else ;
  
#line 2261 
  if (0 != 0) 
#line 2261 
              adap->params.fw_vers = (((card_fw->fw_ver << 24) | ((card_fw->fw_ver << 8) & 16711680U)) | ((card_fw->fw_ver >> 8) & 65280U)) | (card_fw->fw_ver >> 24); else 
                                                                    
#line 2261 
                                                                    adap->params.fw_vers = __fswab32(card_fw->fw_ver);
  
#line 2262 
  if (0 != 0) 
#line 2262 
              adap->params.tp_vers = (((card_fw->tp_microcode_ver << 24) | ((card_fw->tp_microcode_ver << 8) & 16711680U)) | ((card_fw->tp_microcode_ver >> 8) & 65280U)) | (card_fw->tp_microcode_ver >> 24); else 
                                                                    
#line 2262 
                                                                    adap->params.tp_vers = __fswab32(card_fw->tp_microcode_ver);
  bye: 
#line 2264 
  ;
  
#line 2265 
  return ret;
}


#line 2276  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static int t4_flash_erase_sectors(struct adapter *adapter, int start, int end)
{
  int __retres;
  
#line 2278 
  int ret = 0;
  
#line 2280 
  if (adapter->params.sf_nsec <= (unsigned int)end) {
    
#line 2281 
    __retres = -22;
    
#line 2281 
    goto return_label;
  }
  else ;
  
#line 2283 
  goto ldv_49346;
  ldv_49345: 
#line 2284 
  ;
  
#line 2284 
  ret = sf1_write(adapter,1U,0,1,6U);
  
#line 2284 
  if (ret != 0) 
#line 2284 
                goto _LOR;
  else {
    
#line 2285 
    ret = sf1_write(adapter,4U,0,1,(unsigned int)((start << 8) | 216));
    
#line 2284 
    if (ret != 0) 
#line 2284 
                  goto _LOR;
    else {
      
#line 2287 
      ret = flash_wait_op(adapter,14,500);
      
#line 2286 
      if (ret != 0) {
        _LOR: {
                
#line 2288 
                dev_err((struct device const *)adapter->pdev_dev,"erase of flash sector %d failed, error %d\n",start,ret);
                
#line 2291 
                goto ldv_49344;
              }
      }
      else ;
    }
  }
  
#line 2293 
  start += 1;
  ldv_49346: 
#line 2294 
  ;
  
#line 2283 
  if (start <= end) 
#line 2285 
                    goto ldv_49345; else 
#line 2288 
                                         goto ldv_49344;
  ldv_49344: 
#line 2289 
  ;
  
#line 2295 
  t4_write_reg(adapter,103420U,0U);
  
#line 2296 
  __retres = ret;
  return_label: 
#line 2296 
                return __retres;
}


#line 2306  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
unsigned int t4_flash_cfg_addr(struct adapter *adapter)
{
  unsigned int __retres;
  
#line 2308 
  if (adapter->params.sf_size == 1048576U) {
    
#line 2309 
    __retres = 983040U;
    
#line 2309 
    goto return_label;
  }
  else {
    
#line 2311 
    __retres = 2031616U;
    
#line 2311 
    goto return_label;
  }
  return_label: 
#line 2308 
                return __retres;
}


#line 2319  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static bool t4_fw_matches_chip(struct adapter const *adap, struct fw_hdr const *hdr)
{
  bool __retres;
  int tmp;
  
#line 2325 
  tmp = is_t4(adap->params.chip);
  
#line 2325 
  if (tmp != 0) {
    
#line 2325 
    if ((unsigned int)hdr->chip == 0U) {
      
#line 2328 
      __retres = (_Bool)1;
      
#line 2328 
      goto return_label;
    }
    else 
#line 2325 
         goto _LAND_0;
  }
  else {
    int tmp_0;
    _LAND_0: 
#line 2325 
    tmp_0 = is_t5(adap->params.chip);
    
#line 2325 
    if (tmp_0 != 0) {
      
#line 2326 
      if ((unsigned int)hdr->chip == 1U) {
        
#line 2328 
        __retres = (_Bool)1;
        
#line 2328 
        goto return_label;
      }
      else 
#line 2325 
           goto _LAND;
    }
    else {
      int tmp_1;
      _LAND: 
#line 2326 
      tmp_1 = is_t6(adap->params.chip);
      
#line 2326 
      if (tmp_1 != 0) {
        
#line 2327 
        if ((unsigned int)hdr->chip == 2U) {
          
#line 2328 
          __retres = (_Bool)1;
          
#line 2328 
          goto return_label;
        }
        else ;
      }
      else ;
    }
  }
  
#line 2330 
  dev_err((struct device const *)adap->pdev_dev,"FW image (%d) is not suitable for this adapter (%d)\n",(int)hdr->chip,((unsigned int)adap->params.chip >> 4) & 15U);
  
#line 2333 
  __retres = (_Bool)0;
  return_label: 
#line 2333 
                return __retres;
}


#line 2344  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_load_fw(struct adapter *adap, u8 const *fw_data, unsigned int size)
{
  int __retres;
  u32 csum;
  int ret;
  int addr;
  unsigned int i;
  u8 first_page[256U];
  unsigned int tmp_0;
  int tmp_2;
  bool tmp_1;
  unsigned int tmp_4;
  
#line 2350 
  __be32 const *p = (__be32 const *)fw_data;
  
#line 2351 
  struct fw_hdr const *hdr = (struct fw_hdr const *)fw_data;
  
#line 2352 
  unsigned int sf_sec_size = adap->params.sf_size / adap->params.sf_nsec;
  
#line 2353 
  unsigned int fw_img_start = adap->params.sf_fw_start;
  
#line 2354 
  unsigned int fw_start_sec = fw_img_start / sf_sec_size;
  
#line 2356 
  if (size == 0U) {
    
#line 2357 
    dev_err((struct device const *)adap->pdev_dev,"FW image has no data\n");
    
#line 2358 
    __retres = -22;
    
#line 2358 
    goto return_label;
  }
  else ;
  
#line 2360 
  if ((size & 511U) != 0U) {
    
#line 2361 
    dev_err((struct device const *)adap->pdev_dev,"FW image size not multiple of 512 bytes\n");
    
#line 2363 
    __retres = -22;
    
#line 2363 
    goto return_label;
  }
  else ;
  
#line 2365 
  if (0 != 0) 
#line 2365 
              tmp_0 = (unsigned int)((unsigned short)(((int)hdr->len512 << 8) | ((int)hdr->len512 >> 8))) * 512U;
  else {
    __u16 tmp;
    
#line 2365 
    tmp = __fswab16((unsigned short)((int)hdr->len512));
    
#line 2365 
    tmp_0 = (unsigned int)tmp * 512U;
  }
  
#line 2365 
  ;
  
#line 2365 
  if (tmp_0 != size) {
    
#line 2366 
    dev_err((struct device const *)adap->pdev_dev,"FW image size differs from size in FW header\n");
    
#line 2368 
    __retres = -22;
    
#line 2368 
    goto return_label;
  }
  else ;
  
#line 2370 
  if (size > 1048576U) {
    
#line 2371 
    dev_err((struct device const *)adap->pdev_dev,"FW image too large, max is %u bytes\n",1048576);
    
#line 2373 
    __retres = -27;
    
#line 2373 
    goto return_label;
  }
  else ;
  
#line 2375 
  tmp_1 = t4_fw_matches_chip((struct adapter const *)adap,hdr);
  
#line 2375 
  if (tmp_1) 
#line 2375 
             tmp_2 = 0; else 
#line 2375 
                             tmp_2 = 1;
  
#line 2375 
  if (tmp_2) {
    
#line 2376 
    __retres = -22;
    
#line 2376 
    goto return_label;
  }
  else ;
  
#line 2378 
  csum = 0U;
  
#line 2378 
  i = 0U;
  
#line 2378 
  goto ldv_49370;
  ldv_49369: 
#line 2379 
  ;
  
#line 2379 
  if (0 != 0) 
#line 2379 
              tmp_4 = (((*(p + i) << 24) | ((*(p + i) << 8) & 16711680U)) | ((*(p + i) >> 8) & 65280U)) | (*(p + i) >> 24); else 
                                                                    
#line 2379 
                                                                    tmp_4 = __fswab32(*(p + i));
  
#line 2379 
  csum = tmp_4 + csum;
  
#line 2378 
  i += 1U;
  ldv_49370: 
#line 2379 
  ;
  
#line 2378 
  if (size / 4U > i) 
#line 2380 
                     goto ldv_49369; else 
#line 2383 
                                          goto ldv_49371;
  ldv_49371: 
#line 2384 
  ;
  
#line 2381 
  if (csum != 4294967295U) {
    
#line 2382 
    dev_err((struct device const *)adap->pdev_dev,"corrupted firmware image, checksum %#x\n",csum);
    
#line 2384 
    __retres = -22;
    
#line 2384 
    goto return_label;
  }
  else ;
  
#line 2387 
  i = ((size + sf_sec_size) + 4294967295U) / sf_sec_size;
  
#line 2388 
  ret = t4_flash_erase_sectors(adap,(int)fw_start_sec,(int)((fw_start_sec + i) + 4294967295U));
  
#line 2389 
  if (ret != 0) 
#line 2390 
                goto out; else ;
  
#line 2397 
  memcpy((void *)(& first_page),(void const *)fw_data,256UL);
  
#line 2398 
  ((struct fw_hdr *)(& first_page))->fw_ver = 4294967295U;
  
#line 2399 
  ret = t4_write_flash(adap,fw_img_start,256U,(u8 const *)(& first_page));
  
#line 2400 
  if (ret != 0) 
#line 2401 
                goto out; else ;
  
#line 2403 
  addr = (int)fw_img_start;
  
#line 2404 
  size += 4294967040U;
  
#line 2404 
  goto ldv_49374;
  ldv_49373: 
#line 2405 
  ;
  
#line 2405 
  addr += 256;
  
#line 2406 
  fw_data += 256U;
  
#line 2407 
  ret = t4_write_flash(adap,(unsigned int)addr,256U,fw_data);
  
#line 2408 
  if (ret != 0) 
#line 2409 
                goto out; else ;
  
#line 2404 
  size += 4294967040U;
  ldv_49374: 
#line 2405 
  ;
  
#line 2404 
  if (size != 0U) 
#line 2406 
                  goto ldv_49373; else 
#line 2409 
                                       goto ldv_49375;
  ldv_49375: 
#line 2410 
  ;
  
#line 2412 
  ret = t4_write_flash(adap,fw_img_start + 4U,4U,(u8 const *)(& hdr->fw_ver));
  out: 
#line 2415 
  ;
  
#line 2416 
  if (ret != 0) 
#line 2417 
                dev_err((struct device const *)adap->pdev_dev,"firmware download failed, error %d\n",ret); else 
                                                                    
#line 2420 
                                                                    ret = t4_get_fw_version(adap,& adap->params.fw_vers);
  
#line 2421 
  __retres = ret;
  return_label: 
#line 2421 
                return __retres;
}


#line 2432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_phy_fw_ver(struct adapter *adap, int *phy_fw_ver)
{
  int __retres;
  u32 param;
  u32 val;
  int ret;
  
#line 2437 
  param = (unsigned int)(((int)adap->params.portvec << 8) | 17760257);
  
#line 2441 
  ret = t4_query_params(adap,adap->mbox,adap->pf,0U,1U,(u32 const *)(& param),& val);
  
#line 2443 
  if (ret < 0) {
    
#line 2444 
    __retres = ret;
    
#line 2444 
    goto return_label;
  }
  else ;
  
#line 2445 
  *phy_fw_ver = (int)val;
  
#line 2446 
  __retres = 0;
  return_label: 
#line 2446 
                return __retres;
}


#line 2476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_load_phy_fw(struct adapter *adap, int win, spinlock_t *win_lock, int (*phy_fw_version)(u8 const *, size_t ), u8 const *phy_fw_data, size_t phy_fw_size)
{
  int __retres;
  u32 param;
  u32 val;
  int ret;
  
#line 2481 
  unsigned long mtype = 0UL;
  
#line 2481 
  unsigned long maddr = 0UL;
  
#line 2483 
  int cur_phy_fw_ver = 0;
  
#line 2483 
  int new_phy_fw_vers = 0;
  
#line 2489 
  if (phy_fw_version != (int (*)(u8 const *, size_t ))0) {
    
#line 2490 
    new_phy_fw_vers = (*phy_fw_version)(phy_fw_data,phy_fw_size);
    
#line 2491 
    ret = t4_phy_fw_ver(adap,& cur_phy_fw_ver);
    
#line 2492 
    if (ret < 0) {
      
#line 2493 
      __retres = ret;
      
#line 2493 
      goto return_label;
    }
    else ;
    
#line 2495 
    if (cur_phy_fw_ver >= new_phy_fw_vers) {
      
#line 2496 
      dev_warn((struct device const *)adap->pdev_dev,"PHY Firmware already up-to-date, ",cur_phy_fw_ver);
      
#line 2498 
      __retres = 0;
      
#line 2498 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2508 
  param = (unsigned int)(((int)adap->params.portvec << 8) | 17760256);
  
#line 2512 
  val = (unsigned int)phy_fw_size;
  
#line 2513 
  ret = t4_query_params_rw(adap,adap->mbox,adap->pf,0U,1U,(u32 const *)(& param),& val,1);
  
#line 2515 
  if (ret < 0) {
    
#line 2516 
    __retres = ret;
    
#line 2516 
    goto return_label;
  }
  else ;
  
#line 2517 
  mtype = (unsigned long)(val >> 8);
  
#line 2518 
  maddr = (unsigned long)(val << 16) & 16711680UL;
  
#line 2523 
  if (win_lock != (spinlock_t *)0) 
#line 2524 
                                   ldv_spin_lock_bh_81(win_lock); else ;
  
#line 2525 
  ret = t4_memory_rw(adap,win,(int)mtype,(unsigned int)maddr,(unsigned int)phy_fw_size,(void *)phy_fw_data,0);
  
#line 2528 
  if (win_lock != (spinlock_t *)0) 
#line 2529 
                                   ldv_spin_unlock_bh_82(win_lock); else ;
  
#line 2530 
  if (ret != 0) {
    
#line 2531 
    __retres = ret;
    
#line 2531 
    goto return_label;
  }
  else ;
  
#line 2538 
  param = (unsigned int)(((int)adap->params.portvec << 8) | 17760256);
  
#line 2542 
  ret = t4_set_params_timeout(adap,adap->mbox,adap->pf,0U,1U,(u32 const *)(& param),(u32 const *)(& val),30000);
  
#line 2548 
  if (phy_fw_version != (int (*)(u8 const *, size_t ))0) {
    
#line 2549 
    ret = t4_phy_fw_ver(adap,& cur_phy_fw_ver);
    
#line 2550 
    if (ret < 0) {
      
#line 2551 
      __retres = ret;
      
#line 2551 
      goto return_label;
    }
    else ;
    
#line 2553 
    if (cur_phy_fw_ver != new_phy_fw_vers) {
      
#line 2554 
      dev_warn((struct device const *)adap->pdev_dev,"PHY Firmware did not update: ",cur_phy_fw_ver,new_phy_fw_vers);
      
#line 2558 
      __retres = -6;
      
#line 2558 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 2562 
  __retres = 1;
  return_label: 
#line 2562 
                return __retres;
}


#line 2570  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_fwcache(struct adapter *adap, enum fw_params_param_dev_fwcache op)
{
  struct fw_params_cmd c;
  int tmp_0;
  
#line 2574 
  memset((void *)(& c),0,64UL);
  
#line 2575 
  if (0 != 0) 
#line 2575 
              c.op_to_vfn = ((((adap->pf << 16) & 16776960U) | (adap->pf & 24320U)) | ((adap->pf << 8) >> 24)) | 40968U; else 
                                                                    
#line 2576 
                                                                    c.op_to_vfn = __fswab32((adap->pf << 8) | 144703488U);
  
#line 2580 
  c.retval_len16 = 67108864U;
  
#line 2581 
  c.param[0].mnem = 6145U;
  
#line 2584 
  c.param[0].val = (unsigned int)op;
  
#line 2586 
  tmp_0 = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& c),64,(void *)0);
  
#line 2586 
  return tmp_0;
}


#line 2589  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_cim_read_pif_la(struct adapter *adap, u32 *pif_req, u32 *pif_rsp, unsigned int *pif_req_wrptr, unsigned int *pif_rsp_wrptr)
{
  int i;
  int j;
  u32 cfg;
  u32 val;
  u32 req;
  u32 rsp;
  u32 *tmp;
  u32 *tmp_0;
  
#line 2596 
  cfg = t4_read_reg(adap,31600U);
  
#line 2597 
  if ((cfg & 4096U) != 0U) 
#line 2598 
                           t4_write_reg(adap,31600U,cfg ^ 4096U); else ;
  
#line 2600 
  val = t4_read_reg(adap,31604U);
  
#line 2601 
  req = (val >> 16) & 511U;
  
#line 2602 
  rsp = val & 511U;
  
#line 2603 
  if (pif_req_wrptr != (unsigned int *)0U) 
#line 2604 
                                           *pif_req_wrptr = req; else ;
  
#line 2605 
  if (pif_rsp_wrptr != (unsigned int *)0U) 
#line 2606 
                                           *pif_rsp_wrptr = rsp; else ;
  
#line 2608 
  i = 0;
  
#line 2608 
  goto ldv_49422;
  ldv_49421: 
#line 2609 
  ;
  
#line 2609 
  j = 0;
  
#line 2609 
  goto ldv_49419;
  ldv_49418: 
#line 2610 
  ;
  
#line 2610 
  t4_write_reg(adap,31600U,(req << 23) | (rsp << 14));
  
#line 2612 
  tmp = pif_req;
  
#line 2612 
  pif_req += 1;
  
#line 2612 
  *tmp = t4_read_reg(adap,31608U);
  
#line 2613 
  tmp_0 = pif_rsp;
  
#line 2613 
  pif_rsp += 1;
  
#line 2613 
  *tmp_0 = t4_read_reg(adap,31612U);
  
#line 2614 
  req += 1U;
  
#line 2615 
  rsp += 1U;
  
#line 2609 
  j += 1;
  ldv_49419: 
#line 2610 
  ;
  
#line 2609 
  if (j <= 5) 
#line 2611 
              goto ldv_49418; else 
#line 2614 
                                   goto ldv_49420;
  ldv_49420: 
#line 2615 
  ;
  
#line 2617 
  req = (req + 2U) & 511U;
  
#line 2618 
  rsp = (rsp + 2U) & 511U;
  
#line 2608 
  i += 1;
  ldv_49422: 
#line 2609 
  ;
  
#line 2608 
  if (i <= 63) 
#line 2610 
               goto ldv_49421; else 
#line 2613 
                                    goto ldv_49423;
  ldv_49423: 
#line 2614 
  ;
  
#line 2620 
  t4_write_reg(adap,31600U,cfg);
  
#line 2621 
  return;
}


#line 2623  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_cim_read_ma_la(struct adapter *adap, u32 *ma_req, u32 *ma_rsp)
{
  u32 cfg;
  int i;
  int j;
  int idx;
  u32 *tmp;
  u32 *tmp_0;
  
#line 2628 
  cfg = t4_read_reg(adap,31600U);
  
#line 2629 
  if ((cfg & 4096U) != 0U) 
#line 2630 
                           t4_write_reg(adap,31600U,cfg ^ 4096U); else ;
  
#line 2632 
  i = 0;
  
#line 2632 
  goto ldv_49437;
  ldv_49436: 
#line 2633 
  ;
  
#line 2633 
  j = 0;
  
#line 2633 
  goto ldv_49434;
  ldv_49433: 
#line 2634 
  ;
  
#line 2634 
  idx = i * 8 + j;
  
#line 2635 
  t4_write_reg(adap,31600U,(unsigned int)((idx << 23) | (idx << 14)));
  
#line 2637 
  tmp = ma_req;
  
#line 2637 
  ma_req += 1;
  
#line 2637 
  *tmp = t4_read_reg(adap,31616U);
  
#line 2638 
  tmp_0 = ma_rsp;
  
#line 2638 
  ma_rsp += 1;
  
#line 2638 
  *tmp_0 = t4_read_reg(adap,31620U);
  
#line 2633 
  j += 1;
  ldv_49434: 
#line 2634 
  ;
  
#line 2633 
  if (j <= 4) 
#line 2635 
              goto ldv_49433; else 
#line 2638 
                                   goto ldv_49435;
  ldv_49435: 
#line 2639 
  ;
  
#line 2632 
  i += 1;
  ldv_49437: 
#line 2633 
  ;
  
#line 2632 
  if (i <= 63) 
#line 2634 
               goto ldv_49436; else 
#line 2637 
                                    goto ldv_49438;
  ldv_49438: 
#line 2638 
  ;
  
#line 2641 
  t4_write_reg(adap,31600U,cfg);
  
#line 2642 
  return;
}


#line 2644  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_ulprx_read_la(struct adapter *adap, u32 *la_buf)
{
  unsigned int i;
  unsigned int j;
  
#line 2648 
  i = 0U;
  
#line 2648 
  goto ldv_49450;
  ldv_49449: 
#line 2649 
  ;
  {
    
#line 2649 
    u32 *p = la_buf + i;
    
#line 2651 
    t4_write_reg(adap,102972U,i);
    
#line 2652 
    j = t4_read_reg(adap,102984U);
    
#line 2653 
    t4_write_reg(adap,102976U,j);
    
#line 2654 
    j = 0U;
    
#line 2654 
    goto ldv_49447;
    ldv_49446: 
#line 2655 
    ;
    
#line 2655 
    *p = t4_read_reg(adap,102980U);
    
#line 2654 
    j += 1U;
    
#line 2654 
    p += 8U;
    ldv_49447: 
#line 2655 
    ;
    
#line 2654 
    if (j <= 511U) 
#line 2656 
                   goto ldv_49446; else 
#line 2659 
                                        goto ldv_49448;
    ldv_49448: 
#line 2660 
    ;
  }
  
#line 2648 
  i += 1U;
  ldv_49450: 
#line 2649 
  ;
  
#line 2648 
  if (i <= 7U) 
#line 2650 
               goto ldv_49449; else 
#line 2653 
                                    goto ldv_49451;
  ldv_49451: 
#line 2654 
  ;
  
#line 2655 
  return;
}


#line 2676  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_link_l1cfg(struct adapter *adap, unsigned int mbox, unsigned int port, struct link_config *lc)
{
  struct fw_port_cmd c;
  int tmp_3;
  
#line 2680 
  unsigned int fc = 0U;
  
#line 2680 
  unsigned int mdi = 512U;
  
#line 2682 
  lc->link_ok = (unsigned char)0U;
  
#line 2683 
  if (((int)lc->requested_fc & 1) != 0) 
#line 2684 
                                        fc |= 64U; else ;
  
#line 2685 
  if (((int)lc->requested_fc & 2) != 0) 
#line 2686 
                                        fc |= 128U; else ;
  
#line 2688 
  memset((void *)(& c),0,32UL);
  
#line 2689 
  if (0 != 0) 
#line 2689 
              c.op_to_portid = ((((port << 24) | ((port << 8) & 16711680U)) | ((port >> 8) & 28416U)) | (port >> 24)) | 36891U; else 
                                                                    
#line 2689 
                                                                    c.op_to_portid = __fswab32(port | 462422016U);
  
#line 2692 
  c.action_to_len16 = 33554688U;
  
#line 2696 
  if (((int)lc->supported & 256) == 0) {
    
#line 2697 
    if (0 != 0) 
#line 2697 
                c.u.l1cfg.rcap = ((((((unsigned int)lc->supported & 283U) | fc) << 24) | (((((unsigned int)lc->supported & 283U) | fc) << 8) & 16711680U)) | (((((unsigned int)lc->supported & 283U) | fc) >> 8) & 65280U)) | ((((unsigned int)lc->supported & 283U) | fc) >> 24); else 
                                                                    
#line 2697 
                                                                    c.u.l1cfg.rcap = __fswab32(((unsigned int)lc->supported & 283U) | fc);
    
#line 2699 
    lc->fc = (unsigned char)((unsigned int)lc->requested_fc & 3U);
  }
  else 
    
#line 2700 
    if ((unsigned int)lc->autoneg == 0U) {
      
#line 2701 
      if (0 != 0) 
#line 2701 
                  c.u.l1cfg.rcap = ((((((unsigned int)lc->requested_speed | fc) | mdi) << 24) | (((((unsigned int)lc->requested_speed | fc) | mdi) << 8) & 16711680U)) | (((((unsigned int)lc->requested_speed | fc) | mdi) >> 8) & 65280U)) | ((((unsigned int)lc->requested_speed | fc) | mdi) >> 24); else 
                                                                    
#line 2701 
                                                                    c.u.l1cfg.rcap = __fswab32(((unsigned int)lc->requested_speed | fc) | mdi);
      
#line 2702 
      lc->fc = (unsigned char)((unsigned int)lc->requested_fc & 3U);
    }
    else 
      
#line 2704 
      if (0 != 0) 
#line 2704 
                  c.u.l1cfg.rcap = ((((((unsigned int)lc->advertising | fc) | mdi) << 24) | (((((unsigned int)lc->advertising | fc) | mdi) << 8) & 16711680U)) | (((((unsigned int)lc->advertising | fc) | mdi) >> 8) & 65280U)) | ((((unsigned int)lc->advertising | fc) | mdi) >> 24); else 
                                                                    
#line 2704 
                                                                    c.u.l1cfg.rcap = __fswab32(((unsigned int)lc->advertising | fc) | mdi);
  
#line 2706 
  tmp_3 = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),32,(void *)0);
  
#line 2706 
  return tmp_3;
}


#line 2717  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_restart_aneg(struct adapter *adap, unsigned int mbox, unsigned int port)
{
  struct fw_port_cmd c;
  int tmp_0;
  
#line 2721 
  memset((void *)(& c),0,32UL);
  
#line 2722 
  if (0 != 0) 
#line 2722 
              c.op_to_portid = ((((port << 24) | ((port << 8) & 16711680U)) | ((port >> 8) & 28416U)) | (port >> 24)) | 36891U; else 
                                                                    
#line 2722 
                                                                    c.op_to_portid = __fswab32(port | 462422016U);
  
#line 2725 
  c.action_to_len16 = 33554688U;
  
#line 2728 
  c.u.l1cfg.rcap = 65536U;
  
#line 2729 
  tmp_0 = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),32,(void *)0);
  
#line 2729 
  return tmp_0;
}


#line 2755  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static int t4_handle_intr_status(struct adapter *adapter, unsigned int reg, struct intr_info const *acts)
{
  
#line 2758 
  int fatal = 0;
  
#line 2759 
  unsigned int mask = 0U;
  
#line 2760 
  unsigned int status = t4_read_reg(adapter,reg);
  
#line 2762 
  goto ldv_49486;
  ldv_49485: 
#line 2763 
  ;
  
#line 2763 
  if ((acts->mask & status) == 0U) 
#line 2764 
                                   goto ldv_49483; else ;
  
#line 2765 
  if ((unsigned int)acts->fatal != 0U) {
    
#line 2766 
    fatal += 1;
    
#line 2767 
    dev_alert((struct device const *)adapter->pdev_dev,"%s (0x%x)\n",acts->msg,acts->mask & status);
  }
  else 
    
#line 2769 
    if (acts->msg != (char const *)0) {
      int tmp_0;
      
#line 2769 
      tmp_0 = __printk_ratelimit("t4_handle_intr_status");
      
#line 2769 
      if (tmp_0 != 0) 
#line 2770 
                      dev_warn((struct device const *)adapter->pdev_dev,"%s (0x%x)\n",acts->msg,acts->mask & status); else ;
    }
    else ;
  
#line 2772 
  if (acts->int_handler != (void (*)(struct adapter *))0) 
#line 2773 
                                                          (*(acts->int_handler))(adapter); else ;
  
#line 2774 
  mask = acts->mask | mask;
  ldv_49483: 
#line 2775 
  ;
  
#line 2762 
  acts += 1;
  ldv_49486: 
#line 2763 
  ;
  
#line 2762 
  if (acts->mask != 0U) 
#line 2764 
                        goto ldv_49485; else 
#line 2767 
                                             goto ldv_49487;
  ldv_49487: 
#line 2768 
  ;
  
#line 2776 
  status &= mask;
  
#line 2777 
  if (status != 0U) 
#line 2778 
                    t4_write_reg(adapter,reg,status); else ;
  
#line 2779 
  return fatal;
}


#line 2785  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void pcie_intr_handler(struct adapter *adapter)
{
  int fat;
  int tmp_2;
  
#line 2787 
  struct intr_info const sysbus_intr_info[6U] = {{.mask = 2147483648U, .msg = "RXNP array parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 536870912U, .msg = "RXPC array parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 134217728U, .msg = "RXCIF array parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 67108864U, .msg = "Rx completions control array parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8388608U, .msg = "RXFT array parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 2795 
  struct intr_info const pcie_port_intr_info[10U] = {{.mask = 1073741824U, .msg = "TXPC array parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 536870912U, .msg = "TXNP array parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 268435456U, .msg = "TXFT array parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 134217728U, .msg = "TXCA array parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 67108864U, .msg = "TXCIF array parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 33554432U, .msg = "RXCA array parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2097152U, .msg = "outbound request TLP discarded", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 262144U, .msg = "Rx data parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 65536U, .msg = "Tx uncorrectable data error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 2807 
  struct intr_info const pcie_intr_info[31U] = {{.mask = 1U, .msg = "MSI AddrL parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2U, .msg = "MSI AddrH parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 4U, .msg = "MSI data parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8U, .msg = "MSI-X AddrL parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 16U, .msg = "MSI-X AddrH parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 32U, .msg = "MSI-X data parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 64U, .msg = "MSI-X DI parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 128U, .msg = "PCI PIO completion FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 256U, .msg = "PCI PIO request FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 512U, .msg = "PCI PCI target tag FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1024U, .msg = "PCI CMD channel count parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2048U, .msg = "PCI CMD channel request parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 4096U, .msg = "PCI CMD channel response parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8192U, .msg = "PCI DMA channel count parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 16384U, .msg = "PCI DMA channel request parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 32768U, .msg = "PCI DMA channel response parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 65536U, .msg = "PCI HMA channel count parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 131072U, .msg = "PCI HMA channel request parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 262144U, .msg = "PCI HMA channel response parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 524288U, .msg = "PCI config snoop FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1048576U, .msg = "PCI FID parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2097152U, .msg = "PCI INTx clear parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 4194304U, .msg = "PCI MA tag parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8388608U, .msg = "PCI PIO tag parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 16777216U, .msg = "PCI Rx completion parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 33554432U, .msg = "PCI Rx write parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 67108864U, .msg = "PCI replay buffer parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 134217728U, .msg = "PCI core secondary fault", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 268435456U, .msg = "PCI core primary fault", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 536870912U, .msg = "PCI unexpected split completion error", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 2842 
  struct intr_info t5_pcie_intr_info[31U] = {{.mask = 1U, .msg = "Master Response Read Queue parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2U, .msg = "Master Timeout FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 4U, .msg = "MSI-X STI SRAM parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8U, .msg = "MSI-X AddrL parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 16U, .msg = "MSI-X AddrH parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 32U, .msg = "MSI-X data parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 64U, .msg = "MSI-X DI parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 128U, .msg = "PCI PIO completion Group FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 256U, .msg = "PCI PIO request Group FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 512U, .msg = "PCI PCI target tag FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1024U, .msg = "PCI master tag queue parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2048U, .msg = "PCI CMD channel request parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 4096U, .msg = "PCI CMD channel response parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8192U, .msg = "PCI DMA channel write request parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 16384U, .msg = "PCI DMA channel request parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 32768U, .msg = "PCI DMA channel response parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 65536U, .msg = "PCI HMA channel count parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 131072U, .msg = "PCI HMA channel request parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 262144U, .msg = "PCI HMA channel response parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 524288U, .msg = "PCI config snoop FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1048576U, .msg = "PCI FID parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2097152U, .msg = "PCI INTx clear parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 4194304U, .msg = "PCI MA group FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8388608U, .msg = "PCI PIO tag parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 16777216U, .msg = "PCI IP Rx header group parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 33554432U, .msg = "PCI IP Rx data group parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 67108864U, .msg = "PCI IP replay buffer parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 134217728U, .msg = "PCI IP SOT buffer parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 268435456U, .msg = "PCI TRGT1 group FIFOs parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 536870912U, .msg = "Outbound read error", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 2884 
  tmp_2 = is_t4(adapter->params.chip);
  
#line 2884 
  if (tmp_2 != 0) {
    int tmp;
    int tmp_0;
    int tmp_1;
    
#line 2885 
    tmp = t4_handle_intr_status(adapter,22792U,(struct intr_info const *)(& sysbus_intr_info));
    
#line 2887 
    tmp_0 = t4_handle_intr_status(adapter,22948U,(struct intr_info const *)(& pcie_port_intr_info));
    
#line 2890 
    tmp_1 = t4_handle_intr_status(adapter,12292U,(struct intr_info const *)(& pcie_intr_info));
    
#line 2885 
    fat = (tmp + tmp_0) + tmp_1;
  }
  else 
#line 2894 
       fat = t4_handle_intr_status(adapter,12292U,(struct intr_info const *)(& t5_pcie_intr_info));
  
#line 2897 
  if (fat != 0) 
#line 2898 
                t4_fatal_err(adapter); else ;
  
#line 2899 
  return;
}


#line 2904  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void tp_intr_handler(struct adapter *adapter)
{
  int tmp;
  
#line 2906 
  struct intr_info const tp_intr_info[3U] = {{.mask = 1073741823U, .msg = "TP parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1073741824U, .msg = "TP out of Tx pages", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 2912 
  tmp = t4_handle_intr_status(adapter,32372U,(struct intr_info const *)(& tp_intr_info));
  
#line 2912 
  if (tmp != 0) 
#line 2913 
                t4_fatal_err(adapter); else ;
  
#line 2914 
  return;
}


#line 2919  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void sge_intr_handler(struct adapter *adapter)
{
  u64 v;
  u32 err;
  u32 tmp;
  u32 tmp_0;
  int tmp_1;
  
#line 2924 
  struct intr_info const sge_intr_info[13U] = {{.mask = 4194304U, .msg = "SGE received CPL exceeding IQE size", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2097152U, .msg = "SGE GTS CIDX increment too large", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 524288U, .msg = "SGE received 0-length CPL", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 128U, .msg = (char const *)0, .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = & t4_db_full}, {.mask = 196608U, .msg = "SGE IQID > 1023 received CPL for FL", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 32768U, .msg = "SGE DBP 3 pidx increment too large", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 16384U, .msg = "SGE DBP 2 pidx increment too large", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8192U, .msg = "SGE DBP 1 pidx increment too large", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 4096U, .msg = "SGE DBP 0 pidx increment too large", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1024U, .msg = "SGE too many priority ingress contexts", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 32U, .msg = "SGE illegal ingress QID", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 16U, .msg = "SGE illegal egress QID", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 2948 
  struct intr_info t4t5_sge_intr_info[4U] = {{.mask = 262144U, .msg = (char const *)0, .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = & t4_db_dropped}, {.mask = 256U, .msg = (char const *)0, .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = & t4_db_full}, {.mask = 512U, .msg = "SGE too many priority egress contexts", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 2956 
  tmp = t4_read_reg(adapter,4132U);
  
#line 2957 
  tmp_0 = t4_read_reg(adapter,4144U);
  
#line 2956 
  v = (unsigned long long)tmp | ((unsigned long long)tmp_0 << 32);
  
#line 2958 
  if (v != 0ULL) {
    
#line 2959 
    dev_alert((struct device const *)adapter->pdev_dev,"SGE parity error (%#llx)\n",v);
    
#line 2961 
    t4_write_reg(adapter,4132U,(unsigned int)v);
    
#line 2962 
    t4_write_reg(adapter,4144U,(unsigned int)(v >> 32));
  }
  else ;
  
#line 2965 
  tmp_1 = t4_handle_intr_status(adapter,4156U,(struct intr_info const *)(& sge_intr_info));
  
#line 2965 
  v = (unsigned long long)tmp_1 | v;
  
#line 2966 
  if ((((unsigned int)adapter->params.chip >> 4) & 15U) <= 5U) {
    int tmp_2;
    
#line 2967 
    tmp_2 = t4_handle_intr_status(adapter,4156U,(struct intr_info const *)(& t4t5_sge_intr_info));
    
#line 2968 
    v = (unsigned long long)tmp_2 | v;
  }
  else ;
  
#line 2970 
  err = t4_read_reg(adapter,4352U);
  
#line 2971 
  if ((err & 131072U) != 0U) {
    
#line 2972 
    dev_err((struct device const *)adapter->pdev_dev,"SGE error for queue %u\n",err & 131071U);
    
#line 2974 
    if ((err & 262144U) != 0U) 
#line 2975 
                               dev_err((struct device const *)adapter->pdev_dev,"SGE UNCAPTURED_ERROR set (clearing)\n"); else ;
    
#line 2977 
    t4_write_reg(adapter,4352U,393216U);
  }
  else ;
  
#line 2981 
  if (v != 0ULL) 
#line 2982 
                 t4_fatal_err(adapter); else ;
  
#line 2983 
  return;
}


#line 2993  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void cim_intr_handler(struct adapter *adapter)
{
  int fat;
  u32 tmp;
  int tmp_0;
  int tmp_1;
  
#line 2995 
  struct intr_info const cim_intr_info[8U] = {{.mask = 2U, .msg = "CIM control register prefetch drop", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2016U, .msg = "CIM OBQ parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 129024U, .msg = "CIM IBQ parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 131072U, .msg = "CIM mailbox uP parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 262144U, .msg = "CIM mailbox host parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 524288U, .msg = "CIM TIEQ outgoing parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1048576U, .msg = "CIM TIEQ incoming parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3005 
  struct intr_info const cim_upintr_info[29U] = {{.mask = 1U, .msg = "CIM reserved space access", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2U, .msg = "CIM illegal transaction", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 4U, .msg = "CIM illegal write", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8U, .msg = "CIM illegal read", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 16U, .msg = "CIM illegal read BE", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 32U, .msg = "CIM illegal write BE", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 64U, .msg = "CIM single read from boot space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 128U, .msg = "CIM single write to boot space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 512U, .msg = "CIM block write to boot space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1024U, .msg = "CIM single read from flash space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2048U, .msg = "CIM single write to flash space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8192U, .msg = "CIM block write to flash space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 16384U, .msg = "CIM single EEPROM read", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 32768U, .msg = "CIM single EEPROM write", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 65536U, .msg = "CIM block EEPROM read", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 131072U, .msg = "CIM block EEPROM write", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 262144U, .msg = "CIM single read from CTL space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 524288U, .msg = "CIM single write to CTL space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1048576U, .msg = "CIM block read from CTL space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2097152U, .msg = "CIM block write to CTL space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 4194304U, .msg = "CIM single read from PL space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8388608U, .msg = "CIM single write to PL space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 16777216U, .msg = "CIM block read from PL space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 33554432U, .msg = "CIM block write to PL space", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 67108864U, .msg = "CIM request FIFO overwrite", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 134217728U, .msg = "CIM response FIFO overwrite", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 268435456U, .msg = "CIM PIF timeout", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 536870912U, .msg = "CIM PIF MA timeout", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3039 
  tmp = t4_read_reg(adapter,12472U);
  
#line 3039 
  if (tmp < (u32)0) 
#line 3040 
                    t4_report_fw_error(adapter); else ;
  
#line 3042 
  tmp_0 = t4_handle_intr_status(adapter,31532U,(struct intr_info const *)(& cim_intr_info));
  
#line 3043 
  tmp_1 = t4_handle_intr_status(adapter,31540U,(struct intr_info const *)(& cim_upintr_info));
  
#line 3042 
  fat = tmp_0 + tmp_1;
  
#line 3046 
  if (fat != 0) 
#line 3047 
                t4_fatal_err(adapter); else ;
  
#line 3048 
  return;
}


#line 3053  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void ulprx_intr_handler(struct adapter *adapter)
{
  int tmp;
  
#line 3055 
  struct intr_info const ulprx_intr_info[3U] = {{.mask = 25165824U, .msg = "ULPRX context error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8388607U, .msg = "ULPRX parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3061 
  tmp = t4_handle_intr_status(adapter,102744U,(struct intr_info const *)(& ulprx_intr_info));
  
#line 3061 
  if (tmp != 0) 
#line 3062 
                t4_fatal_err(adapter); else ;
  
#line 3063 
  return;
}


#line 3068  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void ulptx_intr_handler(struct adapter *adapter)
{
  int tmp;
  
#line 3070 
  struct intr_info const ulptx_intr_info[6U] = {{.mask = 2147483648U, .msg = "ULPTX channel 3 PBL out of bounds", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1073741824U, .msg = "ULPTX channel 2 PBL out of bounds", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 536870912U, .msg = "ULPTX channel 1 PBL out of bounds", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 268435456U, .msg = "ULPTX channel 0 PBL out of bounds", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 268435455U, .msg = "ULPTX parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3083 
  tmp = t4_handle_intr_status(adapter,36300U,(struct intr_info const *)(& ulptx_intr_info));
  
#line 3083 
  if (tmp != 0) 
#line 3084 
                t4_fatal_err(adapter); else ;
  
#line 3085 
  return;
}


#line 3090  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void pmtx_intr_handler(struct adapter *adapter)
{
  int tmp;
  
#line 3092 
  struct intr_info const pmtx_intr_info[10U] = {{.mask = 2147483648U, .msg = "PMTX channel 0 pcmd too large", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1073741824U, .msg = "PMTX channel 1 pcmd too large", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 536870912U, .msg = "PMTX channel 2 pcmd too large", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 268435456U, .msg = "PMTX 0-length pcmd", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 268435440U, .msg = "PMTX framing error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8U, .msg = "PMTX oespi parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 4U, .msg = "PMTX db_options parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2U, .msg = "PMTX icspi parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1U, .msg = "PMTX c_pcmd parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3106 
  tmp = t4_handle_intr_status(adapter,36860U,(struct intr_info const *)(& pmtx_intr_info));
  
#line 3106 
  if (tmp != 0) 
#line 3107 
                t4_fatal_err(adapter); else ;
  
#line 3108 
  return;
}


#line 3113  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void pmrx_intr_handler(struct adapter *adapter)
{
  int tmp;
  
#line 3115 
  struct intr_info const pmrx_intr_info[7U] = {{.mask = 4194304U, .msg = "PMRX 0-length pcmd", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 4194288U, .msg = "PMRX framing error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8U, .msg = "PMRX ocspi parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 4U, .msg = "PMRX db_options parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2U, .msg = "PMRX iespi parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1U, .msg = "PMRX e_pcmd parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3126 
  tmp = t4_handle_intr_status(adapter,36828U,(struct intr_info const *)(& pmrx_intr_info));
  
#line 3126 
  if (tmp != 0) 
#line 3127 
                t4_fatal_err(adapter); else ;
  
#line 3128 
  return;
}


#line 3133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void cplsw_intr_handler(struct adapter *adapter)
{
  int tmp;
  
#line 3135 
  struct intr_info const cplsw_intr_info[7U] = {{.mask = 32U, .msg = "CPLSW CIM op_map parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 16U, .msg = "CPLSW CIM overflow", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8U, .msg = "CPLSW TP framing error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 4U, .msg = "CPLSW SGE framing error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2U, .msg = "CPLSW CIM framing error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1U, .msg = "CPLSW no-switch error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3145 
  tmp = t4_handle_intr_status(adapter,102484U,(struct intr_info const *)(& cplsw_intr_info));
  
#line 3145 
  if (tmp != 0) 
#line 3146 
                t4_fatal_err(adapter); else ;
  
#line 3147 
  return;
}


#line 3152  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void le_intr_handler(struct adapter *adap)
{
  int tmp_0;
  struct intr_info const *tmp;
  
#line 3154 
  enum chip_type chip = ((unsigned int)adap->params.chip >> 4) & 15U;
  
#line 3155 
  struct intr_info const le_intr_info[6U] = {{.mask = 32U, .msg = "LE LIP miss", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 16U, .msg = "LE 0 LIP error", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 64U, .msg = "LE parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 32768U, .msg = "LE unknown command", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 65536U, .msg = "LE request queue parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3164 
  struct intr_info t6_le_intr_info[6U] = {{.mask = 2U, .msg = "LE LIP miss", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 4U, .msg = "LE 0 LIP error", .stat_idx = (short)(-1), .fatal = (unsigned short)0U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8192U, .msg = "LE parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8U, .msg = "LE unknown command", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1024U, .msg = "LE request queue parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3173 
  if (chip <= (unsigned int)5) 
#line 3173 
                               tmp = (struct intr_info const *)(& le_intr_info); else 
                                                                    
#line 3173 
                                                                    tmp = (struct intr_info const *)(& t6_le_intr_info);
  
#line 3173 
  ;
  
#line 3173 
  tmp_0 = t4_handle_intr_status(adap,105532U,tmp);
  
#line 3173 
  if (tmp_0 != 0) 
#line 3176 
                  t4_fatal_err(adap); else ;
  
#line 3177 
  return;
}


#line 3182  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void mps_intr_handler(struct adapter *adapter)
{
  int fat;
  int tmp;
  int tmp_0;
  int tmp_1;
  int tmp_2;
  int tmp_3;
  int tmp_4;
  int tmp_5;
  
#line 3184 
  struct intr_info const mps_rx_intr_info[2U] = {{.mask = 16777215U, .msg = "MPS Rx parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3188 
  struct intr_info const mps_tx_intr_info[8U] = {{.mask = 15U, .msg = "MPS Tx TP FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 16U, .msg = "MPS Tx NC-SI FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 480U, .msg = "MPS Tx data FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 7680U, .msg = "MPS Tx desc FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 8192U, .msg = "MPS Tx underflow", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 16384U, .msg = "MPS Tx SOP/EOP error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 32768U, .msg = "MPS Tx framing error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3200 
  struct intr_info const mps_trc_intr_info[4U] = {{.mask = 15U, .msg = "MPS TRC filter parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 240U, .msg = "MPS TRC packet FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 256U, .msg = "MPS TRC misc parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3207 
  struct intr_info const mps_stat_sram_intr_info[2U] = {{.mask = 2097151U, .msg = "MPS statistics SRAM parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3211 
  struct intr_info const mps_stat_tx_intr_info[2U] = {{.mask = 1048575U, .msg = "MPS statistics Tx FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3215 
  struct intr_info const mps_stat_rx_intr_info[2U] = {{.mask = 16777215U, .msg = "MPS statistics Rx FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3219 
  struct intr_info const mps_cls_intr_info[4U] = {{.mask = 1U, .msg = "MPS match SRAM parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2U, .msg = "MPS match TCAM parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 4U, .msg = "MPS hash SRAM parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3228 
  tmp = t4_handle_intr_status(adapter,69748U,(struct intr_info const *)(& mps_rx_intr_info));
  
#line 3229 
  tmp_0 = t4_handle_intr_status(adapter,37896U,(struct intr_info const *)(& mps_tx_intr_info));
  
#line 3231 
  tmp_1 = t4_handle_intr_status(adapter,39004U,(struct intr_info const *)(& mps_trc_intr_info));
  
#line 3233 
  tmp_2 = t4_handle_intr_status(adapter,38420U,(struct intr_info const *)(& mps_stat_sram_intr_info));
  
#line 3235 
  tmp_3 = t4_handle_intr_status(adapter,38432U,(struct intr_info const *)(& mps_stat_tx_intr_info));
  
#line 3237 
  tmp_4 = t4_handle_intr_status(adapter,38444U,(struct intr_info const *)(& mps_stat_rx_intr_info));
  
#line 3239 
  tmp_5 = t4_handle_intr_status(adapter,53288U,(struct intr_info const *)(& mps_cls_intr_info));
  
#line 3228 
  fat = (((((tmp + tmp_0) + tmp_1) + tmp_2) + tmp_3) + tmp_4) + tmp_5;
  
#line 3243 
  t4_write_reg(adapter,36872U,0U);
  
#line 3244 
  t4_read_reg(adapter,36872U);
  
#line 3245 
  if (fat != 0) 
#line 3246 
                t4_fatal_err(adapter); else ;
  
#line 3247 
  return;
}


#line 3255  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void mem_intr_handler(struct adapter *adapter, int idx)
{
  unsigned int addr;
  unsigned int cnt_addr;
  unsigned int v;
  u32 tmp_0;
  
#line 3257 
  char const name[4U][7U] = {{(char)'E', (char)'D', (char)'C', (char)'0', (char)'\000'}, {(char)'E', (char)'D', (char)'C', (char)'1', (char)'\000'}, {(char)'M', (char)'C', (char)'/', (char)'M', (char)'C', (char)'0', (char)'\000'}, {(char)'M', (char)'C', (char)'1', (char)'\000'}};
  
#line 3261 
  if (idx <= 1) {
    
#line 3262 
    addr = (unsigned int)(idx * 128 + 31096);
    
#line 3263 
    cnt_addr = (unsigned int)(idx * 128 + 31100);
  }
  else 
    
#line 3264 
    if (idx == 2) {
      int tmp;
      
#line 3265 
      tmp = is_t4(adapter->params.chip);
      
#line 3265 
      if (tmp != 0) {
        
#line 3266 
        addr = 29976U;
        
#line 3267 
        cnt_addr = 29980U;
      }
      else {
        
#line 3269 
        addr = 267032U;
        
#line 3270 
        cnt_addr = 267036U;
      }
    }
    else {
      
#line 3273 
      addr = 299800U;
      
#line 3274 
      cnt_addr = 299804U;
    }
  
#line 3277 
  tmp_0 = t4_read_reg(adapter,addr);
  
#line 3277 
  v = tmp_0 & 7U;
  
#line 3278 
  if ((v & 1U) != 0U) 
#line 3279 
                      dev_alert((struct device const *)adapter->pdev_dev,"%s FIFO parity error\n",(char const *)(& name[idx])); else ;
  
#line 3281 
  if ((v & 2U) != 0U) {
    u32 tmp_1;
    int tmp_3;
    
#line 3282 
    tmp_1 = t4_read_reg(adapter,cnt_addr);
    
#line 3282 
    u32 cnt = (tmp_1 >> 16) & 65535U;
    
#line 3284 
    t4_write_reg(adapter,cnt_addr,4294901760U);
    
#line 3285 
    tmp_3 = __printk_ratelimit("mem_intr_handler");
    
#line 3285 
    if (tmp_3 != 0) {
      char *tmp_2;
      
#line 3288 
      if (cnt > 1U) 
#line 3288 
                    tmp_2 = (char *)"s"; else 
#line 3288 
                                              tmp_2 = (char *)"";
      
#line 3286 
      ;
      
#line 3286 
      ;
      
#line 3286 
      ;
      
#line 3286 
      dev_warn((struct device const *)adapter->pdev_dev,"%u %s correctable ECC data error%s\n",cnt,(char const *)(& name[idx]),tmp_2);
    }
    else ;
  }
  else ;
  
#line 3290 
  if ((v & 4U) != 0U) 
#line 3291 
                      dev_alert((struct device const *)adapter->pdev_dev,"%s uncorrectable ECC data error\n",(char const *)(& name[idx])); else ;
  
#line 3294 
  t4_write_reg(adapter,addr,v);
  
#line 3295 
  if ((v & 5U) != 0U) 
#line 3296 
                      t4_fatal_err(adapter); else ;
  
#line 3297 
  return;
}


#line 3302  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void ma_intr_handler(struct adapter *adap)
{
  u32 v;
  
#line 3304 
  u32 status = t4_read_reg(adap,30688U);
  
#line 3306 
  if ((status & 2U) != 0U) {
    u32 tmp_0;
    int tmp_2;
    
#line 3308 
    tmp_0 = t4_read_reg(adap,30708U);
    
#line 3307 
    ;
    
#line 3307 
    dev_alert((struct device const *)adap->pdev_dev,"MA parity error, parity status %#x\n",tmp_0);
    
#line 3310 
    tmp_2 = is_t5(adap->params.chip);
    
#line 3310 
    if (tmp_2 != 0) {
      u32 tmp_1;
      
#line 3312 
      tmp_1 = t4_read_reg(adap,30724U);
      
#line 3311 
      ;
      
#line 3311 
      dev_alert((struct device const *)adap->pdev_dev,"MA parity error, parity status %#x\n",tmp_1);
    }
    else ;
  }
  else ;
  
#line 3316 
  if ((status & 1U) != 0U) {
    
#line 3317 
    v = t4_read_reg(adap,30692U);
    
#line 3318 
    dev_alert((struct device const *)adap->pdev_dev,"MA address wrap-around error by ",v & 15U,v & 4294967280U);
  }
  else ;
  
#line 3323 
  t4_write_reg(adap,30688U,status);
  
#line 3324 
  t4_fatal_err(adap);
  
#line 3325 
  return;
}


#line 3330  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void smb_intr_handler(struct adapter *adap)
{
  int tmp;
  
#line 3332 
  struct intr_info const smb_intr_info[4U] = {{.mask = 2097152U, .msg = "SMB master Tx FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1048576U, .msg = "SMB master Rx FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 524288U, .msg = "SMB slave FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3339 
  tmp = t4_handle_intr_status(adap,102544U,(struct intr_info const *)(& smb_intr_info));
  
#line 3339 
  if (tmp != 0) 
#line 3340 
                t4_fatal_err(adap); else ;
  
#line 3341 
  return;
}


#line 3346  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void ncsi_intr_handler(struct adapter *adap)
{
  int tmp;
  
#line 3348 
  struct intr_info const ncsi_intr_info[5U] = {{.mask = 256U, .msg = "NC-SI CIM parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 128U, .msg = "NC-SI MPS parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 2U, .msg = "NC-SI Tx FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1U, .msg = "NC-SI Rx FIFO parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3356 
  tmp = t4_handle_intr_status(adap,106712U,(struct intr_info const *)(& ncsi_intr_info));
  
#line 3356 
  if (tmp != 0) 
#line 3357 
                t4_fatal_err(adap); else ;
  
#line 3358 
  return;
}


#line 3363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void xgmac_intr_handler(struct adapter *adap, int port)
{
  u32 v;
  u32 int_cause_reg;
  int tmp;
  
#line 3367 
  tmp = is_t4(adap->params.chip);
  
#line 3367 
  if (tmp != 0) 
#line 3368 
                int_cause_reg = (unsigned int)((port + 16) * 8192 + 4316); else 
                                                                    
#line 3370 
                                                                    int_cause_reg = (unsigned int)((port + 12) * 16384 + 2268);
  
#line 3372 
  v = t4_read_reg(adap,int_cause_reg);
  
#line 3374 
  v &= 3U;
  
#line 3375 
  if (v == 0U) 
#line 3376 
               goto return_label; else ;
  
#line 3378 
  if ((v & 2U) != 0U) 
#line 3379 
                      dev_alert((struct device const *)adap->pdev_dev,"XGMAC %d Tx FIFO parity error\n",port); else ;
  
#line 3381 
  if ((v & 1U) != 0U) 
#line 3382 
                      dev_alert((struct device const *)adap->pdev_dev,"XGMAC %d Rx FIFO parity error\n",port); else ;
  
#line 3384 
  t4_write_reg(adap,(unsigned int)((port + 16) * 8192 + 4316),v);
  
#line 3385 
  t4_fatal_err(adap);
  return_label: 
#line 3386 
                return;
}


#line 3391  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void pl_intr_handler(struct adapter *adap)
{
  int tmp;
  
#line 3393 
  struct intr_info const pl_intr_info[3U] = {{.mask = 16U, .msg = "T4 fatal parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 1U, .msg = "PL VFID_MAP parity error", .stat_idx = (short)(-1), .fatal = (unsigned short)1U, .int_handler = (void (*)(struct adapter *))0}, {.mask = 0U, .msg = (char const *)0, .stat_idx = (short)0, .fatal = (unsigned short)0, .int_handler = (void (*)(struct adapter *))0}};
  
#line 3399 
  tmp = t4_handle_intr_status(adap,103472U,(struct intr_info const *)(& pl_intr_info));
  
#line 3399 
  if (tmp != 0) 
#line 3400 
                t4_fatal_err(adap); else ;
  
#line 3401 
  return;
}


#line 3416  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_slow_intr_handler(struct adapter *adapter)
{
  int __retres;
  int tmp_0;
  
#line 3418 
  u32 cause = t4_read_reg(adapter,103436U);
  
#line 3420 
  if ((cause & 234864721U) == 0U) {
    
#line 3421 
    __retres = 0;
    
#line 3421 
    goto return_label;
  }
  else ;
  
#line 3422 
  if ((cause & 1U) != 0U) 
#line 3423 
                          cim_intr_handler(adapter); else ;
  
#line 3424 
  if ((cause & 16U) != 0U) 
#line 3425 
                           mps_intr_handler(adapter); else ;
  
#line 3426 
  if ((cause & 32U) != 0U) 
#line 3427 
                           ncsi_intr_handler(adapter); else ;
  
#line 3428 
  if ((cause & 64U) != 0U) 
#line 3429 
                           pl_intr_handler(adapter); else ;
  
#line 3430 
  if ((cause & 256U) != 0U) 
#line 3431 
                            smb_intr_handler(adapter); else ;
  
#line 3432 
  if ((cause & 512U) != 0U) 
#line 3433 
                            xgmac_intr_handler(adapter,0); else ;
  
#line 3434 
  if ((cause & 1024U) != 0U) 
#line 3435 
                             xgmac_intr_handler(adapter,1); else ;
  
#line 3436 
  if ((cause & 2048U) != 0U) 
#line 3437 
                             xgmac_intr_handler(adapter,2); else ;
  
#line 3438 
  if ((cause & 4096U) != 0U) 
#line 3439 
                             xgmac_intr_handler(adapter,3); else ;
  
#line 3440 
  if ((cause & 16384U) != 0U) 
#line 3441 
                              pcie_intr_handler(adapter); else ;
  
#line 3442 
  if ((cause & 32768U) != 0U) 
#line 3443 
                              mem_intr_handler(adapter,2); else ;
  
#line 3444 
  tmp_0 = is_t5(adapter->params.chip);
  
#line 3444 
  if (tmp_0 != 0) {
    
#line 3444 
    if (cause < (u32)0) 
#line 3445 
                        mem_intr_handler(adapter,3); else ;
  }
  else ;
  
#line 3446 
  if ((cause & 65536U) != 0U) 
#line 3447 
                              mem_intr_handler(adapter,0); else ;
  
#line 3448 
  if ((cause & 131072U) != 0U) 
#line 3449 
                               mem_intr_handler(adapter,1); else ;
  
#line 3450 
  if ((cause & 262144U) != 0U) 
#line 3451 
                               le_intr_handler(adapter); else ;
  
#line 3452 
  if ((cause & 524288U) != 0U) 
#line 3453 
                               tp_intr_handler(adapter); else ;
  
#line 3454 
  if ((cause & 1048576U) != 0U) 
#line 3455 
                                ma_intr_handler(adapter); else ;
  
#line 3456 
  if ((cause & 2097152U) != 0U) 
#line 3457 
                                pmtx_intr_handler(adapter); else ;
  
#line 3458 
  if ((cause & 4194304U) != 0U) 
#line 3459 
                                pmrx_intr_handler(adapter); else ;
  
#line 3460 
  if ((cause & 8388608U) != 0U) 
#line 3461 
                                ulprx_intr_handler(adapter); else ;
  
#line 3462 
  if ((cause & 16777216U) != 0U) 
#line 3463 
                                 cplsw_intr_handler(adapter); else ;
  
#line 3464 
  if ((cause & 67108864U) != 0U) 
#line 3465 
                                 sge_intr_handler(adapter); else ;
  
#line 3466 
  if ((cause & 134217728U) != 0U) 
#line 3467 
                                  ulptx_intr_handler(adapter); else ;
  
#line 3470 
  t4_write_reg(adapter,103436U,cause & 234864721U);
  
#line 3471 
  t4_read_reg(adapter,103436U);
  
#line 3472 
  __retres = 1;
  return_label: 
#line 3472 
                return __retres;
}


#line 3488  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_intr_enable(struct adapter *adapter)
{
  u32 tmp;
  
#line 3490 
  u32 val = 0U;
  
#line 3491 
  tmp = t4_read_reg(adapter,103424U);
  
#line 3491 
  u32 pf = (tmp >> 8) & 7U;
  
#line 3493 
  if ((((unsigned int)adapter->params.chip >> 4) & 15U) <= 5U) 
#line 3494 
                                                               val = 262912U; else ;
  
#line 3495 
  t4_write_reg(adapter,4160U,val | 7074992U);
  
#line 3502 
  t4_write_reg(adapter,111556U,8U);
  
#line 3503 
  t4_set_reg_field(adapter,103444U,0U,(unsigned int)(1 << pf));
  
#line 3504 
  return;
}


#line 3514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_intr_disable(struct adapter *adapter)
{
  u32 tmp;
  
#line 3516 
  tmp = t4_read_reg(adapter,103424U);
  
#line 3516 
  u32 pf = (tmp >> 8) & 7U;
  
#line 3518 
  t4_write_reg(adapter,111556U,0U);
  
#line 3519 
  t4_set_reg_field(adapter,103444U,(unsigned int)(1 << pf),0U);
  
#line 3520 
  return;
}


#line 3529  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static int hash_mac_addr(u8 const *addr)
{
  int __retres;
  
#line 3531 
  u32 a = (((unsigned int)*addr << 16) | ((unsigned int)*(addr + 1U) << 8)) | (unsigned int)*(addr + 2U);
  
#line 3532 
  u32 b = (((unsigned int)*(addr + 3U) << 16) | ((unsigned int)*(addr + 4U) << 8)) | (unsigned int)*(addr + 5U);
  
#line 3533 
  a ^= b;
  
#line 3534 
  a = (a >> 12) ^ a;
  
#line 3535 
  a = (a >> 6) ^ a;
  
#line 3536 
  __retres = (int)a & 63;
  
#line 3536 
  return __retres;
}


#line 3556  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_config_rss_range(struct adapter *adapter, int mbox, unsigned int viid, int start, int n, u16 const *rspq, unsigned int nrspq)
{
  int __retres;
  int ret;
  struct fw_rss_ind_tbl_cmd cmd;
  
#line 3560 
  u16 const *rsp = rspq;
  
#line 3561 
  u16 const *rsp_end = rspq + nrspq;
  
#line 3564 
  memset((void *)(& cmd),0,64UL);
  
#line 3565 
  if (0 != 0) 
#line 3565 
              cmd.op_to_viid = ((((viid << 24) | ((viid << 8) & 16711680U)) | ((viid >> 8) & 24320U)) | (viid >> 24)) | 40992U; else 
                                                                    
#line 3565 
                                                                    cmd.op_to_viid = __fswab32(viid | 547356672U);
  
#line 3568 
  cmd.retval_len16 = 67108864U;
  
#line 3571 
  goto ldv_49624;
  ldv_49623: 
#line 3572 
  ;
  {
    int tmp_1;
    {
      int tmp_0;
      
#line 3572 
      int _min1 = n;
      
#line 3572 
      int _min2 = 32;
      
#line 3572 
      if (_min1 < _min2) 
#line 3572 
                         tmp_0 = _min1; else 
#line 3572 
                                             tmp_0 = _min2;
      
#line 3572 
      tmp_1 = tmp_0;
    }
    
#line 3572 
    int nq = tmp_1;
    
#line 3573 
    __be32 *qp = & cmd.iq0_to_iq2;
    
#line 3575 
    if (0 != 0) 
#line 3575 
                cmd.niqid = (unsigned short)(((int)((unsigned short)nq) << 8) | ((int)((unsigned short)nq) >> 8)); else 
                                                                    
#line 3575 
                                                                    cmd.niqid = __fswab16((unsigned short)((int)((unsigned short)nq)));
    
#line 3576 
    if (0 != 0) 
#line 3576 
                cmd.startidx = (unsigned short)(((int)((unsigned short)start) << 8) | ((int)((unsigned short)start) >> 8)); else 
                                                                    
#line 3576 
                                                                    cmd.startidx = __fswab16((unsigned short)((int)((unsigned short)start)));
    
#line 3578 
    start += nq;
    
#line 3579 
    n -= nq;
    
#line 3581 
    goto ldv_49621;
    ldv_49620: 
#line 3582 
    ;
    {
      unsigned int v;
      __be32 *tmp_4;
      
#line 3584 
      v = (unsigned int)((int)*rsp << 20);
      
#line 3585 
      rsp += 1;
      
#line 3585 
      ;
      
#line 3585 
      if (rsp >= rsp_end) 
#line 3586 
                          rsp = rspq; else ;
      
#line 3587 
      v = (unsigned int)((int)*rsp << 10) | v;
      
#line 3588 
      rsp += 1;
      
#line 3588 
      ;
      
#line 3588 
      if (rsp >= rsp_end) 
#line 3589 
                          rsp = rspq; else ;
      
#line 3590 
      v = (unsigned int)*rsp | v;
      
#line 3591 
      rsp += 1;
      
#line 3591 
      ;
      
#line 3591 
      if (rsp >= rsp_end) 
#line 3592 
                          rsp = rspq; else ;
      
#line 3594 
      tmp_4 = qp;
      
#line 3594 
      qp += 1;
      
#line 3594 
      if (0 != 0) 
#line 3594 
                  *tmp_4 = (((v << 24) | ((v << 8) & 16711680U)) | ((v >> 8) & 65280U)) | (v >> 24); else 
                                                                    
#line 3594 
                                                                    *tmp_4 = __fswab32(v);
      
#line 3595 
      nq += -3;
    }
    ldv_49621: 
#line 3597 
    ;
    
#line 3581 
    if (nq > 0) 
#line 3583 
                goto ldv_49620; else 
#line 3586 
                                     goto ldv_49622;
    ldv_49622: 
#line 3587 
    ;
    
#line 3598 
    ret = t4_wr_mbox(adapter,mbox,(void const *)(& cmd),64,(void *)0);
    
#line 3599 
    if (ret != 0) {
      
#line 3600 
      __retres = ret;
      
#line 3600 
      goto return_label;
    }
    else ;
  }
  ldv_49624: 
#line 3602 
  ;
  
#line 3571 
  if (n > 0) 
#line 3573 
             goto ldv_49623; else 
#line 3576 
                                  goto ldv_49625;
  ldv_49625: 
#line 3577 
  ;
  
#line 3602 
  __retres = 0;
  return_label: 
#line 3602 
                return __retres;
}


#line 3614  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_config_glbl_rss(struct adapter *adapter, int mbox, unsigned int mode, unsigned int flags)
{
  int __retres;
  struct fw_rss_glb_config_cmd c;
  int tmp_2;
  
#line 3619 
  memset((void *)(& c),0,32UL);
  
#line 3620 
  c.op_to_write = 40994U;
  
#line 3622 
  c.retval_len16 = 33554432U;
  
#line 3623 
  if (mode == 0U) 
    
#line 3624 
    if (0 != 0) 
#line 3624 
                c.u.manual.mode_pkd = (mode << 28) >> 24; else 
#line 3625 
                                                               c.u.manual.mode_pkd = __fswab32(mode << 28);
  else 
    
#line 3626 
    if (mode == 1U) {
      
#line 3627 
      if (0 != 0) 
#line 3627 
                  c.u.basicvirtual.mode_pkd = (mode << 28) >> 24; else 
                                                                    
#line 3628 
                                                                    c.u.basicvirtual.mode_pkd = __fswab32(mode << 28);
      
#line 3629 
      if (0 != 0) 
#line 3629 
                  c.u.basicvirtual.synmapen_to_hashtoeplitz = (((flags << 24) | ((flags << 8) & 16711680U)) | ((flags >> 8) & 65280U)) | (flags >> 24); else 
                                                                    
#line 3629 
                                                                    c.u.basicvirtual.synmapen_to_hashtoeplitz = __fswab32(flags);
    }
    else {
      
#line 3631 
      __retres = -22;
      
#line 3631 
      goto return_label;
    }
  
#line 3632 
  tmp_2 = t4_wr_mbox(adapter,mbox,(void const *)(& c),32,(void *)0);
  
#line 3632 
  __retres = tmp_2;
  return_label: 
#line 3632 
                return __retres;
}


#line 3645  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_config_vi_rss(struct adapter *adapter, int mbox, unsigned int viid, unsigned int flags, unsigned int defq)
{
  struct fw_rss_vi_config_cmd c;
  int tmp_1;
  
#line 3650 
  memset((void *)(& c),0,32UL);
  
#line 3651 
  if (0 != 0) 
#line 3651 
              c.op_to_viid = ((((viid << 24) | ((viid << 8) & 16711680U)) | ((viid >> 8) & 24320U)) | (viid >> 24)) | 40995U; else 
                                                                    
#line 3651 
                                                                    c.op_to_viid = __fswab32(viid | 597688320U);
  
#line 3654 
  c.retval_len16 = 33554432U;
  
#line 3655 
  if (0 != 0) 
#line 3655 
              c.u.basicvirtual.defaultq_to_udpen = (((((defq << 16) | flags) << 24) | ((((defq << 16) | flags) << 8) & 16711680U)) | ((((defq << 16) | flags) >> 8) & 65280U)) | (((defq << 16) | flags) >> 24); else 
                                                                    
#line 3655 
                                                                    c.u.basicvirtual.defaultq_to_udpen = __fswab32((defq << 16) | flags);
  
#line 3657 
  tmp_1 = t4_wr_mbox(adapter,mbox,(void const *)(& c),32,(void *)0);
  
#line 3657 
  return tmp_1;
}


#line 3661  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static int rd_rss_row(struct adapter *adap, int row, u32 *val)
{
  int tmp;
  
#line 3663 
  t4_write_reg(adap,32236U,(unsigned int)row | 4293918720U);
  
#line 3664 
  tmp = t4_wait_op_done_val(adap,32236,2147483648U,1,5,0,val);
  
#line 3664 
  return tmp;
}


#line 3675  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_read_rss(struct adapter *adapter, u16 *map)
{
  int __retres;
  u32 val;
  int i;
  int ret;
  u16 *tmp;
  u16 *tmp_0;
  
#line 3680 
  i = 0;
  
#line 3680 
  goto ldv_49654;
  ldv_49653: 
#line 3681 
  ;
  
#line 3681 
  ret = rd_rss_row(adapter,i,& val);
  
#line 3682 
  if (ret != 0) {
    
#line 3683 
    __retres = ret;
    
#line 3683 
    goto return_label;
  }
  else ;
  
#line 3684 
  tmp = map;
  
#line 3684 
  map += 1;
  
#line 3684 
  *tmp = (unsigned short)((unsigned int)((unsigned short)val) & 1023U);
  
#line 3685 
  tmp_0 = map;
  
#line 3685 
  map += 1;
  
#line 3685 
  *tmp_0 = (unsigned short)((unsigned int)((unsigned short)(val >> 10)) & 1023U);
  
#line 3680 
  i += 1;
  ldv_49654: 
#line 3681 
  ;
  
#line 3680 
  if (i <= 1023) 
#line 3682 
                 goto ldv_49653; else 
#line 3685 
                                      goto ldv_49655;
  ldv_49655: 
#line 3686 
  ;
  
#line 3687 
  __retres = 0;
  return_label: 
#line 3687 
                return __retres;
}


#line 3700  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void t4_fw_tp_pio_rw(struct adapter *adap, u32 *vals, unsigned int nregs, unsigned int start_index, unsigned int rw)
{
  int ret;
  int i;
  struct fw_ldst_cmd c;
  
#line 3704 
  int cmd = 16;
  
#line 3707 
  i = 0;
  
#line 3707 
  goto ldv_49668;
  ldv_49667: 
#line 3708 
  ;
  
#line 3708 
  memset((void *)(& c),0,64UL);
  
#line 3709 
  if (0 != 0) {
    unsigned int tmp_0;
    unsigned int tmp_1;
    unsigned int tmp_2;
    unsigned int tmp_3;
    
#line 3709 
    if (rw != 0U) 
#line 3709 
                  tmp_0 = 29360128U; else 
#line 3709 
                                          tmp_0 = 27262976U;
    
#line 3709 
    if (rw != 0U) 
#line 3709 
                  tmp_1 = 29360128U; else 
#line 3709 
                                          tmp_1 = 27262976U;
    
#line 3709 
    if (rw != 0U) 
#line 3709 
                  tmp_2 = 29360128U; else 
#line 3709 
                                          tmp_2 = 27262976U;
    
#line 3709 
    if (rw != 0U) 
#line 3709 
                  tmp_3 = 29360128U; else 
#line 3709 
                                          tmp_3 = 27262976U;
    
#line 3709 
    c.op_to_addrspace = ((((tmp_0 | (unsigned int)cmd) << 24) | (((tmp_1 | (unsigned int)cmd) << 8) & 16711680U)) | (((tmp_2 | (unsigned int)cmd) >> 8) & 65280U)) | ((tmp_3 | (unsigned int)cmd) >> 24);
  }
  else {
    __u32 tmp_5;
    unsigned int tmp_4;
    
#line 3709 
    if (rw != 0U) 
#line 3709 
                  tmp_4 = 29360128U; else 
#line 3709 
                                          tmp_4 = 27262976U;
    
#line 3709 
    ;
    
#line 3709 
    tmp_5 = __fswab32(tmp_4 | (unsigned int)cmd);
    
#line 3709 
    c.op_to_addrspace = tmp_5;
  }
  
#line 3714 
  c.cycles_to_len16 = 67108864U;
  
#line 3716 
  if (0 != 0) 
#line 3716 
              c.u.addrval.addr = ((((start_index + (unsigned int)i) << 24) | (((start_index + (unsigned int)i) << 8) & 16711680U)) | (((start_index + (unsigned int)i) >> 8) & 65280U)) | ((start_index + (unsigned int)i) >> 24); else 
                                                                    
#line 3716 
                                                                    c.u.addrval.addr = __fswab32(start_index + (unsigned int)i);
  
#line 3717 
  if (rw == 0U) {
    unsigned int tmp_8;
    
#line 3717 
    if (0 != 0) 
#line 3717 
                tmp_8 = (((*(vals + i) << 24) | ((*(vals + i) << 8) & 16711680U)) | ((*(vals + i) >> 8) & 65280U)) | (*(vals + i) >> 24); else 
                                                                    
#line 3717 
                                                                    tmp_8 = __fswab32(*(vals + i));
    
#line 3717 
    c.u.addrval.val = tmp_8;
  }
  else 
#line 3717 
       c.u.addrval.val = 0U;
  
#line 3718 
  ret = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& c),64,(void *)(& c));
  
#line 3719 
  if (ret == 0 && rw != 0U) 
    
#line 3720 
    if (0 != 0) 
#line 3720 
                *(vals + i) = (((c.u.addrval.val << 24) | ((c.u.addrval.val << 8) & 16711680U)) | ((c.u.addrval.val >> 8) & 65280U)) | (c.u.addrval.val >> 24); else 
                                                                    
#line 3720 
                                                                    *(vals + i) = __fswab32(c.u.addrval.val);
  else ;
  
#line 3707 
  i += 1;
  ldv_49668: 
#line 3708 
  ;
  
#line 3707 
  if ((unsigned int)i < nregs) 
#line 3709 
                               goto ldv_49667; else 
#line 3712 
                                                    goto ldv_49669;
  ldv_49669: 
#line 3713 
  ;
  
#line 3714 
  return;
}


#line 3731  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_read_rss_key(struct adapter *adap, u32 *key)
{
  
#line 3733 
  if ((adap->flags & 16U) != 0U) 
#line 3734 
                                 t4_fw_tp_pio_rw(adap,key,10U,64U,1U); else 
                                                                    
#line 3736 
                                                                    t4_read_indirect(adap,32320U,32324U,key,10U,64U);
  
#line 3737 
  return;
}


#line 3750  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_write_rss_key(struct adapter *adap, u32 const *key, int idx)
{
  
#line 3752 
  u8 rss_key_addr_cnt = (unsigned char)16U;
  
#line 3753 
  u32 vrt = t4_read_reg(adap,32256U);
  
#line 3759 
  if (((((unsigned int)adap->params.chip >> 4) & 15U) > 5U && (vrt & 67108864U) != 0U) && ((vrt >> 6) & 3U) == 3U) 
    
#line 3761 
    rss_key_addr_cnt = (unsigned char)32U; else ;
  
#line 3763 
  if ((adap->flags & 16U) != 0U) 
#line 3764 
                                 t4_fw_tp_pio_rw(adap,(u32 *)key,10U,64U,0U); else 
                                                                    
#line 3766 
                                                                    t4_write_indirect(adap,32320U,32324U,key,10U,64U);
  
#line 3769 
  if (idx >= 0 && (int)rss_key_addr_cnt > idx) 
    
#line 3770 
    if ((unsigned int)rss_key_addr_cnt > 16U) 
#line 3771 
                                              t4_write_reg(adap,32256U,(unsigned int)(((idx >> 4) << 30) | (idx << 8)) | 16U); else 
                                                                    
#line 3775 
                                                                    t4_write_reg(adap,32256U,(unsigned int)idx | 16U);
  else ;
  
#line 3777 
  return;
}


#line 3789  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_read_rss_pf_config(struct adapter *adapter, unsigned int index, u32 *valp)
{
  
#line 3792 
  if ((adapter->flags & 16U) != 0U) 
#line 3793 
                                    t4_fw_tp_pio_rw(adapter,valp,1U,index + 48U,1U); else 
                                                                    
#line 3796 
                                                                    t4_read_indirect(adapter,32320U,32324U,valp,1U,index + 48U);
  
#line 3798 
  return;
}


#line 3810  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_read_rss_vf_config(struct adapter *adapter, unsigned int index, u32 *vfl, u32 *vfh)
{
  u32 vrt;
  u32 mask;
  u32 data;
  
#line 3815 
  if ((((unsigned int)adapter->params.chip >> 4) & 15U) <= 5U) {
    
#line 3816 
    mask = 32512U;
    
#line 3817 
    data = index << 8;
  }
  else {
    
#line 3819 
    mask = 65280U;
    
#line 3820 
    data = index << 8;
  }
  
#line 3825 
  vrt = t4_read_reg(adapter,32256U);
  
#line 3826 
  vrt = ~ (mask | 33554480U) & vrt;
  
#line 3827 
  vrt = (data | vrt) | 16777216U;
  
#line 3828 
  t4_write_reg(adapter,32256U,vrt);
  
#line 3832 
  if ((adapter->flags & 16U) != 0U) {
    
#line 3833 
    t4_fw_tp_pio_rw(adapter,vfl,1U,58U,1U);
    
#line 3834 
    t4_fw_tp_pio_rw(adapter,vfh,1U,59U,1U);
  }
  else {
    
#line 3836 
    t4_read_indirect(adapter,32320U,32324U,vfl,1U,58U);
    
#line 3838 
    t4_read_indirect(adapter,32320U,32324U,vfh,1U,59U);
  }
  
#line 3840 
  return;
}


#line 3849  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
u32 t4_read_rss_pf_map(struct adapter *adapter)
{
  u32 pfmap;
  
#line 3853 
  if ((adapter->flags & 16U) != 0U) 
#line 3854 
                                    t4_fw_tp_pio_rw(adapter,& pfmap,1U,56U,1U); else 
                                                                    
#line 3856 
                                                                    t4_read_indirect(adapter,32320U,32324U,& pfmap,1U,56U);
  
#line 3858 
  return pfmap;
}


#line 3867  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
u32 t4_read_rss_pf_mask(struct adapter *adapter)
{
  u32 pfmask;
  
#line 3871 
  if ((adapter->flags & 16U) != 0U) 
#line 3872 
                                    t4_fw_tp_pio_rw(adapter,& pfmask,1U,57U,1U); else 
                                                                    
#line 3874 
                                                                    t4_read_indirect(adapter,32320U,32324U,& pfmask,1U,57U);
  
#line 3876 
  return pfmask;
}


#line 3888  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_tp_get_tcp_stats(struct adapter *adap, struct tp_tcp_stats *v4, struct tp_tcp_stats *v6)
{
  u32 val[10U];
  
#line 3897 
  if (v4 != (struct tp_tcp_stats *)0) {
    
#line 3898 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& val),10U,12U);
    
#line 3900 
    v4->tcp_out_rsts = val[0];
    
#line 3901 
    v4->tcp_in_segs = ((unsigned long long)val[4] << 32) | (unsigned long long)val[5];
    
#line 3902 
    v4->tcp_out_segs = ((unsigned long long)val[6] << 32) | (unsigned long long)val[7];
    
#line 3903 
    v4->tcp_retrans_segs = ((unsigned long long)val[8] << 32) | (unsigned long long)val[9];
  }
  else ;
  
#line 3905 
  if (v6 != (struct tp_tcp_stats *)0) {
    
#line 3906 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& val),10U,44U);
    
#line 3908 
    v6->tcp_out_rsts = val[0];
    
#line 3909 
    v6->tcp_in_segs = ((unsigned long long)val[4] << 32) | (unsigned long long)val[5];
    
#line 3910 
    v6->tcp_out_segs = ((unsigned long long)val[6] << 32) | (unsigned long long)val[7];
    
#line 3911 
    v6->tcp_retrans_segs = ((unsigned long long)val[8] << 32) | (unsigned long long)val[9];
  }
  else ;
  
#line 3913 
  return;
}


#line 3925  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_tp_get_err_stats(struct adapter *adap, struct tp_err_stats *st)
{
  
#line 3928 
  if ((unsigned int)adap->params.arch.nchan == 4U) {
    
#line 3929 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& st->mac_in_errs),12U,0U);
    
#line 3931 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& st->tnl_cong_drops),8U,24U);
    
#line 3934 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& st->tnl_tx_drops),4U,68U);
    
#line 3937 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& st->ofld_vlan_drops),4U,88U);
    
#line 3940 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& st->tcp6_in_errs),4U,40U);
  }
  else {
    
#line 3944 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& st->mac_in_errs),2U,0U);
    
#line 3946 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& st->hdr_in_errs),2U,4U);
    
#line 3948 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& st->tcp_in_errs),2U,8U);
    
#line 3950 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& st->tnl_cong_drops),2U,24U);
    
#line 3953 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& st->ofld_chan_drops),2U,28U);
    
#line 3956 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& st->tnl_tx_drops),2U,68U);
    
#line 3958 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& st->ofld_vlan_drops),2U,88U);
    
#line 3961 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& st->tcp6_in_errs),2U,40U);
  }
  
#line 3964 
  t4_read_indirect(adap,32336U,32340U,& st->ofld_no_neigh,2U,54U);
  
#line 3966 
  return;
}


#line 3975  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_tp_get_cpl_stats(struct adapter *adap, struct tp_cpl_stats *st)
{
  
#line 3978 
  if ((unsigned int)adap->params.arch.nchan == 4U) 
#line 3979 
                                                   t4_read_indirect(adap,32336U,32340U,(u32 *)(& st->req),8U,56U);
  else {
    
#line 3982 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& st->req),2U,56U);
    
#line 3984 
    t4_read_indirect(adap,32336U,32340U,(u32 *)(& st->rsp),2U,60U);
  }
  
#line 3986 
  return;
}


#line 3996  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_tp_get_rdma_stats(struct adapter *adap, struct tp_rdma_stats *st)
{
  
#line 3998 
  t4_read_indirect(adap,32336U,32340U,& st->rqe_dfr_pkt,2U,100U);
  
#line 3999 
  return;
}


#line 4010  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_get_fcoe_stats(struct adapter *adap, unsigned int idx, struct tp_fcoe_stats *st)
{
  u32 val[2U];
  
#line 4015 
  t4_read_indirect(adap,32336U,32340U,& st->frames_ddp,1U,idx + 72U);
  
#line 4017 
  t4_read_indirect(adap,32336U,32340U,& st->frames_drop,1U,idx + 76U);
  
#line 4019 
  t4_read_indirect(adap,32336U,32340U,(u32 *)(& val),2U,(idx + 40U) * 2U);
  
#line 4021 
  st->octets_ddp = ((unsigned long long)val[0] << 32) | (unsigned long long)val[1];
  
#line 4022 
  return;
}


#line 4031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_get_usm_stats(struct adapter *adap, struct tp_usm_stats *st)
{
  u32 val[4U];
  
#line 4035 
  t4_read_indirect(adap,32336U,32340U,(u32 *)(& val),4U,92U);
  
#line 4037 
  st->frames = val[0];
  
#line 4038 
  st->drops = val[1];
  
#line 4039 
  st->octets = ((unsigned long long)val[2] << 32) | (unsigned long long)val[3];
  
#line 4040 
  return;
}


#line 4050  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_read_mtu_tbl(struct adapter *adap, u16 *mtus, u8 *mtu_log)
{
  u32 v;
  int i;
  
#line 4055 
  i = 0;
  
#line 4055 
  goto ldv_49746;
  ldv_49745: 
#line 4056 
  ;
  
#line 4056 
  t4_write_reg(adap,32228U,(unsigned int)(i | -16777216));
  
#line 4058 
  v = t4_read_reg(adap,32228U);
  
#line 4059 
  *(mtus + i) = (unsigned short)((unsigned int)((unsigned short)v) & 16383U);
  
#line 4060 
  if (mtu_log != (u8 *)0U) 
#line 4061 
                           *(mtu_log + i) = (unsigned char)((unsigned int)((unsigned char)(v >> 16)) & 15U); else ;
  
#line 4055 
  i += 1;
  ldv_49746: 
#line 4056 
  ;
  
#line 4055 
  if (i <= 15) 
#line 4057 
               goto ldv_49745; else 
#line 4060 
                                    goto ldv_49747;
  ldv_49747: 
#line 4061 
  ;
  
#line 4062 
  return;
}


#line 4073  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_read_cong_tbl(struct adapter *adap, u16 (*incr)[32U])
{
  unsigned int mtu;
  unsigned int w;
  u32 tmp;
  
#line 4077 
  mtu = 0U;
  
#line 4077 
  goto ldv_49758;
  ldv_49757: 
#line 4078 
  ;
  
#line 4078 
  w = 0U;
  
#line 4078 
  goto ldv_49755;
  ldv_49754: 
#line 4079 
  ;
  
#line 4079 
  t4_write_reg(adap,32220U,((mtu << 5) | w) | 4294901760U);
  
#line 4082 
  tmp = t4_read_reg(adap,32220U);
  
#line 4081 
  (*(incr + mtu))[w] = (unsigned short)((unsigned int)((unsigned short)tmp) & 8191U);
  
#line 4078 
  w += 1U;
  ldv_49755: 
#line 4079 
  ;
  
#line 4078 
  if (w <= 31U) 
#line 4080 
                goto ldv_49754; else 
#line 4083 
                                     goto ldv_49756;
  ldv_49756: 
#line 4084 
  ;
  
#line 4077 
  mtu += 1U;
  ldv_49758: 
#line 4078 
  ;
  
#line 4077 
  if (mtu <= 15U) 
#line 4079 
                  goto ldv_49757; else 
#line 4082 
                                       goto ldv_49759;
  ldv_49759: 
#line 4083 
  ;
  
#line 4084 
  return;
}


#line 4095  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_tp_wr_bits_indirect(struct adapter *adap, unsigned int addr, unsigned int mask, unsigned int val)
{
  u32 tmp;
  
#line 4098 
  t4_write_reg(adap,32320U,addr);
  
#line 4099 
  tmp = t4_read_reg(adap,32324U);
  
#line 4099 
  val = (tmp & ~ mask) | val;
  
#line 4100 
  t4_write_reg(adap,32324U,val);
  
#line 4101 
  return;
}


#line 4110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void init_cong_ctrl(unsigned short *a, unsigned short *b)
{
  unsigned short tmp_6;
  unsigned short tmp_5;
  unsigned short tmp_4;
  unsigned short tmp_3;
  unsigned short tmp_2;
  unsigned short tmp_1;
  unsigned short tmp_0;
  unsigned short tmp;
  unsigned short tmp_14;
  unsigned short tmp_13;
  unsigned short tmp_12;
  unsigned short tmp_11;
  unsigned short tmp_10;
  unsigned short tmp_9;
  unsigned short tmp_8;
  unsigned short tmp_7;
  unsigned short tmp_15;
  unsigned short tmp_16;
  unsigned short tmp_19;
  unsigned short tmp_18;
  unsigned short tmp_17;
  unsigned short tmp_23;
  unsigned short tmp_22;
  unsigned short tmp_21;
  unsigned short tmp_20;
  unsigned short tmp_28;
  unsigned short tmp_27;
  unsigned short tmp_26;
  unsigned short tmp_25;
  unsigned short tmp_24;
  unsigned short tmp_29;
  unsigned short tmp_30;
  
#line 4112 
  tmp_6 = (unsigned short)1U;
  
#line 4112 
  *(a + 8U) = tmp_6;
  
#line 4112 
  tmp_5 = tmp_6;
  
#line 4112 
  *(a + 7U) = tmp_5;
  
#line 4112 
  tmp_4 = tmp_5;
  
#line 4112 
  *(a + 6U) = tmp_4;
  
#line 4112 
  tmp_3 = tmp_4;
  
#line 4112 
  *(a + 5U) = tmp_3;
  
#line 4112 
  tmp_2 = tmp_3;
  
#line 4112 
  *(a + 4U) = tmp_2;
  
#line 4112 
  tmp_1 = tmp_2;
  
#line 4112 
  *(a + 3U) = tmp_1;
  
#line 4112 
  tmp_0 = tmp_1;
  
#line 4112 
  *(a + 2U) = tmp_0;
  
#line 4112 
  tmp = tmp_0;
  
#line 4112 
  *(a + 1U) = tmp;
  
#line 4112 
  *a = tmp;
  
#line 4113 
  *(a + 9U) = (unsigned short)2U;
  
#line 4114 
  *(a + 10U) = (unsigned short)3U;
  
#line 4115 
  *(a + 11U) = (unsigned short)4U;
  
#line 4116 
  *(a + 12U) = (unsigned short)5U;
  
#line 4117 
  *(a + 13U) = (unsigned short)6U;
  
#line 4118 
  *(a + 14U) = (unsigned short)7U;
  
#line 4119 
  *(a + 15U) = (unsigned short)8U;
  
#line 4120 
  *(a + 16U) = (unsigned short)9U;
  
#line 4121 
  *(a + 17U) = (unsigned short)10U;
  
#line 4122 
  *(a + 18U) = (unsigned short)14U;
  
#line 4123 
  *(a + 19U) = (unsigned short)17U;
  
#line 4124 
  *(a + 20U) = (unsigned short)21U;
  
#line 4125 
  *(a + 21U) = (unsigned short)25U;
  
#line 4126 
  *(a + 22U) = (unsigned short)30U;
  
#line 4127 
  *(a + 23U) = (unsigned short)35U;
  
#line 4128 
  *(a + 24U) = (unsigned short)45U;
  
#line 4129 
  *(a + 25U) = (unsigned short)60U;
  
#line 4130 
  *(a + 26U) = (unsigned short)80U;
  
#line 4131 
  *(a + 27U) = (unsigned short)100U;
  
#line 4132 
  *(a + 28U) = (unsigned short)200U;
  
#line 4133 
  *(a + 29U) = (unsigned short)300U;
  
#line 4134 
  *(a + 30U) = (unsigned short)400U;
  
#line 4135 
  *(a + 31U) = (unsigned short)500U;
  
#line 4137 
  tmp_14 = (unsigned short)0U;
  
#line 4137 
  *(b + 8U) = tmp_14;
  
#line 4137 
  tmp_13 = tmp_14;
  
#line 4137 
  *(b + 7U) = tmp_13;
  
#line 4137 
  tmp_12 = tmp_13;
  
#line 4137 
  *(b + 6U) = tmp_12;
  
#line 4137 
  tmp_11 = tmp_12;
  
#line 4137 
  *(b + 5U) = tmp_11;
  
#line 4137 
  tmp_10 = tmp_11;
  
#line 4137 
  *(b + 4U) = tmp_10;
  
#line 4137 
  tmp_9 = tmp_10;
  
#line 4137 
  *(b + 3U) = tmp_9;
  
#line 4137 
  tmp_8 = tmp_9;
  
#line 4137 
  *(b + 2U) = tmp_8;
  
#line 4137 
  tmp_7 = tmp_8;
  
#line 4137 
  *(b + 1U) = tmp_7;
  
#line 4137 
  *b = tmp_7;
  
#line 4138 
  tmp_15 = (unsigned short)1U;
  
#line 4138 
  *(b + 10U) = tmp_15;
  
#line 4138 
  *(b + 9U) = tmp_15;
  
#line 4139 
  tmp_16 = (unsigned short)2U;
  
#line 4139 
  *(b + 12U) = tmp_16;
  
#line 4139 
  *(b + 11U) = tmp_16;
  
#line 4140 
  tmp_19 = (unsigned short)3U;
  
#line 4140 
  *(b + 16U) = tmp_19;
  
#line 4140 
  tmp_18 = tmp_19;
  
#line 4140 
  *(b + 15U) = tmp_18;
  
#line 4140 
  tmp_17 = tmp_18;
  
#line 4140 
  *(b + 14U) = tmp_17;
  
#line 4140 
  *(b + 13U) = tmp_17;
  
#line 4141 
  tmp_23 = (unsigned short)4U;
  
#line 4141 
  *(b + 21U) = tmp_23;
  
#line 4141 
  tmp_22 = tmp_23;
  
#line 4141 
  *(b + 20U) = tmp_22;
  
#line 4141 
  tmp_21 = tmp_22;
  
#line 4141 
  *(b + 19U) = tmp_21;
  
#line 4141 
  tmp_20 = tmp_21;
  
#line 4141 
  *(b + 18U) = tmp_20;
  
#line 4141 
  *(b + 17U) = tmp_20;
  
#line 4142 
  tmp_28 = (unsigned short)5U;
  
#line 4142 
  *(b + 27U) = tmp_28;
  
#line 4142 
  tmp_27 = tmp_28;
  
#line 4142 
  *(b + 26U) = tmp_27;
  
#line 4142 
  tmp_26 = tmp_27;
  
#line 4142 
  *(b + 25U) = tmp_26;
  
#line 4142 
  tmp_25 = tmp_26;
  
#line 4142 
  *(b + 24U) = tmp_25;
  
#line 4142 
  tmp_24 = tmp_25;
  
#line 4142 
  *(b + 23U) = tmp_24;
  
#line 4142 
  *(b + 22U) = tmp_24;
  
#line 4143 
  tmp_29 = (unsigned short)6U;
  
#line 4143 
  *(b + 29U) = tmp_29;
  
#line 4143 
  *(b + 28U) = tmp_29;
  
#line 4144 
  tmp_30 = (unsigned short)7U;
  
#line 4144 
  *(b + 31U) = tmp_30;
  
#line 4144 
  *(b + 30U) = tmp_30;
  
#line 4145 
  return;
}


#line 4162  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_load_mtus(struct adapter *adap, unsigned short const *mtus, unsigned short const *alpha, unsigned short const *beta)
{
  unsigned int i;
  unsigned int w;
  
#line 4165 
  unsigned int const avg_pkts[32U] = {2U, 6U, 10U, 14U, 20U, 28U, 40U, 56U, 80U, 112U, 160U, 224U, 320U, 448U, 640U, 896U, 1281U, 1792U, 2560U, 3584U, 5120U, 7168U, 10240U, 14336U, 20480U, 28672U, 40960U, 57344U, 81920U, 114688U, 163840U, 229376U};
  
#line 4173 
  i = 0U;
  
#line 4173 
  goto ldv_49789;
  ldv_49788: 
#line 4174 
  ;
  {
    int tmp;
    
#line 4174 
    unsigned int mtu = (unsigned int)*(mtus + i);
    
#line 4175 
    tmp = fls((int)mtu);
    
#line 4175 
    unsigned int log2 = (unsigned int)tmp;
    
#line 4177 
    if (((unsigned int)((1 << log2) >> 2) & mtu) == 0U) 
#line 4178 
                                                        log2 -= 1U; else ;
    
#line 4179 
    t4_write_reg(adap,32228U,((i << 24) | (log2 << 16)) | mtu);
    
#line 4182 
    w = 0U;
    
#line 4182 
    goto ldv_49786;
    ldv_49785: 
#line 4183 
    ;
    {
      unsigned int inc;
      unsigned int tmp_1;
      {
        unsigned int tmp_0;
        
#line 4185 
        unsigned int _max1 = ((mtu + 4294967256U) * (unsigned int)*(alpha + w)) / avg_pkts[w];
        
#line 4185 
        unsigned int _max2 = 2U;
        
#line 4185 
        if (_max1 > _max2) 
#line 4185 
                           tmp_0 = _max1; else 
#line 4185 
                                               tmp_0 = _max2;
        
#line 4185 
        tmp_1 = tmp_0;
      }
      
#line 4185 
      inc = tmp_1;
      
#line 4188 
      t4_write_reg(adap,32220U,(((i << 21) | (w << 16)) | (unsigned int)((int)*(beta + w) << 13)) | inc);
    }
    
#line 4182 
    w += 1U;
    ldv_49786: 
#line 4183 
    ;
    
#line 4182 
    if (w <= 31U) 
#line 4184 
                  goto ldv_49785; else 
#line 4187 
                                       goto ldv_49787;
    ldv_49787: 
#line 4188 
    ;
  }
  
#line 4173 
  i += 1U;
  ldv_49789: 
#line 4174 
  ;
  
#line 4173 
  if (i <= 15U) 
#line 4175 
                goto ldv_49788; else 
#line 4178 
                                     goto ldv_49790;
  ldv_49790: 
#line 4179 
  ;
  
#line 4180 
  return;
}


#line 4203  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static u64 chan_rate(struct adapter *adap, unsigned int bytes256)
{
  u64 __retres;
  
#line 4205 
  u64 v = (unsigned long long)(adap->params.vpd.cclk * bytes256);
  
#line 4207 
  __retres = v * 62ULL + v / 2ULL;
  
#line 4207 
  return __retres;
}


#line 4219  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_get_chan_txrate(struct adapter *adap, u64 *nic_rate, u64 *ofld_rate)
{
  u32 v;
  
#line 4223 
  v = t4_read_reg(adap,32464U);
  
#line 4224 
  *nic_rate = chan_rate(adap,v & 255U);
  
#line 4225 
  *(nic_rate + 1U) = chan_rate(adap,(v >> 8) & 255U);
  
#line 4226 
  if ((unsigned int)adap->params.arch.nchan == 4U) {
    
#line 4227 
    *(nic_rate + 2U) = chan_rate(adap,(v >> 16) & 255U);
    
#line 4228 
    *(nic_rate + 3U) = chan_rate(adap,v >> 24);
  }
  else ;
  
#line 4231 
  v = t4_read_reg(adap,32444U);
  
#line 4232 
  *ofld_rate = chan_rate(adap,v & 255U);
  
#line 4233 
  *(ofld_rate + 1U) = chan_rate(adap,(v >> 8) & 255U);
  
#line 4234 
  if ((unsigned int)adap->params.arch.nchan == 4U) {
    
#line 4235 
    *(ofld_rate + 2U) = chan_rate(adap,(v >> 16) & 255U);
    
#line 4236 
    *(ofld_rate + 3U) = chan_rate(adap,v >> 24);
  }
  else ;
  
#line 4238 
  return;
}


#line 4248  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_pmtx_get_stats(struct adapter *adap, u32 *cnt, u64 *cycles)
{
  int i;
  u32 data[2U];
  int tmp;
  
#line 4253 
  i = 0;
  
#line 4253 
  goto ldv_49810;
  ldv_49809: 
#line 4254 
  ;
  
#line 4254 
  t4_write_reg(adap,36840U,(unsigned int)(i + 1));
  
#line 4255 
  *(cnt + i) = t4_read_reg(adap,36844U);
  
#line 4256 
  tmp = is_t4(adap->params.chip);
  
#line 4256 
  if (tmp != 0) 
#line 4257 
                *(cycles + i) = t4_read_reg64(adap,36848U);
  else {
    
#line 4259 
    t4_read_indirect(adap,36848U,36852U,(u32 *)(& data),2U,65562U);
    
#line 4262 
    *(cycles + i) = ((unsigned long long)data[0] << 32) | (unsigned long long)data[1];
  }
  
#line 4253 
  i += 1;
  ldv_49810: 
#line 4254 
  ;
  
#line 4253 
  if (i <= 4) 
#line 4255 
              goto ldv_49809; else 
#line 4258 
                                   goto ldv_49811;
  ldv_49811: 
#line 4259 
  ;
  
#line 4260 
  return;
}


#line 4275  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_pmrx_get_stats(struct adapter *adap, u32 *cnt, u64 *cycles)
{
  int i;
  u32 data[2U];
  int tmp;
  
#line 4280 
  i = 0;
  
#line 4280 
  goto ldv_49820;
  ldv_49819: 
#line 4281 
  ;
  
#line 4281 
  t4_write_reg(adap,36808U,(unsigned int)(i + 1));
  
#line 4282 
  *(cnt + i) = t4_read_reg(adap,36812U);
  
#line 4283 
  tmp = is_t4(adap->params.chip);
  
#line 4283 
  if (tmp != 0) 
#line 4284 
                *(cycles + i) = t4_read_reg64(adap,36816U);
  else {
    
#line 4286 
    t4_read_indirect(adap,36816U,36820U,(u32 *)(& data),2U,65555U);
    
#line 4289 
    *(cycles + i) = ((unsigned long long)data[0] << 32) | (unsigned long long)data[1];
  }
  
#line 4280 
  i += 1;
  ldv_49820: 
#line 4281 
  ;
  
#line 4280 
  if (i <= 4) 
#line 4282 
              goto ldv_49819; else 
#line 4285 
                                   goto ldv_49821;
  ldv_49821: 
#line 4286 
  ;
  
#line 4287 
  return;
}


#line 4303  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
unsigned int t4_get_mps_bg_map(struct adapter *adap, int idx)
{
  unsigned int __retres;
  u32 tmp;
  
#line 4305 
  tmp = t4_read_reg(adap,36864U);
  
#line 4305 
  u32 n = tmp & 3U;
  
#line 4307 
  if (n == 0U) {
    int tmp_0;
    
#line 4308 
    if (idx == 0) 
#line 4308 
                  tmp_0 = 15; else 
#line 4308 
                                   tmp_0 = 0;
    
#line 4308 
    __retres = (unsigned int)tmp_0;
    
#line 4308 
    goto return_label;
  }
  else ;
  
#line 4309 
  if (n == 1U) {
    int tmp_1;
    
#line 4310 
    if (idx <= 1) 
#line 4310 
                  tmp_1 = 3 << idx * 2; else 
#line 4310 
                                             tmp_1 = 0;
    
#line 4310 
    __retres = (unsigned int)tmp_1;
    
#line 4310 
    goto return_label;
  }
  else ;
  
#line 4311 
  __retres = (unsigned int)(1 << idx);
  return_label: 
#line 4311 
                return __retres;
}


#line 4318  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
char const *t4_get_port_type_description(enum fw_port_type port_type)
{
  char const *__retres;
  
#line 4320 
  char const * const port_type_description[16U] = {"R XFI", "R XAUI", "T SGMII", "T XFI", "T XAUI", "KX4", "CX4", "KX", "KR", "R SFP+", "KR/KX", "KR/KX/KX4", "R QSFP_10G", "R QSA", "R QSFP", "R BP40_BA"};
  
#line 4339 
  if (port_type <= (unsigned int)FW_PORT_TYPE_BP40_BA) {
    
#line 4340 
    __retres = port_type_description[(unsigned int)port_type];
    
#line 4340 
    goto return_label;
  }
  else ;
  
#line 4341 
  __retres = "UNKNOWN";
  return_label: 
#line 4341 
                return __retres;
}


#line 4352  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_get_port_stats_offset(struct adapter *adap, int idx, struct port_stats *stats, struct port_stats *offset)
{
  u64 *s;
  u64 *o;
  int i;
  
#line 4359 
  t4_get_port_stats(adap,idx,stats);
  
#line 4360 
  i = 0;
  
#line 4360 
  s = (u64 *)stats;
  
#line 4360 
  o = (u64 *)offset;
  
#line 4360 
  goto ldv_49844;
  ldv_49843: 
#line 4361 
  ;
  
#line 4363 
  *s -= *o;
  
#line 4362 
  i += 1;
  
#line 4362 
  s += 1;
  
#line 4362 
  o += 1;
  ldv_49844: 
#line 4363 
  ;
  
#line 4360 
  if ((unsigned int)i <= 57U) 
#line 4363 
                              goto ldv_49843; else 
#line 4366 
                                                   goto ldv_49845;
  ldv_49845: 
#line 4367 
  ;
  
#line 4368 
  return;
}


#line 4374  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_get_port_stats(struct adapter *adap, int idx, struct port_stats *p)
{
  int tmp_1;
  int tmp_0;
  int tmp_3;
  int tmp_2;
  int tmp_5;
  int tmp_4;
  int tmp_7;
  int tmp_6;
  int tmp_9;
  int tmp_8;
  int tmp_11;
  int tmp_10;
  int tmp_13;
  int tmp_12;
  int tmp_15;
  int tmp_14;
  int tmp_17;
  int tmp_16;
  int tmp_19;
  int tmp_18;
  int tmp_21;
  int tmp_20;
  int tmp_23;
  int tmp_22;
  int tmp_25;
  int tmp_24;
  int tmp_27;
  int tmp_26;
  int tmp_29;
  int tmp_28;
  int tmp_31;
  int tmp_30;
  int tmp_33;
  int tmp_32;
  int tmp_35;
  int tmp_34;
  int tmp_37;
  int tmp_36;
  int tmp_39;
  int tmp_38;
  int tmp_41;
  int tmp_40;
  int tmp_43;
  int tmp_42;
  int tmp_45;
  int tmp_44;
  int tmp_47;
  int tmp_46;
  int tmp_49;
  int tmp_48;
  int tmp_51;
  int tmp_50;
  int tmp_53;
  int tmp_52;
  int tmp_55;
  int tmp_54;
  int tmp_57;
  int tmp_56;
  int tmp_59;
  int tmp_58;
  int tmp_61;
  int tmp_60;
  int tmp_63;
  int tmp_62;
  int tmp_65;
  int tmp_64;
  int tmp_67;
  int tmp_66;
  int tmp_69;
  int tmp_68;
  int tmp_71;
  int tmp_70;
  int tmp_73;
  int tmp_72;
  int tmp_75;
  int tmp_74;
  int tmp_77;
  int tmp_76;
  int tmp_79;
  int tmp_78;
  int tmp_81;
  int tmp_80;
  int tmp_83;
  int tmp_82;
  int tmp_85;
  int tmp_84;
  int tmp_87;
  int tmp_86;
  int tmp_89;
  int tmp_88;
  int tmp_91;
  int tmp_90;
  int tmp_93;
  int tmp_92;
  int tmp_95;
  int tmp_94;
  int tmp_97;
  int tmp_96;
  int tmp_99;
  int tmp_98;
  
#line 4376 
  u32 bgmap = t4_get_mps_bg_map(adap,idx);
  
#line 4384 
  tmp_0 = is_t4(adap->params.chip);
  
#line 4384 
  if (tmp_0 != 0) 
#line 4384 
                  tmp_1 = (idx + 16) * 8192 + 1024; else 
#line 4384 
                                                         tmp_1 = (idx + 12) * 16384 + 1024;
  
#line 4384 
  ;
  
#line 4384 
  p->tx_octets = t4_read_reg64(adap,(unsigned int)tmp_1);
  
#line 4385 
  tmp_2 = is_t4(adap->params.chip);
  
#line 4385 
  if (tmp_2 != 0) 
#line 4385 
                  tmp_3 = (idx + 16) * 8192 + 1032; else 
#line 4385 
                                                         tmp_3 = (idx + 12) * 16384 + 1032;
  
#line 4385 
  ;
  
#line 4385 
  p->tx_frames = t4_read_reg64(adap,(unsigned int)tmp_3);
  
#line 4386 
  tmp_4 = is_t4(adap->params.chip);
  
#line 4386 
  if (tmp_4 != 0) 
#line 4386 
                  tmp_5 = (idx + 16) * 8192 + 1040; else 
#line 4386 
                                                         tmp_5 = (idx + 12) * 16384 + 1040;
  
#line 4386 
  ;
  
#line 4386 
  p->tx_bcast_frames = t4_read_reg64(adap,(unsigned int)tmp_5);
  
#line 4387 
  tmp_6 = is_t4(adap->params.chip);
  
#line 4387 
  if (tmp_6 != 0) 
#line 4387 
                  tmp_7 = (idx + 16) * 8192 + 1048; else 
#line 4387 
                                                         tmp_7 = (idx + 12) * 16384 + 1048;
  
#line 4387 
  ;
  
#line 4387 
  p->tx_mcast_frames = t4_read_reg64(adap,(unsigned int)tmp_7);
  
#line 4388 
  tmp_8 = is_t4(adap->params.chip);
  
#line 4388 
  if (tmp_8 != 0) 
#line 4388 
                  tmp_9 = (idx + 16) * 8192 + 1056; else 
#line 4388 
                                                         tmp_9 = (idx + 12) * 16384 + 1056;
  
#line 4388 
  ;
  
#line 4388 
  p->tx_ucast_frames = t4_read_reg64(adap,(unsigned int)tmp_9);
  
#line 4389 
  tmp_10 = is_t4(adap->params.chip);
  
#line 4389 
  if (tmp_10 != 0) 
#line 4389 
                   tmp_11 = (idx + 16) * 8192 + 1064; else 
#line 4389 
                                                           tmp_11 = (idx + 12) * 16384 + 1064;
  
#line 4389 
  ;
  
#line 4389 
  p->tx_error_frames = t4_read_reg64(adap,(unsigned int)tmp_11);
  
#line 4390 
  tmp_12 = is_t4(adap->params.chip);
  
#line 4390 
  if (tmp_12 != 0) 
#line 4390 
                   tmp_13 = (idx + 16) * 8192 + 1072; else 
#line 4390 
                                                           tmp_13 = (idx + 12) * 16384 + 1072;
  
#line 4390 
  ;
  
#line 4390 
  p->tx_frames_64 = t4_read_reg64(adap,(unsigned int)tmp_13);
  
#line 4391 
  tmp_14 = is_t4(adap->params.chip);
  
#line 4391 
  if (tmp_14 != 0) 
#line 4391 
                   tmp_15 = (idx + 16) * 8192 + 1080; else 
#line 4391 
                                                           tmp_15 = (idx + 12) * 16384 + 1080;
  
#line 4391 
  ;
  
#line 4391 
  p->tx_frames_65_127 = t4_read_reg64(adap,(unsigned int)tmp_15);
  
#line 4392 
  tmp_16 = is_t4(adap->params.chip);
  
#line 4392 
  if (tmp_16 != 0) 
#line 4392 
                   tmp_17 = (idx + 16) * 8192 + 1088; else 
#line 4392 
                                                           tmp_17 = (idx + 12) * 16384 + 1088;
  
#line 4392 
  ;
  
#line 4392 
  p->tx_frames_128_255 = t4_read_reg64(adap,(unsigned int)tmp_17);
  
#line 4393 
  tmp_18 = is_t4(adap->params.chip);
  
#line 4393 
  if (tmp_18 != 0) 
#line 4393 
                   tmp_19 = (idx + 16) * 8192 + 1096; else 
#line 4393 
                                                           tmp_19 = (idx + 12) * 16384 + 1096;
  
#line 4393 
  ;
  
#line 4393 
  p->tx_frames_256_511 = t4_read_reg64(adap,(unsigned int)tmp_19);
  
#line 4394 
  tmp_20 = is_t4(adap->params.chip);
  
#line 4394 
  if (tmp_20 != 0) 
#line 4394 
                   tmp_21 = (idx + 16) * 8192 + 1104; else 
#line 4394 
                                                           tmp_21 = (idx + 12) * 16384 + 1104;
  
#line 4394 
  ;
  
#line 4394 
  p->tx_frames_512_1023 = t4_read_reg64(adap,(unsigned int)tmp_21);
  
#line 4395 
  tmp_22 = is_t4(adap->params.chip);
  
#line 4395 
  if (tmp_22 != 0) 
#line 4395 
                   tmp_23 = (idx + 16) * 8192 + 1112; else 
#line 4395 
                                                           tmp_23 = (idx + 12) * 16384 + 1112;
  
#line 4395 
  ;
  
#line 4395 
  p->tx_frames_1024_1518 = t4_read_reg64(adap,(unsigned int)tmp_23);
  
#line 4396 
  tmp_24 = is_t4(adap->params.chip);
  
#line 4396 
  if (tmp_24 != 0) 
#line 4396 
                   tmp_25 = (idx + 16) * 8192 + 1120; else 
#line 4396 
                                                           tmp_25 = (idx + 12) * 16384 + 1120;
  
#line 4396 
  ;
  
#line 4396 
  p->tx_frames_1519_max = t4_read_reg64(adap,(unsigned int)tmp_25);
  
#line 4397 
  tmp_26 = is_t4(adap->params.chip);
  
#line 4397 
  if (tmp_26 != 0) 
#line 4397 
                   tmp_27 = (idx + 16) * 8192 + 1128; else 
#line 4397 
                                                           tmp_27 = (idx + 12) * 16384 + 1128;
  
#line 4397 
  ;
  
#line 4397 
  p->tx_drop = t4_read_reg64(adap,(unsigned int)tmp_27);
  
#line 4398 
  tmp_28 = is_t4(adap->params.chip);
  
#line 4398 
  if (tmp_28 != 0) 
#line 4398 
                   tmp_29 = (idx + 16) * 8192 + 1136; else 
#line 4398 
                                                           tmp_29 = (idx + 12) * 16384 + 1136;
  
#line 4398 
  ;
  
#line 4398 
  p->tx_pause = t4_read_reg64(adap,(unsigned int)tmp_29);
  
#line 4399 
  tmp_30 = is_t4(adap->params.chip);
  
#line 4399 
  if (tmp_30 != 0) 
#line 4399 
                   tmp_31 = (idx + 16) * 8192 + 1144; else 
#line 4399 
                                                           tmp_31 = (idx + 12) * 16384 + 1144;
  
#line 4399 
  ;
  
#line 4399 
  p->tx_ppp0 = t4_read_reg64(adap,(unsigned int)tmp_31);
  
#line 4400 
  tmp_32 = is_t4(adap->params.chip);
  
#line 4400 
  if (tmp_32 != 0) 
#line 4400 
                   tmp_33 = (idx + 16) * 8192 + 1152; else 
#line 4400 
                                                           tmp_33 = (idx + 12) * 16384 + 1152;
  
#line 4400 
  ;
  
#line 4400 
  p->tx_ppp1 = t4_read_reg64(adap,(unsigned int)tmp_33);
  
#line 4401 
  tmp_34 = is_t4(adap->params.chip);
  
#line 4401 
  if (tmp_34 != 0) 
#line 4401 
                   tmp_35 = (idx + 16) * 8192 + 1160; else 
#line 4401 
                                                           tmp_35 = (idx + 12) * 16384 + 1160;
  
#line 4401 
  ;
  
#line 4401 
  p->tx_ppp2 = t4_read_reg64(adap,(unsigned int)tmp_35);
  
#line 4402 
  tmp_36 = is_t4(adap->params.chip);
  
#line 4402 
  if (tmp_36 != 0) 
#line 4402 
                   tmp_37 = (idx + 16) * 8192 + 1168; else 
#line 4402 
                                                           tmp_37 = (idx + 12) * 16384 + 1168;
  
#line 4402 
  ;
  
#line 4402 
  p->tx_ppp3 = t4_read_reg64(adap,(unsigned int)tmp_37);
  
#line 4403 
  tmp_38 = is_t4(adap->params.chip);
  
#line 4403 
  if (tmp_38 != 0) 
#line 4403 
                   tmp_39 = (idx + 16) * 8192 + 1176; else 
#line 4403 
                                                           tmp_39 = (idx + 12) * 16384 + 1176;
  
#line 4403 
  ;
  
#line 4403 
  p->tx_ppp4 = t4_read_reg64(adap,(unsigned int)tmp_39);
  
#line 4404 
  tmp_40 = is_t4(adap->params.chip);
  
#line 4404 
  if (tmp_40 != 0) 
#line 4404 
                   tmp_41 = (idx + 16) * 8192 + 1184; else 
#line 4404 
                                                           tmp_41 = (idx + 12) * 16384 + 1184;
  
#line 4404 
  ;
  
#line 4404 
  p->tx_ppp5 = t4_read_reg64(adap,(unsigned int)tmp_41);
  
#line 4405 
  tmp_42 = is_t4(adap->params.chip);
  
#line 4405 
  if (tmp_42 != 0) 
#line 4405 
                   tmp_43 = (idx + 16) * 8192 + 1192; else 
#line 4405 
                                                           tmp_43 = (idx + 12) * 16384 + 1192;
  
#line 4405 
  ;
  
#line 4405 
  p->tx_ppp6 = t4_read_reg64(adap,(unsigned int)tmp_43);
  
#line 4406 
  tmp_44 = is_t4(adap->params.chip);
  
#line 4406 
  if (tmp_44 != 0) 
#line 4406 
                   tmp_45 = (idx + 16) * 8192 + 1200; else 
#line 4406 
                                                           tmp_45 = (idx + 12) * 16384 + 1200;
  
#line 4406 
  ;
  
#line 4406 
  p->tx_ppp7 = t4_read_reg64(adap,(unsigned int)tmp_45);
  
#line 4408 
  tmp_46 = is_t4(adap->params.chip);
  
#line 4408 
  if (tmp_46 != 0) 
#line 4408 
                   tmp_47 = (idx + 16) * 8192 + 1344; else 
#line 4408 
                                                           tmp_47 = (idx + 12) * 16384 + 1344;
  
#line 4408 
  ;
  
#line 4408 
  p->rx_octets = t4_read_reg64(adap,(unsigned int)tmp_47);
  
#line 4409 
  tmp_48 = is_t4(adap->params.chip);
  
#line 4409 
  if (tmp_48 != 0) 
#line 4409 
                   tmp_49 = (idx + 16) * 8192 + 1352; else 
#line 4409 
                                                           tmp_49 = (idx + 12) * 16384 + 1352;
  
#line 4409 
  ;
  
#line 4409 
  p->rx_frames = t4_read_reg64(adap,(unsigned int)tmp_49);
  
#line 4410 
  tmp_50 = is_t4(adap->params.chip);
  
#line 4410 
  if (tmp_50 != 0) 
#line 4410 
                   tmp_51 = (idx + 16) * 8192 + 1360; else 
#line 4410 
                                                           tmp_51 = (idx + 12) * 16384 + 1360;
  
#line 4410 
  ;
  
#line 4410 
  p->rx_bcast_frames = t4_read_reg64(adap,(unsigned int)tmp_51);
  
#line 4411 
  tmp_52 = is_t4(adap->params.chip);
  
#line 4411 
  if (tmp_52 != 0) 
#line 4411 
                   tmp_53 = (idx + 16) * 8192 + 1368; else 
#line 4411 
                                                           tmp_53 = (idx + 12) * 16384 + 1368;
  
#line 4411 
  ;
  
#line 4411 
  p->rx_mcast_frames = t4_read_reg64(adap,(unsigned int)tmp_53);
  
#line 4412 
  tmp_54 = is_t4(adap->params.chip);
  
#line 4412 
  if (tmp_54 != 0) 
#line 4412 
                   tmp_55 = (idx + 16) * 8192 + 1376; else 
#line 4412 
                                                           tmp_55 = (idx + 12) * 16384 + 1376;
  
#line 4412 
  ;
  
#line 4412 
  p->rx_ucast_frames = t4_read_reg64(adap,(unsigned int)tmp_55);
  
#line 4413 
  tmp_56 = is_t4(adap->params.chip);
  
#line 4413 
  if (tmp_56 != 0) 
#line 4413 
                   tmp_57 = (idx + 16) * 8192 + 1384; else 
#line 4413 
                                                           tmp_57 = (idx + 12) * 16384 + 1384;
  
#line 4413 
  ;
  
#line 4413 
  p->rx_too_long = t4_read_reg64(adap,(unsigned int)tmp_57);
  
#line 4414 
  tmp_58 = is_t4(adap->params.chip);
  
#line 4414 
  if (tmp_58 != 0) 
#line 4414 
                   tmp_59 = (idx + 16) * 8192 + 1392; else 
#line 4414 
                                                           tmp_59 = (idx + 12) * 16384 + 1392;
  
#line 4414 
  ;
  
#line 4414 
  p->rx_jabber = t4_read_reg64(adap,(unsigned int)tmp_59);
  
#line 4415 
  tmp_60 = is_t4(adap->params.chip);
  
#line 4415 
  if (tmp_60 != 0) 
#line 4415 
                   tmp_61 = (idx + 16) * 8192 + 1400; else 
#line 4415 
                                                           tmp_61 = (idx + 12) * 16384 + 1400;
  
#line 4415 
  ;
  
#line 4415 
  p->rx_fcs_err = t4_read_reg64(adap,(unsigned int)tmp_61);
  
#line 4416 
  tmp_62 = is_t4(adap->params.chip);
  
#line 4416 
  if (tmp_62 != 0) 
#line 4416 
                   tmp_63 = (idx + 16) * 8192 + 1408; else 
#line 4416 
                                                           tmp_63 = (idx + 12) * 16384 + 1408;
  
#line 4416 
  ;
  
#line 4416 
  p->rx_len_err = t4_read_reg64(adap,(unsigned int)tmp_63);
  
#line 4417 
  tmp_64 = is_t4(adap->params.chip);
  
#line 4417 
  if (tmp_64 != 0) 
#line 4417 
                   tmp_65 = (idx + 16) * 8192 + 1416; else 
#line 4417 
                                                           tmp_65 = (idx + 12) * 16384 + 1416;
  
#line 4417 
  ;
  
#line 4417 
  p->rx_symbol_err = t4_read_reg64(adap,(unsigned int)tmp_65);
  
#line 4418 
  tmp_66 = is_t4(adap->params.chip);
  
#line 4418 
  if (tmp_66 != 0) 
#line 4418 
                   tmp_67 = (idx + 16) * 8192 + 1552; else 
#line 4418 
                                                           tmp_67 = (idx + 12) * 16384 + 1552;
  
#line 4418 
  ;
  
#line 4418 
  p->rx_runt = t4_read_reg64(adap,(unsigned int)tmp_67);
  
#line 4419 
  tmp_68 = is_t4(adap->params.chip);
  
#line 4419 
  if (tmp_68 != 0) 
#line 4419 
                   tmp_69 = (idx + 16) * 8192 + 1424; else 
#line 4419 
                                                           tmp_69 = (idx + 12) * 16384 + 1424;
  
#line 4419 
  ;
  
#line 4419 
  p->rx_frames_64 = t4_read_reg64(adap,(unsigned int)tmp_69);
  
#line 4420 
  tmp_70 = is_t4(adap->params.chip);
  
#line 4420 
  if (tmp_70 != 0) 
#line 4420 
                   tmp_71 = (idx + 16) * 8192 + 1432; else 
#line 4420 
                                                           tmp_71 = (idx + 12) * 16384 + 1432;
  
#line 4420 
  ;
  
#line 4420 
  p->rx_frames_65_127 = t4_read_reg64(adap,(unsigned int)tmp_71);
  
#line 4421 
  tmp_72 = is_t4(adap->params.chip);
  
#line 4421 
  if (tmp_72 != 0) 
#line 4421 
                   tmp_73 = (idx + 16) * 8192 + 1440; else 
#line 4421 
                                                           tmp_73 = (idx + 12) * 16384 + 1440;
  
#line 4421 
  ;
  
#line 4421 
  p->rx_frames_128_255 = t4_read_reg64(adap,(unsigned int)tmp_73);
  
#line 4422 
  tmp_74 = is_t4(adap->params.chip);
  
#line 4422 
  if (tmp_74 != 0) 
#line 4422 
                   tmp_75 = (idx + 16) * 8192 + 1448; else 
#line 4422 
                                                           tmp_75 = (idx + 12) * 16384 + 1448;
  
#line 4422 
  ;
  
#line 4422 
  p->rx_frames_256_511 = t4_read_reg64(adap,(unsigned int)tmp_75);
  
#line 4423 
  tmp_76 = is_t4(adap->params.chip);
  
#line 4423 
  if (tmp_76 != 0) 
#line 4423 
                   tmp_77 = (idx + 16) * 8192 + 1456; else 
#line 4423 
                                                           tmp_77 = (idx + 12) * 16384 + 1456;
  
#line 4423 
  ;
  
#line 4423 
  p->rx_frames_512_1023 = t4_read_reg64(adap,(unsigned int)tmp_77);
  
#line 4424 
  tmp_78 = is_t4(adap->params.chip);
  
#line 4424 
  if (tmp_78 != 0) 
#line 4424 
                   tmp_79 = (idx + 16) * 8192 + 1464; else 
#line 4424 
                                                           tmp_79 = (idx + 12) * 16384 + 1464;
  
#line 4424 
  ;
  
#line 4424 
  p->rx_frames_1024_1518 = t4_read_reg64(adap,(unsigned int)tmp_79);
  
#line 4425 
  tmp_80 = is_t4(adap->params.chip);
  
#line 4425 
  if (tmp_80 != 0) 
#line 4425 
                   tmp_81 = (idx + 16) * 8192 + 1472; else 
#line 4425 
                                                           tmp_81 = (idx + 12) * 16384 + 1472;
  
#line 4425 
  ;
  
#line 4425 
  p->rx_frames_1519_max = t4_read_reg64(adap,(unsigned int)tmp_81);
  
#line 4426 
  tmp_82 = is_t4(adap->params.chip);
  
#line 4426 
  if (tmp_82 != 0) 
#line 4426 
                   tmp_83 = (idx + 16) * 8192 + 1480; else 
#line 4426 
                                                           tmp_83 = (idx + 12) * 16384 + 1480;
  
#line 4426 
  ;
  
#line 4426 
  p->rx_pause = t4_read_reg64(adap,(unsigned int)tmp_83);
  
#line 4427 
  tmp_84 = is_t4(adap->params.chip);
  
#line 4427 
  if (tmp_84 != 0) 
#line 4427 
                   tmp_85 = (idx + 16) * 8192 + 1488; else 
#line 4427 
                                                           tmp_85 = (idx + 12) * 16384 + 1488;
  
#line 4427 
  ;
  
#line 4427 
  p->rx_ppp0 = t4_read_reg64(adap,(unsigned int)tmp_85);
  
#line 4428 
  tmp_86 = is_t4(adap->params.chip);
  
#line 4428 
  if (tmp_86 != 0) 
#line 4428 
                   tmp_87 = (idx + 16) * 8192 + 1496; else 
#line 4428 
                                                           tmp_87 = (idx + 12) * 16384 + 1496;
  
#line 4428 
  ;
  
#line 4428 
  p->rx_ppp1 = t4_read_reg64(adap,(unsigned int)tmp_87);
  
#line 4429 
  tmp_88 = is_t4(adap->params.chip);
  
#line 4429 
  if (tmp_88 != 0) 
#line 4429 
                   tmp_89 = (idx + 16) * 8192 + 1504; else 
#line 4429 
                                                           tmp_89 = (idx + 12) * 16384 + 1504;
  
#line 4429 
  ;
  
#line 4429 
  p->rx_ppp2 = t4_read_reg64(adap,(unsigned int)tmp_89);
  
#line 4430 
  tmp_90 = is_t4(adap->params.chip);
  
#line 4430 
  if (tmp_90 != 0) 
#line 4430 
                   tmp_91 = (idx + 16) * 8192 + 1512; else 
#line 4430 
                                                           tmp_91 = (idx + 12) * 16384 + 1512;
  
#line 4430 
  ;
  
#line 4430 
  p->rx_ppp3 = t4_read_reg64(adap,(unsigned int)tmp_91);
  
#line 4431 
  tmp_92 = is_t4(adap->params.chip);
  
#line 4431 
  if (tmp_92 != 0) 
#line 4431 
                   tmp_93 = (idx + 16) * 8192 + 1520; else 
#line 4431 
                                                           tmp_93 = (idx + 12) * 16384 + 1520;
  
#line 4431 
  ;
  
#line 4431 
  p->rx_ppp4 = t4_read_reg64(adap,(unsigned int)tmp_93);
  
#line 4432 
  tmp_94 = is_t4(adap->params.chip);
  
#line 4432 
  if (tmp_94 != 0) 
#line 4432 
                   tmp_95 = (idx + 16) * 8192 + 1528; else 
#line 4432 
                                                           tmp_95 = (idx + 12) * 16384 + 1528;
  
#line 4432 
  ;
  
#line 4432 
  p->rx_ppp5 = t4_read_reg64(adap,(unsigned int)tmp_95);
  
#line 4433 
  tmp_96 = is_t4(adap->params.chip);
  
#line 4433 
  if (tmp_96 != 0) 
#line 4433 
                   tmp_97 = (idx + 16) * 8192 + 1536; else 
#line 4433 
                                                           tmp_97 = (idx + 12) * 16384 + 1536;
  
#line 4433 
  ;
  
#line 4433 
  p->rx_ppp6 = t4_read_reg64(adap,(unsigned int)tmp_97);
  
#line 4434 
  tmp_98 = is_t4(adap->params.chip);
  
#line 4434 
  if (tmp_98 != 0) 
#line 4434 
                   tmp_99 = (idx + 16) * 8192 + 1544; else 
#line 4434 
                                                           tmp_99 = (idx + 12) * 16384 + 1544;
  
#line 4434 
  ;
  
#line 4434 
  p->rx_ppp7 = t4_read_reg64(adap,(unsigned int)tmp_99);
  
#line 4436 
  if ((bgmap & 1U) != 0U) 
#line 4436 
                          p->rx_ovflow0 = t4_read_reg64(adap,38464U); else 
                                                                    
#line 4436 
                                                                    p->rx_ovflow0 = 0ULL;
  
#line 4437 
  if ((bgmap & 2U) != 0U) 
#line 4437 
                          p->rx_ovflow1 = t4_read_reg64(adap,38472U); else 
                                                                    
#line 4437 
                                                                    p->rx_ovflow1 = 0ULL;
  
#line 4438 
  if ((bgmap & 4U) != 0U) 
#line 4438 
                          p->rx_ovflow2 = t4_read_reg64(adap,38480U); else 
                                                                    
#line 4438 
                                                                    p->rx_ovflow2 = 0ULL;
  
#line 4439 
  if ((bgmap & 8U) != 0U) 
#line 4439 
                          p->rx_ovflow3 = t4_read_reg64(adap,38488U); else 
                                                                    
#line 4439 
                                                                    p->rx_ovflow3 = 0ULL;
  
#line 4440 
  if ((bgmap & 1U) != 0U) 
#line 4440 
                          p->rx_trunc0 = t4_read_reg64(adap,38528U); else 
                                                                    
#line 4440 
                                                                    p->rx_trunc0 = 0ULL;
  
#line 4441 
  if ((bgmap & 2U) != 0U) 
#line 4441 
                          p->rx_trunc1 = t4_read_reg64(adap,38536U); else 
                                                                    
#line 4441 
                                                                    p->rx_trunc1 = 0ULL;
  
#line 4442 
  if ((bgmap & 4U) != 0U) 
#line 4442 
                          p->rx_trunc2 = t4_read_reg64(adap,38544U); else 
                                                                    
#line 4442 
                                                                    p->rx_trunc2 = 0ULL;
  
#line 4443 
  if ((bgmap & 8U) != 0U) 
#line 4443 
                          p->rx_trunc3 = t4_read_reg64(adap,38552U); else 
                                                                    
#line 4443 
                                                                    p->rx_trunc3 = 0ULL;
  
#line 4444 
  return;
}


#line 4457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_get_lb_stats(struct adapter *adap, int idx, struct lb_port_stats *p)
{
  int tmp_1;
  int tmp_0;
  int tmp_3;
  int tmp_2;
  int tmp_5;
  int tmp_4;
  int tmp_7;
  int tmp_6;
  int tmp_9;
  int tmp_8;
  int tmp_11;
  int tmp_10;
  int tmp_13;
  int tmp_12;
  int tmp_15;
  int tmp_14;
  int tmp_17;
  int tmp_16;
  int tmp_19;
  int tmp_18;
  int tmp_21;
  int tmp_20;
  int tmp_23;
  int tmp_22;
  int tmp_25;
  int tmp_24;
  int tmp_27;
  int tmp_26;
  
#line 4459 
  u32 bgmap = t4_get_mps_bg_map(adap,idx);
  
#line 4468 
  tmp_0 = is_t4(adap->params.chip);
  
#line 4468 
  if (tmp_0 != 0) 
#line 4468 
                  tmp_1 = (idx + 16) * 8192 + 1216; else 
#line 4468 
                                                         tmp_1 = (idx + 12) * 16384 + 1216;
  
#line 4468 
  ;
  
#line 4468 
  p->octets = t4_read_reg64(adap,(unsigned int)tmp_1);
  
#line 4469 
  tmp_2 = is_t4(adap->params.chip);
  
#line 4469 
  if (tmp_2 != 0) 
#line 4469 
                  tmp_3 = (idx + 16) * 8192 + 1224; else 
#line 4469 
                                                         tmp_3 = (idx + 12) * 16384 + 1224;
  
#line 4469 
  ;
  
#line 4469 
  p->frames = t4_read_reg64(adap,(unsigned int)tmp_3);
  
#line 4470 
  tmp_4 = is_t4(adap->params.chip);
  
#line 4470 
  if (tmp_4 != 0) 
#line 4470 
                  tmp_5 = (idx + 16) * 8192 + 1232; else 
#line 4470 
                                                         tmp_5 = (idx + 12) * 16384 + 1232;
  
#line 4470 
  ;
  
#line 4470 
  p->bcast_frames = t4_read_reg64(adap,(unsigned int)tmp_5);
  
#line 4471 
  tmp_6 = is_t4(adap->params.chip);
  
#line 4471 
  if (tmp_6 != 0) 
#line 4471 
                  tmp_7 = (idx + 16) * 8192 + 1240; else 
#line 4471 
                                                         tmp_7 = (idx + 12) * 16384 + 1240;
  
#line 4471 
  ;
  
#line 4471 
  p->mcast_frames = t4_read_reg64(adap,(unsigned int)tmp_7);
  
#line 4472 
  tmp_8 = is_t4(adap->params.chip);
  
#line 4472 
  if (tmp_8 != 0) 
#line 4472 
                  tmp_9 = (idx + 16) * 8192 + 1248; else 
#line 4472 
                                                         tmp_9 = (idx + 12) * 16384 + 1248;
  
#line 4472 
  ;
  
#line 4472 
  p->ucast_frames = t4_read_reg64(adap,(unsigned int)tmp_9);
  
#line 4473 
  tmp_10 = is_t4(adap->params.chip);
  
#line 4473 
  if (tmp_10 != 0) 
#line 4473 
                   tmp_11 = (idx + 16) * 8192 + 1256; else 
#line 4473 
                                                           tmp_11 = (idx + 12) * 16384 + 1256;
  
#line 4473 
  ;
  
#line 4473 
  p->error_frames = t4_read_reg64(adap,(unsigned int)tmp_11);
  
#line 4475 
  tmp_12 = is_t4(adap->params.chip);
  
#line 4475 
  if (tmp_12 != 0) 
#line 4475 
                   tmp_13 = (idx + 16) * 8192 + 1264; else 
#line 4475 
                                                           tmp_13 = (idx + 12) * 16384 + 1264;
  
#line 4475 
  ;
  
#line 4475 
  p->frames_64 = t4_read_reg64(adap,(unsigned int)tmp_13);
  
#line 4476 
  tmp_14 = is_t4(adap->params.chip);
  
#line 4476 
  if (tmp_14 != 0) 
#line 4476 
                   tmp_15 = (idx + 16) * 8192 + 1272; else 
#line 4476 
                                                           tmp_15 = (idx + 12) * 16384 + 1272;
  
#line 4476 
  ;
  
#line 4476 
  p->frames_65_127 = t4_read_reg64(adap,(unsigned int)tmp_15);
  
#line 4477 
  tmp_16 = is_t4(adap->params.chip);
  
#line 4477 
  if (tmp_16 != 0) 
#line 4477 
                   tmp_17 = (idx + 16) * 8192 + 1280; else 
#line 4477 
                                                           tmp_17 = (idx + 12) * 16384 + 1280;
  
#line 4477 
  ;
  
#line 4477 
  p->frames_128_255 = t4_read_reg64(adap,(unsigned int)tmp_17);
  
#line 4478 
  tmp_18 = is_t4(adap->params.chip);
  
#line 4478 
  if (tmp_18 != 0) 
#line 4478 
                   tmp_19 = (idx + 16) * 8192 + 1288; else 
#line 4478 
                                                           tmp_19 = (idx + 12) * 16384 + 1288;
  
#line 4478 
  ;
  
#line 4478 
  p->frames_256_511 = t4_read_reg64(adap,(unsigned int)tmp_19);
  
#line 4479 
  tmp_20 = is_t4(adap->params.chip);
  
#line 4479 
  if (tmp_20 != 0) 
#line 4479 
                   tmp_21 = (idx + 16) * 8192 + 1296; else 
#line 4479 
                                                           tmp_21 = (idx + 12) * 16384 + 1296;
  
#line 4479 
  ;
  
#line 4479 
  p->frames_512_1023 = t4_read_reg64(adap,(unsigned int)tmp_21);
  
#line 4480 
  tmp_22 = is_t4(adap->params.chip);
  
#line 4480 
  if (tmp_22 != 0) 
#line 4480 
                   tmp_23 = (idx + 16) * 8192 + 1304; else 
#line 4480 
                                                           tmp_23 = (idx + 12) * 16384 + 1304;
  
#line 4480 
  ;
  
#line 4480 
  p->frames_1024_1518 = t4_read_reg64(adap,(unsigned int)tmp_23);
  
#line 4481 
  tmp_24 = is_t4(adap->params.chip);
  
#line 4481 
  if (tmp_24 != 0) 
#line 4481 
                   tmp_25 = (idx + 16) * 8192 + 1312; else 
#line 4481 
                                                           tmp_25 = (idx + 12) * 16384 + 1312;
  
#line 4481 
  ;
  
#line 4481 
  p->frames_1519_max = t4_read_reg64(adap,(unsigned int)tmp_25);
  
#line 4482 
  tmp_26 = is_t4(adap->params.chip);
  
#line 4482 
  if (tmp_26 != 0) 
#line 4482 
                   tmp_27 = (idx + 16) * 8192 + 1320; else 
#line 4482 
                                                           tmp_27 = (idx + 12) * 16384 + 1320;
  
#line 4482 
  ;
  
#line 4482 
  p->drop = t4_read_reg64(adap,(unsigned int)tmp_27);
  
#line 4484 
  if ((bgmap & 1U) != 0U) 
#line 4484 
                          p->ovflow0 = t4_read_reg64(adap,38496U); else 
                                                                    
#line 4484 
                                                                    p->ovflow0 = 0ULL;
  
#line 4485 
  if ((bgmap & 2U) != 0U) 
#line 4485 
                          p->ovflow1 = t4_read_reg64(adap,38504U); else 
                                                                    
#line 4485 
                                                                    p->ovflow1 = 0ULL;
  
#line 4486 
  if ((bgmap & 4U) != 0U) 
#line 4486 
                          p->ovflow2 = t4_read_reg64(adap,38512U); else 
                                                                    
#line 4486 
                                                                    p->ovflow2 = 0ULL;
  
#line 4487 
  if ((bgmap & 8U) != 0U) 
#line 4487 
                          p->ovflow3 = t4_read_reg64(adap,38520U); else 
                                                                    
#line 4487 
                                                                    p->ovflow3 = 0ULL;
  
#line 4488 
  if ((bgmap & 1U) != 0U) 
#line 4488 
                          p->trunc0 = t4_read_reg64(adap,38560U); else 
                                                                    
#line 4488 
                                                                    p->trunc0 = 0ULL;
  
#line 4489 
  if ((bgmap & 2U) != 0U) 
#line 4489 
                          p->trunc1 = t4_read_reg64(adap,38568U); else 
                                                                    
#line 4489 
                                                                    p->trunc1 = 0ULL;
  
#line 4490 
  if ((bgmap & 4U) != 0U) 
#line 4490 
                          p->trunc2 = t4_read_reg64(adap,38576U); else 
                                                                    
#line 4490 
                                                                    p->trunc2 = 0ULL;
  
#line 4491 
  if ((bgmap & 8U) != 0U) 
#line 4491 
                          p->trunc3 = t4_read_reg64(adap,38584U); else 
                                                                    
#line 4491 
                                                                    p->trunc3 = 0ULL;
  
#line 4492 
  return;
}


#line 4505  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_mk_filtdelwr(unsigned int ftid, struct fw_filter_wr *wr, int qid)
{
  
#line 4507 
  memset((void *)wr,0,128UL);
  
#line 4508 
  wr->op_pkd = 2U;
  
#line 4509 
  wr->len16_pkd = 134217728U;
  
#line 4510 
  if (0 != 0) 
#line 4510 
              wr->tid_to_iq = (((((ftid << 12) | ((unsigned int)(qid >> 21) & 1024U)) << 24) | ((((ftid << 12) | ((unsigned int)(qid >> 21) & 1024U)) << 8) & 16711680U)) | ((((ftid << 12) | ((unsigned int)(qid >> 21) & 1024U)) >> 8) & 65280U)) | (((ftid << 12) | ((unsigned int)(qid >> 21) & 1024U)) >> 24); else 
                                                                    
#line 4510 
                                                                    wr->tid_to_iq = __fswab32((ftid << 12) | ((unsigned int)(qid >> 21) & 1024U));
  
#line 4512 
  wr->del_filter_to_l2tix = 128U;
  
#line 4513 
  if (qid >= 0) 
    
#line 4514 
    if (0 != 0) 
#line 4514 
                wr->rx_chan_rx_rpl_iq = (unsigned short)(((int)((unsigned short)qid) << 8) | ((int)((unsigned short)qid) >> 8)); else 
                                                                    
#line 4515 
                                                                    wr->rx_chan_rx_rpl_iq = __fswab16((unsigned short)((int)((unsigned short)qid)));
  else ;
  
#line 4516 
  return;
}


#line 4525  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_fwaddrspace_write(struct adapter *adap, unsigned int mbox, u32 addr, u32 val)
{
  u32 ldst_addrspace;
  struct fw_ldst_cmd c;
  int tmp_2;
  
#line 4531 
  memset((void *)(& c),0,64UL);
  
#line 4532 
  ldst_addrspace = 1U;
  
#line 4533 
  if (0 != 0) 
#line 4533 
              c.op_to_addrspace = ((((ldst_addrspace << 24) | ((ldst_addrspace << 8) & 16711680U)) | ((ldst_addrspace >> 8) & 24320U)) | (ldst_addrspace >> 24)) | 40961U; else 
                                                                    
#line 4533 
                                                                    c.op_to_addrspace = __fswab32(ldst_addrspace | 27262976U);
  
#line 4537 
  c.cycles_to_len16 = 67108864U;
  
#line 4538 
  if (0 != 0) 
#line 4538 
              c.u.addrval.addr = (((addr << 24) | ((addr << 8) & 16711680U)) | ((addr >> 8) & 65280U)) | (addr >> 24); else 
                                                                    
#line 4538 
                                                                    c.u.addrval.addr = __fswab32(addr);
  
#line 4539 
  if (0 != 0) 
#line 4539 
              c.u.addrval.val = (((val << 24) | ((val << 8) & 16711680U)) | ((val >> 8) & 65280U)) | (val >> 24); else 
                                                                    
#line 4539 
                                                                    c.u.addrval.val = __fswab32(val);
  
#line 4541 
  tmp_2 = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),64,(void *)0);
  
#line 4541 
  return tmp_2;
}


#line 4555  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_mdio_rd(struct adapter *adap, unsigned int mbox, unsigned int phy_addr, unsigned int mmd, unsigned int reg, u16 *valp)
{
  int ret;
  u32 ldst_addrspace;
  struct fw_ldst_cmd c;
  
#line 4562 
  memset((void *)(& c),0,64UL);
  
#line 4563 
  ldst_addrspace = 24U;
  
#line 4564 
  if (0 != 0) 
#line 4564 
              c.op_to_addrspace = ((((ldst_addrspace << 24) | ((ldst_addrspace << 8) & 16711680U)) | ((ldst_addrspace >> 8) & 16128U)) | (ldst_addrspace >> 24)) | 49153U; else 
                                                                    
#line 4564 
                                                                    c.op_to_addrspace = __fswab32(ldst_addrspace | 29360128U);
  
#line 4567 
  c.cycles_to_len16 = 67108864U;
  
#line 4568 
  if (0 != 0) 
#line 4568 
              c.u.mdio.paddr_mmd = (unsigned short)(((((int)((unsigned short)phy_addr) << 8U) | (int)((unsigned short)mmd)) << 8) | ((((int)((unsigned short)phy_addr) << 8U) | (int)((unsigned short)mmd)) >> 8)); else 
                                                                    
#line 4568 
                                                                    c.u.mdio.paddr_mmd = __fswab16((unsigned short)(((int)((unsigned short)phy_addr) << 8U) | (int)((unsigned short)mmd)));
  
#line 4570 
  if (0 != 0) 
#line 4570 
              c.u.mdio.raddr = (unsigned short)(((int)((unsigned short)reg) << 8) | ((int)((unsigned short)reg) >> 8)); else 
                                                                    
#line 4570 
                                                                    c.u.mdio.raddr = __fswab16((unsigned short)((int)((unsigned short)reg)));
  
#line 4572 
  ret = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),64,(void *)(& c));
  
#line 4573 
  if (ret == 0) 
    
#line 4574 
    if (0 != 0) 
#line 4574 
                *valp = (unsigned short)(((int)c.u.mdio.rval << 8) | ((int)c.u.mdio.rval >> 8)); else 
                                                                    
#line 4574 
                                                                    *valp = __fswab16((unsigned short)((int)c.u.mdio.rval));
  else ;
  
#line 4575 
  return ret;
}


#line 4589  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_mdio_wr(struct adapter *adap, unsigned int mbox, unsigned int phy_addr, unsigned int mmd, unsigned int reg, u16 val)
{
  u32 ldst_addrspace;
  struct fw_ldst_cmd c;
  int tmp_3;
  
#line 4595 
  memset((void *)(& c),0,64UL);
  
#line 4596 
  ldst_addrspace = 24U;
  
#line 4597 
  if (0 != 0) 
#line 4597 
              c.op_to_addrspace = ((((ldst_addrspace << 24) | ((ldst_addrspace << 8) & 16711680U)) | ((ldst_addrspace >> 8) & 24320U)) | (ldst_addrspace >> 24)) | 40961U; else 
                                                                    
#line 4597 
                                                                    c.op_to_addrspace = __fswab32(ldst_addrspace | 27262976U);
  
#line 4600 
  c.cycles_to_len16 = 67108864U;
  
#line 4601 
  if (0 != 0) 
#line 4601 
              c.u.mdio.paddr_mmd = (unsigned short)(((((int)((unsigned short)phy_addr) << 8U) | (int)((unsigned short)mmd)) << 8) | ((((int)((unsigned short)phy_addr) << 8U) | (int)((unsigned short)mmd)) >> 8)); else 
                                                                    
#line 4601 
                                                                    c.u.mdio.paddr_mmd = __fswab16((unsigned short)(((int)((unsigned short)phy_addr) << 8U) | (int)((unsigned short)mmd)));
  
#line 4603 
  if (0 != 0) 
#line 4603 
              c.u.mdio.raddr = (unsigned short)(((int)((unsigned short)reg) << 8) | ((int)((unsigned short)reg) >> 8)); else 
                                                                    
#line 4603 
                                                                    c.u.mdio.raddr = __fswab16((unsigned short)((int)((unsigned short)reg)));
  
#line 4604 
  if (0 != 0) 
#line 4604 
              c.u.mdio.rval = (unsigned short)(((int)val << 8) | ((int)val >> 8)); else 
                                                                    
#line 4604 
                                                                    c.u.mdio.rval = __fswab16((unsigned short)((int)val));
  
#line 4606 
  tmp_3 = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),64,(void *)0);
  
#line 4606 
  return tmp_3;
}


#line 4614  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_sge_decode_idma_state(struct adapter *adapter, int state)
{
  char const **sge_idma_decode;
  int sge_idma_decode_nstates;
  int i;
  int tmp;
  u32 tmp_0;
  
#line 4616 
  char const * const t4_decode[35U] = {"IDMA_IDLE", "IDMA_PUSH_MORE_CPL_FIFO", "IDMA_PUSH_CPL_MSG_HEADER_TO_FIFO", "Not used", "IDMA_PHYSADDR_SEND_PCIEHDR", "IDMA_PHYSADDR_SEND_PAYLOAD_FIRST", "IDMA_PHYSADDR_SEND_PAYLOAD", "IDMA_SEND_FIFO_TO_IMSG", "IDMA_FL_REQ_DATA_FL_PREP", "IDMA_FL_REQ_DATA_FL", "IDMA_FL_DROP", "IDMA_FL_H_REQ_HEADER_FL", "IDMA_FL_H_SEND_PCIEHDR", "IDMA_FL_H_PUSH_CPL_FIFO", "IDMA_FL_H_SEND_CPL", "IDMA_FL_H_SEND_IP_HDR_FIRST", "IDMA_FL_H_SEND_IP_HDR", "IDMA_FL_H_REQ_NEXT_HEADER_FL", "IDMA_FL_H_SEND_NEXT_PCIEHDR", "IDMA_FL_H_SEND_IP_HDR_PADDING", "IDMA_FL_D_SEND_PCIEHDR", "IDMA_FL_D_SEND_CPL_AND_IP_HDR", "IDMA_FL_D_REQ_NEXT_DATA_FL", "IDMA_FL_SEND_PCIEHDR", "IDMA_FL_PUSH_CPL_FIFO", "IDMA_FL_SEND_CPL", "IDMA_FL_SEND_PAYLOAD_FIRST", "IDMA_FL_SEND_PAYLOAD", "IDMA_FL_REQ_NEXT_DATA_FL", "IDMA_FL_SEND_NEXT_PCIEHDR", "IDMA_FL_SEND_PADDING", "IDMA_FL_SEND_COMPLETION_TO_IMSG", "IDMA_FL_SEND_FIFO_TO_IMSG", "IDMA_FL_REQ_DATAFL_DONE", "IDMA_FL_REQ_HEADERFL_DONE"};
  
#line 4653 
  char const * const t5_decode[33U] = {"IDMA_IDLE", "IDMA_ALMOST_IDLE", "IDMA_PUSH_MORE_CPL_FIFO", "IDMA_PUSH_CPL_MSG_HEADER_TO_FIFO", "IDMA_SGEFLRFLUSH_SEND_PCIEHDR", "IDMA_PHYSADDR_SEND_PCIEHDR", "IDMA_PHYSADDR_SEND_PAYLOAD_FIRST", "IDMA_PHYSADDR_SEND_PAYLOAD", "IDMA_SEND_FIFO_TO_IMSG", "IDMA_FL_REQ_DATA_FL", "IDMA_FL_DROP", "IDMA_FL_DROP_SEND_INC", "IDMA_FL_H_REQ_HEADER_FL", "IDMA_FL_H_SEND_PCIEHDR", "IDMA_FL_H_PUSH_CPL_FIFO", "IDMA_FL_H_SEND_CPL", "IDMA_FL_H_SEND_IP_HDR_FIRST", "IDMA_FL_H_SEND_IP_HDR", "IDMA_FL_H_REQ_NEXT_HEADER_FL", "IDMA_FL_H_SEND_NEXT_PCIEHDR", "IDMA_FL_H_SEND_IP_HDR_PADDING", "IDMA_FL_D_SEND_PCIEHDR", "IDMA_FL_D_SEND_CPL_AND_IP_HDR", "IDMA_FL_D_REQ_NEXT_DATA_FL", "IDMA_FL_SEND_PCIEHDR", "IDMA_FL_PUSH_CPL_FIFO", "IDMA_FL_SEND_CPL", "IDMA_FL_SEND_PAYLOAD_FIRST", "IDMA_FL_SEND_PAYLOAD", "IDMA_FL_REQ_NEXT_DATA_FL", "IDMA_FL_SEND_NEXT_PCIEHDR", "IDMA_FL_SEND_PADDING", "IDMA_FL_SEND_COMPLETION_TO_IMSG"};
  
#line 4688 
  u32 const sge_regs[3U] = {4808U, 4812U, 4776U};
  
#line 4697 
  tmp = is_t4(adapter->params.chip);
  
#line 4697 
  if (tmp != 0) {
    
#line 4698 
    sge_idma_decode = (char const **)(& t4_decode);
    
#line 4699 
    sge_idma_decode_nstates = 35;
  }
  else {
    
#line 4701 
    sge_idma_decode = (char const **)(& t5_decode);
    
#line 4702 
    sge_idma_decode_nstates = 33;
  }
  
#line 4705 
  if (state < sge_idma_decode_nstates) 
#line 4706 
                                       dev_warn((struct device const *)adapter->pdev_dev,"idma state %s\n",*(sge_idma_decode + state)); else 
                                                                    
#line 4708 
                                                                    dev_warn((struct device const *)adapter->pdev_dev,"idma state %d unknown\n",state);
  
#line 4710 
  i = 0;
  
#line 4710 
  goto ldv_49912;
  ldv_49911: 
#line 4711 
  ;
  
#line 4711 
  tmp_0 = t4_read_reg(adapter,sge_regs[i]);
  
#line 4711 
  ;
  
#line 4711 
  ;
  
#line 4711 
  dev_warn((struct device const *)adapter->pdev_dev,"SGE register %#x value %#x\n",sge_regs[i],tmp_0);
  
#line 4710 
  i += 1;
  ldv_49912: 
#line 4711 
  ;
  
#line 4710 
  if ((unsigned int)i <= 2U) 
#line 4712 
                             goto ldv_49911; else 
#line 4715 
                                                  goto ldv_49913;
  ldv_49913: 
#line 4716 
  ;
  
#line 4717 
  return;
}


#line 4723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_sge_ctxt_flush(struct adapter *adap, unsigned int mbox)
{
  int ret;
  u32 ldst_addrspace;
  struct fw_ldst_cmd c;
  
#line 4729 
  memset((void *)(& c),0,64UL);
  
#line 4730 
  ldst_addrspace = 8U;
  
#line 4731 
  if (0 != 0) 
#line 4731 
              c.op_to_addrspace = ((((ldst_addrspace << 24) | ((ldst_addrspace << 8) & 16711680U)) | ((ldst_addrspace >> 8) & 16128U)) | (ldst_addrspace >> 24)) | 49153U; else 
                                                                    
#line 4731 
                                                                    c.op_to_addrspace = __fswab32(ldst_addrspace | 29360128U);
  
#line 4734 
  c.cycles_to_len16 = 67108864U;
  
#line 4735 
  c.u.idctxt.msg_ctxtflush = 64U;
  
#line 4737 
  ret = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),64,(void *)(& c));
  
#line 4738 
  return ret;
}


#line 4752  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_fw_hello(struct adapter *adap, unsigned int mbox, unsigned int evt_mbox, enum dev_master master, enum dev_state *state)
{
  int __retres;
  int ret;
  struct fw_hello_cmd c;
  u32 v;
  unsigned int master_mbox;
  
#line 4759 
  int retries = 3;
  retry: 
#line 4761 
  ;
  
#line 4762 
  memset((void *)(& c),0,16UL);
  
#line 4763 
  c.op_to_write = 40964U;
  
#line 4763 
  c.retval_len16 = 16777216U;
  
#line 4764 
  if (0 != 0) {
    int tmp_2;
    int tmp_3;
    unsigned int tmp_4;
    int tmp_5;
    int tmp_6;
    unsigned int tmp_7;
    int tmp_8;
    int tmp_9;
    unsigned int tmp_10;
    int tmp_11;
    int tmp_12;
    unsigned int tmp_13;
    
#line 4764 
    if (master == (unsigned int)MASTER_CANT) 
#line 4764 
                                             tmp_2 = 536870912; else 
                                                                  
#line 4764 
                                                                  tmp_2 = 0;
    
#line 4764 
    if (master == (unsigned int)MASTER_MUST) 
#line 4764 
                                             tmp_3 = 268435456; else 
                                                                  
#line 4764 
                                                                  tmp_3 = 0;
    
#line 4764 
    if (master == (unsigned int)MASTER_MUST) 
#line 4764 
                                             tmp_4 = mbox << 24; else 
                                                                   
#line 4764 
                                                                   tmp_4 = 251658240U;
    
#line 4764 
    if (master == (unsigned int)MASTER_CANT) 
#line 4764 
                                             tmp_5 = 536870912; else 
                                                                  
#line 4764 
                                                                  tmp_5 = 0;
    
#line 4764 
    if (master == (unsigned int)MASTER_MUST) 
#line 4764 
                                             tmp_6 = 268435456; else 
                                                                  
#line 4764 
                                                                  tmp_6 = 0;
    
#line 4764 
    if (master == (unsigned int)MASTER_MUST) 
#line 4764 
                                             tmp_7 = mbox << 24; else 
                                                                   
#line 4764 
                                                                   tmp_7 = 251658240U;
    
#line 4764 
    if (master == (unsigned int)MASTER_CANT) 
#line 4764 
                                             tmp_8 = 536870912; else 
                                                                  
#line 4764 
                                                                  tmp_8 = 0;
    
#line 4764 
    if (master == (unsigned int)MASTER_MUST) 
#line 4764 
                                             tmp_9 = 268435456; else 
                                                                  
#line 4764 
                                                                  tmp_9 = 0;
    
#line 4764 
    if (master == (unsigned int)MASTER_MUST) 
#line 4764 
                                             tmp_10 = mbox << 24; else 
                                                                    
#line 4764 
                                                                    tmp_10 = 251658240U;
    
#line 4764 
    if (master == (unsigned int)MASTER_CANT) 
#line 4764 
                                             tmp_11 = 536870912; else 
                                                                   
#line 4764 
                                                                   tmp_11 = 0;
    
#line 4764 
    if (master == (unsigned int)MASTER_MUST) 
#line 4764 
                                             tmp_12 = 268435456; else 
                                                                   
#line 4764 
                                                                   tmp_12 = 0;
    
#line 4764 
    if (master == (unsigned int)MASTER_MUST) 
#line 4764 
                                             tmp_13 = mbox << 24; else 
                                                                    
#line 4764 
                                                                    tmp_13 = 251658240U;
    
#line 4764 
    c.err_to_clearinit = (((((((unsigned int)(tmp_2 | tmp_3) | tmp_4) | (evt_mbox << 20)) << 24) | (((((unsigned int)(tmp_5 | tmp_6) | tmp_7) | (evt_mbox << 20)) << 8) & 16711680U)) | (((((unsigned int)(tmp_8 | tmp_9) | tmp_10) | (evt_mbox << 20)) >> 8) & 65024U)) | ((((unsigned int)(tmp_11 | tmp_12) | tmp_13) | (evt_mbox << 20)) >> 24)) | 256U;
  }
  else {
    __u32 tmp_17;
    int tmp_14;
    int tmp_15;
    unsigned int tmp_16;
    
#line 4764 
    if (master == (unsigned int)MASTER_CANT) 
#line 4764 
                                             tmp_14 = 536870912; else 
                                                                   
#line 4764 
                                                                   tmp_14 = 0;
    
#line 4764 
    if (master == (unsigned int)MASTER_MUST) 
#line 4764 
                                             tmp_15 = 268435456; else 
                                                                   
#line 4764 
                                                                   tmp_15 = 0;
    
#line 4764 
    if (master == (unsigned int)MASTER_MUST) 
#line 4764 
                                             tmp_16 = mbox << 24; else 
                                                                    
#line 4764 
                                                                    tmp_16 = 251658240U;
    
#line 4764 
    ;
    
#line 4764 
    tmp_17 = __fswab32((((unsigned int)(tmp_14 | tmp_15) | tmp_16) | (evt_mbox << 20)) | 65536U);
    
#line 4764 
    c.err_to_clearinit = tmp_17;
  }
  
#line 4780 
  ret = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),16,(void *)(& c));
  
#line 4781 
  if (ret < 0) {
    u32 tmp_19;
    
#line 4782 
    if (ret == -16 || ret == -110) {
      int tmp_18;
      
#line 4782 
      tmp_18 = retries;
      
#line 4782 
      retries -= 1;
      
#line 4782 
      ;
      
#line 4782 
      if (tmp_18 > 0) 
#line 4783 
                      goto retry; else ;
    }
    else ;
    
#line 4784 
    tmp_19 = t4_read_reg(adap,12472U);
    
#line 4784 
    if (tmp_19 < (u32)0) 
#line 4785 
                         t4_report_fw_error(adap); else ;
    
#line 4786 
    __retres = ret;
    
#line 4786 
    goto return_label;
  }
  else ;
  
#line 4789 
  if (0 != 0) 
#line 4789 
              v = (((c.err_to_clearinit << 24) | ((c.err_to_clearinit << 8) & 16711680U)) | ((c.err_to_clearinit >> 8) & 65280U)) | (c.err_to_clearinit >> 24); else 
                                                                    
#line 4789 
                                                                    v = __fswab32(c.err_to_clearinit);
  
#line 4790 
  master_mbox = (v >> 24) & 15U;
  
#line 4791 
  if (state != (enum dev_state *)DEV_STATE_UNINIT) 
    
#line 4792 
    if (v < (u32)0) 
#line 4793 
                    *state = DEV_STATE_ERR;
    else 
      
#line 4794 
      if ((v & 1073741824U) != 0U) 
#line 4795 
                                   *state = DEV_STATE_INIT; else 
#line 4797 
                                                                 *state = DEV_STATE_UNINIT;
  else ;
  
#line 4811 
  if ((v & 3221225472U) == 0U && master_mbox != mbox) {
    
#line 4813 
    int waiting = 30000;
    ldv_49938: 
#line 4814 
    ;
    {
      u32 pcie_fw;
      
#line 4825 
      msleep(50U);
      
#line 4826 
      waiting += -50;
      
#line 4834 
      pcie_fw = t4_read_reg(adap,12472U);
      
#line 4835 
      if ((pcie_fw & 3221225472U) == 0U) {
        
#line 4836 
        if (waiting <= 0) {
          int tmp_21;
          
#line 4837 
          tmp_21 = retries;
          
#line 4837 
          retries -= 1;
          
#line 4837 
          ;
          
#line 4837 
          if (tmp_21 > 0) 
#line 4838 
                          goto retry; else ;
          
#line 4840 
          __retres = -110;
          
#line 4840 
          goto return_label;
        }
        else ;
        
#line 4842 
        goto ldv_49936;
      }
      else ;
      
#line 4849 
      if (state != (enum dev_state *)DEV_STATE_UNINIT) {
        
#line 4850 
        if (pcie_fw < (u32)0) 
#line 4851 
                              *state = DEV_STATE_ERR;
        else 
          
#line 4852 
          if ((pcie_fw & 1073741824U) != 0U) 
#line 4853 
                                             *state = DEV_STATE_INIT; else ;
      }
      else ;
      
#line 4861 
      if (master_mbox == 7U && (pcie_fw & 32768U) != 0U) 
#line 4863 
                                                         master_mbox = (pcie_fw >> 12) & 7U; else ;
      
#line 4864 
      goto ldv_49937;
    }
    ldv_49936: 
#line 4866 
    ;
    
#line 4822 
    goto ldv_49938;
    ldv_49937: 
#line 4823 
    ;
  }
  else ;
  
#line 4868 
  __retres = (int)master_mbox;
  return_label: 
#line 4868 
                return __retres;
}


#line 4878  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_fw_bye(struct adapter *adap, unsigned int mbox)
{
  struct fw_bye_cmd c;
  int tmp;
  
#line 4882 
  memset((void *)(& c),0,16UL);
  
#line 4883 
  c.op_to_write = 40965U;
  
#line 4883 
  c.retval_len16 = 16777216U;
  
#line 4884 
  tmp = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),16,(void *)0);
  
#line 4884 
  return tmp;
}


#line 4895  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_early_init(struct adapter *adap, unsigned int mbox)
{
  struct fw_initialize_cmd c;
  int tmp;
  
#line 4899 
  memset((void *)(& c),0,16UL);
  
#line 4900 
  c.op_to_write = 40966U;
  
#line 4900 
  c.retval_len16 = 16777216U;
  
#line 4901 
  tmp = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),16,(void *)0);
  
#line 4901 
  return tmp;
}


#line 4912  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_fw_reset(struct adapter *adap, unsigned int mbox, int reset)
{
  struct fw_reset_cmd c;
  int tmp_0;
  
#line 4916 
  memset((void *)(& c),0,16UL);
  
#line 4917 
  c.op_to_write = 40963U;
  
#line 4917 
  c.retval_len16 = 16777216U;
  
#line 4918 
  if (0 != 0) 
#line 4918 
              c.val = ((((unsigned int)reset << 24) | (((unsigned int)reset << 8) & 16711680U)) | (((unsigned int)reset >> 8) & 65280U)) | ((unsigned int)reset >> 24); else 
                                                                    
#line 4918 
                                                                    c.val = __fswab32((unsigned int)reset);
  
#line 4919 
  tmp_0 = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),16,(void *)0);
  
#line 4919 
  return tmp_0;
}


#line 4938  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static int t4_fw_halt(struct adapter *adap, unsigned int mbox, int force)
{
  
#line 4940 
  int ret = 0;
  
#line 4946 
  if (mbox <= 7U) {
    struct fw_reset_cmd c;
    
#line 4949 
    memset((void *)(& c),0,16UL);
    
#line 4950 
    c.op_to_write = 40963U;
    
#line 4950 
    c.retval_len16 = 16777216U;
    
#line 4951 
    c.val = 50331648U;
    
#line 4952 
    c.halt_pkd = 128U;
    
#line 4953 
    ret = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),16,(void *)0);
  }
  else ;
  
#line 4969 
  if (ret == 0 || force != 0) {
    
#line 4970 
    t4_set_reg_field(adap,31488U,1U,1U);
    
#line 4971 
    t4_set_reg_field(adap,12472U,536870912U,536870912U);
  }
  else ;
  
#line 4979 
  return ret;
}


#line 5003  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static int t4_fw_restart(struct adapter *adap, unsigned int mbox, int reset)
{
  int __retres;
  
#line 5005 
  if (reset != 0) {
    
#line 5011 
    t4_set_reg_field(adap,12472U,536870912U,0U);
    
#line 5020 
    if (mbox <= 7U) {
      int tmp;
      
#line 5021 
      t4_set_reg_field(adap,31488U,1U,0U);
      
#line 5022 
      msleep(100U);
      
#line 5023 
      tmp = t4_fw_reset(adap,mbox,3);
      
#line 5023 
      if (tmp == 0) {
        
#line 5025 
        __retres = 0;
        
#line 5025 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 5028 
    t4_write_reg(adap,103464U,3U);
    
#line 5029 
    msleep(2000U);
  }
  else {
    int ms;
    u32 tmp_0;
    
#line 5033 
    t4_set_reg_field(adap,31488U,1U,0U);
    
#line 5034 
    ms = 0;
    
#line 5034 
    goto ldv_49969;
    ldv_49968: 
#line 5035 
    ;
    
#line 5035 
    tmp_0 = t4_read_reg(adap,12472U);
    
#line 5035 
    if ((tmp_0 & 536870912U) == 0U) {
      
#line 5036 
      __retres = 0;
      
#line 5036 
      goto return_label;
    }
    else ;
    
#line 5037 
    msleep(100U);
    
#line 5038 
    ms += 100;
    ldv_49969: 
#line 5039 
    ;
    
#line 5034 
    if (ms <= 9999) 
#line 5036 
                    goto ldv_49968; else 
#line 5039 
                                         goto ldv_49970;
    ldv_49970: 
#line 5040 
    ;
    
#line 5040 
    __retres = -110;
    
#line 5040 
    goto return_label;
  }
  
#line 5042 
  __retres = 0;
  return_label: 
#line 5042 
                return __retres;
}


#line 5066  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_fw_upgrade(struct adapter *adap, unsigned int mbox, u8 const *fw_data, unsigned int size, int force)
{
  int __retres;
  int reset;
  int ret;
  int tmp_0;
  bool tmp;
  int tmp_2;
  
#line 5069 
  struct fw_hdr const *fw_hdr = (struct fw_hdr const *)fw_data;
  
#line 5072 
  tmp = t4_fw_matches_chip((struct adapter const *)adap,fw_hdr);
  
#line 5072 
  if (tmp) 
#line 5072 
           tmp_0 = 0; else 
#line 5072 
                           tmp_0 = 1;
  
#line 5072 
  if (tmp_0) {
    
#line 5073 
    __retres = -22;
    
#line 5073 
    goto return_label;
  }
  else ;
  
#line 5075 
  ret = t4_fw_halt(adap,mbox,force);
  
#line 5076 
  if (ret < 0 && force == 0) {
    
#line 5077 
    __retres = ret;
    
#line 5077 
    goto return_label;
  }
  else ;
  
#line 5079 
  ret = t4_load_fw(adap,fw_data,size);
  
#line 5080 
  if (ret < 0) {
    
#line 5081 
    __retres = ret;
    
#line 5081 
    goto return_label;
  }
  else ;
  
#line 5091 
  if (0 != 0) 
#line 5091 
              reset = (((((fw_hdr->flags << 24) | ((fw_hdr->flags << 8) & 16711680U)) | ((fw_hdr->flags >> 8) & 65280U)) | (fw_hdr->flags >> 24)) & 1U) == 0U;
  else {
    __u32 tmp_1;
    
#line 5091 
    tmp_1 = __fswab32(fw_hdr->flags);
    
#line 5091 
    reset = (tmp_1 & 1U) == 0U;
  }
  
#line 5092 
  tmp_2 = t4_fw_restart(adap,mbox,reset);
  
#line 5092 
  __retres = tmp_2;
  return_label: 
#line 5092 
                return __retres;
}


#line 5105  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_fixup_host_params(struct adapter *adap, unsigned int page_size, unsigned int cache_line_size)
{
  int __retres;
  int tmp;
  int tmp_0;
  unsigned int tmp_1;
  int tmp_2;
  int tmp_5;
  u32 tmp_6;
  u32 tmp_7;
  
#line 5108 
  tmp = fls((int)page_size);
  
#line 5108 
  unsigned int page_shift = (unsigned int)(tmp + -1);
  
#line 5109 
  unsigned int sge_hps = page_shift + 4294967286U;
  
#line 5110 
  if (cache_line_size > 64U) 
#line 5110 
                             tmp_0 = 128; else 
#line 5110 
                                               tmp_0 = 64;
  
#line 5110 
  unsigned int stat_len = (unsigned int)tmp_0;
  
#line 5111 
  if (32U > cache_line_size) 
#line 5111 
                             tmp_1 = 32U; else 
#line 5111 
                                               tmp_1 = cache_line_size;
  
#line 5111 
  unsigned int fl_align = tmp_1;
  
#line 5112 
  tmp_2 = fls((int)fl_align);
  
#line 5112 
  unsigned int fl_align_log = (unsigned int)(tmp_2 + -1);
  
#line 5114 
  t4_write_reg(adap,4108U,(((((((sge_hps << 4) | sge_hps) | (sge_hps << 8)) | (sge_hps << 12)) | (sge_hps << 16)) | (sge_hps << 20)) | (sge_hps << 24)) | (sge_hps << 28));
  
#line 5124 
  tmp_5 = is_t4(adap->params.chip);
  
#line 5124 
  if (tmp_5 != 0) {
    int tmp_3;
    
#line 5130 
    if (stat_len != 64U) 
#line 5130 
                         tmp_3 = 131072; else 
#line 5130 
                                              tmp_3 = 0;
    
#line 5125 
    ;
    
#line 5125 
    ;
    
#line 5125 
    t4_set_reg_field(adap,4104U,131184U,((fl_align_log + 4294967291U) << 4) | (unsigned int)tmp_3);
  }
  else {
    int tmp_4;
    
#line 5156 
    if (fl_align <= 32U) {
      
#line 5157 
      fl_align = 64U;
      
#line 5158 
      fl_align_log = 6U;
    }
    else ;
    
#line 5163 
    if (stat_len != 64U) 
#line 5163 
                         tmp_4 = 131072; else 
#line 5163 
                                              tmp_4 = 0;
    
#line 5160 
    ;
    
#line 5160 
    t4_set_reg_field(adap,4104U,131184U,(unsigned int)tmp_4);
    
#line 5165 
    t4_set_reg_field(adap,4388U,458752U,(fl_align_log + 4294967291U) << 16);
  }
  
#line 5191 
  t4_write_reg(adap,4164U,page_size);
  
#line 5192 
  tmp_6 = t4_read_reg(adap,4172U);
  
#line 5192 
  ;
  
#line 5192 
  ;
  
#line 5192 
  t4_write_reg(adap,4172U,((tmp_6 + fl_align) + 4294967295U) & - fl_align);
  
#line 5195 
  tmp_7 = t4_read_reg(adap,4176U);
  
#line 5195 
  ;
  
#line 5195 
  ;
  
#line 5195 
  t4_write_reg(adap,4176U,((tmp_7 + fl_align) + 4294967295U) & - fl_align);
  
#line 5199 
  t4_write_reg(adap,102776U,page_shift + 4294967284U);
  
#line 5201 
  __retres = 0;
  
#line 5201 
  return __retres;
}


#line 5212  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_fw_initialize(struct adapter *adap, unsigned int mbox)
{
  struct fw_initialize_cmd c;
  int tmp;
  
#line 5216 
  memset((void *)(& c),0,16UL);
  
#line 5217 
  c.op_to_write = 40966U;
  
#line 5217 
  c.retval_len16 = 16777216U;
  
#line 5218 
  tmp = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),16,(void *)0);
  
#line 5218 
  return tmp;
}


#line 5235  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_query_params_rw(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int nparams, u32 const *params, u32 *val, int rw)
{
  int __retres;
  int i;
  int ret;
  struct fw_params_cmd c;
  __be32 *tmp_0;
  __u32 tmp_2;
  u32 const *tmp_1;
  
#line 5241 
  __be32 *p = & c.param[0].mnem;
  
#line 5243 
  if (nparams > 7U) {
    
#line 5244 
    __retres = -22;
    
#line 5244 
    goto return_label;
  }
  else ;
  
#line 5246 
  memset((void *)(& c),0,64UL);
  
#line 5247 
  if (0 != 0) 
#line 5247 
              c.op_to_vfn = ((((((pf << 8) | vf) << 24) | ((((pf << 8) | vf) << 8) & 16711680U)) | ((((pf << 8) | vf) >> 8) & 16128U)) | (((pf << 8) | vf) >> 24)) | 49160U; else 
                                                                    
#line 5247 
                                                                    c.op_to_vfn = __fswab32(((pf << 8) | vf) | 146800640U);
  
#line 5251 
  c.retval_len16 = 67108864U;
  
#line 5253 
  i = 0;
  
#line 5253 
  goto ldv_50011;
  ldv_50010: 
#line 5254 
  ;
  
#line 5254 
  tmp_0 = p;
  
#line 5254 
  p += 1;
  
#line 5254 
  tmp_1 = params;
  
#line 5254 
  params += 1;
  
#line 5254 
  ;
  
#line 5254 
  tmp_2 = __fswab32(*tmp_1);
  
#line 5254 
  *tmp_0 = tmp_2;
  
#line 5255 
  if (rw != 0) 
    
#line 5256 
    if (0 != 0) 
#line 5256 
                *p = (((*(val + i) << 24) | ((*(val + i) << 8) & 16711680U)) | ((*(val + i) >> 8) & 65280U)) | (*(val + i) >> 24); else 
                                                                    
#line 5256 
                                                                    *p = __fswab32(*(val + i));
  else ;
  
#line 5257 
  p += 1;
  
#line 5253 
  i += 1;
  ldv_50011: 
#line 5254 
  ;
  
#line 5253 
  if ((unsigned int)i < nparams) 
#line 5255 
                                 goto ldv_50010; else 
#line 5258 
                                                      goto ldv_50012;
  ldv_50012: 
#line 5259 
  ;
  
#line 5260 
  ret = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),64,(void *)(& c));
  
#line 5261 
  if (ret == 0) {
    u32 *tmp_4;
    
#line 5262 
    i = 0;
    
#line 5262 
    p = & c.param[0].val;
    
#line 5262 
    goto ldv_50014;
    ldv_50013: 
#line 5263 
    ;
    
#line 5263 
    tmp_4 = val;
    
#line 5263 
    val += 1;
    
#line 5263 
    if (0 != 0) 
#line 5263 
                *tmp_4 = (((*p << 24) | ((*p << 8) & 16711680U)) | ((*p >> 8) & 65280U)) | (*p >> 24); else 
                                                                    
#line 5263 
                                                                    *tmp_4 = __fswab32(*p);
    
#line 5262 
    i += 1;
    
#line 5262 
    p += 2U;
    ldv_50014: 
#line 5263 
    ;
    
#line 5262 
    if ((unsigned int)i < nparams) 
#line 5264 
                                   goto ldv_50013; else 
#line 5267 
                                                        goto ldv_50015;
    ldv_50015: 
#line 5268 
    ;
  }
  else ;
  
#line 5264 
  __retres = ret;
  return_label: 
#line 5264 
                return __retres;
}


#line 5267  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_query_params(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int nparams, u32 const *params, u32 *val)
{
  int tmp;
  
#line 5271 
  tmp = t4_query_params_rw(adap,mbox,pf,vf,nparams,params,val,0);
  
#line 5271 
  return tmp;
}


#line 5288  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_set_params_timeout(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int nparams, u32 const *params, u32 const *val, int timeout)
{
  int __retres;
  struct fw_params_cmd c;
  __be32 *tmp_0;
  __u32 tmp_2;
  u32 const *tmp_1;
  __be32 *tmp_3;
  __u32 tmp_5;
  u32 const *tmp_4;
  unsigned int tmp_6;
  int tmp_7;
  
#line 5294 
  __be32 *p = & c.param[0].mnem;
  
#line 5296 
  if (nparams > 7U) {
    
#line 5297 
    __retres = -22;
    
#line 5297 
    goto return_label;
  }
  else ;
  
#line 5299 
  memset((void *)(& c),0,64UL);
  
#line 5300 
  if (0 != 0) 
#line 5300 
              c.op_to_vfn = ((((((pf << 8) | vf) << 24) | ((((pf << 8) | vf) << 8) & 16711680U)) | ((((pf << 8) | vf) >> 8) & 24320U)) | (((pf << 8) | vf) >> 24)) | 40968U; else 
                                                                    
#line 5300 
                                                                    c.op_to_vfn = __fswab32(((pf << 8) | vf) | 144703488U);
  
#line 5304 
  c.retval_len16 = 67108864U;
  
#line 5306 
  goto ldv_50038;
  ldv_50037: 
#line 5307 
  ;
  
#line 5307 
  tmp_0 = p;
  
#line 5307 
  p += 1;
  
#line 5307 
  tmp_1 = params;
  
#line 5307 
  params += 1;
  
#line 5307 
  ;
  
#line 5307 
  tmp_2 = __fswab32(*tmp_1);
  
#line 5307 
  *tmp_0 = tmp_2;
  
#line 5308 
  tmp_3 = p;
  
#line 5308 
  p += 1;
  
#line 5308 
  tmp_4 = val;
  
#line 5308 
  val += 1;
  
#line 5308 
  ;
  
#line 5308 
  tmp_5 = __fswab32(*tmp_4);
  
#line 5308 
  *tmp_3 = tmp_5;
  ldv_50038: 
#line 5309 
  ;
  
#line 5306 
  tmp_6 = nparams;
  
#line 5306 
  nparams -= 1U;
  
#line 5306 
  ;
  
#line 5306 
  if (tmp_6 != 0U) 
#line 5308 
                   goto ldv_50037; else 
#line 5311 
                                        goto ldv_50039;
  ldv_50039: 
#line 5312 
  ;
  
#line 5311 
  tmp_7 = t4_wr_mbox_timeout(adap,(int)mbox,(void const *)(& c),64,(void *)0,timeout);
  
#line 5311 
  __retres = tmp_7;
  return_label: 
#line 5311 
                return __retres;
}


#line 5327  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_set_params(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int nparams, u32 const *params, u32 const *val)
{
  int tmp;
  
#line 5331 
  tmp = t4_set_params_timeout(adap,mbox,pf,vf,nparams,params,val,10000);
  
#line 5331 
  return tmp;
}


#line 5356  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_cfg_pfvf(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int txq, unsigned int txq_eth_ctrl, unsigned int rxqi, unsigned int rxq, unsigned int tc, unsigned int vi, unsigned int cmask, unsigned int pmask, unsigned int nexact, unsigned int rcaps, unsigned int wxcaps)
{
  struct fw_pfvf_cmd c;
  int tmp_4;
  
#line 5364 
  memset((void *)(& c),0,32UL);
  
#line 5365 
  if (0 != 0) 
#line 5365 
              c.op_to_vfn = ((((((pf << 8) | vf) << 24) | ((((pf << 8) | vf) << 8) & 16711680U)) | ((((pf << 8) | vf) >> 8) & 24320U)) | (((pf << 8) | vf) >> 24)) | 40969U; else 
                                                                    
#line 5365 
                                                                    c.op_to_vfn = __fswab32(((pf << 8) | vf) | 161480704U);
  
#line 5368 
  c.retval_len16 = 33554432U;
  
#line 5369 
  if (0 != 0) 
#line 5369 
              c.niqflint_niq = (((((rxqi << 20) | rxq) << 24) | ((((rxqi << 20) | rxq) << 8) & 16711680U)) | ((((rxqi << 20) | rxq) >> 8) & 65280U)) | (((rxqi << 20) | rxq) >> 24); else 
                                                                    
#line 5369 
                                                                    c.niqflint_niq = __fswab32((rxqi << 20) | rxq);
  
#line 5371 
  if (0 != 0) 
#line 5371 
              c.type_to_neq = ((((((cmask << 24) | (pmask << 20)) | txq) << 24) | (((((cmask << 24) | (pmask << 20)) | txq) << 8) & 16711680U)) | (((((cmask << 24) | (pmask << 20)) | txq) >> 8) & 65280U)) | ((((cmask << 24) | (pmask << 20)) | txq) >> 24); else 
                                                                    
#line 5371 
                                                                    c.type_to_neq = __fswab32(((cmask << 24) | (pmask << 20)) | txq);
  
#line 5374 
  if (0 != 0) 
#line 5374 
              c.tc_to_nexactf = ((((((tc << 24) | (vi << 16)) | nexact) << 24) | (((((tc << 24) | (vi << 16)) | nexact) << 8) & 16711680U)) | (((((tc << 24) | (vi << 16)) | nexact) >> 8) & 65280U)) | ((((tc << 24) | (vi << 16)) | nexact) >> 24); else 
                                                                    
#line 5374 
                                                                    c.tc_to_nexactf = __fswab32(((tc << 24) | (vi << 16)) | nexact);
  
#line 5377 
  if (0 != 0) 
#line 5377 
              c.r_caps_to_nethctrl = ((((((rcaps << 24) | (wxcaps << 16)) | txq_eth_ctrl) << 24) | (((((rcaps << 24) | (wxcaps << 16)) | txq_eth_ctrl) << 8) & 16711680U)) | (((((rcaps << 24) | (wxcaps << 16)) | txq_eth_ctrl) >> 8) & 65280U)) | ((((rcaps << 24) | (wxcaps << 16)) | txq_eth_ctrl) >> 24); else 
                                                                    
#line 5377 
                                                                    c.r_caps_to_nethctrl = __fswab32(((rcaps << 24) | (wxcaps << 16)) | txq_eth_ctrl);
  
#line 5380 
  tmp_4 = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),32,(void *)0);
  
#line 5380 
  return tmp_4;
}


#line 5400  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_alloc_vi(struct adapter *adap, unsigned int mbox, unsigned int port, unsigned int pf, unsigned int vf, unsigned int nmac, u8 *mac, unsigned int *rss_size)
{
  int __retres;
  int ret;
  struct fw_vi_cmd c;
  int tmp_3;
  
#line 5407 
  memset((void *)(& c),0,64UL);
  
#line 5408 
  if (0 != 0) 
#line 5408 
              c.op_to_vfn = ((((((pf << 8) | vf) << 24) | ((((pf << 8) | vf) << 8) & 16711680U)) | ((((pf << 8) | vf) >> 8) & 20224U)) | (((pf << 8) | vf) >> 24)) | 45076U; else 
                                                                    
#line 5408 
                                                                    c.op_to_vfn = __fswab32(((pf << 8) | vf) | 347078656U);
  
#line 5411 
  c.alloc_to_len16 = 67108992U;
  
#line 5412 
  c.portid_pkd = (unsigned char)((int)((unsigned char)port) << 4U);
  
#line 5413 
  c.nmac = (unsigned char)((unsigned int)((unsigned char)nmac) + 255U);
  
#line 5415 
  ret = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),64,(void *)(& c));
  
#line 5416 
  if (ret != 0) {
    
#line 5417 
    __retres = ret;
    
#line 5417 
    goto return_label;
  }
  else ;
  
#line 5419 
  if (mac != (u8 *)0U) {
    
#line 5420 
    memcpy((void *)mac,(void const *)(& c.mac),6UL);
    
#line 5421 
    switch (nmac) {
      case (unsigned int)5: 
#line 5422 
      ;
      
#line 5423 
      memcpy((void *)(mac + 24U),(void const *)(& c.nmac3),6UL);
      case (unsigned int)4: 
#line 5424 
      ;
      
#line 5425 
      memcpy((void *)(mac + 18U),(void const *)(& c.nmac2),6UL);
      case (unsigned int)3: 
#line 5426 
      ;
      
#line 5427 
      memcpy((void *)(mac + 12U),(void const *)(& c.nmac1),6UL);
      case (unsigned int)2: 
#line 5428 
      ;
      
#line 5429 
      memcpy((void *)(mac + 6U),(void const *)(& c.nmac0),6UL);
    }
  }
  else ;
  
#line 5432 
  if (rss_size != (unsigned int *)0U) {
    int tmp_1;
    
#line 5433 
    if (0 != 0) 
#line 5433 
                tmp_1 = (int)((unsigned short)(((int)c.rsssize_pkd << 8) | ((int)c.rsssize_pkd >> 8))) & 2047;
    else {
      __u16 tmp_0;
      
#line 5433 
      tmp_0 = __fswab16((unsigned short)((int)c.rsssize_pkd));
      
#line 5433 
      tmp_1 = (int)tmp_0 & 2047;
    }
    
#line 5433 
    *rss_size = (unsigned int)tmp_1;
  }
  else ;
  
#line 5434 
  if (0 != 0) 
#line 5434 
              tmp_3 = (int)((unsigned short)(((int)c.type_viid << 8) | ((int)c.type_viid >> 8))) & 4095;
  else {
    __u16 tmp_2;
    
#line 5434 
    tmp_2 = __fswab16((unsigned short)((int)c.type_viid));
    
#line 5434 
    tmp_3 = (int)tmp_2 & 4095;
  }
  
#line 5434 
  __retres = tmp_3;
  return_label: 
#line 5434 
                return __retres;
}


#line 5447  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_free_vi(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int viid)
{
  struct fw_vi_cmd c;
  int tmp_1;
  
#line 5452 
  memset((void *)(& c),0,64UL);
  
#line 5453 
  if (0 != 0) 
#line 5453 
              c.op_to_vfn = ((((((pf << 8) | vf) << 24) | ((((pf << 8) | vf) << 8) & 16711680U)) | ((((pf << 8) | vf) >> 8) & 28416U)) | (((pf << 8) | vf) >> 24)) | 36884U; else 
                                                                    
#line 5453 
                                                                    c.op_to_vfn = __fswab32(((pf << 8) | vf) | 344981504U);
  
#line 5458 
  c.alloc_to_len16 = 67108928U;
  
#line 5459 
  if (0 != 0) 
#line 5459 
              c.type_viid = (unsigned short)(((int)((unsigned short)viid) << 8) | ((int)((unsigned short)viid) >> 8)); else 
                                                                    
#line 5459 
                                                                    c.type_viid = __fswab16((unsigned short)((int)((unsigned short)viid)));
  
#line 5461 
  tmp_1 = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),64,(void *)(& c));
  
#line 5461 
  return tmp_1;
}


#line 5478  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_set_rxmode(struct adapter *adap, unsigned int mbox, unsigned int viid, int mtu, int promisc, int all_multi, int bcast, int vlanex, bool sleep_ok)
{
  struct fw_vi_rxmode_cmd c;
  int tmp_1;
  
#line 5485 
  if (mtu < 0) 
#line 5486 
               mtu = 65535; else ;
  
#line 5487 
  if (promisc < 0) 
#line 5488 
                   promisc = 3; else ;
  
#line 5489 
  if (all_multi < 0) 
#line 5490 
                     all_multi = 3; else ;
  
#line 5491 
  if (bcast < 0) 
#line 5492 
                 bcast = 3; else ;
  
#line 5493 
  if (vlanex < 0) 
#line 5494 
                  vlanex = 3; else ;
  
#line 5496 
  memset((void *)(& c),0,16UL);
  
#line 5497 
  if (0 != 0) 
#line 5497 
              c.op_to_viid = ((((viid << 24) | ((viid << 8) & 16711680U)) | ((viid >> 8) & 24320U)) | (viid >> 24)) | 40982U; else 
                                                                    
#line 5497 
                                                                    c.op_to_viid = __fswab32(viid | 379584512U);
  
#line 5500 
  c.retval_len16 = 16777216U;
  
#line 5501 
  if (0 != 0) 
#line 5501 
              c.mtu_to_vlanexen = ((((unsigned int)(((((mtu << 16) | (promisc << 14)) | (all_multi << 12)) | (bcast << 10)) | (vlanex << 8)) << 24) | (((unsigned int)(((((mtu << 16) | (promisc << 14)) | (all_multi << 12)) | (bcast << 10)) | (vlanex << 8)) << 8) & 16711680U)) | (((unsigned int)(((((mtu << 16) | (promisc << 14)) | (all_multi << 12)) | (bcast << 10)) | (vlanex << 8)) >> 8) & 65280U)) | ((unsigned int)(((((mtu << 16) | (promisc << 14)) | (all_multi << 12)) | (bcast << 10)) | (vlanex << 8)) >> 24); else 
                                                                    
#line 5502 
                                                                    c.mtu_to_vlanexen = __fswab32((unsigned int)(((((mtu << 16) | (promisc << 14)) | (all_multi << 12)) | (bcast << 10)) | (vlanex << 8)));
  
#line 5507 
  tmp_1 = t4_wr_mbox_meat(adap,(int)mbox,(void const *)(& c),16,(void *)0,(_Bool)((bool)((int)sleep_ok) != 0));
  
#line 5507 
  return tmp_1;
}


#line 5532  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_alloc_mac_filt(struct adapter *adap, unsigned int mbox, unsigned int viid, bool free_0, unsigned int naddr, u8 const **addr, u16 *idx, u64 *hash, bool sleep_ok)
{
  int __retres;
  int offset;
  struct fw_vi_mac_cmd c;
  
#line 5536 
  int ret = 0;
  
#line 5538 
  unsigned int nfilters = 0U;
  
#line 5539 
  unsigned int max_naddr = (unsigned int)adap->params.arch.mps_tcam_size;
  
#line 5540 
  unsigned int rem = naddr;
  
#line 5542 
  if (naddr > max_naddr) {
    
#line 5543 
    __retres = -22;
    
#line 5543 
    goto return_label;
  }
  else ;
  
#line 5545 
  offset = 0;
  
#line 5545 
  goto ldv_50139;
  ldv_50138: 
#line 5546 
  ;
  {
    unsigned int tmp;
    struct fw_vi_mac_exact *p;
    int i;
    
#line 5546 
    if (7U < rem) 
#line 5546 
                  tmp = 7U; else 
#line 5546 
                                 tmp = rem;
    
#line 5546 
    unsigned int fw_naddr = tmp;
    
#line 5548 
    size_t len16 = ((unsigned long)((void *)8 + fw_naddr * 8U) + 15UL) / 16UL;
    
#line 5553 
    memset((void *)(& c),0,64UL);
    
#line 5554 
    if (0 != 0) 
#line 5554 
                c.op_to_viid = ((((((unsigned int)((int)free_0 << 20) | viid) << 24) | ((((unsigned int)((int)free_0 << 20) | viid) << 8) & 16711680U)) | ((((unsigned int)((int)free_0 << 20) | viid) >> 8) & 24320U)) | (((unsigned int)((int)free_0 << 20) | viid) >> 24)) | 40981U; else 
                                                                    
#line 5554 
                                                                    c.op_to_viid = __fswab32(((unsigned int)((int)free_0 << 20) | viid) | 362807296U);
    
#line 5559 
    if (0 != 0) 
#line 5559 
                c.freemacs_to_len16 = (((((unsigned int)((int)free_0 << 31) | (unsigned int)len16) << 24) | ((((unsigned int)((int)free_0 << 31) | (unsigned int)len16) << 8) & 16711680U)) | ((((unsigned int)((int)free_0 << 31) | (unsigned int)len16) >> 8) & 65280U)) | (((unsigned int)((int)free_0 << 31) | (unsigned int)len16) >> 24); else 
                                                                    
#line 5560 
                                                                    c.freemacs_to_len16 = __fswab32((unsigned int)((int)free_0 << 31) | (unsigned int)len16);
    
#line 5563 
    i = 0;
    
#line 5563 
    p = (struct fw_vi_mac_exact *)(& c.u.exact);
    
#line 5563 
    goto ldv_50131;
    ldv_50130: 
#line 5564 
    ;
    
#line 5564 
    p->valid_to_idx = (unsigned short)65411U;
    
#line 5568 
    memcpy((void *)(& p->macaddr),(void const *)*(addr + (offset + i)),6UL);
    
#line 5563 
    i += 1;
    
#line 5563 
    p += 1;
    ldv_50131: 
#line 5564 
    ;
    
#line 5563 
    if ((unsigned int)i < fw_naddr) 
#line 5565 
                                    goto ldv_50130; else 
#line 5568 
                                                         goto ldv_50132;
    ldv_50132: 
#line 5569 
    ;
    
#line 5576 
    ret = t4_wr_mbox_meat(adap,(int)mbox,(void const *)(& c),64,(void *)(& c),(_Bool)((bool)((int)sleep_ok) != 0));
    
#line 5577 
    if (ret != 0 && ret != -12) 
#line 5578 
                                goto ldv_50133; else ;
    
#line 5580 
    i = 0;
    
#line 5580 
    p = (struct fw_vi_mac_exact *)(& c.u.exact);
    
#line 5580 
    goto ldv_50136;
    ldv_50135: 
#line 5581 
    ;
    {
      unsigned int tmp_3;
      
#line 5581 
      if (0 != 0) 
#line 5581 
                  tmp_3 = (unsigned int)((unsigned short)(((int)p->valid_to_idx << 8) | ((int)p->valid_to_idx >> 8))) & 1023U;
      else {
        __u16 tmp_2;
        
#line 5581 
        tmp_2 = __fswab16((unsigned short)((int)p->valid_to_idx));
        
#line 5581 
        tmp_3 = (unsigned int)tmp_2 & 1023U;
      }
      
#line 5581 
      u16 index = (unsigned short)tmp_3;
      
#line 5584 
      if (idx != (u16 *)0U) 
        
#line 5585 
        if ((unsigned int)index < max_naddr) 
#line 5585 
                                             *(idx + (offset + i)) = index; else 
                                                                    
#line 5585 
                                                                    *(idx + (offset + i)) = (unsigned short)65535U;
      else ;
      
#line 5587 
      if ((unsigned int)index < max_naddr) 
#line 5588 
                                           nfilters += 1U;
      else 
        
#line 5589 
        if (hash != (u64 *)0ULL) {
          int tmp_4;
          
#line 5590 
          tmp_4 = hash_mac_addr(*(addr + (offset + i)));
          
#line 5591 
          *hash |= 1ULL << tmp_4;
        }
        else ;
    }
    
#line 5580 
    i += 1;
    
#line 5580 
    p += 1;
    ldv_50136: 
#line 5581 
    ;
    
#line 5580 
    if ((unsigned int)i < fw_naddr) 
#line 5582 
                                    goto ldv_50135; else 
#line 5585 
                                                         goto ldv_50137;
    ldv_50137: 
#line 5586 
    ;
    
#line 5594 
    free_0 = (_Bool)0;
    
#line 5595 
    offset = (int)((unsigned int)offset + fw_naddr);
    
#line 5596 
    rem -= fw_naddr;
  }
  ldv_50139: 
#line 5598 
  ;
  
#line 5545 
  if ((unsigned int)offset < naddr) 
#line 5547 
                                    goto ldv_50138; else 
#line 5550 
                                                         goto ldv_50133;
  ldv_50133: 
#line 5551 
  ;
  
#line 5599 
  if (ret == 0 || ret == -12) 
#line 5600 
                              ret = (int)nfilters; else ;
  
#line 5601 
  __retres = ret;
  return_label: 
#line 5601 
                return __retres;
}


#line 5623  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_change_mac(struct adapter *adap, unsigned int mbox, unsigned int viid, int idx, u8 const *addr, bool persist, bool add_smt)
{
  int ret;
  int mode;
  struct fw_vi_mac_cmd c;
  
#line 5628 
  struct fw_vi_mac_exact *p = (struct fw_vi_mac_exact *)(& c.u.exact);
  
#line 5629 
  unsigned int max_mac_addr = (unsigned int)adap->params.arch.mps_tcam_size;
  
#line 5631 
  if (idx < 0) 
    
#line 5632 
    if ((int)persist != 0) 
#line 5632 
                           idx = 1022; else 
#line 5632 
                                            idx = 1023;
  else ;
  
#line 5633 
  if ((int)add_smt != 0) 
#line 5633 
                         mode = 3; else 
#line 5633 
                                        mode = 0;
  
#line 5635 
  memset((void *)(& c),0,64UL);
  
#line 5636 
  if (0 != 0) 
#line 5636 
              c.op_to_viid = ((((viid << 24) | ((viid << 8) & 16711680U)) | ((viid >> 8) & 24320U)) | (viid >> 24)) | 40981U; else 
                                                                    
#line 5636 
                                                                    c.op_to_viid = __fswab32(viid | 362807296U);
  
#line 5639 
  c.freemacs_to_len16 = 16777216U;
  
#line 5640 
  if (0 != 0) 
#line 5640 
              p->valid_to_idx = (unsigned short)((unsigned int)((int)((unsigned short)((int)((unsigned int)(((int)((unsigned short)mode) << 10U) | (int)((unsigned short)idx)) | 32768U) << 8)) | ((((int)((unsigned short)mode) << 10U) | (int)((unsigned short)idx)) >> 8)) | 128U); else 
                                                                    
#line 5640 
                                                                    p->valid_to_idx = __fswab16((unsigned short)((int)((unsigned int)(((int)((unsigned short)mode) << 10U) | (int)((unsigned short)idx)) | 32768U)));
  
#line 5643 
  memcpy((void *)(& p->macaddr),(void const *)addr,6UL);
  
#line 5645 
  ret = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),64,(void *)(& c));
  
#line 5646 
  if (ret == 0) {
    
#line 5647 
    if (0 != 0) 
#line 5647 
                ret = (int)((unsigned short)(((int)p->valid_to_idx << 8) | ((int)p->valid_to_idx >> 8))) & 1023;
    else {
      __u16 tmp_1;
      
#line 5647 
      tmp_1 = __fswab16((unsigned short)((int)p->valid_to_idx));
      
#line 5647 
      ret = (int)tmp_1 & 1023;
    }
    
#line 5648 
    if ((unsigned int)ret >= max_mac_addr) 
#line 5649 
                                           ret = -12; else ;
  }
  else ;
  
#line 5651 
  return ret;
}


#line 5665  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_set_addr_hash(struct adapter *adap, unsigned int mbox, unsigned int viid, bool ucast, u64 vec, bool sleep_ok)
{
  struct fw_vi_mac_cmd c;
  int tmp_2;
  
#line 5670 
  memset((void *)(& c),0,64UL);
  
#line 5671 
  if (0 != 0) 
#line 5671 
              c.op_to_viid = ((((viid << 24) | ((viid << 8) & 16711680U)) | ((viid >> 8) & 24320U)) | (viid >> 24)) | 40981U; else 
                                                                    
#line 5671 
                                                                    c.op_to_viid = __fswab32(viid | 362807296U);
  
#line 5674 
  if (0 != 0) 
#line 5674 
              c.freemacs_to_len16 = ((((unsigned int)((int)ucast << 22) >> 8) & 32512U) | ((unsigned int)((int)ucast << 22) >> 24)) | 16809984U; else 
                                                                    
#line 5674 
                                                                    c.freemacs_to_len16 = __fswab32((unsigned int)((int)ucast << 22) | 8388609U);
  
#line 5677 
  if (0 != 0) 
#line 5677 
              c.u.hash.hashvec = (((((((vec << 56) | ((vec << 40) & 71776119061217280ULL)) | ((vec << 24) & 280375465082880ULL)) | ((vec << 8) & 1095216660480ULL)) | ((vec >> 8) & 4278190080ULL)) | ((vec >> 24) & 16711680ULL)) | ((vec >> 40) & 65280ULL)) | (vec >> 56); else 
                                                                    
#line 5677 
                                                                    c.u.hash.hashvec = __fswab64(vec);
  
#line 5678 
  tmp_2 = t4_wr_mbox_meat(adap,(int)mbox,(void const *)(& c),64,(void *)0,(_Bool)((bool)((int)sleep_ok) != 0));
  
#line 5678 
  return tmp_2;
}


#line 5693  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_enable_vi_params(struct adapter *adap, unsigned int mbox, unsigned int viid, bool rx_en, bool tx_en, bool dcb_en)
{
  struct fw_vi_enable_cmd c;
  int tmp_1;
  
#line 5698 
  memset((void *)(& c),0,16UL);
  
#line 5699 
  if (0 != 0) 
#line 5699 
              c.op_to_viid = ((((viid << 24) | ((viid << 8) & 16711680U)) | ((viid >> 8) & 28416U)) | (viid >> 24)) | 36887U; else 
                                                                    
#line 5699 
                                                                    c.op_to_viid = __fswab32(viid | 395313152U);
  
#line 5702 
  if (0 != 0) 
#line 5702 
              c.ien_to_len16 = (((((unsigned int)((((int)rx_en << 31) | ((int)tx_en << 30)) | ((int)dcb_en << 28)) << 24) | (((unsigned int)((((int)rx_en << 31) | ((int)tx_en << 30)) | ((int)dcb_en << 28)) << 8) & 16711680U)) | (((unsigned int)((((int)rx_en << 31) | ((int)tx_en << 30)) | ((int)dcb_en << 28)) >> 8) & 65280U)) | ((unsigned int)((((int)rx_en << 31) | ((int)tx_en << 30)) | ((int)dcb_en << 28)) >> 24)) | 16777216U; else 
                                                                    
#line 5702 
                                                                    c.ien_to_len16 = __fswab32((unsigned int)(((((int)rx_en << 31) | ((int)tx_en << 30)) | ((int)dcb_en << 28)) | 1));
  
#line 5706 
  tmp_1 = t4_wr_mbox_ns(adap,(int)mbox,(void const *)(& c),16,(void *)0);
  
#line 5706 
  return tmp_1;
}


#line 5719  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_enable_vi(struct adapter *adap, unsigned int mbox, unsigned int viid, bool rx_en, bool tx_en)
{
  int tmp;
  
#line 5722 
  tmp = t4_enable_vi_params(adap,mbox,viid,(_Bool)((bool)((int)rx_en) != 0),(_Bool)((bool)((int)tx_en) != 0),(_Bool)0);
  
#line 5722 
  return tmp;
}


#line 5734  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_identify_port(struct adapter *adap, unsigned int mbox, unsigned int viid, unsigned int nblinks)
{
  struct fw_vi_enable_cmd c;
  int tmp_1;
  
#line 5739 
  memset((void *)(& c),0,16UL);
  
#line 5740 
  if (0 != 0) 
#line 5740 
              c.op_to_viid = ((((viid << 24) | ((viid << 8) & 16711680U)) | ((viid >> 8) & 28416U)) | (viid >> 24)) | 36887U; else 
                                                                    
#line 5740 
                                                                    c.op_to_viid = __fswab32(viid | 395313152U);
  
#line 5743 
  c.ien_to_len16 = 16777248U;
  
#line 5744 
  if (0 != 0) 
#line 5744 
              c.blinkdur = (unsigned short)(((int)((unsigned short)nblinks) << 8) | ((int)((unsigned short)nblinks) >> 8)); else 
                                                                    
#line 5744 
                                                                    c.blinkdur = __fswab16((unsigned short)((int)((unsigned short)nblinks)));
  
#line 5745 
  tmp_1 = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),16,(void *)0);
  
#line 5745 
  return tmp_1;
}


#line 5761  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_iq_free(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int iqtype, unsigned int iqid, unsigned int fl0id, unsigned int fl1id)
{
  struct fw_iq_cmd c;
  int tmp_4;
  
#line 5767 
  memset((void *)(& c),0,64UL);
  
#line 5768 
  if (0 != 0) 
#line 5768 
              c.op_to_vfn = ((((((pf << 8) | vf) << 24) | ((((pf << 8) | vf) << 8) & 16711680U)) | ((((pf << 8) | vf) >> 8) & 28416U)) | (((pf << 8) | vf) >> 24)) | 36880U; else 
                                                                    
#line 5768 
                                                                    c.op_to_vfn = __fswab32(((pf << 8) | vf) | 277872640U);
  
#line 5771 
  c.alloc_to_len16 = 67108928U;
  
#line 5772 
  if (0 != 0) 
#line 5772 
              c.type_to_iqandstindex = (iqtype << 29) >> 24; else 
#line 5772 
                                                                  c.type_to_iqandstindex = __fswab32(iqtype << 29);
  
#line 5773 
  if (0 != 0) 
#line 5773 
              c.iqid = (unsigned short)(((int)((unsigned short)iqid) << 8) | ((int)((unsigned short)iqid) >> 8)); else 
                                                                    
#line 5773 
                                                                    c.iqid = __fswab16((unsigned short)((int)((unsigned short)iqid)));
  
#line 5774 
  if (0 != 0) 
#line 5774 
              c.fl0id = (unsigned short)(((int)((unsigned short)fl0id) << 8) | ((int)((unsigned short)fl0id) >> 8)); else 
                                                                    
#line 5774 
                                                                    c.fl0id = __fswab16((unsigned short)((int)((unsigned short)fl0id)));
  
#line 5775 
  if (0 != 0) 
#line 5775 
              c.fl1id = (unsigned short)(((int)((unsigned short)fl1id) << 8) | ((int)((unsigned short)fl1id) >> 8)); else 
                                                                    
#line 5775 
                                                                    c.fl1id = __fswab16((unsigned short)((int)((unsigned short)fl1id)));
  
#line 5776 
  tmp_4 = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),64,(void *)0);
  
#line 5776 
  return tmp_4;
}


#line 5789  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_eth_eq_free(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int eqid)
{
  struct fw_eq_eth_cmd c;
  int tmp_1;
  
#line 5794 
  memset((void *)(& c),0,48UL);
  
#line 5795 
  if (0 != 0) 
#line 5795 
              c.op_to_vfn = ((((((pf << 8) | vf) << 24) | ((((pf << 8) | vf) << 8) & 16711680U)) | ((((pf << 8) | vf) >> 8) & 28416U)) | (((pf << 8) | vf) >> 24)) | 36882U; else 
                                                                    
#line 5795 
                                                                    c.op_to_vfn = __fswab32(((pf << 8) | vf) | 311427072U);
  
#line 5799 
  c.alloc_to_len16 = 50331712U;
  
#line 5800 
  if (0 != 0) 
#line 5800 
              c.eqid_pkd = (((eqid << 24) | ((eqid << 8) & 16711680U)) | ((eqid >> 8) & 65280U)) | (eqid >> 24); else 
                                                                    
#line 5800 
                                                                    c.eqid_pkd = __fswab32(eqid);
  
#line 5801 
  tmp_1 = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),48,(void *)0);
  
#line 5801 
  return tmp_1;
}


#line 5814  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_ctrl_eq_free(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int eqid)
{
  struct fw_eq_ctrl_cmd c;
  int tmp_1;
  
#line 5819 
  memset((void *)(& c),0,32UL);
  
#line 5820 
  if (0 != 0) 
#line 5820 
              c.op_to_vfn = ((((((pf << 8) | vf) << 24) | ((((pf << 8) | vf) << 8) & 16711680U)) | ((((pf << 8) | vf) >> 8) & 28416U)) | (((pf << 8) | vf) >> 24)) | 36883U; else 
                                                                    
#line 5820 
                                                                    c.op_to_vfn = __fswab32(((pf << 8) | vf) | 328204288U);
  
#line 5824 
  c.alloc_to_len16 = 33554496U;
  
#line 5825 
  if (0 != 0) 
#line 5825 
              c.cmpliqid_eqid = (((eqid << 24) | ((eqid << 8) & 16711680U)) | ((eqid >> 8) & 65280U)) | (eqid >> 24); else 
                                                                    
#line 5825 
                                                                    c.cmpliqid_eqid = __fswab32(eqid);
  
#line 5826 
  tmp_1 = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),32,(void *)0);
  
#line 5826 
  return tmp_1;
}


#line 5839  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_ofld_eq_free(struct adapter *adap, unsigned int mbox, unsigned int pf, unsigned int vf, unsigned int eqid)
{
  struct fw_eq_ofld_cmd c;
  int tmp_1;
  
#line 5844 
  memset((void *)(& c),0,32UL);
  
#line 5845 
  if (0 != 0) 
#line 5845 
              c.op_to_vfn = ((((((pf << 8) | vf) << 24) | ((((pf << 8) | vf) << 8) & 16711680U)) | ((((pf << 8) | vf) >> 8) & 28416U)) | (((pf << 8) | vf) >> 24)) | 36897U; else 
                                                                    
#line 5845 
                                                                    c.op_to_vfn = __fswab32(((pf << 8) | vf) | 563085312U);
  
#line 5849 
  c.alloc_to_len16 = 33554496U;
  
#line 5850 
  if (0 != 0) 
#line 5850 
              c.eqid_pkd = (((eqid << 24) | ((eqid << 8) & 16711680U)) | ((eqid >> 8) & 65280U)) | (eqid >> 24); else 
                                                                    
#line 5850 
                                                                    c.eqid_pkd = __fswab32(eqid);
  
#line 5851 
  tmp_1 = t4_wr_mbox(adap,(int)mbox,(void const *)(& c),32,(void *)0);
  
#line 5851 
  return tmp_1;
}


#line 5861  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_handle_fw_rpl(struct adapter *adap, __be64 const *rpl)
{
  int __retres;
  
#line 5863 
  u8 opcode = *((u8 const *)rpl);
  
#line 5865 
  if ((unsigned int)opcode == 27U) {
    unsigned int tmp_0;
    unsigned int tmp_3;
    
#line 5866 
    int speed = 0;
    
#line 5866 
    int fc = 0;
    
#line 5867 
    struct fw_port_cmd const *p = (struct fw_port_cmd const *)rpl;
    
#line 5868 
    if (0 != 0) 
#line 5868 
                tmp_0 = ((((p->op_to_portid << 24) | ((p->op_to_portid << 8) & 16711680U)) | ((p->op_to_portid >> 8) & 65280U)) | (p->op_to_portid >> 24)) & 15U;
    else {
      __u32 tmp;
      
#line 5868 
      tmp = __fswab32(p->op_to_portid);
      
#line 5868 
      tmp_0 = tmp & 15U;
    }
    
#line 5868 
    int chan = (int)tmp_0;
    
#line 5869 
    int port = (int)adap->chan_map[chan];
    
#line 5870 
    struct port_info *pi = adap2pinfo(adap,port);
    
#line 5871 
    struct link_config *lc = & pi->link_cfg;
    
#line 5872 
    if (0 != 0) 
#line 5872 
                tmp_3 = (((p->u.info.lstatus_to_modtype << 24) | ((p->u.info.lstatus_to_modtype << 8) & 16711680U)) | ((p->u.info.lstatus_to_modtype >> 8) & 65280U)) | (p->u.info.lstatus_to_modtype >> 24); else 
                                                                    
#line 5872 
                                                                    tmp_3 = __fswab32(p->u.info.lstatus_to_modtype);
    
#line 5872 
    u32 stat = tmp_3;
    
#line 5873 
    int link_ok = stat < (u32)0;
    
#line 5874 
    u32 mod = stat & 31U;
    
#line 5876 
    if ((stat & 4194304U) != 0U) 
#line 5877 
                                 fc |= 1; else ;
    
#line 5878 
    if ((stat & 8388608U) != 0U) 
#line 5879 
                                 fc |= 2; else ;
    
#line 5880 
    if ((stat & 16777216U) != 0U) 
#line 5881 
                                  speed = 100;
    else 
      
#line 5882 
      if ((stat & 33554432U) != 0U) 
#line 5883 
                                    speed = 1000;
      else 
        
#line 5884 
        if ((stat & 134217728U) != 0U) 
#line 5885 
                                       speed = 10000;
        else 
          
#line 5886 
          if ((stat & 268435456U) != 0U) 
#line 5887 
                                         speed = 40000; else ;
    
#line 5889 
    if (((int)lc->link_ok != link_ok || (int)lc->speed != speed) || (int)lc->fc != fc) {
      
#line 5891 
      lc->link_ok = (unsigned char)link_ok;
      
#line 5892 
      lc->speed = (unsigned short)speed;
      
#line 5893 
      lc->fc = (unsigned char)fc;
      
#line 5894 
      if (0 != 0) 
#line 5894 
                  lc->supported = (unsigned short)(((int)p->u.info.pcap << 8) | ((int)p->u.info.pcap >> 8)); else 
                                                                    
#line 5894 
                                                                    lc->supported = __fswab16((unsigned short)((int)p->u.info.pcap));
      
#line 5895 
      t4_os_link_changed(adap,port,link_ok);
    }
    else ;
    
#line 5897 
    if ((unsigned int)pi->mod_type != mod) {
      
#line 5898 
      pi->mod_type = (unsigned char)mod;
      
#line 5899 
      t4_os_portmod_changed((struct adapter const *)adap,port);
    }
    else ;
  }
  else ;
  
#line 5902 
  __retres = 0;
  
#line 5902 
  return __retres;
}


#line 5905  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void get_pci_mode(struct adapter *adapter, struct pci_params *p)
{
  u16 val;
  bool tmp;
  
#line 5909 
  tmp = pci_is_pcie(adapter->pdev);
  
#line 5909 
  if ((int)tmp != 0) {
    
#line 5910 
    pcie_capability_read_word(adapter->pdev,18,& val);
    
#line 5911 
    p->speed = (unsigned char)((unsigned int)((unsigned char)val) & 15U);
    
#line 5912 
    p->width = (unsigned char)((unsigned int)((unsigned char)((int)val >> 4)) & 63U);
  }
  else ;
  
#line 5914 
  return;
}


#line 5924  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void init_link_config(struct link_config *lc, unsigned int caps)
{
  unsigned char tmp;
  
#line 5926 
  lc->supported = (unsigned short)caps;
  
#line 5927 
  lc->requested_speed = (unsigned short)0U;
  
#line 5928 
  lc->speed = (unsigned short)0U;
  
#line 5929 
  tmp = (unsigned char)3U;
  
#line 5929 
  lc->fc = tmp;
  
#line 5929 
  lc->requested_fc = tmp;
  
#line 5930 
  if (((int)lc->supported & 256) != 0) {
    
#line 5931 
    lc->advertising = (unsigned short)((unsigned int)lc->supported & 283U);
    
#line 5932 
    lc->autoneg = (unsigned char)1U;
    
#line 5933 
    lc->requested_fc = (unsigned char)((unsigned int)lc->requested_fc | 4U);
  }
  else {
    
#line 5935 
    lc->advertising = (unsigned short)0U;
    
#line 5936 
    lc->autoneg = (unsigned char)0U;
  }
  
#line 5938 
  return;
}


#line 5942  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_wait_dev_ready(void *regs)
{
  int __retres;
  u32 whoami;
  int tmp;
  
#line 5946 
  whoami = readl((void const volatile *)(regs + 103424U));
  
#line 5947 
  if (whoami != 4294967295U && whoami != 4008636142U) {
    
#line 5948 
    __retres = 0;
    
#line 5948 
    goto return_label;
  }
  else ;
  
#line 5950 
  msleep(500U);
  
#line 5951 
  whoami = readl((void const volatile *)(regs + 103424U));
  
#line 5952 
  if (whoami != 4294967295U && whoami != 4008636142U) 
#line 5952 
                                                      tmp = 0; else 
#line 5952 
                                                                    tmp = -5;
  
#line 5952 
  __retres = tmp;
  return_label: 
#line 5952 
                return __retres;
}


#line 5960  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static int get_flash_params(struct adapter *adap)
{
  int __retres;
  int ret;
  u32 info;
  u32 tmp;
  
#line 5965 
  struct flash_desc supported_flash[1U] = {{.vendor_and_model_id = 1376769U, .size_mb = 4194304U}};
  
#line 5972 
  ret = sf1_write(adap,1U,1,0,159U);
  
#line 5973 
  if (ret == 0) 
#line 5974 
                ret = sf1_read(adap,3U,0,1,& info); else ;
  
#line 5975 
  t4_write_reg(adap,103420U,0U);
  
#line 5976 
  if (ret != 0) {
    
#line 5977 
    __retres = ret;
    
#line 5977 
    goto return_label;
  }
  else ;
  
#line 5979 
  ret = 0;
  
#line 5979 
  goto ldv_50262;
  ldv_50261: 
#line 5980 
  ;
  
#line 5980 
  if (supported_flash[ret].vendor_and_model_id == info) {
    
#line 5981 
    adap->params.sf_size = supported_flash[ret].size_mb;
    
#line 5982 
    adap->params.sf_nsec = adap->params.sf_size / 65536U;
    
#line 5984 
    __retres = 0;
    
#line 5984 
    goto return_label;
  }
  else ;
  
#line 5979 
  ret += 1;
  ldv_50262: 
#line 5980 
  ;
  
#line 5979 
  if (ret == 0) 
#line 5981 
                goto ldv_50261; else 
#line 5984 
                                     goto ldv_50263;
  ldv_50263: 
#line 5985 
  ;
  
#line 5987 
  if ((info & 255U) != 32U) {
    
#line 5988 
    __retres = -22;
    
#line 5988 
    goto return_label;
  }
  else ;
  
#line 5989 
  info >>= 16;
  
#line 5990 
  if (info + 4294967276U <= 3U) 
#line 5991 
                                adap->params.sf_nsec = (unsigned int)(1 << (info + 4294967280U));
  else 
    
#line 5992 
    if (info == 24U) 
#line 5993 
                     adap->params.sf_nsec = 64U;
    else {
      
#line 5995 
      __retres = -22;
      
#line 5995 
      goto return_label;
    }
  
#line 5996 
  adap->params.sf_size = (unsigned int)(1 << info);
  
#line 5997 
  tmp = t4_read_reg(adap,31488U);
  
#line 5997 
  adap->params.sf_fw_start = tmp & 4294967040U;
  
#line 6000 
  if (adap->params.sf_size <= 2097151U) 
#line 6001 
                                        dev_warn((struct device const *)adap->pdev_dev,"WARNING!!! FLASH size %#x < %#x!!!\n",adap->params.sf_size,2097152); else ;
  
#line 6003 
  __retres = 0;
  return_label: 
#line 6003 
                return __retres;
}


#line 6006  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static void set_pcie_completion_timeout(struct adapter *adapter, u8 range)
{
  u16 val;
  u32 pcie_cap;
  int tmp;
  
#line 6011 
  tmp = pci_find_capability(adapter->pdev,16);
  
#line 6011 
  pcie_cap = (unsigned int)tmp;
  
#line 6012 
  if (pcie_cap != 0U) {
    
#line 6013 
    pci_read_config_word((struct pci_dev const *)adapter->pdev,(int)(pcie_cap + 40U),& val);
    
#line 6015 
    val = (unsigned short)((unsigned int)val & 65520U);
    
#line 6016 
    val = (unsigned short)((int)((unsigned short)range) | (int)val);
    
#line 6017 
    pci_write_config_word((struct pci_dev const *)adapter->pdev,(int)(pcie_cap + 40U),(unsigned short)((int)val));
  }
  else ;
  
#line 6020 
  return;
}


#line 6031  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_prep_adapter(struct adapter *adapter)
{
  int __retres;
  int ret;
  int ver;
  uint16_t device_id;
  u32 pl_rev;
  u32 tmp;
  
#line 6037 
  get_pci_mode(adapter,& adapter->params.pci);
  
#line 6038 
  tmp = t4_read_reg(adapter,103484U);
  
#line 6038 
  pl_rev = tmp & 15U;
  
#line 6040 
  ret = get_flash_params(adapter);
  
#line 6041 
  if (ret < 0) {
    
#line 6042 
    dev_err((struct device const *)adapter->pdev_dev,"error %d identifying flash\n",ret);
    
#line 6043 
    __retres = ret;
    
#line 6043 
    goto return_label;
  }
  else ;
  
#line 6048 
  pci_read_config_word((struct pci_dev const *)adapter->pdev,2,& device_id);
  
#line 6049 
  ver = (int)device_id >> 12;
  
#line 6050 
  adapter->params.chip = (enum chip_type)0;
  
#line 6051 
  switch (ver) {
    case 4: 
#line 6052 
    ;
    
#line 6053 
    adapter->params.chip = (enum chip_type)(((unsigned int)adapter->params.chip | pl_rev) | 64U);
    
#line 6054 
    adapter->params.arch.sge_fl_db = 16384U;
    
#line 6055 
    adapter->params.arch.mps_tcam_size = (unsigned short)336U;
    
#line 6057 
    adapter->params.arch.mps_rplc_size = (unsigned short)128U;
    
#line 6058 
    adapter->params.arch.nchan = (unsigned char)4U;
    
#line 6059 
    adapter->params.arch.vfcount = (unsigned short)128U;
    
#line 6060 
    goto ldv_50278;
    case 5: 
#line 6061 
    ;
    
#line 6062 
    adapter->params.chip = (enum chip_type)(((unsigned int)adapter->params.chip | pl_rev) | 80U);
    
#line 6063 
    adapter->params.arch.sge_fl_db = 24576U;
    
#line 6064 
    adapter->params.arch.mps_tcam_size = (unsigned short)512U;
    
#line 6066 
    adapter->params.arch.mps_rplc_size = (unsigned short)128U;
    
#line 6067 
    adapter->params.arch.nchan = (unsigned char)4U;
    
#line 6068 
    adapter->params.arch.vfcount = (unsigned short)128U;
    
#line 6069 
    goto ldv_50278;
    case 6: 
#line 6070 
    ;
    
#line 6071 
    adapter->params.chip = (enum chip_type)(((unsigned int)adapter->params.chip | pl_rev) | 96U);
    
#line 6072 
    adapter->params.arch.sge_fl_db = 0U;
    
#line 6073 
    adapter->params.arch.mps_tcam_size = (unsigned short)512U;
    
#line 6075 
    adapter->params.arch.mps_rplc_size = (unsigned short)256U;
    
#line 6076 
    adapter->params.arch.nchan = (unsigned char)2U;
    
#line 6077 
    adapter->params.arch.vfcount = (unsigned short)256U;
    
#line 6078 
    goto ldv_50278;
    default: 
#line 6079 
    ;
    
#line 6080 
    dev_err((struct device const *)adapter->pdev_dev,"Device %d is not supported\n",(int)device_id);
    
#line 6082 
    __retres = -22;
    
#line 6082 
    goto return_label;
  }
  ldv_50278: 
#line 6085 
  ;
  
#line 6085 
  adapter->params.cim_la_size = 2048U;
  
#line 6086 
  init_cong_ctrl((unsigned short *)(& adapter->params.a_wnd),(unsigned short *)(& adapter->params.b_wnd));
  
#line 6091 
  adapter->params.nports = (unsigned char)1U;
  
#line 6092 
  adapter->params.portvec = (unsigned char)1U;
  
#line 6093 
  adapter->params.vpd.cclk = 50000U;
  
#line 6096 
  set_pcie_completion_timeout(adapter,(unsigned char)13);
  
#line 6097 
  __retres = 0;
  return_label: 
#line 6097 
                return __retres;
}


#line 6126  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_bar2_sge_qregs(struct adapter *adapter, unsigned int qid, enum t4_bar2_qtype qtype, int user, u64 *pbar2_qoffset, unsigned int *pbar2_qid)
{
  int __retres;
  unsigned int page_shift;
  unsigned int page_size;
  unsigned int qpp_shift;
  unsigned int qpp_mask;
  u64 bar2_page_offset;
  u64 bar2_qoffset;
  unsigned int bar2_qid;
  unsigned int bar2_qid_offset;
  unsigned int bar2_qinferred;
  
#line 6138 
  if (user == 0) {
    int tmp;
    
#line 6138 
    tmp = is_t4(adapter->params.chip);
    
#line 6138 
    if (tmp != 0) {
      
#line 6139 
      __retres = -22;
      
#line 6139 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 6143 
  page_shift = adapter->params.sge.hps + 10U;
  
#line 6144 
  page_size = (unsigned int)(1 << page_shift);
  
#line 6148 
  if (qtype == (unsigned int)T4_BAR2_QTYPE_EGRESS) 
#line 6148 
                                                   qpp_shift = adapter->params.sge.eq_qpp; else 
                                                                    
#line 6148 
                                                                    qpp_shift = adapter->params.sge.iq_qpp;
  
#line 6151 
  qpp_mask = (unsigned int)((1 << qpp_shift) + -1);
  
#line 6158 
  bar2_page_offset = (unsigned long long)(qid >> qpp_shift) << page_shift;
  
#line 6159 
  bar2_qid = qid & qpp_mask;
  
#line 6160 
  bar2_qid_offset = bar2_qid * 128U;
  
#line 6178 
  bar2_qoffset = bar2_page_offset;
  
#line 6179 
  bar2_qinferred = (unsigned int)(bar2_qid_offset < page_size);
  
#line 6180 
  if (bar2_qinferred != 0U) {
    
#line 6181 
    bar2_qoffset = (unsigned long long)bar2_qid_offset + bar2_qoffset;
    
#line 6182 
    bar2_qid = 0U;
  }
  else ;
  
#line 6185 
  *pbar2_qoffset = bar2_qoffset;
  
#line 6186 
  *pbar2_qid = bar2_qid;
  
#line 6187 
  __retres = 0;
  return_label: 
#line 6187 
                return __retres;
}


#line 6197  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_init_devlog_params(struct adapter *adap)
{
  int __retres;
  u32 pf_dparams;
  unsigned int devlog_meminfo;
  struct fw_devlog_cmd devlog_cmd;
  int ret;
  
#line 6199 
  struct devlog_params *dparams = & adap->params.devlog;
  
#line 6209 
  pf_dparams = t4_read_reg(adap,12504U);
  
#line 6211 
  if (pf_dparams != 0U) {
    unsigned int nentries;
    unsigned int nentries128;
    
#line 6214 
    dparams->memtype = pf_dparams & 15U;
    
#line 6215 
    dparams->start = pf_dparams & 268435440U;
    
#line 6217 
    nentries128 = pf_dparams >> 28;
    
#line 6218 
    nentries = (nentries128 + 1U) * 128U;
    
#line 6219 
    dparams->size = nentries * 256U;
    
#line 6221 
    __retres = 0;
    
#line 6221 
    goto return_label;
  }
  else ;
  
#line 6226 
  memset((void *)(& devlog_cmd),0,32UL);
  
#line 6227 
  devlog_cmd.op_to_write = 49189U;
  
#line 6229 
  devlog_cmd.retval_len16 = 33554432U;
  
#line 6230 
  ret = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& devlog_cmd),32,(void *)(& devlog_cmd));
  
#line 6232 
  if (ret != 0) {
    
#line 6233 
    __retres = ret;
    
#line 6233 
    goto return_label;
  }
  else ;
  
#line 6235 
  if (0 != 0) 
#line 6235 
              devlog_meminfo = (((devlog_cmd.memtype_devlog_memaddr16_devlog << 24) | ((devlog_cmd.memtype_devlog_memaddr16_devlog << 8) & 16711680U)) | ((devlog_cmd.memtype_devlog_memaddr16_devlog >> 8) & 65280U)) | (devlog_cmd.memtype_devlog_memaddr16_devlog >> 24); else 
                                                                    
#line 6236 
                                                                    devlog_meminfo = __fswab32(devlog_cmd.memtype_devlog_memaddr16_devlog);
  
#line 6237 
  dparams->memtype = devlog_meminfo >> 28;
  
#line 6238 
  dparams->start = devlog_meminfo << 4;
  
#line 6239 
  if (0 != 0) 
#line 6239 
              dparams->size = (((devlog_cmd.memsize_devlog << 24) | ((devlog_cmd.memsize_devlog << 8) & 16711680U)) | ((devlog_cmd.memsize_devlog >> 8) & 65280U)) | (devlog_cmd.memsize_devlog >> 24); else 
                                                                    
#line 6239 
                                                                    dparams->size = __fswab32(devlog_cmd.memsize_devlog);
  
#line 6241 
  __retres = 0;
  return_label: 
#line 6241 
                return __retres;
}


#line 6250  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_init_sge_params(struct adapter *adapter)
{
  int __retres;
  u32 hps;
  u32 qpp;
  unsigned int s_hps;
  unsigned int s_qpp;
  
#line 6252 
  struct sge_params *sge_params = & adapter->params.sge;
  
#line 6258 
  hps = t4_read_reg(adapter,4108U);
  
#line 6259 
  s_hps = adapter->pf * 4U;
  
#line 6261 
  sge_params->hps = (hps >> s_hps) & 15U;
  
#line 6265 
  s_qpp = adapter->pf * 4U;
  
#line 6267 
  qpp = t4_read_reg(adapter,4112U);
  
#line 6268 
  sge_params->eq_qpp = (qpp >> s_qpp) & 15U;
  
#line 6269 
  qpp = t4_read_reg(adapter,4340U);
  
#line 6270 
  sge_params->iq_qpp = (qpp >> s_qpp) & 15U;
  
#line 6272 
  __retres = 0;
  
#line 6272 
  return __retres;
}


#line 6281  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_init_tp_params(struct adapter *adap)
{
  int __retres;
  int chan;
  u32 v;
  
#line 6286 
  v = t4_read_reg(adap,32144U);
  
#line 6287 
  adap->params.tp.tre = (v >> 16) & 255U;
  
#line 6288 
  adap->params.tp.dack_re = v & 255U;
  
#line 6291 
  chan = 0;
  
#line 6291 
  goto ldv_50323;
  ldv_50322: 
#line 6292 
  ;
  
#line 6292 
  adap->params.tp.tx_modq[chan] = (unsigned short)chan;
  
#line 6291 
  chan += 1;
  ldv_50323: 
#line 6292 
  ;
  
#line 6291 
  if (chan <= 3) 
#line 6293 
                 goto ldv_50322; else 
#line 6296 
                                      goto ldv_50324;
  ldv_50324: 
#line 6297 
  ;
  
#line 6297 
  if ((adap->flags & 16U) != 0U) {
    
#line 6298 
    t4_fw_tp_pio_rw(adap,& adap->params.tp.vlan_pri_map,1U,320U,1U);
    
#line 6300 
    t4_fw_tp_pio_rw(adap,& adap->params.tp.ingress_config,1U,321U,1U);
  }
  else {
    
#line 6303 
    t4_read_indirect(adap,32320U,32324U,& adap->params.tp.vlan_pri_map,1U,320U);
    
#line 6306 
    t4_read_indirect(adap,32320U,32324U,& adap->params.tp.ingress_config,1U,321U);
  }
  
#line 6315 
  adap->params.tp.vlan_shift = t4_filter_field_shift((struct adapter const *)adap,8);
  
#line 6316 
  adap->params.tp.vnic_shift = t4_filter_field_shift((struct adapter const *)adap,4);
  
#line 6317 
  adap->params.tp.port_shift = t4_filter_field_shift((struct adapter const *)adap,2);
  
#line 6318 
  adap->params.tp.protocol_shift = t4_filter_field_shift((struct adapter const *)adap,32);
  
#line 6324 
  if ((adap->params.tp.ingress_config & 2048U) == 0U) 
#line 6325 
                                                      adap->params.tp.vnic_shift = -1; else ;
  
#line 6327 
  __retres = 0;
  
#line 6327 
  return __retres;
}


#line 6339  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_filter_field_shift(struct adapter const *adap, int filter_sel)
{
  int __retres;
  unsigned int sel;
  int field_shift;
  
#line 6341 
  unsigned int filter_mode = adap->params.tp.vlan_pri_map;
  
#line 6345 
  if ((filter_mode & (unsigned int)filter_sel) == 0U) {
    
#line 6346 
    __retres = -1;
    
#line 6346 
    goto return_label;
  }
  else ;
  
#line 6348 
  sel = 1U;
  
#line 6348 
  field_shift = 0;
  
#line 6348 
  goto ldv_50344;
  ldv_50343: 
#line 6349 
  ;
  
#line 6349 
  switch (filter_mode & sel) {
    case (unsigned int)1: 
#line 6350 
    ;
    
#line 6351 
    field_shift += 1;
    
#line 6352 
    goto ldv_50333;
    case (unsigned int)2: 
#line 6353 
    ;
    
#line 6354 
    field_shift += 3;
    
#line 6355 
    goto ldv_50333;
    case (unsigned int)4: 
#line 6356 
    ;
    
#line 6357 
    field_shift += 17;
    
#line 6358 
    goto ldv_50333;
    case (unsigned int)8: 
#line 6359 
    ;
    
#line 6360 
    field_shift += 17;
    
#line 6361 
    goto ldv_50333;
    case (unsigned int)16: 
#line 6362 
    ;
    
#line 6363 
    field_shift += 8;
    
#line 6364 
    goto ldv_50333;
    case (unsigned int)32: 
#line 6365 
    ;
    
#line 6366 
    field_shift += 8;
    
#line 6367 
    goto ldv_50333;
    case (unsigned int)64: 
#line 6368 
    ;
    
#line 6369 
    field_shift += 16;
    
#line 6370 
    goto ldv_50333;
    case (unsigned int)128: 
#line 6371 
    ;
    
#line 6372 
    field_shift += 9;
    
#line 6373 
    goto ldv_50333;
    case (unsigned int)256: 
#line 6374 
    ;
    
#line 6375 
    field_shift += 3;
    
#line 6376 
    goto ldv_50333;
    case (unsigned int)512: 
#line 6377 
    ;
    
#line 6378 
    field_shift += 1;
    
#line 6379 
    goto ldv_50333;
  }
  ldv_50333: 
#line 6381 
  ;
  
#line 6348 
  sel <<= 1;
  ldv_50344: 
#line 6349 
  ;
  
#line 6348 
  if (sel < (unsigned int)filter_sel) 
#line 6350 
                                      goto ldv_50343; else 
#line 6353 
                                                           goto ldv_50345;
  ldv_50345: 
#line 6354 
  ;
  
#line 6382 
  __retres = field_shift;
  return_label: 
#line 6382 
                return __retres;
}


#line 6385  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_init_rss_mode(struct adapter *adap, int mbox)
{
  int __retres;
  int i;
  int ret;
  struct fw_rss_vi_config_cmd rvc;
  
#line 6390 
  memset((void *)(& rvc),0,32UL);
  
#line 6392 
  i = 0;
  
#line 6392 
  goto ldv_50355;
  ldv_50354: 
#line 6393 
  ;
  {
    
#line 6393 
    struct port_info *p = adap2pinfo(adap,i);
    
#line 6395 
    if (0 != 0) 
#line 6395 
                rvc.op_to_viid = (((unsigned int)p->viid << 24) | (((unsigned int)p->viid << 8) & 16711680U)) | 49187U; else 
                                                                    
#line 6396 
                                                                    rvc.op_to_viid = __fswab32((unsigned int)p->viid | 599785472U);
    
#line 6399 
    rvc.retval_len16 = 33554432U;
    
#line 6400 
    ret = t4_wr_mbox(adap,mbox,(void const *)(& rvc),32,(void *)(& rvc));
    
#line 6401 
    if (ret != 0) {
      
#line 6402 
      __retres = ret;
      
#line 6402 
      goto return_label;
    }
    else ;
    
#line 6403 
    if (0 != 0) 
#line 6403 
                p->rss_mode = (unsigned char)(rvc.u.basicvirtual.defaultq_to_udpen >> 24);
    else {
      __u32 tmp_1;
      
#line 6403 
      tmp_1 = __fswab32(rvc.u.basicvirtual.defaultq_to_udpen);
      
#line 6403 
      p->rss_mode = (unsigned char)tmp_1;
    }
  }
  
#line 6392 
  i += 1;
  ldv_50355: 
#line 6393 
  ;
  
#line 6392 
  if ((int)adap->params.nports > i) 
#line 6394 
                                    goto ldv_50354; else 
#line 6397 
                                                         goto ldv_50356;
  ldv_50356: 
#line 6398 
  ;
  
#line 6405 
  __retres = 0;
  return_label: 
#line 6405 
                return __retres;
}


#line 6408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_port_init(struct adapter *adap, int mbox, int pf, int vf)
{
  int __retres;
  u8 addr[6U];
  int ret;
  int i;
  struct fw_port_cmd c;
  struct fw_rss_vi_config_cmd rvc;
  
#line 6411 
  int j = 0;
  
#line 6415 
  memset((void *)(& c),0,32UL);
  
#line 6416 
  memset((void *)(& rvc),0,32UL);
  
#line 6418 
  i = 0;
  
#line 6418 
  goto ldv_50375;
  ldv_50374: 
#line 6419 
  ;
  {
    unsigned int rss_size;
    unsigned int tmp_2;
    int tmp_6;
    
#line 6420 
    struct port_info *p = adap2pinfo(adap,i);
    
#line 6422 
    goto ldv_50372;
    ldv_50371: 
#line 6423 
    ;
    
#line 6423 
    j += 1;
    ldv_50372: 
#line 6424 
    ;
    
#line 6422 
    if ((((int)adap->params.portvec >> j) & 1) == 0) 
#line 6424 
                                                     goto ldv_50371; else 
                                                                    
#line 6427 
                                                                    goto ldv_50373;
    ldv_50373: 
#line 6428 
    ;
    
#line 6425 
    if (0 != 0) 
#line 6425 
                c.op_to_portid = (((((unsigned int)j << 24) | (((unsigned int)j << 8) & 16711680U)) | (((unsigned int)j >> 8) & 16128U)) | ((unsigned int)j >> 24)) | 49179U; else 
                                                                    
#line 6425 
                                                                    c.op_to_portid = __fswab32((unsigned int)j | 465567744U);
    
#line 6428 
    c.action_to_len16 = 33555200U;
    
#line 6431 
    ret = t4_wr_mbox(adap,mbox,(void const *)(& c),32,(void *)(& c));
    
#line 6432 
    if (ret != 0) {
      
#line 6433 
      __retres = ret;
      
#line 6433 
      goto return_label;
    }
    else ;
    
#line 6435 
    ret = t4_alloc_vi(adap,(unsigned int)mbox,(unsigned int)j,(unsigned int)pf,(unsigned int)vf,1U,(u8 *)(& addr),& rss_size);
    
#line 6436 
    if (ret < 0) {
      
#line 6437 
      __retres = ret;
      
#line 6437 
      goto return_label;
    }
    else ;
    
#line 6439 
    p->viid = (unsigned short)ret;
    
#line 6440 
    p->tx_chan = (unsigned char)j;
    
#line 6441 
    p->lport = (unsigned char)j;
    
#line 6442 
    p->rss_size = (unsigned short)rss_size;
    
#line 6443 
    memcpy((void *)(adap->port[i])->dev_addr,(void const *)(& addr),6UL);
    
#line 6444 
    (adap->port[i])->dev_port = (unsigned short)j;
    
#line 6446 
    if (0 != 0) 
#line 6446 
                tmp_2 = (((c.u.info.lstatus_to_modtype << 24) | ((c.u.info.lstatus_to_modtype << 8) & 16711680U)) | ((c.u.info.lstatus_to_modtype >> 8) & 65280U)) | (c.u.info.lstatus_to_modtype >> 24); else 
                                                                    
#line 6446 
                                                                    tmp_2 = __fswab32(c.u.info.lstatus_to_modtype);
    
#line 6446 
    ret = (int)tmp_2;
    
#line 6447 
    if (((unsigned int)ret & 2097152U) != 0U) 
#line 6447 
                                              p->mdio_addr = (signed char)((int)((signed char)(ret >> 16)) & 31); else 
                                                                    
#line 6447 
                                                                    p->mdio_addr = (signed char)(-1);
    
#line 6449 
    p->port_type = (enum fw_port_type)((ret >> 8) & 31);
    
#line 6450 
    p->mod_type = (unsigned char)0U;
    
#line 6452 
    if (0 != 0) 
#line 6452 
                rvc.op_to_viid = (((unsigned int)p->viid << 24) | (((unsigned int)p->viid << 8) & 16711680U)) | 49187U; else 
                                                                    
#line 6453 
                                                                    rvc.op_to_viid = __fswab32((unsigned int)p->viid | 599785472U);
    
#line 6456 
    rvc.retval_len16 = 33554432U;
    
#line 6457 
    ret = t4_wr_mbox(adap,mbox,(void const *)(& rvc),32,(void *)(& rvc));
    
#line 6458 
    if (ret != 0) {
      
#line 6459 
      __retres = ret;
      
#line 6459 
      goto return_label;
    }
    else ;
    
#line 6460 
    if (0 != 0) 
#line 6460 
                p->rss_mode = (unsigned char)(rvc.u.basicvirtual.defaultq_to_udpen >> 24);
    else {
      __u32 tmp_4;
      
#line 6460 
      tmp_4 = __fswab32(rvc.u.basicvirtual.defaultq_to_udpen);
      
#line 6460 
      p->rss_mode = (unsigned char)tmp_4;
    }
    
#line 6462 
    if (0 != 0) 
#line 6462 
                tmp_6 = (int)((unsigned short)(((int)c.u.info.pcap << 8) | ((int)c.u.info.pcap >> 8)));
    else {
      __u16 tmp_5;
      
#line 6462 
      tmp_5 = __fswab16((unsigned short)((int)c.u.info.pcap));
      
#line 6462 
      tmp_6 = (int)tmp_5;
    }
    
#line 6462 
    ;
    
#line 6462 
    init_link_config(& p->link_cfg,(unsigned int)tmp_6);
    
#line 6463 
    j += 1;
  }
  
#line 6418 
  i += 1;
  ldv_50375: 
#line 6419 
  ;
  
#line 6418 
  if ((int)adap->params.nports > i) 
#line 6420 
                                    goto ldv_50374; else 
#line 6423 
                                                         goto ldv_50376;
  ldv_50376: 
#line 6424 
  ;
  
#line 6465 
  __retres = 0;
  return_label: 
#line 6465 
                return __retres;
}


#line 6478  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_read_cimq_cfg(struct adapter *adap, u16 *base, u16 *size, u16 *thres)
{
  unsigned int i;
  unsigned int v;
  int tmp_0;
  int tmp;
  u16 *tmp_1;
  u16 *tmp_2;
  u16 *tmp_3;
  u16 *tmp_4;
  u16 *tmp_5;
  
#line 6481 
  tmp = is_t4(adap->params.chip);
  
#line 6481 
  if (tmp != 0) 
#line 6481 
                tmp_0 = 6; else 
#line 6481 
                                tmp_0 = 8;
  
#line 6481 
  int cim_num_obq = tmp_0;
  
#line 6484 
  i = 0U;
  
#line 6484 
  goto ldv_50387;
  ldv_50386: 
#line 6485 
  ;
  
#line 6485 
  t4_write_reg(adap,31560U,i | 8U);
  
#line 6487 
  v = t4_read_reg(adap,31564U);
  
#line 6489 
  tmp_1 = base;
  
#line 6489 
  base += 1;
  
#line 6489 
  *tmp_1 = (unsigned short)(((unsigned int)((unsigned short)(v >> 16)) & 63U) * 256U);
  
#line 6490 
  tmp_2 = size;
  
#line 6490 
  size += 1;
  
#line 6490 
  *tmp_2 = (unsigned short)(((unsigned int)((unsigned short)(v >> 24)) & 63U) * 256U);
  
#line 6491 
  tmp_3 = thres;
  
#line 6491 
  thres += 1;
  
#line 6491 
  *tmp_3 = (unsigned short)(((unsigned int)((unsigned short)v) & 511U) * 8U);
  
#line 6484 
  i += 1U;
  ldv_50387: 
#line 6485 
  ;
  
#line 6484 
  if (i <= 5U) 
#line 6486 
               goto ldv_50386; else 
#line 6489 
                                    goto ldv_50388;
  ldv_50388: 
#line 6490 
  ;
  
#line 6493 
  i = 0U;
  
#line 6493 
  goto ldv_50390;
  ldv_50389: 
#line 6494 
  ;
  
#line 6494 
  t4_write_reg(adap,31560U,i | 16U);
  
#line 6496 
  v = t4_read_reg(adap,31564U);
  
#line 6498 
  tmp_4 = base;
  
#line 6498 
  base += 1;
  
#line 6498 
  *tmp_4 = (unsigned short)(((unsigned int)((unsigned short)(v >> 16)) & 63U) * 256U);
  
#line 6499 
  tmp_5 = size;
  
#line 6499 
  size += 1;
  
#line 6499 
  *tmp_5 = (unsigned short)(((unsigned int)((unsigned short)(v >> 24)) & 63U) * 256U);
  
#line 6493 
  i += 1U;
  ldv_50390: 
#line 6494 
  ;
  
#line 6493 
  if (i < (unsigned int)cim_num_obq) 
#line 6495 
                                     goto ldv_50389; else 
#line 6498 
                                                          goto ldv_50391;
  ldv_50391: 
#line 6499 
  ;
  
#line 6500 
  return;
}


#line 6514  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_read_cim_ibq(struct adapter *adap, unsigned int qid, u32 *data, size_t n)
{
  int __retres;
  int i;
  int err;
  int attempts;
  unsigned int addr;
  u32 *tmp;
  
#line 6518 
  unsigned int const nwords = 512U;
  
#line 6520 
  if (qid > 5U || (n & 3UL) != 0UL) {
    
#line 6521 
    __retres = -22;
    
#line 6521 
    goto return_label;
  }
  else ;
  
#line 6523 
  addr = qid * 512U;
  
#line 6524 
  if (n > 512UL) 
#line 6525 
                 n = (unsigned long)nwords; else ;
  
#line 6530 
  attempts = 1000000;
  
#line 6532 
  i = 0;
  
#line 6532 
  goto ldv_50404;
  ldv_50403: 
#line 6533 
  ;
  
#line 6533 
  t4_write_reg(adap,31584U,(addr << 16) | 1U);
  
#line 6535 
  err = t4_wait_op_done(adap,31584,2U,0,attempts,1);
  
#line 6537 
  if (err != 0) {
    
#line 6538 
    __retres = err;
    
#line 6538 
    goto return_label;
  }
  else ;
  
#line 6539 
  tmp = data;
  
#line 6539 
  data += 1;
  
#line 6539 
  *tmp = t4_read_reg(adap,31592U);
  
#line 6532 
  i += 1;
  
#line 6532 
  addr += 1U;
  ldv_50404: 
#line 6533 
  ;
  
#line 6532 
  if ((unsigned long)i < n) 
#line 6534 
                            goto ldv_50403; else 
#line 6537 
                                                 goto ldv_50405;
  ldv_50405: 
#line 6538 
  ;
  
#line 6541 
  t4_write_reg(adap,31584U,0U);
  
#line 6542 
  __retres = i;
  return_label: 
#line 6542 
                return __retres;
}


#line 6556  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_read_cim_obq(struct adapter *adap, unsigned int qid, u32 *data, size_t n)
{
  int __retres;
  int i;
  int err;
  unsigned int addr;
  unsigned int v;
  unsigned int nwords;
  int tmp_0;
  int tmp;
  u32 *tmp_1;
  
#line 6560 
  tmp = is_t4(adap->params.chip);
  
#line 6560 
  if (tmp != 0) 
#line 6560 
                tmp_0 = 6; else 
#line 6560 
                                tmp_0 = 8;
  
#line 6560 
  int cim_num_obq = tmp_0;
  
#line 6563 
  if ((unsigned int)(cim_num_obq + -1) < qid || (n & 3UL) != 0UL) {
    
#line 6564 
    __retres = -22;
    
#line 6564 
    goto return_label;
  }
  else ;
  
#line 6566 
  t4_write_reg(adap,31560U,qid | 16U);
  
#line 6568 
  v = t4_read_reg(adap,31564U);
  
#line 6570 
  addr = ((v >> 16) & 63U) * 64U;
  
#line 6571 
  nwords = ((v >> 24) & 63U) * 64U;
  
#line 6572 
  if ((unsigned long)nwords < n) 
#line 6573 
                                 n = (unsigned long)nwords; else ;
  
#line 6575 
  i = 0;
  
#line 6575 
  goto ldv_50419;
  ldv_50418: 
#line 6576 
  ;
  
#line 6576 
  t4_write_reg(adap,31588U,(addr << 16) | 1U);
  
#line 6578 
  err = t4_wait_op_done(adap,31588,2U,0,2,1);
  
#line 6580 
  if (err != 0) {
    
#line 6581 
    __retres = err;
    
#line 6581 
    goto return_label;
  }
  else ;
  
#line 6582 
  tmp_1 = data;
  
#line 6582 
  data += 1;
  
#line 6582 
  *tmp_1 = t4_read_reg(adap,31596U);
  
#line 6575 
  i += 1;
  
#line 6575 
  addr += 1U;
  ldv_50419: 
#line 6576 
  ;
  
#line 6575 
  if ((unsigned long)i < n) 
#line 6577 
                            goto ldv_50418; else 
#line 6580 
                                                 goto ldv_50420;
  ldv_50420: 
#line 6581 
  ;
  
#line 6584 
  t4_write_reg(adap,31588U,0U);
  
#line 6585 
  __retres = i;
  return_label: 
#line 6585 
                return __retres;
}


#line 6597  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_cim_read(struct adapter *adap, unsigned int addr, unsigned int n, unsigned int *valp)
{
  int __retres;
  u32 tmp;
  
#line 6600 
  int ret = 0;
  
#line 6602 
  tmp = t4_read_reg(adap,31568U);
  
#line 6602 
  if ((tmp & 131072U) != 0U) {
    
#line 6603 
    __retres = -16;
    
#line 6603 
    goto return_label;
  }
  else ;
  
#line 6605 
  goto ldv_50429;
  ldv_50428: 
#line 6606 
  ;
  
#line 6606 
  t4_write_reg(adap,31568U,addr);
  
#line 6607 
  ret = t4_wait_op_done(adap,31568,131072U,0,5,2);
  
#line 6609 
  if (ret == 0) {
    unsigned int *tmp_0;
    
#line 6610 
    tmp_0 = valp;
    
#line 6610 
    valp += 1;
    
#line 6610 
    *tmp_0 = t4_read_reg(adap,31572U);
  }
  else ;
  
#line 6605 
  addr += 4U;
  ldv_50429: 
#line 6606 
  ;
  
#line 6605 
  if (ret == 0) {
    unsigned int tmp_1;
    
#line 6605 
    tmp_1 = n;
    
#line 6605 
    n -= 1U;
    
#line 6605 
    ;
    
#line 6605 
    if (tmp_1 != 0U) 
#line 6607 
                     goto ldv_50428; else 
#line 6610 
                                          goto ldv_50430;
  }
  else 
#line 6610 
       goto ldv_50430;
  ldv_50430: 
#line 6611 
  ;
  
#line 6612 
  __retres = ret;
  return_label: 
#line 6612 
                return __retres;
}


#line 6624  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_cim_write(struct adapter *adap, unsigned int addr, unsigned int n, unsigned int const *valp)
{
  int __retres;
  u32 tmp;
  unsigned int const *tmp_0;
  
#line 6627 
  int ret = 0;
  
#line 6629 
  tmp = t4_read_reg(adap,31568U);
  
#line 6629 
  if ((tmp & 131072U) != 0U) {
    
#line 6630 
    __retres = -16;
    
#line 6630 
    goto return_label;
  }
  else ;
  
#line 6632 
  goto ldv_50439;
  ldv_50438: 
#line 6633 
  ;
  
#line 6633 
  tmp_0 = valp;
  
#line 6633 
  valp += 1;
  
#line 6633 
  ;
  
#line 6633 
  ;
  
#line 6633 
  t4_write_reg(adap,31572U,*tmp_0);
  
#line 6634 
  t4_write_reg(adap,31568U,addr | 65536U);
  
#line 6635 
  ret = t4_wait_op_done(adap,31568,131072U,0,5,2);
  
#line 6632 
  addr += 4U;
  ldv_50439: 
#line 6633 
  ;
  
#line 6632 
  if (ret == 0) {
    unsigned int tmp_1;
    
#line 6632 
    tmp_1 = n;
    
#line 6632 
    n -= 1U;
    
#line 6632 
    ;
    
#line 6632 
    if (tmp_1 != 0U) 
#line 6634 
                     goto ldv_50438; else 
#line 6637 
                                          goto ldv_50440;
  }
  else 
#line 6637 
       goto ldv_50440;
  ldv_50440: 
#line 6638 
  ;
  
#line 6638 
  __retres = ret;
  return_label: 
#line 6638 
                return __retres;
}


#line 6641  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
static int t4_cim_write1(struct adapter *adap, unsigned int addr, unsigned int val)
{
  int tmp;
  
#line 6644 
  tmp = t4_cim_write(adap,addr,1U,(unsigned int const *)(& val));
  
#line 6644 
  return tmp;
}


#line 6657  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
int t4_cim_read_la(struct adapter *adap, u32 *la_buf, unsigned int *wrptr)
{
  int __retres;
  int i;
  int ret;
  unsigned int cfg;
  unsigned int val;
  unsigned int idx;
  
#line 6662 
  ret = t4_cim_read(adap,320U,1U,& cfg);
  
#line 6663 
  if (ret != 0) {
    
#line 6664 
    __retres = ret;
    
#line 6664 
    goto return_label;
  }
  else ;
  
#line 6666 
  if ((cfg & 1U) != 0U) {
    
#line 6667 
    ret = t4_cim_write1(adap,320U,0U);
    
#line 6668 
    if (ret != 0) {
      
#line 6669 
      __retres = ret;
      
#line 6669 
      goto return_label;
    }
    else ;
  }
  else ;
  
#line 6672 
  ret = t4_cim_read(adap,320U,1U,& val);
  
#line 6673 
  if (ret != 0) 
#line 6674 
                goto restart; else ;
  
#line 6676 
  idx = (val >> 16) & 4095U;
  
#line 6677 
  if (wrptr != (unsigned int *)0U) 
#line 6678 
                                   *wrptr = idx; else ;
  
#line 6680 
  i = 0;
  
#line 6680 
  goto ldv_50459;
  ldv_50458: 
#line 6681 
  ;
  
#line 6681 
  ret = t4_cim_write1(adap,320U,(idx << 2) | 2U);
  
#line 6683 
  if (ret != 0) 
#line 6684 
                goto ldv_50457; else ;
  
#line 6685 
  ret = t4_cim_read(adap,320U,1U,& val);
  
#line 6686 
  if (ret != 0) 
#line 6687 
                goto ldv_50457; else ;
  
#line 6688 
  if ((val & 2U) != 0U) {
    
#line 6689 
    ret = -110;
    
#line 6690 
    goto ldv_50457;
  }
  else ;
  
#line 6692 
  ret = t4_cim_read(adap,324U,1U,la_buf + i);
  
#line 6693 
  if (ret != 0) 
#line 6694 
                goto ldv_50457; else ;
  
#line 6695 
  idx = (idx + 1U) & 4095U;
  
#line 6680 
  i += 1;
  ldv_50459: 
#line 6681 
  ;
  
#line 6680 
  if (adap->params.cim_la_size > (unsigned int)i) 
#line 6682 
                                                  goto ldv_50458; else 
                                                                    
#line 6685 
                                                                    goto ldv_50457;
  ldv_50457: 
#line 6686 
  ;
  restart: 
#line 6697 
  ;
  
#line 6698 
  if ((cfg & 1U) != 0U) {
    
#line 6699 
    int r = t4_cim_write1(adap,320U,cfg & 4294967293U);
    
#line 6701 
    if (ret == 0) 
#line 6702 
                  ret = r; else ;
  }
  else ;
  
#line 6704 
  __retres = ret;
  return_label: 
#line 6704 
                return __retres;
}


#line 6717  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_tp_read_la(struct adapter *adap, u64 *la_buf, unsigned int *wrptr)
{
  bool last_incomplete;
  unsigned int i;
  unsigned int cfg;
  unsigned int val;
  unsigned int idx;
  u32 tmp;
  
#line 6722 
  tmp = t4_read_reg(adap,32468U);
  
#line 6722 
  cfg = tmp & 65535U;
  
#line 6723 
  if ((cfg & 4096U) != 0U) 
#line 6724 
                           t4_write_reg(adap,32468U,adap->params.tp.la_mask | (cfg ^ 4096U)); else ;
  
#line 6727 
  val = t4_read_reg(adap,32468U);
  
#line 6728 
  idx = (val >> 16) & 127U;
  
#line 6729 
  last_incomplete = (_Bool)((((val >> 14) & 3U) > 1U && (val & 8388608U) == 0U) != 0);
  
#line 6730 
  if ((int)last_incomplete != 0) 
#line 6731 
                                 idx = (idx + 1U) & 127U; else ;
  
#line 6732 
  if (wrptr != (unsigned int *)0U) 
#line 6733 
                                   *wrptr = idx; else ;
  
#line 6735 
  val &= 65535U;
  
#line 6736 
  val &= 4294967168U;
  
#line 6737 
  val = adap->params.tp.la_mask | val;
  
#line 6739 
  i = 0U;
  
#line 6739 
  goto ldv_50472;
  ldv_50471: 
#line 6740 
  ;
  
#line 6740 
  t4_write_reg(adap,32468U,idx | val);
  
#line 6741 
  *(la_buf + i) = t4_read_reg64(adap,32472U);
  
#line 6742 
  idx = (idx + 1U) & 127U;
  
#line 6739 
  i += 1U;
  ldv_50472: 
#line 6740 
  ;
  
#line 6739 
  if (i <= 127U) 
#line 6741 
                 goto ldv_50471; else 
#line 6744 
                                      goto ldv_50473;
  ldv_50473: 
#line 6745 
  ;
  
#line 6746 
  if ((int)last_incomplete != 0) 
#line 6747 
                                 *(la_buf + 127U) = 18446744073709551615ULL; else ;
  
#line 6749 
  if ((cfg & 4096U) != 0U) 
#line 6750 
                           t4_write_reg(adap,32468U,adap->params.tp.la_mask | cfg); else ;
  
#line 6752 
  return;
}


#line 6771  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_idma_monitor_init(struct adapter *adapter, struct sge_idma_monitor_state *idma)
{
  unsigned int tmp;
  
#line 6786 
  tmp = core_ticks_per_usec((struct adapter const *)adapter);
  
#line 6786 
  idma->idma_1s_thresh = tmp * 1000000U;
  
#line 6787 
  idma->idma_stalled[0] = 0U;
  
#line 6788 
  idma->idma_stalled[1] = 0U;
  
#line 6789 
  return;
}


#line 6798  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/t4_hw.c"
void t4_idma_monitor(struct adapter *adapter, struct sge_idma_monitor_state *idma, int hz, int ticks)
{
  int i;
  int idma_same_state_cnt[2U];
  u32 tmp;
  u32 tmp_0;
  
#line 6811 
  t4_write_reg(adapter,4300U,13U);
  
#line 6812 
  tmp = t4_read_reg(adapter,4304U);
  
#line 6812 
  idma_same_state_cnt[0] = (int)tmp;
  
#line 6813 
  tmp_0 = t4_read_reg(adapter,4308U);
  
#line 6813 
  idma_same_state_cnt[1] = (int)tmp_0;
  
#line 6815 
  i = 0;
  
#line 6815 
  goto ldv_50490;
  ldv_50489: 
#line 6816 
  ;
  {
    u32 debug0;
    u32 debug11;
    
#line 6824 
    if ((unsigned int)idma_same_state_cnt[i] < idma->idma_1s_thresh) {
      
#line 6825 
      if (idma->idma_stalled[i] >= (unsigned int)hz) 
#line 6826 
                                                     dev_warn((struct device const *)adapter->pdev_dev,"SGE idma%d, queue %u, ",i,idma->idma_qid[i],idma->idma_stalled[i] / (unsigned int)hz); else ;
      
#line 6830 
      idma->idma_stalled[i] = 0U;
      
#line 6831 
      goto ldv_50488;
    }
    else ;
    
#line 6843 
    if (idma->idma_stalled[i] == 0U) {
      
#line 6844 
      idma->idma_stalled[i] = (unsigned int)hz;
      
#line 6845 
      idma->idma_warn[i] = 0U;
    }
    else {
      
#line 6847 
      idma->idma_stalled[i] += (unsigned int)ticks;
      
#line 6848 
      idma->idma_warn[i] -= (unsigned int)ticks;
    }
    
#line 6851 
    if (idma->idma_stalled[i] < (unsigned int)hz) 
#line 6852 
                                                  goto ldv_50488; else ;
    
#line 6856 
    if (idma->idma_warn[i] != 0U) 
#line 6857 
                                  goto ldv_50488; else ;
    
#line 6858 
    idma->idma_warn[i] = (unsigned int)(hz * 300);
    
#line 6864 
    t4_write_reg(adapter,4300U,0U);
    
#line 6865 
    debug0 = t4_read_reg(adapter,4308U);
    
#line 6866 
    idma->idma_state[i] = (debug0 >> i * 9) & 63U;
    
#line 6868 
    t4_write_reg(adapter,4300U,11U);
    
#line 6869 
    debug11 = t4_read_reg(adapter,4308U);
    
#line 6870 
    idma->idma_qid[i] = (debug11 >> i * 16) & 65535U;
    
#line 6872 
    dev_warn((struct device const *)adapter->pdev_dev,"SGE idma%u, queue %u, potentially stuck in ",i,idma->idma_qid[i],idma->idma_state[i],idma->idma_stalled[i] / (unsigned int)hz,debug0,debug11);
    
#line 6877 
    t4_sge_decode_idma_state(adapter,(int)idma->idma_state[i]);
  }
  ldv_50488: 
#line 6879 
  ;
  
#line 6815 
  i += 1;
  ldv_50490: 
#line 6816 
  ;
  
#line 6815 
  if (i <= 1) 
#line 6817 
              goto ldv_50489; else 
#line 6820 
                                   goto ldv_50491;
  ldv_50491: 
#line 6821 
  ;
  
#line 6822 
  return;
}


#line 831  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_t4_hw.c.aux"
static void ldv_spin_lock_bh_81(spinlock_t *lock)
{
  
#line 835 
  ldv_spin_model_lock((char *)"win_lock");
  
#line 837 
  spin_lock_bh_2(lock);
  
#line 838 
  return;
}


#line 841  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_t4_hw.c.aux"
static void ldv_spin_unlock_bh_82(spinlock_t *lock)
{
  
#line 845 
  ldv_spin_model_unlock((char *)"win_lock");
  
#line 847 
  spin_unlock_bh_2(lock);
  
#line 848 
  return;
}


#line 59  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/dynamic_debug.h"
void __dynamic_netdev_dbg(struct _ddebug *, struct net_device const *, char const * , ...);


#line 31  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/dcbnl.h"
int dcb_setapp(struct net_device *, struct dcb_app *);


#line 33 
int dcb_ieee_setapp(struct net_device *, struct dcb_app *);


#line 34 
int dcb_ieee_delapp(struct net_device *, struct dcb_app *);


#line 35 
u8 dcb_ieee_getapp_mask(struct net_device *, struct dcb_app *);


#line 3029  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/netdevice.h"
void linkwatch_fire_event(struct net_device *);


#line 133  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.h"
void cxgb4_dcb_version_init(struct net_device *dev);


#line 139  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.h"
__inline static __u8 bitswap_1(unsigned char val)
{
  __u8 __retres;
  
#line 147 
  __retres = (unsigned char)(((((((((int)val >> 7) | (((int)val >> 5) & 2)) | (((int)val >> 3) & 4)) | (((int)val >> 1) & 8)) | (((int)val << 1) & 16)) | (((int)val << 3) & 32)) | (((int)val << 5) & 64)) | ((int)val << 7));
  
#line 147 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static char const * const dcb_ver_array[8U] = {"Unknown", "DCBx-CIN", "DCBx-CEE 1.01", "DCBx-IEEE", "", "", "", "Auto Negotiated"};

#line 37  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
void cxgb4_dcb_state_init(struct net_device *dev)
{
  
#line 39 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 40 
  struct port_dcb_info *dcb = & pi->dcb;
  
#line 41 
  int version_temp = (int)dcb->dcb_version;
  
#line 43 
  memset((void *)dcb,0,80UL);
  
#line 44 
  dcb->state = CXGB4_DCB_STATE_START;
  
#line 45 
  if (version_temp != 0) 
#line 46 
                         dcb->dcb_version = (unsigned char)version_temp; else ;
  {
    
#line 48 
    struct _ddebug descriptor = {.modname = "cxgb4", .function = "cxgb4_dcb_state_init", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c", .format = "%s: Initializing DCB state for port[%d]\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))49U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 48 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 48 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"%s: Initializing DCB state for port[%d]\n","cxgb4_dcb_state_init",(int)pi->port_id); else ;
  }
  
#line 50 
  return;
}


#line 52  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
void cxgb4_dcb_version_init(struct net_device *dev)
{
  
#line 54 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 55 
  struct port_dcb_info *dcb = & pi->dcb;
  
#line 60 
  dcb->dcb_version = (unsigned char)7U;
  
#line 61 
  return;
}


#line 63  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static void cxgb4_dcb_cleanup_apps(struct net_device *dev)
{
  struct dcb_app app;
  int i;
  int err;
  
#line 65 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 66 
  struct adapter *adap = pi->adapter;
  
#line 67 
  struct port_dcb_info *dcb = & pi->dcb;
  
#line 72 
  app.priority = (unsigned char)0U;
  
#line 74 
  i = 0;
  
#line 74 
  goto ldv_48967;
  ldv_48966: 
#line 75 
  ;
  
#line 76 
  if ((unsigned int)dcb->app_priority[i].protocolid == 0U) 
#line 77 
                                                           goto ldv_48965; else ;
  
#line 79 
  app.protocol = dcb->app_priority[i].protocolid;
  
#line 81 
  if ((unsigned int)dcb->dcb_version == 3U) {
    
#line 82 
    app.priority = dcb->app_priority[i].user_prio_map;
    
#line 83 
    app.selector = (unsigned char)((unsigned int)dcb->app_priority[i].sel_field + 1U);
    
#line 84 
    err = dcb_ieee_delapp(dev,& app);
  }
  else {
    
#line 86 
    app.selector = (unsigned char)((unsigned int)dcb->app_priority[i].sel_field != 0U);
    
#line 87 
    err = dcb_setapp(dev,& app);
  }
  
#line 90 
  if (err != 0) {
    
#line 91 
    dev_err((struct device const *)adap->pdev_dev,"Failed DCB Clear %s Application Priority: sel=%d, prot=%d, , err=%d\n",dcb_ver_array[(int)dcb->dcb_version],(int)app.selector,(int)app.protocol,- err);
    
#line 95 
    goto ldv_48965;
  }
  else ;
  
#line 74 
  i += 1;
  ldv_48967: 
#line 75 
  ;
  
#line 74 
  if (i <= 7) 
#line 76 
              goto ldv_48966; else 
#line 79 
                                   goto ldv_48965;
  ldv_48965: 
#line 80 
  ;
  
#line 81 
  return;
}


#line 102  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
void cxgb4_dcb_state_fsm(struct net_device *dev, enum cxgb4_dcb_state_input transition_to)
{
  
#line 105 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 106 
  struct port_dcb_info *dcb = & pi->dcb;
  
#line 107 
  struct adapter *adap = pi->adapter;
  
#line 108 
  enum cxgb4_dcb_state current_state = dcb->state;
  {
    
#line 110 
    struct _ddebug descriptor = {.modname = "cxgb4", .function = "cxgb4_dcb_state_fsm", .filename = "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c", .format = "%s: State change from %d to %d for %s\n", .lineno = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(18))))111U, .flags = (unsigned int __attribute__((__FRAMA_C_BITFIELD_SIZE__(8))))0U};
    
#line 110 
    if ((long)(((int)descriptor.flags & 1) != 0) != 0L) 
#line 110 
                                                        __dynamic_netdev_dbg(& descriptor,(struct net_device const *)dev,"%s: State change from %d to %d for %s\n","cxgb4_dcb_state_fsm",(unsigned int)dcb->state,(unsigned int)transition_to,(char *)(& dev->name)); else ;
  }
  
#line 113 
  switch ((unsigned int)current_state) {
    case (unsigned int)0: 
#line 114 
    ;
    
#line 115 
    switch ((unsigned int)transition_to) {
      case (unsigned int)0: 
#line 116 
      ;
      
#line 118 
      dcb->state = CXGB4_DCB_STATE_HOST;
      
#line 119 
      dcb->supported = 13U;
      
#line 120 
      goto ldv_48980;
      case (unsigned int)1: 
#line 123 
      ;
      
#line 125 
      dcb->state = CXGB4_DCB_STATE_FW_INCOMPLETE;
      
#line 126 
      dcb->supported = 2U;
      
#line 127 
      if ((unsigned int)dcb->dcb_version == 3U) 
#line 128 
                                                dcb->supported |= 8U; else 
                                                                    
#line 130 
                                                                    dcb->supported |= 4U;
      
#line 131 
      goto ldv_48980;
      case (unsigned int)2: 
#line 134 
      ;
      
#line 136 
      goto ldv_48980;
      case (unsigned int)3: 
#line 139 
      ;
      
#line 140 
      dcb->state = CXGB4_DCB_STATE_FW_ALLSYNCED;
      
#line 141 
      goto ldv_48980;
      default: 
#line 144 
      ;
      
#line 145 
      goto bad_state_input;
    }
    ldv_48980: 
#line 147 
    ;
    
#line 147 
    goto ldv_48986;
    case (unsigned int)2: 
#line 150 
    ;
    
#line 151 
    switch ((unsigned int)transition_to) {
      case (unsigned int)1: 
#line 152 
      ;
      
#line 154 
      goto ldv_48989;
      case (unsigned int)2: 
#line 157 
      ;
      
#line 159 
      goto ldv_48989;
      case (unsigned int)3: 
#line 162 
      ;
      
#line 163 
      dcb->state = CXGB4_DCB_STATE_FW_ALLSYNCED;
      
#line 164 
      dcb->enabled = (_Bool)1;
      
#line 165 
      linkwatch_fire_event(dev);
      
#line 166 
      goto ldv_48989;
      default: 
#line 169 
      ;
      
#line 170 
      goto bad_state_input;
    }
    ldv_48989: 
#line 172 
    ;
    
#line 172 
    goto ldv_48986;
    case (unsigned int)3: 
#line 175 
    ;
    
#line 176 
    switch ((unsigned int)transition_to) {
      case (unsigned int)1: 
#line 177 
      ;
      
#line 179 
      goto ldv_48995;
      case (unsigned int)2: 
#line 182 
      ;
      
#line 188 
      cxgb4_dcb_cleanup_apps(dev);
      
#line 189 
      cxgb4_dcb_state_init(dev);
      
#line 190 
      dcb->state = CXGB4_DCB_STATE_FW_INCOMPLETE;
      
#line 191 
      dcb->supported = 14U;
      
#line 192 
      linkwatch_fire_event(dev);
      
#line 193 
      goto ldv_48995;
      case (unsigned int)3: 
#line 196 
      ;
      
#line 201 
      dcb->enabled = (_Bool)1;
      
#line 202 
      linkwatch_fire_event(dev);
      
#line 203 
      goto ldv_48995;
      default: 
#line 206 
      ;
      
#line 207 
      goto bad_state_input;
    }
    ldv_48995: 
#line 209 
    ;
    
#line 209 
    goto ldv_48986;
    case (unsigned int)1: 
#line 212 
    ;
    
#line 213 
    switch ((unsigned int)transition_to) {
      case (unsigned int)0: 
#line 214 
      ;
      
#line 216 
      goto ldv_49001;
      default: 
#line 219 
      ;
      
#line 220 
      goto bad_state_input;
    }
    ldv_49001: 
#line 222 
    ;
    
#line 222 
    goto ldv_48986;
    default: 
#line 225 
    ;
    
#line 226 
    goto bad_state_transition;
  }
  ldv_48986: 
#line 228 
  ;
  
#line 228 
  goto return_label;
  bad_state_input: 
#line 230 
  ;
  
#line 231 
  dev_err((struct device const *)adap->pdev_dev,"cxgb4_dcb_state_fsm: illegal input symbol %d\n",(unsigned int)transition_to);
  
#line 233 
  goto return_label;
  bad_state_transition: 
#line 235 
  ;
  
#line 236 
  dev_err((struct device const *)adap->pdev_dev,"cxgb4_dcb_state_fsm: bad state transition, state = %d, input = %d\n",(unsigned int)current_state,(unsigned int)transition_to);
  return_label: 
#line 237 
                return;
}


#line 242  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
void cxgb4_dcb_handle_fw_update(struct adapter *adap, struct fw_port_cmd const *pcmd)
{
  unsigned int tmp_0;
  int dcb_running_version;
  
#line 245 
  union fw_port_dcb const *fwdcb = & pcmd->u.dcb;
  
#line 246 
  if (0 != 0) 
#line 246 
              tmp_0 = ((((pcmd->op_to_portid << 24) | ((pcmd->op_to_portid << 8) & 16711680U)) | ((pcmd->op_to_portid >> 8) & 65280U)) | (pcmd->op_to_portid >> 24)) & 15U;
  else {
    __u32 tmp;
    
#line 246 
    tmp = __fswab32(pcmd->op_to_portid);
    
#line 246 
    tmp_0 = tmp & 15U;
  }
  
#line 246 
  int port = (int)tmp_0;
  
#line 247 
  struct net_device *dev = adap->port[port];
  
#line 248 
  struct port_info *pi = netdev_priv((struct net_device const *)dev);
  
#line 249 
  struct port_dcb_info *dcb = & pi->dcb;
  
#line 250 
  int dcb_type = (int)pcmd->u.dcb.pgid.type;
  
#line 256 
  if (dcb_type == 5) {
    int tmp_2;
    
#line 261 
    if ((int)pcmd->u.dcb.control.all_syncd_pkd < 0) 
#line 261 
                                                    tmp_2 = 3; else 
#line 261 
                                                                    tmp_2 = 2;
    
#line 257 
    enum cxgb4_dcb_state_input input = (enum cxgb4_dcb_state_input)tmp_2;
    
#line 263 
    if ((unsigned int)dcb->dcb_version != 0U) {
      
#line 264 
      if (0 != 0) 
#line 264 
                  dcb_running_version = ((int)((unsigned short)(((int)pcmd->u.dcb.control.dcb_version_to_app_state << 8) | ((int)pcmd->u.dcb.control.dcb_version_to_app_state >> 8))) >> 12) & 7;
      else {
        __u16 tmp_3;
        
#line 264 
        tmp_3 = __fswab16((unsigned short)((int)pcmd->u.dcb.control.dcb_version_to_app_state));
        
#line 264 
        dcb_running_version = ((int)tmp_3 >> 12) & 7;
      }
      
#line 267 
      if ((unsigned int)dcb_running_version + 4294967294U <= 1U) {
        
#line 269 
        dcb->dcb_version = (unsigned char)dcb_running_version;
        
#line 270 
        dev_warn((struct device const *)adap->pdev_dev,"Interface %s is running %s\n",(char *)(& dev->name),dcb_ver_array[(int)dcb->dcb_version]);
      }
      else {
        
#line 274 
        dev_warn((struct device const *)adap->pdev_dev,"Something screwed up, requested firmware for %s, but firmware returned %s instead\n",dcb_ver_array[(int)dcb->dcb_version],dcb_ver_array[dcb_running_version]);
        
#line 278 
        dcb->dcb_version = (unsigned char)0U;
      }
    }
    else ;
    
#line 282 
    cxgb4_dcb_state_fsm(dev,input);
    
#line 283 
    goto return_label;
  }
  else ;
  
#line 291 
  if (dcb->state <= (unsigned int)CXGB4_DCB_STATE_HOST) {
    
#line 293 
    dev_err((struct device const *)adap->pdev_dev,"Receiving Firmware DCB messages in State %d\n",(unsigned int)dcb->state);
    
#line 295 
    goto return_label;
  }
  else ;
  
#line 300 
  switch (dcb_type) {
    case 0: 
#line 301 
    ;
    
#line 302 
    if (0 != 0) 
#line 302 
                dcb->pgid = (((fwdcb->pgid.pgid << 24) | ((fwdcb->pgid.pgid << 8) & 16711680U)) | ((fwdcb->pgid.pgid >> 8) & 65280U)) | (fwdcb->pgid.pgid >> 24); else 
                                                                    
#line 302 
                                                                    dcb->pgid = __fswab32(fwdcb->pgid.pgid);
    
#line 303 
    dcb->msgs = (enum cxgb4_dcb_fw_msgs)((unsigned int)dcb->msgs | 1U);
    
#line 304 
    goto ldv_49018;
    case 1: 
#line 306 
    ;
    
#line 307 
    dcb->pg_num_tcs_supported = fwdcb->pgrate.num_tcs_supported;
    
#line 308 
    memcpy((void *)(& dcb->pgrate),(void const *)(& fwdcb->pgrate.pgrate),8UL);
    
#line 310 
    memcpy((void *)(& dcb->tsa),(void const *)(& fwdcb->pgrate.tsa),8UL);
    
#line 312 
    dcb->msgs = (enum cxgb4_dcb_fw_msgs)((unsigned int)dcb->msgs | 2U);
    
#line 313 
    if (((unsigned int)dcb->msgs & 1U) != 0U) {
      
#line 314 
      if ((unsigned int)dcb->dcb_version == 3U) 
#line 314 
                                                cxgb4_dcb_state_fsm(dev,(enum cxgb4_dcb_state_input)CXGB4_DCB_INPUT_FW_ALLSYNCED); else ;
    }
    else ;
    
#line 315 
    goto ldv_49018;
    case 2: 
#line 317 
    ;
    
#line 318 
    memcpy((void *)(& dcb->priorate),(void const *)(& fwdcb->priorate.strict_priorate),8UL);
    
#line 320 
    dcb->msgs = (enum cxgb4_dcb_fw_msgs)((unsigned int)dcb->msgs | 4U);
    
#line 321 
    goto ldv_49018;
    case 3: 
#line 323 
    ;
    
#line 324 
    dcb->pfcen = fwdcb->pfc.pfcen;
    
#line 325 
    dcb->pfc_num_tcs_supported = fwdcb->pfc.max_pfc_tcs;
    
#line 326 
    dcb->msgs = (enum cxgb4_dcb_fw_msgs)((unsigned int)dcb->msgs | 8U);
    
#line 327 
    if ((unsigned int)dcb->dcb_version == 3U) 
#line 327 
                                              cxgb4_dcb_state_fsm(dev,(enum cxgb4_dcb_state_input)CXGB4_DCB_INPUT_FW_ALLSYNCED); else ;
    
#line 328 
    goto ldv_49018;
    case 4: 
#line 330 
    ;
    {
      int tmp_6;
      int err;
      
#line 331 
      struct fw_port_app_priority const *fwap = & fwdcb->app_priority;
      
#line 332 
      int idx = (int)fwap->idx;
      
#line 333 
      struct app_priority *ap = & dcb->app_priority[idx];
      
#line 335 
      if (0 != 0) 
#line 335 
                  tmp_6 = (int)((unsigned short)(((int)fwap->protocolid << 8) | ((int)fwap->protocolid >> 8)));
      else {
        __u16 tmp_5;
        
#line 336 
        tmp_5 = __fswab16((unsigned short)((int)fwap->protocolid));
        
#line 335 
        tmp_6 = (int)tmp_5;
      }
      
#line 335 
      struct dcb_app app = {.selector = (unsigned char)0, .priority = (unsigned char)0, .protocol = (unsigned short)tmp_6};
      
#line 343 
      if ((unsigned int)dcb->dcb_version == 3U) {
        int tmp_7;
        
#line 344 
        app.selector = (unsigned char)((unsigned int)fwap->sel_field + 1U);
        
#line 345 
        tmp_7 = fls((int)fwap->user_prio_map);
        
#line 345 
        app.priority = (unsigned char)((unsigned int)((unsigned char)tmp_7) + 255U);
        
#line 346 
        err = dcb_ieee_setapp(dev,& app);
        
#line 347 
        if ((unsigned int)dcb->dcb_version == 3U) 
#line 347 
                                                  cxgb4_dcb_state_fsm(dev,(enum cxgb4_dcb_state_input)CXGB4_DCB_INPUT_FW_ALLSYNCED); else ;
      }
      else {
        
#line 350 
        app.selector = (unsigned char)((unsigned int)fwap->sel_field != 0U);
        
#line 351 
        app.priority = fwap->user_prio_map;
        
#line 352 
        err = dcb_setapp(dev,& app);
      }
      
#line 355 
      if (err != 0) 
#line 356 
                    dev_err((struct device const *)adap->pdev_dev,"Failed DCB Set Application Priority: sel=%d, prot=%d, prio=%d, err=%d\n",(int)app.selector,(int)app.protocol,(int)app.priority,- err); else ;
      
#line 360 
      ap->user_prio_map = fwap->user_prio_map;
      
#line 361 
      ap->sel_field = fwap->sel_field;
      
#line 362 
      if (0 != 0) 
#line 362 
                  ap->protocolid = (unsigned short)(((int)fwap->protocolid << 8) | ((int)fwap->protocolid >> 8)); else 
                                                                    
#line 362 
                                                                    ap->protocolid = __fswab16((unsigned short)((int)fwap->protocolid));
      
#line 363 
      dcb->msgs = (enum cxgb4_dcb_fw_msgs)((unsigned int)dcb->msgs | 16U);
      
#line 364 
      goto ldv_49018;
    }
    default: 
#line 367 
    ;
    
#line 368 
    dev_err((struct device const *)adap->pdev_dev,"Unknown DCB update type received %x\n",dcb_type);
    
#line 370 
    goto ldv_49018;
  }
  ldv_49018: 
#line 372 
  ;
  return_label: 
#line 373 
                return;
}


#line 380  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static u8 cxgb4_getstate(struct net_device *dev)
{
  u8 __retres;
  
#line 382 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 384 
  __retres = (unsigned char)pi->dcb.enabled;
  
#line 384 
  return __retres;
}


#line 389  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static u8 cxgb4_setstate(struct net_device *dev, u8 enabled)
{
  u8 __retres;
  
#line 391 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 394 
  if (pi->dcb.state == (unsigned int)CXGB4_DCB_STATE_HOST) {
    
#line 395 
    pi->dcb.enabled = (_Bool)((unsigned int)enabled != 0U);
    
#line 396 
    __retres = (unsigned char)0U;
    
#line 396 
    goto return_label;
  }
  else ;
  
#line 401 
  if ((int)enabled != (pi->dcb.state == (unsigned int)CXGB4_DCB_STATE_FW_ALLSYNCED)) {
    
#line 402 
    __retres = (unsigned char)1U;
    
#line 402 
    goto return_label;
  }
  else ;
  
#line 404 
  __retres = (unsigned char)0U;
  return_label: 
#line 404 
                return __retres;
}


#line 407  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static void cxgb4_getpgtccfg(struct net_device *dev, int tc, u8 *prio_type, u8 *pgid, u8 *bw_per, u8 *up_tc_map, int local)
{
  struct fw_port_cmd pcmd;
  int err;
  u8 tmp_2;
  u8 tmp_1;
  u8 tmp_0;
  unsigned int tmp_6;
  
#line 412 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 413 
  struct adapter *adap = pi->adapter;
  
#line 416 
  tmp_2 = (unsigned char)0U;
  
#line 416 
  *up_tc_map = tmp_2;
  
#line 416 
  tmp_1 = tmp_2;
  
#line 416 
  *bw_per = tmp_1;
  
#line 416 
  tmp_0 = tmp_1;
  
#line 416 
  *pgid = tmp_0;
  
#line 416 
  *prio_type = tmp_0;
  
#line 418 
  if (local != 0) {
    
#line 419 
    memset((void *)(& pcmd),0,32UL);
    
#line 419 
    if (0 != 0) 
#line 419 
                pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 419 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
    
#line 419 
    pcmd.action_to_len16 = 33555968U;
  }
  else {
    
#line 421 
    memset((void *)(& pcmd),0,32UL);
    
#line 421 
    if (0 != 0) 
#line 421 
                pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 421 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
    
#line 421 
    pcmd.action_to_len16 = 33556224U;
  }
  
#line 423 
  pcmd.u.dcb.pgid.type = (unsigned char)0U;
  
#line 424 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 425 
  if (err != 0) {
    
#line 426 
    dev_err((struct device const *)adap->pdev_dev,"DCB read PGID failed with %d\n",- err);
    
#line 427 
    goto return_label;
  }
  else ;
  
#line 429 
  if (0 != 0) 
#line 429 
              tmp_6 = (((pcmd.u.dcb.pgid.pgid << 24) | ((pcmd.u.dcb.pgid.pgid << 8) & 16711680U)) | ((pcmd.u.dcb.pgid.pgid >> 8) & 65280U)) | (pcmd.u.dcb.pgid.pgid >> 24); else 
                                                                    
#line 429 
                                                                    tmp_6 = __fswab32(pcmd.u.dcb.pgid.pgid);
  
#line 429 
  *pgid = (unsigned char)((unsigned int)((unsigned char)(tmp_6 >> tc * 4)) & 15U);
  
#line 431 
  if (local != 0) {
    
#line 432 
    memset((void *)(& pcmd),0,32UL);
    
#line 432 
    if (0 != 0) 
#line 432 
                pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 432 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
    
#line 432 
    pcmd.action_to_len16 = 33555968U;
  }
  else {
    
#line 434 
    memset((void *)(& pcmd),0,32UL);
    
#line 434 
    if (0 != 0) 
#line 434 
                pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 434 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
    
#line 434 
    pcmd.action_to_len16 = 33556224U;
  }
  
#line 435 
  pcmd.u.dcb.pgrate.type = (unsigned char)1U;
  
#line 436 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 437 
  if (err != 0) {
    
#line 438 
    dev_err((struct device const *)adap->pdev_dev,"DCB read PGRATE failed with %d\n",- err);
    
#line 440 
    goto return_label;
  }
  else ;
  
#line 443 
  *bw_per = pcmd.u.dcb.pgrate.pgrate[(int)*pgid];
  
#line 444 
  *up_tc_map = (unsigned char)(1 << tc);
  
#line 447 
  if ((unsigned int)*pgid != 15U) 
#line 448 
                                  *prio_type = (unsigned char)2U; else ;
  return_label: 
#line 449 
                return;
}


#line 451  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static void cxgb4_getpgtccfg_tx(struct net_device *dev, int tc, u8 *prio_type, u8 *pgid, u8 *bw_per, u8 *up_tc_map)
{
  
#line 456 
  cxgb4_getpgtccfg(dev,7 - tc,prio_type,pgid,bw_per,up_tc_map,1);
  
#line 457 
  return;
}


#line 461  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static void cxgb4_getpgtccfg_rx(struct net_device *dev, int tc, u8 *prio_type, u8 *pgid, u8 *bw_per, u8 *up_tc_map)
{
  
#line 466 
  cxgb4_getpgtccfg(dev,7 - tc,prio_type,pgid,bw_per,up_tc_map,0);
  
#line 467 
  return;
}


#line 470  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static void cxgb4_setpgtccfg_tx(struct net_device *dev, int tc, u8 prio_type, u8 pgid, u8 bw_per, u8 up_tc_map)
{
  struct fw_port_cmd pcmd;
  u32 _pgid;
  int err;
  
#line 475 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 476 
  struct adapter *adap = pi->adapter;
  
#line 477 
  int fw_tc = 7 - tc;
  
#line 481 
  if ((unsigned int)pgid == 255U) 
#line 482 
                                  goto return_label; else ;
  
#line 483 
  if ((unsigned int)bw_per == 255U) 
#line 484 
                                    goto return_label; else ;
  
#line 486 
  memset((void *)(& pcmd),0,32UL);
  
#line 486 
  if (0 != 0) 
#line 486 
              pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 486 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
  
#line 486 
  pcmd.action_to_len16 = 33555968U;
  
#line 487 
  pcmd.u.dcb.pgid.type = (unsigned char)0U;
  
#line 489 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 490 
  if (err != 0) {
    
#line 491 
    dev_err((struct device const *)adap->pdev_dev,"DCB read PGID failed with %d\n",- err);
    
#line 492 
    goto return_label;
  }
  else ;
  
#line 495 
  if (0 != 0) 
#line 495 
              _pgid = (((pcmd.u.dcb.pgid.pgid << 24) | ((pcmd.u.dcb.pgid.pgid << 8) & 16711680U)) | ((pcmd.u.dcb.pgid.pgid >> 8) & 65280U)) | (pcmd.u.dcb.pgid.pgid >> 24); else 
                                                                    
#line 495 
                                                                    _pgid = __fswab32(pcmd.u.dcb.pgid.pgid);
  
#line 496 
  _pgid = (unsigned int)(~ (15 << fw_tc * 4)) & _pgid;
  
#line 497 
  _pgid = (unsigned int)((int)pgid << fw_tc * 4) | _pgid;
  
#line 498 
  if (0 != 0) 
#line 498 
              pcmd.u.dcb.pgid.pgid = (((_pgid << 24) | ((_pgid << 8) & 16711680U)) | ((_pgid >> 8) & 65280U)) | (_pgid >> 24); else 
                                                                    
#line 498 
                                                                    pcmd.u.dcb.pgid.pgid = __fswab32(_pgid);
  
#line 500 
  memset((void *)(& pcmd),0,32UL);
  
#line 500 
  if (0 != 0) 
#line 500 
              pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 36891U; else 
                                                                    
#line 500 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 462422016U);
  
#line 500 
  pcmd.action_to_len16 = 33555712U;
  
#line 502 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 503 
  if (err != 0) {
    
#line 504 
    dev_err((struct device const *)adap->pdev_dev,"DCB write PGID failed with %d\n",- err);
    
#line 506 
    goto return_label;
  }
  else ;
  
#line 509 
  memset((void *)(& pcmd),0,32UL);
  
#line 511 
  memset((void *)(& pcmd),0,32UL);
  
#line 511 
  if (0 != 0) 
#line 511 
              pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 511 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
  
#line 511 
  pcmd.action_to_len16 = 33555968U;
  
#line 512 
  pcmd.u.dcb.pgrate.type = (unsigned char)1U;
  
#line 514 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 515 
  if (err != 0) {
    
#line 516 
    dev_err((struct device const *)adap->pdev_dev,"DCB read PGRATE failed with %d\n",- err);
    
#line 518 
    goto return_label;
  }
  else ;
  
#line 521 
  pcmd.u.dcb.pgrate.pgrate[(int)pgid] = bw_per;
  
#line 523 
  memset((void *)(& pcmd),0,32UL);
  
#line 523 
  if (0 != 0) 
#line 523 
              pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 36891U; else 
                                                                    
#line 523 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 462422016U);
  
#line 523 
  pcmd.action_to_len16 = 33555712U;
  
#line 524 
  if (pi->dcb.state == (unsigned int)CXGB4_DCB_STATE_HOST) 
#line 525 
                                                           pcmd.op_to_portid |= 2147483648U; else ;
  
#line 527 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 528 
  if (err != 0) 
#line 529 
                dev_err((struct device const *)adap->pdev_dev,"DCB write PGRATE failed with %d\n",- err); else ;
  return_label: 
#line 531 
                return;
}


#line 533  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static void cxgb4_getpgbwgcfg(struct net_device *dev, int pgid, u8 *bw_per, int local)
{
  struct fw_port_cmd pcmd;
  int err;
  
#line 537 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 538 
  struct adapter *adap = pi->adapter;
  
#line 541 
  if (local != 0) {
    
#line 542 
    memset((void *)(& pcmd),0,32UL);
    
#line 542 
    if (0 != 0) 
#line 542 
                pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 542 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
    
#line 542 
    pcmd.action_to_len16 = 33555968U;
  }
  else {
    
#line 544 
    memset((void *)(& pcmd),0,32UL);
    
#line 544 
    if (0 != 0) 
#line 544 
                pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 544 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
    
#line 544 
    pcmd.action_to_len16 = 33556224U;
  }
  
#line 546 
  pcmd.u.dcb.pgrate.type = (unsigned char)1U;
  
#line 547 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 548 
  if (err != 0) {
    
#line 549 
    dev_err((struct device const *)adap->pdev_dev,"DCB read PGRATE failed with %d\n",- err);
    
#line 551 
    goto return_label;
  }
  else ;
  
#line 554 
  *bw_per = pcmd.u.dcb.pgrate.pgrate[pgid];
  return_label: 
#line 555 
                return;
}


#line 557  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static void cxgb4_getpgbwgcfg_tx(struct net_device *dev, int pgid, u8 *bw_per)
{
  
#line 559 
  cxgb4_getpgbwgcfg(dev,pgid,bw_per,1);
  
#line 560 
  return;
}


#line 562  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static void cxgb4_getpgbwgcfg_rx(struct net_device *dev, int pgid, u8 *bw_per)
{
  
#line 564 
  cxgb4_getpgbwgcfg(dev,pgid,bw_per,0);
  
#line 565 
  return;
}


#line 567  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static void cxgb4_setpgbwgcfg_tx(struct net_device *dev, int pgid, u8 bw_per)
{
  struct fw_port_cmd pcmd;
  int err;
  
#line 571 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 572 
  struct adapter *adap = pi->adapter;
  
#line 575 
  memset((void *)(& pcmd),0,32UL);
  
#line 575 
  if (0 != 0) 
#line 575 
              pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 575 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
  
#line 575 
  pcmd.action_to_len16 = 33555968U;
  
#line 576 
  pcmd.u.dcb.pgrate.type = (unsigned char)1U;
  
#line 578 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 579 
  if (err != 0) {
    
#line 580 
    dev_err((struct device const *)adap->pdev_dev,"DCB read PGRATE failed with %d\n",- err);
    
#line 582 
    goto return_label;
  }
  else ;
  
#line 585 
  pcmd.u.dcb.pgrate.pgrate[pgid] = bw_per;
  
#line 587 
  memset((void *)(& pcmd),0,32UL);
  
#line 587 
  if (0 != 0) 
#line 587 
              pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 36891U; else 
                                                                    
#line 587 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 462422016U);
  
#line 587 
  pcmd.action_to_len16 = 33555712U;
  
#line 588 
  if (pi->dcb.state == (unsigned int)CXGB4_DCB_STATE_HOST) 
#line 589 
                                                           pcmd.op_to_portid |= 2147483648U; else ;
  
#line 591 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 593 
  if (err != 0) 
#line 594 
                dev_err((struct device const *)adap->pdev_dev,"DCB write PGRATE failed with %d\n",- err); else ;
  return_label: 
#line 596 
                return;
}


#line 601  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static void cxgb4_getpfccfg(struct net_device *dev, int priority, u8 *pfccfg)
{
  
#line 603 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 604 
  struct port_dcb_info *dcb = & pi->dcb;
  
#line 606 
  if (dcb->state != (unsigned int)CXGB4_DCB_STATE_FW_ALLSYNCED || priority > 7) 
    
#line 608 
    *pfccfg = (unsigned char)0U; else 
#line 610 
                                      *pfccfg = (unsigned char)((unsigned int)((unsigned char)((int)pi->dcb.pfcen >> (7 - priority))) & 1U);
  
#line 611 
  return;
}


#line 616  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static void cxgb4_setpfccfg(struct net_device *dev, int priority, u8 pfccfg)
{
  struct fw_port_cmd pcmd;
  int err;
  
#line 619 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 620 
  struct adapter *adap = pi->adapter;
  
#line 623 
  if (pi->dcb.state != (unsigned int)CXGB4_DCB_STATE_FW_ALLSYNCED || priority > 7) 
    
#line 625 
    goto return_label; else ;
  
#line 627 
  memset((void *)(& pcmd),0,32UL);
  
#line 627 
  if (0 != 0) 
#line 627 
              pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 36891U; else 
                                                                    
#line 627 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 462422016U);
  
#line 627 
  pcmd.action_to_len16 = 33555712U;
  
#line 628 
  if (pi->dcb.state == (unsigned int)CXGB4_DCB_STATE_HOST) 
#line 629 
                                                           pcmd.op_to_portid |= 2147483648U; else ;
  
#line 631 
  pcmd.u.dcb.pfc.type = (unsigned char)3U;
  
#line 632 
  pcmd.u.dcb.pfc.pfcen = pi->dcb.pfcen;
  
#line 634 
  if ((unsigned int)pfccfg != 0U) 
#line 635 
                                  pcmd.u.dcb.pfc.pfcen = (unsigned char)((int)pcmd.u.dcb.pfc.pfcen | (1 << (7 - priority))); else 
                                                                    
#line 637 
                                                                    pcmd.u.dcb.pfc.pfcen = (unsigned char)((int)pcmd.u.dcb.pfc.pfcen & ~ (1 << (7 - priority)));
  
#line 639 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 640 
  if (err != 0) {
    
#line 641 
    dev_err((struct device const *)adap->pdev_dev,"DCB PFC write failed with %d\n",- err);
    
#line 642 
    goto return_label;
  }
  else ;
  
#line 645 
  pi->dcb.pfcen = pcmd.u.dcb.pfc.pfcen;
  return_label: 
#line 646 
                return;
}


#line 648  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static u8 cxgb4_setall(struct net_device *dev)
{
  u8 __retres;
  
#line 650 
  __retres = (unsigned char)0U;
  
#line 650 
  return __retres;
}


#line 655  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static u8 cxgb4_getcap(struct net_device *dev, int cap_id, u8 *caps)
{
  u8 __retres;
  
#line 657 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 659 
  switch (cap_id) {
    case 2: 
#line 660 
    ;
    case 3: 
#line 661 
    ;
    
#line 662 
    *caps = (unsigned char)1U;
    
#line 663 
    goto ldv_49137;
    case 5: 
#line 665 
    ;
    
#line 667 
    *caps = (unsigned char)128U;
    
#line 668 
    goto ldv_49137;
    case 6: 
#line 670 
    ;
    
#line 672 
    *caps = (unsigned char)128U;
    
#line 673 
    goto ldv_49137;
    case 7: 
#line 675 
    ;
    
#line 676 
    *caps = (unsigned char)1U;
    
#line 677 
    goto ldv_49137;
    case 4: 
#line 679 
    ;
    case 8: 
#line 680 
    ;
    
#line 681 
    *caps = (unsigned char)0U;
    
#line 682 
    goto ldv_49137;
    case 9: 
#line 684 
    ;
    
#line 685 
    *caps = (unsigned char)pi->dcb.supported;
    
#line 686 
    goto ldv_49137;
    default: 
#line 688 
    ;
    
#line 689 
    *caps = (unsigned char)0U;
  }
  ldv_49137: 
#line 692 
  ;
  
#line 692 
  __retres = (unsigned char)0U;
  
#line 692 
  return __retres;
}


#line 697  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static int cxgb4_getnumtcs(struct net_device *dev, int tcs_id, u8 *num)
{
  int __retres;
  
#line 699 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 701 
  switch (tcs_id) {
    case 2: 
#line 702 
    ;
    
#line 703 
    if (((unsigned int)pi->dcb.msgs & 2U) != 0U) 
#line 704 
                                                 *num = pi->dcb.pg_num_tcs_supported; else 
                                                                    
#line 706 
                                                                    *num = (unsigned char)8U;
    
#line 707 
    goto ldv_49152;
    case 3: 
#line 709 
    ;
    
#line 710 
    *num = (unsigned char)8U;
    
#line 711 
    goto ldv_49152;
    default: 
#line 713 
    ;
    
#line 714 
    __retres = -22;
    
#line 714 
    goto return_label;
  }
  ldv_49152: 
#line 717 
  ;
  
#line 717 
  __retres = 0;
  return_label: 
#line 717 
                return __retres;
}


#line 723  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static int cxgb4_setnumtcs(struct net_device *dev, int tcs_id, u8 num)
{
  int __retres;
  
#line 727 
  __retres = -38;
  
#line 727 
  return __retres;
}


#line 731  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static u8 cxgb4_getpfcstate(struct net_device *dev)
{
  u8 __retres;
  
#line 733 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 735 
  if (pi->dcb.state != (unsigned int)CXGB4_DCB_STATE_FW_ALLSYNCED) {
    
#line 736 
    __retres = (unsigned char)0U;
    
#line 736 
    goto return_label;
  }
  else ;
  
#line 738 
  __retres = (unsigned char)((unsigned int)pi->dcb.pfcen != 0U);
  return_label: 
#line 738 
                return __retres;
}


#line 742  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static void cxgb4_setpfcstate(struct net_device *dev, u8 state)
{
  
#line 744 
  return;
}


#line 752  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static int __cxgb4_getapp(struct net_device *dev, u8 app_idtype, u16 app_id, int peer)
{
  int __retres;
  int i;
  
#line 755 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 756 
  struct adapter *adap = pi->adapter;
  
#line 759 
  if (pi->dcb.state != (unsigned int)CXGB4_DCB_STATE_FW_ALLSYNCED) {
    
#line 760 
    __retres = 0;
    
#line 760 
    goto return_label;
  }
  else ;
  
#line 762 
  i = 0;
  
#line 762 
  goto ldv_49181;
  ldv_49180: 
#line 763 
  ;
  {
    struct fw_port_cmd pcmd;
    int err;
    int tmp_3;
    
#line 766 
    if (peer != 0) {
      
#line 767 
      memset((void *)(& pcmd),0,32UL);
      
#line 767 
      if (0 != 0) 
#line 767 
                  pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 767 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
      
#line 767 
      pcmd.action_to_len16 = 33556224U;
    }
    else {
      
#line 769 
      memset((void *)(& pcmd),0,32UL);
      
#line 769 
      if (0 != 0) 
#line 769 
                  pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 769 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
      
#line 769 
      pcmd.action_to_len16 = 33555968U;
    }
    
#line 771 
    pcmd.u.dcb.app_priority.type = (unsigned char)4U;
    
#line 772 
    pcmd.u.dcb.app_priority.idx = (unsigned char)i;
    
#line 774 
    err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
    
#line 775 
    if (err != 0) {
      
#line 776 
      dev_err((struct device const *)adap->pdev_dev,"DCB APP read failed with %d\n",- err);
      
#line 778 
      __retres = err;
      
#line 778 
      goto return_label;
    }
    else ;
    
#line 780 
    if (0 != 0) 
#line 780 
                tmp_3 = (int)((unsigned short)(((int)pcmd.u.dcb.app_priority.protocolid << 8) | ((int)pcmd.u.dcb.app_priority.protocolid >> 8)));
    else {
      __u16 tmp_2;
      
#line 780 
      tmp_2 = __fswab16((unsigned short)((int)pcmd.u.dcb.app_priority.protocolid));
      
#line 780 
      tmp_3 = (int)tmp_2;
    }
    
#line 780 
    ;
    
#line 780 
    if (tmp_3 == (int)app_id) {
      
#line 781 
      if ((int)pcmd.u.dcb.app_priority.sel_field == (int)app_idtype) {
        
#line 782 
        __retres = (int)pcmd.u.dcb.app_priority.user_prio_map;
        
#line 782 
        goto return_label;
      }
      else ;
    }
    else ;
    
#line 785 
    if ((unsigned int)pcmd.u.dcb.app_priority.protocolid == 0U) 
#line 786 
                                                                goto ldv_49179; else ;
  }
  
#line 762 
  i += 1;
  ldv_49181: 
#line 763 
  ;
  
#line 762 
  if (i <= 7) 
#line 764 
              goto ldv_49180; else 
#line 767 
                                   goto ldv_49179;
  ldv_49179: 
#line 768 
  ;
  
#line 789 
  __retres = -17;
  return_label: 
#line 789 
                return __retres;
}


#line 795  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static int cxgb4_getapp(struct net_device *dev, u8 app_idtype, u16 app_id)
{
  int tmp;
  
#line 797 
  tmp = __cxgb4_getapp(dev,(unsigned char)((int)app_idtype),(unsigned short)((int)app_id),0);
  
#line 797 
  return tmp;
}


#line 802  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static int __cxgb4_setapp(struct net_device *dev, u8 app_idtype, u16 app_id, u8 app_prio)
{
  int __retres;
  struct fw_port_cmd pcmd;
  int i;
  int err;
  int tmp_1;
  bool tmp_0;
  int tmp_4;
  
#line 806 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 807 
  struct adapter *adap = pi->adapter;
  
#line 811 
  if (pi->dcb.state != (unsigned int)CXGB4_DCB_STATE_FW_ALLSYNCED) {
    
#line 812 
    __retres = -22;
    
#line 812 
    goto return_label;
  }
  else ;
  
#line 815 
  tmp_0 = netif_carrier_ok((struct net_device const *)dev);
  
#line 815 
  if (tmp_0) 
#line 815 
             tmp_1 = 0; else 
#line 815 
                             tmp_1 = 1;
  
#line 815 
  if (tmp_1) {
    
#line 816 
    __retres = -67;
    
#line 816 
    goto return_label;
  }
  else ;
  
#line 818 
  i = 0;
  
#line 818 
  goto ldv_49200;
  ldv_49199: 
#line 819 
  ;
  
#line 819 
  memset((void *)(& pcmd),0,32UL);
  
#line 819 
  if (0 != 0) 
#line 819 
              pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 819 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
  
#line 819 
  pcmd.action_to_len16 = 33555968U;
  
#line 820 
  pcmd.u.dcb.app_priority.type = (unsigned char)4U;
  
#line 821 
  pcmd.u.dcb.app_priority.idx = (unsigned char)i;
  
#line 822 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 824 
  if (err != 0) {
    
#line 825 
    dev_err((struct device const *)adap->pdev_dev,"DCB app table read failed with %d\n",- err);
    
#line 827 
    __retres = err;
    
#line 827 
    goto return_label;
  }
  else ;
  
#line 829 
  if (0 != 0) 
#line 829 
              tmp_4 = (int)((unsigned short)(((int)pcmd.u.dcb.app_priority.protocolid << 8) | ((int)pcmd.u.dcb.app_priority.protocolid >> 8)));
  else {
    __u16 tmp_3;
    
#line 829 
    tmp_3 = __fswab16((unsigned short)((int)pcmd.u.dcb.app_priority.protocolid));
    
#line 829 
    tmp_4 = (int)tmp_3;
  }
  
#line 829 
  ;
  
#line 829 
  if (tmp_4 == (int)app_id) {
    
#line 831 
    pcmd.u.dcb.app_priority.protocolid = (unsigned short)0U;
    
#line 832 
    goto ldv_49198;
  }
  else ;
  
#line 835 
  if ((unsigned int)pcmd.u.dcb.app_priority.protocolid == 0U) 
#line 836 
                                                              goto ldv_49198; else ;
  
#line 818 
  i += 1;
  ldv_49200: 
#line 819 
  ;
  
#line 818 
  if (i <= 7) 
#line 820 
              goto ldv_49199; else 
#line 823 
                                   goto ldv_49198;
  ldv_49198: 
#line 824 
  ;
  
#line 839 
  if (i == 8) {
    
#line 841 
    dev_err((struct device const *)adap->pdev_dev,"DCB app table full\n");
    
#line 842 
    __retres = -16;
    
#line 842 
    goto return_label;
  }
  else ;
  
#line 846 
  memset((void *)(& pcmd),0,32UL);
  
#line 846 
  if (0 != 0) 
#line 846 
              pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 36891U; else 
                                                                    
#line 846 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 462422016U);
  
#line 846 
  pcmd.action_to_len16 = 33555712U;
  
#line 847 
  if (pi->dcb.state == (unsigned int)CXGB4_DCB_STATE_HOST) 
#line 848 
                                                           pcmd.op_to_portid |= 2147483648U; else ;
  
#line 850 
  pcmd.u.dcb.app_priority.type = (unsigned char)4U;
  
#line 851 
  if (0 != 0) 
#line 851 
              pcmd.u.dcb.app_priority.protocolid = (unsigned short)(((int)app_id << 8) | ((int)app_id >> 8)); else 
                                                                    
#line 851 
                                                                    pcmd.u.dcb.app_priority.protocolid = __fswab16((unsigned short)((int)app_id));
  
#line 852 
  pcmd.u.dcb.app_priority.sel_field = app_idtype;
  
#line 853 
  pcmd.u.dcb.app_priority.user_prio_map = app_prio;
  
#line 854 
  pcmd.u.dcb.app_priority.idx = (unsigned char)i;
  
#line 856 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 857 
  if (err != 0) {
    
#line 858 
    dev_err((struct device const *)adap->pdev_dev,"DCB app table write failed with %d\n",- err);
    
#line 860 
    __retres = err;
    
#line 860 
    goto return_label;
  }
  else ;
  
#line 863 
  __retres = 0;
  return_label: 
#line 863 
                return __retres;
}


#line 867  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static int cxgb4_setapp(struct net_device *dev, u8 app_idtype, u16 app_id, u8 app_prio)
{
  int __retres;
  int ret;
  unsigned int tmp;
  int tmp_0;
  
#line 871 
  struct dcb_app app = {.selector = app_idtype, .priority = app_prio, .protocol = app_id};
  
#line 877 
  if ((unsigned int)app_idtype > 1U) {
    
#line 879 
    __retres = -22;
    
#line 879 
    goto return_label;
  }
  else ;
  
#line 882 
  ;
  
#line 882 
  ;
  
#line 883 
  if ((unsigned int)app_idtype == 0U) 
#line 883 
                                      tmp = 0U; else 
#line 883 
                                                     tmp = 3U;
  
#line 882 
  ;
  
#line 882 
  ret = __cxgb4_setapp(dev,(unsigned char)((int)tmp),(unsigned short)((int)app_id),(unsigned char)((int)app_prio));
  
#line 884 
  if (ret != 0) {
    
#line 885 
    __retres = ret;
    
#line 885 
    goto return_label;
  }
  else ;
  
#line 887 
  tmp_0 = dcb_setapp(dev,& app);
  
#line 887 
  __retres = tmp_0;
  return_label: 
#line 887 
                return __retres;
}


#line 893  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
__inline static int cxgb4_ieee_negotiation_complete(struct net_device *dev, enum cxgb4_dcb_fw_msgs dcb_subtype)
{
  int __retres;
  
#line 896 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 897 
  struct port_dcb_info *dcb = & pi->dcb;
  
#line 899 
  if (dcb_subtype != (unsigned int)0 && ((unsigned int)dcb->msgs & (unsigned int)dcb_subtype) == 0U) {
    
#line 900 
    __retres = 0;
    
#line 900 
    goto return_label;
  }
  else ;
  
#line 902 
  __retres = (dcb->state == (unsigned int)CXGB4_DCB_STATE_FW_ALLSYNCED && (dcb->supported & 8U) != 0U) != 0;
  return_label: 
#line 902 
                return __retres;
}


#line 906  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static int cxgb4_ieee_read_ets(struct net_device *dev, struct ieee_ets *ets, int local)
{
  int __retres;
  uint32_t tc_info;
  struct fw_port_cmd pcmd;
  int i;
  int bwg;
  int err;
  
#line 909 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 910 
  struct port_dcb_info *dcb = & pi->dcb;
  
#line 911 
  struct adapter *adap = pi->adapter;
  
#line 916 
  if (((unsigned int)dcb->msgs & 3U) == 0U) {
    
#line 917 
    __retres = 0;
    
#line 917 
    goto return_label;
  }
  else ;
  
#line 919 
  ets->ets_cap = dcb->pg_num_tcs_supported;
  
#line 921 
  if (local != 0) {
    
#line 922 
    ets->willing = (unsigned char)1U;
    
#line 923 
    memset((void *)(& pcmd),0,32UL);
    
#line 923 
    if (0 != 0) 
#line 923 
                pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 923 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
    
#line 923 
    pcmd.action_to_len16 = 33555968U;
  }
  else {
    
#line 925 
    memset((void *)(& pcmd),0,32UL);
    
#line 925 
    if (0 != 0) 
#line 925 
                pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 925 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
    
#line 925 
    pcmd.action_to_len16 = 33556224U;
  }
  
#line 928 
  pcmd.u.dcb.pgid.type = (unsigned char)0U;
  
#line 929 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 930 
  if (err != 0) {
    
#line 931 
    dev_err((struct device const *)adap->pdev_dev,"DCB read PGID failed with %d\n",- err);
    
#line 932 
    __retres = err;
    
#line 932 
    goto return_label;
  }
  else ;
  
#line 935 
  if (0 != 0) 
#line 935 
              tc_info = (((pcmd.u.dcb.pgid.pgid << 24) | ((pcmd.u.dcb.pgid.pgid << 8) & 16711680U)) | ((pcmd.u.dcb.pgid.pgid >> 8) & 65280U)) | (pcmd.u.dcb.pgid.pgid >> 24); else 
                                                                    
#line 935 
                                                                    tc_info = __fswab32(pcmd.u.dcb.pgid.pgid);
  
#line 937 
  if (local != 0) {
    
#line 938 
    memset((void *)(& pcmd),0,32UL);
    
#line 938 
    if (0 != 0) 
#line 938 
                pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 938 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
    
#line 938 
    pcmd.action_to_len16 = 33555968U;
  }
  else {
    
#line 940 
    memset((void *)(& pcmd),0,32UL);
    
#line 940 
    if (0 != 0) 
#line 940 
                pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 940 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
    
#line 940 
    pcmd.action_to_len16 = 33556224U;
  }
  
#line 942 
  pcmd.u.dcb.pgrate.type = (unsigned char)1U;
  
#line 943 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 944 
  if (err != 0) {
    
#line 945 
    dev_err((struct device const *)adap->pdev_dev,"DCB read PGRATE failed with %d\n",- err);
    
#line 947 
    __retres = err;
    
#line 947 
    goto return_label;
  }
  else ;
  
#line 950 
  i = 0;
  
#line 950 
  goto ldv_49229;
  ldv_49228: 
#line 951 
  ;
  
#line 951 
  bwg = (int)(tc_info >> (7 - i) * 4) & 15;
  
#line 952 
  ets->prio_tc[i] = (unsigned char)bwg;
  
#line 953 
  ets->tc_tx_bw[i] = pcmd.u.dcb.pgrate.pgrate[i];
  
#line 954 
  ets->tc_rx_bw[i] = ets->tc_tx_bw[i];
  
#line 955 
  ets->tc_tsa[i] = pcmd.u.dcb.pgrate.tsa[i];
  
#line 950 
  i += 1;
  ldv_49229: 
#line 951 
  ;
  
#line 950 
  if (i <= 7) 
#line 952 
              goto ldv_49228; else 
#line 955 
                                   goto ldv_49230;
  ldv_49230: 
#line 956 
  ;
  
#line 958 
  __retres = 0;
  return_label: 
#line 958 
                return __retres;
}


#line 961  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static int cxgb4_ieee_get_ets(struct net_device *dev, struct ieee_ets *ets)
{
  int tmp;
  
#line 963 
  tmp = cxgb4_ieee_read_ets(dev,ets,1);
  
#line 963 
  return tmp;
}


#line 967  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static int cxgb4_ieee_get_pfc(struct net_device *dev, struct ieee_pfc *pfc)
{
  int __retres;
  
#line 969 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 970 
  struct port_dcb_info *dcb = & pi->dcb;
  
#line 972 
  memset((void *)pfc,0,136UL);
  
#line 974 
  if (((unsigned int)dcb->msgs & 8U) == 0U) {
    
#line 975 
    __retres = 0;
    
#line 975 
    goto return_label;
  }
  else ;
  
#line 977 
  pfc->pfc_cap = dcb->pfc_num_tcs_supported;
  
#line 978 
  pfc->pfc_en = bitswap_1((unsigned char)((int)dcb->pfcen));
  
#line 980 
  __retres = 0;
  return_label: 
#line 980 
                return __retres;
}


#line 983  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static int cxgb4_ieee_peer_ets(struct net_device *dev, struct ieee_ets *ets)
{
  int tmp;
  
#line 985 
  tmp = cxgb4_ieee_read_ets(dev,ets,0);
  
#line 985 
  return tmp;
}


#line 992  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static int cxgb4_ieee_getapp(struct net_device *dev, struct dcb_app *app)
{
  int __retres;
  int prio;
  int tmp;
  int tmp_1;
  
#line 996 
  tmp = cxgb4_ieee_negotiation_complete(dev,(enum cxgb4_dcb_fw_msgs)CXGB4_DCB_FW_APP_ID);
  
#line 996 
  if (tmp == 0) {
    
#line 997 
    __retres = -22;
    
#line 997 
    goto return_label;
  }
  else ;
  
#line 998 
  if ((unsigned int)app->selector == 0U || (unsigned int)app->protocol == 0U) {
    
#line 999 
    __retres = -22;
    
#line 999 
    goto return_label;
  }
  else ;
  
#line 1002 
  prio = __cxgb4_getapp(dev,(unsigned char)((int)((unsigned int)app->selector + 255U)),(unsigned short)((int)app->protocol),0);
  
#line 1004 
  if (prio < 0) {
    u8 tmp_0;
    
#line 1005 
    tmp_0 = dcb_ieee_getapp_mask(dev,app);
    
#line 1005 
    prio = (int)tmp_0;
  }
  else ;
  
#line 1007 
  tmp_1 = fls(prio);
  
#line 1007 
  app->priority = (unsigned char)((unsigned int)((unsigned char)tmp_1) + 255U);
  
#line 1008 
  __retres = 0;
  return_label: 
#line 1008 
                return __retres;
}


#line 1014  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static int cxgb4_ieee_setapp(struct net_device *dev, struct dcb_app *app)
{
  int __retres;
  int ret;
  int tmp;
  int tmp_0;
  
#line 1018 
  tmp = cxgb4_ieee_negotiation_complete(dev,(enum cxgb4_dcb_fw_msgs)CXGB4_DCB_FW_APP_ID);
  
#line 1018 
  if (tmp == 0) {
    
#line 1019 
    __retres = -22;
    
#line 1019 
    goto return_label;
  }
  else ;
  
#line 1020 
  if ((unsigned int)app->selector == 0U || (unsigned int)app->protocol == 0U) {
    
#line 1021 
    __retres = -22;
    
#line 1021 
    goto return_label;
  }
  else ;
  
#line 1023 
  if ((unsigned int)app->selector + 254U > 1U) {
    
#line 1025 
    __retres = -22;
    
#line 1025 
    goto return_label;
  }
  else ;
  
#line 1028 
  ret = __cxgb4_setapp(dev,(unsigned char)((int)((unsigned int)app->selector + 255U)),(unsigned short)((int)app->protocol),(unsigned char)((int)((unsigned char)(1 << (int)app->priority))));
  
#line 1030 
  if (ret != 0) {
    
#line 1031 
    __retres = ret;
    
#line 1031 
    goto return_label;
  }
  else ;
  
#line 1033 
  tmp_0 = dcb_ieee_setapp(dev,app);
  
#line 1033 
  __retres = tmp_0;
  return_label: 
#line 1033 
                return __retres;
}


#line 1038  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static u8 cxgb4_getdcbx(struct net_device *dev)
{
  u8 __retres;
  
#line 1040 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 1043 
  __retres = (unsigned char)pi->dcb.supported;
  
#line 1043 
  return __retres;
}


#line 1048  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static u8 cxgb4_setdcbx(struct net_device *dev, u8 dcb_request)
{
  u8 __retres;
  
#line 1050 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 1054 
  if (((int)dcb_request & 15) != (int)dcb_request) {
    
#line 1056 
    __retres = (unsigned char)1U;
    
#line 1056 
    goto return_label;
  }
  else ;
  
#line 1060 
  if (pi->dcb.state != (unsigned int)CXGB4_DCB_STATE_FW_ALLSYNCED) {
    
#line 1061 
    __retres = (unsigned char)1U;
    
#line 1061 
    goto return_label;
  }
  else ;
  
#line 1068 
  if ((unsigned int)dcb_request != pi->dcb.supported) {
    
#line 1069 
    __retres = (unsigned char)1U;
    
#line 1069 
    goto return_label;
  }
  else ;
  
#line 1071 
  pi->dcb.supported = (unsigned int)dcb_request;
  
#line 1072 
  __retres = (unsigned char)0U;
  return_label: 
#line 1072 
                return __retres;
}


#line 1075  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static int cxgb4_getpeer_app(struct net_device *dev, struct dcb_peer_app_info *info, u16 *app_count)
{
  int __retres;
  struct fw_port_cmd pcmd;
  int i;
  
#line 1079 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 1080 
  struct adapter *adap = pi->adapter;
  
#line 1081 
  int err = 0;
  
#line 1083 
  if (pi->dcb.state != (unsigned int)CXGB4_DCB_STATE_FW_ALLSYNCED) {
    
#line 1084 
    __retres = 1;
    
#line 1084 
    goto return_label;
  }
  else ;
  
#line 1086 
  info->willing = (unsigned char)0U;
  
#line 1087 
  info->error = (unsigned char)0U;
  
#line 1089 
  *app_count = (unsigned short)0U;
  
#line 1090 
  i = 0;
  
#line 1090 
  goto ldv_49276;
  ldv_49275: 
#line 1091 
  ;
  
#line 1091 
  memset((void *)(& pcmd),0,32UL);
  
#line 1091 
  if (0 != 0) 
#line 1091 
              pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 1091 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
  
#line 1091 
  pcmd.action_to_len16 = 33556224U;
  
#line 1092 
  pcmd.u.dcb.app_priority.type = (unsigned char)4U;
  
#line 1093 
  pcmd.u.dcb.app_priority.idx = (unsigned char)*app_count;
  
#line 1094 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 1096 
  if (err != 0) {
    
#line 1097 
    dev_err((struct device const *)adap->pdev_dev,"DCB app table read failed with %d\n",- err);
    
#line 1099 
    __retres = err;
    
#line 1099 
    goto return_label;
  }
  else ;
  
#line 1103 
  if ((unsigned int)pcmd.u.dcb.app_priority.protocolid == 0U) 
#line 1104 
                                                              goto ldv_49274; else ;
  
#line 1090 
  i += 1;
  ldv_49276: 
#line 1091 
  ;
  
#line 1090 
  if (i <= 7) 
#line 1092 
              goto ldv_49275; else 
#line 1095 
                                   goto ldv_49274;
  ldv_49274: 
#line 1096 
  ;
  
#line 1106 
  *app_count = (unsigned short)i;
  
#line 1107 
  __retres = err;
  return_label: 
#line 1107 
                return __retres;
}


#line 1110  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static int cxgb4_getpeerapp_tbl(struct net_device *dev, struct dcb_app *table)
{
  int __retres;
  struct fw_port_cmd pcmd;
  int i;
  int tmp_2;
  
#line 1113 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 1114 
  struct adapter *adap = pi->adapter;
  
#line 1115 
  int err = 0;
  
#line 1117 
  if (pi->dcb.state != (unsigned int)CXGB4_DCB_STATE_FW_ALLSYNCED) {
    
#line 1118 
    __retres = 1;
    
#line 1118 
    goto return_label;
  }
  else ;
  
#line 1120 
  i = 0;
  
#line 1120 
  goto ldv_49288;
  ldv_49287: 
#line 1121 
  ;
  
#line 1121 
  memset((void *)(& pcmd),0,32UL);
  
#line 1121 
  if (0 != 0) 
#line 1121 
              pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 1121 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
  
#line 1121 
  pcmd.action_to_len16 = 33556224U;
  
#line 1122 
  pcmd.u.dcb.app_priority.type = (unsigned char)4U;
  
#line 1123 
  pcmd.u.dcb.app_priority.idx = (unsigned char)i;
  
#line 1124 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 1126 
  if (err != 0) {
    
#line 1127 
    dev_err((struct device const *)adap->pdev_dev,"DCB app table read failed with %d\n",- err);
    
#line 1129 
    __retres = err;
    
#line 1129 
    goto return_label;
  }
  else ;
  
#line 1133 
  if ((unsigned int)pcmd.u.dcb.app_priority.protocolid == 0U) 
#line 1134 
                                                              goto ldv_49286; else ;
  
#line 1136 
  (table + i)->selector = pcmd.u.dcb.app_priority.sel_field;
  
#line 1137 
  if (0 != 0) 
#line 1137 
              (table + i)->protocol = (unsigned short)(((int)pcmd.u.dcb.app_priority.protocolid << 8) | ((int)pcmd.u.dcb.app_priority.protocolid >> 8)); else 
                                                                    
#line 1138 
                                                                    (table + i)->protocol = __fswab16((unsigned short)((int)pcmd.u.dcb.app_priority.protocolid));
  
#line 1139 
  tmp_2 = fls((int)pcmd.u.dcb.app_priority.user_prio_map);
  
#line 1139 
  (table + i)->priority = (unsigned char)((unsigned int)((unsigned char)tmp_2) + 255U);
  
#line 1120 
  i += 1;
  ldv_49288: 
#line 1121 
  ;
  
#line 1120 
  if (i <= 7) 
#line 1122 
              goto ldv_49287; else 
#line 1125 
                                   goto ldv_49286;
  ldv_49286: 
#line 1126 
  ;
  
#line 1142 
  __retres = err;
  return_label: 
#line 1142 
                return __retres;
}


#line 1147  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static int cxgb4_cee_peer_getpg(struct net_device *dev, struct cee_pg *pg)
{
  int __retres;
  struct fw_port_cmd pcmd;
  u32 pgid;
  int i;
  int err;
  
#line 1150 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 1151 
  struct adapter *adap = pi->adapter;
  
#line 1158 
  pg->willing = (unsigned char)1U;
  
#line 1160 
  memset((void *)(& pcmd),0,32UL);
  
#line 1160 
  if (0 != 0) 
#line 1160 
              pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 1160 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
  
#line 1160 
  pcmd.action_to_len16 = 33556224U;
  
#line 1161 
  pcmd.u.dcb.pgid.type = (unsigned char)0U;
  
#line 1162 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 1163 
  if (err != 0) {
    
#line 1164 
    dev_err((struct device const *)adap->pdev_dev,"DCB read PGID failed with %d\n",- err);
    
#line 1165 
    __retres = err;
    
#line 1165 
    goto return_label;
  }
  else ;
  
#line 1167 
  if (0 != 0) 
#line 1167 
              pgid = (((pcmd.u.dcb.pgid.pgid << 24) | ((pcmd.u.dcb.pgid.pgid << 8) & 16711680U)) | ((pcmd.u.dcb.pgid.pgid >> 8) & 65280U)) | (pcmd.u.dcb.pgid.pgid >> 24); else 
                                                                    
#line 1167 
                                                                    pgid = __fswab32(pcmd.u.dcb.pgid.pgid);
  
#line 1169 
  i = 0;
  
#line 1169 
  goto ldv_49300;
  ldv_49299: 
#line 1170 
  ;
  
#line 1170 
  pg->prio_pg[7 - i] = (unsigned char)((unsigned int)((unsigned char)(pgid >> i * 4)) & 15U);
  
#line 1169 
  i += 1;
  ldv_49300: 
#line 1170 
  ;
  
#line 1169 
  if (i <= 7) 
#line 1171 
              goto ldv_49299; else 
#line 1174 
                                   goto ldv_49301;
  ldv_49301: 
#line 1175 
  ;
  
#line 1172 
  memset((void *)(& pcmd),0,32UL);
  
#line 1172 
  if (0 != 0) 
#line 1172 
              pcmd.op_to_portid = (((unsigned int)pi->port_id << 24) | (((unsigned int)pi->port_id << 8) & 16711680U)) | 49179U; else 
                                                                    
#line 1172 
                                                                    pcmd.op_to_portid = __fswab32((unsigned int)pi->port_id | 465567744U);
  
#line 1172 
  pcmd.action_to_len16 = 33556224U;
  
#line 1173 
  pcmd.u.dcb.pgrate.type = (unsigned char)1U;
  
#line 1174 
  err = t4_wr_mbox(adap,(int)adap->mbox,(void const *)(& pcmd),32,(void *)(& pcmd));
  
#line 1175 
  if (err != 0) {
    
#line 1176 
    dev_err((struct device const *)adap->pdev_dev,"DCB read PGRATE failed with %d\n",- err);
    
#line 1178 
    __retres = err;
    
#line 1178 
    goto return_label;
  }
  else ;
  
#line 1181 
  i = 0;
  
#line 1181 
  goto ldv_49303;
  ldv_49302: 
#line 1182 
  ;
  
#line 1182 
  pg->pg_bw[i] = pcmd.u.dcb.pgrate.pgrate[i];
  
#line 1181 
  i += 1;
  ldv_49303: 
#line 1182 
  ;
  
#line 1181 
  if (i <= 7) 
#line 1183 
              goto ldv_49302; else 
#line 1186 
                                   goto ldv_49304;
  ldv_49304: 
#line 1187 
  ;
  
#line 1184 
  __retres = 0;
  return_label: 
#line 1184 
                return __retres;
}


#line 1189  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
static int cxgb4_cee_peer_getpfc(struct net_device *dev, struct cee_pfc *pfc)
{
  int __retres;
  
#line 1191 
  struct port_info *pi = netdev2pinfo((struct net_device const *)dev);
  
#line 1193 
  cxgb4_getnumtcs(dev,3,& pfc->tcs_supported);
  
#line 1199 
  pfc->pfc_en = bitswap_1((unsigned char)((int)pi->dcb.pfcen));
  
#line 1201 
  __retres = 0;
  
#line 1201 
  return __retres;
}


#line 1204  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/cxgb4_dcb.c"
struct dcbnl_rtnl_ops const cxgb4_dcb_ops = {.ieee_getets = & cxgb4_ieee_get_ets, .ieee_setets = (int (*)(struct net_device *, struct ieee_ets *))0, .ieee_getmaxrate = (int (*)(struct net_device *, struct ieee_maxrate *))0, .ieee_setmaxrate = (int (*)(struct net_device *, struct ieee_maxrate *))0, .ieee_getqcn = (int (*)(struct net_device *, struct ieee_qcn *))0, .ieee_setqcn = (int (*)(struct net_device *, struct ieee_qcn *))0, .ieee_getqcnstats = (int (*)(struct net_device *, struct ieee_qcn_stats *))0, .ieee_getpfc = & cxgb4_ieee_get_pfc, .ieee_setpfc = (int (*)(struct net_device *, struct ieee_pfc *))0, .ieee_getapp = & cxgb4_ieee_getapp, .ieee_setapp = & cxgb4_ieee_setapp, .ieee_delapp = (int (*)(struct net_device *, struct dcb_app *))0, .ieee_peer_getets = & cxgb4_ieee_peer_ets, .ieee_peer_getpfc = & cxgb4_ieee_get_pfc, .getstate = & cxgb4_getstate, .setstate = & cxgb4_setstate, .getpermhwaddr = (void (*)(struct net_device *, u8 *))0, .setpgtccfgtx = & cxgb4_setpgtccfg_tx, .setpgbwgcfgtx = & cxgb4_setpgbwgcfg_tx, .setpgtccfgrx = (void (*)(struct net_device *, int , u8 , u8 , u8 , u8 ))0, .setpgbwgcfgrx = (void (*)(struct net_device *, int , u8 ))0, .getpgtccfgtx = & cxgb4_getpgtccfg_tx, .getpgbwgcfgtx = & cxgb4_getpgbwgcfg_tx, .getpgtccfgrx = & cxgb4_getpgtccfg_rx, .getpgbwgcfgrx = & cxgb4_getpgbwgcfg_rx, .setpfccfg = & cxgb4_setpfccfg, .getpfccfg = & cxgb4_getpfccfg, .setall = & cxgb4_setall, .getcap = & cxgb4_getcap, .getnumtcs = & cxgb4_getnumtcs, .setnumtcs = & cxgb4_setnumtcs, .getpfcstate = & cxgb4_getpfcstate, .setpfcstate = & cxgb4_setpfcstate, .getbcncfg = (void (*)(struct net_device *, int , u32 *))0, .setbcncfg = (void (*)(struct net_device *, int , u32 ))0, .getbcnrp = (void (*)(struct net_device *, int , u8 *))0, .setbcnrp = (void (*)(struct net_device *, int , u8 ))0, .setapp = & cxgb4_setapp, .getapp = & cxgb4_getapp, .getfeatcfg = (u8 (*)(struct net_device *, int , u8 *))0, .setfeatcfg = (u8 (*)(struct net_device *, int , u8 ))0, .getdcbx = & cxgb4_getdcbx, .setdcbx = & cxgb4_setdcbx, .peer_getappinfo = & cxgb4_getpeer_app, .peer_getapptable = & cxgb4_getpeerapp_tbl, .cee_peer_getpg = & cxgb4_cee_peer_getpg, .cee_peer_getpfc = & cxgb4_cee_peer_getpfc};

#line 11  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
int ldv_atomic_add_return(int i, atomic_t *v);


#line 98  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/arch/x86/include/asm/atomic.h"
static void atomic_inc_1(atomic_t *v);


#line 114 
static void atomic_dec_1(atomic_t *v);


#line 120 
static int atomic_dec_and_test_0(atomic_t *v);


#line 159 
static int atomic_add_return(int i, atomic_t *v);


#line 30  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/rwlock_api_smp.h"
void _raw_read_unlock(rwlock_t *);


#line 310  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_3(spinlock_t *lock)
{
  
#line 312 
  _raw_spin_lock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 313 
  return;
}


#line 366 
static void ldv_spin_lock_81_0(spinlock_t *lock);


#line 370 
static void ldv_spin_lock_92(spinlock_t *lock);


#line 374 
static void ldv_spin_lock_94_0(spinlock_t *lock);


#line 378 
static void ldv_spin_lock_96(spinlock_t *lock);


#line 382 
static void ldv_spin_lock_99_0(spinlock_t *lock);


#line 383  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_lock_bh_3(spinlock_t *lock)
{
  
#line 385 
  _raw_spin_lock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 386 
  return;
}


#line 419 
static void ldv_spin_lock_bh_83(spinlock_t *lock);


#line 423 
static void ldv_spin_lock_bh_85(spinlock_t *lock);


#line 427 
static void ldv_spin_lock_bh_88(spinlock_t *lock);


#line 431 
static void ldv_spin_lock_bh_90(spinlock_t *lock);


#line 435 
static void ldv_spin_lock_bh_101(spinlock_t *lock);


#line 363  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_3(spinlock_t *lock)
{
  
#line 365 
  _raw_spin_unlock(& lock->__anonCompField_spinlock_18.rlock);
  
#line 366 
  return;
}


#line 415 
static void ldv_spin_unlock_82_0(spinlock_t *lock);


#line 419 
static void ldv_spin_unlock_93(spinlock_t *lock);


#line 423 
static void ldv_spin_unlock_95(spinlock_t *lock);


#line 427 
static void ldv_spin_unlock_97(spinlock_t *lock);


#line 431 
static void ldv_spin_unlock_100_0(spinlock_t *lock);


#line 432  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/spinlock.h"
static void spin_unlock_bh_3(spinlock_t *lock)
{
  
#line 434 
  _raw_spin_unlock_bh(& lock->__anonCompField_spinlock_18.rlock);
  
#line 435 
  return;
}


#line 468 
static void ldv_spin_unlock_bh_84(spinlock_t *lock);


#line 472 
static void ldv_spin_unlock_bh_86(spinlock_t *lock);


#line 476 
static void ldv_spin_unlock_bh_87(spinlock_t *lock);


#line 480 
static void ldv_spin_unlock_bh_89(spinlock_t *lock);


#line 484 
static void ldv_spin_unlock_bh_91(spinlock_t *lock);


#line 488 
static void ldv_spin_unlock_bh_98(spinlock_t *lock);


#line 492 
static void ldv_spin_unlock_bh_102(spinlock_t *lock);


#line 116  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/seq_file.h"
static int ldv_seq_open_103(struct file *ldv_func_arg1, struct seq_operations const *ldv_func_arg2);


#line 112  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/if_vlan.h"
u16 vlan_dev_vlan_id(struct net_device const *);


#line 165  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/jhash.h"
__inline static u32 jhash_2words(u32 a, u32 b, u32 initval)
{
  u32 tmp;
  
#line 167 
  tmp = __jhash_nwords(a,b,0U,initval + 3735928567U);
  
#line 167 
  return tmp;
}


#line 314  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
void neigh_destroy(struct neighbour *);


#line 315 
int __neigh_event_send(struct neighbour *, struct sk_buff *);


#line 408  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
__inline static void neigh_release(struct neighbour *neigh)
{
  int tmp;
  
#line 410 
  tmp = atomic_dec_and_test_0(& neigh->refcnt);
  
#line 410 
  if (tmp != 0) 
#line 411 
                neigh_destroy(neigh); else ;
  
#line 412 
  return;
}


#line 423  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/net/neighbour.h"
__inline static int neigh_event_send(struct neighbour *neigh, struct sk_buff *skb)
{
  int __retres;
  
#line 425 
  unsigned long now = jiffies;
  
#line 427 
  if (neigh->used != now) 
#line 428 
                          neigh->used = now; else ;
  
#line 429 
  if (((int)neigh->nud_state & 218) == 0) {
    int tmp;
    
#line 430 
    tmp = __neigh_event_send(neigh,skb);
    
#line 430 
    __retres = tmp;
    
#line 430 
    goto return_label;
  }
  else ;
  
#line 431 
  __retres = 0;
  return_label: 
#line 431 
                return __retres;
}


#line 96  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.h"
int cxgb4_l2t_send(struct net_device *dev, struct sk_buff *skb, struct l2t_entry *e);


#line 98 
struct l2t_entry *cxgb4_l2t_get(struct l2t_data *d, struct neighbour *neigh, struct net_device const *physdev, unsigned int priority);


#line 101 
u64 cxgb4_select_ntuple(struct net_device *dev, struct l2t_entry const *l2t);


#line 74  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
__inline static unsigned int vlan_prio(struct l2t_entry const *e)
{
  unsigned int __retres;
  
#line 76 
  __retres = (unsigned int)((int)e->vlan >> 13);
  
#line 76 
  return __retres;
}


#line 79  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
__inline static void l2t_hold(struct l2t_data *d, struct l2t_entry *e)
{
  int tmp;
  
#line 81 
  tmp = atomic_add_return(1,& e->refcnt);
  
#line 81 
  if (tmp == 1) 
#line 82 
                atomic_dec_1(& d->nfree); else ;
  
#line 83 
  return;
}


#line 95  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
__inline static unsigned int arp_hash(u32 const *key, int ifindex)
{
  unsigned int __retres;
  u32 tmp;
  
#line 97 
  tmp = jhash_2words(*key,(unsigned int)ifindex,0U);
  
#line 97 
  __retres = tmp & 2047U;
  
#line 97 
  return __retres;
}


#line 100  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
__inline static unsigned int ipv6_hash(u32 const *key, int ifindex)
{
  unsigned int __retres;
  u32 tmp;
  
#line 102 
  u32 xor = ((*key ^ *(key + 1U)) ^ *(key + 2U)) ^ *(key + 3U);
  
#line 104 
  tmp = jhash_2words(xor,(unsigned int)ifindex,0U);
  
#line 104 
  __retres = (tmp & 2047U) + 2048U;
  
#line 104 
  return __retres;
}


#line 107  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static unsigned int addr_hash(u32 const *addr, int addr_len, int ifindex)
{
  unsigned int tmp_1;
  
#line 109 
  if (addr_len == 4) 
#line 109 
                     tmp_1 = arp_hash(addr,ifindex); else 
#line 109 
                                                          tmp_1 = ipv6_hash(addr,ifindex);
  
#line 109 
  return tmp_1;
}


#line 120  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static int addreq(struct l2t_entry const *e, u32 const *addr)
{
  int __retres;
  
#line 122 
  if ((unsigned int)e->v6 != 0U) {
    
#line 124 
    __retres = (int)((((e->addr[0] ^ *addr) | (e->addr[1] ^ *(addr + 1U))) | (e->addr[2] ^ *(addr + 2U))) | (e->addr[3] ^ *(addr + 3U)));
    
#line 124 
    goto return_label;
  }
  else ;
  
#line 125 
  __retres = (int)(e->addr[0] ^ *addr);
  return_label: 
#line 125 
                return __retres;
}


#line 128  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static void neigh_replace(struct l2t_entry *e, struct neighbour *n)
{
  
#line 130 
  atomic_inc_1(& n->refcnt);
  
#line 131 
  if (e->neigh != (struct neighbour *)0) 
#line 132 
                                         neigh_release(e->neigh); else ;
  
#line 133 
  e->neigh = n;
  
#line 134 
  return;
}


#line 140  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static int write_l2e(struct adapter *adap, struct l2t_entry *e, int sync)
{
  int __retres;
  struct sk_buff *skb;
  struct cpl_l2t_write_req *req;
  
#line 145 
  skb = alloc_skb(32U,32U);
  
#line 146 
  if (skb == (struct sk_buff *)0) {
    
#line 147 
    __retres = -12;
    
#line 147 
    goto return_label;
  }
  else ;
  
#line 149 
  req = (struct cpl_l2t_write_req *)__skb_put(skb,32U);
  
#line 150 
  req->wr.wr_hi = 268435461U;
  
#line 150 
  req->wr.wr_mid = 33554432U;
  
#line 150 
  req->wr.wr_lo = 0ULL;
  
#line 152 
  if (0 != 0) {
    int tmp_1;
    int tmp_2;
    int tmp_3;
    int tmp_4;
    
#line 152 
    if (sync != 0) 
#line 152 
                   tmp_1 = 4096; else 
#line 152 
                                      tmp_1 = 0;
    
#line 152 
    if (sync != 0) 
#line 152 
                   tmp_2 = 4096; else 
#line 152 
                                      tmp_2 = 0;
    
#line 152 
    if (sync != 0) 
#line 152 
                   tmp_3 = 4096; else 
#line 152 
                                      tmp_3 = 0;
    
#line 152 
    if (sync != 0) 
#line 152 
                   tmp_4 = 4096; else 
#line 152 
                                      tmp_4 = 0;
    
#line 152 
    req->ot.opcode_tid = (((((unsigned int)(((int)e->idx | tmp_1) | ((int)adap->sge.fw_evtq.abs_id << 14)) << 24) | (((unsigned int)(((int)e->idx | tmp_2) | ((int)adap->sge.fw_evtq.abs_id << 14)) << 8) & 16711680U)) | (((unsigned int)(((int)e->idx | tmp_3) | ((int)adap->sge.fw_evtq.abs_id << 14)) >> 8) & 65280U)) | ((unsigned int)(((int)e->idx | tmp_4) | ((int)adap->sge.fw_evtq.abs_id << 14)) >> 24)) | 18U;
  }
  else {
    __u32 tmp_6;
    int tmp_5;
    
#line 152 
    if (sync != 0) 
#line 152 
                   tmp_5 = 4096; else 
#line 152 
                                      tmp_5 = 0;
    
#line 152 
    ;
    
#line 152 
    tmp_6 = __fswab32((unsigned int)((((int)e->idx | tmp_5) | ((int)adap->sge.fw_evtq.abs_id << 14)) | 301989888));
    
#line 152 
    req->ot.opcode_tid = tmp_6;
  }
  
#line 155 
  if (0 != 0) {
    int tmp_8;
    int tmp_9;
    
#line 155 
    if (sync == 0) 
#line 155 
                   tmp_8 = 32768; else 
#line 155 
                                       tmp_8 = 0;
    
#line 155 
    if (sync == 0) 
#line 155 
                   tmp_9 = 32768; else 
#line 155 
                                       tmp_9 = 0;
    
#line 155 
    req->params = (unsigned short)(((int)((unsigned short)(((int)e->lport << 8) | tmp_8)) << 8) | ((int)((unsigned short)(((int)e->lport << 8) | tmp_9)) >> 8));
  }
  else {
    __u16 tmp_11;
    int tmp_10;
    
#line 155 
    if (sync == 0) 
#line 155 
                   tmp_10 = -32768; else 
#line 155 
                                         tmp_10 = 0;
    
#line 155 
    ;
    
#line 155 
    tmp_11 = __fswab16((unsigned short)((int)((unsigned short)(((int)e->lport << 8) | tmp_10))));
    
#line 155 
    req->params = tmp_11;
  }
  
#line 156 
  if (0 != 0) 
#line 156 
              req->l2t_idx = (unsigned short)(((int)e->idx << 8) | ((int)e->idx >> 8)); else 
                                                                    
#line 156 
                                                                    req->l2t_idx = __fswab16((unsigned short)((int)e->idx));
  
#line 157 
  if (0 != 0) 
#line 157 
              req->vlan = (unsigned short)(((int)e->vlan << 8) | ((int)e->vlan >> 8)); else 
                                                                    
#line 157 
                                                                    req->vlan = __fswab16((unsigned short)((int)e->vlan));
  
#line 158 
  if (e->neigh != (struct neighbour *)0 && (((e->neigh)->dev)->flags & 8U) == 0U) 
    
#line 159 
    memcpy((void *)(& e->dmac),(void const *)(& (e->neigh)->ha),6UL); else ;
  
#line 160 
  memcpy((void *)(& req->dst_mac),(void const *)(& e->dmac),6UL);
  
#line 162 
  set_wr_txq(skb,1,0);
  
#line 163 
  t4_ofld_send(adap,skb);
  
#line 165 
  if (sync != 0 && (unsigned int)e->state != 4U) 
#line 166 
                                                 e->state = (unsigned short)3U; else ;
  
#line 167 
  __retres = 0;
  return_label: 
#line 167 
                return __retres;
}


#line 174  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static void send_pending(struct adapter *adap, struct l2t_entry *e)
{
  
#line 176 
  goto ldv_51975;
  ldv_51974: 
#line 177 
  ;
  {
    
#line 177 
    struct sk_buff *skb = e->arpq_head;
    
#line 179 
    e->arpq_head = skb->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.next;
    
#line 180 
    skb->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.next = (struct sk_buff *)0;
    
#line 181 
    t4_ofld_send(adap,skb);
  }
  ldv_51975: 
#line 183 
  ;
  
#line 176 
  if (e->arpq_head != (struct sk_buff *)0) 
#line 178 
                                           goto ldv_51974; else 
#line 181 
                                                                goto ldv_51976;
  ldv_51976: 
#line 182 
  ;
  
#line 183 
  e->arpq_tail = (struct sk_buff *)0;
  
#line 184 
  return;
}


#line 191  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
void do_l2t_write_rpl(struct adapter *adap, struct cpl_l2t_write_rpl const *rpl)
{
  unsigned int tmp_0;
  
#line 193 
  if (0 != 0) 
#line 193 
              tmp_0 = ((((rpl->ot.opcode_tid << 24) | ((rpl->ot.opcode_tid << 8) & 16711680U)) | ((rpl->ot.opcode_tid >> 8) & 65280U)) | (rpl->ot.opcode_tid >> 24)) & 16777215U;
  else {
    __u32 tmp;
    
#line 193 
    tmp = __fswab32(rpl->ot.opcode_tid);
    
#line 193 
    tmp_0 = tmp & 16777215U;
  }
  
#line 193 
  unsigned int tid = tmp_0;
  
#line 194 
  unsigned int idx = tid & 4095U;
  
#line 196 
  if ((long)((unsigned int)rpl->status != 0U) != 0L) {
    
#line 197 
    dev_err((struct device const *)adap->pdev_dev,"Unexpected L2T_WRITE_RPL status %u for entry %u\n",(int)rpl->status,idx);
    
#line 200 
    goto return_label;
  }
  else ;
  
#line 203 
  if ((tid & 4096U) != 0U) {
    
#line 204 
    struct l2t_entry *e = & (adap->l2t)->l2tab[idx];
    
#line 206 
    ldv_spin_lock_81_0(& e->lock);
    
#line 207 
    if ((unsigned int)e->state != 4U) {
      
#line 208 
      send_pending(adap,e);
      
#line 209 
      e->state = (unsigned short)((unsigned int)((unsigned short)((int)(e->neigh)->nud_state >> 2)) & 1U);
    }
    else ;
    
#line 212 
    ldv_spin_unlock_82_0(& e->lock);
  }
  else ;
  return_label: 
#line 214 
                return;
}


#line 220  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
__inline static void arpq_enqueue(struct l2t_entry *e, struct sk_buff *skb)
{
  
#line 222 
  skb->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.next = (struct sk_buff *)0;
  
#line 223 
  if (e->arpq_head != (struct sk_buff *)0) 
#line 224 
                                           (e->arpq_tail)->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.next = skb; else 
                                                                    
#line 226 
                                                                    e->arpq_head = skb;
  
#line 227 
  e->arpq_tail = skb;
  
#line 228 
  return;
}


#line 230  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
int cxgb4_l2t_send(struct net_device *dev, struct sk_buff *skb, struct l2t_entry *e)
{
  int __retres;
  
#line 233 
  struct adapter *adap = netdev2adap((struct net_device const *)dev);
  again: 
#line 235 
  ;
  
#line 236 
  switch ((int)e->state) {
    int tmp_0;
    case 1: 
#line 237 
    ;
    
#line 238 
    neigh_event_send(e->neigh,(struct sk_buff *)0);
    
#line 239 
    ldv_spin_lock_bh_83(& e->lock);
    
#line 240 
    if ((unsigned int)e->state == 1U) 
#line 241 
                                      e->state = (unsigned short)0U; else ;
    
#line 242 
    ldv_spin_unlock_bh_84(& e->lock);
    case 0: 
#line 243 
    ;
    
#line 244 
    tmp_0 = t4_ofld_send(adap,skb);
    
#line 244 
    __retres = tmp_0;
    
#line 244 
    goto return_label;
    case 2: 
#line 245 
    ;
    case 3: 
#line 246 
    ;
    
#line 247 
    ldv_spin_lock_bh_85(& e->lock);
    
#line 248 
    if ((unsigned int)e->state + 65534U > 1U) {
      
#line 250 
      ldv_spin_unlock_bh_86(& e->lock);
      
#line 251 
      goto again;
    }
    else ;
    
#line 253 
    arpq_enqueue(e,skb);
    
#line 254 
    ldv_spin_unlock_bh_87(& e->lock);
    
#line 256 
    if ((unsigned int)e->state == 2U) {
      int tmp_1;
      
#line 256 
      tmp_1 = neigh_event_send(e->neigh,(struct sk_buff *)0);
      
#line 256 
      if (tmp_1 == 0) {
        
#line 258 
        ldv_spin_lock_bh_88(& e->lock);
        
#line 259 
        if ((unsigned int)e->state == 2U && e->arpq_head != (struct sk_buff *)0) 
          
#line 260 
          write_l2e(adap,e,1); else ;
        
#line 261 
        ldv_spin_unlock_bh_89(& e->lock);
      }
      else ;
    }
    else ;
  }
  
#line 264 
  __retres = 0;
  return_label: 
#line 264 
                return __retres;
}


#line 266  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static char const __kstrtab_cxgb4_l2t_send[15U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'l', (char)'2', (char)'t', (char)'_', (char)'s', (char)'e', (char)'n', (char)'d', (char)'\000'};

#line 266 
struct kernel_symbol const __ksymtab_cxgb4_l2t_send;


#line 266  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
struct kernel_symbol const __ksymtab_cxgb4_l2t_send = {.value = (unsigned long)(& cxgb4_l2t_send), .name = (char const *)(& __kstrtab_cxgb4_l2t_send)};

#line 271  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static struct l2t_entry *alloc_l2e(struct l2t_data *d)
{
  struct l2t_entry *__retres;
  struct l2t_entry *end;
  struct l2t_entry *e;
  struct l2t_entry **p;
  int tmp;
  int tmp_0;
  int tmp_1;
  
#line 275 
  tmp = atomic_read((atomic_t const *)(& d->nfree));
  
#line 275 
  if (tmp == 0) {
    
#line 276 
    __retres = (struct l2t_entry *)0;
    
#line 276 
    goto return_label;
  }
  else ;
  
#line 279 
  e = d->rover;
  
#line 279 
  end = & d->l2tab[4096];
  
#line 279 
  goto ldv_52016;
  ldv_52015: 
#line 280 
  ;
  
#line 280 
  tmp_0 = atomic_read((atomic_t const *)(& e->refcnt));
  
#line 280 
  if (tmp_0 == 0) 
#line 281 
                  goto found; else ;
  
#line 279 
  e += 1;
  ldv_52016: 
#line 280 
  ;
  
#line 279 
  if (e != end) 
#line 281 
                goto ldv_52015; else 
#line 284 
                                     goto ldv_52017;
  ldv_52017: 
#line 285 
  ;
  
#line 283 
  e = (struct l2t_entry *)(& d->l2tab);
  
#line 283 
  goto ldv_52019;
  ldv_52018: 
#line 284 
  ;
  
#line 283 
  e += 1;
  ldv_52019: 
#line 284 
  ;
  
#line 283 
  tmp_1 = atomic_read((atomic_t const *)(& e->refcnt));
  
#line 283 
  if (tmp_1 != 0) 
#line 285 
                  goto ldv_52018; else 
#line 288 
                                       goto ldv_52020;
  ldv_52020: 
#line 289 
  ;
  found: 
#line 285 
  ;
  
#line 286 
  d->rover = e + 1U;
  
#line 287 
  atomic_dec_1(& d->nfree);
  
#line 293 
  if ((unsigned int)e->state <= 3U) {
    
#line 294 
    p = & d->l2tab[(int)e->hash].first;
    
#line 294 
    goto ldv_52023;
    ldv_52022: 
#line 295 
    ;
    
#line 295 
    if (*p == e) {
      
#line 296 
      *p = e->next;
      
#line 297 
      e->next = (struct l2t_entry *)0;
      
#line 298 
      goto ldv_52021;
    }
    else ;
    
#line 294 
    p = & (*p)->next;
    ldv_52023: 
#line 295 
    ;
    
#line 294 
    if (*p != (struct l2t_entry *)0) 
#line 296 
                                     goto ldv_52022; else 
#line 299 
                                                          goto ldv_52021;
    ldv_52021: 
#line 300 
    ;
  }
  else ;
  
#line 301 
  e->state = (unsigned short)5U;
  
#line 302 
  __retres = e;
  return_label: 
#line 302 
                return __retres;
}


#line 308  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static void t4_l2e_free(struct l2t_entry *e)
{
  struct l2t_data *d;
  int tmp;
  struct l2t_data *tmp_0;
  
#line 312 
  ldv_spin_lock_bh_90(& e->lock);
  
#line 313 
  tmp = atomic_read((atomic_t const *)(& e->refcnt));
  
#line 313 
  if (tmp == 0) {
    
#line 314 
    if (e->neigh != (struct neighbour *)0) {
      
#line 315 
      neigh_release(e->neigh);
      
#line 316 
      e->neigh = (struct neighbour *)0;
    }
    else ;
    
#line 318 
    goto ldv_52030;
    ldv_52029: 
#line 319 
    ;
    {
      
#line 319 
      struct sk_buff *skb = e->arpq_head;
      
#line 321 
      e->arpq_head = skb->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.next;
      
#line 322 
      kfree_skb(skb);
    }
    ldv_52030: 
#line 324 
    ;
    
#line 318 
    if (e->arpq_head != (struct sk_buff *)0) 
#line 320 
                                             goto ldv_52029; else 
#line 323 
                                                                  goto ldv_52031;
    ldv_52031: 
#line 324 
    ;
    
#line 324 
    e->arpq_tail = (struct sk_buff *)0;
  }
  else ;
  
#line 326 
  ldv_spin_unlock_bh_91(& e->lock);
  {
    
#line 328 
    struct l2t_entry const *__mptr = (struct l2t_entry const *)e;
    
#line 328 
    tmp_0 = (struct l2t_data *)__mptr + - ((unsigned long)((void *)88 + (unsigned int)e->idx * 152U));
  }
  
#line 328 
  d = tmp_0;
  
#line 329 
  atomic_inc_1(& d->nfree);
  
#line 330 
  return;
}


#line 332  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
void cxgb4_l2t_release(struct l2t_entry *e)
{
  int tmp;
  
#line 334 
  tmp = atomic_dec_and_test_0(& e->refcnt);
  
#line 334 
  if (tmp != 0) 
#line 335 
                t4_l2e_free(e); else ;
  
#line 336 
  return;
}


#line 337  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static char const __kstrtab_cxgb4_l2t_release[18U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'l', (char)'2', (char)'t', (char)'_', (char)'r', (char)'e', (char)'l', (char)'e', (char)'a', (char)'s', (char)'e', (char)'\000'};

#line 337 
struct kernel_symbol const __ksymtab_cxgb4_l2t_release;


#line 337  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
struct kernel_symbol const __ksymtab_cxgb4_l2t_release = {.value = (unsigned long)(& cxgb4_l2t_release), .name = (char const *)(& __kstrtab_cxgb4_l2t_release)};

#line 343  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static void reuse_entry(struct l2t_entry *e, struct neighbour *neigh)
{
  unsigned int nud_state;
  int tmp;
  
#line 347 
  ldv_spin_lock_92(& e->lock);
  
#line 348 
  if (e->neigh != neigh) 
#line 349 
                         neigh_replace(e,neigh); else ;
  
#line 350 
  nud_state = (unsigned int)neigh->nud_state;
  
#line 351 
  tmp = memcmp((void const *)(& e->dmac),(void const *)(& neigh->ha),6UL);
  
#line 351 
  if (tmp != 0) 
#line 351 
                goto _LOR;
  else 
    
#line 351 
    if ((nud_state & 222U) == 0U) _LOR: 
#line 353 
                                        e->state = (unsigned short)2U;
    else 
      
#line 354 
      if ((nud_state & 194U) != 0U) 
#line 355 
                                    e->state = (unsigned short)0U; else 
                                                                    
#line 357 
                                                                    e->state = (unsigned short)1U;
  
#line 358 
  ldv_spin_unlock_93(& e->lock);
  
#line 359 
  return;
}


#line 361  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
struct l2t_entry *cxgb4_l2t_get(struct l2t_data *d, struct neighbour *neigh, struct net_device const *physdev, unsigned int priority)
{
  u8 lport;
  u16 vlan;
  struct l2t_entry *e;
  unsigned int tmp;
  int tmp_3;
  
#line 368 
  int addr_len = (neigh->tbl)->key_len;
  
#line 369 
  u32 *addr = (u32 *)(& neigh->primary_key);
  
#line 370 
  int ifidx = (neigh->dev)->ifindex;
  
#line 371 
  tmp = addr_hash((u32 const *)addr,addr_len,ifidx);
  
#line 371 
  int hash = (int)tmp;
  
#line 373 
  if (((neigh->dev)->flags & 8U) != 0U) {
    struct port_info *tmp_0;
    
#line 374 
    tmp_0 = netdev2pinfo(physdev);
    
#line 374 
    lport = (unsigned char)((unsigned int)tmp_0->tx_chan + 4U);
  }
  else {
    struct port_info *tmp_1;
    
#line 376 
    tmp_1 = netdev2pinfo(physdev);
    
#line 376 
    lport = tmp_1->lport;
  }
  
#line 378 
  if (((neigh->dev)->priv_flags & 1U) != 0U) 
#line 379 
                                             vlan = vlan_dev_vlan_id((struct net_device const *)neigh->dev); else 
                                                                    
#line 381 
                                                                    vlan = (unsigned short)4095U;
  
#line 383 
  _raw_write_lock_bh(& d->lock);
  
#line 384 
  e = d->l2tab[hash].first;
  
#line 384 
  goto ldv_52064;
  ldv_52063: 
#line 385 
  ;
  
#line 385 
  tmp_3 = addreq((struct l2t_entry const *)e,(u32 const *)addr);
  
#line 385 
  if (tmp_3 == 0) {
    
#line 385 
    if (e->ifindex == ifidx) {
      
#line 385 
      if ((int)e->vlan == (int)vlan) {
        
#line 386 
        if ((int)e->lport == (int)lport) {
          int tmp_2;
          
#line 387 
          l2t_hold(d,e);
          
#line 388 
          tmp_2 = atomic_read((atomic_t const *)(& e->refcnt));
          
#line 388 
          if (tmp_2 == 1) 
#line 389 
                          reuse_entry(e,neigh); else ;
          
#line 390 
          goto done;
        }
        else ;
      }
      else ;
    }
    else ;
  }
  else ;
  
#line 384 
  e = e->next;
  ldv_52064: 
#line 385 
  ;
  
#line 384 
  if (e != (struct l2t_entry *)0) 
#line 386 
                                  goto ldv_52063; else 
#line 389 
                                                       goto ldv_52065;
  ldv_52065: 
#line 390 
  ;
  
#line 394 
  e = alloc_l2e(d);
  
#line 395 
  if (e != (struct l2t_entry *)0) {
    
#line 396 
    ldv_spin_lock_94_0(& e->lock);
    
#line 397 
    e->state = (unsigned short)2U;
    
#line 398 
    if (((neigh->dev)->flags & 8U) != 0U) 
#line 399 
                                          memcpy((void *)(& e->dmac),(void const *)physdev->dev_addr,6UL); else ;
    
#line 400 
    memcpy((void *)(& e->addr),(void const *)addr,(unsigned long)addr_len);
    
#line 401 
    e->ifindex = ifidx;
    
#line 402 
    e->hash = (unsigned short)hash;
    
#line 403 
    e->lport = lport;
    
#line 404 
    e->v6 = (unsigned char)(addr_len == 16);
    
#line 405 
    atomic_set(& e->refcnt,1);
    
#line 406 
    neigh_replace(e,neigh);
    
#line 407 
    e->vlan = vlan;
    
#line 408 
    e->next = d->l2tab[hash].first;
    
#line 409 
    d->l2tab[hash].first = e;
    
#line 410 
    ldv_spin_unlock_95(& e->lock);
  }
  else ;
  done: 
#line 412 
  ;
  
#line 413 
  _raw_write_unlock_bh(& d->lock);
  
#line 414 
  return e;
}


#line 416  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static char const __kstrtab_cxgb4_l2t_get[14U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'l', (char)'2', (char)'t', (char)'_', (char)'g', (char)'e', (char)'t', (char)'\000'};

#line 416 
struct kernel_symbol const __ksymtab_cxgb4_l2t_get;


#line 416  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
struct kernel_symbol const __ksymtab_cxgb4_l2t_get = {.value = (unsigned long)(& cxgb4_l2t_get), .name = (char const *)(& __kstrtab_cxgb4_l2t_get)};

#line 418  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
u64 cxgb4_select_ntuple(struct net_device *dev, struct l2t_entry const *l2t)
{
  
#line 421 
  struct adapter *adap = netdev2adap((struct net_device const *)dev);
  
#line 422 
  struct tp_params *tp = & adap->params.tp;
  
#line 423 
  u64 ntuple = 0ULL;
  
#line 428 
  if (tp->vlan_shift >= 0 && (unsigned int)l2t->vlan != 4095U) 
#line 429 
                                                               ntuple = ((unsigned long long)((unsigned int)l2t->vlan | 65536U) << tp->vlan_shift) | ntuple; else ;
  
#line 431 
  if (tp->port_shift >= 0) 
#line 432 
                           ntuple = ((unsigned long long)l2t->lport << tp->port_shift) | ntuple; else ;
  
#line 434 
  if (tp->protocol_shift >= 0) 
#line 435 
                               ntuple = (6ULL << tp->protocol_shift) | ntuple; else ;
  
#line 437 
  if (tp->vnic_shift >= 0) {
    
#line 438 
    u32 viid = cxgb4_port_viid((struct net_device const *)dev);
    
#line 439 
    u32 vf = viid & 127U;
    
#line 440 
    u32 pf = (viid >> 8) & 7U;
    
#line 441 
    u32 vld = (viid >> 7) & 1U;
    
#line 443 
    ntuple = ((unsigned long long)(((pf << 7) | vf) | (vld << 16)) << tp->vnic_shift) | ntuple;
  }
  else ;
  
#line 448 
  return ntuple;
}


#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static char const __kstrtab_cxgb4_select_ntuple[20U] = {(char)'c', (char)'x', (char)'g', (char)'b', (char)'4', (char)'_', (char)'s', (char)'e', (char)'l', (char)'e', (char)'c', (char)'t', (char)'_', (char)'n', (char)'t', (char)'u', (char)'p', (char)'l', (char)'e', (char)'\000'};

#line 450 
struct kernel_symbol const __ksymtab_cxgb4_select_ntuple;


#line 450  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
struct kernel_symbol const __ksymtab_cxgb4_select_ntuple = {.value = (unsigned long)(& cxgb4_select_ntuple), .name = (char const *)(& __kstrtab_cxgb4_select_ntuple)};

#line 457  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static void handle_failed_resolution(struct adapter *adap, struct sk_buff *arpq)
{
  
#line 459 
  goto ldv_52102;
  ldv_52101: 
#line 460 
  ;
  {
    
#line 460 
    struct sk_buff *skb = arpq;
    
#line 461 
    struct l2t_skb_cb const *cb = (struct l2t_skb_cb const *)(& skb->cb);
    
#line 463 
    arpq = skb->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.next;
    
#line 464 
    skb->__anonCompField_sk_buff_67.__anonCompField___anonunion_217_66.next = (struct sk_buff *)0;
    
#line 465 
    if (cb->arp_err_handler != (void (*)(void *, struct sk_buff *))0) 
      
#line 466 
      (*(cb->arp_err_handler))(cb->handle,skb); else 
#line 468 
                                                     t4_ofld_send(adap,skb);
  }
  ldv_52102: 
#line 470 
  ;
  
#line 459 
  if (arpq != (struct sk_buff *)0) 
#line 461 
                                   goto ldv_52101; else 
#line 464 
                                                        goto ldv_52103;
  ldv_52103: 
#line 465 
  ;
  
#line 466 
  return;
}


#line 476  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
void t4_l2t_update(struct adapter *adap, struct neighbour *neigh)
{
  struct l2t_entry *e;
  unsigned int tmp;
  int tmp_1;
  
#line 479 
  struct sk_buff *arpq = (struct sk_buff *)0;
  
#line 480 
  struct l2t_data *d = adap->l2t;
  
#line 481 
  int addr_len = (neigh->tbl)->key_len;
  
#line 482 
  u32 *addr = (u32 *)(& neigh->primary_key);
  
#line 483 
  int ifidx = (neigh->dev)->ifindex;
  
#line 484 
  tmp = addr_hash((u32 const *)addr,addr_len,ifidx);
  
#line 484 
  int hash = (int)tmp;
  
#line 486 
  _raw_read_lock_bh(& d->lock);
  
#line 487 
  e = d->l2tab[hash].first;
  
#line 487 
  goto ldv_52118;
  ldv_52117: 
#line 488 
  ;
  
#line 488 
  tmp_1 = addreq((struct l2t_entry const *)e,(u32 const *)addr);
  
#line 488 
  if (tmp_1 == 0) {
    
#line 488 
    if (e->ifindex == ifidx) {
      int tmp_0;
      
#line 489 
      ldv_spin_lock_96(& e->lock);
      
#line 490 
      tmp_0 = atomic_read((atomic_t const *)(& e->refcnt));
      
#line 490 
      if (tmp_0 != 0) 
#line 491 
                      goto found; else ;
      
#line 492 
      ldv_spin_unlock_97(& e->lock);
      
#line 493 
      goto ldv_52116;
    }
    else ;
  }
  else ;
  
#line 487 
  e = e->next;
  ldv_52118: 
#line 488 
  ;
  
#line 487 
  if (e != (struct l2t_entry *)0) 
#line 489 
                                  goto ldv_52117; else 
#line 492 
                                                       goto ldv_52116;
  ldv_52116: 
#line 493 
  ;
  
#line 495 
  _raw_read_unlock_bh(& d->lock);
  
#line 496 
  goto return_label;
  found: 
#line 498 
  ;
  
#line 499 
  _raw_read_unlock(& d->lock);
  
#line 501 
  if (e->neigh != neigh) 
#line 502 
                         neigh_replace(e,neigh); else ;
  
#line 504 
  if ((unsigned int)e->state == 2U) {
    
#line 505 
    if (((int)neigh->nud_state & 32) != 0) {
      struct sk_buff *tmp_2;
      
#line 506 
      arpq = e->arpq_head;
      
#line 507 
      tmp_2 = (struct sk_buff *)0;
      
#line 507 
      e->arpq_tail = tmp_2;
      
#line 507 
      e->arpq_head = tmp_2;
    }
    else 
      
#line 508 
      if (((int)neigh->nud_state & 198) != 0 && e->arpq_head != (struct sk_buff *)0) 
        
#line 510 
        write_l2e(adap,e,1); else ;
  }
  else {
    int tmp_3;
    
#line 513 
    e->state = (unsigned short)(((int)neigh->nud_state & 194) == 0);
    
#line 515 
    tmp_3 = memcmp((void const *)(& e->dmac),(void const *)(& neigh->ha),6UL);
    
#line 515 
    if (tmp_3 != 0) 
#line 516 
                    write_l2e(adap,e,0); else ;
  }
  
#line 519 
  ldv_spin_unlock_bh_98(& e->lock);
  
#line 521 
  if (arpq != (struct sk_buff *)0) 
#line 522 
                                   handle_failed_resolution(adap,arpq); else ;
  return_label: 
#line 523 
                return;
}


#line 529  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
struct l2t_entry *t4_l2t_alloc_switching(struct l2t_data *d)
{
  struct l2t_entry *e;
  
#line 533 
  _raw_write_lock_bh(& d->lock);
  
#line 534 
  e = alloc_l2e(d);
  
#line 535 
  if (e != (struct l2t_entry *)0) {
    
#line 536 
    ldv_spin_lock_99_0(& e->lock);
    
#line 537 
    e->state = (unsigned short)4U;
    
#line 538 
    atomic_set(& e->refcnt,1);
    
#line 539 
    ldv_spin_unlock_100_0(& e->lock);
  }
  else ;
  
#line 541 
  _raw_write_unlock_bh(& d->lock);
  
#line 542 
  return e;
}


#line 548  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
int t4_l2t_set_switching(struct adapter *adap, struct l2t_entry *e, u16 vlan, u8 port, u8 *eth_addr)
{
  int tmp;
  
#line 551 
  e->vlan = vlan;
  
#line 552 
  e->lport = port;
  
#line 553 
  memcpy((void *)(& e->dmac),(void const *)eth_addr,6UL);
  
#line 554 
  tmp = write_l2e(adap,e,0);
  
#line 554 
  return tmp;
}


#line 557  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
struct l2t_data *t4_init_l2t(void)
{
  struct l2t_data *__retres;
  int i;
  struct l2t_data *d;
  
#line 562 
  d = (struct l2t_data *)t4_alloc_mem(622680UL);
  
#line 563 
  if (d == (struct l2t_data *)0) {
    
#line 564 
    __retres = (struct l2t_data *)0;
    
#line 564 
    goto return_label;
  }
  else ;
  
#line 566 
  d->rover = (struct l2t_entry *)(& d->l2tab);
  
#line 567 
  atomic_set(& d->nfree,4096);
  {
    struct lock_class_key __key;
    
#line 568 
    __rwlock_init(& d->lock,"&d->lock",& __key);
  }
  
#line 570 
  i = 0;
  
#line 570 
  goto ldv_52138;
  ldv_52137: 
#line 571 
  ;
  
#line 571 
  d->l2tab[i].idx = (unsigned short)i;
  
#line 572 
  d->l2tab[i].state = (unsigned short)5U;
  
#line 573 
  spinlock_check(& d->l2tab[i].lock);
  {
    struct lock_class_key __key_0;
    
#line 573 
    __raw_spin_lock_init(& d->l2tab[i].lock.__anonCompField_spinlock_18.rlock,"&(&d->l2tab[i].lock)->rlock",& __key_0);
  }
  
#line 574 
  atomic_set(& d->l2tab[i].refcnt,0);
  
#line 570 
  i += 1;
  ldv_52138: 
#line 571 
  ;
  
#line 570 
  if (i <= 4095) 
#line 572 
                 goto ldv_52137; else 
#line 575 
                                      goto ldv_52139;
  ldv_52139: 
#line 576 
  ;
  
#line 576 
  __retres = d;
  return_label: 
#line 576 
                return __retres;
}


#line 579  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
__inline static void *l2t_get_idx(struct seq_file *seq, loff_t pos)
{
  void *__retres;
  struct l2t_entry *tmp;
  
#line 581 
  struct l2t_entry *l2tab = (struct l2t_entry *)seq->private;
  
#line 583 
  if (pos <= 4095LL) 
#line 583 
                     tmp = l2tab + pos; else 
#line 583 
                                             tmp = (struct l2t_entry *)0;
  
#line 583 
  __retres = (void *)tmp;
  
#line 583 
  return __retres;
}


#line 586  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static void *l2t_seq_start(struct seq_file *seq, loff_t *pos)
{
  void *tmp_0;
  
#line 588 
  if (*pos != 0LL) 
#line 588 
                   tmp_0 = l2t_get_idx(seq,*pos + -1LL); else 
#line 588 
                                                              tmp_0 = (void *)1;
  
#line 588 
  return tmp_0;
}


#line 591  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static void *l2t_seq_next(struct seq_file *seq, void *v, loff_t *pos)
{
  
#line 593 
  v = l2t_get_idx(seq,*pos);
  
#line 594 
  if (v != (void *)0) 
#line 595 
                      *pos += 1LL; else ;
  
#line 596 
  return v;
}


#line 599  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static void l2t_seq_stop(struct seq_file *seq, void *v)
{
  
#line 601 
  return;
}


#line 603  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static char l2e_state(struct l2t_entry const *e)
{
  char __retres;
  
#line 605 
  switch ((int)e->state) {
    int tmp;
    case 0: 
#line 606 
    ;
    
#line 606 
    __retres = (char)86;
    
#line 606 
    goto return_label;
    case 1: 
#line 607 
    ;
    
#line 607 
    __retres = (char)83;
    
#line 607 
    goto return_label;
    case 3: 
#line 608 
    ;
    
#line 608 
    __retres = (char)87;
    
#line 608 
    goto return_label;
    case 2: 
#line 609 
    ;
    
#line 609 
    if (e->arpq_head != (struct sk_buff *)0) 
#line 609 
                                             tmp = 65; else 
#line 609 
                                                            tmp = 82;
    
#line 609 
    __retres = (char)tmp;
    
#line 609 
    goto return_label;
    case 4: 
#line 610 
    ;
    
#line 610 
    __retres = (char)88;
    
#line 610 
    goto return_label;
    default: 
#line 611 
    ;
    
#line 612 
    __retres = (char)85;
    
#line 612 
    goto return_label;
  }
  return_label: 
#line 605 
                return __retres;
}


#line 616  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static int l2t_seq_show(struct seq_file *seq, void *v)
{
  int __retres;
  
#line 618 
  if (v == (void *)1) 
#line 619 
                      seq_puts(seq," Idx IP address                ");
  else {
    char ip[60U];
    char *tmp_0;
    int tmp_1;
    char tmp_2;
    unsigned int tmp_3;
    
#line 623 
    struct l2t_entry *e = (struct l2t_entry *)v;
    
#line 625 
    ldv_spin_lock_bh_101(& e->lock);
    
#line 626 
    if ((unsigned int)e->state == 4U) 
#line 627 
                                      ip[0] = (char)0;
    else {
      char *tmp;
      
#line 629 
      ;
      
#line 629 
      if ((unsigned int)e->v6 != 0U) 
#line 629 
                                     tmp = (char *)"%pI6c"; else 
#line 629 
                                                                 tmp = (char *)"%pI4";
      
#line 629 
      sprintf((char *)(& ip),(char const *)tmp,(u32 *)(& e->addr));
    }
    
#line 633 
    if (e->neigh != (struct neighbour *)0) 
#line 633 
                                           tmp_0 = (char *)(& ((e->neigh)->dev)->name); else 
                                                                    
#line 633 
                                                                    tmp_0 = (char *)"";
    
#line 633 
    tmp_1 = atomic_read((atomic_t const *)(& e->refcnt));
    
#line 633 
    tmp_2 = l2e_state((struct l2t_entry const *)e);
    
#line 630 
    ;
    
#line 632 
    tmp_3 = vlan_prio((struct l2t_entry const *)e);
    
#line 630 
    ;
    
#line 630 
    ;
    
#line 630 
    ;
    
#line 630 
    ;
    
#line 630 
    seq_printf(seq,"%4u %-25s %17pM %4d %u %2u   %c   %5u %s\n",(int)e->idx,(char *)(& ip),(u8 *)(& e->dmac),(int)e->vlan & 4095,tmp_3,(int)e->lport,(int)tmp_2,tmp_1,tmp_0);
    
#line 635 
    ldv_spin_unlock_bh_102(& e->lock);
  }
  
#line 637 
  __retres = 0;
  
#line 637 
  return __retres;
}


#line 640  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static struct seq_operations const l2t_seq_ops = {.start = & l2t_seq_start, .stop = & l2t_seq_stop, .next = & l2t_seq_next, .show = & l2t_seq_show};

#line 647  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
static int l2t_seq_open(struct inode *inode, struct file *file)
{
  
#line 649 
  int rc = ldv_seq_open_103(file,& l2t_seq_ops);
  
#line 651 
  if (rc == 0) {
    
#line 652 
    struct adapter *adap = (struct adapter *)inode->i_private;
    
#line 653 
    struct seq_file *seq = (struct seq_file *)file->private_data;
    
#line 655 
    seq->private = (void *)(& (adap->l2t)->l2tab);
  }
  else ;
  
#line 657 
  return rc;
}


#line 660  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/drivers/net/ethernet/chelsio/cxgb4/l2t.c"
struct file_operations const t4_l2t_fops = {.owner = & __this_module, .llseek = & seq_lseek, .read = & seq_read, .write = (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0, .read_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .write_iter = (ssize_t (*)(struct kiocb *, struct iov_iter *))0, .iterate = (int (*)(struct file *, struct dir_context *))0, .poll = (unsigned int (*)(struct file *, struct poll_table_struct *))0, .unlocked_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .compat_ioctl = (long (*)(struct file *, unsigned int , unsigned long ))0, .mmap = (int (*)(struct file *, struct vm_area_struct *))0, .mremap = (int (*)(struct file *, struct vm_area_struct *))0, .open = & l2t_seq_open, .flush = (int (*)(struct file *, fl_owner_t ))0, .release = & seq_release, .fsync = (int (*)(struct file *, loff_t , loff_t , int ))0, .aio_fsync = (int (*)(struct kiocb *, int ))0, .fasync = (int (*)(int , struct file *, int ))0, .lock = (int (*)(struct file *, int , struct file_lock *))0, .sendpage = (ssize_t (*)(struct file *, struct page *, int , size_t , loff_t *, int ))0, .get_unmapped_area = (unsigned long (*)(struct file *, unsigned long , unsigned long , unsigned long , unsigned long ))0, .check_flags = (int (*)(int ))0, .flock = (int (*)(struct file *, int , struct file_lock *))0, .splice_write = (ssize_t (*)(struct pipe_inode_info *, struct file *, loff_t *, size_t , unsigned int ))0, .splice_read = (ssize_t (*)(struct file *, loff_t *, struct pipe_inode_info *, size_t , unsigned int ))0, .setlease = (int (*)(struct file *, long , struct file_lock **, void **))0, .fallocate = (long (*)(struct file *, int , loff_t , loff_t ))0, .show_fdinfo = (void (*)(struct seq_file *, struct file *))0};

#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
int (*ldv_emg_alias_seq_release_3)(struct inode *, struct file *) = & seq_release;

#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
struct seq_operations *ldv_emg_alias_l2t_seq_ops_6 = (struct seq_operations *)(& l2t_seq_ops);

#line 80  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
void ldv_emg_wrapper_l2t_seq_stop_5(struct seq_file *arg0, void *arg1)
{
  
#line 81 
  l2t_seq_stop(arg0,arg1);
  
#line 82 
  return;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
int ldv_emg_wrapper_l2t_seq_show_4(struct seq_file *arg0, void *arg1)
{
  int tmp;
  
#line 86 
  tmp = l2t_seq_show(arg0,arg1);
  
#line 86 
  return tmp;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
void *ldv_emg_wrapper_l2t_seq_next_3(struct seq_file *arg0, void *arg1, long long *arg2)
{
  void *tmp;
  
#line 91 
  tmp = l2t_seq_next(arg0,arg1,arg2);
  
#line 91 
  return tmp;
}


#line 95  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
int ldv_emg_wrapper_l2t_seq_open_2(struct inode *arg0, struct file *arg1)
{
  int tmp;
  
#line 96 
  tmp = l2t_seq_open(arg0,arg1);
  
#line 96 
  return tmp;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
void *ldv_emg_wrapper_l2t_seq_start_2(struct seq_file *arg0, long long *arg1)
{
  void *tmp;
  
#line 101 
  tmp = l2t_seq_start(arg0,arg1);
  
#line 101 
  return tmp;
}


#line 159  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void atomic_inc_1(atomic_t *v)
{
  
#line 162 
  ldv_atomic_inc(v);
  
#line 163 
  return;
}


#line 166  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void atomic_dec_1(atomic_t *v)
{
  
#line 169 
  ldv_atomic_dec(v);
  
#line 170 
  return;
}


#line 173  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static int atomic_dec_and_test_0(atomic_t *v)
{
  int tmp;
  
#line 176 
  tmp = ldv_atomic_dec_and_test(v);
  
#line 176 
  return tmp;
}


#line 194  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static int atomic_add_return(int i, atomic_t *v)
{
  int tmp;
  
#line 197 
  tmp = ldv_atomic_add_return(i,v);
  
#line 197 
  return tmp;
}


#line 864  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_lock_81_0(spinlock_t *lock)
{
  
#line 868 
  ldv_spin_model_lock((char *)"lock_of_l2t_entry");
  
#line 870 
  spin_lock_3(lock);
  
#line 871 
  return;
}


#line 874  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_unlock_82_0(spinlock_t *lock)
{
  
#line 878 
  ldv_spin_model_unlock((char *)"lock_of_l2t_entry");
  
#line 880 
  spin_unlock_3(lock);
  
#line 881 
  return;
}


#line 884  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_lock_bh_83(spinlock_t *lock)
{
  
#line 888 
  ldv_spin_model_lock((char *)"lock_of_l2t_entry");
  
#line 890 
  spin_lock_bh_3(lock);
  
#line 891 
  return;
}


#line 894  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_unlock_bh_84(spinlock_t *lock)
{
  
#line 898 
  ldv_spin_model_unlock((char *)"lock_of_l2t_entry");
  
#line 900 
  spin_unlock_bh_3(lock);
  
#line 901 
  return;
}


#line 904  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_lock_bh_85(spinlock_t *lock)
{
  
#line 908 
  ldv_spin_model_lock((char *)"lock_of_l2t_entry");
  
#line 910 
  spin_lock_bh_3(lock);
  
#line 911 
  return;
}


#line 914  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_unlock_bh_86(spinlock_t *lock)
{
  
#line 918 
  ldv_spin_model_unlock((char *)"lock_of_l2t_entry");
  
#line 920 
  spin_unlock_bh_3(lock);
  
#line 921 
  return;
}


#line 924  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_unlock_bh_87(spinlock_t *lock)
{
  
#line 928 
  ldv_spin_model_unlock((char *)"lock_of_l2t_entry");
  
#line 930 
  spin_unlock_bh_3(lock);
  
#line 931 
  return;
}


#line 934  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_lock_bh_88(spinlock_t *lock)
{
  
#line 938 
  ldv_spin_model_lock((char *)"lock_of_l2t_entry");
  
#line 940 
  spin_lock_bh_3(lock);
  
#line 941 
  return;
}


#line 944  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_unlock_bh_89(spinlock_t *lock)
{
  
#line 948 
  ldv_spin_model_unlock((char *)"lock_of_l2t_entry");
  
#line 950 
  spin_unlock_bh_3(lock);
  
#line 951 
  return;
}


#line 954  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_lock_bh_90(spinlock_t *lock)
{
  
#line 958 
  ldv_spin_model_lock((char *)"lock_of_l2t_entry");
  
#line 960 
  spin_lock_bh_3(lock);
  
#line 961 
  return;
}


#line 964  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_unlock_bh_91(spinlock_t *lock)
{
  
#line 968 
  ldv_spin_model_unlock((char *)"lock_of_l2t_entry");
  
#line 970 
  spin_unlock_bh_3(lock);
  
#line 971 
  return;
}


#line 974  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_lock_92(spinlock_t *lock)
{
  
#line 978 
  ldv_spin_model_lock((char *)"lock_of_l2t_entry");
  
#line 980 
  spin_lock_3(lock);
  
#line 981 
  return;
}


#line 984  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_unlock_93(spinlock_t *lock)
{
  
#line 988 
  ldv_spin_model_unlock((char *)"lock_of_l2t_entry");
  
#line 990 
  spin_unlock_3(lock);
  
#line 991 
  return;
}


#line 994  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_lock_94_0(spinlock_t *lock)
{
  
#line 998 
  ldv_spin_model_lock((char *)"lock_of_l2t_entry");
  
#line 1000 
  spin_lock_3(lock);
  
#line 1001 
  return;
}


#line 1004  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_unlock_95(spinlock_t *lock)
{
  
#line 1008 
  ldv_spin_model_unlock((char *)"lock_of_l2t_entry");
  
#line 1010 
  spin_unlock_3(lock);
  
#line 1011 
  return;
}


#line 1014  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_lock_96(spinlock_t *lock)
{
  
#line 1018 
  ldv_spin_model_lock((char *)"lock_of_l2t_entry");
  
#line 1020 
  spin_lock_3(lock);
  
#line 1021 
  return;
}


#line 1024  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_unlock_97(spinlock_t *lock)
{
  
#line 1028 
  ldv_spin_model_unlock((char *)"lock_of_l2t_entry");
  
#line 1030 
  spin_unlock_3(lock);
  
#line 1031 
  return;
}


#line 1034  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_unlock_bh_98(spinlock_t *lock)
{
  
#line 1038 
  ldv_spin_model_unlock((char *)"lock_of_l2t_entry");
  
#line 1040 
  spin_unlock_bh_3(lock);
  
#line 1041 
  return;
}


#line 1044  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_lock_99_0(spinlock_t *lock)
{
  
#line 1048 
  ldv_spin_model_lock((char *)"lock_of_l2t_entry");
  
#line 1050 
  spin_lock_3(lock);
  
#line 1051 
  return;
}


#line 1054  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_unlock_100_0(spinlock_t *lock)
{
  
#line 1058 
  ldv_spin_model_unlock((char *)"lock_of_l2t_entry");
  
#line 1060 
  spin_unlock_3(lock);
  
#line 1061 
  return;
}


#line 1064  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_lock_bh_101(spinlock_t *lock)
{
  
#line 1068 
  ldv_spin_model_lock((char *)"lock_of_l2t_entry");
  
#line 1070 
  spin_lock_bh_3(lock);
  
#line 1071 
  return;
}


#line 1074  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static void ldv_spin_unlock_bh_102(spinlock_t *lock)
{
  
#line 1078 
  ldv_spin_model_unlock((char *)"lock_of_l2t_entry");
  
#line 1080 
  spin_unlock_bh_3(lock);
  
#line 1081 
  return;
}


#line 1084  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/weaver/.tmp_l2t.c.aux"
static int ldv_seq_open_103(struct file *ldv_func_arg1, struct seq_operations const *ldv_func_arg2)
{
  int tmp;
  
#line 1088 
  tmp = ldv_emg_seq_open(ldv_func_arg1,(struct seq_operations *)ldv_func_arg2);
  
#line 1088 
  return tmp;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_add(int i, atomic_t *v)
{
  
#line 23 
  v->counter += i;
  
#line 24 
  return;
}


#line 27  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_sub(int i, atomic_t *v)
{
  
#line 29 
  v->counter -= i;
  
#line 30 
  return;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_sub_and_test(int i, atomic_t *v)
{
  int __retres;
  
#line 35 
  v->counter -= i;
  
#line 36 
  if (v->counter != 0) {
    
#line 37 
    __retres = 0;
    
#line 37 
    goto return_label;
  }
  else ;
  
#line 39 
  __retres = 1;
  return_label: 
#line 39 
                return __retres;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_inc(atomic_t *v)
{
  
#line 45 
  v->counter += 1;
  
#line 46 
  return;
}


#line 49  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
void ldv_atomic_dec(atomic_t *v)
{
  
#line 51 
  v->counter -= 1;
  
#line 52 
  return;
}


#line 55  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_dec_and_test(atomic_t *v)
{
  int __retres;
  
#line 57 
  v->counter -= 1;
  
#line 58 
  if (v->counter != 0) {
    
#line 59 
    __retres = 0;
    
#line 59 
    goto return_label;
  }
  else ;
  
#line 61 
  __retres = 1;
  return_label: 
#line 61 
                return __retres;
}


#line 65  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_and_test(atomic_t *v)
{
  int __retres;
  
#line 67 
  v->counter += 1;
  
#line 68 
  if (v->counter != 0) {
    
#line 69 
    __retres = 0;
    
#line 69 
    goto return_label;
  }
  else ;
  
#line 71 
  __retres = 1;
  return_label: 
#line 71 
                return __retres;
}


#line 75  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_return(int i, atomic_t *v)
{
  int __retres;
  
#line 77 
  v->counter += i;
  
#line 78 
  __retres = v->counter;
  
#line 78 
  return __retres;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_add_negative(int i, atomic_t *v)
{
  int __retres;
  
#line 84 
  v->counter += i;
  
#line 85 
  __retres = v->counter < 0;
  
#line 85 
  return __retres;
}


#line 89  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/arch/atomic.c"
int ldv_atomic_inc_short(short *v)
{
  int __retres;
  
#line 91 
  *v = (short)((unsigned int)*v + 1U);
  
#line 92 
  __retres = (int)*v;
  
#line 92 
  return __retres;
}


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/device.h"
void *ldv_dev_get_drvdata(struct device const *dev);


#line 24 
int ldv_dev_set_drvdata(struct device *dev, void *data);


#line 30  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_xmalloc(size_t size);


#line 31 
void *ldv_xzalloc(size_t size);


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
struct ldv_list_element global_list = {.data = (void *)0, .next = (struct ldv_list_element *)0};

#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static ldv_list_ptr ldv_list_create(void *data)
{
  
#line 35 
  ldv_list_ptr list = (struct ldv_list_element *)0;
  
#line 37 
  list = (ldv_list_ptr)ldv_xmalloc(16UL);
  
#line 39 
  list->data = data;
  
#line 40 
  list->next = (struct ldv_list_element *)0;
  
#line 42 
  return list;
}


#line 45  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memlist.h"
__inline static void ldv_save_pointer(void *data)
{
  ldv_list_ptr element;
  ldv_list_ptr cached;
  
#line 50 
  if (global_list.data == (void *)0) {
    
#line 51 
    element = & global_list;
    
#line 52 
    element->data = data;
  }
  else {
    
#line 54 
    element = ldv_list_create(data);
    
#line 55 
    cached = global_list.next;
    
#line 56 
    global_list.next = element;
    
#line 57 
    element->next = cached;
  }
  
#line 60 
  return;
}


#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
void *ldv_dev_get_drvdata(struct device const *dev)
{
  void *__retres;
  
#line 30 
  if (dev != (struct device const *)0 && dev->p != (struct device_private *)0) {
    
#line 31 
    __retres = (dev->p)->driver_data;
    
#line 31 
    goto return_label;
  }
  else ;
  
#line 33 
  __retres = (void *)0;
  return_label: 
#line 33 
                return __retres;
}


#line 42  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/base/dd.c"
int ldv_dev_set_drvdata(struct device *dev, void *data)
{
  int __retres;
  
#line 44 
  dev->p = (struct device_private *)ldv_xzalloc(8UL);
  
#line 45 
  ldv_save_pointer((void *)dev->p);
  
#line 46 
  (dev->p)->driver_data = data;
  
#line 48 
  __retres = 0;
  
#line 48 
  return __retres;
}


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_zalloc(size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/drivers/spi.c"
struct spi_master *ldv_spi_alloc_master(struct device *host, unsigned int size)
{
  struct spi_master *__retres;
  struct spi_master *master;
  
#line 27 
  master = (struct spi_master *)ldv_zalloc((unsigned long)size + 2192UL);
  
#line 29 
  if (master == (struct spi_master *)0) {
    
#line 30 
    __retres = (struct spi_master *)0;
    
#line 30 
    goto return_label;
  }
  else ;
  
#line 32 
  ldv_dev_set_drvdata(& master->dev,(void *)(master + 1U));
  
#line 34 
  __retres = master;
  return_label: 
#line 34 
                return __retres;
}


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/err.h"
void *ldv_err_ptr(long error);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_assume(int);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err(void const *ptr)
{
  long __retres;
  
#line 23 
  __retres = (long)((unsigned long)ptr > 4294967295UL);
  
#line 23 
  return __retres;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
void *ldv_err_ptr(long error)
{
  void *__retres;
  
#line 28 
  __VERIFIER_assume(error < 0L);
  
#line 29 
  __retres = (void *)(4294967295L - error);
  
#line 29 
  return __retres;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_ptr_err(void const *ptr)
{
  long __retres;
  
#line 34 
  __VERIFIER_assume((unsigned long)ptr > 4294967295UL);
  
#line 35 
  __retres = (long)(4294967295UL - (unsigned long)ptr);
  
#line 35 
  return __retres;
}


#line 38  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/err.c"
long ldv_is_err_or_null(void const *ptr)
{
  long __retres;
  int tmp_0;
  
#line 40 
  if (ptr == (void const *)0) 
#line 40 
                              tmp_0 = 1;
  else {
    long tmp;
    
#line 40 
    tmp = ldv_is_err(ptr);
    
#line 40 
    if (tmp != 0L) 
#line 40 
                   tmp_0 = 1; else 
#line 40 
                                   tmp_0 = 0;
  }
  
#line 40 
  __retres = (long)tmp_0;
  
#line 40 
  return __retres;
}


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/panic.h"
void ldv_panic(void);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/kernel/panic.c"
void ldv_panic(void)
{
  
#line 23 
  __VERIFIER_assume(0);
  
#line 24 
  return;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_switch_to_interrupt_context(void);


#line 42 
void ldv_switch_to_process_context(void);


#line 50 
bool ldv_in_interrupt_context(void);


#line 112 
int ldv_post_init(int init_ret_val);


#line 132 
int ldv_post_probe(int probe_ret_val);


#line 133 
void ldv_check_return_value_probe(int);


#line 141 
int ldv_filter_err_code(int ret_val);


#line 25  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static bool __ldv_in_interrupt_context = (_Bool)0;

#line 28  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_interrupt_context(void)
{
  
#line 30 
  __ldv_in_interrupt_context = (_Bool)1;
  
#line 31 
  return;
}


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
void ldv_switch_to_process_context(void)
{
  
#line 36 
  __ldv_in_interrupt_context = (_Bool)0;
  
#line 37 
  return;
}


#line 39  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
bool ldv_in_interrupt_context(void)
{
  
#line 41 
  return __ldv_in_interrupt_context;
}


#line 44  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
static int ldv_filter_positive_int(int val)
{
  
#line 46 
  __VERIFIER_assume(val <= 0);
  
#line 47 
  return val;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_init(int init_ret_val)
{
  int tmp;
  
#line 56 
  tmp = ldv_filter_positive_int(init_ret_val);
  
#line 56 
  return tmp;
}


#line 60  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_post_probe(int probe_ret_val)
{
  int tmp;
  
#line 62 
  ldv_check_return_value_probe(probe_ret_val);
  
#line 63 
  tmp = ldv_filter_positive_int(probe_ret_val);
  
#line 63 
  return tmp;
}


#line 67  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.c"
int ldv_filter_err_code(int ret_val)
{
  int tmp;
  
#line 69 
  tmp = ldv_filter_positive_int(ret_val);
  
#line 69 
  return tmp;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/slab.h"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags);


#line 28 
void ldv_check_alloc_flags(gfp_t);


#line 29 
void ldv_after_alloc(void *);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *ldv_malloc(size_t size);


#line 24 
void *ldv_calloc(size_t nmemb, size_t size);


#line 21  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 25 
  ldv_check_alloc_flags(flags);
  
#line 26 
  res = ldv_malloc(size);
  
#line 27 
  ldv_after_alloc(res);
  
#line 29 
  return res;
}


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kcalloc(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 36 
  ldv_check_alloc_flags(flags);
  
#line 37 
  res = ldv_calloc(n,size);
  
#line 38 
  ldv_after_alloc(res);
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kzalloc(size_t size, gfp_t flags)
{
  void *res;
  
#line 47 
  ldv_check_alloc_flags(flags);
  
#line 48 
  res = ldv_zalloc(size);
  
#line 49 
  ldv_after_alloc(res);
  
#line 51 
  return res;
}


#line 54  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/mm/slab.c"
void *ldv_kmalloc_array(size_t n, size_t size, gfp_t flags)
{
  void *res;
  
#line 58 
  ldv_check_alloc_flags(flags);
  
#line 59 
  res = ldv_malloc(n * size);
  
#line 60 
  ldv_after_alloc(res);
  
#line 62 
  return res;
}


#line 26  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void ldv_free(void *s);


#line 35 
void *ldv_malloc_unknown_size(void);


#line 36 
void *ldv_calloc_unknown_size(void);


#line 37 
void *ldv_zalloc_unknown_size(void);


#line 40 
void *ldv_reference_malloc(size_t size);


#line 41 
void *ldv_reference_calloc(size_t nmemb, size_t size);


#line 42 
void *ldv_reference_zalloc(size_t size);


#line 43 
void ldv_reference_free(void *s);


#line 47 
void *ldv_reference_xmalloc(size_t size);


#line 48 
void *ldv_reference_xzalloc(size_t size);


#line 52 
void *ldv_reference_malloc_unknown_size(void);


#line 53 
void *ldv_reference_calloc_unknown_size(void);


#line 54 
void *ldv_reference_zalloc_unknown_size(void);


#line 61 
void *ldv_xmalloc_unknown_size(size_t size);


#line 32  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size);


#line 34  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc(size_t size)
{
  void *res;
  
#line 37 
  res = ldv_reference_malloc(size);
  
#line 38 
  if (res != (void *)0) {
    long tmp;
    
#line 39 
    tmp = ldv_is_err((void const *)res);
    
#line 39 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 40 
  return res;
}


#line 43  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc(size_t nmemb, size_t size)
{
  void *res;
  
#line 46 
  res = ldv_reference_calloc(nmemb,size);
  
#line 47 
  if (res != (void *)0) {
    long tmp;
    
#line 48 
    tmp = ldv_is_err((void const *)res);
    
#line 48 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 49 
  return res;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc(size_t size)
{
  void *res;
  
#line 55 
  res = ldv_reference_zalloc(size);
  
#line 56 
  if (res != (void *)0) {
    long tmp;
    
#line 57 
    tmp = ldv_is_err((void const *)res);
    
#line 57 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 58 
  return res;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void ldv_free(void *s)
{
  
#line 63 
  ldv_reference_free(s);
  
#line 64 
  return;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 69 
  res = ldv_reference_xmalloc(size);
  
#line 70 
  tmp = ldv_is_err((void const *)res);
  
#line 70 
  __VERIFIER_assume(tmp == 0L);
  
#line 71 
  return res;
}


#line 74  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xzalloc(size_t size)
{
  void *res;
  long tmp;
  
#line 77 
  res = ldv_reference_xzalloc(size);
  
#line 78 
  tmp = ldv_is_err((void const *)res);
  
#line 78 
  __VERIFIER_assume(tmp == 0L);
  
#line 79 
  return res;
}


#line 82  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_malloc_unknown_size(void)
{
  void *res;
  
#line 85 
  res = ldv_reference_malloc_unknown_size();
  
#line 86 
  if (res != (void *)0) {
    long tmp;
    
#line 87 
    tmp = ldv_is_err((void const *)res);
    
#line 87 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 88 
  return res;
}


#line 91  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_calloc_unknown_size(void)
{
  void *res;
  
#line 94 
  res = ldv_reference_calloc_unknown_size();
  
#line 95 
  if (res != (void *)0) {
    long tmp;
    
#line 96 
    tmp = ldv_is_err((void const *)res);
    
#line 96 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_zalloc_unknown_size(void)
{
  void *res;
  
#line 103 
  res = ldv_reference_zalloc_unknown_size();
  
#line 104 
  if (res != (void *)0) {
    long tmp;
    
#line 105 
    tmp = ldv_is_err((void const *)res);
    
#line 105 
    __VERIFIER_assume(tmp == 0L);
  }
  else ;
  
#line 106 
  return res;
}


#line 109  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/verifier/memory.c"
void *ldv_xmalloc_unknown_size(size_t size)
{
  void *res;
  long tmp;
  
#line 112 
  res = ldv_reference_xmalloc_unknown_size(size);
  
#line 113 
  tmp = ldv_is_err((void const *)res);
  
#line 113 
  __VERIFIER_assume(tmp == 0L);
  
#line 114 
  return res;
}

long __builtin_expect(long exp, long c);


#line 22  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/common.h"
void __VERIFIER_error(void);


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
long __builtin_expect(long exp, long c)
{
  
#line 26 
  return exp;
}


#line 35  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/gcc.c"
void __builtin_trap(void)
{
  
#line 37 
  __VERIFIER_error();
  
#line 38 
  return;
}


#line 24  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.h"
int ldv_undef_long(void);


#line 25 
unsigned int ldv_undef_uint(void);


#line 26 
unsigned long ldv_undef_ulong(void);


#line 27 
unsigned long long ldv_undef_ulonglong(void);


#line 28 
void *ldv_undef_ptr(void);


#line 31 
int ldv_undef_int_positive(void);


#line 34 
int ldv_undef_int_negative(void);


#line 37 
int ldv_undef_int_nonpositive(void);


#line 40 
void *ldv_undef_ptr_non_null(void);


#line 29  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int __VERIFIER_nondet_int(void);


#line 31 
long __VERIFIER_nondet_long(void);


#line 38 
unsigned int __VERIFIER_nondet_uint(void);


#line 41 
unsigned long __VERIFIER_nondet_ulong(void);


#line 42 
unsigned long long __VERIFIER_nondet_ulonglong(void);


#line 43 
void *__VERIFIER_nondet_pointer(void);


#line 46  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int(void)
{
  int tmp;
  
#line 48 
  tmp = __VERIFIER_nondet_int();
  
#line 48 
  return tmp;
}


#line 51  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_long(void)
{
  int __retres;
  long tmp;
  
#line 53 
  tmp = __VERIFIER_nondet_long();
  
#line 53 
  __retres = (int)tmp;
  
#line 53 
  return __retres;
}


#line 56  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned int ldv_undef_uint(void)
{
  unsigned int tmp;
  
#line 58 
  tmp = __VERIFIER_nondet_uint();
  
#line 58 
  return tmp;
}


#line 61  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr(void)
{
  void *tmp;
  
#line 63 
  tmp = __VERIFIER_nondet_pointer();
  
#line 63 
  return tmp;
}


#line 66  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long ldv_undef_ulong(void)
{
  unsigned long tmp;
  
#line 68 
  tmp = __VERIFIER_nondet_ulong();
  
#line 68 
  return tmp;
}


#line 71  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
unsigned long long ldv_undef_ulonglong(void)
{
  unsigned long long tmp;
  
#line 73 
  tmp = __VERIFIER_nondet_ulonglong();
  
#line 73 
  return tmp;
}


#line 76  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_positive(void)
{
  
#line 78 
  int ret = ldv_undef_int();
  
#line 80 
  __VERIFIER_assume(ret > 0);
  
#line 82 
  return ret;
}


#line 85  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_negative(void)
{
  
#line 87 
  int ret = ldv_undef_int();
  
#line 89 
  __VERIFIER_assume(ret < 0);
  
#line 91 
  return ret;
}


#line 94  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
int ldv_undef_int_nonpositive(void)
{
  
#line 96 
  int ret = ldv_undef_int();
  
#line 98 
  __VERIFIER_assume(ret <= 0);
  
#line 100 
  return ret;
}


#line 103  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/nondet.c"
void *ldv_undef_ptr_non_null(void)
{
  
#line 105 
  void *ret = ldv_undef_ptr();
  
#line 107 
  __VERIFIER_assume(ret != (void *)0);
  
#line 109 
  return ret;
}


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/memory.h"
void *external_allocated_data(void);


#line 45 
void *ldv_reference_realloc(void *ptr, size_t size);


#line 23  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *malloc(size_t);


#line 24 
void *calloc(size_t, size_t);


#line 25 
void free(void *);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc(size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 37 
  tmp = ldv_undef_int();
  
#line 37 
  if (tmp != 0) {
    
#line 39 
    res = malloc(size);
    
#line 40 
    __VERIFIER_assume(res != (void *)0);
    
#line 41 
    __retres = res;
    
#line 41 
    goto return_label;
  }
  else {
    
#line 44 
    __retres = (void *)0;
    
#line 44 
    goto return_label;
  }
  return_label: 
#line 37 
                return __retres;
}


#line 47  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc(size_t nmemb, size_t size)
{
  void *tmp;
  
#line 49 
  tmp = calloc(nmemb,size);
  
#line 49 
  return tmp;
}


#line 52  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc(size_t size)
{
  void *tmp;
  
#line 54 
  tmp = calloc(1UL,size);
  
#line 54 
  return tmp;
}


#line 57  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void ldv_reference_free(void *s)
{
  
#line 59 
  free(s);
  
#line 60 
  return;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_realloc(void *ptr, size_t size)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 66 
  if (ptr != (void *)0 && size == 0UL) {
    
#line 67 
    free(ptr);
    
#line 68 
    __retres = (void *)0;
    
#line 68 
    goto return_label;
  }
  else ;
  
#line 71 
  if (ptr == (void *)0) {
    
#line 72 
    res = malloc(size);
    
#line 73 
    __retres = res;
    
#line 73 
    goto return_label;
  }
  else ;
  
#line 76 
  tmp = ldv_undef_int();
  
#line 76 
  if (tmp != 0) {
    
#line 78 
    res = malloc(size);
    
#line 79 
    __VERIFIER_assume(res != (void *)0);
    
#line 81 
    memcpy(res,(void const *)ptr,size);
    
#line 82 
    free(ptr);
    
#line 84 
    __retres = res;
    
#line 84 
    goto return_label;
  }
  else {
    
#line 87 
    __retres = (void *)0;
    
#line 87 
    goto return_label;
  }
  return_label: 
#line 76 
                return __retres;
}


#line 90  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc(size_t size)
{
  void *res;
  
#line 94 
  res = malloc(size);
  
#line 95 
  __VERIFIER_assume(res != (void *)0);
  
#line 97 
  return res;
}


#line 100  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xzalloc(size_t size)
{
  void *res;
  
#line 104 
  res = calloc(1UL,size);
  
#line 105 
  __VERIFIER_assume(res != (void *)0);
  
#line 107 
  return res;
}


#line 110  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_malloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 114 
  tmp = ldv_undef_int();
  
#line 114 
  if (tmp != 0) {
    
#line 115 
    res = external_allocated_data();
    
#line 116 
    __VERIFIER_assume(res != (void *)0);
    
#line 117 
    __retres = res;
    
#line 117 
    goto return_label;
  }
  else {
    
#line 120 
    __retres = (void *)0;
    
#line 120 
    goto return_label;
  }
  return_label: 
#line 114 
                return __retres;
}


#line 123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_calloc_unknown_size(void)
{
  void *__retres;
  void *res;
  int tmp;
  
#line 127 
  tmp = ldv_undef_int();
  
#line 127 
  if (tmp != 0) {
    
#line 128 
    res = external_allocated_data();
    
#line 129 
    memset(res,0,8UL);
    
#line 130 
    __VERIFIER_assume(res != (void *)0);
    
#line 131 
    __retres = res;
    
#line 131 
    goto return_label;
  }
  else {
    
#line 134 
    __retres = (void *)0;
    
#line 134 
    goto return_label;
  }
  return_label: 
#line 127 
                return __retres;
}


#line 137  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_zalloc_unknown_size(void)
{
  void *tmp;
  
#line 139 
  tmp = ldv_reference_calloc_unknown_size();
  
#line 139 
  return tmp;
}


#line 142  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/reference memory.c"
void *ldv_reference_xmalloc_unknown_size(size_t size)
{
  void *res;
  
#line 146 
  res = external_allocated_data();
  
#line 147 
  __VERIFIER_assume(res != (void *)0);
  
#line 149 
  return res;
}


#line 62  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/linux/ldv/common.h"
void ldv_initialize(void);


#line 97 
void ldv_failed_register_netdev(void);


#line 123 
void ldv_pre_probe(void);


#line 33  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/root/specifications/verifier/thread.h"
int pthread_create(pthread_t *, pthread_attr_t const *, void *(*)(void *), void *);


#line 37 
int pthread_join(pthread_t, void **);


#line 23  "/home/debian/klever-inst/klever/build bases/linux-4.2.6/Storage/home/debian/klever-inst/tmp-dir/linux-4.2.6/include/linux/err.h"
__inline static void *ERR_PTR(long error)
{
  void *__retres;
  
#line 25 
  __retres = (void *)error;
  
#line 25 
  return __retres;
}


#line 212  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_timer_scenario_43(void *arg0);


#line 213 
void *ldv_character_driver_scenario_48(void *arg0);


#line 216 
void *ldv_character_driver_scenario_34(void *arg0);


#line 217 
void *ldv_character_driver_scenario_41(void *arg0);


#line 218 
void ldv_dispatch_register_12_4(struct net_device *arg0);


#line 219 
void ldv_dispatch_register_14_3(struct pci_driver *arg0);


#line 220 
void *ldv_interrupt_scenario_22(void *arg0);


#line 221 
void ldv_dispatch_irq_register_15_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3);


#line 222 
void *ldv_character_driver_scenario_23(void *arg0);


#line 223 
void *ldv_character_driver_scenario_44(void *arg0);


#line 224 
void *ldv_character_driver_scenario_20(void *arg0);


#line 225 
void *ldv_character_driver_scenario_29(void *arg0);


#line 226 
void *ldv_traverse_kernel_items_scenario_50(void *arg0);


#line 227 
void *ldv_character_driver_scenario_37(void *arg0);


#line 228 
void ldv_dispatch_register_13_1(struct seq_file *arg0, struct seq_operations *arg1);


#line 229 
void *ldv_character_driver_scenario_40(void *arg0);


#line 230 
void *ldv_random_allocationless_scenario_54(void *arg0);


#line 232 
void *ldv_character_driver_scenario_46(void *arg0);


#line 233 
void *ldv_character_driver_scenario_53(void *arg0);


#line 234 
void ldv_dispatch_instance_register_3_3(struct timer_list *arg0);


#line 235 
void ldv_dispatch_irq_deregister_10_1(int arg0);


#line 236 
void *ldv_traverse_kernel_items_scenario_35(void *arg0);


#line 237 
void *ldv_traverse_kernel_items_scenario_36(void *arg0);


#line 238 
void *ldv_character_driver_scenario_25(void *arg0);


#line 239 
void *ldv_character_driver_scenario_47(void *arg0);


#line 240 
void *ldv_character_driver_scenario_49(void *arg0);


#line 241 
void ldv_dispatch_deregister_6_1(struct file_operations *arg0);


#line 243 
void ldv_dispatch_deregister_5_1(struct net_device *arg0);


#line 244 
void ldv_dispatch_deregister_16_1(struct seq_file *arg0);


#line 245 
void *ldv_character_driver_scenario_26(void *arg0);


#line 248 
void *ldv_pci_scenario_21(void *arg0);


#line 250 
void *ldv_character_driver_scenario_19(void *arg0);


#line 253 
void *ldv_character_driver_scenario_42(void *arg0);


#line 254 
void *ldv_character_driver_scenario_39(void *arg0);


#line 255 
void ldv_dispatch_instance_deregister_7_1(struct timer_list *arg0);


#line 256 
void *ldv_character_driver_scenario_45(void *arg0);


#line 258 
void *ldv_character_driver_scenario_38(void *arg0);


#line 259 
void ldv_dispatch_register_17_3(struct file_operations *arg0);


#line 260 
void ldv_dispatch_deregister_11_1(struct pci_driver *arg0);


#line 262 
void *ldv_character_driver_scenario_55(void *arg0);


#line 263 
int main(void);


#line 264 
void *ldv_traverse_kernel_items_scenario_28(void *arg0);


#line 265 
void *ldv_character_driver_scenario_32(void *arg0);


#line 267 
void *ldv_initialization_1(void *arg0);


#line 268 
void *ldv_traverse_kernel_items_scenario_51(void *arg0);


#line 270 
void *ldv_character_driver_scenario_24(void *arg0);


#line 271 
void *ldv_character_driver_scenario_27(void *arg0);


#line 272 
void *ldv_character_driver_scenario_33(void *arg0);


#line 274 
void *ldv_character_driver_scenario_31(void *arg0);


#line 275 
void *ldv_character_driver_scenario_52(void *arg0);


#line 278 
void *ldv_interrupt_scenario_30(void *arg0);


#line 281  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_33;

#line 282  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_45;

#line 283  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_55;

#line 284  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_42;

#line 285  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_37;

#line 286  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_41;

#line 287  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_36;

#line 288  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_35;

#line 289  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_51;

#line 290  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_54;

#line 291  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_31;

#line 292  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_52;

#line 293  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_44;

#line 294  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_50;

#line 295  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_38;

#line 296  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_34;

#line 297  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_25;

#line 298  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_20;

#line 299  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_21;

#line 300  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_47;

#line 301  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_22;

#line 302  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_29;

#line 303  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_24;

#line 304  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_48;

#line 305  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_19;

#line 306  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_28;

#line 307  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_49;

#line 308  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_53;

#line 309  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_23;

#line 310  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_32;

#line 311  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_26;

#line 312  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_40;

#line 313  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_43;

#line 314  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_27;

#line 315  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_30;

#line 316  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_46;

#line 317  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
pthread_t ldv_thread_39;

#line 321  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_del_timer_sync(struct timer_list *arg0)
{
  int __retres;
  struct timer_list *ldv_7_timer_list;
  
#line 327 
  ldv_7_timer_list = arg0;
  
#line 331 
  ldv_dispatch_instance_deregister_7_1(ldv_7_timer_list);
  
#line 332 
  ;
  
#line 332 
  __retres = 0;
  
#line 332 
  return __retres;
}


#line 340  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_timer_scenario_43(void *arg0)
{
  void *__retres;
  struct timer_list *ldv_43_container;
  
#line 345 
  struct ldv_struct_timer_scenario_43 *data = (struct ldv_struct_timer_scenario_43 *)arg0;
  
#line 350 
  if (data != (struct ldv_struct_timer_scenario_43 *)0) {
    
#line 351 
    ldv_43_container = data->arg0;
    
#line 352 
    ldv_free((void *)data);
  }
  else ;
  
#line 357 
  if (ldv_43_container->function != (void (*)(unsigned long ))0) {
    
#line 359 
    ldv_switch_to_interrupt_context();
    
#line 361 
    (*(ldv_43_container->function))(ldv_43_container->data);
    
#line 363 
    ldv_switch_to_process_context();
  }
  else ;
  
#line 372 
  __retres = (void *)0;
  
#line 372 
  goto return_label;
  
#line 374 
  __retres = (void *)0;
  return_label: 
#line 374 
                return __retres;
}


#line 379  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_22(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_22_ret_val;
  int ldv_22_line;
  void *ldv_22_data;
  enum irqreturn (*ldv_22_thread)(int , void *);
  int tmp;
  
#line 385 
  enum irqreturn (*ldv_22_callback)(int , void *) = & ldv_emg_wrapper_t4_nondata_intr_2;
  
#line 388 
  struct ldv_struct_interrupt_scenario_22 *data = (struct ldv_struct_interrupt_scenario_22 *)arg0;
  
#line 393 
  if (data != (struct ldv_struct_interrupt_scenario_22 *)0) {
    
#line 394 
    ldv_22_line = data->arg0;
    
#line 395 
    ldv_22_callback = data->arg1;
    
#line 396 
    ldv_22_thread = data->arg2;
    
#line 397 
    ldv_22_data = data->arg3;
    
#line 398 
    ldv_free((void *)data);
  }
  else ;
  
#line 404 
  ldv_switch_to_interrupt_context();
  
#line 406 
  ldv_22_ret_val = ldv_emg_wrapper_t4_nondata_intr_2(ldv_22_line,ldv_22_data);
  
#line 408 
  ldv_switch_to_process_context();
  
#line 411 
  tmp = ldv_undef_int();
  
#line 411 
  if (tmp != 0) {
    
#line 413 
    __VERIFIER_assume(ldv_22_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 417 
    if (ldv_22_thread != (enum irqreturn (*)(int , void *))0) 
#line 419 
                                                              (*ldv_22_thread)(ldv_22_line,ldv_22_data); else ;
  }
  else 
#line 426 
       __VERIFIER_assume(ldv_22_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 435 
  __retres = (void *)0;
  
#line 435 
  goto return_label;
  
#line 437 
  __retres = (void *)0;
  return_label: 
#line 437 
                return __retres;
}


#line 442  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_pci_unregister_driver(struct pci_driver *arg0)
{
  
#line 445 
  struct pci_driver *ldv_11_pci_driver = ldv_emg_alias_cxgb4_driver_2;
  
#line 448 
  ldv_11_pci_driver = arg0;
  
#line 452 
  ldv_dispatch_deregister_11_1(ldv_11_pci_driver);
  
#line 456 
  goto return_label;
  return_label: 
#line 458 
                return;
}


#line 463  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg___pci_register_driver(struct pci_driver *arg0, struct module *arg1, char *arg2)
{
  int __retres;
  int tmp_0;
  
#line 466 
  struct pci_driver *ldv_14_pci_driver = ldv_emg_alias_cxgb4_driver_2;
  
#line 470 
  tmp_0 = ldv_undef_int();
  
#line 470 
  if (tmp_0 != 0) {
    
#line 472 
    ldv_14_pci_driver = arg0;
    
#line 476 
    ldv_dispatch_register_14_3(ldv_14_pci_driver);
    
#line 480 
    __retres = 0;
    
#line 480 
    goto return_label;
  }
  else {
    int tmp;
    
#line 487 
    tmp = ldv_undef_int_negative();
    
#line 487 
    __retres = tmp;
    
#line 487 
    goto return_label;
  }
  return_label: 
#line 470 
                return __retres;
}


#line 497  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_34(void *arg0)
{
  void *__retres;
  struct file *ldv_34_resource_1;
  char *ldv_34_ldv_param_1_2;
  unsigned long ldv_34_size_cnt;
  char *ldv_34_ldv_param_1_4;
  long long *ldv_34_ldv_param_3_3;
  long long *ldv_34_ldv_param_3_5;
  struct inode *ldv_34_resource_0;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 505 
  struct file_operations *ldv_34_container = ldv_emg_alias_flash_debugfs_fops_2;
  
#line 507 
  int ldv_34_ret = ldv_undef_int();
  
#line 510 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 514 
  ldv_34_ret = ldv_undef_int();
  
#line 517 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 518 
    ldv_34_container = data->arg0;
    
#line 519 
    ldv_free((void *)data);
  }
  else ;
  
#line 524 
  ldv_34_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 525 
  tmp_1 = ldv_undef_int();
  
#line 525 
  ldv_34_size_cnt = (unsigned long)tmp_1;
  
#line 532 
  goto ldv_main_34;
  
#line 534 
  __retres = (void *)0;
  
#line 534 
  goto return_label;
  ldv_main_34: 
#line 537 
  ;
  
#line 540 
  tmp_3 = ldv_undef_int();
  
#line 540 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 543 
    ldv_34_ret = mem_open(ldv_34_resource_0,ldv_34_resource_1);
    
#line 545 
    ldv_34_ret = ldv_filter_err_code(ldv_34_ret);
    
#line 548 
    tmp_2 = ldv_undef_int();
    
#line 548 
    if (tmp_2 != 0) {
      
#line 550 
      __VERIFIER_assume(ldv_34_ret == 0);
      
#line 557 
      goto ldv_call_34;
    }
    else {
      
#line 561 
      __VERIFIER_assume(ldv_34_ret != 0);
      
#line 568 
      goto ldv_main_34;
    }
  }
  else {
    
#line 573 
    ldv_free((void *)ldv_34_resource_0);
    
#line 581 
    __retres = (void *)0;
    
#line 581 
    goto return_label;
  }
  
#line 584 
  __retres = (void *)0;
  
#line 584 
  goto return_label;
  ldv_call_34: 
#line 587 
  ;
  
#line 590 
  tmp_4 = ldv_undef_int();
  
#line 590 
  switch (tmp_4) {
    case 1: 
#line 591 
    ;
    
#line 593 
    ldv_34_ldv_param_3_3 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 594 
    ldv_34_ldv_param_1_2 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 599 
    ldv_emg_wrapper_flash_read_3(ldv_34_resource_1,ldv_34_ldv_param_1_2,ldv_34_size_cnt,ldv_34_ldv_param_3_3);
    
#line 603 
    ldv_free((void *)ldv_34_ldv_param_3_3);
    
#line 604 
    ldv_free((void *)ldv_34_ldv_param_1_2);
    
#line 611 
    goto ldv_call_34;
    case 2: 
#line 614 
    ;
    
#line 616 
    ldv_34_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 617 
    ldv_34_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 621 
    if (ldv_34_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 627 
      __VERIFIER_assume(ldv_34_size_cnt <= 2147479552UL);
      
#line 629 
      (*(ldv_34_container->write))(ldv_34_resource_1,(char const *)ldv_34_ldv_param_1_4,ldv_34_size_cnt,ldv_34_ldv_param_3_5);
    }
    else ;
    
#line 634 
    ldv_free((void *)ldv_34_ldv_param_1_4);
    
#line 635 
    ldv_free((void *)ldv_34_ldv_param_3_5);
    
#line 642 
    goto ldv_call_34;
    case 3: 
#line 645 
    ;
    
#line 647 
    if (ldv_34_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 649 
      (*(ldv_34_container->release))(ldv_34_resource_0,ldv_34_resource_1); else ;
    
#line 657 
    goto ldv_main_34;
    default: 
#line 660 
    ;
    
#line 660 
    __VERIFIER_assume(0);
  }
  
#line 663 
  __retres = (void *)0;
  return_label: 
#line 663 
                return __retres;
}


#line 668  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_41(void *arg0)
{
  void *__retres;
  struct file *ldv_41_resource_1;
  int ldv_41_ldv_param_2_3;
  long long ldv_41_ldv_param_1_2;
  char *ldv_41_ldv_param_1_4;
  struct inode *ldv_41_resource_0;
  unsigned long ldv_41_size_cnt;
  long long *ldv_41_ldv_param_3_5;
  char *ldv_41_ldv_param_1_6;
  long long *ldv_41_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 679 
  struct file_operations *ldv_41_container = ldv_emg_alias_devlog_fops_2;
  
#line 680 
  int ldv_41_ret = ldv_undef_int();
  
#line 683 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 687 
  ldv_41_ret = ldv_undef_int();
  
#line 690 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 691 
    ldv_41_container = data->arg0;
    
#line 692 
    ldv_free((void *)data);
  }
  else ;
  
#line 697 
  ldv_41_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 698 
  tmp_1 = ldv_undef_int();
  
#line 698 
  ldv_41_size_cnt = (unsigned long)tmp_1;
  
#line 705 
  goto ldv_main_41;
  
#line 707 
  __retres = (void *)0;
  
#line 707 
  goto return_label;
  ldv_main_41: 
#line 710 
  ;
  
#line 713 
  tmp_3 = ldv_undef_int();
  
#line 713 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 716 
    ldv_41_ret = ldv_emg_wrapper_devlog_open_3(ldv_41_resource_0,ldv_41_resource_1);
    
#line 718 
    ldv_41_ret = ldv_filter_err_code(ldv_41_ret);
    
#line 721 
    tmp_2 = ldv_undef_int();
    
#line 721 
    if (tmp_2 != 0) {
      
#line 723 
      __VERIFIER_assume(ldv_41_ret == 0);
      
#line 730 
      goto ldv_call_41;
    }
    else {
      
#line 734 
      __VERIFIER_assume(ldv_41_ret != 0);
      
#line 741 
      goto ldv_main_41;
    }
  }
  else {
    
#line 746 
    ldv_free((void *)ldv_41_resource_0);
    
#line 754 
    __retres = (void *)0;
    
#line 754 
    goto return_label;
  }
  
#line 757 
  __retres = (void *)0;
  
#line 757 
  goto return_label;
  ldv_call_41: 
#line 760 
  ;
  
#line 763 
  tmp_4 = ldv_undef_int();
  
#line 763 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 764 
    ;
    
#line 766 
    ldv_41_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 767 
    ldv_41_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 771 
    if (ldv_41_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 777 
      __VERIFIER_assume(ldv_41_size_cnt <= 2147479552UL);
      
#line 779 
      (*(ldv_41_container->write))(ldv_41_resource_1,(char const *)ldv_41_ldv_param_1_6,ldv_41_size_cnt,ldv_41_ldv_param_3_7);
    }
    else ;
    
#line 784 
    ldv_free((void *)ldv_41_ldv_param_1_6);
    
#line 785 
    ldv_free((void *)ldv_41_ldv_param_3_7);
    
#line 792 
    goto ldv_call_41;
    case 2: 
#line 795 
    ;
    
#line 798 
    seq_release_private(ldv_41_resource_0,ldv_41_resource_1);
    
#line 805 
    goto ldv_main_41;
    case 3: 
#line 808 
    ;
    
#line 812 
    tmp_9 = ldv_undef_int();
    
#line 812 
    if (tmp_9 != 0) 
#line 815 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_41_resource_1,ldv_41_ldv_param_1_2,ldv_41_ldv_param_2_3);
    else {
      
#line 821 
      ldv_41_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 822 
      ldv_41_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 827 
      (*ldv_emg_alias_seq_read_4)(ldv_41_resource_1,ldv_41_ldv_param_1_4,ldv_41_size_cnt,ldv_41_ldv_param_3_5);
      
#line 831 
      ldv_free((void *)ldv_41_ldv_param_1_4);
      
#line 832 
      ldv_free((void *)ldv_41_ldv_param_3_5);
    }
    
#line 836 
    goto ldv_45943;
    default: 
#line 838 
    ;
    
#line 838 
    __VERIFIER_assume(0);
  }
  ldv_45943: 
#line 847 
  ;
  
#line 847 
  goto ldv_call_41;
  
#line 849 
  __retres = (void *)0;
  return_label: 
#line 849 
                return __retres;
}


#line 854  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_12_4(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_54 *cf_arg_54;
  int tmp;
  
#line 857 
  tmp = ldv_undef_int();
  
#line 857 
  switch (tmp) {
    case 0: 
#line 858 
    ;
    
#line 859 
    cf_arg_54 = (struct ldv_struct_random_allocationless_scenario_54 *)ldv_xmalloc(16UL);
    
#line 860 
    cf_arg_54->arg0 = arg0;
    
#line 861 
    ret = pthread_create(& ldv_thread_54,(pthread_attr_t const *)0,& ldv_random_allocationless_scenario_54,(void *)cf_arg_54);
    
#line 862 
    __VERIFIER_assume(ret == 0);
    
#line 863 
    goto ldv_45951;
    default: 
#line 865 
    ;
    
#line 865 
    __VERIFIER_assume(0);
  }
  ldv_45951: 
#line 866 
  ;
  
#line 867 
  return;
}


#line 871  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_14_3(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_21 *cf_arg_21;
  int tmp;
  
#line 874 
  tmp = ldv_undef_int();
  
#line 874 
  switch (tmp) {
    case 0: 
#line 875 
    ;
    
#line 876 
    cf_arg_21 = (struct ldv_struct_pci_scenario_21 *)ldv_xmalloc(16UL);
    
#line 877 
    cf_arg_21->arg0 = arg0;
    
#line 878 
    ret = pthread_create(& ldv_thread_21,(pthread_attr_t const *)0,& ldv_pci_scenario_21,(void *)cf_arg_21);
    
#line 879 
    __VERIFIER_assume(ret == 0);
    
#line 880 
    goto ldv_45959;
    default: 
#line 882 
    ;
    
#line 882 
    __VERIFIER_assume(0);
  }
  ldv_45959: 
#line 883 
  ;
  
#line 884 
  return;
}


#line 888  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_48(void *arg0)
{
  void *__retres;
  struct file *ldv_48_resource_1;
  int ldv_48_ldv_param_2_3;
  long long ldv_48_ldv_param_1_2;
  char *ldv_48_ldv_param_1_4;
  struct inode *ldv_48_resource_0;
  unsigned long ldv_48_size_cnt;
  long long *ldv_48_ldv_param_3_5;
  char *ldv_48_ldv_param_1_6;
  long long *ldv_48_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 899 
  struct file_operations *ldv_48_container = ldv_emg_alias_cim_ibq_fops_2;
  
#line 900 
  int ldv_48_ret = ldv_undef_int();
  
#line 903 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 907 
  ldv_48_ret = ldv_undef_int();
  
#line 910 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 911 
    ldv_48_container = data->arg0;
    
#line 912 
    ldv_free((void *)data);
  }
  else ;
  
#line 917 
  ldv_48_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 918 
  tmp_1 = ldv_undef_int();
  
#line 918 
  ldv_48_size_cnt = (unsigned long)tmp_1;
  
#line 925 
  goto ldv_main_48;
  
#line 927 
  __retres = (void *)0;
  
#line 927 
  goto return_label;
  ldv_main_48: 
#line 930 
  ;
  
#line 933 
  tmp_3 = ldv_undef_int();
  
#line 933 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 936 
    ldv_48_ret = ldv_emg_wrapper_cim_ibq_open_3(ldv_48_resource_0,ldv_48_resource_1);
    
#line 938 
    ldv_48_ret = ldv_filter_err_code(ldv_48_ret);
    
#line 941 
    tmp_2 = ldv_undef_int();
    
#line 941 
    if (tmp_2 != 0) {
      
#line 943 
      __VERIFIER_assume(ldv_48_ret == 0);
      
#line 950 
      goto ldv_call_48;
    }
    else {
      
#line 954 
      __VERIFIER_assume(ldv_48_ret != 0);
      
#line 961 
      goto ldv_main_48;
    }
  }
  else {
    
#line 966 
    ldv_free((void *)ldv_48_resource_0);
    
#line 974 
    __retres = (void *)0;
    
#line 974 
    goto return_label;
  }
  
#line 977 
  __retres = (void *)0;
  
#line 977 
  goto return_label;
  ldv_call_48: 
#line 980 
  ;
  
#line 983 
  tmp_4 = ldv_undef_int();
  
#line 983 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 984 
    ;
    
#line 986 
    ldv_48_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 987 
    ldv_48_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 991 
    if (ldv_48_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 997 
      __VERIFIER_assume(ldv_48_size_cnt <= 2147479552UL);
      
#line 999 
      (*(ldv_48_container->write))(ldv_48_resource_1,(char const *)ldv_48_ldv_param_1_6,ldv_48_size_cnt,ldv_48_ldv_param_3_7);
    }
    else ;
    
#line 1004 
    ldv_free((void *)ldv_48_ldv_param_3_7);
    
#line 1005 
    ldv_free((void *)ldv_48_ldv_param_1_6);
    
#line 1012 
    goto ldv_call_48;
    case 2: 
#line 1015 
    ;
    
#line 1018 
    seq_release_private(ldv_48_resource_0,ldv_48_resource_1);
    
#line 1025 
    goto ldv_main_48;
    case 3: 
#line 1028 
    ;
    
#line 1032 
    tmp_9 = ldv_undef_int();
    
#line 1032 
    if (tmp_9 != 0) 
#line 1035 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_48_resource_1,ldv_48_ldv_param_1_2,ldv_48_ldv_param_2_3);
    else {
      
#line 1041 
      ldv_48_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1042 
      ldv_48_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1047 
      (*ldv_emg_alias_seq_read_4)(ldv_48_resource_1,ldv_48_ldv_param_1_4,ldv_48_size_cnt,ldv_48_ldv_param_3_5);
      
#line 1051 
      ldv_free((void *)ldv_48_ldv_param_3_5);
      
#line 1052 
      ldv_free((void *)ldv_48_ldv_param_1_4);
    }
    
#line 1056 
    goto ldv_45981;
    default: 
#line 1058 
    ;
    
#line 1058 
    __VERIFIER_assume(0);
  }
  ldv_45981: 
#line 1067 
  ;
  
#line 1067 
  goto ldv_call_48;
  
#line 1069 
  __retres = (void *)0;
  return_label: 
#line 1069 
                return __retres;
}


#line 1074  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_register_15_3(int arg0, enum irqreturn (*arg1)(int , void *), enum irqreturn (*arg2)(int , void *), void *arg3)
{
  int ret;
  struct ldv_struct_interrupt_scenario_22 *cf_arg_30;
  struct ldv_struct_interrupt_scenario_22 *cf_arg_22;
  int tmp;
  
#line 1078 
  tmp = ldv_undef_int();
  
#line 1078 
  switch (tmp) {
    case 0: 
#line 1079 
    ;
    
#line 1080 
    cf_arg_30 = (struct ldv_struct_interrupt_scenario_22 *)ldv_xmalloc(32UL);
    
#line 1081 
    cf_arg_30->arg0 = arg0;
    
#line 1082 
    cf_arg_30->arg1 = arg1;
    
#line 1083 
    cf_arg_30->arg2 = arg2;
    
#line 1084 
    cf_arg_30->arg3 = arg3;
    
#line 1085 
    ret = pthread_create(& ldv_thread_30,(pthread_attr_t const *)0,& ldv_interrupt_scenario_30,(void *)cf_arg_30);
    
#line 1086 
    __VERIFIER_assume(ret == 0);
    
#line 1087 
    goto ldv_45997;
    case 1: 
#line 1089 
    ;
    
#line 1090 
    cf_arg_22 = (struct ldv_struct_interrupt_scenario_22 *)ldv_xmalloc(32UL);
    
#line 1091 
    cf_arg_22->arg0 = arg0;
    
#line 1092 
    cf_arg_22->arg1 = arg1;
    
#line 1093 
    cf_arg_22->arg2 = arg2;
    
#line 1094 
    cf_arg_22->arg3 = arg3;
    
#line 1095 
    ret = pthread_create(& ldv_thread_22,(pthread_attr_t const *)0,& ldv_interrupt_scenario_22,(void *)cf_arg_22);
    
#line 1096 
    __VERIFIER_assume(ret == 0);
    
#line 1097 
    goto ldv_45997;
    default: 
#line 1099 
    ;
    
#line 1099 
    __VERIFIER_assume(0);
  }
  ldv_45997: 
#line 1100 
  ;
  
#line 1101 
  return;
}


#line 1105  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_23(void *arg0)
{
  void *__retres;
  struct file *ldv_23_resource_1;
  int ldv_23_ldv_param_2_3;
  long long ldv_23_ldv_param_1_2;
  char *ldv_23_ldv_param_1_4;
  struct inode *ldv_23_resource_0;
  unsigned long ldv_23_size_cnt;
  long long *ldv_23_ldv_param_3_5;
  char *ldv_23_ldv_param_1_6;
  long long *ldv_23_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 1116 
  struct file_operations *ldv_23_container = ldv_emg_alias_rss_key_debugfs_fops_2;
  
#line 1117 
  int ldv_23_ret = ldv_undef_int();
  
#line 1120 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 1124 
  ldv_23_ret = ldv_undef_int();
  
#line 1127 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 1128 
    ldv_23_container = data->arg0;
    
#line 1129 
    ldv_free((void *)data);
  }
  else ;
  
#line 1134 
  ldv_23_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 1135 
  tmp_1 = ldv_undef_int();
  
#line 1135 
  ldv_23_size_cnt = (unsigned long)tmp_1;
  
#line 1142 
  goto ldv_main_23;
  
#line 1144 
  __retres = (void *)0;
  
#line 1144 
  goto return_label;
  ldv_main_23: 
#line 1147 
  ;
  
#line 1150 
  tmp_3 = ldv_undef_int();
  
#line 1150 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 1153 
    ldv_23_ret = ldv_emg_wrapper_rss_key_open_4(ldv_23_resource_0,ldv_23_resource_1);
    
#line 1155 
    ldv_23_ret = ldv_filter_err_code(ldv_23_ret);
    
#line 1158 
    tmp_2 = ldv_undef_int();
    
#line 1158 
    if (tmp_2 != 0) {
      
#line 1160 
      __VERIFIER_assume(ldv_23_ret == 0);
      
#line 1167 
      goto ldv_call_23;
    }
    else {
      
#line 1171 
      __VERIFIER_assume(ldv_23_ret != 0);
      
#line 1178 
      goto ldv_main_23;
    }
  }
  else {
    
#line 1183 
    ldv_free((void *)ldv_23_resource_0);
    
#line 1191 
    __retres = (void *)0;
    
#line 1191 
    goto return_label;
  }
  
#line 1194 
  __retres = (void *)0;
  
#line 1194 
  goto return_label;
  ldv_call_23: 
#line 1197 
  ;
  
#line 1200 
  tmp_4 = ldv_undef_int();
  
#line 1200 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 1201 
    ;
    
#line 1203 
    ldv_23_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1204 
    ldv_23_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1213 
    __VERIFIER_assume(ldv_23_size_cnt <= 2147479552UL);
    
#line 1215 
    ldv_emg_wrapper_rss_key_write_3(ldv_23_resource_1,ldv_23_ldv_param_1_6,ldv_23_size_cnt,ldv_23_ldv_param_3_7);
    
#line 1219 
    ldv_free((void *)ldv_23_ldv_param_3_7);
    
#line 1220 
    ldv_free((void *)ldv_23_ldv_param_1_6);
    
#line 1227 
    goto ldv_call_23;
    case 2: 
#line 1230 
    ;
    
#line 1233 
    (*ldv_emg_alias_single_release_5)(ldv_23_resource_0,ldv_23_resource_1);
    
#line 1240 
    goto ldv_main_23;
    case 3: 
#line 1243 
    ;
    
#line 1247 
    tmp_9 = ldv_undef_int();
    
#line 1247 
    if (tmp_9 != 0) 
#line 1250 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_23_resource_1,ldv_23_ldv_param_1_2,ldv_23_ldv_param_2_3);
    else {
      
#line 1256 
      ldv_23_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1257 
      ldv_23_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1262 
      (*ldv_emg_alias_seq_read_4)(ldv_23_resource_1,ldv_23_ldv_param_1_4,ldv_23_size_cnt,ldv_23_ldv_param_3_5);
      
#line 1266 
      ldv_free((void *)ldv_23_ldv_param_3_5);
      
#line 1267 
      ldv_free((void *)ldv_23_ldv_param_1_4);
    }
    
#line 1271 
    goto ldv_46020;
    default: 
#line 1273 
    ;
    
#line 1273 
    __VERIFIER_assume(0);
  }
  ldv_46020: 
#line 1282 
  ;
  
#line 1282 
  goto ldv_call_23;
  
#line 1284 
  __retres = (void *)0;
  return_label: 
#line 1284 
                return __retres;
}


#line 1289  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_20(void *arg0)
{
  void *__retres;
  struct file *ldv_20_resource_1;
  int ldv_20_ldv_param_2_3;
  long long ldv_20_ldv_param_1_2;
  char *ldv_20_ldv_param_1_4;
  struct inode *ldv_20_resource_0;
  unsigned long ldv_20_size_cnt;
  long long *ldv_20_ldv_param_3_5;
  char *ldv_20_ldv_param_1_6;
  long long *ldv_20_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 1300 
  struct file_operations *ldv_20_container = ldv_emg_alias_clk_debugfs_fops_2;
  
#line 1301 
  int ldv_20_ret = ldv_undef_int();
  
#line 1304 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 1308 
  ldv_20_ret = ldv_undef_int();
  
#line 1311 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 1312 
    ldv_20_container = data->arg0;
    
#line 1313 
    ldv_free((void *)data);
  }
  else ;
  
#line 1318 
  ldv_20_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 1319 
  tmp_1 = ldv_undef_int();
  
#line 1319 
  ldv_20_size_cnt = (unsigned long)tmp_1;
  
#line 1326 
  goto ldv_main_20;
  
#line 1328 
  __retres = (void *)0;
  
#line 1328 
  goto return_label;
  ldv_main_20: 
#line 1331 
  ;
  
#line 1334 
  tmp_3 = ldv_undef_int();
  
#line 1334 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 1337 
    ldv_20_ret = ldv_emg_wrapper_clk_open_3(ldv_20_resource_0,ldv_20_resource_1);
    
#line 1339 
    ldv_20_ret = ldv_filter_err_code(ldv_20_ret);
    
#line 1342 
    tmp_2 = ldv_undef_int();
    
#line 1342 
    if (tmp_2 != 0) {
      
#line 1344 
      __VERIFIER_assume(ldv_20_ret == 0);
      
#line 1351 
      goto ldv_call_20;
    }
    else {
      
#line 1355 
      __VERIFIER_assume(ldv_20_ret != 0);
      
#line 1362 
      goto ldv_main_20;
    }
  }
  else {
    
#line 1367 
    ldv_free((void *)ldv_20_resource_0);
    
#line 1375 
    __retres = (void *)0;
    
#line 1375 
    goto return_label;
  }
  
#line 1378 
  __retres = (void *)0;
  
#line 1378 
  goto return_label;
  ldv_call_20: 
#line 1381 
  ;
  
#line 1384 
  tmp_4 = ldv_undef_int();
  
#line 1384 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 1385 
    ;
    
#line 1387 
    ldv_20_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1388 
    ldv_20_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1392 
    if (ldv_20_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 1398 
      __VERIFIER_assume(ldv_20_size_cnt <= 2147479552UL);
      
#line 1400 
      (*(ldv_20_container->write))(ldv_20_resource_1,(char const *)ldv_20_ldv_param_1_6,ldv_20_size_cnt,ldv_20_ldv_param_3_7);
    }
    else ;
    
#line 1405 
    ldv_free((void *)ldv_20_ldv_param_1_6);
    
#line 1406 
    ldv_free((void *)ldv_20_ldv_param_3_7);
    
#line 1413 
    goto ldv_call_20;
    case 2: 
#line 1416 
    ;
    
#line 1419 
    (*ldv_emg_alias_single_release_5)(ldv_20_resource_0,ldv_20_resource_1);
    
#line 1426 
    goto ldv_main_20;
    case 3: 
#line 1429 
    ;
    
#line 1433 
    tmp_9 = ldv_undef_int();
    
#line 1433 
    if (tmp_9 != 0) 
#line 1436 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_20_resource_1,ldv_20_ldv_param_1_2,ldv_20_ldv_param_2_3);
    else {
      
#line 1442 
      ldv_20_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1443 
      ldv_20_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1448 
      (*ldv_emg_alias_seq_read_4)(ldv_20_resource_1,ldv_20_ldv_param_1_4,ldv_20_size_cnt,ldv_20_ldv_param_3_5);
      
#line 1452 
      ldv_free((void *)ldv_20_ldv_param_3_5);
      
#line 1453 
      ldv_free((void *)ldv_20_ldv_param_1_4);
    }
    
#line 1457 
    goto ldv_46042;
    default: 
#line 1459 
    ;
    
#line 1459 
    __VERIFIER_assume(0);
  }
  ldv_46042: 
#line 1468 
  ;
  
#line 1468 
  goto ldv_call_20;
  
#line 1470 
  __retres = (void *)0;
  return_label: 
#line 1470 
                return __retres;
}


#line 1475  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_42(void *arg0)
{
  void *__retres;
  struct file *ldv_42_resource_1;
  int ldv_42_ldv_param_2_3;
  long long ldv_42_ldv_param_1_2;
  char *ldv_42_ldv_param_1_4;
  struct inode *ldv_42_resource_0;
  unsigned long ldv_42_size_cnt;
  long long *ldv_42_ldv_param_3_5;
  char *ldv_42_ldv_param_1_6;
  long long *ldv_42_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 1486 
  struct file_operations *ldv_42_container = ldv_emg_alias_mps_tcam_debugfs_fops_2;
  
#line 1487 
  int ldv_42_ret = ldv_undef_int();
  
#line 1490 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 1494 
  ldv_42_ret = ldv_undef_int();
  
#line 1497 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 1498 
    ldv_42_container = data->arg0;
    
#line 1499 
    ldv_free((void *)data);
  }
  else ;
  
#line 1504 
  ldv_42_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 1505 
  tmp_1 = ldv_undef_int();
  
#line 1505 
  ldv_42_size_cnt = (unsigned long)tmp_1;
  
#line 1512 
  goto ldv_main_42;
  
#line 1514 
  __retres = (void *)0;
  
#line 1514 
  goto return_label;
  ldv_main_42: 
#line 1517 
  ;
  
#line 1520 
  tmp_3 = ldv_undef_int();
  
#line 1520 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 1523 
    ldv_42_ret = ldv_emg_wrapper_mps_tcam_open_4(ldv_42_resource_0,ldv_42_resource_1);
    
#line 1525 
    ldv_42_ret = ldv_filter_err_code(ldv_42_ret);
    
#line 1528 
    tmp_2 = ldv_undef_int();
    
#line 1528 
    if (tmp_2 != 0) {
      
#line 1530 
      __VERIFIER_assume(ldv_42_ret == 0);
      
#line 1537 
      goto ldv_call_42;
    }
    else {
      
#line 1541 
      __VERIFIER_assume(ldv_42_ret != 0);
      
#line 1548 
      goto ldv_main_42;
    }
  }
  else {
    
#line 1553 
    ldv_free((void *)ldv_42_resource_0);
    
#line 1561 
    __retres = (void *)0;
    
#line 1561 
    goto return_label;
  }
  
#line 1564 
  __retres = (void *)0;
  
#line 1564 
  goto return_label;
  ldv_call_42: 
#line 1567 
  ;
  
#line 1570 
  tmp_4 = ldv_undef_int();
  
#line 1570 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 1571 
    ;
    
#line 1573 
    ldv_42_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1574 
    ldv_42_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1578 
    if (ldv_42_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 1584 
      __VERIFIER_assume(ldv_42_size_cnt <= 2147479552UL);
      
#line 1586 
      (*(ldv_42_container->write))(ldv_42_resource_1,(char const *)ldv_42_ldv_param_1_6,ldv_42_size_cnt,ldv_42_ldv_param_3_7);
    }
    else ;
    
#line 1591 
    ldv_free((void *)ldv_42_ldv_param_1_6);
    
#line 1592 
    ldv_free((void *)ldv_42_ldv_param_3_7);
    
#line 1599 
    goto ldv_call_42;
    case 2: 
#line 1602 
    ;
    
#line 1605 
    (*ldv_emg_alias_seq_release_3)(ldv_42_resource_0,ldv_42_resource_1);
    
#line 1612 
    goto ldv_main_42;
    case 3: 
#line 1615 
    ;
    
#line 1619 
    tmp_9 = ldv_undef_int();
    
#line 1619 
    if (tmp_9 != 0) 
#line 1622 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_42_resource_1,ldv_42_ldv_param_1_2,ldv_42_ldv_param_2_3);
    else {
      
#line 1628 
      ldv_42_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1629 
      ldv_42_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1634 
      (*ldv_emg_alias_seq_read_4)(ldv_42_resource_1,ldv_42_ldv_param_1_4,ldv_42_size_cnt,ldv_42_ldv_param_3_5);
      
#line 1638 
      ldv_free((void *)ldv_42_ldv_param_3_5);
      
#line 1639 
      ldv_free((void *)ldv_42_ldv_param_1_4);
    }
    
#line 1643 
    goto ldv_46064;
    default: 
#line 1645 
    ;
    
#line 1645 
    __VERIFIER_assume(0);
  }
  ldv_46064: 
#line 1654 
  ;
  
#line 1654 
  goto ldv_call_42;
  
#line 1656 
  __retres = (void *)0;
  return_label: 
#line 1656 
                return __retres;
}


#line 1661  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_traverse_kernel_items_scenario_50(void *arg0)
{
  void *__retres;
  void *ldv_50_ldv_param_1_2;
  long long *ldv_50_index;
  struct seq_file *ldv_50_seq_file;
  void *ldv_50_ldv_param_1_3;
  void *ldv_50_ldv_param_1_4;
  int tmp_2;
  int tmp_6;
  
#line 1667 
  struct seq_operations *ldv_50_ops = ldv_emg_alias_mps_tcam_seq_ops_6;
  
#line 1668 
  int ldv_50_show_ret = ldv_undef_int();
  
#line 1671 
  void *ldv_50_ret = ldv_undef_ptr();
  
#line 1673 
  struct ldv_struct_traverse_kernel_items_scenario_28 *data = (struct ldv_struct_traverse_kernel_items_scenario_28 *)arg0;
  
#line 1677 
  ldv_50_show_ret = ldv_undef_int();
  
#line 1680 
  if (data != (struct ldv_struct_traverse_kernel_items_scenario_28 *)0) {
    
#line 1681 
    ldv_50_seq_file = data->arg0;
    
#line 1682 
    ldv_50_ops = data->arg1;
    
#line 1683 
    ldv_free((void *)data);
  }
  else ;
  
#line 1688 
  ldv_50_index = (long long *)ldv_xmalloc_unknown_size(0UL);
  
#line 1695 
  goto ldv_outer_loop_50;
  
#line 1697 
  __retres = (void *)0;
  
#line 1697 
  goto return_label;
  ldv_outer_loop_50: 
#line 1700 
  ;
  
#line 1703 
  tmp_2 = ldv_undef_int();
  
#line 1703 
  if (tmp_2 != 0) {
    
#line 1706 
    *ldv_50_index = 0LL;
    
#line 1708 
    ldv_50_ret = ldv_emg_wrapper_mps_tcam_start_2(ldv_50_seq_file,ldv_50_index);
    
#line 1715 
    goto ldv_inner_loop_50;
  }
  else {
    
#line 1719 
    ldv_free((void *)ldv_50_index);
    
#line 1727 
    __retres = (void *)0;
    
#line 1727 
    goto return_label;
  }
  
#line 1730 
  __retres = (void *)0;
  
#line 1730 
  goto return_label;
  ldv_inner_loop_50: 
#line 1733 
  ;
  
#line 1736 
  tmp_6 = ldv_undef_int();
  
#line 1736 
  if (tmp_6 != 0) {
    long tmp_3;
    int tmp_4;
    
#line 1738 
    tmp_3 = ldv_is_err_or_null((void const *)ldv_50_ret);
    
#line 1738 
    __VERIFIER_assume(tmp_3 == 0L);
    
#line 1742 
    ldv_50_ldv_param_1_3 = ldv_xmalloc_unknown_size(0UL);
    
#line 1747 
    ldv_50_show_ret = ldv_emg_wrapper_mps_tcam_show_4(ldv_50_seq_file,ldv_50_ldv_param_1_3);
    
#line 1751 
    ldv_free(ldv_50_ldv_param_1_3);
    
#line 1754 
    tmp_4 = ldv_undef_int();
    
#line 1754 
    if (tmp_4 != 0) {
      
#line 1756 
      __VERIFIER_assume(ldv_50_show_ret >= 0);
      
#line 1760 
      ldv_50_ldv_param_1_2 = ldv_xmalloc_unknown_size(0UL);
      
#line 1765 
      ldv_50_ret = ldv_emg_wrapper_mps_tcam_next_3(ldv_50_seq_file,ldv_50_ldv_param_1_2,ldv_50_index);
      
#line 1769 
      ldv_free(ldv_50_ldv_param_1_2);
      
#line 1776 
      goto ldv_inner_loop_50;
    }
    else {
      
#line 1780 
      ldv_50_ldv_param_1_4 = ldv_xmalloc_unknown_size(0UL);
      
#line 1785 
      ldv_50_seq_file->index = *ldv_50_index;
      
#line 1787 
      ldv_emg_wrapper_mps_tcam_stop_5(ldv_50_seq_file,ldv_50_ldv_param_1_4);
      
#line 1789 
      ldv_50_seq_file->index = *ldv_50_index;
      
#line 1793 
      ldv_free(ldv_50_ldv_param_1_4);
      
#line 1800 
      goto ldv_outer_loop_50;
    }
  }
  else {
    long tmp_5;
    
#line 1805 
    tmp_5 = ldv_is_err_or_null((void const *)ldv_50_ret);
    
#line 1805 
    __VERIFIER_assume((int)tmp_5);
    
#line 1809 
    ldv_50_ldv_param_1_4 = ldv_xmalloc_unknown_size(0UL);
    
#line 1814 
    ldv_50_seq_file->index = *ldv_50_index;
    
#line 1816 
    ldv_emg_wrapper_mps_tcam_stop_5(ldv_50_seq_file,ldv_50_ldv_param_1_4);
    
#line 1818 
    ldv_50_seq_file->index = *ldv_50_index;
    
#line 1822 
    ldv_free(ldv_50_ldv_param_1_4);
    
#line 1829 
    goto ldv_outer_loop_50;
  }
  
#line 1832 
  __retres = (void *)0;
  return_label: 
#line 1832 
                return __retres;
}


#line 1837  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_37(void *arg0)
{
  void *__retres;
  struct file *ldv_37_resource_1;
  int ldv_37_ldv_param_2_3;
  long long ldv_37_ldv_param_1_2;
  char *ldv_37_ldv_param_1_4;
  struct inode *ldv_37_resource_0;
  unsigned long ldv_37_size_cnt;
  long long *ldv_37_ldv_param_3_5;
  char *ldv_37_ldv_param_1_6;
  long long *ldv_37_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 1848 
  struct file_operations *ldv_37_container = ldv_emg_alias_rss_debugfs_fops_2;
  
#line 1849 
  int ldv_37_ret = ldv_undef_int();
  
#line 1852 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 1856 
  ldv_37_ret = ldv_undef_int();
  
#line 1859 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 1860 
    ldv_37_container = data->arg0;
    
#line 1861 
    ldv_free((void *)data);
  }
  else ;
  
#line 1866 
  ldv_37_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 1867 
  tmp_1 = ldv_undef_int();
  
#line 1867 
  ldv_37_size_cnt = (unsigned long)tmp_1;
  
#line 1874 
  goto ldv_main_37;
  
#line 1876 
  __retres = (void *)0;
  
#line 1876 
  goto return_label;
  ldv_main_37: 
#line 1879 
  ;
  
#line 1882 
  tmp_3 = ldv_undef_int();
  
#line 1882 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 1885 
    ldv_37_ret = ldv_emg_wrapper_rss_open_3(ldv_37_resource_0,ldv_37_resource_1);
    
#line 1887 
    ldv_37_ret = ldv_filter_err_code(ldv_37_ret);
    
#line 1890 
    tmp_2 = ldv_undef_int();
    
#line 1890 
    if (tmp_2 != 0) {
      
#line 1892 
      __VERIFIER_assume(ldv_37_ret == 0);
      
#line 1899 
      goto ldv_call_37;
    }
    else {
      
#line 1903 
      __VERIFIER_assume(ldv_37_ret != 0);
      
#line 1910 
      goto ldv_main_37;
    }
  }
  else {
    
#line 1915 
    ldv_free((void *)ldv_37_resource_0);
    
#line 1923 
    __retres = (void *)0;
    
#line 1923 
    goto return_label;
  }
  
#line 1926 
  __retres = (void *)0;
  
#line 1926 
  goto return_label;
  ldv_call_37: 
#line 1929 
  ;
  
#line 1932 
  tmp_4 = ldv_undef_int();
  
#line 1932 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 1933 
    ;
    
#line 1935 
    ldv_37_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 1936 
    ldv_37_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 1940 
    if (ldv_37_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 1946 
      __VERIFIER_assume(ldv_37_size_cnt <= 2147479552UL);
      
#line 1948 
      (*(ldv_37_container->write))(ldv_37_resource_1,(char const *)ldv_37_ldv_param_1_6,ldv_37_size_cnt,ldv_37_ldv_param_3_7);
    }
    else ;
    
#line 1953 
    ldv_free((void *)ldv_37_ldv_param_1_6);
    
#line 1954 
    ldv_free((void *)ldv_37_ldv_param_3_7);
    
#line 1961 
    goto ldv_call_37;
    case 2: 
#line 1964 
    ;
    
#line 1967 
    seq_release_private(ldv_37_resource_0,ldv_37_resource_1);
    
#line 1974 
    goto ldv_main_37;
    case 3: 
#line 1977 
    ;
    
#line 1981 
    tmp_9 = ldv_undef_int();
    
#line 1981 
    if (tmp_9 != 0) 
#line 1984 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_37_resource_1,ldv_37_ldv_param_1_2,ldv_37_ldv_param_2_3);
    else {
      
#line 1990 
      ldv_37_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 1991 
      ldv_37_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 1996 
      (*ldv_emg_alias_seq_read_4)(ldv_37_resource_1,ldv_37_ldv_param_1_4,ldv_37_size_cnt,ldv_37_ldv_param_3_5);
      
#line 2000 
      ldv_free((void *)ldv_37_ldv_param_1_4);
      
#line 2001 
      ldv_free((void *)ldv_37_ldv_param_3_5);
    }
    
#line 2005 
    goto ldv_46100;
    default: 
#line 2007 
    ;
    
#line 2007 
    __VERIFIER_assume(0);
  }
  ldv_46100: 
#line 2016 
  ;
  
#line 2016 
  goto ldv_call_37;
  
#line 2018 
  __retres = (void *)0;
  return_label: 
#line 2018 
                return __retres;
}


#line 2023  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_13_1(struct seq_file *arg0, struct seq_operations *arg1)
{
  int ret;
  struct ldv_struct_traverse_kernel_items_scenario_28 *cf_arg_28;
  struct ldv_struct_traverse_kernel_items_scenario_28 *cf_arg_50;
  struct ldv_struct_traverse_kernel_items_scenario_28 *cf_arg_35;
  struct ldv_struct_traverse_kernel_items_scenario_28 *cf_arg_36;
  struct ldv_struct_traverse_kernel_items_scenario_28 *cf_arg_51;
  int tmp;
  
#line 2030 
  tmp = ldv_undef_int();
  
#line 2030 
  switch (tmp) {
    case 0: 
#line 2031 
    ;
    
#line 2032 
    cf_arg_28 = (struct ldv_struct_traverse_kernel_items_scenario_28 *)ldv_xmalloc(24UL);
    
#line 2033 
    cf_arg_28->arg0 = arg0;
    
#line 2034 
    cf_arg_28->arg1 = arg1;
    
#line 2035 
    ret = pthread_create(& ldv_thread_28,(pthread_attr_t const *)0,& ldv_traverse_kernel_items_scenario_28,(void *)cf_arg_28);
    
#line 2036 
    __VERIFIER_assume(ret == 0);
    
#line 2037 
    goto ldv_46113;
    case 1: 
#line 2039 
    ;
    
#line 2040 
    cf_arg_50 = (struct ldv_struct_traverse_kernel_items_scenario_28 *)ldv_xmalloc(24UL);
    
#line 2041 
    cf_arg_50->arg0 = arg0;
    
#line 2042 
    cf_arg_50->arg1 = arg1;
    
#line 2043 
    ret = pthread_create(& ldv_thread_50,(pthread_attr_t const *)0,& ldv_traverse_kernel_items_scenario_50,(void *)cf_arg_50);
    
#line 2044 
    __VERIFIER_assume(ret == 0);
    
#line 2045 
    goto ldv_46113;
    case 2: 
#line 2047 
    ;
    
#line 2048 
    cf_arg_35 = (struct ldv_struct_traverse_kernel_items_scenario_28 *)ldv_xmalloc(24UL);
    
#line 2049 
    cf_arg_35->arg0 = arg0;
    
#line 2050 
    cf_arg_35->arg1 = arg1;
    
#line 2051 
    ret = pthread_create(& ldv_thread_35,(pthread_attr_t const *)0,& ldv_traverse_kernel_items_scenario_35,(void *)cf_arg_35);
    
#line 2052 
    __VERIFIER_assume(ret == 0);
    
#line 2053 
    goto ldv_46113;
    case 3: 
#line 2055 
    ;
    
#line 2056 
    cf_arg_36 = (struct ldv_struct_traverse_kernel_items_scenario_28 *)ldv_xmalloc(24UL);
    
#line 2057 
    cf_arg_36->arg0 = arg0;
    
#line 2058 
    cf_arg_36->arg1 = arg1;
    
#line 2059 
    ret = pthread_create(& ldv_thread_36,(pthread_attr_t const *)0,& ldv_traverse_kernel_items_scenario_36,(void *)cf_arg_36);
    
#line 2060 
    __VERIFIER_assume(ret == 0);
    
#line 2061 
    goto ldv_46113;
    case 4: 
#line 2063 
    ;
    
#line 2064 
    cf_arg_51 = (struct ldv_struct_traverse_kernel_items_scenario_28 *)ldv_xmalloc(24UL);
    
#line 2065 
    cf_arg_51->arg0 = arg0;
    
#line 2066 
    cf_arg_51->arg1 = arg1;
    
#line 2067 
    ret = pthread_create(& ldv_thread_51,(pthread_attr_t const *)0,& ldv_traverse_kernel_items_scenario_51,(void *)cf_arg_51);
    
#line 2068 
    __VERIFIER_assume(ret == 0);
    
#line 2069 
    goto ldv_46113;
    default: 
#line 2071 
    ;
    
#line 2071 
    __VERIFIER_assume(0);
  }
  ldv_46113: 
#line 2072 
  ;
  
#line 2073 
  return;
}


#line 2077  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_40(void *arg0)
{
  void *__retres;
  struct file *ldv_40_resource_1;
  int ldv_40_ldv_param_2_3;
  long long ldv_40_ldv_param_1_2;
  char *ldv_40_ldv_param_1_4;
  struct inode *ldv_40_resource_0;
  unsigned long ldv_40_size_cnt;
  long long *ldv_40_ldv_param_3_5;
  char *ldv_40_ldv_param_1_6;
  long long *ldv_40_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 2088 
  struct file_operations *ldv_40_container = ldv_emg_alias_cim_la_fops_2;
  
#line 2089 
  int ldv_40_ret = ldv_undef_int();
  
#line 2092 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 2096 
  ldv_40_ret = ldv_undef_int();
  
#line 2099 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 2100 
    ldv_40_container = data->arg0;
    
#line 2101 
    ldv_free((void *)data);
  }
  else ;
  
#line 2106 
  ldv_40_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 2107 
  tmp_1 = ldv_undef_int();
  
#line 2107 
  ldv_40_size_cnt = (unsigned long)tmp_1;
  
#line 2114 
  goto ldv_main_40;
  
#line 2116 
  __retres = (void *)0;
  
#line 2116 
  goto return_label;
  ldv_main_40: 
#line 2119 
  ;
  
#line 2122 
  tmp_3 = ldv_undef_int();
  
#line 2122 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 2125 
    ldv_40_ret = ldv_emg_wrapper_cim_la_open_3(ldv_40_resource_0,ldv_40_resource_1);
    
#line 2127 
    ldv_40_ret = ldv_filter_err_code(ldv_40_ret);
    
#line 2130 
    tmp_2 = ldv_undef_int();
    
#line 2130 
    if (tmp_2 != 0) {
      
#line 2132 
      __VERIFIER_assume(ldv_40_ret == 0);
      
#line 2139 
      goto ldv_call_40;
    }
    else {
      
#line 2143 
      __VERIFIER_assume(ldv_40_ret != 0);
      
#line 2150 
      goto ldv_main_40;
    }
  }
  else {
    
#line 2155 
    ldv_free((void *)ldv_40_resource_0);
    
#line 2163 
    __retres = (void *)0;
    
#line 2163 
    goto return_label;
  }
  
#line 2166 
  __retres = (void *)0;
  
#line 2166 
  goto return_label;
  ldv_call_40: 
#line 2169 
  ;
  
#line 2172 
  tmp_4 = ldv_undef_int();
  
#line 2172 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 2173 
    ;
    
#line 2175 
    ldv_40_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 2176 
    ldv_40_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 2180 
    if (ldv_40_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 2186 
      __VERIFIER_assume(ldv_40_size_cnt <= 2147479552UL);
      
#line 2188 
      (*(ldv_40_container->write))(ldv_40_resource_1,(char const *)ldv_40_ldv_param_1_6,ldv_40_size_cnt,ldv_40_ldv_param_3_7);
    }
    else ;
    
#line 2193 
    ldv_free((void *)ldv_40_ldv_param_3_7);
    
#line 2194 
    ldv_free((void *)ldv_40_ldv_param_1_6);
    
#line 2201 
    goto ldv_call_40;
    case 2: 
#line 2204 
    ;
    
#line 2207 
    seq_release_private(ldv_40_resource_0,ldv_40_resource_1);
    
#line 2214 
    goto ldv_main_40;
    case 3: 
#line 2217 
    ;
    
#line 2221 
    tmp_9 = ldv_undef_int();
    
#line 2221 
    if (tmp_9 != 0) 
#line 2224 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_40_resource_1,ldv_40_ldv_param_1_2,ldv_40_ldv_param_2_3);
    else {
      
#line 2230 
      ldv_40_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 2231 
      ldv_40_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 2236 
      (*ldv_emg_alias_seq_read_4)(ldv_40_resource_1,ldv_40_ldv_param_1_4,ldv_40_size_cnt,ldv_40_ldv_param_3_5);
      
#line 2240 
      ldv_free((void *)ldv_40_ldv_param_1_4);
      
#line 2241 
      ldv_free((void *)ldv_40_ldv_param_3_5);
    }
    
#line 2245 
    goto ldv_46139;
    default: 
#line 2247 
    ;
    
#line 2247 
    __VERIFIER_assume(0);
  }
  ldv_46139: 
#line 2256 
  ;
  
#line 2256 
  goto ldv_call_40;
  
#line 2258 
  __retres = (void *)0;
  return_label: 
#line 2258 
                return __retres;
}


#line 2263  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_random_allocationless_scenario_54(void *arg0)
{
  void *__retres;
  unsigned short (*ldv_54_ldv_param_3_26)(struct net_device *, struct sk_buff *);
  struct ethtool_drvinfo *ldv_54_ldv_param_1_12;
  struct ethtool_cmd *ldv_54_ldv_param_1_3;
  int ldv_54_ldv_param_1_10;
  struct ethtool_eeprom *ldv_54_ldv_param_1_13;
  unsigned int *ldv_54_ldv_param_1_15;
  int ldv_54_ldv_param_2_28;
  struct ethtool_rxnfc *ldv_54_ldv_param_1_34;
  struct ethtool_stats *ldv_54_ldv_param_1_8;
  struct ethtool_pauseparam *ldv_54_ldv_param_1_42;
  struct ethtool_pauseparam *ldv_54_ldv_param_1_2;
  enum ethtool_phys_id_state *ldv_54_ldv_param_1_4;
  void *ldv_54_ldv_param_2_25;
  unsigned long long ldv_54_ldv_param_1_11;
  unsigned char *ldv_54_ldv_param_3_40;
  unsigned char *ldv_54_ldv_param_2_6;
  unsigned int *ldv_54_ldv_param_1_38;
  unsigned char *ldv_54_ldv_param_2_22;
  struct ethtool_coalesce *ldv_54_ldv_param_1_37;
  unsigned char ldv_54_ldv_param_3_17;
  struct rtnl_link_stats64 *ldv_54_ldv_param_1_30;
  struct napi_struct *ldv_54_ldv_param_0_43;
  struct ethtool_cmd *ldv_54_ldv_param_1_23;
  struct ethtool_ringparam *ldv_54_ldv_param_1_18;
  unsigned long long *ldv_54_ldv_param_2_9;
  struct ethtool_flash *ldv_54_ldv_param_1_29;
  struct ethtool_coalesce *ldv_54_ldv_param_1_41;
  int ldv_54_ldv_param_1_33;
  struct ethtool_eeprom *ldv_54_ldv_param_1_21;
  struct ethtool_regs *ldv_54_ldv_param_1_31;
  struct sk_buff *ldv_54_ldv_param_0_19;
  unsigned char *ldv_54_ldv_param_2_39;
  unsigned int *ldv_54_ldv_param_2_35;
  void *ldv_54_ldv_param_1_20;
  unsigned int ldv_54_ldv_param_1_36;
  void *ldv_54_ldv_param_2_32;
  unsigned char *ldv_54_ldv_param_2_14;
  unsigned int ldv_54_ldv_param_1_5;
  struct net_device *ldv_54_container;
  struct ifreq *ldv_54_ldv_param_1_27;
  struct ethtool_ringparam *ldv_54_ldv_param_1_7;
  unsigned char *ldv_54_ldv_param_2_16;
  struct sk_buff *ldv_54_ldv_param_1_24;
  int tmp_32;
  
#line 2310 
  struct ldv_struct_random_allocationless_scenario_54 *data = (struct ldv_struct_random_allocationless_scenario_54 *)arg0;
  
#line 2315 
  if (data != (struct ldv_struct_random_allocationless_scenario_54 *)0) {
    
#line 2316 
    ldv_54_container = data->arg0;
    
#line 2317 
    ldv_free((void *)data);
  }
  else ;
  
#line 2325 
  goto ldv_call_54;
  
#line 2327 
  __retres = (void *)0;
  
#line 2327 
  goto return_label;
  ldv_call_54: 
#line 2330 
  ;
  
#line 2333 
  tmp_32 = ldv_undef_int();
  
#line 2333 
  if (tmp_32 != 0) {
    int tmp_0;
    
#line 2335 
    ldv_54_ldv_param_1_2 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
    
#line 2338 
    tmp_0 = ldv_undef_int();
    
#line 2338 
    switch (tmp_0) {
      case 1: 
#line 2339 
      ;
      
#line 2342 
      ldv_emg_wrapper_get_pauseparam_2(ldv_54_container,ldv_54_ldv_param_1_2);
      
#line 2345 
      goto ldv_46192;
      case 2: 
#line 2347 
      ;
      
#line 2350 
      ldv_emg_wrapper_cxgb_set_rxmode_21(ldv_54_container);
      
#line 2353 
      goto ldv_46192;
      case 3: 
#line 2355 
      ;
      
#line 2358 
      ldv_emg_wrapper_restart_autoneg_29(ldv_54_container);
      
#line 2361 
      goto ldv_46192;
      case 4: 
#line 2363 
      ;
      
#line 2365 
      ldv_54_ldv_param_0_43 = (struct napi_struct *)ldv_xmalloc_unknown_size(0UL);
      
#line 2370 
      cxgb_busy_poll(ldv_54_ldv_param_0_43);
      
#line 2374 
      ldv_free((void *)ldv_54_ldv_param_0_43);
      
#line 2377 
      goto ldv_46192;
      case 5: 
#line 2379 
      ;
      
#line 2381 
      ldv_54_ldv_param_1_42 = (struct ethtool_pauseparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 2386 
      ldv_emg_wrapper_set_pauseparam_35(ldv_54_container,ldv_54_ldv_param_1_42);
      
#line 2390 
      ldv_free((void *)ldv_54_ldv_param_1_42);
      
#line 2393 
      goto ldv_46192;
      case 6: 
#line 2395 
      ;
      
#line 2397 
      ldv_54_ldv_param_1_41 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 2402 
      ldv_emg_wrapper_set_coalesce_34(ldv_54_container,ldv_54_ldv_param_1_41);
      
#line 2406 
      ldv_free((void *)ldv_54_ldv_param_1_41);
      
#line 2409 
      goto ldv_46192;
      case 7: 
#line 2411 
      ;
      
#line 2413 
      ldv_54_ldv_param_3_40 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 2414 
      ldv_54_ldv_param_2_39 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 2415 
      ldv_54_ldv_param_1_38 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
      
#line 2420 
      ldv_emg_wrapper_get_rss_table_32(ldv_54_container,ldv_54_ldv_param_1_38,ldv_54_ldv_param_2_39,ldv_54_ldv_param_3_40);
      
#line 2424 
      ldv_free((void *)ldv_54_ldv_param_3_40);
      
#line 2425 
      ldv_free((void *)ldv_54_ldv_param_2_39);
      
#line 2426 
      ldv_free((void *)ldv_54_ldv_param_1_38);
      
#line 2429 
      goto ldv_46192;
      case 8: 
#line 2431 
      ;
      
#line 2433 
      ldv_54_ldv_param_1_37 = (struct ethtool_coalesce *)ldv_xmalloc_unknown_size(0UL);
      
#line 2438 
      ldv_emg_wrapper_get_coalesce_31(ldv_54_container,ldv_54_ldv_param_1_37);
      
#line 2442 
      ldv_free((void *)ldv_54_ldv_param_1_37);
      
#line 2445 
      goto ldv_46192;
      case 9: 
#line 2447 
      ;
      
#line 2453 
      ldv_emg_wrapper_set_msglevel_5(ldv_54_container,ldv_54_ldv_param_1_36);
      
#line 2459 
      goto ldv_46192;
      case 10: 
#line 2461 
      ;
      
#line 2464 
      ldv_emg_wrapper_cxgb_netpoll_36(ldv_54_container);
      
#line 2467 
      goto ldv_46192;
      case 11: 
#line 2469 
      ;
      
#line 2471 
      ldv_54_ldv_param_1_34 = (struct ethtool_rxnfc *)ldv_xmalloc_unknown_size(0UL);
      
#line 2472 
      ldv_54_ldv_param_2_35 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
      
#line 2477 
      ldv_emg_wrapper_get_rxnfc_28(ldv_54_container,ldv_54_ldv_param_1_34,ldv_54_ldv_param_2_35);
      
#line 2481 
      ldv_free((void *)ldv_54_ldv_param_1_34);
      
#line 2482 
      ldv_free((void *)ldv_54_ldv_param_2_35);
      
#line 2485 
      goto ldv_46192;
      case 12: 
#line 2487 
      ;
      
#line 2493 
      ldv_emg_wrapper_get_sset_count_27(ldv_54_container,ldv_54_ldv_param_1_33);
      
#line 2499 
      goto ldv_46192;
      case 13: 
#line 2501 
      ;
      
#line 2503 
      ldv_54_ldv_param_2_32 = ldv_xmalloc_unknown_size(0UL);
      
#line 2504 
      ldv_54_ldv_param_1_31 = (struct ethtool_regs *)ldv_xmalloc_unknown_size(0UL);
      
#line 2509 
      ldv_emg_wrapper_get_regs_26(ldv_54_container,ldv_54_ldv_param_1_31,ldv_54_ldv_param_2_32);
      
#line 2513 
      ldv_free(ldv_54_ldv_param_2_32);
      
#line 2514 
      ldv_free((void *)ldv_54_ldv_param_1_31);
      
#line 2517 
      goto ldv_46192;
      case 14: 
#line 2519 
      ;
      
#line 2521 
      ldv_54_ldv_param_1_30 = (struct rtnl_link_stats64 *)ldv_xmalloc_unknown_size(0UL);
      
#line 2526 
      ldv_emg_wrapper_cxgb_get_stats_13(ldv_54_container,ldv_54_ldv_param_1_30);
      
#line 2530 
      ldv_free((void *)ldv_54_ldv_param_1_30);
      
#line 2533 
      goto ldv_46192;
      case 15: 
#line 2535 
      ;
      
#line 2537 
      ldv_54_ldv_param_1_29 = (struct ethtool_flash *)ldv_xmalloc_unknown_size(0UL);
      
#line 2542 
      ldv_emg_wrapper_set_flash_24(ldv_54_container,ldv_54_ldv_param_1_29);
      
#line 2546 
      ldv_free((void *)ldv_54_ldv_param_1_29);
      
#line 2549 
      goto ldv_46192;
      case 16: 
#line 2551 
      ;
      
#line 2553 
      ldv_54_ldv_param_1_27 = (struct ifreq *)ldv_xmalloc_unknown_size(0UL);
      
#line 2558 
      ldv_emg_wrapper_cxgb_ioctl_23(ldv_54_container,ldv_54_ldv_param_1_27,ldv_54_ldv_param_2_28);
      
#line 2562 
      ldv_free((void *)ldv_54_ldv_param_1_27);
      
#line 2565 
      goto ldv_46192;
      case 17: 
#line 2567 
      ;
      
#line 2569 
      ldv_54_ldv_param_2_25 = ldv_xmalloc_unknown_size(0UL);
      
#line 2570 
      ldv_54_ldv_param_1_24 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 2571 
      ldv_54_ldv_param_3_26 = (unsigned short (*)(struct net_device *, struct sk_buff *))ldv_xmalloc_unknown_size(0UL);
      
#line 2576 
      ldv_emg_wrapper_cxgb_select_queue_22(ldv_54_container,ldv_54_ldv_param_1_24,ldv_54_ldv_param_2_25,ldv_54_ldv_param_3_26);
      
#line 2580 
      ldv_free(ldv_54_ldv_param_2_25);
      
#line 2581 
      ldv_free((void *)ldv_54_ldv_param_1_24);
      
#line 2582 
      ldv_free((void *)ldv_54_ldv_param_3_26);
      
#line 2585 
      goto ldv_46192;
      case 18: 
#line 2587 
      ;
      
#line 2589 
      ldv_54_ldv_param_1_23 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
      
#line 2594 
      ldv_emg_wrapper_get_settings_25(ldv_54_container,ldv_54_ldv_param_1_23);
      
#line 2598 
      ldv_free((void *)ldv_54_ldv_param_1_23);
      
#line 2601 
      goto ldv_46192;
      case 19: 
#line 2603 
      ;
      
#line 2605 
      ldv_54_ldv_param_2_22 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 2606 
      ldv_54_ldv_param_1_21 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
      
#line 2611 
      ldv_emg_wrapper_get_eeprom_20(ldv_54_container,ldv_54_ldv_param_1_21,ldv_54_ldv_param_2_22);
      
#line 2615 
      ldv_free((void *)ldv_54_ldv_param_2_22);
      
#line 2616 
      ldv_free((void *)ldv_54_ldv_param_1_21);
      
#line 2619 
      goto ldv_46192;
      case 20: 
#line 2621 
      ;
      
#line 2623 
      ldv_54_ldv_param_1_20 = ldv_xmalloc_unknown_size(0UL);
      
#line 2628 
      ldv_emg_wrapper_cxgb_set_mac_addr_19(ldv_54_container,ldv_54_ldv_param_1_20);
      
#line 2632 
      ldv_free(ldv_54_ldv_param_1_20);
      
#line 2635 
      goto ldv_46192;
      case 21: 
#line 2637 
      ;
      
#line 2639 
      ldv_54_ldv_param_0_19 = (struct sk_buff *)ldv_xmalloc_unknown_size(0UL);
      
#line 2644 
      t4_eth_xmit(ldv_54_ldv_param_0_19,ldv_54_container);
      
#line 2648 
      ldv_free((void *)ldv_54_ldv_param_0_19);
      
#line 2651 
      goto ldv_46192;
      case 22: 
#line 2653 
      ;
      
#line 2656 
      ldv_emg_wrapper_get_msglevel_18(ldv_54_container);
      
#line 2659 
      goto ldv_46192;
      case 23: 
#line 2661 
      ;
      
#line 2663 
      ldv_54_ldv_param_1_18 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 2668 
      ldv_emg_wrapper_set_sge_param_17(ldv_54_container,ldv_54_ldv_param_1_18);
      
#line 2672 
      ldv_free((void *)ldv_54_ldv_param_1_18);
      
#line 2675 
      goto ldv_46192;
      case 24: 
#line 2677 
      ;
      
#line 2679 
      ldv_54_ldv_param_1_15 = (unsigned int *)ldv_xmalloc_unknown_size(0UL);
      
#line 2680 
      ldv_54_ldv_param_2_16 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 2685 
      ldv_emg_wrapper_set_rss_table_16(ldv_54_container,ldv_54_ldv_param_1_15,ldv_54_ldv_param_2_16,(unsigned char)((int)ldv_54_ldv_param_3_17));
      
#line 2689 
      ldv_free((void *)ldv_54_ldv_param_1_15);
      
#line 2690 
      ldv_free((void *)ldv_54_ldv_param_2_16);
      
#line 2693 
      goto ldv_46192;
      case 25: 
#line 2695 
      ;
      
#line 2698 
      ldv_emg_wrapper_get_rss_table_size_4(ldv_54_container);
      
#line 2701 
      goto ldv_46192;
      case 26: 
#line 2703 
      ;
      
#line 2706 
      ldv_emg_wrapper_get_eeprom_len_37(ldv_54_container);
      
#line 2709 
      goto ldv_46192;
      case 27: 
#line 2711 
      ;
      
#line 2713 
      ldv_54_ldv_param_2_14 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 2714 
      ldv_54_ldv_param_1_13 = (struct ethtool_eeprom *)ldv_xmalloc_unknown_size(0UL);
      
#line 2719 
      ldv_emg_wrapper_set_eeprom_14(ldv_54_container,ldv_54_ldv_param_1_13,ldv_54_ldv_param_2_14);
      
#line 2723 
      ldv_free((void *)ldv_54_ldv_param_2_14);
      
#line 2724 
      ldv_free((void *)ldv_54_ldv_param_1_13);
      
#line 2727 
      goto ldv_46192;
      case 28: 
#line 2729 
      ;
      
#line 2731 
      ldv_54_ldv_param_1_12 = (struct ethtool_drvinfo *)ldv_xmalloc_unknown_size(0UL);
      
#line 2736 
      ldv_emg_wrapper_get_drvinfo_12(ldv_54_container,ldv_54_ldv_param_1_12);
      
#line 2740 
      ldv_free((void *)ldv_54_ldv_param_1_12);
      
#line 2743 
      goto ldv_46192;
      case 29: 
#line 2745 
      ;
      
#line 2751 
      ldv_emg_wrapper_cxgb_set_features_11(ldv_54_container,ldv_54_ldv_param_1_11);
      
#line 2757 
      goto ldv_46192;
      case 30: 
#line 2759 
      ;
      
#line 2762 
      ldv_emg_wrapper_get_regs_len_33(ldv_54_container);
      
#line 2765 
      goto ldv_46192;
      case 31: 
#line 2767 
      ;
      
#line 2770 
      (*ldv_emg_alias_ethtool_op_get_link_10)(ldv_54_container);
      
#line 2773 
      goto ldv_46192;
      case 32: 
#line 2775 
      ;
      
#line 2781 
      ldv_emg_wrapper_cxgb_change_mtu_6(ldv_54_container,ldv_54_ldv_param_1_10);
      
#line 2787 
      goto ldv_46192;
      case 33: 
#line 2789 
      ;
      
#line 2792 
      (*ldv_emg_alias_eth_validate_addr_9)(ldv_54_container);
      
#line 2795 
      goto ldv_46192;
      case 34: 
#line 2797 
      ;
      
#line 2799 
      ldv_54_ldv_param_2_9 = (unsigned long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 2800 
      ldv_54_ldv_param_1_8 = (struct ethtool_stats *)ldv_xmalloc_unknown_size(0UL);
      
#line 2805 
      ldv_emg_wrapper_get_stats_8(ldv_54_container,ldv_54_ldv_param_1_8,ldv_54_ldv_param_2_9);
      
#line 2809 
      ldv_free((void *)ldv_54_ldv_param_2_9);
      
#line 2810 
      ldv_free((void *)ldv_54_ldv_param_1_8);
      
#line 2813 
      goto ldv_46192;
      case 35: 
#line 2815 
      ;
      
#line 2817 
      ldv_54_ldv_param_1_7 = (struct ethtool_ringparam *)ldv_xmalloc_unknown_size(0UL);
      
#line 2822 
      ldv_emg_wrapper_get_sge_param_7(ldv_54_container,ldv_54_ldv_param_1_7);
      
#line 2826 
      ldv_free((void *)ldv_54_ldv_param_1_7);
      
#line 2829 
      goto ldv_46192;
      case 36: 
#line 2831 
      ;
      
#line 2834 
      cxgb_fcoe_disable(ldv_54_container);
      
#line 2837 
      goto ldv_46192;
      case 37: 
#line 2839 
      ;
      
#line 2841 
      ldv_54_ldv_param_2_6 = (unsigned char *)ldv_xmalloc_unknown_size(0UL);
      
#line 2846 
      ldv_emg_wrapper_get_strings_30(ldv_54_container,ldv_54_ldv_param_1_5,ldv_54_ldv_param_2_6);
      
#line 2850 
      ldv_free((void *)ldv_54_ldv_param_2_6);
      
#line 2853 
      goto ldv_46192;
      case 38: 
#line 2855 
      ;
      
#line 2857 
      ldv_54_ldv_param_1_4 = (enum ethtool_phys_id_state *)ldv_xmalloc_unknown_size(0UL);
      
#line 2862 
      ldv_emg_wrapper_identify_port_15(ldv_54_container,*ldv_54_ldv_param_1_4);
      
#line 2866 
      ldv_free((void *)ldv_54_ldv_param_1_4);
      
#line 2869 
      goto ldv_46192;
      case 39: 
#line 2871 
      ;
      
#line 2873 
      ldv_54_ldv_param_1_3 = (struct ethtool_cmd *)ldv_xmalloc_unknown_size(0UL);
      
#line 2878 
      ldv_emg_wrapper_set_settings_3(ldv_54_container,ldv_54_ldv_param_1_3);
      
#line 2882 
      ldv_free((void *)ldv_54_ldv_param_1_3);
      
#line 2885 
      goto ldv_46192;
      case 40: 
#line 2887 
      ;
      
#line 2890 
      cxgb_fcoe_enable(ldv_54_container);
      
#line 2893 
      goto ldv_46192;
      default: 
#line 2895 
      ;
      
#line 2895 
      __VERIFIER_assume(0);
    }
    ldv_46192: 
#line 2898 
    ;
    
#line 2898 
    ldv_free((void *)ldv_54_ldv_param_1_2);
    
#line 2905 
    goto ldv_call_54;
  }
  else {
    
#line 2913 
    __retres = (void *)0;
    
#line 2913 
    goto return_label;
  }
  
#line 2916 
  __retres = (void *)0;
  return_label: 
#line 2916 
                return __retres;
}


#line 2921  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_unregister_netdev(struct net_device *arg0)
{
  struct net_device *ldv_5_netdev;
  
#line 2927 
  ldv_5_netdev = arg0;
  
#line 2932 
  ldv_emg_wrapper_cxgb_close_2(ldv_5_netdev);
  
#line 2936 
  ldv_dispatch_deregister_5_1(ldv_5_netdev);
  
#line 2940 
  goto return_label;
  return_label: 
#line 2942 
                return;
}


#line 2947  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_46(void *arg0)
{
  void *__retres;
  struct file *ldv_46_resource_1;
  int ldv_46_ldv_param_2_3;
  long long ldv_46_ldv_param_1_2;
  char *ldv_46_ldv_param_1_4;
  struct inode *ldv_46_resource_0;
  unsigned long ldv_46_size_cnt;
  long long *ldv_46_ldv_param_3_5;
  char *ldv_46_ldv_param_1_6;
  long long *ldv_46_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 2958 
  struct file_operations *ldv_46_container = ldv_emg_alias_clip_tbl_debugfs_fops_2;
  
#line 2959 
  int ldv_46_ret = ldv_undef_int();
  
#line 2962 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 2966 
  ldv_46_ret = ldv_undef_int();
  
#line 2969 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 2970 
    ldv_46_container = data->arg0;
    
#line 2971 
    ldv_free((void *)data);
  }
  else ;
  
#line 2976 
  ldv_46_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 2977 
  tmp_1 = ldv_undef_int();
  
#line 2977 
  ldv_46_size_cnt = (unsigned long)tmp_1;
  
#line 2984 
  goto ldv_main_46;
  
#line 2986 
  __retres = (void *)0;
  
#line 2986 
  goto return_label;
  ldv_main_46: 
#line 2989 
  ;
  
#line 2992 
  tmp_3 = ldv_undef_int();
  
#line 2992 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 2995 
    ldv_46_ret = ldv_emg_wrapper_clip_tbl_open_3(ldv_46_resource_0,ldv_46_resource_1);
    
#line 2997 
    ldv_46_ret = ldv_filter_err_code(ldv_46_ret);
    
#line 3000 
    tmp_2 = ldv_undef_int();
    
#line 3000 
    if (tmp_2 != 0) {
      
#line 3002 
      __VERIFIER_assume(ldv_46_ret == 0);
      
#line 3009 
      goto ldv_call_46;
    }
    else {
      
#line 3013 
      __VERIFIER_assume(ldv_46_ret != 0);
      
#line 3020 
      goto ldv_main_46;
    }
  }
  else {
    
#line 3025 
    ldv_free((void *)ldv_46_resource_0);
    
#line 3033 
    __retres = (void *)0;
    
#line 3033 
    goto return_label;
  }
  
#line 3036 
  __retres = (void *)0;
  
#line 3036 
  goto return_label;
  ldv_call_46: 
#line 3039 
  ;
  
#line 3042 
  tmp_4 = ldv_undef_int();
  
#line 3042 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 3043 
    ;
    
#line 3045 
    ldv_46_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 3046 
    ldv_46_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 3050 
    if (ldv_46_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 3056 
      __VERIFIER_assume(ldv_46_size_cnt <= 2147479552UL);
      
#line 3058 
      (*(ldv_46_container->write))(ldv_46_resource_1,(char const *)ldv_46_ldv_param_1_6,ldv_46_size_cnt,ldv_46_ldv_param_3_7);
    }
    else ;
    
#line 3063 
    ldv_free((void *)ldv_46_ldv_param_1_6);
    
#line 3064 
    ldv_free((void *)ldv_46_ldv_param_3_7);
    
#line 3071 
    goto ldv_call_46;
    case 2: 
#line 3074 
    ;
    
#line 3077 
    (*ldv_emg_alias_single_release_5)(ldv_46_resource_0,ldv_46_resource_1);
    
#line 3084 
    goto ldv_main_46;
    case 3: 
#line 3087 
    ;
    
#line 3091 
    tmp_9 = ldv_undef_int();
    
#line 3091 
    if (tmp_9 != 0) 
#line 3094 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_46_resource_1,ldv_46_ldv_param_1_2,ldv_46_ldv_param_2_3);
    else {
      
#line 3100 
      ldv_46_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 3101 
      ldv_46_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 3106 
      (*ldv_emg_alias_seq_read_4)(ldv_46_resource_1,ldv_46_ldv_param_1_4,ldv_46_size_cnt,ldv_46_ldv_param_3_5);
      
#line 3110 
      ldv_free((void *)ldv_46_ldv_param_3_5);
      
#line 3111 
      ldv_free((void *)ldv_46_ldv_param_1_4);
    }
    
#line 3115 
    goto ldv_46257;
    default: 
#line 3117 
    ;
    
#line 3117 
    __VERIFIER_assume(0);
  }
  ldv_46257: 
#line 3126 
  ;
  
#line 3126 
  goto ldv_call_46;
  
#line 3128 
  __retres = (void *)0;
  return_label: 
#line 3128 
                return __retres;
}


#line 3133  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_53(void *arg0)
{
  void *__retres;
  struct file *ldv_53_resource_1;
  int ldv_53_ldv_param_2_3;
  long long ldv_53_ldv_param_1_2;
  char *ldv_53_ldv_param_1_4;
  struct inode *ldv_53_resource_0;
  unsigned long ldv_53_size_cnt;
  long long *ldv_53_ldv_param_3_5;
  char *ldv_53_ldv_param_1_6;
  long long *ldv_53_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 3144 
  struct file_operations *ldv_53_container = ldv_emg_alias_rss_config_debugfs_fops_2;
  
#line 3145 
  int ldv_53_ret = ldv_undef_int();
  
#line 3148 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 3152 
  ldv_53_ret = ldv_undef_int();
  
#line 3155 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 3156 
    ldv_53_container = data->arg0;
    
#line 3157 
    ldv_free((void *)data);
  }
  else ;
  
#line 3162 
  ldv_53_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 3163 
  tmp_1 = ldv_undef_int();
  
#line 3163 
  ldv_53_size_cnt = (unsigned long)tmp_1;
  
#line 3170 
  goto ldv_main_53;
  
#line 3172 
  __retres = (void *)0;
  
#line 3172 
  goto return_label;
  ldv_main_53: 
#line 3175 
  ;
  
#line 3178 
  tmp_3 = ldv_undef_int();
  
#line 3178 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 3181 
    ldv_53_ret = ldv_emg_wrapper_rss_config_open_3(ldv_53_resource_0,ldv_53_resource_1);
    
#line 3183 
    ldv_53_ret = ldv_filter_err_code(ldv_53_ret);
    
#line 3186 
    tmp_2 = ldv_undef_int();
    
#line 3186 
    if (tmp_2 != 0) {
      
#line 3188 
      __VERIFIER_assume(ldv_53_ret == 0);
      
#line 3195 
      goto ldv_call_53;
    }
    else {
      
#line 3199 
      __VERIFIER_assume(ldv_53_ret != 0);
      
#line 3206 
      goto ldv_main_53;
    }
  }
  else {
    
#line 3211 
    ldv_free((void *)ldv_53_resource_0);
    
#line 3219 
    __retres = (void *)0;
    
#line 3219 
    goto return_label;
  }
  
#line 3222 
  __retres = (void *)0;
  
#line 3222 
  goto return_label;
  ldv_call_53: 
#line 3225 
  ;
  
#line 3228 
  tmp_4 = ldv_undef_int();
  
#line 3228 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 3229 
    ;
    
#line 3231 
    ldv_53_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 3232 
    ldv_53_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 3236 
    if (ldv_53_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 3242 
      __VERIFIER_assume(ldv_53_size_cnt <= 2147479552UL);
      
#line 3244 
      (*(ldv_53_container->write))(ldv_53_resource_1,(char const *)ldv_53_ldv_param_1_6,ldv_53_size_cnt,ldv_53_ldv_param_3_7);
    }
    else ;
    
#line 3249 
    ldv_free((void *)ldv_53_ldv_param_1_6);
    
#line 3250 
    ldv_free((void *)ldv_53_ldv_param_3_7);
    
#line 3257 
    goto ldv_call_53;
    case 2: 
#line 3260 
    ;
    
#line 3263 
    (*ldv_emg_alias_single_release_5)(ldv_53_resource_0,ldv_53_resource_1);
    
#line 3270 
    goto ldv_main_53;
    case 3: 
#line 3273 
    ;
    
#line 3277 
    tmp_9 = ldv_undef_int();
    
#line 3277 
    if (tmp_9 != 0) 
#line 3280 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_53_resource_1,ldv_53_ldv_param_1_2,ldv_53_ldv_param_2_3);
    else {
      
#line 3286 
      ldv_53_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 3287 
      ldv_53_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 3292 
      (*ldv_emg_alias_seq_read_4)(ldv_53_resource_1,ldv_53_ldv_param_1_4,ldv_53_size_cnt,ldv_53_ldv_param_3_5);
      
#line 3296 
      ldv_free((void *)ldv_53_ldv_param_3_5);
      
#line 3297 
      ldv_free((void *)ldv_53_ldv_param_1_4);
    }
    
#line 3301 
    goto ldv_46279;
    default: 
#line 3303 
    ;
    
#line 3303 
    __VERIFIER_assume(0);
  }
  ldv_46279: 
#line 3312 
  ;
  
#line 3312 
  goto ldv_call_53;
  
#line 3314 
  __retres = (void *)0;
  return_label: 
#line 3314 
                return __retres;
}


#line 3319  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_register_3_3(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_43 *cf_arg_43;
  int tmp;
  
#line 3322 
  tmp = ldv_undef_int();
  
#line 3322 
  switch (tmp) {
    case 0: 
#line 3323 
    ;
    
#line 3324 
    cf_arg_43 = (struct ldv_struct_timer_scenario_43 *)ldv_xmalloc(16UL);
    
#line 3325 
    cf_arg_43->arg0 = arg0;
    
#line 3326 
    ret = pthread_create(& ldv_thread_43,(pthread_attr_t const *)0,& ldv_timer_scenario_43,(void *)cf_arg_43);
    
#line 3327 
    __VERIFIER_assume(ret == 0);
    
#line 3328 
    goto ldv_46287;
    default: 
#line 3330 
    ;
    
#line 3330 
    __VERIFIER_assume(0);
  }
  ldv_46287: 
#line 3331 
  ;
  
#line 3332 
  return;
}


#line 3336  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_38(void *arg0)
{
  void *__retres;
  struct file *ldv_38_resource_1;
  int ldv_38_ldv_param_2_3;
  long long ldv_38_ldv_param_1_2;
  char *ldv_38_ldv_param_1_4;
  struct inode *ldv_38_resource_0;
  unsigned long ldv_38_size_cnt;
  long long *ldv_38_ldv_param_3_5;
  char *ldv_38_ldv_param_1_6;
  long long *ldv_38_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 3347 
  struct file_operations *ldv_38_container = ldv_emg_alias_cim_qcfg_fops_2;
  
#line 3348 
  int ldv_38_ret = ldv_undef_int();
  
#line 3351 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 3355 
  ldv_38_ret = ldv_undef_int();
  
#line 3358 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 3359 
    ldv_38_container = data->arg0;
    
#line 3360 
    ldv_free((void *)data);
  }
  else ;
  
#line 3365 
  ldv_38_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 3366 
  tmp_1 = ldv_undef_int();
  
#line 3366 
  ldv_38_size_cnt = (unsigned long)tmp_1;
  
#line 3373 
  goto ldv_main_38;
  
#line 3375 
  __retres = (void *)0;
  
#line 3375 
  goto return_label;
  ldv_main_38: 
#line 3378 
  ;
  
#line 3381 
  tmp_3 = ldv_undef_int();
  
#line 3381 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 3384 
    ldv_38_ret = ldv_emg_wrapper_cim_qcfg_open_3(ldv_38_resource_0,ldv_38_resource_1);
    
#line 3386 
    ldv_38_ret = ldv_filter_err_code(ldv_38_ret);
    
#line 3389 
    tmp_2 = ldv_undef_int();
    
#line 3389 
    if (tmp_2 != 0) {
      
#line 3391 
      __VERIFIER_assume(ldv_38_ret == 0);
      
#line 3398 
      goto ldv_call_38;
    }
    else {
      
#line 3402 
      __VERIFIER_assume(ldv_38_ret != 0);
      
#line 3409 
      goto ldv_main_38;
    }
  }
  else {
    
#line 3414 
    ldv_free((void *)ldv_38_resource_0);
    
#line 3422 
    __retres = (void *)0;
    
#line 3422 
    goto return_label;
  }
  
#line 3425 
  __retres = (void *)0;
  
#line 3425 
  goto return_label;
  ldv_call_38: 
#line 3428 
  ;
  
#line 3431 
  tmp_4 = ldv_undef_int();
  
#line 3431 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 3432 
    ;
    
#line 3434 
    ldv_38_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 3435 
    ldv_38_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 3439 
    if (ldv_38_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 3445 
      __VERIFIER_assume(ldv_38_size_cnt <= 2147479552UL);
      
#line 3447 
      (*(ldv_38_container->write))(ldv_38_resource_1,(char const *)ldv_38_ldv_param_1_6,ldv_38_size_cnt,ldv_38_ldv_param_3_7);
    }
    else ;
    
#line 3452 
    ldv_free((void *)ldv_38_ldv_param_3_7);
    
#line 3453 
    ldv_free((void *)ldv_38_ldv_param_1_6);
    
#line 3460 
    goto ldv_call_38;
    case 2: 
#line 3463 
    ;
    
#line 3466 
    (*ldv_emg_alias_single_release_5)(ldv_38_resource_0,ldv_38_resource_1);
    
#line 3473 
    goto ldv_main_38;
    case 3: 
#line 3476 
    ;
    
#line 3480 
    tmp_9 = ldv_undef_int();
    
#line 3480 
    if (tmp_9 != 0) 
#line 3483 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_38_resource_1,ldv_38_ldv_param_1_2,ldv_38_ldv_param_2_3);
    else {
      
#line 3489 
      ldv_38_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 3490 
      ldv_38_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 3495 
      (*ldv_emg_alias_seq_read_4)(ldv_38_resource_1,ldv_38_ldv_param_1_4,ldv_38_size_cnt,ldv_38_ldv_param_3_5);
      
#line 3499 
      ldv_free((void *)ldv_38_ldv_param_3_5);
      
#line 3500 
      ldv_free((void *)ldv_38_ldv_param_1_4);
    }
    
#line 3504 
    goto ldv_46309;
    default: 
#line 3506 
    ;
    
#line 3506 
    __VERIFIER_assume(0);
  }
  ldv_46309: 
#line 3515 
  ;
  
#line 3515 
  goto ldv_call_38;
  
#line 3517 
  __retres = (void *)0;
  return_label: 
#line 3517 
                return __retres;
}


#line 3522  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_traverse_kernel_items_scenario_35(void *arg0)
{
  void *__retres;
  void *ldv_35_ldv_param_1_2;
  long long *ldv_35_index;
  struct seq_file *ldv_35_seq_file;
  void *ldv_35_ldv_param_1_3;
  void *ldv_35_ldv_param_1_4;
  int tmp_2;
  int tmp_6;
  
#line 3528 
  struct seq_operations *ldv_35_ops = ldv_emg_alias_l2t_seq_ops_6;
  
#line 3529 
  int ldv_35_show_ret = ldv_undef_int();
  
#line 3532 
  void *ldv_35_ret = ldv_undef_ptr();
  
#line 3534 
  struct ldv_struct_traverse_kernel_items_scenario_28 *data = (struct ldv_struct_traverse_kernel_items_scenario_28 *)arg0;
  
#line 3538 
  ldv_35_show_ret = ldv_undef_int();
  
#line 3541 
  if (data != (struct ldv_struct_traverse_kernel_items_scenario_28 *)0) {
    
#line 3542 
    ldv_35_seq_file = data->arg0;
    
#line 3543 
    ldv_35_ops = data->arg1;
    
#line 3544 
    ldv_free((void *)data);
  }
  else ;
  
#line 3549 
  ldv_35_index = (long long *)ldv_xmalloc_unknown_size(0UL);
  
#line 3556 
  goto ldv_outer_loop_35;
  
#line 3558 
  __retres = (void *)0;
  
#line 3558 
  goto return_label;
  ldv_outer_loop_35: 
#line 3561 
  ;
  
#line 3564 
  tmp_2 = ldv_undef_int();
  
#line 3564 
  if (tmp_2 != 0) {
    
#line 3567 
    *ldv_35_index = 0LL;
    
#line 3569 
    ldv_35_ret = ldv_emg_wrapper_l2t_seq_start_2(ldv_35_seq_file,ldv_35_index);
    
#line 3576 
    goto ldv_inner_loop_35;
  }
  else {
    
#line 3580 
    ldv_free((void *)ldv_35_index);
    
#line 3588 
    __retres = (void *)0;
    
#line 3588 
    goto return_label;
  }
  
#line 3591 
  __retres = (void *)0;
  
#line 3591 
  goto return_label;
  ldv_inner_loop_35: 
#line 3594 
  ;
  
#line 3597 
  tmp_6 = ldv_undef_int();
  
#line 3597 
  if (tmp_6 != 0) {
    long tmp_3;
    int tmp_4;
    
#line 3599 
    tmp_3 = ldv_is_err_or_null((void const *)ldv_35_ret);
    
#line 3599 
    __VERIFIER_assume(tmp_3 == 0L);
    
#line 3603 
    ldv_35_ldv_param_1_3 = ldv_xmalloc_unknown_size(0UL);
    
#line 3608 
    ldv_35_show_ret = ldv_emg_wrapper_l2t_seq_show_4(ldv_35_seq_file,ldv_35_ldv_param_1_3);
    
#line 3612 
    ldv_free(ldv_35_ldv_param_1_3);
    
#line 3615 
    tmp_4 = ldv_undef_int();
    
#line 3615 
    if (tmp_4 != 0) {
      
#line 3617 
      __VERIFIER_assume(ldv_35_show_ret >= 0);
      
#line 3621 
      ldv_35_ldv_param_1_2 = ldv_xmalloc_unknown_size(0UL);
      
#line 3626 
      ldv_35_ret = ldv_emg_wrapper_l2t_seq_next_3(ldv_35_seq_file,ldv_35_ldv_param_1_2,ldv_35_index);
      
#line 3630 
      ldv_free(ldv_35_ldv_param_1_2);
      
#line 3637 
      goto ldv_inner_loop_35;
    }
    else {
      
#line 3641 
      ldv_35_ldv_param_1_4 = ldv_xmalloc_unknown_size(0UL);
      
#line 3646 
      ldv_35_seq_file->index = *ldv_35_index;
      
#line 3648 
      ldv_emg_wrapper_l2t_seq_stop_5(ldv_35_seq_file,ldv_35_ldv_param_1_4);
      
#line 3650 
      ldv_35_seq_file->index = *ldv_35_index;
      
#line 3654 
      ldv_free(ldv_35_ldv_param_1_4);
      
#line 3661 
      goto ldv_outer_loop_35;
    }
  }
  else {
    long tmp_5;
    
#line 3666 
    tmp_5 = ldv_is_err_or_null((void const *)ldv_35_ret);
    
#line 3666 
    __VERIFIER_assume((int)tmp_5);
    
#line 3670 
    ldv_35_ldv_param_1_4 = ldv_xmalloc_unknown_size(0UL);
    
#line 3675 
    ldv_35_seq_file->index = *ldv_35_index;
    
#line 3677 
    ldv_emg_wrapper_l2t_seq_stop_5(ldv_35_seq_file,ldv_35_ldv_param_1_4);
    
#line 3679 
    ldv_35_seq_file->index = *ldv_35_index;
    
#line 3683 
    ldv_free(ldv_35_ldv_param_1_4);
    
#line 3690 
    goto ldv_outer_loop_35;
  }
  
#line 3693 
  __retres = (void *)0;
  return_label: 
#line 3693 
                return __retres;
}


#line 3698  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_traverse_kernel_items_scenario_36(void *arg0)
{
  void *__retres;
  void *ldv_36_ldv_param_1_2;
  long long *ldv_36_index;
  struct seq_file *ldv_36_seq_file;
  void *ldv_36_ldv_param_1_3;
  void *ldv_36_ldv_param_1_4;
  int tmp_2;
  int tmp_6;
  
#line 3704 
  struct seq_operations *ldv_36_ops = ldv_emg_alias_devlog_seq_ops_6;
  
#line 3705 
  int ldv_36_show_ret = ldv_undef_int();
  
#line 3708 
  void *ldv_36_ret = ldv_undef_ptr();
  
#line 3710 
  struct ldv_struct_traverse_kernel_items_scenario_28 *data = (struct ldv_struct_traverse_kernel_items_scenario_28 *)arg0;
  
#line 3714 
  ldv_36_show_ret = ldv_undef_int();
  
#line 3717 
  if (data != (struct ldv_struct_traverse_kernel_items_scenario_28 *)0) {
    
#line 3718 
    ldv_36_seq_file = data->arg0;
    
#line 3719 
    ldv_36_ops = data->arg1;
    
#line 3720 
    ldv_free((void *)data);
  }
  else ;
  
#line 3725 
  ldv_36_index = (long long *)ldv_xmalloc_unknown_size(0UL);
  
#line 3732 
  goto ldv_outer_loop_36;
  
#line 3734 
  __retres = (void *)0;
  
#line 3734 
  goto return_label;
  ldv_outer_loop_36: 
#line 3737 
  ;
  
#line 3740 
  tmp_2 = ldv_undef_int();
  
#line 3740 
  if (tmp_2 != 0) {
    
#line 3743 
    *ldv_36_index = 0LL;
    
#line 3745 
    ldv_36_ret = ldv_emg_wrapper_devlog_start_2(ldv_36_seq_file,ldv_36_index);
    
#line 3752 
    goto ldv_inner_loop_36;
  }
  else {
    
#line 3756 
    ldv_free((void *)ldv_36_index);
    
#line 3764 
    __retres = (void *)0;
    
#line 3764 
    goto return_label;
  }
  
#line 3767 
  __retres = (void *)0;
  
#line 3767 
  goto return_label;
  ldv_inner_loop_36: 
#line 3770 
  ;
  
#line 3773 
  tmp_6 = ldv_undef_int();
  
#line 3773 
  if (tmp_6 != 0) {
    long tmp_3;
    int tmp_4;
    
#line 3775 
    tmp_3 = ldv_is_err_or_null((void const *)ldv_36_ret);
    
#line 3775 
    __VERIFIER_assume(tmp_3 == 0L);
    
#line 3779 
    ldv_36_ldv_param_1_3 = ldv_xmalloc_unknown_size(0UL);
    
#line 3784 
    ldv_36_show_ret = ldv_emg_wrapper_devlog_show_4(ldv_36_seq_file,ldv_36_ldv_param_1_3);
    
#line 3788 
    ldv_free(ldv_36_ldv_param_1_3);
    
#line 3791 
    tmp_4 = ldv_undef_int();
    
#line 3791 
    if (tmp_4 != 0) {
      
#line 3793 
      __VERIFIER_assume(ldv_36_show_ret >= 0);
      
#line 3797 
      ldv_36_ldv_param_1_2 = ldv_xmalloc_unknown_size(0UL);
      
#line 3802 
      ldv_36_ret = ldv_emg_wrapper_devlog_next_3(ldv_36_seq_file,ldv_36_ldv_param_1_2,ldv_36_index);
      
#line 3806 
      ldv_free(ldv_36_ldv_param_1_2);
      
#line 3813 
      goto ldv_inner_loop_36;
    }
    else {
      
#line 3817 
      ldv_36_ldv_param_1_4 = ldv_xmalloc_unknown_size(0UL);
      
#line 3822 
      ldv_36_seq_file->index = *ldv_36_index;
      
#line 3824 
      ldv_emg_wrapper_devlog_stop_5(ldv_36_seq_file,ldv_36_ldv_param_1_4);
      
#line 3826 
      ldv_36_seq_file->index = *ldv_36_index;
      
#line 3830 
      ldv_free(ldv_36_ldv_param_1_4);
      
#line 3837 
      goto ldv_outer_loop_36;
    }
  }
  else {
    long tmp_5;
    
#line 3842 
    tmp_5 = ldv_is_err_or_null((void const *)ldv_36_ret);
    
#line 3842 
    __VERIFIER_assume((int)tmp_5);
    
#line 3846 
    ldv_36_ldv_param_1_4 = ldv_xmalloc_unknown_size(0UL);
    
#line 3851 
    ldv_36_seq_file->index = *ldv_36_index;
    
#line 3853 
    ldv_emg_wrapper_devlog_stop_5(ldv_36_seq_file,ldv_36_ldv_param_1_4);
    
#line 3855 
    ldv_36_seq_file->index = *ldv_36_index;
    
#line 3859 
    ldv_free(ldv_36_ldv_param_1_4);
    
#line 3866 
    goto ldv_outer_loop_36;
  }
  
#line 3869 
  __retres = (void *)0;
  return_label: 
#line 3869 
                return __retres;
}


#line 3874  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_25(void *arg0)
{
  void *__retres;
  struct file *ldv_25_resource_1;
  int ldv_25_ldv_param_2_3;
  long long ldv_25_ldv_param_1_2;
  char *ldv_25_ldv_param_1_4;
  struct inode *ldv_25_resource_0;
  unsigned long ldv_25_size_cnt;
  long long *ldv_25_ldv_param_3_5;
  char *ldv_25_ldv_param_1_6;
  long long *ldv_25_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 3885 
  struct file_operations *ldv_25_container = ldv_emg_alias_tp_la_fops_2;
  
#line 3886 
  int ldv_25_ret = ldv_undef_int();
  
#line 3889 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 3893 
  ldv_25_ret = ldv_undef_int();
  
#line 3896 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 3897 
    ldv_25_container = data->arg0;
    
#line 3898 
    ldv_free((void *)data);
  }
  else ;
  
#line 3903 
  ldv_25_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 3904 
  tmp_1 = ldv_undef_int();
  
#line 3904 
  ldv_25_size_cnt = (unsigned long)tmp_1;
  
#line 3911 
  goto ldv_main_25;
  
#line 3913 
  __retres = (void *)0;
  
#line 3913 
  goto return_label;
  ldv_main_25: 
#line 3916 
  ;
  
#line 3919 
  tmp_3 = ldv_undef_int();
  
#line 3919 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 3922 
    ldv_25_ret = ldv_emg_wrapper_tp_la_open_4(ldv_25_resource_0,ldv_25_resource_1);
    
#line 3924 
    ldv_25_ret = ldv_filter_err_code(ldv_25_ret);
    
#line 3927 
    tmp_2 = ldv_undef_int();
    
#line 3927 
    if (tmp_2 != 0) {
      
#line 3929 
      __VERIFIER_assume(ldv_25_ret == 0);
      
#line 3936 
      goto ldv_call_25;
    }
    else {
      
#line 3940 
      __VERIFIER_assume(ldv_25_ret != 0);
      
#line 3947 
      goto ldv_main_25;
    }
  }
  else {
    
#line 3952 
    ldv_free((void *)ldv_25_resource_0);
    
#line 3960 
    __retres = (void *)0;
    
#line 3960 
    goto return_label;
  }
  
#line 3963 
  __retres = (void *)0;
  
#line 3963 
  goto return_label;
  ldv_call_25: 
#line 3966 
  ;
  
#line 3969 
  tmp_4 = ldv_undef_int();
  
#line 3969 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 3970 
    ;
    
#line 3972 
    ldv_25_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 3973 
    ldv_25_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 3982 
    __VERIFIER_assume(ldv_25_size_cnt <= 2147479552UL);
    
#line 3984 
    ldv_emg_wrapper_tp_la_write_3(ldv_25_resource_1,ldv_25_ldv_param_1_6,ldv_25_size_cnt,ldv_25_ldv_param_3_7);
    
#line 3988 
    ldv_free((void *)ldv_25_ldv_param_1_6);
    
#line 3989 
    ldv_free((void *)ldv_25_ldv_param_3_7);
    
#line 3996 
    goto ldv_call_25;
    case 2: 
#line 3999 
    ;
    
#line 4002 
    seq_release_private(ldv_25_resource_0,ldv_25_resource_1);
    
#line 4009 
    goto ldv_main_25;
    case 3: 
#line 4012 
    ;
    
#line 4016 
    tmp_9 = ldv_undef_int();
    
#line 4016 
    if (tmp_9 != 0) 
#line 4019 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_25_resource_1,ldv_25_ldv_param_1_2,ldv_25_ldv_param_2_3);
    else {
      
#line 4025 
      ldv_25_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 4026 
      ldv_25_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 4031 
      (*ldv_emg_alias_seq_read_4)(ldv_25_resource_1,ldv_25_ldv_param_1_4,ldv_25_size_cnt,ldv_25_ldv_param_3_5);
      
#line 4035 
      ldv_free((void *)ldv_25_ldv_param_1_4);
      
#line 4036 
      ldv_free((void *)ldv_25_ldv_param_3_5);
    }
    
#line 4040 
    goto ldv_46359;
    default: 
#line 4042 
    ;
    
#line 4042 
    __VERIFIER_assume(0);
  }
  ldv_46359: 
#line 4051 
  ;
  
#line 4051 
  goto ldv_call_25;
  
#line 4053 
  __retres = (void *)0;
  return_label: 
#line 4053 
                return __retres;
}


#line 4058  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_47(void *arg0)
{
  void *__retres;
  struct file *ldv_47_resource_1;
  int ldv_47_ldv_param_2_3;
  long long ldv_47_ldv_param_1_2;
  char *ldv_47_ldv_param_1_4;
  struct inode *ldv_47_resource_0;
  unsigned long ldv_47_size_cnt;
  long long *ldv_47_ldv_param_3_5;
  char *ldv_47_ldv_param_1_6;
  long long *ldv_47_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 4069 
  struct file_operations *ldv_47_container = ldv_emg_alias_mem_debugfs_fops_2;
  
#line 4070 
  int ldv_47_ret = ldv_undef_int();
  
#line 4073 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 4077 
  ldv_47_ret = ldv_undef_int();
  
#line 4080 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 4081 
    ldv_47_container = data->arg0;
    
#line 4082 
    ldv_free((void *)data);
  }
  else ;
  
#line 4087 
  ldv_47_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 4088 
  tmp_1 = ldv_undef_int();
  
#line 4088 
  ldv_47_size_cnt = (unsigned long)tmp_1;
  
#line 4095 
  goto ldv_main_47;
  
#line 4097 
  __retres = (void *)0;
  
#line 4097 
  goto return_label;
  ldv_main_47: 
#line 4100 
  ;
  
#line 4103 
  tmp_3 = ldv_undef_int();
  
#line 4103 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 4106 
    ldv_47_ret = (*ldv_emg_alias_simple_open_5)(ldv_47_resource_0,ldv_47_resource_1);
    
#line 4108 
    ldv_47_ret = ldv_filter_err_code(ldv_47_ret);
    
#line 4111 
    tmp_2 = ldv_undef_int();
    
#line 4111 
    if (tmp_2 != 0) {
      
#line 4113 
      __VERIFIER_assume(ldv_47_ret == 0);
      
#line 4120 
      goto ldv_call_47;
    }
    else {
      
#line 4124 
      __VERIFIER_assume(ldv_47_ret != 0);
      
#line 4131 
      goto ldv_main_47;
    }
  }
  else {
    
#line 4136 
    ldv_free((void *)ldv_47_resource_0);
    
#line 4144 
    __retres = (void *)0;
    
#line 4144 
    goto return_label;
  }
  
#line 4147 
  __retres = (void *)0;
  
#line 4147 
  goto return_label;
  ldv_call_47: 
#line 4150 
  ;
  
#line 4153 
  tmp_4 = ldv_undef_int();
  
#line 4153 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 4154 
    ;
    
#line 4156 
    ldv_47_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 4157 
    ldv_47_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 4161 
    if (ldv_47_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 4167 
      __VERIFIER_assume(ldv_47_size_cnt <= 2147479552UL);
      
#line 4169 
      (*(ldv_47_container->write))(ldv_47_resource_1,(char const *)ldv_47_ldv_param_1_6,ldv_47_size_cnt,ldv_47_ldv_param_3_7);
    }
    else ;
    
#line 4174 
    ldv_free((void *)ldv_47_ldv_param_3_7);
    
#line 4175 
    ldv_free((void *)ldv_47_ldv_param_1_6);
    
#line 4182 
    goto ldv_call_47;
    case 2: 
#line 4185 
    ;
    
#line 4187 
    if (ldv_47_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 4189 
      (*(ldv_47_container->release))(ldv_47_resource_0,ldv_47_resource_1); else ;
    
#line 4197 
    goto ldv_main_47;
    case 3: 
#line 4200 
    ;
    
#line 4204 
    tmp_9 = ldv_undef_int();
    
#line 4204 
    if (tmp_9 != 0) 
#line 4207 
                    (*ldv_emg_alias_default_llseek_3)(ldv_47_resource_1,ldv_47_ldv_param_1_2,ldv_47_ldv_param_2_3);
    else {
      
#line 4213 
      ldv_47_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 4214 
      ldv_47_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 4219 
      ldv_emg_wrapper_mem_read_4(ldv_47_resource_1,ldv_47_ldv_param_1_4,ldv_47_size_cnt,ldv_47_ldv_param_3_5);
      
#line 4223 
      ldv_free((void *)ldv_47_ldv_param_3_5);
      
#line 4224 
      ldv_free((void *)ldv_47_ldv_param_1_4);
    }
    
#line 4228 
    goto ldv_46381;
    default: 
#line 4230 
    ;
    
#line 4230 
    __VERIFIER_assume(0);
  }
  ldv_46381: 
#line 4239 
  ;
  
#line 4239 
  goto ldv_call_47;
  
#line 4241 
  __retres = (void *)0;
  return_label: 
#line 4241 
                return __retres;
}


#line 4246  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_49(void *arg0)
{
  void *__retres;
  struct file *ldv_49_resource_1;
  int ldv_49_ldv_param_2_3;
  long long ldv_49_ldv_param_1_2;
  char *ldv_49_ldv_param_1_4;
  struct inode *ldv_49_resource_0;
  unsigned long ldv_49_size_cnt;
  long long *ldv_49_ldv_param_3_5;
  char *ldv_49_ldv_param_1_6;
  long long *ldv_49_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 4257 
  struct file_operations *ldv_49_container = ldv_emg_alias_rss_vf_config_debugfs_fops_2;
  
#line 4258 
  int ldv_49_ret = ldv_undef_int();
  
#line 4261 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 4265 
  ldv_49_ret = ldv_undef_int();
  
#line 4268 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 4269 
    ldv_49_container = data->arg0;
    
#line 4270 
    ldv_free((void *)data);
  }
  else ;
  
#line 4275 
  ldv_49_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 4276 
  tmp_1 = ldv_undef_int();
  
#line 4276 
  ldv_49_size_cnt = (unsigned long)tmp_1;
  
#line 4283 
  goto ldv_main_49;
  
#line 4285 
  __retres = (void *)0;
  
#line 4285 
  goto return_label;
  ldv_main_49: 
#line 4288 
  ;
  
#line 4291 
  tmp_3 = ldv_undef_int();
  
#line 4291 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 4294 
    ldv_49_ret = ldv_emg_wrapper_rss_vf_config_open_3(ldv_49_resource_0,ldv_49_resource_1);
    
#line 4296 
    ldv_49_ret = ldv_filter_err_code(ldv_49_ret);
    
#line 4299 
    tmp_2 = ldv_undef_int();
    
#line 4299 
    if (tmp_2 != 0) {
      
#line 4301 
      __VERIFIER_assume(ldv_49_ret == 0);
      
#line 4308 
      goto ldv_call_49;
    }
    else {
      
#line 4312 
      __VERIFIER_assume(ldv_49_ret != 0);
      
#line 4319 
      goto ldv_main_49;
    }
  }
  else {
    
#line 4324 
    ldv_free((void *)ldv_49_resource_0);
    
#line 4332 
    __retres = (void *)0;
    
#line 4332 
    goto return_label;
  }
  
#line 4335 
  __retres = (void *)0;
  
#line 4335 
  goto return_label;
  ldv_call_49: 
#line 4338 
  ;
  
#line 4341 
  tmp_4 = ldv_undef_int();
  
#line 4341 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 4342 
    ;
    
#line 4344 
    ldv_49_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 4345 
    ldv_49_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 4349 
    if (ldv_49_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 4355 
      __VERIFIER_assume(ldv_49_size_cnt <= 2147479552UL);
      
#line 4357 
      (*(ldv_49_container->write))(ldv_49_resource_1,(char const *)ldv_49_ldv_param_1_6,ldv_49_size_cnt,ldv_49_ldv_param_3_7);
    }
    else ;
    
#line 4362 
    ldv_free((void *)ldv_49_ldv_param_3_7);
    
#line 4363 
    ldv_free((void *)ldv_49_ldv_param_1_6);
    
#line 4370 
    goto ldv_call_49;
    case 2: 
#line 4373 
    ;
    
#line 4376 
    seq_release_private(ldv_49_resource_0,ldv_49_resource_1);
    
#line 4383 
    goto ldv_main_49;
    case 3: 
#line 4386 
    ;
    
#line 4390 
    tmp_9 = ldv_undef_int();
    
#line 4390 
    if (tmp_9 != 0) 
#line 4393 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_49_resource_1,ldv_49_ldv_param_1_2,ldv_49_ldv_param_2_3);
    else {
      
#line 4399 
      ldv_49_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 4400 
      ldv_49_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 4405 
      (*ldv_emg_alias_seq_read_4)(ldv_49_resource_1,ldv_49_ldv_param_1_4,ldv_49_size_cnt,ldv_49_ldv_param_3_5);
      
#line 4409 
      ldv_free((void *)ldv_49_ldv_param_1_4);
      
#line 4410 
      ldv_free((void *)ldv_49_ldv_param_3_5);
    }
    
#line 4414 
    goto ldv_46403;
    default: 
#line 4416 
    ;
    
#line 4416 
    __VERIFIER_assume(0);
  }
  ldv_46403: 
#line 4425 
  ;
  
#line 4425 
  goto ldv_call_49;
  
#line 4427 
  __retres = (void *)0;
  return_label: 
#line 4427 
                return __retres;
}


#line 4432  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_6_1(struct file_operations *arg0)
{
  int ret;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_19;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_20;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_23;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_24;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_25;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_26;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_27;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_29;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_31;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_32;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_33;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_34;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_37;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_38;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_39;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_40;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_41;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_42;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_44;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_45;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_46;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_47;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_48;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_49;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_52;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_53;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_55;
  int tmp;
  
#line 4461 
  tmp = ldv_undef_int();
  
#line 4461 
  switch (tmp) {
    case 0: 
#line 4462 
    ;
    
#line 4463 
    ret = pthread_join(ldv_thread_19,(void **)0);
    
#line 4464 
    __VERIFIER_assume(ret == 0);
    
#line 4465 
    goto ldv_46437;
    case 1: 
#line 4467 
    ;
    
#line 4468 
    ret = pthread_join(ldv_thread_20,(void **)0);
    
#line 4469 
    __VERIFIER_assume(ret == 0);
    
#line 4470 
    goto ldv_46437;
    case 2: 
#line 4472 
    ;
    
#line 4473 
    ret = pthread_join(ldv_thread_23,(void **)0);
    
#line 4474 
    __VERIFIER_assume(ret == 0);
    
#line 4475 
    goto ldv_46437;
    case 3: 
#line 4477 
    ;
    
#line 4478 
    ret = pthread_join(ldv_thread_24,(void **)0);
    
#line 4479 
    __VERIFIER_assume(ret == 0);
    
#line 4480 
    goto ldv_46437;
    case 4: 
#line 4482 
    ;
    
#line 4483 
    ret = pthread_join(ldv_thread_25,(void **)0);
    
#line 4484 
    __VERIFIER_assume(ret == 0);
    
#line 4485 
    goto ldv_46437;
    case 5: 
#line 4487 
    ;
    
#line 4488 
    ret = pthread_join(ldv_thread_26,(void **)0);
    
#line 4489 
    __VERIFIER_assume(ret == 0);
    
#line 4490 
    goto ldv_46437;
    case 6: 
#line 4492 
    ;
    
#line 4493 
    ret = pthread_join(ldv_thread_27,(void **)0);
    
#line 4494 
    __VERIFIER_assume(ret == 0);
    
#line 4495 
    goto ldv_46437;
    case 7: 
#line 4497 
    ;
    
#line 4498 
    ret = pthread_join(ldv_thread_29,(void **)0);
    
#line 4499 
    __VERIFIER_assume(ret == 0);
    
#line 4500 
    goto ldv_46437;
    case 8: 
#line 4502 
    ;
    
#line 4503 
    ret = pthread_join(ldv_thread_31,(void **)0);
    
#line 4504 
    __VERIFIER_assume(ret == 0);
    
#line 4505 
    goto ldv_46437;
    case 9: 
#line 4507 
    ;
    
#line 4508 
    ret = pthread_join(ldv_thread_32,(void **)0);
    
#line 4509 
    __VERIFIER_assume(ret == 0);
    
#line 4510 
    goto ldv_46437;
    case 10: 
#line 4512 
    ;
    
#line 4513 
    ret = pthread_join(ldv_thread_33,(void **)0);
    
#line 4514 
    __VERIFIER_assume(ret == 0);
    
#line 4515 
    goto ldv_46437;
    case 11: 
#line 4517 
    ;
    
#line 4518 
    ret = pthread_join(ldv_thread_34,(void **)0);
    
#line 4519 
    __VERIFIER_assume(ret == 0);
    
#line 4520 
    goto ldv_46437;
    case 12: 
#line 4522 
    ;
    
#line 4523 
    ret = pthread_join(ldv_thread_37,(void **)0);
    
#line 4524 
    __VERIFIER_assume(ret == 0);
    
#line 4525 
    goto ldv_46437;
    case 13: 
#line 4527 
    ;
    
#line 4528 
    ret = pthread_join(ldv_thread_38,(void **)0);
    
#line 4529 
    __VERIFIER_assume(ret == 0);
    
#line 4530 
    goto ldv_46437;
    case 14: 
#line 4532 
    ;
    
#line 4533 
    ret = pthread_join(ldv_thread_39,(void **)0);
    
#line 4534 
    __VERIFIER_assume(ret == 0);
    
#line 4535 
    goto ldv_46437;
    case 15: 
#line 4537 
    ;
    
#line 4538 
    ret = pthread_join(ldv_thread_40,(void **)0);
    
#line 4539 
    __VERIFIER_assume(ret == 0);
    
#line 4540 
    goto ldv_46437;
    case 16: 
#line 4542 
    ;
    
#line 4543 
    ret = pthread_join(ldv_thread_41,(void **)0);
    
#line 4544 
    __VERIFIER_assume(ret == 0);
    
#line 4545 
    goto ldv_46437;
    case 17: 
#line 4547 
    ;
    
#line 4548 
    ret = pthread_join(ldv_thread_42,(void **)0);
    
#line 4549 
    __VERIFIER_assume(ret == 0);
    
#line 4550 
    goto ldv_46437;
    case 18: 
#line 4552 
    ;
    
#line 4553 
    ret = pthread_join(ldv_thread_44,(void **)0);
    
#line 4554 
    __VERIFIER_assume(ret == 0);
    
#line 4555 
    goto ldv_46437;
    case 19: 
#line 4557 
    ;
    
#line 4558 
    ret = pthread_join(ldv_thread_45,(void **)0);
    
#line 4559 
    __VERIFIER_assume(ret == 0);
    
#line 4560 
    goto ldv_46437;
    case 20: 
#line 4562 
    ;
    
#line 4563 
    ret = pthread_join(ldv_thread_46,(void **)0);
    
#line 4564 
    __VERIFIER_assume(ret == 0);
    
#line 4565 
    goto ldv_46437;
    case 21: 
#line 4567 
    ;
    
#line 4568 
    ret = pthread_join(ldv_thread_47,(void **)0);
    
#line 4569 
    __VERIFIER_assume(ret == 0);
    
#line 4570 
    goto ldv_46437;
    case 22: 
#line 4572 
    ;
    
#line 4573 
    ret = pthread_join(ldv_thread_48,(void **)0);
    
#line 4574 
    __VERIFIER_assume(ret == 0);
    
#line 4575 
    goto ldv_46437;
    case 23: 
#line 4577 
    ;
    
#line 4578 
    ret = pthread_join(ldv_thread_49,(void **)0);
    
#line 4579 
    __VERIFIER_assume(ret == 0);
    
#line 4580 
    goto ldv_46437;
    case 24: 
#line 4582 
    ;
    
#line 4583 
    ret = pthread_join(ldv_thread_52,(void **)0);
    
#line 4584 
    __VERIFIER_assume(ret == 0);
    
#line 4585 
    goto ldv_46437;
    case 25: 
#line 4587 
    ;
    
#line 4588 
    ret = pthread_join(ldv_thread_53,(void **)0);
    
#line 4589 
    __VERIFIER_assume(ret == 0);
    
#line 4590 
    goto ldv_46437;
    case 26: 
#line 4592 
    ;
    
#line 4593 
    ret = pthread_join(ldv_thread_55,(void **)0);
    
#line 4594 
    __VERIFIER_assume(ret == 0);
    
#line 4595 
    goto ldv_46437;
    default: 
#line 4597 
    ;
    
#line 4597 
    __VERIFIER_assume(0);
  }
  ldv_46437: 
#line 4598 
  ;
  
#line 4599 
  return;
}


#line 4603  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_register_netdev(struct net_device *arg0)
{
  int __retres;
  struct net_device *ldv_12_netdev;
  int tmp_3;
  
#line 4607 
  int ldv_12_ret = ldv_undef_int();
  
#line 4610 
  ldv_12_ret = ldv_undef_int();
  
#line 4613 
  tmp_3 = ldv_undef_int();
  
#line 4613 
  if (tmp_3 != 0) {
    int tmp_1;
    
#line 4615 
    ldv_12_netdev = arg0;
    
#line 4620 
    ldv_12_ret = ldv_emg_wrapper_cxgb_open_2(ldv_12_netdev);
    
#line 4623 
    tmp_1 = ldv_undef_int();
    
#line 4623 
    if (tmp_1 != 0) {
      
#line 4625 
      __VERIFIER_assume(ldv_12_ret == 0);
      
#line 4629 
      ldv_dispatch_register_12_4(ldv_12_netdev);
      
#line 4633 
      __retres = 0;
      
#line 4633 
      goto return_label;
    }
    else {
      int tmp_0;
      
#line 4640 
      __VERIFIER_assume(ldv_12_ret != 0);
      
#line 4641 
      ldv_failed_register_netdev();
      
#line 4642 
      tmp_0 = ldv_undef_int_negative();
      
#line 4642 
      __retres = tmp_0;
      
#line 4642 
      goto return_label;
    }
  }
  else {
    int tmp_2;
    
#line 4650 
    ldv_failed_register_netdev();
    
#line 4651 
    tmp_2 = ldv_undef_int_negative();
    
#line 4651 
    __retres = tmp_2;
    
#line 4651 
    goto return_label;
  }
  return_label: 
#line 4613 
                return __retres;
}


#line 4661  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_52(void *arg0)
{
  void *__retres;
  struct file *ldv_52_resource_1;
  int ldv_52_ldv_param_2_3;
  long long ldv_52_ldv_param_1_2;
  char *ldv_52_ldv_param_1_4;
  struct inode *ldv_52_resource_0;
  unsigned long ldv_52_size_cnt;
  long long *ldv_52_ldv_param_3_5;
  char *ldv_52_ldv_param_1_6;
  long long *ldv_52_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 4672 
  struct file_operations *ldv_52_container = ldv_emg_alias_cctrl_tbl_debugfs_fops_2;
  
#line 4673 
  int ldv_52_ret = ldv_undef_int();
  
#line 4676 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 4680 
  ldv_52_ret = ldv_undef_int();
  
#line 4683 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 4684 
    ldv_52_container = data->arg0;
    
#line 4685 
    ldv_free((void *)data);
  }
  else ;
  
#line 4690 
  ldv_52_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 4691 
  tmp_1 = ldv_undef_int();
  
#line 4691 
  ldv_52_size_cnt = (unsigned long)tmp_1;
  
#line 4698 
  goto ldv_main_52;
  
#line 4700 
  __retres = (void *)0;
  
#line 4700 
  goto return_label;
  ldv_main_52: 
#line 4703 
  ;
  
#line 4706 
  tmp_3 = ldv_undef_int();
  
#line 4706 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 4709 
    ldv_52_ret = ldv_emg_wrapper_cctrl_tbl_open_6(ldv_52_resource_0,ldv_52_resource_1);
    
#line 4711 
    ldv_52_ret = ldv_filter_err_code(ldv_52_ret);
    
#line 4714 
    tmp_2 = ldv_undef_int();
    
#line 4714 
    if (tmp_2 != 0) {
      
#line 4716 
      __VERIFIER_assume(ldv_52_ret == 0);
      
#line 4723 
      goto ldv_call_52;
    }
    else {
      
#line 4727 
      __VERIFIER_assume(ldv_52_ret != 0);
      
#line 4734 
      goto ldv_main_52;
    }
  }
  else {
    
#line 4739 
    ldv_free((void *)ldv_52_resource_0);
    
#line 4747 
    __retres = (void *)0;
    
#line 4747 
    goto return_label;
  }
  
#line 4750 
  __retres = (void *)0;
  
#line 4750 
  goto return_label;
  ldv_call_52: 
#line 4753 
  ;
  
#line 4756 
  tmp_4 = ldv_undef_int();
  
#line 4756 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 4757 
    ;
    
#line 4759 
    ldv_52_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 4760 
    ldv_52_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 4764 
    if (ldv_52_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 4770 
      __VERIFIER_assume(ldv_52_size_cnt <= 2147479552UL);
      
#line 4772 
      (*(ldv_52_container->write))(ldv_52_resource_1,(char const *)ldv_52_ldv_param_1_6,ldv_52_size_cnt,ldv_52_ldv_param_3_7);
    }
    else ;
    
#line 4777 
    ldv_free((void *)ldv_52_ldv_param_1_6);
    
#line 4778 
    ldv_free((void *)ldv_52_ldv_param_3_7);
    
#line 4785 
    goto ldv_call_52;
    case 2: 
#line 4788 
    ;
    
#line 4791 
    (*ldv_emg_alias_single_release_5)(ldv_52_resource_0,ldv_52_resource_1);
    
#line 4798 
    goto ldv_main_52;
    case 3: 
#line 4801 
    ;
    
#line 4805 
    tmp_9 = ldv_undef_int();
    
#line 4805 
    if (tmp_9 != 0) 
#line 4808 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_52_resource_1,ldv_52_ldv_param_1_2,ldv_52_ldv_param_2_3);
    else {
      
#line 4814 
      ldv_52_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 4815 
      ldv_52_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 4820 
      (*ldv_emg_alias_seq_read_4)(ldv_52_resource_1,ldv_52_ldv_param_1_4,ldv_52_size_cnt,ldv_52_ldv_param_3_5);
      
#line 4824 
      ldv_free((void *)ldv_52_ldv_param_3_5);
      
#line 4825 
      ldv_free((void *)ldv_52_ldv_param_1_4);
    }
    
#line 4829 
    goto ldv_46490;
    default: 
#line 4831 
    ;
    
#line 4831 
    __VERIFIER_assume(0);
  }
  ldv_46490: 
#line 4840 
  ;
  
#line 4840 
  goto ldv_call_52;
  
#line 4842 
  __retres = (void *)0;
  return_label: 
#line 4842 
                return __retres;
}


#line 4847  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_5_1(struct net_device *arg0)
{
  int ret;
  struct ldv_struct_random_allocationless_scenario_54 *cf_arg_54;
  int tmp;
  
#line 4850 
  tmp = ldv_undef_int();
  
#line 4850 
  switch (tmp) {
    case 0: 
#line 4851 
    ;
    
#line 4852 
    ret = pthread_join(ldv_thread_54,(void **)0);
    
#line 4853 
    __VERIFIER_assume(ret == 0);
    
#line 4854 
    goto ldv_46498;
    default: 
#line 4856 
    ;
    
#line 4856 
    __VERIFIER_assume(0);
  }
  ldv_46498: 
#line 4857 
  ;
  
#line 4858 
  return;
}


#line 4862  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_16_1(struct seq_file *arg0)
{
  int ret;
  struct ldv_struct_seq_release_private_16 *cf_arg_28;
  struct ldv_struct_seq_release_private_16 *cf_arg_50;
  struct ldv_struct_seq_release_private_16 *cf_arg_35;
  struct ldv_struct_seq_release_private_16 *cf_arg_36;
  struct ldv_struct_seq_release_private_16 *cf_arg_51;
  int tmp;
  
#line 4869 
  tmp = ldv_undef_int();
  
#line 4869 
  switch (tmp) {
    case 0: 
#line 4870 
    ;
    
#line 4871 
    ret = pthread_join(ldv_thread_28,(void **)0);
    
#line 4872 
    __VERIFIER_assume(ret == 0);
    
#line 4873 
    goto ldv_46510;
    case 1: 
#line 4875 
    ;
    
#line 4876 
    ret = pthread_join(ldv_thread_50,(void **)0);
    
#line 4877 
    __VERIFIER_assume(ret == 0);
    
#line 4878 
    goto ldv_46510;
    case 2: 
#line 4880 
    ;
    
#line 4881 
    ret = pthread_join(ldv_thread_35,(void **)0);
    
#line 4882 
    __VERIFIER_assume(ret == 0);
    
#line 4883 
    goto ldv_46510;
    case 3: 
#line 4885 
    ;
    
#line 4886 
    ret = pthread_join(ldv_thread_36,(void **)0);
    
#line 4887 
    __VERIFIER_assume(ret == 0);
    
#line 4888 
    goto ldv_46510;
    case 4: 
#line 4890 
    ;
    
#line 4891 
    ret = pthread_join(ldv_thread_51,(void **)0);
    
#line 4892 
    __VERIFIER_assume(ret == 0);
    
#line 4893 
    goto ldv_46510;
    default: 
#line 4895 
    ;
    
#line 4895 
    __VERIFIER_assume(0);
  }
  ldv_46510: 
#line 4896 
  ;
  
#line 4897 
  return;
}


#line 4901  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_26(void *arg0)
{
  void *__retres;
  struct file *ldv_26_resource_1;
  int ldv_26_ldv_param_2_3;
  long long ldv_26_ldv_param_1_2;
  char *ldv_26_ldv_param_1_4;
  struct inode *ldv_26_resource_0;
  unsigned long ldv_26_size_cnt;
  long long *ldv_26_ldv_param_3_5;
  char *ldv_26_ldv_param_1_6;
  long long *ldv_26_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 4912 
  struct file_operations *ldv_26_container = ldv_emg_alias_cim_ma_la_fops_2;
  
#line 4913 
  int ldv_26_ret = ldv_undef_int();
  
#line 4916 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 4920 
  ldv_26_ret = ldv_undef_int();
  
#line 4923 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 4924 
    ldv_26_container = data->arg0;
    
#line 4925 
    ldv_free((void *)data);
  }
  else ;
  
#line 4930 
  ldv_26_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 4931 
  tmp_1 = ldv_undef_int();
  
#line 4931 
  ldv_26_size_cnt = (unsigned long)tmp_1;
  
#line 4938 
  goto ldv_main_26;
  
#line 4940 
  __retres = (void *)0;
  
#line 4940 
  goto return_label;
  ldv_main_26: 
#line 4943 
  ;
  
#line 4946 
  tmp_3 = ldv_undef_int();
  
#line 4946 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 4949 
    ldv_26_ret = ldv_emg_wrapper_cim_ma_la_open_3(ldv_26_resource_0,ldv_26_resource_1);
    
#line 4951 
    ldv_26_ret = ldv_filter_err_code(ldv_26_ret);
    
#line 4954 
    tmp_2 = ldv_undef_int();
    
#line 4954 
    if (tmp_2 != 0) {
      
#line 4956 
      __VERIFIER_assume(ldv_26_ret == 0);
      
#line 4963 
      goto ldv_call_26;
    }
    else {
      
#line 4967 
      __VERIFIER_assume(ldv_26_ret != 0);
      
#line 4974 
      goto ldv_main_26;
    }
  }
  else {
    
#line 4979 
    ldv_free((void *)ldv_26_resource_0);
    
#line 4987 
    __retres = (void *)0;
    
#line 4987 
    goto return_label;
  }
  
#line 4990 
  __retres = (void *)0;
  
#line 4990 
  goto return_label;
  ldv_call_26: 
#line 4993 
  ;
  
#line 4996 
  tmp_4 = ldv_undef_int();
  
#line 4996 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 4997 
    ;
    
#line 4999 
    ldv_26_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 5000 
    ldv_26_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 5004 
    if (ldv_26_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 5010 
      __VERIFIER_assume(ldv_26_size_cnt <= 2147479552UL);
      
#line 5012 
      (*(ldv_26_container->write))(ldv_26_resource_1,(char const *)ldv_26_ldv_param_1_6,ldv_26_size_cnt,ldv_26_ldv_param_3_7);
    }
    else ;
    
#line 5017 
    ldv_free((void *)ldv_26_ldv_param_3_7);
    
#line 5018 
    ldv_free((void *)ldv_26_ldv_param_1_6);
    
#line 5025 
    goto ldv_call_26;
    case 2: 
#line 5028 
    ;
    
#line 5031 
    seq_release_private(ldv_26_resource_0,ldv_26_resource_1);
    
#line 5038 
    goto ldv_main_26;
    case 3: 
#line 5041 
    ;
    
#line 5045 
    tmp_9 = ldv_undef_int();
    
#line 5045 
    if (tmp_9 != 0) 
#line 5048 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_26_resource_1,ldv_26_ldv_param_1_2,ldv_26_ldv_param_2_3);
    else {
      
#line 5054 
      ldv_26_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 5055 
      ldv_26_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 5060 
      (*ldv_emg_alias_seq_read_4)(ldv_26_resource_1,ldv_26_ldv_param_1_4,ldv_26_size_cnt,ldv_26_ldv_param_3_5);
      
#line 5064 
      ldv_free((void *)ldv_26_ldv_param_3_5);
      
#line 5065 
      ldv_free((void *)ldv_26_ldv_param_1_4);
    }
    
#line 5069 
    goto ldv_46536;
    default: 
#line 5071 
    ;
    
#line 5071 
    __VERIFIER_assume(0);
  }
  ldv_46536: 
#line 5080 
  ;
  
#line 5080 
  goto ldv_call_26;
  
#line 5082 
  __retres = (void *)0;
  return_label: 
#line 5082 
                return __retres;
}


#line 5087  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
struct dentry *ldv_emg_debugfs_create_file(char *arg0, unsigned short arg1, struct dentry *arg2, void *arg3, struct file_operations *arg4)
{
  struct dentry *__retres;
  struct dentry *ldv_17_dentry;
  struct file_operations *ldv_17_file_operations;
  int tmp_1;
  
#line 5095 
  tmp_1 = ldv_undef_int();
  
#line 5095 
  if (tmp_1 != 0) {
    
#line 5097 
    ldv_17_dentry = (struct dentry *)ldv_xmalloc_unknown_size(0UL);
    
#line 5098 
    ldv_17_file_operations = arg4;
    
#line 5102 
    ldv_dispatch_register_17_3(ldv_17_file_operations);
    
#line 5106 
    __retres = ldv_17_dentry;
    
#line 5106 
    goto return_label;
  }
  else {
    struct dentry *tmp_0;
    
#line 5113 
    tmp_0 = (struct dentry *)ERR_PTR(-19L);
    
#line 5113 
    __retres = tmp_0;
    
#line 5113 
    goto return_label;
  }
  return_label: 
#line 5095 
                return __retres;
}


#line 5123  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_tasklet_schedule(struct tasklet_struct *arg0)
{
  unsigned long ldv_18_ldv_param_0_2;
  struct tasklet_struct *ldv_18_tasklet_struct;
  
#line 5130 
  ldv_18_tasklet_struct = arg0;
  
#line 5137 
  if (ldv_18_tasklet_struct->count.counter == 0) 
#line 5139 
                                                 (*ldv_emg_alias_None_2)(ldv_18_ldv_param_0_2); else ;
  
#line 5147 
  goto return_label;
  return_label: 
#line 5149 
                return;
}


#line 5154  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_pci_scenario_21(void *arg0)
{
  void *__retres;
  struct pci_dev *ldv_21_resource_1;
  struct pci_device_id *ldv_21_ldv_param_1_2;
  struct pm_message ldv_21_resource_0;
  int tmp_2;
  int tmp_3;
  
#line 5159 
  struct pci_driver *ldv_21_container = ldv_emg_alias_cxgb4_driver_2;
  
#line 5160 
  int ldv_21_ret = ldv_undef_int();
  
#line 5163 
  struct ldv_struct_pci_scenario_21 *data = (struct ldv_struct_pci_scenario_21 *)arg0;
  
#line 5167 
  ldv_21_ret = ldv_undef_int();
  
#line 5170 
  if (data != (struct ldv_struct_pci_scenario_21 *)0) {
    
#line 5171 
    ldv_21_container = data->arg0;
    
#line 5172 
    ldv_free((void *)data);
  }
  else ;
  
#line 5183 
  goto ldv_main_21;
  
#line 5185 
  __retres = (void *)0;
  
#line 5185 
  goto return_label;
  ldv_main_21: 
#line 5188 
  ;
  
#line 5191 
  tmp_2 = ldv_undef_int();
  
#line 5191 
  if (tmp_2 != 0) {
    int tmp_1;
    
#line 5193 
    ldv_21_ldv_param_1_2 = (struct pci_device_id *)ldv_xmalloc_unknown_size(0UL);
    
#line 5198 
    ldv_pre_probe();
    
#line 5200 
    ldv_21_ret = ldv_emg_wrapper_init_one_3(ldv_21_resource_1,ldv_21_ldv_param_1_2);
    
#line 5202 
    ldv_21_ret = ldv_post_probe(ldv_21_ret);
    
#line 5206 
    ldv_free((void *)ldv_21_ldv_param_1_2);
    
#line 5209 
    tmp_1 = ldv_undef_int();
    
#line 5209 
    if (tmp_1 != 0) {
      
#line 5211 
      __VERIFIER_assume(ldv_21_ret == 0);
      
#line 5218 
      goto ldv_call_21;
    }
    else {
      
#line 5222 
      __VERIFIER_assume(ldv_21_ret != 0);
      
#line 5229 
      goto ldv_main_21;
    }
  }
  else {
    
#line 5241 
    __retres = (void *)0;
    
#line 5241 
    goto return_label;
  }
  
#line 5244 
  __retres = (void *)0;
  
#line 5244 
  goto return_label;
  ldv_call_21: 
#line 5247 
  ;
  
#line 5250 
  tmp_3 = ldv_undef_int();
  
#line 5250 
  switch (tmp_3) {
    case 1: 
#line 5251 
    ;
    
#line 5260 
    goto ldv_call_21;
    case 2: 
#line 5263 
    ;
    
#line 5265 
    if (ldv_21_container->suspend != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 5267 
      ldv_21_ret = (*(ldv_21_container->suspend))(ldv_21_resource_1,ldv_21_resource_0);
      
#line 5269 
      ldv_21_ret = ldv_filter_err_code(ldv_21_ret);
    }
    else 
#line 5271 
         ldv_21_ret = ldv_undef_int();
    
#line 5276 
    if (ldv_21_container->suspend_late != (int (*)(struct pci_dev *, pm_message_t ))0) {
      
#line 5278 
      ldv_21_ret = (*(ldv_21_container->suspend_late))(ldv_21_resource_1,ldv_21_resource_0);
      
#line 5280 
      ldv_21_ret = ldv_filter_err_code(ldv_21_ret);
    }
    else 
#line 5282 
         ldv_21_ret = ldv_undef_int();
    
#line 5287 
    if (ldv_21_container->resume_early != (int (*)(struct pci_dev *))0) 
      
#line 5289 
      (*(ldv_21_container->resume_early))(ldv_21_resource_1); else ;
    
#line 5294 
    if (ldv_21_container->resume != (int (*)(struct pci_dev *))0) 
#line 5296 
                                                                  (*(ldv_21_container->resume))(ldv_21_resource_1); else ;
    
#line 5304 
    goto ldv_call_21;
    case 3: 
#line 5307 
    ;
    
#line 5310 
    ldv_emg_wrapper_remove_one_2(ldv_21_resource_1);
    
#line 5315 
    ldv_emg_wrapper_remove_one_2(ldv_21_resource_1);
    
#line 5322 
    goto ldv_main_21;
    default: 
#line 5325 
    ;
    
#line 5325 
    __VERIFIER_assume(0);
  }
  
#line 5328 
  __retres = (void *)0;
  return_label: 
#line 5328 
                return __retres;
}


#line 5333  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_seq_release_private(struct inode *arg0, struct file *arg1)
{
  int __retres;
  struct seq_file *ldv_16_seq_file;
  struct file *ldv_16_file;
  
#line 5340 
  ldv_16_seq_file = (struct seq_file *)ldv_16_file->private_data;
  
#line 5341 
  ldv_free((void *)ldv_16_seq_file);
  
#line 5345 
  ldv_dispatch_deregister_16_1(ldv_16_seq_file);
  
#line 5346 
  ;
  
#line 5346 
  __retres = 0;
  
#line 5346 
  return __retres;
}


#line 5354  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_19(void *arg0)
{
  void *__retres;
  struct file *ldv_19_resource_1;
  int ldv_19_ldv_param_2_3;
  long long ldv_19_ldv_param_1_2;
  char *ldv_19_ldv_param_1_4;
  struct inode *ldv_19_resource_0;
  unsigned long ldv_19_size_cnt;
  long long *ldv_19_ldv_param_3_5;
  char *ldv_19_ldv_param_1_6;
  long long *ldv_19_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 5365 
  struct file_operations *ldv_19_container = ldv_emg_alias_tx_rate_debugfs_fops_2;
  
#line 5366 
  int ldv_19_ret = ldv_undef_int();
  
#line 5369 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 5373 
  ldv_19_ret = ldv_undef_int();
  
#line 5376 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 5377 
    ldv_19_container = data->arg0;
    
#line 5378 
    ldv_free((void *)data);
  }
  else ;
  
#line 5383 
  ldv_19_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 5384 
  tmp_1 = ldv_undef_int();
  
#line 5384 
  ldv_19_size_cnt = (unsigned long)tmp_1;
  
#line 5391 
  goto ldv_main_19;
  
#line 5393 
  __retres = (void *)0;
  
#line 5393 
  goto return_label;
  ldv_main_19: 
#line 5396 
  ;
  
#line 5399 
  tmp_3 = ldv_undef_int();
  
#line 5399 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 5402 
    ldv_19_ret = ldv_emg_wrapper_tx_rate_open_3(ldv_19_resource_0,ldv_19_resource_1);
    
#line 5404 
    ldv_19_ret = ldv_filter_err_code(ldv_19_ret);
    
#line 5407 
    tmp_2 = ldv_undef_int();
    
#line 5407 
    if (tmp_2 != 0) {
      
#line 5409 
      __VERIFIER_assume(ldv_19_ret == 0);
      
#line 5416 
      goto ldv_call_19;
    }
    else {
      
#line 5420 
      __VERIFIER_assume(ldv_19_ret != 0);
      
#line 5427 
      goto ldv_main_19;
    }
  }
  else {
    
#line 5432 
    ldv_free((void *)ldv_19_resource_0);
    
#line 5440 
    __retres = (void *)0;
    
#line 5440 
    goto return_label;
  }
  
#line 5443 
  __retres = (void *)0;
  
#line 5443 
  goto return_label;
  ldv_call_19: 
#line 5446 
  ;
  
#line 5449 
  tmp_4 = ldv_undef_int();
  
#line 5449 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 5450 
    ;
    
#line 5452 
    ldv_19_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 5453 
    ldv_19_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 5457 
    if (ldv_19_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 5463 
      __VERIFIER_assume(ldv_19_size_cnt <= 2147479552UL);
      
#line 5465 
      (*(ldv_19_container->write))(ldv_19_resource_1,(char const *)ldv_19_ldv_param_1_6,ldv_19_size_cnt,ldv_19_ldv_param_3_7);
    }
    else ;
    
#line 5470 
    ldv_free((void *)ldv_19_ldv_param_1_6);
    
#line 5471 
    ldv_free((void *)ldv_19_ldv_param_3_7);
    
#line 5478 
    goto ldv_call_19;
    case 2: 
#line 5481 
    ;
    
#line 5484 
    (*ldv_emg_alias_single_release_5)(ldv_19_resource_0,ldv_19_resource_1);
    
#line 5491 
    goto ldv_main_19;
    case 3: 
#line 5494 
    ;
    
#line 5498 
    tmp_9 = ldv_undef_int();
    
#line 5498 
    if (tmp_9 != 0) 
#line 5501 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_19_resource_1,ldv_19_ldv_param_1_2,ldv_19_ldv_param_2_3);
    else {
      
#line 5507 
      ldv_19_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 5508 
      ldv_19_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 5513 
      (*ldv_emg_alias_seq_read_4)(ldv_19_resource_1,ldv_19_ldv_param_1_4,ldv_19_size_cnt,ldv_19_ldv_param_3_5);
      
#line 5517 
      ldv_free((void *)ldv_19_ldv_param_1_4);
      
#line 5518 
      ldv_free((void *)ldv_19_ldv_param_3_5);
    }
    
#line 5522 
    goto ldv_46593;
    default: 
#line 5524 
    ;
    
#line 5524 
    __VERIFIER_assume(0);
  }
  ldv_46593: 
#line 5533 
  ;
  
#line 5533 
  goto ldv_call_19;
  
#line 5535 
  __retres = (void *)0;
  return_label: 
#line 5535 
                return __retres;
}


#line 5540  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
_Bool ldv_emg_queue_work(struct workqueue_struct *arg0, struct work_struct *arg1)
{
  _Bool __retres;
  struct work_struct *ldv_9_work_struct;
  int tmp;
  
#line 5547 
  tmp = ldv_undef_int();
  
#line 5547 
  if (tmp != 0) {
    
#line 5549 
    ldv_9_work_struct = arg1;
    
#line 5553 
    if (ldv_9_work_struct->func != (void (*)(struct work_struct *))0) 
      
#line 5555 
      (*(ldv_9_work_struct->func))(ldv_9_work_struct); else ;
    
#line 5560 
    __retres = (_Bool)1;
    
#line 5560 
    goto return_label;
  }
  else {
    
#line 5567 
    __retres = (_Bool)0;
    
#line 5567 
    goto return_label;
  }
  return_label: 
#line 5547 
                return __retres;
}


#line 5577  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
struct net_device *ldv_emg_alloc_etherdev_mqs(int arg0, unsigned int arg1, unsigned int arg2)
{
  struct net_device *__retres;
  struct net_device *ldv_4_netdev;
  int tmp_0;
  
#line 5584 
  tmp_0 = ldv_undef_int();
  
#line 5584 
  if (tmp_0 != 0) {
    
#line 5586 
    ldv_4_netdev = (struct net_device *)ldv_xmalloc_unknown_size(0UL);
    
#line 5590 
    __retres = ldv_4_netdev;
    
#line 5590 
    goto return_label;
  }
  else {
    
#line 5597 
    __retres = (struct net_device *)0;
    
#line 5597 
    goto return_label;
  }
  return_label: 
#line 5584 
                return __retres;
}


#line 5607  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_initialization_1(void *arg0)
{
  void *__retres;
  int ldv_1_ret;
  int tmp;
  
#line 5614 
  ldv_1_ret = ldv_emg_cxgb4_init_module();
  
#line 5615 
  ldv_1_ret = ldv_post_init(ldv_1_ret);
  
#line 5618 
  tmp = ldv_undef_int();
  
#line 5618 
  if (tmp != 0) {
    
#line 5620 
    __VERIFIER_assume(ldv_1_ret != 0);
    
#line 5624 
    __retres = (void *)0;
    
#line 5624 
    goto return_label;
  }
  else {
    
#line 5628 
    __VERIFIER_assume(ldv_1_ret == 0);
    
#line 5633 
    ldv_emg_cxgb4_cleanup_module();
    
#line 5637 
    __retres = (void *)0;
    
#line 5637 
    goto return_label;
  }
  
#line 5640 
  __retres = (void *)0;
  return_label: 
#line 5640 
                return __retres;
}


#line 5645  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_39(void *arg0)
{
  void *__retres;
  struct file *ldv_39_resource_1;
  int ldv_39_ldv_param_2_3;
  long long ldv_39_ldv_param_1_2;
  char *ldv_39_ldv_param_1_4;
  struct inode *ldv_39_resource_0;
  unsigned long ldv_39_size_cnt;
  long long *ldv_39_ldv_param_3_5;
  char *ldv_39_ldv_param_1_6;
  long long *ldv_39_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 5656 
  struct file_operations *ldv_39_container = ldv_emg_alias_pm_stats_debugfs_fops_2;
  
#line 5657 
  int ldv_39_ret = ldv_undef_int();
  
#line 5660 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 5664 
  ldv_39_ret = ldv_undef_int();
  
#line 5667 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 5668 
    ldv_39_container = data->arg0;
    
#line 5669 
    ldv_free((void *)data);
  }
  else ;
  
#line 5674 
  ldv_39_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 5675 
  tmp_1 = ldv_undef_int();
  
#line 5675 
  ldv_39_size_cnt = (unsigned long)tmp_1;
  
#line 5682 
  goto ldv_main_39;
  
#line 5684 
  __retres = (void *)0;
  
#line 5684 
  goto return_label;
  ldv_main_39: 
#line 5687 
  ;
  
#line 5690 
  tmp_3 = ldv_undef_int();
  
#line 5690 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 5693 
    ldv_39_ret = ldv_emg_wrapper_pm_stats_open_4(ldv_39_resource_0,ldv_39_resource_1);
    
#line 5695 
    ldv_39_ret = ldv_filter_err_code(ldv_39_ret);
    
#line 5698 
    tmp_2 = ldv_undef_int();
    
#line 5698 
    if (tmp_2 != 0) {
      
#line 5700 
      __VERIFIER_assume(ldv_39_ret == 0);
      
#line 5707 
      goto ldv_call_39;
    }
    else {
      
#line 5711 
      __VERIFIER_assume(ldv_39_ret != 0);
      
#line 5718 
      goto ldv_main_39;
    }
  }
  else {
    
#line 5723 
    ldv_free((void *)ldv_39_resource_0);
    
#line 5731 
    __retres = (void *)0;
    
#line 5731 
    goto return_label;
  }
  
#line 5734 
  __retres = (void *)0;
  
#line 5734 
  goto return_label;
  ldv_call_39: 
#line 5737 
  ;
  
#line 5740 
  tmp_4 = ldv_undef_int();
  
#line 5740 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 5741 
    ;
    
#line 5743 
    ldv_39_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 5744 
    ldv_39_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 5753 
    __VERIFIER_assume(ldv_39_size_cnt <= 2147479552UL);
    
#line 5755 
    ldv_emg_wrapper_pm_stats_clear_3(ldv_39_resource_1,ldv_39_ldv_param_1_6,ldv_39_size_cnt,ldv_39_ldv_param_3_7);
    
#line 5759 
    ldv_free((void *)ldv_39_ldv_param_1_6);
    
#line 5760 
    ldv_free((void *)ldv_39_ldv_param_3_7);
    
#line 5767 
    goto ldv_call_39;
    case 2: 
#line 5770 
    ;
    
#line 5773 
    (*ldv_emg_alias_single_release_5)(ldv_39_resource_0,ldv_39_resource_1);
    
#line 5780 
    goto ldv_main_39;
    case 3: 
#line 5783 
    ;
    
#line 5787 
    tmp_9 = ldv_undef_int();
    
#line 5787 
    if (tmp_9 != 0) 
#line 5790 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_39_resource_1,ldv_39_ldv_param_1_2,ldv_39_ldv_param_2_3);
    else {
      
#line 5796 
      ldv_39_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 5797 
      ldv_39_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 5802 
      (*ldv_emg_alias_seq_read_4)(ldv_39_resource_1,ldv_39_ldv_param_1_4,ldv_39_size_cnt,ldv_39_ldv_param_3_5);
      
#line 5806 
      ldv_free((void *)ldv_39_ldv_param_1_4);
      
#line 5807 
      ldv_free((void *)ldv_39_ldv_param_3_5);
    }
    
#line 5811 
    goto ldv_46630;
    default: 
#line 5813 
    ;
    
#line 5813 
    __VERIFIER_assume(0);
  }
  ldv_46630: 
#line 5822 
  ;
  
#line 5822 
  goto ldv_call_39;
  
#line 5824 
  __retres = (void *)0;
  return_label: 
#line 5824 
                return __retres;
}


#line 5829  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_register_17_3(struct file_operations *arg0)
{
  int ret;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_19;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_20;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_23;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_24;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_25;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_26;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_27;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_29;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_31;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_32;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_33;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_34;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_37;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_38;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_39;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_40;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_41;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_42;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_44;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_45;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_46;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_47;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_48;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_49;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_52;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_53;
  struct ldv_struct_character_driver_scenario_19 *cf_arg_55;
  int tmp;
  
#line 5858 
  tmp = ldv_undef_int();
  
#line 5858 
  switch (tmp) {
    case 0: 
#line 5859 
    ;
    
#line 5860 
    cf_arg_19 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5861 
    cf_arg_19->arg0 = arg0;
    
#line 5862 
    ret = pthread_create(& ldv_thread_19,(pthread_attr_t const *)0,& ldv_character_driver_scenario_19,(void *)cf_arg_19);
    
#line 5863 
    __VERIFIER_assume(ret == 0);
    
#line 5864 
    goto ldv_46664;
    case 1: 
#line 5866 
    ;
    
#line 5867 
    cf_arg_20 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5868 
    cf_arg_20->arg0 = arg0;
    
#line 5869 
    ret = pthread_create(& ldv_thread_20,(pthread_attr_t const *)0,& ldv_character_driver_scenario_20,(void *)cf_arg_20);
    
#line 5870 
    __VERIFIER_assume(ret == 0);
    
#line 5871 
    goto ldv_46664;
    case 2: 
#line 5873 
    ;
    
#line 5874 
    cf_arg_23 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5875 
    cf_arg_23->arg0 = arg0;
    
#line 5876 
    ret = pthread_create(& ldv_thread_23,(pthread_attr_t const *)0,& ldv_character_driver_scenario_23,(void *)cf_arg_23);
    
#line 5877 
    __VERIFIER_assume(ret == 0);
    
#line 5878 
    goto ldv_46664;
    case 3: 
#line 5880 
    ;
    
#line 5881 
    cf_arg_24 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5882 
    cf_arg_24->arg0 = arg0;
    
#line 5883 
    ret = pthread_create(& ldv_thread_24,(pthread_attr_t const *)0,& ldv_character_driver_scenario_24,(void *)cf_arg_24);
    
#line 5884 
    __VERIFIER_assume(ret == 0);
    
#line 5885 
    goto ldv_46664;
    case 4: 
#line 5887 
    ;
    
#line 5888 
    cf_arg_25 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5889 
    cf_arg_25->arg0 = arg0;
    
#line 5890 
    ret = pthread_create(& ldv_thread_25,(pthread_attr_t const *)0,& ldv_character_driver_scenario_25,(void *)cf_arg_25);
    
#line 5891 
    __VERIFIER_assume(ret == 0);
    
#line 5892 
    goto ldv_46664;
    case 5: 
#line 5894 
    ;
    
#line 5895 
    cf_arg_26 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5896 
    cf_arg_26->arg0 = arg0;
    
#line 5897 
    ret = pthread_create(& ldv_thread_26,(pthread_attr_t const *)0,& ldv_character_driver_scenario_26,(void *)cf_arg_26);
    
#line 5898 
    __VERIFIER_assume(ret == 0);
    
#line 5899 
    goto ldv_46664;
    case 6: 
#line 5901 
    ;
    
#line 5902 
    cf_arg_27 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5903 
    cf_arg_27->arg0 = arg0;
    
#line 5904 
    ret = pthread_create(& ldv_thread_27,(pthread_attr_t const *)0,& ldv_character_driver_scenario_27,(void *)cf_arg_27);
    
#line 5905 
    __VERIFIER_assume(ret == 0);
    
#line 5906 
    goto ldv_46664;
    case 7: 
#line 5908 
    ;
    
#line 5909 
    cf_arg_29 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5910 
    cf_arg_29->arg0 = arg0;
    
#line 5911 
    ret = pthread_create(& ldv_thread_29,(pthread_attr_t const *)0,& ldv_character_driver_scenario_29,(void *)cf_arg_29);
    
#line 5912 
    __VERIFIER_assume(ret == 0);
    
#line 5913 
    goto ldv_46664;
    case 8: 
#line 5915 
    ;
    
#line 5916 
    cf_arg_31 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5917 
    cf_arg_31->arg0 = arg0;
    
#line 5918 
    ret = pthread_create(& ldv_thread_31,(pthread_attr_t const *)0,& ldv_character_driver_scenario_31,(void *)cf_arg_31);
    
#line 5919 
    __VERIFIER_assume(ret == 0);
    
#line 5920 
    goto ldv_46664;
    case 9: 
#line 5922 
    ;
    
#line 5923 
    cf_arg_32 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5924 
    cf_arg_32->arg0 = arg0;
    
#line 5925 
    ret = pthread_create(& ldv_thread_32,(pthread_attr_t const *)0,& ldv_character_driver_scenario_32,(void *)cf_arg_32);
    
#line 5926 
    __VERIFIER_assume(ret == 0);
    
#line 5927 
    goto ldv_46664;
    case 10: 
#line 5929 
    ;
    
#line 5930 
    cf_arg_33 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5931 
    cf_arg_33->arg0 = arg0;
    
#line 5932 
    ret = pthread_create(& ldv_thread_33,(pthread_attr_t const *)0,& ldv_character_driver_scenario_33,(void *)cf_arg_33);
    
#line 5933 
    __VERIFIER_assume(ret == 0);
    
#line 5934 
    goto ldv_46664;
    case 11: 
#line 5936 
    ;
    
#line 5937 
    cf_arg_34 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5938 
    cf_arg_34->arg0 = arg0;
    
#line 5939 
    ret = pthread_create(& ldv_thread_34,(pthread_attr_t const *)0,& ldv_character_driver_scenario_34,(void *)cf_arg_34);
    
#line 5940 
    __VERIFIER_assume(ret == 0);
    
#line 5941 
    goto ldv_46664;
    case 12: 
#line 5943 
    ;
    
#line 5944 
    cf_arg_37 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5945 
    cf_arg_37->arg0 = arg0;
    
#line 5946 
    ret = pthread_create(& ldv_thread_37,(pthread_attr_t const *)0,& ldv_character_driver_scenario_37,(void *)cf_arg_37);
    
#line 5947 
    __VERIFIER_assume(ret == 0);
    
#line 5948 
    goto ldv_46664;
    case 13: 
#line 5950 
    ;
    
#line 5951 
    cf_arg_38 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5952 
    cf_arg_38->arg0 = arg0;
    
#line 5953 
    ret = pthread_create(& ldv_thread_38,(pthread_attr_t const *)0,& ldv_character_driver_scenario_38,(void *)cf_arg_38);
    
#line 5954 
    __VERIFIER_assume(ret == 0);
    
#line 5955 
    goto ldv_46664;
    case 14: 
#line 5957 
    ;
    
#line 5958 
    cf_arg_39 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5959 
    cf_arg_39->arg0 = arg0;
    
#line 5960 
    ret = pthread_create(& ldv_thread_39,(pthread_attr_t const *)0,& ldv_character_driver_scenario_39,(void *)cf_arg_39);
    
#line 5961 
    __VERIFIER_assume(ret == 0);
    
#line 5962 
    goto ldv_46664;
    case 15: 
#line 5964 
    ;
    
#line 5965 
    cf_arg_40 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5966 
    cf_arg_40->arg0 = arg0;
    
#line 5967 
    ret = pthread_create(& ldv_thread_40,(pthread_attr_t const *)0,& ldv_character_driver_scenario_40,(void *)cf_arg_40);
    
#line 5968 
    __VERIFIER_assume(ret == 0);
    
#line 5969 
    goto ldv_46664;
    case 16: 
#line 5971 
    ;
    
#line 5972 
    cf_arg_41 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5973 
    cf_arg_41->arg0 = arg0;
    
#line 5974 
    ret = pthread_create(& ldv_thread_41,(pthread_attr_t const *)0,& ldv_character_driver_scenario_41,(void *)cf_arg_41);
    
#line 5975 
    __VERIFIER_assume(ret == 0);
    
#line 5976 
    goto ldv_46664;
    case 17: 
#line 5978 
    ;
    
#line 5979 
    cf_arg_42 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5980 
    cf_arg_42->arg0 = arg0;
    
#line 5981 
    ret = pthread_create(& ldv_thread_42,(pthread_attr_t const *)0,& ldv_character_driver_scenario_42,(void *)cf_arg_42);
    
#line 5982 
    __VERIFIER_assume(ret == 0);
    
#line 5983 
    goto ldv_46664;
    case 18: 
#line 5985 
    ;
    
#line 5986 
    cf_arg_44 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5987 
    cf_arg_44->arg0 = arg0;
    
#line 5988 
    ret = pthread_create(& ldv_thread_44,(pthread_attr_t const *)0,& ldv_character_driver_scenario_44,(void *)cf_arg_44);
    
#line 5989 
    __VERIFIER_assume(ret == 0);
    
#line 5990 
    goto ldv_46664;
    case 19: 
#line 5992 
    ;
    
#line 5993 
    cf_arg_45 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 5994 
    cf_arg_45->arg0 = arg0;
    
#line 5995 
    ret = pthread_create(& ldv_thread_45,(pthread_attr_t const *)0,& ldv_character_driver_scenario_45,(void *)cf_arg_45);
    
#line 5996 
    __VERIFIER_assume(ret == 0);
    
#line 5997 
    goto ldv_46664;
    case 20: 
#line 5999 
    ;
    
#line 6000 
    cf_arg_46 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 6001 
    cf_arg_46->arg0 = arg0;
    
#line 6002 
    ret = pthread_create(& ldv_thread_46,(pthread_attr_t const *)0,& ldv_character_driver_scenario_46,(void *)cf_arg_46);
    
#line 6003 
    __VERIFIER_assume(ret == 0);
    
#line 6004 
    goto ldv_46664;
    case 21: 
#line 6006 
    ;
    
#line 6007 
    cf_arg_47 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 6008 
    cf_arg_47->arg0 = arg0;
    
#line 6009 
    ret = pthread_create(& ldv_thread_47,(pthread_attr_t const *)0,& ldv_character_driver_scenario_47,(void *)cf_arg_47);
    
#line 6010 
    __VERIFIER_assume(ret == 0);
    
#line 6011 
    goto ldv_46664;
    case 22: 
#line 6013 
    ;
    
#line 6014 
    cf_arg_48 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 6015 
    cf_arg_48->arg0 = arg0;
    
#line 6016 
    ret = pthread_create(& ldv_thread_48,(pthread_attr_t const *)0,& ldv_character_driver_scenario_48,(void *)cf_arg_48);
    
#line 6017 
    __VERIFIER_assume(ret == 0);
    
#line 6018 
    goto ldv_46664;
    case 23: 
#line 6020 
    ;
    
#line 6021 
    cf_arg_49 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 6022 
    cf_arg_49->arg0 = arg0;
    
#line 6023 
    ret = pthread_create(& ldv_thread_49,(pthread_attr_t const *)0,& ldv_character_driver_scenario_49,(void *)cf_arg_49);
    
#line 6024 
    __VERIFIER_assume(ret == 0);
    
#line 6025 
    goto ldv_46664;
    case 24: 
#line 6027 
    ;
    
#line 6028 
    cf_arg_52 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 6029 
    cf_arg_52->arg0 = arg0;
    
#line 6030 
    ret = pthread_create(& ldv_thread_52,(pthread_attr_t const *)0,& ldv_character_driver_scenario_52,(void *)cf_arg_52);
    
#line 6031 
    __VERIFIER_assume(ret == 0);
    
#line 6032 
    goto ldv_46664;
    case 25: 
#line 6034 
    ;
    
#line 6035 
    cf_arg_53 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 6036 
    cf_arg_53->arg0 = arg0;
    
#line 6037 
    ret = pthread_create(& ldv_thread_53,(pthread_attr_t const *)0,& ldv_character_driver_scenario_53,(void *)cf_arg_53);
    
#line 6038 
    __VERIFIER_assume(ret == 0);
    
#line 6039 
    goto ldv_46664;
    case 26: 
#line 6041 
    ;
    
#line 6042 
    cf_arg_55 = (struct ldv_struct_character_driver_scenario_19 *)ldv_xmalloc(16UL);
    
#line 6043 
    cf_arg_55->arg0 = arg0;
    
#line 6044 
    ret = pthread_create(& ldv_thread_55,(pthread_attr_t const *)0,& ldv_character_driver_scenario_55,(void *)cf_arg_55);
    
#line 6045 
    __VERIFIER_assume(ret == 0);
    
#line 6046 
    goto ldv_46664;
    default: 
#line 6048 
    ;
    
#line 6048 
    __VERIFIER_assume(0);
  }
  ldv_46664: 
#line 6049 
  ;
  
#line 6050 
  return;
}


#line 6054  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_45(void *arg0)
{
  void *__retres;
  struct file *ldv_45_resource_1;
  int ldv_45_ldv_param_2_3;
  long long ldv_45_ldv_param_1_2;
  char *ldv_45_ldv_param_1_4;
  struct inode *ldv_45_resource_0;
  unsigned long ldv_45_size_cnt;
  long long *ldv_45_ldv_param_3_5;
  char *ldv_45_ldv_param_1_6;
  long long *ldv_45_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 6065 
  struct file_operations *ldv_45_container = ldv_emg_alias_rss_pf_config_debugfs_fops_2;
  
#line 6066 
  int ldv_45_ret = ldv_undef_int();
  
#line 6069 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 6073 
  ldv_45_ret = ldv_undef_int();
  
#line 6076 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 6077 
    ldv_45_container = data->arg0;
    
#line 6078 
    ldv_free((void *)data);
  }
  else ;
  
#line 6083 
  ldv_45_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 6084 
  tmp_1 = ldv_undef_int();
  
#line 6084 
  ldv_45_size_cnt = (unsigned long)tmp_1;
  
#line 6091 
  goto ldv_main_45;
  
#line 6093 
  __retres = (void *)0;
  
#line 6093 
  goto return_label;
  ldv_main_45: 
#line 6096 
  ;
  
#line 6099 
  tmp_3 = ldv_undef_int();
  
#line 6099 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 6102 
    ldv_45_ret = ldv_emg_wrapper_rss_pf_config_open_3(ldv_45_resource_0,ldv_45_resource_1);
    
#line 6104 
    ldv_45_ret = ldv_filter_err_code(ldv_45_ret);
    
#line 6107 
    tmp_2 = ldv_undef_int();
    
#line 6107 
    if (tmp_2 != 0) {
      
#line 6109 
      __VERIFIER_assume(ldv_45_ret == 0);
      
#line 6116 
      goto ldv_call_45;
    }
    else {
      
#line 6120 
      __VERIFIER_assume(ldv_45_ret != 0);
      
#line 6127 
      goto ldv_main_45;
    }
  }
  else {
    
#line 6132 
    ldv_free((void *)ldv_45_resource_0);
    
#line 6140 
    __retres = (void *)0;
    
#line 6140 
    goto return_label;
  }
  
#line 6143 
  __retres = (void *)0;
  
#line 6143 
  goto return_label;
  ldv_call_45: 
#line 6146 
  ;
  
#line 6149 
  tmp_4 = ldv_undef_int();
  
#line 6149 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 6150 
    ;
    
#line 6152 
    ldv_45_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 6153 
    ldv_45_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 6157 
    if (ldv_45_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 6163 
      __VERIFIER_assume(ldv_45_size_cnt <= 2147479552UL);
      
#line 6165 
      (*(ldv_45_container->write))(ldv_45_resource_1,(char const *)ldv_45_ldv_param_1_6,ldv_45_size_cnt,ldv_45_ldv_param_3_7);
    }
    else ;
    
#line 6170 
    ldv_free((void *)ldv_45_ldv_param_1_6);
    
#line 6171 
    ldv_free((void *)ldv_45_ldv_param_3_7);
    
#line 6178 
    goto ldv_call_45;
    case 2: 
#line 6181 
    ;
    
#line 6184 
    seq_release_private(ldv_45_resource_0,ldv_45_resource_1);
    
#line 6191 
    goto ldv_main_45;
    case 3: 
#line 6194 
    ;
    
#line 6198 
    tmp_9 = ldv_undef_int();
    
#line 6198 
    if (tmp_9 != 0) 
#line 6201 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_45_resource_1,ldv_45_ldv_param_1_2,ldv_45_ldv_param_2_3);
    else {
      
#line 6207 
      ldv_45_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 6208 
      ldv_45_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 6213 
      (*ldv_emg_alias_seq_read_4)(ldv_45_resource_1,ldv_45_ldv_param_1_4,ldv_45_size_cnt,ldv_45_ldv_param_3_5);
      
#line 6217 
      ldv_free((void *)ldv_45_ldv_param_3_5);
      
#line 6218 
      ldv_free((void *)ldv_45_ldv_param_1_4);
    }
    
#line 6222 
    goto ldv_46712;
    default: 
#line 6224 
    ;
    
#line 6224 
    __VERIFIER_assume(0);
  }
  ldv_46712: 
#line 6233 
  ;
  
#line 6233 
  goto ldv_call_45;
  
#line 6235 
  __retres = (void *)0;
  return_label: 
#line 6235 
                return __retres;
}


#line 6240  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_tasklet_init(struct tasklet_struct *arg0, void (*arg1)(unsigned long ), unsigned long arg2)
{
  
#line 6245 
  arg0->func = arg1;
  
#line 6246 
  arg0->data = arg2;
  
#line 6247 
  arg0->count.counter = 0;
  
#line 6251 
  goto return_label;
  return_label: 
#line 6253 
                return;
}


#line 6258  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_irq_deregister_10_1(int arg0)
{
  int ret;
  struct ldv_struct_free_irq_10 *cf_arg_30;
  struct ldv_struct_free_irq_10 *cf_arg_22;
  int tmp;
  
#line 6262 
  tmp = ldv_undef_int();
  
#line 6262 
  switch (tmp) {
    case 0: 
#line 6263 
    ;
    
#line 6264 
    ret = pthread_join(ldv_thread_30,(void **)0);
    
#line 6265 
    __VERIFIER_assume(ret == 0);
    
#line 6266 
    goto ldv_46727;
    case 1: 
#line 6268 
    ;
    
#line 6269 
    ret = pthread_join(ldv_thread_22,(void **)0);
    
#line 6270 
    __VERIFIER_assume(ret == 0);
    
#line 6271 
    goto ldv_46727;
    default: 
#line 6273 
    ;
    
#line 6273 
    __VERIFIER_assume(0);
  }
  ldv_46727: 
#line 6274 
  ;
  
#line 6275 
  return;
}


#line 6279  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_deregister_11_1(struct pci_driver *arg0)
{
  int ret;
  struct ldv_struct_pci_scenario_21 *cf_arg_21;
  int tmp;
  
#line 6282 
  tmp = ldv_undef_int();
  
#line 6282 
  switch (tmp) {
    case 0: 
#line 6283 
    ;
    
#line 6284 
    ret = pthread_join(ldv_thread_21,(void **)0);
    
#line 6285 
    __VERIFIER_assume(ret == 0);
    
#line 6286 
    goto ldv_46736;
    default: 
#line 6288 
    ;
    
#line 6288 
    __VERIFIER_assume(0);
  }
  ldv_46736: 
#line 6289 
  ;
  
#line 6290 
  return;
}


#line 6294  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_29(void *arg0)
{
  void *__retres;
  struct file *ldv_29_resource_1;
  int ldv_29_ldv_param_2_3;
  long long ldv_29_ldv_param_1_2;
  char *ldv_29_ldv_param_1_4;
  struct inode *ldv_29_resource_0;
  unsigned long ldv_29_size_cnt;
  long long *ldv_29_ldv_param_3_5;
  char *ldv_29_ldv_param_1_6;
  long long *ldv_29_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 6305 
  struct file_operations *ldv_29_container = ldv_emg_alias_cim_pif_la_fops_2;
  
#line 6306 
  int ldv_29_ret = ldv_undef_int();
  
#line 6309 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 6313 
  ldv_29_ret = ldv_undef_int();
  
#line 6316 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 6317 
    ldv_29_container = data->arg0;
    
#line 6318 
    ldv_free((void *)data);
  }
  else ;
  
#line 6323 
  ldv_29_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 6324 
  tmp_1 = ldv_undef_int();
  
#line 6324 
  ldv_29_size_cnt = (unsigned long)tmp_1;
  
#line 6331 
  goto ldv_main_29;
  
#line 6333 
  __retres = (void *)0;
  
#line 6333 
  goto return_label;
  ldv_main_29: 
#line 6336 
  ;
  
#line 6339 
  tmp_3 = ldv_undef_int();
  
#line 6339 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 6342 
    ldv_29_ret = ldv_emg_wrapper_cim_pif_la_open_3(ldv_29_resource_0,ldv_29_resource_1);
    
#line 6344 
    ldv_29_ret = ldv_filter_err_code(ldv_29_ret);
    
#line 6347 
    tmp_2 = ldv_undef_int();
    
#line 6347 
    if (tmp_2 != 0) {
      
#line 6349 
      __VERIFIER_assume(ldv_29_ret == 0);
      
#line 6356 
      goto ldv_call_29;
    }
    else {
      
#line 6360 
      __VERIFIER_assume(ldv_29_ret != 0);
      
#line 6367 
      goto ldv_main_29;
    }
  }
  else {
    
#line 6372 
    ldv_free((void *)ldv_29_resource_0);
    
#line 6380 
    __retres = (void *)0;
    
#line 6380 
    goto return_label;
  }
  
#line 6383 
  __retres = (void *)0;
  
#line 6383 
  goto return_label;
  ldv_call_29: 
#line 6386 
  ;
  
#line 6389 
  tmp_4 = ldv_undef_int();
  
#line 6389 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 6390 
    ;
    
#line 6392 
    ldv_29_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 6393 
    ldv_29_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 6397 
    if (ldv_29_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 6403 
      __VERIFIER_assume(ldv_29_size_cnt <= 2147479552UL);
      
#line 6405 
      (*(ldv_29_container->write))(ldv_29_resource_1,(char const *)ldv_29_ldv_param_1_6,ldv_29_size_cnt,ldv_29_ldv_param_3_7);
    }
    else ;
    
#line 6410 
    ldv_free((void *)ldv_29_ldv_param_3_7);
    
#line 6411 
    ldv_free((void *)ldv_29_ldv_param_1_6);
    
#line 6418 
    goto ldv_call_29;
    case 2: 
#line 6421 
    ;
    
#line 6424 
    seq_release_private(ldv_29_resource_0,ldv_29_resource_1);
    
#line 6431 
    goto ldv_main_29;
    case 3: 
#line 6434 
    ;
    
#line 6438 
    tmp_9 = ldv_undef_int();
    
#line 6438 
    if (tmp_9 != 0) 
#line 6441 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_29_resource_1,ldv_29_ldv_param_1_2,ldv_29_ldv_param_2_3);
    else {
      
#line 6447 
      ldv_29_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 6448 
      ldv_29_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 6453 
      (*ldv_emg_alias_seq_read_4)(ldv_29_resource_1,ldv_29_ldv_param_1_4,ldv_29_size_cnt,ldv_29_ldv_param_3_5);
      
#line 6457 
      ldv_free((void *)ldv_29_ldv_param_3_5);
      
#line 6458 
      ldv_free((void *)ldv_29_ldv_param_1_4);
    }
    
#line 6462 
    goto ldv_46758;
    default: 
#line 6464 
    ;
    
#line 6464 
    __VERIFIER_assume(0);
  }
  ldv_46758: 
#line 6473 
  ;
  
#line 6473 
  goto ldv_call_29;
  
#line 6475 
  __retres = (void *)0;
  return_label: 
#line 6475 
                return __retres;
}


#line 6480  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_seq_open(struct file *arg0, struct seq_operations *arg1)
{
  int __retres;
  struct seq_file *ldv_13_seq_file;
  struct seq_operations *ldv_13_ops;
  struct file *ldv_13_file;
  
#line 6488 
  ldv_13_seq_file = (struct seq_file *)ldv_xmalloc_unknown_size(0UL);
  
#line 6489 
  ldv_13_ops = arg1;
  
#line 6490 
  ldv_13_file->private_data = (void *)ldv_13_seq_file;
  
#line 6494 
  ldv_dispatch_register_13_1(ldv_13_seq_file,ldv_13_ops);
  
#line 6495 
  ;
  
#line 6495 
  __retres = 0;
  
#line 6495 
  return __retres;
}


#line 6503  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_55(void *arg0)
{
  void *__retres;
  struct file *ldv_55_resource_1;
  int ldv_55_ldv_param_2_3;
  long long ldv_55_ldv_param_1_2;
  char *ldv_55_ldv_param_1_4;
  struct inode *ldv_55_resource_0;
  unsigned long ldv_55_size_cnt;
  long long *ldv_55_ldv_param_3_5;
  char *ldv_55_ldv_param_1_6;
  long long *ldv_55_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 6514 
  struct file_operations *ldv_55_container = ldv_emg_alias_sensors_debugfs_fops_2;
  
#line 6515 
  int ldv_55_ret = ldv_undef_int();
  
#line 6518 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 6522 
  ldv_55_ret = ldv_undef_int();
  
#line 6525 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 6526 
    ldv_55_container = data->arg0;
    
#line 6527 
    ldv_free((void *)data);
  }
  else ;
  
#line 6532 
  ldv_55_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 6533 
  tmp_1 = ldv_undef_int();
  
#line 6533 
  ldv_55_size_cnt = (unsigned long)tmp_1;
  
#line 6540 
  goto ldv_main_55;
  
#line 6542 
  __retres = (void *)0;
  
#line 6542 
  goto return_label;
  ldv_main_55: 
#line 6545 
  ;
  
#line 6548 
  tmp_3 = ldv_undef_int();
  
#line 6548 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 6551 
    ldv_55_ret = ldv_emg_wrapper_sensors_open_3(ldv_55_resource_0,ldv_55_resource_1);
    
#line 6553 
    ldv_55_ret = ldv_filter_err_code(ldv_55_ret);
    
#line 6556 
    tmp_2 = ldv_undef_int();
    
#line 6556 
    if (tmp_2 != 0) {
      
#line 6558 
      __VERIFIER_assume(ldv_55_ret == 0);
      
#line 6565 
      goto ldv_call_55;
    }
    else {
      
#line 6569 
      __VERIFIER_assume(ldv_55_ret != 0);
      
#line 6576 
      goto ldv_main_55;
    }
  }
  else {
    
#line 6581 
    ldv_free((void *)ldv_55_resource_0);
    
#line 6589 
    __retres = (void *)0;
    
#line 6589 
    goto return_label;
  }
  
#line 6592 
  __retres = (void *)0;
  
#line 6592 
  goto return_label;
  ldv_call_55: 
#line 6595 
  ;
  
#line 6598 
  tmp_4 = ldv_undef_int();
  
#line 6598 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 6599 
    ;
    
#line 6601 
    ldv_55_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 6602 
    ldv_55_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 6606 
    if (ldv_55_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 6612 
      __VERIFIER_assume(ldv_55_size_cnt <= 2147479552UL);
      
#line 6614 
      (*(ldv_55_container->write))(ldv_55_resource_1,(char const *)ldv_55_ldv_param_1_6,ldv_55_size_cnt,ldv_55_ldv_param_3_7);
    }
    else ;
    
#line 6619 
    ldv_free((void *)ldv_55_ldv_param_3_7);
    
#line 6620 
    ldv_free((void *)ldv_55_ldv_param_1_6);
    
#line 6627 
    goto ldv_call_55;
    case 2: 
#line 6630 
    ;
    
#line 6633 
    (*ldv_emg_alias_single_release_5)(ldv_55_resource_0,ldv_55_resource_1);
    
#line 6640 
    goto ldv_main_55;
    case 3: 
#line 6643 
    ;
    
#line 6647 
    tmp_9 = ldv_undef_int();
    
#line 6647 
    if (tmp_9 != 0) 
#line 6650 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_55_resource_1,ldv_55_ldv_param_1_2,ldv_55_ldv_param_2_3);
    else {
      
#line 6656 
      ldv_55_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 6657 
      ldv_55_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 6662 
      (*ldv_emg_alias_seq_read_4)(ldv_55_resource_1,ldv_55_ldv_param_1_4,ldv_55_size_cnt,ldv_55_ldv_param_3_5);
      
#line 6666 
      ldv_free((void *)ldv_55_ldv_param_1_4);
      
#line 6667 
      ldv_free((void *)ldv_55_ldv_param_3_5);
    }
    
#line 6671 
    goto ldv_46787;
    default: 
#line 6673 
    ;
    
#line 6673 
    __VERIFIER_assume(0);
  }
  ldv_46787: 
#line 6682 
  ;
  
#line 6682 
  goto ldv_call_55;
  
#line 6684 
  __retres = (void *)0;
  return_label: 
#line 6684 
                return __retres;
}


#line 6689  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
int main(void)
{
  int __retres;
  
#line 6692 
  ldv_initialize();
  
#line 6695 
  ldv_initialization_1((void *)0);
  
#line 6697 
  __retres = 0;
  
#line 6697 
  return __retres;
}


#line 6702  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_traverse_kernel_items_scenario_28(void *arg0)
{
  void *__retres;
  void *ldv_28_ldv_param_1_2;
  long long *ldv_28_index;
  struct seq_file *ldv_28_seq_file;
  void *ldv_28_ldv_param_1_3;
  void *ldv_28_ldv_param_1_4;
  int tmp_2;
  int tmp_6;
  
#line 6708 
  struct seq_operations *ldv_28_ops = ldv_emg_alias_seq_tab_ops_6;
  
#line 6709 
  int ldv_28_show_ret = ldv_undef_int();
  
#line 6712 
  void *ldv_28_ret = ldv_undef_ptr();
  
#line 6714 
  struct ldv_struct_traverse_kernel_items_scenario_28 *data = (struct ldv_struct_traverse_kernel_items_scenario_28 *)arg0;
  
#line 6718 
  ldv_28_show_ret = ldv_undef_int();
  
#line 6721 
  if (data != (struct ldv_struct_traverse_kernel_items_scenario_28 *)0) {
    
#line 6722 
    ldv_28_seq_file = data->arg0;
    
#line 6723 
    ldv_28_ops = data->arg1;
    
#line 6724 
    ldv_free((void *)data);
  }
  else ;
  
#line 6729 
  ldv_28_index = (long long *)ldv_xmalloc_unknown_size(0UL);
  
#line 6736 
  goto ldv_outer_loop_28;
  
#line 6738 
  __retres = (void *)0;
  
#line 6738 
  goto return_label;
  ldv_outer_loop_28: 
#line 6741 
  ;
  
#line 6744 
  tmp_2 = ldv_undef_int();
  
#line 6744 
  if (tmp_2 != 0) {
    
#line 6747 
    *ldv_28_index = 0LL;
    
#line 6749 
    ldv_28_ret = ldv_emg_wrapper_seq_tab_start_2(ldv_28_seq_file,ldv_28_index);
    
#line 6756 
    goto ldv_inner_loop_28;
  }
  else {
    
#line 6760 
    ldv_free((void *)ldv_28_index);
    
#line 6768 
    __retres = (void *)0;
    
#line 6768 
    goto return_label;
  }
  
#line 6771 
  __retres = (void *)0;
  
#line 6771 
  goto return_label;
  ldv_inner_loop_28: 
#line 6774 
  ;
  
#line 6777 
  tmp_6 = ldv_undef_int();
  
#line 6777 
  if (tmp_6 != 0) {
    long tmp_3;
    int tmp_4;
    
#line 6779 
    tmp_3 = ldv_is_err_or_null((void const *)ldv_28_ret);
    
#line 6779 
    __VERIFIER_assume(tmp_3 == 0L);
    
#line 6783 
    ldv_28_ldv_param_1_3 = ldv_xmalloc_unknown_size(0UL);
    
#line 6788 
    ldv_28_show_ret = ldv_emg_wrapper_seq_tab_show_4(ldv_28_seq_file,ldv_28_ldv_param_1_3);
    
#line 6792 
    ldv_free(ldv_28_ldv_param_1_3);
    
#line 6795 
    tmp_4 = ldv_undef_int();
    
#line 6795 
    if (tmp_4 != 0) {
      
#line 6797 
      __VERIFIER_assume(ldv_28_show_ret >= 0);
      
#line 6801 
      ldv_28_ldv_param_1_2 = ldv_xmalloc_unknown_size(0UL);
      
#line 6806 
      ldv_28_ret = ldv_emg_wrapper_seq_tab_next_3(ldv_28_seq_file,ldv_28_ldv_param_1_2,ldv_28_index);
      
#line 6810 
      ldv_free(ldv_28_ldv_param_1_2);
      
#line 6817 
      goto ldv_inner_loop_28;
    }
    else {
      
#line 6821 
      ldv_28_ldv_param_1_4 = ldv_xmalloc_unknown_size(0UL);
      
#line 6826 
      ldv_28_seq_file->index = *ldv_28_index;
      
#line 6828 
      ldv_emg_wrapper_seq_tab_stop_5(ldv_28_seq_file,ldv_28_ldv_param_1_4);
      
#line 6830 
      ldv_28_seq_file->index = *ldv_28_index;
      
#line 6834 
      ldv_free(ldv_28_ldv_param_1_4);
      
#line 6841 
      goto ldv_outer_loop_28;
    }
  }
  else {
    long tmp_5;
    
#line 6846 
    tmp_5 = ldv_is_err_or_null((void const *)ldv_28_ret);
    
#line 6846 
    __VERIFIER_assume((int)tmp_5);
    
#line 6850 
    ldv_28_ldv_param_1_4 = ldv_xmalloc_unknown_size(0UL);
    
#line 6855 
    ldv_28_seq_file->index = *ldv_28_index;
    
#line 6857 
    ldv_emg_wrapper_seq_tab_stop_5(ldv_28_seq_file,ldv_28_ldv_param_1_4);
    
#line 6859 
    ldv_28_seq_file->index = *ldv_28_index;
    
#line 6863 
    ldv_free(ldv_28_ldv_param_1_4);
    
#line 6870 
    goto ldv_outer_loop_28;
  }
  
#line 6873 
  __retres = (void *)0;
  return_label: 
#line 6873 
                return __retres;
}


#line 6878  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_32(void *arg0)
{
  void *__retres;
  struct file *ldv_32_resource_1;
  int ldv_32_ldv_param_2_3;
  long long ldv_32_ldv_param_1_2;
  char *ldv_32_ldv_param_1_4;
  struct inode *ldv_32_resource_0;
  unsigned long ldv_32_size_cnt;
  long long *ldv_32_ldv_param_3_5;
  char *ldv_32_ldv_param_1_6;
  long long *ldv_32_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 6889 
  struct file_operations *ldv_32_container = ldv_emg_alias_blocked_fl_fops_2;
  
#line 6890 
  int ldv_32_ret = ldv_undef_int();
  
#line 6893 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 6897 
  ldv_32_ret = ldv_undef_int();
  
#line 6900 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 6901 
    ldv_32_container = data->arg0;
    
#line 6902 
    ldv_free((void *)data);
  }
  else ;
  
#line 6907 
  ldv_32_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 6908 
  tmp_1 = ldv_undef_int();
  
#line 6908 
  ldv_32_size_cnt = (unsigned long)tmp_1;
  
#line 6915 
  goto ldv_main_32;
  
#line 6917 
  __retres = (void *)0;
  
#line 6917 
  goto return_label;
  ldv_main_32: 
#line 6920 
  ;
  
#line 6923 
  tmp_3 = ldv_undef_int();
  
#line 6923 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 6926 
    ldv_32_ret = ldv_emg_wrapper_blocked_fl_open_6(ldv_32_resource_0,ldv_32_resource_1);
    
#line 6928 
    ldv_32_ret = ldv_filter_err_code(ldv_32_ret);
    
#line 6931 
    tmp_2 = ldv_undef_int();
    
#line 6931 
    if (tmp_2 != 0) {
      
#line 6933 
      __VERIFIER_assume(ldv_32_ret == 0);
      
#line 6940 
      goto ldv_call_32;
    }
    else {
      
#line 6944 
      __VERIFIER_assume(ldv_32_ret != 0);
      
#line 6951 
      goto ldv_main_32;
    }
  }
  else {
    
#line 6956 
    ldv_free((void *)ldv_32_resource_0);
    
#line 6964 
    __retres = (void *)0;
    
#line 6964 
    goto return_label;
  }
  
#line 6967 
  __retres = (void *)0;
  
#line 6967 
  goto return_label;
  ldv_call_32: 
#line 6970 
  ;
  
#line 6973 
  tmp_4 = ldv_undef_int();
  
#line 6973 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 6974 
    ;
    
#line 6976 
    ldv_32_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 6977 
    ldv_32_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 6986 
    __VERIFIER_assume(ldv_32_size_cnt <= 2147479552UL);
    
#line 6988 
    ldv_emg_wrapper_blocked_fl_write_5(ldv_32_resource_1,ldv_32_ldv_param_1_6,ldv_32_size_cnt,ldv_32_ldv_param_3_7);
    
#line 6992 
    ldv_free((void *)ldv_32_ldv_param_1_6);
    
#line 6993 
    ldv_free((void *)ldv_32_ldv_param_3_7);
    
#line 7000 
    goto ldv_call_32;
    case 2: 
#line 7003 
    ;
    
#line 7005 
    if (ldv_32_container->release != (int (*)(struct inode *, struct file *))0) 
      
#line 7007 
      (*(ldv_32_container->release))(ldv_32_resource_0,ldv_32_resource_1); else ;
    
#line 7015 
    goto ldv_main_32;
    case 3: 
#line 7018 
    ;
    
#line 7022 
    tmp_9 = ldv_undef_int();
    
#line 7022 
    if (tmp_9 != 0) 
#line 7025 
                    (*ldv_emg_alias_generic_file_llseek_3)(ldv_32_resource_1,ldv_32_ldv_param_1_2,ldv_32_ldv_param_2_3);
    else {
      
#line 7031 
      ldv_32_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 7032 
      ldv_32_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 7037 
      ldv_emg_wrapper_blocked_fl_read_4(ldv_32_resource_1,ldv_32_ldv_param_1_4,ldv_32_size_cnt,ldv_32_ldv_param_3_5);
      
#line 7041 
      ldv_free((void *)ldv_32_ldv_param_3_5);
      
#line 7042 
      ldv_free((void *)ldv_32_ldv_param_1_4);
    }
    
#line 7046 
    goto ldv_46826;
    default: 
#line 7048 
    ;
    
#line 7048 
    __VERIFIER_assume(0);
  }
  ldv_46826: 
#line 7057 
  ;
  
#line 7057 
  goto ldv_call_32;
  
#line 7059 
  __retres = (void *)0;
  return_label: 
#line 7059 
                return __retres;
}


#line 7064  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_debugfs_remove(struct dentry *arg0)
{
  struct dentry *ldv_6_dentry;
  struct file_operations *ldv_6_file_operations;
  
#line 7071 
  ldv_6_dentry = arg0;
  
#line 7072 
  ldv_free((void *)ldv_6_dentry);
  
#line 7076 
  ldv_dispatch_deregister_6_1(ldv_6_file_operations);
  
#line 7080 
  goto return_label;
  return_label: 
#line 7082 
                return;
}


#line 7087  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_traverse_kernel_items_scenario_51(void *arg0)
{
  void *__retres;
  void *ldv_51_ldv_param_1_2;
  long long *ldv_51_index;
  struct seq_file *ldv_51_seq_file;
  void *ldv_51_ldv_param_1_3;
  void *ldv_51_ldv_param_1_4;
  int tmp_2;
  int tmp_6;
  
#line 7093 
  struct seq_operations *ldv_51_ops = ldv_emg_alias_sge_qinfo_seq_ops_6;
  
#line 7094 
  int ldv_51_show_ret = ldv_undef_int();
  
#line 7097 
  void *ldv_51_ret = ldv_undef_ptr();
  
#line 7099 
  struct ldv_struct_traverse_kernel_items_scenario_28 *data = (struct ldv_struct_traverse_kernel_items_scenario_28 *)arg0;
  
#line 7103 
  ldv_51_show_ret = ldv_undef_int();
  
#line 7106 
  if (data != (struct ldv_struct_traverse_kernel_items_scenario_28 *)0) {
    
#line 7107 
    ldv_51_seq_file = data->arg0;
    
#line 7108 
    ldv_51_ops = data->arg1;
    
#line 7109 
    ldv_free((void *)data);
  }
  else ;
  
#line 7114 
  ldv_51_index = (long long *)ldv_xmalloc_unknown_size(0UL);
  
#line 7121 
  goto ldv_outer_loop_51;
  
#line 7123 
  __retres = (void *)0;
  
#line 7123 
  goto return_label;
  ldv_outer_loop_51: 
#line 7126 
  ;
  
#line 7129 
  tmp_2 = ldv_undef_int();
  
#line 7129 
  if (tmp_2 != 0) {
    
#line 7132 
    *ldv_51_index = 0LL;
    
#line 7134 
    ldv_51_ret = ldv_emg_wrapper_sge_queue_start_2(ldv_51_seq_file,ldv_51_index);
    
#line 7141 
    goto ldv_inner_loop_51;
  }
  else {
    
#line 7145 
    ldv_free((void *)ldv_51_index);
    
#line 7153 
    __retres = (void *)0;
    
#line 7153 
    goto return_label;
  }
  
#line 7156 
  __retres = (void *)0;
  
#line 7156 
  goto return_label;
  ldv_inner_loop_51: 
#line 7159 
  ;
  
#line 7162 
  tmp_6 = ldv_undef_int();
  
#line 7162 
  if (tmp_6 != 0) {
    long tmp_3;
    int tmp_4;
    
#line 7164 
    tmp_3 = ldv_is_err_or_null((void const *)ldv_51_ret);
    
#line 7164 
    __VERIFIER_assume(tmp_3 == 0L);
    
#line 7168 
    ldv_51_ldv_param_1_3 = ldv_xmalloc_unknown_size(0UL);
    
#line 7173 
    ldv_51_show_ret = ldv_emg_wrapper_sge_qinfo_show_4(ldv_51_seq_file,ldv_51_ldv_param_1_3);
    
#line 7177 
    ldv_free(ldv_51_ldv_param_1_3);
    
#line 7180 
    tmp_4 = ldv_undef_int();
    
#line 7180 
    if (tmp_4 != 0) {
      
#line 7182 
      __VERIFIER_assume(ldv_51_show_ret >= 0);
      
#line 7186 
      ldv_51_ldv_param_1_2 = ldv_xmalloc_unknown_size(0UL);
      
#line 7191 
      ldv_51_ret = ldv_emg_wrapper_sge_queue_next_3(ldv_51_seq_file,ldv_51_ldv_param_1_2,ldv_51_index);
      
#line 7195 
      ldv_free(ldv_51_ldv_param_1_2);
      
#line 7202 
      goto ldv_inner_loop_51;
    }
    else {
      
#line 7206 
      ldv_51_ldv_param_1_4 = ldv_xmalloc_unknown_size(0UL);
      
#line 7211 
      ldv_51_seq_file->index = *ldv_51_index;
      
#line 7213 
      ldv_emg_wrapper_sge_queue_stop_5(ldv_51_seq_file,ldv_51_ldv_param_1_4);
      
#line 7215 
      ldv_51_seq_file->index = *ldv_51_index;
      
#line 7219 
      ldv_free(ldv_51_ldv_param_1_4);
      
#line 7226 
      goto ldv_outer_loop_51;
    }
  }
  else {
    long tmp_5;
    
#line 7231 
    tmp_5 = ldv_is_err_or_null((void const *)ldv_51_ret);
    
#line 7231 
    __VERIFIER_assume((int)tmp_5);
    
#line 7235 
    ldv_51_ldv_param_1_4 = ldv_xmalloc_unknown_size(0UL);
    
#line 7240 
    ldv_51_seq_file->index = *ldv_51_index;
    
#line 7242 
    ldv_emg_wrapper_sge_queue_stop_5(ldv_51_seq_file,ldv_51_ldv_param_1_4);
    
#line 7244 
    ldv_51_seq_file->index = *ldv_51_index;
    
#line 7248 
    ldv_free(ldv_51_ldv_param_1_4);
    
#line 7255 
    goto ldv_outer_loop_51;
  }
  
#line 7258 
  __retres = (void *)0;
  return_label: 
#line 7258 
                return __retres;
}


#line 7263  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_request_irq(unsigned int arg0, enum irqreturn (*arg1)(int , void *), unsigned long arg2, char *arg3, void *arg4)
{
  int __retres;
  int ldv_15_line;
  void *ldv_15_data;
  enum irqreturn (*ldv_15_thread)(int , void *);
  int tmp_0;
  
#line 7268 
  enum irqreturn (*ldv_15_callback)(int , void *) = & t4_sge_intr_msix;
  
#line 7273 
  tmp_0 = ldv_undef_int();
  
#line 7273 
  if (tmp_0 != 0) {
    
#line 7275 
    ldv_15_line = (int)arg0;
    
#line 7276 
    ldv_15_callback = arg1;
    
#line 7277 
    ldv_15_thread = (enum irqreturn (*)(int , void *))0;
    
#line 7278 
    ldv_15_data = arg4;
    
#line 7282 
    ldv_dispatch_irq_register_15_3(ldv_15_line,ldv_15_callback,ldv_15_thread,ldv_15_data);
    
#line 7286 
    __retres = 0;
    
#line 7286 
    goto return_label;
  }
  else {
    int tmp;
    
#line 7293 
    tmp = ldv_undef_int_negative();
    
#line 7293 
    __retres = tmp;
    
#line 7293 
    goto return_label;
  }
  return_label: 
#line 7273 
                return __retres;
}


#line 7303  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_24(void *arg0)
{
  void *__retres;
  struct file *ldv_24_resource_1;
  int ldv_24_ldv_param_2_3;
  long long ldv_24_ldv_param_1_2;
  char *ldv_24_ldv_param_1_4;
  struct inode *ldv_24_resource_0;
  unsigned long ldv_24_size_cnt;
  long long *ldv_24_ldv_param_3_5;
  char *ldv_24_ldv_param_1_6;
  long long *ldv_24_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 7314 
  struct file_operations *ldv_24_container = ldv_emg_alias_mbox_debugfs_fops_2;
  
#line 7315 
  int ldv_24_ret = ldv_undef_int();
  
#line 7318 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 7322 
  ldv_24_ret = ldv_undef_int();
  
#line 7325 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 7326 
    ldv_24_container = data->arg0;
    
#line 7327 
    ldv_free((void *)data);
  }
  else ;
  
#line 7332 
  ldv_24_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 7333 
  tmp_1 = ldv_undef_int();
  
#line 7333 
  ldv_24_size_cnt = (unsigned long)tmp_1;
  
#line 7340 
  goto ldv_main_24;
  
#line 7342 
  __retres = (void *)0;
  
#line 7342 
  goto return_label;
  ldv_main_24: 
#line 7345 
  ;
  
#line 7348 
  tmp_3 = ldv_undef_int();
  
#line 7348 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 7351 
    ldv_24_ret = ldv_emg_wrapper_mbox_open_4(ldv_24_resource_0,ldv_24_resource_1);
    
#line 7353 
    ldv_24_ret = ldv_filter_err_code(ldv_24_ret);
    
#line 7356 
    tmp_2 = ldv_undef_int();
    
#line 7356 
    if (tmp_2 != 0) {
      
#line 7358 
      __VERIFIER_assume(ldv_24_ret == 0);
      
#line 7365 
      goto ldv_call_24;
    }
    else {
      
#line 7369 
      __VERIFIER_assume(ldv_24_ret != 0);
      
#line 7376 
      goto ldv_main_24;
    }
  }
  else {
    
#line 7381 
    ldv_free((void *)ldv_24_resource_0);
    
#line 7389 
    __retres = (void *)0;
    
#line 7389 
    goto return_label;
  }
  
#line 7392 
  __retres = (void *)0;
  
#line 7392 
  goto return_label;
  ldv_call_24: 
#line 7395 
  ;
  
#line 7398 
  tmp_4 = ldv_undef_int();
  
#line 7398 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 7399 
    ;
    
#line 7401 
    ldv_24_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 7402 
    ldv_24_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 7411 
    __VERIFIER_assume(ldv_24_size_cnt <= 2147479552UL);
    
#line 7413 
    ldv_emg_wrapper_mbox_write_3(ldv_24_resource_1,ldv_24_ldv_param_1_6,ldv_24_size_cnt,ldv_24_ldv_param_3_7);
    
#line 7417 
    ldv_free((void *)ldv_24_ldv_param_1_6);
    
#line 7418 
    ldv_free((void *)ldv_24_ldv_param_3_7);
    
#line 7425 
    goto ldv_call_24;
    case 2: 
#line 7428 
    ;
    
#line 7431 
    (*ldv_emg_alias_single_release_5)(ldv_24_resource_0,ldv_24_resource_1);
    
#line 7438 
    goto ldv_main_24;
    case 3: 
#line 7441 
    ;
    
#line 7445 
    tmp_9 = ldv_undef_int();
    
#line 7445 
    if (tmp_9 != 0) 
#line 7448 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_24_resource_1,ldv_24_ldv_param_1_2,ldv_24_ldv_param_2_3);
    else {
      
#line 7454 
      ldv_24_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 7455 
      ldv_24_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 7460 
      (*ldv_emg_alias_seq_read_4)(ldv_24_resource_1,ldv_24_ldv_param_1_4,ldv_24_size_cnt,ldv_24_ldv_param_3_5);
      
#line 7464 
      ldv_free((void *)ldv_24_ldv_param_1_4);
      
#line 7465 
      ldv_free((void *)ldv_24_ldv_param_3_5);
    }
    
#line 7469 
    goto ldv_46884;
    default: 
#line 7471 
    ;
    
#line 7471 
    __VERIFIER_assume(0);
  }
  ldv_46884: 
#line 7480 
  ;
  
#line 7480 
  goto ldv_call_24;
  
#line 7482 
  __retres = (void *)0;
  return_label: 
#line 7482 
                return __retres;
}


#line 7487  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_27(void *arg0)
{
  void *__retres;
  struct file *ldv_27_resource_1;
  int ldv_27_ldv_param_2_3;
  long long ldv_27_ldv_param_1_2;
  char *ldv_27_ldv_param_1_4;
  struct inode *ldv_27_resource_0;
  unsigned long ldv_27_size_cnt;
  long long *ldv_27_ldv_param_3_5;
  char *ldv_27_ldv_param_1_6;
  long long *ldv_27_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 7498 
  struct file_operations *ldv_27_container = ldv_emg_alias_sge_qinfo_debugfs_fops_2;
  
#line 7499 
  int ldv_27_ret = ldv_undef_int();
  
#line 7502 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 7506 
  ldv_27_ret = ldv_undef_int();
  
#line 7509 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 7510 
    ldv_27_container = data->arg0;
    
#line 7511 
    ldv_free((void *)data);
  }
  else ;
  
#line 7516 
  ldv_27_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 7517 
  tmp_1 = ldv_undef_int();
  
#line 7517 
  ldv_27_size_cnt = (unsigned long)tmp_1;
  
#line 7524 
  goto ldv_main_27;
  
#line 7526 
  __retres = (void *)0;
  
#line 7526 
  goto return_label;
  ldv_main_27: 
#line 7529 
  ;
  
#line 7532 
  tmp_3 = ldv_undef_int();
  
#line 7532 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 7535 
    ldv_27_ret = ldv_emg_wrapper_sge_qinfo_open_3(ldv_27_resource_0,ldv_27_resource_1);
    
#line 7537 
    ldv_27_ret = ldv_filter_err_code(ldv_27_ret);
    
#line 7540 
    tmp_2 = ldv_undef_int();
    
#line 7540 
    if (tmp_2 != 0) {
      
#line 7542 
      __VERIFIER_assume(ldv_27_ret == 0);
      
#line 7549 
      goto ldv_call_27;
    }
    else {
      
#line 7553 
      __VERIFIER_assume(ldv_27_ret != 0);
      
#line 7560 
      goto ldv_main_27;
    }
  }
  else {
    
#line 7565 
    ldv_free((void *)ldv_27_resource_0);
    
#line 7573 
    __retres = (void *)0;
    
#line 7573 
    goto return_label;
  }
  
#line 7576 
  __retres = (void *)0;
  
#line 7576 
  goto return_label;
  ldv_call_27: 
#line 7579 
  ;
  
#line 7582 
  tmp_4 = ldv_undef_int();
  
#line 7582 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 7583 
    ;
    
#line 7585 
    ldv_27_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 7586 
    ldv_27_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 7590 
    if (ldv_27_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 7596 
      __VERIFIER_assume(ldv_27_size_cnt <= 2147479552UL);
      
#line 7598 
      (*(ldv_27_container->write))(ldv_27_resource_1,(char const *)ldv_27_ldv_param_1_6,ldv_27_size_cnt,ldv_27_ldv_param_3_7);
    }
    else ;
    
#line 7603 
    ldv_free((void *)ldv_27_ldv_param_3_7);
    
#line 7604 
    ldv_free((void *)ldv_27_ldv_param_1_6);
    
#line 7611 
    goto ldv_call_27;
    case 2: 
#line 7614 
    ;
    
#line 7617 
    (*ldv_emg_alias_seq_release_3)(ldv_27_resource_0,ldv_27_resource_1);
    
#line 7624 
    goto ldv_main_27;
    case 3: 
#line 7627 
    ;
    
#line 7631 
    tmp_9 = ldv_undef_int();
    
#line 7631 
    if (tmp_9 != 0) 
#line 7634 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_27_resource_1,ldv_27_ldv_param_1_2,ldv_27_ldv_param_2_3);
    else {
      
#line 7640 
      ldv_27_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 7641 
      ldv_27_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 7646 
      (*ldv_emg_alias_seq_read_4)(ldv_27_resource_1,ldv_27_ldv_param_1_4,ldv_27_size_cnt,ldv_27_ldv_param_3_5);
      
#line 7650 
      ldv_free((void *)ldv_27_ldv_param_3_5);
      
#line 7651 
      ldv_free((void *)ldv_27_ldv_param_1_4);
    }
    
#line 7655 
    goto ldv_46906;
    default: 
#line 7657 
    ;
    
#line 7657 
    __VERIFIER_assume(0);
  }
  ldv_46906: 
#line 7666 
  ;
  
#line 7666 
  goto ldv_call_27;
  
#line 7668 
  __retres = (void *)0;
  return_label: 
#line 7668 
                return __retres;
}


#line 7673  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_33(void *arg0)
{
  void *__retres;
  struct file *ldv_33_resource_1;
  int ldv_33_ldv_param_2_3;
  long long ldv_33_ldv_param_1_2;
  char *ldv_33_ldv_param_1_4;
  struct inode *ldv_33_resource_0;
  unsigned long ldv_33_size_cnt;
  long long *ldv_33_ldv_param_3_5;
  char *ldv_33_ldv_param_1_6;
  long long *ldv_33_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 7684 
  struct file_operations *ldv_33_container = (struct file_operations *)(& t4_l2t_fops);
  
#line 7685 
  int ldv_33_ret = ldv_undef_int();
  
#line 7688 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 7692 
  ldv_33_ret = ldv_undef_int();
  
#line 7695 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 7696 
    ldv_33_container = data->arg0;
    
#line 7697 
    ldv_free((void *)data);
  }
  else ;
  
#line 7702 
  ldv_33_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 7703 
  tmp_1 = ldv_undef_int();
  
#line 7703 
  ldv_33_size_cnt = (unsigned long)tmp_1;
  
#line 7710 
  goto ldv_main_33;
  
#line 7712 
  __retres = (void *)0;
  
#line 7712 
  goto return_label;
  ldv_main_33: 
#line 7715 
  ;
  
#line 7718 
  tmp_3 = ldv_undef_int();
  
#line 7718 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 7721 
    ldv_33_ret = ldv_emg_wrapper_l2t_seq_open_2(ldv_33_resource_0,ldv_33_resource_1);
    
#line 7723 
    ldv_33_ret = ldv_filter_err_code(ldv_33_ret);
    
#line 7726 
    tmp_2 = ldv_undef_int();
    
#line 7726 
    if (tmp_2 != 0) {
      
#line 7728 
      __VERIFIER_assume(ldv_33_ret == 0);
      
#line 7735 
      goto ldv_call_33;
    }
    else {
      
#line 7739 
      __VERIFIER_assume(ldv_33_ret != 0);
      
#line 7746 
      goto ldv_main_33;
    }
  }
  else {
    
#line 7751 
    ldv_free((void *)ldv_33_resource_0);
    
#line 7759 
    __retres = (void *)0;
    
#line 7759 
    goto return_label;
  }
  
#line 7762 
  __retres = (void *)0;
  
#line 7762 
  goto return_label;
  ldv_call_33: 
#line 7765 
  ;
  
#line 7768 
  tmp_4 = ldv_undef_int();
  
#line 7768 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 7769 
    ;
    
#line 7771 
    ldv_33_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 7772 
    ldv_33_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 7776 
    if (ldv_33_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 7782 
      __VERIFIER_assume(ldv_33_size_cnt <= 2147479552UL);
      
#line 7784 
      (*(ldv_33_container->write))(ldv_33_resource_1,(char const *)ldv_33_ldv_param_1_6,ldv_33_size_cnt,ldv_33_ldv_param_3_7);
    }
    else ;
    
#line 7789 
    ldv_free((void *)ldv_33_ldv_param_3_7);
    
#line 7790 
    ldv_free((void *)ldv_33_ldv_param_1_6);
    
#line 7797 
    goto ldv_call_33;
    case 2: 
#line 7800 
    ;
    
#line 7803 
    (*ldv_emg_alias_seq_release_3)(ldv_33_resource_0,ldv_33_resource_1);
    
#line 7810 
    goto ldv_main_33;
    case 3: 
#line 7813 
    ;
    
#line 7817 
    tmp_9 = ldv_undef_int();
    
#line 7817 
    if (tmp_9 != 0) 
#line 7820 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_33_resource_1,ldv_33_ldv_param_1_2,ldv_33_ldv_param_2_3);
    else {
      
#line 7826 
      ldv_33_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 7827 
      ldv_33_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 7832 
      (*ldv_emg_alias_seq_read_4)(ldv_33_resource_1,ldv_33_ldv_param_1_4,ldv_33_size_cnt,ldv_33_ldv_param_3_5);
      
#line 7836 
      ldv_free((void *)ldv_33_ldv_param_1_4);
      
#line 7837 
      ldv_free((void *)ldv_33_ldv_param_3_5);
    }
    
#line 7841 
    goto ldv_46928;
    default: 
#line 7843 
    ;
    
#line 7843 
    __VERIFIER_assume(0);
  }
  ldv_46928: 
#line 7852 
  ;
  
#line 7852 
  goto ldv_call_33;
  
#line 7854 
  __retres = (void *)0;
  return_label: 
#line 7854 
                return __retres;
}


#line 7859  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_irq(unsigned int arg0, void *arg1)
{
  int ldv_10_line;
  
#line 7865 
  ldv_10_line = (int)arg0;
  
#line 7869 
  ldv_dispatch_irq_deregister_10_1(ldv_10_line);
  
#line 7873 
  goto return_label;
  return_label: 
#line 7875 
                return;
}


#line 7880  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_dispatch_instance_deregister_7_1(struct timer_list *arg0)
{
  int ret;
  struct ldv_struct_timer_scenario_43 *cf_arg_43;
  int tmp;
  
#line 7883 
  tmp = ldv_undef_int();
  
#line 7883 
  switch (tmp) {
    case 0: 
#line 7884 
    ;
    
#line 7885 
    ret = pthread_join(ldv_thread_43,(void **)0);
    
#line 7886 
    __VERIFIER_assume(ret == 0);
    
#line 7887 
    goto ldv_46941;
    default: 
#line 7889 
    ;
    
#line 7889 
    __VERIFIER_assume(0);
  }
  ldv_46941: 
#line 7890 
  ;
  
#line 7891 
  return;
}


#line 7895  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_31(void *arg0)
{
  void *__retres;
  struct file *ldv_31_resource_1;
  int ldv_31_ldv_param_2_3;
  long long ldv_31_ldv_param_1_2;
  char *ldv_31_ldv_param_1_4;
  struct inode *ldv_31_resource_0;
  unsigned long ldv_31_size_cnt;
  long long *ldv_31_ldv_param_3_5;
  char *ldv_31_ldv_param_1_6;
  long long *ldv_31_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 7906 
  struct file_operations *ldv_31_container = ldv_emg_alias_cim_obq_fops_2;
  
#line 7907 
  int ldv_31_ret = ldv_undef_int();
  
#line 7910 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 7914 
  ldv_31_ret = ldv_undef_int();
  
#line 7917 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 7918 
    ldv_31_container = data->arg0;
    
#line 7919 
    ldv_free((void *)data);
  }
  else ;
  
#line 7924 
  ldv_31_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 7925 
  tmp_1 = ldv_undef_int();
  
#line 7925 
  ldv_31_size_cnt = (unsigned long)tmp_1;
  
#line 7932 
  goto ldv_main_31;
  
#line 7934 
  __retres = (void *)0;
  
#line 7934 
  goto return_label;
  ldv_main_31: 
#line 7937 
  ;
  
#line 7940 
  tmp_3 = ldv_undef_int();
  
#line 7940 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 7943 
    ldv_31_ret = ldv_emg_wrapper_cim_obq_open_3(ldv_31_resource_0,ldv_31_resource_1);
    
#line 7945 
    ldv_31_ret = ldv_filter_err_code(ldv_31_ret);
    
#line 7948 
    tmp_2 = ldv_undef_int();
    
#line 7948 
    if (tmp_2 != 0) {
      
#line 7950 
      __VERIFIER_assume(ldv_31_ret == 0);
      
#line 7957 
      goto ldv_call_31;
    }
    else {
      
#line 7961 
      __VERIFIER_assume(ldv_31_ret != 0);
      
#line 7968 
      goto ldv_main_31;
    }
  }
  else {
    
#line 7973 
    ldv_free((void *)ldv_31_resource_0);
    
#line 7981 
    __retres = (void *)0;
    
#line 7981 
    goto return_label;
  }
  
#line 7984 
  __retres = (void *)0;
  
#line 7984 
  goto return_label;
  ldv_call_31: 
#line 7987 
  ;
  
#line 7990 
  tmp_4 = ldv_undef_int();
  
#line 7990 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 7991 
    ;
    
#line 7993 
    ldv_31_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 7994 
    ldv_31_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 7998 
    if (ldv_31_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 8004 
      __VERIFIER_assume(ldv_31_size_cnt <= 2147479552UL);
      
#line 8006 
      (*(ldv_31_container->write))(ldv_31_resource_1,(char const *)ldv_31_ldv_param_1_6,ldv_31_size_cnt,ldv_31_ldv_param_3_7);
    }
    else ;
    
#line 8011 
    ldv_free((void *)ldv_31_ldv_param_3_7);
    
#line 8012 
    ldv_free((void *)ldv_31_ldv_param_1_6);
    
#line 8019 
    goto ldv_call_31;
    case 2: 
#line 8022 
    ;
    
#line 8025 
    seq_release_private(ldv_31_resource_0,ldv_31_resource_1);
    
#line 8032 
    goto ldv_main_31;
    case 3: 
#line 8035 
    ;
    
#line 8039 
    tmp_9 = ldv_undef_int();
    
#line 8039 
    if (tmp_9 != 0) 
#line 8042 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_31_resource_1,ldv_31_ldv_param_1_2,ldv_31_ldv_param_2_3);
    else {
      
#line 8048 
      ldv_31_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 8049 
      ldv_31_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 8054 
      (*ldv_emg_alias_seq_read_4)(ldv_31_resource_1,ldv_31_ldv_param_1_4,ldv_31_size_cnt,ldv_31_ldv_param_3_5);
      
#line 8058 
      ldv_free((void *)ldv_31_ldv_param_3_5);
      
#line 8059 
      ldv_free((void *)ldv_31_ldv_param_1_4);
    }
    
#line 8063 
    goto ldv_46963;
    default: 
#line 8065 
    ;
    
#line 8065 
    __VERIFIER_assume(0);
  }
  ldv_46963: 
#line 8074 
  ;
  
#line 8074 
  goto ldv_call_31;
  
#line 8076 
  __retres = (void *)0;
  return_label: 
#line 8076 
                return __retres;
}


#line 8081  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_character_driver_scenario_44(void *arg0)
{
  void *__retres;
  struct file *ldv_44_resource_1;
  int ldv_44_ldv_param_2_3;
  long long ldv_44_ldv_param_1_2;
  char *ldv_44_ldv_param_1_4;
  struct inode *ldv_44_resource_0;
  unsigned long ldv_44_size_cnt;
  long long *ldv_44_ldv_param_3_5;
  char *ldv_44_ldv_param_1_6;
  long long *ldv_44_ldv_param_3_7;
  int tmp_1;
  int tmp_3;
  int tmp_4;
  
#line 8092 
  struct file_operations *ldv_44_container = ldv_emg_alias_ulprx_la_fops_2;
  
#line 8093 
  int ldv_44_ret = ldv_undef_int();
  
#line 8096 
  struct ldv_struct_character_driver_scenario_19 *data = (struct ldv_struct_character_driver_scenario_19 *)arg0;
  
#line 8100 
  ldv_44_ret = ldv_undef_int();
  
#line 8103 
  if (data != (struct ldv_struct_character_driver_scenario_19 *)0) {
    
#line 8104 
    ldv_44_container = data->arg0;
    
#line 8105 
    ldv_free((void *)data);
  }
  else ;
  
#line 8110 
  ldv_44_resource_0 = (struct inode *)ldv_xmalloc_unknown_size(0UL);
  
#line 8111 
  tmp_1 = ldv_undef_int();
  
#line 8111 
  ldv_44_size_cnt = (unsigned long)tmp_1;
  
#line 8118 
  goto ldv_main_44;
  
#line 8120 
  __retres = (void *)0;
  
#line 8120 
  goto return_label;
  ldv_main_44: 
#line 8123 
  ;
  
#line 8126 
  tmp_3 = ldv_undef_int();
  
#line 8126 
  if (tmp_3 != 0) {
    int tmp_2;
    
#line 8129 
    ldv_44_ret = ldv_emg_wrapper_ulprx_la_open_3(ldv_44_resource_0,ldv_44_resource_1);
    
#line 8131 
    ldv_44_ret = ldv_filter_err_code(ldv_44_ret);
    
#line 8134 
    tmp_2 = ldv_undef_int();
    
#line 8134 
    if (tmp_2 != 0) {
      
#line 8136 
      __VERIFIER_assume(ldv_44_ret == 0);
      
#line 8143 
      goto ldv_call_44;
    }
    else {
      
#line 8147 
      __VERIFIER_assume(ldv_44_ret != 0);
      
#line 8154 
      goto ldv_main_44;
    }
  }
  else {
    
#line 8159 
    ldv_free((void *)ldv_44_resource_0);
    
#line 8167 
    __retres = (void *)0;
    
#line 8167 
    goto return_label;
  }
  
#line 8170 
  __retres = (void *)0;
  
#line 8170 
  goto return_label;
  ldv_call_44: 
#line 8173 
  ;
  
#line 8176 
  tmp_4 = ldv_undef_int();
  
#line 8176 
  switch (tmp_4) {
    int tmp_9;
    case 1: 
#line 8177 
    ;
    
#line 8179 
    ldv_44_ldv_param_3_7 = (long long *)ldv_xmalloc_unknown_size(0UL);
    
#line 8180 
    ldv_44_ldv_param_1_6 = (char *)ldv_xmalloc_unknown_size(0UL);
    
#line 8184 
    if (ldv_44_container->write != (ssize_t (*)(struct file *, char const *, size_t , loff_t *))0) {
      
#line 8190 
      __VERIFIER_assume(ldv_44_size_cnt <= 2147479552UL);
      
#line 8192 
      (*(ldv_44_container->write))(ldv_44_resource_1,(char const *)ldv_44_ldv_param_1_6,ldv_44_size_cnt,ldv_44_ldv_param_3_7);
    }
    else ;
    
#line 8197 
    ldv_free((void *)ldv_44_ldv_param_3_7);
    
#line 8198 
    ldv_free((void *)ldv_44_ldv_param_1_6);
    
#line 8205 
    goto ldv_call_44;
    case 2: 
#line 8208 
    ;
    
#line 8211 
    seq_release_private(ldv_44_resource_0,ldv_44_resource_1);
    
#line 8218 
    goto ldv_main_44;
    case 3: 
#line 8221 
    ;
    
#line 8225 
    tmp_9 = ldv_undef_int();
    
#line 8225 
    if (tmp_9 != 0) 
#line 8228 
                    (*ldv_emg_alias_seq_lseek_3)(ldv_44_resource_1,ldv_44_ldv_param_1_2,ldv_44_ldv_param_2_3);
    else {
      
#line 8234 
      ldv_44_ldv_param_1_4 = (char *)ldv_xmalloc_unknown_size(0UL);
      
#line 8235 
      ldv_44_ldv_param_3_5 = (long long *)ldv_xmalloc_unknown_size(0UL);
      
#line 8240 
      (*ldv_emg_alias_seq_read_4)(ldv_44_resource_1,ldv_44_ldv_param_1_4,ldv_44_size_cnt,ldv_44_ldv_param_3_5);
      
#line 8244 
      ldv_free((void *)ldv_44_ldv_param_1_4);
      
#line 8245 
      ldv_free((void *)ldv_44_ldv_param_3_5);
    }
    
#line 8249 
    goto ldv_46985;
    default: 
#line 8251 
    ;
    
#line 8251 
    __VERIFIER_assume(0);
  }
  ldv_46985: 
#line 8260 
  ;
  
#line 8260 
  goto ldv_call_44;
  
#line 8262 
  __retres = (void *)0;
  return_label: 
#line 8262 
                return __retres;
}


#line 8267  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void ldv_emg_free_netdev(struct net_device *arg0)
{
  struct net_device *ldv_2_netdev;
  
#line 8273 
  ldv_2_netdev = arg0;
  
#line 8274 
  ldv_free((void *)ldv_2_netdev);
  
#line 8278 
  goto return_label;
  return_label: 
#line 8280 
                return;
}


#line 8285  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
int ldv_emg_mod_timer(struct timer_list *arg0, unsigned long arg1)
{
  int __retres;
  struct timer_list *ldv_3_timer_list;
  int tmp_0;
  
#line 8292 
  tmp_0 = ldv_undef_int();
  
#line 8292 
  if (tmp_0 != 0) {
    
#line 8294 
    ldv_3_timer_list = arg0;
    
#line 8298 
    ldv_dispatch_instance_register_3_3(ldv_3_timer_list);
    
#line 8302 
    __retres = 0;
    
#line 8302 
    goto return_label;
  }
  else {
    int tmp;
    
#line 8309 
    tmp = ldv_undef_int_negative();
    
#line 8309 
    __retres = tmp;
    
#line 8309 
    goto return_label;
  }
  return_label: 
#line 8292 
                return __retres;
}


#line 8319  "/home/debian/klever-inst/klever-work/native-scheduler/scheduler/jobs/91e514eede894122cca4a9df4375a888/klever-core-work-dir/job/vtg/drivers/net/ethernet/chelsio/cxgb4/cxgb4.ko/linux:concurrency safety/emg/environment_model.c"
void *ldv_interrupt_scenario_30(void *arg0)
{
  void *__retres;
  enum irqreturn ldv_30_ret_val;
  int ldv_30_line;
  void *ldv_30_data;
  enum irqreturn (*ldv_30_thread)(int , void *);
  int tmp;
  
#line 8325 
  enum irqreturn (*ldv_30_callback)(int , void *) = & t4_sge_intr_msix;
  
#line 8328 
  struct ldv_struct_interrupt_scenario_22 *data = (struct ldv_struct_interrupt_scenario_22 *)arg0;
  
#line 8333 
  if (data != (struct ldv_struct_interrupt_scenario_22 *)0) {
    
#line 8334 
    ldv_30_line = data->arg0;
    
#line 8335 
    ldv_30_callback = data->arg1;
    
#line 8336 
    ldv_30_thread = data->arg2;
    
#line 8337 
    ldv_30_data = data->arg3;
    
#line 8338 
    ldv_free((void *)data);
  }
  else ;
  
#line 8344 
  ldv_switch_to_interrupt_context();
  
#line 8346 
  ldv_30_ret_val = t4_sge_intr_msix(ldv_30_line,ldv_30_data);
  
#line 8348 
  ldv_switch_to_process_context();
  
#line 8351 
  tmp = ldv_undef_int();
  
#line 8351 
  if (tmp != 0) {
    
#line 8353 
    __VERIFIER_assume(ldv_30_ret_val == (unsigned int)IRQ_WAKE_THREAD);
    
#line 8357 
    if (ldv_30_thread != (enum irqreturn (*)(int , void *))0) 
#line 8359 
                                                              (*ldv_30_thread)(ldv_30_line,ldv_30_data); else ;
  }
  else 
#line 8366 
       __VERIFIER_assume(ldv_30_ret_val != (unsigned int)IRQ_WAKE_THREAD);
  
#line 8375 
  __retres = (void *)0;
  
#line 8375 
  goto return_label;
  
#line 8377 
  __retres = (void *)0;
  return_label: 
#line 8377 
                return __retres;
}


